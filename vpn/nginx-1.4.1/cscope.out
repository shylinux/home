cscope 15 $HOME/vpn/nginx-1.4.1 -q 0000026755 0004032627
	@auto/lib/zlib/patch.zlib.h

1 --- 
	gzlib
.
h
 
Thu
 
	gJul
 9 20:06:56 1998

2 +++ 
zlib
-1.1.3/zlib.
h
 
Tue
 
M¨
 22 13:41:04 2005

4 (0 
ö
 
of
 
	gîr‹
).

7 -
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

	@src/core/nginx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
);

15 
ngx_öt_t
 
ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
);

16 
ngx_öt_t
 
ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
);

17 *
ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

18 *
ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

19 *
ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

20 *
ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

21 *
ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

22 *
ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_debug_poöts
[] = {

29 { 
ngx_°rög
("°›"), 
NGX_DEBUG_POINTS_STOP
 },

30 { 
ngx_°rög
("ab‹t"), 
NGX_DEBUG_POINTS_ABORT
 },

31 { 
ngx_nuŒ_°rög
, 0 }

35 
ngx_comm™d_t
 
	gngx_c‹e_comm™ds
[] = {

37 { 
ngx_°rög
("daemon"),

38 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

39 
ngx_c⁄f_£t_Êag_¶Ÿ
,

41 
off£tof
(
ngx_c‹e_c⁄f_t
, 
d´m⁄
),

42 
NULL
 },

44 { 
ngx_°rög
("master_process"),

45 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_FLAG
,

46 
ngx_c⁄f_£t_Êag_¶Ÿ
,

48 
off£tof
(
ngx_c‹e_c⁄f_t
, 
ma°î
),

49 
NULL
 },

51 { 
ngx_°rög
("timer_resolution"),

52 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_c⁄f_£t_m£c_¶Ÿ
,

55 
off£tof
(
ngx_c‹e_c⁄f_t
, 
timî_ªsﬁuti⁄
),

56 
NULL
 },

58 { 
ngx_°rög
("pid"),

59 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_°r_¶Ÿ
,

62 
off£tof
(
ngx_c‹e_c⁄f_t
, 
pid
),

63 
NULL
 },

65 { 
ngx_°rög
("lock_file"),

66 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_°r_¶Ÿ
,

69 
off£tof
(
ngx_c‹e_c⁄f_t
, 
lock_fûe
),

70 
NULL
 },

72 { 
ngx_°rög
("worker_processes"),

73 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_£t_w‹kî_¥o˚s£s
,

77 
NULL
 },

79 { 
ngx_°rög
("debug_points"),

80 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_íum_¶Ÿ
,

83 
off£tof
(
ngx_c‹e_c⁄f_t
, 
debug_poöts
),

84 &
ngx_debug_poöts
 },

86 { 
ngx_°rög
("user"),

87 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE12
,

88 
ngx_£t_u£r
,

91 
NULL
 },

93 { 
ngx_°rög
("worker_priority"),

94 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_£t_¥i‹ôy
,

98 
NULL
 },

100 { 
ngx_°rög
("worker_cpu_affinity"),

101 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_1MORE
,

102 
ngx_£t_˝u_afföôy
,

105 
NULL
 },

107 { 
ngx_°rög
("worker_rlimit_nofile"),

108 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

111 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_nofûe
),

112 
NULL
 },

114 { 
ngx_°rög
("worker_rlimit_core"),

115 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_off_¶Ÿ
,

118 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_c‹e
),

119 
NULL
 },

121 { 
ngx_°rög
("worker_rlimit_sigpending"),

122 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

125 
off£tof
(
ngx_c‹e_c⁄f_t
, 
æimô_sig≥ndög
),

126 
NULL
 },

128 { 
ngx_°rög
("working_directory"),

129 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_°r_¶Ÿ
,

132 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kög_dúe˘‹y
),

133 
NULL
 },

135 { 
ngx_°rög
("env"),

136 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_£t_ív
,

140 
NULL
 },

142 #i‡(
NGX_THREADS
)

144 { 
ngx_°rög
("worker_threads"),

145 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_num_¶Ÿ
,

148 
off£tof
(
ngx_c‹e_c⁄f_t
, 
w‹kî_thªads
),

149 
NULL
 },

151 { 
ngx_°rög
("thread_stack_size"),

152 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

155 
off£tof
(
ngx_c‹e_c⁄f_t
, 
thªad_°ack_size
),

156 
NULL
 },

160 
ngx_nuŒ_comm™d


164 
ngx_c‹e_moduÀ_t
 
	gngx_c‹e_moduÀ_˘x
 = {

165 
ngx_°rög
("core"),

166 
ngx_c‹e_moduÀ_¸óã_c⁄f
,

167 
ngx_c‹e_moduÀ_öô_c⁄f


171 
ngx_moduÀ_t
 
	gngx_c‹e_moduÀ
 = {

172 
NGX_MODULE_V1
,

173 &
ngx_c‹e_moduÀ_˘x
,

174 
ngx_c‹e_comm™ds
,

175 
NGX_CORE_MODULE
,

176 
NULL
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NGX_MODULE_V1_PADDING


187 
ngx_uöt_t
 
	gngx_max_moduÀ
;

189 
ngx_uöt_t
 
	gngx_show_hñp
;

190 
ngx_uöt_t
 
	gngx_show_vîsi⁄
;

191 
ngx_uöt_t
 
	gngx_show_c⁄figuª
;

192 
u_ch¨
 *
	gngx_¥efix
;

193 
u_ch¨
 *
	gngx_c⁄f_fûe
;

194 
u_ch¨
 *
	gngx_c⁄f_∑øms
;

195 *
	gngx_sig«l
;

198 **
	gngx_os_ívú⁄
;

201 
ngx_cde˛


202 
	$maö
(
¨gc
, *c⁄° *
¨gv
)

204 
ngx_öt_t
 
i
;

205 
ngx_log_t
 *
log
;

206 
ngx_cy˛e_t
 *
cy˛e
, 
öô_cy˛e
;

207 
ngx_c‹e_c⁄f_t
 *
ccf
;

209 
	`ngx_debug_öô
();

211 i‡(
	`ngx_°ªº‹_öô
(Ë!
NGX_OK
) {

215 i‡(
	`ngx_gë_›ti⁄s
(
¨gc
, 
¨gv
Ë!
NGX_OK
) {

219 i‡(
ngx_show_vîsi⁄
) {

220 
	`ngx_wrôe_°dîr
("ngöx vîsi⁄: " 
NGINX_VER
 
NGX_LINEFEED
);

222 i‡(
ngx_show_hñp
) {

223 
	`ngx_wrôe_°dîr
(

225 "[-∞¥efix] [-g dúe˘ives]" 
NGX_LINEFEED


226 
NGX_LINEFEED


227 "O±i⁄s:" 
NGX_LINEFEED


228 " -?,-h :Åhi†hñp" 
NGX_LINEFEED


229 " -v : show vîsi⁄ándÉxô" 
NGX_LINEFEED


231 
NGX_LINEFEED


232 " -à :Åe° c⁄figuøti⁄ándÉxô" 
NGX_LINEFEED


234 "durög c⁄figuøti⁄Åe°ög" 
NGX_LINEFEED


236 "°›, quô,Ñe›í,Ññﬂd" 
NGX_LINEFEED


237 #ifde‡
NGX_PREFIX


239 
NGX_PREFIX
 ")" 
NGX_LINEFEED


241 " -∞¥efix : sëÖªfixÖ©h (deÁu…: NONE)" 
NGX_LINEFEED


244 
NGX_CONF_PATH
 ")" 
NGX_LINEFEED


246 "fûe" 
NGX_LINEFEED
 NGX_LINEFEED

250 i‡(
ngx_show_c⁄figuª
) {

251 
	`ngx_wrôe_°dîr
(

252 #ifde‡
NGX_COMPILER


253 "buûàby " 
NGX_COMPILER
 
NGX_LINEFEED


255 #i‡(
NGX_SSL
)

256 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


257 "TLS SNI suµ‹àíabÀd" 
NGX_LINEFEED


259 "TLS SNI suµ‹àdißbÀd" 
NGX_LINEFEED


262 "c⁄figuªárgumíts:" 
NGX_CONFIGURE
 
NGX_LINEFEED
);

265 i‡(!
ngx_ã°_c⁄fig
) {

270  
ngx_max_sockës
 = -1;

272 
	`ngx_time_öô
();

274 #i‡(
NGX_PCRE
)

275 
	`ngx_ªgex_öô
();

278 
ngx_pid
 = 
	`ngx_gëpid
();

280 
log
 = 
	`ngx_log_öô
(
ngx_¥efix
);

281 i‡(
log
 =
NULL
) {

286 #i‡(
NGX_OPENSSL
)

287 
	`ngx_s¶_öô
(
log
);

295 
	`ngx_memzîo
(&
öô_cy˛e
, (
ngx_cy˛e_t
));

296 
öô_cy˛e
.
log
 =Üog;

297 
ngx_cy˛e
 = &
öô_cy˛e
;

299 
öô_cy˛e
.
poﬁ
 = 
	`ngx_¸óã_poﬁ
(1024, 
log
);

300 i‡(
öô_cy˛e
.
poﬁ
 =
NULL
) {

304 i‡(
	`ngx_ßve_¨gv
(&
öô_cy˛e
, 
¨gc
, 
¨gv
Ë!
NGX_OK
) {

308 i‡(
	`ngx_¥o˚ss_›ti⁄s
(&
öô_cy˛e
Ë!
NGX_OK
) {

312 i‡(
	`ngx_os_öô
(
log
Ë!
NGX_OK
) {

320 i‡(
	`ngx_¸c32_èbÀ_öô
(Ë!
NGX_OK
) {

324 i‡(
	`ngx_add_öhîôed_sockës
(&
öô_cy˛e
Ë!
NGX_OK
) {

328 
ngx_max_moduÀ
 = 0;

329 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

330 
ngx_moduÀs
[
i
]->
ödex
 = 
ngx_max_moduÀ
++;

333 
cy˛e
 = 
	`ngx_öô_cy˛e
(&
öô_cy˛e
);

334 i‡(
cy˛e
 =
NULL
) {

335 i‡(
ngx_ã°_c⁄fig
) {

336 
	`ngx_log_°dîr
(0, "configuration file %sÅest failed",

337 
öô_cy˛e
.
c⁄f_fûe
.
d©a
);

343 i‡(
ngx_ã°_c⁄fig
) {

344 i‡(!
ngx_quõt_mode
) {

345 
	`ngx_log_°dîr
(0, "configuration file %sÅest is successful",

346 
cy˛e
->
c⁄f_fûe
.
d©a
);

352 i‡(
ngx_sig«l
) {

353  
	`ngx_sig«l_¥o˚ss
(
cy˛e
, 
ngx_sig«l
);

356 
	`ngx_os_°©us
(
cy˛e
->
log
);

358 
ngx_cy˛e
 = 
cy˛e
;

360 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

362 i‡(
ccf
->
ma°î
 && 
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

363 
ngx_¥o˚ss
 = 
NGX_PROCESS_MASTER
;

366 #i‡!(
NGX_WIN32
)

368 i‡(
	`ngx_öô_sig«ls
(
cy˛e
->
log
Ë!
NGX_OK
) {

372 i‡(!
ngx_öhîôed
 && 
ccf
->
d´m⁄
) {

373 i‡(
	`ngx_d´m⁄
(
cy˛e
->
log
Ë!
NGX_OK
) {

377 
ngx_d´m⁄ized
 = 1;

380 i‡(
ngx_öhîôed
) {

381 
ngx_d´m⁄ized
 = 1;

386 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
cy˛e
->
log
Ë!
NGX_OK
) {

390 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

392 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

393 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

394 
ngx_£t_°dîr_n
 " failed");

399 i‡(
log
->
fûe
->
fd
 !
ngx_°dîr
) {

400 i‡(
	`ngx_˛o£_fûe
(
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " built-inÜog failed");

406 
ngx_u£_°dîr
 = 0;

408 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE
) {

409 
	`ngx_sögÀ_¥o˚ss_cy˛e
(
cy˛e
);

412 
	`ngx_ma°î_¥o˚ss_cy˛e
(
cy˛e
);

416 
	}
}

419 
ngx_öt_t


420 
	$ngx_add_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

422 
u_ch¨
 *
p
, *
v
, *
öhîôed
;

423 
ngx_öt_t
 
s
;

424 
ngx_li°íög_t
 *
ls
;

426 
öhîôed
 = (
u_ch¨
 *Ë
	`gëív
(
NGINX_VAR
);

428 i‡(
öhîôed
 =
NULL
) {

429  
NGX_OK
;

432 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

433 "usög inhîôed sockë†‰om \"%s\"", 
öhîôed
);

435 i‡(
	`ngx_¨øy_öô
(&
cy˛e
->
li°íög
, cy˛e->
poﬁ
, 10,

436 (
ngx_li°íög_t
))

437 !
NGX_OK
)

439  
NGX_ERROR
;

442 
p
 = 
öhîôed
, 
v
 =Ö; *p;Ö++) {

443 i‡(*
p
 == ':' || *p == ';') {

444 
s
 = 
	`ngx_©oi
(
v
, 
p
 - v);

445 i‡(
s
 =
NGX_ERROR
) {

446 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

447 "övÆid sockëÇumbî \"%s\" i¿" 
NGINX_VAR


449 " o‡thêv¨übÀ", 
v
);

453 
v
 = 
p
 + 1;

455 
ls
 = 
	`ngx_¨øy_push
(&
cy˛e
->
li°íög
);

456 i‡(
ls
 =
NULL
) {

457  
NGX_ERROR
;

460 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

462 
ls
->
fd
 = (
ngx_sockë_t
Ë
s
;

466 
ngx_öhîôed
 = 1;

468  
	`ngx_£t_öhîôed_sockës
(
cy˛e
);

469 
	}
}

473 
	$ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
)

475 **
p
, **
ív
;

476 
ngx_°r_t
 *
v¨
;

477 
ngx_uöt_t
 
i
, 
n
;

478 
ngx_c‹e_c⁄f_t
 *
ccf
;

480 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

482 i‡(
œ°
 =
NULL
 && 
ccf
->
ívú⁄mít
) {

483  
ccf
->
ívú⁄mít
;

486 
v¨
 = 
ccf
->
ív
.
ñts
;

488 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

489 i‡(
	`ngx_°rcmp
(
v¨
[
i
].
d©a
, "TZ") == 0

490 || 
	`ngx_°∫cmp
(
v¨
[
i
].
d©a
, "TZ=", 3) == 0)

492 
tz_found
;

496 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

497 i‡(
v¨
 =
NULL
) {

498  
NULL
;

501 
v¨
->
Àn
 = 2;

502 
v¨
->
d©a
 = (
u_ch¨
 *) "TZ";

504 
v¨
 = 
ccf
->
ív
.
ñts
;

506 
tz_found
:

508 
n
 = 0;

510 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

512 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

513 
n
++;

517 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

519 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

520 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

522 
n
++;

528 i‡(
œ°
) {

529 
ív
 = 
	`ngx_Æloc
((*
œ°
 + 
n
 + 1Ë* (*), 
cy˛e
->
log
);

530 *
œ°
 = 
n
;

533 
ív
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
n
 + 1) * (*));

536 i‡(
ív
 =
NULL
) {

537  
NULL
;

540 
n
 = 0;

542 
i
 = 0; i < 
ccf
->
ív
.
√…s
; i++) {

544 i‡(
v¨
[
i
].
d©a
[v¨[i].
Àn
] == '=') {

545 
ív
[
n
++] = (*Ë
v¨
[
i
].
d©a
;

549 
p
 = 
ngx_os_ívú⁄
; *p;Ö++) {

551 i‡(
	`ngx_°∫cmp
(*
p
, 
v¨
[
i
].
d©a
, v¨[i].
Àn
) == 0

552 && (*
p
)[
v¨
[
i
].
Àn
] == '=')

554 
ív
[
n
++] = *
p
;

560 
ív
[
n
] = 
NULL
;

562 i‡(
œ°
 =
NULL
) {

563 
ccf
->
ívú⁄mít
 = 
ív
;

564 
ívú⁄
 = 
ív
;

567  
ív
;

568 
	}
}

571 
ngx_pid_t


572 
	$ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
)

574 **
ív
, *
v¨
;

575 
u_ch¨
 *
p
;

576 
ngx_uöt_t
 
i
, 
n
;

577 
ngx_pid_t
 
pid
;

578 
ngx_exec_˘x_t
 
˘x
;

579 
ngx_c‹e_c⁄f_t
 *
ccf
;

580 
ngx_li°íög_t
 *
ls
;

582 
	`ngx_memzîo
(&
˘x
, (
ngx_exec_˘x_t
));

584 
˘x
.
∑th
 = 
¨gv
[0];

585 
˘x
.
«me
 = "new binaryÖrocess";

586 
˘x
.
¨gv
 =árgv;

588 
n
 = 2;

589 
ív
 = 
	`ngx_£t_ívú⁄mít
(
cy˛e
, &
n
);

590 i‡(
ív
 =
NULL
) {

591  
NGX_INVALID_PID
;

594 
v¨
 = 
	`ngx_Æloc
((
NGINX_VAR
)

595 + 
cy˛e
->
li°íög
.
√…s
 * (
NGX_INT32_LEN
 + 1) + 2,

596 
cy˛e
->
log
);

597 i‡(
v¨
 =
NULL
) {

598 
	`ngx_‰ì
(
ív
);

599  
NGX_INVALID_PID
;

602 
p
 = 
	`ngx_˝ymem
(
v¨
, 
NGINX_VAR
 "=", (NGINX_VAR));

604 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

605 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

606 
p
 = 
	`ngx_•rötf
’, "%ud;", 
ls
[
i
].
fd
);

609 *
p
 = '\0';

611 
ív
[
n
++] = 
v¨
;

613 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

617 
ív
[
n
++] = "SPARE=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX"

625 
ív
[
n
] = 
NULL
;

627 #i‡(
NGX_DEBUG
)

629 **
e
;

630 
e
 = 
ív
; *e;É++) {

631 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "ív: %s", *
e
);

636 
˘x
.
ívp
 = (*c⁄° *Ë
ív
;

638 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

640 i‡(
	`ngx_ª«me_fûe
(
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©aË=
NGX_FILE_ERROR
) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

642 
ngx_ª«me_fûe_n
 " %sÅo %s failed "

644 
ccf
->
pid
.
d©a
, ccf->
ﬁdpid
.d©a, 
¨gv
[0]);

646 
	`ngx_‰ì
(
ív
);

647 
	`ngx_‰ì
(
v¨
);

649  
NGX_INVALID_PID
;

652 
pid
 = 
	`ngx_execuã
(
cy˛e
, &
˘x
);

654 i‡(
pid
 =
NGX_INVALID_PID
) {

655 i‡(
	`ngx_ª«me_fûe
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.data)

656 =
NGX_FILE_ERROR
)

658 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

659 
ngx_ª«me_fûe_n
 " %s backÅo %s failedáfter "

661 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
¨gv
[0]);

665 
	`ngx_‰ì
(
ív
);

666 
	`ngx_‰ì
(
v¨
);

668  
pid
;

669 
	}
}

672 
ngx_öt_t


673 
	$ngx_gë_›ti⁄s
(
¨gc
, *c⁄° *
¨gv
)

675 
u_ch¨
 *
p
;

676 
ngx_öt_t
 
i
;

678 
i
 = 1; i < 
¨gc
; i++) {

680 
p
 = (
u_ch¨
 *Ë
¨gv
[
i
];

682 i‡(*
p
++ != '-') {

683 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%s\"", 
¨gv
[
i
]);

684  
NGX_ERROR
;

687 *
p
) {

689 *
p
++) {

693 
ngx_show_vîsi⁄
 = 1;

694 
ngx_show_hñp
 = 1;

698 
ngx_show_vîsi⁄
 = 1;

702 
ngx_show_vîsi⁄
 = 1;

703 
ngx_show_c⁄figuª
 = 1;

707 
ngx_ã°_c⁄fig
 = 1;

711 
ngx_quõt_mode
 = 1;

715 i‡(*
p
) {

716 
ngx_¥efix
 = 
p
;

717 
√xt
;

720 i‡(
¨gv
[++
i
]) {

721 
ngx_¥efix
 = (
u_ch¨
 *Ë
¨gv
[
i
];

722 
√xt
;

725 
	`ngx_log_°dîr
(0, "option \"-p\"Ñequires directoryÇame");

726  
NGX_ERROR
;

729 i‡(*
p
) {

730 
ngx_c⁄f_fûe
 = 
p
;

731 
√xt
;

734 i‡(
¨gv
[++
i
]) {

735 
ngx_c⁄f_fûe
 = (
u_ch¨
 *Ë
¨gv
[
i
];

736 
√xt
;

739 
	`ngx_log_°dîr
(0, "option \"-c\"Ñequires fileÇame");

740  
NGX_ERROR
;

743 i‡(*
p
) {

744 
ngx_c⁄f_∑øms
 = 
p
;

745 
√xt
;

748 i‡(
¨gv
[++
i
]) {

749 
ngx_c⁄f_∑øms
 = (
u_ch¨
 *Ë
¨gv
[
i
];

750 
√xt
;

753 
	`ngx_log_°dîr
(0, "option \"-g\"ÑequiresÖarameter");

754  
NGX_ERROR
;

757 i‡(*
p
) {

758 
ngx_sig«l
 = (*Ë
p
;

760 } i‡(
¨gv
[++
i
]) {

761 
ngx_sig«l
 = 
¨gv
[
i
];

764 
	`ngx_log_°dîr
(0, "option \"-s\"ÑequiresÖarameter");

765  
NGX_ERROR
;

768 i‡(
	`ngx_°rcmp
(
ngx_sig«l
, "stop") == 0

769 || 
	`ngx_°rcmp
(
ngx_sig«l
, "quit") == 0

770 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reopen") == 0

771 || 
	`ngx_°rcmp
(
ngx_sig«l
, "reload") == 0)

773 
ngx_¥o˚ss
 = 
NGX_PROCESS_SIGNALLER
;

774 
√xt
;

777 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"-†%s\"", 
ngx_sig«l
);

778  
NGX_ERROR
;

781 
	`ngx_log_°dîr
(0, "övÆid o±i⁄: \"%c\"", *(
p
 - 1));

782  
NGX_ERROR
;

786 
√xt
:

791  
NGX_OK
;

792 
	}
}

795 
ngx_öt_t


796 
	$ngx_ßve_¨gv
(
ngx_cy˛e_t
 *
cy˛e
, 
¨gc
, *c⁄° *
¨gv
)

798 #i‡(
NGX_FREEBSD
)

800 
ngx_os_¨gv
 = (**Ë
¨gv
;

801 
ngx_¨gc
 = 
¨gc
;

802 
ngx_¨gv
 = (**Ë
¨gv
;

805 
size_t
 
Àn
;

806 
ngx_öt_t
 
i
;

808 
ngx_os_¨gv
 = (**Ë
¨gv
;

809 
ngx_¨gc
 = 
¨gc
;

811 
ngx_¨gv
 = 
	`ngx_Æloc
((
¨gc
 + 1Ë* (*), 
cy˛e
->
log
);

812 i‡(
ngx_¨gv
 =
NULL
) {

813  
NGX_ERROR
;

816 
i
 = 0; i < 
¨gc
; i++) {

817 
Àn
 = 
	`ngx_°æí
(
¨gv
[
i
]) + 1;

819 
ngx_¨gv
[
i
] = 
	`ngx_Æloc
(
Àn
, 
cy˛e
->
log
);

820 i‡(
ngx_¨gv
[
i
] =
NULL
) {

821  
NGX_ERROR
;

824 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_¨gv
[
i
], (u_ch¨ *Ë
¨gv
[i], 
Àn
);

827 
ngx_¨gv
[
i
] = 
NULL
;

831 
ngx_os_ívú⁄
 = 
ívú⁄
;

833  
NGX_OK
;

834 
	}
}

837 
ngx_öt_t


838 
	$ngx_¥o˚ss_›ti⁄s
(
ngx_cy˛e_t
 *
cy˛e
)

840 
u_ch¨
 *
p
;

841 
size_t
 
Àn
;

843 i‡(
ngx_¥efix
) {

844 
Àn
 = 
	`ngx_°æí
(
ngx_¥efix
);

845 
p
 = 
ngx_¥efix
;

847 i‡(
Àn
 && !
	`ngx_∑th_£∑øt‹
(
p
[len - 1])) {

848 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 1);

849 i‡(
p
 =
NULL
) {

850  
NGX_ERROR
;

853 
	`ngx_mem˝y
(
p
, 
ngx_¥efix
, 
Àn
);

854 
p
[
Àn
++] = '/';

857 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

858 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

859 
cy˛e
->
¥efix
.
Àn
 =Üen;

860 
cy˛e
->
¥efix
.
d©a
 = 
p
;

864 #i‚de‡
NGX_PREFIX


866 
p
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
NGX_MAX_PATH
);

867 i‡(
p
 =
NULL
) {

868  
NGX_ERROR
;

871 i‡(
	`ngx_gëcwd
(
p
, 
NGX_MAX_PATH
) == 0) {

872 
	`ngx_log_°dîr
(
ngx_î∫o
, "[emîg]: " 
ngx_gëcwd_n
 " failed");

873  
NGX_ERROR
;

876 
Àn
 = 
	`ngx_°æí
(
p
);

878 
p
[
Àn
++] = '/';

880 
cy˛e
->
c⁄f_¥efix
.
Àn
 =Üen;

881 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
p
;

882 
cy˛e
->
¥efix
.
Àn
 =Üen;

883 
cy˛e
->
¥efix
.
d©a
 = 
p
;

887 #ifde‡
NGX_CONF_PREFIX


888 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_CONF_PREFIX
);

890 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_¥efix
, 
NGX_PREFIX
);

892 
	`ngx_°r_£t
(&
cy˛e
->
¥efix
, 
NGX_PREFIX
);

897 i‡(
ngx_c⁄f_fûe
) {

898 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_fûe
);

899 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
ngx_c⁄f_fûe
;

902 
	`ngx_°r_£t
(&
cy˛e
->
c⁄f_fûe
, 
NGX_CONF_PATH
);

905 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &cy˛e->
c⁄f_fûe
, 0Ë!
NGX_OK
) {

906  
NGX_ERROR
;

909 
p
 = 
cy˛e
->
c⁄f_fûe
.
d©a
 + cy˛e->c⁄f_fûe.
Àn
 - 1;

910 
p
 > 
cy˛e
->
c⁄f_fûe
.
d©a
;

911 
p
--)

913 i‡(
	`ngx_∑th_£∑øt‹
(*
p
)) {

914 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
p
 - 
ngx_cy˛e
->
c⁄f_fûe
.
d©a
 + 1;

915 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
ngx_cy˛e
->
c⁄f_fûe
.data;

920 i‡(
ngx_c⁄f_∑øms
) {

921 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
	`ngx_°æí
(
ngx_c⁄f_∑øms
);

922 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
ngx_c⁄f_∑øms
;

925 i‡(
ngx_ã°_c⁄fig
) {

926 
cy˛e
->
log
->
log_Àvñ
 = 
NGX_LOG_INFO
;

929  
NGX_OK
;

930 
	}
}

934 
	$ngx_c‹e_moduÀ_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

936 
ngx_c‹e_c⁄f_t
 *
ccf
;

938 
ccf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_c‹e_c⁄f_t
));

939 i‡(
ccf
 =
NULL
) {

940  
NULL
;

953 
ccf
->
d´m⁄
 = 
NGX_CONF_UNSET
;

954 
ccf
->
ma°î
 = 
NGX_CONF_UNSET
;

955 
ccf
->
timî_ªsﬁuti⁄
 = 
NGX_CONF_UNSET_MSEC
;

957 
ccf
->
w‹kî_¥o˚s£s
 = 
NGX_CONF_UNSET
;

958 
ccf
->
debug_poöts
 = 
NGX_CONF_UNSET
;

960 
ccf
->
æimô_nofûe
 = 
NGX_CONF_UNSET
;

961 
ccf
->
æimô_c‹e
 = 
NGX_CONF_UNSET
;

962 
ccf
->
æimô_sig≥ndög
 = 
NGX_CONF_UNSET
;

964 
ccf
->
u£r
 = (
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
;

965 
ccf
->
group
 = (
ngx_gid_t
Ë
NGX_CONF_UNSET_UINT
;

967 #i‡(
NGX_THREADS
)

968 
ccf
->
w‹kî_thªads
 = 
NGX_CONF_UNSET
;

969 
ccf
->
thªad_°ack_size
 = 
NGX_CONF_UNSET_SIZE
;

972 i‡(
	`ngx_¨øy_öô
(&
ccf
->
ív
, 
cy˛e
->
poﬁ
, 1, (
ngx_°r_t
))

973 !
NGX_OK
)

975  
NULL
;

978  
ccf
;

979 
	}
}

983 
	$ngx_c‹e_moduÀ_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

985 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

987 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
d´m⁄
, 1);

988 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
ma°î
, 1);

989 
	`ngx_c⁄f_öô_m£c_vÆue
(
ccf
->
timî_ªsﬁuti⁄
, 0);

991 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_¥o˚s£s
, 1);

992 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
debug_poöts
, 0);

994 #i‡(
NGX_HAVE_CPU_AFFINITY
)

996 i‡(
ccf
->
˝u_afföôy_n


997 && 
ccf
->
˝u_afföôy_n
 != 1

998 && 
ccf
->
˝u_afföôy_n
 !(
ngx_uöt_t
Ëccf->
w‹kî_¥o˚s£s
)

1000 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

1008 #i‡(
NGX_THREADS
)

1010 
	`ngx_c⁄f_öô_vÆue
(
ccf
->
w‹kî_thªads
, 0);

1011 
ngx_thªads_n
 = 
ccf
->
w‹kî_thªads
;

1012 
	`ngx_c⁄f_öô_size_vÆue
(
ccf
->
thªad_°ack_size
, 2 * 1024 * 1024);

1017 i‡(
ccf
->
pid
.
Àn
 == 0) {

1018 
	`ngx_°r_£t
(&
ccf
->
pid
, 
NGX_PID_PATH
);

1021 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
pid
, 0Ë!
NGX_OK
) {

1022  
NGX_CONF_ERROR
;

1025 
ccf
->
ﬁdpid
.
Àn
 = ccf->
pid
.À¿+ (
NGX_OLDPID_EXT
);

1027 
ccf
->
ﬁdpid
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, ccf->ﬁdpid.
Àn
);

1028 i‡(
ccf
->
ﬁdpid
.
d©a
 =
NULL
) {

1029  
NGX_CONF_ERROR
;

1032 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, ccf->pid.
Àn
),

1033 
NGX_OLDPID_EXT
, (NGX_OLDPID_EXT));

1036 #i‡!(
NGX_WIN32
)

1038 i‡(
ccf
->
u£r
 =(
uid_t
Ë
NGX_CONF_UNSET_UINT
 && 
	`gëeuid
() == 0) {

1039 
group
 *
gΩ
;

1040 
∑sswd
 *
pwd
;

1042 
	`ngx_£t_î∫o
(0);

1043 
pwd
 = 
	`gëpw«m
(
NGX_USER
);

1044 i‡(
pwd
 =
NULL
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1046 "gëpw«m(\"" 
NGX_USER
 "\") failed");

1047  
NGX_CONF_ERROR
;

1050 
ccf
->
u£∫ame
 = 
NGX_USER
;

1051 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1053 
	`ngx_£t_î∫o
(0);

1054 
gΩ
 = 
	`gëg∫am
(
NGX_GROUP
);

1055 i‡(
gΩ
 =
NULL
) {

1056 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1057 "gëg∫am(\"" 
NGX_GROUP
 "\") failed");

1058  
NGX_CONF_ERROR
;

1061 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1065 i‡(
ccf
->
lock_fûe
.
Àn
 == 0) {

1066 
	`ngx_°r_£t
(&
ccf
->
lock_fûe
, 
NGX_LOCK_PATH
);

1069 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
ccf
->
lock_fûe
, 0Ë!
NGX_OK
) {

1070  
NGX_CONF_ERROR
;

1074 
ngx_°r_t
 
lock_fûe
;

1076 
lock_fûe
 = 
cy˛e
->
ﬁd_cy˛e
->lock_file;

1078 i‡(
lock_fûe
.
Àn
) {

1079 
lock_fûe
.
Àn
--;

1081 i‡(
ccf
->
lock_fûe
.
Àn
 !=Üock_file.len

1082 || 
	`ngx_°∫cmp
(
ccf
->
lock_fûe
.
d©a
,Üock_fûe.d©a,Üock_fûe.
Àn
)

1085 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1089 
cy˛e
->
lock_fûe
.
Àn
 =Üock_file.len + 1;

1090 
lock_fûe
.
Àn
 += (".accept");

1092 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_p°rdup
(cy˛e->
poﬁ
, &lock_file);

1093 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1094  
NGX_CONF_ERROR
;

1098 
cy˛e
->
lock_fûe
.
Àn
 = 
ccf
->lock_file.len + 1;

1099 
cy˛e
->
lock_fûe
.
d©a
 = 
	`ngx_≤Æloc
(cy˛e->
poﬁ
,

1100 
ccf
->
lock_fûe
.
Àn
 + (".accept"));

1101 i‡(
cy˛e
->
lock_fûe
.
d©a
 =
NULL
) {

1102  
NGX_CONF_ERROR
;

1105 
	`ngx_mem˝y
(
	`ngx_˝ymem
(
cy˛e
->
lock_fûe
.
d©a
, 
ccf
->lock_file.data,

1106 
ccf
->
lock_fûe
.
Àn
),

1113  
NGX_CONF_OK
;

1114 
	}
}

1118 
	$ngx_£t_u£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1120 #i‡(
NGX_WIN32
)

1122 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1125  
NGX_CONF_OK
;

1129 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1131 *
group
;

1132 
∑sswd
 *
pwd
;

1133 
group
 *
gΩ
;

1134 
ngx_°r_t
 *
vÆue
;

1136 i‡(
ccf
->
u£r
 !(
uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1140 i‡(
	`gëeuid
() != 0) {

1141 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1145  
NGX_CONF_OK
;

1148 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1150 
ccf
->
u£∫ame
 = (*Ë
vÆue
[1].
d©a
;

1152 
	`ngx_£t_î∫o
(0);

1153 
pwd
 = 
	`gëpw«m
((c⁄° *Ë
vÆue
[1].
d©a
);

1154 i‡(
pwd
 =
NULL
) {

1155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1156 "gëpw«m(\"%s\"ËÁûed", 
vÆue
[1].
d©a
);

1157  
NGX_CONF_ERROR
;

1160 
ccf
->
u£r
 = 
pwd
->
pw_uid
;

1162 
group
 = (*Ë((
cf
->
¨gs
->
√…s
 =2Ë? 
vÆue
[1].
d©a
 : value[2].data);

1164 
	`ngx_£t_î∫o
(0);

1165 
gΩ
 = 
	`gëg∫am
(
group
);

1166 i‡(
gΩ
 =
NULL
) {

1167 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

1168 "gëg∫am(\"%s\"ËÁûed", 
group
);

1169  
NGX_CONF_ERROR
;

1172 
ccf
->
group
 = 
gΩ
->
gr_gid
;

1174  
NGX_CONF_OK
;

1177 
	}
}

1181 
	$ngx_£t_ív
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1183 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1185 
ngx_°r_t
 *
vÆue
, *
v¨
;

1186 
ngx_uöt_t
 
i
;

1188 
v¨
 = 
	`ngx_¨øy_push
(&
ccf
->
ív
);

1189 i‡(
v¨
 =
NULL
) {

1190  
NGX_CONF_ERROR
;

1193 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1194 *
v¨
 = 
vÆue
[1];

1196 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

1198 i‡(
vÆue
[1].
d©a
[
i
] == '=') {

1200 
v¨
->
Àn
 = 
i
;

1202  
NGX_CONF_OK
;

1206  
NGX_CONF_OK
;

1207 
	}
}

1211 
	$ngx_£t_¥i‹ôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1213 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1215 
ngx_°r_t
 *
vÆue
;

1216 
ngx_uöt_t
 
n
, 
möus
;

1218 i‡(
ccf
->
¥i‹ôy
 != 0) {

1222 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1224 i‡(
vÆue
[1].
d©a
[0] == '-') {

1225 
n
 = 1;

1226 
möus
 = 1;

1228 } i‡(
vÆue
[1].
d©a
[0] == '+') {

1229 
n
 = 1;

1230 
möus
 = 0;

1233 
n
 = 0;

1234 
möus
 = 0;

1237 
ccf
->
¥i‹ôy
 = 
	`ngx_©oi
(&
vÆue
[1].
d©a
[
n
], vÆue[1].
Àn
 -Ç);

1238 i‡(
ccf
->
¥i‹ôy
 =
NGX_ERROR
) {

1242 i‡(
möus
) {

1243 
ccf
->
¥i‹ôy
 = -ccf->priority;

1246  
NGX_CONF_OK
;

1247 
	}
}

1251 
	$ngx_£t_˝u_afföôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1253 #i‡(
NGX_HAVE_CPU_AFFINITY
)

1254 
ngx_c‹e_c⁄f_t
 *
ccf
 = 
c⁄f
;

1256 
u_ch¨
 
ch
;

1257 
uöt64_t
 *
mask
;

1258 
ngx_°r_t
 *
vÆue
;

1259 
ngx_uöt_t
 
i
, 
n
;

1261 i‡(
ccf
->
˝u_afföôy
) {

1265 
mask
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (cf->
¨gs
->
√…s
 - 1Ë* (
uöt64_t
));

1266 i‡(
mask
 =
NULL
) {

1267  
NGX_CONF_ERROR
;

1270 
ccf
->
˝u_afföôy_n
 = 
cf
->
¨gs
->
√…s
 - 1;

1271 
ccf
->
˝u_afföôy
 = 
mask
;

1273 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1275 
n
 = 1;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

1277 i‡(
vÆue
[
n
].
Àn
 > 64) {

1278 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1280  
NGX_CONF_ERROR
;

1283 
mask
[
n
 - 1] = 0;

1285 
i
 = 0; i < 
vÆue
[
n
].
Àn
; i++) {

1287 
ch
 = 
vÆue
[
n
].
d©a
[
i
];

1289 i‡(
ch
 == ' ') {

1293 
mask
[
n
 - 1] <<= 1;

1295 i‡(
ch
 == '0') {

1299 i‡(
ch
 == '1') {

1300 
mask
[
n
 - 1] |= 1;

1304 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1306 
ch
);

1307  
NGX_CONF_ERROR
;

1313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1318  
NGX_CONF_OK
;

1319 
	}
}

1322 
uöt64_t


1323 
	$ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
)

1325 
ngx_c‹e_c⁄f_t
 *
ccf
;

1327 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

1328 
ngx_c‹e_moduÀ
);

1330 i‡(
ccf
->
˝u_afföôy
 =
NULL
) {

1334 i‡(
ccf
->
˝u_afföôy_n
 > 
n
) {

1335  
ccf
->
˝u_afföôy
[
n
];

1338  
ccf
->
˝u_afföôy
[ccf->
˝u_afföôy_n
 - 1];

1339 
	}
}

1343 
	$ngx_£t_w‹kî_¥o˚s£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1345 
ngx_°r_t
 *
vÆue
;

1346 
ngx_c‹e_c⁄f_t
 *
ccf
;

1348 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
c⁄f
;

1350 i‡(
ccf
->
w‹kî_¥o˚s£s
 !
NGX_CONF_UNSET
) {

1354 
vÆue
 = (
ngx_°r_t
 *Ë
cf
->
¨gs
->
ñts
;

1356 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "auto") == 0) {

1357 
ccf
->
w‹kî_¥o˚s£s
 = 
ngx_n˝u
;

1358  
NGX_CONF_OK
;

1361 
ccf
->
w‹kî_¥o˚s£s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1363 i‡(
ccf
->
w‹kî_¥o˚s£s
 =
NGX_ERROR
) {

1367  
NGX_CONF_OK
;

1368 
	}
}

	@src/core/nginx.h

8 #i‚de‡
_NGINX_H_INCLUDED_


9 
	#_NGINX_H_INCLUDED_


	)

12 
	#ngöx_vîsi⁄
 1004001

	)

13 
	#NGINX_VERSION
 "1.4.1"

	)

14 
	#NGINX_VER
 "ngöx/" 
NGINX_VERSION


	)

16 
	#NGINX_VAR
 "NGINX"

	)

17 
	#NGX_OLDPID_EXT
 ".ﬁdbö"

	)

	@src/core/ngx_array.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_¨øy_t
 *

13 
	$ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_¨øy_t
 *
a
;

17 
a
 = 
	`ngx_∑Œoc
(
p
, (
ngx_¨øy_t
));

18 i‡(
a
 =
NULL
) {

19  
NULL
;

22 i‡(
	`ngx_¨øy_öô
(
a
, 
p
, 
n
, 
size
Ë!
NGX_OK
) {

23  
NULL
;

26  
a
;

27 
	}
}

31 
	$ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
)

33 
ngx_poﬁ_t
 *
p
;

35 
p
 = 
a
->
poﬁ
;

37 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°
) {

38 
p
->
d
.
œ°
 -
a
->
size
 *á->
«Œoc
;

41 i‡((
u_ch¨
 *Ë
a
 + (
ngx_¨øy_t
Ë=
p
->
d
.
œ°
) {

42 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë
a
;

44 
	}
}

48 
	$ngx_¨øy_push
(
ngx_¨øy_t
 *
a
)

50 *
ñt
, *
√w
;

51 
size_t
 
size
;

52 
ngx_poﬁ_t
 *
p
;

54 i‡(
a
->
√…s
 =a->
«Œoc
) {

58 
size
 = 
a
->sizê*á->
«Œoc
;

60 
p
 = 
a
->
poﬁ
;

62 i‡((
u_ch¨
 *Ë
a
->
ñts
 + 
size
 =
p
->
d
.
œ°


63 && 
p
->
d
.
œ°
 + 
a
->
size
 <p->d.
íd
)

70 
p
->
d
.
œ°
 +
a
->
size
;

71 
a
->
«Œoc
++;

76 
√w
 = 
	`ngx_∑Œoc
(
p
, 2 * 
size
);

77 i‡(
√w
 =
NULL
) {

78  
NULL
;

81 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
, 
size
);

82 
a
->
ñts
 = 
√w
;

83 
a
->
«Œoc
 *= 2;

87 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

88 
a
->
√…s
++;

90  
ñt
;

91 
	}
}

95 
	$ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
)

97 *
ñt
, *
√w
;

98 
size_t
 
size
;

99 
ngx_uöt_t
 
«Œoc
;

100 
ngx_poﬁ_t
 *
p
;

102 
size
 = 
n
 * 
a
->size;

104 i‡(
a
->
√…s
 + 
n
 >á->
«Œoc
) {

108 
p
 = 
a
->
poﬁ
;

110 i‡((
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
«Œoc
 =
p
->
d
.
œ°


111 && 
p
->
d
.
œ°
 + 
size
 <p->d.
íd
)

118 
p
->
d
.
œ°
 +
size
;

119 
a
->
«Œoc
 +
n
;

124 
«Œoc
 = 2 * ((
n
 >
a
->nalloc) ?Ç :á->nalloc);

126 
√w
 = 
	`ngx_∑Œoc
(
p
, 
«Œoc
 * 
a
->
size
);

127 i‡(
√w
 =
NULL
) {

128  
NULL
;

131 
	`ngx_mem˝y
(
√w
, 
a
->
ñts
,á->
√…s
 *á->
size
);

132 
a
->
ñts
 = 
√w
;

133 
a
->
«Œoc
 =Çalloc;

137 
ñt
 = (
u_ch¨
 *Ë
a
->
ñts
 +á->
size
 *á->
√…s
;

138 
a
->
√…s
 +
n
;

140  
ñt
;

141 
	}
}

	@src/core/ngx_array.h

8 #i‚de‡
_NGX_ARRAY_H_INCLUDED_


9 
	#_NGX_ARRAY_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mñts
;

18 
ngx_uöt_t
 
	m√…s
;

19 
size_t
 
	msize
;

20 
ngx_uöt_t
 
	m«Œoc
;

21 
ngx_poﬁ_t
 *
	mpoﬁ
;

22 } 
	tngx_¨øy_t
;

25 
ngx_¨øy_t
 *
ngx_¨øy_¸óã
(
ngx_poﬁ_t
 *
p
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

26 
ngx_¨øy_de°roy
(
ngx_¨øy_t
 *
a
);

27 *
ngx_¨øy_push
(
ngx_¨øy_t
 *
a
);

28 *
ngx_¨øy_push_n
(
ngx_¨øy_t
 *
a
, 
ngx_uöt_t
 
n
);

31 
ngx_ölöe
 
ngx_öt_t


32 
	$ngx_¨øy_öô
(
ngx_¨øy_t
 *
¨øy
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
¨øy
->
√…s
 = 0;

40 
¨øy
->
size
 = size;

41 
¨øy
->
«Œoc
 = 
n
;

42 
¨øy
->
poﬁ
 =Öool;

44 
¨øy
->
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

45 i‡(
¨øy
->
ñts
 =
NULL
) {

46  
NGX_ERROR
;

49  
NGX_OK
;

50 
	}
}

	@src/core/ngx_buf.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_buf_t
 *

13 
	$ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

15 
ngx_buf_t
 *
b
;

17 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

18 i‡(
b
 =
NULL
) {

19  
NULL
;

22 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

23 i‡(
b
->
°¨t
 =
NULL
) {

24  
NULL
;

38 
b
->
pos
 = b->
°¨t
;

39 
b
->
œ°
 = b->
°¨t
;

40 
b
->
íd
 = b->
œ°
 + 
size
;

41 
b
->
ãmp‹¨y
 = 1;

43  
b
;

44 
	}
}

47 
ngx_chaö_t
 *

48 
	$ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
)

50 
ngx_chaö_t
 *
˛
;

52 
˛
 = 
poﬁ
->
chaö
;

54 i‡(
˛
) {

55 
poﬁ
->
chaö
 = 
˛
->
√xt
;

56  
˛
;

59 
˛
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_chaö_t
));

60 i‡(
˛
 =
NULL
) {

61  
NULL
;

64  
˛
;

65 
	}
}

68 
ngx_chaö_t
 *

69 
	$ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
)

71 
u_ch¨
 *
p
;

72 
ngx_öt_t
 
i
;

73 
ngx_buf_t
 *
b
;

74 
ngx_chaö_t
 *
chaö
, *
˛
, **
Œ
;

76 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
bufs
->
num
 * bufs->
size
);

77 i‡(
p
 =
NULL
) {

78  
NULL
;

81 
Œ
 = &
chaö
;

83 
i
 = 0; i < 
bufs
->
num
; i++) {

85 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

86 i‡(
b
 =
NULL
) {

87  
NULL
;

102 
b
->
pos
 = 
p
;

103 
b
->
œ°
 = 
p
;

104 
b
->
ãmp‹¨y
 = 1;

106 
b
->
°¨t
 = 
p
;

107 
p
 +
bufs
->
size
;

108 
b
->
íd
 = 
p
;

110 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

111 i‡(
˛
 =
NULL
) {

112  
NULL
;

115 
˛
->
buf
 = 
b
;

116 *
Œ
 = 
˛
;

117 
Œ
 = &
˛
->
√xt
;

120 *
Œ
 = 
NULL
;

122  
chaö
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
)

129 
ngx_chaö_t
 *
˛
, **
Œ
;

131 
Œ
 = 
chaö
;

133 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

134 
Œ
 = &
˛
->
√xt
;

137 
ö
) {

138 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

139 i‡(
˛
 =
NULL
) {

140  
NGX_ERROR
;

143 
˛
->
buf
 = 
ö
->buf;

144 *
Œ
 = 
˛
;

145 
Œ
 = &
˛
->
√xt
;

146 
ö
 = in->
√xt
;

149 *
Œ
 = 
NULL
;

151  
NGX_OK
;

152 
	}
}

155 
ngx_chaö_t
 *

156 
	$ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
)

158 
ngx_chaö_t
 *
˛
;

160 i‡(*
‰ì
) {

161 
˛
 = *
‰ì
;

162 *
‰ì
 = 
˛
->
√xt
;

163 
˛
->
√xt
 = 
NULL
;

164  
˛
;

167 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
);

168 i‡(
˛
 =
NULL
) {

169  
NULL
;

172 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
p
);

173 i‡(
˛
->
buf
 =
NULL
) {

174  
NULL
;

177 
˛
->
√xt
 = 
NULL
;

179  
˛
;

180 
	}
}

184 
	$ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,Çgx_chaö_à**
busy
,

185 
ngx_chaö_t
 **
out
, 
ngx_buf_èg_t
 
èg
)

187 
ngx_chaö_t
 *
˛
;

189 i‡(*
busy
 =
NULL
) {

190 *
busy
 = *
out
;

193 
˛
 = *
busy
; cl->
√xt
; cl = cl->next) { }

195 
˛
->
√xt
 = *
out
;

198 *
out
 = 
NULL
;

200 *
busy
) {

201 
˛
 = *
busy
;

203 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

207 i‡(
˛
->
buf
->
èg
 !=Åag) {

208 *
busy
 = 
˛
->
√xt
;

209 
	`ngx_‰ì_chaö
(
p
, 
˛
);

213 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

214 
˛
->
buf
->
œ°
 = cl->buf->
°¨t
;

216 *
busy
 = 
˛
->
√xt
;

217 
˛
->
√xt
 = *
‰ì
;

218 *
‰ì
 = 
˛
;

220 
	}
}

	@src/core/ngx_buf.h

8 #i‚de‡
_NGX_BUF_H_INCLUDED_


9 
	#_NGX_BUF_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 * 
	tngx_buf_èg_t
;

18 
ngx_buf_s
 
	tngx_buf_t
;

20 
	sngx_buf_s
 {

21 
u_ch¨
 *
	mpos
;

22 
u_ch¨
 *
	mœ°
;

23 
off_t
 
	mfûe_pos
;

24 
off_t
 
	mfûe_œ°
;

26 
u_ch¨
 *
	m°¨t
;

27 
u_ch¨
 *
	míd
;

28 
ngx_buf_èg_t
 
	mèg
;

29 
ngx_fûe_t
 *
	mfûe
;

30 
ngx_buf_t
 *
	mshadow
;

34 
	mãmp‹¨y
:1;

40 
	mmem‹y
:1;

43 
	mmm≠
:1;

45 
	mªcy˛ed
:1;

46 
	mö_fûe
:1;

47 
	mÊush
:1;

48 
	msync
:1;

49 
	mœ°_buf
:1;

50 
	mœ°_ö_chaö
:1;

52 
	mœ°_shadow
:1;

53 
	mãmp_fûe
:1;

55  
	mnum
;

59 
	sngx_chaö_s
 {

60 
ngx_buf_t
 *
	mbuf
;

61 
ngx_chaö_t
 *
	m√xt
;

66 
ngx_öt_t
 
	mnum
;

67 
size_t
 
	msize
;

68 } 
	tngx_bufs_t
;

71 
ngx_ouçut_chaö_˘x_s
 
	tngx_ouçut_chaö_˘x_t
;

73 
	$ngx_öt_t
 (*
	tngx_ouçut_chaö_fûãr_±
)(*
	t˘x
, 
	tngx_chaö_t
 *
	tö
);

75 #i‡(
NGX_HAVE_FILE_AIO
)

76 (*
	tngx_ouçut_chaö_aio_±
)(
	tngx_ouçut_chaö_˘x_t
 *
	t˘x
,

77 
	tngx_fûe_t
 *
	tfûe
);

80 
	sngx_ouçut_chaö_˘x_s
 {

81 
ngx_buf_t
 *
buf
;

82 
ngx_chaö_t
 *
ö
;

83 
ngx_chaö_t
 *
‰ì
;

84 
ngx_chaö_t
 *
busy
;

86 
£ndfûe
:1;

87 
dúe˘io
:1;

88 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

89 
u«lig√d
:1;

91 
√ed_ö_mem‹y
:1;

92 
√ed_ö_ãmp
:1;

93 #i‡(
NGX_HAVE_FILE_AIO
)

94 
aio
:1;

96 
ngx_ouçut_chaö_aio_±
 
aio_h™dÀr
;

99 
off_t
 
Æignmít
;

101 
ngx_poﬁ_t
 *
poﬁ
;

102 
ngx_öt_t
 
Æloˇãd
;

103 
ngx_bufs_t
 
bufs
;

104 
ngx_buf_èg_t
 
èg
;

106 
ngx_ouçut_chaö_fûãr_±
 
ouçut_fûãr
;

107 *
fûãr_˘x
;

112 
ngx_chaö_t
 *
out
;

113 
ngx_chaö_t
 **
œ°
;

114 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

115 
ngx_poﬁ_t
 *
poﬁ
;

116 
off_t
 
limô
;

117 } 
	tngx_chaö_wrôî_˘x_t
;

120 
	#NGX_CHAIN_ERROR
 (
ngx_chaö_t
 *Ë
NGX_ERROR


	)

123 
	#ngx_buf_ö_mem‹y
(
b
Ë(b->
ãmp‹¨y
 || b->
mem‹y
 || b->
mm≠
)

	)

124 
	#ngx_buf_ö_mem‹y_⁄ly
(
b
Ë(
	`ngx_buf_ö_mem‹y
(bË&& !b->
ö_fûe
)

	)

126 
	#ngx_buf_•ecül
(
b
) \

127 ((
b
->
Êush
 || b->
œ°_buf
 || b->
sync
) \

128 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
)

	)

130 
	#ngx_buf_sync_⁄ly
(
b
) \

131 (
b
->
sync
 \

132 && !
	`ngx_buf_ö_mem‹y
(
b
Ë&& !b->
ö_fûe
 && !b->
Êush
 && !b->
œ°_buf
)

	)

134 
	#ngx_buf_size
(
b
) \

135 (
	`ngx_buf_ö_mem‹y
(
b
Ë? (
off_t
Ë(b->
œ°
 - b->
pos
): \

136 (
b
->
fûe_œ°
 - b->
fûe_pos
))

	)

138 
ngx_buf_t
 *
	`ngx_¸óã_ãmp_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

139 
ngx_chaö_t
 *
	`ngx_¸óã_chaö_of_bufs
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_bufs_t
 *
bufs
);

142 
	#ngx_Æloc_buf
(
poﬁ
Ë
	`ngx_∑Œoc
’oﬁ, (
ngx_buf_t
))

	)

143 
	#ngx_ˇŒoc_buf
(
poﬁ
Ë
	`ngx_pˇŒoc
’oﬁ, (
ngx_buf_t
))

	)

145 
ngx_chaö_t
 *
	`ngx_Æloc_chaö_lök
(
ngx_poﬁ_t
 *
poﬁ
);

146 
	#ngx_‰ì_chaö
(
poﬁ
, 
˛
) \

147 
˛
->
√xt
 = 
poﬁ
->
chaö
; \

148 
poﬁ
->
chaö
 = 
˛


	)

152 
ngx_öt_t
 
	`ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

153 
ngx_öt_t
 
	`ngx_chaö_wrôî
(*
˘x
, 
ngx_chaö_t
 *
ö
);

155 
ngx_öt_t
 
	`ngx_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

156 
ngx_chaö_t
 *
ö
);

157 
ngx_chaö_t
 *
	`ngx_chaö_gë_‰ì_buf
(
ngx_poﬁ_t
 *
p
,Çgx_chaö_à**
‰ì
);

158 
	`ngx_chaö_upd©e_chaös
(
ngx_poﬁ_t
 *
p
, 
ngx_chaö_t
 **
‰ì
,

159 
ngx_chaö_t
 **
busy
,Çgx_chaö_à**
out
, 
ngx_buf_èg_t
 
èg
);

	@src/core/ngx_conf_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

11 
	#NGX_CONF_BUFFER
 4096

	)

13 
ngx_öt_t
 
ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
,Çgx_öt_à
œ°
);

14 
ngx_öt_t
 
ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
);

16 
ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
);

19 
ngx_comm™d_t
 
	gngx_c⁄f_comm™ds
[] = {

21 { 
ngx_°rög
("include"),

22 
NGX_ANY_CONF
|
NGX_CONF_TAKE1
,

23 
ngx_c⁄f_ö˛ude
,

26 
NULL
 },

28 
ngx_nuŒ_comm™d


32 
ngx_moduÀ_t
 
	gngx_c⁄f_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 
NULL
,

35 
ngx_c⁄f_comm™ds
,

36 
NGX_CONF_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
ngx_c⁄f_Êush_fûes
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


50 
ngx_uöt_t
 
	g¨gumít_numbî
[] = {

51 
NGX_CONF_NOARGS
,

52 
NGX_CONF_TAKE1
,

53 
NGX_CONF_TAKE2
,

54 
NGX_CONF_TAKE3
,

55 
NGX_CONF_TAKE4
,

56 
NGX_CONF_TAKE5
,

57 
NGX_CONF_TAKE6
,

58 
NGX_CONF_TAKE7


63 
	$ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
)

65 *
rv
;

66 
ngx_°r_t
 *
∑øm
;

67 
ngx_buf_t
 
b
;

68 
ngx_c⁄f_fûe_t
 
c⁄f_fûe
;

70 
∑øm
 = &
cf
->
cy˛e
->
c⁄f_∑øm
;

72 i‡(
∑øm
->
Àn
 == 0) {

73  
NGX_CONF_OK
;

76 
	`ngx_memzîo
(&
c⁄f_fûe
, (
ngx_c⁄f_fûe_t
));

78 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

80 
b
.
°¨t
 = 
∑øm
->
d©a
;

81 
b
.
pos
 = 
∑øm
->
d©a
;

82 
b
.
œ°
 = 
∑øm
->
d©a
 +Ö¨am->
Àn
;

83 
b
.
íd
 = b.
œ°
;

84 
b
.
ãmp‹¨y
 = 1;

86 
c⁄f_fûe
.
fûe
.
fd
 = 
NGX_INVALID_FILE
;

87 
c⁄f_fûe
.
fûe
.
«me
.
d©a
 = 
NULL
;

88 
c⁄f_fûe
.
löe
 = 0;

90 
cf
->
c⁄f_fûe
 = &conf_file;

91 
cf
->
c⁄f_fûe
->
buf„r
 = &
b
;

93 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

95 
cf
->
c⁄f_fûe
 = 
NULL
;

97  
rv
;

98 
	}
}

102 
	$ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
)

104 *
rv
;

105 
ngx_fd_t
 
fd
;

106 
ngx_öt_t
 
rc
;

107 
ngx_buf_t
 
buf
;

108 
ngx_c⁄f_fûe_t
 *
¥ev
, 
c⁄f_fûe
;

110 
∑r£_fûe
 = 0,

111 
∑r£_block
,

112 
∑r£_∑øm


113 } 
ty≥
;

115 #i‡(
NGX_SUPPRESS_WARN
)

116 
fd
 = 
NGX_INVALID_FILE
;

117 
¥ev
 = 
NULL
;

120 i‡(
fûíame
) {

124 
fd
 = 
	`ngx_›í_fûe
(
fûíame
->
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

125 i‡(
fd
 =
NGX_INVALID_FILE
) {

126 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

127 
ngx_›í_fûe_n
 " \"%s\" failed",

128 
fûíame
->
d©a
);

129  
NGX_CONF_ERROR
;

132 
¥ev
 = 
cf
->
c⁄f_fûe
;

134 
cf
->
c⁄f_fûe
 = &conf_file;

136 i‡(
	`ngx_fd_öfo
(
fd
, &
cf
->
c⁄f_fûe
->
fûe
.
öfo
Ë=
NGX_FILE_ERROR
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 
ngx_î∫o
,

138 
ngx_fd_öfo_n
 " \"%s\" faûed", 
fûíame
->
d©a
);

141 
cf
->
c⁄f_fûe
->
buf„r
 = &
buf
;

143 
buf
.
°¨t
 = 
	`ngx_Æloc
(
NGX_CONF_BUFFER
, 
cf
->
log
);

144 i‡(
buf
.
°¨t
 =
NULL
) {

145 
Áûed
;

148 
buf
.
pos
 = buf.
°¨t
;

149 
buf
.
œ°
 = buf.
°¨t
;

150 
buf
.
íd
 = buf.
œ°
 + 
NGX_CONF_BUFFER
;

151 
buf
.
ãmp‹¨y
 = 1;

153 
cf
->
c⁄f_fûe
->
fûe
.
fd
 = fd;

154 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
Àn
 = 
fûíame
->len;

155 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
 = 
fûíame
->data;

156 
cf
->
c⁄f_fûe
->
fûe
.
off£t
 = 0;

157 
cf
->
c⁄f_fûe
->
fûe
.
log
 = cf->log;

158 
cf
->
c⁄f_fûe
->
löe
 = 1;

160 
ty≥
 = 
∑r£_fûe
;

162 } i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

164 
ty≥
 = 
∑r£_block
;

167 
ty≥
 = 
∑r£_∑øm
;

172 
rc
 = 
	`ngx_c⁄f_ªad_tokí
(
cf
);

184 i‡(
rc
 =
NGX_ERROR
) {

185 
d⁄e
;

188 i‡(
rc
 =
NGX_CONF_BLOCK_DONE
) {

190 i‡(
ty≥
 !
∑r£_block
) {

191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "unexpected \"}\"");

192 
Áûed
;

195 
d⁄e
;

198 i‡(
rc
 =
NGX_CONF_FILE_DONE
) {

200 i‡(
ty≥
 =
∑r£_block
) {

201 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

203 
Áûed
;

206 
d⁄e
;

209 i‡(
rc
 =
NGX_CONF_BLOCK_START
) {

211 i‡(
ty≥
 =
∑r£_∑øm
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 
Áûed
;

221 i‡(
cf
->
h™dÀr
) {

228 
rv
 = (*
cf
->
h™dÀr
)(cf, 
NULL
, cf->
h™dÀr_c⁄f
);

229 i‡(
rv
 =
NGX_CONF_OK
) {

233 i‡(
rv
 =
NGX_CONF_ERROR
) {

234 
Áûed
;

237 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, 
rv
);

239 
Áûed
;

243 
rc
 = 
	`ngx_c⁄f_h™dÀr
(
cf
,Ñc);

245 i‡(
rc
 =
NGX_ERROR
) {

246 
Áûed
;

250 
Áûed
:

252 
rc
 = 
NGX_ERROR
;

254 
d⁄e
:

256 i‡(
fûíame
) {

257 i‡(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
) {

258 
	`ngx_‰ì
(
cf
->
c⁄f_fûe
->
buf„r
->
°¨t
);

261 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

262 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

263 
ngx_˛o£_fûe_n
 " %s failed",

264 
fûíame
->
d©a
);

265  
NGX_CONF_ERROR
;

268 
cf
->
c⁄f_fûe
 = 
¥ev
;

271 i‡(
rc
 =
NGX_ERROR
) {

272  
NGX_CONF_ERROR
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_c⁄f_h™dÀr
(
ngx_c⁄f_t
 *
cf
, 
ngx_öt_t
 
œ°
)

282 *
rv
;

283 *
c⁄f
, **
c⁄Â
;

284 
ngx_uöt_t
 
i
, 
found
;

285 
ngx_°r_t
 *
«me
;

286 
ngx_comm™d_t
 *
cmd
;

288 
«me
 = 
cf
->
¨gs
->
ñts
;

290 
found
 = 0;

292 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

294 
cmd
 = 
ngx_moduÀs
[
i
]->
comm™ds
;

295 i‡(
cmd
 =
NULL
) {

299  ; 
cmd
->
«me
.
Àn
; cmd++) {

301 i‡(
«me
->
Àn
 !
cmd
->name.len) {

305 i‡(
	`ngx_°rcmp
(
«me
->
d©a
, 
cmd
->name.data) != 0) {

309 
found
 = 1;

311 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CONF_MODULE


312 && 
ngx_moduÀs
[
i
]->
ty≥
 !
cf
->
moduÀ_ty≥
)

319 i‡(!(
cmd
->
ty≥
 & 
cf
->
cmd_ty≥
)) {

323 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_OK
) {

324 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326 
«me
->
d©a
);

327  
NGX_ERROR
;

330 i‡((
cmd
->
ty≥
 & 
NGX_CONF_BLOCK
Ë&& 
œ°
 !
NGX_CONF_BLOCK_START
) {

331 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

333 
«me
->
d©a
);

334  
NGX_ERROR
;

339 i‡(!(
cmd
->
ty≥
 & 
NGX_CONF_ANY
)) {

341 i‡(
cmd
->
ty≥
 & 
NGX_CONF_FLAG
) {

343 i‡(
cf
->
¨gs
->
√…s
 != 2) {

344 
övÆid
;

347 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_1MORE
) {

349 i‡(
cf
->
¨gs
->
√…s
 < 2) {

350 
övÆid
;

353 } i‡(
cmd
->
ty≥
 & 
NGX_CONF_2MORE
) {

355 i‡(
cf
->
¨gs
->
√…s
 < 3) {

356 
övÆid
;

359 } i‡(
cf
->
¨gs
->
√…s
 > 
NGX_CONF_MAX_ARGS
) {

361 
övÆid
;

363 } i‡(!(
cmd
->
ty≥
 & 
¨gumít_numbî
[
cf
->
¨gs
->
√…s
 - 1]))

365 
övÆid
;

371 
c⁄f
 = 
NULL
;

373 i‡(
cmd
->
ty≥
 & 
NGX_DIRECT_CONF
) {

374 
c⁄f
 = ((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
];

376 } i‡(
cmd
->
ty≥
 & 
NGX_MAIN_CONF
) {

377 
c⁄f
 = &(((**Ë
cf
->
˘x
)[
ngx_moduÀs
[
i
]->
ödex
]);

379 } i‡(
cf
->
˘x
) {

380 
c⁄Â
 = *(**Ë((*Ë
cf
->
˘x
 + 
cmd
->
c⁄f
);

382 i‡(
c⁄Â
) {

383 
c⁄f
 = 
c⁄Â
[
ngx_moduÀs
[
i
]->
˘x_ödex
];

387 
rv
 = 
cmd
->
	`£t
(
cf
, cmd, 
c⁄f
);

389 i‡(
rv
 =
NGX_CONF_OK
) {

390  
NGX_OK
;

393 i‡(
rv
 =
NGX_CONF_ERROR
) {

394  
NGX_ERROR
;

397 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

398 "\"%s\" dúe˘ivê%s", 
«me
->
d©a
, 
rv
);

400  
NGX_ERROR
;

404 i‡(
found
) {

405 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

406 "\"%s\" dúe˘ivêi†nŸáŒowed hîe", 
«me
->
d©a
);

408  
NGX_ERROR
;

411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

412 "unknow¿dúe˘ivê\"%s\"", 
«me
->
d©a
);

414  
NGX_ERROR
;

416 
övÆid
:

418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

420 
«me
->
d©a
);

422  
NGX_ERROR
;

423 
	}
}

426 
ngx_öt_t


427 
	$ngx_c⁄f_ªad_tokí
(
ngx_c⁄f_t
 *
cf
)

429 
u_ch¨
 *
°¨t
, 
ch
, *
§c
, *
d°
;

430 
off_t
 
fûe_size
;

431 
size_t
 
Àn
;

432 
ssize_t
 
n
, 
size
;

433 
ngx_uöt_t
 
found
, 
√ed_•a˚
, 
œ°_•a˚
, 
sh¨p_commít
, 
v¨übÀ
;

434 
ngx_uöt_t
 
quŸed
, 
s_quŸed
, 
d_quŸed
, 
°¨t_löe
;

435 
ngx_°r_t
 *
w‹d
;

436 
ngx_buf_t
 *
b
;

438 
found
 = 0;

439 
√ed_•a˚
 = 0;

440 
œ°_•a˚
 = 1;

441 
sh¨p_commít
 = 0;

442 
v¨übÀ
 = 0;

443 
quŸed
 = 0;

444 
s_quŸed
 = 0;

445 
d_quŸed
 = 0;

447 
cf
->
¨gs
->
√…s
 = 0;

448 
b
 = 
cf
->
c⁄f_fûe
->
buf„r
;

449 
°¨t
 = 
b
->
pos
;

450 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

452 
fûe_size
 = 
	`ngx_fûe_size
(&
cf
->
c⁄f_fûe
->
fûe
.
öfo
);

456 i‡(
b
->
pos
 >b->
œ°
) {

458 i‡(
cf
->
c⁄f_fûe
->
fûe
.
off£t
 >
fûe_size
) {

460 i‡(
cf
->
¨gs
->
√…s
 > 0 || !
œ°_•a˚
) {

462 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

463 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

466  
NGX_ERROR
;

469 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

472  
NGX_ERROR
;

475  
NGX_CONF_FILE_DONE
;

478 
Àn
 = 
b
->
pos
 - 
°¨t
;

480 i‡(
Àn
 =
NGX_CONF_BUFFER
) {

481 
cf
->
c⁄f_fûe
->
löe
 = 
°¨t_löe
;

483 i‡(
d_quŸed
) {

484 
ch
 = '"';

486 } i‡(
s_quŸed
) {

487 
ch
 = '\'';

490 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

492 10, 
°¨t
);

493  
NGX_ERROR
;

496 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

498 "missögÅîmö©ög \"%c\" ch¨a˘î", 
ch
);

499  
NGX_ERROR
;

502 i‡(
Àn
) {

503 
	`ngx_memmove
(
b
->
°¨t
, sèπ, 
Àn
);

506 
size
 = (
ssize_t
Ë(
fûe_size
 - 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

508 i‡(
size
 > 
b
->
íd
 - (b->
°¨t
 + 
Àn
)) {

509 
size
 = 
b
->
íd
 - (b->
°¨t
 + 
Àn
);

512 
n
 = 
	`ngx_ªad_fûe
(&
cf
->
c⁄f_fûe
->
fûe
, 
b
->
°¨t
 + 
Àn
, 
size
,

513 
cf
->
c⁄f_fûe
->
fûe
.
off£t
);

515 i‡(
n
 =
NGX_ERROR
) {

516  
NGX_ERROR
;

519 i‡(
n
 !
size
) {

520 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

521 
ngx_ªad_fûe_n
 "Ñeturned "

523 
n
, 
size
);

524  
NGX_ERROR
;

527 
b
->
pos
 = b->
°¨t
 + 
Àn
;

528 
b
->
œ°
 = b->
pos
 + 
n
;

529 
°¨t
 = 
b
->start;

532 
ch
 = *
b
->
pos
++;

534 i‡(
ch
 =
LF
) {

535 
cf
->
c⁄f_fûe
->
löe
++;

537 i‡(
sh¨p_commít
) {

538 
sh¨p_commít
 = 0;

542 i‡(
sh¨p_commít
) {

546 i‡(
quŸed
) {

547 
quŸed
 = 0;

551 i‡(
√ed_•a˚
) {

552 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

553 
œ°_•a˚
 = 1;

554 
√ed_•a˚
 = 0;

558 i‡(
ch
 == ';') {

559  
NGX_OK
;

562 i‡(
ch
 == '{') {

563  
NGX_CONF_BLOCK_START
;

566 i‡(
ch
 == ')') {

567 
œ°_•a˚
 = 1;

568 
√ed_•a˚
 = 0;

571 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

572 "u√x≥˘ed \"%c\"", 
ch
);

573  
NGX_ERROR
;

577 i‡(
œ°_•a˚
) {

578 i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF
) {

582 
°¨t
 = 
b
->
pos
 - 1;

583 
°¨t_löe
 = 
cf
->
c⁄f_fûe
->
löe
;

585 
ch
) {

589 i‡(
cf
->
¨gs
->
√…s
 == 0) {

590 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

591 "u√x≥˘ed \"%c\"", 
ch
);

592  
NGX_ERROR
;

595 i‡(
ch
 == '{') {

596  
NGX_CONF_BLOCK_START
;

599  
NGX_OK
;

602 i‡(
cf
->
¨gs
->
√…s
 != 0) {

603 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

605  
NGX_ERROR
;

608  
NGX_CONF_BLOCK_DONE
;

611 
sh¨p_commít
 = 1;

615 
quŸed
 = 1;

616 
œ°_•a˚
 = 0;

620 
°¨t
++;

621 
d_quŸed
 = 1;

622 
œ°_•a˚
 = 0;

626 
°¨t
++;

627 
s_quŸed
 = 1;

628 
œ°_•a˚
 = 0;

632 
œ°_•a˚
 = 0;

636 i‡(
ch
 ='{' && 
v¨übÀ
) {

640 
v¨übÀ
 = 0;

642 i‡(
ch
 == '\\') {

643 
quŸed
 = 1;

647 i‡(
ch
 == '$') {

648 
v¨übÀ
 = 1;

652 i‡(
d_quŸed
) {

653 i‡(
ch
 == '"') {

654 
d_quŸed
 = 0;

655 
√ed_•a˚
 = 1;

656 
found
 = 1;

659 } i‡(
s_quŸed
) {

660 i‡(
ch
 == '\'') {

661 
s_quŸed
 = 0;

662 
√ed_•a˚
 = 1;

663 
found
 = 1;

666 } i‡(
ch
 =' ' || ch ='\t' || ch =
CR
 || ch =
LF


667 || 
ch
 == ';' || ch == '{')

669 
œ°_•a˚
 = 1;

670 
found
 = 1;

673 i‡(
found
) {

674 
w‹d
 = 
	`ngx_¨øy_push
(
cf
->
¨gs
);

675 i‡(
w‹d
 =
NULL
) {

676  
NGX_ERROR
;

679 
w‹d
->
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
b
->
pos
 - 
°¨t
 + 1);

680 i‡(
w‹d
->
d©a
 =
NULL
) {

681  
NGX_ERROR
;

684 
d°
 = 
w‹d
->
d©a
, 
§c
 = 
°¨t
, 
Àn
 = 0;

685 
§c
 < 
b
->
pos
 - 1;

686 
Àn
++)

688 i‡(*
§c
 == '\\') {

689 
§c
[1]) {

693 
§c
++;

697 *
d°
++ = '\t';

698 
§c
 += 2;

702 *
d°
++ = '\r';

703 
§c
 += 2;

707 *
d°
++ = '\n';

708 
§c
 += 2;

713 *
d°
++ = *
§c
++;

715 *
d°
 = '\0';

716 
w‹d
->
Àn
 =Üen;

718 i‡(
ch
 == ';') {

719  
NGX_OK
;

722 i‡(
ch
 == '{') {

723  
NGX_CONF_BLOCK_START
;

726 
found
 = 0;

730 
	}
}

734 
	$ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

736 *
rv
;

737 
ngx_öt_t
 
n
;

738 
ngx_°r_t
 *
vÆue
, 
fûe
, 
«me
;

739 
ngx_glob_t
 
gl
;

741 
vÆue
 = 
cf
->
¨gs
->
ñts
;

742 
fûe
 = 
vÆue
[1];

744 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

746 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

747  
NGX_CONF_ERROR
;

750 i‡(
	`°Ωbrk
((*Ë
fûe
.
d©a
, "*?["Ë=
NULL
) {

752 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

754  
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

757 
	`ngx_memzîo
(&
gl
, (
ngx_glob_t
));

759 
gl
.
∑âîn
 = 
fûe
.
d©a
;

760 
gl
.
log
 = 
cf
->log;

761 
gl
.
ã°
 = 1;

763 i‡(
	`ngx_›í_glob
(&
gl
Ë!
NGX_OK
) {

764 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 
ngx_î∫o
,

765 
ngx_›í_glob_n
 " \"%s\" faûed", 
fûe
.
d©a
);

766  
NGX_CONF_ERROR
;

769 
rv
 = 
NGX_CONF_OK
;

772 
n
 = 
	`ngx_ªad_glob
(&
gl
, &
«me
);

774 i‡(
n
 !
NGX_OK
) {

778 
fûe
.
Àn
 = 
«me
.len++;

779 
fûe
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

781 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

783 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

785 i‡(
rv
 !
NGX_CONF_OK
) {

790 
	`ngx_˛o£_glob
(&
gl
);

792  
rv
;

793 
	}
}

796 
ngx_öt_t


797 
	$ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
c⁄f_¥efix
)

799 
size_t
 
Àn
;

800 
u_ch¨
 *
p
, *
n
, *
¥efix
;

801 
ngx_öt_t
 
rc
;

803 
rc
 = 
	`ngx_c⁄f_ã°_fuŒ_«me
(
«me
);

805 i‡(
rc
 =
NGX_OK
) {

806  
rc
;

809 i‡(
c⁄f_¥efix
) {

810 
Àn
 = 
cy˛e
->
c⁄f_¥efix
.len;

811 
¥efix
 = 
cy˛e
->
c⁄f_¥efix
.
d©a
;

814 
Àn
 = 
cy˛e
->
¥efix
.len;

815 
¥efix
 = 
cy˛e
->¥efix.
d©a
;

818 #i‡(
NGX_WIN32
)

820 i‡(
rc
 == 2) {

821 
Àn
 = 
rc
;

826 
n
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
 + 
«me
->len + 1);

827 i‡(
n
 =
NULL
) {

828  
NGX_ERROR
;

831 
p
 = 
	`ngx_˝ymem
(
n
, 
¥efix
, 
Àn
);

832 
	`ngx_˝y°∫
(
p
, 
«me
->
d©a
,Çame->
Àn
 + 1);

834 
«me
->
Àn
 +=Üen;

835 
«me
->
d©a
 = 
n
;

837  
NGX_OK
;

838 
	}
}

841 
ngx_öt_t


842 
	$ngx_c⁄f_ã°_fuŒ_«me
(
ngx_°r_t
 *
«me
)

844 #i‡(
NGX_WIN32
)

845 
u_ch¨
 
c0
, 
c1
;

847 
c0
 = 
«me
->
d©a
[0];

849 i‡(
«me
->
Àn
 < 2) {

850 i‡(
c0
 == '/') {

854  
NGX_DECLINED
;

857 
c1
 = 
«me
->
d©a
[1];

859 i‡(
c1
 == ':') {

860 
c0
 |= 0x20;

862 i‡((
c0
 >= 'a' && c0 <= 'z')) {

863  
NGX_OK
;

866  
NGX_DECLINED
;

869 i‡(
c1
 == '/') {

870  
NGX_OK
;

873 i‡(
c0
 == '/') {

877  
NGX_DECLINED
;

881 i‡(
«me
->
d©a
[0] == '/') {

882  
NGX_OK
;

885  
NGX_DECLINED
;

888 
	}
}

891 
ngx_›í_fûe_t
 *

892 
	$ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

894 
ngx_°r_t
 
fuŒ
;

895 
ngx_uöt_t
 
i
;

896 
ngx_li°_∑π_t
 *
∑π
;

897 
ngx_›í_fûe_t
 *
fûe
;

899 #i‡(
NGX_SUPPRESS_WARN
)

900 
	`ngx_°r_nuŒ
(&
fuŒ
);

903 i‡(
«me
->
Àn
) {

904 
fuŒ
 = *
«me
;

906 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cy˛e
, &
fuŒ
, 0Ë!
NGX_OK
) {

907  
NULL
;

910 
∑π
 = &
cy˛e
->
›í_fûes
.part;

911 
fûe
 = 
∑π
->
ñts
;

913 
i
 = 0; ; i++) {

915 i‡(
i
 >
∑π
->
√…s
) {

916 i‡(
∑π
->
√xt
 =
NULL
) {

919 
∑π
 =Ö¨t->
√xt
;

920 
fûe
 = 
∑π
->
ñts
;

921 
i
 = 0;

924 i‡(
fuŒ
.
Àn
 !
fûe
[
i
].
«me
.len) {

928 i‡(
	`ngx_°rcmp
(
fuŒ
.
d©a
, 
fûe
[
i
].
«me
.data) == 0) {

929  &
fûe
[
i
];

934 
fûe
 = 
	`ngx_li°_push
(&
cy˛e
->
›í_fûes
);

935 i‡(
fûe
 =
NULL
) {

936  
NULL
;

939 i‡(
«me
->
Àn
) {

940 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

941 
fûe
->
«me
 = 
fuŒ
;

944 
fûe
->
fd
 = 
ngx_°dîr
;

945 
fûe
->
«me
 = *name;

948 
fûe
->
Êush
 = 
NULL
;

949 
fûe
->
d©a
 = 
NULL
;

951  
fûe
;

952 
	}
}

956 
	$ngx_c⁄f_Êush_fûes
(
ngx_cy˛e_t
 *
cy˛e
)

958 
ngx_uöt_t
 
i
;

959 
ngx_li°_∑π_t
 *
∑π
;

960 
ngx_›í_fûe_t
 *
fûe
;

962 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0, "flush files");

964 
∑π
 = &
cy˛e
->
›í_fûes
.part;

965 
fûe
 = 
∑π
->
ñts
;

967 
i
 = 0; ; i++) {

969 i‡(
i
 >
∑π
->
√…s
) {

970 i‡(
∑π
->
√xt
 =
NULL
) {

973 
∑π
 =Ö¨t->
√xt
;

974 
fûe
 = 
∑π
->
ñts
;

975 
i
 = 0;

978 i‡(
fûe
[
i
].
Êush
) {

979 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

982 
	}
}

985 
ngx_cde˛


986 
	$ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
, 
ngx_îr_t
 
îr
,

987 c⁄° *
fmt
, ...)

989 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
], *
p
, *
œ°
;

990 
va_li°
 
¨gs
;

992 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

994 
	`va_°¨t
(
¨gs
, 
fmt
);

995 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
, 
fmt
, 
¨gs
);

996 
	`va_íd
(
¨gs
);

998 i‡(
îr
) {

999 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

1002 i‡(
cf
->
c⁄f_fûe
 =
NULL
) {

1003 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s", 
p
 - 
îr°r
,Érrstr);

1007 i‡(
cf
->
c⁄f_fûe
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1008 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in commandÜine",

1009 
p
 - 
îr°r
,Érrstr);

1013 
	`ngx_log_îr‹
(
Àvñ
, 
cf
->
log
, 0, "%*s in %s:%ui",

1014 
p
 - 
îr°r
,Érrstr,

1015 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
, cf->c⁄f_fûe->
löe
);

1016 
	}
}

1020 
	$ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1022 *
p
 = 
c⁄f
;

1024 
ngx_°r_t
 *
vÆue
;

1025 
ngx_Êag_t
 *
Â
;

1026 
ngx_c⁄f_po°_t
 *
po°
;

1028 
Â
 = (
ngx_Êag_t
 *Ë(
p
 + 
cmd
->
off£t
);

1030 i‡(*
Â
 !
NGX_CONF_UNSET
) {

1034 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1036 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "on") == 0) {

1037 *
Â
 = 1;

1039 } i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "off") == 0) {

1040 *
Â
 = 0;

1043 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1046 
vÆue
[1].
d©a
, 
cmd
->
«me
.data);

1047  
NGX_CONF_ERROR
;

1050 i‡(
cmd
->
po°
) {

1051 
po°
 = 
cmd
->post;

1052  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
Â
);

1055  
NGX_CONF_OK
;

1056 
	}
}

1060 
	$ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1062 *
p
 = 
c⁄f
;

1064 
ngx_°r_t
 *
fõld
, *
vÆue
;

1065 
ngx_c⁄f_po°_t
 *
po°
;

1067 
fõld
 = (
ngx_°r_t
 *Ë(
p
 + 
cmd
->
off£t
);

1069 i‡(
fõld
->
d©a
) {

1073 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1075 *
fõld
 = 
vÆue
[1];

1077 i‡(
cmd
->
po°
) {

1078 
po°
 = 
cmd
->post;

1079  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
fõld
);

1082  
NGX_CONF_OK
;

1083 
	}
}

1087 
	$ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1089 *
p
 = 
c⁄f
;

1091 
ngx_°r_t
 *
vÆue
, *
s
;

1092 
ngx_¨øy_t
 **
a
;

1093 
ngx_c⁄f_po°_t
 *
po°
;

1095 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1097 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1098 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_°r_t
));

1099 i‡(*
a
 =
NULL
) {

1100  
NGX_CONF_ERROR
;

1104 
s
 = 
	`ngx_¨øy_push
(*
a
);

1105 i‡(
s
 =
NULL
) {

1106  
NGX_CONF_ERROR
;

1109 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1111 *
s
 = 
vÆue
[1];

1113 i‡(
cmd
->
po°
) {

1114 
po°
 = 
cmd
->post;

1115  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
s
);

1118  
NGX_CONF_OK
;

1119 
	}
}

1123 
	$ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1125 *
p
 = 
c⁄f
;

1127 
ngx_°r_t
 *
vÆue
;

1128 
ngx_¨øy_t
 **
a
;

1129 
ngx_keyvÆ_t
 *
kv
;

1130 
ngx_c⁄f_po°_t
 *
po°
;

1132 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1134 i‡(*
a
 =
NULL
) {

1135 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_keyvÆ_t
));

1136 i‡(*
a
 =
NULL
) {

1137  
NGX_CONF_ERROR
;

1141 
kv
 = 
	`ngx_¨øy_push
(*
a
);

1142 i‡(
kv
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1148 
kv
->
key
 = 
vÆue
[1];

1149 
kv
->
vÆue
 = value[2];

1151 i‡(
cmd
->
po°
) {

1152 
po°
 = 
cmd
->post;

1153  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
kv
);

1156  
NGX_CONF_OK
;

1157 
	}
}

1161 
	$ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1163 *
p
 = 
c⁄f
;

1165 
ngx_öt_t
 *
≈
;

1166 
ngx_°r_t
 *
vÆue
;

1167 
ngx_c⁄f_po°_t
 *
po°
;

1170 
≈
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1172 i‡(*
≈
 !
NGX_CONF_UNSET
) {

1176 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1177 *
≈
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1178 i‡(*
≈
 =
NGX_ERROR
) {

1182 i‡(
cmd
->
po°
) {

1183 
po°
 = 
cmd
->post;

1184  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
≈
);

1187  
NGX_CONF_OK
;

1188 
	}
}

1192 
	$ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1194 *
p
 = 
c⁄f
;

1196 
size_t
 *
•
;

1197 
ngx_°r_t
 *
vÆue
;

1198 
ngx_c⁄f_po°_t
 *
po°
;

1201 
•
 = (
size_t
 *Ë(
p
 + 
cmd
->
off£t
);

1202 i‡(*
•
 !
NGX_CONF_UNSET_SIZE
) {

1206 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1208 *
•
 = 
	`ngx_∑r£_size
(&
vÆue
[1]);

1209 i‡(*
•
 =(
size_t
Ë
NGX_ERROR
) {

1213 i‡(
cmd
->
po°
) {

1214 
po°
 = 
cmd
->post;

1215  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1218  
NGX_CONF_OK
;

1219 
	}
}

1223 
	$ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1225 *
p
 = 
c⁄f
;

1227 
off_t
 *
›
;

1228 
ngx_°r_t
 *
vÆue
;

1229 
ngx_c⁄f_po°_t
 *
po°
;

1232 
›
 = (
off_t
 *Ë(
p
 + 
cmd
->
off£t
);

1233 i‡(*
›
 !
NGX_CONF_UNSET
) {

1237 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1239 *
›
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

1240 i‡(*
›
 =(
off_t
Ë
NGX_ERROR
) {

1244 i‡(
cmd
->
po°
) {

1245 
po°
 = 
cmd
->post;

1246  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
›
);

1249  
NGX_CONF_OK
;

1250 
	}
}

1254 
	$ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1256 *
p
 = 
c⁄f
;

1258 
ngx_m£c_t
 *
m•
;

1259 
ngx_°r_t
 *
vÆue
;

1260 
ngx_c⁄f_po°_t
 *
po°
;

1263 
m•
 = (
ngx_m£c_t
 *Ë(
p
 + 
cmd
->
off£t
);

1264 i‡(*
m•
 !
NGX_CONF_UNSET_MSEC
) {

1268 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1270 *
m•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

1271 i‡(*
m•
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1275 i‡(
cmd
->
po°
) {

1276 
po°
 = 
cmd
->post;

1277  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
m•
);

1280  
NGX_CONF_OK
;

1281 
	}
}

1285 
	$ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1287 *
p
 = 
c⁄f
;

1289 
time_t
 *
•
;

1290 
ngx_°r_t
 *
vÆue
;

1291 
ngx_c⁄f_po°_t
 *
po°
;

1294 
•
 = (
time_t
 *Ë(
p
 + 
cmd
->
off£t
);

1295 i‡(*
•
 !
NGX_CONF_UNSET
) {

1299 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1301 *
•
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

1302 i‡(*
•
 =(
time_t
Ë
NGX_ERROR
) {

1306 i‡(
cmd
->
po°
) {

1307 
po°
 = 
cmd
->post;

1308  
po°
->
	`po°_h™dÀr
(
cf
,Öo°, 
•
);

1311  
NGX_CONF_OK
;

1312 
	}
}

1316 
	$ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1318 *
p
 = 
c⁄f
;

1320 
ngx_°r_t
 *
vÆue
;

1321 
ngx_bufs_t
 *
bufs
;

1324 
bufs
 = (
ngx_bufs_t
 *Ë(
p
 + 
cmd
->
off£t
);

1325 i‡(
bufs
->
num
) {

1329 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1331 
bufs
->
num
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1332 i‡(
bufs
->
num
 =
NGX_ERROR
 || bufs->num == 0) {

1336 
bufs
->
size
 = 
	`ngx_∑r£_size
(&
vÆue
[2]);

1337 i‡(
bufs
->
size
 =(
size_t
Ë
NGX_ERROR
 || bufs->size == 0) {

1341  
NGX_CONF_OK
;

1342 
	}
}

1346 
	$ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1348 *
p
 = 
c⁄f
;

1350 
ngx_uöt_t
 *
≈
, 
i
;

1351 
ngx_°r_t
 *
vÆue
;

1352 
ngx_c⁄f_íum_t
 *
e
;

1354 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1356 i‡(*
≈
 !
NGX_CONF_UNSET_UINT
) {

1360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1361 
e
 = 
cmd
->
po°
;

1363 
i
 = 0; 
e
[i].
«me
.
Àn
 != 0; i++) {

1364 i‡(
e
[
i
].
«me
.
Àn
 !
vÆue
[1].len

1365 || 
	`ngx_°rˇ£cmp
(
e
[
i
].
«me
.
d©a
, 
vÆue
[1].data) != 0)

1370 *
≈
 = 
e
[
i
].
vÆue
;

1372  
NGX_CONF_OK
;

1375 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1376 "övÆid vÆuê\"%s\"", 
vÆue
[1].
d©a
);

1378  
NGX_CONF_ERROR
;

1379 
	}
}

1383 
	$ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1385 *
p
 = 
c⁄f
;

1387 
ngx_uöt_t
 *
≈
, 
i
, 
m
;

1388 
ngx_°r_t
 *
vÆue
;

1389 
ngx_c⁄f_bômask_t
 *
mask
;

1392 
≈
 = (
ngx_uöt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1393 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1394 
mask
 = 
cmd
->
po°
;

1396 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1397 
m
 = 0; 
mask
[m].
«me
.
Àn
 != 0; m++) {

1399 i‡(
mask
[
m
].
«me
.
Àn
 !
vÆue
[
i
].len

1400 || 
	`ngx_°rˇ£cmp
(
mask
[
m
].
«me
.
d©a
, 
vÆue
[
i
].data) != 0)

1405 i‡(*
≈
 & 
mask
[
m
].mask) {

1406 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1407 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1410 *
≈
 |
mask
[
m
].mask;

1416 i‡(
mask
[
m
].
«me
.
Àn
 == 0) {

1417 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1418 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

1420  
NGX_CONF_ERROR
;

1424  
NGX_CONF_OK
;

1425 
	}
}

1431 
	$ngx_c⁄f_unsuµ‹ãd
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1434 
	}
}

1440 
	$ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1442 
ngx_c⁄f_dïªˇãd_t
 *
d
 = 
po°
;

1444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1447 
d
->
ﬁd_«me
, d->
√w_«me
);

1449  
NGX_CONF_OK
;

1450 
	}
}

1454 
	$ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1456 
ngx_c⁄f_num_bounds_t
 *
bounds
 = 
po°
;

1457 
ngx_öt_t
 *
≈
 = 
d©a
;

1459 i‡(
bounds
->
high
 == -1) {

1460 i‡(*
≈
 >
bounds
->
low
) {

1461  
NGX_CONF_OK
;

1464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1466 
bounds
->
low
);

1468  
NGX_CONF_ERROR
;

1471 i‡(*
≈
 >
bounds
->
low
 && *≈ <bounds->
high
) {

1472  
NGX_CONF_OK
;

1475 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1477 
bounds
->
low
, bounds->
high
);

1479  
NGX_CONF_ERROR
;

1480 
	}
}

	@src/core/ngx_conf_file.h

8 #i‚de‡
_NGX_HTTP_CONF_FILE_H_INCLUDED_


9 
	#_NGX_HTTP_CONF_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

22 
	#NGX_CONF_NOARGS
 0x00000001

	)

23 
	#NGX_CONF_TAKE1
 0x00000002

	)

24 
	#NGX_CONF_TAKE2
 0x00000004

	)

25 
	#NGX_CONF_TAKE3
 0x00000008

	)

26 
	#NGX_CONF_TAKE4
 0x00000010

	)

27 
	#NGX_CONF_TAKE5
 0x00000020

	)

28 
	#NGX_CONF_TAKE6
 0x00000040

	)

29 
	#NGX_CONF_TAKE7
 0x00000080

	)

31 
	#NGX_CONF_MAX_ARGS
 8

	)

33 
	#NGX_CONF_TAKE12
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
)

	)

34 
	#NGX_CONF_TAKE13
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE3
)

	)

36 
	#NGX_CONF_TAKE23
 (
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

38 
	#NGX_CONF_TAKE123
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
)

	)

39 
	#NGX_CONF_TAKE1234
 (
NGX_CONF_TAKE1
|
NGX_CONF_TAKE2
|
NGX_CONF_TAKE3
 \

40 |
NGX_CONF_TAKE4
)

	)

42 
	#NGX_CONF_ARGS_NUMBER
 0x000000ff

	)

43 
	#NGX_CONF_BLOCK
 0x00000100

	)

44 
	#NGX_CONF_FLAG
 0x00000200

	)

45 
	#NGX_CONF_ANY
 0x00000400

	)

46 
	#NGX_CONF_1MORE
 0x00000800

	)

47 
	#NGX_CONF_2MORE
 0x00001000

	)

48 
	#NGX_CONF_MULTI
 0x00000000

	)

50 
	#NGX_DIRECT_CONF
 0x00010000

	)

52 
	#NGX_MAIN_CONF
 0x01000000

	)

53 
	#NGX_ANY_CONF
 0x0F000000

	)

57 
	#NGX_CONF_UNSET
 -1

	)

58 
	#NGX_CONF_UNSET_UINT
 (
ngx_uöt_t
Ë-1

	)

59 
	#NGX_CONF_UNSET_PTR
 (*Ë-1

	)

60 
	#NGX_CONF_UNSET_SIZE
 (
size_t
Ë-1

	)

61 
	#NGX_CONF_UNSET_MSEC
 (
ngx_m£c_t
Ë-1

	)

64 
	#NGX_CONF_OK
 
NULL


	)

65 
	#NGX_CONF_ERROR
 (*Ë-1

	)

67 
	#NGX_CONF_BLOCK_START
 1

	)

68 
	#NGX_CONF_BLOCK_DONE
 2

	)

69 
	#NGX_CONF_FILE_DONE
 3

	)

71 
	#NGX_CORE_MODULE
 0x45524F43

	)

72 
	#NGX_CONF_MODULE
 0x464E4F43

	)

75 
	#NGX_MAX_CONF_ERRSTR
 1024

	)

78 
	sngx_comm™d_s
 {

79 
ngx_°r_t
 
	m«me
;

80 
ngx_uöt_t
 
	mty≥
;

81 *(*
	m£t
)(
ngx_c⁄f_t
 *
	mcf
, 
ngx_comm™d_t
 *
	mcmd
, *
	mc⁄f
);

82 
ngx_uöt_t
 
	mc⁄f
;

83 
ngx_uöt_t
 
	moff£t
;

84 *
	mpo°
;

87 
	#ngx_nuŒ_comm™d
 { 
ngx_nuŒ_°rög
, 0, 
NULL
, 0, 0, NULL }

	)

90 
	sngx_›í_fûe_s
 {

91 
ngx_fd_t
 
	mfd
;

92 
ngx_°r_t
 
	m«me
;

94 (*
	mÊush
)(
ngx_›í_fûe_t
 *
	mfûe
, 
ngx_log_t
 *
	mlog
);

95 *
	md©a
;

99 
	#NGX_MODULE_V1
 0, 0, 0, 0, 0, 0, 1

	)

100 
	#NGX_MODULE_V1_PADDING
 0, 0, 0, 0, 0, 0, 0, 0

	)

102 
	sngx_moduÀ_s
 {

103 
ngx_uöt_t
 
	m˘x_ödex
;

104 
ngx_uöt_t
 
	mödex
;

106 
ngx_uöt_t
 
	m•¨e0
;

107 
ngx_uöt_t
 
	m•¨e1
;

108 
ngx_uöt_t
 
	m•¨e2
;

109 
ngx_uöt_t
 
	m•¨e3
;

111 
ngx_uöt_t
 
	mvîsi⁄
;

113 *
	m˘x
;

114 
ngx_comm™d_t
 *
	mcomm™ds
;

115 
ngx_uöt_t
 
	mty≥
;

117 
ngx_öt_t
 (*
öô_ma°î
)(
ngx_log_t
 *
	mlog
);

119 
ngx_öt_t
 (*
öô_moduÀ
)(
ngx_cy˛e_t
 *
	mcy˛e
);

121 
ngx_öt_t
 (*
öô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

122 
ngx_öt_t
 (*
öô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

123 (*
	mexô_thªad
)(
ngx_cy˛e_t
 *
	mcy˛e
);

124 (*
	mexô_¥o˚ss
)(
ngx_cy˛e_t
 *
	mcy˛e
);

126 (*
	mexô_ma°î
)(
ngx_cy˛e_t
 *
	mcy˛e
);

128 
uöçå_t
 
	m•¨e_hook0
;

129 
uöçå_t
 
	m•¨e_hook1
;

130 
uöçå_t
 
	m•¨e_hook2
;

131 
uöçå_t
 
	m•¨e_hook3
;

132 
uöçå_t
 
	m•¨e_hook4
;

133 
uöçå_t
 
	m•¨e_hook5
;

134 
uöçå_t
 
	m•¨e_hook6
;

135 
uöçå_t
 
	m•¨e_hook7
;

140 
ngx_°r_t
 
	m«me
;

141 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

142 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

143 } 
	tngx_c‹e_moduÀ_t
;

147 
ngx_fûe_t
 
	mfûe
;

148 
ngx_buf_t
 *
	mbuf„r
;

149 
ngx_uöt_t
 
	mlöe
;

150 } 
	tngx_c⁄f_fûe_t
;

153 *(*
	tngx_c⁄f_h™dÀr_±
)(
	tngx_c⁄f_t
 *
	tcf
,

154 
	tngx_comm™d_t
 *
	tdummy
, *
	tc⁄f
);

157 
	sngx_c⁄f_s
 {

158 *
	m«me
;

159 
ngx_¨øy_t
 *
	m¨gs
;

161 
ngx_cy˛e_t
 *
	mcy˛e
;

162 
ngx_poﬁ_t
 *
	mpoﬁ
;

163 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

164 
ngx_c⁄f_fûe_t
 *
	mc⁄f_fûe
;

165 
ngx_log_t
 *
	mlog
;

167 *
	m˘x
;

168 
ngx_uöt_t
 
	mmoduÀ_ty≥
;

169 
ngx_uöt_t
 
	mcmd_ty≥
;

171 
ngx_c⁄f_h™dÀr_±
 
	mh™dÀr
;

172 *
	mh™dÀr_c⁄f
;

176 *(*
	tngx_c⁄f_po°_h™dÀr_±
Ë(
	tngx_c⁄f_t
 *
	tcf
,

177 *
	td©a
, *
	tc⁄f
);

180 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

181 } 
	tngx_c⁄f_po°_t
;

185 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

186 *
	mﬁd_«me
;

187 *
	m√w_«me
;

188 } 
	tngx_c⁄f_dïªˇãd_t
;

192 
ngx_c⁄f_po°_h™dÀr_±
 
	mpo°_h™dÀr
;

193 
ngx_öt_t
 
	mlow
;

194 
ngx_öt_t
 
	mhigh
;

195 } 
	tngx_c⁄f_num_bounds_t
;

199 
ngx_°r_t
 
	m«me
;

200 
ngx_uöt_t
 
	mvÆue
;

201 } 
	tngx_c⁄f_íum_t
;

204 
	#NGX_CONF_BITMASK_SET
 1

	)

207 
ngx_°r_t
 
	m«me
;

208 
ngx_uöt_t
 
	mmask
;

209 } 
	tngx_c⁄f_bômask_t
;

213 * 
ngx_c⁄f_dïªˇãd
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

214 *
ngx_c⁄f_check_num_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

217 
	#ngx_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
Ëc⁄f_˘x[moduÀ.
ödex
]

	)

221 
	#ngx_c⁄f_öô_vÆue
(
c⁄f
, ) \

222 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

223 
c⁄f
 = ; \

224 }

	)

226 
	#ngx_c⁄f_öô_±r_vÆue
(
c⁄f
, ) \

227 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

228 
c⁄f
 = ; \

229 }

	)

231 
	#ngx_c⁄f_öô_uöt_vÆue
(
c⁄f
, ) \

232 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

233 
c⁄f
 = ; \

234 }

	)

236 
	#ngx_c⁄f_öô_size_vÆue
(
c⁄f
, ) \

237 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

238 
c⁄f
 = ; \

239 }

	)

241 
	#ngx_c⁄f_öô_m£c_vÆue
(
c⁄f
, ) \

242 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

243 
c⁄f
 = ; \

244 }

	)

246 
	#ngx_c⁄f_mîge_vÆue
(
c⁄f
, 
¥ev
, ) \

247 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

248 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

249 }

	)

251 
	#ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
, 
¥ev
, ) \

252 i‡(
c⁄f
 =
NGX_CONF_UNSET_PTR
) { \

253 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_PTR
) ?  :Örev; \

254 }

	)

256 
	#ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
, 
¥ev
, ) \

257 i‡(
c⁄f
 =
NGX_CONF_UNSET_UINT
) { \

258 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_UINT
) ?  :Örev; \

259 }

	)

261 
	#ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
, 
¥ev
, ) \

262 i‡(
c⁄f
 =
NGX_CONF_UNSET_MSEC
) { \

263 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_MSEC
) ?  :Örev; \

264 }

	)

266 
	#ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
, 
¥ev
, ) \

267 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

268 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

269 }

	)

271 
	#ngx_c⁄f_mîge_size_vÆue
(
c⁄f
, 
¥ev
, ) \

272 i‡(
c⁄f
 =
NGX_CONF_UNSET_SIZE
) { \

273 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET_SIZE
) ?  :Örev; \

274 }

	)

276 
	#ngx_c⁄f_mîge_off_vÆue
(
c⁄f
, 
¥ev
, ) \

277 i‡(
c⁄f
 =
NGX_CONF_UNSET
) { \

278 
c⁄f
 = (
¥ev
 =
NGX_CONF_UNSET
) ?  :Örev; \

279 }

	)

281 
	#ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
, 
¥ev
, ) \

282 i‡(
c⁄f
.
d©a
 =
NULL
) { \

283 i‡(
¥ev
.
d©a
) { \

284 
c⁄f
.
Àn
 = 
¥ev
.len; \

285 
c⁄f
.
d©a
 = 
¥ev
.data; \

287 
c⁄f
.
Àn
 = () - 1; \

288 
c⁄f
.
d©a
 = (
u_ch¨
 *) ; \

290 }

	)

292 
	#ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
, 
¥ev
, 
deÁu…_num
, 
deÁu…_size
) \

293 i‡(
c⁄f
.
num
 == 0) { \

294 i‡(
¥ev
.
num
) { \

295 
c⁄f
.
num
 = 
¥ev
.num; \

296 
c⁄f
.
size
 = 
¥ev
.size; \

298 
c⁄f
.
num
 = 
deÁu…_num
; \

299 
c⁄f
.
size
 = 
deÁu…_size
; \

301 }

	)

303 
	#ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
, 
¥ev
, ) \

304 i‡(
c⁄f
 == 0) { \

305 
c⁄f
 = (
¥ev
 == 0) ?  :Örev; \

306 }

	)

309 *
ngx_c⁄f_∑øm
(
ngx_c⁄f_t
 *
cf
);

310 *
ngx_c⁄f_∑r£
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
fûíame
);

311 *
ngx_c⁄f_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

314 
ngx_öt_t
 
ngx_c⁄f_fuŒ_«me
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
,

315 
ngx_uöt_t
 
c⁄f_¥efix
);

316 
ngx_›í_fûe_t
 *
ngx_c⁄f_›í_fûe
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

317 
ngx_cde˛
 
ngx_c⁄f_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_c⁄f_t
 *
cf
,

318 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

321 *
ngx_c⁄f_£t_Êag_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

322 *
ngx_c⁄f_£t_°r_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

323 *
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

324 *
c⁄f
);

325 *
ngx_c⁄f_£t_keyvÆ_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

326 *
ngx_c⁄f_£t_num_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

327 *
ngx_c⁄f_£t_size_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

328 *
ngx_c⁄f_£t_off_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

329 *
ngx_c⁄f_£t_m£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

330 *
ngx_c⁄f_£t_£c_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

331 *
ngx_c⁄f_£t_bufs_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

332 *
ngx_c⁄f_£t_íum_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

333 *
ngx_c⁄f_£t_bômask_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

336 
ngx_uöt_t
 
ngx_max_moduÀ
;

337 
ngx_moduÀ_t
 *
ngx_moduÀs
[];

	@src/core/ngx_config.h

8 #i‚de‡
_NGX_CONFIG_H_INCLUDED_


9 
	#_NGX_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_auto_hódîs.h
>

15 #i‡
deföed
 
__Døg⁄Fly__
 && !deföed 
__FªeBSD__


16 
	#__FªeBSD__
 4

	)

17 
	#__FªeBSD_vîsi⁄
 480101

	)

21 #i‡(
NGX_FREEBSD
)

22 
	~<ngx_‰ìbsd_c⁄fig.h
>

25 #ñi‡(
NGX_LINUX
)

26 
	~<ngx_löux_c⁄fig.h
>

29 #ñi‡(
NGX_SOLARIS
)

30 
	~<ngx_sﬁ¨is_c⁄fig.h
>

33 #ñi‡(
NGX_DARWIN
)

34 
	~<ngx_d¨wö_c⁄fig.h
>

37 #ñi‡(
NGX_WIN32
)

38 
	~<ngx_wö32_c⁄fig.h
>

42 
	~<ngx_posix_c⁄fig.h
>

47 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


48 
	#NGX_HAVE_SO_SNDLOWAT
 1

	)

52 #i‡!(
NGX_WIN32
)

54 
	#ngx_sig«l_hñ≥r
(
n
Ë
SIG
##
	)
n

55 
	#ngx_sig«l_vÆue
(
n
Ë
	`ngx_sig«l_hñ≥r
“)

	)

57 
	#ngx_øndom
 
øndom


	)

60 
	#NGX_SHUTDOWN_SIGNAL
 
QUIT


	)

61 
	#NGX_TERMINATE_SIGNAL
 
TERM


	)

62 
	#NGX_NOACCEPT_SIGNAL
 
WINCH


	)

63 
	#NGX_RECONFIGURE_SIGNAL
 
HUP


	)

65 #i‡(
NGX_LINUXTHREADS
)

66 
	#NGX_REOPEN_SIGNAL
 
INFO


	)

67 
	#NGX_CHANGEBIN_SIGNAL
 
XCPU


	)

69 
	#NGX_REOPEN_SIGNAL
 
USR1


	)

70 
	#NGX_CHANGEBIN_SIGNAL
 
USR2


	)

73 
	#ngx_cde˛


	)

74 
	#ngx_libc_cde˛


	)

78 
öçå_t
 
	tngx_öt_t
;

79 
uöçå_t
 
	tngx_uöt_t
;

80 
öçå_t
 
	tngx_Êag_t
;

83 
	#NGX_INT32_LEN
 ("-2147483648"Ë- 1

	)

84 
	#NGX_INT64_LEN
 ("-9223372036854775808"Ë- 1

	)

86 #i‡(
NGX_PTR_SIZE
 == 4)

87 
	#NGX_INT_T_LEN
 
NGX_INT32_LEN


	)

89 
	#NGX_INT_T_LEN
 
NGX_INT64_LEN


	)

93 #i‚de‡
NGX_ALIGNMENT


94 
	#NGX_ALIGNMENT
 (Ë

	)

97 
	#ngx_Æign
(
d
, 
a
Ë(((dË+ (®- 1)Ë& ~◊ - 1))

	)

98 
	#ngx_Æign_±r
(
p
, 
a
) \

99 (
u_ch¨
 *Ë(((
uöçå_t
Ë(
p
Ë+ ((uöçå_tË
a
 - 1)Ë& ~((uöçå_tË®- 1))

	)

102 
	#ngx_ab‹t
 
ab‹t


	)

106 
	#NGX_INVALID_ARRAY_INDEX
 0x80000000

	)

110 #i‚de‡
ngx_ölöe


111 
	#ngx_ölöe
 
ölöe


	)

114 #i‚de‡
INADDR_NONE


115 
	#INADDR_NONE
 ((Ë-1)

	)

118 #ifde‡
MAXHOSTNAMELEN


119 
	#NGX_MAXHOSTNAMELEN
 
MAXHOSTNAMELEN


	)

121 
	#NGX_MAXHOSTNAMELEN
 256

	)

125 #i‡((
__GNU__
 =2Ë&& (
__GNUC_MINOR__
 < 8))

126 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffffLL

	)

128 
	#NGX_MAX_UINT32_VALUE
 (
uöt32_t
Ë0xffffffff

	)

131 
	#NGX_MAX_INT32_VALUE
 (
uöt32_t
Ë0x7fffffff

	)

	@src/core/ngx_connection.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_os_io_t
 
	gngx_io
;

16 
ngx_døö_c⁄√˘i⁄s
();

19 
ngx_li°íög_t
 *

20 
	$ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
, 
sockÀn_t
 
sockÀn
)

22 
size_t
 
Àn
;

23 
ngx_li°íög_t
 *
ls
;

24 
sockaddr
 *
ß
;

25 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

27 
ls
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
li°íög
);

28 i‡(
ls
 =
NULL
) {

29  
NULL
;

32 
	`ngx_memzîo
(
ls
, (
ngx_li°íög_t
));

34 
ß
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
sockÀn
);

35 i‡(
ß
 =
NULL
) {

36  
NULL
;

39 
	`ngx_mem˝y
(
ß
, 
sockaddr
, 
sockÀn
);

41 
ls
->
sockaddr
 = 
ß
;

42 
ls
->
sockÀn
 = socklen;

44 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 1);

45 
ls
->
addr_ãxt
.
Àn
 =Üen;

47 
ls
->
sockaddr
->
ß_Ámûy
) {

48 #i‡(
NGX_HAVE_INET6
)

49 
AF_INET6
:

50 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

53 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

54 
AF_UNIX
:

55 
ls
->
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

56 
Àn
++;

59 
AF_INET
:

60 
ls
->
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

63 
ls
->
addr_ãxt_max_Àn
 = 
NGX_SOCKADDR_STRLEN
;

67 
ls
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

68 i‡(
ls
->
addr_ãxt
.
d©a
 =
NULL
) {

69  
NULL
;

72 
	`ngx_mem˝y
(
ls
->
addr_ãxt
.
d©a
, 
ãxt
, 
Àn
);

74 
ls
->
fd
 = (
ngx_sockë_t
) -1;

75 
ls
->
ty≥
 = 
SOCK_STREAM
;

77 
ls
->
backlog
 = 
NGX_LISTEN_BACKLOG
;

78 
ls
->
rcvbuf
 = -1;

79 
ls
->
¢dbuf
 = -1;

81 #i‡(
NGX_HAVE_SETFIB
)

82 
ls
->
£tfib
 = -1;

85  
ls
;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

92 
size_t
 
Àn
;

93 
ngx_uöt_t
 
i
;

94 
ngx_li°íög_t
 *
ls
;

95 
sockÀn_t
 
ﬁí
;

96 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

97 
ngx_îr_t
 
îr
;

98 
ac˚±_fûãr_¨g
 
af
;

100 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

101 
timeout
;

104 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

105 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

107 
ls
[
i
].
sockaddr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 
NGX_SOCKADDRLEN
);

108 i‡(
ls
[
i
].
sockaddr
 =
NULL
) {

109  
NGX_ERROR
;

112 
ls
[
i
].
sockÀn
 = 
NGX_SOCKADDRLEN
;

113 i‡(
	`gësock«me
(
ls
[
i
].
fd
,Üs[i].
sockaddr
, &ls[i].
sockÀn
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

116 "sockë #%d faûed", 
ls
[
i
].
fd
);

117 
ls
[
i
].
ign‹e
 = 1;

121 
ls
[
i
].
sockaddr
->
ß_Ámûy
) {

123 #i‡(
NGX_HAVE_INET6
)

124 
AF_INET6
:

125 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET6_ADDRSTRLEN
;

126 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + (":65535") - 1;

130 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

131 
AF_UNIX
:

132 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

133 
Àn
 = 
NGX_UNIX_ADDRSTRLEN
;

137 
AF_INET
:

138 
ls
[
i
].
addr_ãxt_max_Àn
 = 
NGX_INET_ADDRSTRLEN
;

139 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

143 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

145 "™ unsuµ‹ãdÖrŸocﬁ famûy", 
ls
[
i
].
fd
);

146 
ls
[
i
].
ign‹e
 = 1;

150 
ls
[
i
].
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
Àn
);

151 i‡(
ls
[
i
].
addr_ãxt
.
d©a
 =
NULL
) {

152  
NGX_ERROR
;

155 
Àn
 = 
	`ngx_sock_¡›
(
ls
[
i
].
sockaddr
,Üs[i].
addr_ãxt
.
d©a
,Üen, 1);

156 i‡(
Àn
 == 0) {

157  
NGX_ERROR
;

160 
ls
[
i
].
addr_ãxt
.
Àn
 =Üen;

162 
ls
[
i
].
backlog
 = 
NGX_LISTEN_BACKLOG
;

164 
ﬁí
 = ();

166 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
, (*Ë&ls[i].
rcvbuf
,

167 &
ﬁí
)

170 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

172 &
ls
[
i
].
addr_ãxt
);

174 
ls
[
i
].
rcvbuf
 = -1;

177 
ﬁí
 = ();

179 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
, (*Ë&ls[i].
¢dbuf
,

180 &
ﬁí
)

183 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

185 &
ls
[
i
].
addr_ãxt
);

187 
ls
[
i
].
¢dbuf
 = -1;

193 #i‡(
NGX_HAVE_SETFIB
)

195 i‡(
	`gësock›t
(
ls
[
i
].
£tfib
, 
SOL_SOCKET
, 
SO_SETFIB
,

196 (*Ë&
ls
[
i
].
£tfib
, &
ﬁí
)

199 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

201 &
ls
[
i
].
addr_ãxt
);

203 
ls
[
i
].
£tfib
 = -1;

209 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

211 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

212 
ﬁí
 = (
ac˚±_fûãr_¨g
);

214 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, &
af
, &
ﬁí
)

217 
îr
 = 
ngx_î∫o
;

219 i‡(
îr
 =
NGX_EINVAL
) {

223 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
îr
,

225 &
ls
[
i
].
addr_ãxt
);

229 i‡(
ﬁí
 < (
ac˚±_fûãr_¨g
Ë|| 
af
.
af_«me
[0] == '\0') {

233 
ls
[
i
].
ac˚±_fûãr
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, 16);

234 i‡(
ls
[
i
].
ac˚±_fûãr
 =
NULL
) {

235  
NGX_ERROR
;

238 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
,

239 (
u_ch¨
 *Ë
af
.
af_«me
, 16);

242 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

244 
timeout
 = 0;

245 
ﬁí
 = ();

247 i‡(
	`gësock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
, &
timeout
, &
ﬁí
)

250 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 
ngx_î∫o
,

252 &
ls
[
i
].
addr_ãxt
);

256 i‡(
ﬁí
 < (Ë|| 
timeout
 == 0) {

260 
ls
[
i
].
de„ºed_ac˚±
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

271 
ªu£addr
;

272 
ngx_uöt_t
 
i
, 
åõs
, 
Áûed
;

273 
ngx_îr_t
 
îr
;

274 
ngx_log_t
 *
log
;

275 
ngx_sockë_t
 
s
;

276 
ngx_li°íög_t
 *
ls
;

278 
ªu£addr
 = 1;

279 #i‡(
NGX_SUPPRESS_WARN
)

280 
Áûed
 = 0;

283 
log
 = 
cy˛e
->log;

287 
åõs
 = 5;Åries;Åries--) {

288 
Áûed
 = 0;

292 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

293 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

295 i‡(
ls
[
i
].
ign‹e
) {

299 i‡(
ls
[
i
].
fd
 != -1) {

303 i‡(
ls
[
i
].
öhîôed
) {

312 
s
 = 
	`ngx_sockë
(
ls
[
i
].
sockaddr
->
ß_Ámûy
,Üs[i].
ty≥
, 0);

314 i‡(
s
 == -1) {

315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

316 
ngx_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

317  
NGX_ERROR
;

320 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_REUSEADDR
,

321 (c⁄° *Ë&
ªu£addr
, ())

324 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

326 &
ls
[
i
].
addr_ãxt
);

328 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

329 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

330 
ngx_˛o£_sockë_n
 " %V failed",

331 &
ls
[
i
].
addr_ãxt
);

334  
NGX_ERROR
;

337 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

339 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

340 
ùv6⁄ly
;

342 
ùv6⁄ly
 = 
ls
[
i
].ipv6only;

344 i‡(
	`£tsock›t
(
s
, 
IPPROTO_IPV6
, 
IPV6_V6ONLY
,

345 (c⁄° *Ë&
ùv6⁄ly
, ())

348 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

350 &
ls
[
i
].
addr_ãxt
);

356 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
)) {

357 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

358 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

359 
ngx_n⁄blockög_n
 " %V failed",

360 &
ls
[
i
].
addr_ãxt
);

362 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

363 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

364 
ngx_˛o£_sockë_n
 " %V failed",

365 &
ls
[
i
].
addr_ãxt
);

368  
NGX_ERROR
;

372 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

373 "böd(Ë%V #%d ", &
ls
[
i
].
addr_ãxt
, 
s
);

375 i‡(
	`böd
(
s
, 
ls
[
i
].
sockaddr
,Üs[i].
sockÀn
) == -1) {

376 
îr
 = 
ngx_sockë_î∫o
;

378 i‡(
îr
 =
NGX_EADDRINUSE
 && 
ngx_ã°_c⁄fig
) {

382 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

383 "böd(Ëtÿ%V faûed", &
ls
[
i
].
addr_ãxt
);

385 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

386 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

387 
ngx_˛o£_sockë_n
 " %V failed",

388 &
ls
[
i
].
addr_ãxt
);

391 i‡(
îr
 !
NGX_EADDRINUSE
) {

392  
NGX_ERROR
;

395 
Áûed
 = 1;

400 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

402 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

403 
mode_t
 
mode
;

404 
u_ch¨
 *
«me
;

406 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

407 
mode
 = (
S_IRUSR
|
S_IWUSR
|
S_IRGRP
|
S_IWGRP
|
S_IROTH
|
S_IWOTH
);

409 i‡(
	`chmod
((*Ë
«me
, 
mode
) == -1) {

410 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

411 "chmod(Ë\"%s\" faûed", 
«me
);

414 i‡(
ngx_ã°_c⁄fig
) {

415 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

417 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

423 i‡(
	`li°í
(
s
, 
ls
[
i
].
backlog
) == -1) {

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

426 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

428 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

429 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

430 
ngx_˛o£_sockë_n
 " %V failed",

431 &
ls
[
i
].
addr_ãxt
);

434  
NGX_ERROR
;

437 
ls
[
i
].
li°í
 = 1;

439 
ls
[
i
].
fd
 = 
s
;

442 i‡(!
Áûed
) {

448 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

451 
	`ngx_m¶ìp
(500);

454 i‡(
Áûed
) {

455 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0, "still couldÇot bind()");

456  
NGX_ERROR
;

459  
NGX_OK
;

460 
	}
}

464 
	$ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

466 
kì∑live
;

467 
ngx_uöt_t
 
i
;

468 
ngx_li°íög_t
 *
ls
;

470 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

471 
ac˚±_fûãr_¨g
 
af
;

473 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

474 
timeout
;

477 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

478 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

480 
ls
[
i
].
log
 = *ls[i].
logp
;

482 i‡(
ls
[
i
].
rcvbuf
 != -1) {

483 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_RCVBUF
,

484 (c⁄° *Ë&
ls
[
i
].
rcvbuf
, ())

487 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

489 
ls
[
i
].
rcvbuf
, &ls[i].
addr_ãxt
);

493 i‡(
ls
[
i
].
¢dbuf
 != -1) {

494 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SNDBUF
,

495 (c⁄° *Ë&
ls
[
i
].
¢dbuf
, ())

498 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

500 
ls
[
i
].
¢dbuf
, &ls[i].
addr_ãxt
);

504 i‡(
ls
[
i
].
kì∑live
) {

505 
kì∑live
 = (
ls
[
i
].keepalive == 1) ? 1 : 0;

507 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

508 (c⁄° *Ë&
kì∑live
, ())

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

513 
kì∑live
, &
ls
[
i
].
addr_ãxt
);

517 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

519 i‡(
ls
[
i
].
kìpidÀ
) {

520 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPIDLE
,

521 (c⁄° *Ë&
ls
[
i
].
kìpidÀ
, ())

524 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

526 
ls
[
i
].
kìpidÀ
, &ls[i].
addr_ãxt
);

530 i‡(
ls
[
i
].
kìpötvl
) {

531 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPINTVL
,

532 (c⁄° *Ë&
ls
[
i
].
kìpötvl
, ())

535 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

537 
ls
[
i
].
kìpötvl
, &ls[i].
addr_ãxt
);

541 i‡(
ls
[
i
].
kìp˙t
) {

542 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_KEEPCNT
,

543 (c⁄° *Ë&
ls
[
i
].
kìp˙t
, ())

546 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

548 
ls
[
i
].
kìp˙t
, &ls[i].
addr_ãxt
);

554 #i‡(
NGX_HAVE_SETFIB
)

555 i‡(
ls
[
i
].
£tfib
 != -1) {

556 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_SETFIB
,

557 (c⁄° *Ë&
ls
[
i
].
£tfib
, ())

560 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

562 
ls
[
i
].
£tfib
, &ls[i].
addr_ãxt
);

569 
t˝_nodñay
 = 1;

571 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

572 (c⁄° *Ë&
t˝_nodñay
, ())

575 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

577 &
ls
[
i
].
addr_ãxt
);

582 i‡(
ls
[
i
].
li°í
) {

586 i‡(
	`li°í
(
ls
[
i
].
fd
,Üs[i].
backlog
) == -1) {

587 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

589 &
ls
[
i
].
addr_ãxt
,Üs[i].
backlog
);

598 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

600 #ifde‡
SO_ACCEPTFILTER


602 i‡(
ls
[
i
].
dñëe_de„ºed
) {

603 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
, 
NULL
, 0)

606 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

609 &
ls
[
i
].
addr_ãxt
);

611 i‡(
ls
[
i
].
ac˚±_fûãr
) {

612 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

615 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

621 
ls
[
i
].
de„ºed_ac˚±
 = 0;

624 i‡(
ls
[
i
].
add_de„ºed
) {

625 
	`ngx_memzîo
(&
af
, (
ac˚±_fûãr_¨g
));

626 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
af
.
af_«me
,

627 (
u_ch¨
 *Ë
ls
[
i
].
ac˚±_fûãr
, 16);

629 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
SOL_SOCKET
, 
SO_ACCEPTFILTER
,

630 &
af
, (
ac˚±_fûãr_¨g
))

633 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

636 
ls
[
i
].
ac˚±_fûãr
, &ls[i].
addr_ãxt
);

640 
ls
[
i
].
de„ºed_ac˚±
 = 1;

645 #ifde‡
TCP_DEFER_ACCEPT


647 i‡(
ls
[
i
].
add_de„ºed
 ||Üs[i].
dñëe_de„ºed
) {

649 i‡(
ls
[
i
].
add_de„ºed
) {

650 
timeout
 = (Ë(
ls
[
i
].
po°_ac˚±_timeout
 / 1000);

653 
timeout
 = 0;

656 i‡(
	`£tsock›t
(
ls
[
i
].
fd
, 
IPPROTO_TCP
, 
TCP_DEFER_ACCEPT
,

657 &
timeout
, ())

660 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

663 
timeout
, &
ls
[
i
].
addr_ãxt
);

669 i‡(
ls
[
i
].
add_de„ºed
) {

670 
ls
[
i
].
de„ºed_ac˚±
 = 1;

679 
	}
}

683 
	$ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
)

685 
ngx_uöt_t
 
i
;

686 
ngx_li°íög_t
 *
ls
;

687 
ngx_c⁄√˘i⁄_t
 *
c
;

689 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

693 
ngx_ac˚±_muãx_hñd
 = 0;

694 
ngx_u£_ac˚±_muãx
 = 0;

696 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

697 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

699 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

701 i‡(
c
) {

702 i‡(
c
->
ªad
->
a˘ive
) {

703 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

704 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

706 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

714 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0);

717 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

721 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

723 
c
->
fd
 = (
ngx_sockë_t
) -1;

726 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

727 "˛o£Üi°íög %V #%d ", &
ls
[
i
].
addr_ãxt
,Üs[i].
fd
);

729 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

730 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

731 
ngx_˛o£_sockë_n
 " %V faûed", &
ls
[
i
].
addr_ãxt
);

734 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

736 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX


737 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER


738 && 
ngx_√w_bö¨y
 == 0)

740 
u_ch¨
 *
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

742 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

743 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

744 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

750 
ls
[
i
].
fd
 = (
ngx_sockë_t
) -1;

753 
cy˛e
->
li°íög
.
√…s
 = 0;

754 
	}
}

757 
ngx_c⁄√˘i⁄_t
 *

758 
	$ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
)

760 
ngx_uöt_t
 
ö°™˚
;

761 
ngx_evít_t
 *
ªv
, *
wev
;

762 
ngx_c⁄√˘i⁄_t
 *
c
;

766 i‡(
ngx_cy˛e
->
fûes
 && (
ngx_uöt_t
Ë
s
 >ngx_cy˛e->
fûes_n
) {

767 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

770 
s
, 
ngx_cy˛e
->
fûes_n
);

771  
NULL
;

776 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

778 i‡(
c
 =
NULL
) {

779 
	`ngx_døö_c⁄√˘i⁄s
();

780 
c
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

783 i‡(
c
 =
NULL
) {

784 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

786 
ngx_cy˛e
->
c⁄√˘i⁄_n
);

790  
NULL
;

793 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
->
d©a
;

794 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
--;

798 i‡(
ngx_cy˛e
->
fûes
) {

799 
ngx_cy˛e
->
fûes
[
s
] = 
c
;

802 
ªv
 = 
c
->
ªad
;

803 
wev
 = 
c
->
wrôe
;

805 
	`ngx_memzîo
(
c
, (
ngx_c⁄√˘i⁄_t
));

807 
c
->
ªad
 = 
ªv
;

808 
c
->
wrôe
 = 
wev
;

809 
c
->
fd
 = 
s
;

810 
c
->
log
 =Üog;

812 
ö°™˚
 = 
ªv
->instance;

814 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

815 
	`ngx_memzîo
(
wev
, (
ngx_evít_t
));

817 
ªv
->
ö°™˚
 = !instance;

818 
wev
->
ö°™˚
 = !instance;

820 
ªv
->
ödex
 = 
NGX_INVALID_INDEX
;

821 
wev
->
ödex
 = 
NGX_INVALID_INDEX
;

823 
ªv
->
d©a
 = 
c
;

824 
wev
->
d©a
 = 
c
;

826 
wev
->
wrôe
 = 1;

828  
c
;

829 
	}
}

833 
	$ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

837 
c
->
d©a
 = 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
;

838 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
c
;

839 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
++;

843 i‡(
ngx_cy˛e
->
fûes
) {

844 
ngx_cy˛e
->
fûes
[
c
->
fd
] = 
NULL
;

846 
	}
}

850 
	$ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

852 
ngx_îr_t
 
îr
;

853 
ngx_uöt_t
 
log_îr‹
, 
Àvñ
;

854 
ngx_sockë_t
 
fd
;

856 i‡(
c
->
fd
 == -1) {

857 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "connectionálready closed");

861 i‡(
c
->
ªad
->
timî_£t
) {

862 
	`ngx_dñ_timî
(
c
->
ªad
);

865 i‡(
c
->
wrôe
->
timî_£t
) {

866 
	`ngx_dñ_timî
(
c
->
wrôe
);

869 i‡(
ngx_dñ_c⁄n
) {

870 
	`ngx_dñ_c⁄n
(
c
, 
NGX_CLOSE_EVENT
);

873 i‡(
c
->
ªad
->
a˘ive
 || c->ªad->
dißbÀd
) {

874 
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
);

877 i‡(
c
->
wrôe
->
a˘ive
 || c->wrôe->
dißbÀd
) {

878 
	`ngx_dñ_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLOSE_EVENT
);

882 #i‡(
NGX_THREADS
)

890 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

892 i‡(
c
->
ªad
->
¥ev
) {

893 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

896 i‡(
c
->
wrôe
->
¥ev
) {

897 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

900 
c
->
ªad
->
˛o£d
 = 1;

901 
c
->
wrôe
->
˛o£d
 = 1;

903 
	`ngx_u∆ock
(&
c
->
lock
);

904 
c
->
ªad
->
locked
 = 0;

905 
c
->
wrôe
->
locked
 = 0;

907 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

911 i‡(
c
->
ªad
->
¥ev
) {

912 
	`ngx_dñëe_po°ed_evít
(
c
->
ªad
);

915 i‡(
c
->
wrôe
->
¥ev
) {

916 
	`ngx_dñëe_po°ed_evít
(
c
->
wrôe
);

919 
c
->
ªad
->
˛o£d
 = 1;

920 
c
->
wrôe
->
˛o£d
 = 1;

924 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

926 
log_îr‹
 = 
c
->log_error;

928 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

930 
fd
 = 
c
->fd;

931 
c
->
fd
 = (
ngx_sockë_t
) -1;

933 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

935 
îr
 = 
ngx_sockë_î∫o
;

937 i‡(
îr
 =
NGX_ECONNRESET
 ||Éº =
NGX_ENOTCONN
) {

939 
log_îr‹
) {

941 
NGX_ERROR_INFO
:

942 
Àvñ
 = 
NGX_LOG_INFO
;

945 
NGX_ERROR_ERR
:

946 
Àvñ
 = 
NGX_LOG_ERR
;

950 
Àvñ
 = 
NGX_LOG_CRIT
;

954 
Àvñ
 = 
NGX_LOG_CRIT
;

959 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 
îr
,

960 
ngx_˛o£_sockë_n
 " %d faûed", 
fd
);

962 
	}
}

966 
	$ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
)

968 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

969 "ªußbÀ c⁄√˘i⁄: %ui", 
ªußbÀ
);

971 i‡(
c
->
ªußbÀ
) {

972 
	`ngx_queue_ªmove
(&
c
->
queue
);

974 #i‡(
NGX_STAT_STUB
)

975 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, -1);

979 
c
->
ªußbÀ
 =Ñeusable;

981 i‡(
ªußbÀ
) {

984 
	`ngx_queue_ö£π_hód
(

985 (
ngx_queue_t
 *Ë&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
, &
c
->
queue
);

987 #i‡(
NGX_STAT_STUB
)

988 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_waôög
, 1);

991 
	}
}

995 
	$ngx_døö_c⁄√˘i⁄s
()

997 
ngx_öt_t
 
i
;

998 
ngx_queue_t
 *
q
;

999 
ngx_c⁄√˘i⁄_t
 *
c
;

1001 
i
 = 0; i < 32; i++) {

1002 i‡(
	`ngx_queue_em±y
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
)) {

1006 
q
 = 
	`ngx_queue_œ°
(&
ngx_cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

1007 
c
 = 
	`ngx_queue_d©a
(
q
, 
ngx_c⁄√˘i⁄_t
, 
queue
);

1009 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

1012 
c
->
˛o£
 = 1;

1013 
c
->
ªad
->
	`h™dÀr
(c->read);

1015 
	}
}

1018 
ngx_öt_t


1019 
	$ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

1020 
ngx_uöt_t
 
p‹t
)

1022 
sockÀn_t
 
Àn
;

1023 
ngx_uöt_t
 
addr
;

1024 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

1025 
sockaddr_ö
 *
sö
;

1026 #i‡(
NGX_HAVE_INET6
)

1027 
ngx_uöt_t
 
i
;

1028 
sockaddr_ö6
 *
sö6
;

1031 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

1033 #i‡(
NGX_HAVE_INET6
)

1034 
AF_INET6
:

1035 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

1037 
addr
 = 0, 
i
 = 0;áddr == 0 && i < 16; i++) {

1038 
addr
 |
sö6
->
sö6_addr
.
s6_addr
[
i
];

1045 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

1046 
addr
 = 
sö
->
sö_addr
.
s_addr
;

1050 i‡(
addr
 == 0) {

1052 
Àn
 = 
NGX_SOCKADDRLEN
;

1054 i‡(
	`gësock«me
(
c
->
fd
, (
sockaddr
 *Ë&
ß
, &
Àn
) == -1) {

1055 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, "getsockname() failed");

1056  
NGX_ERROR
;

1059 
c
->
loˇl_sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
Àn
);

1060 i‡(
c
->
loˇl_sockaddr
 =
NULL
) {

1061  
NGX_ERROR
;

1064 
	`ngx_mem˝y
(
c
->
loˇl_sockaddr
, &
ß
, 
Àn
);

1067 i‡(
s
 =
NULL
) {

1068  
NGX_OK
;

1071 
s
->
Àn
 = 
	`ngx_sock_¡›
(
c
->
loˇl_sockaddr
, s->
d©a
, s->Àn, 
p‹t
);

1073  
NGX_OK
;

1074 
	}
}

1077 
ngx_öt_t


1078 
	$ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
)

1080 
ngx_uöt_t
 
Àvñ
;

1084 i‡((
îr
 =
NGX_ECONNRESET


1085 #i‡(
NGX_WIN32
)

1086 || 
îr
 =
NGX_ECONNABORTED


1088 Ë&& 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_ECONNRESET
)

1093 #i‡(
NGX_SOLARIS
)

1094 i‡(
îr
 =
NGX_EINVAL
 && 
c
->
log_îr‹
 =
NGX_ERROR_IGNORE_EINVAL
) {

1099 i‡(
îr
 == 0

1100 || 
îr
 =
NGX_ECONNRESET


1101 #i‡(
NGX_WIN32
)

1102 || 
îr
 =
NGX_ECONNABORTED


1104 || 
îr
 =
NGX_EPIPE


1106 || 
îr
 =
NGX_ENOTCONN


1107 || 
îr
 =
NGX_ETIMEDOUT


1108 || 
îr
 =
NGX_ECONNREFUSED


1109 || 
îr
 =
NGX_ENETDOWN


1110 || 
îr
 =
NGX_ENETUNREACH


1111 || 
îr
 =
NGX_EHOSTDOWN


1112 || 
îr
 =
NGX_EHOSTUNREACH
)

1114 
c
->
log_îr‹
) {

1116 
NGX_ERROR_IGNORE_EINVAL
:

1117 
NGX_ERROR_IGNORE_ECONNRESET
:

1118 
NGX_ERROR_INFO
:

1119 
Àvñ
 = 
NGX_LOG_INFO
;

1123 
Àvñ
 = 
NGX_LOG_ERR
;

1127 
Àvñ
 = 
NGX_LOG_ALERT
;

1130 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1132  
NGX_ERROR
;

1133 
	}
}

	@src/core/ngx_connection.h

8 #i‚de‡
_NGX_CONNECTION_H_INCLUDED_


9 
	#_NGX_CONNECTION_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°íög_s
 
	tngx_li°íög_t
;

18 
	sngx_li°íög_s
 {

19 
ngx_sockë_t
 
	mfd
;

21 
sockaddr
 *
	msockaddr
;

22 
sockÀn_t
 
	msockÀn
;

23 
size_t
 
	maddr_ãxt_max_Àn
;

24 
ngx_°r_t
 
	maddr_ãxt
;

26 
	mty≥
;

28 
	mbacklog
;

29 
	mrcvbuf
;

30 
	m¢dbuf
;

31 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

32 
	mkìpidÀ
;

33 
	mkìpötvl
;

34 
	mkìp˙t
;

38 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

40 *
	m£rvîs
;

42 
ngx_log_t
 
	mlog
;

43 
ngx_log_t
 *
	mlogp
;

45 
size_t
 
	mpoﬁ_size
;

47 
size_t
 
	mpo°_ac˚±_buf„r_size
;

49 
ngx_m£c_t
 
	mpo°_ac˚±_timeout
;

51 
ngx_li°íög_t
 *
	m¥evious
;

52 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

54 
	m›í
:1;

55 
	mªmaö
:1;

56 
	mign‹e
:1;

58 
	mbound
:1;

59 
	möhîôed
:1;

60 
	mn⁄blockög_ac˚±
:1;

61 
	mli°í
:1;

62 
	mn⁄blockög
:1;

63 
	msh¨ed
:1;

64 
	maddr_¡›
:1;

66 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

67 
	mùv6⁄ly
:1;

69 
	mkì∑live
:2;

71 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

72 
	mde„ºed_ac˚±
:1;

73 
	mdñëe_de„ºed
:1;

74 
	madd_de„ºed
:1;

75 #ifde‡
SO_ACCEPTFILTER


76 *
	mac˚±_fûãr
;

79 #i‡(
NGX_HAVE_SETFIB
)

80 
	m£tfib
;

87 
	mNGX_ERROR_ALERT
 = 0,

88 
	mNGX_ERROR_ERR
,

89 
	mNGX_ERROR_INFO
,

90 
	mNGX_ERROR_IGNORE_ECONNRESET
,

91 
	mNGX_ERROR_IGNORE_EINVAL


92 } 
	tngx_c⁄√˘i⁄_log_îr‹_e
;

96 
	mNGX_TCP_NODELAY_UNSET
 = 0,

97 
	mNGX_TCP_NODELAY_SET
,

98 
	mNGX_TCP_NODELAY_DISABLED


99 } 
	tngx_c⁄√˘i⁄_t˝_nodñay_e
;

103 
	mNGX_TCP_NOPUSH_UNSET
 = 0,

104 
	mNGX_TCP_NOPUSH_SET
,

105 
	mNGX_TCP_NOPUSH_DISABLED


106 } 
	tngx_c⁄√˘i⁄_t˝_n›ush_e
;

109 
	#NGX_LOWLEVEL_BUFFERED
 0x0f

	)

110 
	#NGX_SSL_BUFFERED
 0x01

	)

113 
	sngx_c⁄√˘i⁄_s
 {

114 *
	md©a
;

115 
ngx_evít_t
 *
	mªad
;

116 
ngx_evít_t
 *
	mwrôe
;

118 
ngx_sockë_t
 
	mfd
;

120 
ngx_ªcv_±
 
	mªcv
;

121 
ngx_£nd_±
 
	m£nd
;

122 
ngx_ªcv_chaö_±
 
	mªcv_chaö
;

123 
ngx_£nd_chaö_±
 
	m£nd_chaö
;

125 
ngx_li°íög_t
 *
	mli°íög
;

127 
off_t
 
	m£¡
;

129 
ngx_log_t
 *
	mlog
;

131 
ngx_poﬁ_t
 *
	mpoﬁ
;

133 
sockaddr
 *
	msockaddr
;

134 
sockÀn_t
 
	msockÀn
;

135 
ngx_°r_t
 
	maddr_ãxt
;

137 #i‡(
NGX_SSL
)

138 
ngx_s¶_c⁄√˘i⁄_t
 *
	ms¶
;

141 
sockaddr
 *
	mloˇl_sockaddr
;

143 
ngx_buf_t
 *
	mbuf„r
;

145 
ngx_queue_t
 
	mqueue
;

147 
ngx_©omic_uöt_t
 
	mnumbî
;

149 
ngx_uöt_t
 
	mªque°s
;

151 
	mbuf„ªd
:8;

153 
	mlog_îr‹
:3;

155 
	mu√x≥˘ed_eof
:1;

156 
	mtimedout
:1;

157 
	mîr‹
:1;

158 
	mde°royed
:1;

160 
	midÀ
:1;

161 
	mªußbÀ
:1;

162 
	m˛o£
:1;

164 
	m£ndfûe
:1;

165 
	m¢dlow©
:1;

166 
	mt˝_nodñay
:2;

167 
	mt˝_n›ush
:2;

169 #i‡(
NGX_HAVE_IOCP
)

170 
	mac˚±_c⁄ãxt_upd©ed
:1;

173 #i‡(
NGX_HAVE_AIO_SENDFILE
)

174 
	maio_£ndfûe
:1;

175 
ngx_buf_t
 *
	mbusy_£ndfûe
;

178 #i‡(
NGX_THREADS
)

179 
ngx_©omic_t
 
	mlock
;

184 
ngx_li°íög_t
 *
ngx_¸óã_li°íög
(
ngx_c⁄f_t
 *
cf
, *
sockaddr
,

185 
sockÀn_t
 
sockÀn
);

186 
ngx_öt_t
 
ngx_£t_öhîôed_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

187 
ngx_öt_t
 
ngx_›í_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

188 
ngx_c⁄figuª_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

189 
ngx_˛o£_li°íög_sockës
(
ngx_cy˛e_t
 *
cy˛e
);

190 
ngx_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

191 
ngx_öt_t
 
ngx_c⁄√˘i⁄_loˇl_sockaddr
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_°r_t
 *
s
,

192 
ngx_uöt_t
 
p‹t
);

193 
ngx_öt_t
 
ngx_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_îr_t
 
îr
, *
ãxt
);

195 
ngx_c⁄√˘i⁄_t
 *
ngx_gë_c⁄√˘i⁄
(
ngx_sockë_t
 
s
, 
ngx_log_t
 *
log
);

196 
ngx_‰ì_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

198 
ngx_ªußbÀ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
ªußbÀ
);

	@src/core/ngx_core.h

8 #i‚de‡
_NGX_CORE_H_INCLUDED_


9 
	#_NGX_CORE_H_INCLUDED_


	)

12 
ngx_moduÀ_s
 
	tngx_moduÀ_t
;

13 
ngx_c⁄f_s
 
	tngx_c⁄f_t
;

14 
ngx_cy˛e_s
 
	tngx_cy˛e_t
;

15 
ngx_poﬁ_s
 
	tngx_poﬁ_t
;

16 
ngx_chaö_s
 
	tngx_chaö_t
;

17 
ngx_log_s
 
	tngx_log_t
;

18 
ngx_›í_fûe_s
 
	tngx_›í_fûe_t
;

19 
ngx_comm™d_s
 
	tngx_comm™d_t
;

20 
ngx_fûe_s
 
	tngx_fûe_t
;

21 
ngx_evít_s
 
	tngx_evít_t
;

22 
ngx_evít_aio_s
 
	tngx_evít_aio_t
;

23 
ngx_c⁄√˘i⁄_s
 
	tngx_c⁄√˘i⁄_t
;

25 (*
	tngx_evít_h™dÀr_±
)(
	tngx_evít_t
 *
	tev
);

26 (*
	tngx_c⁄√˘i⁄_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
);

29 
	#NGX_OK
 0

	)

30 
	#NGX_ERROR
 -1

	)

31 
	#NGX_AGAIN
 -2

	)

32 
	#NGX_BUSY
 -3

	)

33 
	#NGX_DONE
 -4

	)

34 
	#NGX_DECLINED
 -5

	)

35 
	#NGX_ABORT
 -6

	)

38 
	~<ngx_î∫o.h
>

39 
	~<ngx_©omic.h
>

40 
	~<ngx_thªad.h
>

41 
	~<ngx_rbåì.h
>

42 
	~<ngx_time.h
>

43 
	~<ngx_sockë.h
>

44 
	~<ngx_°rög.h
>

45 
	~<ngx_fûes.h
>

46 
	~<ngx_shmem.h
>

47 
	~<ngx_¥o˚ss.h
>

48 
	~<ngx_u£r.h
>

49 
	~<ngx_∑r£.h
>

50 
	~<ngx_log.h
>

51 
	~<ngx_Æloc.h
>

52 
	~<ngx_∑Œoc.h
>

53 
	~<ngx_buf.h
>

54 
	~<ngx_queue.h
>

55 
	~<ngx_¨øy.h
>

56 
	~<ngx_li°.h
>

57 
	~<ngx_hash.h
>

58 
	~<ngx_fûe.h
>

59 
	~<ngx_¸c.h
>

60 
	~<ngx_¸c32.h
>

61 
	~<ngx_murmurhash.h
>

62 #i‡(
NGX_PCRE
)

63 
	~<ngx_ªgex.h
>

65 
	~<ngx_ødix_åì.h
>

66 
	~<ngx_times.h
>

67 
	~<ngx_shmtx.h
>

68 
	~<ngx_¶ab.h
>

69 
	~<ngx_öë.h
>

70 
	~<ngx_cy˛e.h
>

71 
	~<ngx_ªsﬁvî.h
>

72 #i‡(
NGX_OPENSSL
)

73 
	~<ngx_evít_›ís¶.h
>

75 
	~<ngx_¥o˚ss_cy˛e.h
>

76 
	~<ngx_c⁄f_fûe.h
>

77 
	~<ngx_›í_fûe_ˇche.h
>

78 
	~<ngx_os.h
>

79 
	~<ngx_c⁄√˘i⁄.h
>

82 
	#LF
 (
u_ch¨
Ë10

	)

83 
	#CR
 (
u_ch¨
Ë13

	)

84 
	#CRLF
 "\x0d\x0a"

	)

87 
	#ngx_abs
(
vÆue
Ë(((vÆueË>0Ë? (vÆueË: - (vÆue))

	)

88 
	#ngx_max
(
vÆ1
, 
vÆ2
Ë((vÆ1 < vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

89 
	#ngx_mö
(
vÆ1
, 
vÆ2
Ë((vÆ1 > vÆ2Ë? (vÆ2Ë: (vÆ1))

	)

91 
	`ngx_˝uöfo
();

93 #i‡(
NGX_HAVE_OPENAT
)

94 
	#NGX_DISABLE_SYMLINKS_OFF
 0

	)

95 
	#NGX_DISABLE_SYMLINKS_ON
 1

	)

96 
	#NGX_DISABLE_SYMLINKS_NOTOWNER
 2

	)

	@src/core/ngx_cpuinfo.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(–
__i386__
 || 
__amd64__
 ) && ( 
__GNUC__
 || 
__INTEL_COMPILER
 ))

15 
ngx_ölöe
 
ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
);

18 #i‡–
__i386__
 )

20 
ngx_ölöe
 

21 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

30 
	`__asm__
 (

42 : : "a" (
i
), "D" (
buf
) : "ecx", "edx", "esi", "memory" );

43 
	}
}

49 
ngx_ölöe
 

50 
	$ngx_˝uid
(
uöt32_t
 
i
, uöt32_à*
buf
)

52 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

54 
	`__asm__
 (

58 : "˜" (
óx
), "=b" (
ebx
), "=c" (
ecx
), "=d" (
edx
Ë: "a" (
i
) );

60 
buf
[0] = 
óx
;

61 
buf
[1] = 
ebx
;

62 
buf
[2] = 
edx
;

63 
buf
[3] = 
ecx
;

64 
	}
}

73 
	$ngx_˝uöfo
()

75 
u_ch¨
 *
víd‹
;

76 
uöt32_t
 
vbuf
[5], 
˝u
[4], 
modñ
;

78 
vbuf
[0] = 0;

79 
vbuf
[1] = 0;

80 
vbuf
[2] = 0;

81 
vbuf
[3] = 0;

82 
vbuf
[4] = 0;

84 
	`ngx_˝uid
(0, 
vbuf
);

86 
víd‹
 = (
u_ch¨
 *Ë&
vbuf
[1];

88 i‡(
vbuf
[0] == 0) {

92 
	`ngx_˝uid
(1, 
˝u
);

94 i‡(
	`ngx_°rcmp
(
víd‹
, "GenuineIntel") == 0) {

96 (
˝u
[0] & 0xf00) >> 8) {

100 
ngx_ˇchñöe_size
 = 32;

105 
ngx_ˇchñöe_size
 = 32;

107 
modñ
 = ((
˝u
[0] & 0xf0000) >> 8) | (cpu[0] & 0xf0);

109 i‡(
modñ
 >= 0xd0) {

111 
ngx_ˇchñöe_size
 = 64;

121 
ngx_ˇchñöe_size
 = 128;

125 } i‡(
	`ngx_°rcmp
(
víd‹
, "AuthenticAMD") == 0) {

126 
ngx_ˇchñöe_size
 = 64;

128 
	}
}

134 
	$ngx_˝uöfo
()

136 
	}
}

	@src/core/ngx_crc.h

8 #i‚de‡
_NGX_CRC_H_INCLUDED_


9 
	#_NGX_CRC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
uöt32_t


19 
	$ngx_¸c
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

21 
uöt32_t
 
sum
;

23 
sum
 = 0; 
Àn
;Üen--) {

30 
sum
 = sum >> 1 | sum << 31;

32 
sum
 +*
d©a
++;

35  
sum
;

36 
	}
}

	@src/core/ngx_crc32.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

26 
uöt32_t
 
	gngx_¸c32_èbÀ16
[] = {

34 
uöt32_t
 
	gngx_¸c32_èbÀ256
[] = {

102 
uöt32_t
 *
	gngx_¸c32_èbÀ_sh‹t
 = 
ngx_¸c32_èbÀ16
;

105 
ngx_öt_t


106 
	$ngx_¸c32_èbÀ_öô
()

108 *
p
;

110 i‡(((
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t


111 & ~((
uöçå_t
Ë
ngx_ˇchñöe_size
 - 1))

112 =(
uöçå_t
Ë
ngx_¸c32_èbÀ_sh‹t
)

114  
NGX_OK
;

117 
p
 = 
	`ngx_Æloc
(16 * (
uöt32_t
Ë+ 
ngx_ˇchñöe_size
, 
ngx_cy˛e
->
log
);

118 i‡(
p
 =
NULL
) {

119  
NGX_ERROR
;

122 
p
 = 
	`ngx_Æign_±r
’, 
ngx_ˇchñöe_size
);

124 
	`ngx_mem˝y
(
p
, 
ngx_¸c32_èbÀ16
, 16 * (
uöt32_t
));

126 
ngx_¸c32_èbÀ_sh‹t
 = 
p
;

128  
NGX_OK
;

129 
	}
}

	@src/core/ngx_crc32.h

8 #i‚de‡
_NGX_CRC32_H_INCLUDED_


9 
	#_NGX_CRC32_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 *
ngx_¸c32_èbÀ_sh‹t
;

17 
uöt32_t
 
ngx_¸c32_èbÀ256
[];

20 
ngx_ölöe
 
uöt32_t


21 
	$ngx_¸c32_sh‹t
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

23 
u_ch¨
 
c
;

24 
uöt32_t
 
¸c
;

26 
¸c
 = 0xffffffff;

28 
Àn
--) {

29 
c
 = *
p
++;

30 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 & 0xf)) & 0xf] ^ (crc >> 4);

31 
¸c
 = 
ngx_¸c32_èbÀ_sh‹t
[(¸¯^ (
c
 >> 4)) & 0xf] ^ (crc >> 4);

34  
¸c
 ^ 0xffffffff;

35 
	}
}

38 
ngx_ölöe
 
uöt32_t


39 
	$ngx_¸c32_l⁄g
(
u_ch¨
 *
p
, 
size_t
 
Àn
)

41 
uöt32_t
 
¸c
;

43 
¸c
 = 0xffffffff;

45 
Àn
--) {

46 
¸c
 = 
ngx_¸c32_èbÀ256
[(¸¯^ *
p
++) & 0xff] ^ (crc >> 8);

49  
¸c
 ^ 0xffffffff;

50 
	}
}

53 
	#ngx_¸c32_öô
(
¸c
) \

54 
¸c
 = 0xffffffff

	)

57 
ngx_ölöe
 

58 
	$ngx_¸c32_upd©e
(
uöt32_t
 *
¸c
, 
u_ch¨
 *
p
, 
size_t
 
Àn
)

60 
uöt32_t
 
c
;

62 
c
 = *
¸c
;

64 
Àn
--) {

65 
c
 = 
ngx_¸c32_èbÀ256
[(¯^ *
p
++) & 0xff] ^ (c >> 8);

68 *
¸c
 = 
c
;

69 
	}
}

72 
	#ngx_¸c32_föÆ
(
¸c
) \

73 
¸c
 ^0xffffffff

	)

76 
ngx_öt_t
 
ngx_¸c32_èbÀ_öô
();

	@src/core/ngx_crypt.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_¸y±.h
>

10 
	~<ngx_md5.h
>

11 #i‡(
NGX_HAVE_SHA1
)

12 
	~<ngx_sha1.h
>

16 #i‡(
NGX_CRYPT
)

18 
ngx_öt_t
 
ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

19 
u_ch¨
 **
í¸y±ed
);

20 
ngx_öt_t
 
ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

23 #i‡(
NGX_HAVE_SHA1
)

25 
ngx_öt_t
 
ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

26 
u_ch¨
 **
í¸y±ed
);

27 
ngx_öt_t
 
ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

28 
u_ch¨
 **
í¸y±ed
);

33 
u_ch¨
 *
ngx_¸y±_to64
(u_ch¨ *
p
, 
uöt32_t
 
v
, 
size_t
 
n
);

36 
ngx_öt_t


37 
	$ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

39 i‡(
	`ngx_°∫cmp
(
ß…
, "$apr1$", ("$apr1$") - 1) == 0) {

40  
	`ngx_¸y±_≠r1
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

42 } i‡(
	`ngx_°∫cmp
(
ß…
, "{PLAIN}", ("{PLAIN}") - 1) == 0) {

43  
	`ngx_¸y±_∂aö
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

45 #i‡(
NGX_HAVE_SHA1
)

46 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SSHA}", ("{SSHA}") - 1) == 0) {

47  
	`ngx_¸y±_ssha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

49 } i‡(
	`ngx_°∫cmp
(
ß…
, "{SHA}", ("{SHA}") - 1) == 0) {

50  
	`ngx_¸y±_sha
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

56  
	`ngx_libc_¸y±
(
poﬁ
, 
key
, 
ß…
, 
í¸y±ed
);

57 
	}
}

60 
ngx_öt_t


61 
	$ngx_¸y±_≠r1
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

63 
ngx_öt_t
 
n
;

64 
ngx_uöt_t
 
i
;

65 
u_ch¨
 *
p
, *
œ°
, 
föÆ
[16];

66 
size_t
 
ß…Àn
, 
keyÀn
;

67 
ngx_md5_t
 
md5
, 
˘x1
;

71 
keyÀn
 = 
	`ngx_°æí
(
key
);

75 
ß…
 += ("$apr1$") - 1;

76 
œ°
 = 
ß…
 + 8;

77 
p
 = 
ß…
; *∞&& *∞!'$' &&Ö < 
œ°
;Ö++) { }

78 
ß…Àn
 = 
p
 - 
ß…
;

82 
	`ngx_md5_öô
(&
md5
);

83 
	`ngx_md5_upd©e
(&
md5
, 
key
, 
keyÀn
);

84 
	`ngx_md5_upd©e
(&
md5
, (
u_ch¨
 *) "$apr1$", ("$apr1$") - 1);

85 
	`ngx_md5_upd©e
(&
md5
, 
ß…
, 
ß…Àn
);

87 
	`ngx_md5_öô
(&
˘x1
);

88 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

89 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

90 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

91 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

93 
n
 = 
keyÀn
;Ç > 0;Ç -= 16) {

94 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 
n
 > 16 ? 16 :Ç);

97 
	`ngx_memzîo
(
föÆ
, (final));

99 
i
 = 
keyÀn
; i; i >>= 1) {

100 i‡(
i
 & 1) {

101 
	`ngx_md5_upd©e
(&
md5
, 
föÆ
, 1);

104 
	`ngx_md5_upd©e
(&
md5
, 
key
, 1);

108 
	`ngx_md5_föÆ
(
föÆ
, &
md5
);

110 
i
 = 0; i < 1000; i++) {

111 
	`ngx_md5_öô
(&
˘x1
);

113 i‡(
i
 & 1) {

114 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

117 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

120 i‡(
i
 % 3) {

121 
	`ngx_md5_upd©e
(&
˘x1
, 
ß…
, 
ß…Àn
);

124 i‡(
i
 % 7) {

125 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

128 i‡(
i
 & 1) {

129 
	`ngx_md5_upd©e
(&
˘x1
, 
föÆ
, 16);

132 
	`ngx_md5_upd©e
(&
˘x1
, 
key
, 
keyÀn
);

135 
	`ngx_md5_föÆ
(
föÆ
, &
˘x1
);

140 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("$≠r1$"Ë- 1 + 
ß…Àn
 + 16 + 1);

141 i‡(*
í¸y±ed
 =
NULL
) {

142  
NGX_ERROR
;

145 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "$apr1$", ("$apr1$") - 1);

146 
p
 = 
	`ngx_c›y
’, 
ß…
, 
ß…Àn
);

147 *
p
++ = '$';

149 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 0]<<16) | (final[ 6]<<8) | final[12], 4);

150 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 1]<<16) | (final[ 7]<<8) | final[13], 4);

151 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 2]<<16) | (final[ 8]<<8) | final[14], 4);

152 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 3]<<16) | (final[ 9]<<8) | final[15], 4);

153 
p
 = 
	`ngx_¸y±_to64
’, (
föÆ
[ 4]<<16) | (final[10]<<8) | final[ 5], 4);

154 
p
 = 
	`ngx_¸y±_to64
’, 
föÆ
[11], 2);

155 *
p
 = '\0';

157  
NGX_OK
;

158 
	}
}

161 
u_ch¨
 *

162 
	$ngx_¸y±_to64
(
u_ch¨
 *
p
, 
uöt32_t
 
v
, 
size_t
 
n
)

164 
u_ch¨
 
ôﬂ64
[] =

167 
n
--) {

168 *
p
++ = 
ôﬂ64
[
v
 & 0x3f];

169 
v
 >>= 6;

172  
p
;

173 
	}
}

176 
ngx_öt_t


177 
	$ngx_¸y±_∂aö
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

179 
size_t
 
Àn
;

180 
u_ch¨
 *
p
;

182 
Àn
 = 
	`ngx_°æí
(
key
);

184 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, ("{PLAIN}"Ë- 1 + 
Àn
 + 1);

185 i‡(*
í¸y±ed
 =
NULL
) {

186  
NGX_ERROR
;

189 
p
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{PLAIN}", ("{PLAIN}") - 1);

190 
	`ngx_mem˝y
(
p
, 
key
, 
Àn
 + 1);

192  
NGX_OK
;

193 
	}
}

196 #i‡(
NGX_HAVE_SHA1
)

198 
ngx_öt_t


199 
	$ngx_¸y±_ssha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

201 
size_t
 
Àn
;

202 
ngx_öt_t
 
rc
;

203 
ngx_°r_t
 
ícoded
, 
decoded
;

204 
ngx_sha1_t
 
sha1
;

210 
ícoded
.
d©a
 = 
ß…
 + ("{SSHA}") - 1;

211 
ícoded
.
Àn
 = 
	`ngx_°æí
”ncoded.
d©a
);

213 
Àn
 = 
	`ngx_max
(
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len), 20);

215 
decoded
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

216 i‡(
decoded
.
d©a
 =
NULL
) {

217  
NGX_ERROR
;

220 
rc
 = 
	`ngx_decode_ba£64
(&
decoded
, &
ícoded
);

222 i‡(
rc
 !
NGX_OK
 || 
decoded
.
Àn
 < 20) {

223 
decoded
.
Àn
 = 20;

228 
	`ngx_sha1_öô
(&
sha1
);

229 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

230 
	`ngx_sha1_upd©e
(&
sha1
, 
decoded
.
d©a
 + 20, decoded.
Àn
 - 20);

231 
	`ngx_sha1_föÆ
(
decoded
.
d©a
, &
sha1
);

235 
Àn
 = ("{SSHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

237 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

238 i‡(*
í¸y±ed
 =
NULL
) {

239  
NGX_ERROR
;

242 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SSHA}", ("{SSHA}") - 1);

243 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

244 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

246  
NGX_OK
;

247 
	}
}

250 
ngx_öt_t


251 
	$ngx_¸y±_sha
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

253 
size_t
 
Àn
;

254 
ngx_°r_t
 
ícoded
, 
decoded
;

255 
ngx_sha1_t
 
sha1
;

256 
u_ch¨
 
dige°
[20];

260 
decoded
.
Àn
 = (
dige°
);

261 
decoded
.
d©a
 = 
dige°
;

263 
	`ngx_sha1_öô
(&
sha1
);

264 
	`ngx_sha1_upd©e
(&
sha1
, 
key
, 
	`ngx_°æí
(key));

265 
	`ngx_sha1_föÆ
(
dige°
, &
sha1
);

267 
Àn
 = ("{SHA}"Ë- 1 + 
	`ngx_ba£64_ícoded_Àngth
(
decoded
.len) + 1;

269 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

270 i‡(*
í¸y±ed
 =
NULL
) {

271  
NGX_ERROR
;

274 
ícoded
.
d©a
 = 
	`ngx_˝ymem
(*
í¸y±ed
, "{SHA}", ("{SHA}") - 1);

275 
	`ngx_ícode_ba£64
(&
ícoded
, &
decoded
);

276 
ícoded
.
d©a
[ícoded.
Àn
] = '\0';

278  
NGX_OK
;

279 
	}
}

	@src/core/ngx_crypt.h

8 #i‚de‡
_NGX_CRYPT_H_INCLUDED_


9 
	#_NGX_CRYPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_öt_t
 
ngx_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

17 
u_ch¨
 **
í¸y±ed
);

	@src/core/ngx_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
);

14 
ngx_öt_t
 
ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
);

15 
ngx_öt_t
 
ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
,

16 
ngx_shm_z⁄e_t
 *
shm_z⁄e
);

17 
ngx_öt_t
 
ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
);

18 
ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
);

21 vﬁ©ûê
ngx_cy˛e_t
 *
	gngx_cy˛e
;

22 
ngx_¨øy_t
 
	gngx_ﬁd_cy˛es
;

24 
ngx_poﬁ_t
 *
	gngx_ãmp_poﬁ
;

25 
ngx_evít_t
 
	gngx_˛ó√r_evít
;

27 
ngx_uöt_t
 
	gngx_ã°_c⁄fig
;

28 
ngx_uöt_t
 
	gngx_quõt_mode
;

30 #i‡(
NGX_THREADS
)

31 
ngx_és_key_t
 
	gngx_c‹e_és_key
;

36 
ngx_c⁄√˘i⁄_t
 
	gdumb
;

39 
ngx_°r_t
 
	gîr‹_log
 = 
ngx_°rög
(
NGX_ERROR_LOG_PATH
);

42 
ngx_cy˛e_t
 *

43 
	$ngx_öô_cy˛e
(
ngx_cy˛e_t
 *
ﬁd_cy˛e
)

45 *
rv
;

46 **
£nv
, **
ív
;

47 
ngx_uöt_t
 
i
, 
n
;

48 
ngx_log_t
 *
log
;

49 
ngx_time_t
 *
ç
;

50 
ngx_c⁄f_t
 
c⁄f
;

51 
ngx_poﬁ_t
 *
poﬁ
;

52 
ngx_cy˛e_t
 *
cy˛e
, **
ﬁd
;

53 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
oshm_z⁄e
;

54 
ngx_li°_∑π_t
 *
∑π
, *
›¨t
;

55 
ngx_›í_fûe_t
 *
fûe
;

56 
ngx_li°íög_t
 *
ls
, *
∆s
;

57 
ngx_c‹e_c⁄f_t
 *
ccf
, *
ﬁd_ccf
;

58 
ngx_c‹e_moduÀ_t
 *
moduÀ
;

59 
ho°«me
[
NGX_MAXHOSTNAMELEN
];

61 
	`ngx_timez⁄e_upd©e
();

65 
ç
 = 
	`ngx_timeofday
();

66 
ç
->
£c
 = 0;

68 
	`ngx_time_upd©e
();

71 
log
 = 
ﬁd_cy˛e
->log;

73 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

74 i‡(
poﬁ
 =
NULL
) {

75  
NULL
;

77 
poﬁ
->
log
 =Üog;

79 
cy˛e
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_cy˛e_t
));

80 i‡(
cy˛e
 =
NULL
) {

81 
	`ngx_de°roy_poﬁ
(
poﬁ
);

82  
NULL
;

85 
cy˛e
->
poﬁ
 =Öool;

86 
cy˛e
->
log
 =Üog;

87 
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

88 
cy˛e
->
ﬁd_cy˛e
 = old_cycle;

90 
cy˛e
->
c⁄f_¥efix
.
Àn
 = 
ﬁd_cy˛e
->conf_prefix.len;

91 
cy˛e
->
c⁄f_¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_prefix);

92 i‡(
cy˛e
->
c⁄f_¥efix
.
d©a
 =
NULL
) {

93 
	`ngx_de°roy_poﬁ
(
poﬁ
);

94  
NULL
;

97 
cy˛e
->
¥efix
.
Àn
 = 
ﬁd_cy˛e
->prefix.len;

98 
cy˛e
->
¥efix
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->prefix);

99 i‡(
cy˛e
->
¥efix
.
d©a
 =
NULL
) {

100 
	`ngx_de°roy_poﬁ
(
poﬁ
);

101  
NULL
;

104 
cy˛e
->
c⁄f_fûe
.
Àn
 = 
ﬁd_cy˛e
->conf_file.len;

105 
cy˛e
->
c⁄f_fûe
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ﬁd_cy˛e
->c⁄f_fûe.
Àn
 + 1);

106 i‡(
cy˛e
->
c⁄f_fûe
.
d©a
 =
NULL
) {

107 
	`ngx_de°roy_poﬁ
(
poﬁ
);

108  
NULL
;

110 
	`ngx_˝y°∫
(
cy˛e
->
c⁄f_fûe
.
d©a
, 
ﬁd_cy˛e
->conf_file.data,

111 
ﬁd_cy˛e
->
c⁄f_fûe
.
Àn
 + 1);

113 
cy˛e
->
c⁄f_∑øm
.
Àn
 = 
ﬁd_cy˛e
->conf_param.len;

114 
cy˛e
->
c⁄f_∑øm
.
d©a
 = 
	`ngx_p°rdup
(
poﬁ
, &
ﬁd_cy˛e
->conf_param);

115 i‡(
cy˛e
->
c⁄f_∑øm
.
d©a
 =
NULL
) {

116 
	`ngx_de°roy_poﬁ
(
poﬁ
);

117  
NULL
;

121 
n
 = 
ﬁd_cy˛e
->
∑ths
.
√…s
 ? old_cycle->paths.nelts : 10;

123 
cy˛e
->
∑ths
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_∑th_t
 *));

124 i‡(
cy˛e
->
∑ths
.
ñts
 =
NULL
) {

125 
	`ngx_de°roy_poﬁ
(
poﬁ
);

126  
NULL
;

129 
cy˛e
->
∑ths
.
√…s
 = 0;

130 
cy˛e
->
∑ths
.
size
 = (
ngx_∑th_t
 *);

131 
cy˛e
->
∑ths
.
«Œoc
 = 
n
;

132 
cy˛e
->
∑ths
.
poﬁ
 =Öool;

135 i‡(
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
) {

136 
n
 = 
ﬁd_cy˛e
->
›í_fûes
.
∑π
.
√…s
;

137 
∑π
 = 
ﬁd_cy˛e
->
›í_fûes
.∑π.
√xt
;Öart;Öart =Öart->next) {

138 
n
 +
∑π
->
√…s
;

142 
n
 = 20;

145 i‡(
	`ngx_li°_öô
(&
cy˛e
->
›í_fûes
, 
poﬁ
, 
n
, (
ngx_›í_fûe_t
))

146 !
NGX_OK
)

148 
	`ngx_de°roy_poﬁ
(
poﬁ
);

149  
NULL
;

153 i‡(
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
) {

154 
n
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
.
√…s
;

155 
∑π
 = 
ﬁd_cy˛e
->
sh¨ed_mem‹y
.∑π.
√xt
;Öart;Öart =Öart->next)

157 
n
 +
∑π
->
√…s
;

161 
n
 = 1;

164 i‡(
	`ngx_li°_öô
(&
cy˛e
->
sh¨ed_mem‹y
, 
poﬁ
, 
n
, (
ngx_shm_z⁄e_t
))

165 !
NGX_OK
)

167 
	`ngx_de°roy_poﬁ
(
poﬁ
);

168  
NULL
;

171 
n
 = 
ﬁd_cy˛e
->
li°íög
.
√…s
 ? old_cycle->listening.nelts : 10;

173 
cy˛e
->
li°íög
.
ñts
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
n
 * (
ngx_li°íög_t
));

174 i‡(
cy˛e
->
li°íög
.
ñts
 =
NULL
) {

175 
	`ngx_de°roy_poﬁ
(
poﬁ
);

176  
NULL
;

179 
cy˛e
->
li°íög
.
√…s
 = 0;

180 
cy˛e
->
li°íög
.
size
 = (
ngx_li°íög_t
);

181 
cy˛e
->
li°íög
.
«Œoc
 = 
n
;

182 
cy˛e
->
li°íög
.
poﬁ
 =Öool;

185 
	`ngx_queue_öô
(&
cy˛e
->
ªußbÀ_c⁄√˘i⁄s_queue
);

188 
cy˛e
->
c⁄f_˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
ngx_max_moduÀ
 * (*));

189 i‡(
cy˛e
->
c⁄f_˘x
 =
NULL
) {

190 
	`ngx_de°roy_poﬁ
(
poﬁ
);

191  
NULL
;

195 i‡(
	`gëho°«me
(
ho°«me
, 
NGX_MAXHOSTNAMELEN
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "gethostname() failed");

197 
	`ngx_de°roy_poﬁ
(
poﬁ
);

198  
NULL
;

203 
ho°«me
[
NGX_MAXHOSTNAMELEN
 - 1] = '\0';

204 
cy˛e
->
ho°«me
.
Àn
 = 
	`ngx_°æí
(hostname);

206 
cy˛e
->
ho°«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, cy˛e->ho°«me.
Àn
);

207 i‡(
cy˛e
->
ho°«me
.
d©a
 =
NULL
) {

208 
	`ngx_de°roy_poﬁ
(
poﬁ
);

209  
NULL
;

212 
	`ngx_°æow
(
cy˛e
->
ho°«me
.
d©a
, (
u_ch¨
 *Ëho°«me, cy˛e->ho°«me.
Àn
);

215 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

216 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

220 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

222 i‡(
moduÀ
->
¸óã_c⁄f
) {

223 
rv
 = 
moduÀ
->
	`¸óã_c⁄f
(
cy˛e
);

224 i‡(
rv
 =
NULL
) {

225 
	`ngx_de°roy_poﬁ
(
poﬁ
);

226  
NULL
;

228 
cy˛e
->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
] = 
rv
;

233 
£nv
 = 
ívú⁄
;

236 
	`ngx_memzîo
(&
c⁄f
, (
ngx_c⁄f_t
));

238 
c⁄f
.
¨gs
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 10, (
ngx_°r_t
));

239 i‡(
c⁄f
.
¨gs
 =
NULL
) {

240 
	`ngx_de°roy_poﬁ
(
poﬁ
);

241  
NULL
;

244 
c⁄f
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_CYCLE_POOL_SIZE
, 
log
);

245 i‡(
c⁄f
.
ãmp_poﬁ
 =
NULL
) {

246 
	`ngx_de°roy_poﬁ
(
poﬁ
);

247  
NULL
;

251 
c⁄f
.
˘x
 = 
cy˛e
->
c⁄f_˘x
;

252 
c⁄f
.
cy˛e
 = cycle;

253 
c⁄f
.
poﬁ
 =Öool;

254 
c⁄f
.
log
 =Üog;

255 
c⁄f
.
moduÀ_ty≥
 = 
NGX_CORE_MODULE
;

256 
c⁄f
.
cmd_ty≥
 = 
NGX_MAIN_CONF
;

259 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

262 i‡(
	`ngx_c⁄f_∑øm
(&
c⁄f
Ë!
NGX_CONF_OK
) {

263 
ívú⁄
 = 
£nv
;

264 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

265  
NULL
;

268 i‡(
	`ngx_c⁄f_∑r£
(&
c⁄f
, &
cy˛e
->
c⁄f_fûe
Ë!
NGX_CONF_OK
) {

269 
ívú⁄
 = 
£nv
;

270 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

271  
NULL
;

274 i‡(
ngx_ã°_c⁄fig
 && !
ngx_quõt_mode
) {

275 
	`ngx_log_°dîr
(0, "the configuration file %s syntax is ok",

276 
cy˛e
->
c⁄f_fûe
.
d©a
);

279 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

280 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_CORE_MODULE
) {

284 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

286 i‡(
moduÀ
->
öô_c⁄f
) {

287 i‡(
moduÀ
->
	`öô_c⁄f
(
cy˛e
, cy˛e->
c⁄f_˘x
[
ngx_moduÀs
[
i
]->
ödex
])

288 =
NGX_CONF_ERROR
)

290 
ívú⁄
 = 
£nv
;

291 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

292  
NULL
;

297 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SIGNALLER
) {

298  
cy˛e
;

301 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

303 i‡(
ngx_ã°_c⁄fig
) {

305 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

306 
Áûed
;

309 } i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

316 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

317 
ngx_c‹e_moduÀ
);

318 i‡(
ccf
->
pid
.
Àn
 !
ﬁd_ccf
->pid.len

319 || 
	`ngx_°rcmp
(
ccf
->
pid
.
d©a
, 
ﬁd_ccf
->pid.data) != 0)

323 i‡(
	`ngx_¸óã_pidfûe
(&
ccf
->
pid
, 
log
Ë!
NGX_OK
) {

324 
Áûed
;

327 
	`ngx_dñëe_pidfûe
(
ﬁd_cy˛e
);

332 i‡(
	`ngx_ã°_lockfûe
(
cy˛e
->
lock_fûe
.
d©a
, 
log
Ë!
NGX_OK
) {

333 
Áûed
;

337 i‡(
	`ngx_¸óã_∑ths
(
cy˛e
, 
ccf
->
u£r
Ë!
NGX_OK
) {

338 
Áûed
;

342 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

343 
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cy˛e, &
îr‹_log
);

344 i‡(
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

345 
Áûed
;

351 
∑π
 = &
cy˛e
->
›í_fûes
.part;

352 
fûe
 = 
∑π
->
ñts
;

354 
i
 = 0; ; i++) {

356 i‡(
i
 >
∑π
->
√…s
) {

357 i‡(
∑π
->
√xt
 =
NULL
) {

360 
∑π
 =Ö¨t->
√xt
;

361 
fûe
 = 
∑π
->
ñts
;

362 
i
 = 0;

365 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

369 
fûe
[
i
].
fd
 = 
	`ngx_›í_fûe
(fûe[i].
«me
.
d©a
,

370 
NGX_FILE_APPEND
,

371 
NGX_FILE_CREATE_OR_OPEN
,

372 
NGX_FILE_DEFAULT_ACCESS
);

374 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

376 &
fûe
[
i
], fûe[i].
fd
, fûe[i].
«me
.
d©a
);

378 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

380 
ngx_›í_fûe_n
 " \"%s\" failed",

381 
fûe
[
i
].
«me
.
d©a
);

382 
Áûed
;

385 #i‡!(
NGX_WIN32
)

386 i‡(
	`f˙é
(
fûe
[
i
].
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

389 
fûe
[
i
].
«me
.
d©a
);

390 
Áûed
;

395 
cy˛e
->
log
 = &cy˛e->
√w_log
;

396 
poﬁ
->
log
 = &
cy˛e
->
√w_log
;

401 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

402 
shm_z⁄e
 = 
∑π
->
ñts
;

404 
i
 = 0; ; i++) {

406 i‡(
i
 >
∑π
->
√…s
) {

407 i‡(
∑π
->
√xt
 =
NULL
) {

410 
∑π
 =Ö¨t->
√xt
;

411 
shm_z⁄e
 = 
∑π
->
ñts
;

412 
i
 = 0;

415 i‡(
shm_z⁄e
[
i
].
shm
.
size
 == 0) {

416 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

418 &
shm_z⁄e
[
i
].
shm
.
«me
);

419 
Áûed
;

422 
shm_z⁄e
[
i
].
shm
.
log
 = 
cy˛e
->log;

424 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

425 
oshm_z⁄e
 = 
›¨t
->
ñts
;

427 
n
 = 0; ;Ç++) {

429 i‡(
n
 >
›¨t
->
√…s
) {

430 i‡(
›¨t
->
√xt
 =
NULL
) {

433 
›¨t
 = o∑π->
√xt
;

434 
oshm_z⁄e
 = 
›¨t
->
ñts
;

435 
n
 = 0;

438 i‡(
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
 !
oshm_z⁄e
[
n
].shm.name.len) {

442 i‡(
	`ngx_°∫cmp
(
shm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

443 
oshm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

444 
shm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

450 i‡(
shm_z⁄e
[
i
].
èg
 =
oshm_z⁄e
[
n
].tag

451 && 
shm_z⁄e
[
i
].
shm
.
size
 =
oshm_z⁄e
[
n
].shm.size)

453 
shm_z⁄e
[
i
].
shm
.
addr
 = 
oshm_z⁄e
[
n
].shm.addr;

455 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
oshm_z⁄e
[
n
].
d©a
)

456 !
NGX_OK
)

458 
Áûed
;

461 
shm_z⁄e_found
;

464 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
n
].
shm
);

469 i‡(
	`ngx_shm_Æloc
(&
shm_z⁄e
[
i
].
shm
Ë!
NGX_OK
) {

470 
Áûed
;

473 i‡(
	`ngx_öô_z⁄e_poﬁ
(
cy˛e
, &
shm_z⁄e
[
i
]Ë!
NGX_OK
) {

474 
Áûed
;

477 i‡(
shm_z⁄e
[
i
].
	`öô
(&shm_z⁄e[i], 
NULL
Ë!
NGX_OK
) {

478 
Áûed
;

481 
shm_z⁄e_found
:

489 i‡(
ﬁd_cy˛e
->
li°íög
.
√…s
) {

490 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

491 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

492 
ls
[
i
].
ªmaö
 = 0;

495 
∆s
 = 
cy˛e
->
li°íög
.
ñts
;

496 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

498 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

499 i‡(
ls
[
i
].
ign‹e
) {

503 i‡(
	`ngx_cmp_sockaddr
(
∆s
[
n
].
sockaddr
, 
ls
[
i
].sockaddrË=
NGX_OK
)

505 
∆s
[
n
].
fd
 = 
ls
[
i
].fd;

506 
∆s
[
n
].
¥evious
 = &
ls
[
i
];

507 
ls
[
i
].
ªmaö
 = 1;

509 i‡(
ls
[
n
].
backlog
 !
∆s
[
i
].backlog) {

510 
∆s
[
n
].
li°í
 = 1;

513 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

519 
∆s
[
n
].
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

521 i‡(
ls
[
i
].
ac˚±_fûãr
 && 
∆s
[
n
].accept_filter) {

522 i‡(
	`ngx_°rcmp
(
ls
[
i
].
ac˚±_fûãr
,

523 
∆s
[
n
].
ac˚±_fûãr
)

526 
∆s
[
n
].
dñëe_de„ºed
 = 1;

527 
∆s
[
n
].
add_de„ºed
 = 1;

530 } i‡(
ls
[
i
].
ac˚±_fûãr
) {

531 
∆s
[
n
].
dñëe_de„ºed
 = 1;

533 } i‡(
∆s
[
n
].
ac˚±_fûãr
) {

534 
∆s
[
n
].
add_de„ºed
 = 1;

538 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

540 i‡(
ls
[
n
].
de„ºed_ac˚±
 && !
∆s
[n].deferred_accept) {

541 
∆s
[
n
].
dñëe_de„ºed
 = 1;

543 } i‡(
ls
[
i
].
de„ºed_ac˚±
 !
∆s
[
n
].deferred_accept)

545 
∆s
[
n
].
add_de„ºed
 = 1;

552 i‡(
∆s
[
n
].
fd
 == -1) {

553 
∆s
[
n
].
›í
 = 1;

558 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

559 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

560 
ls
[
i
].
›í
 = 1;

561 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

562 i‡(
ls
[
i
].
ac˚±_fûãr
) {

563 
ls
[
i
].
add_de„ºed
 = 1;

566 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

567 i‡(
ls
[
i
].
de„ºed_ac˚±
) {

568 
ls
[
i
].
add_de„ºed
 = 1;

574 i‡(
	`ngx_›í_li°íög_sockës
(
cy˛e
Ë!
NGX_OK
) {

575 
Áûed
;

578 i‡(!
ngx_ã°_c⁄fig
) {

579 
	`ngx_c⁄figuª_li°íög_sockës
(
cy˛e
);

585 i‡(!
ngx_u£_°dîr
 && 
cy˛e
->
log
->
fûe
->
fd
 !
ngx_°dîr
) {

587 i‡(
	`ngx_£t_°dîr
(
cy˛e
->
log
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

588 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

589 
ngx_£t_°dîr_n
 " failed");

593 
poﬁ
->
log
 = 
cy˛e
->log;

595 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

596 i‡(
ngx_moduÀs
[
i
]->
öô_moduÀ
) {

597 i‡(
ngx_moduÀs
[
i
]->
	`öô_moduÀ
(
cy˛e
Ë!
NGX_OK
) {

599 
	`exô
(1);

609 
›¨t
 = &
ﬁd_cy˛e
->
sh¨ed_mem‹y
.
∑π
;

610 
oshm_z⁄e
 = 
›¨t
->
ñts
;

612 
i
 = 0; ; i++) {

614 i‡(
i
 >
›¨t
->
√…s
) {

615 i‡(
›¨t
->
√xt
 =
NULL
) {

616 
ﬁd_shm_z⁄e_d⁄e
;

618 
›¨t
 = o∑π->
√xt
;

619 
oshm_z⁄e
 = 
›¨t
->
ñts
;

620 
i
 = 0;

623 
∑π
 = &
cy˛e
->
sh¨ed_mem‹y
.part;

624 
shm_z⁄e
 = 
∑π
->
ñts
;

626 
n
 = 0; ;Ç++) {

628 i‡(
n
 >
∑π
->
√…s
) {

629 i‡(
∑π
->
√xt
 =
NULL
) {

632 
∑π
 =Ö¨t->
√xt
;

633 
shm_z⁄e
 = 
∑π
->
ñts
;

634 
n
 = 0;

637 i‡(
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
 =
shm_z⁄e
[
n
].shm.name.len

638 && 
	`ngx_°∫cmp
(
oshm_z⁄e
[
i
].
shm
.
«me
.
d©a
,

639 
shm_z⁄e
[
n
].
shm
.
«me
.
d©a
,

640 
oshm_z⁄e
[
i
].
shm
.
«me
.
Àn
)

643 
live_shm_z⁄e
;

647 
	`ngx_shm_‰ì
(&
oshm_z⁄e
[
i
].
shm
);

649 
live_shm_z⁄e
:

654 
ﬁd_shm_z⁄e_d⁄e
:

659 
ls
 = 
ﬁd_cy˛e
->
li°íög
.
ñts
;

660 
i
 = 0; i < 
ﬁd_cy˛e
->
li°íög
.
√…s
; i++) {

662 i‡(
ls
[
i
].
ªmaö
 ||Üs[i].
fd
 == -1) {

666 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

667 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

668 
ngx_˛o£_sockë_n
 "Üistening socket on %V failed",

669 &
ls
[
i
].
addr_ãxt
);

672 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

674 i‡(
ls
[
i
].
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

675 
u_ch¨
 *
«me
;

677 
«me
 = 
ls
[
i
].
addr_ãxt
.
d©a
 + ("unix:") - 1;

679 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

680 "dñëög sockë %s", 
«me
);

682 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

683 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

684 
ngx_dñëe_fûe_n
 " %†Áûed", 
«me
);

694 
∑π
 = &
ﬁd_cy˛e
->
›í_fûes
.part;

695 
fûe
 = 
∑π
->
ñts
;

697 
i
 = 0; ; i++) {

699 i‡(
i
 >
∑π
->
√…s
) {

700 i‡(
∑π
->
√xt
 =
NULL
) {

703 
∑π
 =Ö¨t->
√xt
;

704 
fûe
 = 
∑π
->
ñts
;

705 
i
 = 0;

708 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

712 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

713 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

714 
ngx_˛o£_fûe_n
 " \"%s\" failed",

715 
fûe
[
i
].
«me
.
d©a
);

719 
	`ngx_de°roy_poﬁ
(
c⁄f
.
ãmp_poﬁ
);

721 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_MASTER
 || 
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

729 
ív
 = 
ívú⁄
;

730 
ívú⁄
 = 
£nv
;

732 
	`ngx_de°roy_poﬁ
(
ﬁd_cy˛e
->
poﬁ
);

733 
cy˛e
->
ﬁd_cy˛e
 = 
NULL
;

735 
ívú⁄
 = 
ív
;

737  
cy˛e
;

741 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

742 
ngx_ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
cy˛e
->
log
);

743 i‡(
ngx_ãmp_poﬁ
 =
NULL
) {

744 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

746 
	`exô
(1);

749 
n
 = 10;

750 
ngx_ﬁd_cy˛es
.
ñts
 = 
	`ngx_pˇŒoc
(
ngx_ãmp_poﬁ
,

751 
n
 * (
ngx_cy˛e_t
 *));

752 i‡(
ngx_ﬁd_cy˛es
.
ñts
 =
NULL
) {

753 
	`exô
(1);

755 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

756 
ngx_ﬁd_cy˛es
.
size
 = (
ngx_cy˛e_t
 *);

757 
ngx_ﬁd_cy˛es
.
«Œoc
 = 
n
;

758 
ngx_ﬁd_cy˛es
.
poﬁ
 = 
ngx_ãmp_poﬁ
;

760 
ngx_˛ó√r_evít
.
h™dÀr
 = 
ngx_˛ón_ﬁd_cy˛es
;

761 
ngx_˛ó√r_evít
.
log
 = 
cy˛e
->log;

762 
ngx_˛ó√r_evít
.
d©a
 = &
dumb
;

763 
dumb
.
fd
 = (
ngx_sockë_t
) -1;

766 
ngx_ãmp_poﬁ
->
log
 = 
cy˛e
->log;

768 
ﬁd
 = 
	`ngx_¨øy_push
(&
ngx_ﬁd_cy˛es
);

769 i‡(
ﬁd
 =
NULL
) {

770 
	`exô
(1);

772 *
ﬁd
 = 
ﬁd_cy˛e
;

774 i‡(!
ngx_˛ó√r_evít
.
timî_£t
) {

775 
	`ngx_add_timî
(&
ngx_˛ó√r_evít
, 30000);

776 
ngx_˛ó√r_evít
.
timî_£t
 = 1;

779  
cy˛e
;

782 
Áûed
:

784 i‡(!
	`ngx_is_öô_cy˛e
(
ﬁd_cy˛e
)) {

785 
ﬁd_ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ﬁd_cy˛e
->
c⁄f_˘x
,

786 
ngx_c‹e_moduÀ
);

787 i‡(
ﬁd_ccf
->
ívú⁄mít
) {

788 
ívú⁄
 = 
ﬁd_ccf
->
ívú⁄mít
;

794 
∑π
 = &
cy˛e
->
›í_fûes
.part;

795 
fûe
 = 
∑π
->
ñts
;

797 
i
 = 0; ; i++) {

799 i‡(
i
 >
∑π
->
√…s
) {

800 i‡(
∑π
->
√xt
 =
NULL
) {

803 
∑π
 =Ö¨t->
√xt
;

804 
fûe
 = 
∑π
->
ñts
;

805 
i
 = 0;

808 i‡(
fûe
[
i
].
fd
 =
NGX_INVALID_FILE
 || fûe[i].fd =
ngx_°dîr
) {

812 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

813 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

814 
ngx_˛o£_fûe_n
 " \"%s\" failed",

815 
fûe
[
i
].
«me
.
d©a
);

819 i‡(
ngx_ã°_c⁄fig
) {

820 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

821  
NULL
;

824 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

825 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

826 i‡(
ls
[
i
].
fd
 =-1 || !ls[i].
›í
) {

830 i‡(
	`ngx_˛o£_sockë
(
ls
[
i
].
fd
) == -1) {

831 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_sockë_î∫o
,

832 
ngx_˛o£_sockë_n
 " %V failed",

833 &
ls
[
i
].
addr_ãxt
);

837 
	`ngx_de°roy_cy˛e_poﬁs
(&
c⁄f
);

839  
NULL
;

840 
	}
}

844 
	$ngx_de°roy_cy˛e_poﬁs
(
ngx_c⁄f_t
 *
c⁄f
)

846 
	`ngx_de°roy_poﬁ
(
c⁄f
->
ãmp_poﬁ
);

847 
	`ngx_de°roy_poﬁ
(
c⁄f
->
poﬁ
);

848 
	}
}

851 
ngx_öt_t


852 
	$ngx_cmp_sockaddr
(
sockaddr
 *
ß1
, sockadd∏*
ß2
)

854 
sockaddr_ö
 *
sö1
, *
sö2
;

855 #i‡(
NGX_HAVE_INET6
)

856 
sockaddr_ö6
 *
sö61
, *
sö62
;

858 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

859 
sockaddr_un
 *
ßun1
, *
ßun2
;

862 i‡(
ß1
->
ß_Ámûy
 !
ß2
->sa_family) {

863  
NGX_DECLINED
;

866 
ß1
->
ß_Ámûy
) {

868 #i‡(
NGX_HAVE_INET6
)

869 
AF_INET6
:

870 
sö61
 = (
sockaddr_ö6
 *Ë
ß1
;

871 
sö62
 = (
sockaddr_ö6
 *Ë
ß2
;

873 i‡(
sö61
->
sö6_p‹t
 !
sö62
->sin6_port) {

874  
NGX_DECLINED
;

877 i‡(
	`ngx_memcmp
(&
sö61
->
sö6_addr
, &
sö62
->sin6_addr, 16) != 0) {

878  
NGX_DECLINED
;

884 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

885 
AF_UNIX
:

886 
ßun1
 = (
sockaddr_un
 *Ë
ß1
;

887 
ßun2
 = (
sockaddr_un
 *Ë
ß2
;

889 i‡(
	`ngx_memcmp
(&
ßun1
->
sun_∑th
, &
ßun2
->sun_path,

890 (
ßun1
->
sun_∑th
))

893  
NGX_DECLINED
;

901 
sö1
 = (
sockaddr_ö
 *Ë
ß1
;

902 
sö2
 = (
sockaddr_ö
 *Ë
ß2
;

904 i‡(
sö1
->
sö_p‹t
 !
sö2
->sin_port) {

905  
NGX_DECLINED
;

908 i‡(
sö1
->
sö_addr
.
s_addr
 !
sö2
->sin_addr.s_addr) {

909  
NGX_DECLINED
;

915  
NGX_OK
;

916 
	}
}

919 
ngx_öt_t


920 
	$ngx_öô_z⁄e_poﬁ
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_shm_z⁄e_t
 *
zn
)

922 
u_ch¨
 *
fûe
;

923 
ngx_¶ab_poﬁ_t
 *
•
;

925 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
zn
->
shm
.
addr
;

927 i‡(
zn
->
shm
.
exi°s
) {

929 i‡(
•
 =•->
addr
) {

930  
NGX_OK
;

933 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

935 &
zn
->
shm
.
«me
, 
•
->
addr
, sp);

936  
NGX_ERROR
;

939 
•
->
íd
 = 
zn
->
shm
.
addr
 + zn->shm.
size
;

940 
•
->
mö_shi·
 = 3;

941 
•
->
addr
 = 
zn
->
shm
.addr;

943 #i‡(
NGX_HAVE_ATOMIC_OPS
)

945 
fûe
 = 
NULL
;

949 
fûe
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, cy˛e->
lock_fûe
.
Àn
 + 
zn
->
shm
.
«me
.len);

950 i‡(
fûe
 =
NULL
) {

951  
NGX_ERROR
;

954 (Ë
	`ngx_•rötf
(
fûe
, "%V%V%Z", &
cy˛e
->
lock_fûe
, &
zn
->
shm
.
«me
);

958 i‡(
	`ngx_shmtx_¸óã
(&
•
->
muãx
, &•->
lock
, 
fûe
Ë!
NGX_OK
) {

959  
NGX_ERROR
;

962 
	`ngx_¶ab_öô
(
•
);

964  
NGX_OK
;

965 
	}
}

968 
ngx_öt_t


969 
	$ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
)

971 
size_t
 
Àn
;

972 
ngx_uöt_t
 
¸óã
;

973 
ngx_fûe_t
 
fûe
;

974 
u_ch¨
 
pid
[
NGX_INT64_LEN
 + 2];

976 i‡(
ngx_¥o˚ss
 > 
NGX_PROCESS_MASTER
) {

977  
NGX_OK
;

980 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

982 
fûe
.
«me
 = *name;

983 
fûe
.
log
 =Üog;

985 
¸óã
 = 
ngx_ã°_c⁄fig
 ? 
NGX_FILE_CREATE_OR_OPEN
 : 
NGX_FILE_TRUNCATE
;

987 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDWR
,

988 
¸óã
, 
NGX_FILE_DEFAULT_ACCESS
);

990 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

991 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

992 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

993  
NGX_ERROR
;

996 i‡(!
ngx_ã°_c⁄fig
) {

997 
Àn
 = 
	`ngx_¢¥ötf
(
pid
, 
NGX_INT64_LEN
 + 2, "%P%N", 
ngx_pid
) -Öid;

999 i‡(
	`ngx_wrôe_fûe
(&
fûe
, 
pid
, 
Àn
, 0Ë=
NGX_ERROR
) {

1000  
NGX_ERROR
;

1004 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1005 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1006 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1009  
NGX_OK
;

1010 
	}
}

1014 
	$ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
)

1016 
u_ch¨
 *
«me
;

1017 
ngx_c‹e_c⁄f_t
 *
ccf
;

1019 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1021 
«me
 = 
ngx_√w_bö¨y
 ? 
ccf
->
ﬁdpid
.
d©a
 : ccf->
pid
.data;

1023 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1024 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1025 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1027 
	}
}

1030 
ngx_öt_t


1031 
	$ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
)

1033 
ssize_t
 
n
;

1034 
ngx_öt_t
 
pid
;

1035 
ngx_fûe_t
 
fûe
;

1036 
ngx_c‹e_c⁄f_t
 *
ccf
;

1037 
u_ch¨
 
buf
[
NGX_INT64_LEN
 + 2];

1039 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "signalÖrocess started");

1041 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1043 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1045 
fûe
.
«me
 = 
ccf
->
pid
;

1046 
fûe
.
log
 = 
cy˛e
->log;

1048 
fûe
.
fd
 = 
	`ngx_›í_fûe
(fûe.
«me
.
d©a
, 
NGX_FILE_RDONLY
,

1049 
NGX_FILE_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1051 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1052 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 
ngx_î∫o
,

1053 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1057 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
, 
NGX_INT64_LEN
 + 2, 0);

1059 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1060 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

1061 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
.
«me
.
d©a
);

1064 i‡(
n
 =
NGX_ERROR
) {

1068 
n
-- && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

1070 
pid
 = 
	`ngx_©oi
(
buf
, ++
n
);

1072 i‡(
pid
 =
NGX_ERROR
) {

1073 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
cy˛e
->
log
, 0,

1075 
n
, 
buf
, 
fûe
.
«me
.
d©a
);

1079  
	`ngx_os_sig«l_¥o˚ss
(
cy˛e
, 
sig
, 
pid
);

1081 
	}
}

1084 
ngx_öt_t


1085 
	$ngx_ã°_lockfûe
(
u_ch¨
 *
fûe
, 
ngx_log_t
 *
log
)

1087 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

1088 
ngx_fd_t
 
fd
;

1090 
fd
 = 
	`ngx_›í_fûe
(
fûe
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

1091 
NGX_FILE_DEFAULT_ACCESS
);

1093 i‡(
fd
 =
NGX_INVALID_FILE
) {

1094 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

1095 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
);

1096  
NGX_ERROR
;

1099 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1100 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1101 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
);

1104 i‡(
	`ngx_dñëe_fûe
(
fûe
Ë=
NGX_FILE_ERROR
) {

1105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

1106 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
fûe
);

1111  
NGX_OK
;

1112 
	}
}

1116 
	$ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

1118 
ngx_fd_t
 
fd
;

1119 
ngx_uöt_t
 
i
;

1120 
ngx_li°_∑π_t
 *
∑π
;

1121 
ngx_›í_fûe_t
 *
fûe
;

1123 
∑π
 = &
cy˛e
->
›í_fûes
.part;

1124 
fûe
 = 
∑π
->
ñts
;

1126 
i
 = 0; ; i++) {

1128 i‡(
i
 >
∑π
->
√…s
) {

1129 i‡(
∑π
->
√xt
 =
NULL
) {

1132 
∑π
 =Ö¨t->
√xt
;

1133 
fûe
 = 
∑π
->
ñts
;

1134 
i
 = 0;

1137 i‡(
fûe
[
i
].
«me
.
Àn
 == 0) {

1141 i‡(
fûe
[
i
].
Êush
) {

1142 
fûe
[
i
].
	`Êush
(&fûe[i], 
cy˛e
->
log
);

1145 
fd
 = 
	`ngx_›í_fûe
(
fûe
[
i
].
«me
.
d©a
, 
NGX_FILE_APPEND
,

1146 
NGX_FILE_CREATE_OR_OPEN
, 
NGX_FILE_DEFAULT_ACCESS
);

1148 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

1150 
fûe
[
i
].
«me
.
d©a
, fûe[i].
fd
, fd);

1152 i‡(
fd
 =
NGX_INVALID_FILE
) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1154 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1158 #i‡!(
NGX_WIN32
)

1159 i‡(
u£r
 !(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

1160 
ngx_fûe_öfo_t
 
fi
;

1162 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, &
fi
)

1163 =
NGX_FILE_ERROR
)

1165 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1166 
ngx_fûe_öfo_n
 " \"%s\" failed",

1167 
fûe
[
i
].
«me
.
d©a
);

1169 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1170 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1171 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1172 
fûe
[
i
].
«me
.
d©a
);

1176 i‡(
fi
.
°_uid
 !
u£r
) {

1177 i‡(
	`chown
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
u£r
, -1) == -1) {

1178 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1180 
fûe
[
i
].
«me
.
d©a
, 
u£r
);

1182 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1183 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1184 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1185 
fûe
[
i
].
«me
.
d©a
);

1190 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
)) != (S_IRUSR|S_IWUSR)) {

1192 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
);

1194 i‡(
	`chmod
((c⁄° *Ë
fûe
[
i
].
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

1195 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1196 "chmod(Ë\"%s\" faûed", 
fûe
[
i
].
«me
.
d©a
);

1198 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1200 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1201 
fûe
[
i
].
«me
.
d©a
);

1207 i‡(
	`f˙é
(
fd
, 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

1208 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1210 
fûe
[
i
].
«me
.
d©a
);

1212 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

1213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1214 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1215 
fûe
[
i
].
«me
.
d©a
);

1222 i‡(
	`ngx_˛o£_fûe
(
fûe
[
i
].
fd
Ë=
NGX_FILE_ERROR
) {

1223 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1224 
ngx_˛o£_fûe_n
 " \"%s\" failed",

1225 
fûe
[
i
].
«me
.
d©a
);

1228 
fûe
[
i
].
fd
 = fd;

1231 #i‡!(
NGX_WIN32
)

1233 i‡(
cy˛e
->
log
->
fûe
->
fd
 !
STDERR_FILENO
) {

1234 i‡(
	`dup2
(
cy˛e
->
log
->
fûe
->
fd
, 
STDERR_FILENO
) == -1) {

1235 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

1241 
	}
}

1244 
ngx_shm_z⁄e_t
 *

1245 
	$ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
size_t
 
size
, *
èg
)

1247 
ngx_uöt_t
 
i
;

1248 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1249 
ngx_li°_∑π_t
 *
∑π
;

1251 
∑π
 = &
cf
->
cy˛e
->
sh¨ed_mem‹y
.part;

1252 
shm_z⁄e
 = 
∑π
->
ñts
;

1254 
i
 = 0; ; i++) {

1256 i‡(
i
 >
∑π
->
√…s
) {

1257 i‡(
∑π
->
√xt
 =
NULL
) {

1260 
∑π
 =Ö¨t->
√xt
;

1261 
shm_z⁄e
 = 
∑π
->
ñts
;

1262 
i
 = 0;

1265 i‡(
«me
->
Àn
 !
shm_z⁄e
[
i
].
shm
.name.len) {

1269 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
shm_z⁄e
[
i
].
shm
.«me.d©a,Çame->
Àn
)

1275 i‡(
èg
 !
shm_z⁄e
[
i
].tag) {

1276 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1279 &
shm_z⁄e
[
i
].
shm
.
«me
);

1280  
NULL
;

1283 i‡(
size
 && sizê!
shm_z⁄e
[
i
].
shm
.size) {

1284 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1287 
size
, &
shm_z⁄e
[
i
].
shm
.
«me
, shm_zone[i].shm.size);

1288  
NULL
;

1291  &
shm_z⁄e
[
i
];

1294 
shm_z⁄e
 = 
	`ngx_li°_push
(&
cf
->
cy˛e
->
sh¨ed_mem‹y
);

1296 i‡(
shm_z⁄e
 =
NULL
) {

1297  
NULL
;

1300 
shm_z⁄e
->
d©a
 = 
NULL
;

1301 
shm_z⁄e
->
shm
.
log
 = 
cf
->
cy˛e
->log;

1302 
shm_z⁄e
->
shm
.
size
 = size;

1303 
shm_z⁄e
->
shm
.
«me
 = *name;

1304 
shm_z⁄e
->
shm
.
exi°s
 = 0;

1305 
shm_z⁄e
->
öô
 = 
NULL
;

1306 
shm_z⁄e
->
èg
 =Åag;

1308  
shm_z⁄e
;

1309 
	}
}

1313 
	$ngx_˛ón_ﬁd_cy˛es
(
ngx_evít_t
 *
ev
)

1315 
ngx_uöt_t
 
i
, 
n
, 
found
, 
live
;

1316 
ngx_log_t
 *
log
;

1317 
ngx_cy˛e_t
 **
cy˛e
;

1319 
log
 = 
ngx_cy˛e
->log;

1320 
ngx_ãmp_poﬁ
->
log
 =Üog;

1322 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "clean old cycles");

1324 
live
 = 0;

1326 
cy˛e
 = 
ngx_ﬁd_cy˛es
.
ñts
;

1327 
i
 = 0; i < 
ngx_ﬁd_cy˛es
.
√…s
; i++) {

1329 i‡(
cy˛e
[
i
] =
NULL
) {

1333 
found
 = 0;

1335 
n
 = 0;Ç < 
cy˛e
[
i
]->
c⁄√˘i⁄_n
;Ç++) {

1336 i‡(
cy˛e
[
i
]->
c⁄√˘i⁄s
[
n
].
fd
 !(
ngx_sockë_t
) -1) {

1337 
found
 = 1;

1339 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "livêfd:%d", 
n
);

1345 i‡(
found
) {

1346 
live
 = 1;

1350 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "˛ó¿ﬁd cy˛e: %d", 
i
);

1352 
	`ngx_de°roy_poﬁ
(
cy˛e
[
i
]->
poﬁ
);

1353 
cy˛e
[
i
] = 
NULL
;

1356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "ﬁd cy˛e†°©us: %d", 
live
);

1358 i‡(
live
) {

1359 
	`ngx_add_timî
(
ev
, 30000);

1362 
	`ngx_de°roy_poﬁ
(
ngx_ãmp_poﬁ
);

1363 
ngx_ãmp_poﬁ
 = 
NULL
;

1364 
ngx_ﬁd_cy˛es
.
√…s
 = 0;

1366 
	}
}

	@src/core/ngx_cycle.h

8 #i‚de‡
_NGX_CYCLE_H_INCLUDED_


9 
	#_NGX_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‚de‡
NGX_CYCLE_POOL_SIZE


17 
	#NGX_CYCLE_POOL_SIZE
 
NGX_DEFAULT_POOL_SIZE


	)

21 
	#NGX_DEBUG_POINTS_STOP
 1

	)

22 
	#NGX_DEBUG_POINTS_ABORT
 2

	)

25 
ngx_shm_z⁄e_s
 
	tngx_shm_z⁄e_t
;

27 
	$ngx_öt_t
 (*
	tngx_shm_z⁄e_öô_±
Ë(
	tngx_shm_z⁄e_t
 *
	tz⁄e
, *
	td©a
);

29 
	sngx_shm_z⁄e_s
 {

30 *
d©a
;

31 
ngx_shm_t
 
shm
;

32 
ngx_shm_z⁄e_öô_±
 
öô
;

33 *
èg
;

37 
	sngx_cy˛e_s
 {

38 ****
c⁄f_˘x
;

39 
ngx_poﬁ_t
 *
poﬁ
;

41 
ngx_log_t
 *
log
;

42 
ngx_log_t
 
√w_log
;

44 
ngx_c⁄√˘i⁄_t
 **
fûes
;

45 
ngx_c⁄√˘i⁄_t
 *
‰ì_c⁄√˘i⁄s
;

46 
ngx_uöt_t
 
‰ì_c⁄√˘i⁄_n
;

48 
ngx_queue_t
 
ªußbÀ_c⁄√˘i⁄s_queue
;

50 
ngx_¨øy_t
 
li°íög
;

51 
ngx_¨øy_t
 
∑ths
;

52 
ngx_li°_t
 
›í_fûes
;

53 
ngx_li°_t
 
sh¨ed_mem‹y
;

55 
ngx_uöt_t
 
c⁄√˘i⁄_n
;

56 
ngx_uöt_t
 
fûes_n
;

58 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄s
;

59 
ngx_evít_t
 *
ªad_evíts
;

60 
ngx_evít_t
 *
wrôe_evíts
;

62 
ngx_cy˛e_t
 *
ﬁd_cy˛e
;

64 
ngx_°r_t
 
c⁄f_fûe
;

65 
ngx_°r_t
 
c⁄f_∑øm
;

66 
ngx_°r_t
 
c⁄f_¥efix
;

67 
ngx_°r_t
 
¥efix
;

68 
ngx_°r_t
 
lock_fûe
;

69 
ngx_°r_t
 
ho°«me
;

74 
ngx_Êag_t
 
d´m⁄
;

75 
ngx_Êag_t
 
ma°î
;

77 
ngx_m£c_t
 
timî_ªsﬁuti⁄
;

79 
ngx_öt_t
 
w‹kî_¥o˚s£s
;

80 
ngx_öt_t
 
debug_poöts
;

82 
ngx_öt_t
 
æimô_nofûe
;

83 
ngx_öt_t
 
æimô_sig≥ndög
;

84 
off_t
 
æimô_c‹e
;

86 
¥i‹ôy
;

88 
ngx_uöt_t
 
˝u_afföôy_n
;

89 
uöt64_t
 *
˝u_afföôy
;

91 *
u£∫ame
;

92 
ngx_uid_t
 
u£r
;

93 
ngx_gid_t
 
group
;

95 
ngx_°r_t
 
w‹kög_dúe˘‹y
;

96 
ngx_°r_t
 
lock_fûe
;

98 
ngx_°r_t
 
pid
;

99 
ngx_°r_t
 
ﬁdpid
;

101 
ngx_¨øy_t
 
ív
;

102 **
ívú⁄mít
;

104 #i‡(
NGX_THREADS
)

105 
ngx_öt_t
 
w‹kî_thªads
;

106 
size_t
 
thªad_°ack_size
;

109 } 
	tngx_c‹e_c⁄f_t
;

113 
ngx_poﬁ_t
 *
poﬁ
;

114 } 
	tngx_c‹e_és_t
;

117 
	#ngx_is_öô_cy˛e
(
cy˛e
Ë(cy˛e->
c⁄f_˘x
 =
NULL
)

	)

120 
ngx_cy˛e_t
 *
	`ngx_öô_cy˛e
“gx_cy˛e_à*
ﬁd_cy˛e
);

121 
ngx_öt_t
 
	`ngx_¸óã_pidfûe
(
ngx_°r_t
 *
«me
, 
ngx_log_t
 *
log
);

122 
	`ngx_dñëe_pidfûe
(
ngx_cy˛e_t
 *
cy˛e
);

123 
ngx_öt_t
 
	`ngx_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
);

124 
	`ngx_ª›í_fûes
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

125 **
	`ngx_£t_ívú⁄mít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 *
œ°
);

126 
ngx_pid_t
 
	`ngx_exec_√w_bö¨y
(
ngx_cy˛e_t
 *
cy˛e
, *c⁄° *
¨gv
);

127 
uöt64_t
 
	`ngx_gë_˝u_afföôy
(
ngx_uöt_t
 
n
);

128 
ngx_shm_z⁄e_t
 *
	`ngx_sh¨ed_mem‹y_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

129 
size_t
 
size
, *
èg
);

132 vﬁ©ûê
ngx_cy˛e_t
 *
ngx_cy˛e
;

133 
ngx_¨øy_t
 
ngx_ﬁd_cy˛es
;

134 
ngx_moduÀ_t
 
ngx_c‹e_moduÀ
;

135 
ngx_uöt_t
 
ngx_ã°_c⁄fig
;

136 
ngx_uöt_t
 
ngx_quõt_mode
;

137 #i‡(
NGX_THREADS
)

138 
ngx_és_key_t
 
ngx_c‹e_és_key
;

	@src/core/ngx_file.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_©omic_t
 
	gãmp_numbî
 = 0;

13 
ngx_©omic_t
 *
	gngx_ãmp_numbî
 = &
ãmp_numbî
;

14 
ngx_©omic_öt_t
 
	gngx_øndom_numbî
 = 123456;

17 
ssize_t


18 
	$ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
)

20 
ngx_öt_t
 
rc
;

22 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

23 
rc
 = 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

24 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
);

26 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_AGAIN
) {

27  
rc
;

30 i‡(
tf
->
log_Àvñ
) {

31 
	`ngx_log_îr‹
(
tf
->
log_Àvñ
,Åf->
fûe
.
log
, 0, "%s %V",

32 
tf
->
w¨n
, &tf->
fûe
.
«me
);

36  
	`ngx_wrôe_chaö_to_fûe
(&
tf
->
fûe
, 
chaö
,Åf->
off£t
,Åf->
poﬁ
);

37 
	}
}

40 
ngx_öt_t


41 
	$ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
, 
ngx_poﬁ_t
 *
poﬁ
,

42 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,Çgx_uöt_à
ac˚ss
)

44 
uöt32_t
 
n
;

45 
ngx_îr_t
 
îr
;

46 
ngx_poﬁ_˛ónup_t
 *
˛n
;

47 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

49 
fûe
->
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len + 10;

51 
fûe
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, fûe->«me.
Àn
 + 1);

52 i‡(
fûe
->
«me
.
d©a
 =
NULL
) {

53  
NGX_ERROR
;

57 
i
 = 0; i < 
fûe
->
«me
.
Àn
; i++) {

58 
fûe
->
«me
.
d©a
[
i
] = 'X';

62 
	`ngx_mem˝y
(
fûe
->
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

64 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0);

66 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

67 i‡(
˛n
 =
NULL
) {

68  
NGX_ERROR
;

72 (Ë
	`ngx_•rötf
(
fûe
->
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len,

73 "%010uD%Z", 
n
);

75 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
fûe
->
«me
.
d©a
, fûe->«me.
Àn
);

77 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

78 "hashedÖ©h: %s", 
fûe
->
«me
.
d©a
);

80 
fûe
->
fd
 = 
	`ngx_›í_ãmpfûe
(fûe->
«me
.
d©a
, 
≥rsi°ít
, 
ac˚ss
);

82 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

83 "ãm∞fd:%d", 
fûe
->
fd
);

85 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

87 
˛n
->
h™dÀr
 = 
˛ón
 ? 
ngx_poﬁ_dñëe_fûe
 : 
ngx_poﬁ_˛ónup_fûe
;

88 
˛nf
 = 
˛n
->
d©a
;

90 
˛nf
->
fd
 = 
fûe
->fd;

91 
˛nf
->
«me
 = 
fûe
->«me.
d©a
;

92 
˛nf
->
log
 = 
poﬁ
->log;

94  
NGX_OK
;

97 
îr
 = 
ngx_î∫o
;

99 i‡(
îr
 =
NGX_EEXIST
) {

100 
n
 = (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(1);

104 i‡((
∑th
->
Àvñ
[0] =0Ë|| (
îr
 !
NGX_ENOPATH
)) {

105 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

106 
ngx_›í_ãmpfûe_n
 " \"%s\" failed",

107 
fûe
->
«me
.
d©a
);

108  
NGX_ERROR
;

111 i‡(
	`ngx_¸óã_∑th
(
fûe
, 
∑th
Ë=
NGX_ERROR
) {

112  
NGX_ERROR
;

115 
	}
}

119 
	$ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
)

121 
size_t
 
i
, 
Àvñ
;

122 
ngx_uöt_t
 
n
;

124 
i
 = 
∑th
->
«me
.
Àn
 + 1;

126 
fûe
[
∑th
->
«me
.
Àn
 +Öath->len] = '/';

128 
n
 = 0;Ç < 3;Ç++) {

129 
Àvñ
 = 
∑th
->Àvñ[
n
];

131 i‡(
Àvñ
 == 0) {

135 
Àn
 -
Àvñ
;

136 
fûe
[
i
 - 1] = '/';

137 
	`ngx_mem˝y
(&
fûe
[
i
], &fûe[
Àn
], 
Àvñ
);

138 
i
 +
Àvñ
 + 1;

140 
	}
}

143 
ngx_öt_t


144 
	$ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
)

146 
size_t
 
pos
;

147 
ngx_îr_t
 
îr
;

148 
ngx_uöt_t
 
i
;

150 
pos
 = 
∑th
->
«me
.
Àn
;

152 
i
 = 0; i < 3; i++) {

153 i‡(
∑th
->
Àvñ
[
i
] == 0) {

157 
pos
 +
∑th
->
Àvñ
[
i
] + 1;

159 
fûe
->
«me
.
d©a
[
pos
] = '\0';

161 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

162 "ãm∞fûe: \"%s\"", 
fûe
->
«me
.
d©a
);

164 i‡(
	`ngx_¸óã_dú
(
fûe
->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

165 
îr
 = 
ngx_î∫o
;

166 i‡(
îr
 !
NGX_EEXIST
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

168 
ngx_¸óã_dú_n
 " \"%s\" failed",

169 
fûe
->
«me
.
d©a
);

170  
NGX_ERROR
;

174 
fûe
->
«me
.
d©a
[
pos
] = '/';

177  
NGX_OK
;

178 
	}
}

181 
ngx_îr_t


182 
	$ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
)

184 
u_ch¨
 *
p
, 
ch
;

185 
ngx_îr_t
 
îr
;

187 
îr
 = 0;

189 #i‡(
NGX_WIN32
)

190 
p
 = 
dú
 + 3;

192 
p
 = 
dú
 + 1;

195  ; *
p
;Ö++) {

196 
ch
 = *
p
;

198 i‡(
ch
 != '/') {

202 *
p
 = '\0';

204 i‡(
	`ngx_¸óã_dú
(
dú
, 
ac˚ss
Ë=
NGX_FILE_ERROR
) {

205 
îr
 = 
ngx_î∫o
;

207 
îr
) {

208 
NGX_EEXIST
:

209 
îr
 = 0;

210 
NGX_EACCES
:

214  
îr
;

218 *
p
 = '/';

221  
îr
;

222 
	}
}

225 
ngx_©omic_uöt_t


226 
	$ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
)

228 
ngx_©omic_uöt_t
 
n
, 
add
;

230 
add
 = 
cﬁlisi⁄
 ? 
ngx_øndom_numbî
 : 1;

232 
n
 = 
	`ngx_©omic_„tch_add
(
ngx_ãmp_numbî
, 
add
);

234  
n
 + 
add
;

235 
	}
}

239 
	$ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

241 *
p
 = 
c⁄f
;

243 
ssize_t
 
Àvñ
;

244 
ngx_°r_t
 *
vÆue
;

245 
ngx_uöt_t
 
i
, 
n
;

246 
ngx_∑th_t
 *
∑th
, **
¶Ÿ
;

248 
¶Ÿ
 = (
ngx_∑th_t
 **Ë(
p
 + 
cmd
->
off£t
);

250 i‡(*
¶Ÿ
) {

254 
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

255 i‡(
∑th
 =
NULL
) {

256  
NGX_CONF_ERROR
;

259 
vÆue
 = 
cf
->
¨gs
->
ñts
;

261 
∑th
->
«me
 = 
vÆue
[1];

263 i‡(
∑th
->
«me
.
d©a
[∑th->«me.
Àn
 - 1] == '/') {

264 
∑th
->
«me
.
Àn
--;

267 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
∑th
->
«me
, 0Ë!
NGX_OK
) {

268  
NULL
;

271 
∑th
->
Àn
 = 0;

272 
∑th
->
m™agî
 = 
NULL
;

273 
∑th
->
lﬂdî
 = 
NULL
;

274 
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

275 
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

277 
i
 = 0, 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
; i++,Ç++) {

278 
Àvñ
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
, vÆue[n].
Àn
);

279 i‡(
Àvñ
 =
NGX_ERROR
 ||Üevel == 0) {

283 
∑th
->
Àvñ
[
i
] =Üevel;

284 
∑th
->
Àn
 +
Àvñ
 + 1;

287 
i
 < 3) {

288 
∑th
->
Àvñ
[
i
++] = 0;

291 *
¶Ÿ
 = 
∑th
;

293 i‡(
	`ngx_add_∑th
(
cf
, 
¶Ÿ
Ë=
NGX_ERROR
) {

294  
NGX_CONF_ERROR
;

297  
NGX_CONF_OK
;

298 
	}
}

302 
	$ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,Çgx_∑th_à*
¥ev
,

303 
ngx_∑th_öô_t
 *
öô
)

305 i‡(*
∑th
) {

306  
NGX_CONF_OK
;

309 i‡(
¥ev
) {

310 *
∑th
 = 
¥ev
;

311  
NGX_CONF_OK
;

314 *
∑th
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

315 i‡(*
∑th
 =
NULL
) {

316  
NGX_CONF_ERROR
;

319 (*
∑th
)->
«me
 = 
öô
->name;

321 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &(*
∑th
)->
«me
, 0Ë!
NGX_OK
) {

322  
NGX_CONF_ERROR
;

325 (*
∑th
)->
Àvñ
[0] = 
öô
->level[0];

326 (*
∑th
)->
Àvñ
[1] = 
öô
->level[1];

327 (*
∑th
)->
Àvñ
[2] = 
öô
->level[2];

329 (*
∑th
)->
Àn
 = 
öô
->
Àvñ
[0] + (init->level[0] ? 1 : 0)

330 + 
öô
->
Àvñ
[1] + (init->level[1] ? 1 : 0)

331 + 
öô
->
Àvñ
[2] + (init->level[2] ? 1 : 0);

333 (*
∑th
)->
m™agî
 = 
NULL
;

334 (*
∑th
)->
lﬂdî
 = 
NULL
;

335 (*
∑th
)->
c⁄f_fûe
 = 
NULL
;

337 i‡(
	`ngx_add_∑th
(
cf
, 
∑th
Ë!
NGX_OK
) {

338  
NGX_CONF_ERROR
;

341  
NGX_CONF_OK
;

342 
	}
}

346 
	$ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

348 *
c⁄Â
 = 
c⁄f
;

350 
u_ch¨
 *
p
;

351 
ngx_°r_t
 *
vÆue
;

352 
ngx_uöt_t
 
i
, 
right
, 
shi·
, *
ac˚ss
;

354 
ac˚ss
 = (
ngx_uöt_t
 *Ë(
c⁄Â
 + 
cmd
->
off£t
);

356 i‡(*
ac˚ss
 !
NGX_CONF_UNSET_UINT
) {

360 
vÆue
 = 
cf
->
¨gs
->
ñts
;

362 *
ac˚ss
 = 0600;

364 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

366 
p
 = 
vÆue
[
i
].
d©a
;

368 i‡(
	`ngx_°∫cmp
(
p
, "user:", ("user:") - 1) == 0) {

369 
shi·
 = 6;

370 
p
 += ("user:") - 1;

372 } i‡(
	`ngx_°∫cmp
(
p
, "group:", ("group:") - 1) == 0) {

373 
shi·
 = 3;

374 
p
 += ("group:") - 1;

376 } i‡(
	`ngx_°∫cmp
(
p
, "all:", ("all:") - 1) == 0) {

377 
shi·
 = 0;

378 
p
 += ("all:") - 1;

381 
övÆid
;

384 i‡(
	`ngx_°rcmp
(
p
, "rw") == 0) {

385 
right
 = 6;

387 } i‡(
	`ngx_°rcmp
(
p
, "r") == 0) {

388 
right
 = 4;

391 
övÆid
;

394 *
ac˚ss
 |
right
 << 
shi·
;

397  
NGX_CONF_OK
;

399 
övÆid
:

401 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

404 
	}
}

407 
ngx_öt_t


408 
	$ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
)

410 
ngx_uöt_t
 
i
, 
n
;

411 
ngx_∑th_t
 *
∑th
, **
p
;

413 
∑th
 = *
¶Ÿ
;

415 
p
 = 
cf
->
cy˛e
->
∑ths
.
ñts
;

416 
i
 = 0; i < 
cf
->
cy˛e
->
∑ths
.
√…s
; i++) {

417 i‡(
p
[
i
]->
«me
.
Àn
 =
∑th
->name.len

418 && 
	`ngx_°rcmp
(
p
[
i
]->
«me
.
d©a
, 
∑th
->name.data) == 0)

420 
n
 = 0;Ç < 3;Ç++) {

421 i‡(
p
[
i
]->
Àvñ
[
n
] !
∑th
->level[n]) {

422 i‡(
∑th
->
c⁄f_fûe
 =
NULL
) {

423 i‡(
p
[
i
]->
c⁄f_fûe
 =
NULL
) {

424 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

429 &
p
[
i
]->
«me
);

430  
NGX_ERROR
;

433 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

438 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

439  
NGX_ERROR
;

442 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

445 &
p
[
i
]->
«me
,Ö[i]->
c⁄f_fûe
,Ö[i]->
löe
);

446  
NGX_ERROR
;

449 i‡(
p
[
i
]->
Àvñ
[
n
] == 0) {

454 *
¶Ÿ
 = 
p
[
i
];

456  
NGX_OK
;

460 
p
 = 
	`ngx_¨øy_push
(&
cf
->
cy˛e
->
∑ths
);

461 i‡(
p
 =
NULL
) {

462  
NGX_ERROR
;

465 *
p
 = 
∑th
;

467  
NGX_OK
;

468 
	}
}

471 
ngx_öt_t


472 
	$ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
)

474 
ngx_îr_t
 
îr
;

475 
ngx_uöt_t
 
i
;

476 
ngx_∑th_t
 **
∑th
;

478 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

479 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

481 i‡(
	`ngx_¸óã_dú
(
∑th
[
i
]->
«me
.
d©a
, 0700Ë=
NGX_FILE_ERROR
) {

482 
îr
 = 
ngx_î∫o
;

483 i‡(
îr
 !
NGX_EEXIST
) {

484 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
îr
,

485 
ngx_¸óã_dú_n
 " \"%s\" failed",

486 
∑th
[
i
]->
«me
.
d©a
);

487  
NGX_ERROR
;

491 i‡(
u£r
 =(
ngx_uid_t
Ë
NGX_CONF_UNSET_UINT
) {

495 #i‡!(
NGX_WIN32
)

497 
ngx_fûe_öfo_t
 
fi
;

499 i‡(
	`ngx_fûe_öfo
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, &
fi
)

500 =
NGX_FILE_ERROR
)

502 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

503 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

504  
NGX_ERROR
;

507 i‡(
fi
.
°_uid
 !
u£r
) {

508 i‡(
	`chown
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
u£r
, -1) == -1) {

509 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

511 
∑th
[
i
]->
«me
.
d©a
, 
u£r
);

512  
NGX_ERROR
;

516 i‡((
fi
.
°_mode
 & (
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

517 !(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
))

519 
fi
.
°_mode
 |(
S_IRUSR
|
S_IWUSR
|
S_IXUSR
);

521 i‡(
	`chmod
((c⁄° *Ë
∑th
[
i
]->
«me
.
d©a
, 
fi
.
°_mode
) == -1) {

522 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

523 "chmod(Ë\"%s\" faûed", 
∑th
[
i
]->
«me
.
d©a
);

524  
NGX_ERROR
;

531  
NGX_OK
;

532 
	}
}

535 
ngx_öt_t


536 
	$ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
, 
ngx_ext_ª«me_fûe_t
 *
ext
)

538 
u_ch¨
 *
«me
;

539 
ngx_îr_t
 
îr
;

540 
ngx_c›y_fûe_t
 
cf
;

542 #i‡!(
NGX_WIN32
)

544 i‡(
ext
->
ac˚ss
) {

545 i‡(
	`ngx_ch™ge_fûe_ac˚ss
(
§c
->
d©a
, 
ext
->
ac˚ss
Ë=
NGX_FILE_ERROR
) {

546 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

547 
ngx_ch™ge_fûe_ac˚ss_n
 " \"%s\" faûed", 
§c
->
d©a
);

548 
îr
 = 0;

549 
Áûed
;

555 i‡(
ext
->
time
 != -1) {

556 i‡(
	`ngx_£t_fûe_time
(
§c
->
d©a
, 
ext
->
fd
,Éxt->
time
Ë!
NGX_OK
) {

557 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

558 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
§c
->
d©a
);

559 
îr
 = 0;

560 
Áûed
;

564 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

565  
NGX_OK
;

568 
îr
 = 
ngx_î∫o
;

570 i‡(
îr
 =
NGX_ENOPATH
) {

572 i‡(!
ext
->
¸óã_∑th
) {

573 
Áûed
;

576 
îr
 = 
	`ngx_¸óã_fuŒ_∑th
(
to
->
d©a
, 
	`ngx_dú_ac˚ss
(
ext
->
∑th_ac˚ss
));

578 i‡(
îr
) {

579 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

580 
ngx_¸óã_dú_n
 " \"%s\" faûed", 
to
->
d©a
);

581 
îr
 = 0;

582 
Áûed
;

585 i‡(
	`ngx_ª«me_fûe
(
§c
->
d©a
, 
to
->d©aË!
NGX_FILE_ERROR
) {

586  
NGX_OK
;

589 
îr
 = 
ngx_î∫o
;

592 #i‡(
NGX_WIN32
)

594 i‡(
îr
 =
NGX_EEXIST
) {

595 
îr
 = 
	`ngx_wö32_ª«me_fûe
(
§c
, 
to
, 
ext
->
log
);

597 i‡(
îr
 == 0) {

598  
NGX_OK
;

604 i‡(
îr
 =
NGX_EXDEV
) {

606 
cf
.
size
 = -1;

607 
cf
.
buf_size
 = 0;

608 
cf
.
ac˚ss
 = 
ext
->access;

609 
cf
.
time
 = 
ext
->time;

610 
cf
.
log
 = 
ext
->log;

612 
«me
 = 
	`ngx_Æloc
(
to
->
Àn
 + 1 + 10 + 1, 
ext
->
log
);

613 i‡(
«me
 =
NULL
) {

614  
NGX_ERROR
;

617 (Ë
	`ngx_•rötf
(
«me
, "%*s.%010uD%Z", 
to
->
Àn
,Åo->
d©a
,

618 (
uöt32_t
Ë
	`ngx_√xt_ãmp_numbî
(0));

620 i‡(
	`ngx_c›y_fûe
(
§c
->
d©a
, 
«me
, &
cf
Ë=
NGX_OK
) {

622 i‡(
	`ngx_ª«me_fûe
(
«me
, 
to
->
d©a
Ë!
NGX_FILE_ERROR
) {

623 
	`ngx_‰ì
(
«me
);

625 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

626 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

627 
ngx_dñëe_fûe_n
 " \"%s\" failed",

628 
§c
->
d©a
);

629  
NGX_ERROR
;

632  
NGX_OK
;

635 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

636 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

637 
«me
, 
to
->
d©a
);

639 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

640 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

641 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

646 
	`ngx_‰ì
(
«me
);

648 
îr
 = 0;

651 
Áûed
:

653 i‡(
ext
->
dñëe_fûe
) {

654 i‡(
	`ngx_dñëe_fûe
(
§c
->
d©a
Ë=
NGX_FILE_ERROR
) {

655 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
ngx_î∫o
,

656 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
§c
->
d©a
);

660 i‡(
îr
) {

661 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ext
->
log
, 
îr
,

662 
ngx_ª«me_fûe_n
 " \"%s\"Åo \"%s\" failed",

663 
§c
->
d©a
, 
to
->data);

666  
NGX_ERROR
;

667 
	}
}

670 
ngx_öt_t


671 
	$ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
)

673 *
buf
;

674 
off_t
 
size
;

675 
size_t
 
Àn
;

676 
ssize_t
 
n
;

677 
ngx_fd_t
 
fd
, 
nfd
;

678 
ngx_öt_t
 
rc
;

679 
ngx_fûe_öfo_t
 
fi
;

681 
rc
 = 
NGX_ERROR
;

682 
buf
 = 
NULL
;

683 
nfd
 = 
NGX_INVALID_FILE
;

685 
fd
 = 
	`ngx_›í_fûe
(
‰om
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

687 i‡(
fd
 =
NGX_INVALID_FILE
) {

688 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

689 
ngx_›í_fûe_n
 " \"%s\" faûed", 
‰om
);

690 
Áûed
;

693 i‡(
cf
->
size
 != -1) {

694 
size
 = 
cf
->size;

697 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

698 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

699 
ngx_fd_öfo_n
 " \"%s\" faûed", 
‰om
);

701 
Áûed
;

704 
size
 = 
	`ngx_fûe_size
(&
fi
);

707 
Àn
 = 
cf
->
buf_size
 ? cf->buf_size : 65536;

709 i‡((
off_t
Ë
Àn
 > 
size
) {

710 
Àn
 = (
size_t
Ë
size
;

713 
buf
 = 
	`ngx_Æloc
(
Àn
, 
cf
->
log
);

714 i‡(
buf
 =
NULL
) {

715 
Áûed
;

718 
nfd
 = 
	`ngx_›í_fûe
(
to
, 
NGX_FILE_WRONLY
, 
NGX_FILE_CREATE_OR_OPEN
,

719 
cf
->
ac˚ss
);

721 i‡(
nfd
 =
NGX_INVALID_FILE
) {

722 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cf
->
log
, 
ngx_î∫o
,

723 
ngx_›í_fûe_n
 " \"%s\" faûed", 
to
);

724 
Áûed
;

727 
size
 > 0) {

729 i‡((
off_t
Ë
Àn
 > 
size
) {

730 
Àn
 = (
size_t
Ë
size
;

733 
n
 = 
	`ngx_ªad_fd
(
fd
, 
buf
, 
Àn
);

735 i‡(
n
 == -1) {

736 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

737 
ngx_ªad_fd_n
 " \"%s\" faûed", 
‰om
);

738 
Áûed
;

741 i‡((
size_t
Ë
n
 !
Àn
) {

742 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

743 
ngx_ªad_fd_n
 " hasÑead only %z of %uz from %s",

744 
n
, 
size
, 
‰om
);

745 
Áûed
;

748 
n
 = 
	`ngx_wrôe_fd
(
nfd
, 
buf
, 
Àn
);

750 i‡(
n
 == -1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

752 
ngx_wrôe_fd_n
 " \"%s\" faûed", 
to
);

753 
Áûed
;

756 i‡((
size_t
Ë
n
 !
Àn
) {

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

758 
ngx_wrôe_fd_n
 " has written only %z of %uzÅo %s",

759 
n
, 
size
, 
to
);

760 
Áûed
;

763 
size
 -
n
;

766 i‡(
cf
->
time
 != -1) {

767 i‡(
	`ngx_£t_fûe_time
(
to
, 
nfd
, 
cf
->
time
Ë!
NGX_OK
) {

768 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

769 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
to
);

770 
Áûed
;

774 
rc
 = 
NGX_OK
;

776 
Áûed
:

778 i‡(
nfd
 !
NGX_INVALID_FILE
) {

779 i‡(
	`ngx_˛o£_fûe
(
nfd
Ë=
NGX_FILE_ERROR
) {

780 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

781 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
to
);

785 i‡(
fd
 !
NGX_INVALID_FILE
) {

786 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

787 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

788 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
‰om
);

792 i‡(
buf
) {

793 
	`ngx_‰ì
(
buf
);

796  
rc
;

797 
	}
}

818 
ngx_öt_t


819 
	$ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
)

821 *
d©a
, *
¥ev
;

822 
u_ch¨
 *
p
, *
«me
;

823 
size_t
 
Àn
;

824 
ngx_öt_t
 
rc
;

825 
ngx_îr_t
 
îr
;

826 
ngx_°r_t
 
fûe
, 
buf
;

827 
ngx_dú_t
 
dú
;

829 
	`ngx_°r_nuŒ
(&
buf
);

831 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

832 "wÆkÅªê\"%V\"", 
åì
);

834 i‡(
	`ngx_›í_dú
(
åì
, &
dú
Ë=
NGX_ERROR
) {

835 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

836 
ngx_›í_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

837  
NGX_ERROR
;

840 
¥ev
 = 
˘x
->
d©a
;

842 i‡(
˘x
->
Æloc
) {

843 
d©a
 = 
	`ngx_Æloc
(
˘x
->
Æloc
, ctx->
log
);

844 i‡(
d©a
 =
NULL
) {

845 
Áûed
;

848 i‡(
˘x
->
	`öô_h™dÀr
(
d©a
, 
¥ev
Ë=
NGX_ABORT
) {

849 
Áûed
;

852 
˘x
->
d©a
 = data;

855 
d©a
 = 
NULL
;

860 
	`ngx_£t_î∫o
(0);

862 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

863 
îr
 = 
ngx_î∫o
;

865 i‡(
îr
 =
NGX_ENOMOREFILES
) {

866 
rc
 = 
NGX_OK
;

869 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
îr
,

870 
ngx_ªad_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

871 
rc
 = 
NGX_ERROR
;

874 
d⁄e
;

877 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

878 
«me
 = 
	`ngx_de_«me
(&
dú
);

880 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

881 "åìÇamê%uz:\"%s\"", 
Àn
, 
«me
);

883 i‡(
Àn
 =1 && 
«me
[0] == '.') {

887 i‡(
Àn
 =2 && 
«me
[0] == '.' &&Çame[1] == '.') {

891 
fûe
.
Àn
 = 
åì
->len + 1 +Üen;

893 i‡(
fûe
.
Àn
 + 
NGX_DIR_MASK_LEN
 > 
buf
.len) {

895 i‡(
buf
.
Àn
) {

896 
	`ngx_‰ì
(
buf
.
d©a
);

899 
buf
.
Àn
 = 
åì
->À¿+ 1 +Üí + 
NGX_DIR_MASK_LEN
;

901 
buf
.
d©a
 = 
	`ngx_Æloc
(buf.
Àn
 + 1, 
˘x
->
log
);

902 i‡(
buf
.
d©a
 =
NULL
) {

903 
Áûed
;

907 
p
 = 
	`ngx_˝ymem
(
buf
.
d©a
, 
åì
->d©a,Åªe->
Àn
);

908 *
p
++ = '/';

909 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 + 1);

911 
fûe
.
d©a
 = 
buf
.data;

913 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

914 "åìÖ©h \"%s\"", 
fûe
.
d©a
);

916 i‡(!
dú
.
vÆid_öfo
) {

917 i‡(
	`ngx_de_öfo
(
fûe
.
d©a
, &
dú
Ë=
NGX_FILE_ERROR
) {

918 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

919 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûe
.
d©a
);

924 i‡(
	`ngx_de_is_fûe
(&
dú
)) {

926 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

927 "åì fûê\"%s\"", 
fûe
.
d©a
);

929 
˘x
->
size
 = 
	`ngx_de_size
(&
dú
);

930 
˘x
->
fs_size
 = 
	`ngx_de_fs_size
(&
dú
);

931 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

932 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

934 i‡(
˘x
->
	`fûe_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

935 
Áûed
;

938 } i‡(
	`ngx_de_is_dú
(&
dú
)) {

940 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

941 "åìÉ¡î dú \"%s\"", 
fûe
.
d©a
);

943 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

944 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

946 i‡(
˘x
->
	`¥e_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

947 
Áûed
;

950 i‡(
	`ngx_wÆk_åì
(
˘x
, &
fûe
Ë=
NGX_ABORT
) {

951 
Áûed
;

954 
˘x
->
ac˚ss
 = 
	`ngx_de_ac˚ss
(&
dú
);

955 
˘x
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

957 i‡(
˘x
->
	`po°_åì_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

958 
Áûed
;

963 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
log
, 0,

964 "åì s≥cü»\"%s\"", 
fûe
.
d©a
);

966 i‡(
˘x
->
	`•ec_h™dÀr
(˘x, &
fûe
Ë=
NGX_ABORT
) {

967 
Áûed
;

972 
Áûed
:

974 
rc
 = 
NGX_ABORT
;

976 
d⁄e
:

978 i‡(
buf
.
Àn
) {

979 
	`ngx_‰ì
(
buf
.
d©a
);

982 i‡(
d©a
) {

983 
	`ngx_‰ì
(
d©a
);

984 
˘x
->
d©a
 = 
¥ev
;

987 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

988 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

989 
ngx_˛o£_dú_n
 " \"%s\" faûed", 
åì
->
d©a
);

992  
rc
;

993 
	}
}

	@src/core/ngx_file.h

8 #i‚de‡
_NGX_FILE_H_INCLUDED_


9 
	#_NGX_FILE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	sngx_fûe_s
 {

17 
ngx_fd_t
 
	mfd
;

18 
ngx_°r_t
 
	m«me
;

19 
ngx_fûe_öfo_t
 
	möfo
;

21 
off_t
 
	moff£t
;

22 
off_t
 
	msys_off£t
;

24 
ngx_log_t
 *
	mlog
;

26 #i‡(
NGX_HAVE_FILE_AIO
)

27 
ngx_evít_aio_t
 *
	maio
;

30 
	mvÆid_öfo
:1;

31 
	mdúe˘io
:1;

35 
	#NGX_MAX_PATH_LEVEL
 3

	)

38 
	$time_t
 (*
	tngx_∑th_m™agî_±
Ë(*
	td©a
);

39 (*
	tngx_∑th_lﬂdî_±
Ë(*
	td©a
);

43 
ngx_°r_t
 
«me
;

44 
size_t
 
Àn
;

45 
size_t
 
Àvñ
[3];

47 
ngx_∑th_m™agî_±
 
m™agî
;

48 
ngx_∑th_lﬂdî_±
 
lﬂdî
;

49 *
d©a
;

51 
u_ch¨
 *
c⁄f_fûe
;

52 
ngx_uöt_t
 
löe
;

53 } 
	tngx_∑th_t
;

57 
ngx_°r_t
 
«me
;

58 
size_t
 
Àvñ
[3];

59 } 
	tngx_∑th_öô_t
;

63 
ngx_fûe_t
 
fûe
;

64 
off_t
 
off£t
;

65 
ngx_∑th_t
 *
∑th
;

66 
ngx_poﬁ_t
 *
poﬁ
;

67 *
w¨n
;

69 
ngx_uöt_t
 
ac˚ss
;

71 
log_Àvñ
:8;

72 
≥rsi°ít
:1;

73 
˛ón
:1;

74 } 
	tngx_ãmp_fûe_t
;

78 
ngx_uöt_t
 
ac˚ss
;

79 
ngx_uöt_t
 
∑th_ac˚ss
;

80 
time_t
 
time
;

81 
ngx_fd_t
 
fd
;

83 
¸óã_∑th
:1;

84 
dñëe_fûe
:1;

86 
ngx_log_t
 *
log
;

87 } 
	tngx_ext_ª«me_fûe_t
;

91 
off_t
 
size
;

92 
size_t
 
buf_size
;

94 
ngx_uöt_t
 
ac˚ss
;

95 
time_t
 
time
;

97 
ngx_log_t
 *
log
;

98 } 
	tngx_c›y_fûe_t
;

101 
ngx_åì_˘x_s
 
	tngx_åì_˘x_t
;

103 
	$ngx_öt_t
 (*
	tngx_åì_öô_h™dÀr_±
Ë(*
	t˘x
, *
	t¥ev
);

104 
	$ngx_öt_t
 (*
	tngx_åì_h™dÀr_±
Ë(
	tngx_åì_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 *
	t«me
);

106 
	sngx_åì_˘x_s
 {

107 
off_t
 
size
;

108 
off_t
 
fs_size
;

109 
ngx_uöt_t
 
ac˚ss
;

110 
time_t
 
mtime
;

112 
ngx_åì_öô_h™dÀr_±
 
öô_h™dÀr
;

113 
ngx_åì_h™dÀr_±
 
fûe_h™dÀr
;

114 
ngx_åì_h™dÀr_±
 
¥e_åì_h™dÀr
;

115 
ngx_åì_h™dÀr_±
 
po°_åì_h™dÀr
;

116 
ngx_åì_h™dÀr_±
 
•ec_h™dÀr
;

118 *
d©a
;

119 
size_t
 
Æloc
;

121 
ngx_log_t
 *
log
;

125 
ssize_t
 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
ngx_ãmp_fûe_t
 *
tf
, 
ngx_chaö_t
 *
chaö
);

126 
ngx_öt_t
 
	`ngx_¸óã_ãmp_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
,

127 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
˛ón
,

128 
ngx_uöt_t
 
ac˚ss
);

129 
	`ngx_¸óã_hashed_fûíame
(
ngx_∑th_t
 *
∑th
, 
u_ch¨
 *
fûe
, 
size_t
 
Àn
);

130 
ngx_öt_t
 
	`ngx_¸óã_∑th
(
ngx_fûe_t
 *
fûe
, 
ngx_∑th_t
 *
∑th
);

131 
ngx_îr_t
 
	`ngx_¸óã_fuŒ_∑th
(
u_ch¨
 *
dú
, 
ngx_uöt_t
 
ac˚ss
);

132 
ngx_öt_t
 
	`ngx_add_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
¶Ÿ
);

133 
ngx_öt_t
 
	`ngx_¸óã_∑ths
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uid_t
 
u£r
);

134 
ngx_öt_t
 
	`ngx_ext_ª«me_fûe
(
ngx_°r_t
 *
§c
,Çgx_°r_à*
to
,

135 
ngx_ext_ª«me_fûe_t
 *
ext
);

136 
ngx_öt_t
 
	`ngx_c›y_fûe
(
u_ch¨
 *
‰om
, u_ch¨ *
to
, 
ngx_c›y_fûe_t
 *
cf
);

137 
ngx_öt_t
 
	`ngx_wÆk_åì
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
åì
);

139 
ngx_©omic_uöt_t
 
	`ngx_√xt_ãmp_numbî
(
ngx_uöt_t
 
cﬁlisi⁄
);

141 *
	`ngx_c⁄f_£t_∑th_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

142 *
	`ngx_c⁄f_mîge_∑th_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_∑th_t
 **
∑th
,

143 
ngx_∑th_t
 *
¥ev
, 
ngx_∑th_öô_t
 *
öô
);

144 *
	`ngx_c⁄f_£t_ac˚ss_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

147 
ngx_©omic_t
 *
ngx_ãmp_numbî
;

148 
ngx_©omic_öt_t
 
ngx_øndom_numbî
;

	@src/core/ngx_hash.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

15 
ngx_uöt_t
 
i
;

16 
ngx_hash_ñt_t
 *
ñt
;

19 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "hf:\"%*s\"", 
Àn
, 
«me
);

22 
ñt
 = 
hash
->
buckës
[
key
 % hash->
size
];

24 i‡(
ñt
 =
NULL
) {

25  
NULL
;

28 
ñt
->
vÆue
) {

29 i‡(
Àn
 !(
size_t
Ë
ñt
->len) {

30 
√xt
;

33 
i
 = 0; i < 
Àn
; i++) {

34 i‡(
«me
[
i
] !
ñt
->name[i]) {

35 
√xt
;

39  
ñt
->
vÆue
;

41 
√xt
:

43 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

48  
NULL
;

49 
	}
}

53 
	$ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

55 *
vÆue
;

56 
ngx_uöt_t
 
i
, 
n
, 
key
;

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "wch:\"%*s\"", 
Àn
, 
«me
);

62 
n
 = 
Àn
;

64 
n
) {

65 i‡(
«me
[
n
 - 1] == '.') {

69 
n
--;

72 
key
 = 0;

74 
i
 = 
n
; i < 
Àn
; i++) {

75 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

79 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

82 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, &
«me
[
n
], 
Àn
 -Ç);

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

88 i‡(
vÆue
) {

101 i‡((
uöçå_t
Ë
vÆue
 & 2) {

103 i‡(
n
 == 0) {

107 i‡((
uöçå_t
Ë
vÆue
 & 1) {

108  
NULL
;

111 
hwc
 = (
ngx_hash_wûdˇrd_t
 *)

112 ((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

113  
hwc
->
vÆue
;

116 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

118 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hwc
, 
«me
, 
n
 - 1);

120 i‡(
vÆue
) {

121  
vÆue
;

124  
hwc
->
vÆue
;

127 i‡((
uöçå_t
Ë
vÆue
 & 1) {

129 i‡(
n
 == 0) {

133  
NULL
;

136  (*Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

139  
vÆue
;

142  
hwc
->
vÆue
;

143 
	}
}

147 
	$ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
)

149 *
vÆue
;

150 
ngx_uöt_t
 
i
, 
key
;

153 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "w˘:\"%*s\"", 
Àn
, 
«me
);

156 
key
 = 0;

158 
i
 = 0; i < 
Àn
; i++) {

159 i‡(
«me
[
i
] == '.') {

163 
key
 = 
	`ngx_hash
(key, 
«me
[
i
]);

166 i‡(
i
 =
Àn
) {

167  
NULL
;

171 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "key:\"%ui\"", 
key
);

174 
vÆue
 = 
	`ngx_hash_föd
(&
hwc
->
hash
, 
key
, 
«me
, 
i
);

177 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "vÆue:\"%p\"", 
vÆue
);

180 i‡(
vÆue
) {

188 i‡((
uöçå_t
Ë
vÆue
 & 2) {

190 
i
++;

192 
hwc
 = (
ngx_hash_wûdˇrd_t
 *Ë((
uöçå_t
Ë
vÆue
 & (uintptr_t) ~3);

194 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hwc
, &
«me
[
i
], 
Àn
 - i);

196 i‡(
vÆue
) {

197  
vÆue
;

200  
hwc
->
vÆue
;

203  
vÆue
;

206  
hwc
->
vÆue
;

207 
	}
}

211 
	$ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
,

212 
size_t
 
Àn
)

214 *
vÆue
;

216 i‡(
hash
->hash.
buckës
) {

217 
vÆue
 = 
	`ngx_hash_föd
(&
hash
->hash, 
key
, 
«me
, 
Àn
);

219 i‡(
vÆue
) {

220  
vÆue
;

224 i‡(
Àn
 == 0) {

225  
NULL
;

228 i‡(
hash
->
wc_hód
 && hash->wc_hód->hash.
buckës
) {

229 
vÆue
 = 
	`ngx_hash_föd_wc_hód
(
hash
->
wc_hód
, 
«me
, 
Àn
);

231 i‡(
vÆue
) {

232  
vÆue
;

236 i‡(
hash
->
wc_èû
 && hash->wc_èû->hash.
buckës
) {

237 
vÆue
 = 
	`ngx_hash_föd_wc_èû
(
hash
->
wc_èû
, 
«me
, 
Àn
);

239 i‡(
vÆue
) {

240  
vÆue
;

244  
NULL
;

245 
	}
}

248 
	#NGX_HASH_ELT_SIZE
(
«me
) \

249 ((*Ë+ 
	`ngx_Æign
((
«me
)->
key
.
Àn
 + 2, (*)))

	)

251 
ngx_öt_t


252 
	$ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
, 
ngx_uöt_t
 
√…s
)

254 
u_ch¨
 *
ñts
;

255 
size_t
 
Àn
;

256 
u_sh‹t
 *
ã°
;

257 
ngx_uöt_t
 
i
, 
n
, 
key
, 
size
, 
°¨t
, 
buckë_size
;

258 
ngx_hash_ñt_t
 *
ñt
, **
buckës
;

260 
n
 = 0;Ç < 
√…s
;Ç++) {

261 i‡(
höô
->
buckë_size
 < 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]) + (*))

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

266 
höô
->
«me
, höô->«me, höô->
buckë_size
);

267  
NGX_ERROR
;

271 
ã°
 = 
	`ngx_Æloc
(
höô
->
max_size
 * (
u_sh‹t
), höô->
poﬁ
->
log
);

272 i‡(
ã°
 =
NULL
) {

273  
NGX_ERROR
;

276 
buckë_size
 = 
höô
->bucket_size - (*);

278 
°¨t
 = 
√…s
 / (
buckë_size
 / (2 * (*)));

279 
°¨t
 = start ? start : 1;

281 i‡(
höô
->
max_size
 > 10000 && 
√…s
 && hinit->max_size /Çelts < 100) {

282 
°¨t
 = 
höô
->
max_size
 - 1000;

285 
size
 = 
°¨t
; sizê< 
höô
->
max_size
; size++) {

287 
	`ngx_memzîo
(
ã°
, 
size
 * (
u_sh‹t
));

289 
n
 = 0;Ç < 
√…s
;Ç++) {

290 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

294 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

295 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

298 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

300 
size
, 
key
, 
ã°
[key], &
«mes
[
n
].key);

303 i‡(
ã°
[
key
] > (
u_sh‹t
Ë
buckë_size
) {

304 
√xt
;

308 
found
;

310 
√xt
:

315 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
höô
->
poﬁ
->
log
, 0,

318 
höô
->
«me
, höô->«me, höô->
max_size
,

319 
höô
->
«me
, höô->
buckë_size
);

321 
	`ngx_‰ì
(
ã°
);

323  
NGX_ERROR
;

325 
found
:

327 
i
 = 0; i < 
size
; i++) {

328 
ã°
[
i
] = (*);

331 
n
 = 0;Ç < 
√…s
;Ç++) {

332 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

336 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

337 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

340 
Àn
 = 0;

342 
i
 = 0; i < 
size
; i++) {

343 i‡(
ã°
[
i
] == (*)) {

347 
ã°
[
i
] = (
u_sh‹t
Ë(
	`ngx_Æign
—e°[i], 
ngx_ˇchñöe_size
));

349 
Àn
 +
ã°
[
i
];

352 i‡(
höô
->
hash
 =
NULL
) {

353 
höô
->
hash
 = 
	`ngx_pˇŒoc
(höô->
poﬁ
, (
ngx_hash_wûdˇrd_t
)

354 + 
size
 * (
ngx_hash_ñt_t
 *));

355 i‡(
höô
->
hash
 =
NULL
) {

356 
	`ngx_‰ì
(
ã°
);

357  
NGX_ERROR
;

360 
buckës
 = (
ngx_hash_ñt_t
 **)

361 ((
u_ch¨
 *Ë
höô
->
hash
 + (
ngx_hash_wûdˇrd_t
));

364 
buckës
 = 
	`ngx_pˇŒoc
(
höô
->
poﬁ
, 
size
 * (
ngx_hash_ñt_t
 *));

365 i‡(
buckës
 =
NULL
) {

366 
	`ngx_‰ì
(
ã°
);

367  
NGX_ERROR
;

371 
ñts
 = 
	`ngx_∑Œoc
(
höô
->
poﬁ
, 
Àn
 + 
ngx_ˇchñöe_size
);

372 i‡(
ñts
 =
NULL
) {

373 
	`ngx_‰ì
(
ã°
);

374  
NGX_ERROR
;

377 
ñts
 = 
	`ngx_Æign_±r
”…s, 
ngx_ˇchñöe_size
);

379 
i
 = 0; i < 
size
; i++) {

380 i‡(
ã°
[
i
] == (*)) {

384 
buckës
[
i
] = (
ngx_hash_ñt_t
 *Ë
ñts
;

385 
ñts
 +
ã°
[
i
];

389 
i
 = 0; i < 
size
; i++) {

390 
ã°
[
i
] = 0;

393 
n
 = 0;Ç < 
√…s
;Ç++) {

394 i‡(
«mes
[
n
].
key
.
d©a
 =
NULL
) {

398 
key
 = 
«mes
[
n
].
key_hash
 % 
size
;

399 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
key
] + 
ã°
[key]);

401 
ñt
->
vÆue
 = 
«mes
[
n
].value;

402 
ñt
->
Àn
 = (
u_sh‹t
Ë
«mes
[
n
].
key
.len;

404 
	`ngx_°æow
(
ñt
->
«me
, 
«mes
[
n
].
key
.
d©a
,Çames[n].key.
Àn
);

406 
ã°
[
key
] = (
u_sh‹t
Ë—e°[key] + 
	`NGX_HASH_ELT_SIZE
(&
«mes
[
n
]));

409 
i
 = 0; i < 
size
; i++) {

410 i‡(
buckës
[
i
] =
NULL
) {

414 
ñt
 = (
ngx_hash_ñt_t
 *Ë((
u_ch¨
 *Ë
buckës
[
i
] + 
ã°
[i]);

416 
ñt
->
vÆue
 = 
NULL
;

419 
	`ngx_‰ì
(
ã°
);

421 
höô
->
hash
->
buckës
 = buckets;

422 
höô
->
hash
->
size
 = size;

426 
i
 = 0; i < 
size
; i++) {

427 
ngx_°r_t
 
vÆ
;

428 
ngx_uöt_t
 
key
;

430 
ñt
 = 
buckës
[
i
];

432 i‡(
ñt
 =
NULL
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

434 "%ui: NULL", 
i
);

438 
ñt
->
vÆue
) {

439 
vÆ
.
Àn
 = 
ñt
->len;

440 
vÆ
.
d©a
 = &
ñt
->
«me
[0];

442 
key
 = 
höô
->
	`key
(
vÆ
.
d©a
, vÆ.
Àn
);

444 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

445 "%ui: %∞\"%V\" %ui", 
i
, 
ñt
, &
vÆ
, 
key
);

447 
ñt
 = (
ngx_hash_ñt_t
 *Ë
	`ngx_Æign_±r
(&ñt->
«me
[0] +É…->
Àn
,

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

460 
ngx_uöt_t
 
√…s
)

462 
size_t
 
Àn
, 
dŸ_Àn
;

463 
ngx_uöt_t
 
i
, 
n
, 
dŸ
;

464 
ngx_¨øy_t
 
cuº_«mes
, 
√xt_«mes
;

465 
ngx_hash_key_t
 *
«me
, *
√xt_«me
;

466 
ngx_hash_öô_t
 
h
;

467 
ngx_hash_wûdˇrd_t
 *
wdc
;

469 i‡(
	`ngx_¨øy_öô
(&
cuº_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

470 (
ngx_hash_key_t
))

471 !
NGX_OK
)

473  
NGX_ERROR
;

476 i‡(
	`ngx_¨øy_öô
(&
√xt_«mes
, 
höô
->
ãmp_poﬁ
, 
√…s
,

477 (
ngx_hash_key_t
))

478 !
NGX_OK
)

480  
NGX_ERROR
;

483 
n
 = 0;Ç < 
√…s
;Ç = 
i
) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

487 "wc0: \"%V\"", &
«mes
[
n
].
key
);

490 
dŸ
 = 0;

492 
Àn
 = 0;Üí < 
«mes
[
n
].
key
.len;Üen++) {

493 i‡(
«mes
[
n
].
key
.
d©a
[
Àn
] == '.') {

494 
dŸ
 = 1;

499 
«me
 = 
	`ngx_¨øy_push
(&
cuº_«mes
);

500 i‡(
«me
 =
NULL
) {

501  
NGX_ERROR
;

504 
«me
->
key
.
Àn
 =Üen;

505 
«me
->
key
.
d©a
 = 
«mes
[
n
].key.data;

506 
«me
->
key_hash
 = 
höô
->
	`key
“ame->
key
.
d©a
,Çame->key.
Àn
);

507 
«me
->
vÆue
 = 
«mes
[
n
].value;

510 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

511 "wc1: \"%V\" %ui", &
«me
->
key
, 
dŸ
);

514 
dŸ_Àn
 = 
Àn
 + 1;

516 i‡(
dŸ
) {

517 
Àn
++;

520 
√xt_«mes
.
√…s
 = 0;

522 i‡(
«mes
[
n
].
key
.
Àn
 !=Üen) {

523 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

524 i‡(
√xt_«me
 =
NULL
) {

525  
NGX_ERROR
;

528 
√xt_«me
->
key
.
Àn
 = 
«mes
[
n
].key.len -Üen;

529 
√xt_«me
->
key
.
d©a
 = 
«mes
[
n
].key.d©®+ 
Àn
;

530 
√xt_«me
->
key_hash
 = 0;

531 
√xt_«me
->
vÆue
 = 
«mes
[
n
].value;

534 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

535 "wc2: \"%V\"", &
√xt_«me
->
key
);

539 
i
 = 
n
 + 1; i < 
√…s
; i++) {

540 i‡(
	`ngx_°∫cmp
(
«mes
[
n
].
key
.
d©a
,Çames[
i
].key.d©a, 
Àn
) != 0) {

544 i‡(!
dŸ


545 && 
«mes
[
i
].
key
.
Àn
 >Üen

546 && 
«mes
[
i
].
key
.
d©a
[
Àn
] != '.')

551 
√xt_«me
 = 
	`ngx_¨øy_push
(&
√xt_«mes
);

552 i‡(
√xt_«me
 =
NULL
) {

553  
NGX_ERROR
;

556 
√xt_«me
->
key
.
Àn
 = 
«mes
[
i
].key.À¿- 
dŸ_Àn
;

557 
√xt_«me
->
key
.
d©a
 = 
«mes
[
i
].key.d©®+ 
dŸ_Àn
;

558 
√xt_«me
->
key_hash
 = 0;

559 
√xt_«me
->
vÆue
 = 
«mes
[
i
].value;

562 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
höô
->
poﬁ
->
log
, 0,

563 "wc3: \"%V\"", &
√xt_«me
->
key
);

567 i‡(
√xt_«mes
.
√…s
) {

569 
h
 = *
höô
;

570 
h
.
hash
 = 
NULL
;

572 i‡(
	`ngx_hash_wûdˇrd_öô
(&
h
, (
ngx_hash_key_t
 *Ë
√xt_«mes
.
ñts
,

573 
√xt_«mes
.
√…s
)

574 !
NGX_OK
)

576  
NGX_ERROR
;

579 
wdc
 = (
ngx_hash_wûdˇrd_t
 *Ë
h
.
hash
;

581 i‡(
«mes
[
n
].
key
.
Àn
 ==Üen) {

582 
wdc
->
vÆue
 = 
«mes
[
n
].value;

585 
«me
->
vÆue
 = (*Ë((
uöçå_t
Ë
wdc
 | (
dŸ
 ? 3 : 2));

587 } i‡(
dŸ
) {

588 
«me
->
vÆue
 = (*Ë((
uöçå_t
)Çame->value | 1);

592 i‡(
	`ngx_hash_öô
(
höô
, (
ngx_hash_key_t
 *Ë
cuº_«mes
.
ñts
,

593 
cuº_«mes
.
√…s
)

594 !
NGX_OK
)

596  
NGX_ERROR
;

599  
NGX_OK
;

600 
	}
}

603 
ngx_uöt_t


604 
	$ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

606 
ngx_uöt_t
 
i
, 
key
;

608 
key
 = 0;

610 
i
 = 0; i < 
Àn
; i++) {

611 
key
 = 
	`ngx_hash
(key, 
d©a
[
i
]);

614  
key
;

615 
	}
}

618 
ngx_uöt_t


619 
	$ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

621 
ngx_uöt_t
 
i
, 
key
;

623 
key
 = 0;

625 
i
 = 0; i < 
Àn
; i++) {

626 
key
 = 
	`ngx_hash
(key, 
	`ngx_tﬁowî
(
d©a
[
i
]));

629  
key
;

630 
	}
}

633 
ngx_uöt_t


634 
	$ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

636 
ngx_uöt_t
 
key
;

638 
key
 = 0;

640 
n
--) {

641 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

642 
key
 = 
	`ngx_hash
(key, *
d°
);

643 
d°
++;

644 
§c
++;

647  
key
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
)

654 
ngx_uöt_t
 
asize
;

656 i‡(
ty≥
 =
NGX_HASH_SMALL
) {

657 
asize
 = 4;

658 
ha
->
hsize
 = 107;

661 
asize
 = 
NGX_HASH_LARGE_ASIZE
;

662 
ha
->
hsize
 = 
NGX_HASH_LARGE_HSIZE
;

665 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys
, ha->
ãmp_poﬁ
, 
asize
, (
ngx_hash_key_t
))

666 !
NGX_OK
)

668  
NGX_ERROR
;

671 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_hód
, ha->
ãmp_poﬁ
, 
asize
,

672 (
ngx_hash_key_t
))

673 !
NGX_OK
)

675  
NGX_ERROR
;

678 i‡(
	`ngx_¨øy_öô
(&
ha
->
dns_wc_èû
, ha->
ãmp_poﬁ
, 
asize
,

679 (
ngx_hash_key_t
))

680 !
NGX_OK
)

682  
NGX_ERROR
;

685 
ha
->
keys_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
, (
ngx_¨øy_t
Ë* ha->
hsize
);

686 i‡(
ha
->
keys_hash
 =
NULL
) {

687  
NGX_ERROR
;

690 
ha
->
dns_wc_hód_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

691 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

692 i‡(
ha
->
dns_wc_hód_hash
 =
NULL
) {

693  
NGX_ERROR
;

696 
ha
->
dns_wc_èû_hash
 = 
	`ngx_pˇŒoc
(ha->
ãmp_poﬁ
,

697 (
ngx_¨øy_t
Ë* 
ha
->
hsize
);

698 i‡(
ha
->
dns_wc_èû_hash
 =
NULL
) {

699  
NGX_ERROR
;

702  
NGX_OK
;

703 
	}
}

706 
ngx_öt_t


707 
	$ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
, *
vÆue
,

708 
ngx_uöt_t
 
Êags
)

710 
size_t
 
Àn
;

711 
u_ch¨
 *
p
;

712 
ngx_°r_t
 *
«me
;

713 
ngx_uöt_t
 
i
, 
k
, 
n
, 
skù
, 
œ°
;

714 
ngx_¨øy_t
 *
keys
, *
hwc
;

715 
ngx_hash_key_t
 *
hk
;

717 
œ°
 = 
key
->
Àn
;

719 i‡(
Êags
 & 
NGX_HASH_WILDCARD_KEY
) {

726 
n
 = 0;

728 
i
 = 0; i < 
key
->
Àn
; i++) {

730 i‡(
key
->
d©a
[
i
] == '*') {

731 i‡(++
n
 > 1) {

732  
NGX_DECLINED
;

736 i‡(
key
->
d©a
[
i
] == '.' && key->data[i + 1] == '.') {

737  
NGX_DECLINED
;

741 i‡(
key
->
Àn
 > 1 && key->
d©a
[0] == '.') {

742 
skù
 = 1;

743 
wûdˇrd
;

746 i‡(
key
->
Àn
 > 2) {

748 i‡(
key
->
d©a
[0] == '*' && key->data[1] == '.') {

749 
skù
 = 2;

750 
wûdˇrd
;

753 i‡(
key
->
d©a
[
i
 - 2] == '.' && key->data[i - 1] == '*') {

754 
skù
 = 0;

755 
œ°
 -= 2;

756 
wûdˇrd
;

760 i‡(
n
) {

761  
NGX_DECLINED
;

767 
k
 = 0;

769 
i
 = 0; i < 
œ°
; i++) {

770 i‡(!(
Êags
 & 
NGX_HASH_READONLY_KEY
)) {

771 
key
->
d©a
[
i
] = 
	`ngx_tﬁowî
(key->data[i]);

773 
k
 = 
	`ngx_hash
(k, 
key
->
d©a
[
i
]);

776 
k
 %
ha
->
hsize
;

780 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

782 i‡(
«me
) {

783 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

784 i‡(
œ°
 !
«me
[
i
].
Àn
) {

788 i‡(
	`ngx_°∫cmp
(
key
->
d©a
, 
«me
[
i
].d©a, 
œ°
) == 0) {

789  
NGX_BUSY
;

794 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

795 (
ngx_°r_t
))

796 !
NGX_OK
)

798  
NGX_ERROR
;

802 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

803 i‡(
«me
 =
NULL
) {

804  
NGX_ERROR
;

807 *
«me
 = *
key
;

809 
hk
 = 
	`ngx_¨øy_push
(&
ha
->
keys
);

810 i‡(
hk
 =
NULL
) {

811  
NGX_ERROR
;

814 
hk
->
key
 = *key;

815 
hk
->
key_hash
 = 
	`ngx_hash_key
(
key
->
d©a
, 
œ°
);

816 
hk
->
vÆue
 = value;

818  
NGX_OK
;

821 
wûdˇrd
:

825 
k
 = 
	`ngx_hash_°æow
(&
key
->
d©a
[
skù
], &key->d©a[skù], 
œ°
 - skip);

827 
k
 %
ha
->
hsize
;

829 i‡(
skù
 == 1) {

833 
«me
 = 
ha
->
keys_hash
[
k
].
ñts
;

835 i‡(
«me
) {

836 
Àn
 = 
œ°
 - 
skù
;

838 
i
 = 0; i < 
ha
->
keys_hash
[
k
].
√…s
; i++) {

839 i‡(
Àn
 !
«me
[
i
].len) {

843 i‡(
	`ngx_°∫cmp
(&
key
->
d©a
[1], 
«me
[
i
].d©a, 
Àn
) == 0) {

844  
NGX_BUSY
;

849 i‡(
	`ngx_¨øy_öô
(&
ha
->
keys_hash
[
k
], ha->
ãmp_poﬁ
, 4,

850 (
ngx_°r_t
))

851 !
NGX_OK
)

853  
NGX_ERROR
;

857 
«me
 = 
	`ngx_¨øy_push
(&
ha
->
keys_hash
[
k
]);

858 i‡(
«me
 =
NULL
) {

859  
NGX_ERROR
;

862 
«me
->
Àn
 = 
œ°
 - 1;

863 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

864 i‡(
«me
->
d©a
 =
NULL
) {

865  
NGX_ERROR
;

868 
	`ngx_mem˝y
(
«me
->
d©a
, &
key
->d©a[1],Çame->
Àn
);

872 i‡(
skù
) {

879 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

880 i‡(
p
 =
NULL
) {

881  
NGX_ERROR
;

884 
Àn
 = 0;

885 
n
 = 0;

887 
i
 = 
œ°
 - 1; i; i--) {

888 i‡(
key
->
d©a
[
i
] == '.') {

889 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[
i
 + 1], 
Àn
);

890 
n
 +
Àn
;

891 
p
[
n
++] = '.';

892 
Àn
 = 0;

896 
Àn
++;

899 i‡(
Àn
) {

900 
	`ngx_mem˝y
(&
p
[
n
], &
key
->
d©a
[1], 
Àn
);

901 
n
 +
Àn
;

904 
p
[
n
] = '\0';

906 
hwc
 = &
ha
->
dns_wc_hód
;

907 
keys
 = &
ha
->
dns_wc_hód_hash
[
k
];

913 
œ°
++;

915 
p
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
, 
œ°
);

916 i‡(
p
 =
NULL
) {

917  
NGX_ERROR
;

920 
	`ngx_˝y°∫
(
p
, 
key
->
d©a
, 
œ°
);

922 
hwc
 = &
ha
->
dns_wc_èû
;

923 
keys
 = &
ha
->
dns_wc_èû_hash
[
k
];

929 
«me
 = 
keys
->
ñts
;

931 i‡(
«me
) {

932 
Àn
 = 
œ°
 - 
skù
;

934 
i
 = 0; i < 
keys
->
√…s
; i++) {

935 i‡(
Àn
 !
«me
[
i
].len) {

939 i‡(
	`ngx_°∫cmp
(
key
->
d©a
 + 
skù
, 
«me
[
i
].d©a, 
Àn
) == 0) {

940  
NGX_BUSY
;

945 i‡(
	`ngx_¨øy_öô
(
keys
, 
ha
->
ãmp_poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
)

947  
NGX_ERROR
;

951 
«me
 = 
	`ngx_¨øy_push
(
keys
);

952 i‡(
«me
 =
NULL
) {

953  
NGX_ERROR
;

956 
«me
->
Àn
 = 
œ°
 - 
skù
;

957 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
ha
->
ãmp_poﬁ
,Çame->
Àn
);

958 i‡(
«me
->
d©a
 =
NULL
) {

959  
NGX_ERROR
;

962 
	`ngx_mem˝y
(
«me
->
d©a
, 
key
->d©®+ 
skù
,Çame->
Àn
);

967 
hk
 = 
	`ngx_¨øy_push
(
hwc
);

968 i‡(
hk
 =
NULL
) {

969  
NGX_ERROR
;

972 
hk
->
key
.
Àn
 = 
œ°
 - 1;

973 
hk
->
key
.
d©a
 = 
p
;

974 
hk
->
key_hash
 = 0;

975 
hk
->
vÆue
 = value;

977  
NGX_OK
;

978 
	}
}

	@src/core/ngx_hash.h

8 #i‚de‡
_NGX_HASH_H_INCLUDED_


9 
	#_NGX_HASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 *
	mvÆue
;

18 
u_sh‹t
 
	mÀn
;

19 
u_ch¨
 
	m«me
[1];

20 } 
	tngx_hash_ñt_t
;

24 
ngx_hash_ñt_t
 **
	mbuckës
;

25 
ngx_uöt_t
 
	msize
;

26 } 
	tngx_hash_t
;

30 
ngx_hash_t
 
	mhash
;

31 *
	mvÆue
;

32 } 
	tngx_hash_wûdˇrd_t
;

36 
ngx_°r_t
 
	mkey
;

37 
ngx_uöt_t
 
	mkey_hash
;

38 *
	mvÆue
;

39 } 
	tngx_hash_key_t
;

42 
	$ngx_uöt_t
 (*
	tngx_hash_key_±
Ë(
	tu_ch¨
 *
	td©a
, 
	tsize_t
 
	tÀn
);

46 
ngx_hash_t
 
hash
;

47 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

48 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

49 } 
	tngx_hash_comböed_t
;

53 
ngx_hash_t
 *
hash
;

54 
ngx_hash_key_±
 
key
;

56 
ngx_uöt_t
 
max_size
;

57 
ngx_uöt_t
 
buckë_size
;

59 *
«me
;

60 
ngx_poﬁ_t
 *
poﬁ
;

61 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

62 } 
	tngx_hash_öô_t
;

65 
	#NGX_HASH_SMALL
 1

	)

66 
	#NGX_HASH_LARGE
 2

	)

68 
	#NGX_HASH_LARGE_ASIZE
 16384

	)

69 
	#NGX_HASH_LARGE_HSIZE
 10007

	)

71 
	#NGX_HASH_WILDCARD_KEY
 1

	)

72 
	#NGX_HASH_READONLY_KEY
 2

	)

76 
ngx_uöt_t
 
hsize
;

78 
ngx_poﬁ_t
 *
poﬁ
;

79 
ngx_poﬁ_t
 *
ãmp_poﬁ
;

81 
ngx_¨øy_t
 
keys
;

82 
ngx_¨øy_t
 *
keys_hash
;

84 
ngx_¨øy_t
 
dns_wc_hód
;

85 
ngx_¨øy_t
 *
dns_wc_hód_hash
;

87 
ngx_¨øy_t
 
dns_wc_èû
;

88 
ngx_¨øy_t
 *
dns_wc_èû_hash
;

89 } 
	tngx_hash_keys_¨øys_t
;

93 
ngx_uöt_t
 
hash
;

94 
ngx_°r_t
 
key
;

95 
ngx_°r_t
 
vÆue
;

96 
u_ch¨
 *
lowˇ£_key
;

97 } 
	tngx_èbÀ_ñt_t
;

100 *
	`ngx_hash_föd
(
ngx_hash_t
 *
hash
, 
ngx_uöt_t
 
key
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

101 *
	`ngx_hash_föd_wc_hód
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

102 *
	`ngx_hash_föd_wc_èû
(
ngx_hash_wûdˇrd_t
 *
hwc
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

103 *
	`ngx_hash_föd_comböed
(
ngx_hash_comböed_t
 *
hash
, 
ngx_uöt_t
 
key
,

104 
u_ch¨
 *
«me
, 
size_t
 
Àn
);

106 
ngx_öt_t
 
	`ngx_hash_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

107 
ngx_uöt_t
 
√…s
);

108 
ngx_öt_t
 
	`ngx_hash_wûdˇrd_öô
(
ngx_hash_öô_t
 *
höô
, 
ngx_hash_key_t
 *
«mes
,

109 
ngx_uöt_t
 
√…s
);

111 
	#ngx_hash
(
key
, 
c
Ë((
ngx_uöt_t
Ëkey * 31 + c)

	)

112 
ngx_uöt_t
 
	`ngx_hash_key
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

113 
ngx_uöt_t
 
	`ngx_hash_key_lc
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

114 
ngx_uöt_t
 
	`ngx_hash_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

117 
ngx_öt_t
 
	`ngx_hash_keys_¨øy_öô
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_uöt_t
 
ty≥
);

118 
ngx_öt_t
 
	`ngx_hash_add_key
(
ngx_hash_keys_¨øys_t
 *
ha
, 
ngx_°r_t
 *
key
,

119 *
vÆue
, 
ngx_uöt_t
 
Êags
);

	@src/core/ngx_inet.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t
 
ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

13 
ngx_öt_t
 
ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

14 
ngx_öt_t
 
ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

17 
ö_addr_t


18 
	$ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

20 
u_ch¨
 *
p
, 
c
;

21 
ö_addr_t
 
addr
;

22 
ngx_uöt_t
 
o˘ë
, 
n
;

24 
addr
 = 0;

25 
o˘ë
 = 0;

26 
n
 = 0;

28 
p
 = 
ãxt
;Ö <Åexà+ 
Àn
;Ö++) {

30 
c
 = *
p
;

32 i‡(
c
 >= '0' && c <= '9') {

33 
o˘ë
 = o˘ë * 10 + (
c
 - '0');

37 i‡(
c
 ='.' && 
o˘ë
 < 256) {

38 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

39 
o˘ë
 = 0;

40 
n
++;

44  
INADDR_NONE
;

47 i‡(
n
 =3 && 
o˘ë
 < 256) {

48 
addr
 = (add∏<< 8Ë+ 
o˘ë
;

49  
	`ht⁄l
(
addr
);

52  
INADDR_NONE
;

53 
	}
}

56 #i‡(
NGX_HAVE_INET6
)

58 
ngx_öt_t


59 
	$ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
)

61 
u_ch¨
 
c
, *
zîo
, *
digô
, *
s
, *
d
;

62 
size_t
 
Àn4
;

63 
ngx_uöt_t
 
n
, 
nibbÀs
, 
w‹d
;

65 i‡(
Àn
 == 0) {

66  
NGX_ERROR
;

69 
zîo
 = 
NULL
;

70 
digô
 = 
NULL
;

71 
Àn4
 = 0;

72 
nibbÀs
 = 0;

73 
w‹d
 = 0;

74 
n
 = 8;

76 i‡(
p
[0] == ':') {

77 
p
++;

78 
Àn
--;

81  ; 
Àn
;Üen--) {

82 
c
 = *
p
++;

84 i‡(
c
 == ':') {

85 i‡(
nibbÀs
) {

86 
digô
 = 
p
;

87 
Àn4
 = 
Àn
;

88 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

89 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

91 i‡(--
n
) {

92 
nibbÀs
 = 0;

93 
w‹d
 = 0;

98 i‡(
zîo
 =
NULL
) {

99 
digô
 = 
p
;

100 
Àn4
 = 
Àn
;

101 
zîo
 = 
addr
;

106  
NGX_ERROR
;

109 i‡(
c
 ='.' && 
nibbÀs
) {

110 i‡(
n
 < 2 || 
digô
 =
NULL
) {

111  
NGX_ERROR
;

114 
w‹d
 = 
	`ngx_öë_addr
(
digô
, 
Àn4
 - 1);

115 i‡(
w‹d
 =
INADDR_NONE
) {

116  
NGX_ERROR
;

119 
w‹d
 = 
	`¡ohl
(word);

120 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 24) & 0xff);

121 *
addr
++ = (
u_ch¨
Ë((
w‹d
 >> 16) & 0xff);

122 
n
--;

126 i‡(++
nibbÀs
 > 4) {

127  
NGX_ERROR
;

130 i‡(
c
 >= '0' && c <= '9') {

131 
w‹d
 = w‹d * 16 + (
c
 - '0');

135 
c
 |= 0x20;

137 i‡(
c
 >= 'a' && c <= 'f') {

138 
w‹d
 = w‹d * 16 + (
c
 - 'a') + 10;

142  
NGX_ERROR
;

145 i‡(
nibbÀs
 =0 && 
zîo
 =
NULL
) {

146  
NGX_ERROR
;

149 *
addr
++ = (
u_ch¨
Ë(
w‹d
 >> 8);

150 *
addr
++ = (
u_ch¨
Ë(
w‹d
 & 0xff);

152 i‡(--
n
) {

153 i‡(
zîo
) {

154 
n
 *= 2;

155 
s
 = 
addr
 - 1;

156 
d
 = 
s
 + 
n
;

157 
s
 >
zîo
) {

158 *
d
-- = *
s
--;

160 
	`ngx_memzîo
(
zîo
, 
n
);

161  
NGX_OK
;

165 i‡(
zîo
 =
NULL
) {

166  
NGX_OK
;

170  
NGX_ERROR
;

171 
	}
}

176 
size_t


177 
	$ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
, 
ngx_uöt_t
 
p‹t
)

179 
u_ch¨
 *
p
;

180 
sockaddr_ö
 *
sö
;

181 #i‡(
NGX_HAVE_INET6
)

182 
size_t
 
n
;

183 
sockaddr_ö6
 *
sö6
;

185 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

186 
sockaddr_un
 *
ßun
;

189 
ß
->
ß_Ámûy
) {

191 
AF_INET
:

193 
sö
 = (
sockaddr_ö
 *Ë
ß
;

194 
p
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

196 i‡(
p‹t
) {

197 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud:%d",

198 
p
[0],Ö[1],Ö[2],Ö[3], 
	`¡ohs
(
sö
->
sö_p‹t
));

200 
p
 = 
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

201 
p
[0],Ö[1],Ö[2],Ö[3]);

204  (
p
 - 
ãxt
);

206 #i‡(
NGX_HAVE_INET6
)

208 
AF_INET6
:

210 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

212 
n
 = 0;

214 i‡(
p‹t
) {

215 
ãxt
[
n
++] = '[';

218 
n
 = 
	`ngx_öë6_¡›
(
sö6
->
sö6_addr
.
s6_addr
, &
ãxt
[n], 
Àn
);

220 i‡(
p‹t
) {

221 
n
 = 
	`ngx_•rötf
(&
ãxt
[1 +Ç], "]:%d",

222 
	`¡ohs
(
sö6
->
sö6_p‹t
)Ë- 
ãxt
;

225  
n
;

228 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

230 
AF_UNIX
:

231 
ßun
 = (
sockaddr_un
 *Ë
ß
;

235  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "unix:%s%Z", 
ßun
->
sun_∑th
) -Åext - 1;

242 
	}
}

245 
size_t


246 
	$ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

248 
u_ch¨
 *
p
;

250 
Ámûy
) {

252 
AF_INET
:

254 
p
 = 
addr
;

256  
	`ngx_¢¥ötf
(
ãxt
, 
Àn
, "%ud.%ud.%ud.%ud",

257 
p
[0],Ö[1],Ö[2],Ö[3])

258 - 
ãxt
;

260 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263  
	`ngx_öë6_¡›
(
addr
, 
ãxt
, 
Àn
);

270 
	}
}

273 #i‡(
NGX_HAVE_INET6
)

275 
size_t


276 
	$ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, 
size_t
 
Àn
)

278 
u_ch¨
 *
d°
;

279 
size_t
 
max
, 
n
;

280 
ngx_uöt_t
 
i
, 
zîo
, 
œ°
;

282 i‡(
Àn
 < 
NGX_INET6_ADDRSTRLEN
) {

286 
zîo
 = (
ngx_uöt_t
) -1;

287 
œ°
 = (
ngx_uöt_t
) -1;

288 
max
 = 1;

289 
n
 = 0;

291 
i
 = 0; i < 16; i += 2) {

293 i‡(
p
[
i
] ||Ö[i + 1]) {

295 i‡(
max
 < 
n
) {

296 
zîo
 = 
œ°
;

297 
max
 = 
n
;

300 
n
 = 0;

304 i‡(
n
++ == 0) {

305 
œ°
 = 
i
;

309 i‡(
max
 < 
n
) {

310 
zîo
 = 
œ°
;

311 
max
 = 
n
;

314 
d°
 = 
ãxt
;

315 
n
 = 16;

317 i‡(
zîo
 == 0) {

319 i‡((
max
 =5 && 
p
[10] == 0xff &&Ö[11] == 0xff)

320 || (
max
 == 6)

321 || (
max
 =7 && 
p
[14] != 0 &&Ö[15] != 1))

323 
n
 = 12;

326 *
d°
++ = ':';

329 
i
 = 0; i < 
n
; i += 2) {

331 i‡(
i
 =
zîo
) {

332 *
d°
++ = ':';

333 
i
 +(
max
 - 1) * 2;

337 
d°
 = 
	`ngx_•rötf
(d°, "%uxi", 
p
[
i
] * 256 +Ö[i + 1]);

339 i‡(
i
 < 14) {

340 *
d°
++ = ':';

344 i‡(
n
 == 12) {

345 
d°
 = 
	`ngx_•rötf
(d°, "%ud.%ud.%ud.%ud", 
p
[12],Ö[13],Ö[14],Ö[15]);

348  
d°
 - 
ãxt
;

349 
	}
}

354 
ngx_öt_t


355 
	$ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
)

357 
u_ch¨
 *
addr
, *
mask
, *
œ°
;

358 
size_t
 
Àn
;

359 
ngx_öt_t
 
shi·
;

360 #i‡(
NGX_HAVE_INET6
)

361 
ngx_öt_t
 
rc
;

362 
ngx_uöt_t
 
s
, 
i
;

365 
addr
 = 
ãxt
->
d©a
;

366 
œ°
 = 
addr
 + 
ãxt
->
Àn
;

368 
mask
 = 
	`ngx_°æchr
(
addr
, 
œ°
, '/');

369 
Àn
 = (
mask
 ? mask : 
œ°
Ë- 
addr
;

371 
cidr
->
u
.
ö
.
addr
 = 
	`ngx_öë_addr
◊ddr, 
Àn
);

373 i‡(
cidr
->
u
.
ö
.
addr
 !
INADDR_NONE
) {

374 
cidr
->
Ámûy
 = 
AF_INET
;

376 i‡(
mask
 =
NULL
) {

377 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

378  
NGX_OK
;

381 #i‡(
NGX_HAVE_INET6
)

382 } i‡(
	`ngx_öë6_addr
(
addr
, 
Àn
, 
cidr
->
u
.
ö6
.addr.
s6_addr
Ë=
NGX_OK
) {

383 
cidr
->
Ámûy
 = 
AF_INET6
;

385 i‡(
mask
 =
NULL
) {

386 
	`ngx_mem£t
(
cidr
->
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

387  
NGX_OK
;

392  
NGX_ERROR
;

395 
mask
++;

397 
shi·
 = 
	`ngx_©oi
(
mask
, 
œ°
 - mask);

398 i‡(
shi·
 =
NGX_ERROR
) {

399  
NGX_ERROR
;

402 
cidr
->
Ámûy
) {

404 #i‡(
NGX_HAVE_INET6
)

405 
AF_INET6
:

406 i‡(
shi·
 > 128) {

407  
NGX_ERROR
;

410 
addr
 = 
cidr
->
u
.
ö6
.addr.
s6_addr
;

411 
mask
 = 
cidr
->
u
.
ö6
.mask.
s6_addr
;

412 
rc
 = 
NGX_OK
;

414 
i
 = 0; i < 16; i++) {

416 
s
 = (
shi·
 > 8) ? 8 : shift;

417 
shi·
 -
s
;

419 
mask
[
i
] = (
u_ch¨
Ë(0xffu << (8 - 
s
));

421 i‡(
addr
[
i
] !◊ddr[i] & 
mask
[i])) {

422 
rc
 = 
NGX_DONE
;

423 
addr
[
i
] &
mask
[i];

427  
rc
;

431 i‡(
shi·
 > 32) {

432  
NGX_ERROR
;

435 i‡(
shi·
) {

436 
cidr
->
u
.
ö
.
mask
 = 
	`ht⁄l
((
uöt32_t
Ë(0xffffffffu << (32 - 
shi·
)));

440 
cidr
->
u
.
ö
.
mask
 = 0;

443 i‡(
cidr
->
u
.
ö
.
addr
 =(cidr->u.ö.add∏& cidr->u.ö.
mask
)) {

444  
NGX_OK
;

447 
cidr
->
u
.
ö
.
addr
 &cidr->u.ö.
mask
;

449  
NGX_DONE
;

451 
	}
}

454 
ngx_öt_t


455 
	$ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
, 
size_t
 
Àn
)

457 
ö_addr_t
 
öaddr
;

458 
ngx_uöt_t
 
Ámûy
;

459 
sockaddr_ö
 *
sö
;

460 #i‡(
NGX_HAVE_INET6
)

461 
ö6_addr
 
öaddr6
;

462 
sockaddr_ö6
 *
sö6
;

468 
	`ngx_memzîo
(&
öaddr6
, (
ö6_addr
));

471 
öaddr
 = 
	`ngx_öë_addr
(
ãxt
, 
Àn
);

473 i‡(
öaddr
 !
INADDR_NONE
) {

474 
Ámûy
 = 
AF_INET
;

475 
Àn
 = (
sockaddr_ö
);

477 #i‡(
NGX_HAVE_INET6
)

478 } i‡(
	`ngx_öë6_addr
(
ãxt
, 
Àn
, 
öaddr6
.
s6_addr
Ë=
NGX_OK
) {

479 
Ámûy
 = 
AF_INET6
;

480 
Àn
 = (
sockaddr_ö6
);

484  
NGX_DECLINED
;

487 
addr
->
sockaddr
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Àn
);

488 i‡(
addr
->
sockaddr
 =
NULL
) {

489  
NGX_ERROR
;

492 
addr
->
sockaddr
->
ß_Ámûy
 = (
u_ch¨
Ë
Ámûy
;

493 
addr
->
sockÀn
 = 
Àn
;

495 
Ámûy
) {

497 #i‡(
NGX_HAVE_INET6
)

498 
AF_INET6
:

499 
sö6
 = (
sockaddr_ö6
 *Ë
addr
->
sockaddr
;

500 
	`ngx_mem˝y
(
sö6
->
sö6_addr
.
s6_addr
, 
öaddr6
.s6_addr, 16);

505 
sö
 = (
sockaddr_ö
 *Ë
addr
->
sockaddr
;

506 
sö
->
sö_addr
.
s_addr
 = 
öaddr
;

510  
NGX_OK
;

511 
	}
}

514 
ngx_öt_t


515 
	$ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

517 
u_ch¨
 *
p
;

519 
p
 = 
u
->
uæ
.
d©a
;

521 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "unix:", 5) == 0) {

522  
	`ngx_∑r£_unix_domaö_uæ
(
poﬁ
, 
u
);

525 i‡(
p
[0] == '[') {

526  
	`ngx_∑r£_öë6_uæ
(
poﬁ
, 
u
);

529  
	`ngx_∑r£_öë_uæ
(
poﬁ
, 
u
);

530 
	}
}

533 
ngx_öt_t


534 
	$ngx_∑r£_unix_domaö_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

536 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

537 
u_ch¨
 *
∑th
, *
uri
, *
œ°
;

538 
size_t
 
Àn
;

539 
sockaddr_un
 *
ßun
;

541 
Àn
 = 
u
->
uæ
.len;

542 
∑th
 = 
u
->
uæ
.
d©a
;

544 
∑th
 += 5;

545 
Àn
 -= 5;

547 i‡(
u
->
uri_∑π
) {

549 
œ°
 = 
∑th
 + 
Àn
;

550 
uri
 = 
	`ngx_°æchr
(
∑th
, 
œ°
, ':');

552 i‡(
uri
) {

553 
Àn
 = 
uri
 - 
∑th
;

554 
uri
++;

555 
u
->
uri
.
Àn
 = 
œ°
 - uri;

556 
u
->
uri
.
d©a
 = uri;

560 i‡(
Àn
 == 0) {

561 
u
->
îr
 = "noÖath inÅhe unix domain socket";

562  
NGX_ERROR
;

565 
u
->
ho°
.
Àn
 =Üen++;

566 
u
->
ho°
.
d©a
 = 
∑th
;

568 i‡(
Àn
 > (
ßun
->
sun_∑th
)) {

569 
u
->
îr
 = "tooÜongÖath inÅhe unix domain socket";

570  
NGX_ERROR
;

573 
u
->
sockÀn
 = (
sockaddr_un
);

574 
ßun
 = (
sockaddr_un
 *Ë&
u
->
sockaddr
;

575 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

576 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

578 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

579 i‡(
u
->
addrs
 =
NULL
) {

580  
NGX_ERROR
;

583 
ßun
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_un
));

584 i‡(
ßun
 =
NULL
) {

585  
NGX_ERROR
;

588 
u
->
Ámûy
 = 
AF_UNIX
;

589 
u
->
«ddrs
 = 1;

591 
ßun
->
sun_Ámûy
 = 
AF_UNIX
;

592 (Ë
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ßun
->
sun_∑th
, 
∑th
, 
Àn
);

594 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
ßun
;

595 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_un
);

596 
u
->
addrs
[0].
«me
.
Àn
 =Üen + 4;

597 
u
->
addrs
[0].
«me
.
d©a
 = u->
uæ
.data;

599  
NGX_OK
;

603 
u
->
îr
 = "the unix domain socketsáreÇot supported onÅhisÖlatform";

605  
NGX_ERROR
;

608 
	}
}

611 
ngx_öt_t


612 
	$ngx_∑r£_öë_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

614 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
, *
¨gs
;

615 
size_t
 
Àn
;

616 
ngx_öt_t
 
n
;

617 
sockaddr_ö
 *
sö
;

618 #i‡(
NGX_HAVE_INET6
)

619 
sockaddr_ö6
 *
sö6
;

622 
u
->
sockÀn
 = (
sockaddr_ö
);

623 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

624 
sö
->
sö_Ámûy
 = 
AF_INET
;

626 
u
->
Ámûy
 = 
AF_INET
;

628 
ho°
 = 
u
->
uæ
.
d©a
;

630 
œ°
 = 
ho°
 + 
u
->
uæ
.
Àn
;

632 
p‹t
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ':');

634 
uri
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '/');

636 
¨gs
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, '?');

638 i‡(
¨gs
) {

639 i‡(
uri
 =
NULL
 || 
¨gs
 < uri) {

640 
uri
 = 
¨gs
;

644 i‡(
uri
) {

645 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

646 
u
->
îr
 = "invalid host";

647  
NGX_ERROR
;

650 
u
->
uri
.
Àn
 = 
œ°
 - uri;

651 
u
->
uri
.
d©a
 = uri;

653 
œ°
 = 
uri
;

655 i‡(
uri
 < 
p‹t
) {

656 
p‹t
 = 
NULL
;

660 i‡(
p‹t
) {

661 
p‹t
++;

663 
Àn
 = 
œ°
 - 
p‹t
;

665 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

667 i‡(
n
 < 1 ||Ç > 65535) {

668 
u
->
îr
 = "invalidÖort";

669  
NGX_ERROR
;

672 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

673 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

675 
u
->
p‹t_ãxt
.
Àn
 =Üen;

676 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

678 
œ°
 = 
p‹t
 - 1;

681 i‡(
uri
 =
NULL
) {

683 i‡(
u
->
li°í
) {

687 
n
 = 
	`ngx_©oi
(
ho°
, 
œ°
 - host);

689 i‡(
n
 !
NGX_ERROR
) {

691 i‡(
n
 < 1 ||Ç > 65535) {

692 
u
->
îr
 = "invalidÖort";

693  
NGX_ERROR
;

696 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

697 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

699 
u
->
p‹t_ãxt
.
Àn
 = 
œ°
 - 
ho°
;

700 
u
->
p‹t_ãxt
.
d©a
 = 
ho°
;

702 
u
->
wûdˇrd
 = 1;

704  
NGX_OK
;

709 
u
->
no_p‹t
 = 1;

710 
u
->
p‹t
 = u->
deÁu…_p‹t
;

711 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

714 
Àn
 = 
œ°
 - 
ho°
;

716 i‡(
Àn
 == 0) {

717 
u
->
îr
 = "no host";

718  
NGX_ERROR
;

721 
u
->
ho°
.
Àn
 =Üen;

722 
u
->
ho°
.
d©a
 = host;

724 i‡(
u
->
li°í
 && 
Àn
 =1 && *
ho°
 == '*') {

725 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

726 
u
->
wûdˇrd
 = 1;

727  
NGX_OK
;

730 
sö
->
sö_addr
.
s_addr
 = 
	`ngx_öë_addr
(
ho°
, 
Àn
);

732 i‡(
sö
->
sö_addr
.
s_addr
 !
INADDR_NONE
) {

734 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

735 
u
->
wûdˇrd
 = 1;

738 
u
->
«ddrs
 = 1;

740 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

741 i‡(
u
->
addrs
 =
NULL
) {

742  
NGX_ERROR
;

745 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

746 i‡(
sö
 =
NULL
) {

747  
NGX_ERROR
;

750 
	`ngx_mem˝y
(
sö
, 
u
->
sockaddr
, (
sockaddr_ö
));

752 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

753 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

755 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

756 i‡(
p
 =
NULL
) {

757  
NGX_ERROR
;

760 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

761 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

762 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

764  
NGX_OK
;

767 i‡(
u
->
no_ªsﬁve
) {

768  
NGX_OK
;

771 i‡(
	`ngx_öë_ªsﬁve_ho°
(
poﬁ
, 
u
Ë!
NGX_OK
) {

772  
NGX_ERROR
;

775 
u
->
Ámûy
 = u->
addrs
[0].
sockaddr
->
ß_Ámûy
;

776 
u
->
sockÀn
 = u->
addrs
[0].socklen;

777 
	`ngx_mem˝y
(
u
->
sockaddr
, u->
addrs
[0].sockaddr, u->addrs[0].
sockÀn
);

779 
u
->
Ámûy
) {

781 #i‡(
NGX_HAVE_INET6
)

782 
AF_INET6
:

783 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

785 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

786 
u
->
wûdˇrd
 = 1;

793 
sö
 = (
sockaddr_ö
 *Ë&
u
->
sockaddr
;

795 i‡(
sö
->
sö_addr
.
s_addr
 =
INADDR_ANY
) {

796 
u
->
wûdˇrd
 = 1;

802  
NGX_OK
;

803 
	}
}

806 
ngx_öt_t


807 
	$ngx_∑r£_öë6_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

809 #i‡(
NGX_HAVE_INET6
)

810 
u_ch¨
 *
p
, *
ho°
, *
p‹t
, *
œ°
, *
uri
;

811 
size_t
 
Àn
;

812 
ngx_öt_t
 
n
;

813 
sockaddr_ö6
 *
sö6
;

815 
u
->
sockÀn
 = (
sockaddr_ö6
);

816 
sö6
 = (
sockaddr_ö6
 *Ë&
u
->
sockaddr
;

817 
sö6
->
sö6_Ámûy
 = 
AF_INET6
;

819 
ho°
 = 
u
->
uæ
.
d©a
 + 1;

821 
œ°
 = 
u
->
uæ
.
d©a
 + u->uæ.
Àn
;

823 
p
 = 
	`ngx_°æchr
(
ho°
, 
œ°
, ']');

825 i‡(
p
 =
NULL
) {

826 
u
->
îr
 = "invalid host";

827  
NGX_ERROR
;

830 i‡(
œ°
 - 
p
) {

832 
p‹t
 = 
p
 + 1;

834 
uri
 = 
	`ngx_°æchr
(
p‹t
, 
œ°
, '/');

836 i‡(
uri
) {

837 i‡(
u
->
li°í
 || !u->
uri_∑π
) {

838 
u
->
îr
 = "invalid host";

839  
NGX_ERROR
;

842 
u
->
uri
.
Àn
 = 
œ°
 - uri;

843 
u
->
uri
.
d©a
 = uri;

845 
œ°
 = 
uri
;

848 i‡(*
p‹t
 == ':') {

849 
p‹t
++;

851 
Àn
 = 
œ°
 - 
p‹t
;

853 
n
 = 
	`ngx_©oi
(
p‹t
, 
Àn
);

855 i‡(
n
 < 1 ||Ç > 65535) {

856 
u
->
îr
 = "invalidÖort";

857  
NGX_ERROR
;

860 
u
->
p‹t
 = (
ö_p‹t_t
Ë
n
;

861 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
n
);

863 
u
->
p‹t_ãxt
.
Àn
 =Üen;

864 
u
->
p‹t_ãxt
.
d©a
 = 
p‹t
;

867 
u
->
no_p‹t
 = 1;

868 
u
->
p‹t
 = u->
deÁu…_p‹t
;

869 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
(
u
->
deÁu…_p‹t
);

873 
Àn
 = 
p
 - 
ho°
;

875 i‡(
Àn
 == 0) {

876 
u
->
îr
 = "no host";

877  
NGX_ERROR
;

880 
u
->
ho°
.
Àn
 =Üen + 2;

881 
u
->
ho°
.
d©a
 = host - 1;

883 i‡(
	`ngx_öë6_addr
(
ho°
, 
Àn
, 
sö6
->
sö6_addr
.
s6_addr
Ë!
NGX_OK
) {

884 
u
->
îr
 = "invalid IPv6áddress";

885  
NGX_ERROR
;

888 i‡(
	`IN6_IS_ADDR_UNSPECIFIED
(&
sö6
->
sö6_addr
)) {

889 
u
->
wûdˇrd
 = 1;

892 
u
->
Ámûy
 = 
AF_INET6
;

893 
u
->
«ddrs
 = 1;

895 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

896 i‡(
u
->
addrs
 =
NULL
) {

897  
NGX_ERROR
;

900 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö6
));

901 i‡(
sö6
 =
NULL
) {

902  
NGX_ERROR
;

905 
	`ngx_mem˝y
(
sö6
, 
u
->
sockaddr
, (
sockaddr_ö6
));

907 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö6
;

908 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö6
);

910 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

911 i‡(
p
 =
NULL
) {

912  
NGX_ERROR
;

915 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

916 &
u
->
ho°
, u->
p‹t
Ë- 
p
;

917 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

919  
NGX_OK
;

923 
u
->
îr
 = "the INET6 socketsáreÇot supported onÅhisÖlatform";

925  
NGX_ERROR
;

928 
	}
}

931 #i‡(
NGX_HAVE_GETADDRINFO
 && 
NGX_HAVE_INET6
)

933 
ngx_öt_t


934 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

936 
u_ch¨
 *
p
, *
ho°
;

937 
size_t
 
Àn
;

938 
ö_p‹t_t
 
p‹t
;

939 
ngx_uöt_t
 
i
;

940 
addröfo
 
höts
, *
ªs
, *
Ω
;

941 
sockaddr_ö
 *
sö
;

942 
sockaddr_ö6
 *
sö6
;

944 
p‹t
 = 
	`ht⁄s
(
u
->port);

946 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

947 i‡(
ho°
 =
NULL
) {

948  
NGX_ERROR
;

951 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

953 
	`ngx_memzîo
(&
höts
, (
addröfo
));

954 
höts
.
ai_Ámûy
 = 
AF_UNSPEC
;

955 
höts
.
ai_sockty≥
 = 
SOCK_STREAM
;

957 i‡(
	`gëaddröfo
((*Ë
ho°
, 
NULL
, &
höts
, &
ªs
) != 0) {

958 
u
->
îr
 = "hostÇot found";

959 
	`ngx_‰ì
(
ho°
);

960  
NGX_ERROR
;

963 
	`ngx_‰ì
(
ho°
);

965 
i
 = 0, 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

967 
Ω
->
ai_Ámûy
) {

969 
AF_INET
:

970 
AF_INET6
:

977 
i
++;

980 i‡(
i
 == 0) {

981 
u
->
îr
 = "hostÇot found";

982 
Áûed
;

987 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

988 i‡(
u
->
addrs
 =
NULL
) {

989 
Áûed
;

992 
u
->
«ddrs
 = 
i
;

994 
i
 = 0;

998 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1000 i‡(
Ω
->
ai_Ámûy
 !
AF_INET
) {

1004 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1005 i‡(
sö
 =
NULL
) {

1006 
Áûed
;

1009 
	`ngx_mem˝y
(
sö
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1011 
sö
->
sö_p‹t
 = 
p‹t
;

1013 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1014 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1016 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1018 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1019 i‡(
p
 =
NULL
) {

1020 
Áûed
;

1023 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
p
,Üen, 1);

1025 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1026 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1028 
i
++;

1031 
Ω
 = 
ªs
;Ñ∞!
NULL
;Ñ∞Ω->
ai_√xt
) {

1033 i‡(
Ω
->
ai_Ámûy
 !
AF_INET6
) {

1037 
sö6
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
Ω
->
ai_addæí
);

1038 i‡(
sö6
 =
NULL
) {

1039 
Áûed
;

1042 
	`ngx_mem˝y
(
sö6
, 
Ω
->
ai_addr
,Ñp->
ai_addæí
);

1044 
sö6
->
sö6_p‹t
 = 
p‹t
;

1046 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö6
;

1047 
u
->
addrs
[
i
].
sockÀn
 = 
Ω
->
ai_addæí
;

1049 
Àn
 = 
NGX_INET6_ADDRSTRLEN
 + ("[]:65535") - 1;

1051 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1052 i‡(
p
 =
NULL
) {

1053 
Áûed
;

1056 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö6
, 
p
,Üen, 1);

1058 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1059 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1061 
i
++;

1064 
	`‰ìaddröfo
(
ªs
);

1065  
NGX_OK
;

1067 
Áûed
:

1069 
	`‰ìaddröfo
(
ªs
);

1070  
NGX_ERROR
;

1071 
	}
}

1075 
ngx_öt_t


1076 
	$ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
)

1078 
u_ch¨
 *
p
, *
ho°
;

1079 
size_t
 
Àn
;

1080 
ö_p‹t_t
 
p‹t
;

1081 
ö_addr_t
 
ö_addr
;

1082 
ngx_uöt_t
 
i
;

1083 
ho°ít
 *
h
;

1084 
sockaddr_ö
 *
sö
;

1088 
p‹t
 = 
	`ht⁄s
(
u
->port);

1090 
ö_addr
 = 
	`ngx_öë_addr
(
u
->
ho°
.
d©a
, u->ho°.
Àn
);

1092 i‡(
ö_addr
 =
INADDR_NONE
) {

1093 
ho°
 = 
	`ngx_Æloc
(
u
->ho°.
Àn
 + 1, 
poﬁ
->
log
);

1094 i‡(
ho°
 =
NULL
) {

1095  
NGX_ERROR
;

1098 (Ë
	`ngx_˝y°∫
(
ho°
, 
u
->ho°.
d©a
, u->ho°.
Àn
 + 1);

1100 
h
 = 
	`gëho°by«me
((*Ë
ho°
);

1102 
	`ngx_‰ì
(
ho°
);

1104 i‡(
h
 =
NULL
 || h->
h_addr_li°
[0] == NULL) {

1105 
u
->
îr
 = "hostÇot found";

1106  
NGX_ERROR
;

1109 
i
 = 0; 
h
->
h_addr_li°
[i] !
NULL
; i++) { }

1113 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, 
i
 * (
ngx_addr_t
));

1114 i‡(
u
->
addrs
 =
NULL
) {

1115  
NGX_ERROR
;

1118 
u
->
«ddrs
 = 
i
;

1120 
i
 = 0; i < 
u
->
«ddrs
; i++) {

1122 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1123 i‡(
sö
 =
NULL
) {

1124  
NGX_ERROR
;

1127 
sö
->
sö_Ámûy
 = 
AF_INET
;

1128 
sö
->
sö_p‹t
 = 
p‹t
;

1129 
sö
->
sö_addr
.
s_addr
 = *(
ö_addr_t
 *Ë(
h
->
h_addr_li°
[
i
]);

1131 
u
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

1132 
u
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

1134 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

1136 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

1137 i‡(
p
 =
NULL
) {

1138  
NGX_ERROR
;

1141 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
p
,Üen, 1);

1143 
u
->
addrs
[
i
].
«me
.
Àn
 =Üen;

1144 
u
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

1151 
u
->
addrs
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_addr_t
));

1152 i‡(
u
->
addrs
 =
NULL
) {

1153  
NGX_ERROR
;

1156 
sö
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
sockaddr_ö
));

1157 i‡(
sö
 =
NULL
) {

1158  
NGX_ERROR
;

1161 
u
->
«ddrs
 = 1;

1163 
sö
->
sö_Ámûy
 = 
AF_INET
;

1164 
sö
->
sö_p‹t
 = 
p‹t
;

1165 
sö
->
sö_addr
.
s_addr
 = 
ö_addr
;

1167 
u
->
addrs
[0].
sockaddr
 = (sockadd∏*Ë
sö
;

1168 
u
->
addrs
[0].
sockÀn
 = (
sockaddr_ö
);

1170 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
u
->
ho°
.
Àn
 + (":65535") - 1);

1171 i‡(
p
 =
NULL
) {

1172  
NGX_ERROR
;

1175 
u
->
addrs
[0].
«me
.
Àn
 = 
	`ngx_•rötf
(
p
, "%V:%d",

1176 &
u
->
ho°
, 
	`¡ohs
(
p‹t
)Ë- 
p
;

1177 
u
->
addrs
[0].
«me
.
d©a
 = 
p
;

1180  
NGX_OK
;

1181 
	}
}

	@src/core/ngx_inet.h

8 #i‚de‡
_NGX_INET_H_INCLUDED_


9 
	#_NGX_INET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

24 
	#NGX_INET_ADDRSTRLEN
 (("255.255.255.255"Ë- 1)

	)

25 
	#NGX_INET6_ADDRSTRLEN
 \

26 (("ffff:ffff:ffff:ffff:ffff:ffff:255.255.255.255"Ë- 1)

	)

27 
	#NGX_UNIX_ADDRSTRLEN
 \

28 ((
sockaddr_un
Ë- 
	`off£tof
(sockaddr_un, 
sun_∑th
))

	)

30 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

31 
	#NGX_SOCKADDR_STRLEN
 (("unix:"Ë- 1 + 
NGX_UNIX_ADDRSTRLEN
)

	)

33 
	#NGX_SOCKADDR_STRLEN
 (
NGX_INET6_ADDRSTRLEN
 + ("[]:65535"Ë- 1)

	)

36 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

37 
	#NGX_SOCKADDRLEN
 (
sockaddr_un
)

	)

39 
	#NGX_SOCKADDRLEN
 512

	)

44 
ö_addr_t
 
	maddr
;

45 
ö_addr_t
 
	mmask
;

46 } 
	tngx_ö_cidr_t
;

49 #i‡(
NGX_HAVE_INET6
)

52 
ö6_addr
 
	maddr
;

53 
ö6_addr
 
	mmask
;

54 } 
	tngx_ö6_cidr_t
;

60 
ngx_uöt_t
 
	mÁmûy
;

62 
ngx_ö_cidr_t
 
	mö
;

63 #i‡(
NGX_HAVE_INET6
)

64 
ngx_ö6_cidr_t
 
	mö6
;

66 } 
	mu
;

67 } 
	tngx_cidr_t
;

71 
sockaddr
 *
	msockaddr
;

72 
sockÀn_t
 
	msockÀn
;

73 
ngx_°r_t
 
	m«me
;

74 } 
	tngx_addr_t
;

78 
ngx_°r_t
 
	muæ
;

79 
ngx_°r_t
 
	mho°
;

80 
ngx_°r_t
 
	mp‹t_ãxt
;

81 
ngx_°r_t
 
	muri
;

83 
ö_p‹t_t
 
	mp‹t
;

84 
ö_p‹t_t
 
	mdeÁu…_p‹t
;

85 
	mÁmûy
;

87 
	mli°í
:1;

88 
	muri_∑π
:1;

89 
	mno_ªsﬁve
:1;

90 
	m⁄e_addr
:1;

92 
	mno_p‹t
:1;

93 
	mwûdˇrd
:1;

95 
sockÀn_t
 
	msockÀn
;

96 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

98 
ngx_addr_t
 *
	maddrs
;

99 
ngx_uöt_t
 
	m«ddrs
;

101 *
	mîr
;

102 } 
	tngx_uæ_t
;

105 
ö_addr_t
 
ngx_öë_addr
(
u_ch¨
 *
ãxt
, 
size_t
 
Àn
);

106 #i‡(
NGX_HAVE_INET6
)

107 
ngx_öt_t
 
ngx_öë6_addr
(
u_ch¨
 *
p
, 
size_t
 
Àn
, u_ch¨ *
addr
);

108 
size_t
 
ngx_öë6_¡›
(
u_ch¨
 *
p
, u_ch¨ *
ãxt
, size_à
Àn
);

110 
size_t
 
ngx_sock_¡›
(
sockaddr
 *
ß
, 
u_ch¨
 *
ãxt
, size_à
Àn
,

111 
ngx_uöt_t
 
p‹t
);

112 
size_t
 
ngx_öë_¡›
(
Ámûy
, *
addr
, 
u_ch¨
 *
ãxt
, size_à
Àn
);

113 
ngx_öt_t
 
ngx_±ocidr
(
ngx_°r_t
 *
ãxt
, 
ngx_cidr_t
 *
cidr
);

114 
ngx_öt_t
 
ngx_∑r£_addr
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
ãxt
,

115 
size_t
 
Àn
);

116 
ngx_öt_t
 
ngx_∑r£_uæ
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

117 
ngx_öt_t
 
ngx_öë_ªsﬁve_ho°
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uæ_t
 *
u
);

	@src/core/ngx_list.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_li°_t
 *

13 
	$ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

15 
ngx_li°_t
 *
li°
;

17 
li°
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_li°_t
));

18 i‡(
li°
 =
NULL
) {

19  
NULL
;

22 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

23 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

24  
NULL
;

27 
li°
->
∑π
.
√…s
 = 0;

28 
li°
->
∑π
.
√xt
 = 
NULL
;

29 
li°
->
œ°
 = &li°->
∑π
;

30 
li°
->
size
 = size;

31 
li°
->
«Œoc
 = 
n
;

32 
li°
->
poﬁ
 =Öool;

34  
li°
;

35 
	}
}

39 
	$ngx_li°_push
(
ngx_li°_t
 *
l
)

41 *
ñt
;

42 
ngx_li°_∑π_t
 *
œ°
;

44 
œ°
 = 
l
->last;

46 i‡(
œ°
->
√…s
 =
l
->
«Œoc
) {

50 
œ°
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
, (
ngx_li°_∑π_t
));

51 i‡(
œ°
 =
NULL
) {

52  
NULL
;

55 
œ°
->
ñts
 = 
	`ngx_∑Œoc
(
l
->
poﬁ
,Ü->
«Œoc
 *Ü->
size
);

56 i‡(
œ°
->
ñts
 =
NULL
) {

57  
NULL
;

60 
œ°
->
√…s
 = 0;

61 
œ°
->
√xt
 = 
NULL
;

63 
l
->
œ°
->
√xt
 =Üast;

64 
l
->
œ°
 =Üast;

67 
ñt
 = (*Ë
œ°
->
ñts
 + 
l
->
size
 *Üa°->
√…s
;

68 
œ°
->
√…s
++;

70  
ñt
;

71 
	}
}

	@src/core/ngx_list.h

8 #i‚de‡
_NGX_LIST_H_INCLUDED_


9 
	#_NGX_LIST_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_li°_∑π_s
 
	tngx_li°_∑π_t
;

18 
	sngx_li°_∑π_s
 {

19 *
	mñts
;

20 
ngx_uöt_t
 
	m√…s
;

21 
ngx_li°_∑π_t
 *
	m√xt
;

26 
ngx_li°_∑π_t
 *
	mœ°
;

27 
ngx_li°_∑π_t
 
	m∑π
;

28 
size_t
 
	msize
;

29 
ngx_uöt_t
 
	m«Œoc
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 } 
	tngx_li°_t
;

34 
ngx_li°_t
 *
ngx_li°_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
);

36 
ngx_ölöe
 
ngx_öt_t


37 
	$ngx_li°_öô
(
ngx_li°_t
 *
li°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
n
, 
size_t
 
size
)

39 
li°
->
∑π
.
ñts
 = 
	`ngx_∑Œoc
(
poﬁ
, 
n
 * 
size
);

40 i‡(
li°
->
∑π
.
ñts
 =
NULL
) {

41  
NGX_ERROR
;

44 
li°
->
∑π
.
√…s
 = 0;

45 
li°
->
∑π
.
√xt
 = 
NULL
;

46 
li°
->
œ°
 = &li°->
∑π
;

47 
li°
->
size
 = size;

48 
li°
->
«Œoc
 = 
n
;

49 
li°
->
poﬁ
 =Öool;

51  
NGX_OK
;

52 
	}
}

80 *
ngx_li°_push
(
ngx_li°_t
 *
li°
);

	@src/core/ngx_log.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_îæog_comm™ds
[] = {

17 {
ngx_°rög
("error_log"),

18 
NGX_MAIN_CONF
|
NGX_CONF_1MORE
,

19 
ngx_îr‹_log
,

22 
NULL
},

24 
ngx_nuŒ_comm™d


28 
ngx_c‹e_moduÀ_t
 
	gngx_îæog_moduÀ_˘x
 = {

29 
ngx_°rög
("errlog"),

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_îæog_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_îæog_moduÀ_˘x
,

38 
ngx_îæog_comm™ds
,

39 
NGX_CORE_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_log_t
 
	gngx_log
;

52 
ngx_›í_fûe_t
 
	gngx_log_fûe
;

53 
ngx_uöt_t
 
	gngx_u£_°dîr
 = 1;

56 
ngx_°r_t
 
	gîr_Àvñs
[] = {

57 
ngx_nuŒ_°rög
,

58 
ngx_°rög
("emerg"),

59 
ngx_°rög
("alert"),

60 
ngx_°rög
("crit"),

61 
ngx_°rög
("error"),

62 
ngx_°rög
("warn"),

63 
ngx_°rög
("notice"),

64 
ngx_°rög
("info"),

65 
ngx_°rög
("debug")

68 c⁄° *
	gdebug_Àvñs
[] = {

74 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

77 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

78 c⁄° *
fmt
, ...)

83 
	$ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

84 c⁄° *
fmt
, 
va_li°
 
¨gs
)

88 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

89 
va_li°
 
¨gs
;

91 
u_ch¨
 *
p
, *
œ°
, *
msg
;

92 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

94 i‡(
log
->
fûe
->
fd
 =
NGX_INVALID_FILE
) {

98 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

100 
	`ngx_mem˝y
(
îr°r
, 
ngx_ˇched_îr_log_time
.
d©a
,

101 
ngx_ˇched_îr_log_time
.
Àn
);

103 
p
 = 
îr°r
 + 
ngx_ˇched_îr_log_time
.
Àn
;

105 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, " [%V] ", &
îr_Àvñs
[
Àvñ
]);

108 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "%P#" 
NGX_TID_T_FMT
 ": ",

109 
ngx_log_pid
, 
ngx_log_tid
);

111 i‡(
log
->
c⁄√˘i⁄
) {

112 
p
 = 
	`ngx_¶¥ötf
’, 
œ°
, "*%uA ", 
log
->
c⁄√˘i⁄
);

115 
msg
 = 
p
;

117 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

119 
	`va_°¨t
(
¨gs
, 
fmt
);

120 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

121 
	`va_íd
(
¨gs
);

125 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

129 i‡(
îr
) {

130 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

133 i‡(
Àvñ
 !
NGX_LOG_DEBUG
 && 
log
->
h™dÀr
) {

134 
p
 = 
log
->
	`h™dÀr
÷og,Ö, 
œ°
 -Ö);

137 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

138 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

141 
	`ngx_löe„ed
(
p
);

143 (Ë
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
îr°r
, 
p
 -Érrstr);

145 i‡(!
ngx_u£_°dîr


146 || 
Àvñ
 > 
NGX_LOG_WARN


147 || 
log
->
fûe
->
fd
 =
ngx_°dîr
)

152 
msg
 -(7 + 
îr_Àvñs
[
Àvñ
].
Àn
 + 3);

154 (Ë
	`ngx_•rötf
(
msg
, "ngöx: [%V] ", &
îr_Àvñs
[
Àvñ
]);

156 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
msg
, 
p
 - msg);

157 
	}
}

160 #i‡!(
NGX_HAVE_VARIADIC_MACROS
)

162 
ngx_cde˛


163 
	$ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

164 c⁄° *
fmt
, ...)

166 
va_li°
 
¨gs
;

168 i‡(
log
->
log_Àvñ
 >
Àvñ
) {

169 
	`va_°¨t
(
¨gs
, 
fmt
);

170 
	`ngx_log_îr‹_c‹e
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨gs
);

171 
	`va_íd
(
¨gs
);

173 
	}
}

176 
ngx_cde˛


177 
	$ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

179 
va_li°
 
¨gs
;

181 
	`va_°¨t
(
¨gs
, 
fmt
);

182 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
îr
, 
fmt
, 
¨gs
);

183 
	`va_íd
(
¨gs
);

184 
	}
}

189 
ngx_cde˛


190 
	$ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

192 
u_ch¨
 *
p
;

193 
va_li°
 
¨gs
;

194 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

196 
	`va_°¨t
(
¨gs
, 
fmt
);

197 
p
 = 
	`ngx_v¢¥ötf
(
îr°r
, ”º°rË- 1, 
fmt
, 
¨gs
);

198 
	`va_íd
(
¨gs
);

200 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

201 "%*s", 
p
 - 
îr°r
,Érrstr);

202 
	}
}

205 
ngx_cde˛


206 
	$ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...)

208 
u_ch¨
 *
p
, *
œ°
;

209 
va_li°
 
¨gs
;

210 
u_ch¨
 
îr°r
[
NGX_MAX_ERROR_STR
];

212 
œ°
 = 
îr°r
 + 
NGX_MAX_ERROR_STR
;

213 
p
 = 
îr°r
 + 7;

215 
	`ngx_mem˝y
(
îr°r
, "nginx: ", 7);

217 
	`va_°¨t
(
¨gs
, 
fmt
);

218 
p
 = 
	`ngx_v¶¥ötf
’, 
œ°
, 
fmt
, 
¨gs
);

219 
	`va_íd
(
¨gs
);

221 i‡(
îr
) {

222 
p
 = 
	`ngx_log_î∫o
’, 
œ°
, 
îr
);

225 i‡(
p
 > 
œ°
 - 
NGX_LINEFEED_SIZE
) {

226 
p
 = 
œ°
 - 
NGX_LINEFEED_SIZE
;

229 
	`ngx_löe„ed
(
p
);

231 (Ë
	`ngx_wrôe_c⁄sﬁe
(
ngx_°dîr
, 
îr°r
, 
p
 -Érrstr);

232 
	}
}

235 
u_ch¨
 *

236 
	$ngx_log_î∫o
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
)

238 i‡(
buf
 > 
œ°
 - 50) {

242 
buf
 = 
œ°
 - 50;

243 *
buf
++ = '.';

244 *
buf
++ = '.';

245 *
buf
++ = '.';

248 #i‡(
NGX_WIN32
)

249 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, ((Ë
îr
 < 0x80000000)

250 ? " (%d: " : " (%Xd: ", 
îr
);

252 
buf
 = 
	`ngx_¶¥ötf
(buf, 
œ°
, " (%d: ", 
îr
);

255 
buf
 = 
	`ngx_°ªº‹
(
îr
, buf, 
œ°
 - buf);

257 i‡(
buf
 < 
œ°
) {

258 *
buf
++ = ')';

261  
buf
;

262 
	}
}

265 
ngx_log_t
 *

266 
	$ngx_log_öô
(
u_ch¨
 *
¥efix
)

268 
u_ch¨
 *
p
, *
«me
;

269 
size_t
 
∆í
, 
∂í
;

271 
ngx_log
.
fûe
 = &
ngx_log_fûe
;

272 
ngx_log
.
log_Àvñ
 = 
NGX_LOG_NOTICE
;

274 
«me
 = (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
;

281 
∆í
 = 
	`ngx_°æí
(
«me
);

283 i‡(
∆í
 == 0) {

284 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

285  &
ngx_log
;

288 
p
 = 
NULL
;

290 #i‡(
NGX_WIN32
)

291 i‡(
«me
[1] != ':') {

293 i‡(
«me
[0] != '/') {

296 i‡(
¥efix
) {

297 
∂í
 = 
	`ngx_°æí
(
¥efix
);

300 #ifde‡
NGX_PREFIX


301 
¥efix
 = (
u_ch¨
 *Ë
NGX_PREFIX
;

302 
∂í
 = 
	`ngx_°æí
(
¥efix
);

304 
∂í
 = 0;

308 i‡(
∂í
) {

309 
«me
 = 
	`mÆloc
(
∂í
 + 
∆í
 + 2);

310 i‡(
«me
 =
NULL
) {

311  
NULL
;

314 
p
 = 
	`ngx_˝ymem
(
«me
, 
¥efix
, 
∂í
);

316 i‡(!
	`ngx_∑th_£∑øt‹
(*(
p
 - 1))) {

317 *
p
++ = '/';

320 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
NGX_ERROR_LOG_PATH
, 
∆í
 + 1);

322 
p
 = 
«me
;

326 
ngx_log_fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_APPEND
,

327 
NGX_FILE_CREATE_OR_OPEN
,

328 
NGX_FILE_DEFAULT_ACCESS
);

330 i‡(
ngx_log_fûe
.
fd
 =
NGX_INVALID_FILE
) {

331 
	`ngx_log_°dîr
(
ngx_î∫o
,

333 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

334 #i‡(
NGX_WIN32
)

335 
	`ngx_evít_log
(
ngx_î∫o
,

337 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

340 
ngx_log_fûe
.
fd
 = 
ngx_°dîr
;

343 i‡(
p
) {

344 
	`ngx_‰ì
(
p
);

347  &
ngx_log
;

348 
	}
}

351 
ngx_log_t
 *

352 
	$ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
)

354 
ngx_log_t
 *
log
;

356 
log
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_log_t
));

357 i‡(
log
 =
NULL
) {

358  
NULL
;

361 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cy˛e
, 
«me
);

362 i‡(
log
->
fûe
 =
NULL
) {

363  
NULL
;

366  
log
;

367 
	}
}

371 
	$ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
)

373 
ngx_uöt_t
 
i
, 
n
, 
d
, 
found
;

374 
ngx_°r_t
 *
vÆue
;

376 
vÆue
 = 
cf
->
¨gs
->
ñts
;

378 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

379 
found
 = 0;

381 
n
 = 1;Ç <
NGX_LOG_DEBUG
;Ç++) {

382 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
îr_Àvñs
[
n
].data) == 0) {

384 i‡(
log
->
log_Àvñ
 != 0) {

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

387 &
vÆue
[
i
]);

388  
NGX_CONF_ERROR
;

391 
log
->
log_Àvñ
 = 
n
;

392 
found
 = 1;

397 
n
 = 0, 
d
 = 
NGX_LOG_DEBUG_FIRST
; d <
NGX_LOG_DEBUG_LAST
; d <<= 1) {

398 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
debug_Àvñs
[
n
++]) == 0) {

399 i‡(
log
->
log_Àvñ
 & ~
NGX_LOG_DEBUG_ALL
) {

400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

402 &
vÆue
[
i
]);

403  
NGX_CONF_ERROR
;

406 
log
->
log_Àvñ
 |
d
;

407 
found
 = 1;

413 i‡(!
found
) {

414 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

415 "övÆidÜogÜevñ \"%V\"", &
vÆue
[
i
]);

416  
NGX_CONF_ERROR
;

420 i‡(
log
->
log_Àvñ
 =
NGX_LOG_DEBUG
) {

421 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_ALL
;

424  
NGX_CONF_OK
;

425 
	}
}

429 
	$ngx_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

431 
ngx_°r_t
 *
vÆue
, 
«me
;

433 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
) {

437 
vÆue
 = 
cf
->
¨gs
->
ñts
;

439 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

440 
	`ngx_°r_nuŒ
(&
«me
);

443 
«me
 = 
vÆue
[1];

446 
cf
->
cy˛e
->
√w_log
.
fûe
 = 
	`ngx_c⁄f_›í_fûe
(cf->cy˛e, &
«me
);

447 i‡(
cf
->
cy˛e
->
√w_log
.
fûe
 =
NULL
) {

448  
NULL
;

451 i‡(
cf
->
¨gs
->
√…s
 == 2) {

452 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 
NGX_LOG_ERR
;

453  
NGX_CONF_OK
;

456 
cf
->
cy˛e
->
√w_log
.
log_Àvñ
 = 0;

458  
	`ngx_log_£t_Àvñs
(
cf
, &cf->
cy˛e
->
√w_log
);

459 
	}
}

	@src/core/ngx_log.h

8 #i‚de‡
_NGX_LOG_H_INCLUDED_


9 
	#_NGX_LOG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_LOG_STDERR
 0

	)

17 
	#NGX_LOG_EMERG
 1

	)

18 
	#NGX_LOG_ALERT
 2

	)

19 
	#NGX_LOG_CRIT
 3

	)

20 
	#NGX_LOG_ERR
 4

	)

21 
	#NGX_LOG_WARN
 5

	)

22 
	#NGX_LOG_NOTICE
 6

	)

23 
	#NGX_LOG_INFO
 7

	)

24 
	#NGX_LOG_DEBUG
 8

	)

26 
	#NGX_LOG_DEBUG_CORE
 0x010

	)

27 
	#NGX_LOG_DEBUG_ALLOC
 0x020

	)

28 
	#NGX_LOG_DEBUG_MUTEX
 0x040

	)

29 
	#NGX_LOG_DEBUG_EVENT
 0x080

	)

30 
	#NGX_LOG_DEBUG_HTTP
 0x100

	)

31 
	#NGX_LOG_DEBUG_MAIL
 0x200

	)

32 
	#NGX_LOG_DEBUG_MYSQL
 0x400

	)

39 
	#NGX_LOG_DEBUG_FIRST
 
NGX_LOG_DEBUG_CORE


	)

40 
	#NGX_LOG_DEBUG_LAST
 
NGX_LOG_DEBUG_MYSQL


	)

41 
	#NGX_LOG_DEBUG_CONNECTION
 0x80000000

	)

42 
	#NGX_LOG_DEBUG_ALL
 0x7ffffff0

	)

45 
	gu_ch¨
 *(*
	tngx_log_h™dÀr_±
Ë(
	tngx_log_t
 *
	tlog
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

48 
	sngx_log_s
 {

49 
ngx_uöt_t
 
	mlog_Àvñ
;

50 
ngx_›í_fûe_t
 *
	mfûe
;

52 
ngx_©omic_uöt_t
 
	mc⁄√˘i⁄
;

54 
ngx_log_h™dÀr_±
 
	mh™dÀr
;

55 *
	md©a
;

63 *
	ma˘i⁄
;

67 
	#NGX_MAX_ERROR_STR
 2048

	)

72 #i‡(
NGX_HAVE_C99_VARIADIC_MACROS
)

74 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

76 
	#ngx_log_îr‹
(
Àvñ
, 
log
, ...) \

77 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
__VA_ARGS__
)

	)

79 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

80 c⁄° *
fmt
, ...);

82 
	#ngx_log_debug
(
Àvñ
, 
log
, ...) \

83 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

84 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
__VA_ARGS__
)

	)

88 #ñi‡(
NGX_HAVE_GCC_VARIADIC_MACROS
)

90 
	#NGX_HAVE_VARIADIC_MACROS
 1

	)

92 
	#ngx_log_îr‹
(
Àvñ
, 
log
, 
¨gs
...) \

93 i‡((
log
)->
log_Àvñ
 >
Àvñ
Ë
	`ngx_log_îr‹_c‹e
÷evñ,Üog, 
¨gs
)

	)

95 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

96 c⁄° *
fmt
, ...);

98 
	#ngx_log_debug
(
Àvñ
, 
log
, 
¨gs
...) \

99 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

100 
	`ngx_log_îr‹_c‹e
(
NGX_LOG_DEBUG
, 
log
, 
¨gs
)

	)

106 
	#NGX_HAVE_VARIADIC_MACROS
 0

	)

108 
ngx_cde˛
 
ngx_log_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

109 c⁄° *
fmt
, ...);

110 
ngx_log_îr‹_c‹e
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

111 c⁄° *
fmt
, 
va_li°
 
¨gs
);

112 
ngx_cde˛
 
ngx_log_debug_c‹e
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

113 c⁄° *
fmt
, ...);

121 #i‡(
NGX_DEBUG
)

123 #i‡(
NGX_HAVE_VARIADIC_MACROS
)

125 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

126 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

128 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

129 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

131 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

132 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

134 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

135 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

137 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

138 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

140 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

141 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

143 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

144 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

145 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

146 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

148 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

149 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

150 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

151 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

153 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

154 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

155 
	`ngx_log_debug
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

156 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

161 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
) \

162 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

163 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
)

	)

165 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
) \

166 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

167 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
)

	)

169 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
) \

170 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

171 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

173 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
) \

174 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

175 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

177 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
) \

178 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

179 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

181 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
) \

182 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

183 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

185 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

186 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
) \

187 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

188 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

190 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

191 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
) \

192 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

193 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

194 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
)

	)

196 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, \

197 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
) \

198 i‡((
log
)->
log_Àvñ
 & 
Àvñ
) \

199 
	`ngx_log_debug_c‹e
(
log
, 
îr
, 
fmt
, \

200 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
, 
¨g7
, 
¨g8
)

	)

206 
	#ngx_log_debug0
(
Àvñ
, 
log
, 
îr
, 
fmt
)

	)

207 
	#ngx_log_debug1
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
)

	)

208 
	#ngx_log_debug2
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
)

	)

209 
	#ngx_log_debug3
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
)

	)

210 
	#ngx_log_debug4
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
)

	)

211 
	#ngx_log_debug5
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
)

	)

212 
	#ngx_log_debug6
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, 
¨g6
)

	)

213 
	#ngx_log_debug7
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

214 
¨g6
, 
¨g7
)

	)

215 
	#ngx_log_debug8
(
Àvñ
, 
log
, 
îr
, 
fmt
, 
¨g1
, 
¨g2
, 
¨g3
, 
¨g4
, 
¨g5
, \

216 
¨g6
, 
¨g7
, 
¨g8
)

	)

222 
ngx_log_t
 *
ngx_log_öô
(
u_ch¨
 *
¥efix
);

223 
ngx_log_t
 *
ngx_log_¸óã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_°r_t
 *
«me
);

224 *
ngx_log_£t_Àvñs
(
ngx_c⁄f_t
 *
cf
, 
ngx_log_t
 *
log
);

225 
ngx_cde˛
 
ngx_log_ab‹t
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

226 
ngx_cde˛
 
ngx_log_°dîr
(
ngx_îr_t
 
îr
, c⁄° *
fmt
, ...);

227 
u_ch¨
 *
ngx_log_î∫o
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
ngx_îr_t
 
îr
);

239 
ngx_ölöe
 

240 
	$ngx_wrôe_°dîr
(*
ãxt
)

242 (Ë
	`ngx_wrôe_fd
(
ngx_°dîr
, 
ãxt
, 
	`°æí
(text));

243 
	}
}

246 
ngx_moduÀ_t
 
ngx_îæog_moduÀ
;

247 
ngx_uöt_t
 
ngx_u£_°dîr
;

	@src/core/ngx_md5.c

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_md5.h
>

16 #i‡!(
NGX_HAVE_MD5
)

18 c⁄° 
u_ch¨
 *
ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° u_ch¨ *
d©a
,

19 
size_t
 
size
);

23 
	$ngx_md5_öô
(
ngx_md5_t
 *
˘x
)

25 
˘x
->
a
 = 0x67452301;

26 
˘x
->
b
 = 0xefcdab89;

27 
˘x
->
c
 = 0x98badcfe;

28 
˘x
->
d
 = 0x10325476;

30 
˘x
->
byãs
 = 0;

31 
	}
}

35 
	$ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
)

37 
size_t
 
u£d
, 
‰ì
;

39 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

40 
˘x
->
byãs
 +
size
;

42 i‡(
u£d
) {

43 
‰ì
 = 64 - 
u£d
;

45 i‡(
size
 < 
‰ì
) {

46 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
size
);

50 
	`ngx_mem˝y
(&
˘x
->
buf„r
[
u£d
], 
d©a
, 
‰ì
);

51 
d©a
 = (
u_ch¨
 *Ëd©®+ 
‰ì
;

52 
size
 -
‰ì
;

53 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

56 i‡(
size
 >= 64) {

57 
d©a
 = 
	`ngx_md5_body
(
˘x
, d©a, 
size
 & ~(
size_t
) 0x3f);

58 
size
 &= 0x3f;

61 
	`ngx_mem˝y
(
˘x
->
buf„r
, 
d©a
, 
size
);

62 
	}
}

66 
	$ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
)

68 
size_t
 
u£d
, 
‰ì
;

70 
u£d
 = (
size_t
Ë(
˘x
->
byãs
 & 0x3f);

72 
˘x
->
buf„r
[
u£d
++] = 0x80;

74 
‰ì
 = 64 - 
u£d
;

76 i‡(
‰ì
 < 8) {

77 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
);

78 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

79 
u£d
 = 0;

80 
‰ì
 = 64;

83 
	`ngx_memzîo
(&
˘x
->
buf„r
[
u£d
], 
‰ì
 - 8);

85 
˘x
->
byãs
 <<= 3;

86 
˘x
->
buf„r
[56] = (
u_ch¨
Ë˘x->
byãs
;

87 
˘x
->
buf„r
[57] = (
u_ch¨
Ë(˘x->
byãs
 >> 8);

88 
˘x
->
buf„r
[58] = (
u_ch¨
Ë(˘x->
byãs
 >> 16);

89 
˘x
->
buf„r
[59] = (
u_ch¨
Ë(˘x->
byãs
 >> 24);

90 
˘x
->
buf„r
[60] = (
u_ch¨
Ë(˘x->
byãs
 >> 32);

91 
˘x
->
buf„r
[61] = (
u_ch¨
Ë(˘x->
byãs
 >> 40);

92 
˘x
->
buf„r
[62] = (
u_ch¨
Ë(˘x->
byãs
 >> 48);

93 
˘x
->
buf„r
[63] = (
u_ch¨
Ë(˘x->
byãs
 >> 56);

95 (Ë
	`ngx_md5_body
(
˘x
, ctx->
buf„r
, 64);

97 
ªsu…
[0] = (
u_ch¨
Ë
˘x
->
a
;

98 
ªsu…
[1] = (
u_ch¨
Ë(
˘x
->
a
 >> 8);

99 
ªsu…
[2] = (
u_ch¨
Ë(
˘x
->
a
 >> 16);

100 
ªsu…
[3] = (
u_ch¨
Ë(
˘x
->
a
 >> 24);

101 
ªsu…
[4] = (
u_ch¨
Ë
˘x
->
b
;

102 
ªsu…
[5] = (
u_ch¨
Ë(
˘x
->
b
 >> 8);

103 
ªsu…
[6] = (
u_ch¨
Ë(
˘x
->
b
 >> 16);

104 
ªsu…
[7] = (
u_ch¨
Ë(
˘x
->
b
 >> 24);

105 
ªsu…
[8] = (
u_ch¨
Ë
˘x
->
c
;

106 
ªsu…
[9] = (
u_ch¨
Ë(
˘x
->
c
 >> 8);

107 
ªsu…
[10] = (
u_ch¨
Ë(
˘x
->
c
 >> 16);

108 
ªsu…
[11] = (
u_ch¨
Ë(
˘x
->
c
 >> 24);

109 
ªsu…
[12] = (
u_ch¨
Ë
˘x
->
d
;

110 
ªsu…
[13] = (
u_ch¨
Ë(
˘x
->
d
 >> 8);

111 
ªsu…
[14] = (
u_ch¨
Ë(
˘x
->
d
 >> 16);

112 
ªsu…
[15] = (
u_ch¨
Ë(
˘x
->
d
 >> 24);

114 
	`ngx_memzîo
(
˘x
, (*ctx));

115 
	}
}

126 
	#F
(
x
, 
y
, 
z
Ë((zË^ ((xË& ((yË^ (z))))

	)

127 
	#G
(
x
, 
y
, 
z
Ë((yË^ ((zË& ((xË^ (y))))

	)

128 
	#H
(
x
, 
y
, 
z
Ë((xË^ (yË^ (z))

	)

129 
	#I
(
x
, 
y
, 
z
Ë((yË^ ((xË| ~(z)))

	)

135 
	#STEP
(
f
, 
a
, 
b
, 
c
, 
d
, 
x
, 
t
, 
s
) \

136 (
a
Ë+
	`f
((
b
), (
c
), (
d
)Ë+ (
x
Ë+ (
t
); \

137 (
a
Ë((◊Ë<< (
s
)) | (((a) & 0xffffffff) >> (32 - (s)))); \

138 (
a
Ë+(
b
)

	)

149 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

151 
	#SET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

152 
	#GET
(
n
Ë(*(
uöt32_t
 *Ë&
p
[¿* 4])

	)

156 
	#SET
(
n
) \

157 (
block
[
n
] = \

158 (
uöt32_t
Ë
p
[
n
 * 4] | \

159 ((
uöt32_t
Ë
p
[
n
 * 4 + 1] << 8) | \

160 ((
uöt32_t
Ë
p
[
n
 * 4 + 2] << 16) | \

161 ((
uöt32_t
Ë
p
[
n
 * 4 + 3] << 24))

	)

163 
	#GET
(
n
Ë
block
[n]

	)

173 c⁄° 
u_ch¨
 *

174 
	$ngx_md5_body
(
ngx_md5_t
 *
˘x
, c⁄° 
u_ch¨
 *
d©a
, 
size_t
 
size
)

176 
uöt32_t
 
a
, 
b
, 
c
, 
d
;

177 
uöt32_t
 
ßved_a
, 
ßved_b
, 
ßved_c
, 
ßved_d
;

178 c⁄° 
u_ch¨
 *
p
;

179 #i‡!(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

180 
uöt32_t
 
block
[16];

183 
p
 = 
d©a
;

185 
a
 = 
˘x
->a;

186 
b
 = 
˘x
->b;

187 
c
 = 
˘x
->c;

188 
d
 = 
˘x
->d;

191 
ßved_a
 = 
a
;

192 
ßved_b
 = 
b
;

193 
ßved_c
 = 
c
;

194 
ßved_d
 = 
d
;

198 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(0), 0xd76aa478, 7);

199 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(1), 0xe8c7b756, 12);

200 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(2), 0x242070db, 17);

201 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(3), 0xc1bdceee, 22);

202 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(4), 0xf57c0faf, 7);

203 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(5), 0x4787c62a, 12);

204 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(6), 0xa8304613, 17);

205 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(7), 0xfd469501, 22);

206 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(8), 0x698098d8, 7);

207 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(9), 0x8b44f7af, 12);

208 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(10), 0xffff5bb1, 17);

209 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(11), 0x895cd7be, 22);

210 
	`STEP
(
F
, 
a
, 
b
, 
c
, 
d
, 
	`SET
(12), 0x6b901122, 7);

211 
	`STEP
(
F
, 
d
, 
a
, 
b
, 
c
, 
	`SET
(13), 0xfd987193, 12);

212 
	`STEP
(
F
, 
c
, 
d
, 
a
, 
b
, 
	`SET
(14), 0xa679438e, 17);

213 
	`STEP
(
F
, 
b
, 
c
, 
d
, 
a
, 
	`SET
(15), 0x49b40821, 22);

217 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xf61e2562, 5);

218 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(6), 0xc040b340, 9);

219 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x265e5a51, 14);

220 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(0), 0xe9b6c7aa, 20);

221 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xd62f105d, 5);

222 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(10), 0x02441453, 9);

223 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0xd8a1e681, 14);

224 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(4), 0xe7d3fbc8, 20);

225 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0x21e1cde6, 5);

226 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(14), 0xc33707d6, 9);

227 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xf4d50d87, 14);

228 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(8), 0x455a14ed, 20);

229 
	`STEP
(
G
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0xa9e3e905, 5);

230 
	`STEP
(
G
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(2), 0xfcefa3f8, 9);

231 
	`STEP
(
G
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0x676f02d9, 14);

232 
	`STEP
(
G
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(12), 0x8d2a4c8a, 20);

236 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(5), 0xfffa3942, 4);

237 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(8), 0x8771f681, 11);

238 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(11), 0x6d9d6122, 16);

239 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(14), 0xfde5380c, 23);

240 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(1), 0xa4beea44, 4);

241 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(4), 0x4bdecfa9, 11);

242 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(7), 0xf6bb4b60, 16);

243 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(10), 0xbebfbc70, 23);

244 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(13), 0x289b7ec6, 4);

245 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(0), 0xeaa127fa, 11);

246 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(3), 0xd4ef3085, 16);

247 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(6), 0x04881d05, 23);

248 
	`STEP
(
H
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(9), 0xd9d4d039, 4);

249 
	`STEP
(
H
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(12), 0xe6db99e5, 11);

250 
	`STEP
(
H
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(15), 0x1fa27cf8, 16);

251 
	`STEP
(
H
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(2), 0xc4ac5665, 23);

255 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(0), 0xf4292244, 6);

256 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(7), 0x432aff97, 10);

257 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(14), 0xab9423a7, 15);

258 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(5), 0xfc93a039, 21);

259 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(12), 0x655b59c3, 6);

260 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(3), 0x8f0ccc92, 10);

261 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(10), 0xffeff47d, 15);

262 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(1), 0x85845dd1, 21);

263 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(8), 0x6fa87e4f, 6);

264 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(15), 0xfe2ce6e0, 10);

265 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(6), 0xa3014314, 15);

266 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(13), 0x4e0811a1, 21);

267 
	`STEP
(
I
, 
a
, 
b
, 
c
, 
d
, 
	`GET
(4), 0xf7537e82, 6);

268 
	`STEP
(
I
, 
d
, 
a
, 
b
, 
c
, 
	`GET
(11), 0xbd3af235, 10);

269 
	`STEP
(
I
, 
c
, 
d
, 
a
, 
b
, 
	`GET
(2), 0x2ad7d2bb, 15);

270 
	`STEP
(
I
, 
b
, 
c
, 
d
, 
a
, 
	`GET
(9), 0xeb86d391, 21);

272 
a
 +
ßved_a
;

273 
b
 +
ßved_b
;

274 
c
 +
ßved_c
;

275 
d
 +
ßved_d
;

277 
p
 += 64;

279 } 
size
 -= 64);

281 
˘x
->
a
 =á;

282 
˘x
->
b
 = b;

283 
˘x
->
c
 = c;

284 
˘x
->
d
 = d;

286  
p
;

287 
	}
}

	@src/core/ngx_md5.h

8 #i‚de‡
_NGX_MD5_H_INCLUDED_


9 
	#_NGX_MD5_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_MD5
)

18 #i‡(
NGX_HAVE_OPENSSL_MD5_H
)

19 
	~<›ís¶/md5.h
>

21 
	~<md5.h
>

25 
MD5_CTX
 
	tngx_md5_t
;

28 #i‡(
NGX_OPENSSL_MD5
)

30 
	#ngx_md5_öô
 
MD5_Inô


	)

31 
	#ngx_md5_upd©e
 
MD5_Upd©e


	)

32 
	#ngx_md5_föÆ
 
MD5_FöÆ


	)

36 
	#ngx_md5_öô
 
MD5Inô


	)

37 
	#ngx_md5_upd©e
 
MD5Upd©e


	)

38 
	#ngx_md5_föÆ
 
MD5FöÆ


	)

47 
uöt64_t
 
	mbyãs
;

48 
uöt32_t
 
	ma
, 
	mb
, 
	mc
, 
	md
;

49 
u_ch¨
 
	mbuf„r
[64];

50 } 
	tngx_md5_t
;

53 
ngx_md5_öô
(
ngx_md5_t
 *
˘x
);

54 
ngx_md5_upd©e
(
ngx_md5_t
 *
˘x
, c⁄° *
d©a
, 
size_t
 
size
);

55 
ngx_md5_föÆ
(
u_ch¨
 
ªsu…
[16], 
ngx_md5_t
 *
˘x
);

	@src/core/ngx_murmurhash.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
uöt32_t


12 
	$ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
)

14 
uöt32_t
 
h
, 
k
;

16 
h
 = 0 ^ 
Àn
;

18 
Àn
 >= 4) {

19 
k
 = 
d©a
[0];

20 
k
 |
d©a
[1] << 8;

21 
k
 |
d©a
[2] << 16;

22 
k
 |
d©a
[3] << 24;

24 
k
 *= 0x5bd1e995;

25 
k
 ^= k >> 24;

26 
k
 *= 0x5bd1e995;

28 
h
 *= 0x5bd1e995;

29 
h
 ^
k
;

31 
d©a
 += 4;

32 
Àn
 -= 4;

35 
Àn
) {

37 
h
 ^
d©a
[2] << 16;

39 
h
 ^
d©a
[1] << 8;

41 
h
 ^
d©a
[0];

42 
h
 *= 0x5bd1e995;

45 
h
 ^= h >> 13;

46 
h
 *= 0x5bd1e995;

47 
h
 ^= h >> 15;

49  
h
;

50 
	}
}

	@src/core/ngx_murmurhash.h

8 #i‚de‡
_NGX_MURMURHASH_H_INCLUDED_


9 
	#_NGX_MURMURHASH_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uöt32_t
 
ngx_murmur_hash2
(
u_ch¨
 *
d©a
, 
size_t
 
Àn
);

	@src/core/ngx_open_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

21 
	#NGX_MIN_READ_AHEAD
 (128 * 1024)

	)

24 
ngx_›í_fûe_ˇche_˛ónup
(*
d©a
);

25 #i‡(
NGX_HAVE_OPENAT
)

26 
ngx_fd_t
 
ngx_›í©_fûe_ow√r
“gx_fd_à
©_fd
, c⁄° 
u_ch¨
 *
«me
,

27 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
);

29 
ngx_fd_t
 
ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
,

30 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,

31 
ngx_öt_t
 
ac˚ss
, 
ngx_log_t
 *
log
);

32 
ngx_öt_t
 
ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
,

33 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
);

34 
ngx_öt_t
 
ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
,

35 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

36 
ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

37 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
);

38 
ngx_›í_fûe_˛ónup
(*
d©a
);

39 
ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

40 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
);

41 
ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
);

42 
ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

43 
ngx_uöt_t
 
n
, 
ngx_log_t
 *
log
);

44 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

45 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

46 
ngx_ˇched_›í_fûe_t
 *

47 
ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

48 
uöt32_t
 
hash
);

49 
ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
);

52 
ngx_›í_fûe_ˇche_t
 *

53 
	$ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
)

55 
ngx_poﬁ_˛ónup_t
 *
˛n
;

56 
ngx_›í_fûe_ˇche_t
 *
ˇche
;

58 
ˇche
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_›í_fûe_ˇche_t
));

59 i‡(
ˇche
 =
NULL
) {

60  
NULL
;

63 
	`ngx_rbåì_öô
(&
ˇche
->
rbåì
, &ˇche->
£¡öñ
,

64 
ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
);

66 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

68 
ˇche
->
cuºít
 = 0;

69 
ˇche
->
max
 = max;

70 
ˇche
->
öa˘ive
 = inactive;

72 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, 0);

73 i‡(
˛n
 =
NULL
) {

74  
NULL
;

77 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_˛ónup
;

78 
˛n
->
d©a
 = 
ˇche
;

80  
ˇche
;

81 
	}
}

85 
	$ngx_›í_fûe_ˇche_˛ónup
(*
d©a
)

87 
ngx_›í_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

89 
ngx_queue_t
 *
q
;

90 
ngx_ˇched_›í_fûe_t
 *
fûe
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

97 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

101 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

103 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

105 
	`ngx_queue_ªmove
(
q
);

107 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

109 
ˇche
->
cuºít
--;

111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

112 "dñëêˇched o≥¿fûe: %s", 
fûe
->
«me
);

114 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

115 
fûe
->
˛o£
 = 1;

116 
fûe
->
cou¡
 = 0;

117 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
ngx_cy˛e
->
log
);

120 
	`ngx_‰ì
(
fûe
->
«me
);

121 
	`ngx_‰ì
(
fûe
);

125 i‡(
ˇche
->
cuºít
) {

126 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

128 
ˇche
->
cuºít
);

131 i‡(
ˇche
->
rbåì
.
roŸ
 !ˇche->rbåì.
£¡öñ
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

136 
	}
}

139 
ngx_öt_t


140 
	$ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

141 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
)

143 
time_t
 
now
;

144 
uöt32_t
 
hash
;

145 
ngx_öt_t
 
rc
;

146 
ngx_fûe_öfo_t
 
fi
;

147 
ngx_poﬁ_˛ónup_t
 *
˛n
;

148 
ngx_ˇched_›í_fûe_t
 *
fûe
;

149 
ngx_poﬁ_˛ónup_fûe_t
 *
˛nf
;

150 
ngx_›í_fûe_ˇche_˛ónup_t
 *
of˛n
;

152 
of
->
fd
 = 
NGX_INVALID_FILE
;

153 
of
->
îr
 = 0;

155 i‡(
ˇche
 =
NULL
) {

157 i‡(
of
->
ã°_⁄ly
) {

159 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
poﬁ
->
log
)

160 =
NGX_FILE_ERROR
)

162  
NGX_ERROR
;

165 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

166 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

167 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

168 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

169 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

170 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

171 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

172 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

174  
NGX_OK
;

177 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

178 i‡(
˛n
 =
NULL
) {

179  
NGX_ERROR
;

182 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

184 i‡(
rc
 =
NGX_OK
 && !
of
->
is_dú
) {

185 
˛n
->
h™dÀr
 = 
ngx_poﬁ_˛ónup_fûe
;

186 
˛nf
 = 
˛n
->
d©a
;

188 
˛nf
->
fd
 = 
of
->fd;

189 
˛nf
->
«me
 =Çame->
d©a
;

190 
˛nf
->
log
 = 
poﬁ
->log;

193  
rc
;

196 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
poﬁ
, (
ngx_›í_fûe_ˇche_˛ónup_t
));

197 i‡(
˛n
 =
NULL
) {

198  
NGX_ERROR
;

201 
now
 = 
	`ngx_time
();

203 
hash
 = 
	`ngx_¸c32_l⁄g
(
«me
->
d©a
,Çame->
Àn
);

205 
fûe
 = 
	`ngx_›í_fûe_lookup
(
ˇche
, 
«me
, 
hash
);

207 i‡(
fûe
) {

209 
fûe
->
u£s
++;

211 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

213 i‡(
fûe
->
fd
 =
NGX_INVALID_FILE
 && fûe->
îr
 =0 && !fûe->
is_dú
) {

217 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

219 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

220 
Áûed
;

223 
add_evít
;

226 i‡(
fûe
->
u£_evít


227 || (
fûe
->
evít
 =
NULL


228 && (
of
->
uniq
 =0 || of->uniq =
fûe
->uniq)

229 && 
now
 - 
fûe
->
¸óãd
 < 
of
->
vÆid


230 #i‡(
NGX_HAVE_OPENAT
)

231 && 
of
->
dißbÀ_symlöks
 =
fûe
->disable_symlinks

232 && 
of
->
dißbÀ_symlöks_‰om
 =
fûe
->disable_symlinks_from

236 i‡(
fûe
->
îr
 == 0) {

238 
of
->
fd
 = 
fûe
->fd;

239 
of
->
uniq
 = 
fûe
->uniq;

240 
of
->
mtime
 = 
fûe
->mtime;

241 
of
->
size
 = 
fûe
->size;

243 
of
->
is_dú
 = 
fûe
->is_dir;

244 
of
->
is_fûe
 = 
fûe
->is_file;

245 
of
->
is_lök
 = 
fûe
->is_link;

246 
of
->
is_exec
 = 
fûe
->is_exec;

247 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

249 i‡(!
fûe
->
is_dú
) {

250 
fûe
->
cou¡
++;

251 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

255 
of
->
îr
 = 
fûe
->err;

256 #i‡(
NGX_HAVE_OPENAT
)

257 
of
->
Áûed
 = 
fûe
->
dißbÀ_symlöks
 ? 
ngx_›í©_fûe_n


258 : 
ngx_›í_fûe_n
;

260 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

264 
found
;

267 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

269 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
);

271 i‡(
fûe
->
is_dú
) {

279 
of
->
ã°_dú
 = 1;

282 
of
->
fd
 = 
fûe
->fd;

283 
of
->
uniq
 = 
fûe
->uniq;

285 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

287 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

288 
Áûed
;

291 i‡(
of
->
is_dú
) {

293 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

294 
upd©e
;

299 } i‡(
of
->
îr
 == 0) {

301 i‡(
fûe
->
is_dú
 || fûe->
îr
) {

302 
add_evít
;

305 i‡(
of
->
uniq
 =
fûe
->uniq) {

307 i‡(
fûe
->
evít
) {

308 
fûe
->
u£_evít
 = 1;

311 
of
->
is_dúe˘io
 = 
fûe
->is_directio;

313 
upd©e
;

320 i‡(
fûe
->
îr
 || fûe->
is_dú
) {

321 
upd©e
;

327 i‡(
fûe
->
cou¡
 == 0) {

329 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

331 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

332 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

333 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

336 
add_evít
;

339 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

341 
ˇche
->
cuºít
--;

343 
fûe
->
˛o£
 = 1;

345 
¸óã
;

350 
rc
 = 
	`ngx_›í_™d_°©_fûe
(
«me
, 
of
, 
poﬁ
->
log
);

352 i‡(
rc
 !
NGX_OK
 && (
of
->
îr
 =0 || !of->
îr‹s
)) {

353 
Áûed
;

356 
¸óã
:

358 i‡(
ˇche
->
cuºít
 >ˇche->
max
) {

359 
	`ngx_expúe_ﬁd_ˇched_fûes
(
ˇche
, 0, 
poﬁ
->
log
);

362 
fûe
 = 
	`ngx_Æloc
((
ngx_ˇched_›í_fûe_t
), 
poﬁ
->
log
);

364 i‡(
fûe
 =
NULL
) {

365 
Áûed
;

368 
fûe
->
«me
 = 
	`ngx_Æloc
“ame->
Àn
 + 1, 
poﬁ
->
log
);

370 i‡(
fûe
->
«me
 =
NULL
) {

371 
	`ngx_‰ì
(
fûe
);

372 
fûe
 = 
NULL
;

373 
Áûed
;

376 
	`ngx_˝y°∫
(
fûe
->
«me
,Çame->
d©a
,Çame->
Àn
 + 1);

378 
fûe
->
node
.
key
 = 
hash
;

380 
	`ngx_rbåì_ö£π
(&
ˇche
->
rbåì
, &
fûe
->
node
);

382 
ˇche
->
cuºít
++;

384 
fûe
->
u£s
 = 1;

385 
fûe
->
cou¡
 = 0;

386 
fûe
->
u£_evít
 = 0;

387 
fûe
->
evít
 = 
NULL
;

389 
add_evít
:

391 
	`ngx_›í_fûe_add_evít
(
ˇche
, 
fûe
, 
of
, 
poﬁ
->
log
);

393 
upd©e
:

395 
fûe
->
fd
 = 
of
->fd;

396 
fûe
->
îr
 = 
of
->err;

397 #i‡(
NGX_HAVE_OPENAT
)

398 
fûe
->
dißbÀ_symlöks
 = 
of
->disable_symlinks;

399 
fûe
->
dißbÀ_symlöks_‰om
 = 
of
->disable_symlinks_from;

402 i‡(
of
->
îr
 == 0) {

403 
fûe
->
uniq
 = 
of
->uniq;

404 
fûe
->
mtime
 = 
of
->mtime;

405 
fûe
->
size
 = 
of
->size;

407 
fûe
->
˛o£
 = 0;

409 
fûe
->
is_dú
 = 
of
->is_dir;

410 
fûe
->
is_fûe
 = 
of
->is_file;

411 
fûe
->
is_lök
 = 
of
->is_link;

412 
fûe
->
is_exec
 = 
of
->is_exec;

413 
fûe
->
is_dúe˘io
 = 
of
->is_directio;

415 i‡(!
of
->
is_dú
) {

416 
fûe
->
cou¡
++;

420 
fûe
->
¸óãd
 = 
now
;

422 
found
:

424 
fûe
->
ac˚s£d
 = 
now
;

426 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

428 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
poﬁ
->
log
, 0,

430 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
îr
, fûe->
u£s
);

432 i‡(
of
->
îr
 == 0) {

434 i‡(!
of
->
is_dú
) {

435 
˛n
->
h™dÀr
 = 
ngx_›í_fûe_˛ónup
;

436 
of˛n
 = 
˛n
->
d©a
;

438 
of˛n
->
ˇche
 = cache;

439 
of˛n
->
fûe
 = file;

440 
of˛n
->
mö_u£s
 = 
of
->min_uses;

441 
of˛n
->
log
 = 
poﬁ
->log;

444  
NGX_OK
;

447  
NGX_ERROR
;

449 
Áûed
:

451 i‡(
fûe
) {

452 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

454 
ˇche
->
cuºít
--;

456 i‡(
fûe
->
cou¡
 == 0) {

458 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

459 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

460 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

461 
ngx_˛o£_fûe_n
 " \"%s\" failed",

462 
fûe
->
«me
);

466 
	`ngx_‰ì
(
fûe
->
«me
);

467 
	`ngx_‰ì
(
fûe
);

470 
fûe
->
˛o£
 = 1;

474 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

475 i‡(
	`ngx_˛o£_fûe
(
of
->
fd
Ë=
NGX_FILE_ERROR
) {

476 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
poﬁ
->
log
, 
ngx_î∫o
,

477 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

481  
NGX_ERROR
;

482 
	}
}

485 #i‡(
NGX_HAVE_OPENAT
)

487 
ngx_fd_t


488 
	$ngx_›í©_fûe_ow√r
(
ngx_fd_t
 
©_fd
, c⁄° 
u_ch¨
 *
«me
,

489 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

491 
ngx_fd_t
 
fd
;

492 
ngx_îr_t
 
îr
;

493 
ngx_fûe_öfo_t
 
fi
, 
©fi
;

507 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
);

509 i‡(
fd
 =
NGX_INVALID_FILE
) {

510  
NGX_INVALID_FILE
;

513 i‡(
	`ngx_fûe_©_öfo
(
©_fd
, 
«me
, &
©fi
, 
AT_SYMLINK_NOFOLLOW
)

514 =
NGX_FILE_ERROR
)

516 
îr
 = 
ngx_î∫o
;

517 
Áûed
;

520 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

521 
îr
 = 
ngx_î∫o
;

522 
Áûed
;

525 i‡(
fi
.
°_uid
 !
©fi
.st_uid) {

526 
îr
 = 
NGX_ELOOP
;

527 
Áûed
;

530  
fd
;

532 
Áûed
:

534 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

535 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

536 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

539 
	`ngx_£t_î∫o
(
îr
);

541  
NGX_INVALID_FILE
;

542 
	}
}

547 
ngx_fd_t


548 
	$ngx_›í_fûe_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

549 
ngx_öt_t
 
mode
,Çgx_öt_à
¸óã
,Çgx_öt_à
ac˚ss
, 
ngx_log_t
 *
log
)

551 
ngx_fd_t
 
fd
;

553 #i‡!(
NGX_HAVE_OPENAT
)

555 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

557 i‡(
fd
 =
NGX_INVALID_FILE
) {

558 
of
->
îr
 = 
ngx_î∫o
;

559 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

560  
NGX_INVALID_FILE
;

563  
fd
;

567 
u_ch¨
 *
p
, *
˝
, *
íd
;

568 
ngx_fd_t
 
©_fd
;

569 
ngx_°r_t
 
©_«me
;

571 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

572 
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
mode
, 
¸óã
, 
ac˚ss
);

574 i‡(
fd
 =
NGX_INVALID_FILE
) {

575 
of
->
îr
 = 
ngx_î∫o
;

576 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

577  
NGX_INVALID_FILE
;

580  
fd
;

583 
p
 = 
«me
->
d©a
;

584 
íd
 = 
p
 + 
«me
->
Àn
;

586 
©_«me
 = *
«me
;

588 i‡(
of
->
dißbÀ_symlöks_‰om
) {

590 
˝
 = 
p
 + 
of
->
dißbÀ_symlöks_‰om
;

592 *
˝
 = '\0';

594 
©_fd
 = 
	`ngx_›í_fûe
(
p
, 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

595 
NGX_FILE_OPEN
, 0);

597 *
˝
 = '/';

599 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

600 
of
->
îr
 = 
ngx_î∫o
;

601 
of
->
Áûed
 = 
ngx_›í_fûe_n
;

602  
NGX_INVALID_FILE
;

605 
©_«me
.
Àn
 = 
of
->
dißbÀ_symlöks_‰om
;

606 
p
 = 
˝
 + 1;

608 } i‡(*
p
 == '/') {

610 
©_fd
 = 
	`ngx_›í_fûe
("/",

611 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

612 
NGX_FILE_OPEN
, 0);

614 i‡(
©_fd
 =
NGX_INVALID_FILE
) {

615 
of
->
îr
 = 
ngx_î∫o
;

616 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

617  
NGX_INVALID_FILE
;

620 
©_«me
.
Àn
 = 1;

621 
p
++;

624 
©_fd
 = 
NGX_AT_FDCWD
;

628 
˝
 = 
	`ngx_°æchr
(
p
, 
íd
, '/');

629 i‡(
˝
 =
NULL
) {

633 i‡(
˝
 =
p
) {

634 
p
++;

638 *
˝
 = '\0';

640 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER
) {

641 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
,

642 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
,

643 
NGX_FILE_OPEN
, 0, 
log
);

646 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
,

647 
NGX_FILE_SEARCH
|
NGX_FILE_NONBLOCK
|
NGX_FILE_NOFOLLOW
,

648 
NGX_FILE_OPEN
, 0);

651 *
˝
 = '/';

653 i‡(
fd
 =
NGX_INVALID_FILE
) {

654 
of
->
îr
 = 
ngx_î∫o
;

655 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

656 
Áûed
;

659 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

660 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

661 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

664 
p
 = 
˝
 + 1;

665 
©_fd
 = 
fd
;

666 
©_«me
.
Àn
 = 
˝
 -át_«me.
d©a
;

669 i‡(
p
 =
íd
) {

682 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, ".", 
mode
, 
¸óã
, 
ac˚ss
);

683 
d⁄e
;

686 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_NOTOWNER


687 && !(
¸óã
 & (
NGX_FILE_CREATE_OR_OPEN
|
NGX_FILE_TRUNCATE
)))

689 
fd
 = 
	`ngx_›í©_fûe_ow√r
(
©_fd
, 
p
, 
mode
, 
¸óã
, 
ac˚ss
, 
log
);

692 
fd
 = 
	`ngx_›í©_fûe
(
©_fd
, 
p
, 
mode
|
NGX_FILE_NOFOLLOW
, 
¸óã
, 
ac˚ss
);

695 
d⁄e
:

697 i‡(
fd
 =
NGX_INVALID_FILE
) {

698 
of
->
îr
 = 
ngx_î∫o
;

699 
of
->
Áûed
 = 
ngx_›í©_fûe_n
;

702 
Áûed
:

704 i‡(
©_fd
 !
NGX_AT_FDCWD
 && 
	`ngx_˛o£_fûe
◊t_fdË=
NGX_FILE_ERROR
) {

705 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

706 
ngx_˛o£_fûe_n
 " \"%V\" faûed", &
©_«me
);

709  
fd
;

711 
	}
}

714 
ngx_öt_t


715 
	$ngx_fûe_öfo_wøµî
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

716 
ngx_fûe_öfo_t
 *
fi
, 
ngx_log_t
 *
log
)

718 
ngx_öt_t
 
rc
;

720 #i‡!(
NGX_HAVE_OPENAT
)

722 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

724 i‡(
rc
 =
NGX_FILE_ERROR
) {

725 
of
->
îr
 = 
ngx_î∫o
;

726 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

727  
NGX_FILE_ERROR
;

730  
rc
;

734 
ngx_fd_t
 
fd
;

736 i‡(
of
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

738 
rc
 = 
	`ngx_fûe_öfo
(
«me
->
d©a
, 
fi
);

740 i‡(
rc
 =
NGX_FILE_ERROR
) {

741 
of
->
îr
 = 
ngx_î∫o
;

742 
of
->
Áûed
 = 
ngx_fûe_öfo_n
;

743  
NGX_FILE_ERROR
;

746  
rc
;

749 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

750 
NGX_FILE_OPEN
, 0, 
log
);

752 i‡(
fd
 =
NGX_INVALID_FILE
) {

753  
NGX_FILE_ERROR
;

756 
rc
 = 
	`ngx_fd_öfo
(
fd
, 
fi
);

758 i‡(
rc
 =
NGX_FILE_ERROR
) {

759 
of
->
îr
 = 
ngx_î∫o
;

760 
of
->
Áûed
 = 
ngx_fd_öfo_n
;

763 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

764 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

765 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

768  
rc
;

770 
	}
}

773 
ngx_öt_t


774 
	$ngx_›í_™d_°©_fûe
(
ngx_°r_t
 *
«me
, 
ngx_›í_fûe_öfo_t
 *
of
,

775 
ngx_log_t
 *
log
)

777 
ngx_fd_t
 
fd
;

778 
ngx_fûe_öfo_t
 
fi
;

780 i‡(
of
->
fd
 !
NGX_INVALID_FILE
) {

782 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

783 
of
->
fd
 = 
NGX_INVALID_FILE
;

784  
NGX_ERROR
;

787 i‡(
of
->
uniq
 =
	`ngx_fûe_uniq
(&
fi
)) {

788 
d⁄e
;

791 } i‡(
of
->
ã°_dú
) {

793 i‡(
	`ngx_fûe_öfo_wøµî
(
«me
, 
of
, &
fi
, 
log
Ë=
NGX_FILE_ERROR
) {

794 
of
->
fd
 = 
NGX_INVALID_FILE
;

795  
NGX_ERROR
;

798 i‡(
	`ngx_is_dú
(&
fi
)) {

799 
d⁄e
;

803 i‡(!
of
->
log
) {

810 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_RDONLY
|
NGX_FILE_NONBLOCK
,

811 
NGX_FILE_OPEN
, 0, 
log
);

814 
fd
 = 
	`ngx_›í_fûe_wøµî
(
«me
, 
of
, 
NGX_FILE_APPEND
,

815 
NGX_FILE_CREATE_OR_OPEN
,

816 
NGX_FILE_DEFAULT_ACCESS
, 
log
);

819 i‡(
fd
 =
NGX_INVALID_FILE
) {

820 
of
->
fd
 = 
NGX_INVALID_FILE
;

821  
NGX_ERROR
;

824 i‡(
	`ngx_fd_öfo
(
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

825 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 
ngx_î∫o
,

826 
ngx_fd_öfo_n
 " \"%V\" faûed", 
«me
);

828 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

829 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

830 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

833 
of
->
fd
 = 
NGX_INVALID_FILE
;

835  
NGX_ERROR
;

838 i‡(
	`ngx_is_dú
(&
fi
)) {

839 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

840 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

841 
ngx_˛o£_fûe_n
 " \"%V\" faûed", 
«me
);

844 
of
->
fd
 = 
NGX_INVALID_FILE
;

847 
of
->
fd
 = fd;

849 i‡(
of
->
ªad_ahód
 && 
	`ngx_fûe_size
(&
fi
Ë> 
NGX_MIN_READ_AHEAD
) {

850 i‡(
	`ngx_ªad_ahód
(
fd
, 
of
->
ªad_ahód
Ë=
NGX_ERROR
) {

851 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

852 
ngx_ªad_ahód_n
 " \"%V\" faûed", 
«me
);

856 i‡(
of
->
dúe˘io
 <
	`ngx_fûe_size
(&
fi
)) {

857 i‡(
	`ngx_dúe˘io_⁄
(
fd
Ë=
NGX_FILE_ERROR
) {

858 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

859 
ngx_dúe˘io_⁄_n
 " \"%V\" faûed", 
«me
);

862 
of
->
is_dúe˘io
 = 1;

867 
d⁄e
:

869 
of
->
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

870 
of
->
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

871 
of
->
size
 = 
	`ngx_fûe_size
(&
fi
);

872 
of
->
fs_size
 = 
	`ngx_fûe_fs_size
(&
fi
);

873 
of
->
is_dú
 = 
	`ngx_is_dú
(&
fi
);

874 
of
->
is_fûe
 = 
	`ngx_is_fûe
(&
fi
);

875 
of
->
is_lök
 = 
	`ngx_is_lök
(&
fi
);

876 
of
->
is_exec
 = 
	`ngx_is_exec
(&
fi
);

878  
NGX_OK
;

879 
	}
}

888 
	$ngx_›í_fûe_add_evít
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

889 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_log_t
 *
log
)

891 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

893 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_VNODE_EVENT
)

894 || !
of
->
evíts


895 || 
fûe
->
evít


896 || 
of
->
fd
 =
NGX_INVALID_FILE


897 || 
fûe
->
u£s
 < 
of
->
mö_u£s
)

902 
fûe
->
u£_evít
 = 0;

904 
fûe
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
log
);

905 i‡(
fûe
->
evít
=
NULL
) {

909 
„v
 = 
	`ngx_Æloc
((
ngx_›í_fûe_ˇche_evít_t
), 
log
);

910 i‡(
„v
 =
NULL
) {

911 
	`ngx_‰ì
(
fûe
->
evít
);

912 
fûe
->
evít
 = 
NULL
;

916 
„v
->
fd
 = 
of
->fd;

917 
„v
->
fûe
 = file;

918 
„v
->
ˇche
 = cache;

920 
fûe
->
evít
->
h™dÀr
 = 
ngx_›í_fûe_ˇche_ªmove
;

921 
fûe
->
evít
->
d©a
 = 
„v
;

929 
fûe
->
evít
->
log
 = 
ngx_cy˛e
->log;

931 i‡(
	`ngx_add_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
, 
NGX_ONESHOT_EVENT
)

932 !
NGX_OK
)

934 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

935 
	`ngx_‰ì
(
fûe
->
evít
);

936 
fûe
->
evít
 = 
NULL
;

948 
	}
}

952 
	$ngx_›í_fûe_˛ónup
(*
d©a
)

954 
ngx_›í_fûe_ˇche_˛ónup_t
 *
c
 = 
d©a
;

956 
c
->
fûe
->
cou¡
--;

958 
	`ngx_˛o£_ˇched_fûe
(
c
->
ˇche
, c->
fûe
, c->
mö_u£s
, c->
log
);

961 
	`ngx_expúe_ﬁd_ˇched_fûes
(
c
->
ˇche
, 1, c->
log
);

962 
	}
}

966 
	$ngx_˛o£_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
,

967 
ngx_ˇched_›í_fûe_t
 *
fûe
, 
ngx_uöt_t
 
mö_u£s
, 
ngx_log_t
 *
log
)

969 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

971 
fûe
->
«me
, fûe->
fd
, fûe->
cou¡
, fûe->
u£s
, fûe->
˛o£
);

973 i‡(!
fûe
->
˛o£
) {

975 
fûe
->
ac˚s£d
 = 
	`ngx_time
();

977 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

979 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
fûe
->
queue
);

981 i‡(
fûe
->
u£s
 >
mö_u£s
 || fûe->
cou¡
) {

986 
	`ngx_›í_fûe_dñ_evít
(
fûe
);

988 i‡(
fûe
->
cou¡
) {

992 i‡(
fûe
->
fd
 !
NGX_INVALID_FILE
) {

994 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

995 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

996 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
);

999 
fûe
->
fd
 = 
NGX_INVALID_FILE
;

1002 i‡(!
fûe
->
˛o£
) {

1006 
	`ngx_‰ì
(
fûe
->
«me
);

1007 
	`ngx_‰ì
(
fûe
);

1008 
	}
}

1012 
	$ngx_›í_fûe_dñ_evít
(
ngx_ˇched_›í_fûe_t
 *
fûe
)

1014 i‡(
fûe
->
evít
 =
NULL
) {

1018 (Ë
	`ngx_dñ_evít
(
fûe
->
evít
, 
NGX_VNODE_EVENT
,

1019 
fûe
->
cou¡
 ? 
NGX_FLUSH_EVENT
 : 
NGX_CLOSE_EVENT
);

1021 
	`ngx_‰ì
(
fûe
->
evít
->
d©a
);

1022 
	`ngx_‰ì
(
fûe
->
evít
);

1023 
fûe
->
evít
 = 
NULL
;

1024 
fûe
->
u£_evít
 = 0;

1025 
	}
}

1029 
	$ngx_expúe_ﬁd_ˇched_fûes
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_uöt_t
 
n
,

1030 
ngx_log_t
 *
log
)

1032 
time_t
 
now
;

1033 
ngx_queue_t
 *
q
;

1034 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1036 
now
 = 
	`ngx_time
();

1044 
n
 < 3) {

1046 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

1050 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

1052 
fûe
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ˇched_›í_fûe_t
, 
queue
);

1054 i‡(
n
++ !0 && 
now
 - 
fûe
->
ac˚s£d
 <
ˇche
->
öa˘ive
) {

1058 
	`ngx_queue_ªmove
(
q
);

1060 
	`ngx_rbåì_dñëe
(&
ˇche
->
rbåì
, &
fûe
->
node
);

1062 
ˇche
->
cuºít
--;

1064 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

1065 "expúêˇched o≥¿fûe: %s", 
fûe
->
«me
);

1067 i‡(!
fûe
->
îr
 && !fûe->
is_dú
) {

1068 
fûe
->
˛o£
 = 1;

1069 
	`ngx_˛o£_ˇched_fûe
(
ˇche
, 
fûe
, 0, 
log
);

1072 
	`ngx_‰ì
(
fûe
->
«me
);

1073 
	`ngx_‰ì
(
fûe
);

1076 
	}
}

1080 
	$ngx_›í_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1081 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1083 
ngx_rbåì_node_t
 **
p
;

1084 
ngx_ˇched_›í_fûe_t
 *
fûe
, *
fûe_ãmp
;

1088 i‡(
node
->
key
 < 
ãmp
->key) {

1090 
p
 = &
ãmp
->
À·
;

1092 } i‡(
node
->
key
 > 
ãmp
->key) {

1094 
p
 = &
ãmp
->
right
;

1098 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1099 
fûe_ãmp
 = (
ngx_ˇched_›í_fûe_t
 *Ë
ãmp
;

1101 
p
 = (
	`ngx_°rcmp
(
fûe
->
«me
, 
fûe_ãmp
->name) < 0)

1102 ? &
ãmp
->
À·
 : &ãmp->
right
;

1105 i‡(*
p
 =
£¡öñ
) {

1109 
ãmp
 = *
p
;

1112 *
p
 = 
node
;

1113 
node
->
∑ª¡
 = 
ãmp
;

1114 
node
->
À·
 = 
£¡öñ
;

1115 
node
->
right
 = 
£¡öñ
;

1116 
	`ngx_rbt_ªd
(
node
);

1117 
	}
}

1120 
ngx_ˇched_›í_fûe_t
 *

1121 
	$ngx_›í_fûe_lookup
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

1122 
uöt32_t
 
hash
)

1124 
ngx_öt_t
 
rc
;

1125 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1126 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1128 
node
 = 
ˇche
->
rbåì
.
roŸ
;

1129 
£¡öñ
 = 
ˇche
->
rbåì
.sentinel;

1131 
node
 !
£¡öñ
) {

1133 i‡(
hash
 < 
node
->
key
) {

1134 
node
 =Çode->
À·
;

1138 i‡(
hash
 > 
node
->
key
) {

1139 
node
 =Çode->
right
;

1145 
fûe
 = (
ngx_ˇched_›í_fûe_t
 *Ë
node
;

1147 
rc
 = 
	`ngx_°rcmp
(
«me
->
d©a
, 
fûe
->name);

1149 i‡(
rc
 == 0) {

1150  
fûe
;

1153 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1156  
NULL
;

1157 
	}
}

1161 
	$ngx_›í_fûe_ˇche_ªmove
(
ngx_evít_t
 *
ev
)

1163 
ngx_ˇched_›í_fûe_t
 *
fûe
;

1164 
ngx_›í_fûe_ˇche_evít_t
 *
„v
;

1166 
„v
 = 
ev
->
d©a
;

1167 
fûe
 = 
„v
->file;

1169 
	`ngx_queue_ªmove
(&
fûe
->
queue
);

1171 
	`ngx_rbåì_dñëe
(&
„v
->
ˇche
->
rbåì
, &
fûe
->
node
);

1173 
„v
->
ˇche
->
cuºít
--;

1176 
fûe
->
evít
 = 
NULL
;

1177 
fûe
->
u£_evít
 = 0;

1179 
fûe
->
˛o£
 = 1;

1181 
	`ngx_˛o£_ˇched_fûe
(
„v
->
ˇche
, 
fûe
, 0, 
ev
->
log
);

1185 
	`ngx_‰ì
(
ev
->
d©a
);

1186 
	`ngx_‰ì
(
ev
);

1187 
	}
}

	@src/core/ngx_open_file_cache.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_OPEN_FILE_CACHE_H_INCLUDED_


13 
	#_NGX_OPEN_FILE_CACHE_H_INCLUDED_


	)

16 
	#NGX_OPEN_FILE_DIRECTIO_OFF
 
NGX_MAX_OFF_T_VALUE


	)

20 
ngx_fd_t
 
	mfd
;

21 
ngx_fûe_uniq_t
 
	muniq
;

22 
time_t
 
	mmtime
;

23 
off_t
 
	msize
;

24 
off_t
 
	mfs_size
;

25 
off_t
 
	mdúe˘io
;

26 
size_t
 
	mªad_ahód
;

28 
ngx_îr_t
 
	mîr
;

29 *
	mÁûed
;

31 
time_t
 
	mvÆid
;

33 
ngx_uöt_t
 
	mmö_u£s
;

35 #i‡(
NGX_HAVE_OPENAT
)

36 
size_t
 
	mdißbÀ_symlöks_‰om
;

37 
	mdißbÀ_symlöks
:2;

40 
	mã°_dú
:1;

41 
	mã°_⁄ly
:1;

42 
	mlog
:1;

43 
	mîr‹s
:1;

44 
	mevíts
:1;

46 
	mis_dú
:1;

47 
	mis_fûe
:1;

48 
	mis_lök
:1;

49 
	mis_exec
:1;

50 
	mis_dúe˘io
:1;

51 } 
	tngx_›í_fûe_öfo_t
;

54 
ngx_ˇched_›í_fûe_s
 
	tngx_ˇched_›í_fûe_t
;

56 
	sngx_ˇched_›í_fûe_s
 {

57 
ngx_rbåì_node_t
 
	mnode
;

58 
ngx_queue_t
 
	mqueue
;

60 
u_ch¨
 *
	m«me
;

61 
time_t
 
	m¸óãd
;

62 
time_t
 
	mac˚s£d
;

64 
ngx_fd_t
 
	mfd
;

65 
ngx_fûe_uniq_t
 
	muniq
;

66 
time_t
 
	mmtime
;

67 
off_t
 
	msize
;

68 
ngx_îr_t
 
	mîr
;

70 
uöt32_t
 
	mu£s
;

72 #i‡(
NGX_HAVE_OPENAT
)

73 
size_t
 
	mdißbÀ_symlöks_‰om
;

74 
	mdißbÀ_symlöks
:2;

77 
	mcou¡
:24;

78 
	m˛o£
:1;

79 
	mu£_evít
:1;

81 
	mis_dú
:1;

82 
	mis_fûe
:1;

83 
	mis_lök
:1;

84 
	mis_exec
:1;

85 
	mis_dúe˘io
:1;

87 
ngx_evít_t
 *
	mevít
;

92 
ngx_rbåì_t
 
	mrbåì
;

93 
ngx_rbåì_node_t
 
	m£¡öñ
;

94 
ngx_queue_t
 
	mexpúe_queue
;

96 
ngx_uöt_t
 
	mcuºít
;

97 
ngx_uöt_t
 
	mmax
;

98 
time_t
 
	möa˘ive
;

99 } 
	tngx_›í_fûe_ˇche_t
;

103 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

104 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

105 
ngx_uöt_t
 
	mmö_u£s
;

106 
ngx_log_t
 *
	mlog
;

107 } 
	tngx_›í_fûe_ˇche_˛ónup_t
;

113 *
	md©a
;

114 
ngx_evít_t
 *
	mªad
;

115 
ngx_evít_t
 *
	mwrôe
;

116 
ngx_fd_t
 
	mfd
;

118 
ngx_ˇched_›í_fûe_t
 *
	mfûe
;

119 
ngx_›í_fûe_ˇche_t
 *
	mˇche
;

120 } 
	tngx_›í_fûe_ˇche_evít_t
;

123 
ngx_›í_fûe_ˇche_t
 *
ngx_›í_fûe_ˇche_öô
(
ngx_poﬁ_t
 *
poﬁ
,

124 
ngx_uöt_t
 
max
, 
time_t
 
öa˘ive
);

125 
ngx_öt_t
 
ngx_›í_ˇched_fûe
(
ngx_›í_fûe_ˇche_t
 *
ˇche
, 
ngx_°r_t
 *
«me
,

126 
ngx_›í_fûe_öfo_t
 *
of
, 
ngx_poﬁ_t
 *
poﬁ
);

	@src/core/ngx_output_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
	#NGX_SENDFILE_LIMIT
 4096

	)

27 
	#NGX_NONE
 1

	)

30 
ngx_ölöe
 
ngx_öt_t


31 
ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
);

32 
ngx_öt_t
 
ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
,

33 
ngx_chaö_t
 **
chaö
,Çgx_chaö_à*
ö
);

34 
ngx_öt_t
 
ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

35 
off_t
 
bsize
);

36 
ngx_öt_t
 
ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

37 
off_t
 
bsize
);

38 
ngx_öt_t
 
ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
);

41 
ngx_öt_t


42 
	$ngx_ouçut_chaö
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

44 
off_t
 
bsize
;

45 
ngx_öt_t
 
rc
, 
œ°
;

46 
ngx_chaö_t
 *
˛
, *
out
, **
œ°_out
;

48 i‡(
˘x
->
ö
 =
NULL
 && ctx->
busy
 == NULL) {

56 i‡(
ö
 =
NULL
) {

57  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

60 i‡(
ö
->
√xt
 =
NULL


61 #i‡(
NGX_SENDFILE_LIMIT
)

62 && !(
ö
->
buf
->
ö_fûe
 && in->buf->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

64 && 
	`ngx_ouçut_chaö_as_is
(
˘x
, 
ö
->
buf
))

66  
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
ö
);

72 i‡(
ö
) {

73 i‡(
	`ngx_ouçut_chaö_add_c›y
(
˘x
->
poﬁ
, &˘x->
ö
, inË=
NGX_ERROR
) {

74  
NGX_ERROR
;

78 
out
 = 
NULL
;

79 
œ°_out
 = &
out
;

80 
œ°
 = 
NGX_NONE
;

84 #i‡(
NGX_HAVE_FILE_AIO
)

85 i‡(
˘x
->
aio
) {

86  
NGX_AGAIN
;

90 
˘x
->
ö
) {

97 
bsize
 = 
	`ngx_buf_size
(
˘x
->
ö
->
buf
);

99 i‡(
bsize
 =0 && !
	`ngx_buf_•ecül
(
˘x
->
ö
->
buf
)) {

101 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

104 
˘x
->
ö
->
buf
->
ãmp‹¨y
,

105 
˘x
->
ö
->
buf
->
ªcy˛ed
,

106 
˘x
->
ö
->
buf
->
ö_fûe
,

107 
˘x
->
ö
->
buf
->
°¨t
,

108 
˘x
->
ö
->
buf
->
pos
,

109 
˘x
->
ö
->
buf
->
œ°
,

110 
˘x
->
ö
->
buf
->
fûe
,

111 
˘x
->
ö
->
buf
->
fûe_pos
,

112 
˘x
->
ö
->
buf
->
fûe_œ°
);

114 
	`ngx_debug_poöt
();

116 
˘x
->
ö
 = ctx->ö->
√xt
;

121 i‡(
	`ngx_ouçut_chaö_as_is
(
˘x
, ctx->
ö
->
buf
)) {

125 
˛
 = 
˘x
->
ö
;

126 
˘x
->
ö
 = 
˛
->
√xt
;

128 *
œ°_out
 = 
˛
;

129 
œ°_out
 = &
˛
->
√xt
;

130 
˛
->
√xt
 = 
NULL
;

135 i‡(
˘x
->
buf
 =
NULL
) {

137 
rc
 = 
	`ngx_ouçut_chaö_Æign_fûe_buf
(
˘x
, 
bsize
);

139 i‡(
rc
 =
NGX_ERROR
) {

140  
NGX_ERROR
;

143 i‡(
rc
 !
NGX_OK
) {

145 i‡(
˘x
->
‰ì
) {

149 
˛
 = 
˘x
->
‰ì
;

150 
˘x
->
buf
 = 
˛
->buf;

151 
˘x
->
‰ì
 = 
˛
->
√xt
;

153 
	`ngx_‰ì_chaö
(
˘x
->
poﬁ
, 
˛
);

155 } i‡(
out
 || 
˘x
->
Æloˇãd
 =˘x->
bufs
.
num
) {

159 } i‡(
	`ngx_ouçut_chaö_gë_buf
(
˘x
, 
bsize
Ë!
NGX_OK
) {

160  
NGX_ERROR
;

165 
rc
 = 
	`ngx_ouçut_chaö_c›y_buf
(
˘x
);

167 i‡(
rc
 =
NGX_ERROR
) {

168  
rc
;

171 i‡(
rc
 =
NGX_AGAIN
) {

172 i‡(
out
) {

176  
rc
;

181 i‡(
	`ngx_buf_size
(
˘x
->
ö
->
buf
) == 0) {

182 
˘x
->
ö
 = ctx->ö->
√xt
;

185 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

186 i‡(
˛
 =
NULL
) {

187  
NGX_ERROR
;

190 
˛
->
buf
 = 
˘x
->buf;

191 
˛
->
√xt
 = 
NULL
;

192 *
œ°_out
 = 
˛
;

193 
œ°_out
 = &
˛
->
√xt
;

194 
˘x
->
buf
 = 
NULL
;

197 i‡(
out
 =
NULL
 && 
œ°
 !
NGX_NONE
) {

199 i‡(
˘x
->
ö
) {

200  
NGX_AGAIN
;

203  
œ°
;

206 
œ°
 = 
˘x
->
	`ouçut_fûãr
(˘x->
fûãr_˘x
, 
out
);

208 i‡(
œ°
 =
NGX_ERROR
 ||Üa° =
NGX_DONE
) {

209  
œ°
;

212 
	`ngx_chaö_upd©e_chaös
(
˘x
->
poﬁ
, &˘x->
‰ì
, &˘x->
busy
, &
out
,

213 
˘x
->
èg
);

214 
œ°_out
 = &
out
;

216 
	}
}

219 
ngx_ölöe
 
ngx_öt_t


220 
	$ngx_ouçut_chaö_as_is
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_buf_t
 *
buf
)

222 
ngx_uöt_t
 
£ndfûe
;

224 i‡(
	`ngx_buf_•ecül
(
buf
)) {

228 i‡(
buf
->
ö_fûe
 && buf->
fûe
->
dúe˘io
) {

232 
£ndfûe
 = 
˘x
->sendfile;

234 #i‡(
NGX_SENDFILE_LIMIT
)

236 i‡(
buf
->
ö_fûe
 && buf->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

237 
£ndfûe
 = 0;

242 i‡(!
£ndfûe
) {

244 i‡(!
	`ngx_buf_ö_mem‹y
(
buf
)) {

248 
buf
->
ö_fûe
 = 0;

251 i‡(
˘x
->
√ed_ö_mem‹y
 && !
	`ngx_buf_ö_mem‹y
(
buf
)) {

255 i‡(
˘x
->
√ed_ö_ãmp
 && (
buf
->
mem‹y
 || buf->
mm≠
)) {

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_ouçut_chaö_add_c›y
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_chaö_t
 **
chaö
,

265 
ngx_chaö_t
 *
ö
)

267 
ngx_chaö_t
 *
˛
, **
Œ
;

268 #i‡(
NGX_SENDFILE_LIMIT
)

269 
ngx_buf_t
 *
b
, *
buf
;

272 
Œ
 = 
chaö
;

274 
˛
 = *
chaö
; cl; c»˛->
√xt
) {

275 
Œ
 = &
˛
->
√xt
;

278 
ö
) {

280 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

281 i‡(
˛
 =
NULL
) {

282  
NGX_ERROR
;

285 #i‡(
NGX_SENDFILE_LIMIT
)

287 
buf
 = 
ö
->buf;

289 i‡(
buf
->
ö_fûe


290 && 
buf
->
fûe_pos
 < 
NGX_SENDFILE_LIMIT


291 && 
buf
->
fûe_œ°
 > 
NGX_SENDFILE_LIMIT
)

295 
b
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

296 i‡(
b
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

302 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

303 
buf
->
pos
 +(
ssize_t
Ë(
NGX_SENDFILE_LIMIT
 - buf->
fûe_pos
);

304 
b
->
œ°
 = 
buf
->
pos
;

307 
buf
->
fûe_pos
 = 
NGX_SENDFILE_LIMIT
;

308 
b
->
fûe_œ°
 = 
NGX_SENDFILE_LIMIT
;

310 
˛
->
buf
 = 
b
;

313 
˛
->
buf
 = buf;

314 
ö
 = in->
√xt
;

318 
˛
->
buf
 = 
ö
->buf;

319 
ö
 = in->
√xt
;

323 
˛
->
√xt
 = 
NULL
;

324 *
Œ
 = 
˛
;

325 
Œ
 = &
˛
->
√xt
;

328  
NGX_OK
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_ouçut_chaö_Æign_fûe_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

335 
size_t
 
size
;

336 
ngx_buf_t
 *
ö
;

338 
ö
 = 
˘x
->ö->
buf
;

340 i‡(
ö
->
fûe
 =
NULL
 || !ö->fûe->
dúe˘io
) {

341  
NGX_DECLINED
;

344 
˘x
->
dúe˘io
 = 1;

346 
size
 = (
size_t
Ë(
ö
->
fûe_pos
 - (ö->fûe_po†& ~(
˘x
->
Æignmít
 - 1)));

348 i‡(
size
 == 0) {

350 i‡(
bsize
 >(
off_t
Ë
˘x
->
bufs
.
size
) {

351  
NGX_DECLINED
;

354 
size
 = (
size_t
Ë
bsize
;

357 
size
 = (
size_t
Ë
˘x
->
Æignmít
 - size;

359 i‡((
off_t
Ë
size
 > 
bsize
) {

360 
size
 = (
size_t
Ë
bsize
;

364 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 
size
);

365 i‡(
˘x
->
buf
 =
NULL
) {

366  
NGX_ERROR
;

374 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

375 
˘x
->
u«lig√d
 = 1;

378  
NGX_OK
;

379 
	}
}

382 
ngx_öt_t


383 
	$ngx_ouçut_chaö_gë_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
off_t
 
bsize
)

385 
size_t
 
size
;

386 
ngx_buf_t
 *
b
, *
ö
;

387 
ngx_uöt_t
 
ªcy˛ed
;

389 
ö
 = 
˘x
->ö->
buf
;

390 
size
 = 
˘x
->
bufs
.size;

391 
ªcy˛ed
 = 1;

393 i‡(
ö
->
œ°_ö_chaö
) {

395 i‡(
bsize
 < (
off_t
Ë
size
) {

402 
size
 = (
size_t
Ë
bsize
;

403 
ªcy˛ed
 = 0;

405 } i‡(!
˘x
->
dúe˘io


406 && 
˘x
->
bufs
.
num
 == 1

407 && (
bsize
 < (
off_t
Ë(
size
 + size / 4)))

415 
size
 = (
size_t
Ë
bsize
;

416 
ªcy˛ed
 = 0;

420 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
poﬁ
);

421 i‡(
b
 =
NULL
) {

422  
NGX_ERROR
;

425 i‡(
˘x
->
dúe˘io
) {

432 
b
->
°¨t
 = 
	`ngx_pmemÆign
(
˘x
->
poﬁ
, 
size
, (
size_t
Ë˘x->
Æignmít
);

433 i‡(
b
->
°¨t
 =
NULL
) {

434  
NGX_ERROR
;

438 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

439 i‡(
b
->
°¨t
 =
NULL
) {

440  
NGX_ERROR
;

444 
b
->
pos
 = b->
°¨t
;

445 
b
->
œ°
 = b->
°¨t
;

446 
b
->
íd
 = b->
œ°
 + 
size
;

447 
b
->
ãmp‹¨y
 = 1;

448 
b
->
èg
 = 
˘x
->tag;

449 
b
->
ªcy˛ed
 =Ñecycled;

451 
˘x
->
buf
 = 
b
;

452 
˘x
->
Æloˇãd
++;

454  
NGX_OK
;

455 
	}
}

458 
ngx_öt_t


459 
	$ngx_ouçut_chaö_c›y_buf
(
ngx_ouçut_chaö_˘x_t
 *
˘x
)

461 
off_t
 
size
;

462 
ssize_t
 
n
;

463 
ngx_buf_t
 *
§c
, *
d°
;

464 
ngx_uöt_t
 
£ndfûe
;

466 
§c
 = 
˘x
->
ö
->
buf
;

467 
d°
 = 
˘x
->
buf
;

469 
size
 = 
	`ngx_buf_size
(
§c
);

470 
size
 = 
	`ngx_mö
(size, 
d°
->
íd
 - d°->
pos
);

472 
£ndfûe
 = 
˘x
->£ndfûê& !˘x->
dúe˘io
;

474 #i‡(
NGX_SENDFILE_LIMIT
)

476 i‡(
§c
->
ö_fûe
 && src->
fûe_pos
 >
NGX_SENDFILE_LIMIT
) {

477 
£ndfûe
 = 0;

482 i‡(
	`ngx_buf_ö_mem‹y
(
§c
)) {

483 
	`ngx_mem˝y
(
d°
->
pos
, 
§c
->pos, (
size_t
Ë
size
);

484 
§c
->
pos
 +(
size_t
Ë
size
;

485 
d°
->
œ°
 +(
size_t
Ë
size
;

487 i‡(
§c
->
ö_fûe
) {

489 i‡(
£ndfûe
) {

490 
d°
->
ö_fûe
 = 1;

491 
d°
->
fûe
 = 
§c
->file;

492 
d°
->
fûe_pos
 = 
§c
->file_pos;

493 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
size
;

496 
d°
->
ö_fûe
 = 0;

499 
§c
->
fûe_pos
 +
size
;

502 
d°
->
ö_fûe
 = 0;

505 i‡(
§c
->
pos
 =§c->
œ°
) {

506 
d°
->
Êush
 = 
§c
->flush;

507 
d°
->
œ°_buf
 = 
§c
->last_buf;

508 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

513 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

515 i‡(
˘x
->
u«lig√d
) {

516 i‡(
	`ngx_dúe˘io_off
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

518 
ngx_dúe˘io_off_n
 " \"%s\" failed",

519 
§c
->
fûe
->
«me
.
d©a
);

525 #i‡(
NGX_HAVE_FILE_AIO
)

527 i‡(
˘x
->
aio_h™dÀr
) {

528 
n
 = 
	`ngx_fûe_aio_ªad
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

529 
§c
->
fûe_pos
, 
˘x
->
poﬁ
);

530 i‡(
n
 =
NGX_AGAIN
) {

531 
˘x
->
	`aio_h™dÀr
(˘x, 
§c
->
fûe
);

532  
NGX_AGAIN
;

536 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
,

537 
§c
->
fûe_pos
);

541 
n
 = 
	`ngx_ªad_fûe
(
§c
->
fûe
, 
d°
->
pos
, (
size_t
Ë
size
, src->
fûe_pos
);

545 #i‡(
NGX_HAVE_ALIGNED_DIRECTIO
)

547 i‡(
˘x
->
u«lig√d
) {

548 
ngx_îr_t
 
îr
;

550 
îr
 = 
ngx_î∫o
;

552 i‡(
	`ngx_dúe˘io_⁄
(
§c
->
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

553 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 
ngx_î∫o
,

554 
ngx_dúe˘io_⁄_n
 " \"%s\" failed",

555 
§c
->
fûe
->
«me
.
d©a
);

558 
	`ngx_£t_î∫o
(
îr
);

560 
˘x
->
u«lig√d
 = 0;

565 i‡(
n
 =
NGX_ERROR
) {

566  (
ngx_öt_t
Ë
n
;

569 i‡(
n
 !
size
) {

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
poﬁ
->
log
, 0,

571 
ngx_ªad_fûe_n
 "Ñead only %z of %O from \"%s\"",

572 
n
, 
size
, 
§c
->
fûe
->
«me
.
d©a
);

573  
NGX_ERROR
;

576 
d°
->
œ°
 +
n
;

578 i‡(
£ndfûe
) {

579 
d°
->
ö_fûe
 = 1;

580 
d°
->
fûe
 = 
§c
->file;

581 
d°
->
fûe_pos
 = 
§c
->file_pos;

582 
d°
->
fûe_œ°
 = 
§c
->
fûe_pos
 + 
n
;

585 
d°
->
ö_fûe
 = 0;

588 
§c
->
fûe_pos
 +
n
;

590 i‡(
§c
->
fûe_pos
 =§c->
fûe_œ°
) {

591 
d°
->
Êush
 = 
§c
->flush;

592 
d°
->
œ°_buf
 = 
§c
->last_buf;

593 
d°
->
œ°_ö_chaö
 = 
§c
->last_in_chain;

597  
NGX_OK
;

598 
	}
}

601 
ngx_öt_t


602 
	$ngx_chaö_wrôî
(*
d©a
, 
ngx_chaö_t
 *
ö
)

604 
ngx_chaö_wrôî_˘x_t
 *
˘x
 = 
d©a
;

606 
off_t
 
size
;

607 
ngx_chaö_t
 *
˛
;

608 
ngx_c⁄√˘i⁄_t
 *
c
;

610 
c
 = 
˘x
->
c⁄√˘i⁄
;

612 
size
 = 0; 
ö
; i¿ö->
√xt
) {

615 i‡(
	`ngx_buf_size
(
ö
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(in->buf)) {

616 
	`ngx_debug_poöt
();

620 
size
 +
	`ngx_buf_size
(
ö
->
buf
);

622 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

624 
ö
->
buf
->
Êush
, 
	`ngx_buf_size
(in->buf));

626 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

627 i‡(
˛
 =
NULL
) {

628  
NGX_ERROR
;

631 
˛
->
buf
 = 
ö
->buf;

632 
˛
->
√xt
 = 
NULL
;

633 *
˘x
->
œ°
 = 
˛
;

634 
˘x
->
œ°
 = &
˛
->
√xt
;

637 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

638 "chaö wrôî in: %p", 
˘x
->
out
);

640 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

643 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

644 
	`ngx_debug_poöt
();

649 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

652 i‡(
size
 =0 && !
c
->
buf„ªd
) {

653  
NGX_OK
;

656 
˘x
->
out
 = 
c
->
	`£nd_chaö
(c, ctx->out, ctx->
limô
);

658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
c
->
log
, 0,

659 "chaö wrôî out: %p", 
˘x
->
out
);

661 i‡(
˘x
->
out
 =
NGX_CHAIN_ERROR
) {

662  
NGX_ERROR
;

665 i‡(
˘x
->
out
 =
NULL
) {

666 
˘x
->
œ°
 = &˘x->
out
;

668 i‡(!
c
->
buf„ªd
) {

669  
NGX_OK
;

673  
NGX_AGAIN
;

674 
	}
}

	@src/core/ngx_palloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 *
ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

13 *
ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

16 
ngx_poﬁ_t
 *

17 
	$ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
)

19 
ngx_poﬁ_t
 *
p
;

21 
p
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
size
, 
log
);

22 i‡(
p
 =
NULL
) {

23  
NULL
;

26 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

27 
p
->
d
.
íd
 = (
u_ch¨
 *Ë∞+ 
size
;

28 
p
->
d
.
√xt
 = 
NULL
;

29 
p
->
d
.
Áûed
 = 0;

31 
size
 = sizê- (
ngx_poﬁ_t
);

32 
p
->
max
 = (
size
 < 
NGX_MAX_ALLOC_FROM_POOL
) ? size : NGX_MAX_ALLOC_FROM_POOL;

34 
p
->
cuºít
 =Ö;

35 
p
->
chaö
 = 
NULL
;

36 
p
->
œrge
 = 
NULL
;

37 
p
->
˛ónup
 = 
NULL
;

38 
p
->
log
 =Üog;

40  
p
;

41 
	}
}

45 
	$ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

47 
ngx_poﬁ_t
 *
p
, *
n
;

48 
ngx_poﬁ_œrge_t
 *
l
;

49 
ngx_poﬁ_˛ónup_t
 *
c
;

51 
c
 = 
poﬁ
->
˛ónup
; c; c = c->
√xt
) {

52 i‡(
c
->
h™dÀr
) {

53 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

54 "ru¿˛ónup: %p", 
c
);

55 
c
->
	`h™dÀr
(c->
d©a
);

59 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

61 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0, "‰ì: %p", 
l
->
Æloc
);

63 i‡(
l
->
Æloc
) {

64 
	`ngx_‰ì
(
l
->
Æloc
);

68 #i‡(
NGX_DEBUG
)

75 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

76 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

77 "‰ì: %p, unu£d: %uz", 
p
,Ö->
d
.
íd
 -Ö->d.
œ°
);

79 i‡(
n
 =
NULL
) {

86 
p
 = 
poﬁ
, 
n
 =Öoﬁ->
d
.
√xt
; ;Ö =Ç,Ç =Ç->d.next) {

87 
	`ngx_‰ì
(
p
);

89 i‡(
n
 =
NULL
) {

93 
	}
}

97 
	$ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
)

99 
ngx_poﬁ_t
 *
p
;

100 
ngx_poﬁ_œrge_t
 *
l
;

102 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

103 i‡(
l
->
Æloc
) {

104 
	`ngx_‰ì
(
l
->
Æloc
);

108 
poﬁ
->
œrge
 = 
NULL
;

110 
p
 = 
poﬁ
;Ö;Ö =Ö->
d
.
√xt
) {

111 
p
->
d
.
œ°
 = (
u_ch¨
 *Ë∞+ (
ngx_poﬁ_t
);

113 
	}
}

117 
	$ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

119 
u_ch¨
 *
m
;

120 
ngx_poﬁ_t
 *
p
;

122 i‡(
size
 <
poﬁ
->
max
) {

124 
p
 = 
poﬁ
->
cuºít
;

127 
m
 = 
	`ngx_Æign_±r
(
p
->
d
.
œ°
, 
NGX_ALIGNMENT
);

129 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

130 
p
->
d
.
œ°
 = 
m
 + 
size
;

132  
m
;

135 
p
 =Ö->
d
.
√xt
;

137 } 
p
);

139  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

142  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

143 
	}
}

147 
	$ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

149 
u_ch¨
 *
m
;

150 
ngx_poﬁ_t
 *
p
;

152 i‡(
size
 <
poﬁ
->
max
) {

154 
p
 = 
poﬁ
->
cuºít
;

157 
m
 = 
p
->
d
.
œ°
;

159 i‡((
size_t
Ë(
p
->
d
.
íd
 - 
m
Ë>
size
) {

160 
p
->
d
.
œ°
 = 
m
 + 
size
;

162  
m
;

165 
p
 =Ö->
d
.
√xt
;

167 } 
p
);

169  
	`ngx_∑Œoc_block
(
poﬁ
, 
size
);

172  
	`ngx_∑Œoc_œrge
(
poﬁ
, 
size
);

173 
	}
}

177 
	$ngx_∑Œoc_block
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

179 
u_ch¨
 *
m
;

180 
size_t
 
psize
;

181 
ngx_poﬁ_t
 *
p
, *
√w
, *
cuºít
;

183 
psize
 = (
size_t
Ë(
poﬁ
->
d
.
íd
 - (
u_ch¨
 *)Öool);

185 
m
 = 
	`ngx_memÆign
(
NGX_POOL_ALIGNMENT
, 
psize
, 
poﬁ
->
log
);

186 i‡(
m
 =
NULL
) {

187  
NULL
;

190 
√w
 = (
ngx_poﬁ_t
 *Ë
m
;

192 
√w
->
d
.
íd
 = 
m
 + 
psize
;

193 
√w
->
d
.
√xt
 = 
NULL
;

194 
√w
->
d
.
Áûed
 = 0;

196 
m
 +(
ngx_poﬁ_d©a_t
);

197 
m
 = 
	`ngx_Æign_±r
(m, 
NGX_ALIGNMENT
);

198 
√w
->
d
.
œ°
 = 
m
 + 
size
;

200 
cuºít
 = 
poﬁ
->current;

202 
p
 = 
cuºít
;Ö->
d
.
√xt
;Ö =Ö->d.next) {

203 i‡(
p
->
d
.
Áûed
++ > 4) {

204 
cuºít
 = 
p
->
d
.
√xt
;

208 
p
->
d
.
√xt
 = 
√w
;

210 
poﬁ
->
cuºít
 = cuºíà? cuºíà: 
√w
;

212  
m
;

213 
	}
}

217 
	$ngx_∑Œoc_œrge
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

219 *
p
;

220 
ngx_uöt_t
 
n
;

221 
ngx_poﬁ_œrge_t
 *
œrge
;

223 
p
 = 
	`ngx_Æloc
(
size
, 
poﬁ
->
log
);

224 i‡(
p
 =
NULL
) {

225  
NULL
;

228 
n
 = 0;

230 
œrge
 = 
poﬁ
->œrge;Ü¨ge;Ü¨gêœrge->
√xt
) {

231 i‡(
œrge
->
Æloc
 =
NULL
) {

232 
œrge
->
Æloc
 = 
p
;

233  
p
;

236 i‡(
n
++ > 3) {

241 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

242 i‡(
œrge
 =
NULL
) {

243 
	`ngx_‰ì
(
p
);

244  
NULL
;

247 
œrge
->
Æloc
 = 
p
;

248 
œrge
->
√xt
 = 
poﬁ
->large;

249 
poﬁ
->
œrge
 =Üarge;

251  
p
;

252 
	}
}

256 
	$ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
)

258 *
p
;

259 
ngx_poﬁ_œrge_t
 *
œrge
;

261 
p
 = 
	`ngx_memÆign
(
Æignmít
, 
size
, 
poﬁ
->
log
);

262 i‡(
p
 =
NULL
) {

263  
NULL
;

266 
œrge
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_poﬁ_œrge_t
));

267 i‡(
œrge
 =
NULL
) {

268 
	`ngx_‰ì
(
p
);

269  
NULL
;

272 
œrge
->
Æloc
 = 
p
;

273 
œrge
->
√xt
 = 
poﬁ
->large;

274 
poﬁ
->
œrge
 =Üarge;

276  
p
;

277 
	}
}

280 
ngx_öt_t


281 
	$ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
)

283 
ngx_poﬁ_œrge_t
 *
l
;

285 
l
 = 
poﬁ
->
œrge
;Ü;Ü =Ü->
√xt
) {

286 i‡(
p
 =
l
->
Æloc
) {

287 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
poﬁ
->
log
, 0,

288 "‰ì: %p", 
l
->
Æloc
);

289 
	`ngx_‰ì
(
l
->
Æloc
);

290 
l
->
Æloc
 = 
NULL
;

292  
NGX_OK
;

296  
NGX_DECLINED
;

297 
	}
}

301 
	$ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

303 *
p
;

305 
p
 = 
	`ngx_∑Œoc
(
poﬁ
, 
size
);

306 i‡(
p
) {

307 
	`ngx_memzîo
(
p
, 
size
);

310  
p
;

311 
	}
}

314 
ngx_poﬁ_˛ónup_t
 *

315 
	$ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
)

317 
ngx_poﬁ_˛ónup_t
 *
c
;

319 
c
 = 
	`ngx_∑Œoc
(
p
, (
ngx_poﬁ_˛ónup_t
));

320 i‡(
c
 =
NULL
) {

321  
NULL
;

324 i‡(
size
) {

325 
c
->
d©a
 = 
	`ngx_∑Œoc
(
p
, 
size
);

326 i‡(
c
->
d©a
 =
NULL
) {

327  
NULL
;

331 
c
->
d©a
 = 
NULL
;

334 
c
->
h™dÀr
 = 
NULL
;

335 
c
->
√xt
 = 
p
->
˛ónup
;

337 
p
->
˛ónup
 = 
c
;

339 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
p
->
log
, 0, "add cÀ™up: %p", 
c
);

341  
c
;

342 
	}
}

346 
	$ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
)

348 
ngx_poﬁ_˛ónup_t
 *
c
;

349 
ngx_poﬁ_˛ónup_fûe_t
 *
cf
;

351 
c
 = 
p
->
˛ónup
; c; c = c->
√xt
) {

352 i‡(
c
->
h™dÀr
 =
ngx_poﬁ_˛ónup_fûe
) {

354 
cf
 = 
c
->
d©a
;

356 i‡(
cf
->
fd
 == fd) {

357 
c
->
	`h™dÀr
(
cf
);

358 
c
->
h™dÀr
 = 
NULL
;

363 
	}
}

367 
	$ngx_poﬁ_˛ónup_fûe
(*
d©a
)

369 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

371 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d",

372 
c
->
fd
);

374 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

376 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

378 
	}
}

382 
	$ngx_poﬁ_dñëe_fûe
(*
d©a
)

384 
ngx_poﬁ_˛ónup_fûe_t
 *
c
 = 
d©a
;

386 
ngx_îr_t
 
îr
;

388 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
c
->
log
, 0, "file cleanup: fd:%d %s",

389 
c
->
fd
, c->
«me
);

391 i‡(
	`ngx_dñëe_fûe
(
c
->
«me
Ë=
NGX_FILE_ERROR
) {

392 
îr
 = 
ngx_î∫o
;

394 i‡(
îr
 !
NGX_ENOENT
) {

395 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
îr
,

396 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

400 i‡(
	`ngx_˛o£_fûe
(
c
->
fd
Ë=
NGX_FILE_ERROR
) {

401 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

402 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
c
->
«me
);

404 
	}
}

410 
	$ngx_gë_ˇched_block
(
size_t
 
size
)

412 *
p
;

413 
ngx_ˇched_block_¶Ÿ_t
 *
¶Ÿ
;

415 i‡(
ngx_cy˛e
->
ˇche
 =
NULL
) {

416  
NULL
;

419 
¶Ÿ
 = &
ngx_cy˛e
->
ˇche
[(
size
 + 
ngx_∑gesize
 - 1) /Çgx_pagesize];

421 
¶Ÿ
->
åõs
++;

423 i‡(
¶Ÿ
->
numbî
) {

424 
p
 = 
¶Ÿ
->
block
;

425 
¶Ÿ
->
block
 = slŸ->block->
√xt
;

426 
¶Ÿ
->
numbî
--;

427  
p
;

430  
NULL
;

431 
	}
}

	@src/core/ngx_palloc.h

8 #i‚de‡
_NGX_PALLOC_H_INCLUDED_


9 
	#_NGX_PALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

20 
	#NGX_MAX_ALLOC_FROM_POOL
 (
ngx_∑gesize
 - 1)

	)

22 
	#NGX_DEFAULT_POOL_SIZE
 (16 * 1024)

	)

24 
	#NGX_POOL_ALIGNMENT
 16

	)

25 
	#NGX_MIN_POOL_SIZE
 \

26 
	`ngx_Æign
(((
ngx_poﬁ_t
Ë+ 2 * (
ngx_poﬁ_œrge_t
)), \

27 
NGX_POOL_ALIGNMENT
)

	)

30 (*
	tngx_poﬁ_˛ónup_±
)(*
	td©a
);

32 
ngx_poﬁ_˛ónup_s
 
	tngx_poﬁ_˛ónup_t
;

34 
	sngx_poﬁ_˛ónup_s
 {

35 
ngx_poﬁ_˛ónup_±
 
h™dÀr
;

36 *
d©a
;

37 
ngx_poﬁ_˛ónup_t
 *
√xt
;

41 
ngx_poﬁ_œrge_s
 
	tngx_poﬁ_œrge_t
;

43 
	sngx_poﬁ_œrge_s
 {

44 
ngx_poﬁ_œrge_t
 *
√xt
;

45 *
Æloc
;

50 
u_ch¨
 *
œ°
;

51 
u_ch¨
 *
íd
;

52 
ngx_poﬁ_t
 *
√xt
;

53 
ngx_uöt_t
 
Áûed
;

54 } 
	tngx_poﬁ_d©a_t
;

57 
	sngx_poﬁ_s
 {

58 
ngx_poﬁ_d©a_t
 
d
;

59 
size_t
 
max
;

60 
ngx_poﬁ_t
 *
cuºít
;

61 
ngx_chaö_t
 *
chaö
;

62 
ngx_poﬁ_œrge_t
 *
œrge
;

63 
ngx_poﬁ_˛ónup_t
 *
˛ónup
;

64 
ngx_log_t
 *
log
;

69 
ngx_fd_t
 
fd
;

70 
u_ch¨
 *
«me
;

71 
ngx_log_t
 *
log
;

72 } 
	tngx_poﬁ_˛ónup_fûe_t
;

75 *
	`ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

76 *
	`ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

78 
ngx_poﬁ_t
 *
	`ngx_¸óã_poﬁ
(
size_t
 
size
, 
ngx_log_t
 *
log
);

79 
	`ngx_de°roy_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

80 
	`ngx_ª£t_poﬁ
(
ngx_poﬁ_t
 *
poﬁ
);

82 *
	`ngx_∑Œoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

83 *
	`ngx_≤Æloc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

84 *
	`ngx_pˇŒoc
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

85 *
	`ngx_pmemÆign
(
ngx_poﬁ_t
 *
poﬁ
, 
size_t
 
size
, size_à
Æignmít
);

86 
ngx_öt_t
 
	`ngx_p‰ì
(
ngx_poﬁ_t
 *
poﬁ
, *
p
);

89 
ngx_poﬁ_˛ónup_t
 *
	`ngx_poﬁ_˛ónup_add
(
ngx_poﬁ_t
 *
p
, 
size_t
 
size
);

90 
	`ngx_poﬁ_run_˛ónup_fûe
(
ngx_poﬁ_t
 *
p
, 
ngx_fd_t
 
fd
);

91 
	`ngx_poﬁ_˛ónup_fûe
(*
d©a
);

92 
	`ngx_poﬁ_dñëe_fûe
(*
d©a
);

	@src/core/ngx_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ssize_t


13 
	$ngx_∑r£_size
(
ngx_°r_t
 *
löe
)

15 
u_ch¨
 
unô
;

16 
size_t
 
Àn
;

17 
ssize_t
 
size
;

18 
ngx_öt_t
 
sˇÀ
;

20 
Àn
 = 
löe
->len;

21 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

23 
unô
) {

26 
Àn
--;

27 
sˇÀ
 = 1024;

32 
Àn
--;

33 
sˇÀ
 = 1024 * 1024;

37 
sˇÀ
 = 1;

40 
size
 = 
	`ngx_©osz
(
löe
->
d©a
, 
Àn
);

41 i‡(
size
 =
NGX_ERROR
) {

42  
NGX_ERROR
;

45 
size
 *
sˇÀ
;

47  
size
;

48 
	}
}

51 
off_t


52 
	$ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
)

54 
u_ch¨
 
unô
;

55 
off_t
 
off£t
;

56 
size_t
 
Àn
;

57 
ngx_öt_t
 
sˇÀ
;

59 
Àn
 = 
löe
->len;

60 
unô
 = 
löe
->
d©a
[
Àn
 - 1];

62 
unô
) {

65 
Àn
--;

66 
sˇÀ
 = 1024;

71 
Àn
--;

72 
sˇÀ
 = 1024 * 1024;

77 
Àn
--;

78 
sˇÀ
 = 1024 * 1024 * 1024;

82 
sˇÀ
 = 1;

85 
off£t
 = 
	`ngx_©oof
(
löe
->
d©a
, 
Àn
);

86 i‡(
off£t
 =
NGX_ERROR
) {

87  
NGX_ERROR
;

90 
off£t
 *
sˇÀ
;

92  
off£t
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
)

99 
u_ch¨
 *
p
, *
œ°
;

100 
ngx_öt_t
 
vÆue
, 
tŸÆ
, 
sˇÀ
;

101 
ngx_uöt_t
 
max
, 
vÆid
;

103 
°_°¨t
 = 0,

104 
°_yór
,

105 
°_m⁄th
,

106 
°_wìk
,

107 
°_day
,

108 
°_hour
,

109 
°_mö
,

110 
°_£c
,

111 
°_m£c
,

112 
°_œ°


113 } 
°ï
;

115 
vÆid
 = 0;

116 
vÆue
 = 0;

117 
tŸÆ
 = 0;

118 
°ï
 = 
is_£c
 ? 
°_°¨t
 : 
°_m⁄th
;

119 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

121 
p
 = 
löe
->
d©a
;

122 
œ°
 = 
p
 + 
löe
->
Àn
;

124 
p
 < 
œ°
) {

126 i‡(*
p
 >= '0' && *p <= '9') {

127 
vÆue
 = vÆuê* 10 + (*
p
++ - '0');

128 
vÆid
 = 1;

132 *
p
++) {

135 i‡(
°ï
 > 
°_°¨t
) {

136  
NGX_ERROR
;

138 
°ï
 = 
°_yór
;

139 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 365);

140 
sˇÀ
 = 60 * 60 * 24 * 365;

144 i‡(
°ï
 >
°_m⁄th
) {

145  
NGX_ERROR
;

147 
°ï
 = 
°_m⁄th
;

148 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 30);

149 
sˇÀ
 = 60 * 60 * 24 * 30;

153 i‡(
°ï
 >
°_wìk
) {

154  
NGX_ERROR
;

156 
°ï
 = 
°_wìk
;

157 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24 * 7);

158 
sˇÀ
 = 60 * 60 * 24 * 7;

162 i‡(
°ï
 >
°_day
) {

163  
NGX_ERROR
;

165 
°ï
 = 
°_day
;

166 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60 * 24);

167 
sˇÀ
 = 60 * 60 * 24;

171 i‡(
°ï
 >
°_hour
) {

172  
NGX_ERROR
;

174 
°ï
 = 
°_hour
;

175 
max
 = 
NGX_MAX_INT32_VALUE
 / (60 * 60);

176 
sˇÀ
 = 60 * 60;

180 i‡(*
p
 == 's') {

181 i‡(
is_£c
 || 
°ï
 >
°_m£c
) {

182  
NGX_ERROR
;

184 
p
++;

185 
°ï
 = 
°_m£c
;

186 
max
 = 
NGX_MAX_INT32_VALUE
;

187 
sˇÀ
 = 1;

191 i‡(
°ï
 >
°_mö
) {

192  
NGX_ERROR
;

194 
°ï
 = 
°_mö
;

195 
max
 = 
NGX_MAX_INT32_VALUE
 / 60;

196 
sˇÀ
 = 60;

200 i‡(
°ï
 >
°_£c
) {

201  
NGX_ERROR
;

203 
°ï
 = 
°_£c
;

204 
max
 = 
NGX_MAX_INT32_VALUE
;

205 
sˇÀ
 = 1;

209 i‡(
°ï
 >
°_£c
) {

210  
NGX_ERROR
;

212 
°ï
 = 
°_œ°
;

213 
max
 = 
NGX_MAX_INT32_VALUE
;

214 
sˇÀ
 = 1;

218  
NGX_ERROR
;

221 i‡(
°ï
 !
°_m£c
 && !
is_£c
) {

222 
sˇÀ
 *= 1000;

223 
max
 /= 1000;

226 i‡((
ngx_uöt_t
Ë
vÆue
 > 
max
) {

227  
NGX_ERROR
;

230 
tŸÆ
 +
vÆue
 * 
sˇÀ
;

232 i‡((
ngx_uöt_t
Ë
tŸÆ
 > 
NGX_MAX_INT32_VALUE
) {

233  
NGX_ERROR
;

236 
vÆue
 = 0;

237 
sˇÀ
 = 
is_£c
 ? 1 : 1000;

239 
p
 < 
œ°
 && *p == ' ') {

240 
p
++;

244 i‡(
vÆid
) {

245  
tŸÆ
 + 
vÆue
 * 
sˇÀ
;

248  
NGX_ERROR
;

249 
	}
}

	@src/core/ngx_parse.h

8 #i‚de‡
_NGX_PARSE_H_INCLUDED_


9 
	#_NGX_PARSE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ssize_t
 
ngx_∑r£_size
(
ngx_°r_t
 *
löe
);

17 
off_t
 
ngx_∑r£_off£t
(
ngx_°r_t
 *
löe
);

18 
ngx_öt_t
 
ngx_∑r£_time
(
ngx_°r_t
 *
löe
, 
ngx_uöt_t
 
is_£c
);

	@src/core/ngx_queue.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

17 
ngx_queue_t
 *

18 
	$ngx_queue_middÀ
(
ngx_queue_t
 *
queue
)

20 
ngx_queue_t
 *
middÀ
, *
√xt
;

22 
middÀ
 = 
	`ngx_queue_hód
(
queue
);

24 i‡(
middÀ
 =
	`ngx_queue_œ°
(
queue
)) {

25  
middÀ
;

28 
√xt
 = 
	`ngx_queue_hód
(
queue
);

31 
middÀ
 = 
	`ngx_queue_√xt
(middle);

33 
√xt
 = 
	`ngx_queue_√xt
(next);

35 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

36  
middÀ
;

39 
√xt
 = 
	`ngx_queue_√xt
(next);

41 i‡(
√xt
 =
	`ngx_queue_œ°
(
queue
)) {

42  
middÀ
;

45 
	}
}

51 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

52 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *))

54 
ngx_queue_t
 *
q
, *
¥ev
, *
√xt
;

56 
q
 = 
	`ngx_queue_hód
(
queue
);

58 i‡(
q
 =
	`ngx_queue_œ°
(
queue
)) {

62 
q
 = 
	`ngx_queue_√xt
(q); q !
	`ngx_queue_£¡öñ
(
queue
); q = 
√xt
) {

64 
¥ev
 = 
	`ngx_queue_¥ev
(
q
);

65 
√xt
 = 
	`ngx_queue_√xt
(
q
);

67 
	`ngx_queue_ªmove
(
q
);

70 i‡(
	`cmp
(
¥ev
, 
q
) <= 0) {

74 
¥ev
 = 
	`ngx_queue_¥ev
(prev);

76 } 
¥ev
 !
	`ngx_queue_£¡öñ
(
queue
));

78 
	`ngx_queue_ö£π_a·î
(
¥ev
, 
q
);

80 
	}
}

	@src/core/ngx_queue.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_QUEUE_H_INCLUDED_


13 
	#_NGX_QUEUE_H_INCLUDED_


	)

16 
ngx_queue_s
 
	tngx_queue_t
;

18 
	sngx_queue_s
 {

19 
ngx_queue_t
 *
	m¥ev
;

20 
ngx_queue_t
 *
	m√xt
;

24 
	#ngx_queue_öô
(
q
) \

25 (
q
)->
¥ev
 = q; \

26 (
q
)->
√xt
 = 
	)
q

29 
	#ngx_queue_em±y
(
h
) \

30 (
h
 =(h)->
¥ev
)

	)

33 
	#ngx_queue_ö£π_hód
(
h
, 
x
) \

34 (
x
)->
√xt
 = (
h
)->next; \

35 (
x
)->
√xt
->
¥ev
 = x; \

36 (
x
)->
¥ev
 = 
h
; \

37 (
h
)->
√xt
 = 
x


	)

40 
	#ngx_queue_ö£π_a·î
 
ngx_queue_ö£π_hód


	)

43 
	#ngx_queue_ö£π_èû
(
h
, 
x
) \

44 (
x
)->
¥ev
 = (
h
)->prev; \

45 (
x
)->
¥ev
->
√xt
 = x; \

46 (
x
)->
√xt
 = 
h
; \

47 (
h
)->
¥ev
 = 
x


	)

50 
	#ngx_queue_hód
(
h
) \

51 (
h
)->
√xt


	)

54 
	#ngx_queue_œ°
(
h
) \

55 (
h
)->
¥ev


	)

58 
	#ngx_queue_£¡öñ
(
h
) \

59 (
h
)

	)

62 
	#ngx_queue_√xt
(
q
) \

63 (
q
)->
√xt


	)

66 
	#ngx_queue_¥ev
(
q
) \

67 (
q
)->
¥ev


	)

70 #i‡(
NGX_DEBUG
)

72 
	#ngx_queue_ªmove
(
x
) \

73 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

74 (
x
)->
¥ev
->
√xt
 = (x)->next; \

75 (
x
)->
¥ev
 = 
NULL
; \

76 (
x
)->
√xt
 = 
NULL


	)

80 
	#ngx_queue_ªmove
(
x
) \

81 (
x
)->
√xt
->
¥ev
 = (x)->prev; \

82 (
x
)->
¥ev
->
√xt
 = (x)->
	)
next

87 
	#ngx_queue_•lô
(
h
, 
q
, 
n
) \

88 (
n
)->
¥ev
 = (
h
)->prev; \

89 (
n
)->
¥ev
->
√xt
 =Ç; \

90 (
n
)->
√xt
 = 
q
; \

91 (
h
)->
¥ev
 = (
q
)->prev; \

92 (
h
)->
¥ev
->
√xt
 = h; \

93 (
q
)->
¥ev
 = 
n
;

	)

96 
	#ngx_queue_add
(
h
, 
n
) \

97 (
h
)->
¥ev
->
√xt
 = (
n
)->next; \

98 (
n
)->
√xt
->
¥ev
 = (
h
)->prev; \

99 (
h
)->
¥ev
 = (
n
)->prev; \

100 (
h
)->
¥ev
->
√xt
 = h;

	)

103 
	#ngx_queue_d©a
(
q
, 
ty≥
, 
lök
) \

104 (
ty≥
 *Ë((
u_ch¨
 *Ë
q
 - 
	`off£tof
—y≥, 
lök
))

	)

107 
ngx_queue_t
 *
ngx_queue_middÀ
“gx_queue_à*
queue
);

108 
ngx_queue_s‹t
(
ngx_queue_t
 *
queue
,

109 
	$ngx_öt_t
 (*
cmp
)(c⁄° 
ngx_queue_t
 *, constÇgx_queue_t *));

	@src/core/ngx_radix_tree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_ødix_node_t
 *
ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
);

15 
ngx_ødix_åì_t
 *

16 
	$ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_öt_t
 
¥óŒoˇã
)

18 
uöt32_t
 
key
, 
mask
, 
öc
;

19 
ngx_ødix_åì_t
 *
åì
;

21 
åì
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_ødix_åì_t
));

22 i‡(
åì
 =
NULL
) {

23  
NULL
;

26 
åì
->
poﬁ
 =Öool;

27 
åì
->
‰ì
 = 
NULL
;

28 
åì
->
°¨t
 = 
NULL
;

29 
åì
->
size
 = 0;

31 
åì
->
roŸ
 = 
	`ngx_ødix_Æloc
(tree);

32 i‡(
åì
->
roŸ
 =
NULL
) {

33  
NULL
;

36 
åì
->
roŸ
->
right
 = 
NULL
;

37 
åì
->
roŸ
->
À·
 = 
NULL
;

38 
åì
->
roŸ
->
∑ª¡
 = 
NULL
;

39 
åì
->
roŸ
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

41 i‡(
¥óŒoˇã
 == 0) {

42  
åì
;

62 i‡(
¥óŒoˇã
 == -1) {

63 
ngx_∑gesize
 / (
ngx_ødix_node_t
)) {

67 
¥óŒoˇã
 = 6;

72 
¥óŒoˇã
 = 7;

77 
¥óŒoˇã
 = 8;

81 
mask
 = 0;

82 
öc
 = 0x80000000;

84 
¥óŒoˇã
--) {

86 
key
 = 0;

87 
mask
 >>= 1;

88 
mask
 |= 0x80000000;

91 i‡(
	`ngx_ødix32åì_ö£π
(
åì
, 
key
, 
mask
, 
NGX_RADIX_NO_VALUE
)

92 !
NGX_OK
)

94  
NULL
;

97 
key
 +
öc
;

99 } 
key
);

101 
öc
 >>= 1;

104  
åì
;

105 
	}
}

108 
ngx_öt_t


109 
	$ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
,

110 
uöçå_t
 
vÆue
)

112 
uöt32_t
 
bô
;

113 
ngx_ødix_node_t
 *
node
, *
√xt
;

115 
bô
 = 0x80000000;

117 
node
 = 
åì
->
roŸ
;

118 
√xt
 = 
åì
->
roŸ
;

120 
bô
 & 
mask
) {

121 i‡(
key
 & 
bô
) {

122 
√xt
 = 
node
->
right
;

125 
√xt
 = 
node
->
À·
;

128 i‡(
√xt
 =
NULL
) {

132 
bô
 >>= 1;

133 
node
 = 
√xt
;

136 i‡(
√xt
) {

137 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

138  
NGX_BUSY
;

141 
node
->
vÆue
 = value;

142  
NGX_OK
;

145 
bô
 & 
mask
) {

146 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

147 i‡(
√xt
 =
NULL
) {

148  
NGX_ERROR
;

151 
√xt
->
right
 = 
NULL
;

152 
√xt
->
À·
 = 
NULL
;

153 
√xt
->
∑ª¡
 = 
node
;

154 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

156 i‡(
key
 & 
bô
) {

157 
node
->
right
 = 
√xt
;

160 
node
->
À·
 = 
√xt
;

163 
bô
 >>= 1;

164 
node
 = 
√xt
;

167 
node
->
vÆue
 = value;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
, uöt32_à
mask
)

176 
uöt32_t
 
bô
;

177 
ngx_ødix_node_t
 *
node
;

179 
bô
 = 0x80000000;

180 
node
 = 
åì
->
roŸ
;

182 
node
 && (
bô
 & 
mask
)) {

183 i‡(
key
 & 
bô
) {

184 
node
 =Çode->
right
;

187 
node
 =Çode->
À·
;

190 
bô
 >>= 1;

193 i‡(
node
 =
NULL
) {

194  
NGX_ERROR
;

197 i‡(
node
->
right
 ||Çode->
À·
) {

198 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

199 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

200  
NGX_OK
;

203  
NGX_ERROR
;

207 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

208 
node
->
∑ª¡
->
right
 = 
NULL
;

211 
node
->
∑ª¡
->
À·
 = 
NULL
;

214 
node
->
right
 = 
åì
->
‰ì
;

215 
åì
->
‰ì
 = 
node
;

217 
node
 =Çode->
∑ª¡
;

219 i‡(
node
->
right
 ||Çode->
À·
) {

223 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

227 i‡(
node
->
∑ª¡
 =
NULL
) {

232  
NGX_OK
;

233 
	}
}

236 
uöçå_t


237 
	$ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
)

239 
uöt32_t
 
bô
;

240 
uöçå_t
 
vÆue
;

241 
ngx_ødix_node_t
 *
node
;

243 
bô
 = 0x80000000;

244 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

245 
node
 = 
åì
->
roŸ
;

247 
node
) {

248 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

249 
vÆue
 = 
node
->value;

252 i‡(
key
 & 
bô
) {

253 
node
 =Çode->
right
;

256 
node
 =Çode->
À·
;

259 
bô
 >>= 1;

262  
vÆue
;

263 
	}
}

266 #i‡(
NGX_HAVE_INET6
)

268 
ngx_öt_t


269 
	$ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
,

270 
uöçå_t
 
vÆue
)

272 
u_ch¨
 
bô
;

273 
ngx_uöt_t
 
i
;

274 
ngx_ødix_node_t
 *
node
, *
√xt
;

276 
i
 = 0;

277 
bô
 = 0x80;

279 
node
 = 
åì
->
roŸ
;

280 
√xt
 = 
åì
->
roŸ
;

282 
bô
 & 
mask
[
i
]) {

283 i‡(
key
[
i
] & 
bô
) {

284 
√xt
 = 
node
->
right
;

287 
√xt
 = 
node
->
À·
;

290 i‡(
√xt
 =
NULL
) {

294 
bô
 >>= 1;

295 
node
 = 
√xt
;

297 i‡(
bô
 == 0) {

298 i‡(++
i
 == 16) {

302 
bô
 = 0x80;

306 i‡(
√xt
) {

307 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

308  
NGX_BUSY
;

311 
node
->
vÆue
 = value;

312  
NGX_OK
;

315 
bô
 & 
mask
[
i
]) {

316 
√xt
 = 
	`ngx_ødix_Æloc
(
åì
);

317 i‡(
√xt
 =
NULL
) {

318  
NGX_ERROR
;

321 
√xt
->
right
 = 
NULL
;

322 
√xt
->
À·
 = 
NULL
;

323 
√xt
->
∑ª¡
 = 
node
;

324 
√xt
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

326 i‡(
key
[
i
] & 
bô
) {

327 
node
->
right
 = 
√xt
;

330 
node
->
À·
 = 
√xt
;

333 
bô
 >>= 1;

334 
node
 = 
√xt
;

336 i‡(
bô
 == 0) {

337 i‡(++
i
 == 16) {

341 
bô
 = 0x80;

345 
node
->
vÆue
 = value;

347  
NGX_OK
;

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
, u_ch¨ *
mask
)

354 
u_ch¨
 
bô
;

355 
ngx_uöt_t
 
i
;

356 
ngx_ødix_node_t
 *
node
;

358 
i
 = 0;

359 
bô
 = 0x80;

360 
node
 = 
åì
->
roŸ
;

362 
node
 && (
bô
 & 
mask
[
i
])) {

363 i‡(
key
[
i
] & 
bô
) {

364 
node
 =Çode->
right
;

367 
node
 =Çode->
À·
;

370 
bô
 >>= 1;

372 i‡(
bô
 == 0) {

373 i‡(++
i
 == 16) {

377 
bô
 = 0x80;

381 i‡(
node
 =
NULL
) {

382  
NGX_ERROR
;

385 i‡(
node
->
right
 ||Çode->
À·
) {

386 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

387 
node
->
vÆue
 = 
NGX_RADIX_NO_VALUE
;

388  
NGX_OK
;

391  
NGX_ERROR
;

395 i‡(
node
->
∑ª¡
->
right
 ==Çode) {

396 
node
->
∑ª¡
->
right
 = 
NULL
;

399 
node
->
∑ª¡
->
À·
 = 
NULL
;

402 
node
->
right
 = 
åì
->
‰ì
;

403 
åì
->
‰ì
 = 
node
;

405 
node
 =Çode->
∑ª¡
;

407 i‡(
node
->
right
 ||Çode->
À·
) {

411 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

415 i‡(
node
->
∑ª¡
 =
NULL
) {

420  
NGX_OK
;

421 
	}
}

424 
uöçå_t


425 
	$ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
)

427 
u_ch¨
 
bô
;

428 
uöçå_t
 
vÆue
;

429 
ngx_uöt_t
 
i
;

430 
ngx_ødix_node_t
 *
node
;

432 
i
 = 0;

433 
bô
 = 0x80;

434 
vÆue
 = 
NGX_RADIX_NO_VALUE
;

435 
node
 = 
åì
->
roŸ
;

437 
node
) {

438 i‡(
node
->
vÆue
 !
NGX_RADIX_NO_VALUE
) {

439 
vÆue
 = 
node
->value;

442 i‡(
key
[
i
] & 
bô
) {

443 
node
 =Çode->
right
;

446 
node
 =Çode->
À·
;

449 
bô
 >>= 1;

451 i‡(
bô
 == 0) {

452 
i
++;

453 
bô
 = 0x80;

457  
vÆue
;

458 
	}
}

463 
ngx_ødix_node_t
 *

464 
	$ngx_ødix_Æloc
(
ngx_ødix_åì_t
 *
åì
)

466 
ngx_ødix_node_t
 *
p
;

468 i‡(
åì
->
‰ì
) {

469 
p
 = 
åì
->
‰ì
;

470 
åì
->
‰ì
 =Åªe->‰ì->
right
;

471  
p
;

474 i‡(
åì
->
size
 < (
ngx_ødix_node_t
)) {

475 
åì
->
°¨t
 = 
	`ngx_pmemÆign
—ªe->
poﬁ
, 
ngx_∑gesize
,Çgx_pagesize);

476 i‡(
åì
->
°¨t
 =
NULL
) {

477  
NULL
;

480 
åì
->
size
 = 
ngx_∑gesize
;

483 
p
 = (
ngx_ødix_node_t
 *Ë
åì
->
°¨t
;

484 
åì
->
°¨t
 +(
ngx_ødix_node_t
);

485 
åì
->
size
 -(
ngx_ødix_node_t
);

487  
p
;

488 
	}
}

	@src/core/ngx_radix_tree.h

8 #i‚de‡
_NGX_RADIX_TREE_H_INCLUDED_


9 
	#_NGX_RADIX_TREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_RADIX_NO_VALUE
 (
uöçå_t
Ë-1

	)

18 
ngx_ødix_node_s
 
	tngx_ødix_node_t
;

20 
	sngx_ødix_node_s
 {

21 
ngx_ødix_node_t
 *
	mright
;

22 
ngx_ødix_node_t
 *
	mÀ·
;

23 
ngx_ødix_node_t
 *
	m∑ª¡
;

24 
uöçå_t
 
	mvÆue
;

29 
ngx_ødix_node_t
 *
	mroŸ
;

30 
ngx_poﬁ_t
 *
	mpoﬁ
;

31 
ngx_ødix_node_t
 *
	m‰ì
;

32 *
	m°¨t
;

33 
size_t
 
	msize
;

34 } 
	tngx_ødix_åì_t
;

37 
ngx_ødix_åì_t
 *
ngx_ødix_åì_¸óã
(
ngx_poﬁ_t
 *
poﬁ
,

38 
ngx_öt_t
 
¥óŒoˇã
);

40 
ngx_öt_t
 
ngx_ødix32åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

41 
uöt32_t
 
key
, uöt32_à
mask
, 
uöçå_t
 
vÆue
);

42 
ngx_öt_t
 
ngx_ødix32åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

43 
uöt32_t
 
key
, uöt32_à
mask
);

44 
uöçå_t
 
ngx_ødix32åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
uöt32_t
 
key
);

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_öt_t
 
ngx_ødix128åì_ö£π
(
ngx_ødix_åì_t
 *
åì
,

48 
u_ch¨
 *
key
, u_ch¨ *
mask
, 
uöçå_t
 
vÆue
);

49 
ngx_öt_t
 
ngx_ødix128åì_dñëe
(
ngx_ødix_åì_t
 *
åì
,

50 
u_ch¨
 *
key
, u_ch¨ *
mask
);

51 
uöçå_t
 
ngx_ødix128åì_föd
(
ngx_ødix_åì_t
 *
åì
, 
u_ch¨
 *
key
);

	@src/core/ngx_rbtree.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

18 
ngx_ölöe
 
ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

19 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

20 
ngx_ölöe
 
ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,

21 
ngx_rbåì_node_t
 *
£¡öñ
,Çgx_rbåì_node_à*
node
);

25 
	$ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

26 
ngx_rbåì_node_t
 *
node
)

28 
ngx_rbåì_node_t
 **
roŸ
, *
ãmp
, *
£¡öñ
;

32 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

33 
£¡öñ
 = 
åì
->sentinel;

35 i‡(*
roŸ
 =
£¡öñ
) {

36 
node
->
∑ª¡
 = 
NULL
;

37 
node
->
À·
 = 
£¡öñ
;

38 
node
->
right
 = 
£¡öñ
;

39 
	`ngx_rbt_bœck
(
node
);

40 *
roŸ
 = 
node
;

45 
åì
->
	`ö£π
(*
roŸ
, 
node
, 
£¡öñ
);

49 
node
 !*
roŸ
 && 
	`ngx_rbt_is_ªd
“ode->
∑ª¡
)) {

51 i‡(
node
->
∑ª¡
 =node->∑ª¡->∑ª¡->
À·
) {

52 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
right
;

54 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

55 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

56 
	`ngx_rbt_bœck
(
ãmp
);

57 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

58 
node
 =Çode->
∑ª¡
->parent;

61 i‡(
node
 =node->
∑ª¡
->
right
) {

62 
node
 =Çode->
∑ª¡
;

63 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

66 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

67 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

68 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

72 
ãmp
 = 
node
->
∑ª¡
->∑ª¡->
À·
;

74 i‡(
	`ngx_rbt_is_ªd
(
ãmp
)) {

75 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

76 
	`ngx_rbt_bœck
(
ãmp
);

77 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

78 
node
 =Çode->
∑ª¡
->parent;

81 i‡(
node
 =node->
∑ª¡
->
À·
) {

82 
node
 =Çode->
∑ª¡
;

83 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
);

86 
	`ngx_rbt_bœck
(
node
->
∑ª¡
);

87 
	`ngx_rbt_ªd
(
node
->
∑ª¡
->parent);

88 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
node
->
∑ª¡
->parent);

93 
	`ngx_rbt_bœck
(*
roŸ
);

94 
	}
}

98 
	$ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

99 
ngx_rbåì_node_t
 *
£¡öñ
)

101 
ngx_rbåì_node_t
 **
p
;

105 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

107 i‡(*
p
 =
£¡öñ
) {

111 
ãmp
 = *
p
;

114 *
p
 = 
node
;

115 
node
->
∑ª¡
 = 
ãmp
;

116 
node
->
À·
 = 
£¡öñ
;

117 
node
->
right
 = 
£¡öñ
;

118 
	`ngx_rbt_ªd
(
node
);

119 
	}
}

123 
	$ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,Çgx_rbåì_node_à*
node
,

124 
ngx_rbåì_node_t
 *
£¡öñ
)

126 
ngx_rbåì_node_t
 **
p
;

139 
p
 = ((
ngx_rbåì_key_öt_t
Ë(
node
->
key
 - 
ãmp
->key) < 0)

140 ? &
ãmp
->
À·
 : &ãmp->
right
;

142 i‡(*
p
 =
£¡öñ
) {

146 
ãmp
 = *
p
;

149 *
p
 = 
node
;

150 
node
->
∑ª¡
 = 
ãmp
;

151 
node
->
À·
 = 
£¡öñ
;

152 
node
->
right
 = 
£¡öñ
;

153 
	`ngx_rbt_ªd
(
node
);

154 
	}
}

158 
	$ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

159 
ngx_rbåì_node_t
 *
node
)

161 
ngx_uöt_t
 
ªd
;

162 
ngx_rbåì_node_t
 **
roŸ
, *
£¡öñ
, *
sub°
, *
ãmp
, *
w
;

166 
roŸ
 = (
ngx_rbåì_node_t
 **Ë&
åì
->root;

167 
£¡öñ
 = 
åì
->sentinel;

169 i‡(
node
->
À·
 =
£¡öñ
) {

170 
ãmp
 = 
node
->
right
;

171 
sub°
 = 
node
;

173 } i‡(
node
->
right
 =
£¡öñ
) {

174 
ãmp
 = 
node
->
À·
;

175 
sub°
 = 
node
;

178 
sub°
 = 
	`ngx_rbåì_mö
(
node
->
right
, 
£¡öñ
);

180 i‡(
sub°
->
À·
 !
£¡öñ
) {

181 
ãmp
 = 
sub°
->
À·
;

183 
ãmp
 = 
sub°
->
right
;

187 i‡(
sub°
 =*
roŸ
) {

188 *
roŸ
 = 
ãmp
;

189 
	`ngx_rbt_bœck
(
ãmp
);

192 
node
->
À·
 = 
NULL
;

193 
node
->
right
 = 
NULL
;

194 
node
->
∑ª¡
 = 
NULL
;

195 
node
->
key
 = 0;

200 
ªd
 = 
	`ngx_rbt_is_ªd
(
sub°
);

202 i‡(
sub°
 =sub°->
∑ª¡
->
À·
) {

203 
sub°
->
∑ª¡
->
À·
 = 
ãmp
;

206 
sub°
->
∑ª¡
->
right
 = 
ãmp
;

209 i‡(
sub°
 =
node
) {

211 
ãmp
->
∑ª¡
 = 
sub°
->parent;

215 i‡(
sub°
->
∑ª¡
 =
node
) {

216 
ãmp
->
∑ª¡
 = 
sub°
;

219 
ãmp
->
∑ª¡
 = 
sub°
->parent;

222 
sub°
->
À·
 = 
node
->left;

223 
sub°
->
right
 = 
node
->right;

224 
sub°
->
∑ª¡
 = 
node
->parent;

225 
	`ngx_rbt_c›y_cﬁ‹
(
sub°
, 
node
);

227 i‡(
node
 =*
roŸ
) {

228 *
roŸ
 = 
sub°
;

231 i‡(
node
 =node->
∑ª¡
->
À·
) {

232 
node
->
∑ª¡
->
À·
 = 
sub°
;

234 
node
->
∑ª¡
->
right
 = 
sub°
;

238 i‡(
sub°
->
À·
 !
£¡öñ
) {

239 
sub°
->
À·
->
∑ª¡
 = subst;

242 i‡(
sub°
->
right
 !
£¡öñ
) {

243 
sub°
->
right
->
∑ª¡
 = subst;

248 
node
->
À·
 = 
NULL
;

249 
node
->
right
 = 
NULL
;

250 
node
->
∑ª¡
 = 
NULL
;

251 
node
->
key
 = 0;

253 i‡(
ªd
) {

259 
ãmp
 !*
roŸ
 && 
	`ngx_rbt_is_bœck
(temp)) {

261 i‡(
ãmp
 =ãmp->
∑ª¡
->
À·
) {

262 
w
 = 
ãmp
->
∑ª¡
->
right
;

264 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

265 
	`ngx_rbt_bœck
(
w
);

266 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

267 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

268 
w
 = 
ãmp
->
∑ª¡
->
right
;

271 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

272 
	`ngx_rbt_ªd
(
w
);

273 
ãmp
 =Åemp->
∑ª¡
;

276 i‡(
	`ngx_rbt_is_bœck
(
w
->
right
)) {

277 
	`ngx_rbt_bœck
(
w
->
À·
);

278 
	`ngx_rbt_ªd
(
w
);

279 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

280 
w
 = 
ãmp
->
∑ª¡
->
right
;

283 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

284 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

285 
	`ngx_rbt_bœck
(
w
->
right
);

286 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

287 
ãmp
 = *
roŸ
;

291 
w
 = 
ãmp
->
∑ª¡
->
À·
;

293 i‡(
	`ngx_rbt_is_ªd
(
w
)) {

294 
	`ngx_rbt_bœck
(
w
);

295 
	`ngx_rbt_ªd
(
ãmp
->
∑ª¡
);

296 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

297 
w
 = 
ãmp
->
∑ª¡
->
À·
;

300 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
Ë&&Çgx_rbt_is_bœck(w->
right
)) {

301 
	`ngx_rbt_ªd
(
w
);

302 
ãmp
 =Åemp->
∑ª¡
;

305 i‡(
	`ngx_rbt_is_bœck
(
w
->
À·
)) {

306 
	`ngx_rbt_bœck
(
w
->
right
);

307 
	`ngx_rbt_ªd
(
w
);

308 
	`ngx_rbåì_À·_rŸ©e
(
roŸ
, 
£¡öñ
, 
w
);

309 
w
 = 
ãmp
->
∑ª¡
->
À·
;

312 
	`ngx_rbt_c›y_cﬁ‹
(
w
, 
ãmp
->
∑ª¡
);

313 
	`ngx_rbt_bœck
(
ãmp
->
∑ª¡
);

314 
	`ngx_rbt_bœck
(
w
->
À·
);

315 
	`ngx_rbåì_right_rŸ©e
(
roŸ
, 
£¡öñ
, 
ãmp
->
∑ª¡
);

316 
ãmp
 = *
roŸ
;

321 
	`ngx_rbt_bœck
(
ãmp
);

322 
	}
}

325 
ngx_ölöe
 

326 
	$ngx_rbåì_À·_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

327 
ngx_rbåì_node_t
 *
node
)

329 
ngx_rbåì_node_t
 *
ãmp
;

331 
ãmp
 = 
node
->
right
;

332 
node
->
right
 = 
ãmp
->
À·
;

334 i‡(
ãmp
->
À·
 !
£¡öñ
) {

335 
ãmp
->
À·
->
∑ª¡
 = 
node
;

338 
ãmp
->
∑ª¡
 = 
node
->parent;

340 i‡(
node
 =*
roŸ
) {

341 *
roŸ
 = 
ãmp
;

343 } i‡(
node
 =node->
∑ª¡
->
À·
) {

344 
node
->
∑ª¡
->
À·
 = 
ãmp
;

347 
node
->
∑ª¡
->
right
 = 
ãmp
;

350 
ãmp
->
À·
 = 
node
;

351 
node
->
∑ª¡
 = 
ãmp
;

352 
	}
}

355 
ngx_ölöe
 

356 
	$ngx_rbåì_right_rŸ©e
(
ngx_rbåì_node_t
 **
roŸ
,Çgx_rbåì_node_à*
£¡öñ
,

357 
ngx_rbåì_node_t
 *
node
)

359 
ngx_rbåì_node_t
 *
ãmp
;

361 
ãmp
 = 
node
->
À·
;

362 
node
->
À·
 = 
ãmp
->
right
;

364 i‡(
ãmp
->
right
 !
£¡öñ
) {

365 
ãmp
->
right
->
∑ª¡
 = 
node
;

368 
ãmp
->
∑ª¡
 = 
node
->parent;

370 i‡(
node
 =*
roŸ
) {

371 *
roŸ
 = 
ãmp
;

373 } i‡(
node
 =node->
∑ª¡
->
right
) {

374 
node
->
∑ª¡
->
right
 = 
ãmp
;

377 
node
->
∑ª¡
->
À·
 = 
ãmp
;

380 
ãmp
->
right
 = 
node
;

381 
node
->
∑ª¡
 = 
ãmp
;

382 
	}
}

	@src/core/ngx_rbtree.h

8 #i‚de‡
_NGX_RBTREE_H_INCLUDED_


9 
	#_NGX_RBTREE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_uöt_t
 
	tngx_rbåì_key_t
;

17 
ngx_öt_t
 
	tngx_rbåì_key_öt_t
;

20 
ngx_rbåì_node_s
 
	tngx_rbåì_node_t
;

22 
	sngx_rbåì_node_s
 {

23 
ngx_rbåì_key_t
 
	mkey
;

24 
ngx_rbåì_node_t
 *
	mÀ·
;

25 
ngx_rbåì_node_t
 *
	mright
;

26 
ngx_rbåì_node_t
 *
	m∑ª¡
;

27 
u_ch¨
 
	mcﬁ‹
;

28 
u_ch¨
 
	md©a
;

32 
ngx_rbåì_s
 
	tngx_rbåì_t
;

34 (*
	tngx_rbåì_ö£π_±
Ë(
	tngx_rbåì_node_t
 *
	troŸ
,

35 
	tngx_rbåì_node_t
 *
	tnode
,Çgx_rbåì_node_à*
	t£¡öñ
);

37 
	sngx_rbåì_s
 {

38 
ngx_rbåì_node_t
 *
roŸ
;

39 
ngx_rbåì_node_t
 *
£¡öñ
;

40 
ngx_rbåì_ö£π_±
 
ö£π
;

44 
	#ngx_rbåì_öô
(
åì
, 
s
, 
i
) \

45 
	`ngx_rbåì_£¡öñ_öô
(
s
); \

46 (
åì
)->
roŸ
 = 
s
; \

47 (
åì
)->
£¡öñ
 = 
s
; \

48 (
åì
)->
ö£π
 = 
i


	)

51 
	`ngx_rbåì_ö£π
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

52 
ngx_rbåì_node_t
 *
node
);

53 
	`ngx_rbåì_dñëe
(
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 *
åì
,

54 
ngx_rbåì_node_t
 *
node
);

55 
	`ngx_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,Çgx_rbåì_node_à*
node
,

56 
ngx_rbåì_node_t
 *
£¡öñ
);

57 
	`ngx_rbåì_ö£π_timî_vÆue
(
ngx_rbåì_node_t
 *
roŸ
,

58 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

61 
	#ngx_rbt_ªd
(
node
Ë(“ode)->
cﬁ‹
 = 1)

	)

62 
	#ngx_rbt_bœck
(
node
Ë(“ode)->
cﬁ‹
 = 0)

	)

63 
	#ngx_rbt_is_ªd
(
node
Ë(“ode)->
cﬁ‹
)

	)

64 
	#ngx_rbt_is_bœck
(
node
Ë(!
	`ngx_rbt_is_ªd
“ode))

	)

65 
	#ngx_rbt_c›y_cﬁ‹
(
n1
, 
n2
Ë“1->
cﬁ‹
 =Ç2->cﬁ‹)

	)

70 
	#ngx_rbåì_£¡öñ_öô
(
node
Ë
	`ngx_rbt_bœck
“ode)

	)

73 
ngx_ölöe
 
ngx_rbåì_node_t
 *

74 
	$ngx_rbåì_mö
(
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

76 
node
->
À·
 !
£¡öñ
) {

77 
node
 =Çode->
À·
;

80  
node
;

81 
	}
}

	@src/core/ngx_regex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
ngx_Êag_t
 
	mp¸e_jô
;

14 } 
	tngx_ªgex_c⁄f_t
;

17 * 
ngx_libc_cde˛
 
ngx_ªgex_mÆloc
(
size_t
 
size
);

18 
ngx_libc_cde˛
 
ngx_ªgex_‰ì
(*
p
);

19 #i‡(
NGX_HAVE_PCRE_JIT
)

20 
ngx_p¸e_‰ì_°udõs
(*
d©a
);

23 
ngx_öt_t
 
ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

25 *
ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

26 *
ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

28 *
ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

29 
ngx_c⁄f_po°_t
 
	gngx_ªgex_p¸e_jô_po°
 = { 
ngx_ªgex_p¸e_jô
 };

32 
ngx_comm™d_t
 
	gngx_ªgex_comm™ds
[] = {

34 { 
ngx_°rög
("pcre_jit"),

35 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

36 
ngx_c⁄f_£t_Êag_¶Ÿ
,

38 
off£tof
(
ngx_ªgex_c⁄f_t
, 
p¸e_jô
),

39 &
ngx_ªgex_p¸e_jô_po°
 },

41 
ngx_nuŒ_comm™d


45 
ngx_c‹e_moduÀ_t
 
	gngx_ªgex_moduÀ_˘x
 = {

46 
ngx_°rög
("regex"),

47 
ngx_ªgex_¸óã_c⁄f
,

48 
ngx_ªgex_öô_c⁄f


52 
ngx_moduÀ_t
 
	gngx_ªgex_moduÀ
 = {

53 
NGX_MODULE_V1
,

54 &
ngx_ªgex_moduÀ_˘x
,

55 
ngx_ªgex_comm™ds
,

56 
NGX_CORE_MODULE
,

57 
NULL
,

58 
ngx_ªgex_moduÀ_öô
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NULL
,

63 
NULL
,

64 
NGX_MODULE_V1_PADDING


68 
ngx_poﬁ_t
 *
	gngx_p¸e_poﬁ
;

69 
ngx_li°_t
 *
	gngx_p¸e_°udõs
;

73 
	$ngx_ªgex_öô
()

75 
p¸e_mÆloc
 = 
ngx_ªgex_mÆloc
;

76 
p¸e_‰ì
 = 
ngx_ªgex_‰ì
;

77 
	}
}

80 
ngx_ölöe
 

81 
	$ngx_ªgex_mÆloc_öô
(
ngx_poﬁ_t
 *
poﬁ
)

83 #i‡(
NGX_THREADS
)

84 
ngx_c‹e_és_t
 *
és
;

86 i‡(
ngx_thªaded
) {

87 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

88 
és
->
poﬁ
 =Öool;

94 
ngx_p¸e_poﬁ
 = 
poﬁ
;

95 
	}
}

98 
ngx_ölöe
 

99 
	$ngx_ªgex_mÆloc_d⁄e
()

101 #i‡(
NGX_THREADS
)

102 
ngx_c‹e_és_t
 *
és
;

104 i‡(
ngx_thªaded
) {

105 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

106 
és
->
poﬁ
 = 
NULL
;

112 
ngx_p¸e_poﬁ
 = 
NULL
;

113 
	}
}

116 
ngx_öt_t


117 
	$ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
)

119 
n
, 
îroff
;

120 *
p
;

121 
p¸e
 *
ª
;

122 c⁄° *
îr°r
;

123 
ngx_ªgex_ñt_t
 *
ñt
;

125 
	`ngx_ªgex_mÆloc_öô
(
rc
->
poﬁ
);

127 
ª
 = 
	`p¸e_compûe
((c⁄° *Ë
rc
->
∑âîn
.
d©a
, (Ërc->
›ti⁄s
,

128 &
îr°r
, &
îroff
, 
NULL
);

131 
	`ngx_ªgex_mÆloc_d⁄e
();

133 i‡(
ª
 =
NULL
) {

134 i‡((
size_t
Ë
îroff
 =
rc
->
∑âîn
.
Àn
) {

135 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

137 
îr°r
, &
rc
->
∑âîn
)

138 - 
rc
->
îr
.
d©a
;

141 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->err.len,

143 
îr°r
, &
rc
->
∑âîn
,Ñc->∑âîn.
d©a
 + 
îroff
)

144 - 
rc
->
îr
.
d©a
;

147  
NGX_ERROR
;

150 
rc
->
ªgex
 = 
	`ngx_pˇŒoc
‘c->
poﬁ
, (
ngx_ªgex_t
));

151 i‡(
rc
->
ªgex
 =
NULL
) {

152  
NGX_ERROR
;

155 
rc
->
ªgex
->
code
 = 
ª
;

159 i‡(
ngx_p¸e_°udõs
 !
NULL
) {

160 
ñt
 = 
	`ngx_li°_push
(
ngx_p¸e_°udõs
);

161 i‡(
ñt
 =
NULL
) {

162  
NGX_ERROR
;

165 
ñt
->
ªgex
 = 
rc
->regex;

166 
ñt
->
«me
 = 
rc
->
∑âîn
.
d©a
;

169 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_CAPTURECOUNT
, &
rc
->
ˇ±uªs
);

170 i‡(
n
 < 0) {

171 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_CAPTURECOUNT) failed: %d";

172 
Áûed
;

175 i‡(
rc
->
ˇ±uªs
 == 0) {

176  
NGX_OK
;

179 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMECOUNT
, &
rc
->
«med_ˇ±uªs
);

180 i‡(
n
 < 0) {

181 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMECOUNT) failed: %d";

182 
Áûed
;

185 i‡(
rc
->
«med_ˇ±uªs
 == 0) {

186  
NGX_OK
;

189 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMEENTRYSIZE
, &
rc
->
«me_size
);

190 i‡(
n
 < 0) {

191 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMEENTRYSIZE) failed: %d";

192 
Áûed
;

195 
n
 = 
	`p¸e_fuŒöfo
(
ª
, 
NULL
, 
PCRE_INFO_NAMETABLE
, &
rc
->
«mes
);

196 i‡(
n
 < 0) {

197 
p
 = "pcre_fullinfo(\"%V\", PCRE_INFO_NAMETABLE) failed: %d";

198 
Áûed
;

201  
NGX_OK
;

203 
Áûed
:

205 
rc
->
îr
.
Àn
 = 
	`ngx_¢¥ötf
‘c->îr.
d©a
,Ñc->îr.Àn, 
p
, &rc->
∑âîn
, 
n
)

206 - 
rc
->
îr
.
d©a
;

207  
NGX_OK
;

208 
	}
}

211 
ngx_öt_t


212 
	$ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
)

214 
ngx_öt_t
 
n
;

215 
ngx_uöt_t
 
i
;

216 
ngx_ªgex_ñt_t
 *
ª
;

218 
ª
 = 
a
->
ñts
;

220 
i
 = 0; i < 
a
->
√…s
; i++) {

222 
n
 = 
	`ngx_ªgex_exec
(
ª
[
i
].
ªgex
, 
s
, 
NULL
, 0);

224 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

228 i‡(
n
 < 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

230 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%s\"",

231 
n
, 
s
, 
ª
[
i
].
«me
);

232  
NGX_ERROR
;

237  
NGX_OK
;

240  
NGX_DECLINED
;

241 
	}
}

244 * 
ngx_libc_cde˛


245 
	$ngx_ªgex_mÆloc
(
size_t
 
size
)

247 
ngx_poﬁ_t
 *
poﬁ
;

248 #i‡(
NGX_THREADS
)

249 
ngx_c‹e_és_t
 *
és
;

251 i‡(
ngx_thªaded
) {

252 
és
 = 
	`ngx_thªad_gë_és
(
ngx_c‹e_és_key
);

253 
poﬁ
 = 
és
->pool;

256 
poﬁ
 = 
ngx_p¸e_poﬁ
;

261 
poﬁ
 = 
ngx_p¸e_poﬁ
;

265 i‡(
poﬁ
) {

266  
	`ngx_∑Œoc
(
poﬁ
, 
size
);

269  
NULL
;

270 
	}
}

273 
ngx_libc_cde˛


274 
	$ngx_ªgex_‰ì
(*
p
)

277 
	}
}

280 #i‡(
NGX_HAVE_PCRE_JIT
)

283 
	$ngx_p¸e_‰ì_°udõs
(*
d©a
)

285 
ngx_li°_t
 *
°udõs
 = 
d©a
;

287 
ngx_uöt_t
 
i
;

288 
ngx_li°_∑π_t
 *
∑π
;

289 
ngx_ªgex_ñt_t
 *
ñts
;

291 
∑π
 = &
°udõs
->part;

292 
ñts
 = 
∑π
->elts;

294 
i
 = 0 ; ; i++) {

296 i‡(
i
 >
∑π
->
√…s
) {

297 i‡(
∑π
->
√xt
 =
NULL
) {

301 
∑π
 =Ö¨t->
√xt
;

302 
ñts
 = 
∑π
->elts;

303 
i
 = 0;

306 i‡(
ñts
[
i
].
ªgex
->
exåa
 !
NULL
) {

307 
	`p¸e_‰ì_°udy
(
ñts
[
i
].
ªgex
->
exåa
);

310 
	}
}

315 
ngx_öt_t


316 
	$ngx_ªgex_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

318 
›t
;

319 c⁄° *
îr°r
;

320 
ngx_uöt_t
 
i
;

321 
ngx_li°_∑π_t
 *
∑π
;

322 
ngx_ªgex_ñt_t
 *
ñts
;

324 
›t
 = 0;

326 #i‡(
NGX_HAVE_PCRE_JIT
)

328 
ngx_ªgex_c⁄f_t
 *
rcf
;

329 
ngx_poﬁ_˛ónup_t
 *
˛n
;

331 
rcf
 = (
ngx_ªgex_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ªgex_moduÀ
);

333 i‡(
rcf
->
p¸e_jô
) {

334 
›t
 = 
PCRE_STUDY_JIT_COMPILE
;

342 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cy˛e
->
poﬁ
, 0);

343 i‡(
˛n
 =
NULL
) {

344  
NGX_ERROR
;

347 
˛n
->
h™dÀr
 = 
ngx_p¸e_‰ì_°udõs
;

348 
˛n
->
d©a
 = 
ngx_p¸e_°udõs
;

353 
	`ngx_ªgex_mÆloc_öô
(
cy˛e
->
poﬁ
);

355 
∑π
 = &
ngx_p¸e_°udõs
->part;

356 
ñts
 = 
∑π
->elts;

358 
i
 = 0 ; ; i++) {

360 i‡(
i
 >
∑π
->
√…s
) {

361 i‡(
∑π
->
√xt
 =
NULL
) {

365 
∑π
 =Ö¨t->
√xt
;

366 
ñts
 = 
∑π
->elts;

367 
i
 = 0;

370 
ñts
[
i
].
ªgex
->
exåa
 = 
	`p¸e_°udy
”…s[i].ªgex->
code
, 
›t
, &
îr°r
);

372 i‡(
îr°r
 !
NULL
) {

373 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

375 
îr°r
, 
ñts
[
i
].
«me
);

378 #i‡(
NGX_HAVE_PCRE_JIT
)

379 i‡(
›t
 & 
PCRE_STUDY_JIT_COMPILE
) {

380 
jô
, 
n
;

382 
jô
 = 0;

383 
n
 = 
	`p¸e_fuŒöfo
(
ñts
[
i
].
ªgex
->
code
,É…s[i].ªgex->
exåa
,

384 
PCRE_INFO_JIT
, &
jô
);

386 i‡(
n
 !0 || 
jô
 != 1) {

387 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
cy˛e
->
log
, 0,

389 
ñts
[
i
].
«me
);

395 
	`ngx_ªgex_mÆloc_d⁄e
();

397 
ngx_p¸e_°udõs
 = 
NULL
;

399  
NGX_OK
;

400 
	}
}

404 
	$ngx_ªgex_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

406 
ngx_ªgex_c⁄f_t
 *
rcf
;

408 
rcf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_ªgex_c⁄f_t
));

409 i‡(
rcf
 =
NULL
) {

410  
NULL
;

413 
rcf
->
p¸e_jô
 = 
NGX_CONF_UNSET
;

415 
ngx_p¸e_°udõs
 = 
	`ngx_li°_¸óã
(
cy˛e
->
poﬁ
, 8, (
ngx_ªgex_ñt_t
));

416 i‡(
ngx_p¸e_°udõs
 =
NULL
) {

417  
NULL
;

420  
rcf
;

421 
	}
}

425 
	$ngx_ªgex_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

427 
ngx_ªgex_c⁄f_t
 *
rcf
 = 
c⁄f
;

429 
	`ngx_c⁄f_öô_vÆue
(
rcf
->
p¸e_jô
, 0);

431  
NGX_CONF_OK
;

432 
	}
}

436 
	$ngx_ªgex_p¸e_jô
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

438 
ngx_Êag_t
 *
Â
 = 
d©a
;

440 i‡(*
Â
 == 0) {

441  
NGX_CONF_OK
;

444 #i‡(
NGX_HAVE_PCRE_JIT
)

446 
jô
, 
r
;

448 
jô
 = 0;

449 
r
 = 
	`p¸e_c⁄fig
(
PCRE_CONFIG_JIT
, &
jô
);

451 i‡(
r
 !0 || 
jô
 != 1) {

452 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

454 *
Â
 = 0;

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

460 *
Â
 = 0;

463  
NGX_CONF_OK
;

464 
	}
}

	@src/core/ngx_regex.h

8 #i‚de‡
_NGX_REGEX_H_INCLUDED_


9 
	#_NGX_REGEX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<p¸e.h
>

18 
	#NGX_REGEX_NO_MATCHED
 
PCRE_ERROR_NOMATCH


	)

20 
	#NGX_REGEX_CASELESS
 
PCRE_CASELESS


	)

24 
p¸e
 *
	mcode
;

25 
p¸e_exåa
 *
	mexåa
;

26 } 
	tngx_ªgex_t
;

30 
ngx_°r_t
 
	m∑âîn
;

31 
ngx_poﬁ_t
 *
	mpoﬁ
;

32 
ngx_öt_t
 
	m›ti⁄s
;

34 
ngx_ªgex_t
 *
	mªgex
;

35 
	mˇ±uªs
;

36 
	m«med_ˇ±uªs
;

37 
	m«me_size
;

38 
u_ch¨
 *
	m«mes
;

39 
ngx_°r_t
 
	mîr
;

40 } 
	tngx_ªgex_compûe_t
;

44 
ngx_ªgex_t
 *
	mªgex
;

45 
u_ch¨
 *
	m«me
;

46 } 
	tngx_ªgex_ñt_t
;

49 
ngx_ªgex_öô
();

50 
ngx_öt_t
 
ngx_ªgex_compûe
(
ngx_ªgex_compûe_t
 *
rc
);

52 
	#ngx_ªgex_exec
(
ª
, 
s
, 
ˇ±uªs
, 
size
) \

53 
	`p¸e_exec
(
ª
->
code
,Ñe->
exåa
, (c⁄° *Ë(
s
)->
d©a
, (s)->
Àn
, 0, 0, \

54 
ˇ±uªs
, 
size
)

	)

55 
	#ngx_ªgex_exec_n
 "p¸e_exec()"

	)

57 
ngx_öt_t
 
ngx_ªgex_exec_¨øy
(
ngx_¨øy_t
 *
a
, 
ngx_°r_t
 *
s
, 
ngx_log_t
 *
log
);

	@src/core/ngx_resolver.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_RESOLVER_UDP_SIZE
 4096

	)

17 
u_ch¨
 
	midít_hi
;

18 
u_ch¨
 
	midít_lo
;

19 
u_ch¨
 
	mÊags_hi
;

20 
u_ch¨
 
	mÊags_lo
;

21 
u_ch¨
 
	mnqs_hi
;

22 
u_ch¨
 
	mnqs_lo
;

23 
u_ch¨
 
	m«n_hi
;

24 
u_ch¨
 
	m«n_lo
;

25 
u_ch¨
 
	m¬s_hi
;

26 
u_ch¨
 
	m¬s_lo
;

27 
u_ch¨
 
	m«r_hi
;

28 
u_ch¨
 
	m«r_lo
;

29 } 
	tngx_ªsﬁvî_quîy_t
;

33 
u_ch¨
 
	mty≥_hi
;

34 
u_ch¨
 
	mty≥_lo
;

35 
u_ch¨
 
	m˛ass_hi
;

36 
u_ch¨
 
	m˛ass_lo
;

37 } 
	tngx_ªsﬁvî_qs_t
;

41 
u_ch¨
 
	mty≥_hi
;

42 
u_ch¨
 
	mty≥_lo
;

43 
u_ch¨
 
	m˛ass_hi
;

44 
u_ch¨
 
	m˛ass_lo
;

45 
u_ch¨
 
	mâl
[4];

46 
u_ch¨
 
	mÀn_hi
;

47 
u_ch¨
 
	mÀn_lo
;

48 } 
	tngx_ªsﬁvî_™_t
;

51 
ngx_öt_t
 
ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
);

54 
ngx_ªsﬁvî_˛ónup
(*
d©a
);

55 
ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
);

56 
ngx_öt_t
 
ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
,

57 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

58 
ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

59 
ngx_queue_t
 *
queue
);

60 
ngx_öt_t
 
ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
,

61 
ngx_ªsﬁvî_node_t
 *
∫
);

62 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

63 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

64 
ngx_öt_t
 
ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
,

65 
ngx_ªsﬁvî_˘x_t
 *
˘x
);

66 
ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
);

67 
time_t
 
ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
,

68 
ngx_queue_t
 *
queue
);

69 
ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
);

70 
ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
,

71 
size_t
 
n
);

72 
ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

73 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
);

74 
ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

75 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
);

76 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
,

77 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
);

78 
ngx_ªsﬁvî_node_t
 *
ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
,

79 
ö_addr_t
 
addr
);

80 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

81 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

82 
ngx_öt_t
 
ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
,

83 
u_ch¨
 *
buf
, u_ch¨ *
§c
, u_ch¨ *
œ°
);

84 
ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
);

85 
ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
);

86 *
ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

87 *
ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
);

88 
ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

89 
ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
);

90 *
ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
);

91 
ö_addr_t
 *
ngx_ªsﬁvî_rŸ©e
(
ngx_ªsﬁvî_t
 *
r
, in_addr_à*
§c
,

92 
ngx_uöt_t
 
n
);

93 
u_ch¨
 *
ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 
ngx_ªsﬁvî_t
 *

97 
	$ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
, 
ngx_uöt_t
 
n
)

99 
ngx_°r_t
 
s
;

100 
ngx_uæ_t
 
u
;

101 
ngx_uöt_t
 
i
, 
j
;

102 
ngx_ªsﬁvî_t
 *
r
;

103 
ngx_poﬁ_˛ónup_t
 *
˛n
;

104 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

106 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

107 i‡(
˛n
 =
NULL
) {

108  
NULL
;

111 
˛n
->
h™dÀr
 = 
ngx_ªsﬁvî_˛ónup
;

113 
r
 = 
	`ngx_ˇŒoc
((
ngx_ªsﬁvî_t
), 
cf
->
log
);

114 i‡(
r
 =
NULL
) {

115  
NULL
;

118 
˛n
->
d©a
 = 
r
;

120 
r
->
evít
 = 
	`ngx_ˇŒoc
((
ngx_evít_t
), 
cf
->
log
);

121 i‡(
r
->
evít
 =
NULL
) {

122  
NULL
;

125 
	`ngx_rbåì_öô
(&
r
->
«me_rbåì
, &r->
«me_£¡öñ
,

126 
ngx_ªsﬁvî_rbåì_ö£π_vÆue
);

128 
	`ngx_rbåì_öô
(&
r
->
addr_rbåì
, &r->
addr_£¡öñ
,

129 
ngx_rbåì_ö£π_vÆue
);

131 
	`ngx_queue_öô
(&
r
->
«me_ª£nd_queue
);

132 
	`ngx_queue_öô
(&
r
->
addr_ª£nd_queue
);

134 
	`ngx_queue_öô
(&
r
->
«me_expúe_queue
);

135 
	`ngx_queue_öô
(&
r
->
addr_expúe_queue
);

137 
r
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_ª£nd_h™dÀr
;

138 
r
->
evít
->
d©a
 =Ñ;

139 
r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

140 
r
->
idít
 = -1;

142 
r
->
ª£nd_timeout
 = 5;

143 
r
->
expúe
 = 30;

144 
r
->
vÆid
 = 0;

146 
r
->
log
 = &
cf
->
cy˛e
->
√w_log
;

147 
r
->
log_Àvñ
 = 
NGX_LOG_ERR
;

149 i‡(
n
) {

150 i‡(
	`ngx_¨øy_öô
(&
r
->
udp_c⁄√˘i⁄s
, 
cf
->
poﬁ
, 
n
,

151 (
ngx_udp_c⁄√˘i⁄_t
))

152 !
NGX_OK
)

154  
NULL
;

158 
i
 = 0; i < 
n
; i++) {

159 i‡(
	`ngx_°∫cmp
(
«mes
[
i
].
d©a
, "valid=", 6) == 0) {

160 
s
.
Àn
 = 
«mes
[
i
].len - 6;

161 
s
.
d©a
 = 
«mes
[
i
].data + 6;

163 
r
->
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

165 i‡(
r
->
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

166 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

167 "övÆidÖ¨amëî: %V", &
«mes
[
i
]);

168  
NULL
;

174 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

176 
u
.
uæ
 = 
«mes
[
i
];

177 
u
.
deÁu…_p‹t
 = 53;

179 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

180 i‡(
u
.
îr
) {

181 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

183 
u
.
îr
, &u.
uæ
);

186  
NULL
;

189 
uc
 = 
	`ngx_¨øy_push_n
(&
r
->
udp_c⁄√˘i⁄s
, 
u
.
«ddrs
);

190 i‡(
uc
 =
NULL
) {

191  
NULL
;

194 
	`ngx_memzîo
(
uc
, 
u
.
«ddrs
 * (
ngx_udp_c⁄√˘i⁄_t
));

196 
j
 = 0; j < 
u
.
«ddrs
; j++) {

197 
uc
[
j
].
sockaddr
 = 
u
.
addrs
[j].sockaddr;

198 
uc
[
j
].
sockÀn
 = 
u
.
addrs
[j].socklen;

199 
uc
[
j
].
£rvî
 = 
u
.
addrs
[j].
«me
;

203  
r
;

204 
	}
}

208 
	$ngx_ªsﬁvî_˛ónup
(*
d©a
)

210 
ngx_ªsﬁvî_t
 *
r
 = 
d©a
;

212 
ngx_uöt_t
 
i
;

213 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

215 i‡(
r
) {

216 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

219 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
«me_rbåì
);

221 
	`ngx_ªsﬁvî_˛ónup_åì
(
r
, &r->
addr_rbåì
);

223 i‡(
r
->
evít
) {

224 
	`ngx_‰ì
(
r
->
evít
);

228 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

230 
i
 = 0; i < 
r
->
udp_c⁄√˘i⁄s
.
√…s
; i++) {

231 i‡(
uc
[
i
].
c⁄√˘i⁄
) {

232 
	`ngx_˛o£_c⁄√˘i⁄
(
uc
[
i
].
c⁄√˘i⁄
);

236 
	`ngx_‰ì
(
r
);

238 
	}
}

242 
	$ngx_ªsﬁvî_˛ónup_åì
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
)

244 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

245 
ngx_ªsﬁvî_node_t
 *
∫
;

247 
åì
->
roŸ
 !åì->
£¡öñ
) {

249 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
	`ngx_rbåì_mö
(
åì
->
roŸ
,Åªe->
£¡öñ
);

251 
	`ngx_queue_ªmove
(&
∫
->
queue
);

253 
˘x
 = 
∫
->
waôög
; ctx; ctx = 
√xt
) {

254 
√xt
 = 
˘x
->next;

256 i‡(
˘x
->
evít
) {

257 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

260 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

263 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

265 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

267 
	}
}

270 
ngx_ªsﬁvî_˘x_t
 *

271 
	$ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
ãmp
)

273 
ö_addr_t
 
addr
;

274 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

276 i‡(
ãmp
) {

277 
addr
 = 
	`ngx_öë_addr
(
ãmp
->
«me
.
d©a
,Åemp->«me.
Àn
);

279 i‡(
addr
 !
INADDR_NONE
) {

280 
ãmp
->
ªsﬁvî
 = 
r
;

281 
ãmp
->
°©e
 = 
NGX_OK
;

282 
ãmp
->
«ddrs
 = 1;

283 
ãmp
->
addrs
 = &ãmp->
addr
;

284 
ãmp
->
addr
 =áddr;

285 
ãmp
->
quick
 = 1;

287  
ãmp
;

291 i‡(
r
->
udp_c⁄√˘i⁄s
.
√…s
 == 0) {

292  
NGX_NO_RESOLVER
;

295 
˘x
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_ªsﬁvî_˘x_t
));

297 i‡(
˘x
) {

298 
˘x
->
ªsﬁvî
 = 
r
;

301  
˘x
;

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

308 
ngx_öt_t
 
rc
;

309 
ngx_ªsﬁvî_t
 *
r
;

311 
r
 = 
˘x
->
ªsﬁvî
;

313 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

314 "ªsﬁve: \"%V\"", &
˘x
->
«me
);

316 i‡(
˘x
->
quick
) {

317 
˘x
->
	`h™dÀr
(ctx);

318  
NGX_OK
;

323 
rc
 = 
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

325 i‡(
rc
 =
NGX_OK
) {

326  
NGX_OK
;

331 i‡(
rc
 =
NGX_AGAIN
) {

332  
NGX_OK
;

337 i‡(
˘x
->
evít
) {

338 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

341 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

343  
NGX_ERROR
;

344 
	}
}

348 
	$ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

350 
uöt32_t
 
hash
;

351 
ngx_ªsﬁvî_t
 *
r
;

352 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

353 
ngx_ªsﬁvî_node_t
 *
∫
;

355 
r
 = 
˘x
->
ªsﬁvî
;

357 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

358 "ªsﬁvê«mêd⁄e: %i", 
˘x
->
°©e
);

360 i‡(
˘x
->
quick
) {

364 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

365 
	`ngx_dñ_timî
(
˘x
->
evít
);

370 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

372 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

374 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

376 i‡(
∫
) {

377 
p
 = &
∫
->
waôög
;

378 
w
 = 
∫
->
waôög
;

380 
w
) {

381 i‡(
w
 =
˘x
) {

382 *
p
 = 
w
->
√xt
;

384 
d⁄e
;

387 
p
 = &
w
->
√xt
;

388 
w
 = w->
√xt
;

392 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

393 "couldÇŸ c™˚»%VÑesﬁvög", &
˘x
->
«me
);

396 
d⁄e
:

398 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
«me_rbåì
, &r->
«me_expúe_queue
);

404 i‡(
˘x
->
evít
) {

405 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

408 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

411 
	}
}

416 
ngx_öt_t


417 
	$ngx_ªsﬁve_«me_locked
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

419 
uöt32_t
 
hash
;

420 
ö_addr_t
 
addr
, *
addrs
;

421 
ngx_öt_t
 
rc
;

422 
ngx_uöt_t
 
«ddrs
;

423 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

424 
ngx_ªsﬁvî_node_t
 *
∫
;

426 
hash
 = 
	`ngx_¸c32_sh‹t
(
˘x
->
«me
.
d©a
, ctx->«me.
Àn
);

428 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
˘x
->
«me
, 
hash
);

430 i‡(
∫
) {

432 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

434 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

436 
	`ngx_queue_ªmove
(&
∫
->
queue
);

438 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

440 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

442 
«ddrs
 = 
∫
->naddrs;

444 i‡(
«ddrs
) {

448 i‡(
«ddrs
 != 1) {

449 
addr
 = 0;

450 
addrs
 = 
	`ngx_ªsﬁvî_rŸ©e
(
r
, 
∫
->
u
.addrs, 
«ddrs
);

451 i‡(
addrs
 =
NULL
) {

452  
NGX_ERROR
;

456 
addr
 = 
∫
->
u
.addr;

457 
addrs
 = 
NULL
;

460 
˘x
->
√xt
 = 
∫
->
waôög
;

461 
∫
->
waôög
 = 
NULL
;

466 
˘x
->
°©e
 = 
NGX_OK
;

467 
˘x
->
«ddrs
 =Çaddrs;

468 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

469 
˘x
->
addr
 =áddr;

470 
√xt
 = 
˘x
->next;

472 
˘x
->
	`h™dÀr
(ctx);

474 
˘x
 = 
√xt
;

475 } 
˘x
);

477 i‡(
addrs
) {

478 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

481  
NGX_OK
;

486 i‡(
˘x
->
ªcursi⁄
++ < 
NGX_RESOLVER_MAX_RECURSION
) {

488 
˘x
->
«me
.
Àn
 = 
∫
->
˙Àn
;

489 
˘x
->
«me
.
d©a
 = 
∫
->
u
.
˙ame
;

491  
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

494 
˘x
->
√xt
 = 
∫
->
waôög
;

495 
∫
->
waôög
 = 
NULL
;

500 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

501 
√xt
 = 
˘x
->next;

503 
˘x
->
	`h™dÀr
(ctx);

505 
˘x
 = 
√xt
;

506 } 
˘x
);

508  
NGX_OK
;

511 i‡(
∫
->
waôög
) {

513 
˘x
->
√xt
 = 
∫
->
waôög
;

514 
∫
->
waôög
 = 
˘x
;

515 
˘x
->
°©e
 = 
NGX_AGAIN
;

517  
NGX_AGAIN
;

520 
	`ngx_queue_ªmove
(&
∫
->
queue
);

524 i‡(
∫
->
quîy
) {

525 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

526 
∫
->
quîy
 = 
NULL
;

529 i‡(
∫
->
˙Àn
) {

530 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

533 i‡(
∫
->
«ddrs
 > 1) {

534 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

541 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

542 i‡(
∫
 =
NULL
) {

543  
NGX_ERROR
;

546 
∫
->
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
˘x
->«me.
d©a
, ctx->«me.
Àn
);

547 i‡(
∫
->
«me
 =
NULL
) {

548 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

549  
NGX_ERROR
;

552 
∫
->
node
.
key
 = 
hash
;

553 
∫
->
∆í
 = (
u_sh‹t
Ë
˘x
->
«me
.
Àn
;

554 
∫
->
quîy
 = 
NULL
;

556 
	`ngx_rbåì_ö£π
(&
r
->
«me_rbåì
, &
∫
->
node
);

559 
rc
 = 
	`ngx_ªsﬁvî_¸óã_«me_quîy
(
∫
, 
˘x
);

561 i‡(
rc
 =
NGX_ERROR
) {

562 
Áûed
;

565 i‡(
rc
 =
NGX_DECLINED
) {

566 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

568 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

569 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

570 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

572 
˘x
->
°©e
 = 
NGX_RESOLVE_NXDOMAIN
;

573 
˘x
->
	`h™dÀr
(ctx);

575  
NGX_OK
;

578 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

579 
Áûed
;

582 i‡(
˘x
->
evít
 =
NULL
) {

583 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

584 i‡(
˘x
->
evít
 =
NULL
) {

585 
Áûed
;

588 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

589 
˘x
->
evít
->
d©a
 = ctx;

590 
˘x
->
evít
->
log
 = 
r
->log;

591 
˘x
->
idít
 = -1;

593 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

596 i‡(
	`ngx_queue_em±y
(&
r
->
«me_ª£nd_queue
)) {

597 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

600 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

602 
	`ngx_queue_ö£π_hód
(&
r
->
«me_ª£nd_queue
, &
∫
->
queue
);

604 
∫
->
˙Àn
 = 0;

605 
∫
->
«ddrs
 = 0;

606 
∫
->
vÆid
 = 0;

607 
∫
->
waôög
 = 
˘x
;

609 
˘x
->
°©e
 = 
NGX_AGAIN
;

611  
NGX_AGAIN
;

613 
Áûed
:

615 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

617 i‡(
∫
->
quîy
) {

618 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

621 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

623 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

625  
NGX_ERROR
;

626 
	}
}

629 
ngx_öt_t


630 
	$ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

632 
u_ch¨
 *
«me
;

633 
ngx_ªsﬁvî_t
 *
r
;

634 
ngx_ªsﬁvî_node_t
 *
∫
;

636 
r
 = 
˘x
->
ªsﬁvî
;

638 
˘x
->
addr
 = 
	`¡ohl
(ctx->addr);

642 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

644 i‡(
∫
) {

646 i‡(
∫
->
vÆid
 >
	`ngx_time
()) {

648 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolve cached");

650 
	`ngx_queue_ªmove
(&
∫
->
queue
);

652 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

654 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

656 
«me
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Ñn->
∆í
);

657 i‡(
«me
 =
NULL
) {

658 
Áûed
;

661 
˘x
->
«me
.
Àn
 = 
∫
->
∆í
;

662 
˘x
->
«me
.
d©a
 =Çame;

666 
˘x
->
°©e
 = 
NGX_OK
;

668 
˘x
->
	`h™dÀr
(ctx);

670 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
);

672  
NGX_OK
;

675 i‡(
∫
->
waôög
) {

677 
˘x
->
√xt
 = 
∫
->
waôög
;

678 
∫
->
waôög
 = 
˘x
;

679 
˘x
->
°©e
 = 
NGX_AGAIN
;

683  
NGX_OK
;

686 
	`ngx_queue_ªmove
(&
∫
->
queue
);

688 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

689 
∫
->
quîy
 = 
NULL
;

692 
∫
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, (
ngx_ªsﬁvî_node_t
));

693 i‡(
∫
 =
NULL
) {

694 
Áûed
;

697 
∫
->
node
.
key
 = 
˘x
->
addr
;

698 
∫
->
quîy
 = 
NULL
;

700 
	`ngx_rbåì_ö£π
(&
r
->
addr_rbåì
, &
∫
->
node
);

703 i‡(
	`ngx_ªsﬁvî_¸óã_addr_quîy
(
∫
, 
˘x
Ë!
NGX_OK
) {

704 
Áûed
;

707 i‡(
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
Ë!
NGX_OK
) {

708 
Áûed
;

711 
˘x
->
evít
 = 
	`ngx_ªsﬁvî_ˇŒoc
(
r
, (
ngx_evít_t
));

712 i‡(
˘x
->
evít
 =
NULL
) {

713 
Áûed
;

716 
˘x
->
evít
->
h™dÀr
 = 
ngx_ªsﬁvî_timeout_h™dÀr
;

717 
˘x
->
evít
->
d©a
 = ctx;

718 
˘x
->
evít
->
log
 = 
r
->log;

719 
˘x
->
idít
 = -1;

721 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timeout
);

723 i‡(
	`ngx_queue_em±y
(&
r
->
addr_ª£nd_queue
)) {

724 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë‘->
ª£nd_timeout
 * 1000));

727 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->
ª£nd_timeout
;

729 
	`ngx_queue_ö£π_hód
(&
r
->
addr_ª£nd_queue
, &
∫
->
queue
);

731 
∫
->
˙Àn
 = 0;

732 
∫
->
«ddrs
 = 0;

733 
∫
->
«me
 = 
NULL
;

734 
∫
->
∆í
 = 0;

735 
∫
->
vÆid
 = 0;

736 
∫
->
waôög
 = 
˘x
;

740 
˘x
->
°©e
 = 
NGX_AGAIN
;

742  
NGX_OK
;

744 
Áûed
:

746 i‡(
∫
) {

747 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

749 i‡(
∫
->
quîy
) {

750 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

753 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
);

758 i‡(
˘x
->
evít
) {

759 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
->
evít
);

762 
	`ngx_ªsﬁvî_‰ì
(
r
, 
˘x
);

764  
NGX_ERROR
;

765 
	}
}

769 
	$ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

771 
ö_addr_t
 
addr
;

772 
ngx_ªsﬁvî_t
 *
r
;

773 
ngx_ªsﬁvî_˘x_t
 *
w
, **
p
;

774 
ngx_ªsﬁvî_node_t
 *
∫
;

776 
r
 = 
˘x
->
ªsﬁvî
;

778 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

779 "ªsﬁvêadd∏d⁄e: %i", 
˘x
->
°©e
);

781 i‡(
˘x
->
evít
 && ctx->evít->
timî_£t
) {

782 
	`ngx_dñ_timî
(
˘x
->
evít
);

787 i‡(
˘x
->
°©e
 =
NGX_AGAIN
 || ctx->°©ê=
NGX_RESOLVE_TIMEDOUT
) {

789 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
˘x
->
addr
);

791 i‡(
∫
) {

792 
p
 = &
∫
->
waôög
;

793 
w
 = 
∫
->
waôög
;

795 
w
) {

796 i‡(
w
 =
˘x
) {

797 *
p
 = 
w
->
√xt
;

799 
d⁄e
;

802 
p
 = &
w
->
√xt
;

803 
w
 = w->
√xt
;

807 
addr
 = 
	`¡ohl
(
˘x
->addr);

809 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
log
, 0,

811 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

812 (
addr
 >> 8) & 0xff,áddr & 0xff);

815 
d⁄e
:

817 
	`ngx_ªsﬁvî_expúe
(
r
, &r->
addr_rbåì
, &r->
addr_expúe_queue
);

823 i‡(
˘x
->
evít
) {

824 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
->
evít
);

827 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
˘x
);

830 
	}
}

834 
	$ngx_ªsﬁvî_expúe
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

836 
time_t
 
now
;

837 
ngx_uöt_t
 
i
;

838 
ngx_queue_t
 *
q
;

839 
ngx_ªsﬁvî_node_t
 *
∫
;

841 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "resolverÉxpire");

843 
now
 = 
	`ngx_time
();

845 
i
 = 0; i < 2; i++) {

846 i‡(
	`ngx_queue_em±y
(
queue
)) {

850 
q
 = 
	`ngx_queue_œ°
(
queue
);

852 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

854 i‡(
now
 <
∫
->
expúe
) {

858 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

859 "ªsﬁvîÉxpúê\"%*s\"", (
size_t
Ë
∫
->
∆í
,Ñn->
«me
);

861 
	`ngx_queue_ªmove
(
q
);

863 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

865 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

867 
	}
}

870 
ngx_öt_t


871 
	$ngx_ªsﬁvî_£nd_quîy
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

873 
ssize_t
 
n
;

874 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

876 
uc
 = 
r
->
udp_c⁄√˘i⁄s
.
ñts
;

878 
uc
 = &uc[
r
->
œ°_c⁄√˘i⁄
++];

879 i‡(
r
->
œ°_c⁄√˘i⁄
 =r->
udp_c⁄√˘i⁄s
.
√…s
) {

880 
r
->
œ°_c⁄√˘i⁄
 = 0;

883 i‡(
uc
->
c⁄√˘i⁄
 =
NULL
) {

885 
uc
->
log
 = *
r
->log;

886 
uc
->
log
.
h™dÀr
 = 
ngx_ªsﬁvî_log_îr‹
;

887 
uc
->
log
.
d©a
 = uc;

888 
uc
->
log
.
a˘i⁄
 = "resolving";

890 i‡(
	`ngx_udp_c⁄√˘
(
uc
Ë!
NGX_OK
) {

891  
NGX_ERROR
;

894 
uc
->
c⁄√˘i⁄
->
d©a
 = 
r
;

895 
uc
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_ªsﬁvî_ªad_ª•⁄£
;

896 
uc
->
c⁄√˘i⁄
->
ªad
->
ªsﬁvî
 = 1;

899 
n
 = 
	`ngx_£nd
(
uc
->
c⁄√˘i⁄
, 
∫
->
quîy
,Ñn->
qÀn
);

901 i‡(
n
 == -1) {

902  
NGX_ERROR
;

905 i‡((
size_t
Ë
n
 !(size_tË
∫
->
qÀn
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 0, "send() incomplete");

907  
NGX_ERROR
;

910  
NGX_OK
;

911 
	}
}

915 
	$ngx_ªsﬁvî_ª£nd_h™dÀr
(
ngx_evít_t
 *
ev
)

917 
time_t
 
timî
, 
©imî
, 
¡imî
;

918 
ngx_ªsﬁvî_t
 *
r
;

920 
r
 = 
ev
->
d©a
;

922 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

927 
¡imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
«me_rbåì
, &r->
«me_ª£nd_queue
);

933 
©imî
 = 
	`ngx_ªsﬁvî_ª£nd
(
r
, &r->
addr_rbåì
, &r->
addr_ª£nd_queue
);

937 i‡(
¡imî
 == 0) {

938 
timî
 = 
©imî
;

940 } i‡(
©imî
 == 0) {

941 
timî
 = 
¡imî
;

944 
timî
 = (
©imî
 < 
¡imî
) ?átimer :Çtimer;

947 i‡(
timî
) {

948 
	`ngx_add_timî
(
r
->
evít
, (
ngx_m£c_t
Ë(
timî
 * 1000));

950 
	}
}

953 
time_t


954 
	$ngx_ªsﬁvî_ª£nd
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_rbåì_t
 *
åì
, 
ngx_queue_t
 *
queue
)

956 
time_t
 
now
;

957 
ngx_queue_t
 *
q
;

958 
ngx_ªsﬁvî_node_t
 *
∫
;

960 
now
 = 
	`ngx_time
();

963 i‡(
	`ngx_queue_em±y
(
queue
)) {

967 
q
 = 
	`ngx_queue_œ°
(
queue
);

969 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

971 i‡(
now
 < 
∫
->
expúe
) {

972  
∫
->
expúe
 - 
now
;

975 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

977 (
size_t
Ë
∫
->
∆í
,Ñn->
«me
,Ñn->
waôög
);

979 
	`ngx_queue_ªmove
(
q
);

981 i‡(
∫
->
waôög
) {

983 (Ë
	`ngx_ªsﬁvî_£nd_quîy
(
r
, 
∫
);

985 
∫
->
expúe
 = 
now
 + 
r
->
ª£nd_timeout
;

987 
	`ngx_queue_ö£π_hód
(
queue
, 
q
);

992 
	`ngx_rbåì_dñëe
(
åì
, &
∫
->
node
);

994 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

996 
	}
}

1000 
	$ngx_ªsﬁvî_ªad_ª•⁄£
(
ngx_evít_t
 *
ªv
)

1002 
ssize_t
 
n
;

1003 
ngx_c⁄√˘i⁄_t
 *
c
;

1004 
u_ch¨
 
buf
[
NGX_RESOLVER_UDP_SIZE
];

1006 
c
 = 
ªv
->
d©a
;

1009 
n
 = 
	`ngx_udp_ªcv
(
c
, 
buf
, 
NGX_RESOLVER_UDP_SIZE
);

1011 i‡(
n
 < 0) {

1015 
	`ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
c
->
d©a
, 
buf
, 
n
);

1017 } 
ªv
->
ªady
);

1018 
	}
}

1022 
	$ngx_ªsﬁvî_¥o˚ss_ª•⁄£
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
)

1024 *
îr
;

1025 
size_t
 
Àn
;

1026 
ngx_uöt_t
 
i
, 
times
, 
idít
, 
qidít
, 
Êags
, 
code
, 
nqs
, 
«n
,

1027 
qty≥
, 
q˛ass
;

1028 
ngx_queue_t
 *
q
;

1029 
ngx_ªsﬁvî_qs_t
 *
qs
;

1030 
ngx_ªsﬁvî_node_t
 *
∫
;

1031 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1033 i‡((
size_t
Ë
n
 < (
ngx_ªsﬁvî_quîy_t
)) {

1034 
sh‹t_ª•⁄£
;

1037 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
buf
;

1039 
idít
 = (
quîy
->
idít_hi
 << 8Ë+ quîy->
idít_lo
;

1040 
Êags
 = (
quîy
->
Êags_hi
 << 8Ë+ quîy->
Êags_lo
;

1041 
nqs
 = (
quîy
->
nqs_hi
 << 8Ë+ quîy->
nqs_lo
;

1042 
«n
 = (
quîy
->
«n_hi
 << 8Ë+ quîy->
«n_lo
;

1044 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1046 
idít
, 
Êags
, 
nqs
, 
«n
,

1047 (
quîy
->
¬s_hi
 << 8Ë+ quîy->
¬s_lo
,

1048 (
quîy
->
«r_hi
 << 8Ë+ quîy->
«r_lo
);

1050 i‡(!(
Êags
 & 0x8000)) {

1051 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1052 "övÆid DNSÑe•⁄£ %uòÊ:%04Xui", 
idít
, 
Êags
);

1056 
code
 = 
Êags
 & 0x7f;

1058 i‡(
code
 =
NGX_RESOLVE_FORMERR
) {

1060 
times
 = 0;

1062 
q
 = 
	`ngx_queue_hód
(&
r
->
«me_ª£nd_queue
);

1063 
q
 !
	`ngx_queue_£¡öñ
(&
r
->
«me_ª£nd_queue
Ë|| 
times
++ < 100;

1064 
q
 = 
	`ngx_queue_√xt
(q))

1066 
∫
 = 
	`ngx_queue_d©a
(
q
, 
ngx_ªsﬁvî_node_t
, 
queue
);

1067 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1069 i‡(
qidít
 =
idít
) {

1070 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1072 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
,

1073 
∫
->
∆í
,Ñn->
«me
);

1078 
dns_îr‹
;

1081 i‡(
code
 > 
NGX_RESOLVE_REFUSED
) {

1082 
dns_îr‹
;

1085 i‡(
nqs
 != 1) {

1086 
îr
 = "invalidÇumber of questions in DNSÑesponse";

1087 
d⁄e
;

1090 
i
 = (
ngx_ªsﬁvî_quîy_t
);

1092 
i
 < (
ngx_uöt_t
Ë
n
) {

1093 i‡(
buf
[
i
] == '\0') {

1094 
found
;

1097 
Àn
 = 
buf
[
i
];

1098 
i
 +1 + 
Àn
;

1101 
sh‹t_ª•⁄£
;

1103 
found
:

1105 i‡(
i
++ == 0) {

1106 
îr
 = "zero-length domainÇame in DNSÑesponse";

1107 
d⁄e
;

1110 i‡(
i
 + (
ngx_ªsﬁvî_qs_t
Ë+ 
«n
 * (2 + (
ngx_ªsﬁvî_™_t
))

1111 > (
ngx_uöt_t
Ë
n
)

1113 
sh‹t_ª•⁄£
;

1116 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë&
buf
[
i
];

1118 
qty≥
 = (
qs
->
ty≥_hi
 << 8Ë+ qs->
ty≥_lo
;

1119 
q˛ass
 = (
qs
->
˛ass_hi
 << 8Ë+ qs->
˛ass_lo
;

1121 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1122 "ªsﬁvî DNSÑe•⁄£ qt:%uò˛:%ui", 
qty≥
, 
q˛ass
);

1124 i‡(
q˛ass
 != 1) {

1125 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1126 "unknow¿quîy cœs†%uòö DNSÑe•⁄£", 
q˛ass
);

1130 
qty≥
) {

1132 
NGX_RESOLVE_A
:

1134 
	`ngx_ªsﬁvî_¥o˚ss_a
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
,

1135 
i
 + (
ngx_ªsﬁvî_qs_t
));

1139 
NGX_RESOLVE_PTR
:

1141 
	`ngx_ªsﬁvî_¥o˚ss_±r
(
r
, 
buf
, 
n
, 
idít
, 
code
, 
«n
);

1146 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1147 "unknow¿quîyÅy≥ %uòö DNSÑe•⁄£", 
qty≥
);

1153 
sh‹t_ª•⁄£
:

1155 
îr
 = "short dnsÑesponse";

1157 
d⁄e
:

1159 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1163 
dns_îr‹
:

1165 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1167 
code
, 
	`ngx_ªsﬁvî_°ªº‹
(code), 
idít
);

1169 
	}
}

1173 
	$ngx_ªsﬁvî_¥o˚ss_a
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
œ°
,

1174 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
,Çgx_uöt_à
™s
)

1176 *
îr
;

1177 
u_ch¨
 *
˙ame
;

1178 
size_t
 
Àn
;

1179 
öt32_t
 
âl
;

1180 
uöt32_t
 
hash
;

1181 
ö_addr_t
 
addr
, *
addrs
;

1182 
ngx_°r_t
 
«me
;

1183 
ngx_uöt_t
 
qty≥
, 
qidít
, 
«ddrs
, 
a
, 
i
, 
n
, 
°¨t
;

1184 
ngx_ªsﬁvî_™_t
 *
™
;

1185 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1186 
ngx_ªsﬁvî_node_t
 *
∫
;

1188 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[12], &buf[
œ°
]Ë!
NGX_OK
) {

1192 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvî qs:%V", &
«me
);

1194 
hash
 = 
	`ngx_¸c32_sh‹t
(
«me
.
d©a
,Çame.
Àn
);

1198 
∫
 = 
	`ngx_ªsﬁvî_lookup_«me
(
r
, &
«me
, 
hash
);

1200 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1201 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1202 "u√x≥˘edÑe•⁄£ f‹ %V", &
«me
);

1203 
Áûed
;

1206 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1208 i‡(
idít
 !
qidít
) {

1209 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1211 
idít
, &
«me
, 
qidít
);

1212 
Áûed
;

1215 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1217 i‡(
code
 =0 && 
«n
 == 0) {

1218 
code
 = 3;

1221 i‡(
code
) {

1222 
√xt
 = 
∫
->
waôög
;

1223 
∫
->
waôög
 = 
NULL
;

1225 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1227 
	`ngx_rbåì_dñëe
(&
r
->
«me_rbåì
, &
∫
->
node
);

1229 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1233 
√xt
) {

1234 
˘x
 = 
√xt
;

1235 
˘x
->
°©e
 = 
code
;

1236 
√xt
 = 
˘x
->next;

1238 
˘x
->
	`h™dÀr
(ctx);

1244 
i
 = 
™s
;

1245 
«ddrs
 = 0;

1246 
addr
 = 0;

1247 
addrs
 = 
NULL
;

1248 
˙ame
 = 
NULL
;

1249 
qty≥
 = 0;

1250 
âl
 = 0;

1252 
a
 = 0;á < 
«n
;á++) {

1254 
°¨t
 = 
i
;

1256 
i
 < 
œ°
) {

1258 i‡(
buf
[
i
] & 0xc0) {

1259 
i
 += 2;

1260 
found
;

1263 i‡(
buf
[
i
] == 0) {

1264 
i
++;

1265 
ã°_Àngth
;

1268 
i
 +1 + 
buf
[i];

1271 
sh‹t_ª•⁄£
;

1273 
ã°_Àngth
:

1275 i‡(
i
 - 
°¨t
 < 2) {

1276 
îr
 = "invalidÇame in dnsÑesponse";

1277 
övÆid
;

1280 
found
:

1282 i‡(
i
 + (
ngx_ªsﬁvî_™_t
Ë>
œ°
) {

1283 
sh‹t_ª•⁄£
;

1286 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1288 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1289 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1290 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1291 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1293 i‡(
âl
 < 0) {

1294 
âl
 = 0;

1297 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1299 
i
 +(
ngx_ªsﬁvî_™_t
);

1301 i‡(
i
 + 
Àn
 > 
œ°
) {

1302 
sh‹t_ª•⁄£
;

1305 
addr
 = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1306 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1308 
«ddrs
++;

1310 
i
 +
Àn
;

1312 } i‡(
qty≥
 =
NGX_RESOLVE_CNAME
) {

1313 
˙ame
 = &
buf
[
i
] + (
ngx_ªsﬁvî_™_t
);

1314 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1316 } i‡(
qty≥
 =
NGX_RESOLVE_DNAME
) {

1317 
i
 +(
ngx_ªsﬁvî_™_t
Ë+ 
Àn
;

1320 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1321 "u√x≥˘ed qty≥ %ui", 
qty≥
);

1325 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1327 
«ddrs
, 
˙ame
, 
âl
);

1329 i‡(
«ddrs
) {

1331 i‡(
«ddrs
 == 1) {

1332 
∫
->
u
.
addr
 =áddr;

1336 
addrs
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
«ddrs
 * (
ö_addr_t
));

1337 i‡(
addrs
 =
NULL
) {

1341 
n
 = 0;

1342 
i
 = 
™s
;

1344 
a
 = 0;á < 
«n
;á++) {

1348 i‡(
buf
[
i
] & 0xc0) {

1349 
i
 += 2;

1350 
ok
;

1353 i‡(
buf
[
i
] == 0) {

1354 
i
++;

1355 
ok
;

1358 
i
 +1 + 
buf
[i];

1361 
ok
:

1363 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
];

1365 
qty≥
 = (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
;

1366 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1368 
i
 +(
ngx_ªsﬁvî_™_t
);

1370 i‡(
qty≥
 =
NGX_RESOLVE_A
) {

1372 
addrs
[
n
++] = 
	`ht⁄l
((
buf
[
i
] << 24) + (buf[i + 1] << 16)

1373 + (
buf
[
i
 + 2] << 8) + (buf[i + 3]));

1375 i‡(
n
 =
«ddrs
) {

1380 
i
 +
Àn
;

1383 
∫
->
u
.
addrs
 =áddrs;

1385 
addrs
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->
u
.addrs,

1386 
«ddrs
 * (
ö_addr_t
));

1387 i‡(
addrs
 =
NULL
) {

1392 
∫
->
«ddrs
 = (
u_sh‹t
)Çaddrs;

1394 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1396 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1397 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1399 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1401 
√xt
 = 
∫
->
waôög
;

1402 
∫
->
waôög
 = 
NULL
;

1406 
√xt
) {

1407 
˘x
 = 
√xt
;

1408 
˘x
->
°©e
 = 
NGX_OK
;

1409 
˘x
->
«ddrs
 =Çaddrs;

1410 
˘x
->
addrs
 = (
«ddrs
 =1Ë? &˘x->
addr
 :áddrs;

1411 
˘x
->
addr
 =áddr;

1412 
√xt
 = 
˘x
->next;

1414 
˘x
->
	`h™dÀr
(ctx);

1417 i‡(
«ddrs
 > 1) {

1418 
	`ngx_ªsﬁvî_‰ì
(
r
, 
addrs
);

1421 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1422 
∫
->
quîy
 = 
NULL
;

1426 } i‡(
˙ame
) {

1430 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, 
˙ame
, &buf[
œ°
]Ë!
NGX_OK
) {

1434 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1435 "ªsﬁvî c«me:\"%V\"", &
«me
);

1437 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1439 
∫
->
˙Àn
 = (
u_sh‹t
Ë
«me
.
Àn
;

1440 
∫
->
u
.
˙ame
 = 
«me
.
d©a
;

1442 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1443 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1445 
	`ngx_queue_ö£π_hód
(&
r
->
«me_expúe_queue
, &
∫
->
queue
);

1447 
˘x
 = 
∫
->
waôög
;

1448 
∫
->
waôög
 = 
NULL
;

1450 i‡(
˘x
) {

1451 
˘x
->
«me
 =Çame;

1453 (Ë
	`ngx_ªsﬁve_«me_locked
(
r
, 
˘x
);

1456 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
quîy
);

1457 
∫
->
quîy
 = 
NULL
;

1462 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1464 
qty≥
);

1467 
sh‹t_ª•⁄£
:

1469 
îr
 = "short dnsÑesponse";

1471 
övÆid
:

1475 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1479 
Áûed
:

1483 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1486 
	}
}

1490 
	$ngx_ªsﬁvî_¥o˚ss_±r
(
ngx_ªsﬁvî_t
 *
r
, 
u_ch¨
 *
buf
, 
size_t
 
n
,

1491 
ngx_uöt_t
 
idít
,Çgx_uöt_à
code
,Çgx_uöt_à
«n
)

1493 *
îr
;

1494 
size_t
 
Àn
;

1495 
ö_addr_t
 
addr
;

1496 
öt32_t
 
âl
;

1497 
ngx_öt_t
 
digô
;

1498 
ngx_°r_t
 
«me
;

1499 
ngx_uöt_t
 
i
, 
mask
, 
qidít
;

1500 
ngx_ªsﬁvî_™_t
 *
™
;

1501 
ngx_ªsﬁvî_˘x_t
 *
˘x
, *
√xt
;

1502 
ngx_ªsﬁvî_node_t
 *
∫
;

1504 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, 
NULL
, 
buf
, &buf[12], &buf[
n
]Ë!
NGX_OK
) {

1505 
övÆid_ö_addr_¨∑
;

1508 
addr
 = 0;

1509 
i
 = 12;

1511 
mask
 = 0; mask < 32; mask += 8) {

1512 
Àn
 = 
buf
[
i
++];

1514 
digô
 = 
	`ngx_©oi
(&
buf
[
i
], 
Àn
);

1515 i‡(
digô
 =
NGX_ERROR
 || digit > 255) {

1516 
övÆid_ö_addr_¨∑
;

1519 
addr
 +
digô
 << 
mask
;

1520 
i
 +
Àn
;

1523 i‡(
	`ngx_°rcmp
(&
buf
[
i
], "\7in-addr\4arpa") != 0) {

1524 
övÆid_ö_addr_¨∑
;

1529 
∫
 = 
	`ngx_ªsﬁvî_lookup_addr
(
r
, 
addr
);

1531 i‡(
∫
 =
NULL
 ||Ñn->
quîy
 == NULL) {

1532 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1534 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1535 (
addr
 >> 8) & 0xff,áddr & 0xff);

1536 
Áûed
;

1539 
qidít
 = (
∫
->
quîy
[0] << 8) +Ñn->query[1];

1541 i‡(
idít
 !
qidít
) {

1542 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1544 
idít
, (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

1545 (
addr
 >> 8Ë& 0xff,ádd∏& 0xff, 
qidít
);

1546 
Áûed
;

1549 i‡(
code
 =0 && 
«n
 == 0) {

1550 
code
 = 3;

1553 i‡(
code
) {

1554 
√xt
 = 
∫
->
waôög
;

1555 
∫
->
waôög
 = 
NULL
;

1557 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1559 
	`ngx_rbåì_dñëe
(&
r
->
addr_rbåì
, &
∫
->
node
);

1561 
	`ngx_ªsﬁvî_‰ì_node
(
r
, 
∫
);

1565 
√xt
) {

1566 
˘x
 = 
√xt
;

1567 
˘x
->
°©e
 = 
code
;

1568 
√xt
 = 
˘x
->next;

1570 
˘x
->
	`h™dÀr
(ctx);

1576 
i
 +("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
);

1578 i‡(
i
 + 2 + (
ngx_ªsﬁvî_™_t
Ë> (
ngx_uöt_t
Ë
n
) {

1579 
sh‹t_ª•⁄£
;

1584 i‡(
buf
[
i
] != 0xc0 || buf[i + 1] != 0x0c) {

1585 
îr
 = "invalid in-addr.arpaÇame in DNSÑesponse";

1586 
övÆid
;

1589 
™
 = (
ngx_ªsﬁvî_™_t
 *Ë&
buf
[
i
 + 2];

1591 
Àn
 = (
™
->
Àn_hi
 << 8Ë+án->
Àn_lo
;

1592 
âl
 = (
™
->ttl[0] << 24) + (an->ttl[1] << 16)

1593 + (
™
->
âl
[2] << 8) + (an->ttl[3]);

1595 i‡(
âl
 < 0) {

1596 
âl
 = 0;

1599 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0,

1601 (
™
->
ty≥_hi
 << 8Ë+án->
ty≥_lo
,

1602 (
™
->
˛ass_hi
 << 8Ë+án->
˛ass_lo
, 
Àn
);

1604 
i
 +2 + (
ngx_ªsﬁvî_™_t
);

1606 i‡(
i
 + 
Àn
 > (
ngx_uöt_t
Ë
n
) {

1607 
sh‹t_ª•⁄£
;

1610 i‡(
	`ngx_ªsﬁvî_c›y
(
r
, &
«me
, 
buf
, &buf[
i
], &buf[
n
]Ë!
NGX_OK
) {

1614 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
r
->
log
, 0, "ªsﬁvîán:%V", &
«me
);

1616 i‡(
«me
.
Àn
 !(
size_t
Ë
∫
->
∆í


1617 || 
	`ngx_°∫cmp
(
«me
.
d©a
, 
∫
->«me,Çame.
Àn
) != 0)

1619 i‡(
∫
->
∆í
) {

1620 
	`ngx_ªsﬁvî_‰ì
(
r
, 
∫
->
«me
);

1623 
∫
->
∆í
 = (
u_sh‹t
Ë
«me
.
Àn
;

1624 
∫
->
«me
 =Çame.
d©a
;

1626 
«me
.
d©a
 = 
	`ngx_ªsﬁvî_dup
(
r
, 
∫
->«me,Çame.
Àn
);

1627 i‡(
«me
.
d©a
 =
NULL
) {

1628 
Áûed
;

1632 
	`ngx_queue_ªmove
(&
∫
->
queue
);

1634 
∫
->
vÆid
 = 
	`ngx_time
(Ë+ (
r
->vÆid ?Ñ->vÆid : 
âl
);

1635 
∫
->
expúe
 = 
	`ngx_time
(Ë+ 
r
->expire;

1637 
	`ngx_queue_ö£π_hód
(&
r
->
addr_expúe_queue
, &
∫
->
queue
);

1639 
√xt
 = 
∫
->
waôög
;

1640 
∫
->
waôög
 = 
NULL
;

1644 
√xt
) {

1645 
˘x
 = 
√xt
;

1646 
˘x
->
°©e
 = 
NGX_OK
;

1647 
˘x
->
«me
 =Çame;

1648 
√xt
 = 
˘x
->next;

1650 
˘x
->
	`h™dÀr
(ctx);

1653 
	`ngx_ªsﬁvî_‰ì
(
r
, 
«me
.
d©a
);

1657 
övÆid_ö_addr_¨∑
:

1659 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0,

1663 
sh‹t_ª•⁄£
:

1665 
îr
 = "short DNSÑesponse";

1667 
övÆid
:

1671 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1675 
Áûed
:

1680 
	}
}

1683 
ngx_ªsﬁvî_node_t
 *

1684 
	$ngx_ªsﬁvî_lookup_«me
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 
hash
)

1686 
ngx_öt_t
 
rc
;

1687 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1688 
ngx_ªsﬁvî_node_t
 *
∫
;

1690 
node
 = 
r
->
«me_rbåì
.
roŸ
;

1691 
£¡öñ
 = 
r
->
«me_rbåì
.sentinel;

1693 
node
 !
£¡öñ
) {

1695 i‡(
hash
 < 
node
->
key
) {

1696 
node
 =Çode->
À·
;

1700 i‡(
hash
 > 
node
->
key
) {

1701 
node
 =Çode->
right
;

1707 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1709 
rc
 = 
	`ngx_memn2cmp
(
«me
->
d©a
, 
∫
->«me,Çame->
Àn
,Ñn->
∆í
);

1711 i‡(
rc
 == 0) {

1712  
∫
;

1715 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1720  
NULL
;

1721 
	}
}

1724 
ngx_ªsﬁvî_node_t
 *

1725 
	$ngx_ªsﬁvî_lookup_addr
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 
addr
)

1727 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1729 
node
 = 
r
->
addr_rbåì
.
roŸ
;

1730 
£¡öñ
 = 
r
->
addr_rbåì
.sentinel;

1732 
node
 !
£¡öñ
) {

1734 i‡(
addr
 < 
node
->
key
) {

1735 
node
 =Çode->
À·
;

1739 i‡(
addr
 > 
node
->
key
) {

1740 
node
 =Çode->
right
;

1746  (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1751  
NULL
;

1752 
	}
}

1756 
	$ngx_ªsﬁvî_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1757 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1759 
ngx_rbåì_node_t
 **
p
;

1760 
ngx_ªsﬁvî_node_t
 *
∫
, *
∫_ãmp
;

1764 i‡(
node
->
key
 < 
ãmp
->key) {

1766 
p
 = &
ãmp
->
À·
;

1768 } i‡(
node
->
key
 > 
ãmp
->key) {

1770 
p
 = &
ãmp
->
right
;

1774 
∫
 = (
ngx_ªsﬁvî_node_t
 *Ë
node
;

1775 
∫_ãmp
 = (
ngx_ªsﬁvî_node_t
 *Ë
ãmp
;

1777 
p
 = (
	`ngx_memn2cmp
(
∫
->
«me
, 
∫_ãmp
->«me,Ñn->
∆í
,Ñn_temp->nlen)

1778 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

1781 i‡(*
p
 =
£¡öñ
) {

1785 
ãmp
 = *
p
;

1788 *
p
 = 
node
;

1789 
node
->
∑ª¡
 = 
ãmp
;

1790 
node
->
À·
 = 
£¡öñ
;

1791 
node
->
right
 = 
£¡öñ
;

1792 
	`ngx_rbt_ªd
(
node
);

1793 
	}
}

1796 
ngx_öt_t


1797 
	$ngx_ªsﬁvî_¸óã_«me_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1799 
u_ch¨
 *
p
, *
s
;

1800 
size_t
 
Àn
, 
∆í
;

1801 
ngx_uöt_t
 
idít
;

1802 
ngx_ªsﬁvî_qs_t
 *
qs
;

1803 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1805 
∆í
 = 
˘x
->
«me
.
Àn
 ? (1 + ctx->name.len + 1) : 1;

1807 
Àn
 = (
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
 + (
ngx_ªsﬁvî_qs_t
);

1809 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1810 i‡(
p
 =
NULL
) {

1811  
NGX_ERROR
;

1814 
∫
->
qÀn
 = (
u_sh‹t
Ë
Àn
;

1815 
∫
->
quîy
 = 
p
;

1817 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1819 
idít
 = 
	`ngx_øndom
();

1821 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
˘x
->
ªsﬁvî
->
log
, 0,

1822 "ªsﬁve: \"%V\" %i", &
˘x
->
«me
, 
idít
 & 0xffff);

1824 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1825 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1828 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1831 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1832 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1833 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1834 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1836 
p
 +(
ngx_ªsﬁvî_quîy_t
Ë+ 
∆í
;

1838 
qs
 = (
ngx_ªsﬁvî_qs_t
 *Ë
p
;

1841 
qs
->
ty≥_hi
 = 0; qs->
ty≥_lo
 = (
u_ch¨
Ë
˘x
->
ty≥
;

1844 
qs
->
˛ass_hi
 = 0; qs->
˛ass_lo
 = 1;

1848 
Àn
 = 0;

1849 
p
--;

1850 *
p
-- = '\0';

1852 i‡(
˘x
->
«me
.
Àn
 == 0) {

1853  
NGX_DECLINED
;

1856 
s
 = 
˘x
->
«me
.
d©a
 + ctx->«me.
Àn
 - 1; s >= ctx->name.data; s--) {

1857 i‡(*
s
 != '.') {

1858 *
p
 = *
s
;

1859 
Àn
++;

1862 i‡(
Àn
 == 0 ||Üen > 255) {

1863  
NGX_DECLINED
;

1866 *
p
 = (
u_ch¨
Ë
Àn
;

1867 
Àn
 = 0;

1870 
p
--;

1873 i‡(
Àn
 == 0 ||Üen > 255) {

1874  
NGX_DECLINED
;

1877 *
p
 = (
u_ch¨
Ë
Àn
;

1879  
NGX_OK
;

1880 
	}
}

1885 
ngx_öt_t


1886 
	$ngx_ªsﬁvî_¸óã_addr_quîy
(
ngx_ªsﬁvî_node_t
 *
∫
, 
ngx_ªsﬁvî_˘x_t
 *
˘x
)

1888 
u_ch¨
 *
p
, *
d
;

1889 
size_t
 
Àn
;

1890 
ngx_öt_t
 
n
;

1891 
ngx_uöt_t
 
idít
;

1892 
ngx_ªsﬁvî_quîy_t
 *
quîy
;

1894 
Àn
 = (
ngx_ªsﬁvî_quîy_t
)

1896 + (
ngx_ªsﬁvî_qs_t
);

1898 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
˘x
->
ªsﬁvî
, 
Àn
);

1899 i‡(
p
 =
NULL
) {

1900  
NGX_ERROR
;

1903 
∫
->
quîy
 = 
p
;

1904 
quîy
 = (
ngx_ªsﬁvî_quîy_t
 *Ë
p
;

1906 
idít
 = 
	`ngx_øndom
();

1908 
quîy
->
idít_hi
 = (
u_ch¨
Ë((
idít
 >> 8) & 0xff);

1909 
quîy
->
idít_lo
 = (
u_ch¨
Ë(
idít
 & 0xff);

1912 
quîy
->
Êags_hi
 = 1; quîy->
Êags_lo
 = 0;

1915 
quîy
->
nqs_hi
 = 0; quîy->
nqs_lo
 = 1;

1916 
quîy
->
«n_hi
 = 0; quîy->
«n_lo
 = 0;

1917 
quîy
->
¬s_hi
 = 0; quîy->
¬s_lo
 = 0;

1918 
quîy
->
«r_hi
 = 0; quîy->
«r_lo
 = 0;

1920 
p
 +(
ngx_ªsﬁvî_quîy_t
);

1922 
n
 = 0;Ç < 32;Ç += 8) {

1923 
d
 = 
	`ngx_•rötf
(&
p
[1], "%ud", (
˘x
->
addr
 >> 
n
) & 0xff);

1924 *
p
 = (
u_ch¨
Ë(
d
 - &p[1]);

1925 
p
 = 
d
;

1929 
	`ngx_mem˝y
(
p
, "\7in-addr\4arpa\0\0\14\0\1", 18);

1931 
∫
->
qÀn
 = (
u_sh‹t
)

1932 (
p
 + ("\7ö-addr\4¨∑"Ë+ (
ngx_ªsﬁvî_qs_t
)

1933 - 
∫
->
quîy
);

1935  
NGX_OK
;

1936 
	}
}

1939 
ngx_öt_t


1940 
	$ngx_ªsﬁvî_c›y
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_°r_t
 *
«me
, 
u_ch¨
 *
buf
, u_ch¨ *
§c
,

1941 
u_ch¨
 *
œ°
)

1943 *
îr
;

1944 
u_ch¨
 *
p
, *
d°
;

1945 
ssize_t
 
Àn
;

1946 
ngx_uöt_t
 
i
, 
n
;

1948 
p
 = 
§c
;

1949 
Àn
 = -1;

1956 
i
 = 0; i < 128; i++) {

1957 
n
 = *
p
++;

1959 i‡(
n
 == 0) {

1960 
d⁄e
;

1963 i‡(
n
 & 0xc0) {

1964 
n
 = (“ & 0x3fË<< 8Ë+ *
p
;

1965 
p
 = &
buf
[
n
];

1968 
Àn
 +1 + 
n
;

1969 
p
 = &p[
n
];

1972 i‡(
p
 >
œ°
) {

1973 
îr
 = "name is out ofÑesponse";

1974 
övÆid
;

1978 
îr
 = "compressionÖointersÜoop";

1980 
övÆid
:

1982 
	`ngx_log_îr‹
(
r
->
log_Àvñ
,Ñ->
log
, 0, 
îr
);

1984  
NGX_ERROR
;

1986 
d⁄e
:

1988 i‡(
«me
 =
NULL
) {

1989  
NGX_OK
;

1992 i‡(
Àn
 == -1) {

1993 
«me
->
Àn
 = 0;

1994 
«me
->
d©a
 = 
NULL
;

1995  
NGX_OK
;

1998 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
Àn
);

1999 i‡(
d°
 =
NULL
) {

2000  
NGX_ERROR
;

2003 
«me
->
d©a
 = 
d°
;

2005 
n
 = *
§c
++;

2008 i‡(
n
 & 0xc0) {

2009 
n
 = (“ & 0x3fË<< 8Ë+ *
§c
;

2010 
§c
 = &
buf
[
n
];

2012 
n
 = *
§c
++;

2015 
	`ngx_mem˝y
(
d°
, 
§c
, 
n
);

2016 
d°
 +
n
;

2017 
§c
 +
n
;

2019 
n
 = *
§c
++;

2021 i‡(
n
 != 0) {

2022 *
d°
++ = '.';

2026 i‡(
n
 == 0) {

2027 
«me
->
Àn
 = 
d°
 -Çame->
d©a
;

2028  
NGX_OK
;

2031 
	}
}

2035 
	$ngx_ªsﬁvî_timeout_h™dÀr
(
ngx_evít_t
 *
ev
)

2037 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

2039 
˘x
 = 
ev
->
d©a
;

2041 
˘x
->
°©e
 = 
NGX_RESOLVE_TIMEDOUT
;

2043 
˘x
->
	`h™dÀr
(ctx);

2044 
	}
}

2048 
	$ngx_ªsﬁvî_‰ì_node
(
ngx_ªsﬁvî_t
 *
r
, 
ngx_ªsﬁvî_node_t
 *
∫
)

2052 i‡(
∫
->
quîy
) {

2053 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
quîy
);

2056 i‡(
∫
->
«me
) {

2057 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
«me
);

2060 i‡(
∫
->
˙Àn
) {

2061 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
˙ame
);

2064 i‡(
∫
->
«ddrs
 > 1) {

2065 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
->
u
.
addrs
);

2068 
	`ngx_ªsﬁvî_‰ì_locked
(
r
, 
∫
);

2071 
	}
}

2075 
	$ngx_ªsﬁvî_Æloc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2077 
u_ch¨
 *
p
;

2081 
p
 = 
	`ngx_Æloc
(
size
, 
r
->
log
);

2085  
p
;

2086 
	}
}

2090 
	$ngx_ªsﬁvî_ˇŒoc
(
ngx_ªsﬁvî_t
 *
r
, 
size_t
 
size
)

2092 
u_ch¨
 *
p
;

2094 
p
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2096 i‡(
p
) {

2097 
	`ngx_memzîo
(
p
, 
size
);

2100  
p
;

2101 
	}
}

2105 
	$ngx_ªsﬁvî_‰ì
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2109 
	`ngx_‰ì
(
p
);

2112 
	}
}

2116 
	$ngx_ªsﬁvî_‰ì_locked
(
ngx_ªsﬁvî_t
 *
r
, *
p
)

2118 
	`ngx_‰ì
(
p
);

2119 
	}
}

2123 
	$ngx_ªsﬁvî_dup
(
ngx_ªsﬁvî_t
 *
r
, *
§c
, 
size_t
 
size
)

2125 *
d°
;

2127 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
size
);

2129 i‡(
d°
 =
NULL
) {

2130  
d°
;

2133 
	`ngx_mem˝y
(
d°
, 
§c
, 
size
);

2135  
d°
;

2136 
	}
}

2139 
ö_addr_t
 *

2140 
	$ngx_ªsﬁvî_rŸ©e
(
ngx_ªsﬁvî_t
 *
r
, 
ö_addr_t
 *
§c
, 
ngx_uöt_t
 
n
)

2142 *
d°
, *
p
;

2143 
ngx_uöt_t
 
j
;

2145 
d°
 = 
	`ngx_ªsﬁvî_Æloc
(
r
, 
n
 * (
ö_addr_t
));

2147 i‡(
d°
 =
NULL
) {

2148  
d°
;

2151 
j
 = 
	`ngx_øndom
(Ë% 
n
;

2153 i‡(
j
 == 0) {

2154 
	`ngx_mem˝y
(
d°
, 
§c
, 
n
 * (
ö_addr_t
));

2155  
d°
;

2158 
p
 = 
	`ngx_˝ymem
(
d°
, &
§c
[
j
], (
n
 - jË* (
ö_addr_t
));

2159 
	`ngx_mem˝y
(
p
, 
§c
, 
j
 * (
ö_addr_t
));

2161  
d°
;

2162 
	}
}

2166 
	$ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
)

2168 *
îr‹s
[] = {

2176 i‡(
îr
 > 0 &&Érr < 6) {

2177  
îr‹s
[
îr
 - 1];

2180 i‡(
îr
 =
NGX_RESOLVE_TIMEDOUT
) {

2185 
	}
}

2188 
u_ch¨
 *

2189 
	$ngx_ªsﬁvî_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

2191 
u_ch¨
 *
p
;

2192 
ngx_udp_c⁄√˘i⁄_t
 *
uc
;

2194 
p
 = 
buf
;

2196 i‡(
log
->
a˘i⁄
) {

2197 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

2198 
Àn
 -
p
 - 
buf
;

2201 
uc
 = 
log
->
d©a
;

2203 i‡(
uc
) {

2204 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñesﬁvî: %V", &
uc
->
£rvî
);

2207  
p
;

2208 
	}
}

2211 
ngx_öt_t


2212 
	$ngx_udp_c⁄√˘
(
ngx_udp_c⁄√˘i⁄_t
 *
uc
)

2214 
rc
;

2215 
ngx_öt_t
 
evít
;

2216 
ngx_evít_t
 *
ªv
, *
wev
;

2217 
ngx_sockë_t
 
s
;

2218 
ngx_c⁄√˘i⁄_t
 *
c
;

2220 
s
 = 
	`ngx_sockë
(
uc
->
sockaddr
->
ß_Ámûy
, 
SOCK_DGRAM
, 0);

2222 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0, "UDP sockë %d", 
s
);

2224 i‡(
s
 == -1) {

2225 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2226 
ngx_sockë_n
 " failed");

2227  
NGX_ERROR
;

2230 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, &
uc
->
log
);

2232 i‡(
c
 =
NULL
) {

2233 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2234 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2235 
ngx_˛o£_sockë_n
 "failed");

2238  
NGX_ERROR
;

2241 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

2242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2243 
ngx_n⁄blockög_n
 " failed");

2245 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

2247 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

2248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2249 
ngx_˛o£_sockë_n
 " failed");

2252  
NGX_ERROR
;

2255 
ªv
 = 
c
->
ªad
;

2256 
wev
 = 
c
->
wrôe
;

2258 
ªv
->
log
 = &
uc
->log;

2259 
wev
->
log
 = &
uc
->log;

2261 
uc
->
c⁄√˘i⁄
 = 
c
;

2263 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

2265 #i‡(
NGX_THREADS
)

2269 
ªv
->
lock
 = &
c
->lock;

2270 
wev
->
lock
 = &
c
->lock;

2271 
ªv
->
own_lock
 = &
c
->
lock
;

2272 
wev
->
own_lock
 = &
c
->
lock
;

2276 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, &
uc
->
log
, 0,

2277 "c⁄√˘Åÿ%V, fd:%d #%d", &
uc
->
£rvî
, 
s
, 
c
->
numbî
);

2279 
rc
 = 
	`c⁄√˘
(
s
, 
uc
->
sockaddr
, uc->
sockÀn
);

2283 i‡(
rc
 == -1) {

2284 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, &
uc
->
log
, 
ngx_sockë_î∫o
,

2287  
NGX_ERROR
;

2291 
wev
->
ªady
 = 1;

2293 i‡(
ngx_add_evít
) {

2295 
evít
 = (
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) ?

2296  
NGX_CLEAR_EVENT
:

2297  
NGX_LEVEL_EVENT
;

2300 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

2301  
NGX_ERROR
;

2307 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

2308  
NGX_ERROR
;

2312  
NGX_OK
;

2313 
	}
}

	@src/core/ngx_resolver.h

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‚de‡
_NGX_RESOLVER_H_INCLUDED_


13 
	#_NGX_RESOLVER_H_INCLUDED_


	)

16 
	#NGX_RESOLVE_A
 1

	)

17 
	#NGX_RESOLVE_CNAME
 5

	)

18 
	#NGX_RESOLVE_PTR
 12

	)

19 
	#NGX_RESOLVE_MX
 15

	)

20 
	#NGX_RESOLVE_TXT
 16

	)

21 
	#NGX_RESOLVE_DNAME
 39

	)

23 
	#NGX_RESOLVE_FORMERR
 1

	)

24 
	#NGX_RESOLVE_SERVFAIL
 2

	)

25 
	#NGX_RESOLVE_NXDOMAIN
 3

	)

26 
	#NGX_RESOLVE_NOTIMP
 4

	)

27 
	#NGX_RESOLVE_REFUSED
 5

	)

28 
	#NGX_RESOLVE_TIMEDOUT
 
NGX_ETIMEDOUT


	)

31 
	#NGX_NO_RESOLVER
 (*Ë-1

	)

33 
	#NGX_RESOLVER_MAX_RECURSION
 50

	)

37 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

38 
sockaddr
 *
	msockaddr
;

39 
sockÀn_t
 
	msockÀn
;

40 
ngx_°r_t
 
	m£rvî
;

41 
ngx_log_t
 
	mlog
;

42 } 
	tngx_udp_c⁄√˘i⁄_t
;

45 
ngx_ªsﬁvî_˘x_s
 
	tngx_ªsﬁvî_˘x_t
;

47 (*
	tngx_ªsﬁvî_h™dÀr_±
)(
	tngx_ªsﬁvî_˘x_t
 *
	t˘x
);

51 
ngx_rbåì_node_t
 
node
;

52 
ngx_queue_t
 
queue
;

55 
u_ch¨
 *
«me
;

57 
u_sh‹t
 
∆í
;

58 
u_sh‹t
 
qÀn
;

60 
u_ch¨
 *
quîy
;

63 
ö_addr_t
 
addr
;

64 
ö_addr_t
 *
addrs
;

65 
u_ch¨
 *
˙ame
;

66 } 
u
;

68 
u_sh‹t
 
«ddrs
;

69 
u_sh‹t
 
˙Àn
;

71 
time_t
 
expúe
;

72 
time_t
 
vÆid
;

74 
ngx_ªsﬁvî_˘x_t
 *
waôög
;

75 } 
	tngx_ªsﬁvî_node_t
;

80 
ngx_evít_t
 *
evít
;

81 *
dummy
;

82 
ngx_log_t
 *
log
;

85 
ngx_öt_t
 
idít
;

88 
ngx_¨øy_t
 
udp_c⁄√˘i⁄s
;

89 
ngx_uöt_t
 
œ°_c⁄√˘i⁄
;

91 
ngx_rbåì_t
 
«me_rbåì
;

92 
ngx_rbåì_node_t
 
«me_£¡öñ
;

94 
ngx_rbåì_t
 
addr_rbåì
;

95 
ngx_rbåì_node_t
 
addr_£¡öñ
;

97 
ngx_queue_t
 
«me_ª£nd_queue
;

98 
ngx_queue_t
 
addr_ª£nd_queue
;

100 
ngx_queue_t
 
«me_expúe_queue
;

101 
ngx_queue_t
 
addr_expúe_queue
;

103 
time_t
 
ª£nd_timeout
;

104 
time_t
 
expúe
;

105 
time_t
 
vÆid
;

107 
ngx_uöt_t
 
log_Àvñ
;

108 } 
	tngx_ªsﬁvî_t
;

111 
	sngx_ªsﬁvî_˘x_s
 {

112 
ngx_ªsﬁvî_˘x_t
 *
√xt
;

113 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

114 
ngx_udp_c⁄√˘i⁄_t
 *
udp_c⁄√˘i⁄
;

117 
ngx_öt_t
 
idít
;

119 
ngx_öt_t
 
°©e
;

120 
ngx_öt_t
 
ty≥
;

121 
ngx_°r_t
 
«me
;

123 
ngx_uöt_t
 
«ddrs
;

124 
ö_addr_t
 *
addrs
;

125 
ö_addr_t
 
addr
;

127 
ngx_ªsﬁvî_h™dÀr_±
 
h™dÀr
;

128 *
d©a
;

129 
ngx_m£c_t
 
timeout
;

131 
ngx_uöt_t
 
quick
;

132 
ngx_uöt_t
 
ªcursi⁄
;

133 
ngx_evít_t
 *
evít
;

137 
ngx_ªsﬁvî_t
 *
	`ngx_ªsﬁvî_¸óã
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«mes
,

138 
ngx_uöt_t
 
n
);

139 
ngx_ªsﬁvî_˘x_t
 *
	`ngx_ªsﬁve_°¨t
(
ngx_ªsﬁvî_t
 *
r
,

140 
ngx_ªsﬁvî_˘x_t
 *
ãmp
);

141 
ngx_öt_t
 
	`ngx_ªsﬁve_«me
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

142 
	`ngx_ªsﬁve_«me_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

143 
ngx_öt_t
 
	`ngx_ªsﬁve_addr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

144 
	`ngx_ªsﬁve_addr_d⁄e
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

145 *
	`ngx_ªsﬁvî_°ªº‹
(
ngx_öt_t
 
îr
);

	@src/core/ngx_sha1.h

8 #i‚de‡
_NGX_SHA1_H_INCLUDED_


9 
	#_NGX_SHA1_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_OPENSSL_SHA1_H
)

17 
	~<›ís¶/sha.h
>

19 
	~<sha.h
>

23 
SHA_CTX
 
	tngx_sha1_t
;

26 
	#ngx_sha1_öô
 
SHA1_Inô


	)

27 
	#ngx_sha1_upd©e
 
SHA1_Upd©e


	)

28 
	#ngx_sha1_föÆ
 
SHA1_FöÆ


	)

	@src/core/ngx_shmtx.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_ATOMIC_OPS
)

15 
ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
);

18 
ngx_öt_t


19 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

21 
mtx
->
lock
 = &
addr
->lock;

23 i‡(
mtx
->
•ö
 =(
ngx_uöt_t
) -1) {

24  
NGX_OK
;

27 
mtx
->
•ö
 = 2048;

29 #i‡(
NGX_HAVE_POSIX_SEM
)

31 
mtx
->
waô
 = &
addr
->wait;

33 i‡(
	`£m_öô
(&
mtx
->
£m
, 1, 0) == -1) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

37 
mtx
->
£m≠h‹e
 = 1;

42  
NGX_OK
;

43 
	}
}

47 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

49 #i‡(
NGX_HAVE_POSIX_SEM
)

51 i‡(
mtx
->
£m≠h‹e
) {

52 i‡(
	`£m_de°roy
(&
mtx
->
£m
) == -1) {

53 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

59 
	}
}

62 
ngx_uöt_t


63 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

65  (*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
));

66 
	}
}

70 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

72 
ngx_uöt_t
 
i
, 
n
;

74 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtxÜock");

78 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

82 i‡(
ngx_n˝u
 > 1) {

84 
n
 = 1;Ç < 
mtx
->
•ö
;Ç <<= 1) {

86 
i
 = 0; i < 
n
; i++) {

87 
	`ngx_˝u_∑u£
();

90 i‡(*
mtx
->
lock
 == 0

91 && 
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 0, 
ngx_pid
))

98 #i‡(
NGX_HAVE_POSIX_SEM
)

100 i‡(
mtx
->
£m≠h‹e
) {

101 (Ë
	`ngx_©omic_„tch_add
(
mtx
->
waô
, 1);

103 i‡(*
mtx
->
lock
 =0 && 
	`ngx_©omic_cmp_£t
(mtx->lock, 0, 
ngx_pid
)) {

107 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

108 "shmtx waô %uA", *
mtx
->
waô
);

110 
	`£m_waô
(&
mtx
->
£m
) == -1) {

111 
ngx_îr_t
 
îr
;

113 
îr
 = 
ngx_î∫o
;

115 i‡(
îr
 !
NGX_EINTR
) {

116 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

122 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

130 
	`ngx_sched_yõld
();

132 
	}
}

136 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

138 i‡(
mtx
->
•ö
 !(
ngx_uöt_t
) -1) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0, "shmtx unlock");

142 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
ngx_pid
, 0)) {

143 
	`ngx_shmtx_wakeup
(
mtx
);

145 
	}
}

148 
ngx_uöt_t


149 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

151 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

154 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
lock
, 
pid
, 0)) {

155 
	`ngx_shmtx_wakeup
(
mtx
);

160 
	}
}

164 
	$ngx_shmtx_wakeup
(
ngx_shmtx_t
 *
mtx
)

166 #i‡(
NGX_HAVE_POSIX_SEM
)

167 
ngx_©omic_uöt_t
 
waô
;

169 i‡(!
mtx
->
£m≠h‹e
) {

175 
waô
 = *
mtx
->wait;

177 i‡(
waô
 == 0) {

181 i‡(
	`ngx_©omic_cmp_£t
(
mtx
->
waô
, wait, wait - 1)) {

186 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

187 "shmtx wakê%uA", 
waô
);

189 i‡(
	`£m_po°
(&
mtx
->
£m
) == -1) {

190 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

195 
	}
}

201 
ngx_öt_t


202 
	$ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
, 
u_ch¨
 *
«me
)

204 i‡(
mtx
->
«me
) {

206 i‡(
	`ngx_°rcmp
(
«me
, 
mtx
->name) == 0) {

207 
mtx
->
«me
 =Çame;

208  
NGX_OK
;

211 
	`ngx_shmtx_de°roy
(
mtx
);

214 
mtx
->
fd
 = 
	`ngx_›í_fûe
(
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_CREATE_OR_OPEN
,

215 
NGX_FILE_DEFAULT_ACCESS
);

217 i‡(
mtx
->
fd
 =
NGX_INVALID_FILE
) {

218 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

219 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
);

220  
NGX_ERROR
;

223 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

224 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

225 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

228 
mtx
->
«me
 =Çame;

230  
NGX_OK
;

231 
	}
}

235 
	$ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
)

237 i‡(
	`ngx_˛o£_fûe
(
mtx
->
fd
Ë=
NGX_FILE_ERROR
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

239 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
mtx
->
«me
);

241 
	}
}

244 
ngx_uöt_t


245 
	$ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
)

247 
ngx_îr_t
 
îr
;

249 
îr
 = 
	`ngx_åylock_fd
(
mtx
->
fd
);

251 i‡(
îr
 == 0) {

255 i‡(
îr
 =
NGX_EAGAIN
) {

259 #i‡
__osf__


261 i‡(
îr
 =
NGX_EACCESS
) {

267 
	`ngx_log_ab‹t
(
îr
, 
ngx_åylock_fd_n
 " %†Áûed", 
mtx
->
«me
);

270 
	}
}

274 
	$ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
)

276 
ngx_îr_t
 
îr
;

278 
îr
 = 
	`ngx_lock_fd
(
mtx
->
fd
);

280 i‡(
îr
 == 0) {

284 
	`ngx_log_ab‹t
(
îr
, 
ngx_lock_fd_n
 " %†Áûed", 
mtx
->
«me
);

285 
	}
}

289 
	$ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
)

291 
ngx_îr_t
 
îr
;

293 
îr
 = 
	`ngx_u∆ock_fd
(
mtx
->
fd
);

295 i‡(
îr
 == 0) {

299 
	`ngx_log_ab‹t
(
îr
, 
ngx_u∆ock_fd_n
 " %†Áûed", 
mtx
->
«me
);

300 
	}
}

303 
ngx_uöt_t


304 
	$ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
)

307 
	}
}

	@src/core/ngx_shmtx.h

8 #i‚de‡
_NGX_SHMTX_H_INCLUDED_


9 
	#_NGX_SHMTX_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
ngx_©omic_t
 
	mlock
;

18 #i‡(
NGX_HAVE_POSIX_SEM
)

19 
ngx_©omic_t
 
	mwaô
;

21 } 
	tngx_shmtx_sh_t
;

25 #i‡(
NGX_HAVE_ATOMIC_OPS
)

26 
ngx_©omic_t
 *
	mlock
;

27 #i‡(
NGX_HAVE_POSIX_SEM
)

28 
ngx_©omic_t
 *
	mwaô
;

29 
ngx_uöt_t
 
	m£m≠h‹e
;

30 
£m_t
 
	m£m
;

33 
ngx_fd_t
 
	mfd
;

34 
u_ch¨
 *
	m«me
;

36 
ngx_uöt_t
 
	m•ö
;

37 } 
	tngx_shmtx_t
;

40 
ngx_öt_t
 
ngx_shmtx_¸óã
(
ngx_shmtx_t
 *
mtx
, 
ngx_shmtx_sh_t
 *
addr
,

41 
u_ch¨
 *
«me
);

42 
ngx_shmtx_de°roy
(
ngx_shmtx_t
 *
mtx
);

43 
ngx_uöt_t
 
ngx_shmtx_åylock
(
ngx_shmtx_t
 *
mtx
);

44 
ngx_shmtx_lock
(
ngx_shmtx_t
 *
mtx
);

45 
ngx_shmtx_u∆ock
(
ngx_shmtx_t
 *
mtx
);

46 
ngx_uöt_t
 
ngx_shmtx_f‹˚_u∆ock
(
ngx_shmtx_t
 *
mtx
, 
ngx_pid_t
 
pid
);

	@src/core/ngx_slab.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 
	#NGX_SLAB_PAGE_MASK
 3

	)

12 
	#NGX_SLAB_PAGE
 0

	)

13 
	#NGX_SLAB_BIG
 1

	)

14 
	#NGX_SLAB_EXACT
 2

	)

15 
	#NGX_SLAB_SMALL
 3

	)

17 #i‡(
NGX_PTR_SIZE
 == 4)

19 
	#NGX_SLAB_PAGE_FREE
 0

	)

20 
	#NGX_SLAB_PAGE_BUSY
 0xffffffff

	)

21 
	#NGX_SLAB_PAGE_START
 0x80000000

	)

23 
	#NGX_SLAB_SHIFT_MASK
 0x0000000f

	)

24 
	#NGX_SLAB_MAP_MASK
 0xffff0000

	)

25 
	#NGX_SLAB_MAP_SHIFT
 16

	)

27 
	#NGX_SLAB_BUSY
 0xffffffff

	)

31 
	#NGX_SLAB_PAGE_FREE
 0

	)

32 
	#NGX_SLAB_PAGE_BUSY
 0xffffffffffffffff

	)

33 
	#NGX_SLAB_PAGE_START
 0x8000000000000000

	)

35 
	#NGX_SLAB_SHIFT_MASK
 0x000000000000000f

	)

36 
	#NGX_SLAB_MAP_MASK
 0xffffffff00000000

	)

37 
	#NGX_SLAB_MAP_SHIFT
 32

	)

39 
	#NGX_SLAB_BUSY
 0xffffffffffffffff

	)

44 #i‡(
NGX_DEBUG_MALLOC
)

46 
	#ngx_¶ab_junk
(
p
, 
size
Ë
	`ngx_mem£t
’, 0xA5, size)

	)

48 #ñi‡(
NGX_HAVE_DEBUG_MALLOC
)

50 
	#ngx_¶ab_junk
(
p
, 
size
) \

51 i‡(
ngx_debug_mÆloc
Ë
	`ngx_mem£t
(
p
, 0xA5, 
size
)

	)

55 
	#ngx_¶ab_junk
(
p
, 
size
)

	)

59 
ngx_¶ab_∑ge_t
 *
ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
,

60 
ngx_uöt_t
 
∑ges
);

61 
ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

62 
ngx_uöt_t
 
∑ges
);

63 
ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
,

64 *
ãxt
);

67 
ngx_uöt_t
 
	gngx_¶ab_max_size
;

68 
ngx_uöt_t
 
	gngx_¶ab_exa˘_size
;

69 
ngx_uöt_t
 
	gngx_¶ab_exa˘_shi·
;

73 
	$ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
)

75 
u_ch¨
 *
p
;

76 
size_t
 
size
;

77 
ngx_öt_t
 
m
;

78 
ngx_uöt_t
 
i
, 
n
, 
∑ges
;

79 
ngx_¶ab_∑ge_t
 *
¶Ÿs
;

82 i‡(
ngx_¶ab_max_size
 == 0) {

83 
ngx_¶ab_max_size
 = 
ngx_∑gesize
 / 2;

84 
ngx_¶ab_exa˘_size
 = 
ngx_∑gesize
 / (8 * (
uöçå_t
));

85 
n
 = 
ngx_¶ab_exa˘_size
;Ç >>1; 
ngx_¶ab_exa˘_shi·
++) {

91 
poﬁ
->
mö_size
 = 1 <<Öoﬁ->
mö_shi·
;

93 
p
 = (
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
);

94 
size
 = 
poﬁ
->
íd
 - 
p
;

96 
	`ngx_¶ab_junk
(
p
, 
size
);

98 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

99 
n
 = 
ngx_∑gesize_shi·
 - 
poﬁ
->
mö_shi·
;

101 
i
 = 0; i < 
n
; i++) {

102 
¶Ÿs
[
i
].
¶ab
 = 0;

103 
¶Ÿs
[
i
].
√xt
 = &slots[i];

104 
¶Ÿs
[
i
].
¥ev
 = 0;

107 
p
 +
n
 * (
ngx_¶ab_∑ge_t
);

109 
∑ges
 = (
ngx_uöt_t
Ë(
size
 / (
ngx_∑gesize
 + (
ngx_¶ab_∑ge_t
)));

111 
	`ngx_memzîo
(
p
, 
∑ges
 * (
ngx_¶ab_∑ge_t
));

113 
poﬁ
->
∑ges
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

115 
poﬁ
->
‰ì
.
¥ev
 = 0;

116 
poﬁ
->
‰ì
.
√xt
 = (
ngx_¶ab_∑ge_t
 *Ë
p
;

118 
poﬁ
->
∑ges
->
¶ab
 =Öages;

119 
poﬁ
->
∑ges
->
√xt
 = &poﬁ->
‰ì
;

120 
poﬁ
->
∑ges
->
¥ev
 = (
uöçå_t
Ë&poﬁ->
‰ì
;

122 
poﬁ
->
°¨t
 = (
u_ch¨
 *)

123 
	`ngx_Æign_±r
((
uöçå_t
Ë
p
 + 
∑ges
 * (
ngx_¶ab_∑ge_t
),

124 
ngx_∑gesize
);

126 
m
 = 
∑ges
 - (
poﬁ
->
íd
 -Öoﬁ->
°¨t
Ë/ 
ngx_∑gesize
;

127 i‡(
m
 > 0) {

128 
∑ges
 -
m
;

129 
poﬁ
->
∑ges
->
¶ab
 =Öages;

132 
poﬁ
->
log_˘x
 = &poﬁ->
zîo
;

133 
poﬁ
->
zîo
 = '\0';

134 
	}
}

138 
	$ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

140 *
p
;

142 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

144 
p
 = 
	`ngx_¶ab_Æloc_locked
(
poﬁ
, 
size
);

146 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

148  
p
;

149 
	}
}

153 
	$ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
)

155 
size_t
 
s
;

156 
uöçå_t
 
p
, 
n
, 
m
, 
mask
, *
bôm≠
;

157 
ngx_uöt_t
 
i
, 
¶Ÿ
, 
shi·
, 
m≠
;

158 
ngx_¶ab_∑ge_t
 *
∑ge
, *
¥ev
, *
¶Ÿs
;

160 i‡(
size
 >
ngx_¶ab_max_size
) {

162 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

163 "¶abáŒoc: %uz", 
size
);

165 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, (
size
 >> 
ngx_∑gesize_shi·
)

166 + ((
size
 % 
ngx_∑gesize
) ? 1 : 0));

167 i‡(
∑ge
) {

168 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

169 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

172 
p
 = 0;

175 
d⁄e
;

178 i‡(
size
 > 
poﬁ
->
mö_size
) {

179 
shi·
 = 1;

180 
s
 = 
size
 - 1; s >>1; 
shi·
++) { }

181 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

184 
size
 = 
poﬁ
->
mö_size
;

185 
shi·
 = 
poﬁ
->
mö_shi·
;

186 
¶Ÿ
 = 0;

189 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0,

190 "¶abáŒoc: %uz slŸ: %ui", 
size
, 
¶Ÿ
);

192 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *Ë((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

193 
∑ge
 = 
¶Ÿs
[
¶Ÿ
].
√xt
;

195 i‡(
∑ge
->
√xt
 !=Öage) {

197 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

200 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

201 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

203 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
))

204 / ((
uöçå_t
) * 8);

206 
n
 = 0;Ç < 
m≠
;Ç++) {

208 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

210 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

211 i‡((
bôm≠
[
n
] & 
m
)) {

215 
bôm≠
[
n
] |
m
;

217 
i
 = ((
n
 * (
uöçå_t
Ë* 8Ë<< 
shi·
)

218 + (
i
 << 
shi·
);

220 i‡(
bôm≠
[
n
] =
NGX_SLAB_BUSY
) {

221 
n
 =Ç + 1;Ç < 
m≠
;Ç++) {

222 i‡(
bôm≠
[
n
] !
NGX_SLAB_BUSY
) {

223 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

225 
d⁄e
;

229 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

230 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

231 
¥ev
->
√xt
 = 
∑ge
->next;

232 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

234 
∑ge
->
√xt
 = 
NULL
;

235 
∑ge
->
¥ev
 = 
NGX_SLAB_SMALL
;

238 
p
 = (
uöçå_t
Ë
bôm≠
 + 
i
;

240 
d⁄e
;

245 
∑ge
 =Öage->
√xt
;

247 } 
∑ge
);

249 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

252 i‡(
∑ge
->
¶ab
 !
NGX_SLAB_BUSY
) {

254 
m
 = 1, 
i
 = 0; m; m <<= 1, i++) {

255 i‡((
∑ge
->
¶ab
 & 
m
)) {

259 
∑ge
->
¶ab
 |
m
;

261 i‡(
∑ge
->
¶ab
 =
NGX_SLAB_BUSY
) {

262 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

263 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

264 
¥ev
->
√xt
 = 
∑ge
->next;

265 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

267 
∑ge
->
√xt
 = 
NULL
;

268 
∑ge
->
¥ev
 = 
NGX_SLAB_EXACT
;

271 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

272 
p
 +
i
 << 
shi·
;

273 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

275 
d⁄e
;

279 
∑ge
 =Öage->
√xt
;

281 } 
∑ge
);

285 
n
 = 
ngx_∑gesize_shi·
 - (
∑ge
->
¶ab
 & 
NGX_SLAB_SHIFT_MASK
);

286 
n
 = 1 <<Ç;

287 
n
 = ((
uöçå_t
) 1 <<Ç) - 1;

288 
mask
 = 
n
 << 
NGX_SLAB_MAP_SHIFT
;

291 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë!
mask
) {

293 
m
 = (
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
, 
i
 = 0;

294 
m
 & 
mask
;

295 
m
 <<1, 
i
++)

297 i‡((
∑ge
->
¶ab
 & 
m
)) {

301 
∑ge
->
¶ab
 |
m
;

303 i‡((
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
Ë=
mask
) {

304 
¥ev
 = (
ngx_¶ab_∑ge_t
 *)

305 (
∑ge
->
¥ev
 & ~
NGX_SLAB_PAGE_MASK
);

306 
¥ev
->
√xt
 = 
∑ge
->next;

307 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

309 
∑ge
->
√xt
 = 
NULL
;

310 
∑ge
->
¥ev
 = 
NGX_SLAB_BIG
;

313 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

314 
p
 +
i
 << 
shi·
;

315 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

317 
d⁄e
;

321 
∑ge
 =Öage->
√xt
;

323 } 
∑ge
);

327 
∑ge
 = 
	`ngx_¶ab_Æloc_∑ges
(
poﬁ
, 1);

329 i‡(
∑ge
) {

330 i‡(
shi·
 < 
ngx_¶ab_exa˘_shi·
) {

331 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

332 
bôm≠
 = (
uöçå_t
 *Ë(
poﬁ
->
°¨t
 + 
p
);

334 
s
 = 1 << 
shi·
;

335 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ 8 / 
s
;

337 i‡(
n
 == 0) {

338 
n
 = 1;

341 
bôm≠
[0] = (2 << 
n
) - 1;

343 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

345 
i
 = 1; i < 
m≠
; i++) {

346 
bôm≠
[
i
] = 0;

349 
∑ge
->
¶ab
 = 
shi·
;

350 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

351 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

353 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

355 
p
 = ((
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
Ë+ 
s
 * 
n
;

356 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

358 
d⁄e
;

360 } i‡(
shi·
 =
ngx_¶ab_exa˘_shi·
) {

362 
∑ge
->
¶ab
 = 1;

363 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

364 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

366 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

368 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

369 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

371 
d⁄e
;

375 
∑ge
->
¶ab
 = ((
uöçå_t
Ë1 << 
NGX_SLAB_MAP_SHIFT
Ë| 
shi·
;

376 
∑ge
->
√xt
 = &
¶Ÿs
[
¶Ÿ
];

377 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

379 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

381 
p
 = (
∑ge
 - 
poﬁ
->
∑ges
Ë<< 
ngx_∑gesize_shi·
;

382 
p
 +(
uöçå_t
Ë
poﬁ
->
°¨t
;

384 
d⁄e
;

388 
p
 = 0;

390 
d⁄e
:

392 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶abáŒoc: %p", 
p
);

394  (*Ë
p
;

395 
	}
}

399 
	$ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

401 
	`ngx_shmtx_lock
(&
poﬁ
->
muãx
);

403 
	`ngx_¶ab_‰ì_locked
(
poﬁ
, 
p
);

405 
	`ngx_shmtx_u∆ock
(&
poﬁ
->
muãx
);

406 
	}
}

410 
	$ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
)

412 
size_t
 
size
;

413 
uöçå_t
 
¶ab
, 
m
, *
bôm≠
;

414 
ngx_uöt_t
 
n
, 
ty≥
, 
¶Ÿ
, 
shi·
, 
m≠
;

415 
ngx_¶ab_∑ge_t
 *
¶Ÿs
, *
∑ge
;

417 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_ALLOC
, 
ngx_cy˛e
->
log
, 0, "¶ab fªe: %p", 
p
);

419 i‡((
u_ch¨
 *Ë
p
 < 
poﬁ
->
°¨t
 || (u_ch¨ *Ë∞>Öoﬁ->
íd
) {

420 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
, "ngx_slab_free(): outside ofÖool");

421 
Áû
;

424 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

425 
∑ge
 = &
poﬁ
->
∑ges
[
n
];

426 
¶ab
 = 
∑ge
->slab;

427 
ty≥
 = 
∑ge
->
¥ev
 & 
NGX_SLAB_PAGE_MASK
;

429 
ty≥
) {

431 
NGX_SLAB_SMALL
:

433 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

434 
size
 = 1 << 
shi·
;

436 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

437 
wr⁄g_chunk
;

440 
n
 = ((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
;

441 
m
 = (
uöçå_t
Ë1 << (
n
 & ((uintptr_t) * 8 - 1));

442 
n
 /((
uöçå_t
) * 8);

443 
bôm≠
 = (
uöçå_t
 *Ë((uöçå_tË
p
 & ~(
ngx_∑gesize
 - 1));

445 i‡(
bôm≠
[
n
] & 
m
) {

447 i‡(
∑ge
->
√xt
 =
NULL
) {

448 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

449 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

450 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

452 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

453 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

455 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_SMALL
;

456 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_SMALL
;

459 
bôm≠
[
n
] &~
m
;

461 
n
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)) / 8 / (1 << shift);

463 i‡(
n
 == 0) {

464 
n
 = 1;

467 i‡(
bôm≠
[0] & ~(((
uöçå_t
Ë1 << 
n
) - 1)) {

468 
d⁄e
;

471 
m≠
 = (1 << (
ngx_∑gesize_shi·
 - 
shi·
)Ë/ ((
uöçå_t
) * 8);

473 
n
 = 1;Ç < 
m≠
;Ç++) {

474 i‡(
bôm≠
[
n
]) {

475 
d⁄e
;

479 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

481 
d⁄e
;

484 
chunk_Æªady_‰ì
;

486 
NGX_SLAB_EXACT
:

488 
m
 = (
uöçå_t
) 1 <<

489 (((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)Ë>> 
ngx_¶ab_exa˘_shi·
);

490 
size
 = 
ngx_¶ab_exa˘_size
;

492 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

493 
wr⁄g_chunk
;

496 i‡(
¶ab
 & 
m
) {

497 i‡(
¶ab
 =
NGX_SLAB_BUSY
) {

498 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

499 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

500 
¶Ÿ
 = 
ngx_¶ab_exa˘_shi·
 - 
poﬁ
->
mö_shi·
;

502 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

503 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

505 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_EXACT
;

506 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_EXACT
;

509 
∑ge
->
¶ab
 &~
m
;

511 i‡(
∑ge
->
¶ab
) {

512 
d⁄e
;

515 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

517 
d⁄e
;

520 
chunk_Æªady_‰ì
;

522 
NGX_SLAB_BIG
:

524 
shi·
 = 
¶ab
 & 
NGX_SLAB_SHIFT_MASK
;

525 
size
 = 1 << 
shi·
;

527 i‡((
uöçå_t
Ë
p
 & (
size
 - 1)) {

528 
wr⁄g_chunk
;

531 
m
 = (
uöçå_t
Ë1 << ((((uöçå_tË
p
 & (
ngx_∑gesize
 - 1)Ë>> 
shi·
)

532 + 
NGX_SLAB_MAP_SHIFT
);

534 i‡(
¶ab
 & 
m
) {

536 i‡(
∑ge
->
√xt
 =
NULL
) {

537 
¶Ÿs
 = (
ngx_¶ab_∑ge_t
 *)

538 ((
u_ch¨
 *Ë
poﬁ
 + (
ngx_¶ab_poﬁ_t
));

539 
¶Ÿ
 = 
shi·
 - 
poﬁ
->
mö_shi·
;

541 
∑ge
->
√xt
 = 
¶Ÿs
[
¶Ÿ
].next;

542 
¶Ÿs
[
¶Ÿ
].
√xt
 = 
∑ge
;

544 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
¶Ÿs
[
¶Ÿ
] | 
NGX_SLAB_BIG
;

545 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë∑gê| 
NGX_SLAB_BIG
;

548 
∑ge
->
¶ab
 &~
m
;

550 i‡(
∑ge
->
¶ab
 & 
NGX_SLAB_MAP_MASK
) {

551 
d⁄e
;

554 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, 
∑ge
, 1);

556 
d⁄e
;

559 
chunk_Æªady_‰ì
;

561 
NGX_SLAB_PAGE
:

563 i‡((
uöçå_t
Ë
p
 & (
ngx_∑gesize
 - 1)) {

564 
wr⁄g_chunk
;

567 i‡(
¶ab
 =
NGX_SLAB_PAGE_FREE
) {

568 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

570 
Áû
;

573 i‡(
¶ab
 =
NGX_SLAB_PAGE_BUSY
) {

574 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

576 
Áû
;

579 
n
 = ((
u_ch¨
 *Ë
p
 - 
poﬁ
->
°¨t
Ë>> 
ngx_∑gesize_shi·
;

580 
size
 = 
¶ab
 & ~
NGX_SLAB_PAGE_START
;

582 
	`ngx_¶ab_‰ì_∑ges
(
poﬁ
, &poﬁ->
∑ges
[
n
], 
size
);

584 
	`ngx_¶ab_junk
(
p
, 
size
 << 
ngx_∑gesize_shi·
);

593 
d⁄e
:

595 
	`ngx_¶ab_junk
(
p
, 
size
);

599 
wr⁄g_chunk
:

601 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

604 
Áû
;

606 
chunk_Æªady_‰ì
:

608 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_ALERT
,

611 
Áû
:

614 
	}
}

617 
ngx_¶ab_∑ge_t
 *

618 
	$ngx_¶ab_Æloc_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
∑ges
)

620 
ngx_¶ab_∑ge_t
 *
∑ge
, *
p
;

622 
∑ge
 = 
poﬁ
->
‰ì
.
√xt
;Öage != &pool->free;Öage =Öage->next) {

624 i‡(
∑ge
->
¶ab
 >
∑ges
) {

626 i‡(
∑ge
->
¶ab
 > 
∑ges
) {

627 
∑ge
[
∑ges
].
¶ab
 =Öage->slab -Öages;

628 
∑ge
[
∑ges
].
√xt
 =Öage->next;

629 
∑ge
[
∑ges
].
¥ev
 =Öage->prev;

631 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

632 
p
->
√xt
 = &
∑ge
[
∑ges
];

633 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
Ë&∑ge[
∑ges
];

636 
p
 = (
ngx_¶ab_∑ge_t
 *Ë
∑ge
->
¥ev
;

637 
p
->
√xt
 = 
∑ge
->next;

638 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

641 
∑ge
->
¶ab
 = 
∑ges
 | 
NGX_SLAB_PAGE_START
;

642 
∑ge
->
√xt
 = 
NULL
;

643 
∑ge
->
¥ev
 = 
NGX_SLAB_PAGE
;

645 i‡(--
∑ges
 == 0) {

646  
∑ge
;

649 
p
 = 
∑ge
 + 1; 
∑ges
;Öages--) {

650 
p
->
¶ab
 = 
NGX_SLAB_PAGE_BUSY
;

651 
p
->
√xt
 = 
NULL
;

652 
p
->
¥ev
 = 
NGX_SLAB_PAGE
;

653 
p
++;

656  
∑ge
;

660 
	`ngx_¶ab_îr‹
(
poﬁ
, 
NGX_LOG_CRIT
, "ngx_slab_alloc() failed:Ço memory");

662  
NULL
;

663 
	}
}

667 
	$ngx_¶ab_‰ì_∑ges
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_¶ab_∑ge_t
 *
∑ge
,

668 
ngx_uöt_t
 
∑ges
)

670 
ngx_¶ab_∑ge_t
 *
¥ev
;

672 
∑ge
->
¶ab
 = 
∑ges
--;

674 i‡(
∑ges
) {

675 
	`ngx_memzîo
(&
∑ge
[1], 
∑ges
 * (
ngx_¶ab_∑ge_t
));

678 i‡(
∑ge
->
√xt
) {

679 
¥ev
 = (
ngx_¶ab_∑ge_t
 *Ë(
∑ge
->¥ev & ~
NGX_SLAB_PAGE_MASK
);

680 
¥ev
->
√xt
 = 
∑ge
->next;

681 
∑ge
->
√xt
->
¥ev
 =Öage->prev;

684 
∑ge
->
¥ev
 = (
uöçå_t
Ë&
poﬁ
->
‰ì
;

685 
∑ge
->
√xt
 = 
poﬁ
->
‰ì
.next;

687 
∑ge
->
√xt
->
¥ev
 = (
uöçå_t
)Öage;

689 
poﬁ
->
‰ì
.
√xt
 = 
∑ge
;

690 
	}
}

694 
	$ngx_¶ab_îr‹
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Àvñ
, *
ãxt
)

696 
	`ngx_log_îr‹
(
Àvñ
, 
ngx_cy˛e
->
log
, 0, "%s%s", 
ãxt
, 
poﬁ
->
log_˘x
);

697 
	}
}

	@src/core/ngx_slab.h

8 #i‚de‡
_NGX_SLAB_H_INCLUDED_


9 
	#_NGX_SLAB_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_¶ab_∑ge_s
 
	tngx_¶ab_∑ge_t
;

18 
	sngx_¶ab_∑ge_s
 {

19 
uöçå_t
 
	m¶ab
;

20 
ngx_¶ab_∑ge_t
 *
	m√xt
;

21 
uöçå_t
 
	m¥ev
;

26 
ngx_shmtx_sh_t
 
	mlock
;

28 
size_t
 
	mmö_size
;

29 
size_t
 
	mmö_shi·
;

31 
ngx_¶ab_∑ge_t
 *
	m∑ges
;

32 
ngx_¶ab_∑ge_t
 
	m‰ì
;

34 
u_ch¨
 *
	m°¨t
;

35 
u_ch¨
 *
	míd
;

37 
ngx_shmtx_t
 
	mmuãx
;

39 
u_ch¨
 *
	mlog_˘x
;

40 
u_ch¨
 
	mzîo
;

42 *
	md©a
;

43 *
	maddr
;

44 } 
	tngx_¶ab_poﬁ_t
;

47 
ngx_¶ab_öô
(
ngx_¶ab_poﬁ_t
 *
poﬁ
);

48 *
ngx_¶ab_Æloc
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

49 *
ngx_¶ab_Æloc_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, 
size_t
 
size
);

50 
ngx_¶ab_‰ì
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

51 
ngx_¶ab_‰ì_locked
(
ngx_¶ab_poﬁ_t
 *
poﬁ
, *
p
);

	@src/core/ngx_spinlock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	$ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
)

16 #i‡(
NGX_HAVE_ATOMIC_OPS
)

18 
ngx_uöt_t
 
i
, 
n
;

22 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

26 i‡(
ngx_n˝u
 > 1) {

28 
n
 = 1;Ç < 
•ö
;Ç <<= 1) {

30 
i
 = 0; i < 
n
; i++) {

31 
	`ngx_˝u_∑u£
();

34 i‡(*
lock
 =0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 
vÆue
)) {

40 
	`ngx_sched_yõld
();

45 #i‡(
NGX_THREADS
)

47 #îr‹ 
	`ngx_•ölock
(Ë
‹
 
	`ngx_©omic_cmp_£t
(Ë
¨e
 
nŸ
 
deföed
 !

53 
	}
}

	@src/core/ngx_string.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 *
ngx_•rötf_num
(u_ch¨ *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
,

13 
u_ch¨
 
zîo
, 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
);

14 
ngx_öt_t
 
ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
,

15 c⁄° 
u_ch¨
 *
basis
);

19 
	$ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

21 
n
) {

22 *
d°
 = 
	`ngx_tﬁowî
(*
§c
);

23 
d°
++;

24 
§c
++;

25 
n
--;

27 
	}
}

30 
u_ch¨
 *

31 
	$ngx_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
)

33 i‡(
n
 == 0) {

34  
d°
;

37 --
n
) {

38 *
d°
 = *
§c
;

40 i‡(*
d°
 == '\0') {

41  
d°
;

44 
d°
++;

45 
§c
++;

48 *
d°
 = '\0';

50  
d°
;

51 
	}
}

54 
u_ch¨
 *

55 
	$ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
)

57 
u_ch¨
 *
d°
;

59 
d°
 = 
	`ngx_≤Æloc
(
poﬁ
, 
§c
->
Àn
);

60 i‡(
d°
 =
NULL
) {

61  
NULL
;

64 
	`ngx_mem˝y
(
d°
, 
§c
->
d©a
, src->
Àn
);

66  
d°
;

67 
	}
}

102 
u_ch¨
 * 
ngx_cde˛


103 
	$ngx_•rötf
(
u_ch¨
 *
buf
, c⁄° *
fmt
, ...)

105 
u_ch¨
 *
p
;

106 
va_li°
 
¨gs
;

108 
	`va_°¨t
(
¨gs
, 
fmt
);

109 
p
 = 
	`ngx_v¶¥ötf
(
buf
, (*Ë-1, 
fmt
, 
¨gs
);

110 
	`va_íd
(
¨gs
);

112  
p
;

113 
	}
}

116 
u_ch¨
 * 
ngx_cde˛


117 
	$ngx_¢¥ötf
(
u_ch¨
 *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...)

119 
u_ch¨
 *
p
;

120 
va_li°
 
¨gs
;

122 
	`va_°¨t
(
¨gs
, 
fmt
);

123 
p
 = 
	`ngx_v¶¥ötf
(
buf
, bu‡+ 
max
, 
fmt
, 
¨gs
);

124 
	`va_íd
(
¨gs
);

126  
p
;

127 
	}
}

130 
u_ch¨
 * 
ngx_cde˛


131 
	$ngx_¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, ...)

133 
u_ch¨
 *
p
;

134 
va_li°
 
¨gs
;

136 
	`va_°¨t
(
¨gs
, 
fmt
);

137 
p
 = 
	`ngx_v¶¥ötf
(
buf
, 
œ°
, 
fmt
, 
¨gs
);

138 
	`va_íd
(
¨gs
);

140  
p
;

141 
	}
}

144 
u_ch¨
 *

145 
	$ngx_v¶¥ötf
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

147 
u_ch¨
 *
p
, 
zîo
;

148 
d
;

149 
f
;

150 
size_t
 
Àn
, 
¶í
;

151 
öt64_t
 
i64
;

152 
uöt64_t
 
ui64
, 
‰ac
;

153 
ngx_m£c_t
 
ms
;

154 
ngx_uöt_t
 
width
, 
sign
, 
hex
, 
max_width
, 
‰ac_width
, 
sˇÀ
, 
n
;

155 
ngx_°r_t
 *
v
;

156 
ngx_v¨übÀ_vÆue_t
 *
vv
;

158 *
fmt
 && 
buf
 < 
œ°
) {

165 i‡(*
fmt
 == '%') {

167 
i64
 = 0;

168 
ui64
 = 0;

170 
zîo
 = (
u_ch¨
Ë((*++
fmt
 == '0') ? '0' : ' ');

171 
width
 = 0;

172 
sign
 = 1;

173 
hex
 = 0;

174 
max_width
 = 0;

175 
‰ac_width
 = 0;

176 
¶í
 = (
size_t
) -1;

178 *
fmt
 >= '0' && *fmt <= '9') {

179 
width
 = width * 10 + *
fmt
++ - '0';

184 *
fmt
) {

187 
sign
 = 0;

188 
fmt
++;

192 
max_width
 = 1;

193 
fmt
++;

197 
hex
 = 2;

198 
sign
 = 0;

199 
fmt
++;

203 
hex
 = 1;

204 
sign
 = 0;

205 
fmt
++;

209 
fmt
++;

211 *
fmt
 >= '0' && *fmt <= '9') {

212 
‰ac_width
 = føc_width * 10 + *
fmt
++ - '0';

218 
¶í
 = 
	`va_¨g
(
¨gs
, 
size_t
);

219 
fmt
++;

230 *
fmt
) {

233 
v
 = 
	`va_¨g
(
¨gs
, 
ngx_°r_t
 *);

235 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
v
->len);

236 
buf
 = 
	`ngx_˝ymem
(buf, 
v
->
d©a
, 
Àn
);

237 
fmt
++;

242 
vv
 = 
	`va_¨g
(
¨gs
, 
ngx_v¨übÀ_vÆue_t
 *);

244 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
vv
->len);

245 
buf
 = 
	`ngx_˝ymem
(buf, 
vv
->
d©a
, 
Àn
);

246 
fmt
++;

251 
p
 = 
	`va_¨g
(
¨gs
, 
u_ch¨
 *);

253 i‡(
¶í
 =(
size_t
) -1) {

254 *
p
 && 
buf
 < 
œ°
) {

255 *
buf
++ = *
p
++;

259 
Àn
 = 
	`ngx_mö
(((
size_t
Ë(
œ°
 - 
buf
)), 
¶í
);

260 
buf
 = 
	`ngx_˝ymem
(buf, 
p
, 
Àn
);

263 
fmt
++;

268 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
off_t
);

269 
sign
 = 1;

273 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_pid_t
);

274 
sign
 = 1;

278 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
time_t
);

279 
sign
 = 1;

283 
ms
 = (
ngx_m£c_t
Ë
	`va_¨g
(
¨gs
,Çgx_msec_t);

284 i‡((
ngx_m£c_öt_t
Ë
ms
 == -1) {

285 
sign
 = 1;

286 
i64
 = -1;

288 
sign
 = 0;

289 
ui64
 = (
uöt64_t
Ë
ms
;

294 i‡(
sign
) {

295 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ssize_t
);

297 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
size_t
);

302 i‡(
sign
) {

303 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_öt_t
);

305 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_uöt_t
);

308 i‡(
max_width
) {

309 
width
 = 
NGX_INT_T_LEN
;

315 i‡(
sign
) {

316 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

318 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_öt
);

323 i‡(
sign
) {

324 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, );

326 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
u_l⁄g
);

331 i‡(
sign
) {

332 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
öt32_t
);

334 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
uöt32_t
);

339 i‡(
sign
) {

340 
i64
 = 
	`va_¨g
(
¨gs
, 
öt64_t
);

342 
ui64
 = 
	`va_¨g
(
¨gs
, 
uöt64_t
);

347 i‡(
sign
) {

348 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_öt_t
);

350 
ui64
 = (
uöt64_t
Ë
	`va_¨g
(
¨gs
, 
ngx_©omic_uöt_t
);

353 i‡(
max_width
) {

354 
width
 = 
NGX_ATOMIC_T_LEN
;

360 
f
 = 
	`va_¨g
(
¨gs
, );

362 i‡(
f
 < 0) {

363 *
buf
++ = '-';

364 
f
 = -f;

367 
ui64
 = (
öt64_t
Ë
f
;

368 
‰ac
 = 0;

370 i‡(
‰ac_width
) {

372 
sˇÀ
 = 1;

373 
n
 = 
‰ac_width
;Ç;Ç--) {

374 
sˇÀ
 *= 10;

377 
‰ac
 = (
uöt64_t
Ë((
f
 - (Ë
ui64
Ë* 
sˇÀ
 + 0.5);

379 i‡(
‰ac
 =
sˇÀ
) {

380 
ui64
++;

381 
‰ac
 = 0;

385 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 0, 
width
);

387 i‡(
‰ac_width
) {

388 i‡(
buf
 < 
œ°
) {

389 *
buf
++ = '.';

392 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
‰ac
, '0', 0, 
‰ac_width
);

395 
fmt
++;

399 #i‡!(
NGX_WIN32
)

401 
i64
 = (
öt64_t
Ë
	`va_¨g
(
¨gs
, 
æim_t
);

402 
sign
 = 1;

407 
ui64
 = (
uöçå_t
Ë
	`va_¨g
(
¨gs
, *);

408 
hex
 = 2;

409 
sign
 = 0;

410 
zîo
 = '0';

411 
width
 = 
NGX_PTR_SIZE
 * 2;

415 
d
 = 
	`va_¨g
(
¨gs
, );

416 *
buf
++ = (
u_ch¨
Ë(
d
 & 0xff);

417 
fmt
++;

422 *
buf
++ = '\0';

423 
fmt
++;

428 #i‡(
NGX_WIN32
)

429 *
buf
++ = 
CR
;

431 *
buf
++ = 
LF
;

432 
fmt
++;

437 *
buf
++ = '%';

438 
fmt
++;

443 *
buf
++ = *
fmt
++;

448 i‡(
sign
) {

449 i‡(
i64
 < 0) {

450 *
buf
++ = '-';

451 
ui64
 = (
uöt64_t
Ë-
i64
;

454 
ui64
 = (
uöt64_t
Ë
i64
;

458 
buf
 = 
	`ngx_•rötf_num
(buf, 
œ°
, 
ui64
, 
zîo
, 
hex
, 
width
);

460 
fmt
++;

463 *
buf
++ = *
fmt
++;

467  
buf
;

468 
	}
}

471 
u_ch¨
 *

472 
	$ngx_•rötf_num
(
u_ch¨
 *
buf
, u_ch¨ *
œ°
, 
uöt64_t
 
ui64
, u_ch¨ 
zîo
,

473 
ngx_uöt_t
 
hexadecimÆ
,Çgx_uöt_à
width
)

475 
u_ch¨
 *
p
, 
ãmp
[
NGX_INT64_LEN
 + 1];

480 
size_t
 
Àn
;

481 
uöt32_t
 
ui32
;

482 
u_ch¨
 
hex
[] = "0123456789abcdef";

483 
u_ch¨
 
HEX
[] = "0123456789ABCDEF";

485 
p
 = 
ãmp
 + 
NGX_INT64_LEN
;

487 i‡(
hexadecimÆ
 == 0) {

489 i‡(
ui64
 <
NGX_MAX_UINT32_VALUE
) {

506 
ui32
 = (
uöt32_t
Ë
ui64
;

509 *--
p
 = (
u_ch¨
Ë(
ui32
 % 10 + '0');

510 } 
ui32
 /= 10);

514 *--
p
 = (
u_ch¨
Ë(
ui64
 % 10 + '0');

515 } 
ui64
 /= 10);

518 } i‡(
hexadecimÆ
 == 1) {

523 *--
p
 = 
hex
[(
uöt32_t
Ë(
ui64
 & 0xf)];

525 } 
ui64
 >>= 4);

532 *--
p
 = 
HEX
[(
uöt32_t
Ë(
ui64
 & 0xf)];

534 } 
ui64
 >>= 4);

539 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

541 
Àn
++ < 
width
 && 
buf
 < 
œ°
) {

542 *
buf
++ = 
zîo
;

547 
Àn
 = (
ãmp
 + 
NGX_INT64_LEN
Ë- 
p
;

549 i‡(
buf
 + 
Àn
 > 
œ°
) {

550 
Àn
 = 
œ°
 - 
buf
;

553  
	`ngx_˝ymem
(
buf
, 
p
, 
Àn
);

554 
	}
}

564 
ngx_öt_t


565 
	$ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

567 
ngx_uöt_t
 
c1
, 
c2
;

570 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

571 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

573 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

574 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

576 i‡(
c1
 =
c2
) {

578 i‡(
c1
) {

585  
c1
 - 
c2
;

587 
	}
}

590 
ngx_öt_t


591 
	$ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

593 
ngx_uöt_t
 
c1
, 
c2
;

595 
n
) {

596 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

597 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

599 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

600 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

602 i‡(
c1
 =
c2
) {

604 i‡(
c1
) {

605 
n
--;

612  
c1
 - 
c2
;

616 
	}
}

619 
u_ch¨
 *

620 
	$ngx_°∫°r
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
Àn
)

622 
u_ch¨
 
c1
, 
c2
;

623 
size_t
 
n
;

625 
c2
 = *(
u_ch¨
 *Ë
s2
++;

627 
n
 = 
	`ngx_°æí
(
s2
);

631 i‡(
Àn
-- == 0) {

632  
NULL
;

635 
c1
 = *
s1
++;

637 i‡(
c1
 == 0) {

638  
NULL
;

641 } 
c1
 !
c2
);

643 i‡(
n
 > 
Àn
) {

644  
NULL
;

647 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

649  --
s1
;

650 
	}
}

659 
u_ch¨
 *

660 
	$ngx_°r°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

662 
u_ch¨
 
c1
, 
c2
;

664 
c2
 = *(
u_ch¨
 *Ë
s2
++;

668 
c1
 = *
s1
++;

670 i‡(
c1
 == 0) {

671  
NULL
;

674 } 
c1
 !
c2
);

676 } 
	`ngx_°∫cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

678  --
s1
;

679 
	}
}

682 
u_ch¨
 *

683 
	$ngx_°rˇ£°∫
(
u_ch¨
 *
s1
, *
s2
, 
size_t
 
n
)

685 
ngx_uöt_t
 
c1
, 
c2
;

687 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

688 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

692 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

694 i‡(
c1
 == 0) {

695  
NULL
;

698 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

700 } 
c1
 !
c2
);

702 } 
	`ngx_°∫ˇ£cmp
(
s1
, (
u_ch¨
 *Ë
s2
, 
n
) != 0);

704  --
s1
;

705 
	}
}

714 
u_ch¨
 *

715 
	$ngx_°æˇ£°∫
(
u_ch¨
 *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
)

717 
ngx_uöt_t
 
c1
, 
c2
;

719 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

720 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

721 
œ°
 -
n
;

725 i‡(
s1
 >
œ°
) {

726  
NULL
;

729 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

731 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

733 } 
c1
 !
c2
);

735 } 
	`ngx_°∫ˇ£cmp
(
s1
, 
s2
, 
n
) != 0);

737  --
s1
;

738 
	}
}

741 
ngx_öt_t


742 
	$ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

744 i‡(
n
 == 0) {

748 
n
--;

751 i‡(
s1
[
n
] !
s2
[n]) {

752  
s1
[
n
] - 
s2
[n];

755 i‡(
n
 == 0) {

759 
n
--;

761 
	}
}

764 
ngx_öt_t


765 
	$ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
)

767 
u_ch¨
 
c1
, 
c2
;

769 i‡(
n
 == 0) {

773 
n
--;

776 
c1
 = 
s1
[
n
];

777 i‡(
c1
 >= 'a' && c1 <= 'z') {

778 
c1
 -= 'a' - 'A';

781 
c2
 = 
s2
[
n
];

782 i‡(
c2
 >= 'a' && c2 <= 'z') {

783 
c2
 -= 'a' - 'A';

786 i‡(
c1
 !
c2
) {

787  
c1
 - 
c2
;

790 i‡(
n
 == 0) {

794 
n
--;

796 
	}
}

799 
ngx_öt_t


800 
	$ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
)

802 
size_t
 
n
;

803 
ngx_öt_t
 
m
, 
z
;

805 i‡(
n1
 <
n2
) {

806 
n
 = 
n1
;

807 
z
 = -1;

810 
n
 = 
n2
;

811 
z
 = 1;

814 
m
 = 
	`ngx_memcmp
(
s1
, 
s2
, 
n
);

816 i‡(
m
 || 
n1
 =
n2
) {

817  
m
;

820  
z
;

821 
	}
}

824 
ngx_öt_t


825 
	$ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
)

827 
ngx_uöt_t
 
c1
, 
c2
;

830 
c1
 = (
ngx_uöt_t
Ë*
s1
++;

831 
c2
 = (
ngx_uöt_t
Ë*
s2
++;

833 
c1
 = (c1 >= 'A' && c1 <= 'Z') ? (c1 | 0x20) : c1;

834 
c2
 = (c2 >= 'A' && c2 <= 'Z') ? (c2 | 0x20) : c2;

836 i‡(
c1
 =
c2
) {

838 i‡(
c1
) {

847 
c1
 = (c1 == '.') ? ' ' : c1;

848 
c2
 = (c2 == '.') ? ' ' : c2;

850  
c1
 - 
c2
;

852 
	}
}

855 
ngx_öt_t


856 
	$ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

858 
ngx_öt_t
 
vÆue
;

860 i‡(
n
 == 0) {

861  
NGX_ERROR
;

864 
vÆue
 = 0; 
n
--; 
löe
++) {

865 i‡(*
löe
 < '0' || *line > '9') {

866  
NGX_ERROR
;

869 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

872 i‡(
vÆue
 < 0) {

873  
NGX_ERROR
;

876  
vÆue
;

878 
	}
}

883 
ngx_öt_t


884 
	$ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
)

886 
ngx_öt_t
 
vÆue
;

887 
ngx_uöt_t
 
dŸ
;

889 i‡(
n
 == 0) {

890  
NGX_ERROR
;

893 
dŸ
 = 0;

895 
vÆue
 = 0; 
n
--; 
löe
++) {

897 i‡(
poöt
 == 0) {

898  
NGX_ERROR
;

901 i‡(*
löe
 == '.') {

902 i‡(
dŸ
) {

903  
NGX_ERROR
;

906 
dŸ
 = 1;

910 i‡(*
löe
 < '0' || *line > '9') {

911  
NGX_ERROR
;

914 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

915 
poöt
 -
dŸ
;

918 
poöt
--) {

919 
vÆue
 = value * 10;

922 i‡(
vÆue
 < 0) {

923  
NGX_ERROR
;

926  
vÆue
;

928 
	}
}

931 
ssize_t


932 
	$ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
)

934 
ssize_t
 
vÆue
;

936 i‡(
n
 == 0) {

937  
NGX_ERROR
;

940 
vÆue
 = 0; 
n
--; 
löe
++) {

941 i‡(*
löe
 < '0' || *line > '9') {

942  
NGX_ERROR
;

945 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

948 i‡(
vÆue
 < 0) {

949  
NGX_ERROR
;

952  
vÆue
;

954 
	}
}

957 
off_t


958 
	$ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
)

960 
off_t
 
vÆue
;

962 i‡(
n
 == 0) {

963  
NGX_ERROR
;

966 
vÆue
 = 0; 
n
--; 
löe
++) {

967 i‡(*
löe
 < '0' || *line > '9') {

968  
NGX_ERROR
;

971 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

974 i‡(
vÆue
 < 0) {

975  
NGX_ERROR
;

978  
vÆue
;

980 
	}
}

983 
time_t


984 
	$ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
)

986 
time_t
 
vÆue
;

988 i‡(
n
 == 0) {

989  
NGX_ERROR
;

992 
vÆue
 = 0; 
n
--; 
löe
++) {

993 i‡(*
löe
 < '0' || *line > '9') {

994  
NGX_ERROR
;

997 
vÆue
 = vÆuê* 10 + (*
löe
 - '0');

1000 i‡(
vÆue
 < 0) {

1001  
NGX_ERROR
;

1004  
vÆue
;

1006 
	}
}

1009 
ngx_öt_t


1010 
	$ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
)

1012 
u_ch¨
 
c
, 
ch
;

1013 
ngx_öt_t
 
vÆue
;

1015 i‡(
n
 == 0) {

1016  
NGX_ERROR
;

1019 
vÆue
 = 0; 
n
--; 
löe
++) {

1020 
ch
 = *
löe
;

1022 i‡(
ch
 >= '0' && ch <= '9') {

1023 
vÆue
 = vÆuê* 16 + (
ch
 - '0');

1027 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1029 i‡(
c
 >= 'a' && c <= 'f') {

1030 
vÆue
 = vÆuê* 16 + (
c
 - 'a' + 10);

1034  
NGX_ERROR
;

1037 i‡(
vÆue
 < 0) {

1038  
NGX_ERROR
;

1041  
vÆue
;

1043 
	}
}

1046 
u_ch¨
 *

1047 
	$ngx_hex_dump
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

1049 
u_ch¨
 
hex
[] = "0123456789abcdef";

1051 
Àn
--) {

1052 *
d°
++ = 
hex
[*
§c
 >> 4];

1053 *
d°
++ = 
hex
[*
§c
++ & 0xf];

1056  
d°
;

1057 
	}
}

1061 
	$ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1063 
u_ch¨
 *
d
, *
s
;

1064 
size_t
 
Àn
;

1065 
u_ch¨
 
basis64
[] =

1068 
Àn
 = 
§c
->len;

1069 
s
 = 
§c
->
d©a
;

1070 
d
 = 
d°
->
d©a
;

1072 
Àn
 > 2) {

1073 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1074 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1075 *
d
++ = 
basis64
[((
s
[1] & 0x0f) << 2) | (s[2] >> 6)];

1076 *
d
++ = 
basis64
[
s
[2] & 0x3f];

1078 
s
 += 3;

1079 
Àn
 -= 3;

1082 i‡(
Àn
) {

1083 *
d
++ = 
basis64
[(
s
[0] >> 2) & 0x3f];

1085 i‡(
Àn
 == 1) {

1086 *
d
++ = 
basis64
[(
s
[0] & 3) << 4];

1087 *
d
++ = '=';

1090 *
d
++ = 
basis64
[((
s
[0] & 3) << 4) | (s[1] >> 4)];

1091 *
d
++ = 
basis64
[(
s
[1] & 0x0f) << 2];

1094 *
d
++ = '=';

1097 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1098 
	}
}

1101 
ngx_öt_t


1102 
	$ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1104 
u_ch¨
 
basis64
[] = {

1124  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1125 
	}
}

1128 
ngx_öt_t


1129 
	$ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
)

1131 
u_ch¨
 
basis64
[] = {

1151  
	`ngx_decode_ba£64_öã∫Æ
(
d°
, 
§c
, 
basis64
);

1152 
	}
}

1155 
ngx_öt_t


1156 
	$ngx_decode_ba£64_öã∫Æ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
, c⁄° 
u_ch¨
 *
basis
)

1158 
size_t
 
Àn
;

1159 
u_ch¨
 *
d
, *
s
;

1161 
Àn
 = 0;Üí < 
§c
->len;Üen++) {

1162 i‡(
§c
->
d©a
[
Àn
] == '=') {

1166 i‡(
basis
[
§c
->
d©a
[
Àn
]] == 77) {

1167  
NGX_ERROR
;

1171 i‡(
Àn
 % 4 == 1) {

1172  
NGX_ERROR
;

1175 
s
 = 
§c
->
d©a
;

1176 
d
 = 
d°
->
d©a
;

1178 
Àn
 > 3) {

1179 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1180 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1181 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[2]] << 6 | basis[s[3]]);

1183 
s
 += 4;

1184 
Àn
 -= 4;

1187 i‡(
Àn
 > 1) {

1188 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[0]] << 2 | basis[s[1]] >> 4);

1191 i‡(
Àn
 > 2) {

1192 *
d
++ = (
u_ch¨
Ë(
basis
[
s
[1]] << 4 | basis[s[2]] >> 2);

1195 
d°
->
Àn
 = 
d
 - d°->
d©a
;

1197  
NGX_OK
;

1198 
	}
}

1210 
uöt32_t


1211 
	$ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
)

1213 
size_t
 
Àn
;

1214 
uöt32_t
 
u
, 
i
, 
vÆid
;

1216 
u
 = **
p
;

1218 i‡(
u
 >= 0xf0) {

1220 
u
 &= 0x07;

1221 
vÆid
 = 0xffff;

1222 
Àn
 = 3;

1224 } i‡(
u
 >= 0xe0) {

1226 
u
 &= 0x0f;

1227 
vÆid
 = 0x7ff;

1228 
Àn
 = 2;

1230 } i‡(
u
 >= 0xc2) {

1232 
u
 &= 0x1f;

1233 
vÆid
 = 0x7f;

1234 
Àn
 = 1;

1237 (*
p
)++;

1241 i‡(
n
 - 1 < 
Àn
) {

1245 (*
p
)++;

1247 
Àn
) {

1248 
i
 = *(*
p
)++;

1250 i‡(
i
 < 0x80) {

1254 
u
 = (u << 6Ë| (
i
 & 0x3f);

1256 
Àn
--;

1259 i‡(
u
 > 
vÆid
) {

1260  
u
;

1264 
	}
}

1267 
size_t


1268 
	$ngx_utf8_Àngth
(
u_ch¨
 *
p
, 
size_t
 
n
)

1270 
u_ch¨
 
c
, *
œ°
;

1271 
size_t
 
Àn
;

1273 
œ°
 = 
p
 + 
n
;

1275 
Àn
 = 0; 
p
 < 
œ°
;Üen++) {

1277 
c
 = *
p
;

1279 i‡(
c
 < 0x80) {

1280 
p
++;

1284 i‡(
	`ngx_utf8_decode
(&
p
, 
n
) > 0x10ffff) {

1286  
n
;

1290  
Àn
;

1291 
	}
}

1294 
u_ch¨
 *

1295 
	$ngx_utf8_˝y°∫
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
)

1297 
u_ch¨
 
c
, *
√xt
;

1299 i‡(
n
 == 0) {

1300  
d°
;

1303 --
n
) {

1305 
c
 = *
§c
;

1306 *
d°
 = 
c
;

1308 i‡(
c
 < 0x80) {

1310 i‡(
c
 != '\0') {

1311 
d°
++;

1312 
§c
++;

1313 
Àn
--;

1318  
d°
;

1321 
√xt
 = 
§c
;

1323 i‡(
	`ngx_utf8_decode
(&
√xt
, 
Àn
) > 0x10ffff) {

1328 
§c
 < 
√xt
) {

1329 *
d°
++ = *
§c
++;

1330 
Àn
--;

1334 *
d°
 = '\0';

1336  
d°
;

1337 
	}
}

1340 
uöçå_t


1341 
	$ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1343 
ngx_uöt_t
 
n
;

1344 
uöt32_t
 *
esˇ≥
;

1345 
u_ch¨
 
hex
[] = "0123456789abcdef";

1349 
uöt32_t
 
uri
[] = {

1369 
uöt32_t
 
¨gs
[] = {

1389 
uöt32_t
 
uri_comp⁄ít
[] = {

1409 
uöt32_t
 
html
[] = {

1429 
uöt32_t
 
ª‰esh
[] = {

1449 
uöt32_t
 
memˇched
[] = {

1469 
uöt32_t
 *
m≠
[] =

1470 { 
uri
, 
¨gs
, 
uri_comp⁄ít
, 
html
, 
ª‰esh
, 
memˇched
, memcached };

1473 
esˇ≥
 = 
m≠
[
ty≥
];

1475 i‡(
d°
 =
NULL
) {

1479 
n
 = 0;

1481 
size
) {

1482 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1483 
n
++;

1485 
§c
++;

1486 
size
--;

1489  (
uöçå_t
Ë
n
;

1492 
size
) {

1493 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

1494 *
d°
++ = '%';

1495 *
d°
++ = 
hex
[*
§c
 >> 4];

1496 *
d°
++ = 
hex
[*
§c
 & 0xf];

1497 
§c
++;

1500 *
d°
++ = *
§c
++;

1502 
size
--;

1505  (
uöçå_t
Ë
d°
;

1506 
	}
}

1510 
	$ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
)

1512 
u_ch¨
 *
d
, *
s
, 
ch
, 
c
, 
decoded
;

1514 
sw_usuÆ
 = 0,

1515 
sw_quŸed
,

1516 
sw_quŸed_£c⁄d


1517 } 
°©e
;

1519 
d
 = *
d°
;

1520 
s
 = *
§c
;

1522 
°©e
 = 0;

1523 
decoded
 = 0;

1525 
size
--) {

1527 
ch
 = *
s
++;

1529 
°©e
) {

1530 
sw_usuÆ
:

1531 i‡(
ch
 == '?'

1532 && (
ty≥
 & (
NGX_UNESCAPE_URI
|
NGX_UNESCAPE_REDIRECT
)))

1534 *
d
++ = 
ch
;

1535 
d⁄e
;

1538 i‡(
ch
 == '%') {

1539 
°©e
 = 
sw_quŸed
;

1543 *
d
++ = 
ch
;

1546 
sw_quŸed
:

1548 i‡(
ch
 >= '0' && ch <= '9') {

1549 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1550 
°©e
 = 
sw_quŸed_£c⁄d
;

1554 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1555 i‡(
c
 >= 'a' && c <= 'f') {

1556 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1557 
°©e
 = 
sw_quŸed_£c⁄d
;

1563 
°©e
 = 
sw_usuÆ
;

1565 *
d
++ = 
ch
;

1569 
sw_quŸed_£c⁄d
:

1571 
°©e
 = 
sw_usuÆ
;

1573 i‡(
ch
 >= '0' && ch <= '9') {

1574 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1576 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1577 i‡(
ch
 > '%' && ch < 0x7f) {

1578 *
d
++ = 
ch
;

1582 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1587 *
d
++ = 
ch
;

1592 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1593 i‡(
c
 >= 'a' && c <= 'f') {

1594 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1596 i‡(
ty≥
 & 
NGX_UNESCAPE_URI
) {

1597 i‡(
ch
 == '?') {

1598 *
d
++ = 
ch
;

1599 
d⁄e
;

1602 *
d
++ = 
ch
;

1606 i‡(
ty≥
 & 
NGX_UNESCAPE_REDIRECT
) {

1607 i‡(
ch
 == '?') {

1608 *
d
++ = 
ch
;

1609 
d⁄e
;

1612 i‡(
ch
 > '%' && ch < 0x7f) {

1613 *
d
++ = 
ch
;

1617 *
d
++ = '%'; *d++ = *(
s
 - 2); *d++ = *(s - 1);

1621 *
d
++ = 
ch
;

1632 
d⁄e
:

1634 *
d°
 = 
d
;

1635 *
§c
 = 
s
;

1636 
	}
}

1639 
uöçå_t


1640 
	$ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

1642 
u_ch¨
 
ch
;

1643 
ngx_uöt_t
 
Àn
;

1645 i‡(
d°
 =
NULL
) {

1647 
Àn
 = 0;

1649 
size
) {

1650 *
§c
++) {

1653 
Àn
 += ("&lt;") - 2;

1657 
Àn
 += ("&gt;") - 2;

1661 
Àn
 += ("&amp;") - 2;

1665 
Àn
 += ("&quot;") - 2;

1671 
size
--;

1674  (
uöçå_t
Ë
Àn
;

1677 
size
) {

1678 
ch
 = *
§c
++;

1680 
ch
) {

1683 *
d°
++ = '&'; *dst++ = 'l'; *dst++ = 't'; *dst++ = ';';

1687 *
d°
++ = '&'; *dst++ = 'g'; *dst++ = 't'; *dst++ = ';';

1691 *
d°
++ = '&'; *dst++ = 'a'; *dst++ = 'm'; *dst++ = 'p';

1692 *
d°
++ = ';';

1696 *
d°
++ = '&'; *dst++ = 'q'; *dst++ = 'u'; *dst++ = 'o';

1697 *
d°
++ = 't'; *dst++ = ';';

1701 *
d°
++ = 
ch
;

1704 
size
--;

1707  (
uöçå_t
Ë
d°
;

1708 
	}
}

1712 
	$ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

1713 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

1715 
ngx_°r_node_t
 *
n
, *
t
;

1716 
ngx_rbåì_node_t
 **
p
;

1720 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1721 
t
 = (
ngx_°r_node_t
 *Ë
ãmp
;

1723 i‡(
node
->
key
 !
ãmp
->key) {

1725 
p
 = (
node
->
key
 < 
ãmp
->keyË? &ãmp->
À·
 : &ãmp->
right
;

1727 } i‡(
n
->
°r
.
Àn
 !
t
->str.len) {

1729 
p
 = (
n
->
°r
.
Àn
 < 
t
->°r.ÀnË? &
ãmp
->
À·
 : &ãmp->
right
;

1732 
p
 = (
	`ngx_memcmp
(
n
->
°r
.
d©a
, 
t
->°r.d©a,Ç->°r.
Àn
) < 0)

1733 ? &
ãmp
->
À·
 : &ãmp->
right
;

1736 i‡(*
p
 =
£¡öñ
) {

1740 
ãmp
 = *
p
;

1743 *
p
 = 
node
;

1744 
node
->
∑ª¡
 = 
ãmp
;

1745 
node
->
À·
 = 
£¡öñ
;

1746 
node
->
right
 = 
£¡öñ
;

1747 
	`ngx_rbt_ªd
(
node
);

1748 
	}
}

1751 
ngx_°r_node_t
 *

1752 
	$ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
vÆ
, 
uöt32_t
 
hash
)

1754 
ngx_öt_t
 
rc
;

1755 
ngx_°r_node_t
 *
n
;

1756 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1758 
node
 = 
rbåì
->
roŸ
;

1759 
£¡öñ
 = 
rbåì
->sentinel;

1761 
node
 !
£¡öñ
) {

1763 
n
 = (
ngx_°r_node_t
 *Ë
node
;

1765 i‡(
hash
 !
node
->
key
) {

1766 
node
 = (
hash
 <Çode->
key
Ë?Çode->
À·
 :Çode->
right
;

1770 i‡(
vÆ
->
Àn
 !
n
->
°r
.len) {

1771 
node
 = (
vÆ
->
Àn
 < 
n
->
°r
.ÀnË?Çode->
À·
 :Çode->
right
;

1775 
rc
 = 
	`ngx_memcmp
(
vÆ
->
d©a
, 
n
->
°r
.d©a, vÆ->
Àn
);

1777 i‡(
rc
 < 0) {

1778 
node
 =Çode->
À·
;

1782 i‡(
rc
 > 0) {

1783 
node
 =Çode->
right
;

1787  
n
;

1790  
NULL
;

1791 
	}
}

1797 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

1798 
	$ngx_öt_t
 (*
cmp
)(const *, const *))

1800 
u_ch¨
 *
p1
, *
p2
, *
p
;

1802 
p
 = 
	`ngx_Æloc
(
size
, 
ngx_cy˛e
->
log
);

1803 i‡(
p
 =
NULL
) {

1807 
p1
 = (
u_ch¨
 *Ë
ba£
 + 
size
;

1808 
p1
 < (
u_ch¨
 *Ë
ba£
 + 
n
 * 
size
;

1809 
p1
 +
size
)

1811 
	`ngx_mem˝y
(
p
, 
p1
, 
size
);

1813 
p2
 = 
p1
;

1814 
p2
 > (
u_ch¨
 *Ë
ba£
 && 
	`cmp
’2 - 
size
, 
p
) > 0;

1815 
p2
 -
size
)

1817 
	`ngx_mem˝y
(
p2
,Ö2 - 
size
, size);

1820 
	`ngx_mem˝y
(
p2
, 
p
, 
size
);

1823 
	`ngx_‰ì
(
p
);

1824 
	}
}

1827 #i‡(
NGX_MEMCPY_LIMIT
)

1830 
	$ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
)

1832 i‡(
n
 > 
NGX_MEMCPY_LIMIT
) {

1833 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0, "mem˝y %uz byãs", 
n
);

1834 
	`ngx_debug_poöt
();

1837  
	`mem˝y
(
d°
, 
§c
, 
n
);

1838 
	}
}

	@src/core/ngx_string.h

8 #i‚de‡
_NGX_STRING_H_INCLUDED_


9 
	#_NGX_STRING_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
size_t
 
	mÀn
;

18 
u_ch¨
 *
	md©a
;

19 } 
	tngx_°r_t
;

23 
ngx_°r_t
 
	mkey
;

24 
ngx_°r_t
 
	mvÆue
;

25 } 
	tngx_keyvÆ_t
;

29 
	mÀn
:28;

31 
	mvÆid
:1;

32 
	mno_ˇchóbÀ
:1;

33 
	mnŸ_found
:1;

34 
	mesˇ≥
:1;

36 
u_ch¨
 *
	md©a
;

37 } 
	tngx_v¨übÀ_vÆue_t
;

40 
	#ngx_°rög
(
°r
Ë{ (°rË- 1, (
u_ch¨
 *Ë°∏}

	)

41 
	#ngx_nuŒ_°rög
 { 0, 
NULL
 }

	)

42 
	#ngx_°r_£t
(
°r
, 
ãxt
) \

43 (
°r
)->
Àn
 = (
ãxt
Ë- 1; (°r)->
d©a
 = (
u_ch¨
 *Ë
	)
text

44 
	#ngx_°r_nuŒ
(
°r
Ë(°r)->
Àn
 = 0; (°r)->
d©a
 = 
NULL


	)

47 
	#ngx_tﬁowî
(
c
Ë(
u_ch¨
Ë((¯>'A' && c <'Z'Ë? (¯| 0x20Ë: c)

	)

48 
	#ngx_touµî
(
c
Ë(
u_ch¨
Ë((¯>'a' && c <'z'Ë? (¯& ~0x20Ë: c)

	)

50 
ngx_°æow
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

53 
	#ngx_°∫cmp
(
s1
, 
s2
, 
n
Ë
	`°∫cmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

57 
	#ngx_°rcmp
(
s1
, 
s2
Ë
	`°rcmp
((c⁄° *Ës1, (c⁄° *Ës2)

	)

60 
	#ngx_°r°r
(
s1
, 
s2
Ë
	`°r°r
((c⁄° *Ës1, (c⁄° *Ës2)

	)

61 
	#ngx_°æí
(
s
Ë
	`°æí
((c⁄° *Ës)

	)

63 
	#ngx_°rchr
(
s1
, 
c
Ë
	`°rchr
((c⁄° *Ës1, (Ëc)

	)

65 
ngx_ölöe
 
u_ch¨
 *

66 
	$ngx_°æchr
(
u_ch¨
 *
p
, u_ch¨ *
œ°
, u_ch¨ 
c
)

68 
p
 < 
œ°
) {

70 i‡(*
p
 =
c
) {

71  
p
;

74 
p
++;

77  
NULL
;

78 
	}
}

86 
	#ngx_memzîo
(
buf
, 
n
Ë(Ë
	`mem£t
(buf, 0,Ç)

	)

87 
	#ngx_mem£t
(
buf
, 
c
, 
n
Ë(Ë
	`mem£t
(buf, c,Ç)

	)

90 #i‡(
NGX_MEMCPY_LIMIT
)

92 *
ngx_mem˝y
(*
d°
, c⁄° *
§c
, 
size_t
 
n
);

93 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`ngx_mem˝y
(d°, src,Ç)Ë+ (n))

	)

102 
	#ngx_mem˝y
(
d°
, 
§c
, 
n
Ë(Ë
	`mem˝y
(d°, src,Ç)

	)

103 
	#ngx_˝ymem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`mem˝y
(d°, src,Ç)Ë+ (n))

	)

108 #i‡–
__INTEL_COMPILER
 >= 800 )

115 
ngx_ölöe
 
u_ch¨
 *

116 
	$ngx_c›y
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
)

118 i‡(
Àn
 < 17) {

120 
Àn
) {

121 *
d°
++ = *
§c
++;

122 
Àn
--;

125  
d°
;

128  
	`ngx_˝ymem
(
d°
, 
§c
, 
Àn
);

130 
	}
}

134 
	#ngx_c›y
 
ngx_˝ymem


	)

139 
	#ngx_memmove
(
d°
, 
§c
, 
n
Ë(Ë
	`memmove
(d°, src,Ç)

	)

140 
	#ngx_movemem
(
d°
, 
§c
, 
n
Ë(((
u_ch¨
 *Ë
	`memmove
(d°, src,Ç)Ë+ (n))

	)

144 
	#ngx_memcmp
(
s1
, 
s2
, 
n
Ë
	`memcmp
((c⁄° *Ës1, (c⁄° *Ës2,Ç)

	)

147 
u_ch¨
 *
ngx_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
);

148 
u_ch¨
 *
ngx_p°rdup
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
§c
);

149 
u_ch¨
 * 
ngx_cde˛
 
ngx_•rötf
(u_ch¨ *
buf
, c⁄° *
fmt
, ...);

150 
u_ch¨
 * 
ngx_cde˛
 
ngx_¢¥ötf
(u_ch¨ *
buf
, 
size_t
 
max
, c⁄° *
fmt
, ...);

151 
u_ch¨
 * 
ngx_cde˛
 
ngx_¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
,

153 
u_ch¨
 *
ngx_v¶¥ötf
(u_ch¨ *
buf
, u_ch¨ *
œ°
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

154 
	#ngx_v¢¥ötf
(
buf
, 
max
, 
fmt
, 
¨gs
) \

155 
	`ngx_v¶¥ötf
(
buf
, bu‡+ (
max
), 
fmt
, 
¨gs
)

	)

157 
ngx_öt_t
 
ngx_°rˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

158 
ngx_öt_t
 
ngx_°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

160 
u_ch¨
 *
ngx_°∫°r
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

162 
u_ch¨
 *
ngx_°r°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

163 
u_ch¨
 *
ngx_°rˇ£°∫
(u_ch¨ *
s1
, *
s2
, 
size_t
 
n
);

164 
u_ch¨
 *
ngx_°æˇ£°∫
(u_ch¨ *
s1
, u_ch¨ *
œ°
, u_ch¨ *
s2
, 
size_t
 
n
);

166 
ngx_öt_t
 
ngx_r°∫cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

167 
ngx_öt_t
 
ngx_r°∫ˇ£cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n
);

168 
ngx_öt_t
 
ngx_memn2cmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
, 
size_t
 
n1
, size_à
n2
);

169 
ngx_öt_t
 
ngx_dns_°rcmp
(
u_ch¨
 *
s1
, u_ch¨ *
s2
);

171 
ngx_öt_t
 
ngx_©oi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

172 
ngx_öt_t
 
ngx_©oÂ
(
u_ch¨
 *
löe
, 
size_t
 
n
, size_à
poöt
);

173 
ssize_t
 
ngx_©osz
(
u_ch¨
 *
löe
, 
size_t
 
n
);

174 
off_t
 
ngx_©oof
(
u_ch¨
 *
löe
, 
size_t
 
n
);

175 
time_t
 
ngx_©Ÿm
(
u_ch¨
 *
löe
, 
size_t
 
n
);

176 
ngx_öt_t
 
ngx_hextoi
(
u_ch¨
 *
löe
, 
size_t
 
n
);

178 
u_ch¨
 *
ngx_hex_dump
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
Àn
);

181 
	#ngx_ba£64_ícoded_Àngth
(
Àn
Ë((÷í + 2Ë/ 3Ë* 4)

	)

182 
	#ngx_ba£64_decoded_Àngth
(
Àn
Ë((÷í + 3Ë/ 4Ë* 3)

	)

184 
ngx_ícode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

185 
ngx_öt_t
 
ngx_decode_ba£64
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

186 
ngx_öt_t
 
ngx_decode_ba£64uæ
(
ngx_°r_t
 *
d°
,Çgx_°r_à*
§c
);

188 
uöt32_t
 
ngx_utf8_decode
(
u_ch¨
 **
p
, 
size_t
 
n
);

189 
size_t
 
ngx_utf8_Àngth
(
u_ch¨
 *
p
, size_à
n
);

190 
u_ch¨
 *
ngx_utf8_˝y°∫
(u_ch¨ *
d°
, u_ch¨ *
§c
, 
size_t
 
n
, size_à
Àn
);

193 
	#NGX_ESCAPE_URI
 0

	)

194 
	#NGX_ESCAPE_ARGS
 1

	)

195 
	#NGX_ESCAPE_URI_COMPONENT
 2

	)

196 
	#NGX_ESCAPE_HTML
 3

	)

197 
	#NGX_ESCAPE_REFRESH
 4

	)

198 
	#NGX_ESCAPE_MEMCACHED
 5

	)

199 
	#NGX_ESCAPE_MAIL_AUTH
 6

	)

201 
	#NGX_UNESCAPE_URI
 1

	)

202 
	#NGX_UNESCAPE_REDIRECT
 2

	)

204 
uöçå_t
 
ngx_esˇ≥_uri
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
,

205 
ngx_uöt_t
 
ty≥
);

206 
ngx_u√sˇ≥_uri
(
u_ch¨
 **
d°
, u_ch¨ **
§c
, 
size_t
 
size
, 
ngx_uöt_t
 
ty≥
);

207 
uöçå_t
 
ngx_esˇ≥_html
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

211 
ngx_rbåì_node_t
 
	mnode
;

212 
ngx_°r_t
 
	m°r
;

213 } 
	tngx_°r_node_t
;

216 
ngx_°r_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

217 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

218 
ngx_°r_node_t
 *
ngx_°r_rbåì_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_°r_t
 *
«me
,

219 
uöt32_t
 
hash
);

222 
ngx_s‹t
(*
ba£
, 
size_t
 
n
, size_à
size
,

223 
	$ngx_öt_t
 (*
cmp
)(const *, const *));

224 
	#ngx_qs‹t
 
qs‹t


	)

227 
	#ngx_vÆue_hñ≥r
(
n
Ë#n

	)

228 
	#ngx_vÆue
(
n
Ë
	`ngx_vÆue_hñ≥r
“)

	)

	@src/core/ngx_times.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

21 
	#NGX_TIME_SLOTS
 64

	)

23 
ngx_uöt_t
 
	g¶Ÿ
;

24 
ngx_©omic_t
 
	gngx_time_lock
;

26 vﬁ©ûê
ngx_m£c_t
 
	gngx_cuºít_m£c
;

27 vﬁ©ûê
ngx_time_t
 *
	gngx_ˇched_time
;

28 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_îr_log_time
;

29 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_time
;

30 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_time
;

31 vﬁ©ûê
ngx_°r_t
 
	gngx_ˇched_hâp_log_iso8601
;

33 #i‡!(
NGX_WIN32
)

41 
ngx_öt_t
 
	gˇched_gmtoff
;

44 
ngx_time_t
 
	gˇched_time
[
NGX_TIME_SLOTS
];

45 
u_ch¨
 
	gˇched_îr_log_time
[
NGX_TIME_SLOTS
]

47 
u_ch¨
 
	gˇched_hâp_time
[
NGX_TIME_SLOTS
]

49 
u_ch¨
 
	gˇched_hâp_log_time
[
NGX_TIME_SLOTS
]

51 
u_ch¨
 
	gˇched_hâp_log_iso8601
[
NGX_TIME_SLOTS
]

55 *
	gwìk
[] = { "Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat" };

56 *
	gm⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

60 
	$ngx_time_öô
()

62 
ngx_ˇched_îr_log_time
.
Àn
 = ("1970/09/28 12:00:00") - 1;

63 
ngx_ˇched_hâp_time
.
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT") - 1;

64 
ngx_ˇched_hâp_log_time
.
Àn
 = ("28/Sep/1970:12:00:00 +0600") - 1;

65 
ngx_ˇched_hâp_log_iso8601
.
Àn
 = ("1970-09-28T12:00:00+06:00") - 1;

67 
ngx_ˇched_time
 = &
ˇched_time
[0];

69 
	`ngx_time_upd©e
();

70 
	}
}

74 
	$ngx_time_upd©e
()

76 
u_ch¨
 *
p0
, *
p1
, *
p2
, *
p3
;

77 
ngx_tm_t
 
tm
, 
gmt
;

78 
time_t
 
£c
;

79 
ngx_uöt_t
 
m£c
;

80 
ngx_time_t
 *
ç
;

81 
timevÆ
 
tv
;

83 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

87 
	`ngx_gëtimeofday
(&
tv
);

89 
£c
 = 
tv
.
tv_£c
;

90 
m£c
 = 
tv
.
tv_u£c
 / 1000;

92 
ngx_cuºít_m£c
 = (
ngx_m£c_t
Ë
£c
 * 1000 + 
m£c
;

94 
ç
 = &
ˇched_time
[
¶Ÿ
];

96 i‡(
ç
->
£c
 == sec) {

97 
ç
->
m£c
 = msec;

98 
	`ngx_u∆ock
(&
ngx_time_lock
);

102 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

103 
¶Ÿ
 = 0;

105 
¶Ÿ
++;

108 
ç
 = &
ˇched_time
[
¶Ÿ
];

110 
ç
->
£c
 = sec;

111 
ç
->
m£c
 = msec;

113 
	`ngx_gmtime
(
£c
, &
gmt
);

116 
p0
 = &
ˇched_hâp_time
[
¶Ÿ
][0];

118 (Ë
	`ngx_•rötf
(
p0
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

119 
wìk
[
gmt
.
ngx_tm_wday
], gmt.
ngx_tm_mday
,

120 
m⁄ths
[
gmt
.
ngx_tm_m⁄
 - 1], gmt.
ngx_tm_yór
,

121 
gmt
.
ngx_tm_hour
, gmt.
ngx_tm_mö
, gmt.
ngx_tm_£c
);

123 #i‡(
NGX_HAVE_GETTIMEZONE
)

125 
ç
->
gmtoff
 = 
	`ngx_gëtimez⁄e
();

126 
	`ngx_gmtime
(
£c
 + 
ç
->
gmtoff
 * 60, &
tm
);

128 #ñi‡(
NGX_HAVE_GMTOFF
)

130 
	`ngx_loˇ…ime
(
£c
, &
tm
);

131 
ˇched_gmtoff
 = (
ngx_öt_t
Ë(
tm
.
ngx_tm_gmtoff
 / 60);

132 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

136 
	`ngx_loˇ…ime
(
£c
, &
tm
);

137 
ˇched_gmtoff
 = 
	`ngx_timez⁄e
(
tm
.
ngx_tm_isd°
);

138 
ç
->
gmtoff
 = 
ˇched_gmtoff
;

143 
p1
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

145 (Ë
	`ngx_•rötf
(
p1
, "%4d/%02d/%02d %02d:%02d:%02d",

146 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

147 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

148 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

151 
p2
 = &
ˇched_hâp_log_time
[
¶Ÿ
][0];

153 (Ë
	`ngx_•rötf
(
p2
, "%02d/%s/%d:%02d:%02d:%02d %c%02d%02d",

154 
tm
.
ngx_tm_mday
, 
m⁄ths
[tm.
ngx_tm_m⁄
 - 1],

155 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_hour
,

156 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

157 
ç
->
gmtoff
 < 0 ? '-' : '+',

158 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

160 
p3
 = &
ˇched_hâp_log_iso8601
[
¶Ÿ
][0];

162 (Ë
	`ngx_•rötf
(
p3
, "%4d-%02d-%02dT%02d:%02d:%02d%c%02d:%02d",

163 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

164 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

165 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
,

166 
ç
->
gmtoff
 < 0 ? '-' : '+',

167 
	`ngx_abs
(
ç
->
gmtoff
 / 60),Çgx_abs(tp->gmtoff % 60));

170 
	`ngx_mem‹y_b¨rõr
();

172 
ngx_ˇched_time
 = 
ç
;

173 
ngx_ˇched_hâp_time
.
d©a
 = 
p0
;

174 
ngx_ˇched_îr_log_time
.
d©a
 = 
p1
;

175 
ngx_ˇched_hâp_log_time
.
d©a
 = 
p2
;

176 
ngx_ˇched_hâp_log_iso8601
.
d©a
 = 
p3
;

178 
	`ngx_u∆ock
(&
ngx_time_lock
);

179 
	}
}

182 #i‡!(
NGX_WIN32
)

185 
	$ngx_time_sigß„_upd©e
()

187 
u_ch¨
 *
p
;

188 
ngx_tm_t
 
tm
;

189 
time_t
 
£c
;

190 
ngx_time_t
 *
ç
;

191 
timevÆ
 
tv
;

193 i‡(!
	`ngx_åylock
(&
ngx_time_lock
)) {

197 
	`ngx_gëtimeofday
(&
tv
);

199 
£c
 = 
tv
.
tv_£c
;

201 
ç
 = &
ˇched_time
[
¶Ÿ
];

203 i‡(
ç
->
£c
 == sec) {

204 
	`ngx_u∆ock
(&
ngx_time_lock
);

208 i‡(
¶Ÿ
 =
NGX_TIME_SLOTS
 - 1) {

209 
¶Ÿ
 = 0;

211 
¶Ÿ
++;

214 
ç
 = &
ˇched_time
[
¶Ÿ
];

216 
ç
->
£c
 = 0;

218 
	`ngx_gmtime
(
£c
 + 
ˇched_gmtoff
 * 60, &
tm
);

220 
p
 = &
ˇched_îr_log_time
[
¶Ÿ
][0];

222 (Ë
	`ngx_•rötf
(
p
, "%4d/%02d/%02d %02d:%02d:%02d",

223 
tm
.
ngx_tm_yór
,Åm.
ngx_tm_m⁄
,

224 
tm
.
ngx_tm_mday
,Åm.
ngx_tm_hour
,

225 
tm
.
ngx_tm_mö
,Åm.
ngx_tm_£c
);

227 
	`ngx_mem‹y_b¨rõr
();

229 
ngx_ˇched_îr_log_time
.
d©a
 = 
p
;

231 
	`ngx_u∆ock
(&
ngx_time_lock
);

232 
	}
}

237 
u_ch¨
 *

238 
	$ngx_hâp_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

240 
ngx_tm_t
 
tm
;

242 
	`ngx_gmtime
(
t
, &
tm
);

244  
	`ngx_•rötf
(
buf
, "%s, %02d %s %4d %02d:%02d:%02d GMT",

245 
wìk
[
tm
.
ngx_tm_wday
],

246 
tm
.
ngx_tm_mday
,

247 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

248 
tm
.
ngx_tm_yór
,

249 
tm
.
ngx_tm_hour
,

250 
tm
.
ngx_tm_mö
,

251 
tm
.
ngx_tm_£c
);

252 
	}
}

255 
u_ch¨
 *

256 
	$ngx_hâp_cookõ_time
(
u_ch¨
 *
buf
, 
time_t
 
t
)

258 
ngx_tm_t
 
tm
;

260 
	`ngx_gmtime
(
t
, &
tm
);

267  
	`ngx_•rötf
(
buf
,

268 (
tm
.
ngx_tm_yór
 > 2037) ?

271 
wìk
[
tm
.
ngx_tm_wday
],

272 
tm
.
ngx_tm_mday
,

273 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

274 (
tm
.
ngx_tm_yór
 > 2037) ?Åm.ngx_tm_year:

275 
tm
.
ngx_tm_yór
 % 100,

276 
tm
.
ngx_tm_hour
,

277 
tm
.
ngx_tm_mö
,

278 
tm
.
ngx_tm_£c
);

279 
	}
}

283 
	$ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
)

285 
ngx_öt_t
 
yday
;

286 
ngx_uöt_t
 
n
, 
£c
, 
mö
, 
hour
, 
mday
, 
m⁄
, 
yór
, 
wday
, 
days
, 
À≠
;

290 
n
 = (
ngx_uöt_t
Ë
t
;

292 
days
 = 
n
 / 86400;

296 
wday
 = (4 + 
days
) % 7;

298 
n
 %= 86400;

299 
hour
 = 
n
 / 3600;

300 
n
 %= 3600;

301 
mö
 = 
n
 / 60;

302 
£c
 = 
n
 % 60;

310 
days
 = days - (31 + 28) + 719527;

319 
yór
 = (
days
 + 2) * 400 / (365 * 400 + 100 - 4 + 1);

321 
yday
 = 
days
 - (365 * 
yór
 + year / 4 - year / 100 + year / 400);

323 i‡(
yday
 < 0) {

324 
À≠
 = (
yór
 % 4 == 0) && (year % 100 || (year % 400 == 0));

325 
yday
 = 365 + 
À≠
 + yday;

326 
yór
--;

337 
m⁄
 = (
yday
 + 31) * 10 / 306;

341 
mday
 = 
yday
 - (367 * 
m⁄
 / 12 - 30) + 1;

343 i‡(
yday
 >= 306) {

345 
yór
++;

346 
m⁄
 -= 10;

356 
m⁄
 += 2;

365 
ç
->
ngx_tm_£c
 = (
ngx_tm_£c_t
Ë
£c
;

366 
ç
->
ngx_tm_mö
 = (
ngx_tm_mö_t
Ë
mö
;

367 
ç
->
ngx_tm_hour
 = (
ngx_tm_hour_t
Ë
hour
;

368 
ç
->
ngx_tm_mday
 = (
ngx_tm_mday_t
Ë
mday
;

369 
ç
->
ngx_tm_m⁄
 = (
ngx_tm_m⁄_t
Ë
m⁄
;

370 
ç
->
ngx_tm_yór
 = (
ngx_tm_yór_t
Ë
yór
;

371 
ç
->
ngx_tm_wday
 = (
ngx_tm_wday_t
Ë
wday
;

372 
	}
}

375 
time_t


376 
	$ngx_√xt_time
(
time_t
 
whí
)

378 
time_t
 
now
, 
√xt
;

379 
tm
Åm;

381 
now
 = 
	`ngx_time
();

383 
	`ngx_libc_loˇ…ime
(
now
, &
tm
);

385 
tm
.
tm_hour
 = (Ë(
whí
 / 3600);

386 
whí
 %= 3600;

387 
tm
.
tm_mö
 = (Ë(
whí
 / 60);

388 
tm
.
tm_£c
 = (Ë(
whí
 % 60);

390 
√xt
 = 
	`mktime
(&
tm
);

392 i‡(
√xt
 == -1) {

396 i‡(
√xt
 - 
now
 > 0) {

397  
√xt
;

400 
tm
.
tm_mday
++;

404 
√xt
 = 
	`mktime
(&
tm
);

406 i‡(
√xt
 != -1) {

407  
√xt
;

411 
	}
}

	@src/core/ngx_times.h

8 #i‚de‡
_NGX_TIMES_H_INCLUDED_


9 
	#_NGX_TIMES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
time_t
 
	m£c
;

18 
ngx_uöt_t
 
	mm£c
;

19 
ngx_öt_t
 
	mgmtoff
;

20 } 
	tngx_time_t
;

23 
ngx_time_öô
();

24 
ngx_time_upd©e
();

25 
ngx_time_sigß„_upd©e
();

26 
u_ch¨
 *
ngx_hâp_time
(u_ch¨ *
buf
, 
time_t
 
t
);

27 
u_ch¨
 *
ngx_hâp_cookõ_time
(u_ch¨ *
buf
, 
time_t
 
t
);

28 
ngx_gmtime
(
time_t
 
t
, 
ngx_tm_t
 *
ç
);

30 
time_t
 
ngx_√xt_time
—ime_à
whí
);

31 
	#ngx_√xt_time_n
 "mktime()"

	)

34 vﬁ©ûê
ngx_time_t
 *
ngx_ˇched_time
;

36 
	#ngx_time
(Ë
ngx_ˇched_time
->
£c


	)

37 
	#ngx_timeofday
(Ë(
ngx_time_t
 *Ë
ngx_ˇched_time


	)

39 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_îr_log_time
;

40 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_time
;

41 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_time
;

42 vﬁ©ûê
ngx_°r_t
 
ngx_ˇched_hâp_log_iso8601
;

48 vﬁ©ûê
ngx_m£c_t
 
ngx_cuºít_m£c
;

	@src/event/modules/ngx_aio_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evít_moduÀ_t
 
ngx_kqueue_moduÀ_˘x
;

16 
ngx_öt_t
 
ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

17 
ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

18 
ngx_öt_t
 
ngx_aio_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

19 
ngx_uöt_t
 
Êags
);

20 
ngx_öt_t
 
ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

21 
ngx_uöt_t
 
Êags
);

22 
ngx_öt_t
 
ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

24 
ngx_uöt_t
 
Êags
);

27 
ngx_os_io_t
 
	gngx_os_aio
 = {

28 
ngx_aio_ªad
,

29 
ngx_aio_ªad_chaö
,

30 
NULL
,

31 
ngx_aio_wrôe
,

32 
ngx_aio_wrôe_chaö
,

37 
ngx_°r_t
 
	gaio_«me
 = 
ngx_°rög
("aio");

39 
ngx_evít_moduÀ_t
 
	gngx_aio_moduÀ_˘x
 = {

40 &
aio_«me
,

41 
NULL
,

42 
NULL
,

45 
ngx_aio_add_evít
,

46 
ngx_aio_dñ_evít
,

47 
NULL
,

48 
NULL
,

49 
NULL
,

50 
ngx_aio_dñ_c⁄√˘i⁄
,

51 
NULL
,

52 
ngx_aio_¥o˚ss_evíts
,

53 
ngx_aio_öô
,

54 
ngx_aio_d⁄e


59 
ngx_moduÀ_t
 
	gngx_aio_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_aio_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 #i‡(
NGX_HAVE_KQUEUE
)

77 
ngx_öt_t


78 
	$ngx_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

80 i‡(
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`öô
(
cy˛e
, 
timî
Ë=
NGX_ERROR
) {

81  
NGX_ERROR
;

84 
ngx_io
 = 
ngx_os_aio
;

86 
ngx_evít_Êags
 = 
NGX_USE_AIO_EVENT
;

87 
ngx_evít_a˘i⁄s
 = 
ngx_aio_moduÀ_˘x
.
a˘i⁄s
;

90  
NGX_OK
;

91 
	}
}

95 
	$ngx_aio_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

97 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`d⁄e
(
cy˛e
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_aio_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

106  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`add
(
ev
, 
evít
, 
Êags
);

107 
	}
}

110 
ngx_öt_t


111 
	$ngx_aio_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

113  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`dñ
(
ev
, 
evít
, 
Êags
);

114 
	}
}

117 
ngx_öt_t


118 
	$ngx_aio_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

120 
rc
;

122 i‡(
c
->
ªad
->
a˘ive
 =0 && c->
wrôe
->active == 0) {

123  
NGX_OK
;

126 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

127  
NGX_OK
;

130 
rc
 = 
	`aio_ˇn˚l
(
c
->
fd
, 
NULL
);

132 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ˇn˚l: %d", 
rc
);

134 i‡(
rc
 =
AIO_CANCELED
) {

135 
c
->
ªad
->
a˘ive
 = 0;

136 
c
->
wrôe
->
a˘ive
 = 0;

137  
NGX_OK
;

140 i‡(
rc
 =
AIO_ALLDONE
) {

141 
c
->
ªad
->
a˘ive
 = 0;

142 
c
->
wrôe
->
a˘ive
 = 0;

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

145  
NGX_OK
;

148 i‡(
rc
 == -1) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

151  
NGX_ERROR
;

154 i‡(
rc
 =
AIO_NOTCANCELED
) {

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

158  
NGX_ERROR
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_aio_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

168  
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
.
	`¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

169 
	}
}

	@src/event/modules/ngx_devpoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_DEVPOLL
)

17 
	#POLLREMOVE
 0x0800

	)

18 
	#DP_POLL
 0xD001

	)

19 
	#DP_ISPOLLED
 0xD002

	)

21 
	sdvpﬁl
 {

22 
pﬁlfd
 *
	mdp_fds
;

23 
	mdp_nfds
;

24 
	mdp_timeout
;

31 
ngx_uöt_t
 
	mch™ges
;

32 
ngx_uöt_t
 
	mevíts
;

33 } 
	tngx_devpﬁl_c⁄f_t
;

36 
ngx_öt_t
 
ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

37 
ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_öt_t
 
ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

39 
ngx_uöt_t
 
Êags
);

40 
ngx_öt_t
 
ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

41 
ngx_uöt_t
 
Êags
);

42 
ngx_öt_t
 
ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

43 
ngx_uöt_t
 
Êags
);

44 
ngx_öt_t
 
ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

45 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

47 *
ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

48 *
ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

50 
	gdp
 = -1;

51 
pﬁlfd
 *
	gch™ge_li°
, *
	gevít_li°
;

52 
ngx_uöt_t
 
	gnch™ges
, 
	gmax_ch™ges
, 
	g√víts
;

54 
ngx_evít_t
 **
	gch™ge_ödex
;

57 
ngx_°r_t
 
	gdevpﬁl_«me
 = 
ngx_°rög
("/dev/poll");

59 
ngx_comm™d_t
 
	gngx_devpﬁl_comm™ds
[] = {

61 { 
ngx_°rög
("devpoll_changes"),

62 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

65 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
ch™ges
),

66 
NULL
 },

68 { 
ngx_°rög
("devpoll_events"),

69 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

72 
off£tof
(
ngx_devpﬁl_c⁄f_t
, 
evíts
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_evít_moduÀ_t
 
	gngx_devpﬁl_moduÀ_˘x
 = {

80 &
devpﬁl_«me
,

81 
ngx_devpﬁl_¸óã_c⁄f
,

82 
ngx_devpﬁl_öô_c⁄f
,

85 
ngx_devpﬁl_add_evít
,

86 
ngx_devpﬁl_dñ_evít
,

87 
ngx_devpﬁl_add_evít
,

88 
ngx_devpﬁl_dñ_evít
,

89 
NULL
,

90 
NULL
,

91 
NULL
,

92 
ngx_devpﬁl_¥o˚ss_evíts
,

93 
ngx_devpﬁl_öô
,

94 
ngx_devpﬁl_d⁄e
,

99 
ngx_moduÀ_t
 
	gngx_devpﬁl_moduÀ
 = {

100 
NGX_MODULE_V1
,

101 &
ngx_devpﬁl_moduÀ_˘x
,

102 
ngx_devpﬁl_comm™ds
,

103 
NGX_EVENT_MODULE
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NGX_MODULE_V1_PADDING


115 
ngx_öt_t


116 
	$ngx_devpﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

118 
size_t
 
n
;

119 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

121 
dpcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_devpﬁl_moduÀ
);

123 i‡(
dp
 == -1) {

124 
dp
 = 
	`›í
("/dev/pﬁl", 
O_RDWR
);

126 i‡(
dp
 == -1) {

127 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

129  
NGX_ERROR
;

133 i‡(
max_ch™ges
 < 
dpcf
->
ch™ges
) {

134 i‡(
nch™ges
) {

135 
n
 = 
nch™ges
 * (
pﬁlfd
);

136 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
nch™ges
 = 0;

145 i‡(
ch™ge_li°
) {

146 
	`ngx_‰ì
(
ch™ge_li°
);

149 
ch™ge_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
ch™ges
,

150 
cy˛e
->
log
);

151 i‡(
ch™ge_li°
 =
NULL
) {

152  
NGX_ERROR
;

155 i‡(
ch™ge_ödex
) {

156 
	`ngx_‰ì
(
ch™ge_ödex
);

159 
ch™ge_ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 
dpcf
->
ch™ges
,

160 
cy˛e
->
log
);

161 i‡(
ch™ge_ödex
 =
NULL
) {

162  
NGX_ERROR
;

166 
max_ch™ges
 = 
dpcf
->
ch™ges
;

168 i‡(
√víts
 < 
dpcf
->
evíts
) {

169 i‡(
evít_li°
) {

170 
	`ngx_‰ì
(
evít_li°
);

173 
evít_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
dpcf
->
evíts
,

174 
cy˛e
->
log
);

175 i‡(
evít_li°
 =
NULL
) {

176  
NGX_ERROR
;

180 
√víts
 = 
dpcf
->
evíts
;

182 
ngx_io
 = 
ngx_os_io
;

184 
ngx_evít_a˘i⁄s
 = 
ngx_devpﬁl_moduÀ_˘x
.
a˘i⁄s
;

186 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

188  
NGX_OK
;

189 
	}
}

193 
	$ngx_devpﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

195 i‡(
	`˛o£
(
dp
) == -1) {

196 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

200 
dp
 = -1;

202 
	`ngx_‰ì
(
ch™ge_li°
);

203 
	`ngx_‰ì
(
evít_li°
);

204 
	`ngx_‰ì
(
ch™ge_ödex
);

206 
ch™ge_li°
 = 
NULL
;

207 
evít_li°
 = 
NULL
;

208 
ch™ge_ödex
 = 
NULL
;

209 
max_ch™ges
 = 0;

210 
nch™ges
 = 0;

211 
√víts
 = 0;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_devpﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

218 #i‡(
NGX_DEBUG
)

219 
ngx_c⁄√˘i⁄_t
 *
c
;

222 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

223 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

226 #i‡(
NGX_DEBUG
)

227 
c
 = 
ev
->
d©a
;

228 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

229 "devpﬁ»addÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

232 
ev
->
a˘ive
 = 1;

234  
	`ngx_devpﬁl_£t_evít
(
ev
, 
evít
, 0);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_devpﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

241 
ngx_evít_t
 *
e
;

242 
ngx_c⁄√˘i⁄_t
 *
c
;

244 
c
 = 
ev
->
d©a
;

246 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

247 
evít
 = (evíà=
NGX_READ_EVENT
Ë? 
POLLIN
 : 
POLLOUT
;

250 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

251 "devpﬁ»dñÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

253 i‡(
	`ngx_devpﬁl_£t_evít
(
ev
, 
POLLREMOVE
, 
Êags
Ë=
NGX_ERROR
) {

254  
NGX_ERROR
;

257 
ev
->
a˘ive
 = 0;

259 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

260 
e
 = (
evít
 =
POLLIN
Ë? 
c
->
wrôe
 : c->
ªad
;

262 i‡(
e
) {

263 
e
->
a˘ive
 = 0;

266  
NGX_OK
;

271 i‡(
evít
 =
POLLIN
) {

272 
e
 = 
c
->
wrôe
;

273 
evít
 = 
POLLOUT
;

276 
e
 = 
c
->
ªad
;

277 
evít
 = 
POLLIN
;

280 i‡(
e
 &&É->
a˘ive
) {

281  
	`ngx_devpﬁl_£t_evít
(
e
, 
evít
, 0);

284  
NGX_OK
;

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_devpﬁl_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

291 
size_t
 
n
;

292 
ngx_c⁄√˘i⁄_t
 *
c
;

294 
c
 = 
ev
->
d©a
;

296 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

297 "devpﬁ»fd:%dÉv:%04XòÊ:%04Xi", 
c
->
fd
, 
evít
, 
Êags
);

299 i‡(
nch™ges
 >
max_ch™ges
) {

300 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

303 
n
 = 
nch™ges
 * (
pﬁlfd
);

304 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

307  
NGX_ERROR
;

310 
nch™ges
 = 0;

313 
ch™ge_li°
[
nch™ges
].
fd
 = 
c
->fd;

314 
ch™ge_li°
[
nch™ges
].
evíts
 = (Ë
evít
;

315 
ch™ge_li°
[
nch™ges
].
ªvíts
 = 0;

317 
ch™ge_ödex
[
nch™ges
] = 
ev
;

318 
ev
->
ödex
 = 
nch™ges
;

320 
nch™ges
++;

322 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

323 
n
 = 
nch™ges
 * (
pﬁlfd
);

324 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

327  
NGX_ERROR
;

330 
nch™ges
 = 0;

333  
NGX_OK
;

334 
	}
}

337 
ngx_öt_t


338 
	$ngx_devpﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

339 
ngx_uöt_t
 
Êags
)

341 
evíts
, 
ªvíts
, 
rc
;

342 
size_t
 
n
;

343 
ngx_fd_t
 
fd
;

344 
ngx_îr_t
 
îr
;

345 
ngx_öt_t
 
i
;

346 
ngx_uöt_t
 
Àvñ
, 
ö°™˚
;

347 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

348 
ngx_c⁄√˘i⁄_t
 *
c
;

349 
pﬁlfd
 
pfd
;

350 
dvpﬁl
 
dvp
;

354 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

355 "devpﬁ»timî: %M", 
timî
);

357 i‡(
nch™ges
) {

358 
n
 = 
nch™ges
 * (
pﬁlfd
);

359 i‡(
	`wrôe
(
dp
, 
ch™ge_li°
, 
n
Ë!(
ssize_t
)Ç) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

362  
NGX_ERROR
;

365 
nch™ges
 = 0;

368 
dvp
.
dp_fds
 = 
evít_li°
;

369 
dvp
.
dp_nfds
 = (Ë
√víts
;

370 
dvp
.
dp_timeout
 = 
timî
;

371 
evíts
 = 
	`io˘l
(
dp
, 
DP_POLL
, &
dvp
);

373 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

375 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

376 
	`ngx_time_upd©e
();

379 i‡(
îr
) {

380 i‡(
îr
 =
NGX_EINTR
) {

382 i‡(
ngx_evít_timî_Æ¨m
) {

383 
ngx_evít_timî_Æ¨m
 = 0;

384  
NGX_OK
;

387 
Àvñ
 = 
NGX_LOG_INFO
;

390 
Àvñ
 = 
NGX_LOG_ALERT
;

393 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "ioctl(DP_POLL) failed");

394  
NGX_ERROR
;

397 i‡(
evíts
 == 0) {

398 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

399  
NGX_OK
;

402 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

404  
NGX_ERROR
;

407 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

409 
i
 = 0; i < 
evíts
; i++) {

411 
fd
 = 
evít_li°
[
i
].fd;

412 
ªvíts
 = 
evít_li°
[
i
].revents;

414 
c
 = 
ngx_cy˛e
->
fûes
[
fd
];

416 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

418 
pfd
.
fd
 = fd;

419 
pfd
.
evíts
 = 0;

420 
pfd
.
ªvíts
 = 0;

422 
rc
 = 
	`io˘l
(
dp
, 
DP_ISPOLLED
, &
pfd
);

424 
rc
) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

429 
fd
, 
ªvíts
);

433 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

435 
ªvíts
, 
fd
);

439 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

442 
ªvíts
, 
fd
, 
rc
, 
pfd
.fd,Öfd.revents);

444 
pfd
.
fd
 = fd;

445 
pfd
.
evíts
 = 
POLLREMOVE
;

446 
pfd
.
ªvíts
 = 0;

448 i‡(
	`wrôe
(
dp
, &
pfd
, (
pﬁlfd
))

449 !(
ssize_t
Ë(
pﬁlfd
))

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

455 i‡(
	`˛o£
(
fd
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "˛o£(%dËÁûed", 
fd
);

466 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

468 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

470 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

471 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

473 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

476 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

477 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

480 
fd
, 
evít_li°
[
i
].
evíts
, 
ªvíts
);

483 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

484 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

492 
ªvíts
 |
POLLIN
|
POLLOUT
;

495 
ªv
 = 
c
->
ªad
;

497 i‡((
ªvíts
 & 
POLLIN
Ë&& 
ªv
->
a˘ive
) {

499 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

500 
ªv
->
po°ed_ªady
 = 1;

503 
ªv
->
ªady
 = 1;

506 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

507 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

508 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

510 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

513 
ö°™˚
 = 
ªv
->instance;

515 
ªv
->
	`h™dÀr
(rev);

517 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

523 
wev
 = 
c
->
wrôe
;

525 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
wev
->
a˘ive
) {

527 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

528 
wev
->
po°ed_ªady
 = 1;

531 
wev
->
ªady
 = 1;

534 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

535 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

538 
wev
->
	`h™dÀr
(wev);

543 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

545  
NGX_OK
;

546 
	}
}

550 
	$ngx_devpﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

552 
ngx_devpﬁl_c⁄f_t
 *
dpcf
;

554 
dpcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_devpﬁl_c⁄f_t
));

555 i‡(
dpcf
 =
NULL
) {

556  
NULL
;

559 
dpcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

560 
dpcf
->
evíts
 = 
NGX_CONF_UNSET
;

562  
dpcf
;

563 
	}
}

567 
	$ngx_devpﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

569 
ngx_devpﬁl_c⁄f_t
 *
dpcf
 = 
c⁄f
;

571 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
ch™ges
, 32);

572 
	`ngx_c⁄f_öô_uöt_vÆue
(
dpcf
->
evíts
, 32);

574  
NGX_CONF_OK
;

575 
	}
}

	@src/event/modules/ngx_epoll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EPOLL
)

17 
	#EPOLLIN
 0x001

	)

18 
	#EPOLLPRI
 0x002

	)

19 
	#EPOLLOUT
 0x004

	)

20 
	#EPOLLRDNORM
 0x040

	)

21 
	#EPOLLRDBAND
 0x080

	)

22 
	#EPOLLWRNORM
 0x100

	)

23 
	#EPOLLWRBAND
 0x200

	)

24 
	#EPOLLMSG
 0x400

	)

25 
	#EPOLLERR
 0x008

	)

26 
	#EPOLLHUP
 0x010

	)

28 
	#EPOLLET
 0x80000000

	)

29 
	#EPOLLONESHOT
 0x40000000

	)

31 
	#EPOLL_CTL_ADD
 1

	)

32 
	#EPOLL_CTL_DEL
 2

	)

33 
	#EPOLL_CTL_MOD
 3

	)

35 
	uïﬁl_d©a
 {

36 *
	m±r
;

37 
	mfd
;

38 
uöt32_t
 
	mu32
;

39 
uöt64_t
 
	mu64
;

40 } 
	tïﬁl_d©a_t
;

42 
	sïﬁl_evít
 {

43 
uöt32_t
 
	mevíts
;

44 
ïﬁl_d©a_t
 
	md©a
;

48 
ïﬁl_¸óã
(
size
);

50 
	$ïﬁl_¸óã
(
size
)

53 
	}
}

56 
ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
);

58 
	$ïﬁl_˘l
(
ïfd
, 
›
, 
fd
, 
ïﬁl_evít
 *
evít
)

61 
	}
}

64 
ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
);

66 
	$ïﬁl_waô
(
ïfd
, 
ïﬁl_evít
 *
evíts
, 
√víts
, 
timeout
)

69 
	}
}

71 #i‡(
NGX_HAVE_FILE_AIO
)

73 
	#SYS_io_£tup
 245

	)

74 
	#SYS_io_de°roy
 246

	)

75 
	#SYS_io_gëevíts
 247

	)

76 
	#SYS_evítfd
 323

	)

78 
u_öt
 
	taio_c⁄ãxt_t
;

80 
	sio_evít
 {

81 
uöt64_t
 
	md©a
;

82 
uöt64_t
 
	mobj
;

83 
öt64_t
 
	mªs
;

84 
öt64_t
 
	mªs2
;

93 
ngx_uöt_t
 
	mevíts
;

94 
ngx_uöt_t
 
	maio_ªque°s
;

95 } 
	tngx_ïﬁl_c⁄f_t
;

98 
ngx_öt_t
 
ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

99 
ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

100 
ngx_öt_t
 
ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

101 
ngx_uöt_t
 
Êags
);

102 
ngx_öt_t
 
ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

103 
ngx_uöt_t
 
Êags
);

104 
ngx_öt_t
 
ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

105 
ngx_öt_t
 
ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

106 
ngx_uöt_t
 
Êags
);

107 
ngx_öt_t
 
ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

108 
ngx_uöt_t
 
Êags
);

110 #i‡(
NGX_HAVE_FILE_AIO
)

111 
ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
);

114 *
ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

115 *
ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

117 
	gï
 = -1;

118 
ïﬁl_evít
 *
	gevít_li°
;

119 
ngx_uöt_t
 
	g√víts
;

121 #i‡(
NGX_HAVE_FILE_AIO
)

123 
	gngx_evítfd
 = -1;

124 
aio_c⁄ãxt_t
 
	gngx_aio_˘x
 = 0;

126 
ngx_evít_t
 
	gngx_evítfd_evít
;

127 
ngx_c⁄√˘i⁄_t
 
	gngx_evítfd_c⁄n
;

131 
ngx_°r_t
 
	gïﬁl_«me
 = 
ngx_°rög
("epoll");

133 
ngx_comm™d_t
 
	gngx_ïﬁl_comm™ds
[] = {

135 { 
ngx_°rög
("epoll_events"),

136 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_c⁄f_£t_num_¶Ÿ
,

139 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
evíts
),

140 
NULL
 },

142 { 
ngx_°rög
("worker_aio_requests"),

143 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_c⁄f_£t_num_¶Ÿ
,

146 
off£tof
(
ngx_ïﬁl_c⁄f_t
, 
aio_ªque°s
),

147 
NULL
 },

149 
ngx_nuŒ_comm™d


153 
ngx_evít_moduÀ_t
 
	gngx_ïﬁl_moduÀ_˘x
 = {

154 &
ïﬁl_«me
,

155 
ngx_ïﬁl_¸óã_c⁄f
,

156 
ngx_ïﬁl_öô_c⁄f
,

159 
ngx_ïﬁl_add_evít
,

160 
ngx_ïﬁl_dñ_evít
,

161 
ngx_ïﬁl_add_evít
,

162 
ngx_ïﬁl_dñ_evít
,

163 
ngx_ïﬁl_add_c⁄√˘i⁄
,

164 
ngx_ïﬁl_dñ_c⁄√˘i⁄
,

165 
NULL
,

166 
ngx_ïﬁl_¥o˚ss_evíts
,

167 
ngx_ïﬁl_öô
,

168 
ngx_ïﬁl_d⁄e
,

172 
ngx_moduÀ_t
 
	gngx_ïﬁl_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_ïﬁl_moduÀ_˘x
,

175 
ngx_ïﬁl_comm™ds
,

176 
NGX_EVENT_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
NULL
,

183 
NULL
,

184 
NGX_MODULE_V1_PADDING


188 #i‡(
NGX_HAVE_FILE_AIO
)

201 
	$io_£tup
(
u_öt
 
ƒ_ªqs
, 
aio_c⁄ãxt_t
 *
˘x
)

203  
	`sysˇŒ
(
SYS_io_£tup
, 
ƒ_ªqs
, 
˘x
);

204 
	}
}

208 
	$io_de°roy
(
aio_c⁄ãxt_t
 
˘x
)

210  
	`sysˇŒ
(
SYS_io_de°roy
, 
˘x
);

211 
	}
}

215 
	$io_gëevíts
(
aio_c⁄ãxt_t
 
˘x
, 
mö_ƒ
, 
ƒ
, 
io_evít
 *
evíts
,

216 
time•ec
 *
tmo
)

218  
	`sysˇŒ
(
SYS_io_gëevíts
, 
˘x
, 
mö_ƒ
, 
ƒ
, 
evíts
, 
tmo
);

219 
	}
}

223 
	$ngx_ïﬁl_aio_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ïﬁl_c⁄f_t
 *
ïcf
)

225 
n
;

226 
ïﬁl_evít
 
ì
;

228 
ngx_evítfd
 = 
	`sysˇŒ
(
SYS_evítfd
, 0);

230 i‡(
ngx_evítfd
 == -1) {

231 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

233 
ngx_fûe_aio
 = 0;

237 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

238 "evítfd: %d", 
ngx_evítfd
);

240 
n
 = 1;

242 i‡(
	`io˘l
(
ngx_evítfd
, 
FIONBIO
, &
n
) == -1) {

243 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

245 
Áûed
;

248 i‡(
	`io_£tup
(
ïcf
->
aio_ªque°s
, &
ngx_aio_˘x
) == -1) {

249 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

251 
Áûed
;

254 
ngx_evítfd_evít
.
d©a
 = &
ngx_evítfd_c⁄n
;

255 
ngx_evítfd_evít
.
h™dÀr
 = 
ngx_ïﬁl_evítfd_h™dÀr
;

256 
ngx_evítfd_evít
.
log
 = 
cy˛e
->log;

257 
ngx_evítfd_evít
.
a˘ive
 = 1;

258 
ngx_evítfd_c⁄n
.
fd
 = 
ngx_evítfd
;

259 
ngx_evítfd_c⁄n
.
ªad
 = &
ngx_evítfd_evít
;

260 
ngx_evítfd_c⁄n
.
log
 = 
cy˛e
->log;

262 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLET
;

263 
ì
.
d©a
.
±r
 = &
ngx_evítfd_c⁄n
;

265 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
ngx_evítfd
, &
ì
) != -1) {

269 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

272 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

277 
Áûed
:

279 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

284 
ngx_evítfd
 = -1;

285 
ngx_aio_˘x
 = 0;

286 
ngx_fûe_aio
 = 0;

287 
	}
}

292 
ngx_öt_t


293 
	$ngx_ïﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

295 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

297 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_ïﬁl_moduÀ
);

299 i‡(
ï
 == -1) {

300 
ï
 = 
	`ïﬁl_¸óã
(
cy˛e
->
c⁄√˘i⁄_n
 / 2);

302 i‡(
ï
 == -1) {

303 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

305  
NGX_ERROR
;

308 #i‡(
NGX_HAVE_FILE_AIO
)

310 
	`ngx_ïﬁl_aio_öô
(
cy˛e
, 
ïcf
);

315 i‡(
√víts
 < 
ïcf
->
evíts
) {

316 i‡(
evít_li°
) {

317 
	`ngx_‰ì
(
evít_li°
);

320 
evít_li°
 = 
	`ngx_Æloc
((
ïﬁl_evít
Ë* 
ïcf
->
evíts
,

321 
cy˛e
->
log
);

322 i‡(
evít_li°
 =
NULL
) {

323  
NGX_ERROR
;

327 
√víts
 = 
ïcf
->
evíts
;

329 
ngx_io
 = 
ngx_os_io
;

331 
ngx_evít_a˘i⁄s
 = 
ngx_ïﬁl_moduÀ_˘x
.
a˘i⁄s
;

333 #i‡(
NGX_HAVE_CLEAR_EVENT
)

334 
ngx_evít_Êags
 = 
NGX_USE_CLEAR_EVENT


336 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT


338 |
NGX_USE_GREEDY_EVENT


339 |
NGX_USE_EPOLL_EVENT
;

341  
NGX_OK
;

342 
	}
}

346 
	$ngx_ïﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

348 i‡(
	`˛o£
(
ï
) == -1) {

349 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

353 
ï
 = -1;

355 #i‡(
NGX_HAVE_FILE_AIO
)

357 i‡(
ngx_evítfd
 != -1) {

359 i‡(
	`io_de°roy
(
ngx_aio_˘x
) == -1) {

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

364 i‡(
	`˛o£
(
ngx_evítfd
) == -1) {

365 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

369 
ngx_evítfd
 = -1;

372 
ngx_aio_˘x
 = 0;

376 
	`ngx_‰ì
(
evít_li°
);

378 
evít_li°
 = 
NULL
;

379 
√víts
 = 0;

380 
	}
}

383 
ngx_öt_t


384 
	$ngx_ïﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

386 
›
;

387 
uöt32_t
 
evíts
, 
¥ev
;

388 
ngx_evít_t
 *
e
;

389 
ngx_c⁄√˘i⁄_t
 *
c
;

390 
ïﬁl_evít
 
ì
;

392 
c
 = 
ev
->
d©a
;

394 
evíts
 = (
uöt32_t
Ë
evít
;

396 i‡(
evít
 =
NGX_READ_EVENT
) {

397 
e
 = 
c
->
wrôe
;

398 
¥ev
 = 
EPOLLOUT
;

399 #i‡(
NGX_READ_EVENT
 !
EPOLLIN
)

400 
evíts
 = 
EPOLLIN
;

404 
e
 = 
c
->
ªad
;

405 
¥ev
 = 
EPOLLIN
;

406 #i‡(
NGX_WRITE_EVENT
 !
EPOLLOUT
)

407 
evíts
 = 
EPOLLOUT
;

411 i‡(
e
->
a˘ive
) {

412 
›
 = 
EPOLL_CTL_MOD
;

413 
evíts
 |
¥ev
;

416 
›
 = 
EPOLL_CTL_ADD
;

419 
ì
.
evíts
 =Évít†| (
uöt32_t
Ë
Êags
;

420 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

422 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

424 
c
->
fd
, 
›
, 
ì
.
evíts
);

426 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

428 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

429  
NGX_ERROR
;

432 
ev
->
a˘ive
 = 1;

434 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

437  
NGX_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_ïﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

444 
›
;

445 
uöt32_t
 
¥ev
;

446 
ngx_evít_t
 *
e
;

447 
ngx_c⁄√˘i⁄_t
 *
c
;

448 
ïﬁl_evít
 
ì
;

456 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

457 
ev
->
a˘ive
 = 0;

458  
NGX_OK
;

461 
c
 = 
ev
->
d©a
;

463 i‡(
evít
 =
NGX_READ_EVENT
) {

464 
e
 = 
c
->
wrôe
;

465 
¥ev
 = 
EPOLLOUT
;

468 
e
 = 
c
->
ªad
;

469 
¥ev
 = 
EPOLLIN
;

472 i‡(
e
->
a˘ive
) {

473 
›
 = 
EPOLL_CTL_MOD
;

474 
ì
.
evíts
 = 
¥ev
 | (
uöt32_t
Ë
Êags
;

475 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | 
ev
->
ö°™˚
);

478 
›
 = 
EPOLL_CTL_DEL
;

479 
ì
.
evíts
 = 0;

480 
ì
.
d©a
.
±r
 = 
NULL
;

483 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

485 
c
->
fd
, 
›
, 
ì
.
evíts
);

487 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

488 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

489 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

490  
NGX_ERROR
;

493 
ev
->
a˘ive
 = 0;

495  
NGX_OK
;

496 
	}
}

499 
ngx_öt_t


500 
	$ngx_ïﬁl_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

502 
ïﬁl_evít
 
ì
;

504 
ì
.
evíts
 = 
EPOLLIN
|
EPOLLOUT
|
EPOLLET
;

505 
ì
.
d©a
.
±r
 = (*Ë((
uöçå_t
Ë
c
 | c->
ªad
->
ö°™˚
);

507 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

508 "ïﬁ»add c⁄√˘i⁄: fd:%dÉv:%08XD", 
c
->
fd
, 
ì
.
evíts
);

510 i‡(
	`ïﬁl_˘l
(
ï
, 
EPOLL_CTL_ADD
, 
c
->
fd
, &
ì
) == -1) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

512 "ïﬁl_˘l(EPOLL_CTL_ADD, %dËÁûed", 
c
->
fd
);

513  
NGX_ERROR
;

516 
c
->
ªad
->
a˘ive
 = 1;

517 
c
->
wrôe
->
a˘ive
 = 1;

519  
NGX_OK
;

520 
	}
}

523 
ngx_öt_t


524 
	$ngx_ïﬁl_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

526 
›
;

527 
ïﬁl_evít
 
ì
;

535 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

536 
c
->
ªad
->
a˘ive
 = 0;

537 
c
->
wrôe
->
a˘ive
 = 0;

538  
NGX_OK
;

541 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

542 "ïﬁ»dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

544 
›
 = 
EPOLL_CTL_DEL
;

545 
ì
.
evíts
 = 0;

546 
ì
.
d©a
.
±r
 = 
NULL
;

548 i‡(
	`ïﬁl_˘l
(
ï
, 
›
, 
c
->
fd
, &
ì
) == -1) {

549 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

550 "ïﬁl_˘l(%d, %dËÁûed", 
›
, 
c
->
fd
);

551  
NGX_ERROR
;

554 
c
->
ªad
->
a˘ive
 = 0;

555 
c
->
wrôe
->
a˘ive
 = 0;

557  
NGX_OK
;

558 
	}
}

561 
ngx_öt_t


562 
	$ngx_ïﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

564 
evíts
;

565 
uöt32_t
 
ªvíts
;

566 
ngx_öt_t
 
ö°™˚
, 
i
;

567 
ngx_uöt_t
 
Àvñ
;

568 
ngx_îr_t
 
îr
;

569 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

570 
ngx_c⁄√˘i⁄_t
 *
c
;

574 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

575 "ïﬁ»timî: %M", 
timî
);

577 
evíts
 = 
	`ïﬁl_waô
(
ï
, 
evít_li°
, (Ë
√víts
, 
timî
);

579 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

581 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

582 
	`ngx_time_upd©e
();

585 i‡(
îr
) {

586 i‡(
îr
 =
NGX_EINTR
) {

588 i‡(
ngx_evít_timî_Æ¨m
) {

589 
ngx_evít_timî_Æ¨m
 = 0;

590  
NGX_OK
;

593 
Àvñ
 = 
NGX_LOG_INFO
;

596 
Àvñ
 = 
NGX_LOG_ALERT
;

599 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "epoll_wait() failed");

600  
NGX_ERROR
;

603 i‡(
evíts
 == 0) {

604 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

605  
NGX_OK
;

608 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

610  
NGX_ERROR
;

613 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

615 
i
 = 0; i < 
evíts
; i++) {

616 
c
 = 
evít_li°
[
i
].
d©a
.
±r
;

618 
ö°™˚
 = (
uöçå_t
Ë
c
 & 1;

619 
c
 = (
ngx_c⁄√˘i⁄_t
 *Ë((
uöçå_t
) c & (uintptr_t) ~1);

621 
ªv
 = 
c
->
ªad
;

623 i‡(
c
->
fd
 =-1 || 
ªv
->
ö°™˚
 != instance) {

630 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

631 "ïﬁl: sèÀÉvíà%p", 
c
);

635 
ªvíts
 = 
evít_li°
[
i
].
evíts
;

637 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

639 
c
->
fd
, 
ªvíts
, 
evít_li°
[
i
].
d©a
.
±r
);

641 i‡(
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
)) {

642 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

644 
c
->
fd
, 
ªvíts
);

648 i‡(
ªvíts
 & ~(
EPOLLIN
|
EPOLLOUT
|
EPOLLERR
|
EPOLLHUP
)) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

651 
c
->
fd
, 
ªvíts
);

655 i‡((
ªvíts
 & (
EPOLLERR
|
EPOLLHUP
))

656 && (
ªvíts
 & (
EPOLLIN
|
EPOLLOUT
)) == 0)

664 
ªvíts
 |
EPOLLIN
|
EPOLLOUT
;

667 i‡((
ªvíts
 & 
EPOLLIN
Ë&& 
ªv
->
a˘ive
) {

669 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

670 
ªv
->
po°ed_ªady
 = 1;

673 
ªv
->
ªady
 = 1;

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

678 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

680 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

683 
ªv
->
	`h™dÀr
(rev);

687 
wev
 = 
c
->
wrôe
;

689 i‡((
ªvíts
 & 
EPOLLOUT
Ë&& 
wev
->
a˘ive
) {

691 i‡(
c
->
fd
 =-1 || 
wev
->
ö°™˚
 != instance) {

698 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

699 "ïﬁl: sèÀÉvíà%p", 
c
);

703 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

704 
wev
->
po°ed_ªady
 = 1;

707 
wev
->
ªady
 = 1;

710 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

711 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

714 
wev
->
	`h™dÀr
(wev);

719 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

721  
NGX_OK
;

722 
	}
}

725 #i‡(
NGX_HAVE_FILE_AIO
)

728 
	$ngx_ïﬁl_evítfd_h™dÀr
(
ngx_evít_t
 *
ev
)

730 
n
, 
evíts
;

731 
i
;

732 
uöt64_t
 
ªady
;

733 
ngx_îr_t
 
îr
;

734 
ngx_evít_t
 *
e
;

735 
ngx_evít_aio_t
 *
aio
;

736 
io_evít
 
evít
[64];

737 
time•ec
 
ts
;

739 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "eventfd handler");

741 
n
 = 
	`ªad
(
ngx_evítfd
, &
ªady
, 8);

743 
îr
 = 
ngx_î∫o
;

745 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "evítfd: %d", 
n
);

747 i‡(
n
 != 8) {

748 i‡(
n
 == -1) {

749 i‡(
îr
 =
NGX_EAGAIN
) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
îr
, "read(eventfd) failed");

757 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

758 "ªad”vítfdËªtu∫ed o∆y %d byãs", 
n
);

762 
ts
.
tv_£c
 = 0;

763 
ts
.
tv_n£c
 = 0;

765 
ªady
) {

767 
evíts
 = 
	`io_gëevíts
(
ngx_aio_˘x
, 1, 64, 
evít
, &
ts
);

769 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

770 "io_gëevíts: %l", 
evíts
);

772 i‡(
evíts
 > 0) {

773 
ªady
 -
evíts
;

775 
i
 = 0; i < 
evíts
; i++) {

777 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

779 
evít
[
i
].
d©a
,Évít[i].
obj
,

780 
evít
[
i
].
ªs
,Évít[i].
ªs2
);

782 
e
 = (
ngx_evít_t
 *Ë(
uöçå_t
Ë
evít
[
i
].
d©a
;

784 
e
->
com∂ëe
 = 1;

785 
e
->
a˘ive
 = 0;

786 
e
->
ªady
 = 1;

788 
aio
 = 
e
->
d©a
;

789 
aio
->
ªs
 = 
evít
[
i
].res;

791 
	`ngx_po°_evít
(
e
, &
ngx_po°ed_evíts
);

797 i‡(
evíts
 == 0) {

802 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

806 
	}
}

812 
	$ngx_ïﬁl_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

814 
ngx_ïﬁl_c⁄f_t
 *
ïcf
;

816 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_ïﬁl_c⁄f_t
));

817 i‡(
ïcf
 =
NULL
) {

818  
NULL
;

821 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

822 
ïcf
->
aio_ªque°s
 = 
NGX_CONF_UNSET
;

824  
ïcf
;

825 
	}
}

829 
	$ngx_ïﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

831 
ngx_ïﬁl_c⁄f_t
 *
ïcf
 = 
c⁄f
;

833 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 512);

834 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
aio_ªque°s
, 32);

836  
NGX_CONF_OK
;

837 
	}
}

	@src/event/modules/ngx_eventport_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_EVENTPORT
)

15 
	#ush‹t_t
 
u_sh‹t


	)

16 
	#uöt_t
 
u_öt


	)

18 #i‚de‡
CLOCK_REALTIME


19 
	#CLOCK_REALTIME
 0

	)

20 
	t˛ockid_t
;

21 * 
	ttimî_t
;

26 
	#PORT_SOURCE_AIO
 1

	)

27 
	#PORT_SOURCE_TIMER
 2

	)

28 
	#PORT_SOURCE_USER
 3

	)

29 
	#PORT_SOURCE_FD
 4

	)

30 
	#PORT_SOURCE_ALERT
 5

	)

31 
	#PORT_SOURCE_MQ
 6

	)

33 #i‚de‡
ETIME


34 
	#ETIME
 64

	)

37 
	#SIGEV_PORT
 4

	)

40 
	mp‹ãv_evíts
;

41 
ush‹t_t
 
	mp‹ãv_sour˚
;

42 
ush‹t_t
 
	mp‹ãv_∑d
;

43 
uöçå_t
 
	mp‹ãv_obje˘
;

44 *
	mp‹ãv_u£r
;

45 } 
	tp‹t_evít_t
;

47 
	sp‹t_nŸify
 {

48 
	mp‹äfy_p‹t
;

49 *
	mp‹äfy_u£r
;

50 } 
	tp‹t_nŸify_t
;

52 #i‡(
__FªeBSD_vîsi⁄
 < 700005)

54 
	sôimî•ec
 {

55 
time•ec
 
	mô_öãrvÆ
;

56 
time•ec
 
	mô_vÆue
;

57 } 
	tôimî•ec_t
;

61 
p‹t_¸óã
();

63 
	$p‹t_¸óã
()

66 
	}
}

69 
p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

70 *
u£r
);

72 
	$p‹t_assocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
, 
evíts
,

73 *
u£r
)

76 
	}
}

79 
p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
);

81 
	$p‹t_dissocüã
(
p‹t
, 
sour˚
, 
uöçå_t
 
obje˘
)

84 
	}
}

87 
p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

88 
time•ec
 *
timeout
);

90 
	$p‹t_gën
(
p‹t
, 
p‹t_evít_t
 
li°
[], 
uöt_t
 
max
, uöt_à*
ngë
,

91 
time•ec
 *
timeout
)

94 
	}
}

97 
timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
);

99 
	$timî_¸óã
(
˛ockid_t
 
˛ock_id
, 
sigevít
 *
evp
, 
timî_t
 *
timîid
)

102 
	}
}

105 
timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

106 
ôimî•ec
 *
ovÆue
);

108 
	$timî_£âime
(
timî_t
 
timîid
, 
Êags
, c⁄° 
ôimî•ec
 *
vÆue
,

109 
ôimî•ec
 *
ovÆue
)

112 
	}
}

115 
timî_dñëe
(
timî_t
 
timîid
);

117 
	$timî_dñëe
(
timî_t
 
timîid
)

120 
	}
}

126 
ngx_uöt_t
 
	mevíts
;

127 } 
	tngx_evíç‹t_c⁄f_t
;

130 
ngx_öt_t
 
ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

131 
ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

132 
ngx_öt_t
 
ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

133 
ngx_uöt_t
 
Êags
);

134 
ngx_öt_t
 
ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

135 
ngx_uöt_t
 
Êags
);

136 
ngx_öt_t
 
ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

137 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

139 *
ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

140 *
ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

142 
	gï
 = -1;

143 
p‹t_evít_t
 *
	gevít_li°
;

144 
ngx_uöt_t
 
	g√víts
;

145 
timî_t
 
	gevít_timî
 = (timer_t) -1;

147 
ngx_°r_t
 
	gevíç‹t_«me
 = 
ngx_°rög
("eventport");

150 
ngx_comm™d_t
 
	gngx_evíç‹t_comm™ds
[] = {

152 { 
ngx_°rög
("eventport_events"),

153 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

154 
ngx_c⁄f_£t_num_¶Ÿ
,

156 
off£tof
(
ngx_evíç‹t_c⁄f_t
, 
evíts
),

157 
NULL
 },

159 
ngx_nuŒ_comm™d


163 
ngx_evít_moduÀ_t
 
	gngx_evíç‹t_moduÀ_˘x
 = {

164 &
evíç‹t_«me
,

165 
ngx_evíç‹t_¸óã_c⁄f
,

166 
ngx_evíç‹t_öô_c⁄f
,

169 
ngx_evíç‹t_add_evít
,

170 
ngx_evíç‹t_dñ_evít
,

171 
ngx_evíç‹t_add_evít
,

172 
ngx_evíç‹t_dñ_evít
,

173 
NULL
,

174 
NULL
,

175 
NULL
,

176 
ngx_evíç‹t_¥o˚ss_evíts
,

177 
ngx_evíç‹t_öô
,

178 
ngx_evíç‹t_d⁄e
,

183 
ngx_moduÀ_t
 
	gngx_evíç‹t_moduÀ
 = {

184 
NGX_MODULE_V1
,

185 &
ngx_evíç‹t_moduÀ_˘x
,

186 
ngx_evíç‹t_comm™ds
,

187 
NGX_EVENT_MODULE
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NGX_MODULE_V1_PADDING


199 
ngx_öt_t


200 
	$ngx_evíç‹t_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

202 
p‹t_nŸify_t
 
≤
;

203 
ôimî•ec
 
ôs
;

204 
sigevít
 
£v
;

205 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

207 
ïcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíç‹t_moduÀ
);

209 i‡(
ï
 == -1) {

210 
ï
 = 
	`p‹t_¸óã
();

212 i‡(
ï
 == -1) {

213 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

215  
NGX_ERROR
;

219 i‡(
√víts
 < 
ïcf
->
evíts
) {

220 i‡(
evít_li°
) {

221 
	`ngx_‰ì
(
evít_li°
);

224 
evít_li°
 = 
	`ngx_Æloc
((
p‹t_evít_t
Ë* 
ïcf
->
evíts
,

225 
cy˛e
->
log
);

226 i‡(
evít_li°
 =
NULL
) {

227  
NGX_ERROR
;

231 
ngx_evít_Êags
 = 
NGX_USE_EVENTPORT_EVENT
;

233 i‡(
timî
) {

234 
	`ngx_memzîo
(&
≤
, (
p‹t_nŸify_t
));

235 
≤
.
p‹äfy_p‹t
 = 
ï
;

237 
	`ngx_memzîo
(&
£v
, (
sigevít
));

238 
£v
.
sigev_nŸify
 = 
SIGEV_PORT
;

239 #i‡!(
NGX_TEST_BUILD_EVENTPORT
)

240 
£v
.
sigev_vÆue
.
sivÆ_±r
 = &
≤
;

243 i‡(
	`timî_¸óã
(
CLOCK_REALTIME
, &
£v
, &
evít_timî
) == -1) {

244 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

246  
NGX_ERROR
;

249 
ôs
.
ô_öãrvÆ
.
tv_£c
 = 
timî
 / 1000;

250 
ôs
.
ô_öãrvÆ
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

251 
ôs
.
ô_vÆue
.
tv_£c
 = 
timî
 / 1000;

252 
ôs
.
ô_vÆue
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

254 i‡(
	`timî_£âime
(
evít_timî
, 0, &
ôs
, 
NULL
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

260 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

263 
√víts
 = 
ïcf
->
evíts
;

265 
ngx_io
 = 
ngx_os_io
;

267 
ngx_evít_a˘i⁄s
 = 
ngx_evíç‹t_moduÀ_˘x
.
a˘i⁄s
;

269  
NGX_OK
;

270 
	}
}

274 
	$ngx_evíç‹t_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

276 i‡(
evít_timî
 !(
timî_t
) -1) {

277 i‡(
	`timî_dñëe
(
evít_timî
) == -1) {

278 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

282 
evít_timî
 = (
timî_t
) -1;

285 i‡(
	`˛o£
(
ï
) == -1) {

286 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

290 
ï
 = -1;

292 
	`ngx_‰ì
(
evít_li°
);

294 
evít_li°
 = 
NULL
;

295 
√víts
 = 0;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_evíç‹t_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

302 
ngx_öt_t
 
evíts
, 
¥ev
;

303 
ngx_evít_t
 *
e
;

304 
ngx_c⁄√˘i⁄_t
 *
c
;

306 
c
 = 
ev
->
d©a
;

308 
evíts
 = 
evít
;

310 i‡(
evít
 =
NGX_READ_EVENT
) {

311 
e
 = 
c
->
wrôe
;

312 
¥ev
 = 
POLLOUT
;

313 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

314 
evíts
 = 
POLLIN
;

318 
e
 = 
c
->
ªad
;

319 
¥ev
 = 
POLLIN
;

320 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

321 
evíts
 = 
POLLOUT
;

325 i‡(
e
->
⁄eshŸ
) {

326 
evíts
 |
¥ev
;

329 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

330 "evíç‹àaddÉvít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evíts
);

332 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evíts
,

333 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

336 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

338  
NGX_ERROR
;

341 
ev
->
a˘ive
 = 1;

342 
ev
->
⁄eshŸ
 = 1;

344  
NGX_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_evíç‹t_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

351 
ngx_evít_t
 *
e
;

352 
ngx_c⁄√˘i⁄_t
 *
c
;

360 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

361 
ev
->
a˘ive
 = 0;

362 
ev
->
⁄eshŸ
 = 0;

363  
NGX_OK
;

366 
c
 = 
ev
->
d©a
;

368 i‡(
evít
 =
NGX_READ_EVENT
) {

369 
e
 = 
c
->
wrôe
;

370 
evít
 = 
POLLOUT
;

373 
e
 = 
c
->
ªad
;

374 
evít
 = 
POLLIN
;

377 i‡(
e
->
⁄eshŸ
) {

378 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

379 "evíç‹àch™gêevít: fd:%dÉv:%04Xi", 
c
->
fd
, 
evít
);

381 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
evít
,

382 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

385 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

387  
NGX_ERROR
;

391 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

392 "evíç‹àdñÉvít: fd:%d", 
c
->
fd
);

394 i‡(
	`p‹t_dissocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
) == -1) {

395 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

397  
NGX_ERROR
;

401 
ev
->
a˘ive
 = 0;

402 
ev
->
⁄eshŸ
 = 0;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_evíç‹t_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

410 
ngx_uöt_t
 
Êags
)

412 
n
, 
ªvíts
;

413 
u_öt
 
evíts
;

414 
ngx_îr_t
 
îr
;

415 
ngx_öt_t
 
ö°™˚
;

416 
ngx_uöt_t
 
i
, 
Àvñ
;

417 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
, **
queue
;

418 
ngx_c⁄√˘i⁄_t
 *
c
;

419 
time•ec
 
ts
, *
ç
;

421 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

422 
ç
 = 
NULL
;

425 
ts
.
tv_£c
 = 
timî
 / 1000;

426 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

427 
ç
 = &
ts
;

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

431 "evíç‹àtimî: %M", 
timî
);

433 
evíts
 = 1;

435 
n
 = 
	`p‹t_gën
(
ï
, 
evít_li°
, (
u_öt
Ë
√víts
, &
evíts
, 
ç
);

437 
îr
 = 
ngx_î∫o
;

439 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

440 
	`ngx_time_upd©e
();

443 i‡(
n
 == -1) {

444 i‡(
îr
 =
ETIME
) {

445 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

446  
NGX_OK
;

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

451  
NGX_ERROR
;

454 
Àvñ
 = (
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
;

455 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "port_getn() failed");

456  
NGX_ERROR
;

459 i‡(
evíts
 == 0) {

460 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

461  
NGX_OK
;

464 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

466  
NGX_ERROR
;

469 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

471 
i
 = 0; i < 
evíts
; i++) {

473 i‡(
evít_li°
[
i
].
p‹ãv_sour˚
 =
PORT_SOURCE_TIMER
) {

474 
	`ngx_time_upd©e
();

478 
ev
 = 
evít_li°
[
i
].
p‹ãv_u£r
;

480 
evít_li°
[
i
].
p‹ãv_sour˚
) {

482 
PORT_SOURCE_FD
:

484 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

485 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

487 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

494 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

495 "evíç‹t: sèÀÉvíà%p", 
ev
);

499 
ªvíts
 = 
evít_li°
[
i
].
p‹ãv_evíts
;

501 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

503 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

505 i‡(
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

506 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

508 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

511 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

512 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

514 
evít_li°
[
i
].
p‹ãv_obje˘
, 
ªvíts
);

517 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

518 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

526 
ªvíts
 |
POLLIN
|
POLLOUT
;

529 
c
 = 
ev
->
d©a
;

530 
ªv
 = 
c
->
ªad
;

531 
wev
 = 
c
->
wrôe
;

533 
ªv
->
a˘ive
 = 0;

534 
wev
->
a˘ive
 = 0;

536 i‡(
ªvíts
 & 
POLLIN
) {

538 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

539 
ªv
->
po°ed_ªady
 = 1;

542 
ªv
->
ªady
 = 1;

545 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

546 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

547 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

549 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

552 
ªv
->
	`h™dÀr
(rev);

554 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

559 i‡(
ªv
->
ac˚±
) {

560 i‡(
ngx_u£_ac˚±_muãx
) {

561 
ngx_ac˚±_evíts
 = 1;

565 i‡(
	`p‹t_assocüã
(
ï
, 
PORT_SOURCE_FD
, 
c
->
fd
, 
POLLIN
,

566 (*Ë((
uöçå_t
Ë
ev
 |Év->
ö°™˚
))

569 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

571  
NGX_ERROR
;

576 i‡(
ªvíts
 & 
POLLOUT
) {

578 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

579 
wev
->
po°ed_ªady
 = 1;

582 
wev
->
ªady
 = 1;

585 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

586 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

589 
wev
->
	`h™dÀr
(wev);

596 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

598 
evít_li°
[
i
].
p‹ãv_obje˘
);

603 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

605  
NGX_OK
;

606 
	}
}

610 
	$ngx_evíç‹t_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

612 
ngx_evíç‹t_c⁄f_t
 *
ïcf
;

614 
ïcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evíç‹t_c⁄f_t
));

615 i‡(
ïcf
 =
NULL
) {

616  
NULL
;

619 
ïcf
->
evíts
 = 
NGX_CONF_UNSET
;

621  
ïcf
;

622 
	}
}

626 
	$ngx_evíç‹t_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

628 
ngx_evíç‹t_c⁄f_t
 *
ïcf
 = 
c⁄f
;

630 
	`ngx_c⁄f_öô_uöt_vÆue
(
ïcf
->
evíts
, 32);

632  
NGX_CONF_OK
;

633 
	}
}

	@src/event/modules/ngx_kqueue_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mch™ges
;

15 
ngx_uöt_t
 
	mevíts
;

16 } 
	tngx_kqueue_c⁄f_t
;

19 
ngx_öt_t
 
ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

20 
ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_öt_t
 
ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

22 
ngx_uöt_t
 
Êags
);

23 
ngx_öt_t
 
ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

24 
ngx_uöt_t
 
Êags
);

25 
ngx_öt_t
 
ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
fûãr
,

26 
ngx_uöt_t
 
Êags
);

27 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
);

28 
ngx_öt_t
 
ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

29 
ngx_uöt_t
 
Êags
);

30 
ngx_ölöe
 
ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
,

31 
kevít
 *
kev
);

33 *
ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

34 *
ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

37 
	gngx_kqueue
 = -1;

47 
kevít
 *
	gch™ge_li°
, *
	gch™ge_li°0
, *
	gch™ge_li°1
;

48 
kevít
 *
	gevít_li°
;

49 
ngx_uöt_t
 
	gmax_ch™ges
, 
	gnch™ges
, 
	g√víts
;

51 #i‡(
NGX_THREADS
)

52 
ngx_muãx_t
 *
	gli°_muãx
;

53 
ngx_muãx_t
 *
	gkevít_muãx
;

58 
ngx_°r_t
 
	gkqueue_«me
 = 
ngx_°rög
("kqueue");

60 
ngx_comm™d_t
 
	gngx_kqueue_comm™ds
[] = {

62 { 
ngx_°rög
("kqueue_changes"),

63 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

64 
ngx_c⁄f_£t_num_¶Ÿ
,

66 
off£tof
(
ngx_kqueue_c⁄f_t
, 
ch™ges
),

67 
NULL
 },

69 { 
ngx_°rög
("kqueue_events"),

70 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

71 
ngx_c⁄f_£t_num_¶Ÿ
,

73 
off£tof
(
ngx_kqueue_c⁄f_t
, 
evíts
),

74 
NULL
 },

76 
ngx_nuŒ_comm™d


80 
ngx_evít_moduÀ_t
 
	gngx_kqueue_moduÀ_˘x
 = {

81 &
kqueue_«me
,

82 
ngx_kqueue_¸óã_c⁄f
,

83 
ngx_kqueue_öô_c⁄f
,

86 
ngx_kqueue_add_evít
,

87 
ngx_kqueue_dñ_evít
,

88 
ngx_kqueue_add_evít
,

89 
ngx_kqueue_dñ_evít
,

90 
NULL
,

91 
NULL
,

92 
ngx_kqueue_¥o˚ss_ch™ges
,

93 
ngx_kqueue_¥o˚ss_evíts
,

94 
ngx_kqueue_öô
,

95 
ngx_kqueue_d⁄e


100 
ngx_moduÀ_t
 
	gngx_kqueue_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_kqueue_moduÀ_˘x
,

103 
ngx_kqueue_comm™ds
,

104 
NGX_EVENT_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_öt_t


117 
	$ngx_kqueue_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

119 
ngx_kqueue_c⁄f_t
 *
kcf
;

120 
time•ec
 
ts
;

121 #i‡(
NGX_HAVE_TIMER_EVENT
)

122 
kevít
 
kev
;

125 
kcf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_kqueue_moduÀ
);

127 i‡(
ngx_kqueue
 == -1) {

128 
ngx_kqueue
 = 
	`kqueue
();

130 i‡(
ngx_kqueue
 == -1) {

131 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

133  
NGX_ERROR
;

136 #i‡(
NGX_THREADS
)

138 
li°_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

139 i‡(
li°_muãx
 =
NULL
) {

140  
NGX_ERROR
;

143 
kevít_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

144 i‡(
kevít_muãx
 =
NULL
) {

145  
NGX_ERROR
;

151 i‡(
max_ch™ges
 < 
kcf
->
ch™ges
) {

152 i‡(
nch™ges
) {

153 
ts
.
tv_£c
 = 0;

154 
ts
.
tv_n£c
 = 0;

156 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

161  
NGX_ERROR
;

163 
nch™ges
 = 0;

166 i‡(
ch™ge_li°0
) {

167 
	`ngx_‰ì
(
ch™ge_li°0
);

170 
ch™ge_li°0
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

171 
cy˛e
->
log
);

172 i‡(
ch™ge_li°0
 =
NULL
) {

173  
NGX_ERROR
;

176 i‡(
ch™ge_li°1
) {

177 
	`ngx_‰ì
(
ch™ge_li°1
);

180 
ch™ge_li°1
 = 
	`ngx_Æloc
(
kcf
->
ch™ges
 * (
kevít
),

181 
cy˛e
->
log
);

182 i‡(
ch™ge_li°1
 =
NULL
) {

183  
NGX_ERROR
;

186 
ch™ge_li°
 = 
ch™ge_li°0
;

189 
max_ch™ges
 = 
kcf
->
ch™ges
;

191 i‡(
√víts
 < 
kcf
->
evíts
) {

192 i‡(
evít_li°
) {

193 
	`ngx_‰ì
(
evít_li°
);

196 
evít_li°
 = 
	`ngx_Æloc
(
kcf
->
evíts
 * (
kevít
), 
cy˛e
->
log
);

197 i‡(
evít_li°
 =
NULL
) {

198  
NGX_ERROR
;

202 
ngx_evít_Êags
 = 
NGX_USE_ONESHOT_EVENT


203 |
NGX_USE_KQUEUE_EVENT


204 |
NGX_USE_VNODE_EVENT
;

206 #i‡(
NGX_HAVE_TIMER_EVENT
)

208 i‡(
timî
) {

209 
kev
.
idít
 = 0;

210 
kev
.
fûãr
 = 
EVFILT_TIMER
;

211 
kev
.
Êags
 = 
EV_ADD
|
EV_ENABLE
;

212 
kev
.
fÊags
 = 0;

213 
kev
.
d©a
 = 
timî
;

214 
kev
.
ud©a
 = 0;

216 
ts
.
tv_£c
 = 0;

217 
ts
.
tv_n£c
 = 0;

219 i‡(
	`kevít
(
ngx_kqueue
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

220 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

222  
NGX_ERROR
;

225 
ngx_evít_Êags
 |
NGX_USE_TIMER_EVENT
;

230 #i‡(
NGX_HAVE_CLEAR_EVENT
)

231 
ngx_evít_Êags
 |
NGX_USE_CLEAR_EVENT
;

233 
ngx_evít_Êags
 |
NGX_USE_LEVEL_EVENT
;

236 #i‡(
NGX_HAVE_LOWAT_EVENT
)

237 
ngx_evít_Êags
 |
NGX_USE_LOWAT_EVENT
;

240 
√víts
 = 
kcf
->
evíts
;

242 
ngx_io
 = 
ngx_os_io
;

244 
ngx_evít_a˘i⁄s
 = 
ngx_kqueue_moduÀ_˘x
.
a˘i⁄s
;

246  
NGX_OK
;

247 
	}
}

251 
	$ngx_kqueue_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

253 i‡(
	`˛o£
(
ngx_kqueue
) == -1) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

258 
ngx_kqueue
 = -1;

260 #i‡(
NGX_THREADS
)

261 
	`ngx_muãx_de°roy
(
kevít_muãx
);

262 
	`ngx_muãx_de°roy
(
li°_muãx
);

265 
	`ngx_‰ì
(
ch™ge_li°1
);

266 
	`ngx_‰ì
(
ch™ge_li°0
);

267 
	`ngx_‰ì
(
evít_li°
);

269 
ch™ge_li°1
 = 
NULL
;

270 
ch™ge_li°0
 = 
NULL
;

271 
ch™ge_li°
 = 
NULL
;

272 
evít_li°
 = 
NULL
;

273 
max_ch™ges
 = 0;

274 
nch™ges
 = 0;

275 
√víts
 = 0;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_kqueue_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

282 
ngx_öt_t
 
rc
;

284 
ngx_evít_t
 *
e
;

285 
ngx_c⁄√˘i⁄_t
 *
c
;

288 
ev
->
a˘ive
 = 1;

289 
ev
->
dißbÀd
 = 0;

290 
ev
->
⁄eshŸ
 = (
Êags
 & 
NGX_ONESHOT_EVENT
) ? 1 : 0;

292 
	`ngx_muãx_lock
(
li°_muãx
);

296 i‡(
ev
->
ödex
 < 
nch™ges


297 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

298 =(
uöçå_t
Ë
ev
)

300 i‡(
ch™ge_li°
[
ev
->
ödex
].
Êags
 =
EV_DISABLE
) {

307 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

309 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

311 i‡(
ev
->
ödex
 < --
nch™ges
) {

312 
e
 = (
ngx_evít_t
 *)

313 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

314 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

315 
e
->
ödex
 = 
ev
->index;

318 
	`ngx_muãx_u∆ock
(
li°_muãx
);

320  
NGX_OK
;

323 
c
 = 
ev
->
d©a
;

325 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

326 "¥eviou†evíà⁄ #%d wîênŸÖas£d i¿kî√l", 
c
->
fd
);

328 
	`ngx_muãx_u∆ock
(
li°_muãx
);

330  
NGX_ERROR
;

335 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
EV_ADD
|
EV_ENABLE
|
Êags
);

337 
	`ngx_muãx_u∆ock
(
li°_muãx
);

339  
rc
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_kqueue_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

346 
ngx_öt_t
 
rc
;

347 
ngx_evít_t
 *
e
;

349 
ev
->
a˘ive
 = 0;

350 
ev
->
dißbÀd
 = 0;

352 
	`ngx_muãx_lock
(
li°_muãx
);

354 i‡(
ev
->
ödex
 < 
nch™ges


355 && ((
uöçå_t
Ë
ch™ge_li°
[
ev
->
ödex
].
ud©a
 & (uintptr_t) ~1)

356 =(
uöçå_t
Ë
ev
)

358 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

360 
	`ngx_evít_idít
(
ev
->
d©a
), 
evít
);

364 
nch™ges
--;

366 i‡(
ev
->
ödex
 < 
nch™ges
) {

367 
e
 = (
ngx_evít_t
 *)

368 ((
uöçå_t
Ë
ch™ge_li°
[
nch™ges
].
ud©a
 & (uintptr_t) ~1);

369 
ch™ge_li°
[
ev
->
ödex
] = ch™ge_li°[
nch™ges
];

370 
e
->
ödex
 = 
ev
->index;

373 
	`ngx_muãx_u∆ock
(
li°_muãx
);

375  
NGX_OK
;

384 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

385 
	`ngx_muãx_u∆ock
(
li°_muãx
);

386  
NGX_OK
;

389 i‡(
Êags
 & 
NGX_DISABLE_EVENT
) {

390 
ev
->
dißbÀd
 = 1;

393 
Êags
 |
EV_DELETE
;

396 
rc
 = 
	`ngx_kqueue_£t_evít
(
ev
, 
evít
, 
Êags
);

398 
	`ngx_muãx_u∆ock
(
li°_muãx
);

400  
rc
;

401 
	}
}

404 
ngx_öt_t


405 
	$ngx_kqueue_£t_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
fûãr
, 
ngx_uöt_t
 
Êags
)

407 
kevít
 *
kev
;

408 
time•ec
 
ts
;

409 
ngx_c⁄√˘i⁄_t
 *
c
;

411 
c
 = 
ev
->
d©a
;

413 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

415 
c
->
fd
, 
fûãr
, 
Êags
);

417 i‡(
nch™ges
 >
max_ch™ges
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
ev
->
log
, 0,

421 
ts
.
tv_£c
 = 0;

422 
ts
.
tv_n£c
 = 0;

424 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

427 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

428  
NGX_ERROR
;

431 
nch™ges
 = 0;

434 
kev
 = &
ch™ge_li°
[
nch™ges
];

436 
kev
->
idít
 = 
c
->
fd
;

437 
kev
->
fûãr
 = () filter;

438 
kev
->
Êags
 = (
u_sh‹t
) flags;

439 
kev
->
ud©a
 = 
	`NGX_KQUEUE_UDATA_T
 ((
uöçå_t
Ë
ev
 |Év->
ö°™˚
);

441 i‡(
fûãr
 =
EVFILT_VNODE
) {

442 
kev
->
fÊags
 = 
NOTE_DELETE
|
NOTE_WRITE
|
NOTE_EXTEND


443 |
NOTE_ATTRIB
|
NOTE_RENAME


444 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 430000) \

445 || 
__FªeBSD_vîsi⁄
 >= 500018

446 |
NOTE_REVOKE


449 
kev
->
d©a
 = 0;

452 #i‡(
NGX_HAVE_LOWAT_EVENT
)

453 i‡(
Êags
 & 
NGX_LOWAT_EVENT
) {

454 
kev
->
fÊags
 = 
NOTE_LOWAT
;

455 
kev
->
d©a
 = 
ev
->
avaûabÀ
;

458 
kev
->
fÊags
 = 0;

459 
kev
->
d©a
 = 0;

462 
kev
->
fÊags
 = 0;

463 
kev
->
d©a
 = 0;

467 
ev
->
ödex
 = 
nch™ges
;

468 
nch™ges
++;

470 i‡(
Êags
 & 
NGX_FLUSH_EVENT
) {

471 
ts
.
tv_£c
 = 0;

472 
ts
.
tv_n£c
 = 0;

474 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "kevent flush");

476 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, (Ë
nch™ges
, 
NULL
, 0, &
ts
)

479 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
, "kevent() failed");

480  
NGX_ERROR
;

483 
nch™ges
 = 0;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_kqueue_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

492 
ngx_uöt_t
 
Êags
)

494 
evíts
, 
n
;

495 
ngx_öt_t
 
i
, 
ö°™˚
;

496 
ngx_uöt_t
 
Àvñ
;

497 
ngx_îr_t
 
îr
;

498 
ngx_evít_t
 *
ev
, **
queue
;

499 
time•ec
 
ts
, *
ç
;

501 i‡(
ngx_thªaded
) {

502 i‡(
	`ngx_kqueue_¥o˚ss_ch™ges
(
cy˛e
, 0Ë=
NGX_ERROR
) {

503  
NGX_ERROR
;

506 
n
 = 0;

509 
n
 = (Ë
nch™ges
;

510 
nch™ges
 = 0;

513 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

514 
ç
 = 
NULL
;

518 
ts
.
tv_£c
 = 
timî
 / 1000;

519 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

527 #i‡(
NGX_DARWIN_KEVENT_BUG
)

528 
ts
.
tv_n£c
 <<= 32;

531 
ç
 = &
ts
;

534 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

535 "kevíàtimî: %M, ch™ges: %d", 
timî
, 
n
);

537 
evíts
 = 
	`kevít
(
ngx_kqueue
, 
ch™ge_li°
, 
n
, 
evít_li°
, (Ë
√víts
, 
ç
);

539 
îr
 = (
evíts
 =-1Ë? 
ngx_î∫o
 : 0;

541 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

542 
	`ngx_time_upd©e
();

545 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

546 "kevíàevíts: %d", 
evíts
);

548 i‡(
îr
) {

549 i‡(
îr
 =
NGX_EINTR
) {

551 i‡(
ngx_evít_timî_Æ¨m
) {

552 
ngx_evít_timî_Æ¨m
 = 0;

553  
NGX_OK
;

556 
Àvñ
 = 
NGX_LOG_INFO
;

559 
Àvñ
 = 
NGX_LOG_ALERT
;

562 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "kevent() failed");

563  
NGX_ERROR
;

566 i‡(
evíts
 == 0) {

567 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

568  
NGX_OK
;

571 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

573  
NGX_ERROR
;

576 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

578 
i
 = 0; i < 
evíts
; i++) {

580 
	`ngx_kqueue_dump_evít
(
cy˛e
->
log
, &
evít_li°
[
i
]);

582 i‡(
evít_li°
[
i
].
Êags
 & 
EV_ERROR
) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
evít_li°
[
i
].
d©a
,

585 
evít_li°
[
i
].
idít
,Évít_li°[i].
fûãr
,

586 
evít_li°
[
i
].
Êags
);

590 #i‡(
NGX_HAVE_TIMER_EVENT
)

592 i‡(
evít_li°
[
i
].
fûãr
 =
EVFILT_TIMER
) {

593 
	`ngx_time_upd©e
();

599 
ev
 = (
ngx_evít_t
 *Ë
evít_li°
[
i
].
ud©a
;

601 
evít_li°
[
i
].
fûãr
) {

603 
EVFILT_READ
:

604 
EVFILT_WRITE
:

606 
ö°™˚
 = (
uöçå_t
Ë
ev
 & 1;

607 
ev
 = (
ngx_evít_t
 *Ë((
uöçå_t
)Év & (uintptr_t) ~1);

609 i‡(
ev
->
˛o£d
 ||Év->
ö°™˚
 != instance) {

616 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

617 "kevít: sèÀÉvíà%p", 
ev
);

621 i‡(
ev
->
log
 && (ev->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) {

622 
	`ngx_kqueue_dump_evít
(
ev
->
log
, &
evít_li°
[
i
]);

625 i‡(
ev
->
⁄eshŸ
) {

626 
ev
->
a˘ive
 = 0;

629 #i‡(
NGX_THREADS
)

631 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

632 
ev
->
po°ed_ªady
 = 1;

633 
ev
->
po°ed_avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

635 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

636 
ev
->
po°ed_eof
 = 1;

637 
ev
->
po°ed_î∫o
 = 
evít_li°
[
i
].
fÊags
;

640 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

647 
ev
->
avaûabÀ
 = 
evít_li°
[
i
].
d©a
;

649 i‡(
evít_li°
[
i
].
Êags
 & 
EV_EOF
) {

650 
ev
->
≥ndög_eof
 = 1;

651 
ev
->
kq_î∫o
 = 
evít_li°
[
i
].
fÊags
;

654 
ev
->
ªady
 = 1;

658 
EVFILT_VNODE
:

659 
ev
->
kq_vnode
 = 1;

663 
EVFILT_AIO
:

664 
ev
->
com∂ëe
 = 1;

665 
ev
->
ªady
 = 1;

670 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

672 
evít_li°
[
i
].
fûãr
);

676 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

677 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

678 &
ngx_po°ed_evíts
);

679 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

684 
ev
->
	`h™dÀr
(ev);

687 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

689  
NGX_OK
;

690 
	}
}

693 
ngx_öt_t


694 
	$ngx_kqueue_¥o˚ss_ch™ges
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
åy
)

696 
n
;

697 
ngx_öt_t
 
rc
;

698 
ngx_îr_t
 
îr
;

699 
time•ec
 
ts
;

700 
kevít
 *
ch™ges
;

702 
	`ngx_muãx_lock
(
kevít_muãx
);

704 
	`ngx_muãx_lock
(
li°_muãx
);

706 i‡(
nch™ges
 == 0) {

707 
	`ngx_muãx_u∆ock
(
li°_muãx
);

708 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

709  
NGX_OK
;

712 
ch™ges
 = 
ch™ge_li°
;

713 i‡(
ch™ge_li°
 =
ch™ge_li°0
) {

714 
ch™ge_li°
 = 
ch™ge_li°1
;

716 
ch™ge_li°
 = 
ch™ge_li°0
;

719 
n
 = (Ë
nch™ges
;

720 
nch™ges
 = 0;

722 
	`ngx_muãx_u∆ock
(
li°_muãx
);

724 
ts
.
tv_£c
 = 0;

725 
ts
.
tv_n£c
 = 0;

727 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

728 "kevíàch™ges: %d", 
n
);

730 i‡(
	`kevít
(
ngx_kqueue
, 
ch™ges
, 
n
, 
NULL
, 0, &
ts
) == -1) {

731 
îr
 = 
ngx_î∫o
;

732 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

733 
cy˛e
->
log
, 
îr
, "kevent() failed");

734 
rc
 = 
NGX_ERROR
;

737 
rc
 = 
NGX_OK
;

740 
	`ngx_muãx_u∆ock
(
kevít_muãx
);

742  
rc
;

743 
	}
}

746 
ngx_ölöe
 

747 
	$ngx_kqueue_dump_evít
(
ngx_log_t
 *
log
, 
kevít
 *
kev
)

749 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

750 (
kev
->
idít
 > 0x8000000 && kev->ident != () -1) ?

753 
kev
->
idít
, kev->
fûãr
,

754 
kev
->
Êags
, kev->
fÊags
,

755 
kev
->
d©a
, kev->
ud©a
);

756 
	}
}

760 
	$ngx_kqueue_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

762 
ngx_kqueue_c⁄f_t
 *
kcf
;

764 
kcf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_kqueue_c⁄f_t
));

765 i‡(
kcf
 =
NULL
) {

766  
NULL
;

769 
kcf
->
ch™ges
 = 
NGX_CONF_UNSET
;

770 
kcf
->
evíts
 = 
NGX_CONF_UNSET
;

772  
kcf
;

773 
	}
}

777 
	$ngx_kqueue_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

779 
ngx_kqueue_c⁄f_t
 *
kcf
 = 
c⁄f
;

781 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
ch™ges
, 512);

782 
	`ngx_c⁄f_öô_uöt_vÆue
(
kcf
->
evíts
, 512);

784  
NGX_CONF_OK
;

785 
	}
}

	@src/event/modules/ngx_poll_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 *
ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

24 
pﬁlfd
 *
	gevít_li°
;

25 
ngx_öt_t
 
	g√víts
;

28 
ngx_°r_t
 
	gpﬁl_«me
 = 
ngx_°rög
("poll");

30 
ngx_evít_moduÀ_t
 
	gngx_pﬁl_moduÀ_˘x
 = {

31 &
pﬁl_«me
,

32 
NULL
,

33 
ngx_pﬁl_öô_c⁄f
,

36 
ngx_pﬁl_add_evít
,

37 
ngx_pﬁl_dñ_evít
,

38 
ngx_pﬁl_add_evít
,

39 
ngx_pﬁl_dñ_evít
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
ngx_pﬁl_¥o˚ss_evíts
,

44 
ngx_pﬁl_öô
,

45 
ngx_pﬁl_d⁄e


50 
ngx_moduÀ_t
 
	gngx_pﬁl_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_pﬁl_moduÀ_˘x
,

53 
NULL
,

54 
NGX_EVENT_MODULE
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
ngx_öt_t


68 
	$ngx_pﬁl_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

70 
pﬁlfd
 *
li°
;

72 i‡(
evít_li°
 =
NULL
) {

73 
√víts
 = 0;

76 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


77 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


78 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

80 
li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
cy˛e
->
c⁄√˘i⁄_n
,

81 
cy˛e
->
log
);

82 i‡(
li°
 =
NULL
) {

83  
NGX_ERROR
;

86 i‡(
evít_li°
) {

87 
	`ngx_mem˝y
(
li°
, 
evít_li°
, (
ngx_evít_t
 *Ë* 
√víts
);

88 
	`ngx_‰ì
(
evít_li°
);

91 
evít_li°
 = 
li°
;

94 
ngx_io
 = 
ngx_os_io
;

96 
ngx_evít_a˘i⁄s
 = 
ngx_pﬁl_moduÀ_˘x
.
a˘i⁄s
;

98 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
|
NGX_USE_FD_EVENT
;

100  
NGX_OK
;

101 
	}
}

105 
	$ngx_pﬁl_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

107 
	`ngx_‰ì
(
evít_li°
);

109 
evít_li°
 = 
NULL
;

110 
	}
}

113 
ngx_öt_t


114 
	$ngx_pﬁl_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

116 
ngx_evít_t
 *
e
;

117 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
c
 = 
ev
->
d©a
;

121 
ev
->
a˘ive
 = 1;

123 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

125 "pﬁ»evíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

126  
NGX_OK
;

129 i‡(
evít
 =
NGX_READ_EVENT
) {

130 
e
 = 
c
->
wrôe
;

131 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

132 
evít
 = 
POLLIN
;

136 
e
 = 
c
->
ªad
;

137 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

138 
evít
 = 
POLLOUT
;

142 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

143 "pﬁ»addÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

145 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

146 
evít_li°
[
√víts
].
fd
 = 
c
->fd;

147 
evít_li°
[
√víts
].
evíts
 = (Ë
evít
;

148 
evít_li°
[
√víts
].
ªvíts
 = 0;

150 
ev
->
ödex
 = 
√víts
;

151 
√víts
++;

154 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

155 "pﬁ»add index: %i", 
e
->
ödex
);

157 
evít_li°
[
e
->
ödex
].
evíts
 |(Ë
evít
;

158 
ev
->
ödex
 = 
e
->index;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_pﬁl_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

168 
ngx_evít_t
 *
e
;

169 
ngx_c⁄√˘i⁄_t
 *
c
;

171 
c
 = 
ev
->
d©a
;

173 
ev
->
a˘ive
 = 0;

175 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

178 
c
->
fd
, 
evít
);

179  
NGX_OK
;

182 i‡(
evít
 =
NGX_READ_EVENT
) {

183 
e
 = 
c
->
wrôe
;

184 #i‡(
NGX_READ_EVENT
 !
POLLIN
)

185 
evít
 = 
POLLIN
;

189 
e
 = 
c
->
ªad
;

190 #i‡(
NGX_WRITE_EVENT
 !
POLLOUT
)

191 
evít
 = 
POLLOUT
;

195 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

196 "pﬁ»dñÉvít: fd:%dÉv:%i", 
c
->
fd
, 
evít
);

198 i‡(
e
 =
NULL
 ||É->
ödex
 =
NGX_INVALID_INDEX
) {

199 
√víts
--;

201 i‡(
ev
->
ödex
 < (
ngx_uöt_t
Ë
√víts
) {

203 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

204 "ödex: c›yÉvíà%uòtÿ%i", 
√víts
, 
ev
->
ödex
);

206 
evít_li°
[
ev
->
ödex
] =Évít_li°[
√víts
];

208 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
√víts
].
fd
];

210 i‡(
c
->
fd
 == -1) {

211 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

215 i‡(
c
->
ªad
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

216 
c
->
ªad
->
ödex
 = 
ev
->index;

219 i‡(
c
->
wrôe
->
ödex
 =(
ngx_uöt_t
Ë
√víts
) {

220 
c
->
wrôe
->
ödex
 = 
ev
->index;

226 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

227 "pﬁ»dñ index: %i", 
e
->
ödex
);

229 
evít_li°
[
e
->
ödex
].
evíts
 &(Ë~
evít
;

232 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

234  
NGX_OK
;

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_pﬁl_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

241 
ªady
, 
ªvíts
;

242 
ngx_îr_t
 
îr
;

243 
ngx_öt_t
 
i
, 
ƒódy
;

244 
ngx_uöt_t
 
found
, 
Àvñ
;

245 
ngx_evít_t
 *
ev
, **
queue
;

246 
ngx_c⁄√˘i⁄_t
 *
c
;

250 #i‡(
NGX_DEBUG0
)

251 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

252 
i
 = 0; i < 
√víts
; i++) {

253 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

255 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
);

260 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "pﬁ»timî: %M", 
timî
);

262 
ªady
 = 
	`pﬁl
(
evít_li°
, (
u_öt
Ë
√víts
, (Ë
timî
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "pﬁ»ªady %d o‡%d", 
ªady
, 
√víts
);

273 i‡(
îr
) {

274 i‡(
îr
 =
NGX_EINTR
) {

276 i‡(
ngx_evít_timî_Æ¨m
) {

277 
ngx_evít_timî_Æ¨m
 = 0;

278  
NGX_OK
;

281 
Àvñ
 = 
NGX_LOG_INFO
;

284 
Àvñ
 = 
NGX_LOG_ALERT
;

287 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "poll() failed");

288  
NGX_ERROR
;

291 i‡(
ªady
 == 0) {

292 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

293  
NGX_OK
;

296 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

298  
NGX_ERROR
;

301 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

303 
ƒódy
 = 0;

305 
i
 = 0; i < 
√víts
 && 
ªady
; i++) {

307 
ªvíts
 = 
evít_li°
[
i
].revents;

310 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

314 i‡(
ªvíts
) {

315 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

317 
i
, 
evít_li°
[i].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

321 i‡(
ªvíts
 & 
POLLNVAL
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

324 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

327 i‡(
ªvíts
 & ~(
POLLIN
|
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)) {

328 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

330 
evít_li°
[
i
].
fd
,Évít_li°[i].
evíts
, 
ªvíts
);

333 i‡(
evít_li°
[
i
].
fd
 == -1) {

341 
c
 = 
ngx_cy˛e
->
fûes
[
evít_li°
[
i
].
fd
];

343 i‡(
c
->
fd
 == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "unexpectedÉvent");

351 i‡(
i
 =
√víts
 - 1) {

352 
√víts
--;

354 
evít_li°
[
i
].
fd
 = -1;

360 i‡((
ªvíts
 & (
POLLERR
|
POLLHUP
|
POLLNVAL
))

361 && (
ªvíts
 & (
POLLIN
|
POLLOUT
)) == 0)

369 
ªvíts
 |
POLLIN
|
POLLOUT
;

372 
found
 = 0;

374 i‡((
ªvíts
 & 
POLLIN
Ë&& 
c
->
ªad
->
a˘ive
) {

375 
found
 = 1;

377 
ev
 = 
c
->
ªad
;

379 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ev
->
ac˚±
) {

380 
ev
->
po°ed_ªady
 = 1;

383 
ev
->
ªady
 = 1;

386 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

387 &
ngx_po°ed_evíts
);

388 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

391 i‡((
ªvíts
 & 
POLLOUT
Ë&& 
c
->
wrôe
->
a˘ive
) {

392 
found
 = 1;

393 
ev
 = 
c
->
wrôe
;

395 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

396 
ev
->
po°ed_ªady
 = 1;

399 
ev
->
ªady
 = 1;

402 
	`ngx_locked_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

405 i‡(
found
) {

406 
ªady
--;

411 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

413 i‡(
ªady
 != 0) {

414 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "pollÑeady !=Évents");

417  
ƒódy
;

418 
	}
}

422 
	$ngx_pﬁl_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

424 
ngx_evít_c⁄f_t
 *
ecf
;

426 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

428 i‡(
ecf
->
u£
 !
ngx_pﬁl_moduÀ
.
˘x_ödex
) {

429  
NGX_CONF_OK
;

432 #i‡(
NGX_THREADS
)

434 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

436  
NGX_CONF_ERROR
;

440  
NGX_CONF_OK
;

443 
	}
}

	@src/event/modules/ngx_rtsig_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_RTSIG
)

15 #i‡(
NGX_DARWIN
)

17 
	#SIGRTMIN
 33

	)

18 
	#si_fd
 
__∑d
[0]

	)

22 #ifde‡ 
SIGRTMIN


23 
	#si_fd
 
_ªas⁄
.
__•¨e__
.
__•¨e2__
[0]

	)

25 
	#SIGRTMIN
 33

	)

26 
	#si_fd
 
__•¨e__
[0]

	)

31 
	#F_SETSIG
 10

	)

32 
	#KERN_RTSIGNR
 30

	)

33 
	#KERN_RTSIGMAX
 31

	)

35 
sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

36 c⁄° 
time•ec
 *
timeout
);

38 
	$sigtimedwaô
(c⁄° 
sig£t_t
 *
£t
, 
sigöfo_t
 *
öfo
,

39 c⁄° 
time•ec
 *
timeout
)

42 
	}
}

44 
	gngx_löux_πsig_max
;

50 
ngx_uöt_t
 
	msigno
;

51 
ngx_uöt_t
 
	movîÊow_evíts
;

52 
ngx_uöt_t
 
	movîÊow_ã°
;

53 
ngx_uöt_t
 
	movîÊow_thªshﬁd
;

54 } 
	tngx_πsig_c⁄f_t
;

57 
ngx_evít_moduÀ_t
 
ngx_pﬁl_moduÀ_˘x
;

59 
ngx_öt_t
 
ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

60 
ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

61 
ngx_öt_t
 
ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

62 
ngx_öt_t
 
ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
,

63 
ngx_uöt_t
 
Êags
);

64 
ngx_öt_t
 
ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
,

65 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

66 
ngx_öt_t
 
ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
,

67 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
);

69 *
ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

70 *
ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

71 *
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
,

72 *
po°
, *
d©a
);

75 
sig£t_t
 
	g£t
;

76 
ngx_uöt_t
 
	govîÊow
, 
	govîÊow_cuºít
;

77 
pﬁlfd
 *
	govîÊow_li°
;

80 
ngx_°r_t
 
	gπsig_«me
 = 
ngx_°rög
("rtsig");

82 
ngx_c⁄f_num_bounds_t
 
	gngx_ovîÊow_thªshﬁd_bounds
 = {

83 
ngx_check_ngx_ovîÊow_thªshﬁd_bounds
, 2, 10

87 
ngx_comm™d_t
 
	gngx_πsig_comm™ds
[] = {

89 { 
ngx_°rög
("rtsig_signo"),

90 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

91 
ngx_c⁄f_£t_num_¶Ÿ
,

93 
off£tof
(
ngx_πsig_c⁄f_t
, 
signo
),

94 
NULL
 },

96 { 
ngx_°rög
("rtsig_overflow_events"),

97 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

98 
ngx_c⁄f_£t_num_¶Ÿ
,

100 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_evíts
),

101 
NULL
 },

103 { 
ngx_°rög
("rtsig_overflow_test"),

104 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

105 
ngx_c⁄f_£t_num_¶Ÿ
,

107 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_ã°
),

108 
NULL
 },

110 { 
ngx_°rög
("rtsig_overflow_threshold"),

111 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

112 
ngx_c⁄f_£t_num_¶Ÿ
,

114 
off£tof
(
ngx_πsig_c⁄f_t
, 
ovîÊow_thªshﬁd
),

115 &
ngx_ovîÊow_thªshﬁd_bounds
 },

117 
ngx_nuŒ_comm™d


121 
ngx_evít_moduÀ_t
 
	gngx_πsig_moduÀ_˘x
 = {

122 &
πsig_«me
,

123 
ngx_πsig_¸óã_c⁄f
,

124 
ngx_πsig_öô_c⁄f
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
ngx_πsig_add_c⁄√˘i⁄
,

132 
ngx_πsig_dñ_c⁄√˘i⁄
,

133 
NULL
,

134 
ngx_πsig_¥o˚ss_evíts
,

135 
ngx_πsig_öô
,

136 
ngx_πsig_d⁄e
,

141 
ngx_moduÀ_t
 
	gngx_πsig_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_πsig_moduÀ_˘x
,

144 
ngx_πsig_comm™ds
,

145 
NGX_EVENT_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_öt_t


158 
	$ngx_πsig_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

160 
ngx_πsig_c⁄f_t
 *
πscf
;

162 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

164 
	`sigem±y£t
(&
£t
);

165 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
);

166 
	`sigadd£t
(&
£t
, (Ë
πscf
->
signo
 + 1);

167 
	`sigadd£t
(&
£t
, 
SIGIO
);

168 
	`sigadd£t
(&
£t
, 
SIGALRM
);

170 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

171 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

173  
NGX_ERROR
;

176 i‡(
ovîÊow_li°
) {

177 
	`ngx_‰ì
(
ovîÊow_li°
);

180 
ovîÊow_li°
 = 
	`ngx_Æloc
((
pﬁlfd
Ë* 
πscf
->
ovîÊow_evíts
,

181 
cy˛e
->
log
);

182 i‡(
ovîÊow_li°
 =
NULL
) {

183  
NGX_ERROR
;

186 
ngx_io
 = 
ngx_os_io
;

188 
ngx_evít_a˘i⁄s
 = 
ngx_πsig_moduÀ_˘x
.
a˘i⁄s
;

190 
ngx_evít_Êags
 = 
NGX_USE_RTSIG_EVENT


191 |
NGX_USE_GREEDY_EVENT


192 |
NGX_USE_FD_EVENT
;

194  
NGX_OK
;

195 
	}
}

199 
	$ngx_πsig_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

201 
	`ngx_‰ì
(
ovîÊow_li°
);

203 
ovîÊow_li°
 = 
NULL
;

204 
	}
}

207 
ngx_öt_t


208 
	$ngx_πsig_add_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

210 
ngx_uöt_t
 
signo
;

211 
ngx_πsig_c⁄f_t
 *
πscf
;

213 i‡(
c
->
ªad
->
ac˚±
 && c->ªad->
dißbÀd
) {

215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

216 "πsigÉ«bÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

218 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

219 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

221  
NGX_ERROR
;

224 
c
->
ªad
->
a˘ive
 = 1;

225 
c
->
ªad
->
dißbÀd
 = 0;

228 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

230 
signo
 = 
πscf
->signÿ+ 
c
->
ªad
->
ö°™˚
;

232 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

233 "πsigádd c⁄√˘i⁄: fd:%d signo:%ui", 
c
->
fd
, 
signo
);

235 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
|
O_ASYNC
) == -1) {

236 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

238  
NGX_ERROR
;

241 i‡(
	`f˙é
(
c
->
fd
, 
F_SETSIG
, (Ë
signo
) == -1) {

242 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

244  
NGX_ERROR
;

247 i‡(
	`f˙é
(
c
->
fd
, 
F_SETOWN
, 
ngx_pid
) == -1) {

248 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

250  
NGX_ERROR
;

253 #i‡(
NGX_HAVE_ONESIGFD
)

254 i‡(
	`f˙é
(
c
->
fd
, 
F_SETAUXFL
, 
O_ONESIGFD
) == -1) {

255 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

257  
NGX_ERROR
;

261 
c
->
ªad
->
a˘ive
 = 1;

262 
c
->
wrôe
->
a˘ive
 = 1;

264  
NGX_OK
;

265 
	}
}

268 
ngx_öt_t


269 
	$ngx_πsig_dñ_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

272 "πsig dñ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

274 i‡((
Êags
 & 
NGX_DISABLE_EVENT
Ë&& 
c
->
ªad
->
ac˚±
) {

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

277 "πsig dißbÀ c⁄√˘i⁄: fd:%d", 
c
->
fd
);

279 
c
->
ªad
->
a˘ive
 = 0;

280 
c
->
ªad
->
dißbÀd
 = 1;

281  
NGX_OK
;

284 i‡(
Êags
 & 
NGX_CLOSE_EVENT
) {

285 
c
->
ªad
->
a˘ive
 = 0;

286 
c
->
wrôe
->
a˘ive
 = 0;

287  
NGX_OK
;

290 i‡(
	`f˙é
(
c
->
fd
, 
F_SETFL
, 
O_RDWR
|
O_NONBLOCK
) == -1) {

291 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

293  
NGX_ERROR
;

296 
c
->
ªad
->
a˘ive
 = 0;

297 
c
->
wrôe
->
a˘ive
 = 0;

299  
NGX_OK
;

300 
	}
}

303 
ngx_öt_t


304 
	$ngx_πsig_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
, 
ngx_uöt_t
 
Êags
)

306 
signo
;

307 
ngx_öt_t
 
ö°™˚
;

308 
ngx_îr_t
 
îr
;

309 
sigöfo_t
 
si
;

310 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

311 
time•ec
 
ts
, *
ç
;

312 
siga˘i⁄
 
ß
;

313 
ngx_c⁄√˘i⁄_t
 *
c
;

314 
ngx_πsig_c⁄f_t
 *
πscf
;

316 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

317 
ç
 = 
NULL
;

320 
ts
.
tv_£c
 = 
timî
 / 1000;

321 
ts
.
tv_n£c
 = (
timî
 % 1000) * 1000000;

322 
ç
 = &
ts
;

325 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

326 "πsigÅimî: %M", 
timî
);

330 
signo
 = 
	`sigtimedwaô
(&
£t
, &
si
, 
ç
);

332 i‡(
signo
 == -1) {

333 
îr
 = 
ngx_î∫o
;

335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 
îr
,

336 "πsig signo:%d", 
signo
);

338 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

339 
	`ngx_time_upd©e
();

342 i‡(
îr
 =
NGX_EAGAIN
) {

346 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

347  
NGX_AGAIN
;

350 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

352  
NGX_ERROR
;

355 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

356 
cy˛e
->
log
, 
îr
, "sigtimedwait() failed");

357  
NGX_ERROR
;

360 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

362 
signo
, 
si
.
si_fd
, si.
si_b™d
);

364 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

365 
	`ngx_time_upd©e
();

368 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

370 i‡(
signo
 =(Ë
πscf
->signo || signo == ()Ñtscf->signo + 1) {

372 i‡(
ovîÊow
 && (
ngx_uöt_t
Ë
si
.
si_fd
 > 
ovîÊow_cuºít
) {

373  
NGX_OK
;

376 
c
 = 
ngx_cy˛e
->
fûes
[
si
.
si_fd
];

378 i‡(
c
 =
NULL
) {

382  
NGX_OK
;

385 
ö°™˚
 = 
signo
 - (Ë
πscf
->signo;

387 
ªv
 = 
c
->
ªad
;

389 i‡(
ªv
->
ö°™˚
 != instance) {

396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

397 "πsig: sèÀÉvíà%p", 
c
);

399  
NGX_OK
;

402 i‡((
si
.
si_b™d
 & (
POLLIN
|
POLLHUP
|
POLLERR
)Ë&& 
ªv
->
a˘ive
) {

404 
ªv
->
ªady
 = 1;

406 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

407 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

408 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

410 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

413 
ªv
->
	`h™dÀr
(rev);

417 
wev
 = 
c
->
wrôe
;

419 i‡((
si
.
si_b™d
 & (
POLLOUT
|
POLLHUP
|
POLLERR
)Ë&& 
wev
->
a˘ive
) {

421 
wev
->
ªady
 = 1;

423 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

424 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

427 
wev
->
	`h™dÀr
(wev);

431  
NGX_OK
;

433 } i‡(
signo
 =
SIGALRM
) {

435 
	`ngx_time_upd©e
();

437  
NGX_OK
;

439 } i‡(
signo
 =
SIGIO
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

446 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

447 
ß
.
ß_h™dÀr
 = 
SIG_DFL
;

448 
	`sigem±y£t
(&
ß
.
ß_mask
);

450 i‡(
	`siga˘i⁄
(
πscf
->
signo
, &
ß
, 
NULL
) == -1) {

451 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

452 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
);

455 i‡(
	`siga˘i⁄
(
πscf
->
signo
 + 1, &
ß
, 
NULL
) == -1) {

456 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

457 "siga˘i⁄(%d, SIG_DFLËÁûed", 
πscf
->
signo
 + 1);

460 
ovîÊow
 = 1;

461 
ovîÊow_cuºít
 = 0;

462 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_ovîÊow
;

464  
NGX_ERROR
;

468 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

469 "sigtimedwaô(Ëªtu∫ed u√x≥˘ed sig«l: %d", 
signo
);

471  
NGX_ERROR
;

472 
	}
}

475 
ngx_öt_t


476 
	$ngx_πsig_¥o˚ss_ovîÊow
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

477 
ngx_uöt_t
 
Êags
)

479 
«me
[2], 
πsig_max
, 
πsig_ƒ
, 
evíts
, 
ªady
;

480 
size_t
 
Àn
;

481 
ngx_îr_t
 
îr
;

482 
ngx_uöt_t
 
ã°ed
, 
n
, 
i
;

483 
ngx_evít_t
 *
ªv
, *
wev
, **
queue
;

484 
ngx_c⁄√˘i⁄_t
 *
c
;

485 
ngx_πsig_c⁄f_t
 *
πscf
;

487 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

490 
πscf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_πsig_moduÀ
);

492 
ã°ed
 = 0;

496 
n
 = 0;

497 
n
 < 
πscf
->
ovîÊow_evíts
) {

499 i‡(
ovîÊow_cuºít
 =
cy˛e
->
c⁄√˘i⁄_n
) {

503 
c
 = 
cy˛e
->
fûes
[
ovîÊow_cuºít
++];

505 i‡(
c
 =
NULL
 || c->
fd
 == -1) {

509 
evíts
 = 0;

511 i‡(
c
->
ªad
->
a˘ive
 && c->ªad->
h™dÀr
) {

512 
evíts
 |
POLLIN
;

515 i‡(
c
->
wrôe
->
a˘ive
 && c->wrôe->
h™dÀr
) {

516 
evíts
 |
POLLOUT
;

519 i‡(
evíts
 == 0) {

523 
ovîÊow_li°
[
n
].
fd
 = 
c
->fd;

524 
ovîÊow_li°
[
n
].
evíts
 =Évents;

525 
ovîÊow_li°
[
n
].
ªvíts
 = 0;

526 
n
++;

529 i‡(
n
 == 0) {

534 
ªady
 = 
	`pﬁl
(
ovîÊow_li°
, 
n
, 0);

536 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

537 "πsig ovîÊowÖﬁl:%d", 
ªady
);

539 i‡(
ªady
 == -1) {

540 
îr
 = 
ngx_î∫o
;

541 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

542 
cy˛e
->
log
, 0,

545 i‡(
îr
 =
NGX_EINTR
) {

553 i‡(
ªady
 <= 0) {

557 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

559 
i
 = 0; i < 
n
; i++) {

560 
c
 = 
cy˛e
->
fûes
[
ovîÊow_li°
[
i
].
fd
];

562 i‡(
c
 =
NULL
) {

566 
ªv
 = 
c
->
ªad
;

568 i‡(
ªv
->
a˘ive


569 && !
ªv
->
˛o£d


570 && 
ªv
->
h™dÀr


571 && (
ovîÊow_li°
[
i
].
ªvíts


572 & (
POLLIN
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

574 
ã°ed
++;

576 i‡((
Êags
 & 
NGX_POST_THREAD_EVENTS
Ë&& !
ªv
->
ac˚±
) {

577 
ªv
->
po°ed_ªady
 = 1;

580 
ªv
->
ªady
 = 1;

583 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

584 
queue
 = (
ngx_evít_t
 **Ë(
ªv
->
ac˚±
 ?

585 &
ngx_po°ed_ac˚±_evíts
 : &
ngx_po°ed_evíts
);

587 
	`ngx_locked_po°_evít
(
ªv
, 
queue
);

590 
ªv
->
	`h™dÀr
(rev);

594 
wev
 = 
c
->
wrôe
;

596 i‡(
wev
->
a˘ive


597 && !
wev
->
˛o£d


598 && 
wev
->
h™dÀr


599 && (
ovîÊow_li°
[
i
].
ªvíts


600 & (
POLLOUT
|
POLLERR
|
POLLHUP
|
POLLNVAL
)))

602 
ã°ed
++;

604 i‡(
Êags
 & 
NGX_POST_THREAD_EVENTS
) {

605 
wev
->
po°ed_ªady
 = 1;

608 
wev
->
ªady
 = 1;

611 i‡(
Êags
 & 
NGX_POST_EVENTS
) {

612 
	`ngx_locked_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

615 
wev
->
	`h™dÀr
(wev);

620 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

622 i‡(
ã°ed
 >
πscf
->
ovîÊow_ã°
) {

624 i‡(
ngx_löux_πsig_max
) {

634 
«me
[0] = 
CTL_KERN
;

635 
«me
[1] = 
KERN_RTSIGMAX
;

636 
Àn
 = (
πsig_max
);

638 i‡(
	`sys˘l
(
«me
, 2, &
πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

639 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

641  
NGX_ERROR
;

645 
«me
[1] = 
KERN_RTSIGNR
;

646 
Àn
 = (
πsig_ƒ
);

648 i‡(
	`sys˘l
(
«me
, 2, &
πsig_ƒ
, &
Àn
, 
NULL
, 0) == -1) {

649 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
î∫o
,

651  
NGX_ERROR
;

660 i‡(
πsig_max
 / (Ë
πscf
->
ovîÊow_thªshﬁd
 < 
πsig_ƒ
) {

661 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

663 
πsig_ƒ
, 
πsig_max
);

664 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
)

677 
	`ngx_πsig_¥o˚ss_evíts
(
cy˛e
, 0, 
Êags
Ë=
NGX_OK
) {

682 
ã°ed
 = 0;

686 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

687 
	`ngx_time_upd©e
();

690 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

693 
ovîÊow
 = 0;

694 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts
 = 
ngx_πsig_¥o˚ss_evíts
;

696  
NGX_OK
;

697 
	}
}

701 
	$ngx_πsig_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

703 
ngx_πsig_c⁄f_t
 *
πscf
;

705 
πscf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_πsig_c⁄f_t
));

706 i‡(
πscf
 =
NULL
) {

707  
NULL
;

710 
πscf
->
signo
 = 
NGX_CONF_UNSET
;

711 
πscf
->
ovîÊow_evíts
 = 
NGX_CONF_UNSET
;

712 
πscf
->
ovîÊow_ã°
 = 
NGX_CONF_UNSET
;

713 
πscf
->
ovîÊow_thªshﬁd
 = 
NGX_CONF_UNSET
;

715  
πscf
;

716 
	}
}

720 
	$ngx_πsig_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

722 
ngx_πsig_c⁄f_t
 *
πscf
 = 
c⁄f
;

725 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
signo
, 
SIGRTMIN
 + 10);

727 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_evíts
, 16);

728 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_ã°
, 32);

729 
	`ngx_c⁄f_öô_uöt_vÆue
(
πscf
->
ovîÊow_thªshﬁd
, 10);

731  
NGX_CONF_OK
;

732 
	}
}

736 
	$ngx_check_ngx_ovîÊow_thªshﬁd_bounds
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

738 i‡(
ngx_löux_πsig_max
) {

739  
	`ngx_c⁄f_check_num_bounds
(
cf
, 
po°
, 
d©a
);

742 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

746  
NGX_CONF_OK
;

747 
	}
}

	@src/event/modules/ngx_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_öt_t
 
	gmax_fd
;

31 
ngx_uöt_t
 
	g√víts
;

33 
ngx_evít_t
 **
	gevít_ödex
;

36 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

38 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

39 &
£À˘_«me
,

40 
NULL
,

41 
ngx_£À˘_öô_c⁄f
,

44 
ngx_£À˘_add_evít
,

45 
ngx_£À˘_dñ_evít
,

46 
ngx_£À˘_add_evít
,

47 
ngx_£À˘_dñ_evít
,

48 
NULL
,

49 
NULL
,

50 
NULL
,

51 
ngx_£À˘_¥o˚ss_evíts
,

52 
ngx_£À˘_öô
,

53 
ngx_£À˘_d⁄e


58 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_£À˘_moduÀ_˘x
,

61 
NULL
,

62 
NGX_EVENT_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

77 
ngx_evít_t
 **
ödex
;

79 i‡(
evít_ödex
 =
NULL
) {

80 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

81 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

82 
√víts
 = 0;

85 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


86 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


87 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

89 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

90 
cy˛e
->
log
);

91 i‡(
ödex
 =
NULL
) {

92  
NGX_ERROR
;

95 i‡(
evít_ödex
) {

96 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

97 
	`ngx_‰ì
(
evít_ödex
);

100 
evít_ödex
 = 
ödex
;

103 
ngx_io
 = 
ngx_os_io
;

105 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

107 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

109 
max_fd
 = -1;

111  
NGX_OK
;

112 
	}
}

116 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

118 
	`ngx_‰ì
(
evít_ödex
);

120 
evít_ödex
 = 
NULL
;

121 
	}
}

124 
ngx_öt_t


125 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

127 
ngx_c⁄√˘i⁄_t
 *
c
;

129 
c
 = 
ev
->
d©a
;

131 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

132 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

134 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

135 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

136 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

137  
NGX_OK
;

140 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

141 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

143 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

145 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

146  
NGX_ERROR
;

149 i‡(
evít
 =
NGX_READ_EVENT
) {

150 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

152 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

153 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

156 i‡(
max_fd
 !-1 && max_fd < 
c
->
fd
) {

157 
max_fd
 = 
c
->
fd
;

160 
ev
->
a˘ive
 = 1;

162 
evít_ödex
[
√víts
] = 
ev
;

163 
ev
->
ödex
 = 
√víts
;

164 
√víts
++;

166  
NGX_OK
;

167 
	}
}

170 
ngx_öt_t


171 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

173 
ngx_evít_t
 *
e
;

174 
ngx_c⁄√˘i⁄_t
 *
c
;

176 
c
 = 
ev
->
d©a
;

178 
ev
->
a˘ive
 = 0;

180 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

181  
NGX_OK
;

184 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

185 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

187 i‡(
evít
 =
NGX_READ_EVENT
) {

188 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

190 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

191 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

194 i‡(
max_fd
 =
c
->
fd
) {

195 
max_fd
 = -1;

198 i‡(
ev
->
ödex
 < --
√víts
) {

199 
e
 = 
evít_ödex
[
√víts
];

200 
evít_ödex
[
ev
->
ödex
] = 
e
;

201 
e
->
ödex
 = 
ev
->index;

204 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

206  
NGX_OK
;

207 
	}
}

210 
ngx_öt_t


211 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

212 
ngx_uöt_t
 
Êags
)

214 
ªady
, 
ƒódy
;

215 
ngx_îr_t
 
îr
;

216 
ngx_uöt_t
 
i
, 
found
;

217 
ngx_evít_t
 *
ev
, **
queue
;

218 
timevÆ
 
tv
, *
ç
;

219 
ngx_c⁄√˘i⁄_t
 *
c
;

221 i‡(
max_fd
 == -1) {

222 
i
 = 0; i < 
√víts
; i++) {

223 
c
 = 
evít_ödex
[
i
]->
d©a
;

224 i‡(
max_fd
 < 
c
->
fd
) {

225 
max_fd
 = 
c
->
fd
;

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

230 "ch™gêmax_fd: %d", 
max_fd
);

233 #i‡(
NGX_DEBUG
)

234 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

235 
i
 = 0; i < 
√víts
; i++) {

236 
ev
 = 
evít_ödex
[
i
];

237 
c
 = 
ev
->
d©a
;

238 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

239 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

243 "max_fd: %d", 
max_fd
);

247 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

248 
ç
 = 
NULL
;

251 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

252 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

253 
ç
 = &
tv
;

256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

257 "£À˘Åimî: %M", 
timî
);

259 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

260 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

262 
ªady
 = 
	`£À˘
(
max_fd
 + 1, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

264 
îr
 = (
ªady
 =-1Ë? 
ngx_î∫o
 : 0;

266 i‡(
Êags
 & 
NGX_UPDATE_TIME
 || 
ngx_evít_timî_Æ¨m
) {

267 
	`ngx_time_upd©e
();

270 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

271 "£À˘Ñódy %d", 
ªady
);

273 i‡(
îr
) {

274 
ngx_uöt_t
 
Àvñ
;

276 i‡(
îr
 =
NGX_EINTR
) {

278 i‡(
ngx_evít_timî_Æ¨m
) {

279 
ngx_evít_timî_Æ¨m
 = 0;

280  
NGX_OK
;

283 
Àvñ
 = 
NGX_LOG_INFO
;

286 
Àvñ
 = 
NGX_LOG_ALERT
;

289 
	`ngx_log_îr‹
(
Àvñ
, 
cy˛e
->
log
, 
îr
, "select() failed");

291 i‡(
îr
 =
EBADF
) {

292 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

295  
NGX_ERROR
;

298 i‡(
ªady
 == 0) {

299 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

300  
NGX_OK
;

303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

305  
NGX_ERROR
;

308 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

310 
ƒódy
 = 0;

312 
i
 = 0; i < 
√víts
; i++) {

313 
ev
 = 
evít_ödex
[
i
];

314 
c
 = 
ev
->
d©a
;

315 
found
 = 0;

317 i‡(
ev
->
wrôe
) {

318 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

319 
found
 = 1;

320 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

321 "£À˘ wrôê%d", 
c
->
fd
);

325 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

326 
found
 = 1;

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

328 "£À˘Ñód %d", 
c
->
fd
);

332 i‡(
found
) {

333 
ev
->
ªady
 = 1;

335 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

336 &
ngx_po°ed_evíts
);

337 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

339 
ƒódy
++;

343 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

345 i‡(
ªady
 !
ƒódy
) {

346 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

347 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

349 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

352  
NGX_OK
;

353 
	}
}

357 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

359 
n
;

360 
sockÀn_t
 
Àn
;

361 
ngx_îr_t
 
îr
;

362 
ngx_sockë_t
 
s
;

364 
s
 = 0; s <
max_fd
; s++) {

366 i‡(
	`FD_ISSET
(
s
, &
ma°î_ªad_fd_£t
) == 0) {

370 
Àn
 = ();

372 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

373 
îr
 = 
ngx_sockë_î∫o
;

375 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

376 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

378 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

382 
s
 = 0; s <
max_fd
; s++) {

384 i‡(
	`FD_ISSET
(
s
, &
ma°î_wrôe_fd_£t
) == 0) {

388 
Àn
 = ();

390 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, &
n
, &
Àn
) == -1) {

391 
îr
 = 
ngx_sockë_î∫o
;

393 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

394 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

396 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

400 
max_fd
 = -1;

401 
	}
}

405 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

407 
ngx_evít_c⁄f_t
 *
ecf
;

409 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

411 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

412  
NGX_CONF_OK
;

417 i‡(
cy˛e
->
c⁄√˘i⁄_n
 > 
FD_SETSIZE
) {

418 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

420 "suµ‹ãd by sñe˘(Ëi†%ud", 
FD_SETSIZE
);

421  
NGX_CONF_ERROR
;

424 #i‡(
NGX_THREADS
)

426 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

428  
NGX_CONF_ERROR
;

432  
NGX_CONF_OK
;

435 
	}
}

	@src/event/modules/ngx_win32_select_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
);

14 
ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_öt_t
 
ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

16 
ngx_uöt_t
 
Êags
);

17 
ngx_öt_t
 
ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
,Çgx_öt_à
evít
,

18 
ngx_uöt_t
 
Êags
);

19 
ngx_öt_t
 
ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

20 
ngx_uöt_t
 
Êags
);

21 
ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
);

22 *
ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
fd_£t
 
	gma°î_ªad_fd_£t
;

26 
fd_£t
 
	gma°î_wrôe_fd_£t
;

27 
fd_£t
 
	gw‹k_ªad_fd_£t
;

28 
fd_£t
 
	gw‹k_wrôe_fd_£t
;

30 
ngx_uöt_t
 
	gmax_ªad
;

31 
ngx_uöt_t
 
	gmax_wrôe
;

32 
ngx_uöt_t
 
	g√víts
;

34 
ngx_evít_t
 **
	gevít_ödex
;

37 
ngx_°r_t
 
	g£À˘_«me
 = 
ngx_°rög
("select");

39 
ngx_evít_moduÀ_t
 
	gngx_£À˘_moduÀ_˘x
 = {

40 &
£À˘_«me
,

41 
NULL
,

42 
ngx_£À˘_öô_c⁄f
,

45 
ngx_£À˘_add_evít
,

46 
ngx_£À˘_dñ_evít
,

47 
ngx_£À˘_add_evít
,

48 
ngx_£À˘_dñ_evít
,

49 
NULL
,

50 
NULL
,

51 
NULL
,

52 
ngx_£À˘_¥o˚ss_evíts
,

53 
ngx_£À˘_öô
,

54 
ngx_£À˘_d⁄e


59 
ngx_moduÀ_t
 
	gngx_£À˘_moduÀ
 = {

60 
NGX_MODULE_V1
,

61 &
ngx_£À˘_moduÀ_˘x
,

62 
NULL
,

63 
NGX_EVENT_MODULE
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NGX_MODULE_V1_PADDING


75 
ngx_öt_t


76 
	$ngx_£À˘_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
)

78 
ngx_evít_t
 **
ödex
;

80 i‡(
evít_ödex
 =
NULL
) {

81 
	`FD_ZERO
(&
ma°î_ªad_fd_£t
);

82 
	`FD_ZERO
(&
ma°î_wrôe_fd_£t
);

83 
√víts
 = 0;

86 i‡(
ngx_¥o˚ss
 >
NGX_PROCESS_WORKER


87 || 
cy˛e
->
ﬁd_cy˛e
 =
NULL


88 || 
cy˛e
->
ﬁd_cy˛e
->
c⁄√˘i⁄_n
 < cycle->connection_n)

90 
ödex
 = 
	`ngx_Æloc
((
ngx_evít_t
 *Ë* 2 * 
cy˛e
->
c⁄√˘i⁄_n
,

91 
cy˛e
->
log
);

92 i‡(
ödex
 =
NULL
) {

93  
NGX_ERROR
;

96 i‡(
evít_ödex
) {

97 
	`ngx_mem˝y
(
ödex
, 
evít_ödex
, (
ngx_evít_t
 *Ë* 
√víts
);

98 
	`ngx_‰ì
(
evít_ödex
);

101 
evít_ödex
 = 
ödex
;

104 
ngx_io
 = 
ngx_os_io
;

106 
ngx_evít_a˘i⁄s
 = 
ngx_£À˘_moduÀ_˘x
.
a˘i⁄s
;

108 
ngx_evít_Êags
 = 
NGX_USE_LEVEL_EVENT
;

110 
max_ªad
 = 0;

111 
max_wrôe
 = 0;

113  
NGX_OK
;

114 
	}
}

118 
	$ngx_£À˘_d⁄e
(
ngx_cy˛e_t
 *
cy˛e
)

120 
	`ngx_‰ì
(
evít_ödex
);

122 
evít_ödex
 = 
NULL
;

123 
	}
}

126 
ngx_öt_t


127 
	$ngx_£À˘_add_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

129 
ngx_c⁄√˘i⁄_t
 *
c
;

131 
c
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

134 "£À˘áddÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

136 i‡(
ev
->
ödex
 !
NGX_INVALID_INDEX
) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

138 "£À˘Évíàfd:%dÉv:%òi†Æªady së", 
c
->
fd
, 
evít
);

139  
NGX_OK
;

142 i‡((
evít
 =
NGX_READ_EVENT
 && 
ev
->
wrôe
)

143 || (
evít
 =
NGX_WRITE_EVENT
 && !
ev
->
wrôe
))

145 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 0,

147 
ev
->
wrôe
 ? "wrôe" : "ªad", 
c
->
fd
, 
evít
);

148  
NGX_ERROR
;

151 i‡((
evít
 =
NGX_READ_EVENT
Ë&& (
max_ªad
 >
FD_SETSIZE
)

152 || (
evít
 =
NGX_WRITE_EVENT
Ë&& (
max_wrôe
 >
FD_SETSIZE
))

154 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ev
->
log
, 0,

156 "suµ‹ãd by sñe˘(Ëi†%d", 
FD_SETSIZE
);

157  
NGX_ERROR
;

160 i‡(
evít
 =
NGX_READ_EVENT
) {

161 
	`FD_SET
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

162 
max_ªad
++;

164 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

165 
	`FD_SET
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

166 
max_wrôe
++;

169 
ev
->
a˘ive
 = 1;

171 
evít_ödex
[
√víts
] = 
ev
;

172 
ev
->
ödex
 = 
√víts
;

173 
√víts
++;

175  
NGX_OK
;

176 
	}
}

179 
ngx_öt_t


180 
	$ngx_£À˘_dñ_evít
(
ngx_evít_t
 *
ev
, 
ngx_öt_t
 
evít
, 
ngx_uöt_t
 
Êags
)

182 
ngx_evít_t
 *
e
;

183 
ngx_c⁄√˘i⁄_t
 *
c
;

185 
c
 = 
ev
->
d©a
;

187 
ev
->
a˘ive
 = 0;

189 i‡(
ev
->
ödex
 =
NGX_INVALID_INDEX
) {

190  
NGX_OK
;

193 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

194 "£À˘ dñÉvíàfd:%dÉv:%i", 
c
->
fd
, 
evít
);

196 i‡(
evít
 =
NGX_READ_EVENT
) {

197 
	`FD_CLR
(
c
->
fd
, &
ma°î_ªad_fd_£t
);

198 
max_ªad
--;

200 } i‡(
evít
 =
NGX_WRITE_EVENT
) {

201 
	`FD_CLR
(
c
->
fd
, &
ma°î_wrôe_fd_£t
);

202 
max_wrôe
--;

205 i‡(
ev
->
ödex
 < --
√víts
) {

206 
e
 = 
evít_ödex
[
√víts
];

207 
evít_ödex
[
ev
->
ödex
] = 
e
;

208 
e
->
ödex
 = 
ev
->index;

211 
ev
->
ödex
 = 
NGX_INVALID_INDEX
;

213  
NGX_OK
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_£À˘_¥o˚ss_evíts
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_m£c_t
 
timî
,

219 
ngx_uöt_t
 
Êags
)

221 
ªady
, 
ƒódy
;

222 
ngx_îr_t
 
îr
;

223 
ngx_uöt_t
 
i
, 
found
;

224 
ngx_evít_t
 *
ev
, **
queue
;

225 
timevÆ
 
tv
, *
ç
;

226 
ngx_c⁄√˘i⁄_t
 *
c
;

228 #i‡(
NGX_DEBUG
)

229 i‡(
cy˛e
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_ALL
) {

230 
i
 = 0; i < 
√víts
; i++) {

231 
ev
 = 
evít_ödex
[
i
];

232 
c
 = 
ev
->
d©a
;

233 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

234 "£À˘Évít: fd:%d wr:%d", 
c
->
fd
, 
ev
->
wrôe
);

239 i‡(
timî
 =
NGX_TIMER_INFINITE
) {

240 
ç
 = 
NULL
;

243 
tv
.
tv_£c
 = (Ë(
timî
 / 1000);

244 
tv
.
tv_u£c
 = (Ë((
timî
 % 1000) * 1000);

245 
ç
 = &
tv
;

248 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

249 "£À˘Åimî: %M", 
timî
);

251 
w‹k_ªad_fd_£t
 = 
ma°î_ªad_fd_£t
;

252 
w‹k_wrôe_fd_£t
 = 
ma°î_wrôe_fd_£t
;

254 i‡(
max_ªad
 || 
max_wrôe
) {

255 
ªady
 = 
	`£À˘
(0, &
w‹k_ªad_fd_£t
, &
w‹k_wrôe_fd_£t
, 
NULL
, 
ç
);

265 
	`ngx_m¶ìp
(
timî
);

267 
ªady
 = 0;

270 
îr
 = (
ªady
 =-1Ë? 
ngx_sockë_î∫o
 : 0;

272 i‡(
Êags
 & 
NGX_UPDATE_TIME
) {

273 
	`ngx_time_upd©e
();

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

277 "£À˘Ñódy %d", 
ªady
);

279 i‡(
îr
) {

280 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
, "select() failed");

282 i‡(
îr
 =
WSAENOTSOCK
) {

283 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

286  
NGX_ERROR
;

289 i‡(
ªady
 == 0) {

290 i‡(
timî
 !
NGX_TIMER_INFINITE
) {

291  
NGX_OK
;

294 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

296  
NGX_ERROR
;

299 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

301 
ƒódy
 = 0;

303 
i
 = 0; i < 
√víts
; i++) {

304 
ev
 = 
evít_ödex
[
i
];

305 
c
 = 
ev
->
d©a
;

306 
found
 = 0;

308 i‡(
ev
->
wrôe
) {

309 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_wrôe_fd_£t
)) {

310 
found
 = 1;

311 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

312 "£À˘ wrôê%d", 
c
->
fd
);

316 i‡(
	`FD_ISSET
(
c
->
fd
, &
w‹k_ªad_fd_£t
)) {

317 
found
 = 1;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

319 "£À˘Ñód %d", 
c
->
fd
);

323 i‡(
found
) {

324 
ev
->
ªady
 = 1;

326 
queue
 = (
ngx_evít_t
 **Ë(
ev
->
ac˚±
 ? &
ngx_po°ed_ac˚±_evíts
:

327 &
ngx_po°ed_evíts
);

328 
	`ngx_locked_po°_evít
(
ev
, 
queue
);

330 
ƒódy
++;

334 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

336 i‡(
ªady
 !
ƒódy
) {

337 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

338 "£À˘Ñódy !evíts: %d:%d", 
ªady
, 
ƒódy
);

340 
	`ngx_£À˘_ª∑ú_fd_£ts
(
cy˛e
);

343  
NGX_OK
;

344 
	}
}

348 
	$ngx_£À˘_ª∑ú_fd_£ts
(
ngx_cy˛e_t
 *
cy˛e
)

350 
n
;

351 
u_öt
 
i
;

352 
sockÀn_t
 
Àn
;

353 
ngx_îr_t
 
îr
;

354 
ngx_sockë_t
 
s
;

356 
i
 = 0; i < 
ma°î_ªad_fd_£t
.
fd_cou¡
; i++) {

358 
s
 = 
ma°î_ªad_fd_£t
.
fd_¨øy
[
i
];

359 
Àn
 = ();

361 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

362 
îr
 = 
ngx_sockë_î∫o
;

364 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

365 "övÆid des¸ùt‹ #%d i¿ªad fd_£t", 
s
);

367 
	`FD_CLR
(
s
, &
ma°î_ªad_fd_£t
);

371 
i
 = 0; i < 
ma°î_wrôe_fd_£t
.
fd_cou¡
; i++) {

373 
s
 = 
ma°î_wrôe_fd_£t
.
fd_¨øy
[
i
];

374 
Àn
 = ();

376 i‡(
	`gësock›t
(
s
, 
SOL_SOCKET
, 
SO_TYPE
, (*Ë&
n
, &
Àn
) == -1) {

377 
îr
 = 
ngx_sockë_î∫o
;

379 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

380 "övÆid des¸ùt‹ #%d i¿wrôêfd_£t", 
s
);

382 
	`FD_CLR
(
s
, &
ma°î_wrôe_fd_£t
);

385 
	}
}

389 
	$ngx_£À˘_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

391 
ngx_evít_c⁄f_t
 *
ecf
;

393 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

395 i‡(
ecf
->
u£
 !
ngx_£À˘_moduÀ
.
˘x_ödex
) {

396  
NGX_CONF_OK
;

399  
NGX_CONF_OK
;

400 
	}
}

	@src/event/ngx_event.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#DEFAULT_CONNECTIONS
 512

	)

16 
ngx_moduÀ_t
 
ngx_kqueue_moduÀ
;

17 
ngx_moduÀ_t
 
ngx_evíç‹t_moduÀ
;

18 
ngx_moduÀ_t
 
ngx_devpﬁl_moduÀ
;

19 
ngx_moduÀ_t
 
ngx_ïﬁl_moduÀ
;

20 
ngx_moduÀ_t
 
ngx_πsig_moduÀ
;

21 
ngx_moduÀ_t
 
ngx_£À˘_moduÀ
;

24 *
ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

25 
ngx_öt_t
 
ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_öt_t
 
ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
);

27 *
ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

29 *
ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

30 *
c⁄f
);

31 *
ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

32 *
ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

35 *
ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

36 *
ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
);

39 
ngx_uöt_t
 
	gngx_timî_ªsﬁuti⁄
;

40 
sig_©omic_t
 
	gngx_evít_timî_Æ¨m
;

42 
ngx_uöt_t
 
	gngx_evít_max_moduÀ
;

44 
ngx_uöt_t
 
	gngx_evít_Êags
;

45 
ngx_evít_a˘i⁄s_t
 
	gngx_evít_a˘i⁄s
;

48 
ngx_©omic_t
 
	gc⁄√˘i⁄_cou¡î
 = 1;

49 
ngx_©omic_t
 *
	gngx_c⁄√˘i⁄_cou¡î
 = &
c⁄√˘i⁄_cou¡î
;

52 
ngx_©omic_t
 *
	gngx_ac˚±_muãx_±r
;

53 
ngx_shmtx_t
 
	gngx_ac˚±_muãx
;

54 
ngx_uöt_t
 
	gngx_u£_ac˚±_muãx
;

55 
ngx_uöt_t
 
	gngx_ac˚±_evíts
;

56 
ngx_uöt_t
 
	gngx_ac˚±_muãx_hñd
;

57 
ngx_m£c_t
 
	gngx_ac˚±_muãx_dñay
;

58 
ngx_öt_t
 
	gngx_ac˚±_dißbÀd
;

59 
ngx_fûe_t
 
	gngx_ac˚±_muãx_lock_fûe
;

62 #i‡(
NGX_STAT_STUB
)

64 
ngx_©omic_t
 
	gngx_°©_ac˚±ed0
;

65 
ngx_©omic_t
 *
	gngx_°©_ac˚±ed
 = &
ngx_°©_ac˚±ed0
;

66 
ngx_©omic_t
 
	gngx_°©_h™dÀd0
;

67 
ngx_©omic_t
 *
	gngx_°©_h™dÀd
 = &
ngx_°©_h™dÀd0
;

68 
ngx_©omic_t
 
	gngx_°©_ªque°s0
;

69 
ngx_©omic_t
 *
	gngx_°©_ªque°s
 = &
ngx_°©_ªque°s0
;

70 
ngx_©omic_t
 
	gngx_°©_a˘ive0
;

71 
ngx_©omic_t
 *
	gngx_°©_a˘ive
 = &
ngx_°©_a˘ive0
;

72 
ngx_©omic_t
 
	gngx_°©_ªadög0
;

73 
ngx_©omic_t
 *
	gngx_°©_ªadög
 = &
ngx_°©_ªadög0
;

74 
ngx_©omic_t
 
	gngx_°©_wrôög0
;

75 
ngx_©omic_t
 *
	gngx_°©_wrôög
 = &
ngx_°©_wrôög0
;

76 
ngx_©omic_t
 
	gngx_°©_waôög0
;

77 
ngx_©omic_t
 *
	gngx_°©_waôög
 = &
ngx_°©_waôög0
;

83 
ngx_comm™d_t
 
	gngx_evíts_comm™ds
[] = {

85 { 
ngx_°rög
("events"),

86 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

87 
ngx_evíts_block
,

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_c‹e_moduÀ_t
 
	gngx_evíts_moduÀ_˘x
 = {

97 
ngx_°rög
("events"),

98 
NULL
,

99 
ngx_evít_öô_c⁄f


103 
ngx_moduÀ_t
 
	gngx_evíts_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_evíts_moduÀ_˘x
,

106 
ngx_evíts_comm™ds
,

107 
NGX_CORE_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


119 
ngx_°r_t
 
	gevít_c‹e_«me
 = 
ngx_°rög
("event_core");

122 
ngx_comm™d_t
 
	gngx_evít_c‹e_comm™ds
[] = {

124 { 
ngx_°rög
("worker_connections"),

125 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

126 
ngx_evít_c⁄√˘i⁄s
,

129 
NULL
 },

131 { 
ngx_°rög
("connections"),

132 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

133 
ngx_evít_c⁄√˘i⁄s
,

136 
NULL
 },

138 { 
ngx_°rög
("use"),

139 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

140 
ngx_evít_u£
,

143 
NULL
 },

145 { 
ngx_°rög
("multi_accept"),

146 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

147 
ngx_c⁄f_£t_Êag_¶Ÿ
,

149 
off£tof
(
ngx_evít_c⁄f_t
, 
mu…i_ac˚±
),

150 
NULL
 },

152 { 
ngx_°rög
("accept_mutex"),

153 
NGX_EVENT_CONF
|
NGX_CONF_FLAG
,

154 
ngx_c⁄f_£t_Êag_¶Ÿ
,

156 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx
),

157 
NULL
 },

159 { 
ngx_°rög
("accept_mutex_delay"),

160 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

161 
ngx_c⁄f_£t_m£c_¶Ÿ
,

163 
off£tof
(
ngx_evít_c⁄f_t
, 
ac˚±_muãx_dñay
),

164 
NULL
 },

166 { 
ngx_°rög
("debug_connection"),

167 
NGX_EVENT_CONF
|
NGX_CONF_TAKE1
,

168 
ngx_evít_debug_c⁄√˘i⁄
,

171 
NULL
 },

173 
ngx_nuŒ_comm™d


177 
ngx_evít_moduÀ_t
 
	gngx_evít_c‹e_moduÀ_˘x
 = {

178 &
evít_c‹e_«me
,

179 
ngx_evít_c‹e_¸óã_c⁄f
,

180 
ngx_evít_c‹e_öô_c⁄f
,

182 { 
NULL
, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL }

186 
ngx_moduÀ_t
 
	gngx_evít_c‹e_moduÀ
 = {

187 
NGX_MODULE_V1
,

188 &
ngx_evít_c‹e_moduÀ_˘x
,

189 
ngx_evít_c‹e_comm™ds
,

190 
NGX_EVENT_MODULE
,

191 
NULL
,

192 
ngx_evít_moduÀ_öô
,

193 
ngx_evít_¥o˚ss_öô
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NULL
,

198 
NGX_MODULE_V1_PADDING


203 
	$ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
)

205 
ngx_uöt_t
 
Êags
;

206 
ngx_m£c_t
 
timî
, 
dñè
;

208 i‡(
ngx_timî_ªsﬁuti⁄
) {

209 
timî
 = 
NGX_TIMER_INFINITE
;

210 
Êags
 = 0;

213 
timî
 = 
	`ngx_evít_föd_timî
();

214 
Êags
 = 
NGX_UPDATE_TIME
;

216 #i‡(
NGX_THREADS
)

218 i‡(
timî
 =
NGX_TIMER_INFINITE
 ||Åimer > 500) {

219 
timî
 = 500;

225 i‡(
ngx_u£_ac˚±_muãx
) {

226 i‡(
ngx_ac˚±_dißbÀd
 > 0) {

227 
ngx_ac˚±_dißbÀd
--;

230 i‡(
	`ngx_åylock_ac˚±_muãx
(
cy˛e
Ë=
NGX_ERROR
) {

234 i‡(
ngx_ac˚±_muãx_hñd
) {

235 
Êags
 |
NGX_POST_EVENTS
;

238 i‡(
timî
 =
NGX_TIMER_INFINITE


239 || 
timî
 > 
ngx_ac˚±_muãx_dñay
)

241 
timî
 = 
ngx_ac˚±_muãx_dñay
;

247 
dñè
 = 
ngx_cuºít_m£c
;

249 (Ë
	`ngx_¥o˚ss_evíts
(
cy˛e
, 
timî
, 
Êags
);

251 
dñè
 = 
ngx_cuºít_m£c
 - delta;

253 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

254 "timî dñè: %M", 
dñè
);

256 i‡(
ngx_po°ed_ac˚±_evíts
) {

257 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_ac˚±_evíts
);

260 i‡(
ngx_ac˚±_muãx_hñd
) {

261 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

264 i‡(
dñè
) {

265 
	`ngx_evít_expúe_timîs
();

268 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

269 "po°edÉvít†%p", 
ngx_po°ed_evíts
);

271 i‡(
ngx_po°ed_evíts
) {

272 i‡(
ngx_thªaded
) {

273 
	`ngx_wakeup_w‹kî_thªad
(
cy˛e
);

276 
	`ngx_evít_¥o˚ss_po°ed
(
cy˛e
, &
ngx_po°ed_evíts
);

279 
	}
}

282 
ngx_öt_t


283 
	$ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
)

285 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

289 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

290 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_CLEAR_EVENT
)

291 =
NGX_ERROR
)

293  
NGX_ERROR
;

297  
NGX_OK
;

299 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

303 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

304 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
)

305 =
NGX_ERROR
)

307  
NGX_ERROR
;

310  
NGX_OK
;

313 i‡(
ªv
->
a˘ive
 && (ªv->
ªady
 || (
Êags
 & 
NGX_CLOSE_EVENT
))) {

314 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 
NGX_LEVEL_EVENT
 | 
Êags
)

315 =
NGX_ERROR
)

317  
NGX_ERROR
;

320  
NGX_OK
;

323 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

327 i‡(!
ªv
->
a˘ive
 && !ªv->
ªady
) {

328 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

329  
NGX_ERROR
;

332  
NGX_OK
;

335 i‡(
ªv
->
⁄eshŸ
 && !ªv->
ªady
) {

336 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

337  
NGX_ERROR
;

340  
NGX_OK
;

346  
NGX_OK
;

347 
	}
}

350 
ngx_öt_t


351 
	$ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
)

353 
ngx_c⁄√˘i⁄_t
 *
c
;

355 i‡(
low©
) {

356 
c
 = 
wev
->
d©a
;

358 i‡(
	`ngx_£nd_low©
(
c
, 
low©
Ë=
NGX_ERROR
) {

359  
NGX_ERROR
;

363 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

367 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

368 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
,

369 
NGX_CLEAR_EVENT
 | (
low©
 ? 
NGX_LOWAT_EVENT
 : 0))

370 =
NGX_ERROR
)

372  
NGX_ERROR
;

376  
NGX_OK
;

378 } i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
) {

382 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

383 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

384 =
NGX_ERROR
)

386  
NGX_ERROR
;

389  
NGX_OK
;

392 i‡(
wev
->
a˘ive
 && wev->
ªady
) {

393 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 
NGX_LEVEL_EVENT
)

394 =
NGX_ERROR
)

396  
NGX_ERROR
;

399  
NGX_OK
;

402 } i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

406 i‡(!
wev
->
a˘ive
 && !wev->
ªady
) {

407 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

408  
NGX_ERROR
;

411  
NGX_OK
;

414 i‡(
wev
->
⁄eshŸ
 && wev->
ªady
) {

415 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë=
NGX_ERROR
) {

416  
NGX_ERROR
;

419  
NGX_OK
;

425  
NGX_OK
;

426 
	}
}

430 
	$ngx_evít_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

432 i‡(
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
Ë=
NULL
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

435  
NGX_CONF_ERROR
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_evít_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

445 ***
cf
;

446 
u_ch¨
 *
sh¨ed
;

447 
size_t
 
size
, 
˛
;

448 
ngx_shm_t
 
shm
;

449 
ngx_time_t
 *
ç
;

450 
ngx_c‹e_c⁄f_t
 *
ccf
;

451 
ngx_evít_c⁄f_t
 *
ecf
;

453 
cf
 = 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
);

454 
ecf
 = (*
cf
)[
ngx_evít_c‹e_moduÀ
.
˘x_ödex
];

456 i‡(!
ngx_ã°_c⁄fig
 && 
ngx_¥o˚ss
 <
NGX_PROCESS_MASTER
) {

457 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

458 "usögÅhê\"%s\"Évíàmëhod", 
ecf
->
«me
);

461 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

463 
ngx_timî_ªsﬁuti⁄
 = 
ccf
->
timî_ªsﬁuti⁄
;

465 #i‡!(
NGX_WIN32
)

467 
ngx_öt_t
 
limô
;

468 
æimô
 
æmt
;

470 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

471 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

475 i‡(
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
æmt
.
æim_cur


476 && (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET


477 || 
ecf
->
c⁄√˘i⁄s
 > (
ngx_uöt_t
Ë
ccf
->
æimô_nofûe
))

479 
limô
 = (
ccf
->
æimô_nofûe
 =
NGX_CONF_UNSET
) ?

480 (
ngx_öt_t
Ë
æmt
.
æim_cur
 : 
ccf
->
æimô_nofûe
;

482 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cy˛e
->
log
, 0,

485 
ecf
->
c⁄√˘i⁄s
, 
limô
);

492 i‡(
ccf
->
ma°î
 == 0) {

493  
NGX_OK
;

496 i‡(
ngx_ac˚±_muãx_±r
) {

497  
NGX_OK
;

503 
˛
 = 128;

505 
size
 = 
˛


506 + 
˛


507 + 
˛
;

509 #i‡(
NGX_STAT_STUB
)

511 
size
 +
˛


512 + 
˛


513 + 
˛


514 + 
˛


515 + 
˛


516 + 
˛


517 + 
˛
;

521 
shm
.
size
 = size;

522 
shm
.
«me
.
Àn
 = ("nginx_shared_zone");

523 
shm
.
«me
.
d©a
 = (
u_ch¨
 *) "nginx_shared_zone";

524 
shm
.
log
 = 
cy˛e
->log;

526 i‡(
	`ngx_shm_Æloc
(&
shm
Ë!
NGX_OK
) {

527  
NGX_ERROR
;

530 
sh¨ed
 = 
shm
.
addr
;

532 
ngx_ac˚±_muãx_±r
 = (
ngx_©omic_t
 *Ë
sh¨ed
;

533 
ngx_ac˚±_muãx
.
•ö
 = (
ngx_uöt_t
) -1;

535 i‡(
	`ngx_shmtx_¸óã
(&
ngx_ac˚±_muãx
, (
ngx_shmtx_sh_t
 *Ë
sh¨ed
,

536 
cy˛e
->
lock_fûe
.
d©a
)

537 !
NGX_OK
)

539  
NGX_ERROR
;

542 
ngx_c⁄√˘i⁄_cou¡î
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 1 * 
˛
);

544 (Ë
	`ngx_©omic_cmp_£t
(
ngx_c⁄√˘i⁄_cou¡î
, 0, 1);

546 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

548 
ngx_c⁄√˘i⁄_cou¡î
, *ngx_connection_counter);

550 
ngx_ãmp_numbî
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 2 * 
˛
);

552 
ç
 = 
	`ngx_timeofday
();

554 
ngx_øndom_numbî
 = (
ç
->
m£c
 << 16Ë+ 
ngx_pid
;

556 #i‡(
NGX_STAT_STUB
)

558 
ngx_°©_ac˚±ed
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 3 * 
˛
);

559 
ngx_°©_h™dÀd
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 4 * 
˛
);

560 
ngx_°©_ªque°s
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 5 * 
˛
);

561 
ngx_°©_a˘ive
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 6 * 
˛
);

562 
ngx_°©_ªadög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 7 * 
˛
);

563 
ngx_°©_wrôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 8 * 
˛
);

564 
ngx_°©_waôög
 = (
ngx_©omic_t
 *Ë(
sh¨ed
 + 9 * 
˛
);

568  
NGX_OK
;

569 
	}
}

572 #i‡!(
NGX_WIN32
)

575 
	$ngx_timî_sig«l_h™dÀr
(
signo
)

577 
ngx_evít_timî_Æ¨m
 = 1;

580 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0, "timer signal");

582 
	}
}

587 
ngx_öt_t


588 
	$ngx_evít_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
)

590 
ngx_uöt_t
 
m
, 
i
;

591 
ngx_evít_t
 *
ªv
, *
wev
;

592 
ngx_li°íög_t
 *
ls
;

593 
ngx_c⁄√˘i⁄_t
 *
c
, *
√xt
, *
ﬁd
;

594 
ngx_c‹e_c⁄f_t
 *
ccf
;

595 
ngx_evít_c⁄f_t
 *
ecf
;

596 
ngx_evít_moduÀ_t
 *
moduÀ
;

598 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

599 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

601 i‡(
ccf
->
ma°î
 && ccf->
w‹kî_¥o˚s£s
 > 1 && 
ecf
->
ac˚±_muãx
) {

602 
ngx_u£_ac˚±_muãx
 = 1;

603 
ngx_ac˚±_muãx_hñd
 = 0;

604 
ngx_ac˚±_muãx_dñay
 = 
ecf
->
ac˚±_muãx_dñay
;

607 
ngx_u£_ac˚±_muãx
 = 0;

610 #i‡(
NGX_THREADS
)

611 
ngx_po°ed_evíts_muãx
 = 
	`ngx_muãx_öô
(
cy˛e
->
log
, 0);

612 i‡(
ngx_po°ed_evíts_muãx
 =
NULL
) {

613  
NGX_ERROR
;

617 i‡(
	`ngx_evít_timî_öô
(
cy˛e
->
log
Ë=
NGX_ERROR
) {

618  
NGX_ERROR
;

621 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

622 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

626 i‡(
ngx_moduÀs
[
m
]->
˘x_ödex
 !
ecf
->
u£
) {

630 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

632 i‡(
moduÀ
->
a˘i⁄s
.
	`öô
(
cy˛e
, 
ngx_timî_ªsﬁuti⁄
Ë!
NGX_OK
) {

634 
	`exô
(2);

640 #i‡!(
NGX_WIN32
)

642 i‡(
ngx_timî_ªsﬁuti⁄
 && !(
ngx_evít_Êags
 & 
NGX_USE_TIMER_EVENT
)) {

643 
siga˘i⁄
 
ß
;

644 
ôimîvÆ
 
ôv
;

646 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

647 
ß
.
ß_h™dÀr
 = 
ngx_timî_sig«l_h™dÀr
;

648 
	`sigem±y£t
(&
ß
.
ß_mask
);

650 i‡(
	`siga˘i⁄
(
SIGALRM
, &
ß
, 
NULL
) == -1) {

651 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

653  
NGX_ERROR
;

656 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

657 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000) * 1000;

658 
ôv
.
ô_vÆue
.
tv_£c
 = 
ngx_timî_ªsﬁuti⁄
 / 1000;

659 
ôv
.
ô_vÆue
.
tv_u£c
 = (
ngx_timî_ªsﬁuti⁄
 % 1000 ) * 1000;

661 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

662 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

667 i‡(
ngx_evít_Êags
 & 
NGX_USE_FD_EVENT
) {

668 
æimô
 
æmt
;

670 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

671 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

673  
NGX_ERROR
;

676 
cy˛e
->
fûes_n
 = (
ngx_uöt_t
Ë
æmt
.
æim_cur
;

678 
cy˛e
->
fûes
 = 
	`ngx_ˇŒoc
((
ngx_c⁄√˘i⁄_t
 *Ë* cy˛e->
fûes_n
,

679 
cy˛e
->
log
);

680 i‡(
cy˛e
->
fûes
 =
NULL
) {

681  
NGX_ERROR
;

687 
cy˛e
->
c⁄√˘i⁄s
 =

688 
	`ngx_Æloc
((
ngx_c⁄√˘i⁄_t
Ë* 
cy˛e
->
c⁄√˘i⁄_n
, cy˛e->
log
);

689 i‡(
cy˛e
->
c⁄√˘i⁄s
 =
NULL
) {

690  
NGX_ERROR
;

693 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

695 
cy˛e
->
ªad_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

696 
cy˛e
->
log
);

697 i‡(
cy˛e
->
ªad_evíts
 =
NULL
) {

698  
NGX_ERROR
;

701 
ªv
 = 
cy˛e
->
ªad_evíts
;

702 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

703 
ªv
[
i
].
˛o£d
 = 1;

704 
ªv
[
i
].
ö°™˚
 = 1;

705 #i‡(
NGX_THREADS
)

706 
ªv
[
i
].
lock
 = &
c
[i].lock;

707 
ªv
[
i
].
own_lock
 = &
c
[i].
lock
;

711 
cy˛e
->
wrôe_evíts
 = 
	`ngx_Æloc
((
ngx_evít_t
Ë* cy˛e->
c⁄√˘i⁄_n
,

712 
cy˛e
->
log
);

713 i‡(
cy˛e
->
wrôe_evíts
 =
NULL
) {

714  
NGX_ERROR
;

717 
wev
 = 
cy˛e
->
wrôe_evíts
;

718 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

719 
wev
[
i
].
˛o£d
 = 1;

720 #i‡(
NGX_THREADS
)

721 
wev
[
i
].
lock
 = &
c
[i].lock;

722 
wev
[
i
].
own_lock
 = &
c
[i].
lock
;

726 
i
 = 
cy˛e
->
c⁄√˘i⁄_n
;

727 
√xt
 = 
NULL
;

730 
i
--;

732 
c
[
i
].
d©a
 = 
√xt
;

733 
c
[
i
].
ªad
 = &
cy˛e
->
ªad_evíts
[i];

734 
c
[
i
].
wrôe
 = &
cy˛e
->
wrôe_evíts
[i];

735 
c
[
i
].
fd
 = (
ngx_sockë_t
) -1;

737 
√xt
 = &
c
[
i
];

739 #i‡(
NGX_THREADS
)

740 
c
[
i
].
lock
 = 0;

742 } 
i
);

744 
cy˛e
->
‰ì_c⁄√˘i⁄s
 = 
√xt
;

745 
cy˛e
->
‰ì_c⁄√˘i⁄_n
 = cy˛e->
c⁄√˘i⁄_n
;

749 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

750 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

752 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
ls
[
i
].
fd
, 
cy˛e
->
log
);

754 i‡(
c
 =
NULL
) {

755  
NGX_ERROR
;

758 
c
->
log
 = &
ls
[
i
].log;

760 
c
->
li°íög
 = &
ls
[
i
];

761 
ls
[
i
].
c⁄√˘i⁄
 = 
c
;

763 
ªv
 = 
c
->
ªad
;

765 
ªv
->
log
 = 
c
->log;

766 
ªv
->
ac˚±
 = 1;

768 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
)

769 
ªv
->
de„ºed_ac˚±
 = 
ls
[
i
].deferred_accept;

772 i‡(!(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
)) {

773 i‡(
ls
[
i
].
¥evious
) {

780 
ﬁd
 = 
ls
[
i
].
¥evious
->
c⁄√˘i⁄
;

782 i‡(
	`ngx_dñ_evít
(
ﬁd
->
ªad
, 
NGX_READ_EVENT
, 
NGX_CLOSE_EVENT
)

783 =
NGX_ERROR
)

785  
NGX_ERROR
;

788 
ﬁd
->
fd
 = (
ngx_sockë_t
) -1;

792 #i‡(
NGX_WIN32
)

794 i‡(
ngx_evít_Êags
 & 
NGX_USE_IOCP_EVENT
) {

795 
ngx_io˝_c⁄f_t
 *
io˝cf
;

797 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±ex
;

799 i‡(
ngx_u£_ac˚±_muãx
) {

803 i‡(
	`ngx_add_evít
(
ªv
, 0, 
NGX_IOCP_ACCEPT
Ë=
NGX_ERROR
) {

804  
NGX_ERROR
;

807 
ls
[
i
].
log
.
h™dÀr
 = 
ngx_ac˚±ex_log_îr‹
;

809 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

810 i‡(
	`ngx_evít_po°_ac˚±ex
(&
ls
[
i
], 
io˝cf
->
po°_ac˚±ex
)

811 =
NGX_ERROR
)

813  
NGX_ERROR
;

817 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

819 i‡(
ngx_u£_ac˚±_muãx
) {

823 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

824  
NGX_ERROR
;

830 
ªv
->
h™dÀr
 = 
ngx_evít_ac˚±
;

832 i‡(
ngx_u£_ac˚±_muãx
) {

836 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

837 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

838  
NGX_ERROR
;

842 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

843  
NGX_ERROR
;

851  
NGX_OK
;

852 
	}
}

855 
ngx_öt_t


856 
	$ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
)

858 
¢dlow©
;

860 #i‡(
NGX_HAVE_LOWAT_EVENT
)

862 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

863 
c
->
wrôe
->
avaûabÀ
 = 
low©
;

864  
NGX_OK
;

869 i‡(
low©
 =0 || 
c
->
¢dlow©
) {

870  
NGX_OK
;

873 
¢dlow©
 = (Ë
low©
;

875 i‡(
	`£tsock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_SNDLOWAT
,

876 (c⁄° *Ë&
¢dlow©
, ())

879 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

881  
NGX_ERROR
;

884 
c
->
¢dlow©
 = 1;

886  
NGX_OK
;

887 
	}
}

891 
	$ngx_evíts_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

893 *
rv
;

894 ***
˘x
;

895 
ngx_uöt_t
 
i
;

896 
ngx_c⁄f_t
 
pcf
;

897 
ngx_evít_moduÀ_t
 *
m
;

899 i‡(*(**Ë
c⁄f
) {

905 
ngx_evít_max_moduÀ
 = 0;

906 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

907 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

911 
ngx_moduÀs
[
i
]->
˘x_ödex
 = 
ngx_evít_max_moduÀ
++;

914 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*));

915 i‡(
˘x
 =
NULL
) {

916  
NGX_CONF_ERROR
;

919 *
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 
ngx_evít_max_moduÀ
 * (*));

920 i‡(*
˘x
 =
NULL
) {

921  
NGX_CONF_ERROR
;

924 *(**Ë
c⁄f
 = 
˘x
;

926 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

927 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

931 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

933 i‡(
m
->
¸óã_c⁄f
) {

934 (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
m
->
	`¸óã_c⁄f
(
cf
->
cy˛e
);

935 i‡((*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

936  
NGX_CONF_ERROR
;

941 
pcf
 = *
cf
;

942 
cf
->
˘x
 = ctx;

943 
cf
->
moduÀ_ty≥
 = 
NGX_EVENT_MODULE
;

944 
cf
->
cmd_ty≥
 = 
NGX_EVENT_CONF
;

946 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

948 *
cf
 = 
pcf
;

950 i‡(
rv
 !
NGX_CONF_OK
)

951  
rv
;

953 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

954 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

958 
m
 = 
ngx_moduÀs
[
i
]->
˘x
;

960 i‡(
m
->
öô_c⁄f
) {

961 
rv
 = 
m
->
	`öô_c⁄f
(
cf
->
cy˛e
, (*
˘x
)[
ngx_moduÀs
[
i
]->
˘x_ödex
]);

962 i‡(
rv
 !
NGX_CONF_OK
) {

963  
rv
;

968  
NGX_CONF_OK
;

969 
	}
}

973 
	$ngx_evít_c⁄√˘i⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

975 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

977 
ngx_°r_t
 *
vÆue
;

979 i‡(
ecf
->
c⁄√˘i⁄s
 !
NGX_CONF_UNSET_UINT
) {

983 i‡(
	`ngx_°rcmp
(
cmd
->
«me
.
d©a
, "connections") == 0) {

984 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

989 
vÆue
 = 
cf
->
¨gs
->
ñts
;

990 
ecf
->
c⁄√˘i⁄s
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

991 i‡(
ecf
->
c⁄√˘i⁄s
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

992 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

993 "övÆidÇumbî \"%V\"", &
vÆue
[1]);

995  
NGX_CONF_ERROR
;

998 
cf
->
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1000  
NGX_CONF_OK
;

1001 
	}
}

1005 
	$ngx_evít_u£
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1007 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1009 
ngx_öt_t
 
m
;

1010 
ngx_°r_t
 *
vÆue
;

1011 
ngx_evít_c⁄f_t
 *
ﬁd_ecf
;

1012 
ngx_evít_moduÀ_t
 *
moduÀ
;

1014 i‡(
ecf
->
u£
 !
NGX_CONF_UNSET_UINT
) {

1018 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1020 i‡(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
) {

1021 
ﬁd_ecf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
ﬁd_cy˛e
->
c⁄f_˘x
,

1022 
ngx_evít_c‹e_moduÀ
);

1024 
ﬁd_ecf
 = 
NULL
;

1028 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

1029 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1033 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

1034 i‡(
moduÀ
->
«me
->
Àn
 =
vÆue
[1].len) {

1035 i‡(
	`ngx_°rcmp
(
moduÀ
->
«me
->
d©a
, 
vÆue
[1].data) == 0) {

1036 
ecf
->
u£
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

1037 
ecf
->
«me
 = 
moduÀ
->«me->
d©a
;

1039 i‡(
ngx_¥o˚ss
 =
NGX_PROCESS_SINGLE


1040 && 
ﬁd_ecf


1041 && 
ﬁd_ecf
->
u£
 !
ecf
->use)

1043 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1050 &
vÆue
[1], 
ﬁd_ecf
->
«me
);

1052  
NGX_CONF_ERROR
;

1055  
NGX_CONF_OK
;

1060 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1061 "övÆidÉvíàty≥ \"%V\"", &
vÆue
[1]);

1063  
NGX_CONF_ERROR
;

1064 
	}
}

1068 
	$ngx_evít_debug_c⁄√˘i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1070 #i‡(
NGX_DEBUG
)

1071 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1073 
ngx_öt_t
 
rc
;

1074 
ngx_°r_t
 *
vÆue
;

1075 
ngx_uæ_t
 
u
;

1076 
ngx_cidr_t
 
c
, *
cidr
;

1077 
ngx_uöt_t
 
i
;

1078 
sockaddr_ö
 *
sö
;

1079 #i‡(
NGX_HAVE_INET6
)

1080 
sockaddr_ö6
 *
sö6
;

1083 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1085 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1087 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

1088 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1089 i‡(
cidr
 =
NULL
) {

1090  
NGX_CONF_ERROR
;

1093 
cidr
->
Ámûy
 = 
AF_UNIX
;

1094  
NGX_CONF_OK
;

1099 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
c
);

1101 i‡(
rc
 !
NGX_ERROR
) {

1102 i‡(
rc
 =
NGX_DONE
) {

1103 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1105 &
vÆue
[1]);

1108 
cidr
 = 
	`ngx_¨øy_push
(&
ecf
->
debug_c⁄√˘i⁄
);

1109 i‡(
cidr
 =
NULL
) {

1110  
NGX_CONF_ERROR
;

1113 *
cidr
 = 
c
;

1115  
NGX_CONF_OK
;

1118 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1119 
u
.
ho°
 = 
vÆue
[1];

1121 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1122 i‡(
u
.
îr
) {

1123 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1125 
u
.
îr
, &u.
ho°
);

1128  
NGX_CONF_ERROR
;

1131 
cidr
 = 
	`ngx_¨øy_push_n
(&
ecf
->
debug_c⁄√˘i⁄
, 
u
.
«ddrs
);

1132 i‡(
cidr
 =
NULL
) {

1133  
NGX_CONF_ERROR
;

1136 
	`ngx_memzîo
(
cidr
, 
u
.
«ddrs
 * (
ngx_cidr_t
));

1138 
i
 = 0; i < 
u
.
«ddrs
; i++) {

1139 
cidr
[
i
].
Ámûy
 = 
u
.
addrs
[i].
sockaddr
->
ß_Ámûy
;

1141 
cidr
[
i
].
Ámûy
) {

1143 #i‡(
NGX_HAVE_INET6
)

1144 
AF_INET6
:

1145 
sö6
 = (
sockaddr_ö6
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1146 
cidr
[
i
].
u
.
ö6
.
addr
 = 
sö6
->
sö6_addr
;

1147 
	`ngx_mem£t
(
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
, 0xff, 16);

1152 
sö
 = (
sockaddr_ö
 *Ë
u
.
addrs
[
i
].
sockaddr
;

1153 
cidr
[
i
].
u
.
ö
.
addr
 = 
sö
->
sö_addr
.
s_addr
;

1154 
cidr
[
i
].
u
.
ö
.
mask
 = 0xffffffff;

1161 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1167  
NGX_CONF_OK
;

1168 
	}
}

1172 
	$ngx_evít_c‹e_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

1174 
ngx_evít_c⁄f_t
 *
ecf
;

1176 
ecf
 = 
	`ngx_∑Œoc
(
cy˛e
->
poﬁ
, (
ngx_evít_c⁄f_t
));

1177 i‡(
ecf
 =
NULL
) {

1178  
NULL
;

1181 
ecf
->
c⁄√˘i⁄s
 = 
NGX_CONF_UNSET_UINT
;

1182 
ecf
->
u£
 = 
NGX_CONF_UNSET_UINT
;

1183 
ecf
->
mu…i_ac˚±
 = 
NGX_CONF_UNSET
;

1184 
ecf
->
ac˚±_muãx
 = 
NGX_CONF_UNSET
;

1185 
ecf
->
ac˚±_muãx_dñay
 = 
NGX_CONF_UNSET_MSEC
;

1186 
ecf
->
«me
 = (*Ë
NGX_CONF_UNSET
;

1188 #i‡(
NGX_DEBUG
)

1190 i‡(
	`ngx_¨øy_öô
(&
ecf
->
debug_c⁄√˘i⁄
, 
cy˛e
->
poﬁ
, 4,

1191 (
ngx_cidr_t
)Ë=
NGX_ERROR
)

1193  
NULL
;

1198  
ecf
;

1199 
	}
}

1203 
	$ngx_evít_c‹e_öô_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
, *
c⁄f
)

1205 
ngx_evít_c⁄f_t
 *
ecf
 = 
c⁄f
;

1207 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1208 
fd
;

1210 #i‡(
NGX_HAVE_RTSIG
)

1211 
ngx_uöt_t
 
πsig
;

1212 
ngx_c‹e_c⁄f_t
 *
ccf
;

1214 
ngx_öt_t
 
i
;

1215 
ngx_moduÀ_t
 *
moduÀ
;

1216 
ngx_evít_moduÀ_t
 *
evít_moduÀ
;

1218 
moduÀ
 = 
NULL
;

1220 #i‡(
NGX_HAVE_EPOLL
Ë&& !(
NGX_TEST_BUILD_EPOLL
)

1222 
fd
 = 
	`ïﬁl_¸óã
(100);

1224 i‡(
fd
 != -1) {

1225 (Ë
	`˛o£
(
fd
);

1226 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1228 } i‡(
ngx_î∫o
 !
NGX_ENOSYS
) {

1229 
moduÀ
 = &
ngx_ïﬁl_moduÀ
;

1234 #i‡(
NGX_HAVE_RTSIG
)

1236 i‡(
moduÀ
 =
NULL
) {

1237 
moduÀ
 = &
ngx_πsig_moduÀ
;

1238 
πsig
 = 1;

1241 
πsig
 = 0;

1246 #i‡(
NGX_HAVE_DEVPOLL
)

1248 
moduÀ
 = &
ngx_devpﬁl_moduÀ
;

1252 #i‡(
NGX_HAVE_KQUEUE
)

1254 
moduÀ
 = &
ngx_kqueue_moduÀ
;

1258 #i‡(
NGX_HAVE_SELECT
)

1260 i‡(
moduÀ
 =
NULL
) {

1261 
moduÀ
 = &
ngx_£À˘_moduÀ
;

1266 i‡(
moduÀ
 =
NULL
) {

1267 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1269 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_EVENT_MODULE
) {

1273 
evít_moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

1275 i‡(
	`ngx_°rcmp
(
evít_moduÀ
->
«me
->
d©a
, 
evít_c‹e_«me
.data) == 0)

1280 
moduÀ
 = 
ngx_moduÀs
[
i
];

1285 i‡(
moduÀ
 =
NULL
) {

1286 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0, "noÉvents module found");

1287  
NGX_CONF_ERROR
;

1290 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
c⁄√˘i⁄s
, 
DEFAULT_CONNECTIONS
);

1291 
cy˛e
->
c⁄√˘i⁄_n
 = 
ecf
->
c⁄√˘i⁄s
;

1293 
	`ngx_c⁄f_öô_uöt_vÆue
(
ecf
->
u£
, 
moduÀ
->
˘x_ödex
);

1295 
evít_moduÀ
 = 
moduÀ
->
˘x
;

1296 
	`ngx_c⁄f_öô_±r_vÆue
(
ecf
->
«me
, 
evít_moduÀ
->«me->
d©a
);

1298 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
mu…i_ac˚±
, 0);

1299 
	`ngx_c⁄f_öô_vÆue
(
ecf
->
ac˚±_muãx
, 1);

1300 
	`ngx_c⁄f_öô_m£c_vÆue
(
ecf
->
ac˚±_muãx_dñay
, 500);

1303 #i‡(
NGX_HAVE_RTSIG
)

1305 i‡(!
πsig
) {

1306  
NGX_CONF_OK
;

1309 i‡(
ecf
->
ac˚±_muãx
) {

1310  
NGX_CONF_OK
;

1313 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

1315 i‡(
ccf
->
w‹kî_¥o˚s£s
 == 0) {

1316  
NGX_CONF_OK
;

1319 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 0,

1322  
NGX_CONF_ERROR
;

1326  
NGX_CONF_OK
;

1329 
	}
}

	@src/event/ngx_event.h

8 #i‚de‡
_NGX_EVENT_H_INCLUDED_


9 
	#_NGX_EVENT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_INVALID_INDEX
 0xd0d0d0d0

	)

19 #i‡(
NGX_HAVE_IOCP
)

22 
WSAOVERLAPPED
 
	movÕ
;

23 
ngx_evít_t
 *
	mevít
;

24 
	mîr‹
;

25 } 
	tngx_evít_ovÕ_t
;

31 
ngx_uöt_t
 
	mlock
;

33 
ngx_evít_t
 *
	mevíts
;

34 
ngx_evít_t
 *
	mœ°
;

35 } 
	tngx_evít_muãx_t
;

38 
	sngx_evít_s
 {

39 *
	md©a
;

41 
	mwrôe
:1;

43 
	mac˚±
:1;

46 
	mö°™˚
:1;

52 
	ma˘ive
:1;

54 
	mdißbÀd
:1;

57 
	mªady
:1;

59 
	m⁄eshŸ
:1;

62 
	mcom∂ëe
:1;

64 
	meof
:1;

65 
	mîr‹
:1;

67 
	mtimedout
:1;

68 
	mtimî_£t
:1;

70 
	mdñayed
:1;

72 
	mªad_disˇrded
:1;

74 
	mu√x≥˘ed_eof
:1;

76 
	mde„ºed_ac˚±
:1;

79 
	m≥ndög_eof
:1;

81 #i‡!(
NGX_THREADS
)

82 
	mpo°ed_ªady
:1;

85 #i‡(
NGX_WIN32
)

87 
	mac˚±_c⁄ãxt_upd©ed
:1;

90 #i‡(
NGX_HAVE_KQUEUE
)

91 
	mkq_vnode
:1;

94 
	mkq_î∫o
;

111 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

112 
	mavaûabÀ
;

114 
	mavaûabÀ
:1;

117 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

120 #i‡(
NGX_HAVE_AIO
)

122 #i‡(
NGX_HAVE_IOCP
)

123 
ngx_evít_ovÕ_t
 
	movÕ
;

125 
aiocb
 
	maiocb
;

130 
ngx_uöt_t
 
	mödex
;

132 
ngx_log_t
 *
	mlog
;

134 
ngx_rbåì_node_t
 
	mtimî
;

136 
	m˛o£d
:1;

139 
	mch™√l
:1;

140 
	mªsﬁvî
:1;

142 #i‡(
NGX_THREADS
)

144 
	mlocked
:1;

146 
	mpo°ed_ªady
:1;

147 
	mpo°ed_timedout
:1;

148 
	mpo°ed_eof
:1;

150 #i‡(
NGX_HAVE_KQUEUE
)

152 
	mpo°ed_î∫o
;

155 #i‡(
NGX_HAVE_KQUEUE
Ë|| (
NGX_HAVE_IOCP
)

156 
	mpo°ed_avaûabÀ
;

158 
	mpo°ed_avaûabÀ
:1;

161 
ngx_©omic_t
 *
	mlock
;

162 
ngx_©omic_t
 *
	mown_lock
;

167 
ngx_evít_t
 *
	m√xt
;

168 
ngx_evít_t
 **
	m¥ev
;

181 *
	mthr_˘x
;

183 #i‡(
NGX_EVENT_T_PADDING
)

187 
uöt32_t
 
	m∑ddög
[
NGX_EVENT_T_PADDING
];

193 #i‡(
NGX_HAVE_FILE_AIO
)

195 
	sngx_evít_aio_s
 {

196 *
	md©a
;

197 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

198 
ngx_fûe_t
 *
	mfûe
;

200 
ngx_fd_t
 
	mfd
;

202 #i‡(
NGX_HAVE_EVENTFD
)

203 
öt64_t
 
	mªs
;

204 #i‡(
NGX_TEST_BUILD_EPOLL
)

205 
ngx_îr_t
 
	mîr
;

206 
size_t
 
	mnbyãs
;

209 
ngx_îr_t
 
	mîr
;

210 
size_t
 
	mnbyãs
;

213 #i‡(
NGX_HAVE_AIO_SENDFILE
)

214 
off_t
 
	mœ°_off£t
;

217 
ngx_aiocb_t
 
	maiocb
;

218 
ngx_evít_t
 
	mevít
;

225 
ngx_öt_t
 (*
add
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

226 
ngx_öt_t
 (*
dñ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

228 
ngx_öt_t
 (*
íabÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

229 
ngx_öt_t
 (*
dißbÀ
)(
ngx_evít_t
 *
	mev
,Çgx_öt_à
	mevít
, 
ngx_uöt_t
 
	mÊags
);

231 
ngx_öt_t
 (*
add_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
);

232 
ngx_öt_t
 (*
dñ_c⁄n
)(
ngx_c⁄√˘i⁄_t
 *
	mc
, 
ngx_uöt_t
 
	mÊags
);

234 
ngx_öt_t
 (*
¥o˚ss_ch™ges
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_uöt_t
 
	mnowaô
);

235 
ngx_öt_t
 (*
¥o˚ss_evíts
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
,

236 
ngx_uöt_t
 
	mÊags
);

238 
ngx_öt_t
 (*
öô
)(
ngx_cy˛e_t
 *
	mcy˛e
, 
ngx_m£c_t
 
	mtimî
);

239 (*
	md⁄e
)(
ngx_cy˛e_t
 *
	mcy˛e
);

240 } 
	tngx_evít_a˘i⁄s_t
;

243 
ngx_evít_a˘i⁄s_t
 
ngx_evít_a˘i⁄s
;

250 
	#NGX_USE_LEVEL_EVENT
 0x00000001

	)

256 
	#NGX_USE_ONESHOT_EVENT
 0x00000002

	)

262 
	#NGX_USE_CLEAR_EVENT
 0x00000004

	)

268 
	#NGX_USE_KQUEUE_EVENT
 0x00000008

	)

274 
	#NGX_USE_LOWAT_EVENT
 0x00000010

	)

279 
	#NGX_USE_GREEDY_EVENT
 0x00000020

	)

284 
	#NGX_USE_EPOLL_EVENT
 0x00000040

	)

289 
	#NGX_USE_RTSIG_EVENT
 0x00000080

	)

295 
	#NGX_USE_AIO_EVENT
 0x00000100

	)

301 
	#NGX_USE_IOCP_EVENT
 0x00000200

	)

307 
	#NGX_USE_FD_EVENT
 0x00000400

	)

313 
	#NGX_USE_TIMER_EVENT
 0x00000800

	)

319 
	#NGX_USE_EVENTPORT_EVENT
 0x00001000

	)

324 
	#NGX_USE_VNODE_EVENT
 0x00002000

	)

337 
	#NGX_CLOSE_EVENT
 1

	)

343 
	#NGX_DISABLE_EVENT
 2

	)

348 
	#NGX_FLUSH_EVENT
 4

	)

352 
	#NGX_LOWAT_EVENT
 0

	)

353 
	#NGX_VNODE_EVENT
 0

	)

356 #i‡(
NGX_HAVE_KQUEUE
)

358 
	#NGX_READ_EVENT
 
EVFILT_READ


	)

359 
	#NGX_WRITE_EVENT
 
EVFILT_WRITE


	)

361 #unde‡
NGX_VNODE_EVENT


362 
	#NGX_VNODE_EVENT
 
EVFILT_VNODE


	)

371 #unde‡
NGX_CLOSE_EVENT


372 
	#NGX_CLOSE_EVENT
 
EV_EOF


	)

374 #unde‡
NGX_LOWAT_EVENT


375 
	#NGX_LOWAT_EVENT
 
EV_FLAG1


	)

377 #unde‡
NGX_FLUSH_EVENT


378 
	#NGX_FLUSH_EVENT
 
EV_ERROR


	)

380 
	#NGX_LEVEL_EVENT
 0

	)

381 
	#NGX_ONESHOT_EVENT
 
EV_ONESHOT


	)

382 
	#NGX_CLEAR_EVENT
 
EV_CLEAR


	)

384 #unde‡
NGX_DISABLE_EVENT


385 
	#NGX_DISABLE_EVENT
 
EV_DISABLE


	)

388 #ñi‡(
NGX_HAVE_DEVPOLL
 || 
NGX_HAVE_EVENTPORT
)

390 
	#NGX_READ_EVENT
 
POLLIN


	)

391 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

393 
	#NGX_LEVEL_EVENT
 0

	)

394 
	#NGX_ONESHOT_EVENT
 1

	)

397 #ñi‡(
NGX_HAVE_EPOLL
)

399 
	#NGX_READ_EVENT
 
EPOLLIN


	)

400 
	#NGX_WRITE_EVENT
 
EPOLLOUT


	)

402 
	#NGX_LEVEL_EVENT
 0

	)

403 
	#NGX_CLEAR_EVENT
 
EPOLLET


	)

404 
	#NGX_ONESHOT_EVENT
 0x70000000

	)

406 
	#NGX_ONESHOT_EVENT
 
EPOLLONESHOT


	)

410 #ñi‡(
NGX_HAVE_POLL
)

412 
	#NGX_READ_EVENT
 
POLLIN


	)

413 
	#NGX_WRITE_EVENT
 
POLLOUT


	)

415 
	#NGX_LEVEL_EVENT
 0

	)

416 
	#NGX_ONESHOT_EVENT
 1

	)

421 
	#NGX_READ_EVENT
 0

	)

422 
	#NGX_WRITE_EVENT
 1

	)

424 
	#NGX_LEVEL_EVENT
 0

	)

425 
	#NGX_ONESHOT_EVENT
 1

	)

430 #i‡(
NGX_HAVE_IOCP
)

431 
	#NGX_IOCP_ACCEPT
 0

	)

432 
	#NGX_IOCP_IO
 1

	)

433 
	#NGX_IOCP_CONNECT
 2

	)

437 #i‚de‡
NGX_CLEAR_EVENT


438 
	#NGX_CLEAR_EVENT
 0

	)

442 
	#ngx_¥o˚ss_ch™ges
 
ngx_evít_a˘i⁄s
.
¥o˚ss_ch™ges


	)

443 
	#ngx_¥o˚ss_evíts
 
ngx_evít_a˘i⁄s
.
¥o˚ss_evíts


	)

444 
	#ngx_d⁄e_evíts
 
ngx_evít_a˘i⁄s
.
d⁄e


	)

446 
	#ngx_add_evít
 
ngx_evít_a˘i⁄s
.
add


	)

447 
	#ngx_dñ_evít
 
ngx_evít_a˘i⁄s
.
dñ


	)

448 
	#ngx_add_c⁄n
 
ngx_evít_a˘i⁄s
.
add_c⁄n


	)

449 
	#ngx_dñ_c⁄n
 
ngx_evít_a˘i⁄s
.
dñ_c⁄n


	)

451 
	#ngx_add_timî
 
ngx_evít_add_timî


	)

452 
	#ngx_dñ_timî
 
ngx_evít_dñ_timî


	)

455 
ngx_os_io_t
 
ngx_io
;

457 
	#ngx_ªcv
 
ngx_io
.
ªcv


	)

458 
	#ngx_ªcv_chaö
 
ngx_io
.
ªcv_chaö


	)

459 
	#ngx_udp_ªcv
 
ngx_io
.
udp_ªcv


	)

460 
	#ngx_£nd
 
ngx_io
.
£nd


	)

461 
	#ngx_£nd_chaö
 
ngx_io
.
£nd_chaö


	)

464 
	#NGX_EVENT_MODULE
 0x544E5645

	)

465 
	#NGX_EVENT_CONF
 0x02000000

	)

469 
ngx_uöt_t
 
	mc⁄√˘i⁄s
;

470 
ngx_uöt_t
 
	mu£
;

472 
ngx_Êag_t
 
	mmu…i_ac˚±
;

473 
ngx_Êag_t
 
	mac˚±_muãx
;

475 
ngx_m£c_t
 
	mac˚±_muãx_dñay
;

477 
u_ch¨
 *
	m«me
;

479 #i‡(
NGX_DEBUG
)

480 
ngx_¨øy_t
 
	mdebug_c⁄√˘i⁄
;

482 } 
	tngx_evít_c⁄f_t
;

486 
ngx_°r_t
 *
	m«me
;

488 *(*
	m¸óã_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
);

489 *(*
	möô_c⁄f
)(
ngx_cy˛e_t
 *
	mcy˛e
, *
	mc⁄f
);

491 
ngx_evít_a˘i⁄s_t
 
	ma˘i⁄s
;

492 } 
	tngx_evít_moduÀ_t
;

495 
ngx_©omic_t
 *
ngx_c⁄√˘i⁄_cou¡î
;

497 
ngx_©omic_t
 *
ngx_ac˚±_muãx_±r
;

498 
ngx_shmtx_t
 
ngx_ac˚±_muãx
;

499 
ngx_uöt_t
 
ngx_u£_ac˚±_muãx
;

500 
ngx_uöt_t
 
ngx_ac˚±_evíts
;

501 
ngx_uöt_t
 
ngx_ac˚±_muãx_hñd
;

502 
ngx_m£c_t
 
ngx_ac˚±_muãx_dñay
;

503 
ngx_öt_t
 
ngx_ac˚±_dißbÀd
;

506 #i‡(
NGX_STAT_STUB
)

508 
ngx_©omic_t
 *
ngx_°©_ac˚±ed
;

509 
ngx_©omic_t
 *
ngx_°©_h™dÀd
;

510 
ngx_©omic_t
 *
ngx_°©_ªque°s
;

511 
ngx_©omic_t
 *
ngx_°©_a˘ive
;

512 
ngx_©omic_t
 *
ngx_°©_ªadög
;

513 
ngx_©omic_t
 *
ngx_°©_wrôög
;

514 
ngx_©omic_t
 *
ngx_°©_waôög
;

519 
	#NGX_UPDATE_TIME
 1

	)

520 
	#NGX_POST_EVENTS
 2

	)

521 
	#NGX_POST_THREAD_EVENTS
 4

	)

524 
sig_©omic_t
 
ngx_evít_timî_Æ¨m
;

525 
ngx_uöt_t
 
ngx_evít_Êags
;

526 
ngx_moduÀ_t
 
ngx_evíts_moduÀ
;

527 
ngx_moduÀ_t
 
ngx_evít_c‹e_moduÀ
;

530 
	#ngx_evít_gë_c⁄f
(
c⁄f_˘x
, 
moduÀ
) \

531 (*(
	`ngx_gë_c⁄f
(
c⁄f_˘x
, 
ngx_evíts_moduÀ
))Ë[
moduÀ
.
˘x_ödex
];

	)

535 
ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
);

536 
ngx_öt_t
 
ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
);

537 
u_ch¨
 *
ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

540 
ngx_¥o˚ss_evíts_™d_timîs
(
ngx_cy˛e_t
 *
cy˛e
);

541 
ngx_öt_t
 
ngx_h™dÀ_ªad_evít
(
ngx_evít_t
 *
ªv
, 
ngx_uöt_t
 
Êags
);

542 
ngx_öt_t
 
ngx_h™dÀ_wrôe_evít
(
ngx_evít_t
 *
wev
, 
size_t
 
low©
);

545 #i‡(
NGX_WIN32
)

546 
ngx_evít_ac˚±ex
(
ngx_evít_t
 *
ev
);

547 
ngx_öt_t
 
ngx_evít_po°_ac˚±ex
(
ngx_li°íög_t
 *
ls
, 
ngx_uöt_t
 
n
);

548 
u_ch¨
 *
ngx_ac˚±ex_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

552 
ngx_öt_t
 
ngx_£nd_low©
(
ngx_c⁄√˘i⁄_t
 *
c
, 
size_t
 
low©
);

556 
	#ngx_evít_idít
(
p
Ë((
ngx_c⁄√˘i⁄_t
 *Ë’))->
fd


	)

559 
	~<ngx_evít_timî.h
>

560 
	~<ngx_evít_po°ed.h
>

561 
	~<ngx_evít_busy_lock.h
>

563 #i‡(
NGX_WIN32
)

564 
	~<ngx_io˝_moduÀ.h
>

	@src/event/ngx_event_accept.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

14 
ngx_öt_t
 
ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
);

15 
ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

19 
	$ngx_evít_ac˚±
(
ngx_evít_t
 *
ev
)

21 
sockÀn_t
 
sockÀn
;

22 
ngx_îr_t
 
îr
;

23 
ngx_log_t
 *
log
;

24 
ngx_uöt_t
 
Àvñ
;

25 
ngx_sockë_t
 
s
;

26 
ngx_evít_t
 *
ªv
, *
wev
;

27 
ngx_li°íög_t
 *
ls
;

28 
ngx_c⁄√˘i⁄_t
 *
c
, *
lc
;

29 
ngx_evít_c⁄f_t
 *
ecf
;

30 
u_ch¨
 
ß
[
NGX_SOCKADDRLEN
];

31 #i‡(
NGX_HAVE_ACCEPT4
)

32 
ngx_uöt_t
 
u£_ac˚±4
 = 1;

35 i‡(
ev
->
timedout
) {

36 i‡(
	`ngx_íabÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
Ë!
NGX_OK
) {

40 
ev
->
timedout
 = 0;

43 
ecf
 = 
	`ngx_evít_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
, 
ngx_evít_c‹e_moduÀ
);

45 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

46 
ev
->
avaûabÀ
 = 1;

48 } i‡(!(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
)) {

49 
ev
->
avaûabÀ
 = 
ecf
->
mu…i_ac˚±
;

52 
lc
 = 
ev
->
d©a
;

53 
ls
 = 
lc
->
li°íög
;

54 
ev
->
ªady
 = 0;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

57 "ac˚± o¿%V,Ñódy: %d", &
ls
->
addr_ãxt
, 
ev
->
avaûabÀ
);

60 
sockÀn
 = 
NGX_SOCKADDRLEN
;

62 #i‡(
NGX_HAVE_ACCEPT4
)

63 i‡(
u£_ac˚±4
) {

64 
s
 = 
	`ac˚±4
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
,

65 
SOCK_NONBLOCK
);

67 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

70 
s
 = 
	`ac˚±
(
lc
->
fd
, (
sockaddr
 *Ë
ß
, &
sockÀn
);

73 i‡(
s
 == -1) {

74 
îr
 = 
ngx_sockë_î∫o
;

76 i‡(
îr
 =
NGX_EAGAIN
) {

77 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 
îr
,

82 
Àvñ
 = 
NGX_LOG_ALERT
;

84 i‡(
îr
 =
NGX_ECONNABORTED
) {

85 
Àvñ
 = 
NGX_LOG_ERR
;

87 } i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

88 
Àvñ
 = 
NGX_LOG_CRIT
;

91 #i‡(
NGX_HAVE_ACCEPT4
)

92 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
,

93 
u£_ac˚±4
 ? "accept4() failed" : "accept() failed");

95 i‡(
u£_ac˚±4
 && 
îr
 =
NGX_ENOSYS
) {

96 
u£_ac˚±4
 = 0;

97 
ngx_öhîôed_n⁄blockög
 = 0;

101 
	`ngx_log_îr‹
(
Àvñ
, 
ev
->
log
, 
îr
, "accept() failed");

104 i‡(
îr
 =
NGX_ECONNABORTED
) {

105 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

106 
ev
->
avaûabÀ
--;

109 i‡(
ev
->
avaûabÀ
) {

114 i‡(
îr
 =
NGX_EMFILE
 ||Éº =
NGX_ENFILE
) {

115 i‡(
	`ngx_dißbÀ_ac˚±_evíts
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
)

116 !
NGX_OK
)

121 i‡(
ngx_u£_ac˚±_muãx
) {

122 i‡(
ngx_ac˚±_muãx_hñd
) {

123 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

124 
ngx_ac˚±_muãx_hñd
 = 0;

127 
ngx_ac˚±_dißbÀd
 = 1;

130 
	`ngx_add_timî
(
ev
, 
ecf
->
ac˚±_muãx_dñay
);

137 #i‡(
NGX_STAT_STUB
)

138 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ac˚±ed
, 1);

141 
ngx_ac˚±_dißbÀd
 = 
ngx_cy˛e
->
c⁄√˘i⁄_n
 / 8

142 - 
ngx_cy˛e
->
‰ì_c⁄√˘i⁄_n
;

144 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
ev
->
log
);

146 i‡(
c
 =
NULL
) {

147 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

148 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

149 
ngx_˛o£_sockë_n
 " failed");

155 #i‡(
NGX_STAT_STUB
)

156 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, 1);

159 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
ls
->
poﬁ_size
, 
ev
->
log
);

160 i‡(
c
->
poﬁ
 =
NULL
) {

161 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

165 
c
->
sockaddr
 = 
	`ngx_∑Œoc
(c->
poﬁ
, 
sockÀn
);

166 i‡(
c
->
sockaddr
 =
NULL
) {

167 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

171 
	`ngx_mem˝y
(
c
->
sockaddr
, 
ß
, 
sockÀn
);

173 
log
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_log_t
));

174 i‡(
log
 =
NULL
) {

175 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

181 i‡(
ngx_öhîôed_n⁄blockög
) {

182 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

183 i‡(
	`ngx_blockög
(
s
) == -1) {

184 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

185 
ngx_blockög_n
 " failed");

186 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

192 i‡(!(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
))) {

193 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_sockë_î∫o
,

195 
ngx_n⁄blockög_n
 " failed");

196 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

202 *
log
 = 
ls
->log;

204 
c
->
ªcv
 = 
ngx_ªcv
;

205 
c
->
£nd
 = 
ngx_£nd
;

206 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

207 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

209 
c
->
log
 =Üog;

210 
c
->
poﬁ
->
log
 =Üog;

212 
c
->
sockÀn
 = socklen;

213 
c
->
li°íög
 = 
ls
;

214 
c
->
loˇl_sockaddr
 = 
ls
->
sockaddr
;

216 
c
->
u√x≥˘ed_eof
 = 1;

218 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

219 i‡(
c
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

220 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

221 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

222 #i‡(
NGX_SOLARIS
)

224 
c
->
£ndfûe
 = 0;

229 
ªv
 = 
c
->
ªad
;

230 
wev
 = 
c
->
wrôe
;

232 
wev
->
ªady
 = 1;

234 i‡(
ngx_evít_Êags
 & (
NGX_USE_AIO_EVENT
|
NGX_USE_RTSIG_EVENT
)) {

236 
ªv
->
ªady
 = 1;

239 i‡(
ev
->
de„ºed_ac˚±
) {

240 
ªv
->
ªady
 = 1;

241 #i‡(
NGX_HAVE_KQUEUE
)

242 
ªv
->
avaûabÀ
 = 1;

246 
ªv
->
log
 =Üog;

247 
wev
->
log
 =Üog;

258 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

260 #i‡(
NGX_STAT_STUB
)

261 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_h™dÀd
, 1);

264 #i‡(
NGX_THREADS
)

265 
ªv
->
lock
 = &
c
->lock;

266 
wev
->
lock
 = &
c
->lock;

267 
ªv
->
own_lock
 = &
c
->
lock
;

268 
wev
->
own_lock
 = &
c
->
lock
;

271 i‡(
ls
->
addr_¡›
) {

272 
c
->
addr_ãxt
.
d©a
 = 
	`ngx_≤Æloc
(c->
poﬁ
, 
ls
->
addr_ãxt_max_Àn
);

273 i‡(
c
->
addr_ãxt
.
d©a
 =
NULL
) {

274 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

278 
c
->
addr_ãxt
.
Àn
 = 
	`ngx_sock_¡›
(c->
sockaddr
, c->addr_ãxt.
d©a
,

279 
ls
->
addr_ãxt_max_Àn
, 0);

280 i‡(
c
->
addr_ãxt
.
Àn
 == 0) {

281 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

286 #i‡(
NGX_DEBUG
)

289 
sockaddr_ö
 *
sö
;

290 
ngx_cidr_t
 *
cidr
;

291 
ngx_uöt_t
 
i
;

292 #i‡(
NGX_HAVE_INET6
)

293 
sockaddr_ö6
 *
sö6
;

294 
ngx_uöt_t
 
n
;

297 
cidr
 = 
ecf
->
debug_c⁄√˘i⁄
.
ñts
;

298 
i
 = 0; i < 
ecf
->
debug_c⁄√˘i⁄
.
√…s
; i++) {

299 i‡(
cidr
[
i
].
Ámûy
 !
c
->
sockaddr
->
ß_Ámûy
) {

300 
√xt
;

303 
cidr
[
i
].
Ámûy
) {

305 #i‡(
NGX_HAVE_INET6
)

306 
AF_INET6
:

307 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
sockaddr
;

308 
n
 = 0;Ç < 16;Ç++) {

309 i‡((
sö6
->
sö6_addr
.
s6_addr
[
n
]

310 & 
cidr
[
i
].
u
.
ö6
.
mask
.
s6_addr
[
n
])

311 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

313 
√xt
;

319 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

320 
AF_UNIX
:

325 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

326 i‡((
sö
->
sö_addr
.
s_addr
 & 
cidr
[
i
].
u
.
ö
.
mask
)

327 !
cidr
[
i
].
u
.
ö
.
addr
)

329 
√xt
;

334 
log
->
log_Àvñ
 = 
NGX_LOG_DEBUG_CONNECTION
|
NGX_LOG_DEBUG_ALL
;

337 
√xt
:

344 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

345 "*%dác˚±: %V fd:%d", 
c
->
numbî
, &c->
addr_ãxt
, 
s
);

347 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

348 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

349 
	`ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
c
);

354 
log
->
d©a
 = 
NULL
;

355 
log
->
h™dÀr
 = 
NULL
;

357 
ls
->
	`h™dÀr
(
c
);

359 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

360 
ev
->
avaûabÀ
--;

363 } 
ev
->
avaûabÀ
);

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_åylock_ac˚±_muãx
(
ngx_cy˛e_t
 *
cy˛e
)

370 i‡(
	`ngx_shmtx_åylock
(&
ngx_ac˚±_muãx
)) {

372 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

375 i‡(
ngx_ac˚±_muãx_hñd


376 && 
ngx_ac˚±_evíts
 == 0

377 && !(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
))

379  
NGX_OK
;

382 i‡(
	`ngx_íabÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

383 
	`ngx_shmtx_u∆ock
(&
ngx_ac˚±_muãx
);

384  
NGX_ERROR
;

387 
ngx_ac˚±_evíts
 = 0;

388 
ngx_ac˚±_muãx_hñd
 = 1;

390  
NGX_OK
;

393 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

394 "ac˚± muãxÜock faûed: %ui", 
ngx_ac˚±_muãx_hñd
);

396 i‡(
ngx_ac˚±_muãx_hñd
) {

397 i‡(
	`ngx_dißbÀ_ac˚±_evíts
(
cy˛e
Ë=
NGX_ERROR
) {

398  
NGX_ERROR
;

401 
ngx_ac˚±_muãx_hñd
 = 0;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_íabÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

411 
ngx_uöt_t
 
i
;

412 
ngx_li°íög_t
 *
ls
;

413 
ngx_c⁄√˘i⁄_t
 *
c
;

415 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

416 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

418 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

420 i‡(
c
->
ªad
->
a˘ive
) {

424 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

426 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

427  
NGX_ERROR
;

431 i‡(
	`ngx_add_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

432  
NGX_ERROR
;

437  
NGX_OK
;

438 
	}
}

441 
ngx_öt_t


442 
	$ngx_dißbÀ_ac˚±_evíts
(
ngx_cy˛e_t
 *
cy˛e
)

444 
ngx_uöt_t
 
i
;

445 
ngx_li°íög_t
 *
ls
;

446 
ngx_c⁄√˘i⁄_t
 *
c
;

448 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

449 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

451 
c
 = 
ls
[
i
].
c⁄√˘i⁄
;

453 i‡(!
c
->
ªad
->
a˘ive
) {

457 i‡(
ngx_evít_Êags
 & 
NGX_USE_RTSIG_EVENT
) {

458 i‡(
	`ngx_dñ_c⁄n
(
c
, 
NGX_DISABLE_EVENT
Ë=
NGX_ERROR
) {

459  
NGX_ERROR
;

463 i‡(
	`ngx_dñ_evít
(
c
->
ªad
, 
NGX_READ_EVENT
, 
NGX_DISABLE_EVENT
)

464 =
NGX_ERROR
)

466  
NGX_ERROR
;

471  
NGX_OK
;

472 
	}
}

476 
	$ngx_˛o£_ac˚±ed_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

478 
ngx_sockë_t
 
fd
;

480 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

482 
fd
 = 
c
->fd;

483 
c
->
fd
 = (
ngx_sockë_t
) -1;

485 i‡(
	`ngx_˛o£_sockë
(
fd
) == -1) {

486 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_sockë_î∫o
,

487 
ngx_˛o£_sockë_n
 " failed");

490 i‡(
c
->
poﬁ
) {

491 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

494 #i‡(
NGX_STAT_STUB
)

495 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

497 
	}
}

500 
u_ch¨
 *

501 
	$ngx_ac˚±_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

503  
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whileácceptingÇew connection on %V",

504 
log
->
d©a
);

505 
	}
}

	@src/event/ngx_event_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

14 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

15 
ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
);

16 
ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_öt_t


27 
	$ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
, 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

29 
ngx_öt_t
 
rc
;

31 
	`ngx_muãx_lock
(
bl
->
muãx
);

33 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

35 
bl
->
busy
, bl->
max_busy
);

37 i‡(
bl
->
busy
 < bl->
max_busy
) {

38 
bl
->
busy
++;

40 
rc
 = 
NGX_OK
;

42 } i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

43 
bl
->
waôög
++;

44 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

45 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

47 i‡(
bl
->
evíts
) {

48 
bl
->
œ°
->
√xt
 = 
˘x
;

51 
bl
->
evíts
 = 
˘x
;

54 
bl
->
œ°
 = 
˘x
;

56 
rc
 = 
NGX_AGAIN
;

59 
rc
 = 
NGX_BUSY
;

62 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

64  
rc
;

65 
	}
}

68 
ngx_öt_t


69 
	$ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

70 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

72 
ngx_öt_t
 
rc
;

74 
	`ngx_muãx_lock
(
bl
->
muãx
);

76 
rc
 = 
	`ngx_evít_busy_lock_look_ˇchóbÀ
(
bl
, 
˘x
);

78 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
evít
->
log
, 0,

80 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

88 i‡(
rc
 =
NGX_AGAIN
) {

90 i‡(
˘x
->
timî
 && 
bl
->
waôög
 < bl->
max_waôög
) {

91 
bl
->
waôög
++;

92 
	`ngx_add_timî
(
˘x
->
evít
, ctx->
timî
);

93 
˘x
->
evít
->
h™dÀr
 = 
ngx_evít_busy_lock_h™dÀr
;

95 i‡(
bl
->
evíts
 =
NULL
) {

96 
bl
->
evíts
 = 
˘x
;

98 
bl
->
œ°
->
√xt
 = 
˘x
;

100 
bl
->
œ°
 = 
˘x
;

103 
rc
 = 
NGX_BUSY
;

107 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

109  
rc
;

110 
	}
}

114 
	$ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

115 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

117 
ngx_evít_t
 *
ev
;

118 
ngx_evít_busy_lock_˘x_t
 *
wakeup
;

120 
	`ngx_muãx_lock
(
bl
->
muãx
);

122 i‡(
bl
->
evíts
) {

123 
wakeup
 = 
bl
->
evíts
;

124 
bl
->
evíts
 = bl->evíts->
√xt
;

127 
wakeup
 = 
NULL
;

128 
bl
->
busy
--;

136 i‡(
wakeup
 =
NULL
) {

137 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

141 i‡(
˘x
->
md5
) {

142 
wakeup
 = 
bl
->
evíts
; wakeup; wakeu∞wakeup->
√xt
) {

143 i‡(
wakeup
->
md5
 =
NULL
 || wakeup->
¶Ÿ
 !
˘x
->slot) {

147 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

148 
wakeup
->
ˇche_upd©ed
 = 1;

150 
ev
 = 
wakeup
->
evít
;

152 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

155 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

158 
bl
->
waôög
--;

160 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

162 
wakeup
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

163 
wakeup
->
locked
 = 1;

165 
ev
 = 
wakeup
->
evít
;

167 i‡(
ev
->
timî_£t
) {

168 
	`ngx_dñ_timî
(
ev
);

171 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

173 
	}
}

177 
	$ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

178 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

180 
ngx_evít_busy_lock_˘x_t
 *
c
, *
p
;

182 
	`ngx_muãx_lock
(
bl
->
muãx
);

184 
bl
->
waôög
--;

186 i‡(
˘x
 =
bl
->
evíts
) {

187 
bl
->
evíts
 = 
˘x
->
√xt
;

190 
p
 = 
bl
->
evíts
;

191 
c
 = 
bl
->
evíts
->
√xt
; c; c = c->next) {

192 i‡(
c
 =
˘x
) {

193 
p
->
√xt
 = 
˘x
->next;

196 
p
 = 
c
;

200 
	`ngx_muãx_u∆ock
(
bl
->
muãx
);

201 
	}
}

204 
ngx_öt_t


205 
	$ngx_evít_busy_lock_look_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

206 
ngx_evít_busy_lock_˘x_t
 *
˘x
)

208 
ngx_öt_t
 
‰ì
;

209 
ngx_uöt_t
 
i
, 
bô
, 
ˇchóbÀ
, 
mask
;

211 
bô
 = 0;

212 
ˇchóbÀ
 = 0;

213 
‰ì
 = -1;

215 #i‡(
NGX_SUPPRESS_WARN
)

216 
mask
 = 0;

219 
i
 = 0; i < 
bl
->
max_busy
; i++) {

221 i‡((
bô
 & 7) == 0) {

222 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

225 i‡(
mask
 & 1) {

226 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
˘x
->md5, 16) == 0) {

227 
˘x
->
waôög
 = 1;

228 
˘x
->
¶Ÿ
 = 
i
;

229  
NGX_AGAIN
;

231 
ˇchóbÀ
++;

233 } i‡(
‰ì
 == -1) {

234 
‰ì
 = 
i
;

237 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

238 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

239 
‰ì
 = 
i
 + 1;

245 
mask
 >>= 1;

246 
bô
++;

249 i‡(
‰ì
 == -1) {

250  
NGX_BUSY
;

254 i‡(
bl
->
busy
 =bl->
max_busy
) {

255  
NGX_BUSY
;

259 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
˘x
->md5, 16);

260 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

261 
˘x
->
¶Ÿ
 = 
‰ì
;

263 
bl
->
ˇchóbÀ
++;

264 
bl
->
busy
++;

266  
NGX_OK
;

267 
	}
}

271 
	$ngx_evít_busy_lock_h™dÀr
(
ngx_evít_t
 *
ev
)

273 
ev
->
h™dÀr
 = 
ngx_evít_busy_lock_po°ed_h™dÀr
;

275 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

276 
	}
}

280 
	$ngx_evít_busy_lock_po°ed_h™dÀr
(
ngx_evít_t
 *
ev
)

282 
ngx_evít_busy_lock_˘x_t
 *
˘x
;

284 
˘x
 = 
ev
->
d©a
;

285 
˘x
->
	`h™dÀr
(
ev
);

286 
	}
}

	@src/event/ngx_event_busy_lock.h

8 #i‚de‡
_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_EVENT_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

16 
ngx_evít_busy_lock_˘x_s
 
	tngx_evít_busy_lock_˘x_t
;

18 
	sngx_evít_busy_lock_˘x_s
 {

19 
ngx_evít_t
 *
	mevít
;

20 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

21 *
	md©a
;

22 
ngx_m£c_t
 
	mtimî
;

24 
	mlocked
:1;

25 
	mwaôög
:1;

26 
	mˇche_upd©ed
:1;

28 *
	mmd5
;

29 
ngx_öt_t
 
	m¶Ÿ
;

31 
ngx_evít_busy_lock_˘x_t
 *
	m√xt
;

36 
u_ch¨
 *
	mmd5_mask
;

37 *
	mmd5
;

38 
ngx_uöt_t
 
	mˇchóbÀ
;

40 
ngx_uöt_t
 
	mbusy
;

41 
ngx_uöt_t
 
	mmax_busy
;

43 
ngx_uöt_t
 
	mwaôög
;

44 
ngx_uöt_t
 
	mmax_waôög
;

46 
ngx_evít_busy_lock_˘x_t
 *
	mevíts
;

47 
ngx_evít_busy_lock_˘x_t
 *
	mœ°
;

49 #i‡(
NGX_THREADS
)

50 
ngx_muãx_t
 *
	mmuãx
;

52 } 
	tngx_evít_busy_lock_t
;

55 
ngx_öt_t
 
ngx_evít_busy_lock
(
ngx_evít_busy_lock_t
 *
bl
,

56 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

57 
ngx_öt_t
 
ngx_evít_busy_lock_ˇchóbÀ
(
ngx_evít_busy_lock_t
 *
bl
,

58 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

59 
ngx_evít_busy_u∆ock
(
ngx_evít_busy_lock_t
 *
bl
,

60 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

61 
ngx_evít_busy_lock_ˇn˚l
(
ngx_evít_busy_lock_t
 *
bl
,

62 
ngx_evít_busy_lock_˘x_t
 *
˘x
);

	@src/event/ngx_event_connect.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 
ngx_öt_t


15 
	$ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
)

17 
rc
;

18 
ngx_öt_t
 
evít
;

19 
ngx_îr_t
 
îr
;

20 
ngx_uöt_t
 
Àvñ
;

21 
ngx_sockë_t
 
s
;

22 
ngx_evít_t
 *
ªv
, *
wev
;

23 
ngx_c⁄√˘i⁄_t
 *
c
;

25 
rc
 = 
pc
->
	`gë
’c,Öc->
d©a
);

26 i‡(
rc
 !
NGX_OK
) {

27  
rc
;

30 
s
 = 
	`ngx_sockë
(
pc
->
sockaddr
->
ß_Ámûy
, 
SOCK_STREAM
, 0);

32 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "sockë %d", 
s
);

34 i‡(
s
 == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

36 
ngx_sockë_n
 " failed");

37  
NGX_ERROR
;

41 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
s
, 
pc
->
log
);

43 i‡(
c
 =
NULL
) {

44 i‡(
	`ngx_˛o£_sockë
(
s
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

46 
ngx_˛o£_sockë_n
 "failed");

49  
NGX_ERROR
;

52 i‡(
pc
->
rcvbuf
) {

53 i‡(
	`£tsock›t
(
s
, 
SOL_SOCKET
, 
SO_RCVBUF
,

54 (c⁄° *Ë&
pc
->
rcvbuf
, ()) == -1)

56 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

58 
Áûed
;

62 i‡(
	`ngx_n⁄blockög
(
s
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

64 
ngx_n⁄blockög_n
 " failed");

66 
Áûed
;

69 i‡(
pc
->
loˇl
) {

70 i‡(
	`böd
(
s
, 
pc
->
loˇl
->
sockaddr
,Öc->loˇl->
sockÀn
) == -1) {

71 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

72 "böd(%VËÁûed", &
pc
->
loˇl
->
«me
);

74 
Áûed
;

78 
c
->
ªcv
 = 
ngx_ªcv
;

79 
c
->
£nd
 = 
ngx_£nd
;

80 
c
->
ªcv_chaö
 = 
ngx_ªcv_chaö
;

81 
c
->
£nd_chaö
 = 
ngx_£nd_chaö
;

83 
c
->
£ndfûe
 = 1;

85 
c
->
log_îr‹
 = 
pc
->log_error;

87 i‡(
pc
->
sockaddr
->
ß_Ámûy
 =
AF_UNIX
) {

88 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

89 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

91 #i‡(
NGX_SOLARIS
)

93 
c
->
£ndfûe
 = 0;

97 
ªv
 = 
c
->
ªad
;

98 
wev
 = 
c
->
wrôe
;

100 
ªv
->
log
 = 
pc
->log;

101 
wev
->
log
 = 
pc
->log;

103 
pc
->
c⁄√˘i⁄
 = 
c
;

105 
c
->
numbî
 = 
	`ngx_©omic_„tch_add
(
ngx_c⁄√˘i⁄_cou¡î
, 1);

107 #i‡(
NGX_THREADS
)

111 
ªv
->
lock
 = 
pc
->lock;

112 
wev
->
lock
 = 
pc
->lock;

113 
ªv
->
own_lock
 = &
c
->
lock
;

114 
wev
->
own_lock
 = &
c
->
lock
;

118 i‡(
ngx_add_c⁄n
) {

119 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

120 
Áûed
;

124 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0,

125 "c⁄√˘Åÿ%V, fd:%d #%d", 
pc
->
«me
, 
s
, 
c
->
numbî
);

127 
rc
 = 
	`c⁄√˘
(
s
, 
pc
->
sockaddr
,Öc->
sockÀn
);

129 i‡(
rc
 == -1) {

130 
îr
 = 
ngx_sockë_î∫o
;

133 i‡(
îr
 !
NGX_EINPROGRESS


134 #i‡(
NGX_WIN32
)

136 && 
îr
 !
NGX_EAGAIN


140 i‡(
îr
 =
NGX_ECONNREFUSED


141 #i‡(
NGX_LINUX
)

146 || 
îr
 =
NGX_EAGAIN


148 || 
îr
 =
NGX_ECONNRESET


149 || 
îr
 =
NGX_ENETDOWN


150 || 
îr
 =
NGX_ENETUNREACH


151 || 
îr
 =
NGX_EHOSTDOWN


152 || 
îr
 =
NGX_EHOSTUNREACH
)

154 
Àvñ
 = 
NGX_LOG_ERR
;

157 
Àvñ
 = 
NGX_LOG_CRIT
;

160 
	`ngx_log_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, "connect()Åo %V failed",

161 
pc
->
«me
);

163 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

164 
pc
->
c⁄√˘i⁄
 = 
NULL
;

166  
NGX_DECLINED
;

170 i‡(
ngx_add_c⁄n
) {

171 i‡(
rc
 == -1) {

175  
NGX_AGAIN
;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

180 
wev
->
ªady
 = 1;

182  
NGX_OK
;

185 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

187 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

188 "c⁄√˘(): %d", 
rc
);

192 i‡(
	`ngx_blockög
(
s
) == -1) {

193 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
pc
->
log
, 
ngx_sockë_î∫o
,

194 
ngx_blockög_n
 " failed");

195 
Áûed
;

205 
ªv
->
ªady
 = 1;

206 
wev
->
ªady
 = 1;

208  
NGX_OK
;

211 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

215 
evít
 = 
NGX_CLEAR_EVENT
;

221 
evít
 = 
NGX_LEVEL_EVENT
;

224 i‡(
	`ngx_add_evít
(
ªv
, 
NGX_READ_EVENT
, 
evít
Ë!
NGX_OK
) {

225 
Áûed
;

228 i‡(
rc
 == -1) {

232 i‡(
	`ngx_add_evít
(
wev
, 
NGX_WRITE_EVENT
, 
evít
Ë!
NGX_OK
) {

233 
Áûed
;

236  
NGX_AGAIN
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
pc
->
log
, 0, "connected");

241 
wev
->
ªady
 = 1;

243  
NGX_OK
;

245 
Áûed
:

247 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

248 
pc
->
c⁄√˘i⁄
 = 
NULL
;

250  
NGX_ERROR
;

251 
	}
}

254 
ngx_öt_t


255 
	$ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

257  
NGX_OK
;

258 
	}
}

	@src/event/ngx_event_connect.h

8 #i‚de‡
_NGX_EVENT_CONNECT_H_INCLUDED_


9 
	#_NGX_EVENT_CONNECT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_PEER_KEEPALIVE
 1

	)

18 
	#NGX_PEER_NEXT
 2

	)

19 
	#NGX_PEER_FAILED
 4

	)

22 
ngx_≥î_c⁄√˘i⁄_s
 
	tngx_≥î_c⁄√˘i⁄_t
;

24 
	$ngx_öt_t
 (*
	tngx_evít_gë_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

25 *
	td©a
);

26 (*
	tngx_evít_‰ì_≥î_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
, *
	td©a
,

27 
	tngx_uöt_t
 
	t°©e
);

28 #i‡(
NGX_SSL
)

30 
	$ngx_öt_t
 (*
	tngx_evít_£t_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

31 *
	td©a
);

32 (*
	tngx_evít_ßve_≥î_£ssi⁄_±
)(
	tngx_≥î_c⁄√˘i⁄_t
 *
	tpc
,

33 *
	td©a
);

37 
	sngx_≥î_c⁄√˘i⁄_s
 {

38 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

40 
sockaddr
 *sockaddr;

41 
sockÀn_t
 
sockÀn
;

42 
ngx_°r_t
 *
«me
;

44 
ngx_uöt_t
 
åõs
;

46 
ngx_evít_gë_≥î_±
 
gë
;

47 
ngx_evít_‰ì_≥î_±
 
‰ì
;

48 *
d©a
;

50 #i‡(
NGX_SSL
)

51 
ngx_evít_£t_≥î_£ssi⁄_±
 
£t_£ssi⁄
;

52 
ngx_evít_ßve_≥î_£ssi⁄_±
 
ßve_£ssi⁄
;

55 #i‡(
NGX_THREADS
)

56 
ngx_©omic_t
 *
lock
;

59 
ngx_addr_t
 *
loˇl
;

61 
rcvbuf
;

63 
ngx_log_t
 *
log
;

65 
ˇched
:1;

68 
log_îr‹
:2;

72 
ngx_öt_t
 
	`ngx_evít_c⁄√˘_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
);

73 
ngx_öt_t
 
	`ngx_evít_gë_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

	@src/event/ngx_event_mutex.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_öt_t
 
	$ngx_evít_muãx_timedlock
(
ngx_evít_muãx_t
 *
m
, 
ngx_m£c_t
 
timî
,

14 
ngx_evít_t
 *
ev
)

16 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

17 "lockÉvíàmuãx %∞lock:%XD", 
m
, m->
lock
);

19 i‡(
m
->
lock
) {

21 i‡(
m
->
evíts
 =
NULL
) {

22 
m
->
evíts
 = 
ev
;

25 
m
->
œ°
->
√xt
 = 
ev
;

28 
m
->
œ°
 = 
ev
;

29 
ev
->
√xt
 = 
NULL
;

31 #i‡(
NGX_THREADS0
)

32 
ev
->
light
 = 1;

35 
	`ngx_add_timî
(
ev
, 
timî
);

37  
NGX_AGAIN
;

40 
m
->
lock
 = 1;

42  
NGX_OK
;

43 
	}
}

46 
ngx_öt_t
 
	$ngx_evít_muãx_u∆ock
(
ngx_evít_muãx_t
 *
m
, 
ngx_log_t
 *
log
)

48 
ngx_evít_t
 *
ev
;

50 i‡(
m
->
lock
 == 0) {

51 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

52 "åögÅÿu∆ockÅhê‰ìÉvíàmuãx %p", 
m
);

53  
NGX_ERROR
;

56 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
log
, 0,

57 "u∆ockÉvíàmuãx %p,Çexàevít: %p", 
m
, m->
evíts
);

59 
m
->
lock
 = 0;

61 i‡(
m
->
evíts
) {

62 
ev
 = 
m
->
evíts
;

63 
m
->
evíts
 = 
ev
->
√xt
;

65 
ev
->
√xt
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

66 
ngx_po°ed_evíts
 = 
ev
;

69  
NGX_OK
;

70 
	}
}

	@src/event/ngx_event_openssl.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

14 
ngx_uöt_t
 
	mígöe
;

15 } 
	tngx_›ís¶_c⁄f_t
;

18 
ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
);

19 
ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
,

20 
ªt
);

21 
ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
);

22 
ngx_öt_t
 
ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
);

23 
ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

24 
ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

25 
ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
);

26 
ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
,

27 
ngx_îr_t
 
îr
, *
ãxt
);

28 
ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
);

30 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

31 
ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

32 
ngx_s¶_£ssi⁄_t
 *
£ss
);

33 
ngx_s¶_£ssi⁄_t
 *
ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

34 
u_ch¨
 *
id
, 
Àn
, *
c›y
);

35 
ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

36 
ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

37 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
);

38 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

39 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

41 *
ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

42 *
ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

43 
ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
);

46 
ngx_comm™d_t
 
	gngx_›ís¶_comm™ds
[] = {

48 { 
ngx_°rög
("ssl_engine"),

49 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_›ís¶_ígöe
,

53 
NULL
 },

55 
ngx_nuŒ_comm™d


59 
ngx_c‹e_moduÀ_t
 
	gngx_›ís¶_moduÀ_˘x
 = {

60 
ngx_°rög
("openssl"),

61 
ngx_›ís¶_¸óã_c⁄f
,

62 
NULL


66 
ngx_moduÀ_t
 
	gngx_›ís¶_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_›ís¶_moduÀ_˘x
,

69 
ngx_›ís¶_comm™ds
,

70 
NGX_CORE_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
ngx_›ís¶_exô
,

78 
NGX_MODULE_V1_PADDING


82 
	gngx_s¶_c⁄√˘i⁄_ödex
;

83 
	gngx_s¶_£rvî_c⁄f_ödex
;

84 
	gngx_s¶_£ssi⁄_ˇche_ödex
;

85 
	gngx_s¶_˚πifiˇã_ödex
;

86 
	gngx_s¶_°≠lög_ödex
;

89 
ngx_öt_t


90 
	$ngx_s¶_öô
(
ngx_log_t
 *
log
)

92 
	`OPENSSL_c⁄fig
(
NULL
);

94 
	`SSL_libøry_öô
();

95 
	`SSL_lﬂd_îr‹_°rögs
();

97 
	`O≥nSSL_add_Æl_Æg‹ôhms
();

99 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

100 #i‚de‡
SSL_OP_NO_COMPRESSION


106 
n
;

107 
	`STACK_OF
(
SSL_COMP
Ë*
s¶_comp_mëhods
;

109 
s¶_comp_mëhods
 = 
	`SSL_COMP_gë_com¥essi⁄_mëhods
();

110 
n
 = 
	`sk_SSL_COMP_num
(
s¶_comp_mëhods
);

112 
n
--) {

113 (Ë
	`sk_SSL_COMP_p›
(
s¶_comp_mëhods
);

119 
ngx_s¶_c⁄√˘i⁄_ödex
 = 
	`SSL_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL, NULL);

121 i‡(
ngx_s¶_c⁄√˘i⁄_ödex
 == -1) {

122 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "SSL_get_ex_new_index() failed");

123  
NGX_ERROR
;

126 
ngx_s¶_£rvî_c⁄f_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

127 
NULL
);

128 i‡(
ngx_s¶_£rvî_c⁄f_ödex
 == -1) {

129 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

131  
NGX_ERROR
;

134 
ngx_s¶_£ssi⁄_ˇche_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

135 
NULL
);

136 i‡(
ngx_s¶_£ssi⁄_ˇche_ödex
 == -1) {

137 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

139  
NGX_ERROR
;

142 
ngx_s¶_˚πifiˇã_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

143 
NULL
);

144 i‡(
ngx_s¶_˚πifiˇã_ödex
 == -1) {

145 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

147  
NGX_ERROR
;

150 
ngx_s¶_°≠lög_ödex
 = 
	`SSL_CTX_gë_ex_√w_ödex
(0, 
NULL
, NULL, NULL,

151 
NULL
);

152 i‡(
ngx_s¶_°≠lög_ödex
 == -1) {

153 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

155  
NGX_ERROR
;

158  
NGX_OK
;

159 
	}
}

162 
ngx_öt_t


163 
	$ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
)

165 
s¶
->
˘x
 = 
	`SSL_CTX_√w
(
	`SSLv23_mëhod
());

167 i‡(
s¶
->
˘x
 =
NULL
) {

168 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "SSL_CTX_new() failed");

169  
NGX_ERROR
;

172 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
, 
d©a
) == 0) {

173 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

175  
NGX_ERROR
;

180 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_SESS_ID_BUG
);

181 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NETSCAPE_CHALLENGE_BUG
);

185 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
);

186 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
);

189 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_MSIE_SSLV2_RSA_PADDING
);

191 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SSLEAY_080_CLIENT_DH_BUG
);

192 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_D5_BUG
);

193 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_TLS_BLOCK_PADDING_BUG
);

195 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
);

197 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_DH_USE
);

199 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv2
)) {

200 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv2
);

202 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_SSLv3
)) {

203 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_SSLv3
);

205 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1
)) {

206 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1
);

208 #ifde‡
SSL_OP_NO_TLSv1_1


209 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_1
)) {

210 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_1
);

213 #ifde‡
SSL_OP_NO_TLSv1_2


214 i‡(!(
¥Ÿocﬁs
 & 
NGX_SSL_TLSv1_2
)) {

215 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_TLSv1_2
);

219 #ifde‡
SSL_OP_NO_COMPRESSION


220 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_NO_COMPRESSION
);

223 #ifde‡
SSL_MODE_RELEASE_BUFFERS


224 
	`SSL_CTX_£t_mode
(
s¶
->
˘x
, 
SSL_MODE_RELEASE_BUFFERS
);

227 
	`SSL_CTX_£t_ªad_ahód
(
s¶
->
˘x
, 1);

229 
	`SSL_CTX_£t_öfo_ˇŒback
(
s¶
->
˘x
, 
ngx_s¶_öfo_ˇŒback
);

231  
NGX_OK
;

232 
	}
}

235 
ngx_öt_t


236 
	$ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

237 
ngx_°r_t
 *
key
)

239 
BIO
 *
bio
;

240 
X509
 *
x509
;

241 
u_l⁄g
 
n
;

243 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

244  
NGX_ERROR
;

253 
bio
 = 
	`BIO_√w_fûe
((*Ë
˚π
->
d©a
, "r");

254 i‡(
bio
 =
NULL
) {

255 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

256 "BIO_√w_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

257  
NGX_ERROR
;

260 
x509
 = 
	`PEM_ªad_bio_X509_AUX
(
bio
, 
NULL
, NULL, NULL);

261 i‡(
x509
 =
NULL
) {

262 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

263 "PEM_ªad_bio_X509_AUX(\"%s\"ËÁûed", 
˚π
->
d©a
);

264 
	`BIO_‰ì
(
bio
);

265  
NGX_ERROR
;

268 i‡(
	`SSL_CTX_u£_˚πifiˇã
(
s¶
->
˘x
, 
x509
) == 0) {

269 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

270 "SSL_CTX_u£_˚πifiˇã(\"%s\"ËÁûed", 
˚π
->
d©a
);

271 
	`X509_‰ì
(
x509
);

272 
	`BIO_‰ì
(
bio
);

273  
NGX_ERROR
;

276 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
, 
x509
)

279 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

281  
NGX_ERROR
;

284 
	`X509_‰ì
(
x509
);

290 
x509
 = 
	`PEM_ªad_bio_X509
(
bio
, 
NULL
, NULL, NULL);

291 i‡(
x509
 =
NULL
) {

292 
n
 = 
	`ERR_≥ek_œ°_îr‹
();

294 i‡(
	`ERR_GET_LIB
(
n
Ë=
ERR_LIB_PEM


295 && 
	`ERR_GET_REASON
(
n
Ë=
PEM_R_NO_START_LINE
)

298 
	`ERR_˛ór_îr‹
();

304 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

305 "PEM_ªad_bio_X509(\"%s\"ËÁûed", 
˚π
->
d©a
);

306 
	`BIO_‰ì
(
bio
);

307  
NGX_ERROR
;

310 i‡(
	`SSL_CTX_add_exåa_chaö_˚π
(
s¶
->
˘x
, 
x509
) == 0) {

311 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

313 
˚π
->
d©a
);

314 
	`X509_‰ì
(
x509
);

315 
	`BIO_‰ì
(
bio
);

316  
NGX_ERROR
;

320 
	`BIO_‰ì
(
bio
);

322 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
key
, 1Ë!
NGX_OK
) {

323  
NGX_ERROR
;

326 i‡(
	`SSL_CTX_u£_Priv©eKey_fûe
(
s¶
->
˘x
, (*Ë
key
->
d©a
,

327 
SSL_FILETYPE_PEM
)

330 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

331 "SSL_CTX_u£_Priv©eKey_fûe(\"%s\"ËÁûed", 
key
->
d©a
);

332  
NGX_ERROR
;

335  
NGX_OK
;

336 
	}
}

339 
ngx_öt_t


340 
	$ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

341 
ngx_öt_t
 
dïth
)

343 
	`STACK_OF
(
X509_NAME
Ë*
li°
;

345 
	`SSL_CTX_£t_vîify
(
s¶
->
˘x
, 
SSL_VERIFY_PEER
, 
ngx_hâp_s¶_vîify_ˇŒback
);

347 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

349 i‡(
˚π
->
Àn
 == 0) {

350  
NGX_OK
;

353 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

354  
NGX_ERROR
;

357 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

360 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

362 
˚π
->
d©a
);

363  
NGX_ERROR
;

366 
li°
 = 
	`SSL_lﬂd_˛õ¡_CA_fûe
((*Ë
˚π
->
d©a
);

368 i‡(
li°
 =
NULL
) {

369 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

370 "SSL_lﬂd_˛õ¡_CA_fûe(\"%s\"ËÁûed", 
˚π
->
d©a
);

371  
NGX_ERROR
;

379 
	`ERR_˛ór_îr‹
();

381 
	`SSL_CTX_£t_˛õ¡_CA_li°
(
s¶
->
˘x
, 
li°
);

383  
NGX_OK
;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
˚π
,

389 
ngx_öt_t
 
dïth
)

391 
	`SSL_CTX_£t_vîify_dïth
(
s¶
->
˘x
, 
dïth
);

393 i‡(
˚π
->
Àn
 == 0) {

394  
NGX_OK
;

397 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
˚π
, 1Ë!
NGX_OK
) {

398  
NGX_ERROR
;

401 i‡(
	`SSL_CTX_lﬂd_vîify_loˇti⁄s
(
s¶
->
˘x
, (*Ë
˚π
->
d©a
, 
NULL
)

404 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

406 
˚π
->
d©a
);

407  
NGX_ERROR
;

410  
NGX_OK
;

411 
	}
}

414 
ngx_öt_t


415 
	$ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
)

417 
X509_STORE
 *
°‹e
;

418 
X509_LOOKUP
 *
lookup
;

420 i‡(
¸l
->
Àn
 == 0) {

421  
NGX_OK
;

424 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
¸l
, 1Ë!
NGX_OK
) {

425  
NGX_ERROR
;

428 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

430 i‡(
°‹e
 =
NULL
) {

431 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

433  
NGX_ERROR
;

436 
lookup
 = 
	`X509_STORE_add_lookup
(
°‹e
, 
	`X509_LOOKUP_fûe
());

438 i‡(
lookup
 =
NULL
) {

439 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

441  
NGX_ERROR
;

444 i‡(
	`X509_LOOKUP_lﬂd_fûe
(
lookup
, (*Ë
¸l
->
d©a
, 
X509_FILETYPE_PEM
)

447 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

448 "X509_LOOKUP_lﬂd_fûe(\"%s\"ËÁûed", 
¸l
->
d©a
);

449  
NGX_ERROR
;

452 
	`X509_STORE_£t_Êags
(
°‹e
,

453 
X509_V_FLAG_CRL_CHECK
|
X509_V_FLAG_CRL_CHECK_ALL
);

455  
NGX_OK
;

456 
	}
}

460 
	$ngx_hâp_s¶_vîify_ˇŒback
(
ok
, 
X509_STORE_CTX
 *
x509_°‹e
)

462 #i‡(
NGX_DEBUG
)

463 *
subje˘
, *
issuî
;

464 
îr
, 
dïth
;

465 
X509
 *
˚π
;

466 
X509_NAME
 *
¢ame
, *
öame
;

467 
ngx_c⁄√˘i⁄_t
 *
c
;

468 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
;

470 
s¶_c⁄n
 = 
	`X509_STORE_CTX_gë_ex_d©a
(
x509_°‹e
,

471 
	`SSL_gë_ex_d©a_X509_STORE_CTX_idx
());

473 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

475 
˚π
 = 
	`X509_STORE_CTX_gë_cuºít_˚π
(
x509_°‹e
);

476 
îr
 = 
	`X509_STORE_CTX_gë_îr‹
(
x509_°‹e
);

477 
dïth
 = 
	`X509_STORE_CTX_gë_îr‹_dïth
(
x509_°‹e
);

479 
¢ame
 = 
	`X509_gë_subje˘_«me
(
˚π
);

480 
subje˘
 = 
¢ame
 ? 
	`X509_NAME_⁄ñöe
(¢ame, 
NULL
, 0) : "(none)";

482 
öame
 = 
	`X509_gë_issuî_«me
(
˚π
);

483 
issuî
 = 
öame
 ? 
	`X509_NAME_⁄ñöe
(öame, 
NULL
, 0) : "(none)";

485 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

488 
ok
, 
îr
, 
dïth
, 
subje˘
, 
issuî
);

490 i‡(
¢ame
) {

491 
	`OPENSSL_‰ì
(
subje˘
);

494 i‡(
öame
) {

495 
	`OPENSSL_‰ì
(
issuî
);

500 
	}
}

504 
	$ngx_s¶_öfo_ˇŒback
(c⁄° 
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
whîe
, 
ªt
)

506 
ngx_c⁄√˘i⁄_t
 *
c
;

508 i‡(
whîe
 & 
SSL_CB_HANDSHAKE_START
) {

509 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
((
ngx_s¶_c⁄n_t
 *Ë
s¶_c⁄n
);

511 i‡(
c
->
s¶
->
h™dshaked
) {

512 
c
->
s¶
->
ª√gŸüti⁄
 = 1;

513 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÑenegotiation");

516 
	}
}

519 
RSA
 *

520 
	$ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
)

522 
RSA
 *
key
;

524 i‡(
key_Àngth
 == 512) {

525 i‡(
key
 =
NULL
) {

526 
key
 = 
	`RSA_gíî©e_key
(512, 
RSA_F4
, 
NULL
, NULL);

530  
key
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

537 
DH
 *
dh
;

538 
BIO
 *
bio
;

548 
dh1024_p
[] = {

562 
dh1024_g
[] = { 0x02 };

565 i‡(
fûe
->
Àn
 == 0) {

567 
dh
 = 
	`DH_√w
();

568 i‡(
dh
 =
NULL
) {

569 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "DH_new() failed");

570  
NGX_ERROR
;

573 
dh
->
p
 = 
	`BN_bö2bn
(
dh1024_p
, (dh1024_p), 
NULL
);

574 
dh
->
g
 = 
	`BN_bö2bn
(
dh1024_g
, (dh1024_g), 
NULL
);

576 i‡(
dh
->
p
 =
NULL
 || dh->
g
 == NULL) {

577 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0, "BN_bin2bn() failed");

578 
	`DH_‰ì
(
dh
);

579  
NGX_ERROR
;

582 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

584 
	`DH_‰ì
(
dh
);

586  
NGX_OK
;

589 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

590  
NGX_ERROR
;

593 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

594 i‡(
bio
 =
NULL
) {

595 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

596 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

597  
NGX_ERROR
;

600 
dh
 = 
	`PEM_ªad_bio_DH∑øms
(
bio
, 
NULL
, NULL, NULL);

601 i‡(
dh
 =
NULL
) {

602 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

603 "PEM_ªad_bio_DH∑øms(\"%s\"ËÁûed", 
fûe
->
d©a
);

604 
	`BIO_‰ì
(
bio
);

605  
NGX_ERROR
;

608 
	`SSL_CTX_£t_tmp_dh
(
s¶
->
˘x
, 
dh
);

610 
	`DH_‰ì
(
dh
);

611 
	`BIO_‰ì
(
bio
);

613  
NGX_OK
;

614 
	}
}

617 
ngx_öt_t


618 
	$ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
)

620 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090800fL

621 #i‚de‡
OPENSSL_NO_ECDH


622 
nid
;

623 
EC_KEY
 *
ecdh
;

632 
nid
 = 
	`OBJ_¢2nid
((c⁄° *Ë
«me
->
d©a
);

633 i‡(
nid
 == 0) {

634 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

635 "Unknow¿curvê«mê\"%s\"", 
«me
->
d©a
);

636  
NGX_ERROR
;

639 
ecdh
 = 
	`EC_KEY_√w_by_curve_«me
(
nid
);

640 i‡(
ecdh
 =
NULL
) {

641 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

642 "U«bÀÅÿ¸óã curvê\"%s\"", 
«me
->
d©a
);

643  
NGX_ERROR
;

646 
	`SSL_CTX_£t_›ti⁄s
(
s¶
->
˘x
, 
SSL_OP_SINGLE_ECDH_USE
);

648 
	`SSL_CTX_£t_tmp_ecdh
(
s¶
->
˘x
, 
ecdh
);

650 
	`EC_KEY_‰ì
(
ecdh
);

654  
NGX_OK
;

655 
	}
}

658 
ngx_öt_t


659 
	$ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
Êags
)

661 
ngx_s¶_c⁄√˘i⁄_t
 *
sc
;

663 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_s¶_c⁄√˘i⁄_t
));

664 i‡(
sc
 =
NULL
) {

665  
NGX_ERROR
;

668 
sc
->
buf„r
 = ((
Êags
 & 
NGX_SSL_BUFFER
) != 0);

670 
sc
->
c⁄√˘i⁄
 = 
	`SSL_√w
(
s¶
->
˘x
);

672 i‡(
sc
->
c⁄√˘i⁄
 =
NULL
) {

673 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_new() failed");

674  
NGX_ERROR
;

677 i‡(
	`SSL_£t_fd
(
sc
->
c⁄√˘i⁄
, 
c
->
fd
) == 0) {

678 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_fd() failed");

679  
NGX_ERROR
;

682 i‡(
Êags
 & 
NGX_SSL_CLIENT
) {

683 
	`SSL_£t_c⁄√˘_°©e
(
sc
->
c⁄√˘i⁄
);

686 
	`SSL_£t_ac˚±_°©e
(
sc
->
c⁄√˘i⁄
);

689 i‡(
	`SSL_£t_ex_d©a
(
sc
->
c⁄√˘i⁄
, 
ngx_s¶_c⁄√˘i⁄_ödex
, 
c
) == 0) {

690 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_ex_data() failed");

691  
NGX_ERROR
;

694 
c
->
s¶
 = 
sc
;

696  
NGX_OK
;

697 
	}
}

700 
ngx_öt_t


701 
	$ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
)

703 i‡(
£ssi⁄
) {

704 i‡(
	`SSL_£t_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
, 
£ssi⁄
) == 0) {

705 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "SSL_set_session() failed");

706  
NGX_ERROR
;

710  
NGX_OK
;

711 
	}
}

714 
ngx_öt_t


715 
	$ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

717 
n
, 
s¶îr
;

718 
ngx_îr_t
 
îr
;

720 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

722 
n
 = 
	`SSL_do_h™dshake
(
c
->
s¶
->
c⁄√˘i⁄
);

724 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_do_h™dshake: %d", 
n
);

726 i‡(
n
 == 1) {

728 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

729  
NGX_ERROR
;

732 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

733  
NGX_ERROR
;

736 #i‡(
NGX_DEBUG
)

738 
buf
[129], *
s
, *
d
;

739 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

742 
SSL_CIPHER
 *
cùhî
;

744 
cùhî
 = 
	`SSL_gë_cuºít_cùhî
(
c
->
s¶
->
c⁄√˘i⁄
);

746 i‡(
cùhî
) {

747 
	`SSL_CIPHER_des¸ùti⁄
(
cùhî
, &
buf
[1], 128);

749 
s
 = &
buf
[1], 
d
 = buf; *s; s++) {

750 i‡(*
s
 =' ' && *
d
 == ' ') {

754 i‡(*
s
 =
LF
 || *†=
CR
) {

758 *++
d
 = *
s
;

761 i‡(*
d
 != ' ') {

762 
d
++;

765 *
d
 = '\0';

767 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

769 
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
), &
buf
[1]);

771 i‡(
	`SSL_£ssi⁄_ªu£d
(
c
->
s¶
->
c⁄√˘i⁄
)) {

772 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

777 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

783 
c
->
s¶
->
h™dshaked
 = 1;

785 
c
->
ªcv
 = 
ngx_s¶_ªcv
;

786 
c
->
£nd
 = 
ngx_s¶_wrôe
;

787 
c
->
ªcv_chaö
 = 
ngx_s¶_ªcv_chaö
;

788 
c
->
£nd_chaö
 = 
ngx_s¶_£nd_chaö
;

791 i‡(
c
->
s¶
->
c⁄√˘i⁄
->
s3
) {

792 
c
->
s¶
->
c⁄√˘i⁄
->
s3
->
Êags
 |
SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
;

795  
NGX_OK
;

798 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

800 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

802 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

803 
c
->
ªad
->
ªady
 = 0;

804 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

805 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

807 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

808  
NGX_ERROR
;

811 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

812  
NGX_ERROR
;

815  
NGX_AGAIN
;

818 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

819 
c
->
wrôe
->
ªady
 = 0;

820 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

821 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_h™dshake_h™dÀr
;

823 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

824  
NGX_ERROR
;

827 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

828  
NGX_ERROR
;

831  
NGX_AGAIN
;

834 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

836 
c
->
s¶
->
no_waô_shutdown
 = 1;

837 
c
->
s¶
->
no_£nd_shutdown
 = 1;

838 
c
->
ªad
->
eof
 = 1;

840 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

841 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

844  
NGX_ERROR
;

847 
c
->
ªad
->
îr‹
 = 1;

849 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_do_handshake() failed");

851  
NGX_ERROR
;

852 
	}
}

856 
	$ngx_s¶_h™dshake_h™dÀr
(
ngx_evít_t
 *
ev
)

858 
ngx_c⁄√˘i⁄_t
 *
c
;

860 
c
 = 
ev
->
d©a
;

862 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

863 "SSL h™dshakêh™dÀr: %d", 
ev
->
wrôe
);

865 i‡(
ev
->
timedout
) {

866 
c
->
s¶
->
	`h™dÀr
(c);

870 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

874 
c
->
s¶
->
	`h™dÀr
(c);

875 
	}
}

878 
ssize_t


879 
	$ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

881 
u_ch¨
 *
œ°
;

882 
ssize_t
 
n
, 
byãs
;

883 
ngx_buf_t
 *
b
;

885 
byãs
 = 0;

887 
b
 = 
˛
->
buf
;

888 
œ°
 = 
b
->last;

892 
n
 = 
	`ngx_s¶_ªcv
(
c
, 
œ°
, 
b
->
íd
 -Üast);

894 i‡(
n
 > 0) {

895 
œ°
 +
n
;

896 
byãs
 +
n
;

898 i‡(
œ°
 =
b
->
íd
) {

899 
˛
 = cl->
√xt
;

901 i‡(
˛
 =
NULL
) {

902  
byãs
;

905 
b
 = 
˛
->
buf
;

906 
œ°
 = 
b
->last;

912 i‡(
byãs
) {

914 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

915 
c
->
ªad
->
ªady
 = 1;

918  
byãs
;

921  
n
;

923 
	}
}

926 
ssize_t


927 
	$ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

929 
n
, 
byãs
;

931 i‡(
c
->
s¶
->
œ°
 =
NGX_ERROR
) {

932 
c
->
ªad
->
îr‹
 = 1;

933  
NGX_ERROR
;

936 i‡(
c
->
s¶
->
œ°
 =
NGX_DONE
) {

937 
c
->
ªad
->
ªady
 = 0;

938 
c
->
ªad
->
eof
 = 1;

942 
byãs
 = 0;

944 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

953 
n
 = 
	`SSL_ªad
(
c
->
s¶
->
c⁄√˘i⁄
, 
buf
, 
size
);

955 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_ªad: %d", 
n
);

957 i‡(
n
 > 0) {

958 
byãs
 +
n
;

961 
c
->
s¶
->
œ°
 = 
	`ngx_s¶_h™dÀ_ªcv
(c, 
n
);

963 i‡(
c
->
s¶
->
œ°
 =
NGX_OK
) {

965 
size
 -
n
;

967 i‡(
size
 == 0) {

968  
byãs
;

971 
buf
 +
n
;

976 i‡(
byãs
) {

977  
byãs
;

980 
c
->
s¶
->
œ°
) {

982 
NGX_DONE
:

983 
c
->
ªad
->
ªady
 = 0;

984 
c
->
ªad
->
eof
 = 1;

987 
NGX_ERROR
:

988 
c
->
ªad
->
îr‹
 = 1;

992 
NGX_AGAIN
:

993  
c
->
s¶
->
œ°
;

996 
	}
}

999 
ngx_öt_t


1000 
	$ngx_s¶_h™dÀ_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
n
)

1002 
s¶îr
;

1003 
ngx_îr_t
 
îr
;

1005 i‡(
c
->
s¶
->
ª√gŸüti⁄
) {

1012 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
c
->
log
, 0, "SSLÑenegotiation disabled");

1014 
	`ERR_≥ek_îr‹
()) {

1015 
	`ngx_s¶_îr‹
(
NGX_LOG_DEBUG
, 
c
->
log
, 0,

1019 
	`ERR_˛ór_îr‹
();

1021 
c
->
s¶
->
no_waô_shutdown
 = 1;

1022 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1024  
NGX_ERROR
;

1027 i‡(
n
 > 0) {

1029 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
) {

1031 
c
->
wrôe
->
h™dÀr
 = c->
s¶
->
ßved_wrôe_h™dÀr
;

1032 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = 
NULL
;

1033 
c
->
wrôe
->
ªady
 = 1;

1035 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1036  
NGX_ERROR
;

1039 
	`ngx_po°_evít
(
c
->
wrôe
, &
ngx_po°ed_evíts
);

1042  
NGX_OK
;

1045 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1047 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1049 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1051 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1052 
c
->
ªad
->
ªady
 = 0;

1053  
NGX_AGAIN
;

1056 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1058 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1061 
c
->
wrôe
->
ªady
 = 0;

1063 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1064  
NGX_ERROR
;

1071 i‡(
c
->
s¶
->
ßved_wrôe_h™dÀr
 =
NULL
) {

1072 
c
->
s¶
->
ßved_wrôe_h™dÀr
 = c->
wrôe
->
h™dÀr
;

1073 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_wrôe_h™dÀr
;

1076  
NGX_AGAIN
;

1079 
c
->
s¶
->
no_waô_shutdown
 = 1;

1080 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1082 i‡(
s¶îr
 =
SSL_ERROR_ZERO_RETURN
 || 
	`ERR_≥ek_îr‹
() == 0) {

1083 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1085  
NGX_DONE
;

1088 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_read() failed");

1090  
NGX_ERROR
;

1091 
	}
}

1095 
	$ngx_s¶_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

1097 
ngx_c⁄√˘i⁄_t
 *
c
;

1099 
c
 = 
wev
->
d©a
;

1101 
c
->
ªad
->
	`h™dÀr
(c->read);

1102 
	}
}

1113 
ngx_chaö_t
 *

1114 
	$ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

1116 
n
;

1117 
ngx_uöt_t
 
Êush
;

1118 
ssize_t
 
£nd
, 
size
;

1119 
ngx_buf_t
 *
buf
;

1121 i‡(!
c
->
s¶
->
buf„r
) {

1123 
ö
) {

1124 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1125 
ö
 = in->
√xt
;

1129 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
ö
->
buf
->
pos
, in->buf->
œ°
 - in->buf->pos);

1131 i‡(
n
 =
NGX_ERROR
) {

1132  
NGX_CHAIN_ERROR
;

1135 i‡(
n
 =
NGX_AGAIN
) {

1136  
ö
;

1139 
ö
->
buf
->
pos
 +
n
;

1140 
c
->
£¡
 +
n
;

1142 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1143 
ö
 = in->
√xt
;

1147  
ö
;

1153 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
)) {

1154 
limô
 = 
NGX_MAX_INT32_VALUE
 - 
ngx_∑gesize
;

1157 
buf
 = 
c
->
s¶
->buf;

1159 i‡(
buf
 =
NULL
) {

1160 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1161 i‡(
buf
 =
NULL
) {

1162  
NGX_CHAIN_ERROR
;

1165 
c
->
s¶
->
buf
 = buf;

1168 i‡(
buf
->
°¨t
 =
NULL
) {

1169 
buf
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
NGX_SSL_BUFSIZE
);

1170 i‡(
buf
->
°¨t
 =
NULL
) {

1171  
NGX_CHAIN_ERROR
;

1174 
buf
->
pos
 = buf->
°¨t
;

1175 
buf
->
œ°
 = buf->
°¨t
;

1176 
buf
->
íd
 = buf->
°¨t
 + 
NGX_SSL_BUFSIZE
;

1179 
£nd
 = 
buf
->
œ°
 - buf->
pos
;

1180 
Êush
 = (
ö
 =
NULL
Ë? 1 : 
buf
->flush;

1184 
ö
 && 
buf
->
œ°
 < buf->
íd
 && 
£nd
 < 
limô
) {

1185 i‡(
ö
->
buf
->
œ°_buf
 || in->buf->
Êush
) {

1186 
Êush
 = 1;

1189 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

1190 
ö
 = in->
√xt
;

1194 
size
 = 
ö
->
buf
->
œ°
 - in->buf->
pos
;

1196 i‡(
size
 > 
buf
->
íd
 - buf->
œ°
) {

1197 
size
 = 
buf
->
íd
 - buf->
œ°
;

1200 i‡(
£nd
 + 
size
 > 
limô
) {

1201 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

1204 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1205 "SSL bu‡c›y: %d", 
size
);

1207 
	`ngx_mem˝y
(
buf
->
œ°
, 
ö
->buf->
pos
, 
size
);

1209 
buf
->
œ°
 +
size
;

1210 
ö
->
buf
->
pos
 +
size
;

1211 
£nd
 +
size
;

1213 i‡(
ö
->
buf
->
pos
 =ö->buf->
œ°
) {

1214 
ö
 = in->
√xt
;

1218 i‡(!
Êush
 && 
£nd
 < 
limô
 && 
buf
->
œ°
 < buf->
íd
) {

1222 
size
 = 
buf
->
œ°
 - buf->
pos
;

1224 i‡(
size
 == 0) {

1225 
buf
->
Êush
 = 0;

1226 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1227  
ö
;

1230 
n
 = 
	`ngx_s¶_wrôe
(
c
, 
buf
->
pos
, 
size
);

1232 i‡(
n
 =
NGX_ERROR
) {

1233  
NGX_CHAIN_ERROR
;

1236 i‡(
n
 =
NGX_AGAIN
) {

1240 
buf
->
pos
 +
n
;

1241 
c
->
£¡
 +
n
;

1243 i‡(
n
 < 
size
) {

1247 
Êush
 = 0;

1249 
buf
->
pos
 = buf->
°¨t
;

1250 
buf
->
œ°
 = buf->
°¨t
;

1252 i‡(
ö
 =
NULL
 || 
£nd
 =
limô
) {

1257 
buf
->
Êush
 = flush;

1259 i‡(
buf
->
pos
 < buf->
œ°
) {

1260 
c
->
buf„ªd
 |
NGX_SSL_BUFFERED
;

1263 
c
->
buf„ªd
 &~
NGX_SSL_BUFFERED
;

1266  
ö
;

1267 
	}
}

1270 
ssize_t


1271 
	$ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
)

1273 
n
, 
s¶îr
;

1274 
ngx_îr_t
 
îr
;

1276 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1278 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSLÅÿwrôe: %d", 
size
);

1280 
n
 = 
	`SSL_wrôe
(
c
->
s¶
->
c⁄√˘i⁄
, 
d©a
, 
size
);

1282 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_wrôe: %d", 
n
);

1284 i‡(
n
 > 0) {

1286 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
) {

1288 
c
->
ªad
->
h™dÀr
 = c->
s¶
->
ßved_ªad_h™dÀr
;

1289 
c
->
s¶
->
ßved_ªad_h™dÀr
 = 
NULL
;

1290 
c
->
ªad
->
ªady
 = 1;

1292 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1293  
NGX_ERROR
;

1296 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

1299  
n
;

1302 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1304 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_gë_îr‹: %d", 
s¶îr
);

1308 i‡(
s¶îr
 =
SSL_ERROR_WANT_WRITE
) {

1309 
c
->
wrôe
->
ªady
 = 0;

1310  
NGX_AGAIN
;

1313 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1315 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1318 
c
->
ªad
->
ªady
 = 0;

1320 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1321  
NGX_ERROR
;

1329 i‡(
c
->
s¶
->
ßved_ªad_h™dÀr
 =
NULL
) {

1330 
c
->
s¶
->
ßved_ªad_h™dÀr
 = c->
ªad
->
h™dÀr
;

1331 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_ªad_h™dÀr
;

1334  
NGX_AGAIN
;

1337 
c
->
s¶
->
no_waô_shutdown
 = 1;

1338 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1339 
c
->
wrôe
->
îr‹
 = 1;

1341 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_write() failed");

1343  
NGX_ERROR
;

1344 
	}
}

1348 
	$ngx_s¶_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1350 
ngx_c⁄√˘i⁄_t
 *
c
;

1352 
c
 = 
ªv
->
d©a
;

1354 
c
->
wrôe
->
	`h™dÀr
(c->write);

1355 
	}
}

1359 
	$ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
)

1361 i‡(
c
->
s¶
->
buf
 && c->s¶->buf->
°¨t
) {

1362 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, c->
s¶
->
buf
->
°¨t
Ë=
NGX_OK
) {

1363 
c
->
s¶
->
buf
->
°¨t
 = 
NULL
;

1366 
	}
}

1369 
ngx_öt_t


1370 
	$ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
)

1372 
n
, 
s¶îr
, 
mode
;

1373 
ngx_îr_t
 
îr
;

1375 i‡(
c
->
timedout
) {

1376 
mode
 = 
SSL_RECEIVED_SHUTDOWN
|
SSL_SENT_SHUTDOWN
;

1377 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1380 
mode
 = 
	`SSL_gë_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1382 i‡(
c
->
s¶
->
no_waô_shutdown
) {

1383 
mode
 |
SSL_RECEIVED_SHUTDOWN
;

1386 i‡(
c
->
s¶
->
no_£nd_shutdown
) {

1387 
mode
 |
SSL_SENT_SHUTDOWN
;

1390 i‡(
c
->
s¶
->
no_waô_shutdown
 && c->s¶->
no_£nd_shutdown
) {

1391 
	`SSL_£t_quõt_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 1);

1395 
	`SSL_£t_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
, 
mode
);

1397 
	`ngx_s¶_˛ór_îr‹
(
c
->
log
);

1399 
n
 = 
	`SSL_shutdown
(
c
->
s¶
->
c⁄√˘i⁄
);

1401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "SSL_shutdown: %d", 
n
);

1403 
s¶îr
 = 0;

1407 i‡(
n
 !1 && 
	`ERR_≥ek_îr‹
()) {

1408 
s¶îr
 = 
	`SSL_gë_îr‹
(
c
->
s¶
->
c⁄√˘i⁄
, 
n
);

1410 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1411 "SSL_gë_îr‹: %d", 
s¶îr
);

1414 i‡(
n
 =1 || 
s¶îr
 =0 || s¶î∏=
SSL_ERROR_ZERO_RETURN
) {

1415 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1416 
c
->
s¶
 = 
NULL
;

1418  
NGX_OK
;

1421 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
 || s¶î∏=
SSL_ERROR_WANT_WRITE
) {

1422 
c
->
ªad
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1423 
c
->
wrôe
->
h™dÀr
 = 
ngx_s¶_shutdown_h™dÀr
;

1425 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1426  
NGX_ERROR
;

1429 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1430  
NGX_ERROR
;

1433 i‡(
s¶îr
 =
SSL_ERROR_WANT_READ
) {

1434 
	`ngx_add_timî
(
c
->
ªad
, 30000);

1437  
NGX_AGAIN
;

1440 
îr
 = (
s¶îr
 =
SSL_ERROR_SYSCALL
Ë? 
ngx_î∫o
 : 0;

1442 
	`ngx_s¶_c⁄√˘i⁄_îr‹
(
c
, 
s¶îr
, 
îr
, "SSL_shutdown() failed");

1444 
	`SSL_‰ì
(
c
->
s¶
->
c⁄√˘i⁄
);

1445 
c
->
s¶
 = 
NULL
;

1447  
NGX_ERROR
;

1448 
	}
}

1452 
	$ngx_s¶_shutdown_h™dÀr
(
ngx_evít_t
 *
ev
)

1454 
ngx_c⁄√˘i⁄_t
 *
c
;

1455 
ngx_c⁄√˘i⁄_h™dÀr_±
 
h™dÀr
;

1457 
c
 = 
ev
->
d©a
;

1458 
h™dÀr
 = 
c
->
s¶
->handler;

1460 i‡(
ev
->
timedout
) {

1461 
c
->
timedout
 = 1;

1464 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0, "SSL shutdown handler");

1466 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

1470 
	`h™dÀr
(
c
);

1471 
	}
}

1475 
	$ngx_s¶_c⁄√˘i⁄_îr‹
(
ngx_c⁄√˘i⁄_t
 *
c
, 
s¶îr
, 
ngx_îr_t
 
îr
,

1476 *
ãxt
)

1478 
n
;

1479 
ngx_uöt_t
 
Àvñ
;

1481 
Àvñ
 = 
NGX_LOG_CRIT
;

1483 i‡(
s¶îr
 =
SSL_ERROR_SYSCALL
) {

1485 i‡(
îr
 =
NGX_ECONNRESET


1486 || 
îr
 =
NGX_EPIPE


1487 || 
îr
 =
NGX_ENOTCONN


1488 || 
îr
 =
NGX_ETIMEDOUT


1489 || 
îr
 =
NGX_ECONNREFUSED


1490 || 
îr
 =
NGX_ENETDOWN


1491 || 
îr
 =
NGX_ENETUNREACH


1492 || 
îr
 =
NGX_EHOSTDOWN


1493 || 
îr
 =
NGX_EHOSTUNREACH
)

1495 
c
->
log_îr‹
) {

1497 
NGX_ERROR_IGNORE_ECONNRESET
:

1498 
NGX_ERROR_INFO
:

1499 
Àvñ
 = 
NGX_LOG_INFO
;

1502 
NGX_ERROR_ERR
:

1503 
Àvñ
 = 
NGX_LOG_ERR
;

1511 } i‡(
s¶îr
 =
SSL_ERROR_SSL
) {

1513 
n
 = 
	`ERR_GET_REASON
(
	`ERR_≥ek_îr‹
());

1516 i‡(
n
 =
SSL_R_BAD_CHANGE_CIPHER_SPEC


1517 || 
n
 =
SSL_R_BLOCK_CIPHER_PAD_IS_WRONG


1518 || 
n
 =
SSL_R_DIGEST_CHECK_FAILED


1519 || 
n
 =
SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST


1520 || 
n
 =
SSL_R_EXCESSIVE_MESSAGE_SIZE


1521 || 
n
 =
SSL_R_LENGTH_MISMATCH


1522 || 
n
 =
SSL_R_NO_CIPHERS_PASSED


1523 || 
n
 =
SSL_R_NO_CIPHERS_SPECIFIED


1524 || 
n
 =
SSL_R_NO_COMPRESSION_SPECIFIED


1525 || 
n
 =
SSL_R_NO_SHARED_CIPHER


1526 || 
n
 =
SSL_R_RECORD_LENGTH_MISMATCH


1527 #ifde‡
SSL_R_PARSE_TLSEXT


1528 || 
n
 =
SSL_R_PARSE_TLSEXT


1530 || 
n
 =
SSL_R_UNEXPECTED_MESSAGE


1531 || 
n
 =
SSL_R_UNEXPECTED_RECORD


1532 || 
n
 =
SSL_R_UNKNOWN_ALERT_TYPE


1533 || 
n
 =
SSL_R_UNKNOWN_PROTOCOL


1534 || 
n
 =
SSL_R_WRONG_VERSION_NUMBER


1535 || 
n
 =
SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC


1536 #ifde‡
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1537 || 
n
 =
SSL_R_RENEGOTIATE_EXT_TOO_LONG


1538 || 
n
 =
SSL_R_RENEGOTIATION_ENCODING_ERR


1539 || 
n
 =
SSL_R_RENEGOTIATION_MISMATCH


1541 #ifde‡
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1542 || 
n
 =
SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED


1544 #ifde‡
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1545 || 
n
 =
SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING


1547 || 
n
 == 1000

1548 || 
n
 =
SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE


1549 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_RECORD_MAC


1550 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPTION_FAILED


1551 || 
n
 =
SSL_R_TLSV1_ALERT_RECORD_OVERFLOW


1552 || 
n
 =
SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE


1553 || 
n
 =
SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE


1554 || 
n
 =
SSL_R_SSLV3_ALERT_NO_CERTIFICATE


1555 || 
n
 =
SSL_R_SSLV3_ALERT_BAD_CERTIFICATE


1556 || 
n
 =
SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE


1557 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED


1558 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED


1559 || 
n
 =
SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN


1560 || 
n
 =
SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER


1561 || 
n
 =
SSL_R_TLSV1_ALERT_UNKNOWN_CA


1562 || 
n
 =
SSL_R_TLSV1_ALERT_ACCESS_DENIED


1563 || 
n
 =
SSL_R_TLSV1_ALERT_DECODE_ERROR


1564 || 
n
 =
SSL_R_TLSV1_ALERT_DECRYPT_ERROR


1565 || 
n
 =
SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION


1566 || 
n
 =
SSL_R_TLSV1_ALERT_PROTOCOL_VERSION


1567 || 
n
 =
SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY


1568 || 
n
 =
SSL_R_TLSV1_ALERT_INTERNAL_ERROR


1569 || 
n
 =
SSL_R_TLSV1_ALERT_USER_CANCELLED


1570 || 
n
 =
SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
)

1572 
c
->
log_îr‹
) {

1574 
NGX_ERROR_IGNORE_ECONNRESET
:

1575 
NGX_ERROR_INFO
:

1576 
Àvñ
 = 
NGX_LOG_INFO
;

1579 
NGX_ERROR_ERR
:

1580 
Àvñ
 = 
NGX_LOG_ERR
;

1589 
	`ngx_s¶_îr‹
(
Àvñ
, 
c
->
log
, 
îr
, 
ãxt
);

1590 
	}
}

1594 
	$ngx_s¶_˛ór_îr‹
(
ngx_log_t
 *
log
)

1596 
	`ERR_≥ek_îr‹
()) {

1597 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "ignoring stale global SSLÉrror");

1600 
	`ERR_˛ór_îr‹
();

1601 
	}
}

1604 
ngx_cde˛


1605 
	$ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, *
fmt
, ...)

1607 
Êags
;

1608 
u_l⁄g
 
n
;

1609 
va_li°
 
¨gs
;

1610 
u_ch¨
 *
p
, *
œ°
;

1611 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1612 c⁄° *
d©a
;

1614 
œ°
 = 
îr°r
 + 
NGX_MAX_CONF_ERRSTR
;

1616 
	`va_°¨t
(
¨gs
, 
fmt
);

1617 
p
 = 
	`ngx_v¶¥ötf
(
îr°r
, 
œ°
 - 1, 
fmt
, 
¨gs
);

1618 
	`va_íd
(
¨gs
);

1620 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (SSL:", 
œ°
 -Ö);

1624 
n
 = 
	`ERR_≥ek_îr‹_löe_d©a
(
NULL
, NULL, &
d©a
, &
Êags
);

1626 i‡(
n
 == 0) {

1630 i‡(
p
 >
œ°
) {

1631 
√xt
;

1634 *
p
++ = ' ';

1636 
	`ERR_îr‹_°rög_n
(
n
, (*Ë
p
, 
œ°
 -Ö);

1638 
p
 < 
œ°
 && *p) {

1639 
p
++;

1642 i‡(
p
 < 
œ°
 && *
d©a
 && (
Êags
 & 
ERR_TXT_STRING
)) {

1643 *
p
++ = ':';

1644 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
d©a
, 
œ°
 -Ö);

1647 
√xt
:

1649 (Ë
	`ERR_gë_îr‹
();

1652 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%s)", 
îr°r
);

1653 
	}
}

1656 
ngx_öt_t


1657 
	$ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

1658 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
)

1660 
ˇche_mode
;

1662 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_SCACHE
) {

1663 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
SSL_SESS_CACHE_OFF
);

1664  
NGX_OK
;

1667 
	`SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
s¶
->
˘x
, 
£ss_˘x
->
d©a
, sess_˘x->
Àn
);

1669 i‡(
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NONE_SCACHE
) {

1682 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
,

1683 
SSL_SESS_CACHE_SERVER


1684 |
SSL_SESS_CACHE_NO_AUTO_CLEAR


1685 |
SSL_SESS_CACHE_NO_INTERNAL_STORE
);

1687 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 1);

1689  
NGX_OK
;

1692 
ˇche_mode
 = 
SSL_SESS_CACHE_SERVER
;

1694 i‡(
shm_z⁄e
 && 
buûtö_£ssi⁄_ˇche
 =
NGX_SSL_NO_BUILTIN_SCACHE
) {

1695 
ˇche_mode
 |
SSL_SESS_CACHE_NO_INTERNAL
;

1698 
	`SSL_CTX_£t_£ssi⁄_ˇche_mode
(
s¶
->
˘x
, 
ˇche_mode
);

1700 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_NO_BUILTIN_SCACHE
) {

1702 i‡(
buûtö_£ssi⁄_ˇche
 !
NGX_SSL_DFLT_BUILTIN_SCACHE
) {

1703 
	`SSL_CTX_£ss_£t_ˇche_size
(
s¶
->
˘x
, 
buûtö_£ssi⁄_ˇche
);

1707 
	`SSL_CTX_£t_timeout
(
s¶
->
˘x
, (Ë
timeout
);

1709 i‡(
shm_z⁄e
) {

1710 
	`SSL_CTX_£ss_£t_√w_cb
(
s¶
->
˘x
, 
ngx_s¶_√w_£ssi⁄
);

1711 
	`SSL_CTX_£ss_£t_gë_cb
(
s¶
->
˘x
, 
ngx_s¶_gë_ˇched_£ssi⁄
);

1712 
	`SSL_CTX_£ss_£t_ªmove_cb
(
s¶
->
˘x
, 
ngx_s¶_ªmove_£ssi⁄
);

1714 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
, 
shm_z⁄e
)

1717 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

1719  
NGX_ERROR
;

1723  
NGX_OK
;

1724 
	}
}

1727 
ngx_öt_t


1728 
	$ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

1730 
size_t
 
Àn
;

1731 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1732 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1734 i‡(
d©a
) {

1735 
shm_z⁄e
->
d©a
 = data;

1736  
NGX_OK
;

1739 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

1740 
shm_z⁄e
->
d©a
 = data;

1741  
NGX_OK
;

1744 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1746 
ˇche
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_s¶_£ssi⁄_ˇche_t
));

1747 i‡(
ˇche
 =
NULL
) {

1748  
NGX_ERROR
;

1751 
shpoﬁ
->
d©a
 = 
ˇche
;

1752 
shm_z⁄e
->
d©a
 = 
ˇche
;

1754 
	`ngx_rbåì_öô
(&
ˇche
->
£ssi⁄_rbåì
, &ˇche->
£¡öñ
,

1755 
ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
);

1757 
	`ngx_queue_öô
(&
ˇche
->
expúe_queue
);

1759 
Àn
 = (" i¿SSL sessi⁄ sh¨ed cachê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

1761 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

1762 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

1763  
NGX_ERROR
;

1766 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " in SSL session shared cache \"%V\"%Z",

1767 &
shm_z⁄e
->
shm
.
«me
);

1769  
NGX_OK
;

1770 
	}
}

1791 
	$ngx_s¶_√w_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

1793 
Àn
;

1794 
u_ch¨
 *
p
, *
id
, *
ˇched_£ss
;

1795 
uöt32_t
 
hash
;

1796 
SSL_CTX
 *
s¶_˘x
;

1797 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1798 
ngx_c⁄√˘i⁄_t
 *
c
;

1799 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1800 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1801 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1802 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1804 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

1808 i‡(
Àn
 > (Ë
NGX_SSL_MAX_SESSION_SIZE
) {

1812 
p
 = 
buf
;

1813 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

1815 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1817 
s¶_˘x
 = 
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
);

1818 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1820 
ˇche
 = 
shm_z⁄e
->
d©a
;

1821 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1823 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1826 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 1);

1828 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1830 i‡(
ˇched_£ss
 =
NULL
) {

1834 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1836 
ˇched_£ss
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
Àn
);

1838 i‡(
ˇched_£ss
 =
NULL
) {

1839 
£ss_id
 = 
NULL
;

1840 
Áûed
;

1844 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

1846 i‡(
£ss_id
 =
NULL
) {

1850 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1852 
£ss_id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, (
ngx_s¶_£ss_id_t
));

1854 i‡(
£ss_id
 =
NULL
) {

1855 
Áûed
;

1859 #i‡(
NGX_PTR_SIZE
 == 8)

1861 
id
 = 
£ss_id
->sess_id;

1865 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

1867 i‡(
id
 =
NULL
) {

1871 
	`ngx_s¶_expúe_£ssi⁄s
(
ˇche
, 
shpoﬁ
, 0);

1873 
id
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
£ss
->
£ssi⁄_id_Àngth
);

1875 i‡(
id
 =
NULL
) {

1876 
Áûed
;

1882 
	`ngx_mem˝y
(
ˇched_£ss
, 
buf
, 
Àn
);

1884 
	`ngx_mem˝y
(
id
, 
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1886 
hash
 = 
	`ngx_¸c32_sh‹t
(
£ss
->
£ssi⁄_id
, sess->
£ssi⁄_id_Àngth
);

1888 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1890 
hash
, 
£ss
->
£ssi⁄_id_Àngth
, 
Àn
);

1892 
£ss_id
->
node
.
key
 = 
hash
;

1893 
£ss_id
->
node
.
d©a
 = (
u_ch¨
Ë
£ss
->
£ssi⁄_id_Àngth
;

1894 
£ss_id
->
id
 = id;

1895 
£ss_id
->
Àn
 =Üen;

1896 
£ss_id
->
£ssi⁄
 = 
ˇched_£ss
;

1898 
£ss_id
->
expúe
 = 
	`ngx_time
(Ë+ 
	`SSL_CTX_gë_timeout
(
s¶_˘x
);

1900 
	`ngx_queue_ö£π_hód
(&
ˇche
->
expúe_queue
, &
£ss_id
->
queue
);

1902 
	`ngx_rbåì_ö£π
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

1904 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1908 
Áûed
:

1910 i‡(
ˇched_£ss
) {

1911 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
ˇched_£ss
);

1914 i‡(
£ss_id
) {

1915 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

1918 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1920 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

1924 
	}
}

1927 
ngx_s¶_£ssi⁄_t
 *

1928 
	$ngx_s¶_gë_ˇched_£ssi⁄
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, 
u_ch¨
 *
id
, 
Àn
,

1929 *
c›y
)

1931 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

1934 
u_ch¨
 *
p
;

1935 
uöt32_t
 
hash
;

1936 
ngx_öt_t
 
rc
;

1937 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1938 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

1939 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

1940 
ngx_s¶_£ssi⁄_t
 *
£ss
;

1941 
ngx_s¶_£ss_id_t
 *
£ss_id
;

1942 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

1943 
u_ch¨
 
buf
[
NGX_SSL_MAX_SESSION_SIZE
];

1944 #i‡(
NGX_DEBUG
)

1945 
ngx_c⁄√˘i⁄_t
 *
c
;

1948 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, (
size_t
Ë
Àn
);

1949 *
c›y
 = 0;

1951 #i‡(
NGX_DEBUG
)

1952 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

1954 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

1955 "s¶ gë sessi⁄: %08XD:%d", 
hash
, 
Àn
);

1958 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
	`SSL_gë_SSL_CTX
(
s¶_c⁄n
),

1959 
ngx_s¶_£ssi⁄_ˇche_ödex
);

1961 
ˇche
 = 
shm_z⁄e
->
d©a
;

1963 
£ss
 = 
NULL
;

1965 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

1967 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

1969 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

1970 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

1972 
node
 !
£¡öñ
) {

1974 i‡(
hash
 < 
node
->
key
) {

1975 
node
 =Çode->
À·
;

1979 i‡(
hash
 > 
node
->
key
) {

1980 
node
 =Çode->
right
;

1986 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

1988 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, (
size_t
Ë
Àn
, (size_tË
node
->
d©a
);

1990 i‡(
rc
 == 0) {

1992 i‡(
£ss_id
->
expúe
 > 
	`ngx_time
()) {

1993 
	`ngx_mem˝y
(
buf
, 
£ss_id
->
£ssi⁄
, sess_id->
Àn
);

1995 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

1997 
p
 = 
buf
;

1998 
£ss
 = 
	`d2i_SSL_SESSION
(
NULL
, &
p
, 
£ss_id
->
Àn
);

2000  
£ss
;

2003 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2005 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2007 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2008 #i‡(
NGX_PTR_SIZE
 == 4)

2009 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2011 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2013 
£ss
 = 
NULL
;

2015 
d⁄e
;

2018 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2021 
d⁄e
:

2023 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2025  
£ss
;

2026 
	}
}

2030 
	$ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2032 
	`SSL_CTX_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2034 
	`ngx_s¶_ªmove_£ssi⁄
(
s¶
, 
£ss
);

2035 
	}
}

2039 
	$ngx_s¶_ªmove_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
)

2041 
size_t
 
Àn
;

2042 
u_ch¨
 *
id
;

2043 
uöt32_t
 
hash
;

2044 
ngx_öt_t
 
rc
;

2045 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2046 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

2047 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

2048 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2049 
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
;

2051 
shm_z⁄e
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
, 
ngx_s¶_£ssi⁄_ˇche_ödex
);

2053 i‡(
shm_z⁄e
 =
NULL
) {

2057 
ˇche
 = 
shm_z⁄e
->
d©a
;

2059 
id
 = 
£ss
->
£ssi⁄_id
;

2060 
Àn
 = (
size_t
Ë
£ss
->
£ssi⁄_id_Àngth
;

2062 
hash
 = 
	`ngx_¸c32_sh‹t
(
id
, 
Àn
);

2064 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2065 "s¶Ñemovê£ssi⁄: %08XD:%uz", 
hash
, 
Àn
);

2067 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

2069 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

2071 
node
 = 
ˇche
->
£ssi⁄_rbåì
.
roŸ
;

2072 
£¡öñ
 = 
ˇche
->
£ssi⁄_rbåì
.sentinel;

2074 
node
 !
£¡öñ
) {

2076 i‡(
hash
 < 
node
->
key
) {

2077 
node
 =Çode->
À·
;

2081 i‡(
hash
 > 
node
->
key
) {

2082 
node
 =Çode->
right
;

2088 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2090 
rc
 = 
	`ngx_memn2cmp
(
id
, 
£ss_id
->id, 
Àn
, (
size_t
Ë
node
->
d©a
);

2092 i‡(
rc
 == 0) {

2094 
	`ngx_queue_ªmove
(&
£ss_id
->
queue
);

2096 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, 
node
);

2098 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2099 #i‡(
NGX_PTR_SIZE
 == 4)

2100 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2102 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2104 
d⁄e
;

2107 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

2110 
d⁄e
:

2112 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

2113 
	}
}

2117 
	$ngx_s¶_expúe_£ssi⁄s
(
ngx_s¶_£ssi⁄_ˇche_t
 *
ˇche
,

2118 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
, 
ngx_uöt_t
 
n
)

2120 
time_t
 
now
;

2121 
ngx_queue_t
 *
q
;

2122 
ngx_s¶_£ss_id_t
 *
£ss_id
;

2124 
now
 = 
	`ngx_time
();

2126 
n
 < 3) {

2128 i‡(
	`ngx_queue_em±y
(&
ˇche
->
expúe_queue
)) {

2132 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
expúe_queue
);

2134 
£ss_id
 = 
	`ngx_queue_d©a
(
q
, 
ngx_s¶_£ss_id_t
, 
queue
);

2136 i‡(
n
++ !0 && 
£ss_id
->
expúe
 > 
now
) {

2140 
	`ngx_queue_ªmove
(
q
);

2142 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ngx_cy˛e
->
log
, 0,

2143 "expúê£ssi⁄: %08Xi", 
£ss_id
->
node
.
key
);

2145 
	`ngx_rbåì_dñëe
(&
ˇche
->
£ssi⁄_rbåì
, &
£ss_id
->
node
);

2147 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
£ssi⁄
);

2148 #i‡(
NGX_PTR_SIZE
 == 4)

2149 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
->
id
);

2151 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
£ss_id
);

2153 
	}
}

2157 
	$ngx_s¶_£ssi⁄_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

2158 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

2160 
ngx_rbåì_node_t
 **
p
;

2161 
ngx_s¶_£ss_id_t
 *
£ss_id
, *
£ss_id_ãmp
;

2165 i‡(
node
->
key
 < 
ãmp
->key) {

2167 
p
 = &
ãmp
->
À·
;

2169 } i‡(
node
->
key
 > 
ãmp
->key) {

2171 
p
 = &
ãmp
->
right
;

2175 
£ss_id
 = (
ngx_s¶_£ss_id_t
 *Ë
node
;

2176 
£ss_id_ãmp
 = (
ngx_s¶_£ss_id_t
 *Ë
ãmp
;

2178 
p
 = (
	`ngx_memn2cmp
(
£ss_id
->
id
, 
£ss_id_ãmp
->id,

2179 (
size_t
Ë
node
->
d©a
, (size_tË
ãmp
->data)

2180 < 0Ë? &
ãmp
->
À·
 : &ãmp->
right
;

2183 i‡(*
p
 =
£¡öñ
) {

2187 
ãmp
 = *
p
;

2190 *
p
 = 
node
;

2191 
node
->
∑ª¡
 = 
ãmp
;

2192 
node
->
À·
 = 
£¡öñ
;

2193 
node
->
right
 = 
£¡öñ
;

2194 
	`ngx_rbt_ªd
(
node
);

2195 
	}
}

2199 
	$ngx_s¶_˛ónup_˘x
(*
d©a
)

2201 
ngx_s¶_t
 *
s¶
 = 
d©a
;

2203 
	`SSL_CTX_‰ì
(
s¶
->
˘x
);

2204 
	}
}

2207 
ngx_öt_t


2208 
	$ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2210 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_vîsi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2211  
NGX_OK
;

2212 
	}
}

2215 
ngx_öt_t


2216 
	$ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2218 
s
->
d©a
 = (
u_ch¨
 *Ë
	`SSL_gë_cùhî_«me
(
c
->
s¶
->
c⁄√˘i⁄
);

2219  
NGX_OK
;

2220 
	}
}

2223 
ngx_öt_t


2224 
	$ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2226 
Àn
;

2227 
u_ch¨
 *
p
, *
buf
;

2228 
SSL_SESSION
 *
£ss
;

2230 
£ss
 = 
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
);

2232 
Àn
 = 
	`i2d_SSL_SESSION
(
£ss
, 
NULL
);

2234 
buf
 = 
	`ngx_Æloc
(
Àn
, 
c
->
log
);

2235 i‡(
buf
 =
NULL
) {

2236  
NGX_ERROR
;

2239 
s
->
Àn
 = 2 *Üen;

2240 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 2 * 
Àn
);

2241 i‡(
s
->
d©a
 =
NULL
) {

2242 
	`ngx_‰ì
(
buf
);

2243  
NGX_ERROR
;

2246 
p
 = 
buf
;

2247 
	`i2d_SSL_SESSION
(
£ss
, &
p
);

2249 
	`ngx_hex_dump
(
s
->
d©a
, 
buf
, 
Àn
);

2251 
	`ngx_‰ì
(
buf
);

2253  
NGX_OK
;

2254 
	}
}

2257 
ngx_öt_t


2258 
	$ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2260 
size_t
 
Àn
;

2261 
BIO
 *
bio
;

2262 
X509
 *
˚π
;

2264 
s
->
Àn
 = 0;

2266 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2267 i‡(
˚π
 =
NULL
) {

2268  
NGX_OK
;

2271 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2272 i‡(
bio
 =
NULL
) {

2273 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "BIO_new() failed");

2274 
	`X509_‰ì
(
˚π
);

2275  
NGX_ERROR
;

2278 i‡(
	`PEM_wrôe_bio_X509
(
bio
, 
˚π
) == 0) {

2279 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "PEM_write_bio_X509() failed");

2280 
Áûed
;

2283 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2284 
s
->
Àn
 =Üen;

2286 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2287 i‡(
s
->
d©a
 =
NULL
) {

2288 
Áûed
;

2291 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2293 
	`BIO_‰ì
(
bio
);

2294 
	`X509_‰ì
(
˚π
);

2296  
NGX_OK
;

2298 
Áûed
:

2300 
	`BIO_‰ì
(
bio
);

2301 
	`X509_‰ì
(
˚π
);

2303  
NGX_ERROR
;

2304 
	}
}

2307 
ngx_öt_t


2308 
	$ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2310 
u_ch¨
 *
p
;

2311 
size_t
 
Àn
;

2312 
ngx_uöt_t
 
i
;

2313 
ngx_°r_t
 
˚π
;

2315 i‡(
	`ngx_s¶_gë_øw_˚πifiˇã
(
c
, 
poﬁ
, &
˚π
Ë!
NGX_OK
) {

2316  
NGX_ERROR
;

2319 i‡(
˚π
.
Àn
 == 0) {

2320 
s
->
Àn
 = 0;

2321  
NGX_OK
;

2324 
Àn
 = 
˚π
.len - 1;

2326 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2327 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2328 
Àn
++;

2332 
s
->
Àn
 =Üen;

2333 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2334 i‡(
s
->
d©a
 =
NULL
) {

2335  
NGX_ERROR
;

2338 
p
 = 
s
->
d©a
;

2340 
i
 = 0; i < 
˚π
.
Àn
 - 1; i++) {

2341 *
p
++ = 
˚π
.
d©a
[
i
];

2342 i‡(
˚π
.
d©a
[
i
] =
LF
) {

2343 *
p
++ = '\t';

2347  
NGX_OK
;

2348 
	}
}

2351 
ngx_öt_t


2352 
	$ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2354 *
p
;

2355 
size_t
 
Àn
;

2356 
X509
 *
˚π
;

2357 
X509_NAME
 *
«me
;

2359 
s
->
Àn
 = 0;

2361 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2362 i‡(
˚π
 =
NULL
) {

2363  
NGX_OK
;

2366 
«me
 = 
	`X509_gë_subje˘_«me
(
˚π
);

2367 i‡(
«me
 =
NULL
) {

2368 
	`X509_‰ì
(
˚π
);

2369  
NGX_ERROR
;

2372 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2374 
Àn
 = 0; 
p
[len];Üen++) { }

2376 
s
->
Àn
 =Üen;

2377 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2378 i‡(
s
->
d©a
 =
NULL
) {

2379 
	`OPENSSL_‰ì
(
p
);

2380 
	`X509_‰ì
(
˚π
);

2381  
NGX_ERROR
;

2384 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2386 
	`OPENSSL_‰ì
(
p
);

2387 
	`X509_‰ì
(
˚π
);

2389  
NGX_OK
;

2390 
	}
}

2393 
ngx_öt_t


2394 
	$ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2396 *
p
;

2397 
size_t
 
Àn
;

2398 
X509
 *
˚π
;

2399 
X509_NAME
 *
«me
;

2401 
s
->
Àn
 = 0;

2403 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2404 i‡(
˚π
 =
NULL
) {

2405  
NGX_OK
;

2408 
«me
 = 
	`X509_gë_issuî_«me
(
˚π
);

2409 i‡(
«me
 =
NULL
) {

2410 
	`X509_‰ì
(
˚π
);

2411  
NGX_ERROR
;

2414 
p
 = 
	`X509_NAME_⁄ñöe
(
«me
, 
NULL
, 0);

2416 
Àn
 = 0; 
p
[len];Üen++) { }

2418 
s
->
Àn
 =Üen;

2419 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2420 i‡(
s
->
d©a
 =
NULL
) {

2421 
	`OPENSSL_‰ì
(
p
);

2422 
	`X509_‰ì
(
˚π
);

2423  
NGX_ERROR
;

2426 
	`ngx_mem˝y
(
s
->
d©a
, 
p
, 
Àn
);

2428 
	`OPENSSL_‰ì
(
p
);

2429 
	`X509_‰ì
(
˚π
);

2431  
NGX_OK
;

2432 
	}
}

2435 
ngx_öt_t


2436 
	$ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2438 
size_t
 
Àn
;

2439 
X509
 *
˚π
;

2440 
BIO
 *
bio
;

2442 
s
->
Àn
 = 0;

2444 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2445 i‡(
˚π
 =
NULL
) {

2446  
NGX_OK
;

2449 
bio
 = 
	`BIO_√w
(
	`BIO_s_mem
());

2450 i‡(
bio
 =
NULL
) {

2451 
	`X509_‰ì
(
˚π
);

2452  
NGX_ERROR
;

2455 
	`i2a_ASN1_INTEGER
(
bio
, 
	`X509_gë_£rülNumbî
(
˚π
));

2456 
Àn
 = 
	`BIO_≥ndög
(
bio
);

2458 
s
->
Àn
 =Üen;

2459 
s
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

2460 i‡(
s
->
d©a
 =
NULL
) {

2461 
	`BIO_‰ì
(
bio
);

2462 
	`X509_‰ì
(
˚π
);

2463  
NGX_ERROR
;

2466 
	`BIO_ªad
(
bio
, 
s
->
d©a
, 
Àn
);

2467 
	`BIO_‰ì
(
bio
);

2468 
	`X509_‰ì
(
˚π
);

2470  
NGX_OK
;

2471 
	}
}

2474 
ngx_öt_t


2475 
	$ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
s
)

2477 
X509
 *
˚π
;

2479 i‡(
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
Ë!
X509_V_OK
) {

2480 
	`ngx_°r_£t
(
s
, "FAILED");

2481  
NGX_OK
;

2484 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

2486 i‡(
˚π
) {

2487 
	`ngx_°r_£t
(
s
, "SUCCESS");

2490 
	`ngx_°r_£t
(
s
, "NONE");

2493 
	`X509_‰ì
(
˚π
);

2495  
NGX_OK
;

2496 
	}
}

2500 
	$ngx_›ís¶_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

2502 
ngx_›ís¶_c⁄f_t
 *
oscf
;

2504 
oscf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_›ís¶_c⁄f_t
));

2505 i‡(
oscf
 =
NULL
) {

2506  
NULL
;

2515  
oscf
;

2516 
	}
}

2520 
	$ngx_›ís¶_ígöe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2522 
ngx_›ís¶_c⁄f_t
 *
oscf
 = 
c⁄f
;

2524 
ENGINE
 *
ígöe
;

2525 
ngx_°r_t
 *
vÆue
;

2527 i‡(
oscf
->
ígöe
) {

2531 
oscf
->
ígöe
 = 1;

2533 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2535 
ígöe
 = 
	`ENGINE_by_id
((c⁄° *Ë
vÆue
[1].
d©a
);

2537 i‡(
ígöe
 =
NULL
) {

2538 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2539 "ENGINE_by_id(\"%V\"ËÁûed", &
vÆue
[1]);

2540  
NGX_CONF_ERROR
;

2543 i‡(
	`ENGINE_£t_deÁu…
(
ígöe
, 
ENGINE_METHOD_ALL
) == 0) {

2544 
	`ngx_s¶_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2546 &
vÆue
[1]);

2548 
	`ENGINE_‰ì
(
ígöe
);

2550  
NGX_CONF_ERROR
;

2553 
	`ENGINE_‰ì
(
ígöe
);

2555  
NGX_CONF_OK
;

2556 
	}
}

2560 
	$ngx_›ís¶_exô
(
ngx_cy˛e_t
 *
cy˛e
)

2562 
	`EVP_˛ónup
();

2563 
	`ENGINE_˛ónup
();

2564 
	}
}

	@src/event/ngx_event_openssl.h

8 #i‚de‡
_NGX_EVENT_OPENSSL_H_INCLUDED_


9 
	#_NGX_EVENT_OPENSSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 
	~<›ís¶/s¶.h
>

16 
	~<›ís¶/îr.h
>

17 
	~<›ís¶/c⁄f.h
>

18 
	~<›ís¶/ígöe.h
>

19 
	~<›ís¶/evp.h
>

20 
	~<›ís¶/oc•.h
>

22 
	#NGX_SSL_NAME
 "O≥nSSL"

	)

25 
	#ngx_s¶_£ssi⁄_t
 
SSL_SESSION


	)

26 
	#ngx_s¶_c⁄n_t
 
SSL


	)

30 
SSL_CTX
 *
	m˘x
;

31 
ngx_log_t
 *
	mlog
;

32 } 
	tngx_s¶_t
;

36 
ngx_s¶_c⁄n_t
 *
	mc⁄√˘i⁄
;

38 
ngx_öt_t
 
	mœ°
;

39 
ngx_buf_t
 *
	mbuf
;

41 
ngx_c⁄√˘i⁄_h™dÀr_±
 
	mh™dÀr
;

43 
ngx_evít_h™dÀr_±
 
	mßved_ªad_h™dÀr
;

44 
ngx_evít_h™dÀr_±
 
	mßved_wrôe_h™dÀr
;

46 
	mh™dshaked
:1;

47 
	mª√gŸüti⁄
:1;

48 
	mbuf„r
:1;

49 
	mno_waô_shutdown
:1;

50 
	mno_£nd_shutdown
:1;

51 } 
	tngx_s¶_c⁄√˘i⁄_t
;

54 
	#NGX_SSL_NO_SCACHE
 -2

	)

55 
	#NGX_SSL_NONE_SCACHE
 -3

	)

56 
	#NGX_SSL_NO_BUILTIN_SCACHE
 -4

	)

57 
	#NGX_SSL_DFLT_BUILTIN_SCACHE
 -5

	)

60 
	#NGX_SSL_MAX_SESSION_SIZE
 4096

	)

62 
ngx_s¶_£ss_id_s
 
	tngx_s¶_£ss_id_t
;

64 
	sngx_s¶_£ss_id_s
 {

65 
ngx_rbåì_node_t
 
	mnode
;

66 
u_ch¨
 *
	mid
;

67 
size_t
 
	mÀn
;

68 
u_ch¨
 *
	m£ssi⁄
;

69 
ngx_queue_t
 
	mqueue
;

70 
time_t
 
	mexpúe
;

71 #i‡(
NGX_PTR_SIZE
 == 8)

72 *
	m°ub
;

73 
u_ch¨
 
	m£ss_id
[32];

79 
ngx_rbåì_t
 
	m£ssi⁄_rbåì
;

80 
ngx_rbåì_node_t
 
	m£¡öñ
;

81 
ngx_queue_t
 
	mexpúe_queue
;

82 } 
	tngx_s¶_£ssi⁄_ˇche_t
;

86 
	#NGX_SSL_SSLv2
 0x0002

	)

87 
	#NGX_SSL_SSLv3
 0x0004

	)

88 
	#NGX_SSL_TLSv1
 0x0008

	)

89 
	#NGX_SSL_TLSv1_1
 0x0010

	)

90 
	#NGX_SSL_TLSv1_2
 0x0020

	)

93 
	#NGX_SSL_BUFFER
 1

	)

94 
	#NGX_SSL_CLIENT
 2

	)

96 
	#NGX_SSL_BUFSIZE
 16384

	)

99 
ngx_öt_t
 
ngx_s¶_öô
(
ngx_log_t
 *
log
);

100 
ngx_öt_t
 
ngx_s¶_¸óã
(
ngx_s¶_t
 *
s¶
, 
ngx_uöt_t
 
¥Ÿocﬁs
, *
d©a
);

101 
ngx_öt_t
 
ngx_s¶_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

102 
ngx_°r_t
 *
˚π
,Çgx_°r_à*
key
);

103 
ngx_öt_t
 
ngx_s¶_˛õ¡_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

104 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

105 
ngx_öt_t
 
ngx_s¶_åu°ed_˚πifiˇã
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

106 
ngx_°r_t
 *
˚π
, 
ngx_öt_t
 
dïth
);

107 
ngx_öt_t
 
ngx_s¶_¸l
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
¸l
);

108 
ngx_öt_t
 
ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

109 
ngx_°r_t
 *
fûe
,Çgx_°r_à*
ª•⁄dî
, 
ngx_uöt_t
 
vîify
);

110 
ngx_öt_t
 
ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

111 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
);

112 
RSA
 *
ngx_s¶_rß512_key_ˇŒback
(
SSL
 *
s¶
, 
is_exp‹t
, 
key_Àngth
);

113 
ngx_öt_t
 
ngx_s¶_dh∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
);

114 
ngx_öt_t
 
ngx_s¶_ecdh_curve
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
«me
);

115 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche
(
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
£ss_˘x
,

116 
ssize_t
 
buûtö_£ssi⁄_ˇche
, 
ngx_shm_z⁄e_t
 *
shm_z⁄e
, 
time_t
 
timeout
);

117 
ngx_öt_t
 
ngx_s¶_£ssi⁄_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
);

118 
ngx_öt_t
 
ngx_s¶_¸óã_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
,

119 
ngx_uöt_t
 
Êags
);

121 
ngx_s¶_ªmove_ˇched_£ssi⁄
(
SSL_CTX
 *
s¶
, 
ngx_s¶_£ssi⁄_t
 *
£ss
);

122 
ngx_öt_t
 
ngx_s¶_£t_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_s¶_£ssi⁄_t
 *
£ssi⁄
);

123 
	#ngx_s¶_gë_£ssi⁄
(
c
Ë
	`SSL_gë1_£ssi⁄
(c->
s¶
->
c⁄√˘i⁄
)

	)

124 
	#ngx_s¶_‰ì_£ssi⁄
 
SSL_SESSION_‰ì


	)

125 
	#ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
) \

126 
	`SSL_gë_ex_d©a
(
s¶_c⁄n
, 
ngx_s¶_c⁄√˘i⁄_ödex
)

	)

127 
	#ngx_s¶_gë_£rvî_c⁄f
(
s¶_˘x
) \

128 
	`SSL_CTX_gë_ex_d©a
(
s¶_˘x
, 
ngx_s¶_£rvî_c⁄f_ödex
)

	)

130 
	#ngx_s¶_vîify_îr‹_›ti⁄Æ
(
n
) \

131 (
n
 =
X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 \

132 || 
n
 =
X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 \

133 || 
n
 =
X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 \

134 || 
n
 =
X509_V_ERR_CERT_UNTRUSTED
 \

135 || 
n
 =
X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
)

	)

138 
ngx_öt_t
 
ngx_s¶_gë_¥Ÿocﬁ
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

139 
ngx_°r_t
 *
s
);

140 
ngx_öt_t
 
ngx_s¶_gë_cùhî_«me
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

141 
ngx_°r_t
 *
s
);

142 
ngx_öt_t
 
ngx_s¶_gë_£ssi⁄_id
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

143 
ngx_°r_t
 *
s
);

144 
ngx_öt_t
 
ngx_s¶_gë_øw_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

145 
ngx_°r_t
 *
s
);

146 
ngx_öt_t
 
ngx_s¶_gë_˚πifiˇã
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

147 
ngx_°r_t
 *
s
);

148 
ngx_öt_t
 
ngx_s¶_gë_subje˘_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

149 
ngx_°r_t
 *
s
);

150 
ngx_öt_t
 
ngx_s¶_gë_issuî_dn
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

151 
ngx_°r_t
 *
s
);

152 
ngx_öt_t
 
ngx_s¶_gë_£rül_numbî
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

153 
ngx_°r_t
 *
s
);

154 
ngx_öt_t
 
ngx_s¶_gë_˛õ¡_vîify
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_poﬁ_t
 *
poﬁ
,

155 
ngx_°r_t
 *
s
);

158 
ngx_öt_t
 
ngx_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

159 
ssize_t
 
ngx_s¶_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

160 
ssize_t
 
ngx_s¶_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
d©a
, 
size_t
 
size
);

161 
ssize_t
 
ngx_s¶_ªcv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

162 
ngx_chaö_t
 *
ngx_s¶_£nd_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

163 
off_t
 
limô
);

164 
ngx_s¶_‰ì_buf„r
(
ngx_c⁄√˘i⁄_t
 *
c
);

165 
ngx_öt_t
 
ngx_s¶_shutdown
(
ngx_c⁄√˘i⁄_t
 *
c
);

166 
ngx_cde˛
 
ngx_s¶_îr‹
(
ngx_uöt_t
 
Àvñ
, 
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

167 *
fmt
, ...);

168 
ngx_s¶_˛ónup_˘x
(*
d©a
);

171 
ngx_s¶_c⁄√˘i⁄_ödex
;

172 
ngx_s¶_£rvî_c⁄f_ödex
;

173 
ngx_s¶_£ssi⁄_ˇche_ödex
;

174 
ngx_s¶_˚πifiˇã_ödex
;

175 
ngx_s¶_°≠lög_ödex
;

	@src/event/ngx_event_openssl_stapling.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

14 #ifde‡
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB


18 
ngx_°r_t
 
	m°≠À
;

19 
ngx_m£c_t
 
	mtimeout
;

21 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

22 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

24 
ngx_addr_t
 *
	maddrs
;

25 
ngx_°r_t
 
	mho°
;

26 
ngx_°r_t
 
	muri
;

27 
ö_p‹t_t
 
	mp‹t
;

29 
SSL_CTX
 *
	ms¶_˘x
;

31 
X509
 *
	m˚π
;

32 
X509
 *
	missuî
;

34 
time_t
 
	mvÆid
;

36 
	mvîify
:1;

37 
	mlﬂdög
:1;

38 } 
	tngx_s¶_°≠lög_t
;

41 
ngx_s¶_oc•_˘x_s
 
	tngx_s¶_oc•_˘x_t
;

43 
	sngx_s¶_oc•_˘x_s
 {

44 
X509
 *
	m˚π
;

45 
X509
 *
	missuî
;

47 
ngx_uöt_t
 
	m«ddrs
;

49 
ngx_addr_t
 *
	maddrs
;

50 
ngx_°r_t
 
	mho°
;

51 
ngx_°r_t
 
	muri
;

52 
ö_p‹t_t
 
	mp‹t
;

54 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

55 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

57 
ngx_m£c_t
 
	mtimeout
;

59 (*
	mh™dÀr
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

60 *
	md©a
;

62 
ngx_buf_t
 *
	mªque°
;

63 
ngx_buf_t
 *
	mª•⁄£
;

64 
ngx_≥î_c⁄√˘i⁄_t
 
	m≥î
;

66 
ngx_öt_t
 (*
¥o˚ss
)(
ngx_s¶_oc•_˘x_t
 *
	mr
);

68 
ngx_uöt_t
 
	m°©e
;

70 
ngx_uöt_t
 
	mcode
;

71 
ngx_uöt_t
 
	mcou¡
;

73 
ngx_uöt_t
 
	md⁄e
;

75 
u_ch¨
 *
	mhódî_«me_°¨t
;

76 
u_ch¨
 *
	mhódî_«me_íd
;

77 
u_ch¨
 *
	mhódî_°¨t
;

78 
u_ch¨
 *
	mhódî_íd
;

80 
ngx_poﬁ_t
 *
	mpoﬁ
;

81 
ngx_log_t
 *
	mlog
;

85 
ngx_öt_t
 
ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

86 
ngx_°r_t
 *
fûe
);

87 
ngx_öt_t
 
ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
);

88 
ngx_öt_t
 
ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

89 
ngx_°r_t
 *
ª•⁄dî
);

91 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

92 *
d©a
);

93 
ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
);

94 
ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

96 
ngx_s¶_°≠lög_˛ónup
(*
d©a
);

98 
ngx_s¶_oc•_˘x_t
 *
ngx_s¶_oc•_°¨t
();

99 
ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

100 
ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

101 
ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
);

102 
ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

103 
ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

104 
ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

105 
ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
ngx_öt_t
 
ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

108 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

109 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

111 
ngx_öt_t
 
ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

112 
ngx_öt_t
 
ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
);

114 
u_ch¨
 *
ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

117 
ngx_öt_t


118 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

119 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

121 
ngx_öt_t
 
rc
;

122 
ngx_poﬁ_˛ónup_t
 *
˛n
;

123 
ngx_s¶_°≠lög_t
 *
°≠À
;

125 
°≠À
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_°≠lög_t
));

126 i‡(
°≠À
 =
NULL
) {

127  
NGX_ERROR
;

130 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

131 i‡(
˛n
 =
NULL
) {

132  
NGX_ERROR
;

135 
˛n
->
h™dÀr
 = 
ngx_s¶_°≠lög_˛ónup
;

136 
˛n
->
d©a
 = 
°≠À
;

138 i‡(
	`SSL_CTX_£t_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
, 
°≠À
)

141 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

143  
NGX_ERROR
;

146 
°≠À
->
s¶_˘x
 = 
s¶
->
˘x
;

147 
°≠À
->
timeout
 = 60000;

148 
°≠À
->
vîify
 = verify;

150 i‡(
fûe
->
Àn
) {

153 i‡(
	`ngx_s¶_°≠lög_fûe
(
cf
, 
s¶
, 
fûe
Ë!
NGX_OK
) {

154  
NGX_ERROR
;

157 
d⁄e
;

160 
rc
 = 
	`ngx_s¶_°≠lög_issuî
(
cf
, 
s¶
);

162 i‡(
rc
 =
NGX_DECLINED
) {

163  
NGX_OK
;

166 i‡(
rc
 !
NGX_OK
) {

167  
NGX_ERROR
;

170 
rc
 = 
	`ngx_s¶_°≠lög_ª•⁄dî
(
cf
, 
s¶
, 
ª•⁄dî
);

172 i‡(
rc
 =
NGX_DECLINED
) {

173  
NGX_OK
;

176 i‡(
rc
 !
NGX_OK
) {

177  
NGX_ERROR
;

180 
d⁄e
:

182 
	`SSL_CTX_£t_é£xt_°©us_cb
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_°©us_ˇŒback
);

183 
	`SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
->
˘x
, 
°≠À
);

185  
NGX_OK
;

186 
	}
}

189 
ngx_öt_t


190 
	$ngx_s¶_°≠lög_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
)

192 
BIO
 *
bio
;

193 
Àn
;

194 
u_ch¨
 *
p
, *
buf
;

195 
OCSP_RESPONSE
 *
ª•⁄£
;

196 
ngx_s¶_°≠lög_t
 *
°≠À
;

198 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

200 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, 
fûe
, 1Ë!
NGX_OK
) {

201  
NGX_ERROR
;

204 
bio
 = 
	`BIO_√w_fûe
((*Ë
fûe
->
d©a
, "r");

205 i‡(
bio
 =
NULL
) {

206 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

207 "BIO_√w_fûe(\"%s\"ËÁûed", 
fûe
->
d©a
);

208  
NGX_ERROR
;

211 
ª•⁄£
 = 
	`d2i_OCSP_RESPONSE_bio
(
bio
, 
NULL
);

212 i‡(
ª•⁄£
 =
NULL
) {

213 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

214 "d2i_OCSP_RESPONSE_bio(\"%s\"ËÁûed", 
fûe
->
d©a
);

215 
	`BIO_‰ì
(
bio
);

216  
NGX_ERROR
;

219 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, 
NULL
);

220 i‡(
Àn
 <= 0) {

221 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

222 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

223 
Áûed
;

226 
buf
 = 
	`ngx_Æloc
(
Àn
, 
s¶
->
log
);

227 i‡(
buf
 =
NULL
) {

228 
Áûed
;

231 
p
 = 
buf
;

232 
Àn
 = 
	`i2d_OCSP_RESPONSE
(
ª•⁄£
, &
p
);

233 i‡(
Àn
 <= 0) {

234 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

235 "i2d_OCSP_RESPONSE(\"%s\"ËÁûed", 
fûe
->
d©a
);

236 
	`ngx_‰ì
(
buf
);

237 
Áûed
;

240 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

241 
	`BIO_‰ì
(
bio
);

243 
°≠À
->°≠À.
d©a
 = 
buf
;

244 
°≠À
->°≠À.
Àn
 =Üen;

246  
NGX_OK
;

248 
Áûed
:

250 
	`OCSP_RESPONSE_‰ì
(
ª•⁄£
);

251 
	`BIO_‰ì
(
bio
);

253  
NGX_ERROR
;

254 
	}
}

257 
ngx_öt_t


258 
	$ngx_s¶_°≠lög_issuî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
)

260 
i
, 
n
, 
rc
;

261 
X509
 *
˚π
, *
issuî
;

262 
X509_STORE
 *
°‹e
;

263 
X509_STORE_CTX
 *
°‹e_˘x
;

264 
	`STACK_OF
(
X509
Ë*
chaö
;

265 
ngx_s¶_°≠lög_t
 *
°≠À
;

267 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

268 
˚π
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_˚πifiˇã_ödex
);

270 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

271 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
s¶
->
˘x
, &
chaö
);

273 
chaö
 = 
s¶
->
˘x
->
exåa_˚πs
;

276 
n
 = 
	`sk_X509_num
(
chaö
);

278 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

279 "SSL gë issuî: %dÉxå®˚πs", 
n
);

281 
i
 = 0; i < 
n
; i++) {

282 
issuî
 = 
	`sk_X509_vÆue
(
chaö
, 
i
);

283 i‡(
	`X509_check_issued
(
issuî
, 
˚π
Ë=
X509_V_OK
) {

284 
	`CRYPTO_add
(&
issuî
->
ª„ªn˚s
, 1, 
CRYPTO_LOCK_X509
);

286 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

287 "SSL gë issuî: found %∞öÉxå®˚πs", 
issuî
);

289 
°≠À
->
˚π
 = cert;

290 
°≠À
->
issuî
 = issuer;

292  
NGX_OK
;

296 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
s¶
->
˘x
);

297 i‡(
°‹e
 =
NULL
) {

298 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

300  
NGX_ERROR
;

303 
°‹e_˘x
 = 
	`X509_STORE_CTX_√w
();

304 i‡(
°‹e_˘x
 =
NULL
) {

305 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

307  
NGX_ERROR
;

310 i‡(
	`X509_STORE_CTX_öô
(
°‹e_˘x
, 
°‹e
, 
NULL
, NULL) == 0) {

311 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

313  
NGX_ERROR
;

316 
rc
 = 
	`X509_STORE_CTX_gë1_issuî
(&
issuî
, 
°‹e_˘x
, 
˚π
);

318 i‡(
rc
 == -1) {

319 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
s¶
->
log
, 0,

321 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

322  
NGX_ERROR
;

325 i‡(
rc
 == 0) {

326 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

328 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

329  
NGX_DECLINED
;

332 
	`X509_STORE_CTX_‰ì
(
°‹e_˘x
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
s¶
->
log
, 0,

335 "SSL gë issuî: found %∞ö cîà°‹e", 
issuî
);

337 
°≠À
->
˚π
 = cert;

338 
°≠À
->
issuî
 = issuer;

340  
NGX_OK
;

341 
	}
}

344 
ngx_öt_t


345 
	$ngx_s¶_°≠lög_ª•⁄dî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
ª•⁄dî
)

347 
ngx_uæ_t
 
u
;

348 *
s
;

349 
ngx_s¶_°≠lög_t
 *
°≠À
;

350 
	`STACK_OF
(
OPENSSL_STRING
Ë*
aü
;

352 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

354 i‡(
ª•⁄dî
->
Àn
 == 0) {

358 
aü
 = 
	`X509_gë1_oc•
(
°≠À
->
˚π
);

359 i‡(
aü
 =
NULL
) {

360 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

363  
NGX_DECLINED
;

366 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10000000L

367 
s
 = 
	`sk_OPENSSL_STRING_vÆue
(
aü
, 0);

369 
s
 = 
	`sk_vÆue
(
aü
, 0);

371 i‡(
s
 =
NULL
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

375 
	`X509_emaû_‰ì
(
aü
);

376  
NGX_DECLINED
;

379 
ª•⁄dî
->
Àn
 = 
	`ngx_°æí
(
s
);

380 
ª•⁄dî
->
d©a
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñe•⁄dî->
Àn
);

381 i‡(
ª•⁄dî
->
d©a
 =
NULL
) {

382 
	`X509_emaû_‰ì
(
aü
);

383  
NGX_ERROR
;

386 
	`ngx_mem˝y
(
ª•⁄dî
->
d©a
, 
s
,Ñe•⁄dî->
Àn
);

387 
	`X509_emaû_‰ì
(
aü
);

390 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

392 
u
.
uæ
 = *
ª•⁄dî
;

393 
u
.
deÁu…_p‹t
 = 80;

394 
u
.
uri_∑π
 = 1;

396 i‡(
u
.
uæ
.
Àn
 > 7

397 && 
	`ngx_°∫ˇ£cmp
(
u
.
uæ
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

399 
u
.
uæ
.
Àn
 -= 7;

400 
u
.
uæ
.
d©a
 += 7;

403 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

405 "övÆid URLÖªfix i¿OCSPÑe•⁄dî \"%V\"", &
u
.
uæ
);

406  
NGX_DECLINED
;

409 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

410 i‡(
u
.
îr
) {

411 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

413 "%†ö OCSPÑe•⁄dî \"%V\"", 
u
.
îr
, &u.
uæ
);

414  
NGX_DECLINED
;

417  
NGX_ERROR
;

420 
°≠À
->
addrs
 = 
u
.addrs;

421 
°≠À
->
ho°
 = 
u
.host;

422 
°≠À
->
uri
 = 
u
.uri;

423 
°≠À
->
p‹t
 = 
u
.port;

425 i‡(
°≠À
->
uri
.
Àn
 == 0) {

426 
	`ngx_°r_£t
(&
°≠À
->
uri
, "/");

429  
NGX_OK
;

430 
	}
}

433 
ngx_öt_t


434 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

435 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

437 
ngx_s¶_°≠lög_t
 *
°≠À
;

439 
°≠À
 = 
	`SSL_CTX_gë_ex_d©a
(
s¶
->
˘x
, 
ngx_s¶_°≠lög_ödex
);

441 
°≠À
->
ªsﬁvî
 =Ñesolver;

442 
°≠À
->
ªsﬁvî_timeout
 =Ñesolver_timeout;

444  
NGX_OK
;

445 
	}
}

449 
	$ngx_s¶_˚πifiˇã_°©us_ˇŒback
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
d©a
)

451 
rc
;

452 
u_ch¨
 *
p
;

453 
ngx_c⁄√˘i⁄_t
 *
c
;

454 
ngx_s¶_°≠lög_t
 *
°≠À
;

456 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

458 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

461 
°≠À
 = 
d©a
;

462 
rc
 = 
SSL_TLSEXT_ERR_NOACK
;

464 i‡(
°≠À
->°≠À.
Àn
) {

467 
p
 = 
	`OPENSSL_mÆloc
(
°≠À
->°≠À.
Àn
);

468 i‡(
p
 =
NULL
) {

469 
	`ngx_s¶_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "OPENSSL_malloc() failed");

470  
SSL_TLSEXT_ERR_NOACK
;

473 
	`ngx_mem˝y
(
p
, 
°≠À
->°≠À.
d©a
, sè∂e->°≠À.
Àn
);

475 
	`SSL_£t_é£xt_°©us_oc•_ª•
(
s¶_c⁄n
, 
p
, 
°≠À
->°≠À.
Àn
);

477 
rc
 = 
SSL_TLSEXT_ERR_OK
;

480 
	`ngx_s¶_°≠lög_upd©e
(
°≠À
);

482  
rc
;

483 
	}
}

487 
	$ngx_s¶_°≠lög_upd©e
(
ngx_s¶_°≠lög_t
 *
°≠À
)

489 
ngx_s¶_oc•_˘x_t
 *
˘x
;

491 i‡(
°≠À
->
ho°
.
Àn
 == 0

492 || 
°≠À
->
lﬂdög
 || sè∂e->
vÆid
 >
	`ngx_time
())

497 
°≠À
->
lﬂdög
 = 1;

499 
˘x
 = 
	`ngx_s¶_oc•_°¨t
();

500 i‡(
˘x
 =
NULL
) {

504 
˘x
->
˚π
 = 
°≠À
->cert;

505 
˘x
->
issuî
 = 
°≠À
->issuer;

507 
˘x
->
addrs
 = 
°≠À
->addrs;

508 
˘x
->
ho°
 = 
°≠À
->host;

509 
˘x
->
uri
 = 
°≠À
->uri;

510 
˘x
->
p‹t
 = 
°≠À
->port;

511 
˘x
->
timeout
 = 
°≠À
->timeout;

513 
˘x
->
ªsﬁvî
 = 
°≠À
->resolver;

514 
˘x
->
ªsﬁvî_timeout
 = 
°≠À
->resolver_timeout;

516 
˘x
->
h™dÀr
 = 
ngx_s¶_°≠lög_oc•_h™dÀr
;

517 
˘x
->
d©a
 = 
°≠À
;

519 
	`ngx_s¶_oc•_ªque°
(
˘x
);

522 
	}
}

526 
	$ngx_s¶_°≠lög_oc•_h™dÀr
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

528 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x0090707fL

531 
u_ch¨
 *
p
;

532 
n
;

533 
size_t
 
Àn
;

534 
ngx_°r_t
 
ª•⁄£
;

535 
X509_STORE
 *
°‹e
;

536 
	`STACK_OF
(
X509
Ë*
chaö
;

537 
OCSP_CERTID
 *
id
;

538 
OCSP_RESPONSE
 *
oc•
;

539 
OCSP_BASICRESP
 *
basic
;

540 
ngx_s¶_°≠lög_t
 *
°≠À
;

541 
ASN1_GENERALIZEDTIME
 *
thisupd©e
, *
√xtupd©e
;

543 
°≠À
 = 
˘x
->
d©a
;

544 
oc•
 = 
NULL
;

545 
basic
 = 
NULL
;

546 
id
 = 
NULL
;

548 i‡(
˘x
->
code
 != 200) {

549 
îr‹
;

554 
Àn
 = 
˘x
->
ª•⁄£
->
œ°
 - ctx->ª•⁄£->
pos
;

555 
p
 = 
˘x
->
ª•⁄£
->
pos
;

557 
oc•
 = 
	`d2i_OCSP_RESPONSE
(
NULL
, &
p
, 
Àn
);

558 i‡(
oc•
 =
NULL
) {

559 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

561 
îr‹
;

564 
n
 = 
	`OCSP_ª•⁄£_°©us
(
oc•
);

566 i‡(
n
 !
OCSP_RESPONSE_STATUS_SUCCESSFUL
) {

567 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

569 
n
, 
	`OCSP_ª•⁄£_°©us_°r
(n));

570 
îr‹
;

573 
basic
 = 
	`OCSP_ª•⁄£_gë1_basic
(
oc•
);

574 i‡(
basic
 =
NULL
) {

575 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

577 
îr‹
;

580 
°‹e
 = 
	`SSL_CTX_gë_˚π_°‹e
(
°≠À
->
s¶_˘x
);

581 i‡(
°‹e
 =
NULL
) {

582 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

584 
îr‹
;

587 #i‡
OPENSSL_VERSION_NUMBER
 >= 0x10001000L

588 
	`SSL_CTX_gë_exåa_chaö_˚πs
(
°≠À
->
s¶_˘x
, &
chaö
);

590 
chaö
 = 
°≠À
->
s¶_˘x
->
exåa_˚πs
;

593 i‡(
	`OCSP_basic_vîify
(
basic
, 
chaö
, 
°‹e
,

594 
°≠À
->
vîify
 ? 
OCSP_TRUSTOTHER
 : 
OCSP_NOVERIFY
)

597 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

599 
îr‹
;

602 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

603 i‡(
id
 =
NULL
) {

604 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

606 
îr‹
;

609 i‡(
	`OCSP_ª•_föd_°©us
(
basic
, 
id
, &
n
, 
NULL
, NULL,

610 &
thisupd©e
, &
√xtupd©e
)

613 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

615 
n
, 
	`OCSP_ª•⁄£_°©us_°r
(n));

616 
îr‹
;

619 i‡(
n
 !
V_OCSP_CERTSTATUS_GOOD
) {

620 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

622 
n
, 
	`OCSP_˚π_°©us_°r
(n));

623 
îr‹
;

626 i‡(
	`OCSP_check_vÆidôy
(
thisupd©e
, 
√xtupd©e
, 300, -1) != 1) {

627 
	`ngx_s¶_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

629 
îr‹
;

632 
	`OCSP_CERTID_‰ì
(
id
);

633 
	`OCSP_BASICRESP_‰ì
(
basic
);

634 
	`OCSP_RESPONSE_‰ì
(
oc•
);

638 
ª•⁄£
.
Àn
 =Üen;

639 
ª•⁄£
.
d©a
 = 
	`ngx_Æloc
‘e•⁄£.
Àn
, 
˘x
->
log
);

641 i‡(
ª•⁄£
.
d©a
 =
NULL
) {

642 
d⁄e
;

645 
	`ngx_mem˝y
(
ª•⁄£
.
d©a
, 
˘x
->ª•⁄£->
pos
,Ñe•⁄£.
Àn
);

647 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

649 
	`OCSP_˚π_°©us_°r
(
n
), 
ª•⁄£
.
Àn
);

651 i‡(
°≠À
->°≠À.
d©a
) {

652 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

655 
°≠À
->°≠À = 
ª•⁄£
;

657 
d⁄e
:

659 
°≠À
->
lﬂdög
 = 0;

660 
°≠À
->
vÆid
 = 
	`ngx_time
() + 3600;

662 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

665 
îr‹
:

667 
°≠À
->
lﬂdög
 = 0;

668 
°≠À
->
vÆid
 = 
	`ngx_time
() + 300;

670 i‡(
id
) {

671 
	`OCSP_CERTID_‰ì
(
id
);

674 i‡(
basic
) {

675 
	`OCSP_BASICRESP_‰ì
(
basic
);

678 i‡(
oc•
) {

679 
	`OCSP_RESPONSE_‰ì
(
oc•
);

682 
	`ngx_s¶_oc•_d⁄e
(
˘x
);

683 
	}
}

687 
	$ngx_s¶_°≠lög_˛ónup
(*
d©a
)

689 
ngx_s¶_°≠lög_t
 *
°≠À
 = 
d©a
;

691 i‡(
°≠À
->
issuî
) {

692 
	`X509_‰ì
(
°≠À
->
issuî
);

695 i‡(
°≠À
->°≠À.
d©a
) {

696 
	`ngx_‰ì
(
°≠À
->°≠À.
d©a
);

698 
	}
}

701 
ngx_s¶_oc•_˘x_t
 *

702 
	$ngx_s¶_oc•_°¨t
()

704 
ngx_log_t
 *
log
;

705 
ngx_poﬁ_t
 *
poﬁ
;

706 
ngx_s¶_oc•_˘x_t
 *
˘x
;

708 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
ngx_cy˛e
->
log
);

709 i‡(
poﬁ
 =
NULL
) {

710  
NULL
;

713 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_s¶_oc•_˘x_t
));

714 i‡(
˘x
 =
NULL
) {

715 
	`ngx_de°roy_poﬁ
(
poﬁ
);

716  
NULL
;

719 
log
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_log_t
));

720 i‡(
log
 =
NULL
) {

721 
	`ngx_de°roy_poﬁ
(
poﬁ
);

722  
NULL
;

725 
˘x
->
poﬁ
 =Öool;

727 *
log
 = *
˘x
->
poﬁ
->log;

729 
˘x
->
poﬁ
->
log
 =Üog;

730 
˘x
->
log
 =Üog;

732 
log
->
h™dÀr
 = 
ngx_s¶_oc•_log_îr‹
;

733 
log
->
d©a
 = 
˘x
;

734 
log
->
a˘i⁄
 = "requesting certificate status";

736  
˘x
;

737 
	}
}

741 
	$ngx_s¶_oc•_d⁄e
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

743 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

746 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

747 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

750 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

751 
	}
}

755 
	$ngx_s¶_oc•_îr‹
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

760 
˘x
->
code
 = 0;

761 
˘x
->
	`h™dÀr
(ctx);

762 
	}
}

766 
	$ngx_s¶_oc•_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

768 
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
, 
ãmp
;

770 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

773 i‡(
	`ngx_s¶_oc•_¸óã_ªque°
(
˘x
Ë!
NGX_OK
) {

774 
	`ngx_s¶_oc•_îr‹
(
˘x
);

778 i‡(
˘x
->
ªsﬁvî
) {

781 
ãmp
.
«me
 = 
˘x
->
ho°
;

783 
ªsﬁve
 = 
	`ngx_ªsﬁve_°¨t
(
˘x
->
ªsﬁvî
, &
ãmp
);

784 i‡(
ªsﬁve
 =
NULL
) {

785 
	`ngx_s¶_oc•_îr‹
(
˘x
);

789 i‡(
ªsﬁve
 =
NGX_NO_RESOLVER
) {

790 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
˘x
->
log
, 0,

791 "nÿªsﬁvî deföedÅÿªsﬁvê%V", &
˘x
->
ho°
);

792 
c⁄√˘
;

795 
ªsﬁve
->
«me
 = 
˘x
->
ho°
;

796 
ªsﬁve
->
ty≥
 = 
NGX_RESOLVE_A
;

797 
ªsﬁve
->
h™dÀr
 = 
ngx_s¶_oc•_ªsﬁve_h™dÀr
;

798 
ªsﬁve
->
d©a
 = 
˘x
;

799 
ªsﬁve
->
timeout
 = 
˘x
->
ªsﬁvî_timeout
;

801 i‡(
	`ngx_ªsﬁve_«me
(
ªsﬁve
Ë!
NGX_OK
) {

802 
	`ngx_s¶_oc•_îr‹
(
˘x
);

809 
c⁄√˘
:

811 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

812 
	}
}

816 
	$ngx_s¶_oc•_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
ªsﬁve
)

818 
ngx_s¶_oc•_˘x_t
 *
˘x
 = 
ªsﬁve
->
d©a
;

820 
u_ch¨
 *
p
;

821 
size_t
 
Àn
;

822 
ö_p‹t_t
 
p‹t
;

823 
ngx_uöt_t
 
i
;

824 
sockaddr_ö
 *
sö
;

826 
	`ngx_log_debug0
(
NGX_LOG_ALERT
, 
˘x
->
log
, 0,

829 i‡(
ªsﬁve
->
°©e
) {

830 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

832 &
ªsﬁve
->
«me
,Ñesﬁve->
°©e
,

833 
	`ngx_ªsﬁvî_°ªº‹
(
ªsﬁve
->
°©e
));

834 
Áûed
;

837 #i‡(
NGX_DEBUG
)

839 
ö_addr_t
 
addr
;

841 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

842 
addr
 = 
	`¡ohl
(
ªsﬁve
->
addrs
[
i
]);

844 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

846 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

847 (
addr
 >> 8) & 0xff,áddr & 0xff);

852 
˘x
->
«ddrs
 = 
ªsﬁve
->naddrs;

853 
˘x
->
addrs
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
, ctx->
«ddrs
 * (
ngx_addr_t
));

855 i‡(
˘x
->
addrs
 =
NULL
) {

856 
Áûed
;

859 
p‹t
 = 
	`ht⁄s
(
˘x
->port);

861 
i
 = 0; i < 
ªsﬁve
->
«ddrs
; i++) {

863 
sö
 = 
	`ngx_pˇŒoc
(
˘x
->
poﬁ
, (
sockaddr_ö
));

864 i‡(
sö
 =
NULL
) {

865 
Áûed
;

868 
sö
->
sö_Ámûy
 = 
AF_INET
;

869 
sö
->
sö_p‹t
 = 
p‹t
;

870 
sö
->
sö_addr
.
s_addr
 = 
ªsﬁve
->
addrs
[
i
];

872 
˘x
->
addrs
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

873 
˘x
->
addrs
[
i
].
sockÀn
 = (
sockaddr_ö
);

875 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65535") - 1;

877 
p
 = 
	`ngx_≤Æloc
(
˘x
->
poﬁ
, 
Àn
);

878 i‡(
p
 =
NULL
) {

879 
Áûed
;

882 
Àn
 = 
	`ngx_sock_¡›
((
sockaddr
 *Ë
sö
, 
p
,Üen, 1);

884 
˘x
->
addrs
[
i
].
«me
.
Àn
 =Üen;

885 
˘x
->
addrs
[
i
].
«me
.
d©a
 = 
p
;

888 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

890 
	`ngx_s¶_oc•_c⁄√˘
(
˘x
);

893 
Áûed
:

895 
	`ngx_ªsﬁve_«me_d⁄e
(
ªsﬁve
);

896 
	`ngx_s¶_oc•_îr‹
(
˘x
);

897 
	}
}

901 
	$ngx_s¶_oc•_c⁄√˘
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

903 
ngx_öt_t
 
rc
;

905 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

910 
˘x
->
≥î
.
sockaddr
 = ctx->
addrs
[0].sockaddr;

911 
˘x
->
≥î
.
sockÀn
 = ctx->
addrs
[0].socklen;

912 
˘x
->
≥î
.
«me
 = &˘x->
addrs
[0].name;

913 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

914 
˘x
->
≥î
.
log
 = ctx->log;

915 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

917 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

919 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

922 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

923 
	`ngx_s¶_oc•_îr‹
(
˘x
);

927 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = ctx;

928 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = ctx->pool;

930 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_s¶_oc•_ªad_h™dÀr
;

931 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_s¶_oc•_wrôe_h™dÀr
;

933 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_°©us_löe
;

935 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, ctx->
timeout
);

936 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, ctx->
timeout
);

938 i‡(
rc
 =
NGX_OK
) {

939 
	`ngx_s¶_oc•_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

942 
	}
}

946 
	$ngx_s¶_oc•_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

948 
ssize_t
 
n
, 
size
;

949 
ngx_c⁄√˘i⁄_t
 *
c
;

950 
ngx_s¶_oc•_˘x_t
 *
˘x
;

952 
c
 = 
wev
->
d©a
;

953 
˘x
 = 
c
->
d©a
;

955 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

958 i‡(
wev
->
timedout
) {

959 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

961 
	`ngx_s¶_oc•_îr‹
(
˘x
);

965 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

967 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

969 i‡(
n
 =
NGX_ERROR
) {

970 
	`ngx_s¶_oc•_îr‹
(
˘x
);

974 i‡(
n
 > 0) {

975 
˘x
->
ªque°
->
pos
 +
n
;

977 i‡(
n
 =
size
) {

978 
wev
->
h™dÀr
 = 
ngx_s¶_oc•_dummy_h™dÀr
;

980 i‡(
wev
->
timî_£t
) {

981 
	`ngx_dñ_timî
(
wev
);

984 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

985 
	`ngx_s¶_oc•_îr‹
(
˘x
);

992 i‡(!
wev
->
timî_£t
) {

993 
	`ngx_add_timî
(
wev
, 
˘x
->
timeout
);

995 
	}
}

999 
	$ngx_s¶_oc•_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

1001 
ssize_t
 
n
, 
size
;

1002 
ngx_öt_t
 
rc
;

1003 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1004 
ngx_c⁄√˘i⁄_t
 *
c
;

1006 
c
 = 
ªv
->
d©a
;

1007 
˘x
 = 
c
->
d©a
;

1009 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

1012 i‡(
ªv
->
timedout
) {

1013 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

1015 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1019 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1020 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 16384);

1021 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

1022 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1029 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

1031 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
œ°
, 
size
);

1033 i‡(
n
 > 0) {

1034 
˘x
->
ª•⁄£
->
œ°
 +
n
;

1036 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1038 i‡(
rc
 =
NGX_ERROR
) {

1039 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1046 i‡(
n
 =
NGX_AGAIN
) {

1048 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1049 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1058 
˘x
->
d⁄e
 = 1;

1060 
rc
 = 
˘x
->
	`¥o˚ss
(ctx);

1062 i‡(
rc
 =
NGX_DONE
) {

1067 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1070 
	`ngx_s¶_oc•_îr‹
(
˘x
);

1071 
	}
}

1075 
	$ngx_s¶_oc•_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1077 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

1079 
	}
}

1082 
ngx_öt_t


1083 
	$ngx_s¶_oc•_¸óã_ªque°
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1085 
Àn
;

1086 
u_ch¨
 *
p
;

1087 
uöçå_t
 
esˇ≥
;

1088 
ngx_°r_t
 
bö¨y
, 
ba£64
;

1089 
ngx_buf_t
 *
b
;

1090 
OCSP_CERTID
 *
id
;

1091 
OCSP_REQUEST
 *
oc•
;

1093 
oc•
 = 
	`OCSP_REQUEST_√w
();

1094 i‡(
oc•
 =
NULL
) {

1095 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1097  
NGX_ERROR
;

1100 
id
 = 
	`OCSP_˚π_to_id
(
NULL
, 
˘x
->
˚π
, ctx->
issuî
);

1101 i‡(
id
 =
NULL
) {

1102 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1104 
Áûed
;

1107 i‡(
	`OCSP_ªque°_add0_id
(
oc•
, 
id
Ë=
NULL
) {

1108 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1110 
Áûed
;

1113 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, 
NULL
);

1114 i‡(
Àn
 <= 0) {

1115 
	`ngx_s¶_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1117 
Áûed
;

1120 
bö¨y
.
Àn
 =Üen;

1121 
bö¨y
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
Àn
);

1122 i‡(
bö¨y
.
d©a
 =
NULL
) {

1123 
Áûed
;

1126 
p
 = 
bö¨y
.
d©a
;

1127 
Àn
 = 
	`i2d_OCSP_REQUEST
(
oc•
, &
p
);

1128 i‡(
Àn
 <= 0) {

1129 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
˘x
->
log
, 0,

1131 
Áûed
;

1134 
ba£64
.
Àn
 = 
	`ngx_ba£64_ícoded_Àngth
(
bö¨y
.len);

1135 
ba£64
.
d©a
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, ba£64.
Àn
);

1136 i‡(
ba£64
.
d©a
 =
NULL
) {

1137 
Áûed
;

1140 
	`ngx_ícode_ba£64
(&
ba£64
, &
bö¨y
);

1142 
esˇ≥
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ba£64
.
d©a
, ba£64.
Àn
,

1143 
NGX_ESCAPE_URI_COMPONENT
);

1145 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1147 
ba£64
.
Àn
, 
esˇ≥
);

1149 
Àn
 = ("GET "Ë- 1 + 
˘x
->
uri
.len + ("/") - 1

1150 + 
ba£64
.
Àn
 + 2 * 
esˇ≥
 + (" HTTP/1.0" 
CRLF
) - 1

1151 + ("Ho°: "Ë- 1 + 
˘x
->
ho°
.
Àn
 + (
CRLF
) - 1

1152 + (
CRLF
) - 1;

1154 
b
 = 
	`ngx_¸óã_ãmp_buf
(
˘x
->
poﬁ
, 
Àn
);

1155 i‡(
b
 =
NULL
) {

1156 
Áûed
;

1159 
p
 = 
b
->
œ°
;

1161 
p
 = 
	`ngx_˝ymem
(p, "GET ", ("GET ") - 1);

1162 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
uri
.
d©a
, ctx->uri.
Àn
);

1164 i‡(
˘x
->
uri
.
d©a
[˘x->uri.
Àn
 - 1] != '/') {

1165 *
p
++ = '/';

1168 i‡(
esˇ≥
 == 0) {

1169 
p
 = 
	`ngx_˝ymem
’, 
ba£64
.
d©a
, ba£64.
Àn
);

1172 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
ba£64
.
d©a
, ba£64.
Àn
,

1173 
NGX_ESCAPE_URI_COMPONENT
);

1176 
p
 = 
	`ngx_˝ymem
’, " HTTP/1.0" 
CRLF
, (" HTTP/1.0" CRLF) - 1);

1177 
p
 = 
	`ngx_˝ymem
(p, "Host: ", ("Host: ") - 1);

1178 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
ho°
.
d©a
, ctx->ho°.
Àn
);

1179 *
p
++ = 
CR
; *p++ = 
LF
;

1182 *
p
++ = 
CR
; *p++ = 
LF
;

1184 
b
->
œ°
 = 
p
;

1185 
˘x
->
ªque°
 = 
b
;

1187  
NGX_OK
;

1189 
Áûed
:

1191 
	`OCSP_REQUEST_‰ì
(
oc•
);

1193  
NGX_ERROR
;

1194 
	}
}

1197 
ngx_öt_t


1198 
	$ngx_s¶_oc•_¥o˚ss_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1200 
ngx_öt_t
 
rc
;

1202 
rc
 = 
	`ngx_s¶_oc•_∑r£_°©us_löe
(
˘x
);

1204 i‡(
rc
 =
NGX_OK
) {

1206 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1208 
˘x
->
ª•⁄£
->
pos
 - ctx->ª•⁄£->
°¨t
,

1209 
˘x
->
ª•⁄£
->
°¨t
);

1212 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_hódîs
;

1213  
˘x
->
	`¥o˚ss
(ctx);

1216 i‡(
rc
 =
NGX_AGAIN
) {

1217  
NGX_AGAIN
;

1222 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1225  
NGX_ERROR
;

1226 
	}
}

1229 
ngx_öt_t


1230 
	$ngx_s¶_oc•_∑r£_°©us_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1232 
u_ch¨
 
ch
;

1233 
u_ch¨
 *
p
;

1234 
ngx_buf_t
 *
b
;

1236 
sw_°¨t
 = 0,

1237 
sw_H
,

1238 
sw_HT
,

1239 
sw_HTT
,

1240 
sw_HTTP
,

1241 
sw_fú°_maj‹_digô
,

1242 
sw_maj‹_digô
,

1243 
sw_fú°_mö‹_digô
,

1244 
sw_mö‹_digô
,

1245 
sw_°©us
,

1246 
sw_•a˚_a·î_°©us
,

1247 
sw_°©us_ãxt
,

1248 
sw_Æmo°_d⁄e


1249 } 
°©e
;

1251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1254 
°©e
 = 
˘x
->state;

1255 
b
 = 
˘x
->
ª•⁄£
;

1257 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1258 
ch
 = *
p
;

1260 
°©e
) {

1263 
sw_°¨t
:

1264 
ch
) {

1266 
°©e
 = 
sw_H
;

1269  
NGX_ERROR
;

1273 
sw_H
:

1274 
ch
) {

1276 
°©e
 = 
sw_HT
;

1279  
NGX_ERROR
;

1283 
sw_HT
:

1284 
ch
) {

1286 
°©e
 = 
sw_HTT
;

1289  
NGX_ERROR
;

1293 
sw_HTT
:

1294 
ch
) {

1296 
°©e
 = 
sw_HTTP
;

1299  
NGX_ERROR
;

1303 
sw_HTTP
:

1304 
ch
) {

1306 
°©e
 = 
sw_fú°_maj‹_digô
;

1309  
NGX_ERROR
;

1314 
sw_fú°_maj‹_digô
:

1315 i‡(
ch
 < '1' || ch > '9') {

1316  
NGX_ERROR
;

1319 
°©e
 = 
sw_maj‹_digô
;

1323 
sw_maj‹_digô
:

1324 i‡(
ch
 == '.') {

1325 
°©e
 = 
sw_fú°_mö‹_digô
;

1329 i‡(
ch
 < '0' || ch > '9') {

1330  
NGX_ERROR
;

1336 
sw_fú°_mö‹_digô
:

1337 i‡(
ch
 < '0' || ch > '9') {

1338  
NGX_ERROR
;

1341 
°©e
 = 
sw_mö‹_digô
;

1345 
sw_mö‹_digô
:

1346 i‡(
ch
 == ' ') {

1347 
°©e
 = 
sw_°©us
;

1351 i‡(
ch
 < '0' || ch > '9') {

1352  
NGX_ERROR
;

1358 
sw_°©us
:

1359 i‡(
ch
 == ' ') {

1363 i‡(
ch
 < '0' || ch > '9') {

1364  
NGX_ERROR
;

1367 
˘x
->
code
 = ctx->codê* 10 + 
ch
 - '0';

1369 i‡(++
˘x
->
cou¡
 == 3) {

1370 
°©e
 = 
sw_•a˚_a·î_°©us
;

1376 
sw_•a˚_a·î_°©us
:

1377 
ch
) {

1379 
°©e
 = 
sw_°©us_ãxt
;

1382 
°©e
 = 
sw_°©us_ãxt
;

1384 
CR
:

1385 
°©e
 = 
sw_Æmo°_d⁄e
;

1387 
LF
:

1388 
d⁄e
;

1390  
NGX_ERROR
;

1395 
sw_°©us_ãxt
:

1396 
ch
) {

1397 
CR
:

1398 
°©e
 = 
sw_Æmo°_d⁄e
;

1400 
LF
:

1401 
d⁄e
;

1406 
sw_Æmo°_d⁄e
:

1407 
ch
) {

1408 
LF
:

1409 
d⁄e
;

1411  
NGX_ERROR
;

1416 
b
->
pos
 = 
p
;

1417 
˘x
->
°©e
 = state;

1419  
NGX_AGAIN
;

1421 
d⁄e
:

1423 
b
->
pos
 = 
p
 + 1;

1424 
˘x
->
°©e
 = 
sw_°¨t
;

1426  
NGX_OK
;

1427 
	}
}

1430 
ngx_öt_t


1431 
	$ngx_s¶_oc•_¥o˚ss_hódîs
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1433 
size_t
 
Àn
;

1434 
ngx_öt_t
 
rc
;

1436 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1440 
rc
 = 
	`ngx_s¶_oc•_∑r£_hódî_löe
(
˘x
);

1442 i‡(
rc
 =
NGX_OK
) {

1444 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1446 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
,

1447 
˘x
->
hódî_«me_°¨t
,

1448 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1449 
˘x
->
hódî_°¨t
);

1451 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

1453 i‡(
Àn
 == ("Content-Type") - 1

1454 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

1455 (
u_ch¨
 *) "Content-Type",

1459 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

1461 i‡(
Àn
 != ("application/ocsp-response") - 1

1462 || 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_°¨t
,

1463 (
u_ch¨
 *) "application/ocsp-response",

1467 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1470 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
,

1471 
˘x
->
hódî_°¨t
);

1472  
NGX_ERROR
;

1483 i‡(
rc
 =
NGX_DONE
) {

1487 i‡(
rc
 =
NGX_AGAIN
) {

1488  
NGX_AGAIN
;

1493 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
log
, 0,

1496  
NGX_ERROR
;

1499 
˘x
->
¥o˚ss
 = 
ngx_s¶_oc•_¥o˚ss_body
;

1500  
˘x
->
	`¥o˚ss
(ctx);

1501 
	}
}

1503 
ngx_öt_t


1504 
	$ngx_s¶_oc•_∑r£_hódî_löe
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1506 
u_ch¨
 
c
, 
ch
, *
p
;

1508 
sw_°¨t
 = 0,

1509 
sw_«me
,

1510 
sw_•a˚_bef‹e_vÆue
,

1511 
sw_vÆue
,

1512 
sw_•a˚_a·î_vÆue
,

1513 
sw_Æmo°_d⁄e
,

1514 
sw_hódî_Æmo°_d⁄e


1515 } 
°©e
;

1517 
°©e
 = 
˘x
->state;

1519 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

1520 
ch
 = *
p
;

1523 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1524 "s:%d in:'%02Xd:%c'", 
°©e
, 
ch
, ch);

1527 
°©e
) {

1530 
sw_°¨t
:

1532 
ch
) {

1533 
CR
:

1534 
˘x
->
hódî_íd
 = 
p
;

1535 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

1537 
LF
:

1538 
˘x
->
hódî_íd
 = 
p
;

1539 
hódî_d⁄e
;

1541 
°©e
 = 
sw_«me
;

1542 
˘x
->
hódî_«me_°¨t
 = 
p
;

1544 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1545 i‡(
c
 >= 'a' && c <= 'z') {

1549 i‡(
ch
 >= '0' && ch <= '9') {

1553  
NGX_ERROR
;

1558 
sw_«me
:

1559 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1560 i‡(
c
 >= 'a' && c <= 'z') {

1564 i‡(
ch
 == ':') {

1565 
˘x
->
hódî_«me_íd
 = 
p
;

1566 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

1570 i‡(
ch
 == '-') {

1574 i‡(
ch
 >= '0' && ch <= '9') {

1578 i‡(
ch
 =
CR
) {

1579 
˘x
->
hódî_«me_íd
 = 
p
;

1580 
˘x
->
hódî_°¨t
 = 
p
;

1581 
˘x
->
hódî_íd
 = 
p
;

1582 
°©e
 = 
sw_Æmo°_d⁄e
;

1586 i‡(
ch
 =
LF
) {

1587 
˘x
->
hódî_«me_íd
 = 
p
;

1588 
˘x
->
hódî_°¨t
 = 
p
;

1589 
˘x
->
hódî_íd
 = 
p
;

1590 
d⁄e
;

1593  
NGX_ERROR
;

1596 
sw_•a˚_bef‹e_vÆue
:

1597 
ch
) {

1600 
CR
:

1601 
˘x
->
hódî_°¨t
 = 
p
;

1602 
˘x
->
hódî_íd
 = 
p
;

1603 
°©e
 = 
sw_Æmo°_d⁄e
;

1605 
LF
:

1606 
˘x
->
hódî_°¨t
 = 
p
;

1607 
˘x
->
hódî_íd
 = 
p
;

1608 
d⁄e
;

1610 
˘x
->
hódî_°¨t
 = 
p
;

1611 
°©e
 = 
sw_vÆue
;

1617 
sw_vÆue
:

1618 
ch
) {

1620 
˘x
->
hódî_íd
 = 
p
;

1621 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1623 
CR
:

1624 
˘x
->
hódî_íd
 = 
p
;

1625 
°©e
 = 
sw_Æmo°_d⁄e
;

1627 
LF
:

1628 
˘x
->
hódî_íd
 = 
p
;

1629 
d⁄e
;

1634 
sw_•a˚_a·î_vÆue
:

1635 
ch
) {

1638 
CR
:

1639 
°©e
 = 
sw_Æmo°_d⁄e
;

1641 
LF
:

1642 
d⁄e
;

1644 
°©e
 = 
sw_vÆue
;

1650 
sw_Æmo°_d⁄e
:

1651 
ch
) {

1652 
LF
:

1653 
d⁄e
;

1655  
NGX_ERROR
;

1659 
sw_hódî_Æmo°_d⁄e
:

1660 
ch
) {

1661 
LF
:

1662 
hódî_d⁄e
;

1664  
NGX_ERROR
;

1669 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1670 
˘x
->
°©e
 = state;

1672  
NGX_AGAIN
;

1674 
d⁄e
:

1676 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1677 
˘x
->
°©e
 = 
sw_°¨t
;

1679  
NGX_OK
;

1681 
hódî_d⁄e
:

1683 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1684 
˘x
->
°©e
 = 
sw_°¨t
;

1686  
NGX_DONE
;

1687 
	}
}

1690 
ngx_öt_t


1691 
	$ngx_s¶_oc•_¥o˚ss_body
(
ngx_s¶_oc•_˘x_t
 *
˘x
)

1693 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
˘x
->
log
, 0,

1696 i‡(
˘x
->
d⁄e
) {

1697 
˘x
->
	`h™dÀr
(ctx);

1698  
NGX_DONE
;

1701  
NGX_AGAIN
;

1702 
	}
}

1705 
u_ch¨
 *

1706 
	$ngx_s¶_oc•_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

1708 
u_ch¨
 *
p
;

1709 
ngx_s¶_oc•_˘x_t
 *
˘x
;

1711 
p
 = 
buf
;

1713 i‡(
log
->
a˘i⁄
) {

1714 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

1715 
Àn
 -
p
 - 
buf
;

1718 
˘x
 = 
log
->
d©a
;

1720 i‡(
˘x
) {

1721 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ",Ñe•⁄dî: %V", &
˘x
->
ho°
);

1724  
p
;

1725 
	}
}

1731 
ngx_öt_t


1732 
	$ngx_s¶_°≠lög
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
, 
ngx_°r_t
 *
fûe
,

1733 
ngx_°r_t
 *
ª•⁄dî
, 
ngx_uöt_t
 
vîify
)

1735 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
s¶
->
log
, 0,

1738  
NGX_OK
;

1739 
	}
}

1741 
ngx_öt_t


1742 
	$ngx_s¶_°≠lög_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_s¶_t
 *
s¶
,

1743 
ngx_ªsﬁvî_t
 *
ªsﬁvî
, 
ngx_m£c_t
 
ªsﬁvî_timeout
)

1745  
NGX_OK
;

1746 
	}
}

	@src/event/ngx_event_pipe.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_pùe.h
>

14 
ngx_öt_t
 
ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
);

15 
ngx_öt_t
 
ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
);

17 
ngx_öt_t
 
ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
);

18 
ngx_ölöe
 
ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
);

19 
ngx_öt_t
 
ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
);

22 
ngx_öt_t


23 
	$ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
, 
ngx_öt_t
 
do_wrôe
)

25 
u_öt
 
Êags
;

26 
ngx_öt_t
 
rc
;

27 
ngx_evít_t
 *
ªv
, *
wev
;

30 i‡(
do_wrôe
) {

31 
p
->
log
->
a˘i⁄
 = "sendingÅo client";

33 
rc
 = 
	`ngx_evít_pùe_wrôe_to_down°ªam
(
p
);

35 i‡(
rc
 =
NGX_ABORT
) {

36  
NGX_ABORT
;

39 i‡(
rc
 =
NGX_BUSY
) {

40  
NGX_OK
;

44 
p
->
ªad
 = 0;

45 
p
->
up°ªam_blocked
 = 0;

47 
p
->
log
->
a˘i⁄
 = "reading upstream";

49 i‡(
	`ngx_evít_pùe_ªad_up°ªam
(
p
Ë=
NGX_ABORT
) {

50  
NGX_ABORT
;

53 i‡(!
p
->
ªad
 && !p->
up°ªam_blocked
) {

57 
do_wrôe
 = 1;

60 i‡(
p
->
up°ªam
->
fd
 != -1) {

61 
ªv
 = 
p
->
up°ªam
->
ªad
;

63 
Êags
 = (
ªv
->
eof
 ||Ñev->
îr‹
Ë? 
NGX_CLOSE_EVENT
 : 0;

65 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 
Êags
Ë!
NGX_OK
) {

66  
NGX_ABORT
;

69 i‡(
ªv
->
a˘ive
 && !ªv->
ªady
) {

70 
	`ngx_add_timî
(
ªv
, 
p
->
ªad_timeout
);

72 } i‡(
ªv
->
timî_£t
) {

73 
	`ngx_dñ_timî
(
ªv
);

77 i‡(
p
->
down°ªam
->
fd
 !-1 &&Ö->down°ªam->
d©a
 =p->
ouçut_˘x
) {

78 
wev
 = 
p
->
down°ªam
->
wrôe
;

79 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

80  
NGX_ABORT
;

83 i‡(!
wev
->
dñayed
) {

84 i‡(
wev
->
a˘ive
 && !wev->
ªady
) {

85 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

87 } i‡(
wev
->
timî_£t
) {

88 
	`ngx_dñ_timî
(
wev
);

93  
NGX_OK
;

94 
	}
}

97 
ngx_öt_t


98 
	$ngx_evít_pùe_ªad_up°ªam
(
ngx_evít_pùe_t
 *
p
)

100 
ssize_t
 
n
, 
size
;

101 
ngx_öt_t
 
rc
;

102 
ngx_buf_t
 *
b
;

103 
ngx_chaö_t
 *
chaö
, *
˛
, *
 
;

105 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

106  
NGX_OK
;

109 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

110 "pùêªad up°ªam: %d", 
p
->
up°ªam
->
ªad
->
ªady
);

114 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

118 i‡(
p
->
¥îód_bufs
 =
NULL
 && !p->
up°ªam
->
ªad
->
ªady
) {

122 i‡(
p
->
¥îód_bufs
) {

126 
chaö
 = 
p
->
¥îód_bufs
;

127 
p
->
¥îód_bufs
 = 
NULL
;

128 
n
 = 
p
->
¥îód_size
;

130 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

131 "pùê¥îód: %z", 
n
);

133 i‡(
n
) {

134 
p
->
ªad
 = 1;

139 #i‡(
NGX_HAVE_KQUEUE
)

147 i‡(
p
->
up°ªam
->
ªad
->
avaûabÀ
 == 0

148 && 
p
->
up°ªam
->
ªad
->
≥ndög_eof
)

150 
p
->
up°ªam
->
ªad
->
ªady
 = 0;

151 
p
->
up°ªam
->
ªad
->
eof
 = 1;

152 
p
->
up°ªam_eof
 = 1;

153 
p
->
ªad
 = 1;

155 i‡(
p
->
up°ªam
->
ªad
->
kq_î∫o
) {

156 
p
->
up°ªam
->
ªad
->
îr‹
 = 1;

157 
p
->
up°ªam_îr‹
 = 1;

158 
p
->
up°ªam_eof
 = 0;

160 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
,

161 
p
->
up°ªam
->
ªad
->
kq_î∫o
,

170 i‡(
p
->
‰ì_øw_bufs
) {

174 
chaö
 = 
p
->
‰ì_øw_bufs
;

175 i‡(
p
->
sögÀ_buf
) {

176 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

177 
chaö
->
√xt
 = 
NULL
;

179 
p
->
‰ì_øw_bufs
 = 
NULL
;

182 } i‡(
p
->
Æloˇãd
 <Ö->
bufs
.
num
) {

186 
b
 = 
	`ngx_¸óã_ãmp_buf
(
p
->
poﬁ
,Ö->
bufs
.
size
);

187 i‡(
b
 =
NULL
) {

188  
NGX_ABORT
;

191 
p
->
Æloˇãd
++;

193 
chaö
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

194 i‡(
chaö
 =
NULL
) {

195  
NGX_ABORT
;

198 
chaö
->
buf
 = 
b
;

199 
chaö
->
√xt
 = 
NULL
;

201 } i‡(!
p
->
ˇchóbÀ


202 && 
p
->
down°ªam
->
d©a
 =p->
ouçut_˘x


203 && 
p
->
down°ªam
->
wrôe
->
ªady


204 && !
p
->
down°ªam
->
wrôe
->
dñayed
)

211 
p
->
up°ªam_blocked
 = 1;

213 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

218 } i‡(
p
->
ˇchóbÀ


219 || 
p
->
ãmp_fûe
->
off£t
 <Ö->
max_ãmp_fûe_size
)

227 
rc
 = 
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
);

229 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

230 "pùêãm∞off£t: %O", 
p
->
ãmp_fûe
->
off£t
);

232 i‡(
rc
 =
NGX_BUSY
) {

236 i‡(
rc
 =
NGX_AGAIN
) {

237 i‡(
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT


238 && 
p
->
up°ªam
->
ªad
->
a˘ive


239 && 
p
->
up°ªam
->
ªad
->
ªady
)

241 i‡(
	`ngx_dñ_evít
(
p
->
up°ªam
->
ªad
, 
NGX_READ_EVENT
, 0)

242 =
NGX_ERROR
)

244  
NGX_ABORT
;

249 i‡(
rc
 !
NGX_OK
) {

250  
rc
;

253 
chaö
 = 
p
->
‰ì_øw_bufs
;

254 i‡(
p
->
sögÀ_buf
) {

255 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

256 
chaö
->
√xt
 = 
NULL
;

258 
p
->
‰ì_øw_bufs
 = 
NULL
;

265 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

271 
n
 = 
p
->
up°ªam
->
	`ªcv_chaö
’->up°ªam, 
chaö
);

273 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

274 "pùêªcv chaö: %z", 
n
);

276 i‡(
p
->
‰ì_øw_bufs
) {

277 
chaö
->
√xt
 = 
p
->
‰ì_øw_bufs
;

279 
p
->
‰ì_øw_bufs
 = 
chaö
;

281 i‡(
n
 =
NGX_ERROR
) {

282 
p
->
up°ªam_îr‹
 = 1;

283  
NGX_ERROR
;

286 i‡(
n
 =
NGX_AGAIN
) {

287 i‡(
p
->
sögÀ_buf
) {

288 
	`ngx_evít_pùe_ªmove_shadow_löks
(
chaö
->
buf
);

294 
p
->
ªad
 = 1;

296 i‡(
n
 == 0) {

297 
p
->
up°ªam_eof
 = 1;

302 
p
->
ªad_Àngth
 +
n
;

303 
˛
 = 
chaö
;

304 
p
->
‰ì_øw_bufs
 = 
NULL
;

306 
˛
 && 
n
 > 0) {

308 
	`ngx_evít_pùe_ªmove_shadow_löks
(
˛
->
buf
);

310 
size
 = 
˛
->
buf
->
íd
 - cl->buf->
œ°
;

312 i‡(
n
 >
size
) {

313 
˛
->
buf
->
œ°
 = cl->buf->
íd
;

315  
˛
->
buf
->
num
 = 
p
->num++;

317 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

318  
NGX_ABORT
;

321 
n
 -
size
;

322 
 
 = 
˛
;

323 
˛
 = cl->
√xt
;

324 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
 
);

327 
˛
->
buf
->
œ°
 +
n
;

328 
n
 = 0;

332 i‡(
˛
) {

333 
 
 = 
˛
;Ün->
√xt
;Ün =Ün->next) { }

335 
 
->
√xt
 = 
p
->
‰ì_øw_bufs
;

336 
p
->
‰ì_øw_bufs
 = 
˛
;

340 #i‡(
NGX_DEBUG
)

342 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

343 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

347 (
˛
->
buf
->
shadow
 ? 1 : 0),

348 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

349 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

350 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

351 
˛
->
buf
->
fûe_pos
,

352 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

355 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

356 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

360 (
˛
->
buf
->
shadow
 ? 1 : 0),

361 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

362 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

363 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

364 
˛
->
buf
->
fûe_pos
,

365 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

368 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

369 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

373 (
˛
->
buf
->
shadow
 ? 1 : 0),

374 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

375 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

376 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

377 
˛
->
buf
->
fûe_pos
,

378 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

381 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

382 
	`ngx_log_debug8
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

386 (
˛
->
buf
->
shadow
 ? 1 : 0),

387 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

388 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

389 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

390 
˛
->
buf
->
fûe_pos
,

391 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

394 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

395 "pùêÀngth: %O", 
p
->
Àngth
);

399 i‡(
p
->
‰ì_øw_bufs
 &&Ö->
Àngth
 != -1) {

400 
˛
 = 
p
->
‰ì_øw_bufs
;

402 i‡(
˛
->
buf
->
œ°
 - cl->buf->
pos
 >
p
->
Àngth
) {

404 
p
->
‰ì_øw_bufs
 = 
˛
->
√xt
;

406  
˛
->
buf
->
num
 = 
p
->num++;

408 i‡(
p
->
	`öput_fûãr
’, 
˛
->
buf
Ë=
NGX_ERROR
) {

409  
NGX_ABORT
;

412 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

416 i‡(
p
->
Àngth
 == 0) {

417 
p
->
up°ªam_d⁄e
 = 1;

418 
p
->
ªad
 = 1;

421 i‡((
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
Ë&&Ö->
‰ì_øw_bufs
) {

423  
p
->
‰ì_øw_bufs
->
buf
->
num
 =Ö->num++;

425 i‡(
p
->
	`öput_fûãr
’,Ö->
‰ì_øw_bufs
->
buf
Ë=
NGX_ERROR
) {

426  
NGX_ABORT
;

429 
p
->
‰ì_øw_bufs
 =Ö->‰ì_øw_bufs->
√xt
;

431 i‡(
p
->
‰ì_bufs
 &&Ö->
buf_to_fûe
 =
NULL
) {

432 
˛
 = 
p
->
‰ì_øw_bufs
; cl; c»˛->
√xt
) {

433 i‡(
˛
->
buf
->
shadow
 =
NULL
) {

434 
	`ngx_p‰ì
(
p
->
poﬁ
, 
˛
->
buf
->
°¨t
);

440 i‡(
p
->
ˇchóbÀ
 &&Ö->
ö
) {

441 i‡(
	`ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
p
Ë=
NGX_ABORT
) {

442  
NGX_ABORT
;

446  
NGX_OK
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_evít_pùe_wrôe_to_down°ªam
(
ngx_evít_pùe_t
 *
p
)

453 
u_ch¨
 *
¥ev
;

454 
size_t
 
bsize
;

455 
ngx_öt_t
 
rc
;

456 
ngx_uöt_t
 
Êush
, 
Êushed
, 
¥ev_œ°_shadow
;

457 
ngx_chaö_t
 *
out
, **
Œ
, *
˛
, 
fûe
;

458 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

460 
down°ªam
 = 
p
->downstream;

462 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

463 "pùêwrôêdown°ªam: %d", 
down°ªam
->
wrôe
->
ªady
);

465 
Êushed
 = 0;

468 i‡(
p
->
down°ªam_îr‹
) {

469  
	`ngx_evít_pùe_døö_chaös
(
p
);

472 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
 ||Ö->
up°ªam_d⁄e
) {

476 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

477 
˛
->
buf
->
ªcy˛ed
 = 0;

480 i‡(
p
->
out
) {

481 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

484 
˛
 = 
p
->
out
; cl; c»˛->
√xt
) {

485 
˛
->
buf
->
ªcy˛ed
 = 0;

488 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
out
);

490 i‡(
rc
 =
NGX_ERROR
) {

491 
p
->
down°ªam_îr‹
 = 1;

492  
	`ngx_evít_pùe_døö_chaös
(
p
);

495 
p
->
out
 = 
NULL
;

498 i‡(
p
->
ö
) {

499 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

502 
˛
 = 
p
->
ö
; cl; c»˛->
√xt
) {

503 
˛
->
buf
->
ªcy˛ed
 = 0;

506 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
,Ö->
ö
);

508 i‡(
rc
 =
NGX_ERROR
) {

509 
p
->
down°ªam_îr‹
 = 1;

510  
	`ngx_evít_pùe_døö_chaös
(
p
);

513 
p
->
ö
 = 
NULL
;

516 i‡(
p
->
ˇchóbÀ
 &&Ö->
buf_to_fûe
) {

518 
fûe
.
buf
 = 
p
->
buf_to_fûe
;

519 
fûe
.
√xt
 = 
NULL
;

521 i‡(
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, &
fûe
)

522 =
NGX_ERROR
)

524  
NGX_ABORT
;

528 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

533 
p
->
down°ªam_d⁄e
 = 1;

537 i‡(
down°ªam
->
d©a
 !
p
->
ouçut_˘x


538 || !
down°ªam
->
wrôe
->
ªady


539 || 
down°ªam
->
wrôe
->
dñayed
)

546 
¥ev
 = 
NULL
;

547 
bsize
 = 0;

549 
˛
 = 
p
->
busy
; cl; c»˛->
√xt
) {

551 i‡(
˛
->
buf
->
ªcy˛ed
) {

552 i‡(
¥ev
 =
˛
->
buf
->
°¨t
) {

556 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

557 
¥ev
 = 
˛
->
buf
->
°¨t
;

561 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

562 "pùêwrôêbusy: %uz", 
bsize
);

564 
out
 = 
NULL
;

566 i‡(
bsize
 >(
size_t
Ë
p
->
busy_size
) {

567 
Êush
 = 1;

568 
Êush
;

571 
Êush
 = 0;

572 
Œ
 = 
NULL
;

573 
¥ev_œ°_shadow
 = 1;

576 i‡(
p
->
out
) {

577 
˛
 = 
p
->
out
;

579 i‡(
˛
->
buf
->
ªcy˛ed
) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
p
->
log
, 0,

584 
p
->
out
 =Ö->out->
√xt
;

586 } i‡(!
p
->
ˇchóbÀ
 &&Ö->
ö
) {

587 
˛
 = 
p
->
ö
;

589 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

591 
˛
->
buf
->
œ°_shadow
,

592 
˛
->
buf
->
pos
,

593 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

595 i‡(
˛
->
buf
->
ªcy˛ed
 && 
¥ev_œ°_shadow
) {

596 i‡(
bsize
 + 
˛
->
buf
->
íd
 - cl->buf->
°¨t
 > 
p
->
busy_size
) {

597 
Êush
 = 1;

601 
bsize
 +
˛
->
buf
->
íd
 - cl->buf->
°¨t
;

604 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

606 
p
->
ö
 =Ö->ö->
√xt
;

612 
˛
->
√xt
 = 
NULL
;

614 i‡(
out
) {

615 *
Œ
 = 
˛
;

617 
out
 = 
˛
;

619 
Œ
 = &
˛
->
√xt
;

622 
Êush
:

624 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

625 "pùêwrôe: out:%p, f:%d", 
out
, 
Êush
);

627 i‡(
out
 =
NULL
) {

629 i‡(!
Êush
) {

634 i‡(
Êushed
++ > 10) {

635  
NGX_BUSY
;

639 
rc
 = 
p
->
	`ouçut_fûãr
’->
ouçut_˘x
, 
out
);

641 
	`ngx_chaö_upd©e_chaös
(
p
->
poﬁ
, &p->
‰ì
, &p->
busy
, &
out
,Ö->
èg
);

643 i‡(
rc
 =
NGX_ERROR
) {

644 
p
->
down°ªam_îr‹
 = 1;

645  
	`ngx_evít_pùe_døö_chaös
(
p
);

648 
˛
 = 
p
->
‰ì
; cl; c»˛->
√xt
) {

650 i‡(
˛
->
buf
->
ãmp_fûe
) {

651 i‡(
p
->
ˇchóbÀ
 || !p->
cy˛ic_ãmp_fûe
) {

657 i‡(
˛
->
buf
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

658 
p
->
ãmp_fûe
->
off£t
 = 0;

666 i‡(
˛
->
buf
->
œ°_shadow
) {

667 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

668  
NGX_ABORT
;

671 
˛
->
buf
->
œ°_shadow
 = 0;

674 
˛
->
buf
->
shadow
 = 
NULL
;

678  
NGX_OK
;

679 
	}
}

682 
ngx_öt_t


683 
	$ngx_evít_pùe_wrôe_chaö_to_ãmp_fûe
(
ngx_evít_pùe_t
 *
p
)

685 
ssize_t
 
size
, 
bsize
, 
n
;

686 
ngx_buf_t
 *
b
;

687 
ngx_uöt_t
 
¥ev_œ°_shadow
;

688 
ngx_chaö_t
 *
˛
, *
é
, *
√xt
, *
out
, **
Œ
, **
œ°_out
, **
œ°_‰ì
, 
Ê
;

690 i‡(
p
->
buf_to_fûe
) {

691 
Ê
.
buf
 = 
p
->
buf_to_fûe
;

692 
Ê
.
√xt
 = 
p
->
ö
;

693 
out
 = &
Ê
;

696 
out
 = 
p
->
ö
;

699 i‡(!
p
->
ˇchóbÀ
) {

701 
size
 = 0;

702 
˛
 = 
out
;

703 
Œ
 = 
NULL
;

704 
¥ev_œ°_shadow
 = 1;

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

707 "pùêoff£t: %O", 
p
->
ãmp_fûe
->
off£t
);

710 
bsize
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

712 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

714 
˛
->
buf
->
œ°_shadow
, cl->buf->
°¨t
,

715 
˛
->
buf
->
pos
, 
bsize
);

717 i‡(
¥ev_œ°_shadow


718 && ((
size
 + 
bsize
 > 
p
->
ãmp_fûe_wrôe_size
)

719 || (
p
->
ãmp_fûe
->
off£t
 + 
size
 + 
bsize


720 > 
p
->
max_ãmp_fûe_size
)))

725 
¥ev_œ°_shadow
 = 
˛
->
buf
->
œ°_shadow
;

727 
size
 +
bsize
;

728 
Œ
 = &
˛
->
√xt
;

729 
˛
 = cl->
√xt
;

731 } 
˛
);

733 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "size: %z", 
size
);

735 i‡(
Œ
 =
NULL
) {

736  
NGX_BUSY
;

739 i‡(
˛
) {

740 
p
->
ö
 = 
˛
;

741 *
Œ
 = 
NULL
;

744 
p
->
ö
 = 
NULL
;

745 
p
->
œ°_ö
 = &p->
ö
;

749 
p
->
ö
 = 
NULL
;

750 
p
->
œ°_ö
 = &p->
ö
;

753 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
p
->
ãmp_fûe
, 
out
);

755 i‡(
n
 =
NGX_ERROR
) {

756  
NGX_ABORT
;

759 i‡(
p
->
buf_to_fûe
) {

760 
p
->
ãmp_fûe
->
off£t
 =Ö->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

761 
n
 -
p
->
buf_to_fûe
->
œ°
 -Ö->buf_to_fûe->
pos
;

762 
p
->
buf_to_fûe
 = 
NULL
;

763 
out
 = out->
√xt
;

766 i‡(
n
 > 0) {

769 i‡(
p
->
out
) {

770 
˛
 = 
p
->
out
; cl->
√xt
; cl = cl->next) { }

772 
b
 = 
˛
->
buf
;

774 i‡(
b
->
fûe_œ°
 =
p
->
ãmp_fûe
->
off£t
) {

775 
p
->
ãmp_fûe
->
off£t
 +
n
;

776 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

777 
‰ì
;

780 
œ°_out
 = &
˛
->
√xt
;

783 
œ°_out
 = &
p
->
out
;

786 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
p
->
poﬁ
, &p->
‰ì
);

787 i‡(
˛
 =
NULL
) {

788  
NGX_ABORT
;

791 
b
 = 
˛
->
buf
;

793 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

795 
b
->
èg
 = 
p
->tag;

797 
b
->
fûe
 = &
p
->
ãmp_fûe
->file;

798 
b
->
fûe_pos
 = 
p
->
ãmp_fûe
->
off£t
;

799 
p
->
ãmp_fûe
->
off£t
 +
n
;

800 
b
->
fûe_œ°
 = 
p
->
ãmp_fûe
->
off£t
;

802 
b
->
ö_fûe
 = 1;

803 
b
->
ãmp_fûe
 = 1;

805 *
œ°_out
 = 
˛
;

808 
‰ì
:

810 
œ°_‰ì
 = &
p
->
‰ì_øw_bufs
;

811 *
œ°_‰ì
 !
NULL
;

812 
œ°_‰ì
 = &(*œ°_‰ì)->
√xt
)

817 
˛
 = 
out
; cl; c»
√xt
) {

818 
√xt
 = 
˛
->next;

820 
˛
->
√xt
 = 
p
->
‰ì
;

821 
p
->
‰ì
 = 
˛
;

823 
b
 = 
˛
->
buf
;

825 i‡(
b
->
œ°_shadow
) {

827 
é
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

828 i‡(
é
 =
NULL
) {

829  
NGX_ABORT
;

832 
é
->
buf
 = 
b
->
shadow
;

833 
é
->
√xt
 = 
NULL
;

835 *
œ°_‰ì
 = 
é
;

836 
œ°_‰ì
 = &
é
->
√xt
;

838 
b
->
shadow
->
pos
 = b->shadow->
°¨t
;

839 
b
->
shadow
->
œ°
 = b->shadow->
°¨t
;

841 
	`ngx_evít_pùe_ªmove_shadow_löks
(
b
->
shadow
);

845  
NGX_OK
;

846 
	}
}

851 
ngx_öt_t


852 
	$ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

854 
ngx_buf_t
 *
b
;

855 
ngx_chaö_t
 *
˛
;

857 i‡(
buf
->
pos
 =buf->
œ°
) {

858  
NGX_OK
;

861 i‡(
p
->
‰ì
) {

862 
˛
 = 
p
->
‰ì
;

863 
b
 = 
˛
->
buf
;

864 
p
->
‰ì
 = 
˛
->
√xt
;

865 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

868 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

869 i‡(
b
 =
NULL
) {

870  
NGX_ERROR
;

874 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

875 
b
->
shadow
 = 
buf
;

876 
b
->
èg
 = 
p
->tag;

877 
b
->
œ°_shadow
 = 1;

878 
b
->
ªcy˛ed
 = 1;

879 
buf
->
shadow
 = 
b
;

881 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

882 i‡(
˛
 =
NULL
) {

883  
NGX_ERROR
;

886 
˛
->
buf
 = 
b
;

887 
˛
->
√xt
 = 
NULL
;

889 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

891 i‡(
p
->
ö
) {

892 *
p
->
œ°_ö
 = 
˛
;

894 
p
->
ö
 = 
˛
;

896 
p
->
œ°_ö
 = &
˛
->
√xt
;

898 i‡(
p
->
Àngth
 == -1) {

899  
NGX_OK
;

902 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

904  
NGX_OK
;

905 
	}
}

908 
ngx_ölöe
 

909 
	$ngx_evít_pùe_ªmove_shadow_löks
(
ngx_buf_t
 *
buf
)

911 
ngx_buf_t
 *
b
, *
√xt
;

913 
b
 = 
buf
->
shadow
;

915 i‡(
b
 =
NULL
) {

919 !
b
->
œ°_shadow
) {

920 
√xt
 = 
b
->
shadow
;

922 
b
->
ãmp‹¨y
 = 0;

923 
b
->
ªcy˛ed
 = 0;

925 
b
->
shadow
 = 
NULL
;

926 
b
 = 
√xt
;

929 
b
->
ãmp‹¨y
 = 0;

930 
b
->
ªcy˛ed
 = 0;

931 
b
->
œ°_shadow
 = 0;

933 
b
->
shadow
 = 
NULL
;

935 
buf
->
shadow
 = 
NULL
;

936 
	}
}

939 
ngx_öt_t


940 
	$ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
)

942 
ngx_chaö_t
 *
˛
;

944 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

945 i‡(
˛
 =
NULL
) {

946  
NGX_ERROR
;

949 i‡(
p
->
buf_to_fûe
 && 
b
->
°¨t
 ==Ö->buf_to_file->start) {

950 
b
->
pos
 = 
p
->
buf_to_fûe
->
œ°
;

951 
b
->
œ°
 = 
p
->
buf_to_fûe
->last;

954 
b
->
pos
 = b->
°¨t
;

955 
b
->
œ°
 = b->
°¨t
;

958 
b
->
shadow
 = 
NULL
;

960 
˛
->
buf
 = 
b
;

962 i‡(
p
->
‰ì_øw_bufs
 =
NULL
) {

963 
p
->
‰ì_øw_bufs
 = 
˛
;

964 
˛
->
√xt
 = 
NULL
;

966  
NGX_OK
;

969 i‡(
p
->
‰ì_øw_bufs
->
buf
->
pos
 =p->‰ì_øw_bufs->buf->
œ°
) {

973 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
;

974 
p
->
‰ì_øw_bufs
 = 
˛
;

976  
NGX_OK
;

981 
˛
->
√xt
 = 
p
->
‰ì_øw_bufs
->next;

982 
p
->
‰ì_øw_bufs
->
√xt
 = 
˛
;

984  
NGX_OK
;

985 
	}
}

988 
ngx_öt_t


989 
	$ngx_evít_pùe_døö_chaös
(
ngx_evít_pùe_t
 *
p
)

991 
ngx_chaö_t
 *
˛
, *
é
;

994 i‡(
p
->
busy
) {

995 
˛
 = 
p
->
busy
;

996 
p
->
busy
 = 
NULL
;

998 } i‡(
p
->
out
) {

999 
˛
 = 
p
->
out
;

1000 
p
->
out
 = 
NULL
;

1002 } i‡(
p
->
ö
) {

1003 
˛
 = 
p
->
ö
;

1004 
p
->
ö
 = 
NULL
;

1007  
NGX_OK
;

1010 
˛
) {

1011 i‡(
˛
->
buf
->
œ°_shadow
) {

1012 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
˛
->
buf
->
shadow
Ë!
NGX_OK
) {

1013  
NGX_ABORT
;

1016 
˛
->
buf
->
œ°_shadow
 = 0;

1019 
˛
->
buf
->
shadow
 = 
NULL
;

1020 
é
 = 
˛
->
√xt
;

1021 
˛
->
√xt
 = 
p
->
‰ì
;

1022 
p
->
‰ì
 = 
˛
;

1023 
˛
 = 
é
;

1026 
	}
}

	@src/event/ngx_event_pipe.h

8 #i‚de‡
_NGX_EVENT_PIPE_H_INCLUDED_


9 
	#_NGX_EVENT_PIPE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
ngx_evít_pùe_s
 
	tngx_evít_pùe_t
;

19 
	$ngx_öt_t
 (*
	tngx_evít_pùe_öput_fûãr_±
)(
	tngx_evít_pùe_t
 *
	tp
,

20 
	tngx_buf_t
 *
	tbuf
);

21 
	$ngx_öt_t
 (*
	tngx_evít_pùe_ouçut_fûãr_±
)(*
	td©a
,

22 
	tngx_chaö_t
 *
	tchaö
);

25 
	sngx_evít_pùe_s
 {

26 
ngx_c⁄√˘i⁄_t
 *
up°ªam
;

27 
ngx_c⁄√˘i⁄_t
 *
down°ªam
;

29 
ngx_chaö_t
 *
‰ì_øw_bufs
;

30 
ngx_chaö_t
 *
ö
;

31 
ngx_chaö_t
 **
œ°_ö
;

33 
ngx_chaö_t
 *
out
;

34 
ngx_chaö_t
 *
‰ì
;

35 
ngx_chaö_t
 *
busy
;

42 
ngx_evít_pùe_öput_fûãr_±
 
öput_fûãr
;

43 *
öput_˘x
;

45 
ngx_evít_pùe_ouçut_fûãr_±
 
ouçut_fûãr
;

46 *
ouçut_˘x
;

48 
ªad
:1;

49 
ˇchóbÀ
:1;

50 
sögÀ_buf
:1;

51 
‰ì_bufs
:1;

52 
up°ªam_d⁄e
:1;

53 
up°ªam_îr‹
:1;

54 
up°ªam_eof
:1;

55 
up°ªam_blocked
:1;

56 
down°ªam_d⁄e
:1;

57 
down°ªam_îr‹
:1;

58 
cy˛ic_ãmp_fûe
:1;

60 
ngx_öt_t
 
Æloˇãd
;

61 
ngx_bufs_t
 
bufs
;

62 
ngx_buf_èg_t
 
èg
;

64 
ssize_t
 
busy_size
;

66 
off_t
 
ªad_Àngth
;

67 
off_t
 
Àngth
;

69 
off_t
 
max_ãmp_fûe_size
;

70 
ssize_t
 
ãmp_fûe_wrôe_size
;

72 
ngx_m£c_t
 
ªad_timeout
;

73 
ngx_m£c_t
 
£nd_timeout
;

74 
ssize_t
 
£nd_low©
;

76 
ngx_poﬁ_t
 *
poﬁ
;

77 
ngx_log_t
 *
log
;

79 
ngx_chaö_t
 *
¥îód_bufs
;

80 
size_t
 
¥îód_size
;

81 
ngx_buf_t
 *
buf_to_fûe
;

83 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

85  
num
;

89 
ngx_öt_t
 
	`ngx_evít_pùe
(
ngx_evít_pùe_t
 *
p
,Çgx_öt_à
do_wrôe
);

90 
ngx_öt_t
 
	`ngx_evít_pùe_c›y_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
);

91 
ngx_öt_t
 
	`ngx_evít_pùe_add_‰ì_buf
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
b
);

	@src/event/ngx_event_posted.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_ac˚±_evíts
;

14 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
	gngx_po°ed_evíts
;

16 #i‡(
NGX_THREADS
)

17 
ngx_muãx_t
 *
	gngx_po°ed_evíts_muãx
;

22 
	$ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

23 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
)

25 
ngx_evít_t
 *
ev
;

29 
ev
 = (
ngx_evít_t
 *Ë*
po°ed
;

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

32 "po°edÉvíà%p", 
ev
);

34 i‡(
ev
 =
NULL
) {

38 
	`ngx_dñëe_po°ed_evít
(
ev
);

40 
ev
->
	`h™dÀr
(ev);

42 
	}
}

45 #i‡(
NGX_THREADS
Ë&& !(
NGX_WIN32
)

48 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

50 
ngx_öt_t
 
i
;

52 
ngx_uöt_t
 
busy
;

53 
ngx_evít_t
 *
ev
;

55 
busy
 = 1;

57 i‡(
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

61 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;Év;Év =Év->
√xt
) {

62 i‡(*(
ev
->
lock
) == 0) {

63 
busy
 = 0;

68 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

70 i‡(
busy
) {

75 
i
 = 0; i < 
ngx_thªads_n
; i++) {

76 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_FREE
) {

77 
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
);

81 
	}
}

84 
ngx_öt_t


85 
	$ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
)

87 
ngx_evít_t
 *
ev
;

91 
ev
 = (
ngx_evít_t
 *Ë
ngx_po°ed_evíts
;

95 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

96 "po°edÉvíà%p", 
ev
);

98 i‡(
ev
 =
NULL
) {

99  
NGX_OK
;

102 i‡(
	`ngx_åylock
(
ev
->
lock
) == 0) {

104 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

105 "po°edÉvíà%∞i†busy", 
ev
);

107 
ev
 =Év->
√xt
;

111 i‡(
ev
->
lock
 !ev->
own_lock
) {

112 i‡(*(
ev
->
own_lock
)) {

113 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

114 "thêow¿lock o‡thêpo°edÉvíà%∞i†busy", 
ev
);

115 
	`ngx_u∆ock
(
ev
->
lock
);

116 
ev
 =Év->
√xt
;

119 *(
ev
->
own_lock
) = 1;

122 
	`ngx_dñëe_po°ed_evít
(
ev
);

124 
ev
->
locked
 = 1;

126 
ev
->
ªady
 |ev->
po°ed_ªady
;

127 
ev
->
timedout
 |ev->
po°ed_timedout
;

128 
ev
->
≥ndög_eof
 |ev->
po°ed_eof
;

129 #i‡(
NGX_HAVE_KQUEUE
)

130 
ev
->
kq_î∫o
 |ev->
po°ed_î∫o
;

132 i‡(
ev
->
po°ed_avaûabÀ
) {

133 
ev
->
avaûabÀ
 =Év->
po°ed_avaûabÀ
;

136 
ev
->
po°ed_ªady
 = 0;

137 
ev
->
po°ed_timedout
 = 0;

138 
ev
->
po°ed_eof
 = 0;

139 #i‡(
NGX_HAVE_KQUEUE
)

140 
ev
->
po°ed_î∫o
 = 0;

142 
ev
->
po°ed_avaûabÀ
 = 0;

144 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

146 
ev
->
	`h™dÀr
(ev);

148 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

150 i‡(
ev
->
locked
) {

151 
	`ngx_u∆ock
(
ev
->
lock
);

153 i‡(
ev
->
lock
 !ev->
own_lock
) {

154 
	`ngx_u∆ock
(
ev
->
own_lock
);

158 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

159 "po°edÉvíà%∞i†d⁄e", 
ev
);

164 
	}
}

169 
	$ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
)

171 
	}
}

	@src/event/ngx_event_posted.h

8 #i‚de‡
_NGX_EVENT_POSTED_H_INCLUDED_


9 
	#_NGX_EVENT_POSTED_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 #i‡(
NGX_THREADS
)

18 
ngx_muãx_t
 *
ngx_po°ed_evíts_muãx
;

22 
	#ngx_locked_po°_evít
(
ev
, 
queue
) \

24 i‡(
ev
->
¥ev
 =
NULL
) { \

25 
ev
->
√xt
 = (
ngx_evít_t
 *Ë*
queue
; \

26 
ev
->
¥ev
 = (
ngx_evít_t
 **Ë
queue
; \

27 *
queue
 = 
ev
; \

29 i‡(
ev
->
√xt
) { \

30 
ev
->
√xt
->
¥ev
 = &ev->next; \

33 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "postÉvent %p",Év); \

36 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

37 "upd©êpo°edÉvíà%p", 
ev
); \

38 }

	)

41 
	#ngx_po°_evít
(
ev
, 
queue
) \

43 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
); \

44 
	`ngx_locked_po°_evít
(
ev
, 
queue
); \

45 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

	)

48 
	#ngx_dñëe_po°ed_evít
(
ev
) \

50 *(
ev
->
¥ev
Ëev->
√xt
; \

52 i‡(
ev
->
√xt
) { \

53 
ev
->
√xt
->
¥ev
 =Év->prev; \

56 
ev
->
¥ev
 = 
NULL
; \

57 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, \

58 "dñëêpo°edÉvíà%p", 
ev
);

	)

62 
ngx_evít_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
,

63 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 **
po°ed
);

64 
ngx_wakeup_w‹kî_thªad
(
ngx_cy˛e_t
 *
cy˛e
);

66 #i‡(
NGX_THREADS
)

67 
ngx_öt_t
 
ngx_evít_thªad_¥o˚ss_po°ed
(
ngx_cy˛e_t
 *
cy˛e
);

71 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_ac˚±_evíts
;

72 
ngx_thªad_vﬁ©ûe
 
ngx_evít_t
 *
ngx_po°ed_evíts
;

	@src/event/ngx_event_timer.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_THREADS
)

14 
ngx_muãx_t
 *
	gngx_evít_timî_muãx
;

18 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
	gngx_evít_timî_rbåì
;

19 
ngx_rbåì_node_t
 
	gngx_evít_timî_£¡öñ
;

27 
ngx_öt_t


28 
	$ngx_evít_timî_öô
(
ngx_log_t
 *
log
)

30 
	`ngx_rbåì_öô
(&
ngx_evít_timî_rbåì
, &
ngx_evít_timî_£¡öñ
,

31 
ngx_rbåì_ö£π_timî_vÆue
);

33 #i‡(
NGX_THREADS
)

35 i‡(
ngx_evít_timî_muãx
) {

36 
ngx_evít_timî_muãx
->
log
 =Üog;

37  
NGX_OK
;

40 
ngx_evít_timî_muãx
 = 
	`ngx_muãx_öô
(
log
, 0);

41 i‡(
ngx_evít_timî_muãx
 =
NULL
) {

42  
NGX_ERROR
;

47  
NGX_OK
;

48 
	}
}

51 
ngx_m£c_t


52 
	$ngx_evít_föd_timî
()

54 
ngx_m£c_öt_t
 
timî
;

55 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

57 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =&
ngx_evít_timî_£¡öñ
) {

58  
NGX_TIMER_INFINITE
;

61 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

63 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

64 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

66 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

68 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

70 
timî
 = (
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
);

72  (
ngx_m£c_t
Ë(
timî
 > 0 ?Åimer : 0);

73 
	}
}

77 
	$ngx_evít_expúe_timîs
()

79 
ngx_evít_t
 *
ev
;

80 
ngx_rbåì_node_t
 *
node
, *
roŸ
, *
£¡öñ
;

82 
£¡öñ
 = 
ngx_evít_timî_rbåì
.sentinel;

86 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

88 
roŸ
 = 
ngx_evít_timî_rbåì
.root;

90 i‡(
roŸ
 =
£¡öñ
) {

94 
node
 = 
	`ngx_rbåì_mö
(
roŸ
, 
£¡öñ
);

98 i‡((
ngx_m£c_öt_t
Ë(
node
->
key
 - 
ngx_cuºít_m£c
) <= 0) {

99 
ev
 = (
ngx_evít_t
 *Ë((*Ë
node
 - 
	`off£tof
“gx_evít_t, 
timî
));

101 #i‡(
NGX_THREADS
)

103 i‡(
ngx_thªaded
 && 
	`ngx_åylock
(
ev
->
lock
) == 0) {

113 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

114 "evíà%∞i†busy i¿expúêtimîs", 
ev
);

119 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

121 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

123 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

125 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

127 #i‡(
NGX_DEBUG
)

128 
ev
->
timî
.
À·
 = 
NULL
;

129 
ev
->
timî
.
right
 = 
NULL
;

130 
ev
->
timî
.
∑ª¡
 = 
NULL
;

133 
ev
->
timî_£t
 = 0;

135 #i‡(
NGX_THREADS
)

136 i‡(
ngx_thªaded
) {

137 
ev
->
po°ed_timedout
 = 1;

139 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

141 
	`ngx_u∆ock
(
ev
->
lock
);

147 
ev
->
timedout
 = 1;

149 
ev
->
	`h™dÀr
(ev);

157 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

158 
	}
}

	@src/event/ngx_event_timer.h

8 #i‚de‡
_NGX_EVENT_TIMER_H_INCLUDED_


9 
	#_NGX_EVENT_TIMER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

17 
	#NGX_TIMER_INFINITE
 (
ngx_m£c_t
Ë-1

	)

19 
	#NGX_TIMER_LAZY_DELAY
 300

	)

22 
ngx_öt_t
 
ngx_evít_timî_öô
(
ngx_log_t
 *
log
);

23 
ngx_m£c_t
 
ngx_evít_föd_timî
();

24 
ngx_evít_expúe_timîs
();

27 #i‡(
NGX_THREADS
)

28 
ngx_muãx_t
 *
ngx_evít_timî_muãx
;

32 
ngx_thªad_vﬁ©ûe
 
ngx_rbåì_t
 
ngx_evít_timî_rbåì
;

35 
ngx_ölöe
 

36 
	$ngx_evít_dñ_timî
(
ngx_evít_t
 *
ev
)

38 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

40 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
);

42 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

44 
	`ngx_rbåì_dñëe
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

46 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

48 #i‡(
NGX_DEBUG
)

49 
ev
->
timî
.
À·
 = 
NULL
;

50 
ev
->
timî
.
right
 = 
NULL
;

51 
ev
->
timî
.
∑ª¡
 = 
NULL
;

54 
ev
->
timî_£t
 = 0;

55 
	}
}

58 
ngx_ölöe
 

59 
	$ngx_evít_add_timî
(
ngx_evít_t
 *
ev
, 
ngx_m£c_t
 
timî
)

61 
ngx_m£c_t
 
key
;

62 
ngx_m£c_öt_t
 
diff
;

64 
key
 = 
ngx_cuºít_m£c
 + 
timî
;

66 i‡(
ev
->
timî_£t
) {

74 
diff
 = (
ngx_m£c_öt_t
Ë(
key
 - 
ev
->
timî
.key);

76 i‡(
	`ngx_abs
(
diff
Ë< 
NGX_TIMER_LAZY_DELAY
) {

77 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

79 
	`ngx_evít_idít
(
ev
->
d©a
),Év->
timî
.
key
, key);

83 
	`ngx_dñ_timî
(
ev
);

86 
ev
->
timî
.
key
 = key;

88 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

90 
	`ngx_evít_idít
(
ev
->
d©a
), 
timî
,Év->timî.
key
);

92 
	`ngx_muãx_lock
(
ngx_evít_timî_muãx
);

94 
	`ngx_rbåì_ö£π
(&
ngx_evít_timî_rbåì
, &
ev
->
timî
);

96 
	`ngx_muãx_u∆ock
(
ngx_evít_timî_muãx
);

98 
ev
->
timî_£t
 = 1;

99 
	}
}

	@src/http/modules/ngx_http_access_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ö_addr_t
 
	mmask
;

15 
ö_addr_t
 
	maddr
;

16 
ngx_uöt_t
 
	mdíy
;

17 } 
	tngx_hâp_ac˚ss_ruÀ_t
;

19 #i‡(
NGX_HAVE_INET6
)

22 
ö6_addr
 
	maddr
;

23 
ö6_addr
 
	mmask
;

24 
ngx_uöt_t
 
	mdíy
;

25 } 
	tngx_hâp_ac˚ss_ruÀ6_t
;

30 
ngx_¨øy_t
 *
	mruÀs
;

31 #i‡(
NGX_HAVE_INET6
)

32 
ngx_¨øy_t
 *
	mruÀs6
;

34 } 
	tngx_hâp_ac˚ss_loc_c⁄f_t
;

37 
ngx_öt_t
 
ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
ö_addr_t
 
addr
);

40 #i‡(
NGX_HAVE_INET6
)

41 
ngx_öt_t
 
ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
,

42 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
, 
u_ch¨
 *
p
);

44 
ngx_öt_t
 
ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
);

45 *
ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

48 *
ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

49 *
∑ª¡
, *
chûd
);

50 
ngx_öt_t
 
ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
);

53 
ngx_comm™d_t
 
	gngx_hâp_ac˚ss_comm™ds
[] = {

55 { 
ngx_°rög
("allow"),

56 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


57 |
NGX_CONF_TAKE1
,

58 
ngx_hâp_ac˚ss_ruÀ
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("deny"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


65 |
NGX_CONF_TAKE1
,

66 
ngx_hâp_ac˚ss_ruÀ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

69 
NULL
 },

71 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ_˘x
 = {

77 
NULL
,

78 
ngx_hâp_ac˚ss_öô
,

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_ac˚ss_¸óã_loc_c⁄f
,

87 
ngx_hâp_ac˚ss_mîge_loc_c⁄f


91 
ngx_moduÀ_t
 
	gngx_hâp_ac˚ss_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_ac˚ss_moduÀ_˘x
,

94 
ngx_hâp_ac˚ss_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_ac˚ss_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

110 
sockaddr_ö
 *
sö
;

111 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
;

112 #i‡(
NGX_HAVE_INET6
)

113 
u_ch¨
 *
p
;

114 
ö_addr_t
 
addr
;

115 
sockaddr_ö6
 *
sö6
;

118 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ac˚ss_moduÀ
);

120 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

122 
AF_INET
:

123 i‡(
Æcf
->
ruÀs
) {

124 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

125  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
sö
->
sö_addr
.
s_addr
);

129 #i‡(
NGX_HAVE_INET6
)

131 
AF_INET6
:

132 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

133 
p
 = 
sö6
->
sö6_addr
.
s6_addr
;

135 i‡(
Æcf
->
ruÀs
 && 
	`IN6_IS_ADDR_V4MAPPED
(&
sö6
->
sö6_addr
)) {

136 
addr
 = 
p
[12] << 24;

137 
addr
 +
p
[13] << 16;

138 
addr
 +
p
[14] << 8;

139 
addr
 +
p
[15];

140  
	`ngx_hâp_ac˚ss_öë
(
r
, 
Æcf
, 
	`ht⁄l
(
addr
));

143 i‡(
Æcf
->
ruÀs6
) {

144  
	`ngx_hâp_ac˚ss_öë6
(
r
, 
Æcf
, 
p
);

150  
NGX_DECLINED
;

151 
	}
}

154 
ngx_öt_t


155 
	$ngx_hâp_ac˚ss_öë
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

156 
ö_addr_t
 
addr
)

158 
ngx_uöt_t
 
i
;

159 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

161 
ruÀ
 = 
Æcf
->
ruÀs
->
ñts
;

162 
i
 = 0; i < 
Æcf
->
ruÀs
->
√…s
; i++) {

164 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

166 
addr
, 
ruÀ
[
i
].
mask
,Ñule[i].addr);

168 i‡((
addr
 & 
ruÀ
[
i
].
mask
) ==Ñule[i].addr) {

169  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ
[
i
].
díy
);

173  
NGX_DECLINED
;

174 
	}
}

177 #i‡(
NGX_HAVE_INET6
)

179 
ngx_öt_t


180 
	$ngx_hâp_ac˚ss_öë6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
,

181 
u_ch¨
 *
p
)

183 
ngx_uöt_t
 
n
;

184 
ngx_uöt_t
 
i
;

185 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

187 
ruÀ6
 = 
Æcf
->
ruÀs6
->
ñts
;

188 
i
 = 0; i < 
Æcf
->
ruÀs6
->
√…s
; i++) {

190 #i‡(
NGX_DEBUG
)

192 
size_t
 
˛
, 
ml
, 
Æ
;

193 
u_ch¨
 
˘
[
NGX_INET6_ADDRSTRLEN
];

194 
u_ch¨
 
mt
[
NGX_INET6_ADDRSTRLEN
];

195 
u_ch¨
 
©
[
NGX_INET6_ADDRSTRLEN
];

197 
˛
 = 
	`ngx_öë6_¡›
(
p
, 
˘
, 
NGX_INET6_ADDRSTRLEN
);

198 
ml
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
mask
.
s6_addr
, 
mt
, 
NGX_INET6_ADDRSTRLEN
);

199 
Æ
 = 
	`ngx_öë6_¡›
(
ruÀ6
[
i
].
addr
.
s6_addr
, 
©
, 
NGX_INET6_ADDRSTRLEN
);

201 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

202 "ac˚ss: %*†%*†%*s", 
˛
, 
˘
, 
ml
, 
mt
, 
Æ
, 
©
);

206 
n
 = 0;Ç < 16;Ç++) {

207 i‡((
p
[
n
] & 
ruÀ6
[
i
].
mask
.
s6_addr
[n]Ë!ruÀ6[i].
addr
.s6_addr[n]) {

208 
√xt
;

212  
	`ngx_hâp_ac˚ss_found
(
r
, 
ruÀ6
[
i
].
díy
);

214 
√xt
:

218  
NGX_DECLINED
;

219 
	}
}

224 
ngx_öt_t


225 
	$ngx_hâp_ac˚ss_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
díy
)

227 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

229 i‡(
díy
) {

230 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

232 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

237  
NGX_HTTP_FORBIDDEN
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ac˚ss_ruÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

247 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

249 
ngx_öt_t
 
rc
;

250 
ngx_uöt_t
 
Æl
;

251 
ngx_°r_t
 *
vÆue
;

252 
ngx_cidr_t
 
cidr
;

253 
ngx_hâp_ac˚ss_ruÀ_t
 *
ruÀ
;

254 #i‡(
NGX_HAVE_INET6
)

255 
ngx_hâp_ac˚ss_ruÀ6_t
 *
ruÀ6
;

258 
	`ngx_memzîo
(&
cidr
, (
ngx_cidr_t
));

260 
vÆue
 = 
cf
->
¨gs
->
ñts
;

262 
Æl
 = (
vÆue
[1].
Àn
 =3 && 
	`ngx_°rcmp
(vÆue[1].
d©a
, "all") == 0);

264 i‡(!
Æl
) {

266 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], &
cidr
);

268 i‡(
rc
 =
NGX_ERROR
) {

269 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

270 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

271  
NGX_CONF_ERROR
;

274 i‡(
rc
 =
NGX_DONE
) {

275 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

276 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

280 
cidr
.
Ámûy
) {

282 #i‡(
NGX_HAVE_INET6
)

283 
AF_INET6
:

286 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

287 
Æcf
->
ruÀs6
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

288 (
ngx_hâp_ac˚ss_ruÀ6_t
));

289 i‡(
Æcf
->
ruÀs6
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
ruÀ6
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs6
);

295 i‡(
ruÀ6
 =
NULL
) {

296  
NGX_CONF_ERROR
;

299 
ruÀ6
->
mask
 = 
cidr
.
u
.
ö6
.mask;

300 
ruÀ6
->
addr
 = 
cidr
.
u
.
ö6
.addr;

301 
ruÀ6
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

303 i‡(!
Æl
) {

312 i‡(
Æcf
->
ruÀs
 =
NULL
) {

313 
Æcf
->
ruÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

314 (
ngx_hâp_ac˚ss_ruÀ_t
));

315 i‡(
Æcf
->
ruÀs
 =
NULL
) {

316  
NGX_CONF_ERROR
;

320 
ruÀ
 = 
	`ngx_¨øy_push
(
Æcf
->
ruÀs
);

321 i‡(
ruÀ
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
ruÀ
->
mask
 = 
cidr
.
u
.
ö
.mask;

326 
ruÀ
->
addr
 = 
cidr
.
u
.
ö
.addr;

327 
ruÀ
->
díy
 = (
vÆue
[0].
d©a
[0] == 'd') ? 1 : 0;

330  
NGX_CONF_OK
;

331 
	}
}

335 
	$ngx_hâp_ac˚ss_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

337 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
;

339 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ac˚ss_loc_c⁄f_t
));

340 i‡(
c⁄f
 =
NULL
) {

341  
NULL
;

344  
c⁄f
;

345 
	}
}

349 
	$ngx_hâp_ac˚ss_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

351 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

352 
ngx_hâp_ac˚ss_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

354 #i‡(
NGX_HAVE_INET6
)

356 i‡(
c⁄f
->
ruÀs
 =
NULL
 && c⁄f->
ruÀs6
 == NULL) {

357 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

358 
c⁄f
->
ruÀs6
 = 
¥ev
->rules6;

363 i‡(
c⁄f
->
ruÀs
 =
NULL
) {

364 
c⁄f
->
ruÀs
 = 
¥ev
->rules;

369  
NGX_CONF_OK
;

370 
	}
}

373 
ngx_öt_t


374 
	$ngx_hâp_ac˚ss_öô
(
ngx_c⁄f_t
 *
cf
)

376 
ngx_hâp_h™dÀr_±
 *
h
;

377 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

379 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

381 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

382 i‡(
h
 =
NULL
) {

383  
NGX_ERROR
;

386 *
h
 = 
ngx_hâp_ac˚ss_h™dÀr
;

388  
NGX_OK
;

389 
	}
}

	@src/http/modules/ngx_http_addition_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mbef‹e_body
;

15 
ngx_°r_t
 
	ma·î_body
;

17 
ngx_hash_t
 
	mty≥s
;

18 
ngx_¨øy_t
 *
	mty≥s_keys
;

19 } 
	tngx_hâp_addôi⁄_c⁄f_t
;

23 
ngx_uöt_t
 
	mbef‹e_body_£¡
;

24 } 
	tngx_hâp_addôi⁄_˘x_t
;

27 *
ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

29 *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_addôi⁄_comm™ds
[] = {

35 { 
ngx_°rög
("add_before_body"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

37 
ngx_c⁄f_£t_°r_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
bef‹e_body
),

40 
NULL
 },

42 { 
ngx_°rög
("add_after_body"),

43 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

44 
ngx_c⁄f_£t_°r_¶Ÿ
,

45 
NGX_HTTP_LOC_CONF_OFFSET
,

46 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
a·î_body
),

47 
NULL
 },

49 { 
ngx_°rög
("addition_types"),

50 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

51 
ngx_hâp_ty≥s_¶Ÿ
,

52 
NGX_HTTP_LOC_CONF_OFFSET
,

53 
off£tof
(
ngx_hâp_addôi⁄_c⁄f_t
, 
ty≥s_keys
),

54 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

56 
ngx_nuŒ_comm™d


60 
ngx_hâp_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ_˘x
 = {

61 
NULL
,

62 
ngx_hâp_addôi⁄_fûãr_öô
,

64 
NULL
,

65 
NULL
,

67 
NULL
,

68 
NULL
,

70 
ngx_hâp_addôi⁄_¸óã_c⁄f
,

71 
ngx_hâp_addôi⁄_mîge_c⁄f


75 
ngx_moduÀ_t
 
	gngx_hâp_addôi⁄_fûãr_moduÀ
 = {

76 
NGX_MODULE_V1
,

77 &
ngx_hâp_addôi⁄_fûãr_moduÀ_˘x
,

78 
ngx_hâp_addôi⁄_comm™ds
,

79 
NGX_HTTP_MODULE
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NGX_MODULE_V1_PADDING


91 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

92 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

95 
ngx_öt_t


96 
	$ngx_hâp_addôi⁄_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

98 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

99 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

101 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK
 ||Ñ !r->
maö
) {

102  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

105 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

107 i‡(
c⁄f
->
bef‹e_body
.
Àn
 =0 && c⁄f->
a·î_body
.len == 0) {

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

111 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
) {

112  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

115 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_addôi⁄_˘x_t
));

116 i‡(
˘x
 =
NULL
) {

117  
NGX_ERROR
;

120 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

122 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

123 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

124 
	`ngx_hâp_˛ór_ëag
(
r
);

126  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

127 
	}
}

130 
ngx_öt_t


131 
	$ngx_hâp_addôi⁄_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

133 
ngx_öt_t
 
rc
;

134 
ngx_uöt_t
 
œ°
;

135 
ngx_chaö_t
 *
˛
;

136 
ngx_hâp_ªque°_t
 *
§
;

137 
ngx_hâp_addôi⁄_˘x_t
 *
˘x
;

138 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

140 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

141  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

144 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

146 i‡(
˘x
 =
NULL
) {

147  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

150 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

152 i‡(!
˘x
->
bef‹e_body_£¡
) {

153 
˘x
->
bef‹e_body_£¡
 = 1;

155 i‡(
c⁄f
->
bef‹e_body
.
Àn
) {

156 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
bef‹e_body
, 
NULL
, &
§
, NULL, 0)

157 !
NGX_OK
)

159  
NGX_ERROR
;

164 i‡(
c⁄f
->
a·î_body
.
Àn
 == 0) {

165 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

166  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

169 
œ°
 = 0;

171 
˛
 = 
ö
; cl; c»˛->
√xt
) {

172 i‡(
˛
->
buf
->
œ°_buf
) {

173 
˛
->
buf
->
œ°_buf
 = 0;

174 
˛
->
buf
->
sync
 = 1;

175 
œ°
 = 1;

179 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

181 i‡(
rc
 =
NGX_ERROR
 || !
œ°
 || 
c⁄f
->
a·î_body
.
Àn
 == 0) {

182  
rc
;

185 i‡(
	`ngx_hâp_subªque°
(
r
, &
c⁄f
->
a·î_body
, 
NULL
, &
§
, NULL, 0)

186 !
NGX_OK
)

188  
NGX_ERROR
;

191 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_addôi⁄_fûãr_moduÀ
);

193  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

194 
	}
}

197 
ngx_öt_t


198 
	$ngx_hâp_addôi⁄_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

200 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

201 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_addôi⁄_hódî_fûãr
;

203 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

204 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_addôi⁄_body_fûãr
;

206  
NGX_OK
;

207 
	}
}

211 
	$ngx_hâp_addôi⁄_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

213 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
;

215 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_addôi⁄_c⁄f_t
));

216 i‡(
c⁄f
 =
NULL
) {

217  
NULL
;

229  
c⁄f
;

230 
	}
}

234 
	$ngx_hâp_addôi⁄_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

236 
ngx_hâp_addôi⁄_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

237 
ngx_hâp_addôi⁄_c⁄f_t
 *
c⁄f
 = 
chûd
;

239 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
bef‹e_body
, 
¥ev
->before_body, "");

240 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
a·î_body
, 
¥ev
->after_body, "");

242 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

243 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

244 
ngx_hâp_html_deÁu…_ty≥s
)

245 !
NGX_OK
)

247  
NGX_CONF_ERROR
;

250  
NGX_CONF_OK
;

251 
	}
}

	@src/http/modules/ngx_http_auth_basic_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_¸y±.h
>

14 
	#NGX_HTTP_AUTH_BUF_SIZE
 2048

	)

18 
ngx_°r_t
 
	m∑sswd
;

19 } 
	tngx_hâp_auth_basic_˘x_t
;

23 
ngx_hâp_com∂ex_vÆue_t
 *
	mªÆm
;

24 
ngx_hâp_com∂ex_vÆue_t
 
	mu£r_fûe
;

25 } 
	tngx_hâp_auth_basic_loc_c⁄f_t
;

28 
ngx_öt_t
 
ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
);

31 
ngx_öt_t
 
ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_°r_t
 *
ªÆm
);

33 
ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
);

34 *
ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

37 
ngx_öt_t
 
ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
);

38 *
ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_auth_basic_comm™ds
[] = {

44 { 
ngx_°rög
("auth_basic"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


46 |
NGX_CONF_TAKE1
,

47 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

48 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
ªÆm
),

50 
NULL
 },

52 { 
ngx_°rög
("auth_basic_user_file"),

53 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF


54 |
NGX_CONF_TAKE1
,

55 
ngx_hâp_auth_basic_u£r_fûe
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_auth_basic_loc_c⁄f_t
, 
u£r_fûe
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ_˘x
 = {

65 
NULL
,

66 
ngx_hâp_auth_basic_öô
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_auth_basic_¸óã_loc_c⁄f
,

75 
ngx_hâp_auth_basic_mîge_loc_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_auth_basic_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_auth_basic_moduÀ_˘x
,

82 
ngx_hâp_auth_basic_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_öt_t


96 
	$ngx_hâp_auth_basic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

98 
off_t
 
off£t
;

99 
ssize_t
 
n
;

100 
ngx_fd_t
 
fd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_îr_t
 
îr
;

103 
ngx_°r_t
 
pwd
, 
ªÆm
, 
u£r_fûe
;

104 
ngx_uöt_t
 
i
, 
Àvñ
, 
logö
, 
À·
, 
∑sswd
;

105 
ngx_fûe_t
 
fûe
;

106 
ngx_hâp_auth_basic_˘x_t
 *
˘x
;

107 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
;

108 
u_ch¨
 
buf
[
NGX_HTTP_AUTH_BUF_SIZE
];

110 
sw_logö
,

111 
sw_∑sswd
,

112 
sw_skù


113 } 
°©e
;

115 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

117 i‡(
Æcf
->
ªÆm
 =
NULL
 ||álcf->
u£r_fûe
.
vÆue
.
d©a
 == NULL) {

118  
NGX_DECLINED
;

121 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
Æcf
->
ªÆm
, &ªÆmË!
NGX_OK
) {

122  
NGX_ERROR
;

125 i‡(
ªÆm
.
Àn
 =3 && 
	`ngx_°∫cmp
‘ólm.
d©a
, "off", 3) == 0) {

126  
NGX_DECLINED
;

129 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_auth_basic_moduÀ
);

131 i‡(
˘x
) {

132  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
˘x
, &˘x->
∑sswd
,

133 &
ªÆm
);

136 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

138 i‡(
rc
 =
NGX_DECLINED
) {

140 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

146 i‡(
rc
 =
NGX_ERROR
) {

147  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Æcf
->
u£r_fûe
, &u£r_fûeË!
NGX_OK
) {

151  
NGX_ERROR
;

154 
fd
 = 
	`ngx_›í_fûe
(
u£r_fûe
.
d©a
, 
NGX_FILE_RDONLY
, 
NGX_FILE_OPEN
, 0);

156 i‡(
fd
 =
NGX_INVALID_FILE
) {

157 
îr
 = 
ngx_î∫o
;

159 i‡(
îr
 =
NGX_ENOENT
) {

160 
Àvñ
 = 
NGX_LOG_ERR
;

161 
rc
 = 
NGX_HTTP_FORBIDDEN
;

164 
Àvñ
 = 
NGX_LOG_CRIT
;

165 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

168 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

169 
ngx_›í_fûe_n
 " \"%s\" faûed", 
u£r_fûe
.
d©a
);

171  
rc
;

174 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

176 
fûe
.
fd
 = fd;

177 
fûe
.
«me
 = 
u£r_fûe
;

178 
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

180 
°©e
 = 
sw_logö
;

181 
∑sswd
 = 0;

182 
logö
 = 0;

183 
À·
 = 0;

184 
off£t
 = 0;

187 
i
 = 
À·
;

189 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
buf
 + 
À·
, 
NGX_HTTP_AUTH_BUF_SIZE
 -Üeft,

190 
off£t
);

192 i‡(
n
 =
NGX_ERROR
) {

193 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

194  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

197 i‡(
n
 == 0) {

201 
i
 = 
À·
; i <Üe· + 
n
; i++) {

202 
°©e
) {

204 
sw_logö
:

205 i‡(
logö
 == 0) {

207 i‡(
buf
[
i
] ='#' || buf[i] =
CR
) {

208 
°©e
 = 
sw_skù
;

212 i‡(
buf
[
i
] =
LF
) {

217 i‡(
buf
[
i
] !
r
->
hódîs_ö
.
u£r
.
d©a
[
logö
]) {

218 
°©e
 = 
sw_skù
;

222 i‡(
logö
 =
r
->
hódîs_ö
.
u£r
.
Àn
) {

223 
°©e
 = 
sw_∑sswd
;

224 
∑sswd
 = 
i
 + 1;

227 
logö
++;

231 
sw_∑sswd
:

232 i‡(
buf
[
i
] =
LF
 || buf[i] =
CR
 || buf[i] == ':') {

233 
buf
[
i
] = '\0';

235 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

237 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

238 
pwd
.
d©a
 = &
buf
[
∑sswd
];

240  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
,

241 &
ªÆm
);

246 
sw_skù
:

247 i‡(
buf
[
i
] =
LF
) {

248 
°©e
 = 
sw_logö
;

249 
logö
 = 0;

256 i‡(
°©e
 =
sw_∑sswd
) {

257 
À·
 =Üe· + 
n
 - 
∑sswd
;

258 
	`ngx_memmove
(
buf
, &buf[
∑sswd
], 
À·
);

259 
∑sswd
 = 0;

262 
À·
 = 0;

265 
off£t
 +
n
;

268 
	`ngx_hâp_auth_basic_˛o£
(&
fûe
);

270 i‡(
°©e
 =
sw_∑sswd
) {

271 
pwd
.
Àn
 = 
i
 - 
∑sswd
;

272 
pwd
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Öwd.
Àn
 + 1);

273 i‡(
pwd
.
d©a
 =
NULL
) {

274  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

277 
	`ngx_˝y°∫
(
pwd
.
d©a
, &
buf
[
∑sswd
],Öwd.
Àn
 + 1);

279  
	`ngx_hâp_auth_basic_¸y±_h™dÀr
(
r
, 
NULL
, &
pwd
, &
ªÆm
);

282 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

284 &
r
->
hódîs_ö
.
u£r
, &
u£r_fûe
);

286  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, &
ªÆm
);

287 
	}
}

290 
ngx_öt_t


291 
	$ngx_hâp_auth_basic_¸y±_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

292 
ngx_hâp_auth_basic_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑sswd
,Çgx_°r_à*
ªÆm
)

294 
ngx_öt_t
 
rc
;

295 
u_ch¨
 *
í¸y±ed
;

297 
rc
 = 
	`ngx_¸y±
(
r
->
poﬁ
,Ñ->
hódîs_ö
.
∑sswd
.
d©a
,Öasswd->data,

298 &
í¸y±ed
);

300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302 
rc
, &
r
->
hódîs_ö
.
u£r
, 
∑sswd
->
d©a
);

304 i‡(
rc
 =
NGX_OK
) {

305 i‡(
	`ngx_°rcmp
(
í¸y±ed
, 
∑sswd
->
d©a
) == 0) {

306  
NGX_OK
;

309 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

310 "í¸y±ed: \"%s\"", 
í¸y±ed
);

312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

314 &
r
->
hódîs_ö
.
u£r
);

316  
	`ngx_hâp_auth_basic_£t_ªÆm
(
r
, 
ªÆm
);

319 i‡(
rc
 =
NGX_ERROR
) {

320  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

325 i‡(
˘x
 =
NULL
) {

326 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_auth_basic_˘x_t
));

327 i‡(
˘x
 =
NULL
) {

328  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

331 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_auth_basic_moduÀ
);

333 
˘x
->
∑sswd
.
Àn
 =Öasswd->len;

334 
∑sswd
->
Àn
++;

336 
˘x
->
∑sswd
.
d©a
 = 
	`ngx_p°rdup
(
r
->
poﬁ
,Öasswd);

337 i‡(
˘x
->
∑sswd
.
d©a
 =
NULL
) {

338  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

345  
rc
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_auth_basic_£t_ªÆm
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ªÆm
)

352 
size_t
 
Àn
;

353 
u_ch¨
 *
basic
, *
p
;

355 
r
->
hódîs_out
.
www_authítiˇã
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

356 i‡(
r
->
hódîs_out
.
www_authítiˇã
 =
NULL
) {

357  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

360 
Àn
 = ("Basi¯ªÆm=\"\""Ë- 1 + 
ªÆm
->len;

362 
basic
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

363 i‡(
basic
 =
NULL
) {

364  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

367 
p
 = 
	`ngx_˝ymem
(
basic
, "BasicÑealm=\"", ("BasicÑealm=\"") - 1);

368 
p
 = 
	`ngx_˝ymem
’, 
ªÆm
->
d©a
,Ñólm->
Àn
);

369 *
p
 = '"';

371 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 1;

372 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
www_authítiˇã
->
key
, "WWW-Authenticate");

373 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
d©a
 = 
basic
;

374 
r
->
hódîs_out
.
www_authítiˇã
->
vÆue
.
Àn
 =Üen;

376  
NGX_HTTP_UNAUTHORIZED
;

377 
	}
}

380 
	$ngx_hâp_auth_basic_˛o£
(
ngx_fûe_t
 *
fûe
)

382 i‡(
	`ngx_˛o£_fûe
(
fûe
->
fd
Ë=
NGX_FILE_ERROR
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
ngx_î∫o
,

384 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fûe
->
«me
.
d©a
);

386 
	}
}

390 
	$ngx_hâp_auth_basic_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

392 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
;

394 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_auth_basic_loc_c⁄f_t
));

395 i‡(
c⁄f
 =
NULL
) {

396  
NULL
;

399  
c⁄f
;

400 
	}
}

404 
	$ngx_hâp_auth_basic_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

406 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

407 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

409 i‡(
c⁄f
->
ªÆm
 =
NULL
) {

410 
c⁄f
->
ªÆm
 = 
¥ev
->realm;

413 i‡(
c⁄f
->
u£r_fûe
.
vÆue
.
d©a
 =
NULL
) {

414 
c⁄f
->
u£r_fûe
 = 
¥ev
->user_file;

417  
NGX_CONF_OK
;

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_auth_basic_öô
(
ngx_c⁄f_t
 *
cf
)

424 
ngx_hâp_h™dÀr_±
 *
h
;

425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

427 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

429 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
);

430 i‡(
h
 =
NULL
) {

431  
NGX_ERROR
;

434 *
h
 = 
ngx_hâp_auth_basic_h™dÀr
;

436  
NGX_OK
;

437 
	}
}

441 
	$ngx_hâp_auth_basic_u£r_fûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

443 
ngx_hâp_auth_basic_loc_c⁄f_t
 *
Æcf
 = 
c⁄f
;

445 
ngx_°r_t
 *
vÆue
;

446 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

448 i‡(
Æcf
->
u£r_fûe
.
vÆue
.
d©a
) {

452 
vÆue
 = 
cf
->
¨gs
->
ñts
;

454 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

456 
ccv
.
cf
 = cf;

457 
ccv
.
vÆue
 = &value[1];

458 
ccv
.
com∂ex_vÆue
 = &
Æcf
->
u£r_fûe
;

459 
ccv
.
zîo
 = 1;

460 
ccv
.
c⁄f_¥efix
 = 1;

462 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

463  
NGX_CONF_ERROR
;

466  
NGX_CONF_OK
;

467 
	}
}

	@src/http/modules/ngx_http_autoindex_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

16 
ngx_buf_t
 *
	mbuf
;

17 
size_t
 
	msize
;

18 
ngx_poﬁ_t
 *
	mpoﬁ
;

19 
size_t
 
	mÆloc_size
;

20 
ngx_chaö_t
 **
	mœ°_out
;

21 } 
	tngx_hâp_autoödex_˘x_t
;

27 
ngx_°r_t
 
	m«me
;

28 
size_t
 
	mutf_Àn
;

29 
size_t
 
	mesˇ≥
;

30 
size_t
 
	mesˇ≥_html
;

32 
	mdú
:1;

34 
time_t
 
	mmtime
;

35 
off_t
 
	msize
;

36 } 
	tngx_hâp_autoödex_íåy_t
;

40 
ngx_Êag_t
 
	míabÀ
;

41 
ngx_Êag_t
 
	mloˇ…ime
;

42 
ngx_Êag_t
 
	mexa˘_size
;

43 } 
	tngx_hâp_autoödex_loc_c⁄f_t
;

46 
	#NGX_HTTP_AUTOINDEX_PREALLOCATE
 50

	)

48 
	#NGX_HTTP_AUTOINDEX_NAME_LEN
 50

	)

51 
ngx_libc_cde˛
 
ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
,

52 c⁄° *
two
);

53 
ngx_öt_t
 
ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

55 
ngx_öt_t
 
ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
);

56 *
ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

58 *
∑ª¡
, *
chûd
);

61 
ngx_comm™d_t
 
	gngx_hâp_autoödex_comm™ds
[] = {

63 { 
ngx_°rög
("autoindex"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
íabÀ
),

68 
NULL
 },

70 { 
ngx_°rög
("autoindex_localtime"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
loˇ…ime
),

75 
NULL
 },

77 { 
ngx_°rög
("autoindex_exact_size"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

79 
ngx_c⁄f_£t_Êag_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_autoödex_loc_c⁄f_t
, 
exa˘_size
),

82 
NULL
 },

84 
ngx_nuŒ_comm™d


88 
ngx_hâp_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ_˘x
 = {

89 
NULL
,

90 
ngx_hâp_autoödex_öô
,

92 
NULL
,

93 
NULL
,

95 
NULL
,

96 
NULL
,

98 
ngx_hâp_autoödex_¸óã_loc_c⁄f
,

99 
ngx_hâp_autoödex_mîge_loc_c⁄f


103 
ngx_moduÀ_t
 
	gngx_hâp_autoödex_moduÀ
 = {

104 
NGX_MODULE_V1
,

105 &
ngx_hâp_autoödex_moduÀ_˘x
,

106 
ngx_hâp_autoödex_comm™ds
,

107 
NGX_HTTP_MODULE
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NGX_MODULE_V1_PADDING


119 
u_ch¨
 
	gtôÀ
[] =

120 "<html>" 
CRLF


125 
u_ch¨
 
	ghódî
[] =

126 "</tôÀ></hód>" 
CRLF


127 "<body bgcﬁ‹=\"whôe\">" 
CRLF


131 
u_ch¨
 
	gèû
[] =

132 "</body>" 
CRLF


133 "</html>" 
CRLF


137 
ngx_öt_t


138 
	$ngx_hâp_autoödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

140 
u_ch¨
 *
œ°
, *
fûíame
, 
sˇÀ
;

141 
off_t
 
Àngth
;

142 
size_t
 
Àn
, 
ch¨_Àn
, 
esˇ≥_html
, 
Æloˇãd
, 
roŸ
;

143 
ngx_tm_t
 
tm
;

144 
ngx_îr_t
 
îr
;

145 
ngx_buf_t
 *
b
;

146 
ngx_öt_t
 
rc
, 
size
;

147 
ngx_°r_t
 
∑th
;

148 
ngx_dú_t
 
dú
;

149 
ngx_uöt_t
 
i
, 
Àvñ
, 
utf8
;

150 
ngx_poﬁ_t
 *
poﬁ
;

151 
ngx_time_t
 *
ç
;

152 
ngx_chaö_t
 
out
;

153 
ngx_¨øy_t
 
íåõs
;

154 
ngx_hâp_autoödex_íåy_t
 *
íåy
;

155 
ngx_hâp_autoödex_loc_c⁄f_t
 *
Æcf
;

157 *
m⁄ths
[] = { "Jan", "Feb", "Mar", "Apr", "May", "Jun",

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

161  
NGX_DECLINED
;

164 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

165  
NGX_DECLINED
;

168 
Æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_autoödex_moduÀ
);

170 i‡(!
Æcf
->
íabÀ
) {

171  
NGX_DECLINED
;

176 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
,

177 
NGX_HTTP_AUTOINDEX_PREALLOCATE
);

178 i‡(
œ°
 =
NULL
) {

179  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

182 
Æloˇãd
 = 
∑th
.
Àn
;

183 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

184 i‡(
∑th
.
Àn
 > 1) {

185 
∑th
.
Àn
--;

187 
∑th
.
d©a
[∑th.
Àn
] = '\0';

189 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 "hâ∞autoödex: \"%s\"", 
∑th
.
d©a
);

192 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

193 
îr
 = 
ngx_î∫o
;

195 i‡(
îr
 =
NGX_ENOENT


196 || 
îr
 =
NGX_ENOTDIR


197 || 
îr
 =
NGX_ENAMETOOLONG
)

199 
Àvñ
 = 
NGX_LOG_ERR
;

200 
rc
 = 
NGX_HTTP_NOT_FOUND
;

202 } i‡(
îr
 =
NGX_EACCES
) {

203 
Àvñ
 = 
NGX_LOG_ERR
;

204 
rc
 = 
NGX_HTTP_FORBIDDEN
;

207 
Àvñ
 = 
NGX_LOG_CRIT
;

208 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

212 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

214  
rc
;

217 #i‡(
NGX_SUPPRESS_WARN
)

220 
	`ngx_memzîo
(&
íåõs
, (
ngx_¨øy_t
));

225 
poﬁ
 = 
r
->pool;

227 i‡(
	`ngx_¨øy_öô
(&
íåõs
, 
poﬁ
, 40, (
ngx_hâp_autoödex_íåy_t
))

228 !
NGX_OK
)

230  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

233 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

234 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

235 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

237 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

239 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

240 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

241 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

242 
ngx_˛o£_dú_n
 " \"%V\" faûed", &
∑th
);

245  
rc
;

248 
fûíame
 = 
∑th
.
d©a
;

249 
fûíame
[
∑th
.
Àn
] = '/';

251 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
 == 5

252 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
ch¨£t
.
d©a
, (
u_ch¨
 *) "utf-8", 5)

255 
utf8
 = 1;

258 
utf8
 = 0;

262 
	`ngx_£t_î∫o
(0);

264 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

265 
îr
 = 
ngx_î∫o
;

267 i‡(
îr
 !
NGX_ENOMOREFILES
) {

268 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

269 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

270  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

276 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

277 "hâ∞autoödex fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

279 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

281 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

285 i‡(!
dú
.
vÆid_öfo
) {

289 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

290 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

291 + 
NGX_HTTP_AUTOINDEX_PREALLOCATE
;

293 
fûíame
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Æloˇãd
);

294 i‡(
fûíame
 =
NULL
) {

295  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

298 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

299 *
œ°
++ = '/';

302 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

304 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

305 
îr
 = 
ngx_î∫o
;

307 i‡(
îr
 !
NGX_ENOENT
) {

308 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

309 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

311 i‡(
îr
 =
NGX_EACCES
) {

315  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

318 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

319 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

320 
ngx_de_lök_öfo_n
 " \"%s\" failed",

321 
fûíame
);

322  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

327 
íåy
 = 
	`ngx_¨øy_push
(&
íåõs
);

328 i‡(
íåy
 =
NULL
) {

329  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

332 
íåy
->
«me
.
Àn
 =Üen;

334 
íåy
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
 + 1);

335 i‡(
íåy
->
«me
.
d©a
 =
NULL
) {

336  
	`ngx_hâp_autoödex_îr‹
(
r
, &
dú
, &
∑th
);

339 
	`ngx_˝y°∫
(
íåy
->
«me
.
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

341 
íåy
->
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
	`ngx_de_«me
(&
dú
), 
Àn
,

342 
NGX_ESCAPE_URI_COMPONENT
);

344 
íåy
->
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
,É¡ry->
«me
.
d©a
,

345 
íåy
->
«me
.
Àn
);

347 i‡(
utf8
) {

348 
íåy
->
utf_Àn
 = 
	`ngx_utf8_Àngth
”¡ry->
«me
.
d©a
,É¡ry->«me.
Àn
);

350 
íåy
->
utf_Àn
 = 
Àn
;

353 
íåy
->
dú
 = 
	`ngx_de_is_dú
(&dir);

354 
íåy
->
mtime
 = 
	`ngx_de_mtime
(&
dú
);

355 
íåy
->
size
 = 
	`ngx_de_size
(&
dú
);

358 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

360 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

363 
esˇ≥_html
 = 
	`ngx_esˇ≥_html
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

365 
Àn
 = (
tôÀ
) - 1

366 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


367 + (
hódî
) - 1

368 + 
r
->
uri
.
Àn
 + 
esˇ≥_html


370 + ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1

372 + (
èû
) - 1;

374 
íåy
 = 
íåõs
.
ñts
;

375 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

376 
Àn
 += ("<a href=\"") - 1

377 + 
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥


380 + 
íåy
[
i
].
«me
.
Àn
 -É¡ry[i].
utf_Àn


381 + 
íåy
[
i
].
esˇ≥_html


382 + 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + ("&gt;") - 2

389 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

390 i‡(
b
 =
NULL
) {

391  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

394 i‡(
íåõs
.
√…s
 > 1) {

395 
	`ngx_qs‹t
(
íåy
, (
size_t
Ë
íåõs
.
√…s
,

396 (
ngx_hâp_autoödex_íåy_t
),

397 
ngx_hâp_autoödex_cmp_íåõs
);

400 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
tôÀ
, (title) - 1);

402 i‡(
esˇ≥_html
) {

403 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

404 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

405 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

408 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

409 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
hódî
, (header) - 1);

410 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

413 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</h1>", ("</h1>") - 1);

415 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
,

416 ("<hr><¥e><®hªf=\"../\">../</a>" 
CRLF
) - 1);

418 
ç
 = 
	`ngx_timeofday
();

420 
i
 = 0; i < 
íåõs
.
√…s
; i++) {

421 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "<a href=\"", ("<a href=\"") - 1);

423 i‡(
íåy
[
i
].
esˇ≥
) {

424 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
íåy
[
i
].
«me
.
d©a
,É¡ry[i].«me.
Àn
,

425 
NGX_ESCAPE_URI_COMPONENT
);

427 
b
->
œ°
 +
íåy
[
i
].
«me
.
Àn
 +É¡ry[i].
esˇ≥
;

430 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

431 
íåy
[
i
].
«me
.
Àn
);

434 i‡(
íåy
[
i
].
dú
) {

435 *
b
->
œ°
++ = '/';

438 *
b
->
œ°
++ = '"';

439 *
b
->
œ°
++ = '>';

441 
Àn
 = 
íåy
[
i
].
utf_Àn
;

443 i‡(
íåy
[
i
].
«me
.
Àn
 !=Üen) {

444 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

445 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3 + 1;

448 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1;

451 
œ°
 = 
b
->last;

452 
b
->
œ°
 = 
	`ngx_utf8_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

453 
ch¨_Àn
, 
íåy
[
i
].
«me
.
Àn
 + 1);

455 i‡(
íåy
[
i
].
esˇ≥_html
) {

456 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
÷a°, 
íåy
[
i
].
«me
.
d©a
,

457 
b
->
œ°
 -Üast);

460 
œ°
 = 
b
->last;

463 i‡(
íåy
[
i
].
esˇ≥_html
) {

464 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

465 
ch¨_Àn
 = 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 3;

468 
ch¨_Àn
 = 
Àn
;

471 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_html
(b->last,

472 
íåy
[
i
].
«me
.
d©a
, 
ch¨_Àn
);

473 
œ°
 = 
b
->last;

476 
b
->
œ°
 = 
	`ngx_˝y°∫
(b->œ°, 
íåy
[
i
].
«me
.
d©a
,

477 
NGX_HTTP_AUTOINDEX_NAME_LEN
 + 1);

478 
œ°
 = 
b
->last - 3;

482 i‡(
Àn
 > 
NGX_HTTP_AUTOINDEX_NAME_LEN
) {

483 
b
->
œ°
 = 
	`ngx_˝ymem
(last, "..&gt;</a>", ("..&gt;</a>") - 1);

486 i‡(
íåy
[
i
].
dú
 && 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

487 *
b
->
œ°
++ = '/';

488 
Àn
++;

491 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</a>", ("</a>") - 1);

493 i‡(
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
 > 0) {

494 
	`ngx_mem£t
(
b
->
œ°
, ' ', 
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
);

495 
b
->
œ°
 +
NGX_HTTP_AUTOINDEX_NAME_LEN
 - 
Àn
;

499 *
b
->
œ°
++ = ' ';

501 
	`ngx_gmtime
(
íåy
[
i
].
mtime
 + 
ç
->
gmtoff
 * 60 * 
Æcf
->
loˇ…ime
, &
tm
);

503 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%02d-%s-%d %02d:%02d ",

504 
tm
.
ngx_tm_mday
,

505 
m⁄ths
[
tm
.
ngx_tm_m⁄
 - 1],

506 
tm
.
ngx_tm_yór
,

507 
tm
.
ngx_tm_hour
,

508 
tm
.
ngx_tm_mö
);

510 i‡(
Æcf
->
exa˘_size
) {

511 i‡(
íåy
[
i
].
dú
) {

512 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

515 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%19O", 
íåy
[
i
].
size
);

519 i‡(
íåy
[
i
].
dú
) {

520 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, " -",

524 
Àngth
 = 
íåy
[
i
].
size
;

526 i‡(
Àngth
 > 1024 * 1024 * 1024 - 1) {

527 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024 * 1024));

528 i‡((
Àngth
 % (1024 * 1024 * 1024))

531 
size
++;

533 
sˇÀ
 = 'G';

535 } i‡(
Àngth
 > 1024 * 1024 - 1) {

536 
size
 = (
ngx_öt_t
Ë(
Àngth
 / (1024 * 1024));

537 i‡((
Àngth
 % (1024 * 1024)) > (1024 * 1024 / 2 - 1)) {

538 
size
++;

540 
sˇÀ
 = 'M';

542 } i‡(
Àngth
 > 9999) {

543 
size
 = (
ngx_öt_t
Ë(
Àngth
 / 1024);

544 i‡(
Àngth
 % 1024 > 511) {

545 
size
++;

547 
sˇÀ
 = 'K';

550 
size
 = (
ngx_öt_t
Ë
Àngth
;

551 
sˇÀ
 = '\0';

554 i‡(
sˇÀ
) {

555 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%6i%c", 
size
, 
sˇÀ
);

558 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %6i", 
size
);

563 *
b
->
œ°
++ = 
CR
;

564 *
b
->
œ°
++ = 
LF
;

569 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "</pre><hr>", ("</pre><hr>") - 1);

571 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
èû
, (tail) - 1);

573 i‡(
r
 =r->
maö
) {

574 
b
->
œ°_buf
 = 1;

577 
b
->
œ°_ö_chaö
 = 1;

579 
out
.
buf
 = 
b
;

580 
out
.
√xt
 = 
NULL
;

582  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

583 
	}
}

586 
ngx_libc_cde˛


587 
	$ngx_hâp_autoödex_cmp_íåõs
(c⁄° *
⁄e
, c⁄° *
two
)

589 
ngx_hâp_autoödex_íåy_t
 *
fú°
 = (ngx_hâp_autoödex_íåy_à*Ë
⁄e
;

590 
ngx_hâp_autoödex_íåy_t
 *
£c⁄d
 = (ngx_hâp_autoödex_íåy_à*Ë
two
;

592 i‡(
fú°
->
dú
 && !
£c⁄d
->dir) {

597 i‡(!
fú°
->
dú
 && 
£c⁄d
->dir) {

602  (Ë
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

603 
	}
}

608 
ngx_buf_t
 *

609 
	$ngx_hâp_autoödex_Æloc
(
ngx_hâp_autoödex_˘x_t
 *
˘x
, 
size_t
 
size
)

611 
ngx_chaö_t
 *
˛
;

613 i‡(
˘x
->
buf
) {

615 i‡((
size_t
Ë(
˘x
->
buf
->
íd
 - ctx->buf->
œ°
Ë>
size
) {

616  
˘x
->
buf
;

619 
˘x
->
size
 +˘x->
buf
->
œ°
 - ctx->buf->
pos
;

622 
˘x
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, ctx->
Æloc_size
);

623 i‡(
˘x
->
buf
 =
NULL
) {

624  
NULL
;

627 
˛
 = 
	`ngx_Æloc_chaö_lök
(
˘x
->
poﬁ
);

628 i‡(
˛
 =
NULL
) {

629  
NULL
;

632 
˛
->
buf
 = 
˘x
->buf;

633 
˛
->
√xt
 = 
NULL
;

635 *
˘x
->
œ°_out
 = 
˛
;

636 
˘x
->
œ°_out
 = &
˛
->
√xt
;

638  
˘x
->
buf
;

639 
	}
}

644 
ngx_öt_t


645 
	$ngx_hâp_autoödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
)

647 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

648 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

649 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

652  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

653 
	}
}

657 
	$ngx_hâp_autoödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

659 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
;

661 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_autoödex_loc_c⁄f_t
));

662 i‡(
c⁄f
 =
NULL
) {

663  
NULL
;

666 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

667 
c⁄f
->
loˇ…ime
 = 
NGX_CONF_UNSET
;

668 
c⁄f
->
exa˘_size
 = 
NGX_CONF_UNSET
;

670  
c⁄f
;

671 
	}
}

675 
	$ngx_hâp_autoödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

677 
ngx_hâp_autoödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

678 
ngx_hâp_autoödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

680 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

681 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
loˇ…ime
, 
¥ev
->localtime, 0);

682 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
exa˘_size
, 
¥ev
->exact_size, 1);

684  
NGX_CONF_OK
;

685 
	}
}

688 
ngx_öt_t


689 
	$ngx_hâp_autoödex_öô
(
ngx_c⁄f_t
 *
cf
)

691 
ngx_hâp_h™dÀr_±
 *
h
;

692 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

694 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

696 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

697 i‡(
h
 =
NULL
) {

698  
NGX_ERROR
;

701 *
h
 = 
ngx_hâp_autoödex_h™dÀr
;

703  
NGX_OK
;

704 
	}
}

	@src/http/modules/ngx_http_browser_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_MODERN_BROWSER
 0

	)

21 
	#NGX_HTTP_ANCIENT_BROWSER
 1

	)

25 
u_ch¨
 
	mbrow£r
[12];

26 
size_t
 
	mskù
;

27 
size_t
 
	madd
;

28 
u_ch¨
 
	m«me
[12];

29 } 
	tngx_hâp_modîn_brow£r_mask_t
;

33 
ngx_uöt_t
 
	mvîsi⁄
;

34 
size_t
 
	mskù
;

35 
size_t
 
	madd
;

36 
u_ch¨
 
	m«me
[12];

37 } 
	tngx_hâp_modîn_brow£r_t
;

41 
ngx_°r_t
 
	m«me
;

42 
ngx_hâp_gë_v¨übÀ_±
 
	mh™dÀr
;

43 
uöçå_t
 
	md©a
;

44 } 
	tngx_hâp_brow£r_v¨übÀ_t
;

48 
ngx_¨øy_t
 *
	mmodîn_brow£rs
;

49 
ngx_¨øy_t
 *
	m™cõ¡_brow£rs
;

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mmodîn_brow£r_vÆue
;

51 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m™cõ¡_brow£r_vÆue
;

53 
	mmodîn_u∆i°ed_brow£rs
:1;

54 
	m√tsˇ≥4
:1;

55 } 
	tngx_hâp_brow£r_c⁄f_t
;

58 
ngx_öt_t
 
ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

60 
ngx_öt_t
 
ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_uöt_t
 
ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_brow£r_c⁄f_t
 *
cf
);

66 
ngx_öt_t
 
ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
);

67 *
ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

68 *
ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

69 *
chûd
);

70 
ngx_libc_cde˛
 
ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
,

71 c⁄° *
two
);

72 *
ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 *
ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

78 *
ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

79 *
c⁄f
);

82 
ngx_comm™d_t
 
	gngx_hâp_brow£r_comm™ds
[] = {

84 { 
ngx_°rög
("modern_browser"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

86 
ngx_hâp_modîn_brow£r
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
NULL
 },

91 { 
ngx_°rög
("ancient_browser"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

93 
ngx_hâp_™cõ¡_brow£r
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

96 
NULL
 },

98 { 
ngx_°rög
("modern_browser_value"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_hâp_modîn_brow£r_vÆue
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
NULL
 },

105 { 
ngx_°rög
("ancient_browser_value"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_hâp_™cõ¡_brow£r_vÆue
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ_˘x
 = {

117 
ngx_hâp_brow£r_add_v¨übÀ
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_brow£r_¸óã_c⁄f
,

127 
ngx_hâp_brow£r_mîge_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_brow£r_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_brow£r_moduÀ_˘x
,

134 
ngx_hâp_brow£r_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_hâp_modîn_brow£r_mask_t
 
	gngx_hâp_modîn_brow£r_masks
[] = {

221 
ngx_hâp_brow£r_v¨übÀ_t
 
	gngx_hâp_brow£rs
[] = {

222 { 
ngx_°rög
("msõ"), 
ngx_hâp_msõ_v¨übÀ
, 0 },

223 { 
ngx_°rög
("modîn_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

224 
NGX_HTTP_MODERN_BROWSER
 },

225 { 
ngx_°rög
("™cõ¡_brow£r"), 
ngx_hâp_brow£r_v¨übÀ
,

226 
NGX_HTTP_ANCIENT_BROWSER
 },

227 { 
ngx_nuŒ_°rög
, 
NULL
, 0 }

231 
ngx_öt_t


232 
	$ngx_hâp_brow£r_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

233 
uöçå_t
 
d©a
)

235 
ngx_uöt_t
 
rc
;

236 
ngx_hâp_brow£r_c⁄f_t
 *
cf
;

238 
cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_brow£r_moduÀ
);

240 
rc
 = 
	`ngx_hâp_brow£r
(
r
, 
cf
);

242 i‡(
d©a
 =
NGX_HTTP_MODERN_BROWSER
 && 
rc
 == NGX_HTTP_MODERN_BROWSER) {

243 *
v
 = *
cf
->
modîn_brow£r_vÆue
;

244  
NGX_OK
;

247 i‡(
d©a
 =
NGX_HTTP_ANCIENT_BROWSER
 && 
rc
 == NGX_HTTP_ANCIENT_BROWSER) {

248 *
v
 = *
cf
->
™cõ¡_brow£r_vÆue
;

249  
NGX_OK
;

252 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

253  
NGX_OK
;

254 
	}
}

257 
ngx_uöt_t


258 
	$ngx_hâp_brow£r
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_brow£r_c⁄f_t
 *
cf
)

260 
size_t
 
Àn
;

261 
u_ch¨
 *
«me
, *
ua
, *
œ°
, 
c
;

262 
ngx_°r_t
 *
™cõ¡
;

263 
ngx_uöt_t
 
i
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

264 
ngx_hâp_modîn_brow£r_t
 *
modîn
;

266 i‡(
r
->
hódîs_ö
.
u£r_agít
 =
NULL
) {

267 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

268  
NGX_HTTP_MODERN_BROWSER
;

271  
NGX_HTTP_ANCIENT_BROWSER
;

274 
ua
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.
d©a
;

275 
Àn
 = 
r
->
hódîs_ö
.
u£r_agít
->
vÆue
.len;

276 
œ°
 = 
ua
 + 
Àn
;

278 i‡(
cf
->
modîn_brow£rs
) {

279 
modîn
 = 
cf
->
modîn_brow£rs
->
ñts
;

281 
i
 = 0; i < 
cf
->
modîn_brow£rs
->
√…s
; i++) {

282 
«me
 = 
ua
 + 
modîn
[
i
].
skù
;

284 i‡(
«me
 >
œ°
) {

288 
«me
 = (
u_ch¨
 *Ë
	`ngx_°r°r
“ame, 
modîn
[
i
].name);

290 i‡(
«me
 =
NULL
) {

294 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

295 "brow£r: \"%s\"", 
«me
);

297 
«me
 +
modîn
[
i
].
add
;

299 i‡(
«me
 >
œ°
) {

303 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

304 "vîsi⁄: \"%ui\" \"%s\"", 
modîn
[
i
].
vîsi⁄
, 
«me
);

306 
vîsi⁄
 = 0;

307 
vî
 = 0;

308 
sˇÀ
 = 1000000;

310 
«me
 < 
œ°
) {

312 
c
 = *
«me
++;

314 i‡(
c
 >= '0' && c <= '9') {

315 
vî
 = vî * 10 + (
c
 - '0');

319 i‡(
c
 == '.') {

320 
vîsi⁄
 +
vî
 * 
sˇÀ
;

322 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

324 
modîn
[
i
].
vîsi⁄
, version);

326 i‡(
vîsi⁄
 > 
modîn
[
i
].version) {

327  
NGX_HTTP_MODERN_BROWSER
;

330 
vî
 = 0;

331 
sˇÀ
 /= 100;

338 
vîsi⁄
 +
vî
 * 
sˇÀ
;

340 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 
modîn
[
i
].
vîsi⁄
, version);

344 i‡(
vîsi⁄
 >
modîn
[
i
].version) {

345  
NGX_HTTP_MODERN_BROWSER
;

348  
NGX_HTTP_ANCIENT_BROWSER
;

351 i‡(!
cf
->
modîn_u∆i°ed_brow£rs
) {

352  
NGX_HTTP_ANCIENT_BROWSER
;

356 i‡(
cf
->
√tsˇ≥4
) {

357 i‡(
Àn
 > ("Mozilla/4.72 ") - 1

358 && 
	`ngx_°∫cmp
(
ua
, "Mozilla/", ("Mozilla/") - 1) == 0

359 && 
ua
[8] > '0' && ua[8] < '5')

361  
NGX_HTTP_ANCIENT_BROWSER
;

365 i‡(
cf
->
™cõ¡_brow£rs
) {

366 
™cõ¡
 = 
cf
->
™cõ¡_brow£rs
->
ñts
;

368 
i
 = 0; i < 
cf
->
™cõ¡_brow£rs
->
√…s
; i++) {

369 i‡(
Àn
 >
™cõ¡
[
i
].len

370 && 
	`ngx_°r°r
(
ua
, 
™cõ¡
[
i
].
d©a
Ë!
NULL
)

372  
NGX_HTTP_ANCIENT_BROWSER
;

377 i‡(
cf
->
modîn_u∆i°ed_brow£rs
) {

378  
NGX_HTTP_MODERN_BROWSER
;

381  
NGX_HTTP_ANCIENT_BROWSER
;

382 
	}
}

385 
ngx_öt_t


386 
	$ngx_hâp_msõ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

387 
uöçå_t
 
d©a
)

389 i‡(
r
->
hódîs_ö
.
msõ
) {

390 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

391  
NGX_OK
;

394 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

395  
NGX_OK
;

396 
	}
}

399 
ngx_öt_t


400 
	$ngx_hâp_brow£r_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
)

402 
ngx_hâp_brow£r_v¨übÀ_t
 *
v¨
;

403 
ngx_hâp_v¨übÀ_t
 *
v
;

405 
v¨
 = 
ngx_hâp_brow£rs
; v¨->
«me
.
Àn
; var++) {

407 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v¨
->
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

408 i‡(
v
 =
NULL
) {

409  
NGX_ERROR
;

412 
v
->
gë_h™dÀr
 = 
v¨
->
h™dÀr
;

413 
v
->
d©a
 = 
v¨
->data;

416  
NGX_OK
;

417 
	}
}

421 
	$ngx_hâp_brow£r_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

423 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
;

425 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_brow£r_c⁄f_t
));

426 i‡(
c⁄f
 =
NULL
) {

427  
NULL
;

442  
c⁄f
;

443 
	}
}

447 
	$ngx_hâp_brow£r_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

449 
ngx_hâp_brow£r_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

450 
ngx_hâp_brow£r_c⁄f_t
 *
c⁄f
 = 
chûd
;

452 
ngx_uöt_t
 
i
, 
n
;

453 
ngx_hâp_modîn_brow£r_t
 *
brow£rs
, *
›îa
;

461 i‡(
c⁄f
->
modîn_brow£rs
 =
NULL
 && c⁄f->
modîn_u∆i°ed_brow£rs
 == 0) {

462 
c⁄f
->
modîn_brow£rs
 = 
¥ev
->modern_browsers;

463 
c⁄f
->
modîn_u∆i°ed_brow£rs
 = 
¥ev
->modern_unlisted_browsers;

465 } i‡(
c⁄f
->
modîn_brow£rs
 !
NULL
) {

466 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

468 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

469 i‡(
brow£rs
[
i
].
skù
 == 0) {

470 
found
;

479 
›îa
 = 
	`ngx_¨øy_push
(
c⁄f
->
modîn_brow£rs
);

480 i‡(
›îa
 =
NULL
) {

481  
NGX_CONF_ERROR
;

484 
›îa
->
skù
 = 0;

485 
›îa
->
vîsi⁄
 = 4001000000U;

487 
brow£rs
 = 
c⁄f
->
modîn_brow£rs
->
ñts
;

489 
found
:

491 
	`ngx_qs‹t
(
brow£rs
, (
size_t
Ë
c⁄f
->
modîn_brow£rs
->
√…s
,

492 (
ngx_hâp_modîn_brow£r_t
),

493 
ngx_hâp_modîn_brow£r_s‹t
);

495 
i
 = 0; i < 
c⁄f
->
modîn_brow£rs
->
√…s
; i++) {

496 
n
 = 
brow£rs
[
i
].
skù
;

498 
brow£rs
[
i
].
skù
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].skip;

499 
brow£rs
[
i
].
add
 = 
ngx_hâp_modîn_brow£r_masks
[
n
].add;

500 (Ë
	`ngx_˝y°∫
(
brow£rs
[
i
].
«me
,

501 
ngx_hâp_modîn_brow£r_masks
[
n
].
«me
, 12);

505 i‡(
c⁄f
->
™cõ¡_brow£rs
 =
NULL
 && c⁄f->
√tsˇ≥4
 == 0) {

506 
c⁄f
->
™cõ¡_brow£rs
 = 
¥ev
->ancient_browsers;

507 
c⁄f
->
√tsˇ≥4
 = 
¥ev
->netscape4;

510 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

511 
c⁄f
->
modîn_brow£r_vÆue
 = 
¥ev
->modern_browser_value;

514 i‡(
c⁄f
->
modîn_brow£r_vÆue
 =
NULL
) {

515 
c⁄f
->
modîn_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

518 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

519 
c⁄f
->
™cõ¡_brow£r_vÆue
 = 
¥ev
->ancient_browser_value;

522 i‡(
c⁄f
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

523 
c⁄f
->
™cõ¡_brow£r_vÆue
 = &
ngx_hâp_v¨übÀ_åue_vÆue
;

526  
NGX_CONF_OK
;

527 
	}
}

530 
ngx_libc_cde˛


531 
	$ngx_hâp_modîn_brow£r_s‹t
(c⁄° *
⁄e
, c⁄° *
two
)

533 
ngx_hâp_modîn_brow£r_t
 *
fú°
 = (ngx_hâp_modîn_brow£r_à*Ë
⁄e
;

534 
ngx_hâp_modîn_brow£r_t
 *
£c⁄d
 = (ngx_hâp_modîn_brow£r_à*Ë
two
;

536  (
fú°
->
skù
 - 
£c⁄d
->skip);

537 
	}
}

541 
	$ngx_hâp_modîn_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

543 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

545 
u_ch¨
 
c
;

546 
ngx_°r_t
 *
vÆue
;

547 
ngx_uöt_t
 
i
, 
n
, 
vîsi⁄
, 
vî
, 
sˇÀ
;

548 
ngx_hâp_modîn_brow£r_t
 *
brow£r
;

549 
ngx_hâp_modîn_brow£r_mask_t
 *
mask
;

551 
vÆue
 = 
cf
->
¨gs
->
ñts
;

553 i‡(
cf
->
¨gs
->
√…s
 == 2) {

554 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unlisted") == 0) {

555 
bcf
->
modîn_u∆i°ed_brow£rs
 = 1;

556  
NGX_CONF_OK
;

559  
NGX_CONF_ERROR
;

562 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

563 
bcf
->
modîn_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 5,

564 (
ngx_hâp_modîn_brow£r_t
));

565 i‡(
bcf
->
modîn_brow£rs
 =
NULL
) {

566  
NGX_CONF_ERROR
;

570 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
modîn_brow£rs
);

571 i‡(
brow£r
 =
NULL
) {

572  
NGX_CONF_ERROR
;

575 
mask
 = 
ngx_hâp_modîn_brow£r_masks
;

577 
n
 = 0; 
mask
[n].
brow£r
[0] != '\0';Ç++) {

578 i‡(
	`ngx_°rˇ£cmp
(
mask
[
n
].
brow£r
, 
vÆue
[1].
d©a
) == 0) {

579 
found
;

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 "unknow¿brow£∏«mê\"%V\"", &
vÆue
[1]);

586  
NGX_CONF_ERROR
;

588 
found
:

596 
brow£r
->
skù
 = 
n
;

598 
vîsi⁄
 = 0;

599 
vî
 = 0;

600 
sˇÀ
 = 1000000;

602 
i
 = 0; i < 
vÆue
[2].
Àn
; i++) {

604 
c
 = 
vÆue
[2].
d©a
[
i
];

606 i‡(
c
 >= '0' && c <= '9') {

607 
vî
 = vî * 10 + (
c
 - '0');

611 i‡(
c
 == '.') {

612 
vîsi⁄
 +
vî
 * 
sˇÀ
;

613 
vî
 = 0;

614 
sˇÀ
 /= 100;

618 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

619 "övÆid brow£∏vîsi⁄ \"%V\"", &
vÆue
[2]);

621  
NGX_CONF_ERROR
;

624 
vîsi⁄
 +
vî
 * 
sˇÀ
;

626 
brow£r
->
vîsi⁄
 = version;

628  
NGX_CONF_OK
;

629 
	}
}

633 
	$ngx_hâp_™cõ¡_brow£r
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

635 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

637 
ngx_°r_t
 *
vÆue
, *
brow£r
;

638 
ngx_uöt_t
 
i
;

640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

642 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

643 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "netscape4") == 0) {

644 
bcf
->
√tsˇ≥4
 = 1;

648 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

649 
bcf
->
™cõ¡_brow£rs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

650 (
ngx_°r_t
));

651 i‡(
bcf
->
™cõ¡_brow£rs
 =
NULL
) {

652  
NGX_CONF_ERROR
;

656 
brow£r
 = 
	`ngx_¨øy_push
(
bcf
->
™cõ¡_brow£rs
);

657 i‡(
brow£r
 =
NULL
) {

658  
NGX_CONF_ERROR
;

661 *
brow£r
 = 
vÆue
[
i
];

664  
NGX_CONF_OK
;

665 
	}
}

669 
	$ngx_hâp_modîn_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

671 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

673 
ngx_°r_t
 *
vÆue
;

675 
bcf
->
modîn_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

676 (
ngx_hâp_v¨übÀ_vÆue_t
));

677 i‡(
bcf
->
modîn_brow£r_vÆue
 =
NULL
) {

678  
NGX_CONF_ERROR
;

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
bcf
->
modîn_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

684 
bcf
->
modîn_brow£r_vÆue
->
vÆid
 = 1;

685 
bcf
->
modîn_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

686 
bcf
->
modîn_brow£r_vÆue
->
nŸ_found
 = 0;

687 
bcf
->
modîn_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

689  
NGX_CONF_OK
;

690 
	}
}

694 
	$ngx_hâp_™cõ¡_brow£r_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

696 
ngx_hâp_brow£r_c⁄f_t
 *
bcf
 = 
c⁄f
;

698 
ngx_°r_t
 *
vÆue
;

700 
bcf
->
™cõ¡_brow£r_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

701 (
ngx_hâp_v¨übÀ_vÆue_t
));

702 i‡(
bcf
->
™cõ¡_brow£r_vÆue
 =
NULL
) {

703  
NGX_CONF_ERROR
;

706 
vÆue
 = 
cf
->
¨gs
->
ñts
;

708 
bcf
->
™cõ¡_brow£r_vÆue
->
Àn
 = 
vÆue
[1].len;

709 
bcf
->
™cõ¡_brow£r_vÆue
->
vÆid
 = 1;

710 
bcf
->
™cõ¡_brow£r_vÆue
->
no_ˇchóbÀ
 = 0;

711 
bcf
->
™cõ¡_brow£r_vÆue
->
nŸ_found
 = 0;

712 
bcf
->
™cõ¡_brow£r_vÆue
->
d©a
 = 
vÆue
[1].data;

714  
NGX_CONF_OK
;

715 
	}
}

	@src/http/modules/ngx_http_charset_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_CHARSET_OFF
 -2

	)

14 
	#NGX_HTTP_NO_CHARSET
 -3

	)

15 
	#NGX_HTTP_CHARSET_VAR
 0x10000

	)

18 
	#NGX_UTF_LEN
 4

	)

20 
	#NGX_HTML_ENTITY_LEN
 (("&#1114111;"Ë- 1)

	)

24 
u_ch¨
 **
	mèbÀs
;

25 
ngx_°r_t
 
	m«me
;

27 
	mÀngth
:16;

28 
	mutf8
:1;

29 } 
	tngx_hâp_ch¨£t_t
;

33 
ngx_öt_t
 
	m§c
;

34 
ngx_öt_t
 
	md°
;

35 } 
	tngx_hâp_ch¨£t_ªcode_t
;

39 
ngx_öt_t
 
	m§c
;

40 
ngx_öt_t
 
	md°
;

41 
u_ch¨
 *
	m§c2d°
;

42 
u_ch¨
 *
	md°2§c
;

43 } 
	tngx_hâp_ch¨£t_èbÀs_t
;

47 
ngx_¨øy_t
 
	mch¨£ts
;

48 
ngx_¨øy_t
 
	mèbÀs
;

49 
ngx_¨øy_t
 
	mªcodes
;

50 } 
	tngx_hâp_ch¨£t_maö_c⁄f_t
;

54 
ngx_öt_t
 
	mch¨£t
;

55 
ngx_öt_t
 
	msour˚_ch¨£t
;

56 
ngx_Êag_t
 
	movîride_ch¨£t
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 } 
	tngx_hâp_ch¨£t_loc_c⁄f_t
;

64 
u_ch¨
 *
	mèbÀ
;

65 
ngx_öt_t
 
	mch¨£t
;

66 
ngx_°r_t
 
	mch¨£t_«me
;

68 
ngx_chaö_t
 *
	mbusy
;

69 
ngx_chaö_t
 *
	m‰ì_bufs
;

70 
ngx_chaö_t
 *
	m‰ì_buf„rs
;

72 
size_t
 
	mßved_Àn
;

73 
u_ch¨
 
	mßved
[
NGX_UTF_LEN
];

75 
	mÀngth
:16;

76 
	m‰om_utf8
:1;

77 
	mto_utf8
:1;

78 } 
	tngx_hâp_ch¨£t_˘x_t
;

82 
ngx_hâp_ch¨£t_èbÀs_t
 *
	mèbÀ
;

83 
ngx_hâp_ch¨£t_t
 *
	mch¨£t
;

84 
ngx_uöt_t
 
	mch¨a˘îs
;

85 } 
	tngx_hâp_ch¨£t_c⁄f_˘x_t
;

88 
ngx_öt_t
 
ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_°r_t
 *
«me
);

90 
ngx_öt_t
 
ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

91 
ngx_°r_t
 *
«me
);

92 
ngx_öt_t
 
ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_°r_t
 *
«me
);

94 
ngx_öt_t
 
ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

95 
ngx_ölöe
 
ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_°r_t
 *
ch¨£t
);

97 
ngx_öt_t
 
ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
, 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
);

99 
ngx_uöt_t
 
ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
);

100 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

101 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

102 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
,

103 
ngx_buf_t
 *
buf
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

105 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
,

106 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
);

107 
ngx_chaö_t
 *
ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
,

108 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
, 
size_t
 
size
);

110 *
ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

111 *
c⁄f
);

112 *
ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

113 *
c⁄f
);

115 *
ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

116 *
c⁄f
);

117 
ngx_öt_t
 
ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
);

119 *
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

120 *
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

121 *
ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

122 *
∑ª¡
, *
chûd
);

123 
ngx_öt_t
 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

126 
ngx_°r_t
 
	gngx_hâp_ch¨£t_deÁu…_ty≥s
[] = {

127 
ngx_°rög
("text/html"),

128 
ngx_°rög
("text/xml"),

129 
ngx_°rög
("text/plain"),

130 
ngx_°rög
("text/vnd.wap.wml"),

131 
ngx_°rög
("application/x-javascript"),

132 
ngx_°rög
("application/rss+xml"),

133 
ngx_nuŒ_°rög


137 
ngx_comm™d_t
 
	gngx_hâp_ch¨£t_fûãr_comm™ds
[] = {

139 { 
ngx_°rög
("charset"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


141 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

142 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
),

145 
NULL
 },

147 { 
ngx_°rög
("source_charset"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


149 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_£t_ch¨£t_¶Ÿ
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

152 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
sour˚_ch¨£t
),

153 
NULL
 },

155 { 
ngx_°rög
("override_charset"),

156 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


157 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

158 
ngx_c⁄f_£t_Êag_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ovîride_ch¨£t
),

161 
NULL
 },

163 { 
ngx_°rög
("charset_types"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

165 
ngx_hâp_ty≥s_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ty≥s_keys
),

168 &
ngx_hâp_ch¨£t_deÁu…_ty≥s
[0] },

170 { 
ngx_°rög
("charset_map"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

172 
ngx_hâp_ch¨£t_m≠_block
,

173 
NGX_HTTP_MAIN_CONF_OFFSET
,

175 
NULL
 },

177 
ngx_nuŒ_comm™d


181 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ_˘x
 = {

182 
NULL
,

183 
ngx_hâp_ch¨£t_po°c⁄figuøti⁄
,

185 
ngx_hâp_ch¨£t_¸óã_maö_c⁄f
,

186 
NULL
,

188 
NULL
,

189 
NULL
,

191 
ngx_hâp_ch¨£t_¸óã_loc_c⁄f
,

192 
ngx_hâp_ch¨£t_mîge_loc_c⁄f


196 
ngx_moduÀ_t
 
	gngx_hâp_ch¨£t_fûãr_moduÀ
 = {

197 
NGX_MODULE_V1
,

198 &
ngx_hâp_ch¨£t_fûãr_moduÀ_˘x
,

199 
ngx_hâp_ch¨£t_fûãr_comm™ds
,

200 
NGX_HTTP_MODULE
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NULL
,

206 
NULL
,

207 
NULL
,

208 
NGX_MODULE_V1_PADDING


212 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

213 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

216 
ngx_öt_t


217 
	$ngx_hâp_ch¨£t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

219 
ngx_öt_t
 
ch¨£t
, 
sour˚_ch¨£t
;

220 
ngx_°r_t
 
d°
, 
§c
;

221 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

222 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

224 i‡(
r
 =r->
maö
) {

225 
ch¨£t
 = 
	`ngx_hâp_de°ö©i⁄_ch¨£t
(
r
, &
d°
);

228 
ch¨£t
 = 
	`ngx_hâp_maö_ªque°_ch¨£t
(
r
, &
d°
);

231 i‡(
ch¨£t
 =
NGX_ERROR
) {

232  
NGX_ERROR
;

235 i‡(
ch¨£t
 =
NGX_DECLINED
) {

236  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

241 
sour˚_ch¨£t
 = 
	`ngx_hâp_sour˚_ch¨£t
(
r
, &
§c
);

243 i‡(
sour˚_ch¨£t
 =
NGX_ERROR
) {

244  
NGX_ERROR
;

252 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

253 "ch¨£t: \"%V\" > \"%V\"", &
§c
, &
d°
);

255 i‡(
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

256 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

258  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

261 i‡(
ch¨£t
 =
NGX_HTTP_NO_CHARSET


262 || 
sour˚_ch¨£t
 =
NGX_HTTP_NO_CHARSET
)

264 i‡(
sour˚_ch¨£t
 !
ch¨£t


265 || 
	`ngx_°∫ˇ£cmp
(
d°
.
d©a
, 
§c
.d©a, d°.
Àn
) != 0)

267 
no_ch¨£t_m≠
;

270 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

272  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

275 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

276 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

278 i‡(
sour˚_ch¨£t
 !
ch¨£t


279 && (
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
 =
NULL


280 || 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
] =
NULL
))

282 
no_ch¨£t_m≠
;

285 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥_Àn
;

287 
	`ngx_hâp_£t_ch¨£t
(
r
, &
d°
);

289 i‡(
sour˚_ch¨£t
 !
ch¨£t
) {

290  
	`ngx_hâp_ch¨£t_˘x
(
r
, 
ch¨£ts
, 
ch¨£t
, 
sour˚_ch¨£t
);

293  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

295 
no_ch¨£t_m≠
:

297 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

299 &
§c
, &
d°
);

301  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_de°ö©i⁄_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

308 
ngx_öt_t
 
ch¨£t
;

309 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

310 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

311 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
mlcf
;

312 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

314 i‡(!
r
->
ign‹e_c⁄ã¡_ícodög


315 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög


316 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

318  
NGX_DECLINED
;

321 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

322  
NGX_DECLINED
;

325 i‡(
r
->
hódîs_out
.
ovîride_ch¨£t


326 && 
r
->
hódîs_out
.
ovîride_ch¨£t
->
Àn
)

328 *
«me
 = *
r
->
hódîs_out
.
ovîride_ch¨£t
;

330 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

332 i‡(
ch¨£t
 !
NGX_HTTP_NO_CHARSET
) {

333  
ch¨£t
;

336 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

337 "unknow¿ch¨£à\"%V\"Åÿovîride", 
«me
);

339  
NGX_DECLINED
;

342 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

343 
ch¨£t
 = 
mlcf
->charset;

345 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

346  
NGX_DECLINED
;

349 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

350 i‡(
mlcf
->
ovîride_ch¨£t
 == 0) {

351  
NGX_DECLINED
;

355 i‡(
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
mlcf
->
ty≥s
Ë=
NULL
) {

356  
NGX_DECLINED
;

360 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

361 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

362 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

363 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

364  
ch¨£t
;

367 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

369 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

370  
NGX_ERROR
;

373 
«me
->
Àn
 = 
vv
->len;

374 
«me
->
d©a
 = 
vv
->data;

376  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

377 
	}
}

380 
ngx_öt_t


381 
	$ngx_hâp_maö_ªque°_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
§c
)

383 
ngx_öt_t
 
ch¨£t
;

384 
ngx_°r_t
 *
maö_ch¨£t
;

385 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

387 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

389 i‡(
˘x
) {

390 *
§c
 = 
˘x
->
ch¨£t_«me
;

391  
˘x
->
ch¨£t
;

394 
maö_ch¨£t
 = &
r
->
maö
->
hódîs_out
.
ch¨£t
;

396 i‡(
maö_ch¨£t
->
Àn
 == 0) {

397  
NGX_DECLINED
;

400 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

401 i‡(
˘x
 =
NULL
) {

402  
NGX_ERROR
;

405 
	`ngx_hâp_£t_˘x
(
r
->
maö
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

407 
ch¨£t
 = 
	`ngx_hâp_gë_ch¨£t
(
r
, 
maö_ch¨£t
);

409 
˘x
->
ch¨£t
 = charset;

410 
˘x
->
ch¨£t_«me
 = *
maö_ch¨£t
;

411 *
§c
 = *
maö_ch¨£t
;

413  
ch¨£t
;

414 
	}
}

417 
ngx_öt_t


418 
	$ngx_hâp_sour˚_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

420 
ngx_öt_t
 
ch¨£t
;

421 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
;

422 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

423 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

424 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

426 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

427 *
«me
 = 
r
->
hódîs_out
.
ch¨£t
;

428  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

431 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

433 
ch¨£t
 = 
lcf
->
sour˚_ch¨£t
;

435 i‡(
ch¨£t
 =
NGX_HTTP_CHARSET_OFF
) {

436 
«me
->
Àn
 = 0;

437  
ch¨£t
;

440 i‡(
ch¨£t
 < 
NGX_HTTP_CHARSET_VAR
) {

441 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

442 
ch¨£ts
 = 
mcf
->ch¨£ts.
ñts
;

443 *
«me
 = 
ch¨£ts
[
ch¨£t
].name;

444  
ch¨£t
;

447 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ch¨£t
 - 
NGX_HTTP_CHARSET_VAR
);

449 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

450  
NGX_ERROR
;

453 
«me
->
Àn
 = 
vv
->len;

454 
«me
->
d©a
 = 
vv
->data;

456  
	`ngx_hâp_gë_ch¨£t
(
r
, 
«me
);

457 
	}
}

460 
ngx_öt_t


461 
	$ngx_hâp_gë_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

463 
ngx_uöt_t
 
i
, 
n
;

464 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

465 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

467 
mcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

469 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

470 
n
 = 
mcf
->
ch¨£ts
.
√…s
;

472 
i
 = 0; i < 
n
; i++) {

473 i‡(
ch¨£t
[
i
].
«me
.
Àn
 !=Çame->len) {

477 i‡(
	`ngx_°∫ˇ£cmp
(
ch¨£t
[
i
].
«me
.
d©a
,Çame->d©a,Çame->
Àn
) == 0) {

478  
i
;

482  
NGX_HTTP_NO_CHARSET
;

483 
	}
}

486 
ngx_ölöe
 

487 
	$ngx_hâp_£t_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ch¨£t
)

489 i‡(
r
 !r->
maö
) {

493 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


494 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY
)

501 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

505 
r
->
hódîs_out
.
ch¨£t
 = *charset;

506 
	}
}

509 
ngx_öt_t


510 
	$ngx_hâp_ch¨£t_˘x
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ch¨£t_t
 *
ch¨£ts
,

511 
ngx_öt_t
 
ch¨£t
,Çgx_öt_à
sour˚_ch¨£t
)

513 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

515 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ch¨£t_˘x_t
));

516 i‡(
˘x
 =
NULL
) {

517  
NGX_ERROR
;

520 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

522 
˘x
->
èbÀ
 = 
ch¨£ts
[
sour˚_ch¨£t
].
èbÀs
[
ch¨£t
];

523 
˘x
->
ch¨£t
 = charset;

524 
˘x
->
ch¨£t_«me
 = 
ch¨£ts
[
ch¨£t
].
«me
;

525 
˘x
->
Àngth
 = 
ch¨£ts
[
ch¨£t
].length;

526 
˘x
->
‰om_utf8
 = 
ch¨£ts
[
sour˚_ch¨£t
].
utf8
;

527 
˘x
->
to_utf8
 = 
ch¨£ts
[
ch¨£t
].
utf8
;

529 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

531 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë&& 
r
 =r->
maö
) {

532 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

535 
r
->
fûãr_√ed_ãmp‹¨y
 = 1;

538  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

539 
	}
}

542 
ngx_öt_t


543 
	$ngx_hâp_ch¨£t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

545 
ngx_öt_t
 
rc
;

546 
ngx_buf_t
 *
b
;

547 
ngx_chaö_t
 *
˛
, *
out
, **
Œ
;

548 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
;

550 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

552 i‡(
˘x
 =
NULL
 || ctx->
èbÀ
 == NULL) {

553  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

556 i‡((
˘x
->
to_utf8
 || ctx->
‰om_utf8
Ë|| ctx->
busy
) {

558 
out
 = 
NULL
;

559 
Œ
 = &
out
;

561 
˛
 = 
ö
; cl; c»˛->
√xt
) {

562 
b
 = 
˛
->
buf
;

564 i‡(
	`ngx_buf_size
(
b
) == 0) {

566 *
Œ
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

567 i‡(*
Œ
 =
NULL
) {

568  
NGX_ERROR
;

571 (*
Œ
)->
buf
 = 
b
;

572 (*
Œ
)->
√xt
 = 
NULL
;

574 
Œ
 = &(*Œ)->
√xt
;

579 i‡(
˘x
->
to_utf8
) {

580 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_to_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

583 *
Œ
 = 
	`ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
r
->
poﬁ
, 
b
, 
˘x
);

586 i‡(*
Œ
 =
NULL
) {

587  
NGX_ERROR
;

590 *
Œ
) {

591 
Œ
 = &(*Œ)->
√xt
;

595 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

597 i‡(
out
) {

598 i‡(
˘x
->
busy
 =
NULL
) {

599 
˘x
->
busy
 = 
out
;

602 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

603 
˛
->
√xt
 = 
out
;

607 
˘x
->
busy
) {

609 
˛
 = 
˘x
->
busy
;

610 
b
 = 
˛
->
buf
;

612 i‡(
	`ngx_buf_size
(
b
) != 0) {

616 
˘x
->
busy
 = 
˛
->
√xt
;

618 i‡(
b
->
èg
 !(
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
) {

622 i‡(
b
->
shadow
) {

623 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

626 i‡(
b
->
pos
) {

627 
˛
->
√xt
 = 
˘x
->
‰ì_buf„rs
;

628 
˘x
->
‰ì_buf„rs
 = 
˛
;

632 
˛
->
√xt
 = 
˘x
->
‰ì_bufs
;

633 
˘x
->
‰ì_bufs
 = 
˛
;

636  
rc
;

639 
˛
 = 
ö
; cl; c»˛->
√xt
) {

640 (Ë
	`ngx_hâp_ch¨£t_ªcode
(
˛
->
buf
, 
˘x
->
èbÀ
);

643  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

644 
	}
}

647 
ngx_uöt_t


648 
	$ngx_hâp_ch¨£t_ªcode
(
ngx_buf_t
 *
b
, 
u_ch¨
 *
èbÀ
)

650 
u_ch¨
 *
p
, *
œ°
;

652 
œ°
 = 
b
->last;

654 
p
 = 
b
->
pos
;Ö < 
œ°
;Ö++) {

656 i‡(*
p
 !
èbÀ
[*p]) {

657 
ªcode
;

663 
ªcode
:

666 i‡(*
p
 !
èbÀ
[*p]) {

667 *
p
 = 
èbÀ
[*p];

670 
p
++;

672 } 
p
 < 
œ°
);

674 
b
->
ö_fûe
 = 0;

677 
	}
}

680 
ngx_chaö_t
 *

681 
	$ngx_hâp_ch¨£t_ªcode_‰om_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

682 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

684 
size_t
 
Àn
, 
size
;

685 
u_ch¨
 
c
, *
p
, *
§c
, *
d°
, *
ßved
, **
èbÀ
;

686 
uöt32_t
 
n
;

687 
ngx_buf_t
 *
b
;

688 
ngx_uöt_t
 
i
;

689 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

691 
§c
 = 
buf
->
pos
;

693 i‡(
˘x
->
ßved_Àn
 == 0) {

695  ; 
§c
 < 
buf
->
œ°
; src++) {

697 i‡(*
§c
 < 0x80) {

701 
Àn
 = 
§c
 - 
buf
->
pos
;

703 i‡(
Àn
 > 512) {

704 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

705 i‡(
out
 =
NULL
) {

706  
NULL
;

709 
b
 = 
out
->
buf
;

711 
b
->
ãmp‹¨y
 = 
buf
->temporary;

712 
b
->
mem‹y
 = 
buf
->memory;

713 
b
->
mm≠
 = 
buf
->mmap;

714 
b
->
Êush
 = 
buf
->flush;

716 
b
->
pos
 = 
buf
->pos;

717 
b
->
œ°
 = 
§c
;

719 
out
->
buf
 = 
b
;

720 
out
->
√xt
 = 
NULL
;

722 
size
 = 
buf
->
œ°
 - 
§c
;

724 
ßved
 = 
§c
;

725 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
size
);

727 i‡(
n
 == 0xfffffffe) {

730 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
size
);

731 
˘x
->
ßved_Àn
 = 
size
;

733 
b
->
shadow
 = 
buf
;

735  
out
;

739 
out
 = 
NULL
;

740 
size
 = 
Àn
 + 
buf
->
œ°
 - 
§c
;

741 
§c
 = 
buf
->
pos
;

744 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

745 
size
 +
NGX_HTML_ENTITY_LEN
;

748 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

749 i‡(
˛
 =
NULL
) {

750  
NULL
;

753 i‡(
out
) {

754 
out
->
√xt
 = 
˛
;

757 
out
 = 
˛
;

760 
b
 = 
˛
->
buf
;

761 
d°
 = 
b
->
pos
;

763 
ªcode
;

766 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

767 i‡(
out
 =
NULL
) {

768  
NULL
;

771 
out
->
buf
 = buf;

772 
out
->
√xt
 = 
NULL
;

774  
out
;

779 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

780 "hâ∞ch¨£àut‡ßved: %z", 
˘x
->
ßved_Àn
);

782 
p
 = 
§c
;

784 
i
 = 
˘x
->
ßved_Àn
; i < 
NGX_UTF_LEN
; i++) {

785 
˘x
->
ßved
[
i
] = *
p
++;

787 i‡(
p
 =
buf
->
œ°
) {

792 
ßved
 = 
˘x
->saved;

793 
n
 = 
	`ngx_utf8_decode
(&
ßved
, 
i
);

795 
c
 = '\0';

797 i‡(
n
 < 0x10000) {

798 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

799 
p
 = 
èbÀ
[
n
 >> 8];

801 i‡(
p
) {

802 
c
 = 
p
[
n
 & 0xff];

805 } i‡(
n
 == 0xfffffffe) {

809 i‡(
i
 < 
NGX_UTF_LEN
) {

810 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

811 i‡(
out
 =
NULL
) {

812  
NULL
;

815 
b
 = 
out
->
buf
;

817 
b
->
pos
 = 
buf
->pos;

818 
b
->
œ°
 = 
buf
->last;

819 
b
->
sync
 = 1;

820 
b
->
shadow
 = 
buf
;

822 
	`ngx_mem˝y
(&
˘x
->
ßved
[˘x->
ßved_Àn
], 
§c
, 
i
);

823 
˘x
->
ßved_Àn
 +
i
;

825  
out
;

829 
size
 = 
buf
->
œ°
 - buf->
pos
;

831 i‡(
size
 < 
NGX_HTML_ENTITY_LEN
) {

832 
size
 +
NGX_HTML_ENTITY_LEN
;

835 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

836 i‡(
˛
 =
NULL
) {

837  
NULL
;

840 
out
 = 
˛
;

842 
b
 = 
˛
->
buf
;

843 
d°
 = 
b
->
pos
;

845 i‡(
c
) {

846 *
d°
++ = 
c
;

848 } i‡(
n
 == 0xfffffffe) {

849 *
d°
++ = '?';

851 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

854 
ßved
 = &
˘x
->ßved[
NGX_UTF_LEN
];

856 } i‡(
n
 > 0x10ffff) {

857 *
d°
++ = '?';

859 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

863 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

866 
§c
 +(
ßved
 - 
˘x
->ßvedË- ctx->
ßved_Àn
;

867 
˘x
->
ßved_Àn
 = 0;

869 
ªcode
:

871 
Œ
 = &
˛
->
√xt
;

873 
èbÀ
 = (
u_ch¨
 **Ë
˘x
->table;

875 
§c
 < 
buf
->
œ°
) {

877 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
NGX_HTML_ENTITY_LEN
) {

878 
b
->
œ°
 = 
d°
;

880 
size
 = 
buf
->
œ°
 - 
§c
 + 
NGX_HTML_ENTITY_LEN
;

882 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

883 i‡(
˛
 =
NULL
) {

884  
NULL
;

887 *
Œ
 = 
˛
;

888 
Œ
 = &
˛
->
√xt
;

890 
b
 = 
˛
->
buf
;

891 
d°
 = 
b
->
pos
;

894 i‡(*
§c
 < 0x80) {

895 *
d°
++ = *
§c
++;

899 
Àn
 = 
buf
->
œ°
 - 
§c
;

901 
n
 = 
	`ngx_utf8_decode
(&
§c
, 
Àn
);

903 i‡(
n
 < 0x10000) {

905 
p
 = 
èbÀ
[
n
 >> 8];

907 i‡(
p
) {

908 
c
 = 
p
[
n
 & 0xff];

910 i‡(
c
) {

911 *
d°
++ = 
c
;

916 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

921 i‡(
n
 == 0xfffffffe) {

924 
	`ngx_mem˝y
(
˘x
->
ßved
, 
§c
, 
Àn
);

925 
˘x
->
ßved_Àn
 = 
Àn
;

927 i‡(
b
->
pos
 =
d°
) {

928 
b
->
sync
 = 1;

929 
b
->
ãmp‹¨y
 = 0;

935 i‡(
n
 > 0x10ffff) {

936 *
d°
++ = '?';

938 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

946 
d°
 = 
	`ngx_•rötf
(d°, "&#%uD;", 
n
);

949 
b
->
œ°
 = 
d°
;

951 
b
->
œ°_buf
 = 
buf
->last_buf;

952 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

953 
b
->
Êush
 = 
buf
->flush;

955 
b
->
shadow
 = 
buf
;

957  
out
;

958 
	}
}

961 
ngx_chaö_t
 *

962 
	$ngx_hâp_ch¨£t_ªcode_to_utf8
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_buf_t
 *
buf
,

963 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

965 
size_t
 
Àn
, 
size
;

966 
u_ch¨
 *
p
, *
§c
, *
d°
, *
èbÀ
;

967 
ngx_buf_t
 *
b
;

968 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

970 
èbÀ
 = 
˘x
->table;

972 
§c
 = 
buf
->
pos
; sr¯< buf->
œ°
; src++) {

973 i‡(
èbÀ
[*
§c
 * 
NGX_UTF_LEN
] == '\1') {

977 
ªcode
;

980 
out
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

981 i‡(
out
 =
NULL
) {

982  
NULL
;

985 
out
->
buf
 = buf;

986 
out
->
√xt
 = 
NULL
;

988  
out
;

990 
ªcode
:

997 
Àn
 = 
§c
 - 
buf
->
pos
;

999 i‡(
Àn
 > 512) {

1000 
out
 = 
	`ngx_hâp_ch¨£t_gë_buf
(
poﬁ
, 
˘x
);

1001 i‡(
out
 =
NULL
) {

1002  
NULL
;

1005 
b
 = 
out
->
buf
;

1007 
b
->
ãmp‹¨y
 = 
buf
->temporary;

1008 
b
->
mem‹y
 = 
buf
->memory;

1009 
b
->
mm≠
 = 
buf
->mmap;

1010 
b
->
Êush
 = 
buf
->flush;

1012 
b
->
pos
 = 
buf
->pos;

1013 
b
->
œ°
 = 
§c
;

1015 
out
->
buf
 = 
b
;

1016 
out
->
√xt
 = 
NULL
;

1018 
size
 = 
buf
->
œ°
 - 
§c
;

1019 
size
 = sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1022 
out
 = 
NULL
;

1024 
size
 = 
buf
->
œ°
 - 
§c
;

1025 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1027 
§c
 = 
buf
->
pos
;

1030 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1031 i‡(
˛
 =
NULL
) {

1032  
NULL
;

1035 i‡(
out
) {

1036 
out
->
√xt
 = 
˛
;

1039 
out
 = 
˛
;

1042 
Œ
 = &
˛
->
√xt
;

1044 
b
 = 
˛
->
buf
;

1045 
d°
 = 
b
->
pos
;

1047 
§c
 < 
buf
->
œ°
) {

1049 
p
 = &
èbÀ
[*
§c
++ * 
NGX_UTF_LEN
];

1050 
Àn
 = *
p
++;

1052 i‡((
size_t
Ë(
b
->
íd
 - 
d°
Ë< 
Àn
) {

1053 
b
->
œ°
 = 
d°
;

1055 
size
 = 
buf
->
œ°
 - 
§c
;

1056 
size
 = 
Àn
 + sizê/ 2 + sizê/ 2 * 
˘x
->
Àngth
;

1058 
˛
 = 
	`ngx_hâp_ch¨£t_gë_buf„r
(
poﬁ
, 
˘x
, 
size
);

1059 i‡(
˛
 =
NULL
) {

1060  
NULL
;

1063 *
Œ
 = 
˛
;

1064 
Œ
 = &
˛
->
√xt
;

1066 
b
 = 
˛
->
buf
;

1067 
d°
 = 
b
->
pos
;

1070 
Àn
) {

1071 *
d°
++ = *
p
++;

1072 
Àn
--;

1076 
b
->
œ°
 = 
d°
;

1078 
b
->
œ°_buf
 = 
buf
->last_buf;

1079 
b
->
œ°_ö_chaö
 = 
buf
->last_in_chain;

1080 
b
->
Êush
 = 
buf
->flush;

1082 
b
->
shadow
 = 
buf
;

1084  
out
;

1085 
	}
}

1088 
ngx_chaö_t
 *

1089 
	$ngx_hâp_ch¨£t_gë_buf
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
)

1091 
ngx_chaö_t
 *
˛
;

1093 
˛
 = 
˘x
->
‰ì_bufs
;

1095 i‡(
˛
) {

1096 
˘x
->
‰ì_bufs
 = 
˛
->
√xt
;

1098 
˛
->
buf
->
shadow
 = 
NULL
;

1099 
˛
->
√xt
 = 
NULL
;

1101  
˛
;

1104 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1105 i‡(
˛
 =
NULL
) {

1106  
NULL
;

1109 
˛
->
buf
 = 
	`ngx_ˇŒoc_buf
(
poﬁ
);

1110 i‡(
˛
->
buf
 =
NULL
) {

1111  
NULL
;

1114 
˛
->
√xt
 = 
NULL
;

1116 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1118  
˛
;

1119 
	}
}

1122 
ngx_chaö_t
 *

1123 
	$ngx_hâp_ch¨£t_gë_buf„r
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_hâp_ch¨£t_˘x_t
 *
˘x
,

1124 
size_t
 
size
)

1126 
ngx_buf_t
 *
b
;

1127 
ngx_chaö_t
 *
˛
, **
Œ
;

1129 
Œ
 = &
˘x
->
‰ì_buf„rs
, 
˛
 = ctx->free_buffers;

1130 
˛
;

1131 
Œ
 = &
˛
->
√xt
, cl = cl->next)

1133 
b
 = 
˛
->
buf
;

1135 i‡((
size_t
Ë(
b
->
íd
 - b->
°¨t
Ë>
size
) {

1136 *
Œ
 = 
˛
->
√xt
;

1137 
˛
->
√xt
 = 
NULL
;

1139 
b
->
pos
 = b->
°¨t
;

1140 
b
->
ãmp‹¨y
 = 1;

1141 
b
->
shadow
 = 
NULL
;

1143  
˛
;

1147 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1148 i‡(
˛
 =
NULL
) {

1149  
NULL
;

1152 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
size
);

1153 i‡(
˛
->
buf
 =
NULL
) {

1154  
NULL
;

1157 
˛
->
√xt
 = 
NULL
;

1159 
˛
->
buf
->
ãmp‹¨y
 = 1;

1160 
˛
->
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ch¨£t_fûãr_moduÀ
;

1162  
˛
;

1163 
	}
}

1167 
	$ngx_hâp_ch¨£t_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1169 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
 = 
c⁄f
;

1171 *
rv
;

1172 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1173 
ngx_öt_t
 
§c
, 
d°
;

1174 
ngx_uöt_t
 
i
, 
n
;

1175 
ngx_°r_t
 *
vÆue
;

1176 
ngx_c⁄f_t
 
pvcf
;

1177 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1178 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1179 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 
˘x
;

1181 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1183 
§c
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1184 i‡(
§c
 =
NGX_ERROR
) {

1185  
NGX_CONF_ERROR
;

1188 
d°
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[2]);

1189 i‡(
d°
 =
NGX_ERROR
) {

1190  
NGX_CONF_ERROR
;

1193 i‡(
§c
 =
d°
) {

1194 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1196 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1197  
NGX_CONF_ERROR
;

1200 
èbÀ
 = 
mcf
->
èbÀs
.
ñts
;

1201 
i
 = 0; i < 
mcf
->
èbÀs
.
√…s
; i++) {

1202 i‡((
§c
 =
èbÀ
->§¯&& 
d°
 ==Åable->dst)

1203 || (
§c
 =
èbÀ
->
d°
 && dst ==Åable->src))

1205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1207 "\"%V\"ánd \"%V\"", &
vÆue
[1], &value[2]);

1208  
NGX_CONF_ERROR
;

1212 
èbÀ
 = 
	`ngx_¨øy_push
(&
mcf
->
èbÀs
);

1213 i‡(
èbÀ
 =
NULL
) {

1214  
NGX_CONF_ERROR
;

1217 
èbÀ
->
§c
 = src;

1218 
èbÀ
->
d°
 = dst;

1220 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[2].
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1221 
èbÀ
->
§c2d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * 
NGX_UTF_LEN
);

1222 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1223  
NGX_CONF_ERROR
;

1226 
èbÀ
->
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256 * (*));

1227 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1228  
NGX_CONF_ERROR
;

1231 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1232 i‡(
d°2§c
 =
NULL
) {

1233  
NGX_CONF_ERROR
;

1236 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1237 
µ
[0] = 
d°2§c
;

1239 
i
 = 0; i < 128; i++) {

1240 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1241 
p
[0] = '\1';

1242 
p
[1] = (
u_ch¨
Ë
i
;

1243 
d°2§c
[
i
] = (
u_ch¨
) i;

1246  ; 
i
 < 256; i++) {

1247 
p
 = &
èbÀ
->
§c2d°
[
i
 * 
NGX_UTF_LEN
];

1248 
p
[0] = '\1';

1249 
p
[1] = '?';

1253 
èbÀ
->
§c2d°
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1254 i‡(
èbÀ
->
§c2d°
 =
NULL
) {

1255  
NGX_CONF_ERROR
;

1258 
èbÀ
->
d°2§c
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 256);

1259 i‡(
èbÀ
->
d°2§c
 =
NULL
) {

1260  
NGX_CONF_ERROR
;

1263 
i
 = 0; i < 128; i++) {

1264 
èbÀ
->
§c2d°
[
i
] = (
u_ch¨
) i;

1265 
èbÀ
->
d°2§c
[
i
] = (
u_ch¨
) i;

1268  ; 
i
 < 256; i++) {

1269 
èbÀ
->
§c2d°
[
i
] = '?';

1270 
èbÀ
->
d°2§c
[
i
] = '?';

1274 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1276 
˘x
.
èbÀ
 =Åable;

1277 
˘x
.
ch¨£t
 = &ch¨£t[
d°
];

1278 
˘x
.
ch¨a˘îs
 = 0;

1280 
pvcf
 = *
cf
;

1281 
cf
->
˘x
 = &ctx;

1282 
cf
->
h™dÀr
 = 
ngx_hâp_ch¨£t_m≠
;

1283 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

1285 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

1287 *
cf
 = 
pvcf
;

1289 i‡(
˘x
.
ch¨a˘îs
) {

1290 
n
 = 
˘x
.
ch¨£t
->
Àngth
;

1291 
˘x
.
ch¨£t
->
Àngth
 /˘x.
ch¨a˘îs
;

1293 i‡(((
n
 * 10Ë/ 
˘x
.
ch¨a˘îs
) % 10 > 4) {

1294 
˘x
.
ch¨£t
->
Àngth
++;

1298  
rv
;

1299 
	}
}

1303 
	$ngx_hâp_ch¨£t_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

1305 
u_ch¨
 *
p
, *
d°2§c
, **
µ
;

1306 
uöt32_t
 
n
;

1307 
ngx_öt_t
 
§c
, 
d°
;

1308 
ngx_°r_t
 *
vÆue
;

1309 
ngx_uöt_t
 
i
;

1310 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀ
;

1311 
ngx_hâp_ch¨£t_c⁄f_˘x_t
 *
˘x
;

1313 i‡(
cf
->
¨gs
->
√…s
 != 2) {

1314 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarametersÇumber");

1315  
NGX_CONF_ERROR
;

1318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1320 
§c
 = 
	`ngx_hextoi
(
vÆue
[0].
d©a
, vÆue[0].
Àn
);

1321 i‡(
§c
 =
NGX_ERROR
 || src > 255) {

1322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1323 "övÆid vÆuê\"%V\"", &
vÆue
[0]);

1324  
NGX_CONF_ERROR
;

1327 
˘x
 = 
cf
->ctx;

1328 
èbÀ
 = 
˘x
->table;

1330 i‡(
˘x
->
ch¨£t
->
utf8
) {

1331 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
];

1333 *
p
++ = (
u_ch¨
Ë(
vÆue
[1].
Àn
 / 2);

1335 
i
 = 0; i < 
vÆue
[1].
Àn
; i += 2) {

1336 
d°
 = 
	`ngx_hextoi
(&
vÆue
[1].
d©a
[
i
], 2);

1337 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1338 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1339 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1340  
NGX_CONF_ERROR
;

1343 *
p
++ = (
u_ch¨
Ë
d°
;

1346 
i
 /= 2;

1348 
˘x
->
ch¨£t
->
Àngth
 +
i
;

1349 
˘x
->
ch¨a˘îs
++;

1351 
p
 = &
èbÀ
->
§c2d°
[
§c
 * 
NGX_UTF_LEN
] + 1;

1353 
n
 = 
	`ngx_utf8_decode
(&
p
, 
i
);

1355 i‡(
n
 > 0xffff) {

1356 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1357 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1358  
NGX_CONF_ERROR
;

1361 
µ
 = (
u_ch¨
 **Ë&
èbÀ
->
d°2§c
[0];

1363 
d°2§c
 = 
µ
[
n
 >> 8];

1365 i‡(
d°2§c
 =
NULL
) {

1366 
d°2§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, 256);

1367 i‡(
d°2§c
 =
NULL
) {

1368  
NGX_CONF_ERROR
;

1371 
µ
[
n
 >> 8] = 
d°2§c
;

1374 
d°2§c
[
n
 & 0xff] = (
u_ch¨
Ë
§c
;

1377 
d°
 = 
	`ngx_hextoi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

1378 i‡(
d°
 =
NGX_ERROR
 || dst > 255) {

1379 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1380 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1381  
NGX_CONF_ERROR
;

1384 
èbÀ
->
§c2d°
[
§c
] = (
u_ch¨
Ë
d°
;

1385 
èbÀ
->
d°2§c
[
d°
] = (
u_ch¨
Ë
§c
;

1388  
NGX_CONF_OK
;

1389 
	}
}

1393 
	$ngx_hâp_£t_ch¨£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1395 *
p
 = 
c⁄f
;

1397 
ngx_öt_t
 *
˝
;

1398 
ngx_°r_t
 *
vÆue
, 
v¨
;

1399 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1401 
˝
 = (
ngx_öt_t
 *Ë(
p
 + 
cmd
->
off£t
);

1403 i‡(*
˝
 !
NGX_CONF_UNSET
) {

1407 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1409 i‡(
cmd
->
off£t
 =
	`off£tof
(
ngx_hâp_ch¨£t_loc_c⁄f_t
, 
ch¨£t
)

1410 && 
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0)

1412 *
˝
 = 
NGX_HTTP_CHARSET_OFF
;

1413  
NGX_CONF_OK
;

1417 i‡(
vÆue
[1].
d©a
[0] == '$') {

1418 
v¨
.
Àn
 = 
vÆue
[1].len - 1;

1419 
v¨
.
d©a
 = 
vÆue
[1].data + 1;

1421 *
˝
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
v¨
);

1423 i‡(*
˝
 =
NGX_ERROR
) {

1424  
NGX_CONF_ERROR
;

1427 *
˝
 +
NGX_HTTP_CHARSET_VAR
;

1429  
NGX_CONF_OK
;

1432 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1433 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1435 *
˝
 = 
	`ngx_hâp_add_ch¨£t
(&
mcf
->
ch¨£ts
, &
vÆue
[1]);

1436 i‡(*
˝
 =
NGX_ERROR
) {

1437  
NGX_CONF_ERROR
;

1440  
NGX_CONF_OK
;

1441 
	}
}

1444 
ngx_öt_t


1445 
	$ngx_hâp_add_ch¨£t
(
ngx_¨øy_t
 *
ch¨£ts
, 
ngx_°r_t
 *
«me
)

1447 
ngx_uöt_t
 
i
;

1448 
ngx_hâp_ch¨£t_t
 *
c
;

1450 
c
 = 
ch¨£ts
->
ñts
;

1451 
i
 = 0; i < 
ch¨£ts
->
√…s
; i++) {

1452 i‡(
«me
->
Àn
 !
c
[
i
].name.len) {

1456 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, 
c
[
i
].name.data) == 0) {

1461 i‡(
i
 < 
ch¨£ts
->
√…s
) {

1462  
i
;

1465 
c
 = 
	`ngx_¨øy_push
(
ch¨£ts
);

1466 i‡(
c
 =
NULL
) {

1467  
NGX_ERROR
;

1470 
c
->
èbÀs
 = 
NULL
;

1471 
c
->
«me
 = *name;

1472 
c
->
Àngth
 = 0;

1474 i‡(
	`ngx_°rˇ£cmp
(
«me
->
d©a
, (
u_ch¨
 *) "utf-8") == 0) {

1475 
c
->
utf8
 = 1;

1478 
c
->
utf8
 = 0;

1481  
i
;

1482 
	}
}

1486 
	$ngx_hâp_ch¨£t_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1488 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1490 
mcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_maö_c⁄f_t
));

1491 i‡(
mcf
 =
NULL
) {

1492  
NULL
;

1495 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ch¨£ts
, 
cf
->
poﬁ
, 2, (
ngx_hâp_ch¨£t_t
))

1496 !
NGX_OK
)

1498  
NULL
;

1501 i‡(
	`ngx_¨øy_öô
(&
mcf
->
èbÀs
, 
cf
->
poﬁ
, 1,

1502 (
ngx_hâp_ch¨£t_èbÀs_t
))

1503 !
NGX_OK
)

1505  
NULL
;

1508 i‡(
	`ngx_¨øy_öô
(&
mcf
->
ªcodes
, 
cf
->
poﬁ
, 2,

1509 (
ngx_hâp_ch¨£t_ªcode_t
))

1510 !
NGX_OK
)

1512  
NULL
;

1515  
mcf
;

1516 
	}
}

1520 
	$ngx_hâp_ch¨£t_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1522 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
lcf
;

1524 
lcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ch¨£t_loc_c⁄f_t
));

1525 i‡(
lcf
 =
NULL
) {

1526  
NULL
;

1536 
lcf
->
ch¨£t
 = 
NGX_CONF_UNSET
;

1537 
lcf
->
sour˚_ch¨£t
 = 
NGX_CONF_UNSET
;

1538 
lcf
->
ovîride_ch¨£t
 = 
NGX_CONF_UNSET
;

1540  
lcf
;

1541 
	}
}

1545 
	$ngx_hâp_ch¨£t_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1547 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1548 
ngx_hâp_ch¨£t_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1550 
ngx_uöt_t
 
i
;

1551 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1552 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1554 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1555 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1556 
ngx_hâp_ch¨£t_deÁu…_ty≥s
)

1557 !
NGX_OK
)

1559  
NGX_CONF_ERROR
;

1562 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ovîride_ch¨£t
, 
¥ev
->override_charset, 0);

1563 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ch¨£t
, 
¥ev
->ch¨£t, 
NGX_HTTP_CHARSET_OFF
);

1564 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sour˚_ch¨£t
, 
¥ev
->source_charset,

1565 
NGX_HTTP_CHARSET_OFF
);

1567 i‡(
c⁄f
->
ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1568 || 
c⁄f
->
sour˚_ch¨£t
 =
NGX_HTTP_CHARSET_OFF


1569 || 
c⁄f
->
ch¨£t
 =c⁄f->
sour˚_ch¨£t
)

1571  
NGX_CONF_OK
;

1574 i‡(
c⁄f
->
sour˚_ch¨£t
 >
NGX_HTTP_CHARSET_VAR


1575 || 
c⁄f
->
ch¨£t
 >
NGX_HTTP_CHARSET_VAR
)

1577  
NGX_CONF_OK
;

1580 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1581 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1582 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1583 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1584 i‡(
c⁄f
->
sour˚_ch¨£t
 =
ªcode
[
i
].
§c


1585 && 
c⁄f
->
ch¨£t
 =
ªcode
[
i
].
d°
)

1587  
NGX_CONF_OK
;

1591 
ªcode
 = 
	`ngx_¨øy_push
(&
mcf
->
ªcodes
);

1592 i‡(
ªcode
 =
NULL
) {

1593  
NGX_CONF_ERROR
;

1596 
ªcode
->
§c
 = 
c⁄f
->
sour˚_ch¨£t
;

1597 
ªcode
->
d°
 = 
c⁄f
->
ch¨£t
;

1599  
NGX_CONF_OK
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_ch¨£t_po°c⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

1606 
u_ch¨
 **
§c
, **
d°
;

1607 
ngx_öt_t
 
c
;

1608 
ngx_uöt_t
 
i
, 
t
;

1609 
ngx_hâp_ch¨£t_t
 *
ch¨£t
;

1610 
ngx_hâp_ch¨£t_ªcode_t
 *
ªcode
;

1611 
ngx_hâp_ch¨£t_èbÀs_t
 *
èbÀs
;

1612 
ngx_hâp_ch¨£t_maö_c⁄f_t
 *
mcf
;

1614 
mcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
,

1615 
ngx_hâp_ch¨£t_fûãr_moduÀ
);

1617 
ªcode
 = 
mcf
->
ªcodes
.
ñts
;

1618 
èbÀs
 = 
mcf
->èbÀs.
ñts
;

1619 
ch¨£t
 = 
mcf
->
ch¨£ts
.
ñts
;

1621 
i
 = 0; i < 
mcf
->
ªcodes
.
√…s
; i++) {

1623 
c
 = 
ªcode
[
i
].
§c
;

1625 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1627 i‡(
c
 =
èbÀs
[
t
].
§c
 && 
ªcode
[
i
].
d°
 ==Åables[t].dst) {

1628 
√xt
;

1631 i‡(
c
 =
èbÀs
[
t
].
d°
 && 
ªcode
[
i
].d° =èbÀs[t].
§c
) {

1632 
√xt
;

1636 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1638 &
ch¨£t
[
c
].
«me
, &ch¨£t[
ªcode
[
i
].
d°
].name);

1639  
NGX_ERROR
;

1641 
√xt
:

1646 
t
 = 0;Å < 
mcf
->
èbÀs
.
√…s
;Å++) {

1648 
§c
 = 
ch¨£t
[
èbÀs
[
t
].src].tables;

1650 i‡(
§c
 =
NULL
) {

1651 
§c
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1652 i‡(
§c
 =
NULL
) {

1653  
NGX_ERROR
;

1656 
ch¨£t
[
èbÀs
[
t
].
§c
].tables = src;

1659 
d°
 = 
ch¨£t
[
èbÀs
[
t
].dst].tables;

1661 i‡(
d°
 =
NULL
) {

1662 
d°
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
u_ch¨
 *Ë* 
mcf
->
ch¨£ts
.
√…s
);

1663 i‡(
d°
 =
NULL
) {

1664  
NGX_ERROR
;

1667 
ch¨£t
[
èbÀs
[
t
].
d°
].tables = dst;

1670 
§c
[
èbÀs
[
t
].
d°
] =ÅabÀs[t].
§c2d°
;

1671 
d°
[
èbÀs
[
t
].
§c
] =ÅabÀs[t].
d°2§c
;

1674 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1675 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ch¨£t_hódî_fûãr
;

1677 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1678 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ch¨£t_body_fûãr
;

1680  
NGX_OK
;

1681 
	}
}

	@src/http/modules/ngx_http_chunked_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_chaö_t
 *
	m‰ì
;

15 
ngx_chaö_t
 *
	mbusy
;

16 } 
	tngx_hâp_chunked_fûãr_˘x_t
;

19 
ngx_öt_t
 
ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

22 
ngx_hâp_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ_˘x
 = {

23 
NULL
,

24 
ngx_hâp_chunked_fûãr_öô
,

26 
NULL
,

27 
NULL
,

29 
NULL
,

30 
NULL
,

32 
NULL
,

33 
NULL


37 
ngx_moduÀ_t
 
	gngx_hâp_chunked_fûãr_moduÀ
 = {

38 
NGX_MODULE_V1
,

39 &
ngx_hâp_chunked_fûãr_moduÀ_˘x
,

40 
NULL
,

41 
NGX_HTTP_MODULE
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NULL
,

48 
NULL
,

49 
NGX_MODULE_V1_PADDING


53 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

57 
ngx_öt_t


58 
	$ngx_hâp_chunked_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

61 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

63 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED


64 || 
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NO_CONTENT


65 || 
r
->
hódîs_out
.
°©us
 < 
NGX_HTTP_OK


66 || 
r
 !r->
maö


67 || (
r
->
mëhod
 & 
NGX_HTTP_HEAD
))

69  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

72 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1) {

73 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

74 
r
->
kì∑live
 = 0;

77 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

79 i‡(
˛cf
->
chunked_å™s„r_ícodög
) {

80 
r
->
chunked
 = 1;

82 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

83 (
ngx_hâp_chunked_fûãr_˘x_t
));

84 i‡(
˘x
 =
NULL
) {

85  
NGX_ERROR
;

88 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_chunked_fûãr_moduÀ
);

91 
r
->
kì∑live
 = 0;

96  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

97 
	}
}

100 
ngx_öt_t


101 
	$ngx_hâp_chunked_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

103 
u_ch¨
 *
chunk
;

104 
off_t
 
size
;

105 
ngx_öt_t
 
rc
;

106 
ngx_buf_t
 *
b
;

107 
ngx_chaö_t
 *
out
, *
˛
, *
é
, **
Œ
;

108 
ngx_hâp_chunked_fûãr_˘x_t
 *
˘x
;

110 i‡(
ö
 =
NULL
 || !
r
->
chunked
 ||Ñ->
hódî_⁄ly
) {

111  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

114 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_chunked_fûãr_moduÀ
);

116 
out
 = 
NULL
;

117 
Œ
 = &
out
;

119 
size
 = 0;

120 
˛
 = 
ö
;

123 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

124 "hâ∞chunk: %d", 
	`ngx_buf_size
(
˛
->
buf
));

126 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

128 i‡(
˛
->
buf
->
Êush


129 || 
˛
->
buf
->
sync


130 || 
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)

131 || 
˛
->
buf
->
ö_fûe
)

133 
é
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

134 i‡(
é
 =
NULL
) {

135  
NGX_ERROR
;

138 
é
->
buf
 = 
˛
->buf;

139 *
Œ
 = 
é
;

140 
Œ
 = &
é
->
√xt
;

143 i‡(
˛
->
√xt
 =
NULL
) {

147 
˛
 = cl->
√xt
;

150 i‡(
size
) {

151 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

152 i‡(
é
 =
NULL
) {

153  
NGX_ERROR
;

156 
b
 = 
é
->
buf
;

157 
chunk
 = 
b
->
°¨t
;

159 i‡(
chunk
 =
NULL
) {

162 
chunk
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ("0000000000000000" 
CRLF
) - 1);

163 i‡(
chunk
 =
NULL
) {

164  
NGX_ERROR
;

167 
b
->
°¨t
 = 
chunk
;

168 
b
->
íd
 = 
chunk
 + ("0000000000000000" 
CRLF
) - 1;

171 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

172 
b
->
mem‹y
 = 0;

173 
b
->
ãmp‹¨y
 = 1;

174 
b
->
pos
 = 
chunk
;

175 
b
->
œ°
 = 
	`ngx_•rötf
(
chunk
, "%xO" 
CRLF
, 
size
);

177 
é
->
√xt
 = 
out
;

178 
out
 = 
é
;

181 i‡(
˛
->
buf
->
œ°_buf
) {

182 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

183 i‡(
é
 =
NULL
) {

184  
NGX_ERROR
;

187 
b
 = 
é
->
buf
;

189 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

190 
b
->
ãmp‹¨y
 = 0;

191 
b
->
mem‹y
 = 1;

192 
b
->
œ°_buf
 = 1;

193 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
 "0" CRLF CRLF;

194 
b
->
œ°
 = b->
pos
 + 7;

196 
˛
->
buf
->
œ°_buf
 = 0;

198 *
Œ
 = 
é
;

200 i‡(
size
 == 0) {

201 
b
->
pos
 += 2;

204 } i‡(
size
 > 0) {

205 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
˘x
->
‰ì
);

206 i‡(
é
 =
NULL
) {

207  
NGX_ERROR
;

210 
b
 = 
é
->
buf
;

212 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
;

213 
b
->
ãmp‹¨y
 = 0;

214 
b
->
mem‹y
 = 1;

215 
b
->
pos
 = (
u_ch¨
 *Ë
CRLF
;

216 
b
->
œ°
 = b->
pos
 + 2;

218 *
Œ
 = 
é
;

221 *
Œ
 = 
NULL
;

224 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

226 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
out
,

227 (
ngx_buf_èg_t
Ë&
ngx_hâp_chunked_fûãr_moduÀ
);

229  
rc
;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_hâp_chunked_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

237 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_chunked_hódî_fûãr
;

239 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

240 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_chunked_body_fûãr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_dav_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_DAV_COPY_BLOCK
 65536

	)

15 
	#NGX_HTTP_DAV_OFF
 2

	)

18 
	#NGX_HTTP_DAV_NO_DEPTH
 -3

	)

19 
	#NGX_HTTP_DAV_INVALID_DEPTH
 -2

	)

20 
	#NGX_HTTP_DAV_INFINITY_DEPTH
 -1

	)

24 
ngx_uöt_t
 
	mmëhods
;

25 
ngx_uöt_t
 
	mac˚ss
;

26 
ngx_uöt_t
 
	mmö_dñëe_dïth
;

27 
ngx_Êag_t
 
	m¸óã_fuŒ_put_∑th
;

28 } 
	tngx_hâp_dav_loc_c⁄f_t
;

32 
ngx_°r_t
 
	m∑th
;

33 
size_t
 
	mÀn
;

34 } 
	tngx_hâp_dav_c›y_˘x_t
;

37 
ngx_öt_t
 
ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_öt_t
 
ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

42 
ngx_öt_t
 
ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
,

43 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
);

44 
ngx_öt_t
 
ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

45 
ngx_öt_t
 
ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

46 
ngx_öt_t
 
ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

48 
ngx_öt_t
 
ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
);

51 
ngx_öt_t
 
ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
);

53 
ngx_öt_t
 
ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
,

54 
ngx_°r_t
 *
∑th
);

55 
ngx_öt_t
 
ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
,

56 
ngx_°r_t
 *
∑th
);

58 
ngx_öt_t
 
ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
,Çgx_öt_à
dÊt
);

59 
ngx_öt_t
 
ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
,

60 
ngx_öt_t
 
nŸ_found
, *
Áûed
, 
u_ch¨
 *
∑th
);

61 
ngx_öt_t
 
ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
);

62 *
ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

63 *
ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

64 *
∑ª¡
, *
chûd
);

65 
ngx_öt_t
 
ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
);

68 
ngx_c⁄f_bômask_t
 
	gngx_hâp_dav_mëhods_mask
[] = {

69 { 
ngx_°rög
("off"), 
NGX_HTTP_DAV_OFF
 },

70 { 
ngx_°rög
("put"), 
NGX_HTTP_PUT
 },

71 { 
ngx_°rög
("dñëe"), 
NGX_HTTP_DELETE
 },

72 { 
ngx_°rög
("mkcﬁ"), 
NGX_HTTP_MKCOL
 },

73 { 
ngx_°rög
("c›y"), 
NGX_HTTP_COPY
 },

74 { 
ngx_°rög
("move"), 
NGX_HTTP_MOVE
 },

75 { 
ngx_nuŒ_°rög
, 0 }

79 
ngx_comm™d_t
 
	gngx_hâp_dav_comm™ds
[] = {

81 { 
ngx_°rög
("dav_methods"),

82 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

83 
ngx_c⁄f_£t_bômask_¶Ÿ
,

84 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mëhods
),

86 &
ngx_hâp_dav_mëhods_mask
 },

88 { 
ngx_°rög
("create_full_put_path"),

89 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

90 
ngx_c⁄f_£t_Êag_¶Ÿ
,

91 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
¸óã_fuŒ_put_∑th
),

93 
NULL
 },

95 { 
ngx_°rög
("min_delete_depth"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_num_¶Ÿ
,

98 
NGX_HTTP_LOC_CONF_OFFSET
,

99 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
mö_dñëe_dïth
),

100 
NULL
 },

102 { 
ngx_°rög
("dav_access"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

104 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

106 
off£tof
(
ngx_hâp_dav_loc_c⁄f_t
, 
ac˚ss
),

107 
NULL
 },

109 
ngx_nuŒ_comm™d


113 
ngx_hâp_moduÀ_t
 
	gngx_hâp_dav_moduÀ_˘x
 = {

114 
NULL
,

115 
ngx_hâp_dav_öô
,

117 
NULL
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
ngx_hâp_dav_¸óã_loc_c⁄f
,

124 
ngx_hâp_dav_mîge_loc_c⁄f


128 
ngx_moduÀ_t
 
	gngx_hâp_dav_moduÀ
 = {

129 
NGX_MODULE_V1
,

130 &
ngx_hâp_dav_moduÀ_˘x
,

131 
ngx_hâp_dav_comm™ds
,

132 
NGX_HTTP_MODULE
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NGX_MODULE_V1_PADDING


144 
ngx_öt_t


145 
	$ngx_hâp_dav_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

147 
ngx_öt_t
 
rc
;

148 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

150 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

152 i‡(!(
r
->
mëhod
 & 
dlcf
->
mëhods
)) {

153  
NGX_DECLINED
;

156 
r
->
mëhod
) {

158 
NGX_HTTP_PUT
:

160 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

161 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

163  
NGX_HTTP_CONFLICT
;

166 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

167 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

168 
r
->
ªque°_body_ö_˛ón_fûe
 = 1;

169 
r
->
ªque°_body_fûe_group_ac˚ss
 = 1;

170 
r
->
ªque°_body_fûe_log_Àvñ
 = 0;

172 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_dav_put_h™dÀr
);

174 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

175  
rc
;

178  
NGX_DONE
;

180 
NGX_HTTP_DELETE
:

182  
	`ngx_hâp_dav_dñëe_h™dÀr
(
r
);

184 
NGX_HTTP_MKCOL
:

186  
	`ngx_hâp_dav_mkcﬁ_h™dÀr
(
r
, 
dlcf
);

188 
NGX_HTTP_COPY
:

190  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

192 
NGX_HTTP_MOVE
:

194  
	`ngx_hâp_dav_c›y_move_h™dÀr
(
r
);

197  
NGX_DECLINED
;

198 
	}
}

202 
	$ngx_hâp_dav_put_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

204 
size_t
 
roŸ
;

205 
time_t
 
d©e
;

206 
ngx_°r_t
 *
ãmp
, 
∑th
;

207 
ngx_uöt_t
 
°©us
;

208 
ngx_fûe_öfo_t
 
fi
;

209 
ngx_ext_ª«me_fûe_t
 
ext
;

210 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

212 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

213 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

217 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

219 
∑th
.
Àn
--;

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "hâ∞puàfûíame: \"%s\"", 
∑th
.
d©a
);

224 
ãmp
 = &
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
;

226 i‡(
	`ngx_fûe_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

227 
°©us
 = 
NGX_HTTP_CREATED
;

230 
°©us
 = 
NGX_HTTP_NO_CONTENT
;

232 i‡(
	`ngx_is_dú
(&
fi
)) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

234 "\"%s\" couldÇŸ bê¸óãd", 
∑th
.
d©a
);

236 i‡(
	`ngx_dñëe_fûe
(
ãmp
->
d©a
Ë=
NGX_FILE_ERROR
) {

237 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

238 
ngx_dñëe_fûe_n
 " \"%s\" failed",

239 
ãmp
->
d©a
);

242 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_CONFLICT
);

247 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

249 
ext
.
ac˚ss
 = 
dlcf
->access;

250 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

251 
ext
.
time
 = -1;

252 
ext
.
¸óã_∑th
 = 
dlcf
->
¸óã_fuŒ_put_∑th
;

253 
ext
.
dñëe_fûe
 = 1;

254 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

256 i‡(
r
->
hódîs_ö
.
d©e
) {

257 
d©e
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.d©e->
vÆue
.
d©a
,

258 
r
->
hódîs_ö
.
d©e
->
vÆue
.
Àn
);

260 i‡(
d©e
 !
NGX_ERROR
) {

261 
ext
.
time
 = 
d©e
;

262 
ext
.
fd
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.fd;

266 i‡(
	`ngx_ext_ª«me_fûe
(
ãmp
, &
∑th
, &
ext
Ë!
NGX_OK
) {

267 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

271 i‡(
°©us
 =
NGX_HTTP_CREATED
) {

272 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

273 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

277 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

280 
r
->
hódîs_out
.
°©us
 = status;

281 
r
->
hódî_⁄ly
 = 1;

283 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_£nd_hódî
(r));

285 
	}
}

288 
ngx_öt_t


289 
	$ngx_hâp_dav_dñëe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

291 
size_t
 
roŸ
;

292 
ngx_îr_t
 
îr
;

293 
ngx_öt_t
 
rc
, 
dïth
;

294 
ngx_uöt_t
 
i
, 
d
, 
dú
;

295 
ngx_°r_t
 
∑th
;

296 
ngx_fûe_öfo_t
 
fi
;

297 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

299 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

300 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

302  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

305 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

307 i‡(
dlcf
->
mö_dñëe_dïth
) {

308 
d
 = 0;

310 
i
 = 0; i < 
r
->
uri
.
Àn
; ) {

311 i‡(
r
->
uri
.
d©a
[
i
++] == '/') {

312 i‡(++
d
 >
dlcf
->
mö_dñëe_dïth
 && 
i
 < 
r
->
uri
.
Àn
) {

313 
ok
;

318 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "ösufficõ¡ URI dïth:%òtÿDELETE", 
d
);

320  
NGX_HTTP_CONFLICT
;

323 
ok
:

325 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

327 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

328 "hâ∞dñëêfûíame: \"%s\"", 
∑th
.
d©a
);

330 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

331 
îr
 = 
ngx_î∫o
;

333 
rc
 = (
îr
 =
NGX_ENOTDIR
Ë? 
NGX_HTTP_CONFLICT
 : 
NGX_HTTP_NOT_FOUND
;

335  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

336 
rc
, 
ngx_lök_öfo_n
, 
∑th
.
d©a
);

339 i‡(
	`ngx_is_dú
(&
fi
)) {

341 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

342 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EISDIR
,

343 "DELETE \"%s\" faûed", 
∑th
.
d©a
);

344  
NGX_HTTP_CONFLICT
;

347 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

349 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

350 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352  
NGX_HTTP_BAD_REQUEST
;

355 
∑th
.
Àn
 -= 2;

357 
dú
 = 1;

366 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 0);

368 i‡(
dïth
 !0 && dïth !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

369 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

371  
NGX_HTTP_BAD_REQUEST
;

374 
dú
 = 0;

377 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 
dú
);

379 i‡(
rc
 =
NGX_OK
) {

380  
NGX_HTTP_NO_CONTENT
;

383  
rc
;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_hâp_dav_dñëe_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
, 
ngx_uöt_t
 
dú
)

390 *
Áûed
;

391 
ngx_åì_˘x_t
 
åì
;

393 i‡(
dú
) {

395 
åì
.
öô_h™dÀr
 = 
NULL
;

396 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

397 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_no›
;

398 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_dñëe_dú
;

399 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_dñëe_fûe
;

400 
åì
.
d©a
 = 
NULL
;

401 
åì
.
Æloc
 = 0;

402 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

406 i‡(
	`ngx_wÆk_åì
(&
åì
, 
∑th
Ë!
NGX_OK
) {

407  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

410 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

411  
NGX_OK
;

414 
Áûed
 = 
ngx_dñëe_dú_n
;

418 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë!
NGX_FILE_ERROR
) {

419  
NGX_OK
;

422 
Áûed
 = 
ngx_dñëe_fûe_n
;

425  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

426 
NGX_HTTP_NOT_FOUND
, 
Áûed
, 
∑th
->
d©a
);

427 
	}
}

430 
ngx_öt_t


431 
	$ngx_hâp_dav_dñëe_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

434 "hâ∞dñëêdú: \"%s\"", 
∑th
->
d©a
);

436 i‡(
	`ngx_dñëe_dú
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

440 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_dú_n
,

441 
∑th
->
d©a
);

444  
NGX_OK
;

445 
	}
}

448 
ngx_öt_t


449 
	$ngx_hâp_dav_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

451 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

452 "hâ∞dñëêfûe: \"%s\"", 
∑th
->
d©a
);

454 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

458 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_dñëe_fûe_n
,

459 
∑th
->
d©a
);

462  
NGX_OK
;

463 
	}
}

466 
ngx_öt_t


467 
	$ngx_hâp_dav_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

469  
NGX_OK
;

470 
	}
}

473 
ngx_öt_t


474 
	$ngx_hâp_dav_mkcﬁ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
)

476 
u_ch¨
 *
p
;

477 
size_t
 
roŸ
;

478 
ngx_°r_t
 
∑th
;

480 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

481 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

486 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

487 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

489  
NGX_HTTP_CONFLICT
;

492 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

494 *(
p
 - 1) = '\0';

495 
r
->
uri
.
Àn
--;

497 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 "hâ∞mkcﬁÖ©h: \"%s\"", 
∑th
.
d©a
);

500 i‡(
	`ngx_¸óã_dú
(
∑th
.
d©a
, 
	`ngx_dú_ac˚ss
(
dlcf
->
ac˚ss
))

501 !
NGX_FILE_ERROR
)

503 i‡(
	`ngx_hâp_dav_loˇti⁄
(
r
, 
∑th
.
d©a
Ë!
NGX_OK
) {

504  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

507  
NGX_HTTP_CREATED
;

510  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

511 
NGX_HTTP_CONFLICT
, 
ngx_¸óã_dú_n
, 
∑th
.
d©a
);

512 
	}
}

515 
ngx_öt_t


516 
	$ngx_hâp_dav_c›y_move_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

518 
u_ch¨
 *
p
, *
ho°
, *
œ°
, 
ch
;

519 
size_t
 
Àn
, 
roŸ
;

520 
ngx_îr_t
 
îr
;

521 
ngx_öt_t
 
rc
, 
dïth
;

522 
ngx_uöt_t
 
ovîwrôe
, 
¶ash
, 
dú
, 
Êags
;

523 
ngx_°r_t
 
∑th
, 
uri
, 
duri
, 
¨gs
;

524 
ngx_åì_˘x_t
 
åì
;

525 
ngx_c›y_fûe_t
 
cf
;

526 
ngx_fûe_öfo_t
 
fi
;

527 
ngx_èbÀ_ñt_t
 *
de°
, *
ovî
;

528 
ngx_ext_ª«me_fûe_t
 
ext
;

529 
ngx_hâp_dav_c›y_˘x_t
 
c›y
;

530 
ngx_hâp_dav_loc_c⁄f_t
 *
dlcf
;

532 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0) {

533  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

536 
de°
 = 
r
->
hódîs_ö
.
de°ö©i⁄
;

538 i‡(
de°
 =
NULL
) {

539 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

541  
NGX_HTTP_BAD_REQUEST
;

544 
p
 = 
de°
->
vÆue
.
d©a
;

546 i‡(
p
[0] == '/') {

547 
œ°
 = 
p
 + 
de°
->
vÆue
.
Àn
;

548 
de°ö©i⁄_d⁄e
;

551 
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

553 i‡(
Àn
 == 0) {

554 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

556  
NGX_HTTP_BAD_REQUEST
;

559 #i‡(
NGX_HTTP_SSL
)

561 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

562 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "https://", ("https://") - 1)

565 
övÆid_de°ö©i⁄
;

568 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("https://") - 1;

573 i‡(
	`ngx_°∫cmp
(
de°
->
vÆue
.
d©a
, "http://", ("http://") - 1)

576 
övÆid_de°ö©i⁄
;

579 
ho°
 = 
de°
->
vÆue
.
d©a
 + ("http://") - 1;

582 i‡(
	`ngx_°∫cmp
(
ho°
, 
r
->
hódîs_ö
.
£rvî
.
d©a
, 
Àn
) != 0) {

583 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

586 &
de°
->
vÆue
);

587  
NGX_HTTP_BAD_REQUEST
;

590 
œ°
 = 
de°
->
vÆue
.
d©a
 + de°->vÆue.
Àn
;

592 
p
 = 
ho°
 + 
Àn
;Ö < 
œ°
;Ö++) {

593 i‡(*
p
 == '/') {

594 
de°ö©i⁄_d⁄e
;

598 
övÆid_de°ö©i⁄
:

600 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

602 &
de°
->
vÆue
);

603  
NGX_HTTP_BAD_REQUEST
;

605 
de°ö©i⁄_d⁄e
:

607 
duri
.
Àn
 = 
œ°
 - 
p
;

608 
duri
.
d©a
 = 
p
;

609 
Êags
 = 0;

611 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, &
duri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

612 
övÆid_de°ö©i⁄
;

615 i‡((
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] ='/' && *(
œ°
 - 1) != '/')

616 || (
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] !'/' && *(
œ°
 - 1) == '/'))

618 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

621 &
r
->
uri
, &
de°
->
vÆue
);

622  
NGX_HTTP_CONFLICT
;

625 
dïth
 = 
	`ngx_hâp_dav_dïth
(
r
, 
NGX_HTTP_DAV_INFINITY_DEPTH
);

627 i‡(
dïth
 !
NGX_HTTP_DAV_INFINITY_DEPTH
) {

629 i‡(
r
->
mëhod
 =
NGX_HTTP_COPY
) {

630 i‡(
dïth
 != 0) {

631 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633  
NGX_HTTP_BAD_REQUEST
;

637 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

639  
NGX_HTTP_BAD_REQUEST
;

643 
ovî
 = 
r
->
hódîs_ö
.
ovîwrôe
;

645 i‡(
ovî
) {

646 i‡(
ovî
->
vÆue
.
Àn
 == 1) {

647 
ch
 = 
ovî
->
vÆue
.
d©a
[0];

649 i‡(
ch
 == 'T' || ch == 't') {

650 
ovîwrôe
 = 1;

651 
ovîwrôe_d⁄e
;

654 i‡(
ch
 == 'F' || ch == 'f') {

655 
ovîwrôe
 = 0;

656 
ovîwrôe_d⁄e
;

661 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

663 &
ovî
->
vÆue
);

664  
NGX_HTTP_BAD_REQUEST
;

667 
ovîwrôe
 = 1;

669 
ovîwrôe_d⁄e
:

671 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

673 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

674 "hâ∞c›y from: \"%s\"", 
∑th
.
d©a
);

676 
uri
 = 
r
->uri;

677 
r
->
uri
 = 
duri
;

679 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
c›y
.
∑th
, &
roŸ
, 0);

681 
r
->
uri
 = uri;

683 
c›y
.
∑th
.
Àn
--;

685 i‡(
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
 - 1] == '/') {

686 
¶ash
 = 1;

687 
c›y
.
∑th
.
Àn
--;

688 
c›y
.
∑th
.
d©a
[c›y.∑th.
Àn
] = '\0';

691 
¶ash
 = 0;

694 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

695 "hâ∞c›yÅo: \"%s\"", 
c›y
.
∑th
.
d©a
);

697 i‡(
	`ngx_lök_öfo
(
c›y
.
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

698 
îr
 = 
ngx_î∫o
;

700 i‡(
îr
 !
NGX_ENOENT
) {

701  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
îr
,

702 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

703 
c›y
.
∑th
.
d©a
);

708 
ovîwrôe
 = 0;

709 
dú
 = 0;

715 i‡(
	`ngx_is_dú
(&
fi
Ë&& !
¶ash
) {

716 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

718 &
r
->
uri
, &r->
mëhod_«me
, &
de°
->
vÆue
);

719  
NGX_HTTP_CONFLICT
;

722 i‡(!
ovîwrôe
) {

723 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_EEXIST
,

724 "\"%s\" couldÇŸ bê¸óãd", 
c›y
.
∑th
.
d©a
);

725  
NGX_HTTP_PRECONDITION_FAILED
;

728 
dú
 = 
	`ngx_is_dú
(&
fi
);

731 i‡(
	`ngx_lök_öfo
(
∑th
.
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

732  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

733 
NGX_HTTP_NOT_FOUND
, 
ngx_lök_öfo_n
,

734 
∑th
.
d©a
);

737 i‡(
	`ngx_is_dú
(&
fi
)) {

739 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

741 "\"%V\" i†cﬁÀ˘i⁄", &
r
->
uri
);

742  
NGX_HTTP_BAD_REQUEST
;

745 i‡(
ovîwrôe
) {

746 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

747 "hâ∞dñëe: \"%s\"", 
c›y
.
∑th
.
d©a
);

749 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
c›y
.
∑th
, 
dú
);

751 i‡(
rc
 !
NGX_OK
) {

752  
rc
;

757 i‡(
	`ngx_is_dú
(&
fi
)) {

759 
∑th
.
Àn
 -= 2;

761 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

762 i‡(
	`ngx_ª«me_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©aË!
NGX_FILE_ERROR
) {

763  
NGX_HTTP_CREATED
;

767 i‡(
	`ngx_¸óã_dú
(
c›y
.
∑th
.
d©a
, 
	`ngx_fûe_ac˚ss
(&
fi
))

768 =
NGX_FILE_ERROR
)

770  
	`ngx_hâp_dav_îr‹
(
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

771 
NGX_HTTP_NOT_FOUND
,

772 
ngx_¸óã_dú_n
, 
c›y
.
∑th
.
d©a
);

775 
c›y
.
Àn
 = 
∑th
.len;

777 
åì
.
öô_h™dÀr
 = 
NULL
;

778 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_dav_c›y_åì_fûe
;

779 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú
;

780 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_dav_c›y_dú_time
;

781 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_dav_no›
;

782 
åì
.
d©a
 = &
c›y
;

783 
åì
.
Æloc
 = 0;

784 
åì
.
log
 = 
r
->
c⁄√˘i⁄
->log;

786 i‡(
	`ngx_wÆk_åì
(&
åì
, &
∑th
Ë=
NGX_OK
) {

788 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

789 
rc
 = 
	`ngx_hâp_dav_dñëe_∑th
(
r
, &
∑th
, 1);

791 i‡(
rc
 !
NGX_OK
) {

792  
rc
;

796  
NGX_HTTP_CREATED
;

801 i‡(
r
->
mëhod
 =
NGX_HTTP_MOVE
) {

803 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

805 
ext
.
ac˚ss
 = 0;

806 
ext
.
∑th_ac˚ss
 = 
dlcf
->
ac˚ss
;

807 
ext
.
time
 = -1;

808 
ext
.
¸óã_∑th
 = 1;

809 
ext
.
dñëe_fûe
 = 0;

810 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

812 i‡(
	`ngx_ext_ª«me_fûe
(&
∑th
, &
c›y
.∑th, &
ext
Ë=
NGX_OK
) {

813  
NGX_HTTP_NO_CONTENT
;

816  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

819 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_dav_moduÀ
);

821 
cf
.
size
 = 
	`ngx_fûe_size
(&
fi
);

822 
cf
.
buf_size
 = 0;

823 
cf
.
ac˚ss
 = 
dlcf
->access;

824 
cf
.
time
 = 
	`ngx_fûe_mtime
(&
fi
);

825 
cf
.
log
 = 
r
->
c⁄√˘i⁄
->log;

827 i‡(
	`ngx_c›y_fûe
(
∑th
.
d©a
, 
c›y
.∑th.d©a, &
cf
Ë=
NGX_OK
) {

828  
NGX_HTTP_NO_CONTENT
;

832  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

833 
	}
}

836 
ngx_öt_t


837 
	$ngx_hâp_dav_c›y_dú
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

839 
u_ch¨
 *
p
, *
dú
;

840 
size_t
 
Àn
;

841 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

843 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

844 "hâ∞c›y dú: \"%s\"", 
∑th
->
d©a
);

846 
c›y
 = 
˘x
->
d©a
;

848 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

850 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

851 i‡(
dú
 =
NULL
) {

852  
NGX_ABORT
;

855 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

856 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

858 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

859 "hâ∞c›y dúÅo: \"%s\"", 
dú
);

861 i‡(
	`ngx_¸óã_dú
(
dú
, 
	`ngx_dú_ac˚ss
(
˘x
->
ac˚ss
)Ë=
NGX_FILE_ERROR
) {

862 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_¸óã_dú_n
,

863 
dú
);

866 
	`ngx_‰ì
(
dú
);

868  
NGX_OK
;

869 
	}
}

872 
ngx_öt_t


873 
	$ngx_hâp_dav_c›y_dú_time
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

875 
u_ch¨
 *
p
, *
dú
;

876 
size_t
 
Àn
;

877 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

879 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

880 "hâ∞c›y dúÅime: \"%s\"", 
∑th
->
d©a
);

882 
c›y
 = 
˘x
->
d©a
;

884 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

886 
dú
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

887 i‡(
dú
 =
NULL
) {

888  
NGX_ABORT
;

891 
p
 = 
	`ngx_˝ymem
(
dú
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

892 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

894 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

895 "hâ∞c›y dúÅimêto: \"%s\"", 
dú
);

897 #i‡(
NGX_WIN32
)

899 
ngx_fd_t
 
fd
;

901 
fd
 = 
	`ngx_›í_fûe
(
dú
, 
NGX_FILE_RDWR
, 
NGX_FILE_OPEN
, 0);

903 i‡(
fd
 =
NGX_INVALID_FILE
) {

904 (Ë
	`ngx_hâp_dav_îr‹
(
˘x
->
log
, 
ngx_î∫o
, 0, 
ngx_›í_fûe_n
, 
dú
);

905 
Áûed
;

908 i‡(
	`ngx_£t_fûe_time
(
NULL
, 
fd
, 
˘x
->
mtime
Ë!
NGX_OK
) {

909 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

910 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

913 i‡(
	`ngx_˛o£_fûe
(
fd
Ë=
NGX_FILE_ERROR
) {

914 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

915 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
dú
);

919 
Áûed
:

923 i‡(
	`ngx_£t_fûe_time
(
dú
, 0, 
˘x
->
mtime
Ë!
NGX_OK
) {

924 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
log
, 
ngx_î∫o
,

925 
ngx_£t_fûe_time_n
 " \"%s\" faûed", 
dú
);

930 
	`ngx_‰ì
(
dú
);

932  
NGX_OK
;

933 
	}
}

936 
ngx_öt_t


937 
	$ngx_hâp_dav_c›y_åì_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

939 
u_ch¨
 *
p
, *
fûe
;

940 
size_t
 
Àn
;

941 
ngx_c›y_fûe_t
 
cf
;

942 
ngx_hâp_dav_c›y_˘x_t
 *
c›y
;

944 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

945 "hâ∞c›y fûe: \"%s\"", 
∑th
->
d©a
);

947 
c›y
 = 
˘x
->
d©a
;

949 
Àn
 = 
c›y
->
∑th
.len +Öath->len;

951 
fûe
 = 
	`ngx_Æloc
(
Àn
 + 1, 
˘x
->
log
);

952 i‡(
fûe
 =
NULL
) {

953  
NGX_ABORT
;

956 
p
 = 
	`ngx_˝ymem
(
fûe
, 
c›y
->
∑th
.
d©a
, c›y->∑th.
Àn
);

957 (Ë
	`ngx_˝y°∫
(
p
, 
∑th
->
d©a
 + 
c›y
->
Àn
,Öath->len - copy->len + 1);

959 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

960 "hâ∞c›y fûêto: \"%s\"", 
fûe
);

962 
cf
.
size
 = 
˘x
->size;

963 
cf
.
buf_size
 = 0;

964 
cf
.
ac˚ss
 = 
˘x
->access;

965 
cf
.
time
 = 
˘x
->
mtime
;

966 
cf
.
log
 = 
˘x
->log;

968 (Ë
	`ngx_c›y_fûe
(
∑th
->
d©a
, 
fûe
, &
cf
);

970 
	`ngx_‰ì
(
fûe
);

972  
NGX_OK
;

973 
	}
}

976 
ngx_öt_t


977 
	$ngx_hâp_dav_dïth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
dÊt
)

979 
ngx_èbÀ_ñt_t
 *
dïth
;

981 
dïth
 = 
r
->
hódîs_ö
.depth;

983 i‡(
dïth
 =
NULL
) {

984  
dÊt
;

987 i‡(
dïth
->
vÆue
.
Àn
 == 1) {

989 i‡(
dïth
->
vÆue
.
d©a
[0] == '0') {

993 i‡(
dïth
->
vÆue
.
d©a
[0] == '1') {

999 i‡(
dïth
->
vÆue
.
Àn
 == ("infinity") - 1

1000 && 
	`ngx_°rcmp
(
dïth
->
vÆue
.
d©a
, "infinity") == 0)

1002  
NGX_HTTP_DAV_INFINITY_DEPTH
;

1006 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1008 &
dïth
->
vÆue
);

1010  
NGX_HTTP_DAV_INVALID_DEPTH
;

1011 
	}
}

1014 
ngx_öt_t


1015 
	$ngx_hâp_dav_îr‹
(
ngx_log_t
 *
log
, 
ngx_îr_t
 
îr
, 
ngx_öt_t
 
nŸ_found
,

1016 *
Áûed
, 
u_ch¨
 *
∑th
)

1018 
ngx_öt_t
 
rc
;

1019 
ngx_uöt_t
 
Àvñ
;

1021 i‡(
îr
 =
NGX_ENOENT
 ||Éº =
NGX_ENOTDIR
 ||Éº =
NGX_ENAMETOOLONG
) {

1022 
Àvñ
 = 
NGX_LOG_ERR
;

1023 
rc
 = 
nŸ_found
;

1025 } i‡(
îr
 =
NGX_EACCES
 ||Éº =
NGX_EPERM
) {

1026 
Àvñ
 = 
NGX_LOG_ERR
;

1027 
rc
 = 
NGX_HTTP_FORBIDDEN
;

1029 } i‡(
îr
 =
NGX_EEXIST
) {

1030 
Àvñ
 = 
NGX_LOG_ERR
;

1031 
rc
 = 
NGX_HTTP_NOT_ALLOWED
;

1033 } i‡(
îr
 =
NGX_ENOSPC
) {

1034 
Àvñ
 = 
NGX_LOG_CRIT
;

1035 
rc
 = 
NGX_HTTP_INSUFFICIENT_STORAGE
;

1038 
Àvñ
 = 
NGX_LOG_CRIT
;

1039 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1042 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
îr
, "%†\"%s\" faûed", 
Áûed
, 
∑th
);

1044  
rc
;

1045 
	}
}

1048 
ngx_öt_t


1049 
	$ngx_hâp_dav_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
∑th
)

1051 
u_ch¨
 *
loˇti⁄
;

1052 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1054 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

1055 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1056  
NGX_ERROR
;

1059 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1061 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
) {

1062 
loˇti⁄
 = 
∑th
 + 
˛cf
->
roŸ
.
Àn
;

1065 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
uri
.
Àn
);

1066 i‡(
loˇti⁄
 =
NULL
) {

1067  
NGX_ERROR
;

1070 
	`ngx_mem˝y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

1078 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Ñ->
uri
.len;

1079 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

1081  
NGX_OK
;

1082 
	}
}

1086 
	$ngx_hâp_dav_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1088 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
;

1090 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_dav_loc_c⁄f_t
));

1091 i‡(
c⁄f
 =
NULL
) {

1092  
NULL
;

1101 
c⁄f
->
mö_dñëe_dïth
 = 
NGX_CONF_UNSET_UINT
;

1102 
c⁄f
->
ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1103 
c⁄f
->
¸óã_fuŒ_put_∑th
 = 
NGX_CONF_UNSET
;

1105  
c⁄f
;

1106 
	}
}

1110 
	$ngx_hâp_dav_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1112 
ngx_hâp_dav_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1113 
ngx_hâp_dav_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1115 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
mëhods
, 
¥ev
->methods,

1116 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_DAV_OFF
));

1118 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
mö_dñëe_dïth
,

1119 
¥ev
->
mö_dñëe_dïth
, 0);

1121 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ac˚ss
, 
¥ev
->access, 0600);

1123 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¸óã_fuŒ_put_∑th
,

1124 
¥ev
->
¸óã_fuŒ_put_∑th
, 0);

1126  
NGX_CONF_OK
;

1127 
	}
}

1130 
ngx_öt_t


1131 
	$ngx_hâp_dav_öô
(
ngx_c⁄f_t
 *
cf
)

1133 
ngx_hâp_h™dÀr_±
 *
h
;

1134 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1136 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1138 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

1139 i‡(
h
 =
NULL
) {

1140  
NGX_ERROR
;

1143 *
h
 = 
ngx_hâp_dav_h™dÀr
;

1145  
NGX_OK
;

1146 
	}
}

	@src/http/modules/ngx_http_degradation_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
size_t
 
	msbrk_size
;

15 } 
	tngx_hâp_degød©i⁄_maö_c⁄f_t
;

19 
ngx_uöt_t
 
	mdegøde
;

20 } 
	tngx_hâp_degød©i⁄_loc_c⁄f_t
;

23 
ngx_c⁄f_íum_t
 
	gngx_hâp_degøde
[] = {

24 { 
ngx_°rög
("204"), 204 },

25 { 
ngx_°rög
("444"), 444 },

26 { 
ngx_nuŒ_°rög
, 0 }

30 *
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

31 *
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 *
ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

35 *
c⁄f
);

36 
ngx_öt_t
 
ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
);

39 
ngx_comm™d_t
 
	gngx_hâp_degød©i⁄_comm™ds
[] = {

41 { 
ngx_°rög
("degradation"),

42 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

43 
ngx_hâp_degød©i⁄
,

44 
NGX_HTTP_MAIN_CONF_OFFSET
,

46 
NULL
 },

48 { 
ngx_°rög
("degrade"),

49 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

50 
ngx_c⁄f_£t_íum_¶Ÿ
,

51 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
off£tof
(
ngx_hâp_degød©i⁄_loc_c⁄f_t
, 
degøde
),

53 &
ngx_hâp_degøde
 },

55 
ngx_nuŒ_comm™d


59 
ngx_hâp_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ_˘x
 = {

60 
NULL
,

61 
ngx_hâp_degød©i⁄_öô
,

63 
ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
,

64 
NULL
,

66 
NULL
,

67 
NULL
,

69 
ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
,

70 
ngx_hâp_degød©i⁄_mîge_loc_c⁄f


74 
ngx_moduÀ_t
 
	gngx_hâp_degød©i⁄_moduÀ
 = {

75 
NGX_MODULE_V1
,

76 &
ngx_hâp_degød©i⁄_moduÀ_˘x
,

77 
ngx_hâp_degød©i⁄_comm™ds
,

78 
NGX_HTTP_MODULE
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NULL
,

83 
NULL
,

84 
NULL
,

85 
NULL
,

86 
NGX_MODULE_V1_PADDING


90 
ngx_öt_t


91 
	$ngx_hâp_degød©i⁄_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

93 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
dlcf
;

95 
dlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

97 i‡(
dlcf
->
degøde
 && 
	`ngx_hâp_degøded
(
r
)) {

98  
dlcf
->
degøde
;

101  
NGX_DECLINED
;

102 
	}
}

105 
ngx_uöt_t


106 
	$ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *
r
)

108 
time_t
 
now
;

109 
ngx_uöt_t
 
log
;

110 
size_t
 
sbrk_size
;

111 
time_t
 
sbrk_time
;

112 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

114 
dmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_degød©i⁄_moduÀ
);

116 i‡(
dmcf
->
sbrk_size
) {

118 
log
 = 0;

119 
now
 = 
	`ngx_time
();

123 i‡(
now
 !
sbrk_time
) {

132 
sbrk_size
 = (
size_t
Ë
	`sbrk
(0Ë- ((
uöçå_t
Ë
ngx_∑Œoc
 & ~0x3FFFFF);

133 
sbrk_time
 = 
now
;

134 
log
 = 1;

139 i‡(
sbrk_size
 >
dmcf
->sbrk_size) {

140 i‡(
log
) {

141 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

143 
sbrk_size
 / (1024 * 1024));

151 
	}
}

155 
	$ngx_hâp_degød©i⁄_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

157 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
;

159 
dmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_maö_c⁄f_t
));

160 i‡(
dmcf
 =
NULL
) {

161  
NULL
;

164  
dmcf
;

165 
	}
}

169 
	$ngx_hâp_degød©i⁄_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

171 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
;

173 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_degød©i⁄_loc_c⁄f_t
));

174 i‡(
c⁄f
 =
NULL
) {

175  
NULL
;

178 
c⁄f
->
degøde
 = 
NGX_CONF_UNSET_UINT
;

180  
c⁄f
;

181 
	}
}

185 
	$ngx_hâp_degød©i⁄_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

187 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

188 
ngx_hâp_degød©i⁄_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

190 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
degøde
, 
¥ev
->degrade, 0);

192  
NGX_CONF_OK
;

193 
	}
}

197 
	$ngx_hâp_degød©i⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

199 
ngx_hâp_degød©i⁄_maö_c⁄f_t
 *
dmcf
 = 
c⁄f
;

201 
ngx_°r_t
 *
vÆue
, 
s
;

203 
vÆue
 = 
cf
->
¨gs
->
ñts
;

205 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, "sbrk=", 5) == 0) {

207 
s
.
Àn
 = 
vÆue
[1].len - 5;

208 
s
.
d©a
 = 
vÆue
[1].data + 5;

210 
dmcf
->
sbrk_size
 = 
	`ngx_∑r£_size
(&
s
);

211 i‡(
dmcf
->
sbrk_size
 =(
size_t
Ë
NGX_ERROR
) {

212 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

213 "övÆid sbrk sizê\"%V\"", &
vÆue
[1]);

214  
NGX_CONF_ERROR
;

217  
NGX_CONF_OK
;

220 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

221 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

223  
NGX_CONF_ERROR
;

224 
	}
}

227 
ngx_öt_t


228 
	$ngx_hâp_degød©i⁄_öô
(
ngx_c⁄f_t
 *
cf
)

230 
ngx_hâp_h™dÀr_±
 *
h
;

231 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

233 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

235 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

236 i‡(
h
 =
NULL
) {

237  
NGX_ERROR
;

240 *
h
 = 
ngx_hâp_degød©i⁄_h™dÀr
;

242  
NGX_OK
;

243 
	}
}

	@src/http/modules/ngx_http_empty_gif_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

13 *
c⁄f
);

15 
ngx_comm™d_t
 
	gngx_hâp_em±y_gif_comm™ds
[] = {

17 { 
ngx_°rög
("empty_gif"),

18 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

19 
ngx_hâp_em±y_gif
,

22 
NULL
 },

24 
ngx_nuŒ_comm™d


30 
u_ch¨
 
	gngx_em±y_gif
[] = {

78 
ngx_hâp_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ_˘x
 = {

79 
NULL
,

80 
NULL
,

82 
NULL
,

83 
NULL
,

85 
NULL
,

86 
NULL
,

88 
NULL
,

89 
NULL


93 
ngx_moduÀ_t
 
	gngx_hâp_em±y_gif_moduÀ
 = {

94 
NGX_MODULE_V1
,

95 &
ngx_hâp_em±y_gif_moduÀ_˘x
,

96 
ngx_hâp_em±y_gif_comm™ds
,

97 
NGX_HTTP_MODULE
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NGX_MODULE_V1_PADDING


109 
ngx_°r_t
 
	gngx_hâp_gif_ty≥
 = 
ngx_°rög
("image/gif");

112 
ngx_öt_t


113 
	$ngx_hâp_em±y_gif_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

115 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

117 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

118  
NGX_HTTP_NOT_ALLOWED
;

121 
	`ngx_memzîo
(&
cv
, (
ngx_hâp_com∂ex_vÆue_t
));

123 
cv
.
vÆue
.
Àn
 = (
ngx_em±y_gif
);

124 
cv
.
vÆue
.
d©a
 = 
ngx_em±y_gif
;

125 
r
->
hódîs_out
.
œ°_modifõd_time
 = 23349600;

127  
	`ngx_hâp_£nd_ª•⁄£
(
r
, 
NGX_HTTP_OK
, &
ngx_hâp_gif_ty≥
, &
cv
);

128 
	}
}

132 
	$ngx_hâp_em±y_gif
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

134 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

136 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

137 
˛cf
->
h™dÀr
 = 
ngx_hâp_em±y_gif_h™dÀr
;

139  
NGX_CONF_OK
;

140 
	}
}

	@src/http/modules/ngx_http_fastcgi_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

16 
ngx_°r_t
 
	mödex
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_¨øy_t
 *
	mˇtch_°dîr
;

24 
ngx_¨øy_t
 *
	mÁ°cgi_Àngths
;

25 
ngx_¨øy_t
 *
	mÁ°cgi_vÆues
;

27 
ngx_hash_t
 
	mhódîs_hash
;

28 
ngx_uöt_t
 
	mhódî_∑øms
;

30 
ngx_Êag_t
 
	mkìp_c⁄n
;

32 #i‡(
NGX_HTTP_CACHE
)

33 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

36 #i‡(
NGX_PCRE
)

37 
ngx_ªgex_t
 *
	m•lô_ªgex
;

38 
ngx_°r_t
 
	m•lô_«me
;

40 } 
	tngx_hâp_Á°cgi_loc_c⁄f_t
;

44 
	mngx_hâp_Á°cgi_°_vîsi⁄
 = 0,

45 
	mngx_hâp_Á°cgi_°_ty≥
,

46 
	mngx_hâp_Á°cgi_°_ªque°_id_hi
,

47 
	mngx_hâp_Á°cgi_°_ªque°_id_lo
,

48 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
,

49 
	mngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
,

50 
	mngx_hâp_Á°cgi_°_∑ddög_Àngth
,

51 
	mngx_hâp_Á°cgi_°_ª£rved
,

52 
	mngx_hâp_Á°cgi_°_d©a
,

53 
	mngx_hâp_Á°cgi_°_∑ddög


54 } 
	tngx_hâp_Á°cgi_°©e_e
;

58 
u_ch¨
 *
	m°¨t
;

59 
u_ch¨
 *
	míd
;

60 } 
	tngx_hâp_Á°cgi_•lô_∑π_t
;

64 
ngx_hâp_Á°cgi_°©e_e
 
	m°©e
;

65 
u_ch¨
 *
	mpos
;

66 
u_ch¨
 *
	mœ°
;

67 
ngx_uöt_t
 
	mty≥
;

68 
size_t
 
	mÀngth
;

69 
size_t
 
	m∑ddög
;

71 
	mÁ°cgi_°dout
:1;

72 
	mœrge_°dîr
:1;

74 
ngx_¨øy_t
 *
	m•lô_∑πs
;

76 
ngx_°r_t
 
	ms¸ùt_«me
;

77 
ngx_°r_t
 
	m∑th_öfo
;

78 } 
	tngx_hâp_Á°cgi_˘x_t
;

81 
	#NGX_HTTP_FASTCGI_RESPONDER
 1

	)

83 
	#NGX_HTTP_FASTCGI_KEEP_CONN
 1

	)

85 
	#NGX_HTTP_FASTCGI_BEGIN_REQUEST
 1

	)

86 
	#NGX_HTTP_FASTCGI_ABORT_REQUEST
 2

	)

87 
	#NGX_HTTP_FASTCGI_END_REQUEST
 3

	)

88 
	#NGX_HTTP_FASTCGI_PARAMS
 4

	)

89 
	#NGX_HTTP_FASTCGI_STDIN
 5

	)

90 
	#NGX_HTTP_FASTCGI_STDOUT
 6

	)

91 
	#NGX_HTTP_FASTCGI_STDERR
 7

	)

92 
	#NGX_HTTP_FASTCGI_DATA
 8

	)

96 
u_ch¨
 
	mvîsi⁄
;

97 
u_ch¨
 
	mty≥
;

98 
u_ch¨
 
	mªque°_id_hi
;

99 
u_ch¨
 
	mªque°_id_lo
;

100 
u_ch¨
 
	mc⁄ã¡_Àngth_hi
;

101 
u_ch¨
 
	mc⁄ã¡_Àngth_lo
;

102 
u_ch¨
 
	m∑ddög_Àngth
;

103 
u_ch¨
 
	mª£rved
;

104 } 
	tngx_hâp_Á°cgi_hódî_t
;

108 
u_ch¨
 
	mrﬁe_hi
;

109 
u_ch¨
 
	mrﬁe_lo
;

110 
u_ch¨
 
	mÊags
;

111 
u_ch¨
 
	mª£rved
[5];

112 } 
	tngx_hâp_Á°cgi_begö_ªque°_t
;

116 
u_ch¨
 
	mvîsi⁄
;

117 
u_ch¨
 
	mty≥
;

118 
u_ch¨
 
	mªque°_id_hi
;

119 
u_ch¨
 
	mªque°_id_lo
;

120 } 
	tngx_hâp_Á°cgi_hódî_smÆl_t
;

124 
ngx_hâp_Á°cgi_hódî_t
 
	mh0
;

125 
ngx_hâp_Á°cgi_begö_ªque°_t
 
	mbr
;

126 
ngx_hâp_Á°cgi_hódî_smÆl_t
 
	mh1
;

127 } 
	tngx_hâp_Á°cgi_ªque°_°¨t_t
;

130 
ngx_öt_t
 
ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

132 #i‡(
NGX_HTTP_CACHE
)

133 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

135 
ngx_öt_t
 
ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

136 
ngx_öt_t
 
ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

137 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

138 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
);

139 
ngx_öt_t
 
ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
,

140 
ngx_buf_t
 *
buf
);

141 
ngx_öt_t
 
ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_hâp_Á°cgi_˘x_t
 *
f
);

143 
ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

145 
ngx_öt_t
 
rc
);

147 
ngx_öt_t
 
ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

148 *
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

149 *
ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

150 *
∑ª¡
, *
chûd
);

151 
ngx_öt_t
 
ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

152 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
);

154 
ngx_öt_t
 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

155 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

156 
ngx_öt_t
 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

157 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

158 
ngx_hâp_Á°cgi_˘x_t
 *
ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
,

159 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
);

161 *
ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

162 *
c⁄f
);

163 *
ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
,

164 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

165 *
ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

166 *
c⁄f
);

167 #i‡(
NGX_HTTP_CACHE
)

168 *
ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

169 *
c⁄f
);

170 *
ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

171 *
c⁄f
);

174 *
ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
,

175 *
d©a
);

178 
ngx_c⁄f_po°_t
 
	gngx_hâp_Á°cgi_low©_po°
 =

179 { 
ngx_hâp_Á°cgi_low©_check
 };

182 
ngx_c⁄f_bômask_t
 
	gngx_hâp_Á°cgi_√xt_up°ªam_masks
[] = {

183 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

184 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

185 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

186 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

187 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

188 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

189 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

190 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

191 { 
ngx_nuŒ_°rög
, 0 }

195 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
;

198 
ngx_comm™d_t
 
	gngx_hâp_Á°cgi_comm™ds
[] = {

200 { 
ngx_°rög
("fastcgi_pass"),

201 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

202 
ngx_hâp_Á°cgi_∑ss
,

203 
NGX_HTTP_LOC_CONF_OFFSET
,

205 
NULL
 },

207 { 
ngx_°rög
("fastcgi_index"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

209 
ngx_c⁄f_£t_°r_¶Ÿ
,

210 
NGX_HTTP_LOC_CONF_OFFSET
,

211 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ödex
),

212 
NULL
 },

214 { 
ngx_°rög
("fastcgi_split_path_info"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_hâp_Á°cgi_•lô_∑th_öfo
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
NULL
 },

221 { 
ngx_°rög
("fastcgi_store"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_hâp_Á°cgi_°‹e
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("fastcgi_store_access"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

230 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

231 
NGX_HTTP_LOC_CONF_OFFSET
,

232 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

233 
NULL
 },

235 { 
ngx_°rög
("fastcgi_ignore_client_abort"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

237 
ngx_c⁄f_£t_Êag_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

240 
NULL
 },

242 { 
ngx_°rög
("fastcgi_bind"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

244 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

247 
NULL
 },

249 { 
ngx_°rög
("fastcgi_connect_timeout"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

251 
ngx_c⁄f_£t_m£c_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

254 
NULL
 },

256 { 
ngx_°rög
("fastcgi_send_timeout"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_c⁄f_£t_m£c_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

261 
NULL
 },

263 { 
ngx_°rög
("fastcgi_send_lowat"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

265 
ngx_c⁄f_£t_size_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

268 &
ngx_hâp_Á°cgi_low©_po°
 },

270 { 
ngx_°rög
("fastcgi_buffer_size"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

272 
ngx_c⁄f_£t_size_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

275 
NULL
 },

277 { 
ngx_°rög
("fastcgi_pass_request_headers"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

279 
ngx_c⁄f_£t_Êag_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

282 
NULL
 },

284 { 
ngx_°rög
("fastcgi_pass_request_body"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

286 
ngx_c⁄f_£t_Êag_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

289 
NULL
 },

291 { 
ngx_°rög
("fastcgi_intercept_errors"),

292 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

293 
ngx_c⁄f_£t_Êag_¶Ÿ
,

294 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

296 
NULL
 },

298 { 
ngx_°rög
("fastcgi_read_timeout"),

299 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

300 
ngx_c⁄f_£t_m£c_¶Ÿ
,

301 
NGX_HTTP_LOC_CONF_OFFSET
,

302 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

303 
NULL
 },

305 { 
ngx_°rög
("fastcgi_buffers"),

306 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

307 
ngx_c⁄f_£t_bufs_¶Ÿ
,

308 
NGX_HTTP_LOC_CONF_OFFSET
,

309 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

310 
NULL
 },

312 { 
ngx_°rög
("fastcgi_busy_buffers_size"),

313 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

314 
ngx_c⁄f_£t_size_¶Ÿ
,

315 
NGX_HTTP_LOC_CONF_OFFSET
,

316 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

317 
NULL
 },

319 #i‡(
NGX_HTTP_CACHE
)

321 { 
ngx_°rög
("fastcgi_cache"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

323 
ngx_hâp_Á°cgi_ˇche
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

326 
NULL
 },

328 { 
ngx_°rög
("fastcgi_cache_key"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_hâp_Á°cgi_ˇche_key
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

333 
NULL
 },

335 { 
ngx_°rög
("fastcgi_cache_path"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

337 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

340 &
ngx_hâp_Á°cgi_moduÀ
 },

342 { 
ngx_°rög
("fastcgi_cache_bypass"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

344 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

347 
NULL
 },

349 { 
ngx_°rög
("fastcgi_no_cache"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

351 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

354 
NULL
 },

356 { 
ngx_°rög
("fastcgi_cache_valid"),

357 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

358 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

359 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

361 
NULL
 },

363 { 
ngx_°rög
("fastcgi_cache_min_uses"),

364 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

365 
ngx_c⁄f_£t_num_¶Ÿ
,

366 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

368 
NULL
 },

370 { 
ngx_°rög
("fastcgi_cache_use_stale"),

371 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

372 
ngx_c⁄f_£t_bômask_¶Ÿ
,

373 
NGX_HTTP_LOC_CONF_OFFSET
,

374 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

375 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

377 { 
ngx_°rög
("fastcgi_cache_methods"),

378 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

379 
ngx_c⁄f_£t_bômask_¶Ÿ
,

380 
NGX_HTTP_LOC_CONF_OFFSET
,

381 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

382 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

384 { 
ngx_°rög
("fastcgi_cache_lock"),

385 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

386 
ngx_c⁄f_£t_Êag_¶Ÿ
,

387 
NGX_HTTP_LOC_CONF_OFFSET
,

388 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

389 
NULL
 },

391 { 
ngx_°rög
("fastcgi_cache_lock_timeout"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

393 
ngx_c⁄f_£t_m£c_¶Ÿ
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

395 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

396 
NULL
 },

400 { 
ngx_°rög
("fastcgi_temp_path"),

401 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

402 
ngx_c⁄f_£t_∑th_¶Ÿ
,

403 
NGX_HTTP_LOC_CONF_OFFSET
,

404 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

405 
NULL
 },

407 { 
ngx_°rög
("fastcgi_max_temp_file_size"),

408 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

409 
ngx_c⁄f_£t_size_¶Ÿ
,

410 
NGX_HTTP_LOC_CONF_OFFSET
,

411 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

412 
NULL
 },

414 { 
ngx_°rög
("fastcgi_temp_file_write_size"),

415 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

416 
ngx_c⁄f_£t_size_¶Ÿ
,

417 
NGX_HTTP_LOC_CONF_OFFSET
,

418 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

419 
NULL
 },

421 { 
ngx_°rög
("fastcgi_next_upstream"),

422 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

423 
ngx_c⁄f_£t_bômask_¶Ÿ
,

424 
NGX_HTTP_LOC_CONF_OFFSET
,

425 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

426 &
ngx_hâp_Á°cgi_√xt_up°ªam_masks
 },

428 { 
ngx_°rög
("fastcgi_param"),

429 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

430 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

431 
NGX_HTTP_LOC_CONF_OFFSET
,

432 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
∑øms_sour˚
),

433 
NULL
 },

435 { 
ngx_°rög
("fastcgi_pass_header"),

436 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

437 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

438 
NGX_HTTP_LOC_CONF_OFFSET
,

439 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

440 
NULL
 },

442 { 
ngx_°rög
("fastcgi_hide_header"),

443 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

444 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

445 
NGX_HTTP_LOC_CONF_OFFSET
,

446 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

447 
NULL
 },

449 { 
ngx_°rög
("fastcgi_ignore_headers"),

450 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

451 
ngx_c⁄f_£t_bômask_¶Ÿ
,

452 
NGX_HTTP_LOC_CONF_OFFSET
,

453 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

454 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

456 { 
ngx_°rög
("fastcgi_catch_stderr"),

457 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

458 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

459 
NGX_HTTP_LOC_CONF_OFFSET
,

460 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
ˇtch_°dîr
),

461 
NULL
 },

463 { 
ngx_°rög
("fastcgi_keep_conn"),

464 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

465 
ngx_c⁄f_£t_Êag_¶Ÿ
,

466 
NGX_HTTP_LOC_CONF_OFFSET
,

467 
off£tof
(
ngx_hâp_Á°cgi_loc_c⁄f_t
, 
kìp_c⁄n
),

468 
NULL
 },

470 
ngx_nuŒ_comm™d


474 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ_˘x
 = {

475 
ngx_hâp_Á°cgi_add_v¨übÀs
,

476 
NULL
,

478 
NULL
,

479 
NULL
,

481 
NULL
,

482 
NULL
,

484 
ngx_hâp_Á°cgi_¸óã_loc_c⁄f
,

485 
ngx_hâp_Á°cgi_mîge_loc_c⁄f


489 
ngx_moduÀ_t
 
	gngx_hâp_Á°cgi_moduÀ
 = {

490 
NGX_MODULE_V1
,

491 &
ngx_hâp_Á°cgi_moduÀ_˘x
,

492 
ngx_hâp_Á°cgi_comm™ds
,

493 
NGX_HTTP_MODULE
,

494 
NULL
,

495 
NULL
,

496 
NULL
,

497 
NULL
,

498 
NULL
,

499 
NULL
,

500 
NULL
,

501 
NGX_MODULE_V1_PADDING


505 
ngx_hâp_Á°cgi_ªque°_°¨t_t
 
	gngx_hâp_Á°cgi_ªque°_°¨t
 = {

507 
NGX_HTTP_FASTCGI_BEGIN_REQUEST
,

511 (
ngx_hâp_Á°cgi_begö_ªque°_t
),

516 
NGX_HTTP_FASTCGI_RESPONDER
,

521 
NGX_HTTP_FASTCGI_PARAMS
,

528 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_Á°cgi_v¨s
[] = {

530 { 
ngx_°rög
("Á°cgi_s¸ùt_«me"), 
NULL
,

531 
ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
, 0,

532 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

534 { 
ngx_°rög
("Á°cgi_∑th_öfo"), 
NULL
,

535 
ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
, 0,

536 
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

538 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

542 
ngx_°r_t
 
	gngx_hâp_Á°cgi_hide_hódîs
[] = {

543 
ngx_°rög
("Status"),

544 
ngx_°rög
("X-Accel-Expires"),

545 
ngx_°rög
("X-Accel-Redirect"),

546 
ngx_°rög
("X-Accel-Limit-Rate"),

547 
ngx_°rög
("X-Accel-Buffering"),

548 
ngx_°rög
("X-Accel-Charset"),

549 
ngx_nuŒ_°rög


553 #i‡(
NGX_HTTP_CACHE
)

555 
ngx_keyvÆ_t
 
	gngx_hâp_Á°cgi_ˇche_hódîs
[] = {

556 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

557 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

558 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

559 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

560 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

561 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

562 { 
ngx_nuŒ_°rög
,Çgx_null_string }

568 
ngx_∑th_öô_t
 
	gngx_hâp_Á°cgi_ãmp_∑th
 = {

569 
ngx_°rög
(
NGX_HTTP_FASTCGI_TEMP_PATH
), { 1, 2, 0 }

573 
ngx_öt_t


574 
	$ngx_hâp_Á°cgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

576 
ngx_öt_t
 
rc
;

577 
ngx_hâp_up°ªam_t
 *
u
;

578 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

579 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

581 i‡(
r
->
subªque°_ö_mem‹y
) {

582 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

585  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

588 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

589  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

592 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

593 i‡(
f
 =
NULL
) {

594  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

597 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

599 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

601 i‡(
Êcf
->
Á°cgi_Àngths
) {

602 i‡(
	`ngx_hâp_Á°cgi_evÆ
(
r
, 
Êcf
Ë!
NGX_OK
) {

603  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

607 
u
 = 
r
->
up°ªam
;

609 
	`ngx_°r_£t
(&
u
->
schema
, "fastcgi://");

610 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_Á°cgi_moduÀ
;

612 
u
->
c⁄f
 = &
Êcf
->
up°ªam
;

614 #i‡(
NGX_HTTP_CACHE
)

615 
u
->
¸óã_key
 = 
ngx_hâp_Á°cgi_¸óã_key
;

617 
u
->
¸óã_ªque°
 = 
ngx_hâp_Á°cgi_¸óã_ªque°
;

618 
u
->
ªöô_ªque°
 = 
ngx_hâp_Á°cgi_ªöô_ªque°
;

619 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_Á°cgi_¥o˚ss_hódî
;

620 
u
->
ab‹t_ªque°
 = 
ngx_hâp_Á°cgi_ab‹t_ªque°
;

621 
u
->
föÆize_ªque°
 = 
ngx_hâp_Á°cgi_föÆize_ªque°
;

622 
r
->
°©e
 = 0;

624 
u
->
buf„rög
 = 1;

626 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

627 i‡(
u
->
pùe
 =
NULL
) {

628  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

631 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_Á°cgi_öput_fûãr
;

632 
u
->
pùe
->
öput_˘x
 = 
r
;

634 
u
->
öput_fûãr_öô
 = 
ngx_hâp_Á°cgi_öput_fûãr_öô
;

636 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

638 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

639  
rc
;

642  
NGX_DONE
;

643 
	}
}

646 
ngx_öt_t


647 
	$ngx_hâp_Á°cgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

649 
ngx_uæ_t
 
uæ
;

650 
ngx_hâp_up°ªam_t
 *
u
;

652 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

654 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
Êcf
->
Á°cgi_Àngths
->
ñts
, 0,

655 
Êcf
->
Á°cgi_vÆues
->
ñts
)

656 =
NULL
)

658  
NGX_ERROR
;

661 
uæ
.
no_ªsﬁve
 = 1;

663 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

664 i‡(
uæ
.
îr
) {

665 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

666 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

669  
NGX_ERROR
;

672 
u
 = 
r
->
up°ªam
;

674 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

675 i‡(
u
->
ªsﬁved
 =
NULL
) {

676  
NGX_ERROR
;

679 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

680 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

681 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

682 
u
->
ªsﬁved
->
«ddrs
 = 1;

683 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

686 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

687 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

688 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

691  
NGX_OK
;

692 
	}
}

695 #i‡(
NGX_HTTP_CACHE
)

697 
ngx_öt_t


698 
	$ngx_hâp_Á°cgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

700 
ngx_°r_t
 *
key
;

701 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

703 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

704 i‡(
key
 =
NULL
) {

705  
NGX_ERROR
;

708 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

710 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
Êcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

711  
NGX_ERROR
;

714  
NGX_OK
;

715 
	}
}

720 
ngx_öt_t


721 
	$ngx_hâp_Á°cgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

723 
off_t
 
fûe_pos
;

724 
u_ch¨
 
ch
, *
pos
, *
lowˇ£_key
;

725 
size_t
 
size
, 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
∑ddög
,

726 
Æloˇãd
;

727 
ngx_uöt_t
 
i
, 
n
, 
√xt
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

728 
ngx_buf_t
 *
b
;

729 
ngx_chaö_t
 *
˛
, *
body
;

730 
ngx_li°_∑π_t
 *
∑π
;

731 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

732 
ngx_hâp_s¸ùt_code_±
 
code
;

733 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

734 
ngx_hâp_Á°cgi_hódî_t
 *
h
;

735 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

736 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

738 
Àn
 = 0;

739 
hódî_∑øms
 = 0;

740 
ign‹ed
 = 
NULL
;

742 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

744 i‡(
Êcf
->
∑øms_Àn
) {

745 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

747 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
Êcf
->
Êushes
);

748 
À
.
Êushed
 = 1;

750 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

751 
À
.
ªque°
 = 
r
;

753 *(
uöçå_t
 *Ë
À
.
ù
) {

755 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

756 
key_Àn
 = 
	`lcode
(&
À
);

758 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

759 
skù_em±y
 = 
	`lcode
(&
À
);

761 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

762 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

764 
À
.
ù
 +(
uöçå_t
);

766 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

770 
Àn
 +1 + 
key_Àn
 + ((
vÆ_Àn
 > 127) ? 4 : 1) + val_len;

774 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

776 
Æloˇãd
 = 0;

777 
lowˇ£_key
 = 
NULL
;

779 i‡(
Êcf
->
hódî_∑øms
) {

780 
n
 = 0;

781 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

783 
∑π
) {

784 
n
 +
∑π
->
√…s
;

785 
∑π
 =Ö¨t->
√xt
;

788 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

789 i‡(
ign‹ed
 =
NULL
) {

790  
NGX_ERROR
;

794 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

795 
hódî
 = 
∑π
->
ñts
;

797 
i
 = 0; ; i++) {

799 i‡(
i
 >
∑π
->
√…s
) {

800 i‡(
∑π
->
√xt
 =
NULL
) {

804 
∑π
 =Ö¨t->
√xt
;

805 
hódî
 = 
∑π
->
ñts
;

806 
i
 = 0;

809 i‡(
Êcf
->
hódî_∑øms
) {

810 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

811 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

812 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

813 i‡(
lowˇ£_key
 =
NULL
) {

814  
NGX_ERROR
;

818 
hash
 = 0;

820 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

821 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

823 i‡(
ch
 >= 'A' && ch <= 'Z') {

824 
ch
 |= 0x20;

826 } i‡(
ch
 == '-') {

827 
ch
 = '_';

830 
hash
 = 
	`ngx_hash
(hash, 
ch
);

831 
lowˇ£_key
[
n
] = 
ch
;

834 i‡(
	`ngx_hash_föd
(&
Êcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

835 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

839 
n
 += ("HTTP_") - 1;

842 
n
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

845 
Àn
 +((
n
 > 127Ë? 4 : 1Ë+ ((
hódî
[
i
].
vÆue
.len > 127) ? 4 : 1)

846 + 
n
 + 
hódî
[
i
].
vÆue
.
Àn
;

851 i‡(
Àn
 > 65535) {

852 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

853 "Á°cgòªque°Ñec‹d i†toÿbig: %uz", 
Àn
);

854  
NGX_ERROR
;

858 
∑ddög
 = 8 - 
Àn
 % 8;

859 
∑ddög
 = (padding == 8) ? 0 :Öadding;

862 
size
 = (
ngx_hâp_Á°cgi_hódî_t
)

863 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

865 + (
ngx_hâp_Á°cgi_hódî_t
)

866 + 
Àn
 + 
∑ddög


867 + (
ngx_hâp_Á°cgi_hódî_t
)

869 + (
ngx_hâp_Á°cgi_hódî_t
);

872 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

873 i‡(
b
 =
NULL
) {

874  
NGX_ERROR
;

877 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

878 i‡(
˛
 =
NULL
) {

879  
NGX_ERROR
;

882 
˛
->
buf
 = 
b
;

884 
ngx_hâp_Á°cgi_ªque°_°¨t
.
br
.
Êags
 =

885 
Êcf
->
kìp_c⁄n
 ? 
NGX_HTTP_FASTCGI_KEEP_CONN
 : 0;

887 
	`ngx_mem˝y
(
b
->
pos
, &
ngx_hâp_Á°cgi_ªque°_°¨t
,

888 (
ngx_hâp_Á°cgi_ªque°_°¨t_t
));

890 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *)

891 (
b
->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

892 + (
ngx_hâp_Á°cgi_begö_ªque°_t
));

894 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

895 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

896 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

897 
h
->
ª£rved
 = 0;

899 
b
->
œ°
 = b->
pos
 + (
ngx_hâp_Á°cgi_hódî_t
)

900 + (
ngx_hâp_Á°cgi_begö_ªque°_t
)

901 + (
ngx_hâp_Á°cgi_hódî_t
);

904 i‡(
Êcf
->
∑øms_Àn
) {

905 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

907 
e
.
ù
 = 
Êcf
->
∑øms
->
ñts
;

908 
e
.
pos
 = 
b
->
œ°
;

909 
e
.
ªque°
 = 
r
;

910 
e
.
Êushed
 = 1;

912 
À
.
ù
 = 
Êcf
->
∑øms_Àn
->
ñts
;

914 *(
uöçå_t
 *Ë
À
.
ù
) {

916 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

917 
key_Àn
 = (
u_ch¨
Ë
	`lcode
(&
À
);

919 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

920 
skù_em±y
 = 
	`lcode
(&
À
);

922 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

923 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

925 
À
.
ù
 +(
uöçå_t
);

927 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

928 
e
.
skù
 = 1;

930 *(
uöçå_t
 *Ë
e
.
ù
) {

931 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

932 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

934 
e
.
ù
 +(
uöçå_t
);

936 
e
.
skù
 = 0;

941 *
e
.
pos
++ = (
u_ch¨
Ë
key_Àn
;

943 i‡(
vÆ_Àn
 > 127) {

944 *
e
.
pos
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

945 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

946 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

947 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

950 *
e
.
pos
++ = (
u_ch¨
Ë
vÆ_Àn
;

953 *(
uöçå_t
 *Ë
e
.
ù
) {

954 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

955 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

957 
e
.
ù
 +(
uöçå_t
);

959 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

961 
key_Àn
, 
e
.
pos
 - (key_À¿+ 
vÆ_Àn
),

962 
vÆ_Àn
, 
e
.
pos
 - val_len);

965 
b
->
œ°
 = 
e
.
pos
;

969 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

971 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

972 
hódî
 = 
∑π
->
ñts
;

974 
i
 = 0; ; i++) {

976 i‡(
i
 >
∑π
->
√…s
) {

977 i‡(
∑π
->
√xt
 =
NULL
) {

981 
∑π
 =Ö¨t->
√xt
;

982 
hódî
 = 
∑π
->
ñts
;

983 
i
 = 0;

986 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

987 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

988 
√xt
;

992 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

993 i‡(
key_Àn
 > 127) {

994 *
b
->
œ°
++ = (
u_ch¨
Ë(((
key_Àn
 >> 24) & 0x7f) | 0x80);

995 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 16) & 0xff);

996 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

997 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

1000 *
b
->
œ°
++ = (
u_ch¨
Ë
key_Àn
;

1003 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

1004 i‡(
vÆ_Àn
 > 127) {

1005 *
b
->
œ°
++ = (
u_ch¨
Ë(((
vÆ_Àn
 >> 24) & 0x7f) | 0x80);

1006 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 16) & 0xff);

1007 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

1008 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

1011 *
b
->
œ°
++ = (
u_ch¨
Ë
vÆ_Àn
;

1014 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

1016 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

1017 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

1019 i‡(
ch
 >= 'a' && ch <= 'z') {

1020 
ch
 &= ~0x20;

1022 } i‡(
ch
 == '-') {

1023 
ch
 = '_';

1026 *
b
->
œ°
++ = 
ch
;

1029 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

1031 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1033 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 
vÆ_Àn
),

1034 
vÆ_Àn
, 
b
->
œ°
 - val_len);

1035 
√xt
:

1042 i‡(
∑ddög
) {

1043 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1044 
b
->
œ°
 +
∑ddög
;

1048 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1049 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1051 
h
->
vîsi⁄
 = 1;

1052 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_PARAMS
;

1053 
h
->
ªque°_id_hi
 = 0;

1054 
h
->
ªque°_id_lo
 = 1;

1055 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1056 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1057 
h
->
∑ddög_Àngth
 = 0;

1058 
h
->
ª£rved
 = 0;

1060 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1061 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1063 i‡(
Êcf
->
up°ªam
.
∑ss_ªque°_body
) {

1064 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

1065 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1067 #i‡(
NGX_SUPPRESS_WARN
)

1068 
fûe_pos
 = 0;

1069 
pos
 = 
NULL
;

1072 
body
) {

1074 i‡(
body
->
buf
->
ö_fûe
) {

1075 
fûe_pos
 = 
body
->
buf
->file_pos;

1078 
pos
 = 
body
->
buf
->pos;

1081 
√xt
 = 0;

1084 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1085 i‡(
b
 =
NULL
) {

1086  
NGX_ERROR
;

1089 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1091 i‡(
body
->
buf
->
ö_fûe
) {

1092 
b
->
fûe_pos
 = file_pos;

1093 
fûe_pos
 += 32 * 1024;

1095 i‡(
fûe_pos
 >
body
->
buf
->
fûe_œ°
) {

1096 
fûe_pos
 = 
body
->
buf
->
fûe_œ°
;

1097 
√xt
 = 1;

1100 
b
->
fûe_œ°
 = 
fûe_pos
;

1101 
Àn
 = (
ngx_uöt_t
Ë(
fûe_pos
 - 
b
->file_pos);

1104 
b
->
pos
 =Öos;

1105 
pos
 += 32 * 1024;

1107 i‡(
pos
 >
body
->
buf
->
œ°
) {

1108 
pos
 = 
body
->
buf
->
œ°
;

1109 
√xt
 = 1;

1112 
b
->
œ°
 = 
pos
;

1113 
Àn
 = (
ngx_uöt_t
Ë(
pos
 - 
b
->pos);

1116 
∑ddög
 = 8 - 
Àn
 % 8;

1117 
∑ddög
 = (padding == 8) ? 0 :Öadding;

1119 
h
->
vîsi⁄
 = 1;

1120 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1121 
h
->
ªque°_id_hi
 = 0;

1122 
h
->
ªque°_id_lo
 = 1;

1123 
h
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1124 
h
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1125 
h
->
∑ddög_Àngth
 = (
u_ch¨
Ë
∑ddög
;

1126 
h
->
ª£rved
 = 0;

1128 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1129 i‡(
˛
->
√xt
 =
NULL
) {

1130  
NGX_ERROR
;

1133 
˛
 = cl->
√xt
;

1134 
˛
->
buf
 = 
b
;

1136 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

1137 (
ngx_hâp_Á°cgi_hódî_t
)

1138 + 
∑ddög
);

1139 i‡(
b
 =
NULL
) {

1140  
NGX_ERROR
;

1143 i‡(
∑ddög
) {

1144 
	`ngx_memzîo
(
b
->
œ°
, 
∑ddög
);

1145 
b
->
œ°
 +
∑ddög
;

1148 
h
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
b
->
œ°
;

1149 
b
->
œ°
 +(
ngx_hâp_Á°cgi_hódî_t
);

1151 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1152 i‡(
˛
->
√xt
 =
NULL
) {

1153  
NGX_ERROR
;

1156 
˛
 = cl->
√xt
;

1157 
˛
->
buf
 = 
b
;

1159 } !
√xt
);

1161 
body
 = body->
√xt
;

1165 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

1168 
h
->
vîsi⁄
 = 1;

1169 
h
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDIN
;

1170 
h
->
ªque°_id_hi
 = 0;

1171 
h
->
ªque°_id_lo
 = 1;

1172 
h
->
c⁄ã¡_Àngth_hi
 = 0;

1173 
h
->
c⁄ã¡_Àngth_lo
 = 0;

1174 
h
->
∑ddög_Àngth
 = 0;

1175 
h
->
ª£rved
 = 0;

1177 
˛
->
√xt
 = 
NULL
;

1179  
NGX_OK
;

1180 
	}
}

1183 
ngx_öt_t


1184 
	$ngx_hâp_Á°cgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1186 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1188 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1190 i‡(
f
 =
NULL
) {

1191  
NGX_OK
;

1194 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1195 
f
->
Á°cgi_°dout
 = 0;

1196 
f
->
œrge_°dîr
 = 0;

1198 
r
->
°©e
 = 0;

1200  
NGX_OK
;

1201 
	}
}

1204 
ngx_öt_t


1205 
	$ngx_hâp_Á°cgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1207 
u_ch¨
 *
p
, *
msg
, *
°¨t
, *
œ°
,

1208 *
∑π_°¨t
, *
∑π_íd
;

1209 
size_t
 
size
;

1210 
ngx_°r_t
 *
°©us_löe
, *
∑âîn
;

1211 
ngx_öt_t
 
rc
, 
°©us
;

1212 
ngx_buf_t
 
buf
;

1213 
ngx_uöt_t
 
i
;

1214 
ngx_èbÀ_ñt_t
 *
h
;

1215 
ngx_hâp_up°ªam_t
 *
u
;

1216 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1217 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1218 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1219 
ngx_hâp_Á°cgi_•lô_∑π_t
 *
∑π
;

1220 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1222 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1224 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1226 
u
 = 
r
->
up°ªam
;

1230 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1232 
f
->
pos
 = 
u
->
buf„r
.pos;

1233 
f
->
œ°
 = 
u
->
buf„r
.last;

1235 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1237 
u
->
buf„r
.
pos
 = 
f
->pos;

1238 
u
->
buf„r
.
œ°
 = 
f
->last;

1240 i‡(
rc
 =
NGX_AGAIN
) {

1241  
NGX_AGAIN
;

1244 i‡(
rc
 =
NGX_ERROR
) {

1245  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1248 i‡(
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDOUT


1249 && 
f
->
ty≥
 !
NGX_HTTP_FASTCGI_STDERR
)

1251 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1253 
f
->
ty≥
);

1255  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1258 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1259 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1262  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1266 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1268 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 < u->buf„r.
œ°
) {

1269 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1270 
u
->
buf„r
.
pos
 +
f
->
∑ddög
;

1275 i‡(
u
->
buf„r
.
pos
 + 
f
->
∑ddög
 =u->buf„r.
œ°
) {

1276 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1277 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1279  
NGX_AGAIN
;

1282 
f
->
∑ddög
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1283 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1285  
NGX_AGAIN
;

1291 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1293 i‡(
f
->
Àngth
) {

1294 
msg
 = 
u
->
buf„r
.
pos
;

1296 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 <u->buf„r.
œ°
) {

1297 
u
->
buf„r
.
pos
 +
f
->
Àngth
;

1298 
f
->
Àngth
 = 0;

1299 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1302 
f
->
Àngth
 -
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1303 
u
->
buf„r
.
pos
 = u->buf„r.
œ°
;

1306 
p
 = 
u
->
buf„r
.
pos
 - 1; 
msg
 <Ö;Ö--) {

1307 i‡(*
p
 !
LF
 && *∞!
CR
 && *p != '.' && *p != ' ') {

1312 
p
++;

1314 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1315 "Fa°CGI síàö stdîr: \"%*s\"", 
p
 - 
msg
, msg);

1317 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1319 i‡(
Êcf
->
ˇtch_°dîr
) {

1320 
∑âîn
 = 
Êcf
->
ˇtch_°dîr
->
ñts
;

1322 
i
 = 0; i < 
Êcf
->
ˇtch_°dîr
->
√…s
; i++) {

1323 i‡(
	`ngx_°∫°r
(
msg
, (*Ë
∑âîn
[
i
].
d©a
,

1324 
p
 - 
msg
)

1325 !
NULL
)

1327  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1332 i‡(
u
->
buf„r
.
pos
 =u->buf„r.
œ°
) {

1334 i‡(!
f
->
Á°cgi_°dout
) {

1341 #i‡(
NGX_HTTP_CACHE
)

1342 i‡(
r
->
ˇche
) {

1343 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t


1344 + 
r
->
ˇche
->
hódî_°¨t
;

1346 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1349 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1351 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1352 
f
->
œrge_°dîr
 = 1;

1355  
NGX_AGAIN
;

1359 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1368 #i‡(
NGX_HTTP_CACHE
)

1370 i‡(
f
->
œrge_°dîr
 && 
r
->
ˇche
) {

1371 
u_ch¨
 *
°¨t
;

1372 
ssize_t
 
Àn
;

1373 
ngx_hâp_Á°cgi_hódî_t
 *
fh
;

1375 
°¨t
 = 
u
->
buf„r
.°¨à+ 
r
->
ˇche
->
hódî_°¨t
;

1377 
Àn
 = 
u
->
buf„r
.
pos
 - 
°¨t
 - 2 * (
ngx_hâp_Á°cgi_hódî_t
);

1387 i‡(
Àn
 >= 0) {

1388 
fh
 = (
ngx_hâp_Á°cgi_hódî_t
 *Ë
°¨t
;

1389 
fh
->
vîsi⁄
 = 1;

1390 
fh
->
ty≥
 = 
NGX_HTTP_FASTCGI_STDERR
;

1391 
fh
->
ªque°_id_hi
 = 0;

1392 
fh
->
ªque°_id_lo
 = 1;

1393 
fh
->
c⁄ã¡_Àngth_hi
 = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

1394 
fh
->
c⁄ã¡_Àngth_lo
 = (
u_ch¨
Ë(
Àn
 & 0xff);

1395 
fh
->
∑ddög_Àngth
 = 0;

1396 
fh
->
ª£rved
 = 0;

1399 
r
->
ˇche
->
hódî_°¨t
 +
u
->
buf„r
.
pos
 - 
°¨t


1400 - (
ngx_hâp_Á°cgi_hódî_t
);

1403 
f
->
œrge_°dîr
 = 0;

1408 
f
->
Á°cgi_°dout
 = 1;

1410 
°¨t
 = 
u
->
buf„r
.
pos
;

1412 i‡(
u
->
buf„r
.
pos
 + 
f
->
Àngth
 < u->buf„r.
œ°
) {

1419 
œ°
 = 
u
->
buf„r
.last;

1420 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
 + 
f
->
Àngth
;

1423 
œ°
 = 
NULL
;

1428 
∑π_°¨t
 = 
u
->
buf„r
.
pos
;

1429 
∑π_íd
 = 
u
->
buf„r
.
œ°
;

1431 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
u
->
buf„r
, 1);

1433 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1434 "hâ∞Á°cgò∑r£r: %d", 
rc
);

1436 i‡(
rc
 =
NGX_AGAIN
) {

1440 i‡(
rc
 =
NGX_OK
) {

1444 
h
 = 
	`ngx_li°_push
(&
u
->
hódîs_ö
.
hódîs
);

1445 i‡(
h
 =
NULL
) {

1446  
NGX_ERROR
;

1449 i‡(
f
->
•lô_∑πs
 && f->•lô_∑πs->
√…s
) {

1451 
∑π
 = 
f
->
•lô_∑πs
->
ñts
;

1452 
size
 = 
u
->
buf„r
.
pos
 - 
∑π_°¨t
;

1454 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1455 
size
 +
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
;

1458 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
size
);

1459 i‡(
p
 =
NULL
) {

1460  
NGX_ERROR
;

1463 
buf
.
pos
 = 
p
;

1465 
i
 = 0; i < 
f
->
•lô_∑πs
->
√…s
; i++) {

1466 
p
 = 
	`ngx_˝ymem
’, 
∑π
[
i
].
°¨t
,

1467 
∑π
[
i
].
íd
 -Ö¨t[i].
°¨t
);

1470 
p
 = 
	`ngx_˝ymem
’, 
∑π_°¨t
, 
u
->
buf„r
.
pos
 -Öart_start);

1472 
buf
.
œ°
 = 
p
;

1474 
f
->
•lô_∑πs
->
√…s
 = 0;

1476 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &
buf
, 1);

1478 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1479 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1480 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1482 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1483 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1484 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1486 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1487 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1488  
NGX_ERROR
;

1493 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1494 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1496 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1497 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

1498 + 
h
->
key
.
Àn
);

1499 i‡(
h
->
key
.
d©a
 =
NULL
) {

1500  
NGX_ERROR
;

1503 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1504 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1

1505 + 
h
->
vÆue
.
Àn
 + 1;

1507 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1508 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1509 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1510 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1513 
h
->
hash
 = 
r
->
hódî_hash
;

1515 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1516 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1519 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1522 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1523 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1525 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1526  
NGX_ERROR
;

1529 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1531 &
h
->
key
, &h->
vÆue
);

1533 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1542 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1546 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1549 i‡(
u
->
hódîs_ö
.
°©us
) {

1550 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1552 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1554 i‡(
°©us
 =
NGX_ERROR
) {

1555 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1557 
°©us_löe
);

1558  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1561 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1562 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1564 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1565 
u
->
hódîs_ö
.
°©us_n
 = 302;

1566 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1570 
u
->
hódîs_ö
.
°©us_n
 = 200;

1571 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1574 i‡(
u
->
°©e
) {

1575 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1583 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1586  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1589 i‡(
œ°
) {

1590 
u
->
buf„r
.
œ°
 =Üast;

1593 
f
->
Àngth
 -
u
->
buf„r
.
pos
 - 
°¨t
;

1595 i‡(
f
->
Àngth
 == 0) {

1596 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1599 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1600  
NGX_OK
;

1603 i‡(
rc
 =
NGX_OK
) {

1609 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1612 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1613 
f
->
•lô_∑πs
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 1,

1614 (
ngx_hâp_Á°cgi_•lô_∑π_t
));

1615 i‡(
f
->
•lô_∑πs
 =
NULL
) {

1616  
NGX_ERROR
;

1620 
∑π
 = 
	`ngx_¨øy_push
(
f
->
•lô_∑πs
);

1621 i‡(
∑π
 =
NULL
) {

1622  
NGX_ERROR
;

1625 
∑π
->
°¨t
 = 
∑π_°¨t
;

1626 
∑π
->
íd
 = 
∑π_íd
;

1628 i‡(
u
->
buf„r
.
pos
 < u->buf„r.
œ°
) {

1632  
NGX_AGAIN
;

1634 
	}
}

1637 
ngx_öt_t


1638 
	$ngx_hâp_Á°cgi_öput_fûãr_öô
(*
d©a
)

1640 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1641 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1643 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1645 
r
->
up°ªam
->
pùe
->
Àngth
 = 
Êcf
->
kìp_c⁄n
 ?

1646 (
off_t
Ë(
ngx_hâp_Á°cgi_hódî_t
) : -1;

1648  
NGX_OK
;

1649 
	}
}

1652 
ngx_öt_t


1653 
	$ngx_hâp_Á°cgi_öput_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1655 
u_ch¨
 *
m
, *
msg
;

1656 
ngx_öt_t
 
rc
;

1657 
ngx_buf_t
 *
b
, **
¥ev
;

1658 
ngx_chaö_t
 *
˛
;

1659 
ngx_hâp_ªque°_t
 *
r
;

1660 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

1661 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

1663 i‡(
buf
->
pos
 =buf->
œ°
) {

1664  
NGX_OK
;

1667 
r
 = 
p
->
öput_˘x
;

1668 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1669 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

1671 
b
 = 
NULL
;

1672 
¥ev
 = &
buf
->
shadow
;

1674 
f
->
pos
 = 
buf
->pos;

1675 
f
->
œ°
 = 
buf
->last;

1678 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1680 
rc
 = 
	`ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
r
, 
f
);

1682 i‡(
rc
 =
NGX_AGAIN
) {

1686 i‡(
rc
 =
NGX_ERROR
) {

1687  
NGX_ERROR
;

1690 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDOUT
 && f->
Àngth
 == 0) {

1691 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1693 i‡(!
Êcf
->
kìp_c⁄n
) {

1694 
p
->
up°ªam_d⁄e
 = 1;

1697 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1703 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1705 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
p
->
log
, 0,

1708 i‡(!
Êcf
->
kìp_c⁄n
) {

1709 
p
->
up°ªam_d⁄e
 = 1;

1718 i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1720 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1722 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1723 
p
->
up°ªam_d⁄e
 = 1;

1727 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1728 
p
->
up°ªam_d⁄e
 = 1;

1729 
r
->
up°ªam
->
kì∑live
 = 1;

1733 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1738 i‡(
f
->
pos
 + f->
∑ddög
 < f->
œ°
) {

1739 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1740 
f
->
pos
 +f->
∑ddög
;

1745 i‡(
f
->
pos
 + f->
∑ddög
 =f->
œ°
) {

1746 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_vîsi⁄
;

1751 
f
->
∑ddög
 -f->
œ°
 - f->
pos
;

1759 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_STDERR
) {

1761 i‡(
f
->
Àngth
) {

1763 i‡(
f
->
pos
 =f->
œ°
) {

1767 
msg
 = 
f
->
pos
;

1769 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1770 
f
->
pos
 +f->
Àngth
;

1771 
f
->
Àngth
 = 0;

1772 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1775 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1776 
f
->
pos
 = f->
œ°
;

1779 
m
 = 
f
->
pos
 - 1; 
msg
 < m; m--) {

1780 i‡(*
m
 !
LF
 && *m !
CR
 && *m != '.' && *m != ' ') {

1785 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
p
->
log
, 0,

1787 
m
 + 1 - 
msg
, msg);

1790 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1796 i‡(
f
->
ty≥
 =
NGX_HTTP_FASTCGI_END_REQUEST
) {

1798 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1799 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1800 
f
->
pos
 +f->
Àngth
;

1805 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1813 i‡(
f
->
pos
 =f->
œ°
) {

1817 i‡(
p
->
‰ì
) {

1818 
˛
 = 
p
->
‰ì
;

1819 
b
 = 
˛
->
buf
;

1820 
p
->
‰ì
 = 
˛
->
√xt
;

1821 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1824 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1825 i‡(
b
 =
NULL
) {

1826  
NGX_ERROR
;

1830 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1832 
b
->
pos
 = 
f
->pos;

1833 
b
->
°¨t
 = 
buf
->start;

1834 
b
->
íd
 = 
buf
->end;

1835 
b
->
èg
 = 
p
->tag;

1836 
b
->
ãmp‹¨y
 = 1;

1837 
b
->
ªcy˛ed
 = 1;

1839 *
¥ev
 = 
b
;

1840 
¥ev
 = &
b
->
shadow
;

1842 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1843 i‡(
˛
 =
NULL
) {

1844  
NGX_ERROR
;

1847 
˛
->
buf
 = 
b
;

1848 
˛
->
√xt
 = 
NULL
;

1850 i‡(
p
->
ö
) {

1851 *
p
->
œ°_ö
 = 
˛
;

1853 
p
->
ö
 = 
˛
;

1855 
p
->
œ°_ö
 = &
˛
->
√xt
;

1858  
b
->
num
 = 
buf
->num;

1860 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1861 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1863 i‡(
f
->
pos
 + f->
Àngth
 <f->
œ°
) {

1864 
f
->
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög
;

1865 
f
->
pos
 +f->
Àngth
;

1866 
b
->
œ°
 = 
f
->
pos
;

1871 
f
->
Àngth
 -f->
œ°
 - f->
pos
;

1873 
b
->
œ°
 = 
f
->last;

1879 i‡(
Êcf
->
kìp_c⁄n
) {

1883 i‡(
f
->
°©e
 < 
ngx_hâp_Á°cgi_°_d©a
) {

1884 
p
->
Àngth
 = 1;

1886 } i‡(
f
->
°©e
 =
ngx_hâp_Á°cgi_°_∑ddög
) {

1887 
p
->
Àngth
 = 
f
->
∑ddög
;

1892 
p
->
Àngth
 = 
f
->length;

1896 i‡(
b
) {

1897 
b
->
shadow
 = 
buf
;

1898 
b
->
œ°_shadow
 = 1;

1900 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1901 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1903  
NGX_OK
;

1908 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1909  
NGX_ERROR
;

1912  
NGX_OK
;

1913 
	}
}

1916 
ngx_öt_t


1917 
	$ngx_hâp_Á°cgi_¥o˚ss_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
,

1918 
ngx_hâp_Á°cgi_˘x_t
 *
f
)

1920 
u_ch¨
 
ch
, *
p
;

1921 
ngx_hâp_Á°cgi_°©e_e
 
°©e
;

1923 
°©e
 = 
f
->state;

1925 
p
 = 
f
->
pos
;Ö < f->
œ°
;Ö++) {

1927 
ch
 = *
p
;

1929 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1930 "hâ∞Á°cgòªc‹d byã: %02Xd", 
ch
);

1932 
°©e
) {

1934 
ngx_hâp_Á°cgi_°_vîsi⁄
:

1935 i‡(
ch
 != 1) {

1936 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1938 "¥Ÿocﬁ vîsi⁄: %d", 
ch
);

1939  
NGX_ERROR
;

1941 
°©e
 = 
ngx_hâp_Á°cgi_°_ty≥
;

1944 
ngx_hâp_Á°cgi_°_ty≥
:

1945 
ch
) {

1946 
NGX_HTTP_FASTCGI_STDOUT
:

1947 
NGX_HTTP_FASTCGI_STDERR
:

1948 
NGX_HTTP_FASTCGI_END_REQUEST
:

1949 
f
->
ty≥
 = (
ngx_uöt_t
Ë
ch
;

1952 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1954 "ªc‹dÅy≥: %d", 
ch
);

1955  
NGX_ERROR
;

1958 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_hi
;

1963 
ngx_hâp_Á°cgi_°_ªque°_id_hi
:

1964 i‡(
ch
 != 0) {

1965 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1967 "ªque° id high byã: %d", 
ch
);

1968  
NGX_ERROR
;

1970 
°©e
 = 
ngx_hâp_Á°cgi_°_ªque°_id_lo
;

1973 
ngx_hâp_Á°cgi_°_ªque°_id_lo
:

1974 i‡(
ch
 != 1) {

1975 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1977 "ªque° idÜow byã: %d", 
ch
);

1978  
NGX_ERROR
;

1980 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
;

1983 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_hi
:

1984 
f
->
Àngth
 = 
ch
 << 8;

1985 
°©e
 = 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
;

1988 
ngx_hâp_Á°cgi_°_c⁄ã¡_Àngth_lo
:

1989 
f
->
Àngth
 |(
size_t
Ë
ch
;

1990 
°©e
 = 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
;

1993 
ngx_hâp_Á°cgi_°_∑ddög_Àngth
:

1994 
f
->
∑ddög
 = (
size_t
Ë
ch
;

1995 
°©e
 = 
ngx_hâp_Á°cgi_°_ª£rved
;

1998 
ngx_hâp_Á°cgi_°_ª£rved
:

1999 
°©e
 = 
ngx_hâp_Á°cgi_°_d©a
;

2001 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2002 "hâ∞Á°cgòªc‹dÜígth: %z", 
f
->
Àngth
);

2004 
f
->
pos
 = 
p
 + 1;

2005 
f
->
°©e
 = state;

2007  
NGX_OK
;

2010 
ngx_hâp_Á°cgi_°_d©a
:

2011 
ngx_hâp_Á°cgi_°_∑ddög
:

2016 
f
->
°©e
 = state;

2018  
NGX_AGAIN
;

2019 
	}
}

2023 
	$ngx_hâp_Á°cgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2025 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2029 
	}
}

2033 
	$ngx_hâp_Á°cgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2035 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2039 
	}
}

2042 
ngx_öt_t


2043 
	$ngx_hâp_Á°cgi_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2045 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2047 
v
 = 
ngx_hâp_Á°cgi_v¨s
; v->
«me
.
Àn
; v++) {

2048 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2049 i‡(
v¨
 =
NULL
) {

2050  
NGX_ERROR
;

2053 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2054 
v¨
->
d©a
 = 
v
->data;

2057  
NGX_OK
;

2058 
	}
}

2062 
	$ngx_hâp_Á°cgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2064 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
;

2066 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_Á°cgi_loc_c⁄f_t
));

2067 i‡(
c⁄f
 =
NULL
) {

2068  
NULL
;

2089 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2090 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2091 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2092 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2094 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2096 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2097 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2098 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2100 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2101 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2103 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2104 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2105 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2107 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2108 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2110 #i‡(
NGX_HTTP_CACHE
)

2111 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2112 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2113 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2114 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2115 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2116 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2117 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2120 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2121 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2123 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2126 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2128 
c⁄f
->
ˇtch_°dîr
 = 
NGX_CONF_UNSET_PTR
;

2130 
c⁄f
->
kìp_c⁄n
 = 
NGX_CONF_UNSET
;

2132 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "fastcgi");

2134  
c⁄f
;

2135 
	}
}

2139 
	$ngx_hâp_Á°cgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2141 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2142 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2144 
size_t
 
size
;

2145 
ngx_hash_öô_t
 
hash
;

2146 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2148 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2149 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2150 
¥ev
->
up°ªam
.
°‹e
, 0);

2152 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2153 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2154 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2158 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2159 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2161 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2162 
¥ev
->
up°ªam
.
buf„rög
, 1);

2164 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2165 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2167 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2168 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2170 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2171 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2173 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2174 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2176 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2177 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2179 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2180 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2182 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2183 
¥ev
->
up°ªam
.
buf„r_size
,

2184 (
size_t
Ë
ngx_∑gesize
);

2187 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2188 8, 
ngx_∑gesize
);

2190 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2193  
NGX_CONF_ERROR
;

2197 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2198 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2199 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2203 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2204 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2205 
NGX_CONF_UNSET_SIZE
);

2207 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2208 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2210 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2211 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2214 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2215 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2220  
NGX_CONF_ERROR
;

2223 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2224 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2226 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2230  
NGX_CONF_ERROR
;

2234 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2235 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2236 
NGX_CONF_UNSET_SIZE
);

2238 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2239 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2241 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2242 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2245 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2246 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2251  
NGX_CONF_ERROR
;

2255 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2256 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2257 
NGX_CONF_UNSET_SIZE
);

2259 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2260 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2262 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2263 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2266 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2267 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2269 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2275  
NGX_CONF_ERROR
;

2279 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2280 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2281 
NGX_CONF_BITMASK_SET
);

2284 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2285 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2286 (
NGX_CONF_BITMASK_SET


2287 |
NGX_HTTP_UPSTREAM_FT_ERROR


2288 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2290 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2291 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2292 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2295 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2296 
¥ev
->
up°ªam
.
ãmp_∑th
,

2297 &
ngx_hâp_Á°cgi_ãmp_∑th
)

2298 !
NGX_OK
)

2300  
NGX_CONF_ERROR
;

2303 #i‡(
NGX_HTTP_CACHE
)

2305 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2306 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2308 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2309 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2311 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2313 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2315 &
shm_z⁄e
->
shm
.
«me
);

2317  
NGX_CONF_ERROR
;

2320 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2321 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2323 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2324 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2325 (
NGX_CONF_BITMASK_SET


2326 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2328 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2329 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2330 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2333 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2334 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2337 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2338 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2341 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2343 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2344 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2346 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2347 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2349 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

2350 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2355 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2356 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2358 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2359 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2362 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2363 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2365 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2366 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2370 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2371 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2372 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2373 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2375 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2376 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2378 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ˇtch_°dîr
, 
¥ev
->ˇtch_°dîr, 
NULL
);

2380 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
kìp_c⁄n
, 
¥ev
->keep_conn, 0);

2383 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ödex
, 
¥ev
->index, "");

2385 
hash
.
max_size
 = 512;

2386 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

2387 
hash
.
«me
 = "fastcgi_hide_headers_hash";

2389 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2390 &
¥ev
->
up°ªam
, 
ngx_hâp_Á°cgi_hide_hódîs
, &
hash
)

2391 !
NGX_OK
)

2393  
NGX_CONF_ERROR
;

2396 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2397 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2400 i‡(
c⁄f
->
Á°cgi_Àngths
 =
NULL
) {

2401 
c⁄f
->
Á°cgi_Àngths
 = 
¥ev
->fastcgi_lengths;

2402 
c⁄f
->
Á°cgi_vÆues
 = 
¥ev
->fastcgi_values;

2405 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
Á°cgi_Àngths
) {

2406 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2407 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2408 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2412 #i‡(
NGX_PCRE
)

2413 i‡(
c⁄f
->
•lô_ªgex
 =
NULL
) {

2414 
c⁄f
->
•lô_ªgex
 = 
¥ev
->split_regex;

2415 
c⁄f
->
•lô_«me
 = 
¥ev
->split_name;

2419 i‡(
	`ngx_hâp_Á°cgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2420  
NGX_CONF_ERROR
;

2423  
NGX_CONF_OK
;

2424 
	}
}

2427 
ngx_öt_t


2428 
	$ngx_hâp_Á°cgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

2429 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_Á°cgi_loc_c⁄f_à*
¥ev
)

2431 
u_ch¨
 *
p
;

2432 
size_t
 
size
;

2433 
uöçå_t
 *
code
;

2434 
ngx_uöt_t
 
i
, 
n§c
;

2435 
ngx_¨øy_t
 
hódîs_«mes
;

2436 #i‡(
NGX_HTTP_CACHE
)

2437 
ngx_¨øy_t
 
∑øms_mîged
;

2439 
ngx_hash_key_t
 *
hk
;

2440 
ngx_hash_öô_t
 
hash
;

2441 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

2442 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2443 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2445 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

2446 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

2448 i‡(
¥ev
->
hódîs_hash
.
buckës


2449 #i‡(
NGX_HTTP_CACHE
)

2450 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2451 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

2455 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2456 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

2457 
c⁄f
->
∑øms
 = 
¥ev
->params;

2458 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

2459 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

2461  
NGX_OK
;

2465 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


2466 #i‡(
NGX_HTTP_CACHE
)

2467 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

2471 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

2472  
NGX_OK
;

2475 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2476 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

2477  
NGX_ERROR
;

2480 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2481 i‡(
c⁄f
->
∑øms
 =
NULL
) {

2482  
NGX_ERROR
;

2485 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2486 !
NGX_OK
)

2488  
NGX_ERROR
;

2491 i‡(
c⁄f
->
∑øms_sour˚
) {

2492 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

2493 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

2496 
§c
 = 
NULL
;

2497 
n§c
 = 0;

2500 #i‡(
NGX_HTTP_CACHE
)

2502 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

2503 
ngx_keyvÆ_t
 *
h
;

2504 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

2506 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

2507 (
ngx_hâp_up°ªam_∑øm_t
))

2508 !
NGX_OK
)

2510  
NGX_ERROR
;

2513 
i
 = 0; i < 
n§c
; i++) {

2515 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2516 i‡(
s
 =
NULL
) {

2517  
NGX_ERROR
;

2520 *
s
 = 
§c
[
i
];

2523 
h
 = 
ngx_hâp_Á°cgi_ˇche_hódîs
;

2525 
h
->
key
.
Àn
) {

2527 
§c
 = 
∑øms_mîged
.
ñts
;

2528 
n§c
 = 
∑øms_mîged
.
√…s
;

2530 
i
 = 0; i < 
n§c
; i++) {

2531 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2532 
√xt
;

2536 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

2537 i‡(
s
 =
NULL
) {

2538  
NGX_ERROR
;

2541 
s
->
key
 = 
h
->key;

2542 
s
->
vÆue
 = 
h
->value;

2543 
s
->
skù_em±y
 = 0;

2545 
√xt
:

2547 
h
++;

2550 
§c
 = 
∑øms_mîged
.
ñts
;

2551 
n§c
 = 
∑øms_mîged
.
√…s
;

2556 
i
 = 0; i < 
n§c
; i++) {

2558 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

2559 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

2561 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2562 i‡(
hk
 =
NULL
) {

2563  
NGX_ERROR
;

2566 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

2567 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

2568 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

2569 
hk
->
vÆue
 = (*) 1;

2571 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2576 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2577 (
ngx_hâp_s¸ùt_c›y_code_t
));

2578 i‡(
c›y
 =
NULL
) {

2579  
NGX_ERROR
;

2582 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2583 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2585 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

2586 (
ngx_hâp_s¸ùt_c›y_code_t
));

2587 i‡(
c›y
 =
NULL
) {

2588  
NGX_ERROR
;

2591 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

2592 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

2595 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2596 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

2597 & ~((
uöçå_t
) - 1);

2599 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

2600 i‡(
c›y
 =
NULL
) {

2601  
NGX_ERROR
;

2604 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2605 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

2607 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2608 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2611 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2613 
sc
.
cf
 = cf;

2614 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

2615 
sc
.
Êushes
 = &
c⁄f
->flushes;

2616 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

2617 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

2619 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2620  
NGX_ERROR
;

2623 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2624 i‡(
code
 =
NULL
) {

2625  
NGX_ERROR
;

2628 *
code
 = (
uöçå_t
Ë
NULL
;

2631 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

2632 i‡(
code
 =
NULL
) {

2633  
NGX_ERROR
;

2636 *
code
 = (
uöçå_t
Ë
NULL
;

2639 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

2640 i‡(
code
 =
NULL
) {

2641  
NGX_ERROR
;

2644 *
code
 = (
uöçå_t
Ë
NULL
;

2646 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

2648 
hash
.hash = &
c⁄f
->
hódîs_hash
;

2649 
hash
.
key
 = 
ngx_hash_key_lc
;

2650 
hash
.
max_size
 = 512;

2651 
hash
.
buckë_size
 = 64;

2652 
hash
.
«me
 = "fastcgi_params_hash";

2653 
hash
.
poﬁ
 = 
cf
->pool;

2654 
hash
.
ãmp_poﬁ
 = 
NULL
;

2656  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

2657 
	}
}

2660 
ngx_öt_t


2661 
	$ngx_hâp_Á°cgi_s¸ùt_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2662 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2664 
u_ch¨
 *
p
;

2665 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2666 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2668 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2670 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2672 i‡(
f
 =
NULL
) {

2673  
NGX_ERROR
;

2676 i‡(
f
->
s¸ùt_«me
.
Àn
 == 0

2677 || 
f
->
s¸ùt_«me
.
d©a
[f->s¸ùt_«me.
Àn
 - 1] != '/')

2679 
v
->
Àn
 = 
f
->
s¸ùt_«me
.len;

2680 
v
->
vÆid
 = 1;

2681 
v
->
no_ˇchóbÀ
 = 0;

2682 
v
->
nŸ_found
 = 0;

2683 
v
->
d©a
 = 
f
->
s¸ùt_«me
.data;

2685  
NGX_OK
;

2688 
v
->
Àn
 = 
f
->
s¸ùt_«me
.À¿+ 
Êcf
->
ödex
.len;

2690 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2691 i‡(
v
->
d©a
 =
NULL
) {

2692  
NGX_ERROR
;

2695 
p
 = 
	`ngx_c›y
(
v
->
d©a
, 
f
->
s¸ùt_«me
.d©a, f->s¸ùt_«me.
Àn
);

2696 
	`ngx_mem˝y
(
p
, 
Êcf
->
ödex
.
d©a
, flcf->ödex.
Àn
);

2698  
NGX_OK
;

2699 
	}
}

2702 
ngx_öt_t


2703 
	$ngx_hâp_Á°cgi_∑th_öfo_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2704 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2706 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2707 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
;

2709 
Êcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2711 
f
 = 
	`ngx_hâp_Á°cgi_•lô
(
r
, 
Êcf
);

2713 i‡(
f
 =
NULL
) {

2714  
NGX_ERROR
;

2717 
v
->
Àn
 = 
f
->
∑th_öfo
.len;

2718 
v
->
vÆid
 = 1;

2719 
v
->
no_ˇchóbÀ
 = 0;

2720 
v
->
nŸ_found
 = 0;

2721 
v
->
d©a
 = 
f
->
∑th_öfo
.data;

2723  
NGX_OK
;

2724 
	}
}

2727 
ngx_hâp_Á°cgi_˘x_t
 *

2728 
	$ngx_hâp_Á°cgi_•lô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
)

2730 
ngx_hâp_Á°cgi_˘x_t
 *
f
;

2731 #i‡(
NGX_PCRE
)

2732 
ngx_öt_t
 
n
;

2733 
ˇ±uªs
[(1 + 2) * 3];

2735 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2737 i‡(
f
 =
NULL
) {

2738 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2739 i‡(
f
 =
NULL
) {

2740  
NULL
;

2743 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2746 i‡(
f
->
s¸ùt_«me
.
Àn
) {

2747  
f
;

2750 i‡(
Êcf
->
•lô_ªgex
 =
NULL
) {

2751 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2752  
f
;

2755 
n
 = 
	`ngx_ªgex_exec
(
Êcf
->
•lô_ªgex
, &
r
->
uri
, 
ˇ±uªs
, (1 + 2) * 3);

2757 i‡(
n
 >= 0) {

2758 
f
->
s¸ùt_«me
.
Àn
 = 
ˇ±uªs
[3] - captures[2];

2759 
f
->
s¸ùt_«me
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[2];

2761 
f
->
∑th_öfo
.
Àn
 = 
ˇ±uªs
[5] - captures[4];

2762 
f
->
∑th_öfo
.
d©a
 = 
r
->
uri
.d©®+ 
ˇ±uªs
[4];

2764  
f
;

2767 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2768 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2769  
f
;

2772 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2773 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2774 
n
, &
r
->
uri
, &
Êcf
->
•lô_«me
);

2775  
NULL
;

2779 
f
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_Á°cgi_moduÀ
);

2781 i‡(
f
 =
NULL
) {

2782 
f
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_Á°cgi_˘x_t
));

2783 i‡(
f
 =
NULL
) {

2784  
NULL
;

2787 
	`ngx_hâp_£t_˘x
(
r
, 
f
, 
ngx_hâp_Á°cgi_moduÀ
);

2790 
f
->
s¸ùt_«me
 = 
r
->
uri
;

2792  
f
;

2795 
	}
}

2799 
	$ngx_hâp_Á°cgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2801 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2803 
ngx_uæ_t
 
u
;

2804 
ngx_°r_t
 *
vÆue
, *
uæ
;

2805 
ngx_uöt_t
 
n
;

2806 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2807 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2809 i‡(
Êcf
->
up°ªam
.up°ªam || flcf->
Á°cgi_Àngths
) {

2813 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2815 
˛cf
->
h™dÀr
 = 
ngx_hâp_Á°cgi_h™dÀr
;

2817 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

2818 
˛cf
->
auto_ªdúe˘
 = 1;

2821 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2823 
uæ
 = &
vÆue
[1];

2825 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

2827 i‡(
n
) {

2829 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2831 
sc
.
cf
 = cf;

2832 
sc
.
sour˚
 = 
uæ
;

2833 
sc
.
Àngths
 = &
Êcf
->
Á°cgi_Àngths
;

2834 
sc
.
vÆues
 = &
Êcf
->
Á°cgi_vÆues
;

2835 
sc
.
v¨übÀs
 = 
n
;

2836 
sc
.
com∂ëe_Àngths
 = 1;

2837 
sc
.
com∂ëe_vÆues
 = 1;

2839 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2840  
NGX_CONF_ERROR
;

2843  
NGX_CONF_OK
;

2846 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

2848 
u
.
uæ
 = 
vÆue
[1];

2849 
u
.
no_ªsﬁve
 = 1;

2851 
Êcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

2852 i‡(
Êcf
->
up°ªam
.up°ªam =
NULL
) {

2853  
NGX_CONF_ERROR
;

2856  
NGX_CONF_OK
;

2857 
	}
}

2861 
	$ngx_hâp_Á°cgi_•lô_∑th_öfo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2863 #i‡(
NGX_PCRE
)

2864 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2866 
ngx_°r_t
 *
vÆue
;

2867 
ngx_ªgex_compûe_t
 
rc
;

2868 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

2870 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2872 
Êcf
->
•lô_«me
 = 
vÆue
[1];

2874 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

2876 
rc
.
∑âîn
 = 
vÆue
[1];

2877 
rc
.
poﬁ
 = 
cf
->pool;

2878 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

2879 
rc
.
îr
.
d©a
 = 
îr°r
;

2881 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

2882 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

2883  
NGX_CONF_ERROR
;

2886 i‡(
rc
.
ˇ±uªs
 != 2) {

2887 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2888 "∑âî¿\"%V\" mu° havê2 c≠tuªs", &
vÆue
[1]);

2889  
NGX_CONF_ERROR
;

2892 
Êcf
->
•lô_ªgex
 = 
rc
.
ªgex
;

2894  
NGX_CONF_OK
;

2898 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2899 "\"%V\"Ñequúe†PCREÜibøry", &
cmd
->
«me
);

2900  
NGX_CONF_ERROR
;

2903 
	}
}

2907 
	$ngx_hâp_Á°cgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2909 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2911 
ngx_°r_t
 *
vÆue
;

2912 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2914 i‡(
Êcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


2915 || 
Êcf
->
up°ªam
.
°‹e_Àngths
)

2920 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2922 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2923 
Êcf
->
up°ªam
.
°‹e
 = 0;

2924  
NGX_CONF_OK
;

2927 #i‡(
NGX_HTTP_CACHE
)

2929 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


2930 && 
Êcf
->
up°ªam
.
ˇche
 !
NULL
)

2937 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

2938 
Êcf
->
up°ªam
.
°‹e
 = 1;

2939  
NGX_CONF_OK
;

2943 
vÆue
[1].
Àn
++;

2945 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2947 
sc
.
cf
 = cf;

2948 
sc
.
sour˚
 = &
vÆue
[1];

2949 
sc
.
Àngths
 = &
Êcf
->
up°ªam
.
°‹e_Àngths
;

2950 
sc
.
vÆues
 = &
Êcf
->
up°ªam
.
°‹e_vÆues
;

2951 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

2952 
sc
.
com∂ëe_Àngths
 = 1;

2953 
sc
.
com∂ëe_vÆues
 = 1;

2955 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2956  
NGX_CONF_ERROR
;

2959  
NGX_CONF_OK
;

2960 
	}
}

2963 #i‡(
NGX_HTTP_CACHE
)

2966 
	$ngx_hâp_Á°cgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2968 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

2970 
ngx_°r_t
 *
vÆue
;

2972 
vÆue
 = 
cf
->
¨gs
->
ñts
;

2974 i‡(
Êcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

2978 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

2979 
Êcf
->
up°ªam
.
ˇche
 = 
NULL
;

2980  
NGX_CONF_OK
;

2983 i‡(
Êcf
->
up°ªam
.
°‹e
 > 0 || flcf->up°ªam.
°‹e_Àngths
) {

2987 
Êcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

2988 &
ngx_hâp_Á°cgi_moduÀ
);

2989 i‡(
Êcf
->
up°ªam
.
ˇche
 =
NULL
) {

2990  
NGX_CONF_ERROR
;

2993  
NGX_CONF_OK
;

2994 
	}
}

2998 
	$ngx_hâp_Á°cgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3000 
ngx_hâp_Á°cgi_loc_c⁄f_t
 *
Êcf
 = 
c⁄f
;

3002 
ngx_°r_t
 *
vÆue
;

3003 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3005 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3007 i‡(
Êcf
->
ˇche_key
.
vÆue
.
d©a
) {

3011 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3013 
ccv
.
cf
 = cf;

3014 
ccv
.
vÆue
 = &value[1];

3015 
ccv
.
com∂ex_vÆue
 = &
Êcf
->
ˇche_key
;

3017 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3018  
NGX_CONF_ERROR
;

3021  
NGX_CONF_OK
;

3022 
	}
}

3028 
	$ngx_hâp_Á°cgi_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3030 #i‡(
NGX_FREEBSD
)

3031 
ssize_t
 *
≈
 = 
d©a
;

3033 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3034 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3037 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3039  
NGX_CONF_ERROR
;

3042 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3043 
ssize_t
 *
≈
 = 
d©a
;

3045 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3048 *
≈
 = 0;

3052  
NGX_CONF_OK
;

3053 
	}
}

	@src/http/modules/ngx_http_flv_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 *
ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_comm™d_t
 
	gngx_hâp_Êv_comm™ds
[] = {

16 { 
ngx_°rög
("flv"),

17 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

18 
ngx_hâp_Êv
,

21 
NULL
 },

23 
ngx_nuŒ_comm™d


27 
u_ch¨
 
	gngx_Êv_hódî
[] = "FLV\x1\x5\0\0\0\x9\0\0\0\0";

30 
ngx_hâp_moduÀ_t
 
	gngx_hâp_Êv_moduÀ_˘x
 = {

31 
NULL
,

32 
NULL
,

34 
NULL
,

35 
NULL
,

37 
NULL
,

38 
NULL
,

40 
NULL
,

41 
NULL


45 
ngx_moduÀ_t
 
	gngx_hâp_Êv_moduÀ
 = {

46 
NGX_MODULE_V1
,

47 &
ngx_hâp_Êv_moduÀ_˘x
,

48 
ngx_hâp_Êv_comm™ds
,

49 
NGX_HTTP_MODULE
,

50 
NULL
,

51 
NULL
,

52 
NULL
,

53 
NULL
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NGX_MODULE_V1_PADDING


61 
ngx_öt_t


62 
	$ngx_hâp_Êv_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

64 
u_ch¨
 *
œ°
;

65 
off_t
 
°¨t
, 
Àn
;

66 
size_t
 
roŸ
;

67 
ngx_öt_t
 
rc
;

68 
ngx_uöt_t
 
Àvñ
, 
i
;

69 
ngx_°r_t
 
∑th
, 
vÆue
;

70 
ngx_log_t
 *
log
;

71 
ngx_buf_t
 *
b
;

72 
ngx_chaö_t
 
out
[2];

73 
ngx_›í_fûe_öfo_t
 
of
;

74 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

76 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

77  
NGX_HTTP_NOT_ALLOWED
;

80 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

81  
NGX_DECLINED
;

84 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

86 i‡(
rc
 !
NGX_OK
) {

87  
rc
;

90 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

91 i‡(
œ°
 =
NULL
) {

92  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

95 
log
 = 
r
->
c⁄√˘i⁄
->log;

97 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

99 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

100 "hâ∞Êv fûíame: \"%V\"", &
∑th
);

102 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

104 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

106 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

107 
of
.
dúe˘io
 = 
˛cf
->directio;

108 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

109 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

110 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

111 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

113 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

114  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

118 !
NGX_OK
)

120 
of
.
îr
) {

123  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

125 
NGX_ENOENT
:

126 
NGX_ENOTDIR
:

127 
NGX_ENAMETOOLONG
:

129 
Àvñ
 = 
NGX_LOG_ERR
;

130 
rc
 = 
NGX_HTTP_NOT_FOUND
;

133 
NGX_EACCES
:

134 #i‡(
NGX_HAVE_OPENAT
)

135 
NGX_EMLINK
:

136 
NGX_ELOOP
:

139 
Àvñ
 = 
NGX_LOG_ERR
;

140 
rc
 = 
NGX_HTTP_FORBIDDEN
;

145 
Àvñ
 = 
NGX_LOG_CRIT
;

146 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

151 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

152 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

155  
rc
;

158 i‡(!
of
.
is_fûe
) {

160 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

162 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

165  
NGX_DECLINED
;

168 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

170 
°¨t
 = 0;

171 
Àn
 = 
of
.
size
;

172 
i
 = 1;

174 i‡(
r
->
¨gs
.
Àn
) {

176 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

178 
°¨t
 = 
	`ngx_©oof
(
vÆue
.
d©a
, vÆue.
Àn
);

180 i‡(
°¨t
 =
NGX_ERROR
 || sèπ >
Àn
) {

181 
°¨t
 = 0;

184 i‡(
°¨t
) {

185 
Àn
 = (
ngx_Êv_hódî
Ë- 1 +Üí - 
°¨t
;

186 
i
 = 0;

191 
log
->
a˘i⁄
 = "sending flvÅo client";

193 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

194 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

195 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

197 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

198  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

201 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

202  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

205 i‡(
i
 == 0) {

206 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

207 i‡(
b
 =
NULL
) {

208  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

211 
b
->
pos
 = 
ngx_Êv_hódî
;

212 
b
->
œ°
 = 
ngx_Êv_hódî
 + (ngx_flv_header) - 1;

213 
b
->
mem‹y
 = 1;

215 
out
[0].
buf
 = 
b
;

216 
out
[0].
√xt
 = &out[1];

220 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

221 i‡(
b
 =
NULL
) {

222  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

225 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

226 i‡(
b
->
fûe
 =
NULL
) {

227  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

230 
r
->
Ælow_ønges
 = 1;

232 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

234 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

235  
rc
;

238 
b
->
fûe_pos
 = 
°¨t
;

239 
b
->
fûe_œ°
 = 
of
.
size
;

241 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

242 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

243 
b
->
œ°_ö_chaö
 = 1;

245 
b
->
fûe
->
fd
 = 
of
.fd;

246 
b
->
fûe
->
«me
 = 
∑th
;

247 
b
->
fûe
->
log
 =Üog;

248 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

250 
out
[1].
buf
 = 
b
;

251 
out
[1].
√xt
 = 
NULL
;

253  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[
i
]);

254 
	}
}

258 
	$ngx_hâp_Êv
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

260 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

262 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

263 
˛cf
->
h™dÀr
 = 
ngx_hâp_Êv_h™dÀr
;

265  
NGX_CONF_OK
;

266 
	}
}

	@src/http/modules/ngx_http_geo_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

15 
u_sh‹t
 
	m°¨t
;

16 
u_sh‹t
 
	míd
;

17 } 
	tngx_hâp_geo_ønge_t
;

21 
ngx_ødix_åì_t
 *
	måì
;

22 #i‡(
NGX_HAVE_INET6
)

23 
ngx_ødix_åì_t
 *
	måì6
;

25 } 
	tngx_hâp_geo_åìs_t
;

29 
ngx_hâp_geo_ønge_t
 **
	mlow
;

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

31 } 
	tngx_hâp_geo_high_ønges_t
;

35 
ngx_°r_node_t
 
	m¢
;

36 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

37 
size_t
 
	moff£t
;

38 } 
	tngx_hâp_geo_v¨übÀ_vÆue_node_t
;

42 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mvÆue
;

43 
ngx_°r_t
 *
	m√t
;

44 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

45 
ngx_ødix_åì_t
 *
	måì
;

46 #i‡(
NGX_HAVE_INET6
)

47 
ngx_ødix_åì_t
 *
	måì6
;

49 
ngx_rbåì_t
 
	mrbåì
;

50 
ngx_rbåì_node_t
 
	m£¡öñ
;

51 
ngx_¨øy_t
 *
	m¥oxõs
;

52 
ngx_poﬁ_t
 *
	mpoﬁ
;

53 
ngx_poﬁ_t
 *
	mãmp_poﬁ
;

55 
size_t
 
	md©a_size
;

57 
ngx_°r_t
 
	mö˛ude_«me
;

58 
ngx_uöt_t
 
	mö˛udes
;

59 
ngx_uöt_t
 
	míåõs
;

61 
	mønges
:1;

62 
	moutside_íåõs
:1;

63 
	mÆlow_bö¨y_ö˛ude
:1;

64 
	mbö¨y_ö˛ude
:1;

65 
	m¥oxy_ªcursive
:1;

66 } 
	tngx_hâp_geo_c⁄f_˘x_t
;

71 
ngx_hâp_geo_åìs_t
 
	måìs
;

72 
ngx_hâp_geo_high_ønges_t
 
	mhigh
;

73 } 
	mu
;

75 
ngx_¨øy_t
 *
	m¥oxõs
;

76 
	m¥oxy_ªcursive
:1;

78 
ngx_öt_t
 
	mödex
;

79 } 
	tngx_hâp_geo_˘x_t
;

82 
ngx_öt_t
 
ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

84 
ngx_öt_t
 
ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_hâp_geo_˘x_t
 *
˘x
, 
ngx_addr_t
 *
addr
);

86 *
ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

87 *
ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

88 *
ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

89 
ngx_°r_t
 *
vÆue
);

90 *
ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
,

91 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

92 
ngx_uöt_t
 
ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
,

93 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ö_addr_t
 
°¨t
, in_addr_à
íd
);

94 *
ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

95 
ngx_°r_t
 *
vÆue
);

96 *
ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

97 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
);

98 
ngx_hâp_v¨übÀ_vÆue_t
 *
ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
,

99 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
vÆue
);

100 *
ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
,

101 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_cidr_t
 *
cidr
);

102 
ngx_öt_t
 
ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

103 
ngx_cidr_t
 *
cidr
);

104 *
ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

105 
ngx_°r_t
 *
«me
);

106 
ngx_öt_t
 
ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
,

107 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
);

108 
ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
);

109 
u_ch¨
 *
ngx_hâp_geo_c›y_vÆues
(u_ch¨ *
ba£
, u_ch¨ *
p
,

110 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

113 
ngx_comm™d_t
 
	gngx_hâp_geo_comm™ds
[] = {

115 { 
ngx_°rög
("geo"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

117 
ngx_hâp_geo_block
,

118 
NGX_HTTP_MAIN_CONF_OFFSET
,

120 
NULL
 },

122 
ngx_nuŒ_comm™d


126 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geo_moduÀ_˘x
 = {

127 
NULL
,

128 
NULL
,

130 
NULL
,

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
NULL
,

137 
NULL


141 
ngx_moduÀ_t
 
	gngx_hâp_geo_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_hâp_geo_moduÀ_˘x
,

144 
ngx_hâp_geo_comm™ds
,

145 
NGX_HTTP_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


158 
u_ch¨
 
	mGEORNG
[6];

159 
u_ch¨
 
	mvîsi⁄
;

160 
u_ch¨
 
	m±r_size
;

161 
uöt32_t
 
	mídü¬ess
;

162 
uöt32_t
 
	m¸c32
;

163 } 
	tngx_hâp_geo_hódî_t
;

166 
ngx_hâp_geo_hódî_t
 
	gngx_hâp_geo_hódî
 = {

173 
ngx_öt_t


174 
	$ngx_hâp_geo_cidr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

175 
uöçå_t
 
d©a
)

177 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

179 
ö_addr_t
 
öaddr
;

180 
ngx_addr_t
 
addr
;

181 
sockaddr_ö
 *
sö
;

182 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

183 #i‡(
NGX_HAVE_INET6
)

184 
u_ch¨
 *
p
;

185 
ö6_addr
 *
öaddr6
;

188 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë!
NGX_OK
) {

189 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

190 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
INADDR_NONE
);

191 
d⁄e
;

194 
addr
.
sockaddr
->
ß_Ámûy
) {

196 #i‡(
NGX_HAVE_INET6
)

197 
AF_INET6
:

198 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

199 
p
 = 
öaddr6
->
s6_addr
;

201 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

202 
öaddr
 = 
p
[12] << 24;

203 
öaddr
 +
p
[13] << 16;

204 
öaddr
 +
p
[14] << 8;

205 
öaddr
 +
p
[15];

207 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

208 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

211 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

212 
	`ngx_ødix128åì_föd
(
˘x
->
u
.
åìs
.
åì6
, 
p
);

219 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

220 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

222 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

223 
	`ngx_ødix32åì_föd
(
˘x
->
u
.
åìs
.
åì
, 
öaddr
);

228 
d⁄e
:

230 *
v
 = *
vv
;

232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

233 "hâ∞geo: %v", 
v
);

235  
NGX_OK
;

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_geo_ønge_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

241 
uöçå_t
 
d©a
)

243 
ngx_hâp_geo_˘x_t
 *
˘x
 = (ngx_hâp_geo_˘x_à*Ë
d©a
;

245 
ö_addr_t
 
öaddr
;

246 
ngx_addr_t
 
addr
;

247 
ngx_uöt_t
 
n
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_hâp_geo_ønge_t
 *
ønge
;

250 #i‡(
NGX_HAVE_INET6
)

251 
u_ch¨
 *
p
;

252 
ö6_addr
 *
öaddr6
;

255 *
v
 = *
˘x
->
u
.
high
.
deÁu…_vÆue
;

257 i‡(
	`ngx_hâp_geo_addr
(
r
, 
˘x
, &
addr
Ë=
NGX_OK
) {

259 
addr
.
sockaddr
->
ß_Ámûy
) {

261 #i‡(
NGX_HAVE_INET6
)

262 
AF_INET6
:

263 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

265 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

266 
p
 = 
öaddr6
->
s6_addr
;

268 
öaddr
 = 
p
[12] << 24;

269 
öaddr
 +
p
[13] << 16;

270 
öaddr
 +
p
[14] << 8;

271 
öaddr
 +
p
[15];

274 
öaddr
 = 
INADDR_NONE
;

281 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

282 
öaddr
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

287 
öaddr
 = 
INADDR_NONE
;

290 i‡(
˘x
->
u
.
high
.
low
) {

291 
ønge
 = 
˘x
->
u
.
high
.
low
[
öaddr
 >> 16];

293 i‡(
ønge
) {

294 
n
 = 
öaddr
 & 0xffff;

296 i‡(
n
 >(
ngx_uöt_t
Ë
ønge
->
°¨t


297 && 
n
 <(
ngx_uöt_t
Ë
ønge
->
íd
)

299 *
v
 = *
ønge
->
vÆue
;

302 } (++
ønge
)->
vÆue
);

306 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

307 "hâ∞geo: %v", 
v
);

309  
NGX_OK
;

310 
	}
}

313 
ngx_öt_t


314 
	$ngx_hâp_geo_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

315 
ngx_addr_t
 *
addr
)

317 
ngx_¨øy_t
 *
xfwd
;

319 i‡(
	`ngx_hâp_geo_ªÆ_addr
(
r
, 
˘x
, 
addr
Ë!
NGX_OK
) {

320  
NGX_ERROR
;

323 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

325 i‡(
xfwd
->
√…s
 > 0 && 
˘x
->
¥oxõs
 !
NULL
) {

326 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, 
addr
, 
xfwd
, 
NULL
,

327 
˘x
->
¥oxõs
, ctx->
¥oxy_ªcursive
);

330  
NGX_OK
;

331 
	}
}

334 
ngx_öt_t


335 
	$ngx_hâp_geo_ªÆ_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geo_˘x_t
 *
˘x
,

336 
ngx_addr_t
 *
addr
)

338 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

340 i‡(
˘x
->
ödex
 == -1) {

341 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

342 "hâ∞geÿ°¨ãd: %V", &
r
->
c⁄√˘i⁄
->
addr_ãxt
);

344 
addr
->
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

345 
addr
->
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

348  
NGX_OK
;

351 
v
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
˘x
->
ödex
);

353 i‡(
v
 =
NULL
 || v->
nŸ_found
) {

354 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

357  
NGX_ERROR
;

360 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "hâ∞geÿ°¨ãd: %v", 
v
);

363 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
v
->
d©a
, v->
Àn
Ë=
NGX_OK
) {

364  
NGX_OK
;

367  
NGX_ERROR
;

368 
	}
}

372 
	$ngx_hâp_geo_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

374 *
rv
;

375 
size_t
 
Àn
;

376 
ngx_°r_t
 *
vÆue
, 
«me
;

377 
ngx_uöt_t
 
i
;

378 
ngx_c⁄f_t
 
ßve
;

379 
ngx_poﬁ_t
 *
poﬁ
;

380 
ngx_¨øy_t
 *
a
;

381 
ngx_hâp_v¨übÀ_t
 *
v¨
;

382 
ngx_hâp_geo_˘x_t
 *
geo
;

383 
ngx_hâp_geo_c⁄f_˘x_t
 
˘x
;

384 #i‡(
NGX_HAVE_INET6
)

385 
ö6_addr
 
zîo
;

388 
vÆue
 = 
cf
->
¨gs
->
ñts
;

390 
geo
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_geo_˘x_t
));

391 i‡(
geo
 =
NULL
) {

392  
NGX_CONF_ERROR
;

395 
«me
 = 
vÆue
[1];

397 i‡(
«me
.
d©a
[0] != '$') {

398 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

399 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

400  
NGX_CONF_ERROR
;

403 
«me
.
Àn
--;

404 
«me
.
d©a
++;

406 i‡(
cf
->
¨gs
->
√…s
 == 3) {

408 
geo
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

409 i‡(
geo
->
ödex
 =
NGX_ERROR
) {

410  
NGX_CONF_ERROR
;

413 
«me
 = 
vÆue
[2];

415 i‡(
«me
.
d©a
[0] != '$') {

416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

417 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

418  
NGX_CONF_ERROR
;

421 
«me
.
Àn
--;

422 
«me
.
d©a
++;

425 
geo
->
ödex
 = -1;

428 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

429 i‡(
v¨
 =
NULL
) {

430  
NGX_CONF_ERROR
;

433 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

434 i‡(
poﬁ
 =
NULL
) {

435  
NGX_CONF_ERROR
;

438 
	`ngx_memzîo
(&
˘x
, (
ngx_hâp_geo_c⁄f_˘x_t
));

440 
˘x
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

441 i‡(
˘x
.
ãmp_poﬁ
 =
NULL
) {

442  
NGX_CONF_ERROR
;

445 
	`ngx_rbåì_öô
(&
˘x
.
rbåì
, &˘x.
£¡öñ
, 
ngx_°r_rbåì_ö£π_vÆue
);

447 
˘x
.
poﬁ
 = 
cf
->pool;

448 
˘x
.
d©a_size
 = (
ngx_hâp_geo_hódî_t
)

449 + (
ngx_hâp_v¨übÀ_vÆue_t
)

450 + 0x10000 * (
ngx_hâp_geo_ønge_t
 *);

451 
˘x
.
Ælow_bö¨y_ö˛ude
 = 1;

453 
ßve
 = *
cf
;

454 
cf
->
poﬁ
 =Öool;

455 
cf
->
˘x
 = &ctx;

456 
cf
->
h™dÀr
 = 
ngx_hâp_geo
;

457 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

459 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

461 *
cf
 = 
ßve
;

463 
geo
->
¥oxõs
 = 
˘x
.proxies;

464 
geo
->
¥oxy_ªcursive
 = 
˘x
.proxy_recursive;

466 i‡(
˘x
.
ønges
) {

468 i‡(
˘x
.
high
.
low
 && !˘x.
bö¨y_ö˛ude
) {

469 
i
 = 0; i < 0x10000; i++) {

470 
a
 = (
ngx_¨øy_t
 *Ë
˘x
.
high
.
low
[
i
];

472 i‡(
a
 =
NULL
 ||á->
√…s
 == 0) {

476 
Àn
 = 
a
->
√…s
 * (
ngx_hâp_geo_ønge_t
);

478 
˘x
.
high
.
low
[
i
] = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, 
Àn
 + (*));

479 i‡(
˘x
.
high
.
low
[
i
] =
NULL
) {

480  
NGX_CONF_ERROR
;

483 
	`ngx_mem˝y
(
˘x
.
high
.
low
[
i
], 
a
->
ñts
, 
Àn
);

484 
˘x
.
high
.
low
[
i
][
a
->
√…s
].
vÆue
 = 
NULL
;

485 
˘x
.
d©a_size
 +
Àn
 + (*);

488 i‡(
˘x
.
Ælow_bö¨y_ö˛ude


489 && !
˘x
.
outside_íåõs


490 && 
˘x
.
íåõs
 > 100000

491 && 
˘x
.
ö˛udes
 == 1)

493 
	`ngx_hâp_geo_¸óã_bö¨y_ba£
(&
˘x
);

497 i‡(
˘x
.
high
.
deÁu…_vÆue
 =
NULL
) {

498 
˘x
.
high
.
deÁu…_vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

501 
geo
->
u
.
high
 = 
˘x
.high;

503 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_ønge_v¨übÀ
;

504 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

506 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

507 
	`ngx_de°roy_poﬁ
(
poﬁ
);

510 i‡(
˘x
.
åì
 =
NULL
) {

511 
˘x
.
åì
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

512 i‡(
˘x
.
åì
 =
NULL
) {

513  
NGX_CONF_ERROR
;

517 
geo
->
u
.
åìs
.
åì
 = 
˘x
.tree;

519 #i‡(
NGX_HAVE_INET6
)

520 i‡(
˘x
.
åì6
 =
NULL
) {

521 
˘x
.
åì6
 = 
	`ngx_ødix_åì_¸óã
(
cf
->
poﬁ
, -1);

522 i‡(
˘x
.
åì6
 =
NULL
) {

523  
NGX_CONF_ERROR
;

527 
geo
->
u
.
åìs
.
åì6
 = 
˘x
.tree6;

530 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_geo_cidr_v¨übÀ
;

531 
v¨
->
d©a
 = (
uöçå_t
Ë
geo
;

533 
	`ngx_de°roy_poﬁ
(
˘x
.
ãmp_poﬁ
);

534 
	`ngx_de°roy_poﬁ
(
poﬁ
);

536 i‡(
	`ngx_ødix32åì_ö£π
(
˘x
.
åì
, 0, 0,

537 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

538 =
NGX_ERROR
)

540  
NGX_CONF_ERROR
;

545 #i‡(
NGX_HAVE_INET6
)

546 i‡(
	`ngx_ødix128åì_ö£π
(
˘x
.
åì6
, 
zîo
.
s6_addr
, zero.s6_addr,

547 (
uöçå_t
Ë&
ngx_hâp_v¨übÀ_nuŒ_vÆue
)

548 =
NGX_ERROR
)

550  
NGX_CONF_ERROR
;

555  
rv
;

556 
	}
}

560 
	$ngx_hâp_geo
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

562 *
rv
;

563 
ngx_°r_t
 *
vÆue
;

564 
ngx_cidr_t
 
cidr
;

565 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
;

567 
˘x
 = 
cf
->ctx;

569 
vÆue
 = 
cf
->
¨gs
->
ñts
;

571 i‡(
cf
->
¨gs
->
√…s
 == 1) {

573 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "ranges") == 0) {

575 i‡(
˘x
->
åì


576 #i‡(
NGX_HAVE_INET6
)

577 || 
˘x
->
åì6


581 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

584 
Áûed
;

587 
˘x
->
ønges
 = 1;

589 
rv
 = 
NGX_CONF_OK
;

591 
d⁄e
;

594 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy_recursive") == 0) {

595 
˘x
->
¥oxy_ªcursive
 = 1;

596 
rv
 = 
NGX_CONF_OK
;

597 
d⁄e
;

601 i‡(
cf
->
¨gs
->
√…s
 != 2) {

602 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

604 
Áûed
;

607 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

609 
rv
 = 
	`ngx_hâp_geo_ö˛ude
(
cf
, 
˘x
, &
vÆue
[1]);

611 
d⁄e
;

613 } i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "proxy") == 0) {

615 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

616 
Áûed
;

619 
rv
 = 
	`ngx_hâp_geo_add_¥oxy
(
cf
, 
˘x
, &
cidr
);

621 
d⁄e
;

624 i‡(
˘x
->
ønges
) {

625 
rv
 = 
	`ngx_hâp_geo_ønge
(
cf
, 
˘x
, 
vÆue
);

628 
rv
 = 
	`ngx_hâp_geo_cidr
(
cf
, 
˘x
, 
vÆue
);

631 
d⁄e
:

633 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

635  
rv
;

637 
Áûed
:

639 
	`ngx_ª£t_poﬁ
(
cf
->
poﬁ
);

641  
NGX_CONF_ERROR
;

642 
	}
}

646 
	$ngx_hâp_geo_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

647 
ngx_°r_t
 *
vÆue
)

649 
u_ch¨
 *
p
, *
œ°
;

650 
ö_addr_t
 
°¨t
, 
íd
;

651 
ngx_°r_t
 *
√t
;

652 
ngx_uöt_t
 
dñ
;

654 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

656 i‡(
˘x
->
high
.
deÁu…_vÆue
) {

657 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

659 &
vÆue
[1], 
˘x
->
high
.
deÁu…_vÆue
);

662 
˘x
->
high
.
deÁu…_vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &
vÆue
[1]);

663 i‡(
˘x
->
high
.
deÁu…_vÆue
 =
NULL
) {

664  
NGX_CONF_ERROR
;

667  
NGX_CONF_OK
;

670 i‡(
˘x
->
bö¨y_ö˛ude
) {

671 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

673 
˘x
->
ö˛ude_«me
.
d©a
);

674  
NGX_CONF_ERROR
;

677 i‡(
˘x
->
high
.
low
 =
NULL
) {

678 
˘x
->
high
.
low
 = 
	`ngx_pˇŒoc
(˘x->
poﬁ
,

679 0x10000 * (
ngx_hâp_geo_ønge_t
 *));

680 i‡(
˘x
->
high
.
low
 =
NULL
) {

681  
NGX_CONF_ERROR
;

685 
˘x
->
íåõs
++;

686 
˘x
->
outside_íåõs
 = 1;

688 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

689 
√t
 = &
vÆue
[1];

690 
dñ
 = 1;

693 
√t
 = &
vÆue
[0];

694 
dñ
 = 0;

697 
œ°
 = 
√t
->
d©a
 +Çë->
Àn
;

699 
p
 = 
	`ngx_°æchr
(
√t
->
d©a
, 
œ°
, '-');

701 i‡(
p
 =
NULL
) {

702 
övÆid
;

705 
°¨t
 = 
	`ngx_öë_addr
(
√t
->
d©a
, 
p
 -Çet->data);

707 i‡(
°¨t
 =
INADDR_NONE
) {

708 
övÆid
;

711 
°¨t
 = 
	`¡ohl
(start);

713 
p
++;

715 
íd
 = 
	`ngx_öë_addr
(
p
, 
œ°
 -Ö);

717 i‡(
íd
 =
INADDR_NONE
) {

718 
övÆid
;

721 
íd
 = 
	`¡ohl
(end);

723 i‡(
°¨t
 > 
íd
) {

724 
övÆid
;

727 i‡(
dñ
) {

728 i‡(
	`ngx_hâp_geo_dñëe_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
)) {

729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

730 "nÿaddªs†øngê\"%V\"Åÿdñëe", 
√t
);

733  
NGX_CONF_OK
;

736 
˘x
->
vÆue
 = 
	`ngx_hâp_geo_vÆue
(
cf
, ctx, &value[1]);

738 i‡(
˘x
->
vÆue
 =
NULL
) {

739  
NGX_CONF_ERROR
;

742 
˘x
->
√t
 =Çet;

744  
	`ngx_hâp_geo_add_ønge
(
cf
, 
˘x
, 
°¨t
, 
íd
);

746 
övÆid
:

748 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÑ™gê\"%V\"", 
√t
);

750  
NGX_CONF_ERROR
;

751 
	}
}

757 
	$ngx_hâp_geo_add_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

758 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

760 
ö_addr_t
 
n
;

761 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
;

762 
ngx_¨øy_t
 *
a
;

763 
ngx_hâp_geo_ønge_t
 *
ønge
;

765 
n
 = 
°¨t
;Ç <
íd
;Ç = (n + 0x10000) & 0xffff0000) {

767 
h
 = 
n
 >> 16;

769 i‡(
n
 =
°¨t
) {

770 
s
 = 
n
 & 0xffff;

772 
s
 = 0;

775 i‡((
n
 | 0xffffË> 
íd
) {

776 
e
 = 
íd
 & 0xffff;

779 
e
 = 0xffff;

782 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

784 i‡(
a
 =
NULL
) {

785 
a
 = 
	`ngx_¨øy_¸óã
(
˘x
->
ãmp_poﬁ
, 64,

786 (
ngx_hâp_geo_ønge_t
));

787 i‡(
a
 =
NULL
) {

788  
NGX_CONF_ERROR
;

791 
˘x
->
high
.
low
[
h
] = (
ngx_hâp_geo_ønge_t
 *Ë
a
;

794 
i
 = 
a
->
√…s
;

795 
ønge
 = 
a
->
ñts
;

797 
i
) {

799 
i
--;

801 i‡(
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
) {

805 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
íd
) {

809 
ønge
 = 
	`ngx_¨øy_push
(
a
);

810 i‡(
ønge
 =
NULL
) {

811  
NGX_CONF_ERROR
;

814 
ønge
 = 
a
->
ñts
;

816 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

817 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

819 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

820 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

821 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

823 
√xt
;

826 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


827 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

829 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

831 
˘x
->
√t
, ctx->
vÆue
, 
ønge
[
i
].value);

833 
ønge
[
i
].
vÆue
 = 
˘x
->value;

835 
√xt
;

838 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


839 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

843 
ønge
 = 
	`ngx_¨øy_push
(
a
);

844 i‡(
ønge
 =
NULL
) {

845  
NGX_CONF_ERROR
;

848 
ønge
 = 
	`ngx_¨øy_push
(
a
);

849 i‡(
ønge
 =
NULL
) {

850  
NGX_CONF_ERROR
;

853 
ønge
 = 
a
->
ñts
;

855 
	`ngx_memmove
(&
ønge
[
i
 + 3], &range[i + 1],

856 (
a
->
√…s
 - 3 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

858 
ønge
[
i
 + 2].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

859 
ønge
[
i
 + 2].
íd
 =Ñange[i].end;

860 
ønge
[
i
 + 2].
vÆue
 =Ñange[i].value;

862 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

863 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

864 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

866 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

868 
√xt
;

871 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


872 && 
e
 < (
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

876 
ønge
 = 
	`ngx_¨øy_push
(
a
);

877 i‡(
ønge
 =
NULL
) {

878  
NGX_CONF_ERROR
;

881 
ønge
 = 
a
->
ñts
;

883 
	`ngx_memmove
(&
ønge
[
i
 + 1], &range[i],

884 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

886 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë(
e
 + 1);

888 
ønge
[
i
].
°¨t
 = (
u_sh‹t
Ë
s
;

889 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë
e
;

890 
ønge
[
i
].
vÆue
 = 
˘x
->value;

892 
√xt
;

895 i‡(
s
 > (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


896 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

900 
ønge
 = 
	`ngx_¨øy_push
(
a
);

901 i‡(
ønge
 =
NULL
) {

902  
NGX_CONF_ERROR
;

905 
ønge
 = 
a
->
ñts
;

907 
	`ngx_memmove
(&
ønge
[
i
 + 2], &range[i + 1],

908 (
a
->
√…s
 - 2 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

910 
ønge
[
i
 + 1].
°¨t
 = (
u_sh‹t
Ë
s
;

911 
ønge
[
i
 + 1].
íd
 = (
u_sh‹t
Ë
e
;

912 
ønge
[
i
 + 1].
vÆue
 = 
˘x
->value;

914 
ønge
[
i
].
íd
 = (
u_sh‹t
Ë(
s
 - 1);

916 
√xt
;

919 
s
 = (
ngx_uöt_t
Ë
ønge
[
i
].
°¨t
;

920 
e
 = (
ngx_uöt_t
Ë
ønge
[
i
].
íd
;

922 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

924 
˘x
->
√t
,

925 
h
 >> 8, h & 0xff, 
s
 >> 8, s & 0xff,

926 
h
 >> 8, h & 0xff, 
e
 >> 8,É & 0xff);

928  
NGX_CONF_ERROR
;

933 
ønge
 = 
	`ngx_¨øy_push
(
a
);

934 i‡(
ønge
 =
NULL
) {

935  
NGX_CONF_ERROR
;

938 
ønge
->
°¨t
 = (
u_sh‹t
Ë
s
;

939 
ønge
->
íd
 = (
u_sh‹t
Ë
e
;

940 
ønge
->
vÆue
 = 
˘x
->value;

942 
√xt
:

947  
NGX_CONF_OK
;

948 
	}
}

951 
ngx_uöt_t


952 
	$ngx_hâp_geo_dñëe_ønge
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

953 
ö_addr_t
 
°¨t
, in_addr_à
íd
)

955 
ö_addr_t
 
n
;

956 
ngx_uöt_t
 
h
, 
i
, 
s
, 
e
, 
w¨n
;

957 
ngx_¨øy_t
 *
a
;

958 
ngx_hâp_geo_ønge_t
 *
ønge
;

960 
w¨n
 = 0;

962 
n
 = 
°¨t
;Ç <
íd
;Ç += 0x10000) {

964 
h
 = 
n
 >> 16;

966 i‡(
n
 =
°¨t
) {

967 
s
 = 
n
 & 0xffff;

969 
s
 = 0;

972 i‡((
n
 | 0xffffË> 
íd
) {

973 
e
 = 
íd
 & 0xffff;

976 
e
 = 0xffff;

979 
a
 = (
ngx_¨øy_t
 *Ë
˘x
->
high
.
low
[
h
];

981 i‡(
a
 =
NULL
) {

982 
w¨n
 = 1;

986 
ønge
 = 
a
->
ñts
;

987 
i
 = 0; i < 
a
->
√…s
; i++) {

989 i‡(
s
 =(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


990 && 
e
 =(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

992 
	`ngx_memmove
(&
ønge
[
i
], &range[i + 1],

993 (
a
->
√…s
 - 1 - 
i
Ë* (
ngx_hâp_geo_ønge_t
));

995 
a
->
√…s
--;

1000 i‡(
s
 !(
ngx_uöt_t
Ë
ønge
[
i
].
°¨t


1001 && 
e
 !(
ngx_uöt_t
Ë
ønge
[
i
].
íd
)

1006 
w¨n
 = 1;

1010  
w¨n
;

1011 
	}
}

1015 
	$ngx_hâp_geo_cidr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1016 
ngx_°r_t
 *
vÆue
)

1018 *
rv
;

1019 
ngx_öt_t
 
rc
, 
dñ
;

1020 
ngx_°r_t
 *
√t
;

1021 
ngx_cidr_t
 
cidr
;

1023 i‡(
˘x
->
åì
 =
NULL
) {

1024 
˘x
->
åì
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1025 i‡(
˘x
->
åì
 =
NULL
) {

1026  
NGX_CONF_ERROR
;

1030 #i‡(
NGX_HAVE_INET6
)

1031 i‡(
˘x
->
åì6
 =
NULL
) {

1032 
˘x
->
åì6
 = 
	`ngx_ødix_åì_¸óã
(˘x->
poﬁ
, -1);

1033 i‡(
˘x
->
åì6
 =
NULL
) {

1034  
NGX_CONF_ERROR
;

1039 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

1040 
cidr
.
Ámûy
 = 
AF_INET
;

1041 
cidr
.
u
.
ö
.
addr
 = 0;

1042 
cidr
.
u
.
ö
.
mask
 = 0;

1044 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1046 i‡(
rv
 !
NGX_CONF_OK
) {

1047  
rv
;

1050 #i‡(
NGX_HAVE_INET6
)

1051 
cidr
.
Ámûy
 = 
AF_INET6
;

1052 
	`ngx_memzîo
(&
cidr
.
u
.
ö6
, (
ngx_ö6_cidr_t
));

1054 
rv
 = 
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], &value[0]);

1056 i‡(
rv
 !
NGX_CONF_OK
) {

1057  
rv
;

1061  
NGX_CONF_OK
;

1064 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "delete") == 0) {

1065 
√t
 = &
vÆue
[1];

1066 
dñ
 = 1;

1069 
√t
 = &
vÆue
[0];

1070 
dñ
 = 0;

1073 i‡(
	`ngx_hâp_geo_cidr_vÆue
(
cf
, 
√t
, &
cidr
Ë!
NGX_OK
) {

1074  
NGX_CONF_ERROR
;

1077 i‡(
cidr
.
Ámûy
 =
AF_INET
) {

1078 
cidr
.
u
.
ö
.
addr
 = 
	`¡ohl
(cidr.u.in.addr);

1079 
cidr
.
u
.
ö
.
mask
 = 
	`¡ohl
(cidr.u.in.mask);

1082 i‡(
dñ
) {

1083 
cidr
.
Ámûy
) {

1085 #i‡(
NGX_HAVE_INET6
)

1086 
AF_INET6
:

1087 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1088 
cidr
.
u
.
ö6
.
addr
.
s6_addr
,

1089 
cidr
.
u
.
ö6
.
mask
.
s6_addr
);

1094 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
, 
cidr
.
u
.
ö
.
addr
,

1095 
cidr
.
u
.
ö
.
mask
);

1099 i‡(
rc
 !
NGX_OK
) {

1100 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1101 "nÿ√tw‹k \"%V\"Åÿdñëe", 
√t
);

1104  
NGX_CONF_OK
;

1107  
	`ngx_hâp_geo_cidr_add
(
cf
, 
˘x
, &
cidr
, &
vÆue
[1], 
√t
);

1108 
	}
}

1112 
	$ngx_hâp_geo_cidr_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1113 
ngx_cidr_t
 *
cidr
, 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
√t
)

1115 
ngx_öt_t
 
rc
;

1116 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ﬁd
;

1118 
vÆ
 = 
	`ngx_hâp_geo_vÆue
(
cf
, 
˘x
, 
vÆue
);

1120 i‡(
vÆ
 =
NULL
) {

1121  
NGX_CONF_ERROR
;

1124 
cidr
->
Ámûy
) {

1126 #i‡(
NGX_HAVE_INET6
)

1127 
AF_INET6
:

1128 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1129 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1130 (
uöçå_t
Ë
vÆ
);

1132 i‡(
rc
 =
NGX_OK
) {

1133  
NGX_CONF_OK
;

1136 i‡(
rc
 =
NGX_ERROR
) {

1137  
NGX_CONF_ERROR
;

1142 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1143 
	`ngx_ødix128åì_föd
(
˘x
->
åì6
,

1144 
cidr
->
u
.
ö6
.
addr
.
s6_addr
);

1146 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1148 
√t
, 
vÆ
, 
ﬁd
);

1150 
rc
 = 
	`ngx_ødix128åì_dñëe
(
˘x
->
åì6
,

1151 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1152 
cidr
->
u
.
ö6
.
mask
.
s6_addr
);

1154 i‡(
rc
 =
NGX_ERROR
) {

1155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1156  
NGX_CONF_ERROR
;

1159 
rc
 = 
	`ngx_ødix128åì_ö£π
(
˘x
->
åì6
, 
cidr
->
u
.
ö6
.
addr
.
s6_addr
,

1160 
cidr
->
u
.
ö6
.
mask
.
s6_addr
,

1161 (
uöçå_t
Ë
vÆ
);

1167 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1168 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1170 i‡(
rc
 =
NGX_OK
) {

1171  
NGX_CONF_OK
;

1174 i‡(
rc
 =
NGX_ERROR
) {

1175  
NGX_CONF_ERROR
;

1180 
ﬁd
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1181 
	`ngx_ødix32åì_föd
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
);

1183 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1185 
√t
, 
vÆ
, 
ﬁd
);

1187 
rc
 = 
	`ngx_ødix32åì_dñëe
(
˘x
->
åì
,

1188 
cidr
->
u
.
ö
.
addr
, cidr->u.ö.
mask
);

1190 i‡(
rc
 =
NGX_ERROR
) {

1191 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÑadixÅree");

1192  
NGX_CONF_ERROR
;

1195 
rc
 = 
	`ngx_ødix32åì_ö£π
(
˘x
->
åì
, 
cidr
->
u
.
ö
.
addr
,

1196 
cidr
->
u
.
ö
.
mask
, (
uöçå_t
Ë
vÆ
);

1201 i‡(
rc
 =
NGX_OK
) {

1202  
NGX_CONF_OK
;

1205  
NGX_CONF_ERROR
;

1206 
	}
}

1209 
ngx_hâp_v¨übÀ_vÆue_t
 *

1210 
	$ngx_hâp_geo_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1211 
ngx_°r_t
 *
vÆue
)

1213 
uöt32_t
 
hash
;

1214 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
;

1215 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1217 
hash
 = 
	`ngx_¸c32_l⁄g
(
vÆue
->
d©a
, vÆue->
Àn
);

1219 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1220 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, 
vÆue
, 
hash
);

1222 i‡(
gvvn
) {

1223  
gvvn
->
vÆue
;

1226 
vÆ
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1227 i‡(
vÆ
 =
NULL
) {

1228  
NULL
;

1231 
vÆ
->
Àn
 = 
vÆue
->len;

1232 
vÆ
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
poﬁ
, 
vÆue
);

1233 i‡(
vÆ
->
d©a
 =
NULL
) {

1234  
NULL
;

1237 
vÆ
->
vÆid
 = 1;

1238 
vÆ
->
no_ˇchóbÀ
 = 0;

1239 
vÆ
->
nŸ_found
 = 0;

1241 
gvvn
 = 
	`ngx_∑Œoc
(
˘x
->
ãmp_poﬁ
,

1242 (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
));

1243 i‡(
gvvn
 =
NULL
) {

1244  
NULL
;

1247 
gvvn
->
¢
.
node
.
key
 = 
hash
;

1248 
gvvn
->
¢
.
°r
.
Àn
 = 
vÆ
->len;

1249 
gvvn
->
¢
.
°r
.
d©a
 = 
vÆ
->data;

1250 
gvvn
->
vÆue
 = 
vÆ
;

1251 
gvvn
->
off£t
 = 0;

1253 
	`ngx_rbåì_ö£π
(&
˘x
->
rbåì
, &
gvvn
->
¢
.
node
);

1255 
˘x
->
d©a_size
 +
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vÆue
->
Àn
,

1258  
vÆ
;

1259 
	}
}

1263 
	$ngx_hâp_geo_add_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1264 
ngx_cidr_t
 *
cidr
)

1266 
ngx_cidr_t
 *
c
;

1268 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1269 
˘x
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(˘x->
poﬁ
, 4, (
ngx_cidr_t
));

1270 i‡(
˘x
->
¥oxõs
 =
NULL
) {

1271  
NGX_CONF_ERROR
;

1275 
c
 = 
	`ngx_¨øy_push
(
˘x
->
¥oxõs
);

1276 i‡(
c
 =
NULL
) {

1277  
NGX_CONF_ERROR
;

1280 *
c
 = *
cidr
;

1282  
NGX_CONF_OK
;

1283 
	}
}

1286 
ngx_öt_t


1287 
	$ngx_hâp_geo_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

1289 
ngx_öt_t
 
rc
;

1291 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

1292 
cidr
->
Ámûy
 = 
AF_INET
;

1293 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

1294 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

1296  
NGX_OK
;

1299 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

1301 i‡(
rc
 =
NGX_ERROR
) {

1302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

1303  
NGX_ERROR
;

1306 i‡(
rc
 =
NGX_DONE
) {

1307 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1308 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

1311  
NGX_OK
;

1312 
	}
}

1316 
	$ngx_hâp_geo_ö˛ude
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1317 
ngx_°r_t
 *
«me
)

1319 *
rv
;

1320 
ngx_°r_t
 
fûe
;

1322 
fûe
.
Àn
 = 
«me
->len + 4;

1323 
fûe
.
d©a
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, 
«me
->
Àn
 + 5);

1324 i‡(
fûe
.
d©a
 =
NULL
) {

1325  
NGX_CONF_ERROR
;

1328 
	`ngx_•rötf
(
fûe
.
d©a
, "%V.bö%Z", 
«me
);

1330 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
fûe
, 1Ë!
NGX_OK
) {

1331  
NGX_CONF_ERROR
;

1334 i‡(
˘x
->
ønges
) {

1335 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1337 
	`ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
cf
, 
˘x
, &
fûe
)) {

1338 
NGX_OK
:

1339  
NGX_CONF_OK
;

1340 
NGX_ERROR
:

1341  
NGX_CONF_ERROR
;

1347 
fûe
.
Àn
 -= 4;

1348 
fûe
.
d©a
[fûe.
Àn
] = '\0';

1350 
˘x
->
ö˛ude_«me
 = 
fûe
;

1352 i‡(
˘x
->
outside_íåõs
) {

1353 
˘x
->
Ælow_bö¨y_ö˛ude
 = 0;

1356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cf
->
log
, 0, "ö˛udê%s", 
fûe
.
d©a
);

1358 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, &
fûe
);

1360 
˘x
->
ö˛udes
++;

1361 
˘x
->
outside_íåõs
 = 0;

1363  
rv
;

1364 
	}
}

1367 
ngx_öt_t


1368 
	$ngx_hâp_geo_ö˛ude_bö¨y_ba£
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
,

1369 
ngx_°r_t
 *
«me
)

1371 
u_ch¨
 *
ba£
, 
ch
;

1372 
time_t
 
mtime
;

1373 
size_t
 
size
, 
Àn
;

1374 
ssize_t
 
n
;

1375 
uöt32_t
 
¸c32
;

1376 
ngx_îr_t
 
îr
;

1377 
ngx_öt_t
 
rc
;

1378 
ngx_uöt_t
 
i
;

1379 
ngx_fûe_t
 
fûe
;

1380 
ngx_fûe_öfo_t
 
fi
;

1381 
ngx_hâp_geo_ønge_t
 *
ønge
, **
ønges
;

1382 
ngx_hâp_geo_hódî_t
 *
hódî
;

1383 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1385 
	`ngx_memzîo
(&
fûe
, (
ngx_fûe_t
));

1386 
fûe
.
«me
 = *name;

1387 
fûe
.
log
 = 
cf
->log;

1389 
fûe
.
fd
 = 
	`ngx_›í_fûe
(
«me
->
d©a
, 
NGX_FILE_RDONLY
, 0, 0);

1390 i‡(
fûe
.
fd
 =
NGX_INVALID_FILE
) {

1391 
îr
 = 
ngx_î∫o
;

1392 i‡(
îr
 !
NGX_ENOENT
) {

1393 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
îr
,

1394 
ngx_›í_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1396  
NGX_DECLINED
;

1399 i‡(
˘x
->
outside_íåõs
) {

1400 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1402 
«me
->
d©a
);

1403 
rc
 = 
NGX_ERROR
;

1404 
d⁄e
;

1407 i‡(
˘x
->
bö¨y_ö˛ude
) {

1408 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1410 
«me
->
d©a
, 
˘x
->
ö˛ude_«me
.data);

1411 
rc
 = 
NGX_ERROR
;

1412 
d⁄e
;

1415 i‡(
	`ngx_fd_öfo
(
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

1416 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1417 
ngx_fd_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1418 
Áûed
;

1421 
size
 = (
size_t
Ë
	`ngx_fûe_size
(&
fi
);

1422 
mtime
 = 
	`ngx_fûe_mtime
(&
fi
);

1424 
ch
 = 
«me
->
d©a
[«me->
Àn
 - 4];

1425 
«me
->
d©a
[«me->
Àn
 - 4] = '\0';

1427 i‡(
	`ngx_fûe_öfo
(
«me
->
d©a
, &
fi
Ë=
NGX_FILE_ERROR
) {

1428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1429 
ngx_fûe_öfo_n
 " \"%s\" faûed", 
«me
->
d©a
);

1430 
Áûed
;

1433 
«me
->
d©a
[«me->
Àn
 - 4] = 
ch
;

1435 i‡(
mtime
 < 
	`ngx_fûe_mtime
(&
fi
)) {

1436 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1437 "°Æêbö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1438 
Áûed
;

1441 
ba£
 = 
	`ngx_∑Œoc
(
˘x
->
poﬁ
, 
size
);

1442 i‡(
ba£
 =
NULL
) {

1443 
Áûed
;

1446 
n
 = 
	`ngx_ªad_fûe
(&
fûe
, 
ba£
, 
size
, 0);

1448 i‡(
n
 =
NGX_ERROR
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 
ngx_î∫o
,

1450 
ngx_ªad_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1451 
Áûed
;

1454 i‡((
size_t
Ë
n
 !
size
) {

1455 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_CRIT
, 
cf
, 0,

1456 
ngx_ªad_fûe_n
 " \"%s\"Ñeturned only %z bytes instead of %z",

1457 
«me
->
d©a
, 
n
, 
size
);

1458 
Áûed
;

1461 
hódî
 = (
ngx_hâp_geo_hódî_t
 *Ë
ba£
;

1463 i‡(
size
 < 16 || 
	`ngx_memcmp
(&
ngx_hâp_geo_hódî
, 
hódî
, 12) != 0) {

1464 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1465 "öcom∑tibÀ bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1466 
Áûed
;

1469 
	`ngx_¸c32_öô
(
¸c32
);

1471 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë(
ba£
 + (
ngx_hâp_geo_hódî_t
));

1473 
vv
->
d©a
) {

1474 
Àn
 = 
	`ngx_Æign
((
ngx_hâp_v¨übÀ_vÆue_t
Ë+ 
vv
->len,

1476 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, 
Àn
);

1477 
vv
->
d©a
 +(
size_t
Ë
ba£
;

1478 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë((
u_ch¨
 *Ëvv + 
Àn
);

1480 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
vv
, (
ngx_hâp_v¨übÀ_vÆue_t
));

1481 
vv
++;

1483 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
vv
;

1485 
i
 = 0; i < 0x10000; i++) {

1486 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë&
ønges
[
i
], (*));

1487 i‡(
ønges
[
i
]) {

1488 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *)

1489 ((
u_ch¨
 *Ë
ønges
[
i
] + (
size_t
Ë
ba£
);

1493 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë&
ønges
[0x10000];

1495 (
u_ch¨
 *Ë
ønge
 < 
ba£
 + 
size
) {

1496 
ønge
->
vÆue
) {

1497 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
,

1498 (
ngx_hâp_geo_ønge_t
));

1499 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *)

1500 ((
u_ch¨
 *Ë
ønge
->
vÆue
 + (
size_t
Ë
ba£
);

1501 
ønge
++;

1503 
	`ngx_¸c32_upd©e
(&
¸c32
, (
u_ch¨
 *Ë
ønge
, (*));

1504 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë((
u_ch¨
 *)Ñange + (*));

1507 
	`ngx_¸c32_föÆ
(
¸c32
);

1509 i‡(
¸c32
 !
hódî
->crc32) {

1510 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1511 "CRC32 mism©ch i¿bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1512 
Áûed
;

1515 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_NOTICE
, 
cf
, 0,

1516 "usög bö¨y geÿøngêba£ \"%s\"", 
«me
->
d©a
);

1518 
˘x
->
ö˛ude_«me
 = *
«me
;

1519 
˘x
->
bö¨y_ö˛ude
 = 1;

1520 
˘x
->
high
.
low
 = 
ønges
;

1521 
rc
 = 
NGX_OK
;

1523 
d⁄e
;

1525 
Áûed
:

1527 
rc
 = 
NGX_DECLINED
;

1529 
d⁄e
:

1531 i‡(
	`ngx_˛o£_fûe
(
fûe
.
fd
Ë=
NGX_FILE_ERROR
) {

1532 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 
ngx_î∫o
,

1533 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
«me
->
d©a
);

1536  
rc
;

1537 
	}
}

1541 
	$ngx_hâp_geo_¸óã_bö¨y_ba£
(
ngx_hâp_geo_c⁄f_˘x_t
 *
˘x
)

1543 
u_ch¨
 *
p
;

1544 
uöt32_t
 
hash
;

1545 
ngx_°r_t
 
s
;

1546 
ngx_uöt_t
 
i
;

1547 
ngx_fûe_m≠pög_t
 
fm
;

1548 
ngx_hâp_geo_ønge_t
 *
r
, *
ønge
, **
ønges
;

1549 
ngx_hâp_geo_hódî_t
 *
hódî
;

1550 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1552 
fm
.
«me
 = 
	`ngx_≤Æloc
(
˘x
->
ãmp_poﬁ
, ctx->
ö˛ude_«me
.
Àn
 + 5);

1553 i‡(
fm
.
«me
 =
NULL
) {

1557 
	`ngx_•rötf
(
fm
.
«me
, "%V.bö%Z", &
˘x
->
ö˛ude_«me
);

1559 
fm
.
size
 = 
˘x
->
d©a_size
;

1560 
fm
.
log
 = 
˘x
->
poﬁ
->log;

1562 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
fm
.
log
, 0,

1563 "¸ótög bö¨y geÿøngêba£ \"%s\"", 
fm
.
«me
);

1565 i‡(
	`ngx_¸óã_fûe_m≠pög
(&
fm
Ë!
NGX_OK
) {

1569 
p
 = 
	`ngx_˝ymem
(
fm
.
addr
, &
ngx_hâp_geo_hódî
,

1570 (
ngx_hâp_geo_hódî_t
));

1572 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
fm
.
addr
,Ö, 
˘x
->
rbåì
.
roŸ
,

1573 
˘x
->
rbåì
.
£¡öñ
);

1575 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1577 
ønges
 = (
ngx_hâp_geo_ønge_t
 **Ë
p
;

1579 
p
 +0x10000 * (
ngx_hâp_geo_ønge_t
 *);

1581 
i
 = 0; i < 0x10000; i++) {

1582 
r
 = 
˘x
->
high
.
low
[
i
];

1583 i‡(
r
 =
NULL
) {

1587 
ønge
 = (
ngx_hâp_geo_ønge_t
 *Ë
p
;

1588 
ønges
[
i
] = (
ngx_hâp_geo_ønge_t
 *Ë(
p
 - (
u_ch¨
 *Ë
fm
.
addr
);

1591 
s
.
Àn
 = 
r
->
vÆue
->len;

1592 
s
.
d©a
 = 
r
->
vÆue
->data;

1593 
hash
 = 
	`ngx_¸c32_l⁄g
(
s
.
d©a
, s.
Àn
);

1594 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *)

1595 
	`ngx_°r_rbåì_lookup
(&
˘x
->
rbåì
, &
s
, 
hash
);

1597 
ønge
->
vÆue
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
gvvn
->
off£t
;

1598 
ønge
->
°¨t
 = 
r
->start;

1599 
ønge
->
íd
 = 
r
->end;

1600 
ønge
++;

1602 } (++
r
)->
vÆue
);

1604 
ønge
->
vÆue
 = 
NULL
;

1606 
p
 = (
u_ch¨
 *Ë
ønge
 + (*);

1609 
hódî
 = 
fm
.
addr
;

1610 
hódî
->
¸c32
 = 
	`ngx_¸c32_l⁄g
((
u_ch¨
 *Ë
fm
.
addr


1611 + (
ngx_hâp_geo_hódî_t
),

1612 
fm
.
size
 - (
ngx_hâp_geo_hódî_t
));

1614 
	`ngx_˛o£_fûe_m≠pög
(&
fm
);

1615 
	}
}

1618 
u_ch¨
 *

1619 
	$ngx_hâp_geo_c›y_vÆues
(
u_ch¨
 *
ba£
, u_ch¨ *
p
, 
ngx_rbåì_node_t
 *
node
,

1620 
ngx_rbåì_node_t
 *
£¡öñ
)

1622 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1623 
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *
gvvn
;

1625 i‡(
node
 =
£¡öñ
) {

1626  
p
;

1629 
gvvn
 = (
ngx_hâp_geo_v¨übÀ_vÆue_node_t
 *Ë
node
;

1630 
gvvn
->
off£t
 = 
p
 - 
ba£
;

1632 
vv
 = (
ngx_hâp_v¨übÀ_vÆue_t
 *Ë
p
;

1633 *
vv
 = *
gvvn
->
vÆue
;

1634 
p
 +(
ngx_hâp_v¨übÀ_vÆue_t
);

1635 
vv
->
d©a
 = (
u_ch¨
 *Ë(
p
 - 
ba£
);

1637 
p
 = 
	`ngx_˝ymem
’, 
gvvn
->
¢
.
°r
.
d©a
, gvvn->¢.°r.
Àn
);

1639 
p
 = 
	`ngx_Æign_±r
(p, (*));

1641 
p
 = 
	`ngx_hâp_geo_c›y_vÆues
(
ba£
,Ö, 
node
->
À·
, 
£¡öñ
);

1643  
	`ngx_hâp_geo_c›y_vÆues
(
ba£
, 
p
, 
node
->
right
, 
£¡öñ
);

1644 
	}
}

	@src/http/modules/ngx_http_geoip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<GeoIP.h
>

13 
	~<GeoIPCôy.h
>

16 
	#NGX_GEOIP_COUNTRY_CODE
 0

	)

17 
	#NGX_GEOIP_COUNTRY_CODE3
 1

	)

18 
	#NGX_GEOIP_COUNTRY_NAME
 2

	)

22 
GeoIP
 *
	mcou¡ry
;

23 
GeoIP
 *
	m‹g
;

24 
GeoIP
 *
	mcôy
;

25 
ngx_¨øy_t
 *
	m¥oxõs
;

26 
ngx_Êag_t
 
	m¥oxy_ªcursive
;

27 #i‡(
NGX_HAVE_GEOIP_V6
)

28 
	mcou¡ry_v6
:1;

29 
	m‹g_v6
:1;

30 
	mcôy_v6
:1;

32 } 
	tngx_hâp_geoù_c⁄f_t
;

36 
ngx_°r_t
 *
	m«me
;

37 
uöçå_t
 
	md©a
;

38 } 
	tngx_hâp_geoù_v¨_t
;

41 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_±
)(
	tGeoIP
 *,

42 
	tu_l⁄g
 
	taddr
);

45 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
	gngx_hâp_geoù_cou¡ry_fun˘i⁄s
[] = {

46 
GeoIP_cou¡ry_code_by_ùnum
,

47 
GeoIP_cou¡ry_code3_by_ùnum
,

48 
GeoIP_cou¡ry_«me_by_ùnum
,

52 #i‡(
NGX_HAVE_GEOIP_V6
)

54 c⁄° *(*
	tngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
)(
	tGeoIP
 *,

55 
	tgeoùv6_t
 
	taddr
);

58 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
	gngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[] = {

59 
GeoIP_cou¡ry_code_by_ùnum_v6
,

60 
GeoIP_cou¡ry_code3_by_ùnum_v6
,

61 
GeoIP_cou¡ry_«me_by_ùnum_v6
,

67 
ngx_öt_t
 
ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
GeoIPRec‹d
 *
ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
);

81 
ngx_öt_t
 
ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

82 *
ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

83 *
ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

84 *
ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

85 *
c⁄f
);

86 *
ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

87 *
c⁄f
);

88 *
ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

89 *
c⁄f
);

90 *
ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

91 *
c⁄f
);

92 
ngx_öt_t
 
ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
,

93 
ngx_cidr_t
 *
cidr
);

94 
ngx_hâp_geoù_˛ónup
(*
d©a
);

97 
ngx_comm™d_t
 
	gngx_hâp_geoù_comm™ds
[] = {

99 { 
ngx_°rög
("geoip_country"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

101 
ngx_hâp_geoù_cou¡ry
,

102 
NGX_HTTP_MAIN_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("geoip_org"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

108 
ngx_hâp_geoù_‹g
,

109 
NGX_HTTP_MAIN_CONF_OFFSET
,

111 
NULL
 },

113 { 
ngx_°rög
("geoip_city"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE12
,

115 
ngx_hâp_geoù_côy
,

116 
NGX_HTTP_MAIN_CONF_OFFSET
,

118 
NULL
 },

120 { 
ngx_°rög
("geoip_proxy"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_hâp_geoù_¥oxy
,

123 
NGX_HTTP_MAIN_CONF_OFFSET
,

125 
NULL
 },

127 { 
ngx_°rög
("geoip_proxy_recursive"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_FLAG
,

129 
ngx_c⁄f_£t_Êag_¶Ÿ
,

130 
NGX_HTTP_MAIN_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_geoù_c⁄f_t
, 
¥oxy_ªcursive
),

132 
NULL
 },

134 
ngx_nuŒ_comm™d


138 
ngx_hâp_moduÀ_t
 
	gngx_hâp_geoù_moduÀ_˘x
 = {

139 
ngx_hâp_geoù_add_v¨übÀs
,

140 
NULL
,

142 
ngx_hâp_geoù_¸óã_c⁄f
,

143 
ngx_hâp_geoù_öô_c⁄f
,

145 
NULL
,

146 
NULL
,

148 
NULL
,

149 
NULL


153 
ngx_moduÀ_t
 
	gngx_hâp_geoù_moduÀ
 = {

154 
NGX_MODULE_V1
,

155 &
ngx_hâp_geoù_moduÀ_˘x
,

156 
ngx_hâp_geoù_comm™ds
,

157 
NGX_HTTP_MODULE
,

158 
NULL
,

159 
NULL
,

160 
NULL
,

161 
NULL
,

162 
NULL
,

163 
NULL
,

164 
NULL
,

165 
NGX_MODULE_V1_PADDING


169 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_geoù_v¨s
[] = {

171 { 
ngx_°rög
("geoù_cou¡ry_code"), 
NULL
,

172 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

173 
NGX_GEOIP_COUNTRY_CODE
, 0, 0 },

175 { 
ngx_°rög
("geoù_cou¡ry_code3"), 
NULL
,

176 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

177 
NGX_GEOIP_COUNTRY_CODE3
, 0, 0 },

179 { 
ngx_°rög
("geoù_cou¡ry_«me"), 
NULL
,

180 
ngx_hâp_geoù_cou¡ry_v¨übÀ
,

181 
NGX_GEOIP_COUNTRY_NAME
, 0, 0 },

183 { 
ngx_°rög
("geoù_‹g"), 
NULL
,

184 
ngx_hâp_geoù_‹g_v¨übÀ
,

187 { 
ngx_°rög
("geoù_côy_c⁄töít_code"), 
NULL
,

188 
ngx_hâp_geoù_côy_v¨übÀ
,

189 
off£tof
(
GeoIPRec‹d
, 
c⁄töít_code
), 0, 0 },

191 { 
ngx_°rög
("geoù_côy_cou¡ry_code"), 
NULL
,

192 
ngx_hâp_geoù_côy_v¨übÀ
,

193 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code
), 0, 0 },

195 { 
ngx_°rög
("geoù_côy_cou¡ry_code3"), 
NULL
,

196 
ngx_hâp_geoù_côy_v¨übÀ
,

197 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_code3
), 0, 0 },

199 { 
ngx_°rög
("geoù_côy_cou¡ry_«me"), 
NULL
,

200 
ngx_hâp_geoù_côy_v¨übÀ
,

201 
off£tof
(
GeoIPRec‹d
, 
cou¡ry_«me
), 0, 0 },

203 { 
ngx_°rög
("geoù_ªgi⁄"), 
NULL
,

204 
ngx_hâp_geoù_côy_v¨übÀ
,

205 
off£tof
(
GeoIPRec‹d
, 
ªgi⁄
), 0, 0 },

207 { 
ngx_°rög
("geoù_ªgi⁄_«me"), 
NULL
,

208 
ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
,

211 { 
ngx_°rög
("geoù_côy"), 
NULL
,

212 
ngx_hâp_geoù_côy_v¨übÀ
,

213 
off£tof
(
GeoIPRec‹d
, 
côy
), 0, 0 },

215 { 
ngx_°rög
("geoù_po°Æ_code"), 
NULL
,

216 
ngx_hâp_geoù_côy_v¨übÀ
,

217 
off£tof
(
GeoIPRec‹d
, 
po°Æ_code
), 0, 0 },

219 { 
ngx_°rög
("geoù_œtôude"), 
NULL
,

220 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

221 
off£tof
(
GeoIPRec‹d
, 
œtôude
), 0, 0 },

223 { 
ngx_°rög
("geoù_l⁄gôude"), 
NULL
,

224 
ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
,

225 
off£tof
(
GeoIPRec‹d
, 
l⁄gôude
), 0, 0 },

227 { 
ngx_°rög
("geoù_dma_code"), 
NULL
,

228 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

229 
off£tof
(
GeoIPRec‹d
, 
dma_code
), 0, 0 },

231 { 
ngx_°rög
("geoù_¨ó_code"), 
NULL
,

232 
ngx_hâp_geoù_côy_öt_v¨übÀ
,

233 
off£tof
(
GeoIPRec‹d
, 
¨ó_code
), 0, 0 },

235 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

239 
u_l⁄g


240 
	$ngx_hâp_geoù_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

242 
ngx_addr_t
 
addr
;

243 
ngx_¨øy_t
 *
xfwd
;

244 
sockaddr_ö
 *
sö
;

246 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

247 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

250 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

252 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

253 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

254 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

257 #i‡(
NGX_HAVE_INET6
)

259 i‡(
addr
.
sockaddr
->
ß_Ámûy
 =
AF_INET6
) {

260 
u_ch¨
 *
p
;

261 
ö_addr_t
 
öaddr
;

262 
ö6_addr
 *
öaddr6
;

264 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
.
sockaddr
)->
sö6_addr
;

266 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

267 
p
 = 
öaddr6
->
s6_addr
;

269 
öaddr
 = 
p
[12] << 24;

270 
öaddr
 +
p
[13] << 16;

271 
öaddr
 +
p
[14] << 8;

272 
öaddr
 +
p
[15];

274  
öaddr
;

280 i‡(
addr
.
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

281  
INADDR_NONE
;

284 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

285  
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

286 
	}
}

289 #i‡(
NGX_HAVE_GEOIP_V6
)

291 
geoùv6_t


292 
	$ngx_hâp_geoù_addr_v6
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_geoù_c⁄f_t
 *
gcf
)

294 
ngx_addr_t
 
addr
;

295 
ngx_¨øy_t
 *
xfwd
;

296 
ö_addr_t
 
addr4
;

297 
ö6_addr
 
addr6
;

298 
sockaddr_ö
 *
sö
;

299 
sockaddr_ö6
 *
sö6
;

301 
addr
.
sockaddr
 = 
r
->
c⁄√˘i⁄
->sockaddr;

302 
addr
.
sockÀn
 = 
r
->
c⁄√˘i⁄
->socklen;

305 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

307 i‡(
xfwd
->
√…s
 > 0 && 
gcf
->
¥oxõs
 !
NULL
) {

308 (Ë
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
NULL
,

309 
gcf
->
¥oxõs
, gcf->
¥oxy_ªcursive
);

312 
addr
.
sockaddr
->
ß_Ámûy
) {

314 
AF_INET
:

316 
sö
 = (
sockaddr_ö
 *Ë
addr
.
sockaddr
;

317 
addr4
 = 
	`¡ohl
(
sö
->
sö_addr
.
s_addr
);

319 
	`ngx_memzîo
(&
addr6
, (
ö6_addr
));

320 
addr6
.
s6_addr
[10] = 0xff;

321 
addr6
.
s6_addr
[11] = 0xff;

322 
addr6
.
s6_addr
[12] = 
addr4
 >> 24;

323 
addr6
.
s6_addr
[13] = 
addr4
 >> 16;

324 
addr6
.
s6_addr
[14] = 
addr4
 >> 8;

325 
addr6
.
s6_addr
[15] = 
addr4
;

326  
addr6
;

328 
AF_INET6
:

329 
sö6
 = (
sockaddr_ö6
 *Ë
addr
.
sockaddr
;

330  
sö6
->
sö6_addr
;

333  
ö6addr_™y
;

335 
	}
}

340 
ngx_öt_t


341 
	$ngx_hâp_geoù_cou¡ry_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

342 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

344 
ngx_hâp_geoù_v¨übÀ_h™dÀr_±
 
h™dÀr
 =

345 
ngx_hâp_geoù_cou¡ry_fun˘i⁄s
[
d©a
];

346 #i‡(
NGX_HAVE_GEOIP_V6
)

347 
ngx_hâp_geoù_v¨übÀ_h™dÀr_v6_±
 
h™dÀr_v6
 =

348 
ngx_hâp_geoù_cou¡ry_v6_fun˘i⁄s
[
d©a
];

351 c⁄° *
vÆ
;

352 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

354 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

356 i‡(
gcf
->
cou¡ry
 =
NULL
) {

357 
nŸ_found
;

360 #i‡(
NGX_HAVE_GEOIP_V6
)

361 
vÆ
 = 
gcf
->
cou¡ry_v6


362 ? 
	`h™dÀr_v6
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr_v6
(
r
, gcf))

363 : 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

365 
vÆ
 = 
	`h™dÀr
(
gcf
->
cou¡ry
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

368 i‡(
vÆ
 =
NULL
) {

369 
nŸ_found
;

372 
v
->
Àn
 = 
	`ngx_°æí
(
vÆ
);

373 
v
->
vÆid
 = 1;

374 
v
->
no_ˇchóbÀ
 = 0;

375 
v
->
nŸ_found
 = 0;

376 
v
->
d©a
 = (
u_ch¨
 *Ë
vÆ
;

378  
NGX_OK
;

380 
nŸ_found
:

382 
v
->
nŸ_found
 = 1;

384  
NGX_OK
;

385 
	}
}

388 
ngx_öt_t


389 
	$ngx_hâp_geoù_‹g_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

390 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

392 
size_t
 
Àn
;

393 *
vÆ
;

394 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

396 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

398 i‡(
gcf
->
‹g
 =
NULL
) {

399 
nŸ_found
;

402 #i‡(
NGX_HAVE_GEOIP_V6
)

403 
vÆ
 = 
gcf
->
‹g_v6


404 ? 
	`GeoIP_«me_by_ùnum_v6
(
gcf
->
‹g
,

405 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

406 : 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
,

407 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

409 
vÆ
 = 
	`GeoIP_«me_by_ùnum
(
gcf
->
‹g
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

412 i‡(
vÆ
 =
NULL
) {

413 
nŸ_found
;

416 
Àn
 = 
	`ngx_°æí
(
vÆ
);

417 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

418 i‡(
v
->
d©a
 =
NULL
) {

419 
	`ngx_‰ì
(
vÆ
);

420  
NGX_ERROR
;

423 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

425 
v
->
Àn
 =Üen;

426 
v
->
vÆid
 = 1;

427 
v
->
no_ˇchóbÀ
 = 0;

428 
v
->
nŸ_found
 = 0;

430 
	`ngx_‰ì
(
vÆ
);

432  
NGX_OK
;

434 
nŸ_found
:

436 
v
->
nŸ_found
 = 1;

438  
NGX_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_geoù_côy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

444 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

446 *
vÆ
;

447 
size_t
 
Àn
;

448 
GeoIPRec‹d
 *
gr
;

450 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

451 i‡(
gr
 =
NULL
) {

452 
nŸ_found
;

455 
vÆ
 = *(**Ë((*Ë
gr
 + 
d©a
);

456 i‡(
vÆ
 =
NULL
) {

457 
no_vÆue
;

460 
Àn
 = 
	`ngx_°æí
(
vÆ
);

461 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

462 i‡(
v
->
d©a
 =
NULL
) {

463 
	`GeoIPRec‹d_dñëe
(
gr
);

464  
NGX_ERROR
;

467 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

469 
v
->
Àn
 =Üen;

470 
v
->
vÆid
 = 1;

471 
v
->
no_ˇchóbÀ
 = 0;

472 
v
->
nŸ_found
 = 0;

474 
	`GeoIPRec‹d_dñëe
(
gr
);

476  
NGX_OK
;

478 
no_vÆue
:

480 
	`GeoIPRec‹d_dñëe
(
gr
);

482 
nŸ_found
:

484 
v
->
nŸ_found
 = 1;

486  
NGX_OK
;

487 
	}
}

490 
ngx_öt_t


491 
	$ngx_hâp_geoù_ªgi⁄_«me_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

494 
size_t
 
Àn
;

495 c⁄° *
vÆ
;

496 
GeoIPRec‹d
 *
gr
;

498 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

499 i‡(
gr
 =
NULL
) {

500 
nŸ_found
;

503 
vÆ
 = 
	`GeoIP_ªgi⁄_«me_by_code
(
gr
->
cou¡ry_code
, gr->
ªgi⁄
);

505 
	`GeoIPRec‹d_dñëe
(
gr
);

507 i‡(
vÆ
 =
NULL
) {

508 
nŸ_found
;

511 
Àn
 = 
	`ngx_°æí
(
vÆ
);

512 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

513 i‡(
v
->
d©a
 =
NULL
) {

514  
NGX_ERROR
;

517 
	`ngx_mem˝y
(
v
->
d©a
, 
vÆ
, 
Àn
);

519 
v
->
Àn
 =Üen;

520 
v
->
vÆid
 = 1;

521 
v
->
no_ˇchóbÀ
 = 0;

522 
v
->
nŸ_found
 = 0;

524  
NGX_OK
;

526 
nŸ_found
:

528 
v
->
nŸ_found
 = 1;

530  
NGX_OK
;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_geoù_côy_Êﬂt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

538 
vÆ
;

539 
GeoIPRec‹d
 *
gr
;

541 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

542 i‡(
gr
 =
NULL
) {

543 
v
->
nŸ_found
 = 1;

544  
NGX_OK
;

547 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
 + 5);

548 i‡(
v
->
d©a
 =
NULL
) {

549 
	`GeoIPRec‹d_dñëe
(
gr
);

550  
NGX_ERROR
;

553 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

555 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%.4f", 
vÆ
) - v->data;

557 
	`GeoIPRec‹d_dñëe
(
gr
);

559  
NGX_OK
;

560 
	}
}

563 
ngx_öt_t


564 
	$ngx_hâp_geoù_côy_öt_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

565 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

567 
vÆ
;

568 
GeoIPRec‹d
 *
gr
;

570 
gr
 = 
	`ngx_hâp_geoù_gë_côy_ªc‹d
(
r
);

571 i‡(
gr
 =
NULL
) {

572 
v
->
nŸ_found
 = 1;

573  
NGX_OK
;

576 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

577 i‡(
v
->
d©a
 =
NULL
) {

578 
	`GeoIPRec‹d_dñëe
(
gr
);

579  
NGX_ERROR
;

582 
vÆ
 = *(*Ë((*Ë
gr
 + 
d©a
);

584 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%d", 
vÆ
) - v->data;

586 
	`GeoIPRec‹d_dñëe
(
gr
);

588  
NGX_OK
;

589 
	}
}

592 
GeoIPRec‹d
 *

593 
	$ngx_hâp_geoù_gë_côy_ªc‹d
(
ngx_hâp_ªque°_t
 *
r
)

595 
ngx_hâp_geoù_c⁄f_t
 *
gcf
;

597 
gcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_geoù_moduÀ
);

599 i‡(
gcf
->
côy
) {

600 #i‡(
NGX_HAVE_GEOIP_V6
)

601  
gcf
->
côy_v6


602 ? 
	`GeoIP_ªc‹d_by_ùnum_v6
(
gcf
->
côy
,

603 
	`ngx_hâp_geoù_addr_v6
(
r
, 
gcf
))

604 : 
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
,

605 
	`ngx_hâp_geoù_addr
(
r
, 
gcf
));

607  
	`GeoIP_ªc‹d_by_ùnum
(
gcf
->
côy
, 
	`ngx_hâp_geoù_addr
(
r
, gcf));

611  
NULL
;

612 
	}
}

615 
ngx_öt_t


616 
	$ngx_hâp_geoù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

618 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

620 
v
 = 
ngx_hâp_geoù_v¨s
; v->
«me
.
Àn
; v++) {

621 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

622 i‡(
v¨
 =
NULL
) {

623  
NGX_ERROR
;

626 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

627 
v¨
->
d©a
 = 
v
->data;

630  
NGX_OK
;

631 
	}
}

635 
	$ngx_hâp_geoù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

637 
ngx_poﬁ_˛ónup_t
 *
˛n
;

638 
ngx_hâp_geoù_c⁄f_t
 *
c⁄f
;

640 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_geoù_c⁄f_t
));

641 i‡(
c⁄f
 =
NULL
) {

642  
NULL
;

645 
c⁄f
->
¥oxy_ªcursive
 = 
NGX_CONF_UNSET
;

647 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

648 i‡(
˛n
 =
NULL
) {

649  
NULL
;

652 
˛n
->
h™dÀr
 = 
ngx_hâp_geoù_˛ónup
;

653 
˛n
->
d©a
 = 
c⁄f
;

655  
c⁄f
;

656 
	}
}

660 
	$ngx_hâp_geoù_öô_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

662 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

664 
	`ngx_c⁄f_öô_vÆue
(
gcf
->
¥oxy_ªcursive
, 0);

666  
NGX_CONF_OK
;

667 
	}
}

671 
	$ngx_hâp_geoù_cou¡ry
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

673 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

675 
ngx_°r_t
 *
vÆue
;

677 i‡(
gcf
->
cou¡ry
) {

681 
vÆue
 = 
cf
->
¨gs
->
ñts
;

683 
gcf
->
cou¡ry
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

685 i‡(
gcf
->
cou¡ry
 =
NULL
) {

686 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

687 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

689  
NGX_CONF_ERROR
;

692 i‡(
cf
->
¨gs
->
√…s
 == 3) {

693 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

694 
	`GeoIP_£t_ch¨£t
 (
gcf
->
cou¡ry
, 
GEOIP_CHARSET_UTF8
);

697 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

698 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

699  
NGX_CONF_ERROR
;

703 
gcf
->
cou¡ry
->
d©aba£Ty≥
) {

705 
GEOIP_COUNTRY_EDITION
:

707  
NGX_CONF_OK
;

709 #i‡(
NGX_HAVE_GEOIP_V6
)

710 
GEOIP_COUNTRY_EDITION_V6
:

712 
gcf
->
cou¡ry_v6
 = 1;

713  
NGX_CONF_OK
;

717 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

719 &
vÆue
[1], 
gcf
->
cou¡ry
->
d©aba£Ty≥
);

720  
NGX_CONF_ERROR
;

722 
	}
}

726 
	$ngx_hâp_geoù_‹g
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

728 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

730 
ngx_°r_t
 *
vÆue
;

732 i‡(
gcf
->
‹g
) {

736 
vÆue
 = 
cf
->
¨gs
->
ñts
;

738 
gcf
->
‹g
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

740 i‡(
gcf
->
‹g
 =
NULL
) {

741 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

742 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

744  
NGX_CONF_ERROR
;

747 i‡(
cf
->
¨gs
->
√…s
 == 3) {

748 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

749 
	`GeoIP_£t_ch¨£t
 (
gcf
->
‹g
, 
GEOIP_CHARSET_UTF8
);

752 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

753 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

754  
NGX_CONF_ERROR
;

758 
gcf
->
‹g
->
d©aba£Ty≥
) {

760 
GEOIP_ISP_EDITION
:

761 
GEOIP_ORG_EDITION
:

762 
GEOIP_DOMAIN_EDITION
:

763 
GEOIP_ASNUM_EDITION
:

765  
NGX_CONF_OK
;

767 #i‡(
NGX_HAVE_GEOIP_V6
)

768 
GEOIP_ISP_EDITION_V6
:

769 
GEOIP_ORG_EDITION_V6
:

770 
GEOIP_DOMAIN_EDITION_V6
:

771 
GEOIP_ASNUM_EDITION_V6
:

773 
gcf
->
‹g_v6
 = 1;

774  
NGX_CONF_OK
;

778 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

780 &
vÆue
[1], 
gcf
->
‹g
->
d©aba£Ty≥
);

781  
NGX_CONF_ERROR
;

783 
	}
}

787 
	$ngx_hâp_geoù_côy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

789 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

791 
ngx_°r_t
 *
vÆue
;

793 i‡(
gcf
->
côy
) {

797 
vÆue
 = 
cf
->
¨gs
->
ñts
;

799 
gcf
->
côy
 = 
	`GeoIP_›í
((*Ë
vÆue
[1].
d©a
, 
GEOIP_MEMORY_CACHE
);

801 i‡(
gcf
->
côy
 =
NULL
) {

802 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

803 "GeoIP_›í(\"%V\"ËÁûed", &
vÆue
[1]);

805  
NGX_CONF_ERROR
;

808 i‡(
cf
->
¨gs
->
√…s
 == 3) {

809 i‡(
	`ngx_°rcmp
(
vÆue
[2].
d©a
, "utf8") == 0) {

810 
	`GeoIP_£t_ch¨£t
 (
gcf
->
côy
, 
GEOIP_CHARSET_UTF8
);

813 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

814 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

815  
NGX_CONF_ERROR
;

819 
gcf
->
côy
->
d©aba£Ty≥
) {

821 
GEOIP_CITY_EDITION_REV0
:

822 
GEOIP_CITY_EDITION_REV1
:

824  
NGX_CONF_OK
;

826 #i‡(
NGX_HAVE_GEOIP_V6
)

827 
GEOIP_CITY_EDITION_REV0_V6
:

828 
GEOIP_CITY_EDITION_REV1_V6
:

830 
gcf
->
côy_v6
 = 1;

831  
NGX_CONF_OK
;

835 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

837 &
vÆue
[1], 
gcf
->
côy
->
d©aba£Ty≥
);

838  
NGX_CONF_ERROR
;

840 
	}
}

844 
	$ngx_hâp_geoù_¥oxy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

846 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
c⁄f
;

848 
ngx_°r_t
 *
vÆue
;

849 
ngx_cidr_t
 
cidr
, *
c
;

851 
vÆue
 = 
cf
->
¨gs
->
ñts
;

853 i‡(
	`ngx_hâp_geoù_cidr_vÆue
(
cf
, &
vÆue
[1], &
cidr
Ë!
NGX_OK
) {

854  
NGX_CONF_ERROR
;

857 i‡(
gcf
->
¥oxõs
 =
NULL
) {

858 
gcf
->
¥oxõs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_cidr_t
));

859 i‡(
gcf
->
¥oxõs
 =
NULL
) {

860  
NGX_CONF_ERROR
;

864 
c
 = 
	`ngx_¨øy_push
(
gcf
->
¥oxõs
);

865 i‡(
c
 =
NULL
) {

866  
NGX_CONF_ERROR
;

869 *
c
 = 
cidr
;

871  
NGX_CONF_OK
;

872 
	}
}

874 
ngx_öt_t


875 
	$ngx_hâp_geoù_cidr_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
√t
, 
ngx_cidr_t
 *
cidr
)

877 
ngx_öt_t
 
rc
;

879 i‡(
	`ngx_°rcmp
(
√t
->
d©a
, "255.255.255.255") == 0) {

880 
cidr
->
Ámûy
 = 
AF_INET
;

881 
cidr
->
u
.
ö
.
addr
 = 0xffffffff;

882 
cidr
->
u
.
ö
.
mask
 = 0xffffffff;

884  
NGX_OK
;

887 
rc
 = 
	`ngx_±ocidr
(
√t
, 
cidr
);

889 i‡(
rc
 =
NGX_ERROR
) {

890 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÇëw‹k \"%V\"", 
√t
);

891  
NGX_ERROR
;

894 i‡(
rc
 =
NGX_DONE
) {

895 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

896 "lowáddªs†bô†o‡%Váª mónögÀss", 
√t
);

899  
NGX_OK
;

900 
	}
}

904 
	$ngx_hâp_geoù_˛ónup
(*
d©a
)

906 
ngx_hâp_geoù_c⁄f_t
 *
gcf
 = 
d©a
;

908 i‡(
gcf
->
cou¡ry
) {

909 
	`GeoIP_dñëe
(
gcf
->
cou¡ry
);

912 i‡(
gcf
->
‹g
) {

913 
	`GeoIP_dñëe
(
gcf
->
‹g
);

916 i‡(
gcf
->
côy
) {

917 
	`GeoIP_dñëe
(
gcf
->
côy
);

919 
	}
}

	@src/http/modules/ngx_http_gunzip_filter_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

13 
	~<zlib.h
>

17 
ngx_Êag_t
 
	míabÀ
;

18 
ngx_bufs_t
 
	mbufs
;

19 } 
	tngx_hâp_gunzù_c⁄f_t
;

23 
ngx_chaö_t
 *
	mö
;

24 
ngx_chaö_t
 *
	m‰ì
;

25 
ngx_chaö_t
 *
	mbusy
;

26 
ngx_chaö_t
 *
	mout
;

27 
ngx_chaö_t
 **
	mœ°_out
;

29 
ngx_buf_t
 *
	mö_buf
;

30 
ngx_buf_t
 *
	mout_buf
;

31 
ngx_öt_t
 
	mbufs
;

33 
	m°¨ãd
:1;

34 
	mÊush
:4;

35 
	mªdo
:1;

36 
	md⁄e
:1;

37 
	mnomem
:1;

39 
z_°ªam
 
	mz°ªam
;

40 
ngx_hâp_ªque°_t
 *
	mªque°
;

41 } 
	tngx_hâp_gunzù_˘x_t
;

44 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

45 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

46 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

48 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

50 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

52 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_gunzù_˘x_t
 *
˘x
);

55 *
ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

56 
u_öt
 
size
);

57 
ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
);

59 
ngx_öt_t
 
ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

60 *
ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

61 *
ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

62 *
∑ª¡
, *
chûd
);

65 
ngx_comm™d_t
 
	gngx_hâp_gunzù_fûãr_comm™ds
[] = {

67 { 
ngx_°rög
("gunzip"),

68 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

69 
ngx_c⁄f_£t_Êag_¶Ÿ
,

70 
NGX_HTTP_LOC_CONF_OFFSET
,

71 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
íabÀ
),

72 
NULL
 },

74 { 
ngx_°rög
("gunzip_buffers"),

75 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

76 
ngx_c⁄f_£t_bufs_¶Ÿ
,

77 
NGX_HTTP_LOC_CONF_OFFSET
,

78 
off£tof
(
ngx_hâp_gunzù_c⁄f_t
, 
bufs
),

79 
NULL
 },

81 
ngx_nuŒ_comm™d


85 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ_˘x
 = {

86 
NULL
,

87 
ngx_hâp_gunzù_fûãr_öô
,

89 
NULL
,

90 
NULL
,

92 
NULL
,

93 
NULL
,

95 
ngx_hâp_gunzù_¸óã_c⁄f
,

96 
ngx_hâp_gunzù_mîge_c⁄f


100 
ngx_moduÀ_t
 
	gngx_hâp_gunzù_fûãr_moduÀ
 = {

101 
NGX_MODULE_V1
,

102 &
ngx_hâp_gunzù_fûãr_moduÀ_˘x
,

103 
ngx_hâp_gunzù_fûãr_comm™ds
,

104 
NGX_HTTP_MODULE
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NGX_MODULE_V1_PADDING


116 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

117 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

120 
ngx_öt_t


121 
	$ngx_hâp_gunzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

123 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

124 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

126 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

132 i‡(!
c⁄f
->
íabÀ


133 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 =
NULL


134 || 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
 != 4

135 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
d©a
,

136 (
u_ch¨
 *) "gzip", 4) != 0)

138  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

141 
r
->
gzù_v¨y
 = 1;

143 i‡(!
r
->
gzù_ã°ed
) {

144 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë=
NGX_OK
) {

145  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

148 } i‡(
r
->
gzù_ok
) {

149  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

152 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gunzù_˘x_t
));

153 i‡(
˘x
 =
NULL
) {

154  
NGX_ERROR
;

157 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

159 
˘x
->
ªque°
 = 
r
;

161 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

163 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

164 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

166 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

167 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

168 
	`ngx_hâp_˛ór_ëag
(
r
);

170  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

171 
	}
}

174 
ngx_öt_t


175 
	$ngx_hâp_gunzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

177 
rc
;

178 
ngx_chaö_t
 *
˛
;

179 
ngx_hâp_gunzù_˘x_t
 *
˘x
;

181 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

183 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

184  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

187 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

190 i‡(!
˘x
->
°¨ãd
) {

191 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

192 
Áûed
;

196 i‡(
ö
) {

197 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

198 
Áûed
;

202 i‡(
˘x
->
nomem
) {

206 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

207 
Áûed
;

210 
˛
 = 
NULL
;

212 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

213 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

214 
˘x
->
nomem
 = 0;

225 
rc
 = 
	`ngx_hâp_gunzù_fûãr_add_d©a
(
r
, 
˘x
);

227 i‡(
rc
 =
NGX_DECLINED
) {

231 i‡(
rc
 =
NGX_AGAIN
) {

238 
rc
 = 
	`ngx_hâp_gunzù_fûãr_gë_buf
(
r
, 
˘x
);

240 i‡(
rc
 =
NGX_DECLINED
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
Áûed
;

248 
rc
 = 
	`ngx_hâp_gunzù_fûãr_öÊ©e
(
r
, 
˘x
);

250 i‡(
rc
 =
NGX_OK
) {

254 i‡(
rc
 =
NGX_ERROR
) {

255 
Áûed
;

261 i‡(
˘x
->
out
 =
NULL
) {

262  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

265 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

267 i‡(
rc
 =
NGX_ERROR
) {

268 
Áûed
;

271 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

272 (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
);

273 
˘x
->
œ°_out
 = &˘x->
out
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

276 "gunzù out: %p", 
˘x
->
out
);

278 
˘x
->
nomem
 = 0;

280 i‡(
˘x
->
d⁄e
) {

281  
rc
;

287 
Áûed
:

289 
˘x
->
d⁄e
 = 1;

291  
NGX_ERROR
;

292 
	}
}

295 
ngx_öt_t


296 
	$ngx_hâp_gunzù_fûãr_öÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

297 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

299 
rc
;

301 
˘x
->
z°ªam
.
√xt_ö
 = 
Z_NULL
;

302 
˘x
->
z°ªam
.
avaû_ö
 = 0;

304 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gunzù_fûãr_Æloc
;

305 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gunzù_fûãr_‰ì
;

306 
˘x
->
z°ªam
.
›aque
 = ctx;

309 
rc
 = 
	`öÊ©eInô2
(&
˘x
->
z°ªam
, 
MAX_WBITS
 + 16);

311 i‡(
rc
 !
Z_OK
) {

312 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

313 "öÊ©eInô2(ËÁûed: %d", 
rc
);

314  
NGX_ERROR
;

317 
˘x
->
°¨ãd
 = 1;

319 
˘x
->
œ°_out
 = &˘x->
out
;

320 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

322  
NGX_OK
;

323 
	}
}

326 
ngx_öt_t


327 
	$ngx_hâp_gunzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

328 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

330 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

331  
NGX_OK
;

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

335 "gunzù in: %p", 
˘x
->
ö
);

337 i‡(
˘x
->
ö
 =
NULL
) {

338  
NGX_DECLINED
;

341 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

342 
˘x
->
ö
 = ctx->ö->
√xt
;

344 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

345 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

347 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

349 
˘x
->
ö_buf
,

350 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

352 i‡(
˘x
->
ö_buf
->
œ°_buf
 || ctx->ö_buf->
œ°_ö_chaö
) {

353 
˘x
->
Êush
 = 
Z_FINISH
;

355 } i‡(
˘x
->
ö_buf
->
Êush
) {

356 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

358 } i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

360  
NGX_AGAIN
;

363  
NGX_OK
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_gunzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

369 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

371 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

373 i‡(
˘x
->
z°ªam
.
avaû_out
) {

374  
NGX_OK
;

377 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gunzù_fûãr_moduÀ
);

379 i‡(
˘x
->
‰ì
) {

380 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

381 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

383 
˘x
->
out_buf
->
Êush
 = 0;

385 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

387 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

388 i‡(
˘x
->
out_buf
 =
NULL
) {

389  
NGX_ERROR
;

392 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gunzù_fûãr_moduÀ
;

393 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

394 
˘x
->
bufs
++;

397 
˘x
->
nomem
 = 1;

398  
NGX_DECLINED
;

401 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

402 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

404  
NGX_OK
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_hâp_gunzù_fûãr_öÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

410 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

412 
rc
;

413 
ngx_buf_t
 *
b
;

414 
ngx_chaö_t
 *
˛
;

416 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

418 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

419 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

420 
˘x
->
Êush
, ctx->
ªdo
);

422 
rc
 = 
	`öÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

424 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

426 "öÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

427  
NGX_ERROR
;

430 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

433 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

434 
rc
);

436 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

438 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

440 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

441 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

443 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

444 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

448 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

450 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

454 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

455 i‡(
˛
 =
NULL
) {

456  
NGX_ERROR
;

459 
˛
->
buf
 = 
˘x
->
out_buf
;

460 
˛
->
√xt
 = 
NULL
;

461 *
˘x
->
œ°_out
 = 
˛
;

462 
˘x
->
œ°_out
 = &
˛
->
√xt
;

464 
˘x
->
ªdo
 = 1;

466  
NGX_AGAIN
;

469 
˘x
->
ªdo
 = 0;

471 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

473 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

475 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

476 i‡(
˛
 =
NULL
) {

477  
NGX_ERROR
;

480 
b
 = 
˘x
->
out_buf
;

482 i‡(
	`ngx_buf_size
(
b
) == 0) {

484 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

485 i‡(
b
 =
NULL
) {

486  
NGX_ERROR
;

490 
˘x
->
z°ªam
.
avaû_out
 = 0;

493 
b
->
Êush
 = 1;

495 
˛
->
buf
 = 
b
;

496 
˛
->
√xt
 = 
NULL
;

497 *
˘x
->
œ°_out
 = 
˛
;

498 
˘x
->
œ°_out
 = &
˛
->
√xt
;

500  
NGX_OK
;

503 i‡(
rc
 =
Z_STREAM_END
 && 
˘x
->
Êush
 =
Z_FINISH


504 && 
˘x
->
z°ªam
.
avaû_ö
 == 0)

507 i‡(
	`ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

508  
NGX_ERROR
;

511  
NGX_OK
;

514 i‡(
rc
 =
Z_STREAM_END
 && 
˘x
->
z°ªam
.
avaû_ö
 > 0) {

516 
rc
 = 
	`öÊ©eRe£t
(&
˘x
->
z°ªam
);

518 i‡(
rc
 !
Z_OK
) {

519 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

520 "öÊ©eRe£t(ËÁûed: %d", 
rc
);

521  
NGX_ERROR
;

524 
˘x
->
ªdo
 = 1;

526  
NGX_AGAIN
;

529 i‡(
˘x
->
ö
 =
NULL
) {

531 
b
 = 
˘x
->
out_buf
;

533 i‡(
	`ngx_buf_size
(
b
) == 0) {

534  
NGX_OK
;

537 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

538 i‡(
˛
 =
NULL
) {

539  
NGX_ERROR
;

542 
˘x
->
z°ªam
.
avaû_out
 = 0;

544 
˛
->
buf
 = 
b
;

545 
˛
->
√xt
 = 
NULL
;

546 *
˘x
->
œ°_out
 = 
˛
;

547 
˘x
->
œ°_out
 = &
˛
->
√xt
;

549  
NGX_OK
;

552  
NGX_AGAIN
;

553 
	}
}

556 
ngx_öt_t


557 
	$ngx_hâp_gunzù_fûãr_öÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

558 
ngx_hâp_gunzù_˘x_t
 *
˘x
)

560 
rc
;

561 
ngx_buf_t
 *
b
;

562 
ngx_chaö_t
 *
˛
;

564 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

567 
rc
 = 
	`öÊ©eEnd
(&
˘x
->
z°ªam
);

569 i‡(
rc
 !
Z_OK
) {

570 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

571 "öÊ©eEnd(ËÁûed: %d", 
rc
);

572  
NGX_ERROR
;

575 
b
 = 
˘x
->
out_buf
;

577 i‡(
	`ngx_buf_size
(
b
) == 0) {

579 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

580 i‡(
b
 =
NULL
) {

581  
NGX_ERROR
;

585 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

586 i‡(
˛
 =
NULL
) {

587  
NGX_ERROR
;

590 
˛
->
buf
 = 
b
;

591 
˛
->
√xt
 = 
NULL
;

592 *
˘x
->
œ°_out
 = 
˛
;

593 
˘x
->
œ°_out
 = &
˛
->
√xt
;

595 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

596 
b
->
œ°_ö_chaö
 = 1;

597 
b
->
sync
 = 1;

599 
˘x
->
d⁄e
 = 1;

601  
NGX_OK
;

602 
	}
}

606 
	$ngx_hâp_gunzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

608 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

610 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

612 
ôems
, 
size
);

614  
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

615 
	}
}

619 
	$ngx_hâp_gunzù_fûãr_‰ì
(*
›aque
, *
addªss
)

622 
ngx_hâp_gunzù_˘x_t
 *
˘x
 = 
›aque
;

624 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

625 "gunzù fªe: %p", 
addªss
);

627 
	}
}

631 
	$ngx_hâp_gunzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

633 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
;

635 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gunzù_c⁄f_t
));

636 i‡(
c⁄f
 =
NULL
) {

637  
NULL
;

646 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

648  
c⁄f
;

649 
	}
}

653 
	$ngx_hâp_gunzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

655 
ngx_hâp_gunzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

656 
ngx_hâp_gunzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

658 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

660 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

661 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

663  
NGX_CONF_OK
;

664 
	}
}

667 
ngx_öt_t


668 
	$ngx_hâp_gunzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

670 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

671 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gunzù_hódî_fûãr
;

673 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

674 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gunzù_body_fûãr
;

676  
NGX_OK
;

677 
	}
}

	@src/http/modules/ngx_http_gzip_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<zlib.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	mno_buf„r
;

19 
ngx_hash_t
 
	mty≥s
;

21 
ngx_bufs_t
 
	mbufs
;

23 
size_t
 
	mpo°p⁄e_gzùpög
;

24 
ngx_öt_t
 
	mÀvñ
;

25 
size_t
 
	mwbôs
;

26 
size_t
 
	mmemÀvñ
;

27 
ssize_t
 
	mmö_Àngth
;

29 
ngx_¨øy_t
 *
	mty≥s_keys
;

30 } 
	tngx_hâp_gzù_c⁄f_t
;

34 
ngx_chaö_t
 *
	mö
;

35 
ngx_chaö_t
 *
	m‰ì
;

36 
ngx_chaö_t
 *
	mbusy
;

37 
ngx_chaö_t
 *
	mout
;

38 
ngx_chaö_t
 **
	mœ°_out
;

40 
ngx_chaö_t
 *
	mc›õd
;

41 
ngx_chaö_t
 *
	mc›y_buf
;

43 
ngx_buf_t
 *
	mö_buf
;

44 
ngx_buf_t
 *
	mout_buf
;

45 
ngx_öt_t
 
	mbufs
;

47 *
	m¥óŒoˇãd
;

48 *
	m‰ì_mem
;

49 
ngx_uöt_t
 
	mÆloˇãd
;

51 
	mwbôs
;

52 
	mmemÀvñ
;

54 
	mÊush
:4;

55 
	mªdo
:1;

56 
	md⁄e
:1;

57 
	mnomem
:1;

58 
	mgzhódî
:1;

59 
	mbuf„rög
:1;

61 
size_t
 
	mzö
;

62 
size_t
 
	mzout
;

64 
uöt32_t
 
	m¸c32
;

65 
z_°ªam
 
	mz°ªam
;

66 
ngx_hâp_ªque°_t
 *
	mªque°
;

67 } 
	tngx_hâp_gzù_˘x_t
;

70 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

72 
	sgzåaûî
 {

73 
uöt32_t
 
	m¸c32
;

74 
uöt32_t
 
	mzÀn
;

79 
	sgzåaûî
 {

80 
u_ch¨
 
	m¸c32
[4];

81 
u_ch¨
 
	mzÀn
[4];

87 
ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_gzù_˘x_t
 *
˘x
);

89 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
,

90 
ngx_chaö_t
 *
ö
);

91 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_gzù_˘x_t
 *
˘x
);

93 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_gzù_˘x_t
 *
˘x
);

95 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_gzù_˘x_t
 *
˘x
);

97 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_gzù_˘x_t
 *
˘x
);

99 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_gzù_˘x_t
 *
˘x
);

101 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_gzù_˘x_t
 *
˘x
);

104 *
ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
,

105 
u_öt
 
size
);

106 
ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
);

107 
ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

108 
ngx_hâp_gzù_˘x_t
 *
˘x
);

110 
ngx_öt_t
 
ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

111 
ngx_öt_t
 
ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

114 
ngx_öt_t
 
ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

116 *
ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

117 *
∑ª¡
, *
chûd
);

118 *
ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

119 *
ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

122 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_gzù_comp_Àvñ_bounds
 = {

123 
ngx_c⁄f_check_num_bounds
, 1, 9

126 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_wödow_p
 = 
ngx_hâp_gzù_wödow
;

127 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_gzù_hash_p
 = 
ngx_hâp_gzù_hash
;

130 
ngx_comm™d_t
 
	gngx_hâp_gzù_fûãr_comm™ds
[] = {

132 { 
ngx_°rög
("gzip"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


134 |
NGX_CONF_FLAG
,

135 
ngx_c⁄f_£t_Êag_¶Ÿ
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
íabÀ
),

138 
NULL
 },

140 { 
ngx_°rög
("gzip_buffers"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

142 
ngx_c⁄f_£t_bufs_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
bufs
),

145 
NULL
 },

147 { 
ngx_°rög
("gzip_types"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

149 
ngx_hâp_ty≥s_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
ty≥s_keys
),

152 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

154 { 
ngx_°rög
("gzip_comp_level"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_num_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
Àvñ
),

159 &
ngx_hâp_gzù_comp_Àvñ_bounds
 },

161 { 
ngx_°rög
("gzip_window"),

162 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

163 
ngx_c⁄f_£t_size_¶Ÿ
,

164 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
wbôs
),

166 &
ngx_hâp_gzù_wödow_p
 },

168 { 
ngx_°rög
("gzip_hash"),

169 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

170 
ngx_c⁄f_£t_size_¶Ÿ
,

171 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
memÀvñ
),

173 &
ngx_hâp_gzù_hash_p
 },

175 { 
ngx_°rög
("postpone_gzipping"),

176 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

177 
ngx_c⁄f_£t_size_¶Ÿ
,

178 
NGX_HTTP_LOC_CONF_OFFSET
,

179 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
po°p⁄e_gzùpög
),

180 
NULL
 },

182 { 
ngx_°rög
("gzip_no_buffer"),

183 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

184 
ngx_c⁄f_£t_Êag_¶Ÿ
,

185 
NGX_HTTP_LOC_CONF_OFFSET
,

186 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
no_buf„r
),

187 
NULL
 },

189 { 
ngx_°rög
("gzip_min_length"),

190 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

191 
ngx_c⁄f_£t_size_¶Ÿ
,

192 
NGX_HTTP_LOC_CONF_OFFSET
,

193 
off£tof
(
ngx_hâp_gzù_c⁄f_t
, 
mö_Àngth
),

194 
NULL
 },

196 
ngx_nuŒ_comm™d


200 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ_˘x
 = {

201 
ngx_hâp_gzù_add_v¨übÀs
,

202 
ngx_hâp_gzù_fûãr_öô
,

204 
NULL
,

205 
NULL
,

207 
NULL
,

208 
NULL
,

210 
ngx_hâp_gzù_¸óã_c⁄f
,

211 
ngx_hâp_gzù_mîge_c⁄f


215 
ngx_moduÀ_t
 
	gngx_hâp_gzù_fûãr_moduÀ
 = {

216 
NGX_MODULE_V1
,

217 &
ngx_hâp_gzù_fûãr_moduÀ_˘x
,

218 
ngx_hâp_gzù_fûãr_comm™ds
,

219 
NGX_HTTP_MODULE
,

220 
NULL
,

221 
NULL
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NGX_MODULE_V1_PADDING


231 
ngx_°r_t
 
	gngx_hâp_gzù_øtio
 = 
ngx_°rög
("gzip_ratio");

233 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

234 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

237 
ngx_öt_t


238 
	$ngx_hâp_gzù_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

240 
ngx_èbÀ_ñt_t
 *
h
;

241 
ngx_hâp_gzù_˘x_t
 *
˘x
;

242 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

244 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

246 i‡(!
c⁄f
->
íabÀ


247 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


248 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_FORBIDDEN


249 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_FOUND
)

250 || (
r
->
hódîs_out
.
c⁄ã¡_ícodög


251 && 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
vÆue
.
Àn
)

252 || (
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 != -1

253 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < 
c⁄f
->
mö_Àngth
)

254 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL


255 || 
r
->
hódî_⁄ly
)

257  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

260 
r
->
gzù_v¨y
 = 1;

262 #i‡(
NGX_HTTP_DEGRADATION
)

264 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

266 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

268 i‡(
˛cf
->
gzù_dißbÀ_degød©i⁄
 && 
	`ngx_hâp_degøded
(
r
)) {

269  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

274 i‡(!
r
->
gzù_ã°ed
) {

275 i‡(
	`ngx_hâp_gzù_ok
(
r
Ë!
NGX_OK
) {

276  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

279 } i‡(!
r
->
gzù_ok
) {

280  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

283 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_gzù_˘x_t
));

284 i‡(
˘x
 =
NULL
) {

285  
NGX_ERROR
;

288 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_gzù_fûãr_moduÀ
);

290 
˘x
->
ªque°
 = 
r
;

291 
˘x
->
buf„rög
 = (
c⁄f
->
po°p⁄e_gzùpög
 != 0);

293 
	`ngx_hâp_gzù_fûãr_mem‹y
(
r
, 
˘x
);

295 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

296 i‡(
h
 =
NULL
) {

297  
NGX_ERROR
;

300 
h
->
hash
 = 1;

301 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

302 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

303 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

305 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

307 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

308 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

309 
	`ngx_hâp_˛ór_ëag
(
r
);

311  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_gzù_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

318 
rc
;

319 
ngx_chaö_t
 *
˛
;

320 
ngx_hâp_gzù_˘x_t
 *
˘x
;

322 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

324 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
 || 
r
->
hódî_⁄ly
) {

325  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

328 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

331 i‡(
˘x
->
buf„rög
) {

342 i‡(
ö
) {

343 
	`ngx_hâp_gzù_fûãr_buf„r
(
˘x
, 
ö
)) {

345 
NGX_OK
:

346  
NGX_OK
;

348 
NGX_DONE
:

349 
ö
 = 
NULL
;

353 
Áûed
;

357 
˘x
->
buf„rög
 = 0;

361 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

362 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
r
, 
˘x
Ë!
NGX_OK
) {

363 
Áûed
;

367 i‡(
ö
) {

368 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

369 
Áûed
;

373 i‡(
˘x
->
nomem
) {

377 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
Ë=
NGX_ERROR
) {

378 
Áûed
;

381 
˛
 = 
NULL
;

383 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &
˛
,

384 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

385 
˘x
->
nomem
 = 0;

396 
rc
 = 
	`ngx_hâp_gzù_fûãr_add_d©a
(
r
, 
˘x
);

398 i‡(
rc
 =
NGX_DECLINED
) {

402 i‡(
rc
 =
NGX_AGAIN
) {

409 
rc
 = 
	`ngx_hâp_gzù_fûãr_gë_buf
(
r
, 
˘x
);

411 i‡(
rc
 =
NGX_DECLINED
) {

415 i‡(
rc
 =
NGX_ERROR
) {

416 
Áûed
;

420 
rc
 = 
	`ngx_hâp_gzù_fûãr_deÊ©e
(
r
, 
˘x
);

422 i‡(
rc
 =
NGX_OK
) {

426 i‡(
rc
 =
NGX_ERROR
) {

427 
Áûed
;

433 i‡(
˘x
->
out
 =
NULL
) {

434 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

436  
˘x
->
busy
 ? 
NGX_AGAIN
 : 
NGX_OK
;

439 i‡(!
˘x
->
gzhódî
) {

440 i‡(
	`ngx_hâp_gzù_fûãr_gzhódî
(
r
, 
˘x
Ë!
NGX_OK
) {

441 
Áûed
;

445 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

447 i‡(
rc
 =
NGX_ERROR
) {

448 
Áûed
;

451 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

453 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
˘x
->
‰ì
, &˘x->
busy
, &˘x->
out
,

454 (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
);

455 
˘x
->
œ°_out
 = &˘x->
out
;

457 
˘x
->
nomem
 = 0;

459 i‡(
˘x
->
d⁄e
) {

460  
rc
;

466 
Áûed
:

468 
˘x
->
d⁄e
 = 1;

470 i‡(
˘x
->
¥óŒoˇãd
) {

471 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

473 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

476 
	`ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
r
, 
˘x
);

478  
NGX_ERROR
;

479 
	}
}

483 
	$ngx_hâp_gzù_fûãr_mem‹y
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

485 
wbôs
, 
memÀvñ
;

486 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

488 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

490 
wbôs
 = 
c⁄f
->wbits;

491 
memÀvñ
 = 
c⁄f
->memlevel;

493 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 > 0) {

497 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 < ((1 << (
wbôs
 - 1)) - 262)) {

498 
wbôs
--;

499 
memÀvñ
--;

502 i‡(
memÀvñ
 < 1) {

503 
memÀvñ
 = 1;

507 
˘x
->
wbôs
 = wbits;

508 
˘x
->
memÀvñ
 = memlevel;

522 
˘x
->
Æloˇãd
 = 8192 + (1 << (
wbôs
 + 2)Ë+ (1 << (
memÀvñ
 + 9));

523 
	}
}

526 
ngx_öt_t


527 
	$ngx_hâp_gzù_fûãr_buf„r
(
ngx_hâp_gzù_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

529 
size_t
 
size
, 
buf„ªd
;

530 
ngx_buf_t
 *
b
, *
buf
;

531 
ngx_chaö_t
 *
˛
, **
Œ
;

532 
ngx_hâp_ªque°_t
 *
r
;

533 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

535 
r
 = 
˘x
->
ªque°
;

537 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

539 
buf„ªd
 = 0;

540 
Œ
 = &
˘x
->
ö
;

542 
˛
 = 
˘x
->
ö
; cl; c»˛->
√xt
) {

543 
buf„ªd
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

544 
Œ
 = &
˛
->
√xt
;

547 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

549 
ö
) {

550 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

551 i‡(
˛
 =
NULL
) {

552  
NGX_ERROR
;

555 
b
 = 
ö
->
buf
;

557 
size
 = 
b
->
œ°
 - b->
pos
;

558 
buf„ªd
 +
size
;

560 i‡(
b
->
Êush
 || b->
œ°_buf
 || 
buf„ªd
 > 
c⁄f
->
po°p⁄e_gzùpög
) {

561 
˘x
->
buf„rög
 = 0;

564 i‡(
˘x
->
buf„rög
 && 
size
) {

566 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

567 i‡(
buf
 =
NULL
) {

568  
NGX_ERROR
;

571 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->
pos
, 
b
->pos, 
size
);

572 
b
->
pos
 = b->
œ°
;

574 
buf
->
œ°_buf
 = 
b
->last_buf;

575 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

577 
˛
->
buf
 = buf;

580 
˛
->
buf
 = 
b
;

583 *
Œ
 = 
˛
;

584 
Œ
 = &
˛
->
√xt
;

585 
ö
 = in->
√xt
;

588 *
Œ
 = 
NULL
;

590  
˘x
->
buf„rög
 ? 
NGX_OK
 : 
NGX_DONE
;

591 
	}
}

594 
ngx_öt_t


595 
	$ngx_hâp_gzù_fûãr_deÊ©e_°¨t
(
ngx_hâp_ªque°_t
 *
r
,

596 
ngx_hâp_gzù_˘x_t
 *
˘x
)

598 
rc
;

599 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

601 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

603 
˘x
->
¥óŒoˇãd
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Æloˇãd
);

604 i‡(
˘x
->
¥óŒoˇãd
 =
NULL
) {

605  
NGX_ERROR
;

608 
˘x
->
‰ì_mem
 = ctx->
¥óŒoˇãd
;

610 
˘x
->
z°ªam
.
zÆloc
 = 
ngx_hâp_gzù_fûãr_Æloc
;

611 
˘x
->
z°ªam
.
z‰ì
 = 
ngx_hâp_gzù_fûãr_‰ì
;

612 
˘x
->
z°ªam
.
›aque
 = ctx;

614 
rc
 = 
	`deÊ©eInô2
(&
˘x
->
z°ªam
, (Ë
c⁄f
->
Àvñ
, 
Z_DEFLATED
,

615 - 
˘x
->
wbôs
, ctx->
memÀvñ
, 
Z_DEFAULT_STRATEGY
);

617 i‡(
rc
 !
Z_OK
) {

618 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

619 "deÊ©eInô2(ËÁûed: %d", 
rc
);

620  
NGX_ERROR
;

623 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_GZIP_BUFFERED
;

625 
˘x
->
œ°_out
 = &˘x->
out
;

626 
˘x
->
¸c32
 = 
	`¸c32
(0L, 
Z_NULL
, 0);

627 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

629  
NGX_OK
;

630 
	}
}

633 
ngx_öt_t


634 
	$ngx_hâp_gzù_fûãr_gzhódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

636 
ngx_buf_t
 *
b
;

637 
ngx_chaö_t
 *
˛
;

638 
u_ch¨
 
gzhódî
[10] =

639 { 0x1f, 0x8b, 
Z_DEFLATED
, 0, 0, 0, 0, 0, 0, 3 };

641 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

642 i‡(
b
 =
NULL
) {

643  
NGX_ERROR
;

646 
b
->
mem‹y
 = 1;

647 
b
->
pos
 = 
gzhódî
;

648 
b
->
œ°
 = b->
pos
 + 10;

650 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

651 i‡(
˛
 =
NULL
) {

652  
NGX_ERROR
;

655 
˛
->
buf
 = 
b
;

656 
˛
->
√xt
 = 
˘x
->
out
;

657 
˘x
->
out
 = 
˛
;

659 
˘x
->
gzhódî
 = 1;

661  
NGX_OK
;

662 
	}
}

665 
ngx_öt_t


666 
	$ngx_hâp_gzù_fûãr_add_d©a
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

668 i‡(
˘x
->
z°ªam
.
avaû_ö
 || ctx->
Êush
 !
Z_NO_FLUSH
 || ctx->
ªdo
) {

669  
NGX_OK
;

672 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

673 "gzù in: %p", 
˘x
->
ö
);

675 i‡(
˘x
->
ö
 =
NULL
) {

676  
NGX_DECLINED
;

679 i‡(
˘x
->
c›y_buf
) {

686 
˘x
->
c›y_buf
->
√xt
 = ctx->
c›õd
;

687 
˘x
->
c›õd
 = ctx->
c›y_buf
;

688 
˘x
->
c›y_buf
 = 
NULL
;

691 
˘x
->
ö_buf
 = ctx->
ö
->
buf
;

693 i‡(
˘x
->
ö_buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
) {

694 
˘x
->
c›y_buf
 = ctx->
ö
;

697 
˘x
->
ö
 = ctx->ö->
√xt
;

699 
˘x
->
z°ªam
.
√xt_ö
 = ctx->
ö_buf
->
pos
;

700 
˘x
->
z°ªam
.
avaû_ö
 = ctx->
ö_buf
->
œ°
 - ctx->ö_buf->
pos
;

702 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

704 
˘x
->
ö_buf
,

705 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
avaû_ö
);

707 i‡(
˘x
->
ö_buf
->
œ°_buf
) {

708 
˘x
->
Êush
 = 
Z_FINISH
;

710 } i‡(
˘x
->
ö_buf
->
Êush
) {

711 
˘x
->
Êush
 = 
Z_SYNC_FLUSH
;

714 i‡(
˘x
->
z°ªam
.
avaû_ö
) {

716 
˘x
->
¸c32
 = 
	`¸c32
(˘x->¸c32, ctx->
z°ªam
.
√xt_ö
,

717 
˘x
->
z°ªam
.
avaû_ö
);

719 } i‡(
˘x
->
Êush
 =
Z_NO_FLUSH
) {

720  
NGX_AGAIN
;

723  
NGX_OK
;

724 
	}
}

727 
ngx_öt_t


728 
	$ngx_hâp_gzù_fûãr_gë_buf
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

730 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

732 i‡(
˘x
->
z°ªam
.
avaû_out
) {

733  
NGX_OK
;

736 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

738 i‡(
˘x
->
‰ì
) {

739 
˘x
->
out_buf
 = ctx->
‰ì
->
buf
;

740 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

742 } i‡(
˘x
->
bufs
 < 
c⁄f
->bufs.
num
) {

744 
˘x
->
out_buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
c⁄f
->
bufs
.
size
);

745 i‡(
˘x
->
out_buf
 =
NULL
) {

746  
NGX_ERROR
;

749 
˘x
->
out_buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_gzù_fûãr_moduÀ
;

750 
˘x
->
out_buf
->
ªcy˛ed
 = 1;

751 
˘x
->
bufs
++;

754 
˘x
->
nomem
 = 1;

755  
NGX_DECLINED
;

758 
˘x
->
z°ªam
.
√xt_out
 = ctx->
out_buf
->
pos
;

759 
˘x
->
z°ªam
.
avaû_out
 = 
c⁄f
->
bufs
.
size
;

761  
NGX_OK
;

762 
	}
}

765 
ngx_öt_t


766 
	$ngx_hâp_gzù_fûãr_deÊ©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_gzù_˘x_t
 *
˘x
)

768 
rc
;

769 
ngx_buf_t
 *
b
;

770 
ngx_chaö_t
 *
˛
;

771 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

773 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

775 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

776 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

777 
˘x
->
Êush
, ctx->
ªdo
);

779 
rc
 = 
	`deÊ©e
(&
˘x
->
z°ªam
, ctx->
Êush
);

781 i‡(
rc
 !
Z_OK
 &&Ñ¯!
Z_STREAM_END
 &&Ñ¯!
Z_BUF_ERROR
) {

782 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

783 "deÊ©e(ËÁûed: %d, %d", 
˘x
->
Êush
, 
rc
);

784  
NGX_ERROR
;

787 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

789 
˘x
->
z°ªam
.
√xt_ö
, ctx->z°ªam.
√xt_out
,

790 
˘x
->
z°ªam
.
avaû_ö
, ctx->z°ªam.
avaû_out
,

791 
rc
);

793 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

795 
˘x
->
ö_buf
, ctx->ö_buf->
pos
);

797 i‡(
˘x
->
z°ªam
.
√xt_ö
) {

798 
˘x
->
ö_buf
->
pos
 = ctx->
z°ªam
.
√xt_ö
;

800 i‡(
˘x
->
z°ªam
.
avaû_ö
 == 0) {

801 
˘x
->
z°ªam
.
√xt_ö
 = 
NULL
;

805 
˘x
->
out_buf
->
œ°
 = ctx->
z°ªam
.
√xt_out
;

807 i‡(
˘x
->
z°ªam
.
avaû_out
 == 0) {

811 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

812 i‡(
˛
 =
NULL
) {

813  
NGX_ERROR
;

816 
˛
->
buf
 = 
˘x
->
out_buf
;

817 
˛
->
√xt
 = 
NULL
;

818 *
˘x
->
œ°_out
 = 
˛
;

819 
˘x
->
œ°_out
 = &
˛
->
√xt
;

821 
˘x
->
ªdo
 = 1;

823  
NGX_AGAIN
;

826 
˘x
->
ªdo
 = 0;

828 i‡(
˘x
->
Êush
 =
Z_SYNC_FLUSH
) {

830 
˘x
->
Êush
 = 
Z_NO_FLUSH
;

832 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

833 i‡(
˛
 =
NULL
) {

834  
NGX_ERROR
;

837 
b
 = 
˘x
->
out_buf
;

839 i‡(
	`ngx_buf_size
(
b
) == 0) {

841 
b
 = 
	`ngx_ˇŒoc_buf
(
˘x
->
ªque°
->
poﬁ
);

842 i‡(
b
 =
NULL
) {

843  
NGX_ERROR
;

847 
˘x
->
z°ªam
.
avaû_out
 = 0;

850 
b
->
Êush
 = 1;

852 
˛
->
buf
 = 
b
;

853 
˛
->
√xt
 = 
NULL
;

854 *
˘x
->
œ°_out
 = 
˛
;

855 
˘x
->
œ°_out
 = &
˛
->
√xt
;

857  
NGX_OK
;

860 i‡(
rc
 =
Z_STREAM_END
) {

862 i‡(
	`ngx_hâp_gzù_fûãr_deÊ©e_íd
(
r
, 
˘x
Ë!
NGX_OK
) {

863  
NGX_ERROR
;

866  
NGX_OK
;

869 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

871 i‡(
c⁄f
->
no_buf„r
 && 
˘x
->
ö
 =
NULL
) {

873 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

874 i‡(
˛
 =
NULL
) {

875  
NGX_ERROR
;

878 
˛
->
buf
 = 
˘x
->
out_buf
;

879 
˛
->
√xt
 = 
NULL
;

880 *
˘x
->
œ°_out
 = 
˛
;

881 
˘x
->
œ°_out
 = &
˛
->
√xt
;

883  
NGX_OK
;

886  
NGX_AGAIN
;

887 
	}
}

890 
ngx_öt_t


891 
	$ngx_hâp_gzù_fûãr_deÊ©e_íd
(
ngx_hâp_ªque°_t
 *
r
,

892 
ngx_hâp_gzù_˘x_t
 *
˘x
)

894 
rc
;

895 
ngx_buf_t
 *
b
;

896 
ngx_chaö_t
 *
˛
;

897 
gzåaûî
 *
åaûî
;

899 
˘x
->
zö
 = ctx->
z°ªam
.
tŸÆ_ö
;

900 
˘x
->
zout
 = 10 + ctx->
z°ªam
.
tŸÆ_out
 + 8;

902 
rc
 = 
	`deÊ©eEnd
(&
˘x
->
z°ªam
);

904 i‡(
rc
 !
Z_OK
) {

905 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

906 "deÊ©eEnd(ËÁûed: %d", 
rc
);

907  
NGX_ERROR
;

910 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
¥óŒoˇãd
);

912 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

913 i‡(
˛
 =
NULL
) {

914  
NGX_ERROR
;

917 
˛
->
buf
 = 
˘x
->
out_buf
;

918 
˛
->
√xt
 = 
NULL
;

919 *
˘x
->
œ°_out
 = 
˛
;

920 
˘x
->
œ°_out
 = &
˛
->
√xt
;

922 i‡(
˘x
->
z°ªam
.
avaû_out
 >= 8) {

923 
åaûî
 = (
gzåaûî
 *Ë
˘x
->
out_buf
->
œ°
;

924 
˘x
->
out_buf
->
œ°
 += 8;

925 
˘x
->
out_buf
->
œ°_buf
 = 1;

928 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 8);

929 i‡(
b
 =
NULL
) {

930  
NGX_ERROR
;

933 
b
->
œ°_buf
 = 1;

935 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

936 i‡(
˛
 =
NULL
) {

937  
NGX_ERROR
;

940 
˛
->
buf
 = 
b
;

941 
˛
->
√xt
 = 
NULL
;

942 *
˘x
->
œ°_out
 = 
˛
;

943 
˘x
->
œ°_out
 = &
˛
->
√xt
;

944 
åaûî
 = (
gzåaûî
 *Ë
b
->
pos
;

945 
b
->
œ°
 += 8;

948 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

950 
åaûî
->
¸c32
 = 
˘x
->crc32;

951 
åaûî
->
zÀn
 = 
˘x
->
zö
;

955 
åaûî
->
¸c32
[0] = (
u_ch¨
Ë(
˘x
->crc32 & 0xff);

956 
åaûî
->
¸c32
[1] = (
u_ch¨
Ë((
˘x
->crc32 >> 8) & 0xff);

957 
åaûî
->
¸c32
[2] = (
u_ch¨
Ë((
˘x
->crc32 >> 16) & 0xff);

958 
åaûî
->
¸c32
[3] = (
u_ch¨
Ë((
˘x
->crc32 >> 24) & 0xff);

960 
åaûî
->
zÀn
[0] = (
u_ch¨
Ë(
˘x
->
zö
 & 0xff);

961 
åaûî
->
zÀn
[1] = (
u_ch¨
Ë((
˘x
->
zö
 >> 8) & 0xff);

962 
åaûî
->
zÀn
[2] = (
u_ch¨
Ë((
˘x
->
zö
 >> 16) & 0xff);

963 
åaûî
->
zÀn
[3] = (
u_ch¨
Ë((
˘x
->
zö
 >> 24) & 0xff);

967 
˘x
->
z°ªam
.
avaû_ö
 = 0;

968 
˘x
->
z°ªam
.
avaû_out
 = 0;

970 
˘x
->
d⁄e
 = 1;

972 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_GZIP_BUFFERED
;

974  
NGX_OK
;

975 
	}
}

979 
	$ngx_hâp_gzù_fûãr_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

981 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

983 *
p
;

984 
ngx_uöt_t
 
Æloc
;

986 
Æloc
 = 
ôems
 * 
size
;

988 i‡(
Æloc
 % 512 != 0 &&álloc < 8192) {

995 
Æloc
 = 8192;

998 i‡(
Æloc
 <
˘x
->
Æloˇãd
) {

999 
p
 = 
˘x
->
‰ì_mem
;

1000 
˘x
->
‰ì_mem
 +
Æloc
;

1001 
˘x
->
Æloˇãd
 -
Æloc
;

1003 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1005 
ôems
, 
size
, 
Æloc
, 
p
);

1007  
p
;

1010 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1012 
ôems
 * 
size
, 
˘x
->
Æloˇãd
);

1014 
p
 = 
	`ngx_∑Œoc
(
˘x
->
ªque°
->
poﬁ
, 
ôems
 * 
size
);

1016  
p
;

1017 
	}
}

1021 
	$ngx_hâp_gzù_fûãr_‰ì
(*
›aque
, *
addªss
)

1024 
ngx_hâp_gzù_˘x_t
 *
˘x
 = 
›aque
;

1026 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1027 "gzù fªe: %p", 
addªss
);

1029 
	}
}

1033 
	$ngx_hâp_gzù_fûãr_‰ì_c›y_buf
(
ngx_hâp_ªque°_t
 *
r
,

1034 
ngx_hâp_gzù_˘x_t
 *
˘x
)

1036 
ngx_chaö_t
 *
˛
;

1038 
˛
 = 
˘x
->
c›õd
; cl; c»˛->
√xt
) {

1039 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˛
->
buf
->
°¨t
);

1042 
˘x
->
c›õd
 = 
NULL
;

1043 
	}
}

1046 
ngx_öt_t


1047 
	$ngx_hâp_gzù_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

1049 
ngx_hâp_v¨übÀ_t
 *
v¨
;

1051 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_gzù_øtio
, 
NGX_HTTP_VAR_NOHASH
);

1052 i‡(
v¨
 =
NULL
) {

1053  
NGX_ERROR
;

1056 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_gzù_øtio_v¨übÀ
;

1058  
NGX_OK
;

1059 
	}
}

1062 
ngx_öt_t


1063 
	$ngx_hâp_gzù_øtio_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1064 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1066 
ngx_uöt_t
 
zöt
, 
z‰ac
;

1067 
ngx_hâp_gzù_˘x_t
 *
˘x
;

1069 
v
->
vÆid
 = 1;

1070 
v
->
no_ˇchóbÀ
 = 0;

1071 
v
->
nŸ_found
 = 0;

1073 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_gzù_fûãr_moduÀ
);

1075 i‡(
˘x
 =
NULL
 || ctx->
zout
 == 0) {

1076 
v
->
nŸ_found
 = 1;

1077  
NGX_OK
;

1080 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
 + 3);

1081 i‡(
v
->
d©a
 =
NULL
) {

1082  
NGX_ERROR
;

1085 
zöt
 = (
ngx_uöt_t
Ë(
˘x
->
zö
 / ctx->
zout
);

1086 
z‰ac
 = (
ngx_uöt_t
Ë((
˘x
->
zö
 * 100 / ctx->
zout
) % 100);

1088 i‡((
˘x
->
zö
 * 1000 / ctx->
zout
) % 10 > 4) {

1092 
z‰ac
++;

1094 i‡(
z‰ac
 > 99) {

1095 
zöt
++;

1096 
z‰ac
 = 0;

1100 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui.%02ui", 
zöt
, 
z‰ac
) - v->data;

1102  
NGX_OK
;

1103 
	}
}

1107 
	$ngx_hâp_gzù_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1109 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
;

1111 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_c⁄f_t
));

1112 i‡(
c⁄f
 =
NULL
) {

1113  
NULL
;

1124 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

1125 
c⁄f
->
no_buf„r
 = 
NGX_CONF_UNSET
;

1127 
c⁄f
->
po°p⁄e_gzùpög
 = 
NGX_CONF_UNSET_SIZE
;

1128 
c⁄f
->
Àvñ
 = 
NGX_CONF_UNSET
;

1129 
c⁄f
->
wbôs
 = 
NGX_CONF_UNSET_SIZE
;

1130 
c⁄f
->
memÀvñ
 = 
NGX_CONF_UNSET_SIZE
;

1131 
c⁄f
->
mö_Àngth
 = 
NGX_CONF_UNSET
;

1133  
c⁄f
;

1134 
	}
}

1138 
	$ngx_hâp_gzù_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1140 
ngx_hâp_gzù_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1141 
ngx_hâp_gzù_c⁄f_t
 *
c⁄f
 = 
chûd
;

1143 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1144 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_buf„r
, 
¥ev
->no_buffer, 0);

1146 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs,

1147 (128 * 1024Ë/ 
ngx_∑gesize
,Çgx_pagesize);

1149 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_gzùpög
, 
¥ev
->postpone_gzipping,

1151 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
Àvñ
, 
¥ev
->level, 1);

1152 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
wbôs
, 
¥ev
->wbôs, 
MAX_WBITS
);

1153 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
memÀvñ
, 
¥ev
->memlevel,

1154 
MAX_MEM_LEVEL
 - 1);

1155 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mö_Àngth
, 
¥ev
->min_length, 20);

1157 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1158 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1159 
ngx_hâp_html_deÁu…_ty≥s
)

1160 !
NGX_OK
)

1162  
NGX_CONF_ERROR
;

1165  
NGX_CONF_OK
;

1166 
	}
}

1169 
ngx_öt_t


1170 
	$ngx_hâp_gzù_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1172 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1173 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_gzù_hódî_fûãr
;

1175 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1176 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_gzù_body_fûãr
;

1178  
NGX_OK
;

1179 
	}
}

1183 
	$ngx_hâp_gzù_wödow
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1185 
size_t
 *
≈
 = 
d©a
;

1187 
size_t
 
wbôs
, 
wsize
;

1189 
wbôs
 = 15;

1191 
wsize
 = 32 * 1024; wsize > 256; wsize >>= 1) {

1193 i‡(
wsize
 =*
≈
) {

1194 *
≈
 = 
wbôs
;

1196  
NGX_CONF_OK
;

1199 
wbôs
--;

1203 
	}
}

1207 
	$ngx_hâp_gzù_hash
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

1209 
size_t
 *
≈
 = 
d©a
;

1211 
size_t
 
memÀvñ
, 
hsize
;

1213 
memÀvñ
 = 9;

1215 
hsize
 = 128 * 1024; hsize > 256; hsize >>= 1) {

1217 i‡(
hsize
 =*
≈
) {

1218 *
≈
 = 
memÀvñ
;

1220  
NGX_CONF_OK
;

1223 
memÀvñ
--;

1227 
	}
}

	@src/http/modules/ngx_http_gzip_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_GZIP_STATIC_OFF
 0

	)

14 
	#NGX_HTTP_GZIP_STATIC_ON
 1

	)

15 
	#NGX_HTTP_GZIP_STATIC_ALWAYS
 2

	)

19 
ngx_uöt_t
 
	míabÀ
;

20 } 
	tngx_hâp_gzù_°©ic_c⁄f_t
;

23 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

24 *
ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

26 *
chûd
);

27 
ngx_öt_t
 
ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

30 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_°©ic
[] = {

31 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_STATIC_OFF
 },

32 { 
ngx_°rög
("⁄"), 
NGX_HTTP_GZIP_STATIC_ON
 },

33 { 
ngx_°rög
("Æways"), 
NGX_HTTP_GZIP_STATIC_ALWAYS
 },

34 { 
ngx_nuŒ_°rög
, 0 }

38 
ngx_comm™d_t
 
	gngx_hâp_gzù_°©ic_comm™ds
[] = {

40 { 
ngx_°rög
("gzip_static"),

41 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

42 
ngx_c⁄f_£t_íum_¶Ÿ
,

43 
NGX_HTTP_LOC_CONF_OFFSET
,

44 
off£tof
(
ngx_hâp_gzù_°©ic_c⁄f_t
, 
íabÀ
),

45 &
ngx_hâp_gzù_°©ic
 },

47 
ngx_nuŒ_comm™d


51 
ngx_hâp_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ_˘x
 = {

52 
NULL
,

53 
ngx_hâp_gzù_°©ic_öô
,

55 
NULL
,

56 
NULL
,

58 
NULL
,

59 
NULL
,

61 
ngx_hâp_gzù_°©ic_¸óã_c⁄f
,

62 
ngx_hâp_gzù_°©ic_mîge_c⁄f


66 
ngx_moduÀ_t
 
	gngx_hâp_gzù_°©ic_moduÀ
 = {

67 
NGX_MODULE_V1
,

68 &
ngx_hâp_gzù_°©ic_moduÀ_˘x
,

69 
ngx_hâp_gzù_°©ic_comm™ds
,

70 
NGX_HTTP_MODULE
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NGX_MODULE_V1_PADDING


82 
ngx_öt_t


83 
	$ngx_hâp_gzù_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
u_ch¨
 *
p
;

86 
size_t
 
roŸ
;

87 
ngx_°r_t
 
∑th
;

88 
ngx_öt_t
 
rc
;

89 
ngx_uöt_t
 
Àvñ
;

90 
ngx_log_t
 *
log
;

91 
ngx_buf_t
 *
b
;

92 
ngx_chaö_t
 
out
;

93 
ngx_èbÀ_ñt_t
 *
h
;

94 
ngx_›í_fûe_öfo_t
 
of
;

95 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

96 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
gzcf
;

98 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

99  
NGX_DECLINED
;

102 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

103  
NGX_DECLINED
;

106 
gzcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_gzù_°©ic_moduÀ
);

108 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_OFF
) {

109  
NGX_DECLINED
;

112 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

113 
rc
 = 
	`ngx_hâp_gzù_ok
(
r
);

117 
rc
 = 
NGX_OK
;

120 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

122 i‡(!
˛cf
->
gzù_v¨y
 && 
rc
 !
NGX_OK
) {

123  
NGX_DECLINED
;

126 
log
 = 
r
->
c⁄√˘i⁄
->log;

128 
p
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, (".gz") - 1);

129 i‡(
p
 =
NULL
) {

130  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

133 *
p
++ = '.';

134 *
p
++ = 'g';

135 *
p
++ = 'z';

136 *
p
 = '\0';

138 
∑th
.
Àn
 = 
p
 -Ö©h.
d©a
;

140 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

141 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

143 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

145 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

146 
of
.
dúe˘io
 = 
˛cf
->directio;

147 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

148 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

149 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

150 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

152 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

153  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

156 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

157 !
NGX_OK
)

159 
of
.
îr
) {

162  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

164 
NGX_ENOENT
:

165 
NGX_ENOTDIR
:

166 
NGX_ENAMETOOLONG
:

168  
NGX_DECLINED
;

170 
NGX_EACCES
:

171 #i‡(
NGX_HAVE_OPENAT
)

172 
NGX_EMLINK
:

173 
NGX_ELOOP
:

176 
Àvñ
 = 
NGX_LOG_ERR
;

181 
Àvñ
 = 
NGX_LOG_CRIT
;

185 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

186 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

188  
NGX_DECLINED
;

191 i‡(
gzcf
->
íabÀ
 =
NGX_HTTP_GZIP_STATIC_ON
) {

192 
r
->
gzù_v¨y
 = 1;

194 i‡(
rc
 !
NGX_OK
) {

195  
NGX_DECLINED
;

199 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

201 i‡(
of
.
is_dú
) {

202 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

203  
NGX_DECLINED
;

206 #i‡!(
NGX_WIN32
)

208 i‡(!
of
.
is_fûe
) {

209 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

210 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

212  
NGX_HTTP_NOT_FOUND
;

217 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

219 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

221 i‡(
rc
 !
NGX_OK
) {

222  
rc
;

225 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

227 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

229 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

231 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

232  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

235 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

236  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

239 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

240 i‡(
h
 =
NULL
) {

241  
NGX_ERROR
;

244 
h
->
hash
 = 1;

245 
	`ngx_°r_£t
(&
h
->
key
, "Content-Encoding");

246 
	`ngx_°r_£t
(&
h
->
vÆue
, "gzip");

247 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

249 
r
->
ign‹e_c⁄ã¡_ícodög
 = 1;

253 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

254 i‡(
b
 =
NULL
) {

255  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

258 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

259 i‡(
b
->
fûe
 =
NULL
) {

260  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

263 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

265 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

266  
rc
;

269 
b
->
fûe_pos
 = 0;

270 
b
->
fûe_œ°
 = 
of
.
size
;

272 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

273 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

274 
b
->
œ°_ö_chaö
 = 1;

276 
b
->
fûe
->
fd
 = 
of
.fd;

277 
b
->
fûe
->
«me
 = 
∑th
;

278 
b
->
fûe
->
log
 =Üog;

279 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

281 
out
.
buf
 = 
b
;

282 
out
.
√xt
 = 
NULL
;

284  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

285 
	}
}

289 
	$ngx_hâp_gzù_°©ic_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

291 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
;

293 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_gzù_°©ic_c⁄f_t
));

294 i‡(
c⁄f
 =
NULL
) {

295  
NULL
;

298 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

300  
c⁄f
;

301 
	}
}

305 
	$ngx_hâp_gzù_°©ic_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

307 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

308 
ngx_hâp_gzù_°©ic_c⁄f_t
 *
c⁄f
 = 
chûd
;

310 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

311 
NGX_HTTP_GZIP_STATIC_OFF
);

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_öt_t


318 
	$ngx_hâp_gzù_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

320 
ngx_hâp_h™dÀr_±
 *
h
;

321 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

323 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

325 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

326 i‡(
h
 =
NULL
) {

327  
NGX_ERROR
;

330 *
h
 = 
ngx_hâp_gzù_°©ic_h™dÀr
;

332  
NGX_OK
;

333 
	}
}

	@src/http/modules/ngx_http_headers_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_hódî_vÆ_s
 
	tngx_hâp_hódî_vÆ_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_£t_hódî_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_hâp_hódî_vÆ_t
 *
	thv
, 
	tngx_°r_t
 *
	tvÆue
);

20 
ngx_°r_t
 
«me
;

21 
ngx_uöt_t
 
off£t
;

22 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

23 } 
	tngx_hâp_£t_hódî_t
;

26 
	sngx_hâp_hódî_vÆ_s
 {

27 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

28 
ngx_°r_t
 
key
;

29 
ngx_hâp_£t_hódî_±
 
h™dÀr
;

30 
ngx_uöt_t
 
off£t
;

35 
NGX_HTTP_EXPIRES_OFF
,

36 
NGX_HTTP_EXPIRES_EPOCH
,

37 
NGX_HTTP_EXPIRES_MAX
,

38 
NGX_HTTP_EXPIRES_ACCESS
,

39 
NGX_HTTP_EXPIRES_MODIFIED
,

40 
NGX_HTTP_EXPIRES_DAILY
,

41 
NGX_HTTP_EXPIRES_UNSET


42 } 
	tngx_hâp_expúes_t
;

46 
ngx_hâp_expúes_t
 
expúes
;

47 
time_t
 
expúes_time
;

48 
ngx_¨øy_t
 *
hódîs
;

49 } 
	tngx_hâp_hódîs_c⁄f_t
;

52 
ngx_öt_t
 
	`ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
);

54 
ngx_öt_t
 
	`ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

55 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

56 
ngx_öt_t
 
	`ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

58 
ngx_öt_t
 
	`ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

60 
ngx_öt_t
 
	`ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
,

61 
ngx_hâp_hódî_vÆ_t
 *
hv
, 
ngx_°r_t
 *
vÆue
);

63 *
	`ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
	`ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
	`ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

67 *
	`ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
	`ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

73 
ngx_hâp_£t_hódî_t
 
ngx_hâp_£t_hódîs
[] = {

75 { 
	`ngx_°rög
("Cache-C⁄åﬁ"), 0, 
ngx_hâp_add_ˇche_c⁄åﬁ
 },

77 { 
	`ngx_°rög
("Last-Modified"),

78 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
),

79 
ngx_hâp_£t_œ°_modifõd
 },

81 { 
	`ngx_°rög
("ETag"),

82 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
),

83 
ngx_hâp_£t_ª•⁄£_hódî
 },

85 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

86 
	}
};

89 
ngx_comm™d_t
 
	gngx_hâp_hódîs_fûãr_comm™ds
[] = {

91 { 
ngx_°rög
("expires"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


93 |
NGX_CONF_TAKE12
,

94 
ngx_hâp_hódîs_expúes
,

95 
NGX_HTTP_LOC_CONF_OFFSET
,

97 
NULL
},

99 { 
ngx_°rög
("add_header"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


101 |
NGX_CONF_TAKE2
,

102 
ngx_hâp_hódîs_add
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
NULL
},

107 
ngx_nuŒ_comm™d


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_hódîs_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
ngx_hâp_hódîs_¸óã_c⁄f
,

122 
ngx_hâp_hódîs_mîge_c⁄f


126 
ngx_moduÀ_t
 
	gngx_hâp_hódîs_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_hódîs_fûãr_moduÀ_˘x
,

129 
ngx_hâp_hódîs_fûãr_comm™ds
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

145 
ngx_öt_t


146 
	$ngx_hâp_hódîs_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

148 
ngx_°r_t
 
vÆue
;

149 
ngx_uöt_t
 
i
;

150 
ngx_hâp_hódî_vÆ_t
 *
h
;

151 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

153 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_hódîs_fûãr_moduÀ
);

155 i‡((
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_OFF
 && c⁄f->
hódîs
 =
NULL
)

156 || 
r
 !r->
maö


157 || (
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


158 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_CREATED


159 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NO_CONTENT


160 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


161 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_PERMANENTLY


162 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_MOVED_TEMPORARILY


163 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_SEE_OTHER


164 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED


165 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_TEMPORARY_REDIRECT
))

167  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

170 i‡(
c⁄f
->
expúes
 !
NGX_HTTP_EXPIRES_OFF
) {

171 i‡(
	`ngx_hâp_£t_expúes
(
r
, 
c⁄f
Ë!
NGX_OK
) {

172  
NGX_ERROR
;

176 i‡(
c⁄f
->
hódîs
) {

177 
h
 = 
c⁄f
->
hódîs
->
ñts
;

178 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

180 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
h
[
i
].
vÆue
, &vÆueË!
NGX_OK
) {

181  
NGX_ERROR
;

184 i‡(
h
[
i
].
	`h™dÀr
(
r
, &h[i], &
vÆue
Ë!
NGX_OK
) {

185  
NGX_ERROR
;

190  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

191 
	}
}

194 
ngx_öt_t


195 
	$ngx_hâp_£t_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
)

197 
size_t
 
Àn
;

198 
time_t
 
now
, 
expúes_time
, 
max_age
;

199 
ngx_uöt_t
 
i
;

200 
ngx_èbÀ_ñt_t
 *
expúes
, *
cc
, **
c˝
;

202 
expúes
 = 
r
->
hódîs_out
.expires;

204 i‡(
expúes
 =
NULL
) {

206 
expúes
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

207 i‡(
expúes
 =
NULL
) {

208  
NGX_ERROR
;

211 
r
->
hódîs_out
.
expúes
 =Éxpires;

213 
expúes
->
hash
 = 1;

214 
	`ngx_°r_£t
(&
expúes
->
key
, "Expires");

217 
Àn
 = ("Mon, 28 Sep 1970 06:00:00 GMT");

218 
expúes
->
vÆue
.
Àn
 =Üen - 1;

220 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

222 i‡(
c˝
 =
NULL
) {

224 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

225 1, (
ngx_èbÀ_ñt_t
 *))

226 !
NGX_OK
)

228  
NGX_ERROR
;

231 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

232 i‡(
c˝
 =
NULL
) {

233  
NGX_ERROR
;

236 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

237 i‡(
cc
 =
NULL
) {

238  
NGX_ERROR
;

241 
cc
->
hash
 = 1;

242 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

243 *
c˝
 = 
cc
;

246 
i
 = 1; i < 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
√…s
; i++) {

247 
c˝
[
i
]->
hash
 = 0;

250 
cc
 = 
c˝
[0];

253 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_EPOCH
) {

254 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 01 Jan 1970 00:00:01 GMT";

255 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

256  
NGX_OK
;

259 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_MAX
) {

260 
expúes
->
vÆue
.
d©a
 = (
u_ch¨
 *) "Thu, 31 Dec 2037 23:55:55 GMT";

262 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=315360000");

263  
NGX_OK
;

266 
expúes
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

267 i‡(
expúes
->
vÆue
.
d©a
 =
NULL
) {

268  
NGX_ERROR
;

271 i‡(
c⁄f
->
expúes_time
 =0 && c⁄f->
expúes
 !
NGX_HTTP_EXPIRES_DAILY
) {

272 
	`ngx_mem˝y
(
expúes
->
vÆue
.
d©a
, 
ngx_ˇched_hâp_time
.data,

273 
ngx_ˇched_hâp_time
.
Àn
 + 1);

274 
	`ngx_°r_£t
(&
cc
->
vÆue
, "max-age=0");

275  
NGX_OK
;

278 
now
 = 
	`ngx_time
();

280 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY
) {

281 
expúes_time
 = 
	`ngx_√xt_time
(
c⁄f
->expires_time);

282 
max_age
 = 
expúes_time
 - 
now
;

284 } i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_ACCESS


285 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

287 
expúes_time
 = 
now
 + 
c⁄f
->expires_time;

288 
max_age
 = 
c⁄f
->
expúes_time
;

291 
expúes_time
 = 
r
->
hódîs_out
.
œ°_modifõd_time
 + 
c⁄f
->expires_time;

292 
max_age
 = 
expúes_time
 - 
now
;

295 
	`ngx_hâp_time
(
expúes
->
vÆue
.
d©a
, 
expúes_time
);

297 i‡(
c⁄f
->
expúes_time
 < 0 || 
max_age
 < 0) {

298 
	`ngx_°r_£t
(&
cc
->
vÆue
, "no-cache");

299  
NGX_OK
;

302 
cc
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

303 ("max-age="Ë+ 
NGX_TIME_T_LEN
 + 1);

304 i‡(
cc
->
vÆue
.
d©a
 =
NULL
) {

305  
NGX_ERROR
;

308 
cc
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(cc->vÆue.
d©a
, "max-age=%T", 
max_age
)

309 - 
cc
->
vÆue
.
d©a
;

311  
NGX_OK
;

312 
	}
}

315 
ngx_öt_t


316 
	$ngx_hâp_add_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

317 
ngx_°r_t
 *
vÆue
)

319 
ngx_èbÀ_ñt_t
 *
h
;

321 i‡(
vÆue
->
Àn
) {

322 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

323 i‡(
h
 =
NULL
) {

324  
NGX_ERROR
;

327 
h
->
hash
 = 1;

328 
h
->
key
 = 
hv
->key;

329 
h
->
vÆue
 = *value;

332  
NGX_OK
;

333 
	}
}

336 
ngx_öt_t


337 
	$ngx_hâp_add_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

338 
ngx_°r_t
 *
vÆue
)

340 
ngx_èbÀ_ñt_t
 *
cc
, **
c˝
;

342 
c˝
 = 
r
->
hódîs_out
.
ˇche_c⁄åﬁ
.
ñts
;

344 i‡(
c˝
 =
NULL
) {

346 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
,Ñ->
poﬁ
,

347 1, (
ngx_èbÀ_ñt_t
 *))

348 !
NGX_OK
)

350  
NGX_ERROR
;

354 
c˝
 = 
	`ngx_¨øy_push
(&
r
->
hódîs_out
.
ˇche_c⁄åﬁ
);

355 i‡(
c˝
 =
NULL
) {

356  
NGX_ERROR
;

359 
cc
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

360 i‡(
cc
 =
NULL
) {

361  
NGX_ERROR
;

364 
cc
->
hash
 = 1;

365 
	`ngx_°r_£t
(&
cc
->
key
, "Cache-Control");

366 
cc
->
vÆue
 = *value;

368 *
c˝
 = 
cc
;

370  
NGX_OK
;

371 
	}
}

374 
ngx_öt_t


375 
	$ngx_hâp_£t_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

376 
ngx_°r_t
 *
vÆue
)

378 i‡(
	`ngx_hâp_£t_ª•⁄£_hódî
(
r
, 
hv
, 
vÆue
Ë!
NGX_OK
) {

379  
NGX_ERROR
;

382 
r
->
hódîs_out
.
œ°_modifõd_time
 =

383 (
vÆue
->
Àn
Ë? 
	`ngx_hâp_∑r£_time
(vÆue->
d©a
, value->len) : -1;

385  
NGX_OK
;

386 
	}
}

389 
ngx_öt_t


390 
	$ngx_hâp_£t_ª•⁄£_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_hódî_vÆ_t
 *
hv
,

391 
ngx_°r_t
 *
vÆue
)

393 
ngx_èbÀ_ñt_t
 *
h
, **
ﬁd
;

395 
ﬁd
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
hv
->
off£t
);

397 i‡(
vÆue
->
Àn
 == 0) {

398 i‡(*
ﬁd
) {

399 (*
ﬁd
)->
hash
 = 0;

400 *
ﬁd
 = 
NULL
;

403  
NGX_OK
;

406 i‡(*
ﬁd
) {

407 
h
 = *
ﬁd
;

410 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

411 i‡(
h
 =
NULL
) {

412  
NGX_ERROR
;

415 *
ﬁd
 = 
h
;

418 
h
->
hash
 = 1;

419 
h
->
key
 = 
hv
->key;

420 
h
->
vÆue
 = *value;

422  
NGX_OK
;

423 
	}
}

427 
	$ngx_hâp_hódîs_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

429 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
;

431 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_hódîs_c⁄f_t
));

432 i‡(
c⁄f
 =
NULL
) {

433  
NULL
;

443 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_UNSET
;

445  
c⁄f
;

446 
	}
}

450 
	$ngx_hâp_hódîs_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

452 
ngx_hâp_hódîs_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

453 
ngx_hâp_hódîs_c⁄f_t
 *
c⁄f
 = 
chûd
;

455 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

456 
c⁄f
->
expúes
 = 
¥ev
->expires;

457 
c⁄f
->
expúes_time
 = 
¥ev
->expires_time;

459 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_EXPIRES_UNSET
) {

460 
c⁄f
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

464 i‡(
c⁄f
->
hódîs
 =
NULL
) {

465 
c⁄f
->
hódîs
 = 
¥ev
->headers;

468  
NGX_CONF_OK
;

469 
	}
}

472 
ngx_öt_t


473 
	$ngx_hâp_hódîs_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

475 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

476 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódîs_fûãr
;

478  
NGX_OK
;

479 
	}
}

483 
	$ngx_hâp_hódîs_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

485 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

487 
ngx_uöt_t
 
möus
, 
n
;

488 
ngx_°r_t
 *
vÆue
;

490 i‡(
hcf
->
expúes
 !
NGX_HTTP_EXPIRES_UNSET
) {

494 
vÆue
 = 
cf
->
¨gs
->
ñts
;

496 i‡(
cf
->
¨gs
->
√…s
 == 2) {

498 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "epoch") == 0) {

499 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_EPOCH
;

500  
NGX_CONF_OK
;

503 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

504 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MAX
;

505  
NGX_CONF_OK
;

508 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

509 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_OFF
;

510  
NGX_CONF_OK
;

513 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_ACCESS
;

515 
n
 = 1;

519 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "modified") != 0) {

523 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_MODIFIED
;

525 
n
 = 2;

528 i‡(
vÆue
[
n
].
d©a
[0] == '@') {

529 
vÆue
[
n
].
d©a
++;

530 
vÆue
[
n
].
Àn
--;

531 
möus
 = 0;

533 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_MODIFIED
) {

537 
hcf
->
expúes
 = 
NGX_HTTP_EXPIRES_DAILY
;

539 } i‡(
vÆue
[
n
].
d©a
[0] == '+') {

540 
vÆue
[
n
].
d©a
++;

541 
vÆue
[
n
].
Àn
--;

542 
möus
 = 0;

544 } i‡(
vÆue
[
n
].
d©a
[0] == '-') {

545 
vÆue
[
n
].
d©a
++;

546 
vÆue
[
n
].
Àn
--;

547 
möus
 = 1;

550 
möus
 = 0;

553 
hcf
->
expúes_time
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

555 i‡(
hcf
->
expúes_time
 =(
time_t
Ë
NGX_ERROR
) {

559 i‡(
hcf
->
expúes
 =
NGX_HTTP_EXPIRES_DAILY


560 && 
hcf
->
expúes_time
 > 24 * 60 * 60)

565 i‡(
möus
) {

566 
hcf
->
expúes_time
 = - hcf->expires_time;

569  
NGX_CONF_OK
;

570 
	}
}

574 
	$ngx_hâp_hódîs_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

576 
ngx_hâp_hódîs_c⁄f_t
 *
hcf
 = 
c⁄f
;

578 
ngx_°r_t
 *
vÆue
;

579 
ngx_uöt_t
 
i
;

580 
ngx_hâp_hódî_vÆ_t
 *
hv
;

581 
ngx_hâp_£t_hódî_t
 *
£t
;

582 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

584 
vÆue
 = 
cf
->
¨gs
->
ñts
;

586 i‡(
hcf
->
hódîs
 =
NULL
) {

587 
hcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

588 (
ngx_hâp_hódî_vÆ_t
));

589 i‡(
hcf
->
hódîs
 =
NULL
) {

590  
NGX_CONF_ERROR
;

594 
hv
 = 
	`ngx_¨øy_push
(
hcf
->
hódîs
);

595 i‡(
hv
 =
NULL
) {

596  
NGX_CONF_ERROR
;

599 
hv
->
key
 = 
vÆue
[1];

600 
hv
->
h™dÀr
 = 
ngx_hâp_add_hódî
;

601 
hv
->
off£t
 = 0;

603 
£t
 = 
ngx_hâp_£t_hódîs
;

604 
i
 = 0; 
£t
[i].
«me
.
Àn
; i++) {

605 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[1].
d©a
, 
£t
[
i
].
«me
.data) != 0) {

609 
hv
->
off£t
 = 
£t
[
i
].offset;

610 
hv
->
h™dÀr
 = 
£t
[
i
].handler;

615 i‡(
vÆue
[2].
Àn
 == 0) {

616 
	`ngx_memzîo
(&
hv
->
vÆue
, (
ngx_hâp_com∂ex_vÆue_t
));

617  
NGX_CONF_OK
;

620 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

622 
ccv
.
cf
 = cf;

623 
ccv
.
vÆue
 = &value[2];

624 
ccv
.
com∂ex_vÆue
 = &
hv
->
vÆue
;

626 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

627  
NGX_CONF_ERROR
;

630  
NGX_CONF_OK
;

631 
	}
}

	@src/http/modules/ngx_http_image_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<gd.h
>

15 
	#NGX_HTTP_IMAGE_OFF
 0

	)

16 
	#NGX_HTTP_IMAGE_TEST
 1

	)

17 
	#NGX_HTTP_IMAGE_SIZE
 2

	)

18 
	#NGX_HTTP_IMAGE_RESIZE
 3

	)

19 
	#NGX_HTTP_IMAGE_CROP
 4

	)

20 
	#NGX_HTTP_IMAGE_ROTATE
 5

	)

23 
	#NGX_HTTP_IMAGE_START
 0

	)

24 
	#NGX_HTTP_IMAGE_READ
 1

	)

25 
	#NGX_HTTP_IMAGE_PROCESS
 2

	)

26 
	#NGX_HTTP_IMAGE_PASS
 3

	)

27 
	#NGX_HTTP_IMAGE_DONE
 4

	)

30 
	#NGX_HTTP_IMAGE_NONE
 0

	)

31 
	#NGX_HTTP_IMAGE_JPEG
 1

	)

32 
	#NGX_HTTP_IMAGE_GIF
 2

	)

33 
	#NGX_HTTP_IMAGE_PNG
 3

	)

36 
	#NGX_HTTP_IMAGE_BUFFERED
 0x08

	)

40 
ngx_uöt_t
 
	mfûãr
;

41 
ngx_uöt_t
 
	mwidth
;

42 
ngx_uöt_t
 
	mheight
;

43 
ngx_uöt_t
 
	m™gÀ
;

44 
ngx_uöt_t
 
	mj≥g_quÆôy
;

45 
ngx_uöt_t
 
	msh¨≥n
;

47 
ngx_Êag_t
 
	må™•¨ícy
;

48 
ngx_Êag_t
 
	möãæa˚
;

50 
ngx_hâp_com∂ex_vÆue_t
 *
	mwcv
;

51 
ngx_hâp_com∂ex_vÆue_t
 *
	mhcv
;

52 
ngx_hâp_com∂ex_vÆue_t
 *
	macv
;

53 
ngx_hâp_com∂ex_vÆue_t
 *
	mjqcv
;

54 
ngx_hâp_com∂ex_vÆue_t
 *
	mshcv
;

56 
size_t
 
	mbuf„r_size
;

57 } 
	tngx_hâp_image_fûãr_c⁄f_t
;

61 
u_ch¨
 *
	mimage
;

62 
u_ch¨
 *
	mœ°
;

64 
size_t
 
	mÀngth
;

66 
ngx_uöt_t
 
	mwidth
;

67 
ngx_uöt_t
 
	mheight
;

68 
ngx_uöt_t
 
	mmax_width
;

69 
ngx_uöt_t
 
	mmax_height
;

70 
ngx_uöt_t
 
	m™gÀ
;

72 
ngx_uöt_t
 
	mpha£
;

73 
ngx_uöt_t
 
	mty≥
;

74 
ngx_uöt_t
 
	mf‹˚
;

75 } 
	tngx_hâp_image_fûãr_˘x_t
;

78 
ngx_öt_t
 
ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

80 
ngx_uöt_t
 
ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

81 
ngx_öt_t
 
ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
);

82 
ngx_buf_t
 *
ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
);

83 
ngx_buf_t
 *
ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

85 
ngx_buf_t
 *
ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

87 
ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

88 
ngx_öt_t
 
ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

91 
ngx_buf_t
 *
ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

93 
gdImagePå
 
ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
);

95 
gdImagePå
 
ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
,

96 
cﬁ‹s
);

97 
u_ch¨
 *
ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
,

98 
gdImagePå
 
img
, *
size
);

99 
ngx_hâp_image_˛ónup
(*
d©a
);

100 
ngx_uöt_t
 
ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
);

102 
ngx_uöt_t
 
ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
);

105 *
ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

106 *
ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

107 *
chûd
);

108 *
ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

109 *
c⁄f
);

110 *
ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
,

111 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

112 *
ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

113 *
c⁄f
);

114 
ngx_öt_t
 
ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

117 
ngx_comm™d_t
 
	gngx_hâp_image_fûãr_comm™ds
[] = {

119 { 
ngx_°rög
("image_filter"),

120 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

121 
ngx_hâp_image_fûãr
,

122 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
NULL
 },

126 { 
ngx_°rög
("image_filter_jpeg_quality"),

127 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

128 
ngx_hâp_image_fûãr_j≥g_quÆôy
,

129 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
NULL
 },

133 { 
ngx_°rög
("image_filter_sharpen"),

134 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

135 
ngx_hâp_image_fûãr_sh¨≥n
,

136 
NGX_HTTP_LOC_CONF_OFFSET
,

138 
NULL
 },

140 { 
ngx_°rög
("image_filter_transparency"),

141 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

142 
ngx_c⁄f_£t_Êag_¶Ÿ
,

143 
NGX_HTTP_LOC_CONF_OFFSET
,

144 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
å™•¨ícy
),

145 
NULL
 },

147 { 
ngx_°rög
("image_filter_interlace"),

148 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

149 
ngx_c⁄f_£t_Êag_¶Ÿ
,

150 
NGX_HTTP_LOC_CONF_OFFSET
,

151 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
öãæa˚
),

152 
NULL
 },

154 { 
ngx_°rög
("image_filter_buffer"),

155 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

156 
ngx_c⁄f_£t_size_¶Ÿ
,

157 
NGX_HTTP_LOC_CONF_OFFSET
,

158 
off£tof
(
ngx_hâp_image_fûãr_c⁄f_t
, 
buf„r_size
),

159 
NULL
 },

161 
ngx_nuŒ_comm™d


165 
ngx_hâp_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ_˘x
 = {

166 
NULL
,

167 
ngx_hâp_image_fûãr_öô
,

169 
NULL
,

170 
NULL
,

172 
NULL
,

173 
NULL
,

175 
ngx_hâp_image_fûãr_¸óã_c⁄f
,

176 
ngx_hâp_image_fûãr_mîge_c⁄f


180 
ngx_moduÀ_t
 
	gngx_hâp_image_fûãr_moduÀ
 = {

181 
NGX_MODULE_V1
,

182 &
ngx_hâp_image_fûãr_moduÀ_˘x
,

183 
ngx_hâp_image_fûãr_comm™ds
,

184 
NGX_HTTP_MODULE
,

185 
NULL
,

186 
NULL
,

187 
NULL
,

188 
NULL
,

189 
NULL
,

190 
NULL
,

191 
NULL
,

192 
NGX_MODULE_V1_PADDING


196 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

197 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

200 
ngx_°r_t
 
	gngx_hâp_image_ty≥s
[] = {

201 
ngx_°rög
("image/jpeg"),

202 
ngx_°rög
("image/gif"),

203 
ngx_°rög
("image/png")

207 
ngx_öt_t


208 
	$ngx_hâp_image_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

210 
off_t
 
Àn
;

211 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

212 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

214 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

215  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

218 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

220 i‡(
˘x
) {

221 
	`ngx_hâp_£t_˘x
(
r
, 
NULL
, 
ngx_hâp_image_fûãr_moduÀ
);

222  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

225 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

227 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_OFF
) {

228  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

231 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


233 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

234 (
u_ch¨
 *) "multipart/x-mixed-replace",

238 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241  
NGX_ERROR
;

244 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_image_fûãr_˘x_t
));

245 i‡(
˘x
 =
NULL
) {

246  
NGX_ERROR
;

249 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_image_fûãr_moduÀ
);

251 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

253 i‡(
Àn
 !-1 &&Üí > (
off_t
Ë
c⁄f
->
buf„r_size
) {

254 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

255 "imagêfûãr:ÅoÿbigÑe•⁄£: %O", 
Àn
);

257  
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
;

260 i‡(
Àn
 == -1) {

261 
˘x
->
Àngth
 = 
c⁄f
->
buf„r_size
;

264 
˘x
->
Àngth
 = (
size_t
Ë
Àn
;

267 i‡(
r
->
hódîs_out
.
ª‰esh
) {

268 
r
->
hódîs_out
.
ª‰esh
->
hash
 = 0;

271 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

272 
r
->
Ælow_ønges
 = 0;

274  
NGX_OK
;

275 
	}
}

278 
ngx_öt_t


279 
	$ngx_hâp_image_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

281 
ngx_öt_t
 
rc
;

282 
ngx_°r_t
 *
˘
;

283 
ngx_chaö_t
 
out
;

284 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

285 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "image filter");

289 i‡(
ö
 =
NULL
) {

290  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

293 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

295 i‡(
˘x
 =
NULL
) {

296  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

299 
˘x
->
pha£
) {

301 
NGX_HTTP_IMAGE_START
:

303 
˘x
->
ty≥
 = 
	`ngx_hâp_image_ã°
(
r
, 
ö
);

305 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

307 i‡(
˘x
->
ty≥
 =
NGX_HTTP_IMAGE_NONE
) {

309 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

310 
out
.
buf
 = 
	`ngx_hâp_image_js⁄
(
r
, 
NULL
);

312 i‡(
out
.
buf
) {

313 
out
.
√xt
 = 
NULL
;

314 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_DONE
;

316  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

320  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

321 &
ngx_hâp_image_fûãr_moduÀ
,

322 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

327 
˘
 = &
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1];

328 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

329 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

330 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

332 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_TEST
) {

333 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

335  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, 
ö
);

338 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_READ
;

342 
NGX_HTTP_IMAGE_READ
:

344 
rc
 = 
	`ngx_hâp_image_ªad
(
r
, 
ö
);

346 i‡(
rc
 =
NGX_AGAIN
) {

347  
NGX_OK
;

350 i‡(
rc
 =
NGX_ERROR
) {

351  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

352 &
ngx_hâp_image_fûãr_moduÀ
,

353 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

358 
NGX_HTTP_IMAGE_PROCESS
:

360 
out
.
buf
 = 
	`ngx_hâp_image_¥o˚ss
(
r
);

362 i‡(
out
.
buf
 =
NULL
) {

363  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
,

364 &
ngx_hâp_image_fûãr_moduÀ
,

365 
NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
);

368 
out
.
√xt
 = 
NULL
;

369 
˘x
->
pha£
 = 
NGX_HTTP_IMAGE_PASS
;

371  
	`ngx_hâp_image_£nd
(
r
, 
˘x
, &
out
);

373 
NGX_HTTP_IMAGE_PASS
:

375  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

379 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

382  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

384 
	}
}

387 
ngx_öt_t


388 
	$ngx_hâp_image_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
,

389 
ngx_chaö_t
 *
ö
)

391 
ngx_öt_t
 
rc
;

393 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

395 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

396  
NGX_ERROR
;

399 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

401 i‡(
˘x
->
pha£
 =
NGX_HTTP_IMAGE_DONE
) {

403  (
rc
 =
NGX_OK
Ë? 
NGX_ERROR
 :Ñc;

406  
rc
;

407 
	}
}

410 
ngx_uöt_t


411 
	$ngx_hâp_image_ã°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

413 
u_ch¨
 *
p
;

415 
p
 = 
ö
->
buf
->
pos
;

417 i‡(
ö
->
buf
->
œ°
 - 
p
 < 16) {

418  
NGX_HTTP_IMAGE_NONE
;

421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

422 "imagêfûãr: \"%c%c\"", 
p
[0],Ö[1]);

424 i‡(
p
[0] == 0xff &&Ö[1] == 0xd8) {

428  
NGX_HTTP_IMAGE_JPEG
;

430 } i‡(
p
[0] == 'G' &&Ö[1] == 'I' &&Ö[2] == 'F' &&Ö[3] == '8'

431 && 
p
[5] == 'a')

433 i‡(
p
[4] == '9' ||Ö[4] == '7') {

435  
NGX_HTTP_IMAGE_GIF
;

438 } i‡(
p
[0] == 0x89 &&Ö[1] == 'P' &&Ö[2] == 'N' &&Ö[3] == 'G'

439 && 
p
[4] == 0x0d &&Ö[5] == 0x0a &&Ö[6] == 0x1a &&Ö[7] == 0x0a)

443  
NGX_HTTP_IMAGE_PNG
;

446  
NGX_HTTP_IMAGE_NONE
;

447 
	}
}

450 
ngx_öt_t


451 
	$ngx_hâp_image_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

453 
u_ch¨
 *
p
;

454 
size_t
 
size
, 
ª°
;

455 
ngx_buf_t
 *
b
;

456 
ngx_chaö_t
 *
˛
;

457 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

459 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

461 i‡(
˘x
->
image
 =
NULL
) {

462 
˘x
->
image
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, ctx->
Àngth
);

463 i‡(
˘x
->
image
 =
NULL
) {

464  
NGX_ERROR
;

467 
˘x
->
œ°
 = ctx->
image
;

470 
p
 = 
˘x
->
œ°
;

472 
˛
 = 
ö
; cl; c»˛->
√xt
) {

474 
b
 = 
˛
->
buf
;

475 
size
 = 
b
->
œ°
 - b->
pos
;

477 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

478 "imagêbuf: %uz", 
size
);

480 
ª°
 = 
˘x
->
image
 + ctx->
Àngth
 - 
p
;

481 
size
 = (
ª°
 < size) ?Ñest : size;

483 
p
 = 
	`ngx_˝ymem
’, 
b
->
pos
, 
size
);

484 
b
->
pos
 +
size
;

486 i‡(
b
->
œ°_buf
) {

487 
˘x
->
œ°
 = 
p
;

488  
NGX_OK
;

492 
˘x
->
œ°
 = 
p
;

493 
r
->
c⁄√˘i⁄
->
buf„ªd
 |
NGX_HTTP_IMAGE_BUFFERED
;

495  
NGX_AGAIN
;

496 
	}
}

499 
ngx_buf_t
 *

500 
	$ngx_hâp_image_¥o˚ss
(
ngx_hâp_ªque°_t
 *
r
)

502 
ngx_öt_t
 
rc
;

503 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
;

504 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

506 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_HTTP_IMAGE_BUFFERED
;

508 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

510 
rc
 = 
	`ngx_hâp_image_size
(
r
, 
˘x
);

512 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

514 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_SIZE
) {

515  
	`ngx_hâp_image_js⁄
(
r
, 
rc
 =
NGX_OK
 ? 
˘x
 : 
NULL
);

518 
˘x
->
™gÀ
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
acv
, conf->angle);

520 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

522 i‡(
˘x
->
™gÀ
 != 90 && ctx->angle != 180 && ctx->angle != 270) {

523  
NULL
;

526  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

529 
˘x
->
max_width
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
wcv
, c⁄f->
width
);

530 i‡(
˘x
->
max_width
 == 0) {

531  
NULL
;

534 
˘x
->
max_height
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
hcv
,

535 
c⁄f
->
height
);

536 i‡(
˘x
->
max_height
 == 0) {

537  
NULL
;

540 i‡(
rc
 =
NGX_OK


541 && 
˘x
->
width
 <˘x->
max_width


542 && 
˘x
->
height
 <˘x->
max_height


543 && 
˘x
->
™gÀ
 == 0

544 && !
˘x
->
f‹˚
)

546  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

549  
	`ngx_hâp_image_ªsize
(
r
, 
˘x
);

550 
	}
}

553 
ngx_buf_t
 *

554 
	$ngx_hâp_image_js⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

556 
size_t
 
Àn
;

557 
ngx_buf_t
 *
b
;

559 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

560 i‡(
b
 =
NULL
) {

561  
NULL
;

564 
b
->
mem‹y
 = 1;

565 
b
->
œ°_buf
 = 1;

567 
	`ngx_hâp_˛ón_hódî
(
r
);

569 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

570 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

571 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

573 i‡(
˘x
 =
NULL
) {

574 
b
->
pos
 = (
u_ch¨
 *Ë"{}" 
CRLF
;

575 
b
->
œ°
 = b->
pos
 + ("{}" 
CRLF
) - 1;

577 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

579  
b
;

582 
Àn
 = ("{ \"img\" : "

583 "{ \"width\": , \"height\": , \"ty≥\": \"j≥g\" } }" 
CRLF
) - 1

584 + 2 * 
NGX_SIZE_T_LEN
;

586 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

587 i‡(
b
->
pos
 =
NULL
) {

588  
NULL
;

591 
b
->
œ°
 = 
	`ngx_•rötf
(b->
pos
,

595 " \"ty≥\": \"%s\" } }" 
CRLF
,

596 
˘x
->
width
, ctx->
height
,

597 
ngx_hâp_image_ty≥s
[
˘x
->
ty≥
 - 1].
d©a
 + 6);

599 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

601  
b
;

602 
	}
}

605 
ngx_buf_t
 *

606 
	$ngx_hâp_image_asis
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

608 
ngx_buf_t
 *
b
;

610 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

611 i‡(
b
 =
NULL
) {

612  
NULL
;

615 
b
->
pos
 = 
˘x
->
image
;

616 
b
->
œ°
 = 
˘x
->last;

617 
b
->
mem‹y
 = 1;

618 
b
->
œ°_buf
 = 1;

620 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

622  
b
;

623 
	}
}

627 
	$ngx_hâp_image_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

629 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

631 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

632 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

635 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

636 
	}
}

639 
ngx_öt_t


640 
	$ngx_hâp_image_size
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

642 
u_ch¨
 *
p
, *
œ°
;

643 
size_t
 
Àn
, 
≠p
;

644 
ngx_uöt_t
 
width
, 
height
;

646 
p
 = 
˘x
->
image
;

648 
˘x
->
ty≥
) {

650 
NGX_HTTP_IMAGE_JPEG
:

652 
p
 += 2;

653 
œ°
 = 
˘x
->
image
 + ctx->
Àngth
 - 10;

654 
width
 = 0;

655 
height
 = 0;

656 
≠p
 = 0;

658 
p
 < 
œ°
) {

660 i‡(
p
[0] == 0xff &&Ö[1] != 0xff) {

662 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

663 "JPEG: %02xd %02xd", 
p
[0],Ö[1]);

665 
p
++;

667 i‡((*
p
 == 0xc0 || *p == 0xc1 || *p == 0xc2 || *p == 0xc3

668 || *
p
 == 0xc9 || *p == 0xca || *p == 0xcb)

669 && (
width
 =0 || 
height
 == 0))

671 
width
 = 
p
[6] * 256 +Ö[7];

672 
height
 = 
p
[4] * 256 +Ö[5];

675 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

676 "JPEG: %02xd %02xd", 
p
[1],Ö[2]);

678 
Àn
 = 
p
[1] * 256 +Ö[2];

680 i‡(*
p
 >= 0xe1 && *p <= 0xef) {

682 
≠p
 +
Àn
;

685 
p
 +
Àn
;

690 
p
++;

693 i‡(
width
 =0 || 
height
 == 0) {

694  
NGX_DECLINED
;

697 i‡(
˘x
->
Àngth
 / 20 < 
≠p
) {

699 
˘x
->
f‹˚
 = 1;

700 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

701 "≠∞d©®size: %uz", 
≠p
);

706 
NGX_HTTP_IMAGE_GIF
:

708 i‡(
˘x
->
Àngth
 < 10) {

709  
NGX_DECLINED
;

712 
width
 = 
p
[7] * 256 +Ö[6];

713 
height
 = 
p
[9] * 256 +Ö[8];

717 
NGX_HTTP_IMAGE_PNG
:

719 i‡(
˘x
->
Àngth
 < 24) {

720  
NGX_DECLINED
;

723 
width
 = 
p
[18] * 256 +Ö[19];

724 
height
 = 
p
[22] * 256 +Ö[23];

730  
NGX_DECLINED
;

733 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

734 "imagêsize: %d x %d", 
width
, 
height
);

736 
˘x
->
width
 = width;

737 
˘x
->
height
 = height;

739  
NGX_OK
;

740 
	}
}

743 
ngx_buf_t
 *

744 
	$ngx_hâp_image_ªsize
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

746 
sx
, 
sy
, 
dx
, 
dy
, 
ox
, 
oy
, 
ax
, 
ay
, 
size
,

747 
cﬁ‹s
, 
∑Àâe
, 
å™•¨ít
, 
sh¨≥n
,

748 
ªd
, 
gªí
, 
blue
, 
t
;

749 
u_ch¨
 *
out
;

750 
ngx_buf_t
 *
b
;

751 
ngx_uöt_t
 
ªsize
;

752 
gdImagePå
 
§c
, 
d°
;

753 
ngx_poﬁ_˛ónup_t
 *
˛n
;

754 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

756 
§c
 = 
	`ngx_hâp_image_sour˚
(
r
, 
˘x
);

758 i‡(
§c
 =
NULL
) {

759  
NULL
;

762 
sx
 = 
	`gdImageSX
(
§c
);

763 
sy
 = 
	`gdImageSY
(
§c
);

765 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

767 i‡(!
˘x
->
f‹˚


768 && 
˘x
->
™gÀ
 == 0

769 && (
ngx_uöt_t
Ë
sx
 <
˘x
->
max_width


770 && (
ngx_uöt_t
Ë
sy
 <
˘x
->
max_height
)

772 
	`gdImageDe°roy
(
§c
);

773  
	`ngx_hâp_image_asis
(
r
, 
˘x
);

776 
cﬁ‹s
 = 
	`gdImageCﬁ‹sTŸÆ
(
§c
);

778 i‡(
cﬁ‹s
 && 
c⁄f
->
å™•¨ícy
) {

779 
å™•¨ít
 = 
	`gdImageGëTøn•¨ít
(
§c
);

781 i‡(
å™•¨ít
 != -1) {

782 
∑Àâe
 = 
cﬁ‹s
;

783 
ªd
 = 
	`gdImageRed
(
§c
, 
å™•¨ít
);

784 
gªí
 = 
	`gdImageGªí
(
§c
, 
å™•¨ít
);

785 
blue
 = 
	`gdImageBlue
(
§c
, 
å™•¨ít
);

787 
å™•¨ít
;

791 
∑Àâe
 = 0;

792 
å™•¨ít
 = -1;

793 
ªd
 = 0;

794 
gªí
 = 0;

795 
blue
 = 0;

797 
å™•¨ít
:

799 
	`gdImageCﬁ‹Tøn•¨ít
(
§c
, -1);

801 
dx
 = 
sx
;

802 
dy
 = 
sy
;

804 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_RESIZE
) {

806 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

807 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

808 
dy
 = dy ? dy : 1;

809 
dx
 = 
˘x
->
max_width
;

812 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

813 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

814 
dx
 = dx ? dx : 1;

815 
dy
 = 
˘x
->
max_height
;

818 
ªsize
 = 1;

820 } i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_ROTATE
) {

822 
ªsize
 = 0;

826 
ªsize
 = 0;

828 i‡((Ë
dx
 / 
dy
 < (Ë
˘x
->
max_width
 / ctx->
max_height
) {

829 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

830 
dy
 = dy * 
˘x
->
max_width
 / 
dx
;

831 
dy
 = dy ? dy : 1;

832 
dx
 = 
˘x
->
max_width
;

833 
ªsize
 = 1;

837 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

838 
dx
 = dx * 
˘x
->
max_height
 / 
dy
;

839 
dx
 = dx ? dx : 1;

840 
dy
 = 
˘x
->
max_height
;

841 
ªsize
 = 1;

846 i‡(
ªsize
) {

847 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

848 i‡(
d°
 =
NULL
) {

849 
	`gdImageDe°roy
(
§c
);

850  
NULL
;

853 i‡(
cﬁ‹s
 == 0) {

854 
	`gdImageSaveAÕha
(
d°
, 1);

855 
	`gdImageAÕhaBÀndög
(
d°
, 0);

858 
	`gdImageC›yReßm∂ed
(
d°
, 
§c
, 0, 0, 0, 0, 
dx
, 
dy
, 
sx
, 
sy
);

860 i‡(
cﬁ‹s
) {

861 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

864 
	`gdImageDe°roy
(
§c
);

867 
d°
 = 
§c
;

870 i‡(
˘x
->
™gÀ
) {

871 
§c
 = 
d°
;

873 
ax
 = (
dx
 % 2 == 0) ? 1 : 0;

874 
ay
 = (
dy
 % 2 == 0) ? 1 : 0;

876 
˘x
->
™gÀ
) {

880 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dy
, 
dx
, 
∑Àâe
);

881 i‡(
d°
 =
NULL
) {

882 
	`gdImageDe°roy
(
§c
);

883  
NULL
;

885 i‡(
˘x
->
™gÀ
 == 90) {

886 
ox
 = 
dy
 / 2 + 
ay
;

887 
oy
 = 
dx
 / 2 - 
ax
;

890 
ox
 = 
dy
 / 2 - 
ay
;

891 
oy
 = 
dx
 / 2 + 
ax
;

894 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
ox
, 
oy
, 0, 0,

895 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

896 
	`gdImageDe°roy
(
§c
);

898 
t
 = 
dx
;

899 
dx
 = 
dy
;

900 
dy
 = 
t
;

904 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
, 
dy
, 
∑Àâe
);

905 i‡(
d°
 =
NULL
) {

906 
	`gdImageDe°roy
(
§c
);

907  
NULL
;

909 
	`gdImageC›yRŸ©ed
(
d°
, 
§c
, 
dx
 / 2 - 
ax
, 
dy
 / 2 - 
ay
, 0, 0,

910 
dx
 + 
ax
, 
dy
 + 
ay
, 
˘x
->
™gÀ
);

911 
	`gdImageDe°roy
(
§c
);

916 i‡(
c⁄f
->
fûãr
 =
NGX_HTTP_IMAGE_CROP
) {

918 
§c
 = 
d°
;

920 i‡((
ngx_uöt_t
Ë
dx
 > 
˘x
->
max_width
) {

921 
ox
 = 
dx
 - 
˘x
->
max_width
;

924 
ox
 = 0;

927 i‡((
ngx_uöt_t
Ë
dy
 > 
˘x
->
max_height
) {

928 
oy
 = 
dy
 - 
˘x
->
max_height
;

931 
oy
 = 0;

934 i‡(
ox
 || 
oy
) {

936 
d°
 = 
	`ngx_hâp_image_√w
(
r
, 
dx
 - 
ox
, 
dy
 - 
oy
, 
cﬁ‹s
);

938 i‡(
d°
 =
NULL
) {

939 
	`gdImageDe°roy
(
§c
);

940  
NULL
;

943 
ox
 /= 2;

944 
oy
 /= 2;

946 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

948 
dx
, 
dy
, 
ox
, 
oy
);

950 i‡(
cﬁ‹s
 == 0) {

951 
	`gdImageSaveAÕha
(
d°
, 1);

952 
	`gdImageAÕhaBÀndög
(
d°
, 0);

955 
	`gdImageC›y
(
d°
, 
§c
, 0, 0, 
ox
, 
oy
, 
dx
 - ox, 
dy
 - oy);

957 i‡(
cﬁ‹s
) {

958 
	`gdImageTrueCﬁ‹ToPÆëã
(
d°
, 1, 256);

961 
	`gdImageDe°roy
(
§c
);

965 i‡(
å™•¨ít
 !-1 && 
cﬁ‹s
) {

966 
	`gdImageCﬁ‹Tøn•¨ít
(
d°
, 
	`gdImageCﬁ‹Exa˘
(d°, 
ªd
, 
gªí
, 
blue
));

969 
sh¨≥n
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
shcv
, conf->sharpen);

970 i‡(
sh¨≥n
 > 0) {

971 
	`gdImageSh¨≥n
(
d°
, 
sh¨≥n
);

974 
	`gdImageI¡îœ˚
(
d°
, (Ë
c⁄f
->
öãæa˚
);

976 
out
 = 
	`ngx_hâp_image_out
(
r
, 
˘x
->
ty≥
, 
d°
, &
size
);

978 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

979 "image: %d x %d %d", 
sx
, 
sy
, 
cﬁ‹s
);

981 
	`gdImageDe°roy
(
d°
);

982 
	`ngx_p‰ì
(
r
->
poﬁ
, 
˘x
->
image
);

984 i‡(
out
 =
NULL
) {

985  
NULL
;

988 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

989 i‡(
˛n
 =
NULL
) {

990 
	`gdFªe
(
out
);

991  
NULL
;

994 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

995 i‡(
b
 =
NULL
) {

996 
	`gdFªe
(
out
);

997  
NULL
;

1000 
˛n
->
h™dÀr
 = 
ngx_hâp_image_˛ónup
;

1001 
˛n
->
d©a
 = 
out
;

1003 
b
->
pos
 = 
out
;

1004 
b
->
œ°
 = 
out
 + 
size
;

1005 
b
->
mem‹y
 = 1;

1006 
b
->
œ°_buf
 = 1;

1008 
	`ngx_hâp_image_Àngth
(
r
, 
b
);

1010  
b
;

1011 
	}
}

1014 
gdImagePå


1015 
	$ngx_hâp_image_sour˚
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_image_fûãr_˘x_t
 *
˘x
)

1017 *
Áûed
;

1018 
gdImagePå
 
img
;

1020 
img
 = 
NULL
;

1022 
˘x
->
ty≥
) {

1024 
NGX_HTTP_IMAGE_JPEG
:

1025 
img
 = 
	`gdImageCª©eFromJ≥gPå
(
˘x
->
Àngth
, ctx->
image
);

1026 
Áûed
 = "gdImageCreateFromJpegPtr() failed";

1029 
NGX_HTTP_IMAGE_GIF
:

1030 
img
 = 
	`gdImageCª©eFromGifPå
(
˘x
->
Àngth
, ctx->
image
);

1031 
Áûed
 = "gdImageCreateFromGifPtr() failed";

1034 
NGX_HTTP_IMAGE_PNG
:

1035 
img
 = 
	`gdImageCª©eFromPngPå
(
˘x
->
Àngth
, ctx->
image
);

1036 
Áûed
 = "gdImageCreateFromPngPtr() failed";

1040 
Áûed
 = "unknown imageÅype";

1044 i‡(
img
 =
NULL
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1048  
img
;

1049 
	}
}

1052 
gdImagePå


1053 
	$ngx_hâp_image_√w
(
ngx_hâp_ªque°_t
 *
r
, 
w
, 
h
, 
cﬁ‹s
)

1055 
gdImagePå
 
img
;

1057 i‡(
cﬁ‹s
 == 0) {

1058 
img
 = 
	`gdImageCª©eTrueCﬁ‹
(
w
, 
h
);

1060 i‡(
img
 =
NULL
) {

1061 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1063  
NULL
;

1067 
img
 = 
	`gdImageCª©e
(
w
, 
h
);

1069 i‡(
img
 =
NULL
) {

1070 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1072  
NULL
;

1076  
img
;

1077 
	}
}

1080 
u_ch¨
 *

1081 
	$ngx_hâp_image_out
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ty≥
, 
gdImagePå
 
img
,

1082 *
size
)

1084 *
Áûed
;

1085 
u_ch¨
 *
out
;

1086 
ngx_öt_t
 
jq
;

1087 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1089 
out
 = 
NULL
;

1091 
ty≥
) {

1093 
NGX_HTTP_IMAGE_JPEG
:

1094 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_image_fûãr_moduÀ
);

1096 
jq
 = 
	`ngx_hâp_image_fûãr_gë_vÆue
(
r
, 
c⁄f
->
jqcv
, c⁄f->
j≥g_quÆôy
);

1097 i‡(
jq
 <= 0) {

1098  
NULL
;

1101 
out
 = 
	`gdImageJ≥gPå
(
img
, 
size
, 
jq
);

1102 
Áûed
 = "gdImageJpegPtr() failed";

1105 
NGX_HTTP_IMAGE_GIF
:

1106 
out
 = 
	`gdImageGifPå
(
img
, 
size
);

1107 
Áûed
 = "gdImageGifPtr() failed";

1110 
NGX_HTTP_IMAGE_PNG
:

1111 
out
 = 
	`gdImagePngPå
(
img
, 
size
);

1112 
Áûed
 = "gdImagePngPtr() failed";

1116 
Áûed
 = "unknown imageÅype";

1120 i‡(
out
 =
NULL
) {

1121 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, 
Áûed
);

1124  
out
;

1125 
	}
}

1129 
	$ngx_hâp_image_˛ónup
(*
d©a
)

1131 
	`gdFªe
(
d©a
);

1132 
	}
}

1135 
ngx_uöt_t


1136 
	$ngx_hâp_image_fûãr_gë_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

1137 
ngx_hâp_com∂ex_vÆue_t
 *
cv
, 
ngx_uöt_t
 
v
)

1139 
ngx_°r_t
 
vÆ
;

1141 i‡(
cv
 =
NULL
) {

1142  
v
;

1145 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1149  
	`ngx_hâp_image_fûãr_vÆue
(&
vÆ
);

1150 
	}
}

1153 
ngx_uöt_t


1154 
	$ngx_hâp_image_fûãr_vÆue
(
ngx_°r_t
 *
vÆue
)

1156 
ngx_öt_t
 
n
;

1158 i‡(
vÆue
->
Àn
 =1 && vÆue->
d©a
[0] == '-') {

1159  (
ngx_uöt_t
) -1;

1162 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

1164 i‡(
n
 > 0) {

1165  (
ngx_uöt_t
Ë
n
;

1169 
	}
}

1173 
	$ngx_hâp_image_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1175 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
;

1177 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_image_fûãr_c⁄f_t
));

1178 i‡(
c⁄f
 =
NULL
) {

1179  
NULL
;

1195 
c⁄f
->
fûãr
 = 
NGX_CONF_UNSET_UINT
;

1196 
c⁄f
->
j≥g_quÆôy
 = 
NGX_CONF_UNSET_UINT
;

1197 
c⁄f
->
sh¨≥n
 = 
NGX_CONF_UNSET_UINT
;

1198 
c⁄f
->
å™•¨ícy
 = 
NGX_CONF_UNSET
;

1199 
c⁄f
->
öãæa˚
 = 
NGX_CONF_UNSET
;

1200 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1202  
c⁄f
;

1203 
	}
}

1207 
	$ngx_hâp_image_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1209 
ngx_hâp_image_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1210 
ngx_hâp_image_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

1212 i‡(
c⁄f
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1214 i‡(
¥ev
->
fûãr
 =
NGX_CONF_UNSET_UINT
) {

1215 
c⁄f
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1218 
c⁄f
->
fûãr
 = 
¥ev
->filter;

1219 
c⁄f
->
width
 = 
¥ev
->width;

1220 
c⁄f
->
height
 = 
¥ev
->height;

1221 
c⁄f
->
™gÀ
 = 
¥ev
->angle;

1222 
c⁄f
->
wcv
 = 
¥ev
->wcv;

1223 
c⁄f
->
hcv
 = 
¥ev
->hcv;

1224 
c⁄f
->
acv
 = 
¥ev
->acv;

1228 i‡(
c⁄f
->
j≥g_quÆôy
 =
NGX_CONF_UNSET_UINT
) {

1231 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
j≥g_quÆôy
, 
¥ev
->jpeg_quality, 75);

1233 i‡(
c⁄f
->
jqcv
 =
NULL
) {

1234 
c⁄f
->
jqcv
 = 
¥ev
->jqcv;

1238 i‡(
c⁄f
->
sh¨≥n
 =
NGX_CONF_UNSET_UINT
) {

1239 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
sh¨≥n
, 
¥ev
->sharpen, 0);

1241 i‡(
c⁄f
->
shcv
 =
NULL
) {

1242 
c⁄f
->
shcv
 = 
¥ev
->shcv;

1246 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
å™•¨ícy
, 
¥ev
->transparency, 1);

1248 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öãæa˚
, 
¥ev
->interlace, 0);

1250 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1253  
NGX_CONF_OK
;

1254 
	}
}

1258 
	$ngx_hâp_image_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1260 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1262 
ngx_°r_t
 *
vÆue
;

1263 
ngx_öt_t
 
n
;

1264 
ngx_uöt_t
 
i
;

1265 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1266 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1268 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1270 
i
 = 1;

1272 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1273 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1274 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_OFF
;

1276 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "test") == 0) {

1277 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_TEST
;

1279 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "size") == 0) {

1280 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_SIZE
;

1283 
Áûed
;

1286  
NGX_CONF_OK
;

1288 } i‡(
cf
->
¨gs
->
√…s
 == 3) {

1290 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "rotate") == 0) {

1291 i‡(
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_RESIZE


1292 && 
imcf
->
fûãr
 !
NGX_HTTP_IMAGE_CROP
)

1294 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_ROTATE
;

1297 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1299 
ccv
.
cf
 = cf;

1300 
ccv
.
vÆue
 = &vÆue[++
i
];

1301 
ccv
.
com∂ex_vÆue
 = &
cv
;

1303 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1304  
NGX_CONF_ERROR
;

1307 i‡(
cv
.
Àngths
 =
NULL
) {

1308 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1310 i‡(
n
 != 90 &&Ç != 180 &&Ç != 270) {

1311 
Áûed
;

1314 
imcf
->
™gÀ
 = (
ngx_uöt_t
Ë
n
;

1317 
imcf
->
acv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1318 (
ngx_hâp_com∂ex_vÆue_t
));

1319 i‡(
imcf
->
acv
 =
NULL
) {

1320  
NGX_CONF_ERROR
;

1323 *
imcf
->
acv
 = 
cv
;

1326  
NGX_CONF_OK
;

1329 
Áûed
;

1333 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "resize") == 0) {

1334 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_RESIZE
;

1336 } i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "crop") == 0) {

1337 
imcf
->
fûãr
 = 
NGX_HTTP_IMAGE_CROP
;

1340 
Áûed
;

1343 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1345 
ccv
.
cf
 = cf;

1346 
ccv
.
vÆue
 = &vÆue[++
i
];

1347 
ccv
.
com∂ex_vÆue
 = &
cv
;

1349 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1350  
NGX_CONF_ERROR
;

1353 i‡(
cv
.
Àngths
 =
NULL
) {

1354 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1356 i‡(
n
 == 0) {

1357 
Áûed
;

1360 
imcf
->
width
 = (
ngx_uöt_t
Ë
n
;

1363 
imcf
->
wcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1364 i‡(
imcf
->
wcv
 =
NULL
) {

1365  
NGX_CONF_ERROR
;

1368 *
imcf
->
wcv
 = 
cv
;

1371 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1373 
ccv
.
cf
 = cf;

1374 
ccv
.
vÆue
 = &vÆue[++
i
];

1375 
ccv
.
com∂ex_vÆue
 = &
cv
;

1377 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1378  
NGX_CONF_ERROR
;

1381 i‡(
cv
.
Àngths
 =
NULL
) {

1382 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[
i
]);

1384 i‡(
n
 == 0) {

1385 
Áûed
;

1388 
imcf
->
height
 = (
ngx_uöt_t
Ë
n
;

1391 
imcf
->
hcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1392 i‡(
imcf
->
hcv
 =
NULL
) {

1393  
NGX_CONF_ERROR
;

1396 *
imcf
->
hcv
 = 
cv
;

1399  
NGX_CONF_OK
;

1401 
Áûed
:

1403 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

1404 &
vÆue
[
i
]);

1406  
NGX_CONF_ERROR
;

1407 
	}
}

1411 
	$ngx_hâp_image_fûãr_j≥g_quÆôy
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1412 *
c⁄f
)

1414 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1416 
ngx_°r_t
 *
vÆue
;

1417 
ngx_öt_t
 
n
;

1418 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1419 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1421 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1423 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1425 
ccv
.
cf
 = cf;

1426 
ccv
.
vÆue
 = &value[1];

1427 
ccv
.
com∂ex_vÆue
 = &
cv
;

1429 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1430  
NGX_CONF_ERROR
;

1433 i‡(
cv
.
Àngths
 =
NULL
) {

1434 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1436 i‡(
n
 <= 0) {

1437 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1438 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1439  
NGX_CONF_ERROR
;

1442 
imcf
->
j≥g_quÆôy
 = (
ngx_uöt_t
Ë
n
;

1445 
imcf
->
jqcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1446 i‡(
imcf
->
jqcv
 =
NULL
) {

1447  
NGX_CONF_ERROR
;

1450 *
imcf
->
jqcv
 = 
cv
;

1453  
NGX_CONF_OK
;

1454 
	}
}

1458 
	$ngx_hâp_image_fûãr_sh¨≥n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1459 *
c⁄f
)

1461 
ngx_hâp_image_fûãr_c⁄f_t
 *
imcf
 = 
c⁄f
;

1463 
ngx_°r_t
 *
vÆue
;

1464 
ngx_öt_t
 
n
;

1465 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

1466 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1468 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1470 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1472 
ccv
.
cf
 = cf;

1473 
ccv
.
vÆue
 = &value[1];

1474 
ccv
.
com∂ex_vÆue
 = &
cv
;

1476 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1477  
NGX_CONF_ERROR
;

1480 i‡(
cv
.
Àngths
 =
NULL
) {

1481 
n
 = 
	`ngx_hâp_image_fûãr_vÆue
(&
vÆue
[1]);

1483 i‡(
n
 < 0) {

1484 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1485 "övÆid vÆuê\"%V\"", &
vÆue
[1]);

1486  
NGX_CONF_ERROR
;

1489 
imcf
->
sh¨≥n
 = (
ngx_uöt_t
Ë
n
;

1492 
imcf
->
shcv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

1493 i‡(
imcf
->
shcv
 =
NULL
) {

1494  
NGX_CONF_ERROR
;

1497 *
imcf
->
shcv
 = 
cv
;

1500  
NGX_CONF_OK
;

1501 
	}
}

1504 
ngx_öt_t


1505 
	$ngx_hâp_image_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1507 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1508 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_image_hódî_fûãr
;

1510 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1511 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_image_body_fûãr
;

1513  
NGX_OK
;

1514 
	}
}

	@src/http/modules/ngx_http_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	m«me
;

15 
ngx_¨øy_t
 *
	mÀngths
;

16 
ngx_¨øy_t
 *
	mvÆues
;

17 } 
	tngx_hâp_ödex_t
;

21 
ngx_¨øy_t
 *
	mödi˚s
;

22 
size_t
 
	mmax_ödex_Àn
;

23 } 
	tngx_hâp_ödex_loc_c⁄f_t
;

26 
	#NGX_HTTP_DEFAULT_INDEX
 "ödex.html"

	)

29 
ngx_öt_t
 
ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
);

31 
ngx_öt_t
 
ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

32 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
);

34 
ngx_öt_t
 
ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

37 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

42 
ngx_comm™d_t
 
	gngx_hâp_ödex_comm™ds
[] = {

44 { 
ngx_°rög
("index"),

45 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

46 
ngx_hâp_ödex_£t_ödex
,

47 
NGX_HTTP_LOC_CONF_OFFSET
,

49 
NULL
 },

51 
ngx_nuŒ_comm™d


55 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ödex_moduÀ_˘x
 = {

56 
NULL
,

57 
ngx_hâp_ödex_öô
,

59 
NULL
,

60 
NULL
,

62 
NULL
,

63 
NULL
,

65 
ngx_hâp_ödex_¸óã_loc_c⁄f
,

66 
ngx_hâp_ödex_mîge_loc_c⁄f


70 
ngx_moduÀ_t
 
	gngx_hâp_ödex_moduÀ
 = {

71 
NGX_MODULE_V1
,

72 &
ngx_hâp_ödex_moduÀ_˘x
,

73 
ngx_hâp_ödex_comm™ds
,

74 
NGX_HTTP_MODULE
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NULL
,

81 
NULL
,

82 
NGX_MODULE_V1_PADDING


96 
ngx_öt_t


97 
	$ngx_hâp_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

99 
u_ch¨
 *
p
, *
«me
;

100 
size_t
 
Àn
, 
roŸ
, 
ª£rve
, 
Æloˇãd
;

101 
ngx_öt_t
 
rc
;

102 
ngx_°r_t
 
∑th
, 
uri
;

103 
ngx_uöt_t
 
i
, 
dú_ã°ed
;

104 
ngx_hâp_ödex_t
 *
ödex
;

105 
ngx_›í_fûe_öfo_t
 
of
;

106 
ngx_hâp_s¸ùt_code_±
 
code
;

107 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

109 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
;

110 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

112 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

113  
NGX_DECLINED
;

116 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

117  
NGX_DECLINED
;

120 
ûcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ödex_moduÀ
);

121 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

123 
Æloˇãd
 = 0;

124 
roŸ
 = 0;

125 
dú_ã°ed
 = 0;

126 
«me
 = 
NULL
;

128 
∑th
.
d©a
 = 
NULL
;

130 
ödex
 = 
ûcf
->
ödi˚s
->
ñts
;

131 
i
 = 0; i < 
ûcf
->
ödi˚s
->
√…s
; i++) {

133 i‡(
ödex
[
i
].
Àngths
 =
NULL
) {

135 i‡(
ödex
[
i
].
«me
.
d©a
[0] == '/') {

136  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
ödex
[
i
].
«me
, &r->
¨gs
);

139 
ª£rve
 = 
ûcf
->
max_ödex_Àn
;

140 
Àn
 = 
ödex
[
i
].
«me
.len;

143 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

145 
e
.
ù
 = 
ödex
[
i
].
Àngths
->
ñts
;

146 
e
.
ªque°
 = 
r
;

147 
e
.
Êushed
 = 1;

150 
Àn
 = 1;

152 *(
uöçå_t
 *Ë
e
.
ù
) {

153 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

154 
Àn
 +
	`lcode
(&
e
);

159 
ª£rve
 = 
Àn
 + 16;

162 i‡(
ª£rve
 > 
Æloˇãd
) {

164 
«me
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
ª£rve
);

165 i‡(
«me
 =
NULL
) {

166  
NGX_ERROR
;

169 
Æloˇãd
 = 
∑th
.
d©a
 +Ö©h.
Àn
 - 
«me
;

172 i‡(
ödex
[
i
].
vÆues
 =
NULL
) {

176 
	`ngx_mem˝y
(
«me
, 
ödex
[
i
].«me.
d©a
, index[i].«me.
Àn
);

178 
∑th
.
Àn
 = (
«me
 + 
ödex
[
i
].«me.À¿- 1Ë-Ö©h.
d©a
;

181 
e
.
ù
 = 
ödex
[
i
].
vÆues
->
ñts
;

182 
e
.
pos
 = 
«me
;

184 *(
uöçå_t
 *Ë
e
.
ù
) {

185 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

186 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

189 i‡(*
«me
 == '/') {

190 
uri
.
Àn
 =Üen - 1;

191 
uri
.
d©a
 = 
«me
;

192  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

195 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

197 *
e
.
pos
 = '\0';

200 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 "›í index \"%V\"", &
∑th
);

203 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

205 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

206 
of
.
dúe˘io
 = 
˛cf
->directio;

207 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

208 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

209 
of
.
ã°_⁄ly
 = 1;

210 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

211 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

213 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

214  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

217 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

218 !
NGX_OK
)

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

221 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

223 i‡(
of
.
îr
 == 0) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 #i‡(
NGX_HAVE_OPENAT
)

228 i‡(
of
.
îr
 =
NGX_EMLINK


229 || 
of
.
îr
 =
NGX_ELOOP
)

231  
NGX_HTTP_FORBIDDEN
;

235 i‡(
of
.
îr
 =
NGX_ENOTDIR


236 || 
of
.
îr
 =
NGX_ENAMETOOLONG


237 || 
of
.
îr
 =
NGX_EACCES
)

239  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
∑th
.
d©a
, 
of
.
îr
);

242 i‡(!
dú_ã°ed
) {

243 
rc
 = 
	`ngx_hâp_ödex_ã°_dú
(
r
, 
˛cf
, 
∑th
.
d©a
, 
«me
 - 1);

245 i‡(
rc
 !
NGX_OK
) {

246  
rc
;

249 
dú_ã°ed
 = 1;

252 i‡(
of
.
îr
 =
NGX_ENOENT
) {

256 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

257 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

259  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

262 
uri
.
Àn
 = 
r
->uri.len +Üen - 1;

264 i‡(!
˛cf
->
Æüs
) {

265 
uri
.
d©a
 = 
∑th
.d©®+ 
roŸ
;

268 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

269 i‡(
uri
.
d©a
 =
NULL
) {

270  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

273 
p
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

274 
	`ngx_mem˝y
(
p
, 
«me
, 
Àn
 - 1);

277  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

280  
NGX_DECLINED
;

281 
	}
}

284 
ngx_öt_t


285 
	$ngx_hâp_ödex_ã°_dú
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

286 
u_ch¨
 *
∑th
, u_ch¨ *
œ°
)

288 
u_ch¨
 
c
;

289 
ngx_°r_t
 
dú
;

290 
ngx_›í_fûe_öfo_t
 
of
;

292 
c
 = *
œ°
;

293 i‡(
c
 !'/' || 
∑th
 =
œ°
) {

295 
c
 = *(++
œ°
);

297 *
œ°
 = '\0';

299 
dú
.
Àn
 = 
œ°
 - 
∑th
;

300 
dú
.
d©a
 = 
∑th
;

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

303 "hâ∞ödex check dú: \"%V\"", &
dú
);

305 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

307 
of
.
ã°_dú
 = 1;

308 
of
.
ã°_⁄ly
 = 1;

309 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

310 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

312 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
dú
, &
of
Ë!
NGX_OK
) {

313  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

316 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
dú
, &
of
, 
r
->
poﬁ
)

317 !
NGX_OK
)

319 i‡(
of
.
îr
) {

321 #i‡(
NGX_HAVE_OPENAT
)

322 i‡(
of
.
îr
 =
NGX_EMLINK


323 || 
of
.
îr
 =
NGX_ELOOP
)

325  
NGX_HTTP_FORBIDDEN
;

329 i‡(
of
.
îr
 =
NGX_ENOENT
) {

330 *
œ°
 = 
c
;

331  
	`ngx_hâp_ödex_îr‹
(
r
, 
˛cf
, 
dú
.
d©a
, 
NGX_ENOENT
);

334 i‡(
of
.
îr
 =
NGX_EACCES
) {

336 *
œ°
 = 
c
;

344  
NGX_OK
;

347 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

348 "%†\"%s\" faûed", 
of
.
Áûed
, 
dú
.
d©a
);

351  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

354 *
œ°
 = 
c
;

356 i‡(
of
.
is_dú
) {

357  
NGX_OK
;

360 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

361 "\"%s\" i†nŸá dúe˘‹y", 
dú
.
d©a
);

363  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_hâp_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

369 
u_ch¨
 *
fûe
, 
ngx_îr_t
 
îr
)

371 i‡(
îr
 =
NGX_EACCES
) {

372 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

373 "\"%s\" i†f‹biddí", 
fûe
);

375  
NGX_HTTP_FORBIDDEN
;

378 i‡(
˛cf
->
log_nŸ_found
) {

379 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

380 "\"%s\" i†nŸ found", 
fûe
);

383  
NGX_HTTP_NOT_FOUND
;

384 
	}
}

388 
	$ngx_hâp_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

390 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
;

392 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_ödex_loc_c⁄f_t
));

393 i‡(
c⁄f
 =
NULL
) {

394  
NULL
;

397 
c⁄f
->
ödi˚s
 = 
NULL
;

398 
c⁄f
->
max_ödex_Àn
 = 0;

400  
c⁄f
;

401 
	}
}

405 
	$ngx_hâp_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

407 
ngx_hâp_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

408 
ngx_hâp_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

410 
ngx_hâp_ödex_t
 *
ödex
;

412 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

413 
c⁄f
->
ödi˚s
 = 
¥ev
->indices;

414 
c⁄f
->
max_ödex_Àn
 = 
¥ev
->max_index_len;

417 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

418 
c⁄f
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ödex_t
));

419 i‡(
c⁄f
->
ödi˚s
 =
NULL
) {

420  
NGX_CONF_ERROR
;

423 
ödex
 = 
	`ngx_¨øy_push
(
c⁄f
->
ödi˚s
);

424 i‡(
ödex
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
ödex
->
«me
.
Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

429 
ödex
->
«me
.
d©a
 = (
u_ch¨
 *Ë
NGX_HTTP_DEFAULT_INDEX
;

430 
ödex
->
Àngths
 = 
NULL
;

431 
ödex
->
vÆues
 = 
NULL
;

433 
c⁄f
->
max_ödex_Àn
 = (
NGX_HTTP_DEFAULT_INDEX
);

435  
NGX_CONF_OK
;

438  
NGX_CONF_OK
;

439 
	}
}

442 
ngx_öt_t


443 
	$ngx_hâp_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

445 
ngx_hâp_h™dÀr_±
 *
h
;

446 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

448 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

450 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

451 i‡(
h
 =
NULL
) {

452  
NGX_ERROR
;

455 *
h
 = 
ngx_hâp_ödex_h™dÀr
;

457  
NGX_OK
;

458 
	}
}

464 
	$ngx_hâp_ödex_£t_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

466 
ngx_hâp_ödex_loc_c⁄f_t
 *
ûcf
 = 
c⁄f
;

468 
ngx_°r_t
 *
vÆue
;

469 
ngx_uöt_t
 
i
, 
n
;

470 
ngx_hâp_ödex_t
 *
ödex
;

471 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

473 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

474 
ûcf
->
ödi˚s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_ödex_t
));

475 i‡(
ûcf
->
ödi˚s
 =
NULL
) {

476  
NGX_CONF_ERROR
;

480 
vÆue
 = 
cf
->
¨gs
->
ñts
;

482 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

484 i‡(
vÆue
[
i
].
d©a
[0] ='/' && i !
cf
->
¨gs
->
√…s
 - 1) {

485 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

490 i‡(
vÆue
[
i
].
Àn
 == 0) {

491 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

493 &
vÆue
[1]);

494  
NGX_CONF_ERROR
;

497 
ödex
 = 
	`ngx_¨øy_push
(
ûcf
->
ödi˚s
);

498 i‡(
ödex
 =
NULL
) {

499  
NGX_CONF_ERROR
;

502 
ödex
->
«me
.
Àn
 = 
vÆue
[
i
].len;

503 
ödex
->
«me
.
d©a
 = 
vÆue
[
i
].data;

504 
ödex
->
Àngths
 = 
NULL
;

505 
ödex
->
vÆues
 = 
NULL
;

507 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[
i
]);

509 i‡(
n
 == 0) {

510 i‡(
ûcf
->
max_ödex_Àn
 < 
ödex
->
«me
.
Àn
) {

511 
ûcf
->
max_ödex_Àn
 = 
ödex
->
«me
.
Àn
;

514 i‡(
ödex
->
«me
.
d©a
[0] == '/') {

519 
ödex
->
«me
.
Àn
++;

524 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

526 
sc
.
cf
 = cf;

527 
sc
.
sour˚
 = &
vÆue
[
i
];

528 
sc
.
Àngths
 = &
ödex
->lengths;

529 
sc
.
vÆues
 = &
ödex
->values;

530 
sc
.
v¨übÀs
 = 
n
;

531 
sc
.
com∂ëe_Àngths
 = 1;

532 
sc
.
com∂ëe_vÆues
 = 1;

534 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

535  
NGX_CONF_ERROR
;

539  
NGX_CONF_OK
;

540 
	}
}

	@src/http/modules/ngx_http_limit_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mÀn
;

16 
u_sh‹t
 
	mc⁄n
;

17 
u_ch¨
 
	md©a
[1];

18 } 
	tngx_hâp_limô_c⁄n_node_t
;

22 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

23 
ngx_rbåì_node_t
 *
	mnode
;

24 } 
	tngx_hâp_limô_c⁄n_˛ónup_t
;

28 
ngx_rbåì_t
 *
	mrbåì
;

29 
ngx_öt_t
 
	mödex
;

30 
ngx_°r_t
 
	mv¨
;

31 } 
	tngx_hâp_limô_c⁄n_˘x_t
;

35 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

36 
ngx_uöt_t
 
	mc⁄n
;

37 } 
	tngx_hâp_limô_c⁄n_limô_t
;

41 
ngx_¨øy_t
 
	mlimôs
;

42 
ngx_uöt_t
 
	mlog_Àvñ
;

43 
ngx_uöt_t
 
	m°©us_code
;

44 } 
	tngx_hâp_limô_c⁄n_c⁄f_t
;

47 
ngx_rbåì_node_t
 *
ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
,

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
, 
uöt32_t
 
hash
);

49 
ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
);

50 
ngx_ölöe
 
ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
);

52 *
ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 
ngx_öt_t
 
ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
);

64 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_limô_z⁄e
 = {

65 
ngx_c⁄f_dïªˇãd
, "limit_zone", "limit_conn_zone"

69 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_c⁄n_log_Àvñs
[] = {

70 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

71 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

72 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

73 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

74 { 
ngx_nuŒ_°rög
, 0 }

78 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_c⁄n_°©us_bounds
 = {

79 
ngx_c⁄f_check_num_bounds
, 400, 599

83 
ngx_comm™d_t
 
	gngx_hâp_limô_c⁄n_comm™ds
[] = {

85 { 
ngx_°rög
("limit_conn_zone"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

87 
ngx_hâp_limô_c⁄n_z⁄e
,

90 
NULL
 },

92 { 
ngx_°rög
("limit_zone"),

93 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

94 
ngx_hâp_limô_z⁄e
,

97 
NULL
 },

99 { 
ngx_°rög
("limit_conn"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

101 
ngx_hâp_limô_c⁄n
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
NULL
 },

106 { 
ngx_°rög
("limit_conn_log_level"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_íum_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
log_Àvñ
),

111 &
ngx_hâp_limô_c⁄n_log_Àvñs
 },

113 { 
ngx_°rög
("limit_conn_status"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_num_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_limô_c⁄n_c⁄f_t
, 
°©us_code
),

118 &
ngx_hâp_limô_c⁄n_°©us_bounds
 },

120 
ngx_nuŒ_comm™d


124 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ_˘x
 = {

125 
NULL
,

126 
ngx_hâp_limô_c⁄n_öô
,

128 
NULL
,

129 
NULL
,

131 
NULL
,

132 
NULL
,

134 
ngx_hâp_limô_c⁄n_¸óã_c⁄f
,

135 
ngx_hâp_limô_c⁄n_mîge_c⁄f


139 
ngx_moduÀ_t
 
	gngx_hâp_limô_c⁄n_moduÀ
 = {

140 
NGX_MODULE_V1
,

141 &
ngx_hâp_limô_c⁄n_moduÀ_˘x
,

142 
ngx_hâp_limô_c⁄n_comm™ds
,

143 
NGX_HTTP_MODULE
,

144 
NULL
,

145 
NULL
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NGX_MODULE_V1_PADDING


155 
ngx_öt_t


156 
	$ngx_hâp_limô_c⁄n_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

158 
size_t
 
Àn
, 
n
;

159 
uöt32_t
 
hash
;

160 
ngx_uöt_t
 
i
;

161 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

162 
ngx_rbåì_node_t
 *
node
;

163 
ngx_poﬁ_˛ónup_t
 *
˛n
;

164 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

165 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

166 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

167 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
;

168 
ngx_hâp_limô_c⁄n_limô_t
 *
limôs
;

169 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
;

171 i‡(
r
->
maö
->
limô_c⁄n_£t
) {

172  
NGX_DECLINED
;

175 
lccf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_c⁄n_moduÀ
);

176 
limôs
 = 
lccf
->limôs.
ñts
;

178 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

179 
˘x
 = 
limôs
[
i
].
shm_z⁄e
->
d©a
;

181 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

183 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

187 
Àn
 = 
vv
->len;

189 i‡(
Àn
 == 0) {

193 i‡(
Àn
 > 255) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

197 &
˘x
->
v¨
, 
vv
);

201 
r
->
maö
->
limô_c⁄n_£t
 = 1;

203 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

205 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
limôs
[
i
].
shm_z⁄e
->
shm
.
addr
;

207 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

209 
node
 = 
	`ngx_hâp_limô_c⁄n_lookup
(
˘x
->
rbåì
, 
vv
, 
hash
);

211 i‡(
node
 =
NULL
) {

213 
n
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

214 + 
	`off£tof
(
ngx_hâp_limô_c⁄n_node_t
, 
d©a
)

215 + 
Àn
;

217 
node
 = 
	`ngx_¶ab_Æloc_locked
(
shpoﬁ
, 
n
);

219 i‡(
node
 =
NULL
) {

220 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

221 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

222  
lccf
->
°©us_code
;

225 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

227 
node
->
key
 = 
hash
;

228 
lc
->
Àn
 = (
u_ch¨
)Üen;

229 
lc
->
c⁄n
 = 1;

230 
	`ngx_mem˝y
(
lc
->
d©a
, 
vv
->d©a, 
Àn
);

232 
	`ngx_rbåì_ö£π
(
˘x
->
rbåì
, 
node
);

236 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

238 i‡((
ngx_uöt_t
Ë
lc
->
c⁄n
 >
limôs
[
i
].conn) {

240 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

242 
	`ngx_log_îr‹
(
lccf
->
log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

244 &
limôs
[
i
].
shm_z⁄e
->
shm
.
«me
);

246 
	`ngx_hâp_limô_c⁄n_˛ónup_Æl
(
r
->
poﬁ
);

247  
lccf
->
°©us_code
;

250 
lc
->
c⁄n
++;

253 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

254 "limô c⁄n: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

256 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

258 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
,

259 (
ngx_hâp_limô_c⁄n_˛ónup_t
));

260 i‡(
˛n
 =
NULL
) {

261  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

264 
˛n
->
h™dÀr
 = 
ngx_hâp_limô_c⁄n_˛ónup
;

265 
lc˛n
 = 
˛n
->
d©a
;

267 
lc˛n
->
shm_z⁄e
 = 
limôs
[
i
].shm_zone;

268 
lc˛n
->
node
 =Çode;

271  
NGX_DECLINED
;

272 
	}
}

276 
	$ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

277 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

279 
ngx_rbåì_node_t
 **
p
;

280 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
, *
l˙t
;

284 i‡(
node
->
key
 < 
ãmp
->key) {

286 
p
 = &
ãmp
->
À·
;

288 } i‡(
node
->
key
 > 
ãmp
->key) {

290 
p
 = &
ãmp
->
right
;

294 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

295 
l˙t
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
ãmp
->
cﬁ‹
;

297 
p
 = (
	`ngx_memn2cmp
(
l˙
->
d©a
, 
l˙t
->d©a,Ü˙->
Àn
,Ücnt->len) < 0)

298 ? &
ãmp
->
À·
 : &ãmp->
right
;

301 i‡(*
p
 =
£¡öñ
) {

305 
ãmp
 = *
p
;

308 *
p
 = 
node
;

309 
node
->
∑ª¡
 = 
ãmp
;

310 
node
->
À·
 = 
£¡öñ
;

311 
node
->
right
 = 
£¡öñ
;

312 
	`ngx_rbt_ªd
(
node
);

313 
	}
}

316 
ngx_rbåì_node_t
 *

317 
	$ngx_hâp_limô_c⁄n_lookup
(
ngx_rbåì_t
 *
rbåì
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
,

318 
uöt32_t
 
hash
)

320 
ngx_öt_t
 
rc
;

321 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

322 
ngx_hâp_limô_c⁄n_node_t
 *
l˙
;

324 
node
 = 
rbåì
->
roŸ
;

325 
£¡öñ
 = 
rbåì
->sentinel;

327 
node
 !
£¡öñ
) {

329 i‡(
hash
 < 
node
->
key
) {

330 
node
 =Çode->
À·
;

334 i‡(
hash
 > 
node
->
key
) {

335 
node
 =Çode->
right
;

341 
l˙
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

343 
rc
 = 
	`ngx_memn2cmp
(
vv
->
d©a
, 
l˙
->data,

344 (
size_t
Ë
vv
->
Àn
, (size_tË
l˙
->len);

345 i‡(
rc
 == 0) {

346  
node
;

349 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

352  
NULL
;

353 
	}
}

357 
	$ngx_hâp_limô_c⁄n_˛ónup
(*
d©a
)

359 
ngx_hâp_limô_c⁄n_˛ónup_t
 *
lc˛n
 = 
d©a
;

361 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

362 
ngx_rbåì_node_t
 *
node
;

363 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

364 
ngx_hâp_limô_c⁄n_node_t
 *
lc
;

366 
˘x
 = 
lc˛n
->
shm_z⁄e
->
d©a
;

367 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
lc˛n
->
shm_z⁄e
->
shm
.
addr
;

368 
node
 = 
lc˛n
->node;

369 
lc
 = (
ngx_hâp_limô_c⁄n_node_t
 *Ë&
node
->
cﬁ‹
;

371 
	`ngx_shmtx_lock
(&
shpoﬁ
->
muãx
);

373 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
lc˛n
->
shm_z⁄e
->
shm
.
log
, 0,

374 "limô c⁄¿˛ónup: %08XD %d", 
node
->
key
, 
lc
->
c⁄n
);

376 
lc
->
c⁄n
--;

378 i‡(
lc
->
c⁄n
 == 0) {

379 
	`ngx_rbåì_dñëe
(
˘x
->
rbåì
, 
node
);

380 
	`ngx_¶ab_‰ì_locked
(
shpoﬁ
, 
node
);

383 
	`ngx_shmtx_u∆ock
(&
shpoﬁ
->
muãx
);

384 
	}
}

387 
ngx_ölöe
 

388 
	$ngx_hâp_limô_c⁄n_˛ónup_Æl
(
ngx_poﬁ_t
 *
poﬁ
)

390 
ngx_poﬁ_˛ónup_t
 *
˛n
;

392 
˛n
 = 
poﬁ
->
˛ónup
;

394 
˛n
 && c ->
h™dÀr
 =
ngx_hâp_limô_c⁄n_˛ónup
) {

395 
	`ngx_hâp_limô_c⁄n_˛ónup
(
˛n
->
d©a
);

396 
˛n
 = c ->
√xt
;

399 
poﬁ
->
˛ónup
 = 
˛n
;

400 
	}
}

403 
ngx_öt_t


404 
	$ngx_hâp_limô_c⁄n_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

406 
ngx_hâp_limô_c⁄n_˘x_t
 *
o˘x
 = 
d©a
;

408 
size_t
 
Àn
;

409 
ngx_¶ab_poﬁ_t
 *
shpoﬁ
;

410 
ngx_rbåì_node_t
 *
£¡öñ
;

411 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

413 
˘x
 = 
shm_z⁄e
->
d©a
;

415 i‡(
o˘x
) {

416 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

417 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

420 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

421  
NGX_ERROR
;

424 
˘x
->
rbåì
 = 
o˘x
->rbtree;

426  
NGX_OK
;

429 
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

431 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

432 
˘x
->
rbåì
 = 
shpoﬁ
->
d©a
;

434  
NGX_OK
;

437 
˘x
->
rbåì
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_t
));

438 i‡(
˘x
->
rbåì
 =
NULL
) {

439  
NGX_ERROR
;

442 
shpoﬁ
->
d©a
 = 
˘x
->
rbåì
;

444 
£¡öñ
 = 
	`ngx_¶ab_Æloc
(
shpoﬁ
, (
ngx_rbåì_node_t
));

445 i‡(
£¡öñ
 =
NULL
) {

446  
NGX_ERROR
;

449 
	`ngx_rbåì_öô
(
˘x
->
rbåì
, 
£¡öñ
,

450 
ngx_hâp_limô_c⁄n_rbåì_ö£π_vÆue
);

452 
Àn
 = (" i¿limô_c⁄n_z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

454 
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(shpoﬁ, 
Àn
);

455 i‡(
shpoﬁ
->
log_˘x
 =
NULL
) {

456  
NGX_ERROR
;

459 
	`ngx_•rötf
(
shpoﬁ
->
log_˘x
, " inÜimit_conn_zone \"%V\"%Z",

460 &
shm_z⁄e
->
shm
.
«me
);

462  
NGX_OK
;

463 
	}
}

467 
	$ngx_hâp_limô_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

469 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
;

471 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_c⁄f_t
));

472 i‡(
c⁄f
 =
NULL
) {

473  
NULL
;

482 
c⁄f
->
log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

483 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

485  
c⁄f
;

486 
	}
}

490 
	$ngx_hâp_limô_c⁄n_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

492 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

493 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
c⁄f
 = 
chûd
;

495 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

496 
c⁄f
->
limôs
 = 
¥ev
->limits;

499 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
log_Àvñ
, 
¥ev
->log_Àvñ, 
NGX_LOG_ERR
);

500 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

501 
NGX_HTTP_SERVICE_UNAVAILABLE
);

503  
NGX_CONF_OK
;

504 
	}
}

508 
	$ngx_hâp_limô_c⁄n_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

510 
u_ch¨
 *
p
;

511 
ssize_t
 
size
;

512 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

513 
ngx_uöt_t
 
i
;

514 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

515 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

517 
vÆue
 = 
cf
->
¨gs
->
ñts
;

519 
˘x
 = 
NULL
;

520 
size
 = 0;

521 
«me
.
Àn
 = 0;

523 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

525 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

527 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

529 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

531 i‡(
p
 =
NULL
) {

532 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

533 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

534  
NGX_CONF_ERROR
;

537 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

539 
s
.
d©a
 = 
p
 + 1;

540 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

542 
size
 = 
	`ngx_∑r£_size
(&
s
);

544 i‡(
size
 =
NGX_ERROR
) {

545 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

546 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

547  
NGX_CONF_ERROR
;

550 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

551 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

552 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

553  
NGX_CONF_ERROR
;

559 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

561 
vÆue
[
i
].
Àn
--;

562 
vÆue
[
i
].
d©a
++;

564 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

565 i‡(
˘x
 =
NULL
) {

566  
NGX_CONF_ERROR
;

569 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

570 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

571  
NGX_CONF_ERROR
;

574 
˘x
->
v¨
 = 
vÆue
[
i
];

579 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

580 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

581  
NGX_CONF_ERROR
;

584 i‡(
«me
.
Àn
 == 0) {

585 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

587 &
cmd
->
«me
);

588  
NGX_CONF_ERROR
;

591 i‡(
˘x
 =
NULL
) {

592 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

594 &
cmd
->
«me
, &name);

595  
NGX_CONF_ERROR
;

598 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

599 &
ngx_hâp_limô_c⁄n_moduÀ
);

600 i‡(
shm_z⁄e
 =
NULL
) {

601  
NGX_CONF_ERROR
;

604 i‡(
shm_z⁄e
->
d©a
) {

605 
˘x
 = 
shm_z⁄e
->
d©a
;

607 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

609 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

610  
NGX_CONF_ERROR
;

613 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

614 
shm_z⁄e
->
d©a
 = 
˘x
;

616  
NGX_CONF_OK
;

617 
	}
}

621 
	$ngx_hâp_limô_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

623 
ssize_t
 
n
;

624 
ngx_°r_t
 *
vÆue
;

625 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

626 
ngx_hâp_limô_c⁄n_˘x_t
 *
˘x
;

628 
	`ngx_c⁄f_dïªˇãd
(
cf
, &
ngx_c⁄f_dïªˇãd_limô_z⁄e
, 
NULL
);

630 
vÆue
 = 
cf
->
¨gs
->
ñts
;

632 i‡(
vÆue
[2].
d©a
[0] != '$') {

633 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

634 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[2]);

635  
NGX_CONF_ERROR
;

638 
vÆue
[2].
Àn
--;

639 
vÆue
[2].
d©a
++;

641 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_c⁄n_˘x_t
));

642 i‡(
˘x
 =
NULL
) {

643  
NGX_CONF_ERROR
;

646 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[2]);

647 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

648  
NGX_CONF_ERROR
;

651 
˘x
->
v¨
 = 
vÆue
[2];

653 
n
 = 
	`ngx_∑r£_size
(&
vÆue
[3]);

655 i‡(
n
 =
NGX_ERROR
) {

656 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

657 "övÆid sizêo‡limô_z⁄ê\"%V\"", &
vÆue
[3]);

658  
NGX_CONF_ERROR
;

661 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

662 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

663 "limô_z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[1]);

664  
NGX_CONF_ERROR
;

668 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 
n
,

669 &
ngx_hâp_limô_c⁄n_moduÀ
);

670 i‡(
shm_z⁄e
 =
NULL
) {

671  
NGX_CONF_ERROR
;

674 i‡(
shm_z⁄e
->
d©a
) {

675 
˘x
 = 
shm_z⁄e
->
d©a
;

677 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

679 &
vÆue
[1], &
˘x
->
v¨
);

680  
NGX_CONF_ERROR
;

683 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_c⁄n_öô_z⁄e
;

684 
shm_z⁄e
->
d©a
 = 
˘x
;

686  
NGX_CONF_OK
;

687 
	}
}

691 
	$ngx_hâp_limô_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

693 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

694 
ngx_hâp_limô_c⁄n_c⁄f_t
 *
lccf
 = 
c⁄f
;

695 
ngx_hâp_limô_c⁄n_limô_t
 *
limô
, *
limôs
;

697 
ngx_°r_t
 *
vÆue
;

698 
ngx_öt_t
 
n
;

699 
ngx_uöt_t
 
i
;

701 
vÆue
 = 
cf
->
¨gs
->
ñts
;

703 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

704 &
ngx_hâp_limô_c⁄n_moduÀ
);

705 i‡(
shm_z⁄e
 =
NULL
) {

706  
NGX_CONF_ERROR
;

709 
limôs
 = 
lccf
->limôs.
ñts
;

711 i‡(
limôs
 =
NULL
) {

712 i‡(
	`ngx_¨øy_öô
(&
lccf
->
limôs
, 
cf
->
poﬁ
, 1,

713 (
ngx_hâp_limô_c⁄n_limô_t
))

714 !
NGX_OK
)

716  
NGX_CONF_ERROR
;

720 
i
 = 0; i < 
lccf
->
limôs
.
√…s
; i++) {

721 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

726 
n
 = 
	`ngx_©oi
(
vÆue
[2].
d©a
, vÆue[2].
Àn
);

727 i‡(
n
 <= 0) {

728 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

729 "övÆidÇumbî o‡c⁄√˘i⁄†\"%V\"", &
vÆue
[2]);

730  
NGX_CONF_ERROR
;

733 i‡(
n
 > 65535) {

734 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

736  
NGX_CONF_ERROR
;

739 
limô
 = 
	`ngx_¨øy_push
(&
lccf
->
limôs
);

740 i‡(
limô
 =
NULL
) {

741  
NGX_CONF_ERROR
;

744 
limô
->
c⁄n
 = 
n
;

745 
limô
->
shm_z⁄e
 = shm_zone;

747  
NGX_CONF_OK
;

748 
	}
}

751 
ngx_öt_t


752 
	$ngx_hâp_limô_c⁄n_öô
(
ngx_c⁄f_t
 *
cf
)

754 
ngx_hâp_h™dÀr_±
 *
h
;

755 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

757 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

759 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

760 i‡(
h
 =
NULL
) {

761  
NGX_ERROR
;

764 *
h
 = 
ngx_hâp_limô_c⁄n_h™dÀr
;

766  
NGX_OK
;

767 
	}
}

	@src/http/modules/ngx_http_limit_req_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 
	mcﬁ‹
;

15 
u_ch¨
 
	mdummy
;

16 
u_sh‹t
 
	mÀn
;

17 
ngx_queue_t
 
	mqueue
;

18 
ngx_m£c_t
 
	mœ°
;

20 
ngx_uöt_t
 
	mex˚ss
;

21 
ngx_uöt_t
 
	mcou¡
;

22 
u_ch¨
 
	md©a
[1];

23 } 
	tngx_hâp_limô_ªq_node_t
;

27 
ngx_rbåì_t
 
	mrbåì
;

28 
ngx_rbåì_node_t
 
	m£¡öñ
;

29 
ngx_queue_t
 
	mqueue
;

30 } 
	tngx_hâp_limô_ªq_sh˘x_t
;

34 
ngx_hâp_limô_ªq_sh˘x_t
 *
	msh
;

35 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

37 
ngx_uöt_t
 
	møã
;

38 
ngx_öt_t
 
	mödex
;

39 
ngx_°r_t
 
	mv¨
;

40 
ngx_hâp_limô_ªq_node_t
 *
	mnode
;

41 } 
	tngx_hâp_limô_ªq_˘x_t
;

45 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

47 
ngx_uöt_t
 
	mbur°
;

48 
ngx_uöt_t
 
	mnodñay
;

49 } 
	tngx_hâp_limô_ªq_limô_t
;

53 
ngx_¨øy_t
 
	mlimôs
;

54 
ngx_uöt_t
 
	mlimô_log_Àvñ
;

55 
ngx_uöt_t
 
	mdñay_log_Àvñ
;

56 
ngx_uöt_t
 
	m°©us_code
;

57 } 
	tngx_hâp_limô_ªq_c⁄f_t
;

60 
ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
);

61 
ngx_öt_t
 
ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
,

62 
ngx_uöt_t
 
hash
, 
u_ch¨
 *
d©a
, 
size_t
 
Àn
,Çgx_uöt_à*
ï
,

63 
ngx_uöt_t
 
accou¡
);

64 
ngx_m£c_t
 
ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
,

65 
ngx_uöt_t
 
n
,Çgx_uöt_à*
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
);

66 
ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
,

67 
ngx_uöt_t
 
n
);

69 *
ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

70 *
ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

71 *
chûd
);

72 *
ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

73 *
c⁄f
);

74 *
ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

75 *
c⁄f
);

76 
ngx_öt_t
 
ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
);

79 
ngx_c⁄f_íum_t
 
	gngx_hâp_limô_ªq_log_Àvñs
[] = {

80 { 
ngx_°rög
("öfo"), 
NGX_LOG_INFO
 },

81 { 
ngx_°rög
("nŸi˚"), 
NGX_LOG_NOTICE
 },

82 { 
ngx_°rög
("w¨n"), 
NGX_LOG_WARN
 },

83 { 
ngx_°rög
("îr‹"), 
NGX_LOG_ERR
 },

84 { 
ngx_nuŒ_°rög
, 0 }

88 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_limô_ªq_°©us_bounds
 = {

89 
ngx_c⁄f_check_num_bounds
, 400, 599

93 
ngx_comm™d_t
 
	gngx_hâp_limô_ªq_comm™ds
[] = {

95 { 
ngx_°rög
("limit_req_zone"),

96 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE3
,

97 
ngx_hâp_limô_ªq_z⁄e
,

100 
NULL
 },

102 { 
ngx_°rög
("limit_req"),

103 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

104 
ngx_hâp_limô_ªq
,

105 
NGX_HTTP_LOC_CONF_OFFSET
,

107 
NULL
 },

109 { 
ngx_°rög
("limit_req_log_level"),

110 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

111 
ngx_c⁄f_£t_íum_¶Ÿ
,

112 
NGX_HTTP_LOC_CONF_OFFSET
,

113 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
limô_log_Àvñ
),

114 &
ngx_hâp_limô_ªq_log_Àvñs
 },

116 { 
ngx_°rög
("limit_req_status"),

117 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

118 
ngx_c⁄f_£t_num_¶Ÿ
,

119 
NGX_HTTP_LOC_CONF_OFFSET
,

120 
off£tof
(
ngx_hâp_limô_ªq_c⁄f_t
, 
°©us_code
),

121 &
ngx_hâp_limô_ªq_°©us_bounds
 },

123 
ngx_nuŒ_comm™d


127 
ngx_hâp_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ_˘x
 = {

128 
NULL
,

129 
ngx_hâp_limô_ªq_öô
,

131 
NULL
,

132 
NULL
,

134 
NULL
,

135 
NULL
,

137 
ngx_hâp_limô_ªq_¸óã_c⁄f
,

138 
ngx_hâp_limô_ªq_mîge_c⁄f


142 
ngx_moduÀ_t
 
	gngx_hâp_limô_ªq_moduÀ
 = {

143 
NGX_MODULE_V1
,

144 &
ngx_hâp_limô_ªq_moduÀ_˘x
,

145 
ngx_hâp_limô_ªq_comm™ds
,

146 
NGX_HTTP_MODULE
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NULL
,

154 
NGX_MODULE_V1_PADDING


158 
ngx_öt_t


159 
	$ngx_hâp_limô_ªq_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

161 
size_t
 
Àn
;

162 
uöt32_t
 
hash
;

163 
ngx_öt_t
 
rc
;

164 
ngx_uöt_t
 
n
, 
ex˚ss
;

165 
ngx_m£c_t
 
dñay
;

166 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

167 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

168 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
;

169 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

171 i‡(
r
->
maö
->
limô_ªq_£t
) {

172  
NGX_DECLINED
;

175 
Ãcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_limô_ªq_moduÀ
);

176 
limôs
 = 
Ãcf
->limôs.
ñts
;

178 
ex˚ss
 = 0;

180 
rc
 = 
NGX_DECLINED
;

182 #i‡(
NGX_SUPPRESS_WARN
)

183 
limô
 = 
NULL
;

186 
n
 = 0;Ç < 
Ãcf
->
limôs
.
√…s
;Ç++) {

188 
limô
 = &
limôs
[
n
];

190 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

192 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
˘x
->
ödex
);

194 i‡(
vv
 =
NULL
 || vv->
nŸ_found
) {

198 
Àn
 = 
vv
->len;

200 i‡(
Àn
 == 0) {

204 i‡(
Àn
 > 65535) {

205 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

208 &
˘x
->
v¨
, 
vv
);

212 
hash
 = 
	`ngx_¸c32_sh‹t
(
vv
->
d©a
, 
Àn
);

214 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

216 
rc
 = 
	`ngx_hâp_limô_ªq_lookup
(
limô
, 
hash
, 
vv
->
d©a
, 
Àn
, &
ex˚ss
,

217 (
n
 =
Ãcf
->
limôs
.
√…s
 - 1));

219 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

221 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

223 
n
, 
rc
, 
ex˚ss
 / 1000,Éxcess % 1000);

225 i‡(
rc
 !
NGX_AGAIN
) {

230 i‡(
rc
 =
NGX_DECLINED
) {

231  
NGX_DECLINED
;

234 
r
->
maö
->
limô_ªq_£t
 = 1;

236 i‡(
rc
 =
NGX_BUSY
 ||Ñ¯=
NGX_ERROR
) {

238 i‡(
rc
 =
NGX_BUSY
) {

239 
	`ngx_log_îr‹
(
Ãcf
->
limô_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241 
ex˚ss
 / 1000,Éxcess % 1000,

242 &
limô
->
shm_z⁄e
->
shm
.
«me
);

245 
n
--) {

246 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

248 i‡(
˘x
->
node
 =
NULL
) {

252 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

254 
˘x
->
node
->
cou¡
--;

256 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

258 
˘x
->
node
 = 
NULL
;

261  
Ãcf
->
°©us_code
;

266 i‡(
rc
 =
NGX_AGAIN
) {

267 
ex˚ss
 = 0;

270 
dñay
 = 
	`ngx_hâp_limô_ªq_accou¡
(
limôs
, 
n
, &
ex˚ss
, &
limô
);

272 i‡(!
dñay
) {

273  
NGX_DECLINED
;

276 
	`ngx_log_îr‹
(
Ãcf
->
dñay_log_Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
ex˚ss
 / 1000,Éx˚s†% 1000, &
limô
->
shm_z⁄e
->
shm
.
«me
);

280 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

281  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

284 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ã°_ªadög
;

285 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_limô_ªq_dñay
;

286 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
wrôe
, 
dñay
);

288  
NGX_AGAIN
;

289 
	}
}

293 
	$ngx_hâp_limô_ªq_dñay
(
ngx_hâp_ªque°_t
 *
r
)

295 
ngx_evít_t
 *
wev
;

297 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

300 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

302 i‡(!
wev
->
timedout
) {

304 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

305 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

311 
wev
->
timedout
 = 0;

313 i‡(
	`ngx_h™dÀ_ªad_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 0Ë!
NGX_OK
) {

314 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

318 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

319 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

321 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

322 
	}
}

326 
	$ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

327 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

329 
ngx_rbåì_node_t
 **
p
;

330 
ngx_hâp_limô_ªq_node_t
 *
Ãn
, *
Ã¡
;

334 i‡(
node
->
key
 < 
ãmp
->key) {

336 
p
 = &
ãmp
->
À·
;

338 } i‡(
node
->
key
 > 
ãmp
->key) {

340 
p
 = &
ãmp
->
right
;

344 
Ãn
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

345 
Ã¡
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
ãmp
->
cﬁ‹
;

347 
p
 = (
	`ngx_memn2cmp
(
Ãn
->
d©a
, 
Ã¡
->d©a,Ü∫->
Àn
,Ürnt->len) < 0)

348 ? &
ãmp
->
À·
 : &ãmp->
right
;

351 i‡(*
p
 =
£¡öñ
) {

355 
ãmp
 = *
p
;

358 *
p
 = 
node
;

359 
node
->
∑ª¡
 = 
ãmp
;

360 
node
->
À·
 = 
£¡öñ
;

361 
node
->
right
 = 
£¡öñ
;

362 
	`ngx_rbt_ªd
(
node
);

363 
	}
}

366 
ngx_öt_t


367 
	$ngx_hâp_limô_ªq_lookup
(
ngx_hâp_limô_ªq_limô_t
 *
limô
, 
ngx_uöt_t
 
hash
,

368 
u_ch¨
 *
d©a
, 
size_t
 
Àn
, 
ngx_uöt_t
 *
ï
,Çgx_uöt_à
accou¡
)

370 
size_t
 
size
;

371 
ngx_öt_t
 
rc
, 
ex˚ss
;

372 
ngx_time_t
 *
ç
;

373 
ngx_m£c_t
 
now
;

374 
ngx_m£c_öt_t
 
ms
;

375 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

376 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

377 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

379 
ç
 = 
	`ngx_timeofday
();

380 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

382 
˘x
 = 
limô
->
shm_z⁄e
->
d©a
;

384 
node
 = 
˘x
->
sh
->
rbåì
.
roŸ
;

385 
£¡öñ
 = 
˘x
->
sh
->
rbåì
.sentinel;

387 
node
 !
£¡öñ
) {

389 i‡(
hash
 < 
node
->
key
) {

390 
node
 =Çode->
À·
;

394 i‡(
hash
 > 
node
->
key
) {

395 
node
 =Çode->
right
;

401 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

403 
rc
 = 
	`ngx_memn2cmp
(
d©a
, 
Ã
->d©a, 
Àn
, (
size_t
)Ür->len);

405 i‡(
rc
 == 0) {

406 
	`ngx_queue_ªmove
(&
Ã
->
queue
);

407 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

409 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

411 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

413 i‡(
ex˚ss
 < 0) {

414 
ex˚ss
 = 0;

417 *
ï
 = 
ex˚ss
;

419 i‡((
ngx_uöt_t
Ë
ex˚ss
 > 
limô
->
bur°
) {

420  
NGX_BUSY
;

423 i‡(
accou¡
) {

424 
Ã
->
ex˚ss
 =Éxcess;

425 
Ã
->
œ°
 = 
now
;

426  
NGX_OK
;

429 
Ã
->
cou¡
++;

431 
˘x
->
node
 = 
Ã
;

433  
NGX_AGAIN
;

436 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

439 *
ï
 = 0;

441 
size
 = 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
)

442 + 
	`off£tof
(
ngx_hâp_limô_ªq_node_t
, 
d©a
)

443 + 
Àn
;

445 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 1);

447 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

449 i‡(
node
 =
NULL
) {

450 
	`ngx_hâp_limô_ªq_expúe
(
˘x
, 0);

452 
node
 = 
	`ngx_¶ab_Æloc_locked
(
˘x
->
shpoﬁ
, 
size
);

453 i‡(
node
 =
NULL
) {

454  
NGX_ERROR
;

458 
node
->
key
 = 
hash
;

460 
Ã
 = (
ngx_hâp_limô_ªq_node_t
 *Ë&
node
->
cﬁ‹
;

462 
Ã
->
Àn
 = (
u_ch¨
)Üen;

463 
Ã
->
ex˚ss
 = 0;

465 
	`ngx_mem˝y
(
Ã
->
d©a
, d©a, 
Àn
);

467 
	`ngx_rbåì_ö£π
(&
˘x
->
sh
->
rbåì
, 
node
);

469 
	`ngx_queue_ö£π_hód
(&
˘x
->
sh
->
queue
, &
Ã
->queue);

471 i‡(
accou¡
) {

472 
Ã
->
œ°
 = 
now
;

473 
Ã
->
cou¡
 = 0;

474  
NGX_OK
;

477 
Ã
->
œ°
 = 0;

478 
Ã
->
cou¡
 = 1;

480 
˘x
->
node
 = 
Ã
;

482  
NGX_AGAIN
;

483 
	}
}

486 
ngx_m£c_t


487 
	$ngx_hâp_limô_ªq_accou¡
(
ngx_hâp_limô_ªq_limô_t
 *
limôs
, 
ngx_uöt_t
 
n
,

488 
ngx_uöt_t
 *
ï
, 
ngx_hâp_limô_ªq_limô_t
 **
limô
)

490 
ngx_öt_t
 
ex˚ss
;

491 
ngx_time_t
 *
ç
;

492 
ngx_m£c_t
 
now
, 
dñay
, 
max_dñay
;

493 
ngx_m£c_öt_t
 
ms
;

494 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

495 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

497 
ex˚ss
 = *
ï
;

499 i‡(
ex˚ss
 =0 || (*
limô
)->
nodñay
) {

500 
max_dñay
 = 0;

503 
˘x
 = (*
limô
)->
shm_z⁄e
->
d©a
;

504 
max_dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

507 
n
--) {

508 
˘x
 = 
limôs
[
n
].
shm_z⁄e
->
d©a
;

509 
Ã
 = 
˘x
->
node
;

511 i‡(
Ã
 =
NULL
) {

515 
	`ngx_shmtx_lock
(&
˘x
->
shpoﬁ
->
muãx
);

517 
ç
 = 
	`ngx_timeofday
();

519 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

520 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

522 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
	`ngx_abs
(
ms
) / 1000 + 1000;

524 i‡(
ex˚ss
 < 0) {

525 
ex˚ss
 = 0;

528 
Ã
->
œ°
 = 
now
;

529 
Ã
->
ex˚ss
 =Éxcess;

530 
Ã
->
cou¡
--;

532 
	`ngx_shmtx_u∆ock
(&
˘x
->
shpoﬁ
->
muãx
);

534 
˘x
->
node
 = 
NULL
;

536 i‡(
limôs
[
n
].
nodñay
) {

540 
dñay
 = 
ex˚ss
 * 1000 / 
˘x
->
øã
;

542 i‡(
dñay
 > 
max_dñay
) {

543 
max_dñay
 = 
dñay
;

544 *
ï
 = 
ex˚ss
;

545 *
limô
 = &
limôs
[
n
];

549  
max_dñay
;

550 
	}
}

554 
	$ngx_hâp_limô_ªq_expúe
(
ngx_hâp_limô_ªq_˘x_t
 *
˘x
, 
ngx_uöt_t
 
n
)

556 
ngx_öt_t
 
ex˚ss
;

557 
ngx_time_t
 *
ç
;

558 
ngx_m£c_t
 
now
;

559 
ngx_queue_t
 *
q
;

560 
ngx_m£c_öt_t
 
ms
;

561 
ngx_rbåì_node_t
 *
node
;

562 
ngx_hâp_limô_ªq_node_t
 *
Ã
;

564 
ç
 = 
	`ngx_timeofday
();

566 
now
 = (
ngx_m£c_t
Ë(
ç
->
£c
 * 1000 +Åp->
m£c
);

574 
n
 < 3) {

576 i‡(
	`ngx_queue_em±y
(&
˘x
->
sh
->
queue
)) {

580 
q
 = 
	`ngx_queue_œ°
(&
˘x
->
sh
->
queue
);

582 
Ã
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_limô_ªq_node_t
, 
queue
);

584 i‡(
Ã
->
cou¡
) {

594 i‡(
n
++ != 0) {

596 
ms
 = (
ngx_m£c_öt_t
Ë(
now
 - 
Ã
->
œ°
);

597 
ms
 = 
	`ngx_abs
(ms);

599 i‡(
ms
 < 60000) {

603 
ex˚ss
 = 
Ã
->ex˚s†- 
˘x
->
øã
 * 
ms
 / 1000;

605 i‡(
ex˚ss
 > 0) {

610 
	`ngx_queue_ªmove
(
q
);

612 
node
 = (
ngx_rbåì_node_t
 *)

613 ((
u_ch¨
 *Ë
Ã
 - 
	`off£tof
(
ngx_rbåì_node_t
, 
cﬁ‹
));

615 
	`ngx_rbåì_dñëe
(&
˘x
->
sh
->
rbåì
, 
node
);

617 
	`ngx_¶ab_‰ì_locked
(
˘x
->
shpoﬁ
, 
node
);

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_hâp_limô_ªq_öô_z⁄e
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

625 
ngx_hâp_limô_ªq_˘x_t
 *
o˘x
 = 
d©a
;

627 
size_t
 
Àn
;

628 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

630 
˘x
 = 
shm_z⁄e
->
d©a
;

632 i‡(
o˘x
) {

633 i‡(
	`ngx_°rcmp
(
˘x
->
v¨
.
d©a
, 
o˘x
->var.data) != 0) {

634 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

637 &
shm_z⁄e
->
shm
.
«me
, &
˘x
->
v¨
, &
o˘x
->var);

638  
NGX_ERROR
;

641 
˘x
->
sh
 = 
o˘x
->sh;

642 
˘x
->
shpoﬁ
 = 
o˘x
->shpool;

644  
NGX_OK
;

647 
˘x
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

649 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

650 
˘x
->
sh
 = ctx->
shpoﬁ
->
d©a
;

652  
NGX_OK
;

655 
˘x
->
sh
 = 
	`ngx_¶ab_Æloc
(˘x->
shpoﬁ
, (
ngx_hâp_limô_ªq_sh˘x_t
));

656 i‡(
˘x
->
sh
 =
NULL
) {

657  
NGX_ERROR
;

660 
˘x
->
shpoﬁ
->
d©a
 = ctx->
sh
;

662 
	`ngx_rbåì_öô
(&
˘x
->
sh
->
rbåì
, &˘x->sh->
£¡öñ
,

663 
ngx_hâp_limô_ªq_rbåì_ö£π_vÆue
);

665 
	`ngx_queue_öô
(&
˘x
->
sh
->
queue
);

667 
Àn
 = (" i¿limô_ªq z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

669 
˘x
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(˘x->shpoﬁ, 
Àn
);

670 i‡(
˘x
->
shpoﬁ
->
log_˘x
 =
NULL
) {

671  
NGX_ERROR
;

674 
	`ngx_•rötf
(
˘x
->
shpoﬁ
->
log_˘x
, " inÜimit_req zone \"%V\"%Z",

675 &
shm_z⁄e
->
shm
.
«me
);

677  
NGX_OK
;

678 
	}
}

682 
	$ngx_hâp_limô_ªq_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

684 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
;

686 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_c⁄f_t
));

687 i‡(
c⁄f
 =
NULL
) {

688  
NULL
;

697 
c⁄f
->
limô_log_Àvñ
 = 
NGX_CONF_UNSET_UINT
;

698 
c⁄f
->
°©us_code
 = 
NGX_CONF_UNSET_UINT
;

700  
c⁄f
;

701 
	}
}

705 
	$ngx_hâp_limô_ªq_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

707 
ngx_hâp_limô_ªq_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

708 
ngx_hâp_limô_ªq_c⁄f_t
 *
c⁄f
 = 
chûd
;

710 i‡(
c⁄f
->
limôs
.
ñts
 =
NULL
) {

711 
c⁄f
->
limôs
 = 
¥ev
->limits;

714 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
limô_log_Àvñ
, 
¥ev
->limit_log_level,

715 
NGX_LOG_ERR
);

717 
c⁄f
->
dñay_log_Àvñ
 = (c⁄f->
limô_log_Àvñ
 =
NGX_LOG_INFO
) ?

718 
NGX_LOG_INFO
 : 
c⁄f
->
limô_log_Àvñ
 + 1;

720 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°©us_code
, 
¥ev
->status_code,

721 
NGX_HTTP_SERVICE_UNAVAILABLE
);

723  
NGX_CONF_OK
;

724 
	}
}

728 
	$ngx_hâp_limô_ªq_z⁄e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

730 
u_ch¨
 *
p
;

731 
size_t
 
Àn
;

732 
ssize_t
 
size
;

733 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

734 
ngx_öt_t
 
øã
, 
sˇÀ
;

735 
ngx_uöt_t
 
i
;

736 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

737 
ngx_hâp_limô_ªq_˘x_t
 *
˘x
;

739 
vÆue
 = 
cf
->
¨gs
->
ñts
;

741 
˘x
 = 
NULL
;

742 
size
 = 0;

743 
øã
 = 1;

744 
sˇÀ
 = 1;

745 
«me
.
Àn
 = 0;

747 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

749 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

751 
«me
.
d©a
 = 
vÆue
[
i
].data + 5;

753 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

755 i‡(
p
 =
NULL
) {

756 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

757 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

758  
NGX_CONF_ERROR
;

761 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

763 
s
.
d©a
 = 
p
 + 1;

764 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + value[i].len - s.data;

766 
size
 = 
	`ngx_∑r£_size
(&
s
);

768 i‡(
size
 =
NGX_ERROR
) {

769 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

770 "övÆid z⁄êsizê\"%V\"", &
vÆue
[
i
]);

771  
NGX_CONF_ERROR
;

774 i‡(
size
 < (
ssize_t
Ë(8 * 
ngx_∑gesize
)) {

775 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

776 "z⁄ê\"%V\" i†toÿsmÆl", &
vÆue
[
i
]);

777  
NGX_CONF_ERROR
;

783 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "rate=", 5) == 0) {

785 
Àn
 = 
vÆue
[
i
].len;

786 
p
 = 
vÆue
[
i
].
d©a
 + 
Àn
 - 3;

788 i‡(
	`ngx_°∫cmp
(
p
, "r/s", 3) == 0) {

789 
sˇÀ
 = 1;

790 
Àn
 -= 3;

792 } i‡(
	`ngx_°∫cmp
(
p
, "r/m", 3) == 0) {

793 
sˇÀ
 = 60;

794 
Àn
 -= 3;

797 
øã
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 5, 
Àn
 - 5);

798 i‡(
øã
 <= 0) {

799 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

800 "övÆidÑ©ê\"%V\"", &
vÆue
[
i
]);

801  
NGX_CONF_ERROR
;

807 i‡(
vÆue
[
i
].
d©a
[0] == '$') {

809 
vÆue
[
i
].
Àn
--;

810 
vÆue
[
i
].
d©a
++;

812 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_limô_ªq_˘x_t
));

813 i‡(
˘x
 =
NULL
) {

814  
NGX_CONF_ERROR
;

817 
˘x
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[
i
]);

818 i‡(
˘x
->
ödex
 =
NGX_ERROR
) {

819  
NGX_CONF_ERROR
;

822 
˘x
->
v¨
 = 
vÆue
[
i
];

827 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

828 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

829  
NGX_CONF_ERROR
;

832 i‡(
«me
.
Àn
 == 0) {

833 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

835 &
cmd
->
«me
);

836  
NGX_CONF_ERROR
;

839 i‡(
˘x
 =
NULL
) {

840 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

842 &
cmd
->
«me
, &name);

843  
NGX_CONF_ERROR
;

846 
˘x
->
øã
 =Ñ©ê* 1000 / 
sˇÀ
;

848 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
,

849 &
ngx_hâp_limô_ªq_moduÀ
);

850 i‡(
shm_z⁄e
 =
NULL
) {

851  
NGX_CONF_ERROR
;

854 i‡(
shm_z⁄e
->
d©a
) {

855 
˘x
 = 
shm_z⁄e
->
d©a
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

859 &
cmd
->
«me
, &«me, &
˘x
->
v¨
);

860  
NGX_CONF_ERROR
;

863 
shm_z⁄e
->
öô
 = 
ngx_hâp_limô_ªq_öô_z⁄e
;

864 
shm_z⁄e
->
d©a
 = 
˘x
;

866  
NGX_CONF_OK
;

867 
	}
}

871 
	$ngx_hâp_limô_ªq
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

873 
ngx_hâp_limô_ªq_c⁄f_t
 *
Ãcf
 = 
c⁄f
;

875 
ngx_öt_t
 
bur°
;

876 
ngx_°r_t
 *
vÆue
, 
s
;

877 
ngx_uöt_t
 
i
, 
nodñay
;

878 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

879 
ngx_hâp_limô_ªq_limô_t
 *
limô
, *
limôs
;

881 
vÆue
 = 
cf
->
¨gs
->
ñts
;

883 
shm_z⁄e
 = 
NULL
;

884 
bur°
 = 0;

885 
nodñay
 = 0;

887 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

889 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "zone=", 5) == 0) {

891 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

892 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

894 
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
s
, 0,

895 &
ngx_hâp_limô_ªq_moduÀ
);

896 i‡(
shm_z⁄e
 =
NULL
) {

897  
NGX_CONF_ERROR
;

903 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "burst=", 6) == 0) {

905 
bur°
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 6, vÆue[i].
Àn
 - 6);

906 i‡(
bur°
 <= 0) {

907 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

908 "övÆid bur°Ñ©ê\"%V\"", &
vÆue
[
i
]);

909  
NGX_CONF_ERROR
;

915 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "nodelay", 7) == 0) {

916 
nodñay
 = 1;

920 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

921 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

922  
NGX_CONF_ERROR
;

925 i‡(
shm_z⁄e
 =
NULL
) {

926 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

928 &
cmd
->
«me
);

929  
NGX_CONF_ERROR
;

932 i‡(
shm_z⁄e
->
d©a
 =
NULL
) {

933 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

935 &
shm_z⁄e
->
shm
.
«me
);

936  
NGX_CONF_ERROR
;

939 
limôs
 = 
Ãcf
->limôs.
ñts
;

941 i‡(
limôs
 =
NULL
) {

942 i‡(
	`ngx_¨øy_öô
(&
Ãcf
->
limôs
, 
cf
->
poﬁ
, 1,

943 (
ngx_hâp_limô_ªq_limô_t
))

944 !
NGX_OK
)

946  
NGX_CONF_ERROR
;

950 
i
 = 0; i < 
Ãcf
->
limôs
.
√…s
; i++) {

951 i‡(
shm_z⁄e
 =
limôs
[
i
].shm_zone) {

956 
limô
 = 
	`ngx_¨øy_push
(&
Ãcf
->
limôs
);

957 i‡(
limô
 =
NULL
) {

958  
NGX_CONF_ERROR
;

961 
limô
->
shm_z⁄e
 = shm_zone;

962 
limô
->
bur°
 = burst * 1000;

963 
limô
->
nodñay
 =Çodelay;

965  
NGX_CONF_OK
;

966 
	}
}

969 
ngx_öt_t


970 
	$ngx_hâp_limô_ªq_öô
(
ngx_c⁄f_t
 *
cf
)

972 
ngx_hâp_h™dÀr_±
 *
h
;

973 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

975 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

977 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

978 i‡(
h
 =
NULL
) {

979  
NGX_ERROR
;

982 *
h
 = 
ngx_hâp_limô_ªq_h™dÀr
;

984  
NGX_OK
;

985 
	}
}

	@src/http/modules/ngx_http_log_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 #i‡(
NGX_ZLIB
)

13 
	~<zlib.h
>

17 
ngx_hâp_log_›_s
 
	tngx_hâp_log_›_t
;

19 
	gu_ch¨
 *(*
	tngx_hâp_log_›_run_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
, 
	tu_ch¨
 *
	tbuf
,

20 
	tngx_hâp_log_›_t
 *
	t›
);

22 
	$size_t
 (*
	tngx_hâp_log_›_gëÀn_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

23 
	tuöçå_t
 
	td©a
);

26 
	sngx_hâp_log_›_s
 {

27 
size_t
 
Àn
;

28 
ngx_hâp_log_›_gëÀn_±
 
gëÀn
;

29 
ngx_hâp_log_›_run_±
 
run
;

30 
uöçå_t
 
d©a
;

35 
ngx_°r_t
 
«me
;

36 
ngx_¨øy_t
 *
Êushes
;

37 
ngx_¨øy_t
 *
›s
;

38 } 
	tngx_hâp_log_fmt_t
;

42 
ngx_¨øy_t
 
f‹m©s
;

43 
ngx_uöt_t
 
comböed_u£d
;

44 } 
	tngx_hâp_log_maö_c⁄f_t
;

48 
u_ch¨
 *
°¨t
;

49 
u_ch¨
 *
pos
;

50 
u_ch¨
 *
œ°
;

52 
ngx_evít_t
 *
evít
;

53 
ngx_m£c_t
 
Êush
;

54 
ngx_öt_t
 
gzù
;

55 } 
	tngx_hâp_log_buf_t
;

59 
ngx_¨øy_t
 *
Àngths
;

60 
ngx_¨øy_t
 *
vÆues
;

61 } 
	tngx_hâp_log_s¸ùt_t
;

65 
ngx_›í_fûe_t
 *
fûe
;

66 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
;

67 
time_t
 
disk_fuŒ_time
;

68 
time_t
 
îr‹_log_time
;

69 
ngx_hâp_log_fmt_t
 *
f‹m©
;

70 } 
	tngx_hâp_log_t
;

74 
ngx_¨øy_t
 *
logs
;

76 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

77 
time_t
 
›í_fûe_ˇche_vÆid
;

78 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

80 
ngx_uöt_t
 
off
;

81 } 
	tngx_hâp_log_loc_c⁄f_t
;

85 
ngx_°r_t
 
«me
;

86 
size_t
 
Àn
;

87 
ngx_hâp_log_›_run_±
 
run
;

88 } 
	tngx_hâp_log_v¨_t
;

91 
	`ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
,

92 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

93 
ssize_t
 
	`ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
, 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
);

96 #i‡(
NGX_ZLIB
)

97 
ssize_t
 
	`ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
,

98 
ngx_öt_t
 
Àvñ
, 
ngx_log_t
 *
log
);

100 *
	`ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

101 
	`ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
);

104 
	`ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
);

105 
	`ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
);

107 
u_ch¨
 *
	`ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

108 
ngx_hâp_log_›_t
 *
›
);

109 
u_ch¨
 *
	`ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

110 
ngx_hâp_log_›_t
 *
›
);

111 
u_ch¨
 *
	`ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

112 
ngx_hâp_log_›_t
 *
›
);

113 
u_ch¨
 *
	`ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

114 
ngx_hâp_log_›_t
 *
›
);

115 
u_ch¨
 *
	`ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

116 
ngx_hâp_log_›_t
 *
›
);

117 
u_ch¨
 *
	`ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

118 
ngx_hâp_log_›_t
 *
›
);

119 
u_ch¨
 *
	`ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

120 
ngx_hâp_log_›_t
 *
›
);

121 
u_ch¨
 *
	`ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

122 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
);

123 
u_ch¨
 *
	`ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

124 
ngx_hâp_log_›_t
 *
›
);

126 
ngx_öt_t
 
	`ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
,

127 
ngx_hâp_log_›_t
 *
›
, 
ngx_°r_t
 *
vÆue
);

128 
size_t
 
	`ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
,

129 
uöçå_t
 
d©a
);

130 
u_ch¨
 *
	`ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, u_ch¨ *
buf
,

131 
ngx_hâp_log_›_t
 *
›
);

132 
uöçå_t
 
	`ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
);

135 *
	`ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

136 *
	`ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

137 *
	`ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

138 *
chûd
);

139 *
	`ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

140 *
c⁄f
);

141 *
	`ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

142 *
c⁄f
);

143 *
	`ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
,

144 
ngx_¨øy_t
 *
Êushes
,Çgx_¨øy_à*
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
);

145 *
	`ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

146 *
c⁄f
);

147 
ngx_öt_t
 
	`ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
);

150 
ngx_comm™d_t
 
ngx_hâp_log_comm™ds
[] = {

152 { 
	`ngx_°rög
("log_format"),

153 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

154 
ngx_hâp_log_£t_f‹m©
,

155 
NGX_HTTP_MAIN_CONF_OFFSET
,

157 
NULL
 },

159 { 
	`ngx_°rög
("access_log"),

160 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


161 |
NGX_HTTP_LMT_CONF
|
NGX_CONF_1MORE
,

162 
ngx_hâp_log_£t_log
,

163 
NGX_HTTP_LOC_CONF_OFFSET
,

165 
NULL
 },

167 { 
	`ngx_°rög
("open_log_file_cache"),

168 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

169 
ngx_hâp_log_›í_fûe_ˇche
,

170 
NGX_HTTP_LOC_CONF_OFFSET
,

172 
NULL
 },

174 
ngx_nuŒ_comm™d


175 
	}
};

178 
ngx_hâp_moduÀ_t
 
	gngx_hâp_log_moduÀ_˘x
 = {

179 
NULL
,

180 
ngx_hâp_log_öô
,

182 
ngx_hâp_log_¸óã_maö_c⁄f
,

183 
NULL
,

185 
NULL
,

186 
NULL
,

188 
ngx_hâp_log_¸óã_loc_c⁄f
,

189 
ngx_hâp_log_mîge_loc_c⁄f


193 
ngx_moduÀ_t
 
	gngx_hâp_log_moduÀ
 = {

194 
NGX_MODULE_V1
,

195 &
ngx_hâp_log_moduÀ_˘x
,

196 
ngx_hâp_log_comm™ds
,

197 
NGX_HTTP_MODULE
,

198 
NULL
,

199 
NULL
,

200 
NULL
,

201 
NULL
,

202 
NULL
,

203 
NULL
,

204 
NULL
,

205 
NGX_MODULE_V1_PADDING


209 
ngx_°r_t
 
	gngx_hâp_ac˚ss_log
 = 
ngx_°rög
(
NGX_HTTP_LOG_PATH
);

212 
ngx_°r_t
 
	gngx_hâp_comböed_fmt
 =

213 
ngx_°rög
("$remote_addr - $remote_user [$time_local] "

218 
ngx_hâp_log_v¨_t
 
	gngx_hâp_log_v¨s
[] = {

219 { 
ngx_°rög
("pùe"), 1, 
ngx_hâp_log_pùe
 },

220 { 
ngx_°rög
("time_local"), ("28/Sep/1970:12:00:00 +0600") - 1,

221 
ngx_hâp_log_time
 },

222 { 
ngx_°rög
("time_iso8601"), ("1970-09-28T12:00:00+06:00") - 1,

223 
ngx_hâp_log_iso8601
 },

224 { 
ngx_°rög
("m£c"), 
NGX_TIME_T_LEN
 + 4, 
ngx_hâp_log_m£c
 },

225 { 
ngx_°rög
("ªque°_time"), 
NGX_TIME_T_LEN
 + 4,

226 
ngx_hâp_log_ªque°_time
 },

227 { 
ngx_°rög
("°©us"), 
NGX_INT_T_LEN
, 
ngx_hâp_log_°©us
 },

228 { 
ngx_°rög
("byãs_£¡"), 
NGX_OFF_T_LEN
, 
ngx_hâp_log_byãs_£¡
 },

229 { 
ngx_°rög
("body_byãs_£¡"), 
NGX_OFF_T_LEN
,

230 
ngx_hâp_log_body_byãs_£¡
 },

231 { 
ngx_°rög
("ªque°_Àngth"), 
NGX_SIZE_T_LEN
,

232 
ngx_hâp_log_ªque°_Àngth
 },

234 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

238 
ngx_öt_t


239 
	$ngx_hâp_log_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

241 
u_ch¨
 *
löe
, *
p
;

242 
size_t
 
Àn
;

243 
ngx_uöt_t
 
i
, 
l
;

244 
ngx_hâp_log_t
 *
log
;

245 
ngx_hâp_log_›_t
 *
›
;

246 
ngx_hâp_log_buf_t
 *
buf„r
;

247 
ngx_hâp_log_loc_c⁄f_t
 *
lcf
;

249 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

252 
lcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

254 i‡(
lcf
->
off
) {

255  
NGX_OK
;

258 
log
 = 
lcf
->
logs
->
ñts
;

259 
l
 = 0;Ü < 
lcf
->
logs
->
√…s
;Ü++) {

261 i‡(
	`ngx_time
(Ë=
log
[
l
].
disk_fuŒ_time
) {

272 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
log
[
l
].
f‹m©
->
Êushes
);

274 
Àn
 = 0;

275 
›
 = 
log
[
l
].
f‹m©
->
›s
->
ñts
;

276 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

277 i‡(
›
[
i
].
Àn
 == 0) {

278 
Àn
 +
›
[
i
].
	`gëÀn
(
r
, op[i].
d©a
);

281 
Àn
 +
›
[
i
].len;

285 
Àn
 +
NGX_LINEFEED_SIZE
;

287 
buf„r
 = 
log
[
l
].
fûe
 ?Üog[l].fûe->
d©a
 : 
NULL
;

289 i‡(
buf„r
) {

291 i‡(
Àn
 > (
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

293 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
buf„r
->
°¨t
,

294 
buf„r
->
pos
 - buf„r->
°¨t
);

296 
buf„r
->
pos
 = buf„r->
°¨t
;

299 i‡(
Àn
 <(
size_t
Ë(
buf„r
->
œ°
 - buf„r->
pos
)) {

301 
p
 = 
buf„r
->
pos
;

303 i‡(
buf„r
->
evít
 && 
p
 =buf„r->
°¨t
) {

304 
	`ngx_add_timî
(
buf„r
->
evít
, buf„r->
Êush
);

307 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

308 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

311 
	`ngx_löe„ed
(
p
);

313 
buf„r
->
pos
 = 
p
;

318 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

319 
	`ngx_dñ_timî
(
buf„r
->
evít
);

323 
löe
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

324 i‡(
löe
 =
NULL
) {

325  
NGX_ERROR
;

328 
p
 = 
löe
;

330 
i
 = 0; i < 
log
[
l
].
f‹m©
->
›s
->
√…s
; i++) {

331 
p
 = 
›
[
i
].
	`run
(
r
,Ö, &op[i]);

334 
	`ngx_löe„ed
(
p
);

336 
	`ngx_hâp_log_wrôe
(
r
, &
log
[
l
], 
löe
, 
p
 -Üine);

339  
NGX_OK
;

340 
	}
}

344 
	$ngx_hâp_log_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_t
 *
log
, 
u_ch¨
 *
buf
,

345 
size_t
 
Àn
)

347 
u_ch¨
 *
«me
;

348 
time_t
 
now
;

349 
ssize_t
 
n
;

350 
ngx_îr_t
 
îr
;

351 #i‡(
NGX_ZLIB
)

352 
ngx_hâp_log_buf_t
 *
buf„r
;

355 i‡(
log
->
s¸ùt
 =
NULL
) {

356 
«me
 = 
log
->
fûe
->«me.
d©a
;

358 #i‡(
NGX_ZLIB
)

359 
buf„r
 = 
log
->
fûe
->
d©a
;

361 i‡(
buf„r
 && buf„r->
gzù
) {

362 
n
 = 
	`ngx_hâp_log_gzù
(
log
->
fûe
->
fd
, 
buf
, 
Àn
, 
buf„r
->
gzù
,

363 
r
->
c⁄√˘i⁄
->
log
);

365 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

368 
n
 = 
	`ngx_wrôe_fd
(
log
->
fûe
->
fd
, 
buf
, 
Àn
);

372 
«me
 = 
NULL
;

373 
n
 = 
	`ngx_hâp_log_s¸ùt_wrôe
(
r
, 
log
->
s¸ùt
, &
«me
, 
buf
, 
Àn
);

376 i‡(
n
 =(
ssize_t
Ë
Àn
) {

380 
now
 = 
	`ngx_time
();

382 i‡(
n
 == -1) {

383 
îr
 = 
ngx_î∫o
;

385 i‡(
îr
 =
NGX_ENOSPC
) {

386 
log
->
disk_fuŒ_time
 = 
now
;

389 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

390 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

391 
ngx_wrôe_fd_n
 "Åÿ\"%s\" faûed", 
«me
);

393 
log
->
îr‹_log_time
 = 
now
;

399 i‡(
now
 - 
log
->
îr‹_log_time
 > 59) {

400 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

402 
«me
, 
n
, 
Àn
);

404 
log
->
îr‹_log_time
 = 
now
;

406 
	}
}

409 
ssize_t


410 
	$ngx_hâp_log_s¸ùt_wrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_log_s¸ùt_t
 *
s¸ùt
,

411 
u_ch¨
 **
«me
, u_ch¨ *
buf
, 
size_t
 
Àn
)

413 
size_t
 
roŸ
;

414 
ssize_t
 
n
;

415 
ngx_°r_t
 
log
, 
∑th
;

416 
ngx_›í_fûe_öfo_t
 
of
;

417 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
;

418 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

420 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

422 i‡(!
r
->
roŸ_ã°ed
) {

426 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

428  
Àn
;

431 
∑th
.
d©a
[
roŸ
] = '\0';

433 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

435 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

436 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

437 
of
.
ã°_dú
 = 1;

438 
of
.
ã°_⁄ly
 = 1;

439 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

440 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

442 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

444  
Àn
;

447 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

448 !
NGX_OK
)

450 i‡(
of
.
îr
 == 0) {

452  
Àn
;

455 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

456 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

459  
Àn
;

462 i‡(!
of
.
is_dú
) {

463 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ENOTDIR
,

464 "ã°ög \"%s\"Éxi°í˚ faûed", 
∑th
.
d©a
);

467  
Àn
;

471 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
log
, 
s¸ùt
->
Àngths
->
ñts
, 1,

472 
s¸ùt
->
vÆues
->
ñts
)

473 =
NULL
)

476  
Àn
;

479 
log
.
d©a
[log.
Àn
 - 1] = '\0';

480 *
«me
 = 
log
.
d©a
;

482 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

483 "hâ∞log \"%s\"", 
log
.
d©a
);

485 
Œcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_log_moduÀ
);

487 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

489 
of
.
log
 = 1;

490 
of
.
vÆid
 = 
Œcf
->
›í_fûe_ˇche_vÆid
;

491 
of
.
mö_u£s
 = 
Œcf
->
›í_fûe_ˇche_mö_u£s
;

492 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

494 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
log
, &
of
Ë!
NGX_OK
) {

496  
Àn
;

499 i‡(
	`ngx_›í_ˇched_fûe
(
Œcf
->
›í_fûe_ˇche
, &
log
, &
of
, 
r
->
poﬁ
)

500 !
NGX_OK
)

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

503 "%†\"%s\" faûed", 
of
.
Áûed
, 
log
.
d©a
);

505  
Àn
;

508 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

509 "hâ∞log #%d", 
of
.
fd
);

511 
n
 = 
	`ngx_wrôe_fd
(
of
.
fd
, 
buf
, 
Àn
);

513  
n
;

514 
	}
}

517 #i‡(
NGX_ZLIB
)

519 
ssize_t


520 
	$ngx_hâp_log_gzù
(
ngx_fd_t
 
fd
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
, 
ngx_öt_t
 
Àvñ
,

521 
ngx_log_t
 *
log
)

523 
rc
, 
wbôs
, 
memÀvñ
;

524 
u_ch¨
 *
out
;

525 
size_t
 
size
;

526 
ssize_t
 
n
;

527 
z_°ªam
 
z°ªam
;

528 
ngx_îr_t
 
îr
;

529 
ngx_poﬁ_t
 *
poﬁ
;

531 
wbôs
 = 
MAX_WBITS
;

532 
memÀvñ
 = 
MAX_MEM_LEVEL
 - 1;

534 (
ssize_t
Ë
Àn
 < ((1 << (
wbôs
 - 1)) - 262)) {

535 
wbôs
--;

536 
memÀvñ
--;

544 
size
 = 
Àn
 + ((len + 7) >> 3) + ((len + 63) >> 6) + 5 + 18;

546 
	`ngx_memzîo
(&
z°ªam
, (
z_°ªam
));

548 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(256, 
log
);

549 i‡(
poﬁ
 =
NULL
) {

551  
Àn
;

554 
poﬁ
->
log
 =Üog;

556 
z°ªam
.
zÆloc
 = 
ngx_hâp_log_gzù_Æloc
;

557 
z°ªam
.
z‰ì
 = 
ngx_hâp_log_gzù_‰ì
;

558 
z°ªam
.
›aque
 = 
poﬁ
;

560 
out
 = 
	`ngx_≤Æloc
(
poﬁ
, 
size
);

561 i‡(
out
 =
NULL
) {

562 
d⁄e
;

565 
z°ªam
.
√xt_ö
 = 
buf
;

566 
z°ªam
.
avaû_ö
 = 
Àn
;

567 
z°ªam
.
√xt_out
 = 
out
;

568 
z°ªam
.
avaû_out
 = 
size
;

570 
rc
 = 
	`deÊ©eInô2
(&
z°ªam
, (Ë
Àvñ
, 
Z_DEFLATED
, 
wbôs
 + 16, 
memÀvñ
,

571 
Z_DEFAULT_STRATEGY
);

573 i‡(
rc
 !
Z_OK
) {

574 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eInô2(ËÁûed: %d", 
rc
);

575 
d⁄e
;

578 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

580 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

581 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
);

583 
rc
 = 
	`deÊ©e
(&
z°ªam
, 
Z_FINISH
);

585 i‡(
rc
 !
Z_STREAM_END
) {

586 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

587 "deÊ©e(Z_FINISHËÁûed: %d", 
rc
);

588 
d⁄e
;

591 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

593 
z°ªam
.
√xt_ö
, z°ªam.
√xt_out
,

594 
z°ªam
.
avaû_ö
, z°ªam.
avaû_out
,

595 
rc
);

597 
size
 -
z°ªam
.
avaû_out
;

599 
rc
 = 
	`deÊ©eEnd
(&
z°ªam
);

601 i‡(
rc
 !
Z_OK
) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "deÊ©eEnd(ËÁûed: %d", 
rc
);

603 
d⁄e
;

606 
n
 = 
	`ngx_wrôe_fd
(
fd
, 
out
, 
size
);

608 i‡(
n
 !(
ssize_t
Ë
size
) {

609 
îr
 = (
n
 =-1Ë? 
ngx_î∫o
 : 0;

611 
	`ngx_de°roy_poﬁ
(
poﬁ
);

613 
	`ngx_£t_î∫o
(
îr
);

617 
d⁄e
:

619 
	`ngx_de°roy_poﬁ
(
poﬁ
);

622  
Àn
;

623 
	}
}

627 
	$ngx_hâp_log_gzù_Æloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

629 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

631 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0,

632 "gzùáŒoc:Ç:%ud s:%ud", 
ôems
, 
size
);

634  
	`ngx_∑Œoc
(
poﬁ
, 
ôems
 * 
size
);

635 
	}
}

639 
	$ngx_hâp_log_gzù_‰ì
(*
›aque
, *
addªss
)

642 
ngx_poﬁ_t
 *
poﬁ
 = 
›aque
;

644 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
poﬁ
->
log
, 0, "gzù fªe: %p", 
addªss
);

646 
	}
}

652 
	$ngx_hâp_log_Êush
(
ngx_›í_fûe_t
 *
fûe
, 
ngx_log_t
 *
log
)

654 
size_t
 
Àn
;

655 
ssize_t
 
n
;

656 
ngx_hâp_log_buf_t
 *
buf„r
;

658 
buf„r
 = 
fûe
->
d©a
;

660 
Àn
 = 
buf„r
->
pos
 - buf„r->
°¨t
;

662 i‡(
Àn
 == 0) {

666 #i‡(
NGX_ZLIB
)

667 i‡(
buf„r
->
gzù
) {

668 
n
 = 
	`ngx_hâp_log_gzù
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
, buf„r->
gzù
, 
log
);

670 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

673 
n
 = 
	`ngx_wrôe_fd
(
fûe
->
fd
, 
buf„r
->
°¨t
, 
Àn
);

676 i‡(
n
 == -1) {

677 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

678 
ngx_wrôe_fd_n
 "Åo \"%s\" failed",

679 
fûe
->
«me
.
d©a
);

681 } i‡((
size_t
Ë
n
 !
Àn
) {

682 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

683 
ngx_wrôe_fd_n
 "Åo \"%s\" was incomplete: %z of %uz",

684 
fûe
->
«me
.
d©a
, 
n
, 
Àn
);

687 
buf„r
->
pos
 = buf„r->
°¨t
;

689 i‡(
buf„r
->
evít
 && buf„r->evít->
timî_£t
) {

690 
	`ngx_dñ_timî
(
buf„r
->
evít
);

692 
	}
}

696 
	$ngx_hâp_log_Êush_h™dÀr
(
ngx_evít_t
 *
ev
)

698 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
ev
->
log
, 0,

701 
	`ngx_hâp_log_Êush
(
ev
->
d©a
,Év->
log
);

702 
	}
}

705 
u_ch¨
 *

706 
	$ngx_hâp_log_c›y_sh‹t
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

707 
ngx_hâp_log_›_t
 *
›
)

709 
size_t
 
Àn
;

710 
uöçå_t
 
d©a
;

712 
Àn
 = 
›
->len;

713 
d©a
 = 
›
->data;

715 
Àn
--) {

716 *
buf
++ = (
u_ch¨
Ë(
d©a
 & 0xff);

717 
d©a
 >>= 8;

720  
buf
;

721 
	}
}

724 
u_ch¨
 *

725 
	$ngx_hâp_log_c›y_l⁄g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

726 
ngx_hâp_log_›_t
 *
›
)

728  
	`ngx_˝ymem
(
buf
, (
u_ch¨
 *Ë
›
->
d©a
, op->
Àn
);

729 
	}
}

732 
u_ch¨
 *

733 
	$ngx_hâp_log_pùe
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

735 i‡(
r
->
pùñöe
) {

736 *
buf
 = 'p';

738 *
buf
 = '.';

741  
buf
 + 1;

742 
	}
}

745 
u_ch¨
 *

746 
	$ngx_hâp_log_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

748  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_time
.
d©a
,

749 
ngx_ˇched_hâp_log_time
.
Àn
);

750 
	}
}

752 
u_ch¨
 *

753 
	$ngx_hâp_log_iso8601
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

755  
	`ngx_˝ymem
(
buf
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

756 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

757 
	}
}

759 
u_ch¨
 *

760 
	$ngx_hâp_log_m£c
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

762 
ngx_time_t
 *
ç
;

764 
ç
 = 
	`ngx_timeofday
();

766  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
);

767 
	}
}

770 
u_ch¨
 *

771 
	$ngx_hâp_log_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

772 
ngx_hâp_log_›_t
 *
›
)

774 
ngx_time_t
 *
ç
;

775 
ngx_m£c_öt_t
 
ms
;

777 
ç
 = 
	`ngx_timeofday
();

779 
ms
 = (
ngx_m£c_öt_t
)

780 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

781 
ms
 = 
	`ngx_max
(ms, 0);

783  
	`ngx_•rötf
(
buf
, "%T.%03M", 
ms
 / 1000, ms % 1000);

784 
	}
}

787 
u_ch¨
 *

788 
	$ngx_hâp_log_°©us
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

790 
ngx_uöt_t
 
°©us
;

792 i‡(
r
->
îr_°©us
) {

793 
°©us
 = 
r
->
îr_°©us
;

795 } i‡(
r
->
hódîs_out
.
°©us
) {

796 
°©us
 = 
r
->
hódîs_out
.status;

798 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

799 
°©us
 = 9;

802 
°©us
 = 0;

805  
	`ngx_•rötf
(
buf
, "%03ui", 
°©us
);

806 
	}
}

809 
u_ch¨
 *

810 
	$ngx_hâp_log_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

811 
ngx_hâp_log_›_t
 *
›
)

813  
	`ngx_•rötf
(
buf
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
);

814 
	}
}

822 
u_ch¨
 *

823 
	$ngx_hâp_log_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

824 
ngx_hâp_log_›_t
 *
›
)

826 
off_t
 
Àngth
;

828 
Àngth
 = 
r
->
c⁄√˘i⁄
->
£¡
 -Ñ->
hódî_size
;

830 i‡(
Àngth
 > 0) {

831  
	`ngx_•rötf
(
buf
, "%O", 
Àngth
);

834 *
buf
 = '0';

836  
buf
 + 1;

837 
	}
}

840 
u_ch¨
 *

841 
	$ngx_hâp_log_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
,

842 
ngx_hâp_log_›_t
 *
›
)

844  
	`ngx_•rötf
(
buf
, "%O", 
r
->
ªque°_Àngth
);

845 
	}
}

848 
ngx_öt_t


849 
	$ngx_hâp_log_v¨übÀ_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_log_›_t
 *
›
,

850 
ngx_°r_t
 *
vÆue
)

852 
ngx_öt_t
 
ödex
;

854 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

855 i‡(
ödex
 =
NGX_ERROR
) {

856  
NGX_ERROR
;

859 
›
->
Àn
 = 0;

860 
›
->
gëÀn
 = 
ngx_hâp_log_v¨übÀ_gëÀn
;

861 
›
->
run
 = 
ngx_hâp_log_v¨übÀ
;

862 
›
->
d©a
 = 
ödex
;

864  
NGX_OK
;

865 
	}
}

868 
size_t


869 
	$ngx_hâp_log_v¨übÀ_gëÀn
(
ngx_hâp_ªque°_t
 *
r
, 
uöçå_t
 
d©a
)

871 
uöçå_t
 
Àn
;

872 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

874 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
d©a
);

876 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

880 
Àn
 = 
	`ngx_hâp_log_esˇ≥
(
NULL
, 
vÆue
->
d©a
, value->len);

882 
vÆue
->
esˇ≥
 = 
Àn
 ? 1 : 0;

884  
vÆue
->
Àn
 +Üen * 3;

885 
	}
}

888 
u_ch¨
 *

889 
	$ngx_hâp_log_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
, 
ngx_hâp_log_›_t
 *
›
)

891 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

893 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
›
->
d©a
);

895 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

896 *
buf
 = '-';

897  
buf
 + 1;

900 i‡(
vÆue
->
esˇ≥
 == 0) {

901  
	`ngx_˝ymem
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

904  (
u_ch¨
 *Ë
	`ngx_hâp_log_esˇ≥
(
buf
, 
vÆue
->
d©a
, vÆue->
Àn
);

906 
	}
}

909 
uöçå_t


910 
	$ngx_hâp_log_esˇ≥
(
u_ch¨
 *
d°
, u_ch¨ *
§c
, 
size_t
 
size
)

912 
ngx_uöt_t
 
n
;

913 
u_ch¨
 
hex
[] = "0123456789ABCDEF";

915 
uöt32_t
 
esˇ≥
[] = {

934 i‡(
d°
 =
NULL
) {

938 
n
 = 0;

940 
size
) {

941 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

942 
n
++;

944 
§c
++;

945 
size
--;

948  (
uöçå_t
Ë
n
;

951 
size
) {

952 i‡(
esˇ≥
[*
§c
 >> 5] & (1 << (*src & 0x1f))) {

953 *
d°
++ = '\\';

954 *
d°
++ = 'x';

955 *
d°
++ = 
hex
[*
§c
 >> 4];

956 *
d°
++ = 
hex
[*
§c
 & 0xf];

957 
§c
++;

960 *
d°
++ = *
§c
++;

962 
size
--;

965  (
uöçå_t
Ë
d°
;

966 
	}
}

970 
	$ngx_hâp_log_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

972 
ngx_hâp_log_maö_c⁄f_t
 *
c⁄f
;

974 
ngx_hâp_log_fmt_t
 *
fmt
;

976 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_maö_c⁄f_t
));

977 i‡(
c⁄f
 =
NULL
) {

978  
NULL
;

981 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
f‹m©s
, 
cf
->
poﬁ
, 4, (
ngx_hâp_log_fmt_t
))

982 !
NGX_OK
)

984  
NULL
;

987 
fmt
 = 
	`ngx_¨øy_push
(&
c⁄f
->
f‹m©s
);

988 i‡(
fmt
 =
NULL
) {

989  
NULL
;

992 
	`ngx_°r_£t
(&
fmt
->
«me
, "combined");

994 
fmt
->
Êushes
 = 
NULL
;

996 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

997 i‡(
fmt
->
›s
 =
NULL
) {

998  
NULL
;

1001  
c⁄f
;

1002 
	}
}

1006 
	$ngx_hâp_log_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1008 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
;

1010 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_loc_c⁄f_t
));

1011 i‡(
c⁄f
 =
NULL
) {

1012  
NULL
;

1015 
c⁄f
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1017  
c⁄f
;

1018 
	}
}

1022 
	$ngx_hâp_log_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1024 
ngx_hâp_log_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1025 
ngx_hâp_log_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1027 
ngx_hâp_log_t
 *
log
;

1028 
ngx_hâp_log_fmt_t
 *
fmt
;

1029 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1031 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1033 
c⁄f
->
›í_fûe_ˇche
 = 
¥ev
->open_file_cache;

1034 
c⁄f
->
›í_fûe_ˇche_vÆid
 = 
¥ev
->open_file_cache_valid;

1035 
c⁄f
->
›í_fûe_ˇche_mö_u£s
 = 
¥ev
->open_file_cache_min_uses;

1037 i‡(
c⁄f
->
›í_fûe_ˇche
 =
NGX_CONF_UNSET_PTR
) {

1038 
c⁄f
->
›í_fûe_ˇche
 = 
NULL
;

1042 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1043  
NGX_CONF_OK
;

1046 
c⁄f
->
logs
 = 
¥ev
->logs;

1047 
c⁄f
->
off
 = 
¥ev
->off;

1049 i‡(
c⁄f
->
logs
 || c⁄f->
off
) {

1050  
NGX_CONF_OK
;

1053 
c⁄f
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1054 i‡(
c⁄f
->
logs
 =
NULL
) {

1055  
NGX_CONF_ERROR
;

1058 
log
 = 
	`ngx_¨øy_push
(
c⁄f
->
logs
);

1059 i‡(
log
 =
NULL
) {

1060  
NGX_CONF_ERROR
;

1063 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
ngx_hâp_ac˚ss_log
);

1064 i‡(
log
->
fûe
 =
NULL
) {

1065  
NGX_CONF_ERROR
;

1068 
log
->
s¸ùt
 = 
NULL
;

1069 
log
->
disk_fuŒ_time
 = 0;

1070 
log
->
îr‹_log_time
 = 0;

1072 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1073 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1076 
log
->
f‹m©
 = &
fmt
[0];

1077 
lmcf
->
comböed_u£d
 = 1;

1079  
NGX_CONF_OK
;

1080 
	}
}

1084 
	$ngx_hâp_log_£t_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1086 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1088 
ssize_t
 
size
;

1089 
ngx_öt_t
 
gzù
;

1090 
ngx_uöt_t
 
i
, 
n
;

1091 
ngx_m£c_t
 
Êush
;

1092 
ngx_°r_t
 *
vÆue
, 
«me
, 
s
;

1093 
ngx_hâp_log_t
 *
log
;

1094 
ngx_hâp_log_buf_t
 *
buf„r
;

1095 
ngx_hâp_log_fmt_t
 *
fmt
;

1096 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1097 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1099 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1101 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1102 
Œcf
->
off
 = 1;

1103 i‡(
cf
->
¨gs
->
√…s
 == 2) {

1104  
NGX_CONF_OK
;

1107 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1108 "övÆidÖ¨amëî \"%V\"", &
vÆue
[2]);

1109  
NGX_CONF_ERROR
;

1112 i‡(
Œcf
->
logs
 =
NULL
) {

1113 
Œcf
->
logs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_hâp_log_t
));

1114 i‡(
Œcf
->
logs
 =
NULL
) {

1115  
NGX_CONF_ERROR
;

1119 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1121 
log
 = 
	`ngx_¨øy_push
(
Œcf
->
logs
);

1122 i‡(
log
 =
NULL
) {

1123  
NGX_CONF_ERROR
;

1126 
	`ngx_memzîo
(
log
, (
ngx_hâp_log_t
));

1128 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

1130 i‡(
n
 == 0) {

1131 
log
->
fûe
 = 
	`ngx_c⁄f_›í_fûe
(
cf
->
cy˛e
, &
vÆue
[1]);

1132 i‡(
log
->
fûe
 =
NULL
) {

1133  
NGX_CONF_ERROR
;

1137 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

1138  
NGX_CONF_ERROR
;

1141 
log
->
s¸ùt
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_s¸ùt_t
));

1142 i‡(
log
->
s¸ùt
 =
NULL
) {

1143  
NGX_CONF_ERROR
;

1146 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1148 
sc
.
cf
 = cf;

1149 
sc
.
sour˚
 = &
vÆue
[1];

1150 
sc
.
Àngths
 = &
log
->
s¸ùt
->lengths;

1151 
sc
.
vÆues
 = &
log
->
s¸ùt
->values;

1152 
sc
.
v¨übÀs
 = 
n
;

1153 
sc
.
com∂ëe_Àngths
 = 1;

1154 
sc
.
com∂ëe_vÆues
 = 1;

1156 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1157  
NGX_CONF_ERROR
;

1161 i‡(
cf
->
¨gs
->
√…s
 >= 3) {

1162 
«me
 = 
vÆue
[2];

1164 i‡(
	`ngx_°rcmp
(
«me
.
d©a
, "combined") == 0) {

1165 
lmcf
->
comböed_u£d
 = 1;

1169 
	`ngx_°r_£t
(&
«me
, "combined");

1170 
lmcf
->
comböed_u£d
 = 1;

1173 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1174 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1175 i‡(
fmt
[
i
].
«me
.
Àn
 ==Çame.len

1176 && 
	`ngx_°rˇ£cmp
(
fmt
[
i
].
«me
.
d©a
,Çame.data) == 0)

1178 
log
->
f‹m©
 = &
fmt
[
i
];

1183 i‡(
log
->
f‹m©
 =
NULL
) {

1184 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1185 "unknow¿log f‹m© \"%V\"", &
«me
);

1186  
NGX_CONF_ERROR
;

1189 
size
 = 0;

1190 
Êush
 = 0;

1191 
gzù
 = 0;

1193 
i
 = 3; i < 
cf
->
¨gs
->
√…s
; i++) {

1195 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "buffer=", 7) == 0) {

1196 
s
.
Àn
 = 
vÆue
[
i
].len - 7;

1197 
s
.
d©a
 = 
vÆue
[
i
].data + 7;

1199 
size
 = 
	`ngx_∑r£_size
(&
s
);

1201 i‡(
size
 =
NGX_ERROR
 || size == 0) {

1202 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1203 "övÆid buf„∏sizê\"%V\"", &
s
);

1204  
NGX_CONF_ERROR
;

1210 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "flush=", 6) == 0) {

1211 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1212 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1214 
Êush
 = 
	`ngx_∑r£_time
(&
s
, 0);

1216 i‡(
Êush
 =(
ngx_m£c_t
Ë
NGX_ERROR
 || flush == 0) {

1217 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1218 "övÆid flushÅimê\"%V\"", &
s
);

1219  
NGX_CONF_ERROR
;

1225 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "gzip", 4) == 0

1226 && (
vÆue
[
i
].
Àn
 =4 || vÆue[i].
d©a
[4] == '='))

1228 #i‡(
NGX_ZLIB
)

1229 i‡(
size
 == 0) {

1230 
size
 = 64 * 1024;

1233 i‡(
vÆue
[
i
].
Àn
 == 4) {

1234 
gzù
 = 
Z_BEST_SPEED
;

1238 
s
.
Àn
 = 
vÆue
[
i
].len - 5;

1239 
s
.
d©a
 = 
vÆue
[
i
].data + 5;

1241 
gzù
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

1243 i‡(
gzù
 < 1 || gzip > 9) {

1244 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1245 "övÆid com¥essi⁄Üevñ \"%V\"", &
s
);

1246  
NGX_CONF_ERROR
;

1252 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1254  
NGX_CONF_ERROR
;

1258 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1259 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1260  
NGX_CONF_ERROR
;

1263 i‡(
Êush
 && 
size
 == 0) {

1264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1266 &
vÆue
[1]);

1267  
NGX_CONF_ERROR
;

1270 i‡(
size
) {

1272 i‡(
log
->
s¸ùt
) {

1273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1275  
NGX_CONF_ERROR
;

1278 i‡(
log
->
fûe
->
d©a
) {

1279 
buf„r
 = 
log
->
fûe
->
d©a
;

1281 i‡(
buf„r
->
œ°
 - buf„r->
°¨t
 !
size


1282 || 
buf„r
->
Êush
 != flush

1283 || 
buf„r
->
gzù
 != gzip)

1285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1288 &
vÆue
[1]);

1289  
NGX_CONF_ERROR
;

1292  
NGX_CONF_OK
;

1295 
buf„r
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_log_buf_t
));

1296 i‡(
buf„r
 =
NULL
) {

1297  
NGX_CONF_ERROR
;

1300 
buf„r
->
°¨t
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

1301 i‡(
buf„r
->
°¨t
 =
NULL
) {

1302  
NGX_CONF_ERROR
;

1305 
buf„r
->
pos
 = buf„r->
°¨t
;

1306 
buf„r
->
œ°
 = buf„r->
°¨t
 + 
size
;

1308 i‡(
Êush
) {

1309 
buf„r
->
evít
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_t
));

1310 i‡(
buf„r
->
evít
 =
NULL
) {

1311  
NGX_CONF_ERROR
;

1314 
buf„r
->
evít
->
d©a
 = 
log
->
fûe
;

1315 
buf„r
->
evít
->
h™dÀr
 = 
ngx_hâp_log_Êush_h™dÀr
;

1316 
buf„r
->
evít
->
log
 = &
cf
->
cy˛e
->
√w_log
;

1318 
buf„r
->
Êush
 = flush;

1321 
buf„r
->
gzù
 = gzip;

1323 
log
->
fûe
->
Êush
 = 
ngx_hâp_log_Êush
;

1324 
log
->
fûe
->
d©a
 = 
buf„r
;

1327  
NGX_CONF_OK
;

1328 
	}
}

1332 
	$ngx_hâp_log_£t_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1334 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
 = 
c⁄f
;

1336 
ngx_°r_t
 *
vÆue
;

1337 
ngx_uöt_t
 
i
;

1338 
ngx_hâp_log_fmt_t
 *
fmt
;

1340 i‡(
cf
->
cmd_ty≥
 !
NGX_HTTP_MAIN_CONF
) {

1341 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1346 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1348 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1349 
i
 = 0; i < 
lmcf
->
f‹m©s
.
√…s
; i++) {

1350 i‡(
fmt
[
i
].
«me
.
Àn
 =
vÆue
[1].len

1351 && 
	`ngx_°rcmp
(
fmt
[
i
].
«me
.
d©a
, 
vÆue
[1].data) == 0)

1353 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1355 &
vÆue
[1]);

1356  
NGX_CONF_ERROR
;

1360 
fmt
 = 
	`ngx_¨øy_push
(&
lmcf
->
f‹m©s
);

1361 i‡(
fmt
 =
NULL
) {

1362  
NGX_CONF_ERROR
;

1365 
fmt
->
«me
 = 
vÆue
[1];

1367 
fmt
->
Êushes
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_öt_t
));

1368 i‡(
fmt
->
Êushes
 =
NULL
) {

1369  
NGX_CONF_ERROR
;

1372 
fmt
->
›s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 16, (
ngx_hâp_log_›_t
));

1373 i‡(
fmt
->
›s
 =
NULL
) {

1374  
NGX_CONF_ERROR
;

1377  
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
fmt
->
Êushes
, fmt->
›s
, cf->
¨gs
, 2);

1378 
	}
}

1382 
	$ngx_hâp_log_compûe_f‹m©
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
Êushes
,

1383 
ngx_¨øy_t
 *
›s
,Çgx_¨øy_à*
¨gs
, 
ngx_uöt_t
 
s
)

1385 
u_ch¨
 *
d©a
, *
p
, 
ch
;

1386 
size_t
 
i
, 
Àn
;

1387 
ngx_°r_t
 *
vÆue
, 
v¨
;

1388 
ngx_öt_t
 *
Êush
;

1389 
ngx_uöt_t
 
bøckë
;

1390 
ngx_hâp_log_›_t
 *
›
;

1391 
ngx_hâp_log_v¨_t
 *
v
;

1393 
vÆue
 = 
¨gs
->
ñts
;

1395  ; 
s
 < 
¨gs
->
√…s
; s++) {

1397 
i
 = 0;

1399 
i
 < 
vÆue
[
s
].
Àn
) {

1401 
›
 = 
	`ngx_¨øy_push
(
›s
);

1402 i‡(
›
 =
NULL
) {

1403  
NGX_CONF_ERROR
;

1406 
d©a
 = &
vÆue
[
s
].d©a[
i
];

1408 i‡(
vÆue
[
s
].
d©a
[
i
] == '$') {

1410 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1411 
övÆid
;

1414 i‡(
vÆue
[
s
].
d©a
[
i
] == '{') {

1415 
bøckë
 = 1;

1417 i‡(++
i
 =
vÆue
[
s
].
Àn
) {

1418 
övÆid
;

1421 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1424 
bøckë
 = 0;

1425 
v¨
.
d©a
 = &
vÆue
[
s
].d©a[
i
];

1428 
v¨
.
Àn
 = 0; 
i
 < 
vÆue
[
s
].len; i++, var.len++) {

1429 
ch
 = 
vÆue
[
s
].
d©a
[
i
];

1431 i‡(
ch
 ='}' && 
bøckë
) {

1432 
i
++;

1433 
bøckë
 = 0;

1437 i‡((
ch
 >= 'A' && ch <= 'Z')

1438 || (
ch
 >= 'a' && ch <= 'z')

1439 || (
ch
 >= '0' && ch <= '9')

1440 || 
ch
 == '_')

1448 i‡(
bøckë
) {

1449 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1451 "v¨übÀ i†missög", &
v¨
);

1452  
NGX_CONF_ERROR
;

1455 i‡(
v¨
.
Àn
 == 0) {

1456 
övÆid
;

1459 
v
 = 
ngx_hâp_log_v¨s
; v->
«me
.
Àn
; v++) {

1461 i‡(
v
->
«me
.
Àn
 =
v¨
.len

1462 && 
	`ngx_°∫cmp
(
v
->
«me
.
d©a
, 
v¨
.d©a, v¨.
Àn
) == 0)

1464 
›
->
Àn
 = 
v
->len;

1465 
›
->
gëÀn
 = 
NULL
;

1466 
›
->
run
 = 
v
->run;

1467 
›
->
d©a
 = 0;

1469 
found
;

1473 i‡(
	`ngx_hâp_log_v¨übÀ_compûe
(
cf
, 
›
, &
v¨
Ë!
NGX_OK
) {

1474  
NGX_CONF_ERROR
;

1477 i‡(
Êushes
) {

1479 
Êush
 = 
	`ngx_¨øy_push
(
Êushes
);

1480 i‡(
Êush
 =
NULL
) {

1481  
NGX_CONF_ERROR
;

1484 *
Êush
 = 
›
->
d©a
;

1487 
found
:

1492 
i
++;

1494 
i
 < 
vÆue
[
s
].
Àn
 && vÆue[s].
d©a
[i] != '$') {

1495 
i
++;

1498 
Àn
 = &
vÆue
[
s
].
d©a
[
i
] - data;

1500 i‡(
Àn
) {

1502 
›
->
Àn
 =Üen;

1503 
›
->
gëÀn
 = 
NULL
;

1505 i‡(
Àn
 <(
uöçå_t
)) {

1506 
›
->
run
 = 
ngx_hâp_log_c›y_sh‹t
;

1507 
›
->
d©a
 = 0;

1509 
Àn
--) {

1510 
›
->
d©a
 <<= 8;

1511 
›
->
d©a
 |d©a[
Àn
];

1515 
›
->
run
 = 
ngx_hâp_log_c›y_l⁄g
;

1517 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1518 i‡(
p
 =
NULL
) {

1519  
NGX_CONF_ERROR
;

1522 
	`ngx_mem˝y
(
p
, 
d©a
, 
Àn
);

1523 
›
->
d©a
 = (
uöçå_t
Ë
p
;

1529  
NGX_CONF_OK
;

1531 
övÆid
:

1533 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "övÆidÖ¨amëî \"%s\"", 
d©a
);

1535  
NGX_CONF_ERROR
;

1536 
	}
}

1540 
	$ngx_hâp_log_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1542 
ngx_hâp_log_loc_c⁄f_t
 *
Œcf
 = 
c⁄f
;

1544 
time_t
 
öa˘ive
, 
vÆid
;

1545 
ngx_°r_t
 *
vÆue
, 
s
;

1546 
ngx_öt_t
 
max
, 
mö_u£s
;

1547 
ngx_uöt_t
 
i
;

1549 i‡(
Œcf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

1553 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1555 
max
 = 0;

1556 
öa˘ive
 = 10;

1557 
vÆid
 = 60;

1558 
mö_u£s
 = 1;

1560 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1562 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

1564 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

1565 i‡(
max
 =
NGX_ERROR
) {

1566 
Áûed
;

1572 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1574 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1575 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1577 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1578 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1579 
Áûed
;

1585 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "min_uses=", 9) == 0) {

1587 
mö_u£s
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 9, vÆue[i].
Àn
 - 9);

1588 i‡(
mö_u£s
 =
NGX_ERROR
) {

1589 
Áûed
;

1595 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "valid=", 6) == 0) {

1597 
s
.
Àn
 = 
vÆue
[
i
].len - 6;

1598 
s
.
d©a
 = 
vÆue
[
i
].data + 6;

1600 
vÆid
 = 
	`ngx_∑r£_time
(&
s
, 1);

1601 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1602 
Áûed
;

1608 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

1610 
Œcf
->
›í_fûe_ˇche
 = 
NULL
;

1615 
Áûed
:

1617 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1619 &
vÆue
[
i
]);

1620  
NGX_CONF_ERROR
;

1623 i‡(
Œcf
->
›í_fûe_ˇche
 =
NULL
) {

1624  
NGX_CONF_OK
;

1627 i‡(
max
 == 0) {

1628 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1630  
NGX_CONF_ERROR
;

1633 
Œcf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

1635 i‡(
Œcf
->
›í_fûe_ˇche
) {

1637 
Œcf
->
›í_fûe_ˇche_vÆid
 = 
vÆid
;

1638 
Œcf
->
›í_fûe_ˇche_mö_u£s
 = 
mö_u£s
;

1640  
NGX_CONF_OK
;

1643  
NGX_CONF_ERROR
;

1644 
	}
}

1647 
ngx_öt_t


1648 
	$ngx_hâp_log_öô
(
ngx_c⁄f_t
 *
cf
)

1650 
ngx_°r_t
 *
vÆue
;

1651 
ngx_¨øy_t
 
a
;

1652 
ngx_hâp_h™dÀr_±
 *
h
;

1653 
ngx_hâp_log_fmt_t
 *
fmt
;

1654 
ngx_hâp_log_maö_c⁄f_t
 *
lmcf
;

1655 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1657 
lmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_log_moduÀ
);

1659 i‡(
lmcf
->
comböed_u£d
) {

1660 i‡(
	`ngx_¨øy_öô
(&
a
, 
cf
->
poﬁ
, 1, (
ngx_°r_t
)Ë!
NGX_OK
) {

1661  
NGX_ERROR
;

1664 
vÆue
 = 
	`ngx_¨øy_push
(&
a
);

1665 i‡(
vÆue
 =
NULL
) {

1666  
NGX_ERROR
;

1669 *
vÆue
 = 
ngx_hâp_comböed_fmt
;

1670 
fmt
 = 
lmcf
->
f‹m©s
.
ñts
;

1672 i‡(
	`ngx_hâp_log_compûe_f‹m©
(
cf
, 
NULL
, 
fmt
->
›s
, &
a
, 0)

1673 !
NGX_CONF_OK
)

1675  
NGX_ERROR
;

1679 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1681 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
);

1682 i‡(
h
 =
NULL
) {

1683  
NGX_ERROR
;

1686 *
h
 = 
ngx_hâp_log_h™dÀr
;

1688  
NGX_OK
;

1689 
	}
}

	@src/http/modules/ngx_http_map_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mhash_max_size
;

15 
ngx_uöt_t
 
	mhash_buckë_size
;

16 } 
	tngx_hâp_m≠_c⁄f_t
;

20 
ngx_hash_keys_¨øys_t
 
	mkeys
;

22 
ngx_¨øy_t
 *
	mvÆues_hash
;

23 
ngx_¨øy_t
 
	mv¨_vÆues
;

24 #i‡(
NGX_PCRE
)

25 
ngx_¨øy_t
 
	mªgexes
;

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

29 
ngx_c⁄f_t
 *
	mcf
;

30 
ngx_uöt_t
 
	mho°«mes
;

31 } 
	tngx_hâp_m≠_c⁄f_˘x_t
;

35 
ngx_hâp_m≠_t
 
	mm≠
;

36 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
	mdeÁu…_vÆue
;

38 
ngx_uöt_t
 
	mho°«mes
;

39 } 
	tngx_hâp_m≠_˘x_t
;

42 
ngx_libc_cde˛
 
ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

43 c⁄° *
two
);

44 *
ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

45 *
ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

46 *
ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
);

49 
ngx_comm™d_t
 
	gngx_hâp_m≠_comm™ds
[] = {

51 { 
ngx_°rög
("map"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

53 
ngx_hâp_m≠_block
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

56 
NULL
 },

58 { 
ngx_°rög
("map_hash_max_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_num_¶Ÿ
,

61 
NGX_HTTP_MAIN_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_max_size
),

63 
NULL
 },

65 { 
ngx_°rög
("map_hash_bucket_size"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_MAIN_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_m≠_c⁄f_t
, 
hash_buckë_size
),

70 
NULL
 },

72 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_m≠_moduÀ_˘x
 = {

77 
NULL
,

78 
NULL
,

80 
ngx_hâp_m≠_¸óã_c⁄f
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL


91 
ngx_moduÀ_t
 
	gngx_hâp_m≠_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_m≠_moduÀ_˘x
,

94 
ngx_hâp_m≠_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_m≠_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

109 
uöçå_t
 
d©a
)

111 
ngx_hâp_m≠_˘x_t
 *
m≠
 = (ngx_hâp_m≠_˘x_à*Ë
d©a
;

113 
ngx_°r_t
 
vÆ
;

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

119 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
m≠
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

120  
NGX_ERROR
;

123 i‡(
m≠
->
ho°«mes
 && 
vÆ
.
Àn
 > 0 && vÆ.
d©a
[val.len - 1] == '.') {

124 
vÆ
.
Àn
--;

127 
vÆue
 = 
	`ngx_hâp_m≠_föd
(
r
, &
m≠
->m≠, &
vÆ
);

129 i‡(
vÆue
 =
NULL
) {

130 
vÆue
 = 
m≠
->
deÁu…_vÆue
;

133 i‡(!
vÆue
->
vÆid
) {

134 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, (
ngx_uöt_t
ËvÆue->
d©a
);

136 i‡(
vÆue
 =
NULL
 || vÆue->
nŸ_found
) {

137 
vÆue
 = &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

141 *
v
 = *
vÆue
;

143 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

144 "hâ∞m≠: \"%v\" \"%v\"", &
vÆ
, 
v
);

146  
NGX_OK
;

147 
	}
}

151 
	$ngx_hâp_m≠_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_hâp_m≠_c⁄f_t
 *
mcf
;

155 
mcf
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_c⁄f_t
));

156 i‡(
mcf
 =
NULL
) {

157  
NULL
;

160 
mcf
->
hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

161 
mcf
->
hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

163  
mcf
;

164 
	}
}

168 
	$ngx_hâp_m≠_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

170 
ngx_hâp_m≠_c⁄f_t
 *
mcf
 = 
c⁄f
;

172 *
rv
;

173 
ngx_°r_t
 *
vÆue
, 
«me
;

174 
ngx_c⁄f_t
 
ßve
;

175 
ngx_poﬁ_t
 *
poﬁ
;

176 
ngx_hash_öô_t
 
hash
;

177 
ngx_hâp_m≠_˘x_t
 *
m≠
;

178 
ngx_hâp_v¨übÀ_t
 *
v¨
;

179 
ngx_hâp_m≠_c⁄f_˘x_t
 
˘x
;

180 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

182 i‡(
mcf
->
hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

183 
mcf
->
hash_max_size
 = 2048;

186 i‡(
mcf
->
hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

187 
mcf
->
hash_buckë_size
 = 
ngx_ˇchñöe_size
;

190 
mcf
->
hash_buckë_size
 = 
	`ngx_Æign
(mcf->hash_bucket_size,

191 
ngx_ˇchñöe_size
);

194 
m≠
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_m≠_˘x_t
));

195 i‡(
m≠
 =
NULL
) {

196  
NGX_CONF_ERROR
;

199 
vÆue
 = 
cf
->
¨gs
->
ñts
;

201 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

203 
ccv
.
cf
 = cf;

204 
ccv
.
vÆue
 = &value[1];

205 
ccv
.
com∂ex_vÆue
 = &
m≠
->
vÆue
;

207 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

208  
NGX_CONF_ERROR
;

211 
«me
 = 
vÆue
[2];

213 i‡(
«me
.
d©a
[0] != '$') {

214 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

215 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

216  
NGX_CONF_ERROR
;

219 
«me
.
Àn
--;

220 
«me
.
d©a
++;

222 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

223 i‡(
v¨
 =
NULL
) {

224  
NGX_CONF_ERROR
;

227 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_m≠_v¨übÀ
;

228 
v¨
->
d©a
 = (
uöçå_t
Ë
m≠
;

230 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

231 i‡(
poﬁ
 =
NULL
) {

232  
NGX_CONF_ERROR
;

235 
˘x
.
keys
.
poﬁ
 = 
cf
->pool;

236 
˘x
.
keys
.
ãmp_poﬁ
 = 
poﬁ
;

238 i‡(
	`ngx_hash_keys_¨øy_öô
(&
˘x
.
keys
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

239 
	`ngx_de°roy_poﬁ
(
poﬁ
);

240  
NGX_CONF_ERROR
;

243 
˘x
.
vÆues_hash
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_¨øy_t
Ë* ctx.
keys
.
hsize
);

244 i‡(
˘x
.
vÆues_hash
 =
NULL
) {

245 
	`ngx_de°roy_poﬁ
(
poﬁ
);

246  
NGX_CONF_ERROR
;

249 i‡(
	`ngx_¨øy_öô
(&
˘x
.
v¨_vÆues
, 
cf
->
poﬁ
, 2,

250 (
ngx_hâp_v¨übÀ_vÆue_t
))

251 !
NGX_OK
)

253 
	`ngx_de°roy_poﬁ
(
poﬁ
);

254  
NGX_CONF_ERROR
;

257 #i‡(
NGX_PCRE
)

258 i‡(
	`ngx_¨øy_öô
(&
˘x
.
ªgexes
, 
cf
->
poﬁ
, 2, (
ngx_hâp_m≠_ªgex_t
))

259 !
NGX_OK
)

261 
	`ngx_de°roy_poﬁ
(
poﬁ
);

262  
NGX_CONF_ERROR
;

266 
˘x
.
deÁu…_vÆue
 = 
NULL
;

267 
˘x
.
cf
 = &
ßve
;

268 
˘x
.
ho°«mes
 = 0;

270 
ßve
 = *
cf
;

271 
cf
->
poﬁ
 =Öool;

272 
cf
->
˘x
 = &ctx;

273 
cf
->
h™dÀr
 = 
ngx_hâp_m≠
;

274 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
ßve
;

280 i‡(
rv
 !
NGX_CONF_OK
) {

281 
	`ngx_de°roy_poﬁ
(
poﬁ
);

282  
rv
;

285 
m≠
->
deÁu…_vÆue
 = 
˘x
.default_value ? ctx.default_value:

286 &
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

288 
m≠
->
ho°«mes
 = 
˘x
.hostnames;

290 
hash
.
key
 = 
ngx_hash_key_lc
;

291 
hash
.
max_size
 = 
mcf
->
hash_max_size
;

292 
hash
.
buckë_size
 = 
mcf
->
hash_buckë_size
;

293 
hash
.
«me
 = "map_hash";

294 
hash
.
poﬁ
 = 
cf
->pool;

296 i‡(
˘x
.
keys
.keys.
√…s
) {

297 
hash
.hash = &
m≠
->map.hash.hash;

298 
hash
.
ãmp_poﬁ
 = 
NULL
;

300 i‡(
	`ngx_hash_öô
(&
hash
, 
˘x
.
keys
.keys.
ñts
, ctx.keys.keys.
√…s
)

301 !
NGX_OK
)

303 
	`ngx_de°roy_poﬁ
(
poﬁ
);

304  
NGX_CONF_ERROR
;

308 i‡(
˘x
.
keys
.
dns_wc_hód
.
√…s
) {

310 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_hód
.
ñts
,

311 (
size_t
Ë
˘x
.
keys
.
dns_wc_hód
.
√…s
,

312 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

314 
hash
.hash = 
NULL
;

315 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

317 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_hód
.
ñts
,

318 
˘x
.
keys
.
dns_wc_hód
.
√…s
)

319 !
NGX_OK
)

321 
	`ngx_de°roy_poﬁ
(
poﬁ
);

322  
NGX_CONF_ERROR
;

325 
m≠
->m≠.
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

328 i‡(
˘x
.
keys
.
dns_wc_èû
.
√…s
) {

330 
	`ngx_qs‹t
(
˘x
.
keys
.
dns_wc_èû
.
ñts
,

331 (
size_t
Ë
˘x
.
keys
.
dns_wc_èû
.
√…s
,

332 (
ngx_hash_key_t
), 
ngx_hâp_m≠_cmp_dns_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
poﬁ
;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
˘x
.
keys
.
dns_wc_èû
.
ñts
,

338 
˘x
.
keys
.
dns_wc_èû
.
√…s
)

339 !
NGX_OK
)

341 
	`ngx_de°roy_poﬁ
(
poﬁ
);

342  
NGX_CONF_ERROR
;

345 
m≠
->m≠.
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

348 #i‡(
NGX_PCRE
)

350 i‡(
˘x
.
ªgexes
.
√…s
) {

351 
m≠
->m≠.
ªgex
 = 
˘x
.
ªgexes
.
ñts
;

352 
m≠
->m≠.
ƒegex
 = 
˘x
.
ªgexes
.
√…s
;

357 
	`ngx_de°roy_poﬁ
(
poﬁ
);

359  
rv
;

360 
	}
}

363 
ngx_libc_cde˛


364 
	$ngx_hâp_m≠_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

366 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

368 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

369 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

371  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

372 
	}
}

376 
	$ngx_hâp_m≠
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

378 
ngx_öt_t
 
rc
, 
ödex
;

379 
ngx_°r_t
 *
vÆue
, 
«me
;

380 
ngx_uöt_t
 
i
, 
key
;

381 
ngx_hâp_m≠_c⁄f_˘x_t
 *
˘x
;

382 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨
, **
vp
;

384 
˘x
 = 
cf
->ctx;

386 
vÆue
 = 
cf
->
¨gs
->
ñts
;

388 i‡(
cf
->
¨gs
->
√…s
 == 1

389 && 
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "hostnames") == 0)

391 
˘x
->
ho°«mes
 = 1;

392  
NGX_CONF_OK
;

394 } i‡(
cf
->
¨gs
->
√…s
 != 2) {

395 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

397  
NGX_CONF_ERROR
;

400 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

401  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

404 i‡(
vÆue
[1].
d©a
[0] == '$') {

405 
«me
 = 
vÆue
[1];

406 
«me
.
Àn
--;

407 
«me
.
d©a
++;

409 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
˘x
->
cf
, &
«me
);

410 i‡(
ödex
 =
NGX_ERROR
) {

411  
NGX_CONF_ERROR
;

414 
v¨
 = 
˘x
->
v¨_vÆues
.
ñts
;

416 
i
 = 0; i < 
˘x
->
v¨_vÆues
.
√…s
; i++) {

417 i‡(
ödex
 =(
ngx_öt_t
Ë
v¨
[
i
].
d©a
) {

418 
v¨
 = &v¨[
i
];

419 
found
;

423 
v¨
 = 
	`ngx_¨øy_push
(&
˘x
->
v¨_vÆues
);

424 i‡(
v¨
 =
NULL
) {

425  
NGX_CONF_ERROR
;

428 
v¨
->
vÆid
 = 0;

429 
v¨
->
no_ˇchóbÀ
 = 0;

430 
v¨
->
nŸ_found
 = 0;

431 
v¨
->
Àn
 = 0;

432 
v¨
->
d©a
 = (
u_ch¨
 *Ë
ödex
;

434 
found
;

437 
key
 = 0;

439 
i
 = 0; i < 
vÆue
[1].
Àn
; i++) {

440 
key
 = 
	`ngx_hash
(key, 
vÆue
[1].
d©a
[
i
]);

443 
key
 %
˘x
->
keys
.
hsize
;

445 
vp
 = 
˘x
->
vÆues_hash
[
key
].
ñts
;

447 i‡(
vp
) {

448 
i
 = 0; i < 
˘x
->
vÆues_hash
[
key
].
√…s
; i++) {

449 i‡(
vÆue
[1].
Àn
 !(
size_t
Ë
vp
[
i
]->len) {

453 i‡(
	`ngx_°∫cmp
(
vÆue
[1].
d©a
, 
vp
[
i
]->d©a, vÆue[1].
Àn
) == 0) {

454 
v¨
 = 
vp
[
i
];

455 
found
;

460 i‡(
	`ngx_¨øy_öô
(&
˘x
->
vÆues_hash
[
key
], 
cf
->
poﬁ
, 4,

461 (
ngx_hâp_v¨übÀ_vÆue_t
 *))

462 !
NGX_OK
)

464  
NGX_CONF_ERROR
;

468 
v¨
 = 
	`ngx_∑Œoc
(
˘x
->
keys
.
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

469 i‡(
v¨
 =
NULL
) {

470  
NGX_CONF_ERROR
;

473 
v¨
->
Àn
 = 
vÆue
[1].len;

474 
v¨
->
d©a
 = 
	`ngx_p°rdup
(
˘x
->
keys
.
poﬁ
, &
vÆue
[1]);

475 i‡(
v¨
->
d©a
 =
NULL
) {

476  
NGX_CONF_ERROR
;

479 
v¨
->
vÆid
 = 1;

480 
v¨
->
no_ˇchóbÀ
 = 0;

481 
v¨
->
nŸ_found
 = 0;

483 
vp
 = 
	`ngx_¨øy_push
(&
˘x
->
vÆues_hash
[
key
]);

484 i‡(
vp
 =
NULL
) {

485  
NGX_CONF_ERROR
;

488 *
vp
 = 
v¨
;

490 
found
:

492 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "default") == 0) {

494 i‡(
˘x
->
deÁu…_vÆue
) {

495 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

497  
NGX_CONF_ERROR
;

500 
˘x
->
deÁu…_vÆue
 = 
v¨
;

502  
NGX_CONF_OK
;

505 #i‡(
NGX_PCRE
)

507 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '~') {

508 
ngx_ªgex_compûe_t
 
rc
;

509 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

510 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

512 
ªgex
 = 
	`ngx_¨øy_push
(&
˘x
->
ªgexes
);

513 i‡(
ªgex
 =
NULL
) {

514  
NGX_CONF_ERROR
;

517 
vÆue
[0].
Àn
--;

518 
vÆue
[0].
d©a
++;

520 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

522 i‡(
vÆue
[0].
d©a
[0] == '*') {

523 
vÆue
[0].
Àn
--;

524 
vÆue
[0].
d©a
++;

525 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

528 
rc
.
∑âîn
 = 
vÆue
[0];

529 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

530 
rc
.
îr
.
d©a
 = 
îr°r
;

532 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
˘x
->
cf
, &
rc
);

533 i‡(
ªgex
->ªgex =
NULL
) {

534  
NGX_CONF_ERROR
;

537 
ªgex
->
vÆue
 = 
v¨
;

539  
NGX_CONF_OK
;

544 i‡(
vÆue
[0].
Àn
 && vÆue[0].
d©a
[0] == '\\') {

545 
vÆue
[0].
Àn
--;

546 
vÆue
[0].
d©a
++;

549 
rc
 = 
	`ngx_hash_add_key
(&
˘x
->
keys
, &
vÆue
[0], 
v¨
,

550 (
˘x
->
ho°«mes
Ë? 
NGX_HASH_WILDCARD_KEY
 : 0);

552 i‡(
rc
 =
NGX_OK
) {

553  
NGX_CONF_OK
;

556 i‡(
rc
 =
NGX_DECLINED
) {

557 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

558 "övÆid ho°«mê‹ wûdˇrd \"%V\"", &
vÆue
[0]);

561 i‡(
rc
 =
NGX_BUSY
) {

562 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

563 "c⁄Êi˘ögÖ¨amëî \"%V\"", &
vÆue
[0]);

566  
NGX_CONF_ERROR
;

567 
	}
}

	@src/http/modules/ngx_http_memcached_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

15 
ngx_öt_t
 
	mödex
;

16 
ngx_uöt_t
 
	mgzù_Êag
;

17 } 
	tngx_hâp_memˇched_loc_c⁄f_t
;

21 
size_t
 
	mª°
;

22 
ngx_hâp_ªque°_t
 *
	mªque°
;

23 
ngx_°r_t
 
	mkey
;

24 } 
	tngx_hâp_memˇched_˘x_t
;

27 
ngx_öt_t
 
ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

28 
ngx_öt_t
 
ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

29 
ngx_öt_t
 
ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

30 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr_öô
(*
d©a
);

31 
ngx_öt_t
 
ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
);

32 
ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

33 
ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

34 
ngx_öt_t
 
rc
);

36 *
ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

37 *
ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

38 *
∑ª¡
, *
chûd
);

40 *
ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
c⁄f
);

44 
ngx_c⁄f_bômask_t
 
	gngx_hâp_memˇched_√xt_up°ªam_masks
[] = {

45 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

46 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

47 { 
ngx_°rög
("övÆid_ª•⁄£"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

48 { 
ngx_°rög
("nŸ_found"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

49 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

50 { 
ngx_nuŒ_°rög
, 0 }

54 
ngx_comm™d_t
 
	gngx_hâp_memˇched_comm™ds
[] = {

56 { 
ngx_°rög
("memcached_pass"),

57 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_hâp_memˇched_∑ss
,

59 
NGX_HTTP_LOC_CONF_OFFSET
,

61 
NULL
 },

63 { 
ngx_°rög
("memcached_bind"),

64 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

67 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

68 
NULL
 },

70 { 
ngx_°rög
("memcached_connect_timeout"),

71 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_m£c_¶Ÿ
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

74 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

75 
NULL
 },

77 { 
ngx_°rög
("memcached_send_timeout"),

78 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_m£c_¶Ÿ
,

80 
NGX_HTTP_LOC_CONF_OFFSET
,

81 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

82 
NULL
 },

84 { 
ngx_°rög
("memcached_buffer_size"),

85 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_size_¶Ÿ
,

87 
NGX_HTTP_LOC_CONF_OFFSET
,

88 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

89 
NULL
 },

91 { 
ngx_°rög
("memcached_read_timeout"),

92 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

93 
ngx_c⁄f_£t_m£c_¶Ÿ
,

94 
NGX_HTTP_LOC_CONF_OFFSET
,

95 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

96 
NULL
 },

98 { 
ngx_°rög
("memcached_next_upstream"),

99 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

100 
ngx_c⁄f_£t_bômask_¶Ÿ
,

101 
NGX_HTTP_LOC_CONF_OFFSET
,

102 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

103 &
ngx_hâp_memˇched_√xt_up°ªam_masks
 },

105 { 
ngx_°rög
("memcached_gzip_flag"),

106 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

107 
ngx_c⁄f_£t_num_¶Ÿ
,

108 
NGX_HTTP_LOC_CONF_OFFSET
,

109 
off£tof
(
ngx_hâp_memˇched_loc_c⁄f_t
, 
gzù_Êag
),

110 
NULL
 },

112 
ngx_nuŒ_comm™d


116 
ngx_hâp_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ_˘x
 = {

117 
NULL
,

118 
NULL
,

120 
NULL
,

121 
NULL
,

123 
NULL
,

124 
NULL
,

126 
ngx_hâp_memˇched_¸óã_loc_c⁄f
,

127 
ngx_hâp_memˇched_mîge_loc_c⁄f


131 
ngx_moduÀ_t
 
	gngx_hâp_memˇched_moduÀ
 = {

132 
NGX_MODULE_V1
,

133 &
ngx_hâp_memˇched_moduÀ_˘x
,

134 
ngx_hâp_memˇched_comm™ds
,

135 
NGX_HTTP_MODULE
,

136 
NULL
,

137 
NULL
,

138 
NULL
,

139 
NULL
,

140 
NULL
,

141 
NULL
,

142 
NULL
,

143 
NGX_MODULE_V1_PADDING


147 
ngx_°r_t
 
	gngx_hâp_memˇched_key
 = 
ngx_°rög
("memcached_key");

150 
	#NGX_HTTP_MEMCACHED_END
 ((
ngx_hâp_memˇched_íd
Ë- 1)

	)

151 
u_ch¨
 
	gngx_hâp_memˇched_íd
[] = 
CRLF
 "END" CRLF;

154 
ngx_öt_t


155 
	$ngx_hâp_memˇched_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

157 
ngx_öt_t
 
rc
;

158 
ngx_hâp_up°ªam_t
 *
u
;

159 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

160 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

162 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

163  
NGX_HTTP_NOT_ALLOWED
;

166 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

168 i‡(
rc
 !
NGX_OK
) {

169  
rc
;

172 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

173  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

176 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

177  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

180 
u
 = 
r
->
up°ªam
;

182 
	`ngx_°r_£t
(&
u
->
schema
, "memcached://");

183 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_memˇched_moduÀ
;

185 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

187 
u
->
c⁄f
 = &
mlcf
->
up°ªam
;

189 
u
->
¸óã_ªque°
 = 
ngx_hâp_memˇched_¸óã_ªque°
;

190 
u
->
ªöô_ªque°
 = 
ngx_hâp_memˇched_ªöô_ªque°
;

191 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_memˇched_¥o˚ss_hódî
;

192 
u
->
ab‹t_ªque°
 = 
ngx_hâp_memˇched_ab‹t_ªque°
;

193 
u
->
föÆize_ªque°
 = 
ngx_hâp_memˇched_föÆize_ªque°
;

195 
˘x
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_memˇched_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

200 
˘x
->
ª°
 = 
NGX_HTTP_MEMCACHED_END
;

201 
˘x
->
ªque°
 = 
r
;

203 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_memˇched_moduÀ
);

205 
u
->
öput_fûãr_öô
 = 
ngx_hâp_memˇched_fûãr_öô
;

206 
u
->
öput_fûãr
 = 
ngx_hâp_memˇched_fûãr
;

207 
u
->
öput_fûãr_˘x
 = 
˘x
;

209 
r
->
maö
->
cou¡
++;

211 
	`ngx_hâp_up°ªam_öô
(
r
);

213  
NGX_DONE
;

214 
	}
}

217 
ngx_öt_t


218 
	$ngx_hâp_memˇched_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

220 
size_t
 
Àn
;

221 
uöçå_t
 
esˇ≥
;

222 
ngx_buf_t
 *
b
;

223 
ngx_chaö_t
 *
˛
;

224 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

225 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

226 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

228 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

230 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
mlcf
->
ödex
);

232 i‡(
vv
 =
NULL
 || vv->
nŸ_found
 || vv->
Àn
 == 0) {

233 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

235  
NGX_ERROR
;

238 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vv
->
d©a
, vv->
Àn
, 
NGX_ESCAPE_MEMCACHED
);

240 
Àn
 = ("gë "Ë- 1 + 
vv
->À¿+ 
esˇ≥
 + (
CRLF
) - 1;

242 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

243 i‡(
b
 =
NULL
) {

244  
NGX_ERROR
;

247 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

248 i‡(
˛
 =
NULL
) {

249  
NGX_ERROR
;

252 
˛
->
buf
 = 
b
;

253 
˛
->
√xt
 = 
NULL
;

255 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

257 *
b
->
œ°
++ = 'g'; *b->last++ = 'e'; *b->last++ = 't'; *b->last++ = ' ';

259 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

261 
˘x
->
key
.
d©a
 = 
b
->
œ°
;

263 i‡(
esˇ≥
 == 0) {

264 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
vv
->
d©a
, vv->
Àn
);

267 
b
->
œ°
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
(b->œ°, 
vv
->
d©a
, vv->
Àn
,

268 
NGX_ESCAPE_MEMCACHED
);

271 
˘x
->
key
.
Àn
 = 
b
->
œ°
 - ctx->key.
d©a
;

273 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

274 "hâ∞memˇchedÑeque°: \"%V\"", &
˘x
->
key
);

276 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

278  
NGX_OK
;

279 
	}
}

282 
ngx_öt_t


283 
	$ngx_hâp_memˇched_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

285  
NGX_OK
;

286 
	}
}

289 
ngx_öt_t


290 
	$ngx_hâp_memˇched_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

292 
u_ch¨
 *
p
, *
°¨t
;

293 
ngx_°r_t
 
löe
;

294 
ngx_uöt_t
 
Êags
;

295 
ngx_èbÀ_ñt_t
 *
h
;

296 
ngx_hâp_up°ªam_t
 *
u
;

297 
ngx_hâp_memˇched_˘x_t
 *
˘x
;

298 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
;

300 
u
 = 
r
->
up°ªam
;

302 
p
 = 
u
->
buf„r
.
pos
;Ö < u->buf„r.
œ°
;Ö++) {

303 i‡(*
p
 =
LF
) {

304 
found
;

308  
NGX_AGAIN
;

310 
found
:

312 *
p
 = '\0';

314 
löe
.
Àn
 = 
p
 - 
u
->
buf„r
.
pos
 - 1;

315 
löe
.
d©a
 = 
u
->
buf„r
.
pos
;

317 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

318 "memˇched: \"%V\"", &
löe
);

320 
p
 = 
u
->
buf„r
.
pos
;

322 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_memˇched_moduÀ
);

323 
mlcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_memˇched_moduÀ
);

325 i‡(
	`ngx_°∫cmp
(
p
, "VALUE ", ("VALUE ") - 1) == 0) {

327 
p
 += ("VALUE ") - 1;

329 i‡(
	`ngx_°∫cmp
(
p
, 
˘x
->
key
.
d©a
, ctx->key.
Àn
) != 0) {

330 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

333 &
löe
, &
˘x
->
key
);

335  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

338 
p
 +
˘x
->
key
.
Àn
;

340 i‡(*
p
++ != ' ') {

341 
no_vÆid
;

346 
°¨t
 = 
p
;

348 *
p
) {

349 i‡(*
p
++ == ' ') {

350 i‡(
mlcf
->
gzù_Êag
) {

351 
Êags
;

353 
Àngth
;

358 
no_vÆid
;

360 
Êags
:

362 
Êags
 = 
	`ngx_©oi
(
°¨t
, 
p
 - start - 1);

364 i‡(
Êags
 =(
ngx_uöt_t
Ë
NGX_ERROR
) {

365 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 &
löe
, &
˘x
->
key
);

369  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

372 i‡(
Êags
 & 
mlcf
->
gzù_Êag
) {

373 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

374 i‡(
h
 =
NULL
) {

375  
NGX_ERROR
;

378 
h
->
hash
 = 1;

379 
h
->
key
.
Àn
 = ("Content-Encoding") - 1;

380 
h
->
key
.
d©a
 = (
u_ch¨
 *) "Content-Encoding";

381 
h
->
vÆue
.
Àn
 = ("gzip") - 1;

382 
h
->
vÆue
.
d©a
 = (
u_ch¨
 *) "gzip";

384 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
h
;

387 
Àngth
:

389 
°¨t
 = 
p
;

391 *
p
 && *p++ !
CR
) { }

393 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
°¨t
, 
p
 - start - 1);

394 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

395 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

398 &
löe
, &
˘x
->
key
);

399  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

402 
u
->
hódîs_ö
.
°©us_n
 = 200;

403 
u
->
°©e
->
°©us
 = 200;

404 
u
->
buf„r
.
pos
 = 
p
 + 1;

406  
NGX_OK
;

409 i‡(
	`ngx_°rcmp
(
p
, "END\x0d") == 0) {

410 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

411 "key: \"%V\" wa†nŸ found by memˇched", &
˘x
->
key
);

413 
u
->
hódîs_ö
.
°©us_n
 = 404;

414 
u
->
°©e
->
°©us
 = 404;

415 
u
->
kì∑live
 = 1;

417  
NGX_OK
;

420 
no_vÆid
:

422 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

423 "memˇched síàövÆidÑe•⁄£: \"%V\"", &
löe
);

425  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

426 
	}
}

429 
ngx_öt_t


430 
	$ngx_hâp_memˇched_fûãr_öô
(*
d©a
)

432 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

434 
ngx_hâp_up°ªam_t
 *
u
;

436 
u
 = 
˘x
->
ªque°
->
up°ªam
;

438 
u
->
Àngth
 +
NGX_HTTP_MEMCACHED_END
;

440  
NGX_OK
;

441 
	}
}

444 
ngx_öt_t


445 
	$ngx_hâp_memˇched_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

447 
ngx_hâp_memˇched_˘x_t
 *
˘x
 = 
d©a
;

449 
u_ch¨
 *
œ°
;

450 
ngx_buf_t
 *
b
;

451 
ngx_chaö_t
 *
˛
, **
Œ
;

452 
ngx_hâp_up°ªam_t
 *
u
;

454 
u
 = 
˘x
->
ªque°
->
up°ªam
;

455 
b
 = &
u
->
buf„r
;

457 i‡(
u
->
Àngth
 =(
ssize_t
Ë
˘x
->
ª°
) {

459 i‡(
	`ngx_°∫cmp
(
b
->
œ°
,

460 
ngx_hâp_memˇched_íd
 + 
NGX_HTTP_MEMCACHED_END
 - 
˘x
->
ª°
,

461 
byãs
)

464 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

467 
u
->
Àngth
 = 0;

468 
˘x
->
ª°
 = 0;

470  
NGX_OK
;

473 
u
->
Àngth
 -
byãs
;

474 
˘x
->
ª°
 -
byãs
;

476 i‡(
u
->
Àngth
 == 0) {

477 
u
->
kì∑live
 = 1;

480  
NGX_OK
;

483 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

484 
Œ
 = &
˛
->
√xt
;

487 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
˘x
->
ªque°
->
poﬁ
, &
u
->
‰ì_bufs
);

488 i‡(
˛
 =
NULL
) {

489  
NGX_ERROR
;

492 
˛
->
buf
->
Êush
 = 1;

493 
˛
->
buf
->
mem‹y
 = 1;

495 *
Œ
 = 
˛
;

497 
œ°
 = 
b
->last;

498 
˛
->
buf
->
pos
 = 
œ°
;

499 
b
->
œ°
 +
byãs
;

500 
˛
->
buf
->
œ°
 = 
b
->last;

501 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

503 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

505 
byãs
, 
b
->
œ°
 - b->
pos
, 
u
->
Àngth
, 
˘x
->
ª°
);

507 i‡(
byãs
 <(
ssize_t
Ë(
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
)) {

508 
u
->
Àngth
 -
byãs
;

509  
NGX_OK
;

512 
œ°
 +
u
->
Àngth
 - 
NGX_HTTP_MEMCACHED_END
;

514 i‡(
	`ngx_°∫cmp
(
œ°
, 
ngx_hâp_memˇched_íd
, 
b
->last -Üast) != 0) {

515 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

518 
b
->
œ°
 =Üast;

519 
˛
->
buf
->
œ°
 =Üast;

520 
u
->
Àngth
 = 0;

521 
˘x
->
ª°
 = 0;

523  
NGX_OK
;

526 
˘x
->
ª°
 -
b
->
œ°
 -Üast;

527 
b
->
œ°
 =Üast;

528 
˛
->
buf
->
œ°
 =Üast;

529 
u
->
Àngth
 = 
˘x
->
ª°
;

531 i‡(
u
->
Àngth
 == 0) {

532 
u
->
kì∑live
 = 1;

535  
NGX_OK
;

536 
	}
}

540 
	$ngx_hâp_memˇched_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

542 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

545 
	}
}

549 
	$ngx_hâp_memˇched_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

551 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

554 
	}
}

558 
	$ngx_hâp_memˇched_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

560 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
;

562 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_memˇched_loc_c⁄f_t
));

563 i‡(
c⁄f
 =
NULL
) {

564  
NULL
;

577 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

578 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

579 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

580 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

582 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

585 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

586 
c⁄f
->
up°ªam
.
buf„rög
 = 0;

587 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 0;

588 
c⁄f
->
up°ªam
.
£nd_low©
 = 0;

589 
c⁄f
->
up°ªam
.
bufs
.
num
 = 0;

590 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 0;

591 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 0;

592 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 0;

593 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 1;

594 
c⁄f
->
up°ªam
.
öãr˚±_404
 = 1;

595 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 0;

596 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 0;

598 
c⁄f
->
ödex
 = 
NGX_CONF_UNSET
;

599 
c⁄f
->
gzù_Êag
 = 
NGX_CONF_UNSET_UINT
;

601  
c⁄f
;

602 
	}
}

606 
	$ngx_hâp_memˇched_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

608 
ngx_hâp_memˇched_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

609 
ngx_hâp_memˇched_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

611 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

612 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

614 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

615 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

617 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

618 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

620 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

621 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

623 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

624 
¥ev
->
up°ªam
.
buf„r_size
,

625 (
size_t
Ë
ngx_∑gesize
);

627 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

628 
¥ev
->
up°ªam
.
√xt_up°ªam
,

629 (
NGX_CONF_BITMASK_SET


630 |
NGX_HTTP_UPSTREAM_FT_ERROR


631 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

633 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

634 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


635 |
NGX_HTTP_UPSTREAM_FT_OFF
;

638 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

639 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

642 i‡(
c⁄f
->
ödex
 =
NGX_CONF_UNSET
) {

643 
c⁄f
->
ödex
 = 
¥ev
->index;

646 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_Êag
, 
¥ev
->gzip_flag, 0);

648  
NGX_CONF_OK
;

649 
	}
}

653 
	$ngx_hâp_memˇched_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

655 
ngx_hâp_memˇched_loc_c⁄f_t
 *
mlcf
 = 
c⁄f
;

657 
ngx_°r_t
 *
vÆue
;

658 
ngx_uæ_t
 
u
;

659 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

661 i‡(
mlcf
->
up°ªam
.upstream) {

665 
vÆue
 = 
cf
->
¨gs
->
ñts
;

667 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

669 
u
.
uæ
 = 
vÆue
[1];

670 
u
.
no_ªsﬁve
 = 1;

672 
mlcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

673 i‡(
mlcf
->
up°ªam
.up°ªam =
NULL
) {

674  
NGX_CONF_ERROR
;

677 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

679 
˛cf
->
h™dÀr
 = 
ngx_hâp_memˇched_h™dÀr
;

681 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

682 
˛cf
->
auto_ªdúe˘
 = 1;

685 
mlcf
->
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_memˇched_key
);

687 i‡(
mlcf
->
ödex
 =
NGX_ERROR
) {

688  
NGX_CONF_ERROR
;

691  
NGX_CONF_OK
;

692 
	}
}

	@src/http/modules/ngx_http_mp4_module.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

9 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_MP4_TRAK_ATOM
 0

	)

13 
	#NGX_HTTP_MP4_TKHD_ATOM
 1

	)

14 
	#NGX_HTTP_MP4_MDIA_ATOM
 2

	)

15 
	#NGX_HTTP_MP4_MDHD_ATOM
 3

	)

16 
	#NGX_HTTP_MP4_HDLR_ATOM
 4

	)

17 
	#NGX_HTTP_MP4_MINF_ATOM
 5

	)

18 
	#NGX_HTTP_MP4_VMHD_ATOM
 6

	)

19 
	#NGX_HTTP_MP4_SMHD_ATOM
 7

	)

20 
	#NGX_HTTP_MP4_DINF_ATOM
 8

	)

21 
	#NGX_HTTP_MP4_STBL_ATOM
 9

	)

22 
	#NGX_HTTP_MP4_STSD_ATOM
 10

	)

23 
	#NGX_HTTP_MP4_STTS_ATOM
 11

	)

24 
	#NGX_HTTP_MP4_STTS_DATA
 12

	)

25 
	#NGX_HTTP_MP4_STSS_ATOM
 13

	)

26 
	#NGX_HTTP_MP4_STSS_DATA
 14

	)

27 
	#NGX_HTTP_MP4_CTTS_ATOM
 15

	)

28 
	#NGX_HTTP_MP4_CTTS_DATA
 16

	)

29 
	#NGX_HTTP_MP4_STSC_ATOM
 17

	)

30 
	#NGX_HTTP_MP4_STSC_CHUNK
 18

	)

31 
	#NGX_HTTP_MP4_STSC_DATA
 19

	)

32 
	#NGX_HTTP_MP4_STSZ_ATOM
 20

	)

33 
	#NGX_HTTP_MP4_STSZ_DATA
 21

	)

34 
	#NGX_HTTP_MP4_STCO_ATOM
 22

	)

35 
	#NGX_HTTP_MP4_STCO_DATA
 23

	)

36 
	#NGX_HTTP_MP4_CO64_ATOM
 24

	)

37 
	#NGX_HTTP_MP4_CO64_DATA
 25

	)

39 
	#NGX_HTTP_MP4_LAST_ATOM
 
NGX_HTTP_MP4_CO64_DATA


	)

43 
size_t
 
	mbuf„r_size
;

44 
size_t
 
	mmax_buf„r_size
;

45 } 
	tngx_hâp_mp4_c⁄f_t
;

49 
u_ch¨
 
	mchunk
[4];

50 
u_ch¨
 
	mßm∂es
[4];

51 
u_ch¨
 
	mid
[4];

52 } 
	tngx_mp4_°sc_íåy_t
;

56 
uöt32_t
 
	mtimesˇÀ
;

57 
uöt32_t
 
	mtime_to_ßm∂e_íåõs
;

58 
uöt32_t
 
	mßm∂e_to_chunk_íåõs
;

59 
uöt32_t
 
	msync_ßm∂es_íåõs
;

60 
uöt32_t
 
	mcomposôi⁄_off£t_íåõs
;

61 
uöt32_t
 
	mßm∂e_sizes_íåõs
;

62 
uöt32_t
 
	mchunks
;

64 
ngx_uöt_t
 
	m°¨t_ßm∂e
;

65 
ngx_uöt_t
 
	m°¨t_chunk
;

66 
ngx_uöt_t
 
	mchunk_ßm∂es
;

67 
uöt64_t
 
	mchunk_ßm∂es_size
;

68 
off_t
 
	m°¨t_off£t
;

70 
size_t
 
	mtkhd_size
;

71 
size_t
 
	mmdhd_size
;

72 
size_t
 
	mhdÃ_size
;

73 
size_t
 
	mvmhd_size
;

74 
size_t
 
	msmhd_size
;

75 
size_t
 
	mdöf_size
;

76 
size_t
 
	msize
;

78 
ngx_chaö_t
 
	mout
[
NGX_HTTP_MP4_LAST_ATOM
 + 1];

80 
ngx_buf_t
 
	måak_©om_buf
;

81 
ngx_buf_t
 
	mtkhd_©om_buf
;

82 
ngx_buf_t
 
	mmdü_©om_buf
;

83 
ngx_buf_t
 
	mmdhd_©om_buf
;

84 
ngx_buf_t
 
	mhdÃ_©om_buf
;

85 
ngx_buf_t
 
	mmöf_©om_buf
;

86 
ngx_buf_t
 
	mvmhd_©om_buf
;

87 
ngx_buf_t
 
	msmhd_©om_buf
;

88 
ngx_buf_t
 
	mdöf_©om_buf
;

89 
ngx_buf_t
 
	m°bl_©om_buf
;

90 
ngx_buf_t
 
	m°sd_©om_buf
;

91 
ngx_buf_t
 
	m°ts_©om_buf
;

92 
ngx_buf_t
 
	m°ts_d©a_buf
;

93 
ngx_buf_t
 
	m°ss_©om_buf
;

94 
ngx_buf_t
 
	m°ss_d©a_buf
;

95 
ngx_buf_t
 
	m˘ts_©om_buf
;

96 
ngx_buf_t
 
	m˘ts_d©a_buf
;

97 
ngx_buf_t
 
	m°sc_©om_buf
;

98 
ngx_buf_t
 
	m°sc_chunk_buf
;

99 
ngx_buf_t
 
	m°sc_d©a_buf
;

100 
ngx_buf_t
 
	m°sz_©om_buf
;

101 
ngx_buf_t
 
	m°sz_d©a_buf
;

102 
ngx_buf_t
 
	m°co_©om_buf
;

103 
ngx_buf_t
 
	m°co_d©a_buf
;

104 
ngx_buf_t
 
	mco64_©om_buf
;

105 
ngx_buf_t
 
	mco64_d©a_buf
;

107 
ngx_mp4_°sc_íåy_t
 
	m°sc_chunk_íåy
;

108 } 
	tngx_hâp_mp4_åak_t
;

112 
ngx_fûe_t
 
	mfûe
;

114 
u_ch¨
 *
	mbuf„r
;

115 
u_ch¨
 *
	mbuf„r_°¨t
;

116 
u_ch¨
 *
	mbuf„r_pos
;

117 
u_ch¨
 *
	mbuf„r_íd
;

118 
size_t
 
	mbuf„r_size
;

120 
off_t
 
	moff£t
;

121 
off_t
 
	míd
;

122 
off_t
 
	mc⁄ã¡_Àngth
;

123 
ngx_uöt_t
 
	m°¨t
;

124 
uöt32_t
 
	mtimesˇÀ
;

125 
ngx_hâp_ªque°_t
 *
	mªque°
;

126 
ngx_¨øy_t
 
	måak
;

127 
ngx_hâp_mp4_åak_t
 
	måaks
[2];

129 
size_t
 
	m·yp_size
;

130 
size_t
 
	mmoov_size
;

132 
ngx_chaö_t
 *
	mout
;

133 
ngx_chaö_t
 
	m·yp_©om
;

134 
ngx_chaö_t
 
	mmoov_©om
;

135 
ngx_chaö_t
 
	mmvhd_©om
;

136 
ngx_chaö_t
 
	mmd©_©om
;

137 
ngx_chaö_t
 
	mmd©_d©a
;

139 
ngx_buf_t
 
	m·yp_©om_buf
;

140 
ngx_buf_t
 
	mmoov_©om_buf
;

141 
ngx_buf_t
 
	mmvhd_©om_buf
;

142 
ngx_buf_t
 
	mmd©_©om_buf
;

143 
ngx_buf_t
 
	mmd©_d©a_buf
;

145 
u_ch¨
 
	mmoov_©om_hódî
[8];

146 
u_ch¨
 
	mmd©_©om_hódî
[16];

147 } 
	tngx_hâp_mp4_fûe_t
;

151 *
	m«me
;

152 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_mp4_fûe_t
 *
	mmp4
,

153 
uöt64_t
 
	m©om_d©a_size
);

154 } 
	tngx_hâp_mp4_©om_h™dÀr_t
;

157 
	#ngx_mp4_©om_hódî
(
mp4
Ë(mp4->
buf„r_pos
 - 8)

	)

158 
	#ngx_mp4_©om_d©a
(
mp4
Ëmp4->
buf„r_pos


	)

159 
	#ngx_mp4_©om_d©a_size
(
t
Ë(
uöt64_t
Ë(—Ë- 8)

	)

160 
	#ngx_mp4_©om_√xt
(
mp4
, 
n
Ëmp4->
buf„r_pos
 +n; mp4->
off£t
 +
	)
n

163 
	#ngx_mp4_£t_©om_«me
(
p
, 
n1
, 
n2
, 
n3
, 
n4
) \

164 ((
u_ch¨
 *Ë(
p
))[4] = 
n1
; \

165 ((
u_ch¨
 *Ë(
p
))[5] = 
n2
; \

166 ((
u_ch¨
 *Ë(
p
))[6] = 
n3
; \

167 ((
u_ch¨
 *Ë(
p
))[7] = 
n4


	)

169 
	#ngx_mp4_gë_32vÆue
(
p
) \

170 –((
uöt32_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 24) \

171 + ( ((
u_ch¨
 *Ë(
p
))[1] << 16) \

172 + ( ((
u_ch¨
 *Ë(
p
))[2] << 8) \

173 + ( ((
u_ch¨
 *Ë(
p
))[3]Ë)

	)

175 
	#ngx_mp4_£t_32vÆue
(
p
, 
n
) \

176 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
n
) >> 24); \

177 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
n
) >> 16); \

178 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
n
) >> 8); \

179 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë(
n
)

	)

181 
	#ngx_mp4_gë_64vÆue
(
p
) \

182 –((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[0] << 56) \

183 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[1] << 48) \

184 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[2] << 40) \

185 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[3] << 32) \

186 + ((
uöt64_t
Ë((
u_ch¨
 *Ë(
p
))[4] << 24) \

187 + ( ((
u_ch¨
 *Ë(
p
))[5] << 16) \

188 + ( ((
u_ch¨
 *Ë(
p
))[6] << 8) \

189 + ( ((
u_ch¨
 *Ë(
p
))[7]Ë)

	)

191 
	#ngx_mp4_£t_64vÆue
(
p
, 
n
) \

192 ((
u_ch¨
 *Ë(
p
))[0] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 56); \

193 ((
u_ch¨
 *Ë(
p
))[1] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 48); \

194 ((
u_ch¨
 *Ë(
p
))[2] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 40); \

195 ((
u_ch¨
 *Ë(
p
))[3] = (u_ch¨Ë((
uöt64_t
Ë(
n
) >> 32); \

196 ((
u_ch¨
 *Ë(
p
))[4] = (u_ch¨Ë–(
n
) >> 24); \

197 ((
u_ch¨
 *Ë(
p
))[5] = (u_ch¨Ë–(
n
) >> 16); \

198 ((
u_ch¨
 *Ë(
p
))[6] = (u_ch¨Ë–(
n
) >> 8); \

199 ((
u_ch¨
 *Ë(
p
))[7] = (u_ch¨Ë(
n
)

	)

201 
	#ngx_mp4_œ°_åak
(
mp4
) \

202 &((
ngx_hâp_mp4_åak_t
 *Ë
mp4
->
åak
.
ñts
)[mp4->åak.
√…s
 - 1]

	)

205 
ngx_öt_t
 
ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
);

206 
ngx_öt_t
 
ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

207 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
);

208 
ngx_öt_t
 
ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
);

209 
ngx_öt_t
 
ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

210 
uöt64_t
 
©om_d©a_size
);

211 
ngx_öt_t
 
ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

212 
uöt64_t
 
©om_d©a_size
);

213 
ngx_öt_t
 
ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

214 
uöt64_t
 
©om_d©a_size
);

215 
size_t
 
ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

216 
off_t
 
°¨t_off£t
);

217 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

218 
uöt64_t
 
©om_d©a_size
);

219 
ngx_öt_t
 
ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

220 
uöt64_t
 
©om_d©a_size
);

221 
ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

222 
ngx_hâp_mp4_åak_t
 *
åak
);

223 
ngx_öt_t
 
ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

224 
uöt64_t
 
©om_d©a_size
);

225 
ngx_öt_t
 
ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

226 
uöt64_t
 
©om_d©a_size
);

227 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

228 
uöt64_t
 
©om_d©a_size
);

229 
ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

230 
ngx_hâp_mp4_åak_t
 *
åak
);

231 
ngx_öt_t
 
ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

232 
uöt64_t
 
©om_d©a_size
);

233 
ngx_öt_t
 
ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

234 
uöt64_t
 
©om_d©a_size
);

235 
ngx_öt_t
 
ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

236 
uöt64_t
 
©om_d©a_size
);

237 
ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

238 
ngx_hâp_mp4_åak_t
 *
åak
);

239 
ngx_öt_t
 
ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

240 
uöt64_t
 
©om_d©a_size
);

241 
ngx_öt_t
 
ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

242 
uöt64_t
 
©om_d©a_size
);

243 
ngx_öt_t
 
ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

244 
uöt64_t
 
©om_d©a_size
);

245 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

246 
uöt64_t
 
©om_d©a_size
);

247 
ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

248 
ngx_hâp_mp4_åak_t
 *
åak
);

249 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

250 
uöt64_t
 
©om_d©a_size
);

251 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

252 
uöt64_t
 
©om_d©a_size
);

253 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

254 
ngx_hâp_mp4_åak_t
 *
åak
);

255 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

256 
uöt64_t
 
©om_d©a_size
);

257 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

258 
ngx_hâp_mp4_åak_t
 *
åak
);

259 
ngx_öt_t
 
ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

260 
uöt64_t
 
©om_d©a_size
);

261 
ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

262 
ngx_hâp_mp4_åak_t
 *
åak
);

263 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

264 
uöt64_t
 
©om_d©a_size
);

265 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

266 
ngx_hâp_mp4_åak_t
 *
åak
);

267 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

268 
uöt64_t
 
©om_d©a_size
);

269 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

270 
ngx_hâp_mp4_åak_t
 *
åak
);

271 
ngx_öt_t
 
ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

272 
uöt64_t
 
©om_d©a_size
);

273 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

274 
ngx_hâp_mp4_åak_t
 *
åak
);

275 
ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

276 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
);

277 
ngx_öt_t
 
ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

278 
uöt64_t
 
©om_d©a_size
);

279 
ngx_öt_t
 
ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

280 
ngx_hâp_mp4_åak_t
 *
åak
);

281 
ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

282 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
);

283 *
ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

284 *
ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

285 *
ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

287 
ngx_comm™d_t
 
	gngx_hâp_mp4_comm™ds
[] = {

289 { 
ngx_°rög
("mp4"),

290 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

291 
ngx_hâp_mp4
,

294 
NULL
 },

296 { 
ngx_°rög
("mp4_buffer_size"),

297 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

298 
ngx_c⁄f_£t_size_¶Ÿ
,

299 
NGX_HTTP_LOC_CONF_OFFSET
,

300 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
buf„r_size
),

301 
NULL
 },

303 { 
ngx_°rög
("mp4_max_buffer_size"),

304 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

305 
ngx_c⁄f_£t_size_¶Ÿ
,

306 
NGX_HTTP_LOC_CONF_OFFSET
,

307 
off£tof
(
ngx_hâp_mp4_c⁄f_t
, 
max_buf„r_size
),

308 
NULL
 },

310 
ngx_nuŒ_comm™d


314 
ngx_hâp_moduÀ_t
 
	gngx_hâp_mp4_moduÀ_˘x
 = {

315 
NULL
,

316 
NULL
,

318 
NULL
,

319 
NULL
,

321 
NULL
,

322 
NULL
,

324 
ngx_hâp_mp4_¸óã_c⁄f
,

325 
ngx_hâp_mp4_mîge_c⁄f


329 
ngx_moduÀ_t
 
	gngx_hâp_mp4_moduÀ
 = {

330 
NGX_MODULE_V1
,

331 &
ngx_hâp_mp4_moduÀ_˘x
,

332 
ngx_hâp_mp4_comm™ds
,

333 
NGX_HTTP_MODULE
,

334 
NULL
,

335 
NULL
,

336 
NULL
,

337 
NULL
,

338 
NULL
,

339 
NULL
,

340 
NULL
,

341 
NGX_MODULE_V1_PADDING


345 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_©oms
[] = {

346 { "·yp", 
ngx_hâp_mp4_ªad_·yp_©om
 },

347 { "moov", 
ngx_hâp_mp4_ªad_moov_©om
 },

348 { "md©", 
ngx_hâp_mp4_ªad_md©_©om
 },

349 { 
NULL
, NULL }

352 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_moov_©oms
[] = {

353 { "mvhd", 
ngx_hâp_mp4_ªad_mvhd_©om
 },

354 { "åak", 
ngx_hâp_mp4_ªad_åak_©om
 },

355 { "cmov", 
ngx_hâp_mp4_ªad_cmov_©om
 },

356 { 
NULL
, NULL }

359 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_åak_©oms
[] = {

360 { "tkhd", 
ngx_hâp_mp4_ªad_tkhd_©om
 },

361 { "mdü", 
ngx_hâp_mp4_ªad_mdü_©om
 },

362 { 
NULL
, NULL }

365 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_mdü_©oms
[] = {

366 { "mdhd", 
ngx_hâp_mp4_ªad_mdhd_©om
 },

367 { "hdÃ", 
ngx_hâp_mp4_ªad_hdÃ_©om
 },

368 { "möf", 
ngx_hâp_mp4_ªad_möf_©om
 },

369 { 
NULL
, NULL }

372 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_möf_©oms
[] = {

373 { "vmhd", 
ngx_hâp_mp4_ªad_vmhd_©om
 },

374 { "smhd", 
ngx_hâp_mp4_ªad_smhd_©om
 },

375 { "döf", 
ngx_hâp_mp4_ªad_döf_©om
 },

376 { "°bl", 
ngx_hâp_mp4_ªad_°bl_©om
 },

377 { 
NULL
, NULL }

380 
ngx_hâp_mp4_©om_h™dÀr_t
 
	gngx_hâp_mp4_°bl_©oms
[] = {

381 { "°sd", 
ngx_hâp_mp4_ªad_°sd_©om
 },

382 { "°ts", 
ngx_hâp_mp4_ªad_°ts_©om
 },

383 { "°ss", 
ngx_hâp_mp4_ªad_°ss_©om
 },

384 { "˘ts", 
ngx_hâp_mp4_ªad_˘ts_©om
 },

385 { "°sc", 
ngx_hâp_mp4_ªad_°sc_©om
 },

386 { "°sz", 
ngx_hâp_mp4_ªad_°sz_©om
 },

387 { "°co", 
ngx_hâp_mp4_ªad_°co_©om
 },

388 { "co64", 
ngx_hâp_mp4_ªad_co64_©om
 },

389 { 
NULL
, NULL }

393 
ngx_öt_t


394 
	$ngx_hâp_mp4_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

396 
u_ch¨
 *
œ°
;

397 
size_t
 
roŸ
;

398 
ngx_öt_t
 
rc
, 
°¨t
;

399 
ngx_uöt_t
 
Àvñ
;

400 
ngx_°r_t
 
∑th
, 
vÆue
;

401 
ngx_log_t
 *
log
;

402 
ngx_buf_t
 *
b
;

403 
ngx_chaö_t
 
out
;

404 
ngx_hâp_mp4_fûe_t
 *
mp4
;

405 
ngx_›í_fûe_öfo_t
 
of
;

406 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

408 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
))) {

409  
NGX_HTTP_NOT_ALLOWED
;

412 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

413  
NGX_DECLINED
;

416 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

418 i‡(
rc
 !
NGX_OK
) {

419  
rc
;

422 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

423 i‡(
œ°
 =
NULL
) {

424  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

427 
log
 = 
r
->
c⁄√˘i⁄
->log;

429 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

432 "hâ∞mp4 fûíame: \"%V\"", &
∑th
);

434 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

436 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

438 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

439 
of
.
dúe˘io
 = 
NGX_MAX_OFF_T_VALUE
;

440 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

441 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

442 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

443 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

445 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

446  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

449 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

450 !
NGX_OK
)

452 
of
.
îr
) {

455  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

457 
NGX_ENOENT
:

458 
NGX_ENOTDIR
:

459 
NGX_ENAMETOOLONG
:

461 
Àvñ
 = 
NGX_LOG_ERR
;

462 
rc
 = 
NGX_HTTP_NOT_FOUND
;

465 
NGX_EACCES
:

466 #i‡(
NGX_HAVE_OPENAT
)

467 
NGX_EMLINK
:

468 
NGX_ELOOP
:

471 
Àvñ
 = 
NGX_LOG_ERR
;

472 
rc
 = 
NGX_HTTP_FORBIDDEN
;

477 
Àvñ
 = 
NGX_LOG_CRIT
;

478 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

482 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

483 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

484 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

487  
rc
;

490 i‡(!
of
.
is_fûe
) {

492 i‡(
	`ngx_˛o£_fûe
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

493 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

494 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
∑th
.
d©a
);

497  
NGX_DECLINED
;

500 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

501 
r
->
Ælow_ønges
 = 1;

503 
°¨t
 = -1;

504 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

505 
mp4
 = 
NULL
;

506 
b
 = 
NULL
;

508 i‡(
r
->
¨gs
.
Àn
) {

510 i‡(
	`ngx_hâp_¨g
(
r
, (
u_ch¨
 *Ë"°¨t", 5, &
vÆue
Ë=
NGX_OK
) {

518 
	`ngx_£t_î∫o
(0);

519 
°¨t
 = (Ë(
	`°πod
((*Ë
vÆue
.
d©a
, 
NULL
) * 1000);

521 i‡(
ngx_î∫o
 =0 && 
°¨t
 >= 0) {

522 
r
->
Ælow_ønges
 = 0;

524 
mp4
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_mp4_fûe_t
));

525 i‡(
mp4
 =
NULL
) {

526  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

529 
mp4
->
fûe
.
fd
 = 
of
.fd;

530 
mp4
->
fûe
.
«me
 = 
∑th
;

531 
mp4
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;;

532 
mp4
->
íd
 = 
of
.
size
;

533 
mp4
->
°¨t
 = (
ngx_uöt_t
) start;

534 
mp4
->
ªque°
 = 
r
;

536 
	`ngx_hâp_mp4_¥o˚ss
(
mp4
)) {

538 
NGX_DECLINED
:

539 i‡(
mp4
->
buf„r
) {

540 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

543 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

544 
mp4
 = 
NULL
;

548 
NGX_OK
:

549 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
mp4
->
c⁄ã¡_Àngth
;

553 i‡(
mp4
->
buf„r
) {

554 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
->
buf„r
);

557 
	`ngx_p‰ì
(
r
->
poﬁ
, 
mp4
);

559  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

565 
log
->
a˘i⁄
 = "sending mp4Åo client";

567 i‡(
˛cf
->
dúe˘io
 <
of
.
size
) {

574 i‡(
	`ngx_dúe˘io_⁄
(
of
.
fd
Ë=
NGX_FILE_ERROR
) {

575 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

576 
ngx_dúe˘io_⁄_n
 " \"%s\" faûed", 
∑th
.
d©a
);

579 
of
.
is_dúe˘io
 = 1;

581 i‡(
mp4
) {

582 
mp4
->
fûe
.
dúe˘io
 = 1;

586 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

587 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

589 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

590  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

593 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

594  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

597 i‡(
mp4
 =
NULL
) {

598 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

599 i‡(
b
 =
NULL
) {

600  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

603 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

604 i‡(
b
->
fûe
 =
NULL
) {

605  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

609 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

611 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

612  
rc
;

615 i‡(
mp4
) {

616  
	`ngx_hâp_ouçut_fûãr
(
r
, 
mp4
->
out
);

619 
b
->
fûe_pos
 = 0;

620 
b
->
fûe_œ°
 = 
of
.
size
;

622 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1 : 0;

623 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

624 
b
->
œ°_ö_chaö
 = 1;

626 
b
->
fûe
->
fd
 = 
of
.fd;

627 
b
->
fûe
->
«me
 = 
∑th
;

628 
b
->
fûe
->
log
 =Üog;

629 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

631 
out
.
buf
 = 
b
;

632 
out
.
√xt
 = 
NULL
;

634  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

635 
	}
}

638 
ngx_öt_t


639 
	$ngx_hâp_mp4_¥o˚ss
(
ngx_hâp_mp4_fûe_t
 *
mp4
)

641 
off_t
 
°¨t_off£t
, 
adju°mít
;

642 
ngx_öt_t
 
rc
;

643 
ngx_uöt_t
 
i
, 
j
;

644 
ngx_chaö_t
 **
¥ev
;

645 
ngx_hâp_mp4_åak_t
 *
åak
;

646 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

648 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

649 "mp4 sèπ:%ui", 
mp4
->
°¨t
);

651 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

653 
mp4
->
buf„r_size
 = 
c⁄f
->buffer_size;

655 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_©oms
, mp4->
íd
);

656 i‡(
rc
 !
NGX_OK
) {

657  
rc
;

660 i‡(
mp4
->
åak
.
√…s
 == 0) {

661 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

663 
mp4
->
fûe
.
«me
.
d©a
);

664  
NGX_ERROR
;

667 i‡(
mp4
->
md©_©om
.
buf
 =
NULL
) {

668 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

670 
mp4
->
fûe
.
«me
.
d©a
);

671  
NGX_ERROR
;

674 
¥ev
 = &
mp4
->
out
;

676 i‡(
mp4
->
·yp_©om
.
buf
) {

677 *
¥ev
 = &
mp4
->
·yp_©om
;

678 
¥ev
 = &
mp4
->
·yp_©om
.
√xt
;

681 *
¥ev
 = &
mp4
->
moov_©om
;

682 
¥ev
 = &
mp4
->
moov_©om
.
√xt
;

684 i‡(
mp4
->
mvhd_©om
.
buf
) {

685 
mp4
->
moov_size
 +mp4->
mvhd_©om_buf
.
œ°
 - mp4->mvhd_©om_buf.
pos
;

686 *
¥ev
 = &
mp4
->
mvhd_©om
;

687 
¥ev
 = &
mp4
->
mvhd_©om
.
√xt
;

690 
°¨t_off£t
 = 
mp4
->
íd
;

691 
åak
 = 
mp4
->åak.
ñts
;

693 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

695 i‡(
	`ngx_hâp_mp4_upd©e_°ts_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

696  
NGX_ERROR
;

699 i‡(
	`ngx_hâp_mp4_upd©e_°ss_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

700  
NGX_ERROR
;

703 
	`ngx_hâp_mp4_upd©e_˘ts_©om
(
mp4
, &
åak
[
i
]);

705 i‡(
	`ngx_hâp_mp4_upd©e_°sc_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

706  
NGX_ERROR
;

709 i‡(
	`ngx_hâp_mp4_upd©e_°sz_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

710  
NGX_ERROR
;

713 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

714 i‡(
	`ngx_hâp_mp4_upd©e_co64_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

715  
NGX_ERROR
;

719 i‡(
	`ngx_hâp_mp4_upd©e_°co_©om
(
mp4
, &
åak
[
i
]Ë!
NGX_OK
) {

720  
NGX_ERROR
;

724 
	`ngx_hâp_mp4_upd©e_°bl_©om
(
mp4
, &
åak
[
i
]);

725 
	`ngx_hâp_mp4_upd©e_möf_©om
(
mp4
, &
åak
[
i
]);

726 
åak
[
i
].
size
 +åak[i].
mdhd_size
;

727 
åak
[
i
].
size
 +åak[i].
hdÃ_size
;

728 
	`ngx_hâp_mp4_upd©e_mdü_©om
(
mp4
, &
åak
[
i
]);

729 
åak
[
i
].
size
 +åak[i].
tkhd_size
;

730 
	`ngx_hâp_mp4_upd©e_åak_©om
(
mp4
, &
åak
[
i
]);

732 
mp4
->
moov_size
 +
åak
[
i
].
size
;

734 i‡(
°¨t_off£t
 > 
åak
[
i
].start_offset) {

735 
°¨t_off£t
 = 
åak
[
i
].start_offset;

738 *
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
];

739 
¥ev
 = &
åak
[
i
].
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
√xt
;

741 
j
 = 0; j < 
NGX_HTTP_MP4_LAST_ATOM
 + 1; j++) {

742 i‡(
åak
[
i
].
out
[
j
].
buf
) {

743 *
¥ev
 = &
åak
[
i
].
out
[
j
];

744 
¥ev
 = &
åak
[
i
].
out
[
j
].
√xt
;

749 
mp4
->
moov_size
 += 8;

751 
	`ngx_mp4_£t_32vÆue
(
mp4
->
moov_©om_hódî
, mp4->
moov_size
);

752 
	`ngx_mp4_£t_©om_«me
(
mp4
->
moov_©om_hódî
, 'm', 'o', 'o', 'v');

753 
mp4
->
c⁄ã¡_Àngth
 +mp4->
moov_size
;

755 *
¥ev
 = &
mp4
->
md©_©om
;

757 i‡(
°¨t_off£t
 > 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
) {

758 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

760 
mp4
->
fûe
.
«me
.
d©a
);

761  
NGX_ERROR
;

764 
adju°mít
 = 
mp4
->
·yp_size
 + mp4->
moov_size


765 + 
	`ngx_hâp_mp4_upd©e_md©_©om
(
mp4
, 
°¨t_off£t
)

766 - 
°¨t_off£t
;

768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

769 "mp4ádju°mít:%O", 
adju°mít
);

771 
i
 = 0; i < 
mp4
->
åak
.
√…s
; i++) {

772 i‡(
åak
[
i
].
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
) {

773 
	`ngx_hâp_mp4_adju°_co64_©om
(
mp4
, &
åak
[
i
], 
adju°mít
);

775 
	`ngx_hâp_mp4_adju°_°co_©om
(
mp4
, &
åak
[
i
], (
öt32_t
Ë
adju°mít
);

779  
NGX_OK
;

780 
	}
}

784 
u_ch¨
 
	msize
[4];

785 
u_ch¨
 
	m«me
[4];

786 } 
	tngx_mp4_©om_hódî_t
;

789 
u_ch¨
 
	msize
[4];

790 
u_ch¨
 
	m«me
[4];

791 
u_ch¨
 
	msize64
[8];

792 } 
	tngx_mp4_©om_hódî64_t
;

795 
ngx_öt_t


796 
	$ngx_hâp_mp4_ªad_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

797 
ngx_hâp_mp4_©om_h™dÀr_t
 *
©om
, 
uöt64_t
 
©om_d©a_size
)

799 
off_t
 
íd
;

800 
size_t
 
©om_hódî_size
;

801 
u_ch¨
 *
©om_hódî
, *
©om_«me
;

802 
uöt64_t
 
©om_size
;

803 
ngx_öt_t
 
rc
;

804 
ngx_uöt_t
 
n
;

806 
íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

808 
mp4
->
off£t
 < 
íd
) {

810 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
uöt32_t
)Ë!
NGX_OK
) {

811  
NGX_ERROR
;

814 
©om_hódî
 = 
mp4
->
buf„r_pos
;

815 
©om_size
 = 
	`ngx_mp4_gë_32vÆue
(
©om_hódî
);

816 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

818 i‡(
©om_size
 == 0) {

819 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

821  
NGX_OK
;

824 i‡(
©om_size
 < (
ngx_mp4_©om_hódî_t
)) {

826 i‡(
©om_size
 == 1) {

828 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî64_t
))

829 !
NGX_OK
)

831  
NGX_ERROR
;

835 
©om_hódî
 = 
mp4
->
buf„r_pos
;

836 
©om_size
 = 
	`ngx_mp4_gë_64vÆue
(
©om_hódî
 + 8);

837 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

840 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

842 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

843  
NGX_ERROR
;

847 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
ngx_mp4_©om_hódî_t
)Ë!
NGX_OK
) {

848  
NGX_ERROR
;

851 
©om_hódî
 = 
mp4
->
buf„r_pos
;

852 
©om_«me
 = 
©om_hódî
 + (
uöt32_t
);

854 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

856 4, 
©om_«me
, 
mp4
->
off£t
, 
©om_size
);

858 i‡(
©om_size
 > (
uöt64_t
Ë(
NGX_MAX_OFF_T_VALUE
 - 
mp4
->
off£t
)

859 || 
mp4
->
off£t
 + (
off_t
Ë
©om_size
 > 
íd
)

861 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

863 
mp4
->
fûe
.
«me
.
d©a
, 
©om_size
);

864  
NGX_ERROR
;

867 
n
 = 0; 
©om
[n].
«me
;Ç++) {

869 i‡(
	`ngx_°∫cmp
(
©om_«me
, 
©om
[
n
].
«me
, 4) == 0) {

871 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_hódî_size
);

873 
rc
 = 
©om
[
n
].
	`h™dÀr
(
mp4
, 
©om_size
 - 
©om_hódî_size
);

874 i‡(
rc
 !
NGX_OK
) {

875  
rc
;

878 
√xt
;

882 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_size
);

884 
√xt
:

888  
NGX_OK
;

889 
	}
}

892 
ngx_öt_t


893 
	$ngx_hâp_mp4_ªad
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
size_t
 
size
)

895 
ssize_t
 
n
;

897 i‡(
mp4
->
buf„r_pos
 + 
size
 <mp4->
buf„r_íd
) {

898  
NGX_OK
;

901 i‡(
mp4
->
off£t
 + (
off_t
Ëmp4->
buf„r_size
 > mp4->
íd
) {

902 
mp4
->
buf„r_size
 = (
size_t
Ë(mp4->
íd
 - mp4->
off£t
);

905 i‡(
mp4
->
buf„r_size
 < 
size
) {

906 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

907 "\"%s\" mp4 fûêåunˇãd", 
mp4
->
fûe
.
«me
.
d©a
);

908  
NGX_ERROR
;

911 i‡(
mp4
->
buf„r
 =
NULL
) {

912 
mp4
->
buf„r
 = 
	`ngx_∑Œoc
(mp4->
ªque°
->
poﬁ
, mp4->
buf„r_size
);

913 i‡(
mp4
->
buf„r
 =
NULL
) {

914  
NGX_ERROR
;

917 
mp4
->
buf„r_°¨t
 = mp4->
buf„r
;

920 
n
 = 
	`ngx_ªad_fûe
(&
mp4
->
fûe
, mp4->
buf„r_°¨t
, mp4->
buf„r_size
,

921 
mp4
->
off£t
);

923 i‡(
n
 =
NGX_ERROR
) {

924  
NGX_ERROR
;

927 i‡((
size_t
Ë
n
 !
mp4
->
buf„r_size
) {

928 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
mp4
->
fûe
.
log
, 0,

929 
ngx_ªad_fûe_n
 "Ñead only %z of %z from \"%s\"",

930 
n
, 
mp4
->
buf„r_size
, mp4->
fûe
.
«me
.
d©a
);

931  
NGX_ERROR
;

934 
mp4
->
buf„r_pos
 = mp4->
buf„r_°¨t
;

935 
mp4
->
buf„r_íd
 = mp4->
buf„r_°¨t
 + mp4->
buf„r_size
;

937  
NGX_OK
;

938 
	}
}

941 
ngx_öt_t


942 
	$ngx_hâp_mp4_ªad_·yp_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

944 
u_ch¨
 *
·yp_©om
;

945 
size_t
 
©om_size
;

946 
ngx_buf_t
 *
©om
;

948 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 ftypátom");

950 i‡(
©om_d©a_size
 > 1024

951 || 
	`ngx_mp4_©om_d©a
(
mp4
Ë+ 
©om_d©a_size
 > mp4->
buf„r_íd
)

953 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

955 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

956  
NGX_ERROR
;

959 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

961 
·yp_©om
 = 
	`ngx_∑Œoc
(
mp4
->
ªque°
->
poﬁ
, 
©om_size
);

962 i‡(
·yp_©om
 =
NULL
) {

963  
NGX_ERROR
;

966 
	`ngx_mp4_£t_32vÆue
(
·yp_©om
, 
©om_size
);

967 
	`ngx_mp4_£t_©om_«me
(
·yp_©om
, 'f', 't', 'y', 'p');

973 
	`ngx_mem˝y
(
·yp_©om
 + (
ngx_mp4_©om_hódî_t
),

974 
	`ngx_mp4_©om_d©a
(
mp4
), (
size_t
Ë
©om_d©a_size
);

976 
©om
 = &
mp4
->
·yp_©om_buf
;

977 
©om
->
ãmp‹¨y
 = 1;

978 
©om
->
pos
 = 
·yp_©om
;

979 
©om
->
œ°
 = 
·yp_©om
 + 
©om_size
;

981 
mp4
->
·yp_©om
.
buf
 = 
©om
;

982 
mp4
->
·yp_size
 = 
©om_size
;

983 
mp4
->
c⁄ã¡_Àngth
 = 
©om_size
;

985 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

987  
NGX_OK
;

988 
	}
}

995 
	#NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 (4 * 1024)

	)

997 
ngx_öt_t


998 
	$ngx_hâp_mp4_ªad_moov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1000 
ngx_öt_t
 
rc
;

1001 
ngx_uöt_t
 
no_md©
;

1002 
ngx_buf_t
 *
©om
;

1003 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

1005 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom");

1007 
no_md©
 = (
mp4
->
md©_©om
.
buf
 =
NULL
);

1009 i‡(
no_md©
 && 
mp4
->
°¨t
 == 0) {

1014  
NGX_DECLINED
;

1017 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
mp4
->
ªque°
, 
ngx_hâp_mp4_moduÀ
);

1019 i‡(
©om_d©a_size
 > 
mp4
->
buf„r_size
) {

1021 i‡(
©om_d©a_size
 > 
c⁄f
->
max_buf„r_size
) {

1022 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1025 
mp4
->
fûe
.
«me
.
d©a
, 
©om_d©a_size
);

1026  
NGX_ERROR
;

1029 
	`ngx_p‰ì
(
mp4
->
ªque°
->
poﬁ
, mp4->
buf„r
);

1030 
mp4
->
buf„r
 = 
NULL
;

1031 
mp4
->
buf„r_pos
 = 
NULL
;

1032 
mp4
->
buf„r_íd
 = 
NULL
;

1034 
mp4
->
buf„r_size
 = (
size_t
Ë
©om_d©a_size


1035 + 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
 * 
no_md©
;

1038 i‡(
	`ngx_hâp_mp4_ªad
(
mp4
, (
size_t
Ë
©om_d©a_size
Ë!
NGX_OK
) {

1039  
NGX_ERROR
;

1042 
mp4
->
åak
.
ñts
 = &mp4->
åaks
;

1043 
mp4
->
åak
.
size
 = (
ngx_hâp_mp4_åak_t
);

1044 
mp4
->
åak
.
«Œoc
 = 2;

1045 
mp4
->
åak
.
poﬁ
 = mp4->
ªque°
->pool;

1047 
©om
 = &
mp4
->
moov_©om_buf
;

1048 
©om
->
ãmp‹¨y
 = 1;

1049 
©om
->
pos
 = 
mp4
->
moov_©om_hódî
;

1050 
©om
->
œ°
 = 
mp4
->
moov_©om_hódî
 + 8;

1052 
mp4
->
moov_©om
.
buf
 = &mp4->
moov_©om_buf
;

1054 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_moov_©oms
, 
©om_d©a_size
);

1056 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 moovátom done");

1058 i‡(
no_md©
) {

1059 
mp4
->
buf„r_°¨t
 = mp4->
buf„r_pos
;

1060 
mp4
->
buf„r_size
 = 
NGX_HTTP_MP4_MOOV_BUFFER_EXCESS
;

1062 i‡(
mp4
->
buf„r_°¨t
 + mp4->
buf„r_size
 > mp4->
buf„r_íd
) {

1063 
mp4
->
buf„r
 = 
NULL
;

1064 
mp4
->
buf„r_pos
 = 
NULL
;

1065 
mp4
->
buf„r_íd
 = 
NULL
;

1070 
mp4
->
off£t
 = mp4->
íd
;

1073  
rc
;

1074 
	}
}

1077 
ngx_öt_t


1078 
	$ngx_hâp_mp4_ªad_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1080 
ngx_buf_t
 *
d©a
;

1082 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdatátom");

1084 
d©a
 = &
mp4
->
md©_d©a_buf
;

1085 
d©a
->
fûe
 = &
mp4
->file;

1086 
d©a
->
ö_fûe
 = 1;

1087 
d©a
->
œ°_buf
 = 1;

1088 
d©a
->
œ°_ö_chaö
 = 1;

1089 
d©a
->
fûe_œ°
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1091 
mp4
->
md©_©om
.
buf
 = &mp4->
md©_©om_buf
;

1092 
mp4
->
md©_©om
.
√xt
 = &mp4->
md©_d©a
;

1093 
mp4
->
md©_d©a
.
buf
 = 
d©a
;

1095 i‡(
mp4
->
åak
.
√…s
) {

1097 
mp4
->
off£t
 = mp4->
íd
;

1100 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1103  
NGX_OK
;

1104 
	}
}

1107 
size_t


1108 
	$ngx_hâp_mp4_upd©e_md©_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
off_t
 
°¨t_off£t
)

1110 
off_t
 
©om_d©a_size
;

1111 
u_ch¨
 *
©om_hódî
;

1112 
uöt32_t
 
©om_hódî_size
;

1113 
uöt64_t
 
©om_size
;

1114 
ngx_buf_t
 *
©om
;

1116 
©om_d©a_size
 = 
mp4
->
md©_d©a
.
buf
->
fûe_œ°
 - 
°¨t_off£t
;

1117 
mp4
->
md©_d©a
.
buf
->
fûe_pos
 = 
°¨t_off£t
;

1119 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1120 "md©Çew off£à@%O:%O", 
°¨t_off£t
, 
©om_d©a_size
);

1122 
©om_hódî
 = 
mp4
->
md©_©om_hódî
;

1124 i‡((
uöt64_t
Ë
©om_d©a_size
 > 0xffffffff) {

1125 
©om_size
 = 1;

1126 
©om_hódî_size
 = (
ngx_mp4_©om_hódî64_t
);

1127 
	`ngx_mp4_£t_64vÆue
(
©om_hódî
 + (
ngx_mp4_©om_hódî_t
),

1128 (
ngx_mp4_©om_hódî64_t
Ë+ 
©om_d©a_size
);

1130 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ 
©om_d©a_size
;

1131 
©om_hódî_size
 = (
ngx_mp4_©om_hódî_t
);

1134 
mp4
->
c⁄ã¡_Àngth
 +
©om_hódî_size
 + 
©om_d©a_size
;

1136 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1137 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'a', 't');

1139 
©om
 = &
mp4
->
md©_©om_buf
;

1140 
©om
->
ãmp‹¨y
 = 1;

1141 
©om
->
pos
 = 
©om_hódî
;

1142 
©om
->
œ°
 = 
©om_hódî
 + 
©om_hódî_size
;

1144  
©om_hódî_size
;

1145 
	}
}

1149 
u_ch¨
 
	msize
[4];

1150 
u_ch¨
 
	m«me
[4];

1151 
u_ch¨
 
	mvîsi⁄
[1];

1152 
u_ch¨
 
	mÊags
[3];

1153 
u_ch¨
 
	m¸óti⁄_time
[4];

1154 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1155 
u_ch¨
 
	mtimesˇÀ
[4];

1156 
u_ch¨
 
	mduøti⁄
[4];

1157 
u_ch¨
 
	møã
[4];

1158 
u_ch¨
 
	mvﬁume
[2];

1159 
u_ch¨
 
	mª£rved
[10];

1160 
u_ch¨
 
	mm©rix
[36];

1161 
u_ch¨
 
	m¥evõw_time
[4];

1162 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1163 
u_ch¨
 
	mpo°î_time
[4];

1164 
u_ch¨
 
	m£À˘i⁄_time
[4];

1165 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1166 
u_ch¨
 
	mcuºít_time
[4];

1167 
u_ch¨
 
	m√xt_åack_id
[4];

1168 } 
	tngx_mp4_mvhd_©om_t
;

1171 
u_ch¨
 
	msize
[4];

1172 
u_ch¨
 
	m«me
[4];

1173 
u_ch¨
 
	mvîsi⁄
[1];

1174 
u_ch¨
 
	mÊags
[3];

1175 
u_ch¨
 
	m¸óti⁄_time
[8];

1176 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1177 
u_ch¨
 
	mtimesˇÀ
[4];

1178 
u_ch¨
 
	mduøti⁄
[8];

1179 
u_ch¨
 
	møã
[4];

1180 
u_ch¨
 
	mvﬁume
[2];

1181 
u_ch¨
 
	mª£rved
[10];

1182 
u_ch¨
 
	mm©rix
[36];

1183 
u_ch¨
 
	m¥evõw_time
[4];

1184 
u_ch¨
 
	m¥evõw_duøti⁄
[4];

1185 
u_ch¨
 
	mpo°î_time
[4];

1186 
u_ch¨
 
	m£À˘i⁄_time
[4];

1187 
u_ch¨
 
	m£À˘i⁄_duøti⁄
[4];

1188 
u_ch¨
 
	mcuºít_time
[4];

1189 
u_ch¨
 
	m√xt_åack_id
[4];

1190 } 
	tngx_mp4_mvhd64_©om_t
;

1193 
ngx_öt_t


1194 
	$ngx_hâp_mp4_ªad_mvhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1196 
u_ch¨
 *
©om_hódî
;

1197 
size_t
 
©om_size
;

1198 
uöt32_t
 
timesˇÀ
;

1199 
uöt64_t
 
duøti⁄
;

1200 
ngx_buf_t
 *
©om
;

1201 
ngx_mp4_mvhd_©om_t
 *
mvhd_©om
;

1202 
ngx_mp4_mvhd64_©om_t
 *
mvhd64_©om
;

1204 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mvhdátom");

1206 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1207 
mvhd_©om
 = (
ngx_mp4_mvhd_©om_t
 *Ë
©om_hódî
;

1208 
mvhd64_©om
 = (
ngx_mp4_mvhd64_©om_t
 *Ë
©om_hódî
;

1209 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'v', 'h', 'd');

1211 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd_©om_t
Ë> 
©om_d©a_size
) {

1212 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1213 "\"%s\" mp4 mvhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1214  
NGX_ERROR
;

1217 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1219 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->timescale);

1220 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd_©om
->duration);

1225 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mvhd64_©om_t
Ë> 
©om_d©a_size
) {

1226 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1228 
mp4
->
fûe
.
«me
.
d©a
);

1229  
NGX_ERROR
;

1232 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mvhd64_©om
->timescale);

1233 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mvhd64_©om
->duration);

1236 
mp4
->
timesˇÀ
 =Åimescale;

1238 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1240 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1242 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1244 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1246 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1248 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1249 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
size
, 
©om_size
);

1251 i‡(
mvhd_©om
->
vîsi⁄
[0] == 0) {

1252 
	`ngx_mp4_£t_32vÆue
(
mvhd_©om
->
duøti⁄
, duration);

1255 
	`ngx_mp4_£t_64vÆue
(
mvhd64_©om
->
duøti⁄
, duration);

1258 
©om
 = &
mp4
->
mvhd_©om_buf
;

1259 
©om
->
ãmp‹¨y
 = 1;

1260 
©om
->
pos
 = 
©om_hódî
;

1261 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1263 
mp4
->
mvhd_©om
.
buf
 = 
©om
;

1265 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1267  
NGX_OK
;

1268 
	}
}

1271 
ngx_öt_t


1272 
	$ngx_hâp_mp4_ªad_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1274 
u_ch¨
 *
©om_hódî
, *
©om_íd
;

1275 
off_t
 
©om_fûe_íd
;

1276 
ngx_öt_t
 
rc
;

1277 
ngx_buf_t
 *
©om
;

1278 
ngx_hâp_mp4_åak_t
 *
åak
;

1280 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Årakátom");

1282 
åak
 = 
	`ngx_¨øy_push
(&
mp4
->trak);

1283 i‡(
åak
 =
NULL
) {

1284  
NGX_ERROR
;

1287 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1289 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1290 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 't', 'r', 'a', 'k');

1292 
©om
 = &
åak
->
åak_©om_buf
;

1293 
©om
->
ãmp‹¨y
 = 1;

1294 
©om
->
pos
 = 
©om_hódî
;

1295 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1297 
åak
->
out
[
NGX_HTTP_MP4_TRAK_ATOM
].
buf
 = 
©om
;

1299 
©om_íd
 = 
mp4
->
buf„r_pos
 + 
©om_d©a_size
;

1300 
©om_fûe_íd
 = 
mp4
->
off£t
 + 
©om_d©a_size
;

1302 
rc
 = 
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_åak_©oms
, 
©om_d©a_size
);

1304 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1305 "mp4Åøkátom: %i", 
rc
);

1307 i‡(
rc
 =
NGX_DECLINED
) {

1309 
	`ngx_memzîo
(
åak
, (
ngx_hâp_mp4_åak_t
));

1310 
mp4
->
åak
.
√…s
--;

1311 
mp4
->
buf„r_pos
 = 
©om_íd
;

1312 
mp4
->
off£t
 = 
©om_fûe_íd
;

1313  
NGX_OK
;

1316  
rc
;

1317 
	}
}

1321 
	$ngx_hâp_mp4_upd©e_åak_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1322 
ngx_hâp_mp4_åak_t
 *
åak
)

1324 
ngx_buf_t
 *
©om
;

1326 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1327 
©om
 = &
åak
->
åak_©om_buf
;

1328 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1329 
	}
}

1332 
ngx_öt_t


1333 
	$ngx_hâp_mp4_ªad_cmov_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1335 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1337 
mp4
->
fûe
.
«me
.
d©a
);

1339  
NGX_ERROR
;

1340 
	}
}

1344 
u_ch¨
 
	msize
[4];

1345 
u_ch¨
 
	m«me
[4];

1346 
u_ch¨
 
	mvîsi⁄
[1];

1347 
u_ch¨
 
	mÊags
[3];

1348 
u_ch¨
 
	m¸óti⁄_time
[4];

1349 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1350 
u_ch¨
 
	måack_id
[4];

1351 
u_ch¨
 
	mª£rved1
[4];

1352 
u_ch¨
 
	mduøti⁄
[4];

1353 
u_ch¨
 
	mª£rved2
[8];

1354 
u_ch¨
 
	mœyî
[2];

1355 
u_ch¨
 
	mgroup
[2];

1356 
u_ch¨
 
	mvﬁume
[2];

1357 
u_ch¨
 
	mªvîved3
[2];

1358 
u_ch¨
 
	mm©rix
[36];

1359 
u_ch¨
 
	mwidth
[4];

1360 
u_ch¨
 
	mheigth
[4];

1361 } 
	tngx_mp4_tkhd_©om_t
;

1364 
u_ch¨
 
	msize
[4];

1365 
u_ch¨
 
	m«me
[4];

1366 
u_ch¨
 
	mvîsi⁄
[1];

1367 
u_ch¨
 
	mÊags
[3];

1368 
u_ch¨
 
	m¸óti⁄_time
[8];

1369 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1370 
u_ch¨
 
	måack_id
[4];

1371 
u_ch¨
 
	mª£rved1
[4];

1372 
u_ch¨
 
	mduøti⁄
[8];

1373 
u_ch¨
 
	mª£rved2
[8];

1374 
u_ch¨
 
	mœyî
[2];

1375 
u_ch¨
 
	mgroup
[2];

1376 
u_ch¨
 
	mvﬁume
[2];

1377 
u_ch¨
 
	mªvîved3
[2];

1378 
u_ch¨
 
	mm©rix
[36];

1379 
u_ch¨
 
	mwidth
[4];

1380 
u_ch¨
 
	mheigth
[4];

1381 } 
	tngx_mp4_tkhd64_©om_t
;

1384 
ngx_öt_t


1385 
	$ngx_hâp_mp4_ªad_tkhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1387 
u_ch¨
 *
©om_hódî
;

1388 
size_t
 
©om_size
;

1389 
uöt64_t
 
duøti⁄
;

1390 
ngx_buf_t
 *
©om
;

1391 
ngx_hâp_mp4_åak_t
 *
åak
;

1392 
ngx_mp4_tkhd_©om_t
 *
tkhd_©om
;

1393 
ngx_mp4_tkhd64_©om_t
 *
tkhd64_©om
;

1395 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4Åkhdátom");

1397 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1398 
tkhd_©om
 = (
ngx_mp4_tkhd_©om_t
 *Ë
©om_hódî
;

1399 
tkhd64_©om
 = (
ngx_mp4_tkhd64_©om_t
 *Ë
©om_hódî
;

1400 
	`ngx_mp4_£t_©om_«me
(
tkhd_©om
, 't', 'k', 'h', 'd');

1402 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd_©om_t
Ë> 
©om_d©a_size
) {

1403 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1404 "\"%s\" mp4ÅkhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1405  
NGX_ERROR
;

1408 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1410 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
tkhd_©om
->duration);

1415 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_tkhd64_©om_t
Ë> 
©om_d©a_size
) {

1416 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1418 
mp4
->
fûe
.
«me
.
d©a
);

1419  
NGX_ERROR
;

1422 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
tkhd64_©om
->duration);

1425 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1427 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1429 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * mp4->
timesˇÀ
 / 1000;

1431 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1433 
duøti⁄
, (Ëduøti⁄ / 
mp4
->
timesˇÀ
);

1435 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1437 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1438 
åak
->
tkhd_size
 = 
©om_size
;

1440 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
size
, 
©om_size
);

1442 i‡(
tkhd_©om
->
vîsi⁄
[0] == 0) {

1443 
	`ngx_mp4_£t_32vÆue
(
tkhd_©om
->
duøti⁄
, duration);

1446 
	`ngx_mp4_£t_64vÆue
(
tkhd64_©om
->
duøti⁄
, duration);

1449 
©om
 = &
åak
->
tkhd_©om_buf
;

1450 
©om
->
ãmp‹¨y
 = 1;

1451 
©om
->
pos
 = 
©om_hódî
;

1452 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1454 
åak
->
out
[
NGX_HTTP_MP4_TKHD_ATOM
].
buf
 = 
©om
;

1456 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1458  
NGX_OK
;

1459 
	}
}

1462 
ngx_öt_t


1463 
	$ngx_hâp_mp4_ªad_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1465 
u_ch¨
 *
©om_hódî
;

1466 
ngx_buf_t
 *
©om
;

1467 
ngx_hâp_mp4_åak_t
 *
åak
;

1469 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process mdiaátom");

1471 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1472 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'd', 'i', 'a');

1474 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1476 
©om
 = &
åak
->
mdü_©om_buf
;

1477 
©om
->
ãmp‹¨y
 = 1;

1478 
©om
->
pos
 = 
©om_hódî
;

1479 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1481 
åak
->
out
[
NGX_HTTP_MP4_MDIA_ATOM
].
buf
 = 
©om
;

1483  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_mdü_©oms
, 
©om_d©a_size
);

1484 
	}
}

1488 
	$ngx_hâp_mp4_upd©e_mdü_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1489 
ngx_hâp_mp4_åak_t
 *
åak
)

1491 
ngx_buf_t
 *
©om
;

1493 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1494 
©om
 = &
åak
->
mdü_©om_buf
;

1495 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1496 
	}
}

1500 
u_ch¨
 
	msize
[4];

1501 
u_ch¨
 
	m«me
[4];

1502 
u_ch¨
 
	mvîsi⁄
[1];

1503 
u_ch¨
 
	mÊags
[3];

1504 
u_ch¨
 
	m¸óti⁄_time
[4];

1505 
u_ch¨
 
	mmodifiˇti⁄_time
[4];

1506 
u_ch¨
 
	mtimesˇÀ
[4];

1507 
u_ch¨
 
	mduøti⁄
[4];

1508 
u_ch¨
 
	mœnguage
[2];

1509 
u_ch¨
 
	mquÆôy
[2];

1510 } 
	tngx_mp4_mdhd_©om_t
;

1513 
u_ch¨
 
	msize
[4];

1514 
u_ch¨
 
	m«me
[4];

1515 
u_ch¨
 
	mvîsi⁄
[1];

1516 
u_ch¨
 
	mÊags
[3];

1517 
u_ch¨
 
	m¸óti⁄_time
[8];

1518 
u_ch¨
 
	mmodifiˇti⁄_time
[8];

1519 
u_ch¨
 
	mtimesˇÀ
[4];

1520 
u_ch¨
 
	mduøti⁄
[8];

1521 
u_ch¨
 
	mœnguage
[2];

1522 
u_ch¨
 
	mquÆôy
[2];

1523 } 
	tngx_mp4_mdhd64_©om_t
;

1526 
ngx_öt_t


1527 
	$ngx_hâp_mp4_ªad_mdhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1529 
u_ch¨
 *
©om_hódî
;

1530 
size_t
 
©om_size
;

1531 
uöt32_t
 
timesˇÀ
;

1532 
uöt64_t
 
duøti⁄
;

1533 
ngx_buf_t
 *
©om
;

1534 
ngx_hâp_mp4_åak_t
 *
åak
;

1535 
ngx_mp4_mdhd_©om_t
 *
mdhd_©om
;

1536 
ngx_mp4_mdhd64_©om_t
 *
mdhd64_©om
;

1538 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 mdhdátom");

1540 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1541 
mdhd_©om
 = (
ngx_mp4_mdhd_©om_t
 *Ë
©om_hódî
;

1542 
mdhd64_©om
 = (
ngx_mp4_mdhd64_©om_t
 *Ë
©om_hódî
;

1543 
	`ngx_mp4_£t_©om_«me
(
mdhd_©om
, 'm', 'd', 'h', 'd');

1545 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd_©om_t
Ë> 
©om_d©a_size
) {

1546 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1547 "\"%s\" mp4 mdhdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1548  
NGX_ERROR
;

1551 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1553 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->timescale);

1554 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd_©om
->duration);

1559 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_mdhd64_©om_t
Ë> 
©om_d©a_size
) {

1560 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1562 
mp4
->
fûe
.
«me
.
d©a
);

1563  
NGX_ERROR
;

1566 
timesˇÀ
 = 
	`ngx_mp4_gë_32vÆue
(
mdhd64_©om
->timescale);

1567 
duøti⁄
 = 
	`ngx_mp4_gë_64vÆue
(
mdhd64_©om
->duration);

1570 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1572 
timesˇÀ
, 
duøti⁄
, () duration /Åimescale);

1574 
duøti⁄
 -(
uöt64_t
Ë
mp4
->
°¨t
 * 
timesˇÀ
 / 1000;

1576 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1578 
duøti⁄
, (Ëduøti⁄ / 
timesˇÀ
);

1580 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1582 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1583 
åak
->
mdhd_size
 = 
©om_size
;

1584 
åak
->
timesˇÀ
 =Åimescale;

1586 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
size
, 
©om_size
);

1588 i‡(
mdhd_©om
->
vîsi⁄
[0] == 0) {

1589 
	`ngx_mp4_£t_32vÆue
(
mdhd_©om
->
duøti⁄
, duration);

1592 
	`ngx_mp4_£t_64vÆue
(
mdhd64_©om
->
duøti⁄
, duration);

1595 
©om
 = &
åak
->
mdhd_©om_buf
;

1596 
©om
->
ãmp‹¨y
 = 1;

1597 
©om
->
pos
 = 
©om_hódî
;

1598 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1600 
åak
->
out
[
NGX_HTTP_MP4_MDHD_ATOM
].
buf
 = 
©om
;

1602 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1604  
NGX_OK
;

1605 
	}
}

1608 
ngx_öt_t


1609 
	$ngx_hâp_mp4_ªad_hdÃ_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1611 
u_ch¨
 *
©om_hódî
;

1612 
size_t
 
©om_size
;

1613 
ngx_buf_t
 *
©om
;

1614 
ngx_hâp_mp4_åak_t
 *
åak
;

1616 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 hdlrátom");

1618 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1619 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1620 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1621 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'h', 'd', 'l', 'r');

1623 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1625 
©om
 = &
åak
->
hdÃ_©om_buf
;

1626 
©om
->
ãmp‹¨y
 = 1;

1627 
©om
->
pos
 = 
©om_hódî
;

1628 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1630 
åak
->
hdÃ_size
 = 
©om_size
;

1631 
åak
->
out
[
NGX_HTTP_MP4_HDLR_ATOM
].
buf
 = 
©om
;

1633 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1635  
NGX_OK
;

1636 
	}
}

1639 
ngx_öt_t


1640 
	$ngx_hâp_mp4_ªad_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1642 
u_ch¨
 *
©om_hódî
;

1643 
ngx_buf_t
 *
©om
;

1644 
ngx_hâp_mp4_åak_t
 *
åak
;

1646 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process minfátom");

1648 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1649 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'm', 'i', 'n', 'f');

1651 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1653 
©om
 = &
åak
->
möf_©om_buf
;

1654 
©om
->
ãmp‹¨y
 = 1;

1655 
©om
->
pos
 = 
©om_hódî
;

1656 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1658 
åak
->
out
[
NGX_HTTP_MP4_MINF_ATOM
].
buf
 = 
©om
;

1660  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_möf_©oms
, 
©om_d©a_size
);

1661 
	}
}

1665 
	$ngx_hâp_mp4_upd©e_möf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1666 
ngx_hâp_mp4_åak_t
 *
åak
)

1668 
ngx_buf_t
 *
©om
;

1670 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
)

1671 + 
åak
->
vmhd_size


1672 + 
åak
->
smhd_size


1673 + 
åak
->
döf_size
;

1674 
©om
 = &
åak
->
möf_©om_buf
;

1675 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1676 
	}
}

1679 
ngx_öt_t


1680 
	$ngx_hâp_mp4_ªad_vmhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1682 
u_ch¨
 *
©om_hódî
;

1683 
size_t
 
©om_size
;

1684 
ngx_buf_t
 *
©om
;

1685 
ngx_hâp_mp4_åak_t
 *
åak
;

1687 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 vmhdátom");

1689 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1690 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1691 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1692 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'v', 'm', 'h', 'd');

1694 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1696 
©om
 = &
åak
->
vmhd_©om_buf
;

1697 
©om
->
ãmp‹¨y
 = 1;

1698 
©om
->
pos
 = 
©om_hódî
;

1699 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1701 
åak
->
vmhd_size
 +
©om_size
;

1702 
åak
->
out
[
NGX_HTTP_MP4_VMHD_ATOM
].
buf
 = 
©om
;

1704 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1706  
NGX_OK
;

1707 
	}
}

1710 
ngx_öt_t


1711 
	$ngx_hâp_mp4_ªad_smhd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1713 
u_ch¨
 *
©om_hódî
;

1714 
size_t
 
©om_size
;

1715 
ngx_buf_t
 *
©om
;

1716 
ngx_hâp_mp4_åak_t
 *
åak
;

1718 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 smhdátom");

1720 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1721 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1722 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1723 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 'm', 'h', 'd');

1725 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1727 
©om
 = &
åak
->
smhd_©om_buf
;

1728 
©om
->
ãmp‹¨y
 = 1;

1729 
©om
->
pos
 = 
©om_hódî
;

1730 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1732 
åak
->
vmhd_size
 +
©om_size
;

1733 
åak
->
out
[
NGX_HTTP_MP4_SMHD_ATOM
].
buf
 = 
©om
;

1735 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1737  
NGX_OK
;

1738 
	}
}

1741 
ngx_öt_t


1742 
	$ngx_hâp_mp4_ªad_döf_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1744 
u_ch¨
 *
©om_hódî
;

1745 
size_t
 
©om_size
;

1746 
ngx_buf_t
 *
©om
;

1747 
ngx_hâp_mp4_åak_t
 *
åak
;

1749 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 dinfátom");

1751 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1752 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1753 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

1754 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 'd', 'i', 'n', 'f');

1756 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1758 
©om
 = &
åak
->
döf_©om_buf
;

1759 
©om
->
ãmp‹¨y
 = 1;

1760 
©om
->
pos
 = 
©om_hódî
;

1761 
©om
->
œ°
 = 
©om_hódî
 + 
©om_size
;

1763 
åak
->
döf_size
 +
©om_size
;

1764 
åak
->
out
[
NGX_HTTP_MP4_DINF_ATOM
].
buf
 = 
©om
;

1766 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1768  
NGX_OK
;

1769 
	}
}

1772 
ngx_öt_t


1773 
	$ngx_hâp_mp4_ªad_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1775 
u_ch¨
 *
©om_hódî
;

1776 
ngx_buf_t
 *
©om
;

1777 
ngx_hâp_mp4_åak_t
 *
åak
;

1779 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "process stblátom");

1781 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1782 
	`ngx_mp4_£t_©om_«me
(
©om_hódî
, 's', 't', 'b', 'l');

1784 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1786 
©om
 = &
åak
->
°bl_©om_buf
;

1787 
©om
->
ãmp‹¨y
 = 1;

1788 
©om
->
pos
 = 
©om_hódî
;

1789 
©om
->
œ°
 = 
©om_hódî
 + (
ngx_mp4_©om_hódî_t
);

1791 
åak
->
out
[
NGX_HTTP_MP4_STBL_ATOM
].
buf
 = 
©om
;

1793  
	`ngx_hâp_mp4_ªad_©om
(
mp4
, 
ngx_hâp_mp4_°bl_©oms
, 
©om_d©a_size
);

1794 
	}
}

1798 
	$ngx_hâp_mp4_upd©e_°bl_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1799 
ngx_hâp_mp4_åak_t
 *
åak
)

1801 
ngx_buf_t
 *
©om
;

1803 
åak
->
size
 +(
ngx_mp4_©om_hódî_t
);

1804 
©om
 = &
åak
->
°bl_©om_buf
;

1805 
	`ngx_mp4_£t_32vÆue
(
©om
->
pos
, 
åak
->
size
);

1806 
	}
}

1810 
u_ch¨
 
	msize
[4];

1811 
u_ch¨
 
	m«me
[4];

1812 
u_ch¨
 
	mvîsi⁄
[1];

1813 
u_ch¨
 
	mÊags
[3];

1814 
u_ch¨
 
	míåõs
[4];

1816 
u_ch¨
 
	mmedü_size
[4];

1817 
u_ch¨
 
	mmedü_«me
[4];

1818 } 
	tngx_mp4_°sd_©om_t
;

1821 
ngx_öt_t


1822 
	$ngx_hâp_mp4_ªad_°sd_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1824 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
;

1825 
size_t
 
©om_size
;

1826 
ngx_buf_t
 *
©om
;

1827 
ngx_mp4_°sd_©om_t
 *
°sd_©om
;

1828 
ngx_hâp_mp4_åak_t
 *
åak
;

1832 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stsdátom");

1834 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1835 
°sd_©om
 = (
ngx_mp4_°sd_©om_t
 *Ë
©om_hódî
;

1836 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

1837 
©om_èbÀ
 = 
©om_hódî
 + 
©om_size
;

1838 
	`ngx_mp4_£t_32vÆue
(
°sd_©om
->
size
, 
©om_size
);

1839 
	`ngx_mp4_£t_©om_«me
(
°sd_©om
, 's', 't', 's', 'd');

1841 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sd_©om_t
Ë> 
©om_d©a_size
) {

1842 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1843 "\"%s\" mp4 stsdátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1844  
NGX_ERROR
;

1847 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1849 
	`ngx_mp4_gë_32vÆue
(
°sd_©om
->
íåõs
),

1850 4, 
°sd_©om
->
medü_«me
);

1852 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1854 
©om
 = &
åak
->
°sd_©om_buf
;

1855 
©om
->
ãmp‹¨y
 = 1;

1856 
©om
->
pos
 = 
©om_hódî
;

1857 
©om
->
œ°
 = 
©om_èbÀ
;

1859 
åak
->
out
[
NGX_HTTP_MP4_STSD_ATOM
].
buf
 = 
©om
;

1860 
åak
->
size
 +
©om_size
;

1862 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1864  
NGX_OK
;

1865 
	}
}

1869 
u_ch¨
 
	msize
[4];

1870 
u_ch¨
 
	m«me
[4];

1871 
u_ch¨
 
	mvîsi⁄
[1];

1872 
u_ch¨
 
	mÊags
[3];

1873 
u_ch¨
 
	míåõs
[4];

1874 } 
	tngx_mp4_°ts_©om_t
;

1877 
u_ch¨
 
	mcou¡
[4];

1878 
u_ch¨
 
	mduøti⁄
[4];

1879 } 
	tngx_mp4_°ts_íåy_t
;

1882 
ngx_öt_t


1883 
	$ngx_hâp_mp4_ªad_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

1885 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

1886 
uöt32_t
 
íåõs
;

1887 
ngx_buf_t
 *
©om
, *
d©a
;

1888 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1889 
ngx_hâp_mp4_åak_t
 *
åak
;

1893 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 sttsátom");

1895 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

1896 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om_hódî
;

1897 
	`ngx_mp4_£t_©om_«me
(
°ts_©om
, 's', 't', 't', 's');

1899 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
Ë> 
©om_d©a_size
) {

1900 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1901 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1902  
NGX_ERROR
;

1905 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ts_©om
->entries);

1907 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1908 "mp4Åime-to-ßm∂êíåõs:%uD", 
íåõs
);

1910 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°ts_©om_t
)

1911 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
Ë> 
©om_d©a_size
)

1913 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1914 "\"%s\" mp4 sâ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

1915  
NGX_ERROR
;

1918 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°ts_©om_t
);

1919 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°ts_íåy_t
);

1921 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

1922 
åak
->
time_to_ßm∂e_íåõs
 = 
íåõs
;

1924 
©om
 = &
åak
->
°ts_©om_buf
;

1925 
©om
->
ãmp‹¨y
 = 1;

1926 
©om
->
pos
 = 
©om_hódî
;

1927 
©om
->
œ°
 = 
©om_èbÀ
;

1929 
d©a
 = &
åak
->
°ts_d©a_buf
;

1930 
d©a
->
ãmp‹¨y
 = 1;

1931 
d©a
->
pos
 = 
©om_èbÀ
;

1932 
d©a
->
œ°
 = 
©om_íd
;

1934 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
 = 
©om
;

1935 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
 = 
d©a
;

1937 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

1939  
NGX_OK
;

1940 
	}
}

1943 
ngx_öt_t


1944 
	$ngx_hâp_mp4_upd©e_°ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

1945 
ngx_hâp_mp4_åak_t
 *
åak
)

1947 
size_t
 
©om_size
;

1948 
uöt32_t
 
íåõs
, 
cou¡
, 
duøti⁄
;

1949 
uöt64_t
 
°¨t_time
;

1950 
ngx_buf_t
 *
©om
, *
d©a
;

1951 
ngx_uöt_t
 
°¨t_ßm∂e
;

1952 
ngx_mp4_°ts_©om_t
 *
°ts_©om
;

1953 
ngx_mp4_°ts_íåy_t
 *
íåy
, *
íd
;

1960 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1963 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_DATA
].
buf
;

1965 i‡(
d©a
 =
NULL
) {

1966 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

1968 
mp4
->
fûe
.
«me
.
d©a
);

1969  
NGX_ERROR
;

1972 
íåõs
 = 
åak
->
time_to_ßm∂e_íåõs
;

1973 
°¨t_time
 = (
uöt64_t
Ë
mp4
->
°¨t
 * 
åak
->
timesˇÀ
 / 1000;

1975 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1976 "time-to-ßm∂ê°¨t_time:%uL", 
°¨t_time
);

1978 
°¨t_ßm∂e
 = 0;

1979 
íåy
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
pos
;

1980 
íd
 = (
ngx_mp4_°ts_íåy_t
 *Ë
d©a
->
œ°
;

1982 
íåy
 < 
íd
) {

1983 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

1984 
duøti⁄
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->duration);

1986 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

1987 "cou¡:%uD, duøti⁄:%uD", 
cou¡
, 
duøti⁄
);

1989 i‡(
°¨t_time
 < (
uöt64_t
Ë
cou¡
 * 
duøti⁄
) {

1990 
°¨t_ßm∂e
 +(
ngx_uöt_t
Ë(
°¨t_time
 / 
duøti⁄
);

1991 
cou¡
 -(
uöt32_t
Ë(
°¨t_time
 / 
duøti⁄
);

1992 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

1993 
found
;

1996 
°¨t_ßm∂e
 +
cou¡
;

1997 
°¨t_time
 -
cou¡
 * 
duøti⁄
;

1998 
íåõs
--;

1999 
íåy
++;

2002 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2004 
mp4
->
fûe
.
«me
.
d©a
);

2006  
NGX_ERROR
;

2008 
found
:

2010 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2011 "°¨t_ßm∂e:%ui,Çew cou¡:%uD", 
°¨t_ßm∂e
, 
cou¡
);

2013 
åak
->
°¨t_ßm∂e
 = start_sample;

2015 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2016 
©om_size
 = (
ngx_mp4_°ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2017 
åak
->
size
 +
©om_size
;

2019 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STTS_ATOM
].
buf
;

2020 
°ts_©om
 = (
ngx_mp4_°ts_©om_t
 *Ë
©om
->
pos
;

2021 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
size
, 
©om_size
);

2022 
	`ngx_mp4_£t_32vÆue
(
°ts_©om
->
íåõs
,Éntries);

2024  
NGX_OK
;

2025 
	}
}

2029 
u_ch¨
 
	msize
[4];

2030 
u_ch¨
 
	m«me
[4];

2031 
u_ch¨
 
	mvîsi⁄
[1];

2032 
u_ch¨
 
	mÊags
[3];

2033 
u_ch¨
 
	míåõs
[4];

2034 } 
	tngx_hâp_mp4_°ss_©om_t
;

2037 
ngx_öt_t


2038 
	$ngx_hâp_mp4_ªad_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2040 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2041 
uöt32_t
 
íåõs
;

2042 
ngx_buf_t
 *
©om
, *
d©a
;

2043 
ngx_hâp_mp4_åak_t
 *
åak
;

2044 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2048 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stssátom");

2050 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2051 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om_hódî
;

2052 
	`ngx_mp4_£t_©om_«me
(
°ss_©om
, 's', 't', 's', 's');

2054 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
Ë> 
©om_d©a_size
) {

2055 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2056 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2057  
NGX_ERROR
;

2060 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°ss_©om
->entries);

2062 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2063 "syn¯ßm∂êíåõs:%uD", 
íåõs
);

2065 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2066 
åak
->
sync_ßm∂es_íåõs
 = 
íåõs
;

2068 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_hâp_mp4_°ss_©om_t
);

2070 
©om
 = &
åak
->
°ss_©om_buf
;

2071 
©om
->
ãmp‹¨y
 = 1;

2072 
©om
->
pos
 = 
©om_hódî
;

2073 
©om
->
œ°
 = 
©om_èbÀ
;

2075 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_hâp_mp4_°ss_©om_t
)

2076 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2078 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2079 "\"%s\" mp4 sts†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2080  
NGX_ERROR
;

2083 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2085 
d©a
 = &
åak
->
°ss_d©a_buf
;

2086 
d©a
->
ãmp‹¨y
 = 1;

2087 
d©a
->
pos
 = 
©om_èbÀ
;

2088 
d©a
->
œ°
 = 
©om_íd
;

2090 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
 = 
©om
;

2091 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
 = 
d©a
;

2093 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2095  
NGX_OK
;

2096 
	}
}

2099 
ngx_öt_t


2100 
	$ngx_hâp_mp4_upd©e_°ss_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2101 
ngx_hâp_mp4_åak_t
 *
åak
)

2103 
size_t
 
©om_size
;

2104 
uöt32_t
 
íåõs
, 
ßm∂e
, 
°¨t_ßm∂e
, *
íåy
, *
íd
;

2105 
ngx_buf_t
 *
©om
, *
d©a
;

2106 
ngx_hâp_mp4_°ss_©om_t
 *
°ss_©om
;

2114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2117 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_DATA
].
buf
;

2119 i‡(
d©a
 =
NULL
) {

2120  
NGX_OK
;

2124 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2125 
íåõs
 = 
åak
->
sync_ßm∂es_íåõs
;

2127 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2128 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2130 
íåy
 < 
íd
) {

2131 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2134 "°¨t:%uD, sync:%uD", 
°¨t_ßm∂e
, 
ßm∂e
);

2136 i‡(
ßm∂e
 >
°¨t_ßm∂e
) {

2137 
found
;

2140 
íåõs
--;

2141 
íåy
++;

2144 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2146 
mp4
->
fûe
.
«me
.
d©a
);

2148  
NGX_ERROR
;

2150 
found
:

2152 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2154 
°¨t_ßm∂e
 = 
åak
->start_sample;

2156 
íåy
 < 
íd
) {

2157 
ßm∂e
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2158 
ßm∂e
 -
°¨t_ßm∂e
;

2159 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
ßm∂e
);

2160 
íåy
++;

2163 
©om_size
 = (
ngx_hâp_mp4_°ss_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2164 
åak
->
size
 +
©om_size
;

2166 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSS_ATOM
].
buf
;

2167 
°ss_©om
 = (
ngx_hâp_mp4_°ss_©om_t
 *Ë
©om
->
pos
;

2169 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
size
, 
©om_size
);

2170 
	`ngx_mp4_£t_32vÆue
(
°ss_©om
->
íåõs
,Éntries);

2172  
NGX_OK
;

2173 
	}
}

2177 
u_ch¨
 
	msize
[4];

2178 
u_ch¨
 
	m«me
[4];

2179 
u_ch¨
 
	mvîsi⁄
[1];

2180 
u_ch¨
 
	mÊags
[3];

2181 
u_ch¨
 
	míåõs
[4];

2182 } 
	tngx_mp4_˘ts_©om_t
;

2185 
u_ch¨
 
	mcou¡
[4];

2186 
u_ch¨
 
	moff£t
[4];

2187 } 
	tngx_mp4_˘ts_íåy_t
;

2190 
ngx_öt_t


2191 
	$ngx_hâp_mp4_ªad_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2193 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2194 
uöt32_t
 
íåõs
;

2195 
ngx_buf_t
 *
©om
, *
d©a
;

2196 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2197 
ngx_hâp_mp4_åak_t
 *
åak
;

2201 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 cttsátom");

2203 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2204 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om_hódî
;

2205 
	`ngx_mp4_£t_©om_«me
(
˘ts_©om
, 'c', 't', 't', 's');

2207 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
Ë> 
©om_d©a_size
) {

2208 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2209 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2210  
NGX_ERROR
;

2213 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
˘ts_©om
->entries);

2215 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2216 "composôi⁄ off£àíåõs:%uD", 
íåõs
);

2218 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2219 
åak
->
composôi⁄_off£t_íåõs
 = 
íåõs
;

2221 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_˘ts_©om_t
);

2223 
©om
 = &
åak
->
˘ts_©om_buf
;

2224 
©om
->
ãmp‹¨y
 = 1;

2225 
©om
->
pos
 = 
©om_hódî
;

2226 
©om
->
œ°
 = 
©om_èbÀ
;

2228 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_˘ts_©om_t
)

2229 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
Ë> 
©om_d©a_size
)

2231 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2232 "\"%s\" mp4 câ†©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2233  
NGX_ERROR
;

2236 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_˘ts_íåy_t
);

2238 
d©a
 = &
åak
->
˘ts_d©a_buf
;

2239 
d©a
->
ãmp‹¨y
 = 1;

2240 
d©a
->
pos
 = 
©om_èbÀ
;

2241 
d©a
->
œ°
 = 
©om_íd
;

2243 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
©om
;

2244 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
d©a
;

2246 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2248  
NGX_OK
;

2249 
	}
}

2253 
	$ngx_hâp_mp4_upd©e_˘ts_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2254 
ngx_hâp_mp4_åak_t
 *
åak
)

2256 
size_t
 
©om_size
;

2257 
uöt32_t
 
íåõs
, 
cou¡
, 
°¨t_ßm∂e
;

2258 
ngx_buf_t
 *
©om
, *
d©a
;

2259 
ngx_mp4_˘ts_©om_t
 *
˘ts_©om
;

2260 
ngx_mp4_˘ts_íåy_t
 *
íåy
, *
íd
;

2268 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2271 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
;

2273 i‡(
d©a
 =
NULL
) {

2278 
°¨t_ßm∂e
 = 
åak
->start_sample + 1;

2279 
íåõs
 = 
åak
->
composôi⁄_off£t_íåõs
;

2280 
íåy
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
pos
;

2281 
íd
 = (
ngx_mp4_˘ts_íåy_t
 *Ë
d©a
->
œ°
;

2283 
íåy
 < 
íd
) {

2284 
cou¡
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->count);

2286 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2288 
°¨t_ßm∂e
, 
cou¡
, 
	`ngx_mp4_gë_32vÆue
(
íåy
->
off£t
));

2290 i‡(
°¨t_ßm∂e
 <
cou¡
) {

2291 
cou¡
 -(
°¨t_ßm∂e
 - 1);

2292 
	`ngx_mp4_£t_32vÆue
(
íåy
->
cou¡
, count);

2293 
found
;

2296 
°¨t_ßm∂e
 -
cou¡
;

2297 
íåõs
--;

2298 
íåy
++;

2301 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
 = 
NULL
;

2302 
åak
->
out
[
NGX_HTTP_MP4_CTTS_DATA
].
buf
 = 
NULL
;

2306 
found
:

2308 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2309 
©om_size
 = (
ngx_mp4_˘ts_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2310 
åak
->
size
 +
©om_size
;

2312 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CTTS_ATOM
].
buf
;

2313 
˘ts_©om
 = (
ngx_mp4_˘ts_©om_t
 *Ë
©om
->
pos
;

2315 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
size
, 
©om_size
);

2316 
	`ngx_mp4_£t_32vÆue
(
˘ts_©om
->
íåõs
,Éntries);

2319 
	}
}

2323 
u_ch¨
 
	msize
[4];

2324 
u_ch¨
 
	m«me
[4];

2325 
u_ch¨
 
	mvîsi⁄
[1];

2326 
u_ch¨
 
	mÊags
[3];

2327 
u_ch¨
 
	míåõs
[4];

2328 } 
	tngx_mp4_°sc_©om_t
;

2331 
ngx_öt_t


2332 
	$ngx_hâp_mp4_ªad_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2334 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2335 
uöt32_t
 
íåõs
;

2336 
ngx_buf_t
 *
©om
, *
d©a
;

2337 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2338 
ngx_hâp_mp4_åak_t
 *
åak
;

2342 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stscátom");

2344 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2345 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om_hódî
;

2346 
	`ngx_mp4_£t_©om_«me
(
°sc_©om
, 's', 't', 's', 'c');

2348 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
Ë> 
©om_d©a_size
) {

2349 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2350 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2351  
NGX_ERROR
;

2354 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sc_©om
->entries);

2356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2357 "ßm∂e-to-chunkÉ¡rõs:%uD", 
íåõs
);

2359 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sc_©om_t
)

2360 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
Ë> 
©om_d©a_size
)

2362 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2363 "\"%s\" mp4 sts¯©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2364  
NGX_ERROR
;

2367 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sc_©om_t
);

2368 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
ngx_mp4_°sc_íåy_t
);

2370 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2371 
åak
->
ßm∂e_to_chunk_íåõs
 = 
íåõs
;

2373 
©om
 = &
åak
->
°sc_©om_buf
;

2374 
©om
->
ãmp‹¨y
 = 1;

2375 
©om
->
pos
 = 
©om_hódî
;

2376 
©om
->
œ°
 = 
©om_èbÀ
;

2378 
d©a
 = &
åak
->
°sc_d©a_buf
;

2379 
d©a
->
ãmp‹¨y
 = 1;

2380 
d©a
->
pos
 = 
©om_èbÀ
;

2381 
d©a
->
œ°
 = 
©om_íd
;

2383 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
 = 
©om
;

2384 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
 = 
d©a
;

2386 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2388  
NGX_OK
;

2389 
	}
}

2392 
ngx_öt_t


2393 
	$ngx_hâp_mp4_upd©e_°sc_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2394 
ngx_hâp_mp4_åak_t
 *
åak
)

2396 
size_t
 
©om_size
;

2397 
uöt32_t
 
°¨t_ßm∂e
, 
íåõs
, 
chunk
, 
ßm∂es
, 
id
,

2398 
√xt_chunk
, 
n
;

2399 
ngx_buf_t
 *
©om
, *
d©a
, *
buf
;

2400 
ngx_mp4_°sc_©om_t
 *
°sc_©om
;

2401 
ngx_mp4_°sc_íåy_t
 *
íåy
, *
fú°
, *
íd
;

2409 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2412 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_DATA
].
buf
;

2414 i‡(
d©a
 =
NULL
) {

2415 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2417 
mp4
->
fûe
.
«me
.
d©a
);

2418  
NGX_ERROR
;

2421 i‡(
åak
->
ßm∂e_to_chunk_íåõs
 == 0) {

2422 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2424 
mp4
->
fûe
.
«me
.
d©a
);

2425  
NGX_ERROR
;

2428 
°¨t_ßm∂e
 = (
uöt32_t
Ë
åak
->start_sample;

2429 
íåõs
 = 
åak
->
ßm∂e_to_chunk_íåõs
 - 1;

2431 
íåy
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
pos
;

2432 
íd
 = (
ngx_mp4_°sc_íåy_t
 *Ë
d©a
->
œ°
;

2434 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2435 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2436 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2437 
íåy
++;

2439 
íåy
 < 
íd
) {

2441 
√xt_chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->
chunk
);

2443 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2446 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
, 
id
);

2448 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2450 i‡(
°¨t_ßm∂e
 <
n
) {

2451 
found
;

2454 
°¨t_ßm∂e
 -
n
;

2456 
chunk
 = 
√xt_chunk
;

2457 
ßm∂es
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->samples);

2458 
id
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->id);

2459 
íåõs
--;

2460 
íåy
++;

2463 
√xt_chunk
 = 
åak
->
chunks
;

2465 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2467 
°¨t_ßm∂e
, 
chunk
, 
√xt_chunk
 - chunk, 
ßm∂es
);

2469 
n
 = (
√xt_chunk
 - 
chunk
Ë* 
ßm∂es
;

2471 i‡(
°¨t_ßm∂e
 > 
n
) {

2472 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2474 
mp4
->
fûe
.
«me
.
d©a
);

2475  
NGX_ERROR
;

2478 
found
:

2480 
íåõs
++;

2481 
íåy
--;

2483 i‡(
ßm∂es
 == 0) {

2484 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2486 
mp4
->
fûe
.
«me
.
d©a
);

2487  
NGX_ERROR
;

2490 
åak
->
°¨t_chunk
 = 
chunk
 - 1;

2492 
åak
->
°¨t_chunk
 +
°¨t_ßm∂e
 / 
ßm∂es
;

2493 
åak
->
chunk_ßm∂es
 = 
°¨t_ßm∂e
 % 
ßm∂es
;

2495 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2497 
åak
->
°¨t_chunk
,Åøk->
chunk_ßm∂es
);

2499 
d©a
->
pos
 = (
u_ch¨
 *Ë
íåy
;

2500 
©om_size
 = (
ngx_mp4_°sc_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2502 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 1);

2504 i‡(
åak
->
chunk_ßm∂es
 && 
√xt_chunk
 -Åøk->
°¨t_chunk
 == 2) {

2508 
	`ngx_mp4_£t_32vÆue
(
íåy
->
ßm∂es
, sam∂e†- 
åak
->
chunk_ßm∂es
);

2510 } i‡(
åak
->
chunk_ßm∂es
) {

2512 
fú°
 = &
åak
->
°sc_chunk_íåy
;

2513 
	`ngx_mp4_£t_32vÆue
(
fú°
->
chunk
, 1);

2514 
	`ngx_mp4_£t_32vÆue
(
fú°
->
ßm∂es
, sam∂e†- 
åak
->
chunk_ßm∂es
);

2515 
	`ngx_mp4_£t_32vÆue
(
fú°
->
id
, id);

2517 
buf
 = &
åak
->
°sc_chunk_buf
;

2518 
buf
->
ãmp‹¨y
 = 1;

2519 
buf
->
pos
 = (
u_ch¨
 *Ë
fú°
;

2520 
buf
->
œ°
 = (
u_ch¨
 *Ë
fú°
 + (
ngx_mp4_°sc_íåy_t
);

2522 
åak
->
out
[
NGX_HTTP_MP4_STSC_CHUNK
].
buf
 = buf;

2524 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, 2);

2526 
íåõs
++;

2527 
©om_size
 +(
ngx_mp4_°sc_íåy_t
);

2530 ++
íåy
 < 
íd
) {

2531 
chunk
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
->chunk);

2532 
chunk
 -
åak
->
°¨t_chunk
;

2533 
	`ngx_mp4_£t_32vÆue
(
íåy
->
chunk
, chunk);

2536 
åak
->
size
 +
©om_size
;

2538 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSC_ATOM
].
buf
;

2539 
°sc_©om
 = (
ngx_mp4_°sc_©om_t
 *Ë
©om
->
pos
;

2541 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
size
, 
©om_size
);

2542 
	`ngx_mp4_£t_32vÆue
(
°sc_©om
->
íåõs
,Éntries);

2544  
NGX_OK
;

2545 
	}
}

2549 
u_ch¨
 
	msize
[4];

2550 
u_ch¨
 
	m«me
[4];

2551 
u_ch¨
 
	mvîsi⁄
[1];

2552 
u_ch¨
 
	mÊags
[3];

2553 
u_ch¨
 
	munif‹m_size
[4];

2554 
u_ch¨
 
	míåõs
[4];

2555 } 
	tngx_mp4_°sz_©om_t
;

2558 
ngx_öt_t


2559 
	$ngx_hâp_mp4_ªad_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2561 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2562 
size_t
 
©om_size
;

2563 
uöt32_t
 
íåõs
, 
size
;

2564 
ngx_buf_t
 *
©om
, *
d©a
;

2565 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2566 
ngx_hâp_mp4_åak_t
 *
åak
;

2570 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stszátom");

2572 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2573 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om_hódî
;

2574 
	`ngx_mp4_£t_©om_«me
(
°sz_©om
, 's', 't', 's', 'z');

2576 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
Ë> 
©om_d©a_size
) {

2577 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2578 "\"%s\" mp4 stszátomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2579  
NGX_ERROR
;

2582 
size
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->
unif‹m_size
);

2583 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°sz_©om
->entries);

2585 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2586 "ßm∂êunif‹m size:%uD,É¡rõs:%uD", 
size
, 
íåõs
);

2588 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2589 
åak
->
ßm∂e_sizes_íåõs
 = 
íåõs
;

2591 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°sz_©om_t
);

2593 
©om
 = &
åak
->
°sz_©om_buf
;

2594 
©om
->
ãmp‹¨y
 = 1;

2595 
©om
->
pos
 = 
©om_hódî
;

2596 
©om
->
œ°
 = 
©om_èbÀ
;

2598 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
 = 
©om
;

2600 i‡(
size
 == 0) {

2601 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°sz_©om_t
)

2602 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2604 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2606 
mp4
->
fûe
.
«me
.
d©a
);

2607  
NGX_ERROR
;

2610 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2612 
d©a
 = &
åak
->
°sz_d©a_buf
;

2613 
d©a
->
ãmp‹¨y
 = 1;

2614 
d©a
->
pos
 = 
©om_èbÀ
;

2615 
d©a
->
œ°
 = 
©om_íd
;

2617 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
 = 
d©a
;

2622 
©om_size
 = (
ngx_mp4_©om_hódî_t
Ë+ (
size_t
Ë
©om_d©a_size
;

2623 
	`ngx_mp4_£t_32vÆue
(
©om_hódî
, 
©om_size
);

2624 
åak
->
size
 +
©om_size
;

2627 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2629  
NGX_OK
;

2630 
	}
}

2633 
ngx_öt_t


2634 
	$ngx_hâp_mp4_upd©e_°sz_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2635 
ngx_hâp_mp4_åak_t
 *
åak
)

2637 
size_t
 
©om_size
;

2638 
uöt32_t
 *
pos
, *
íd
;

2639 
ngx_buf_t
 *
©om
, *
d©a
;

2640 
ngx_mp4_°sz_©om_t
 *
°sz_©om
;

2648 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2651 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_DATA
].
buf
;

2653 i‡(
d©a
) {

2654 i‡(
åak
->
°¨t_ßm∂e
 >Åøk->
ßm∂e_sizes_íåõs
) {

2655 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2657 
mp4
->
fûe
.
«me
.
d©a
);

2658  
NGX_ERROR
;

2661 
d©a
->
pos
 +
åak
->
°¨t_ßm∂e
 * (
uöt32_t
);

2662 
íd
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2664 
pos
 = 
íd
 - 
åak
->
chunk_ßm∂es
;Öos <Énd;Öos++) {

2665 
åak
->
chunk_ßm∂es_size
 +
	`ngx_mp4_gë_32vÆue
(
pos
);

2668 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2669 "chunk sam∂e†sizes:%uL", 
åak
->
chunk_ßm∂es_size
);

2671 
©om_size
 = (
ngx_mp4_°sz_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2672 
åak
->
size
 +
©om_size
;

2674 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STSZ_ATOM
].
buf
;

2675 
°sz_©om
 = (
ngx_mp4_°sz_©om_t
 *Ë
©om
->
pos
;

2677 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
size
, 
©om_size
);

2678 
	`ngx_mp4_£t_32vÆue
(
°sz_©om
->
íåõs
,

2679 
åak
->
ßm∂e_sizes_íåõs
 -Åøk->
°¨t_ßm∂e
);

2682  
NGX_OK
;

2683 
	}
}

2687 
u_ch¨
 
	msize
[4];

2688 
u_ch¨
 
	m«me
[4];

2689 
u_ch¨
 
	mvîsi⁄
[1];

2690 
u_ch¨
 
	mÊags
[3];

2691 
u_ch¨
 
	míåõs
[4];

2692 } 
	tngx_mp4_°co_©om_t
;

2695 
ngx_öt_t


2696 
	$ngx_hâp_mp4_ªad_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2698 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2699 
uöt32_t
 
íåõs
;

2700 
ngx_buf_t
 *
©om
, *
d©a
;

2701 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2702 
ngx_hâp_mp4_åak_t
 *
åak
;

2706 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 stcoátom");

2708 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2709 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om_hódî
;

2710 
	`ngx_mp4_£t_©om_«me
(
°co_©om
, 's', 't', 'c', 'o');

2712 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
Ë> 
©om_d©a_size
) {

2713 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2714 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2715  
NGX_ERROR
;

2718 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
°co_©om
->entries);

2720 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2722 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_°co_©om_t
)

2723 + 
íåõs
 * (
uöt32_t
Ë> 
©om_d©a_size
)

2725 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2726 "\"%s\" mp4 stcÿ©omÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2727  
NGX_ERROR
;

2730 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_°co_©om_t
);

2731 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt32_t
);

2733 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2734 
åak
->
chunks
 = 
íåõs
;

2736 
©om
 = &
åak
->
°co_©om_buf
;

2737 
©om
->
ãmp‹¨y
 = 1;

2738 
©om
->
pos
 = 
©om_hódî
;

2739 
©om
->
œ°
 = 
©om_èbÀ
;

2741 
d©a
 = &
åak
->
°co_d©a_buf
;

2742 
d©a
->
ãmp‹¨y
 = 1;

2743 
d©a
->
pos
 = 
©om_èbÀ
;

2744 
d©a
->
œ°
 = 
©om_íd
;

2746 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
 = 
©om
;

2747 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
 = 
d©a
;

2749 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2751  
NGX_OK
;

2752 
	}
}

2755 
ngx_öt_t


2756 
	$ngx_hâp_mp4_upd©e_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2757 
ngx_hâp_mp4_åak_t
 *
åak
)

2759 
size_t
 
©om_size
;

2760 
ngx_buf_t
 *
©om
, *
d©a
;

2761 
ngx_mp4_°co_©om_t
 *
°co_©om
;

2769 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2772 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2774 i‡(
d©a
 =
NULL
) {

2775 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2777 
mp4
->
fûe
.
«me
.
d©a
);

2778  
NGX_ERROR
;

2781 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2782 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2784 
mp4
->
fûe
.
«me
.
d©a
);

2785  
NGX_ERROR
;

2788 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt32_t
);

2789 
©om_size
 = (
ngx_mp4_°co_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2790 
åak
->
size
 +
©om_size
;

2792 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_32vÆue
(
d©a
->
pos
);

2793 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2794 
	`ngx_mp4_£t_32vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2796 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2797 "°¨àchunk off£t:%uD", 
åak
->
°¨t_off£t
);

2799 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_ATOM
].
buf
;

2800 
°co_©om
 = (
ngx_mp4_°co_©om_t
 *Ë
©om
->
pos
;

2802 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
size
, 
©om_size
);

2803 
	`ngx_mp4_£t_32vÆue
(
°co_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2805  
NGX_OK
;

2806 
	}
}

2810 
	$ngx_hâp_mp4_adju°_°co_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2811 
ngx_hâp_mp4_åak_t
 *
åak
, 
öt32_t
 
adju°mít
)

2813 
uöt32_t
 
off£t
, *
íåy
, *
íd
;

2814 
ngx_buf_t
 *
d©a
;

2821 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2824 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_STCO_DATA
].
buf
;

2825 
íåy
 = (
uöt32_t
 *Ë
d©a
->
pos
;

2826 
íd
 = (
uöt32_t
 *Ë
d©a
->
œ°
;

2828 
íåy
 < 
íd
) {

2829 
off£t
 = 
	`ngx_mp4_gë_32vÆue
(
íåy
);

2830 
off£t
 +
adju°mít
;

2831 
	`ngx_mp4_£t_32vÆue
(
íåy
, 
off£t
);

2832 
íåy
++;

2834 
	}
}

2838 
u_ch¨
 
	msize
[4];

2839 
u_ch¨
 
	m«me
[4];

2840 
u_ch¨
 
	mvîsi⁄
[1];

2841 
u_ch¨
 
	mÊags
[3];

2842 
u_ch¨
 
	míåõs
[4];

2843 } 
	tngx_mp4_co64_©om_t
;

2846 
ngx_öt_t


2847 
	$ngx_hâp_mp4_ªad_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
, 
uöt64_t
 
©om_d©a_size
)

2849 
u_ch¨
 *
©om_hódî
, *
©om_èbÀ
, *
©om_íd
;

2850 
uöt32_t
 
íåõs
;

2851 
ngx_buf_t
 *
©om
, *
d©a
;

2852 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2853 
ngx_hâp_mp4_åak_t
 *
åak
;

2857 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "mp4 co64átom");

2859 
©om_hódî
 = 
	`ngx_mp4_©om_hódî
(
mp4
);

2860 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om_hódî
;

2861 
	`ngx_mp4_£t_©om_«me
(
co64_©om
, 'c', 'o', '6', '4');

2863 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
Ë> 
©om_d©a_size
) {

2864 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2865 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2866  
NGX_ERROR
;

2869 
íåõs
 = 
	`ngx_mp4_gë_32vÆue
(
co64_©om
->entries);

2871 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0, "chunks:%uD", 
íåõs
);

2873 i‡(
	`ngx_mp4_©om_d©a_size
(
ngx_mp4_co64_©om_t
)

2874 + 
íåõs
 * (
uöt64_t
Ë> 
©om_d©a_size
)

2876 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2877 "\"%s\" mp4 co64átomÅoÿsmÆl", 
mp4
->
fûe
.
«me
.
d©a
);

2878  
NGX_ERROR
;

2881 
©om_èbÀ
 = 
©om_hódî
 + (
ngx_mp4_co64_©om_t
);

2882 
©om_íd
 = 
©om_èbÀ
 + 
íåõs
 * (
uöt64_t
);

2884 
åak
 = 
	`ngx_mp4_œ°_åak
(
mp4
);

2885 
åak
->
chunks
 = 
íåõs
;

2887 
©om
 = &
åak
->
co64_©om_buf
;

2888 
©om
->
ãmp‹¨y
 = 1;

2889 
©om
->
pos
 = 
©om_hódî
;

2890 
©om
->
œ°
 = 
©om_èbÀ
;

2892 
d©a
 = &
åak
->
co64_d©a_buf
;

2893 
d©a
->
ãmp‹¨y
 = 1;

2894 
d©a
->
pos
 = 
©om_èbÀ
;

2895 
d©a
->
œ°
 = 
©om_íd
;

2897 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
 = 
©om
;

2898 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
 = 
d©a
;

2900 
	`ngx_mp4_©om_√xt
(
mp4
, 
©om_d©a_size
);

2902  
NGX_OK
;

2903 
	}
}

2906 
ngx_öt_t


2907 
	$ngx_hâp_mp4_upd©e_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2908 
ngx_hâp_mp4_åak_t
 *
åak
)

2910 
size_t
 
©om_size
;

2911 
ngx_buf_t
 *
©om
, *
d©a
;

2912 
ngx_mp4_co64_©om_t
 *
co64_©om
;

2920 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2923 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2925 i‡(
d©a
 =
NULL
) {

2926 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2928 
mp4
->
fûe
.
«me
.
d©a
);

2929  
NGX_ERROR
;

2932 i‡(
åak
->
°¨t_chunk
 >Åøk->
chunks
) {

2933 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
mp4
->
fûe
.
log
, 0,

2935 
mp4
->
fûe
.
«me
.
d©a
);

2936  
NGX_ERROR
;

2939 
d©a
->
pos
 +
åak
->
°¨t_chunk
 * (
uöt64_t
);

2940 
©om_size
 = (
ngx_mp4_co64_©om_t
Ë+ (
d©a
->
œ°
 - d©a->
pos
);

2941 
åak
->
size
 +
©om_size
;

2943 
åak
->
°¨t_off£t
 = 
	`ngx_mp4_gë_64vÆue
(
d©a
->
pos
);

2944 
åak
->
°¨t_off£t
 +åak->
chunk_ßm∂es_size
;

2945 
	`ngx_mp4_£t_64vÆue
(
d©a
->
pos
, 
åak
->
°¨t_off£t
);

2947 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2948 "°¨àchunk off£t:%uL", 
åak
->
°¨t_off£t
);

2950 
©om
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_ATOM
].
buf
;

2951 
co64_©om
 = (
ngx_mp4_co64_©om_t
 *Ë
©om
->
pos
;

2953 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
size
, 
©om_size
);

2954 
	`ngx_mp4_£t_32vÆue
(
co64_©om
->
íåõs
, 
åak
->
chunks
 -Åøk->
°¨t_chunk
);

2956  
NGX_OK
;

2957 
	}
}

2961 
	$ngx_hâp_mp4_adju°_co64_©om
(
ngx_hâp_mp4_fûe_t
 *
mp4
,

2962 
ngx_hâp_mp4_åak_t
 *
åak
, 
off_t
 
adju°mít
)

2964 
uöt64_t
 
off£t
, *
íåy
, *
íd
;

2965 
ngx_buf_t
 *
d©a
;

2972 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
mp4
->
fûe
.
log
, 0,

2975 
d©a
 = 
åak
->
out
[
NGX_HTTP_MP4_CO64_DATA
].
buf
;

2976 
íåy
 = (
uöt64_t
 *Ë
d©a
->
pos
;

2977 
íd
 = (
uöt64_t
 *Ë
d©a
->
œ°
;

2979 
íåy
 < 
íd
) {

2980 
off£t
 = 
	`ngx_mp4_gë_64vÆue
(
íåy
);

2981 
off£t
 +
adju°mít
;

2982 
	`ngx_mp4_£t_64vÆue
(
íåy
, 
off£t
);

2983 
íåy
++;

2985 
	}
}

2989 
	$ngx_hâp_mp4
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

2991 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2993 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2994 
˛cf
->
h™dÀr
 = 
ngx_hâp_mp4_h™dÀr
;

2996  
NGX_CONF_OK
;

2997 
	}
}

3001 
	$ngx_hâp_mp4_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3003 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
;

3005 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_mp4_c⁄f_t
));

3006 i‡(
c⁄f
 =
NULL
) {

3007  
NULL
;

3010 
c⁄f
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3011 
c⁄f
->
max_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3013  
c⁄f
;

3014 
	}
}

3018 
	$ngx_hâp_mp4_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3020 
ngx_hâp_mp4_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3021 
ngx_hâp_mp4_c⁄f_t
 *
c⁄f
 = 
chûd
;

3023 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size, 512 * 1024);

3024 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
max_buf„r_size
, 
¥ev
->max_buffer_size,

3027  
NGX_CONF_OK
;

3028 
	}
}

	@src/http/modules/ngx_http_not_modified_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_uöt_t
 
ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_uöt_t
 
ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

16 
ngx_èbÀ_ñt_t
 *
hódî
);

17 
ngx_öt_t
 
ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

20 
ngx_hâp_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
 = {

21 
NULL
,

22 
ngx_hâp_nŸ_modifõd_fûãr_öô
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL
,

30 
NULL
,

31 
NULL


35 
ngx_moduÀ_t
 
	gngx_hâp_nŸ_modifõd_fûãr_moduÀ
 = {

36 
NGX_MODULE_V1
,

37 &
ngx_hâp_nŸ_modifõd_fûãr_moduÀ_˘x
,

38 
NULL
,

39 
NGX_HTTP_MODULE
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NULL
,

46 
NULL
,

47 
NGX_MODULE_V1_PADDING


51 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

54 
ngx_öt_t


55 
	$ngx_hâp_nŸ_modifõd_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

57 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


58 || 
r
 !r->
maö


59 || 
r
->
hódîs_out
.
œ°_modifõd_time
 == -1)

61  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

64 i‡(
r
->
hódîs_ö
.
if_unmodifõd_sö˚


65 && !
	`ngx_hâp_ã°_if_unmodifõd
(
r
))

67  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

68 
NGX_HTTP_PRECONDITION_FAILED
);

71 i‡(
r
->
hódîs_ö
.
if_m©ch


72 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_m©ch
))

74  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, 
NULL
,

75 
NGX_HTTP_PRECONDITION_FAILED
);

78 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚
 ||Ñ->hódîs_ö.
if_n⁄e_m©ch
) {

80 i‡(
r
->
hódîs_ö
.
if_modifõd_sö˚


81 && 
	`ngx_hâp_ã°_if_modifõd
(
r
))

83  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

86 i‡(
r
->
hódîs_ö
.
if_n⁄e_m©ch


87 && !
	`ngx_hâp_ã°_if_m©ch
(
r
,Ñ->
hódîs_ö
.
if_n⁄e_m©ch
))

89  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

94 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_NOT_MODIFIED
;

95 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

96 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

97 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

98 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

100 i‡(
r
->
hódîs_out
.
c⁄ã¡_ícodög
) {

101 
r
->
hódîs_out
.
c⁄ã¡_ícodög
->
hash
 = 0;

102 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
NULL
;

105  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

108  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

109 
	}
}

112 
ngx_uöt_t


113 
	$ngx_hâp_ã°_if_unmodifõd
(
ngx_hâp_ªque°_t
 *
r
)

115 
time_t
 
iums
;

117 
iums
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
d©a
,

118 
r
->
hódîs_ö
.
if_unmodifõd_sö˚
->
vÆue
.
Àn
);

120 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

121 "hâ∞iums:%dÜm:%d", 
iums
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

123 i‡(
iums
 >
r
->
hódîs_out
.
œ°_modifõd_time
) {

128 
	}
}

131 
ngx_uöt_t


132 
	$ngx_hâp_ã°_if_modifõd
(
ngx_hâp_ªque°_t
 *
r
)

134 
time_t
 
ims
;

135 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

137 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

139 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_OFF
) {

143 
ims
 = 
	`ngx_hâp_∑r£_time
(
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
d©a
,

144 
r
->
hódîs_ö
.
if_modifõd_sö˚
->
vÆue
.
Àn
);

146 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

147 "hâ∞ims:%dÜm:%d", 
ims
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

149 i‡(
ims
 =
r
->
hódîs_out
.
œ°_modifõd_time
) {

153 i‡(
˛cf
->
if_modifõd_sö˚
 =
NGX_HTTP_IMS_EXACT


154 || 
ims
 < 
r
->
hódîs_out
.
œ°_modifõd_time
)

160 
	}
}

163 
ngx_uöt_t


164 
	$ngx_hâp_ã°_if_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
hódî
)

166 
u_ch¨
 *
°¨t
, *
íd
, 
ch
;

167 
ngx_°r_t
 *
ëag
, *
li°
;

169 
li°
 = &
hódî
->
vÆue
;

171 i‡(
li°
->
Àn
 =1 &&Üi°->
d©a
[0] == '*') {

175 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

179 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

181 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

182 "hâ∞im:\"%V\"Éèg:%V", 
li°
, 
ëag
);

184 
°¨t
 = 
li°
->
d©a
;

185 
íd
 = 
li°
->
d©a
 +Üi°->
Àn
;

187 
°¨t
 < 
íd
) {

189 i‡(
ëag
->
Àn
 > (
size_t
Ë(
íd
 - 
°¨t
)) {

193 i‡(
	`ngx_°∫cmp
(
°¨t
, 
ëag
->
d©a
,Éèg->
Àn
) != 0) {

194 
skù
;

197 
°¨t
 +
ëag
->
Àn
;

199 
°¨t
 < 
íd
) {

200 
ch
 = *
°¨t
;

202 i‡(
ch
 == ' ' || ch == '\t') {

203 
°¨t
++;

210 i‡(
°¨t
 =
íd
 || *start == ',') {

214 
skù
:

216 
°¨t
 < 
íd
 && *start != ',') { start++; }

217 
°¨t
 < 
íd
) {

218 
ch
 = *
°¨t
;

220 i‡(
ch
 == ' ' || ch == '\t' || ch == ',') {

221 
°¨t
++;

230 
	}
}

233 
ngx_öt_t


234 
	$ngx_hâp_nŸ_modifõd_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

236 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

237 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_nŸ_modifõd_hódî_fûãr
;

239  
NGX_OK
;

240 
	}
}

	@src/http/modules/ngx_http_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_¥oxy_ªwrôe_s
 
	tngx_hâp_¥oxy_ªwrôe_t
;

15 
	$ngx_öt_t
 (*
	tngx_hâp_¥oxy_ªwrôe_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

16 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tsize_t
 
	t¥efix
, size_à
	tÀn
,

17 
	tngx_hâp_¥oxy_ªwrôe_t
 *
	t¥
);

19 
	sngx_hâp_¥oxy_ªwrôe_s
 {

20 
ngx_hâp_¥oxy_ªwrôe_±
 
h™dÀr
;

23 
ngx_hâp_com∂ex_vÆue_t
 
com∂ex
;

24 #i‡(
NGX_PCRE
)

25 
ngx_hâp_ªgex_t
 *
ªgex
;

27 } 
∑âîn
;

29 
ngx_hâp_com∂ex_vÆue_t
 
ª∂a˚mít
;

34 
ngx_°r_t
 
key_°¨t
;

35 
ngx_°r_t
 
schema
;

36 
ngx_°r_t
 
ho°_hódî
;

37 
ngx_°r_t
 
p‹t
;

38 
ngx_°r_t
 
uri
;

39 } 
	tngx_hâp_¥oxy_v¨s_t
;

43 
ngx_hâp_up°ªam_c⁄f_t
 
up°ªam
;

45 
ngx_¨øy_t
 *
Êushes
;

46 
ngx_¨øy_t
 *
body_£t_Àn
;

47 
ngx_¨øy_t
 *
body_£t
;

48 
ngx_¨øy_t
 *
hódîs_£t_Àn
;

49 
ngx_¨øy_t
 *
hódîs_£t
;

50 
ngx_hash_t
 
hódîs_£t_hash
;

52 
ngx_¨øy_t
 *
hódîs_sour˚
;

54 
ngx_¨øy_t
 *
¥oxy_Àngths
;

55 
ngx_¨øy_t
 *
¥oxy_vÆues
;

57 
ngx_¨øy_t
 *
ªdúe˘s
;

58 
ngx_¨øy_t
 *
cookõ_domaös
;

59 
ngx_¨øy_t
 *
cookõ_∑ths
;

61 
ngx_°r_t
 
body_sour˚
;

63 
ngx_°r_t
 
mëhod
;

64 
ngx_°r_t
 
loˇti⁄
;

65 
ngx_°r_t
 
uæ
;

67 #i‡(
NGX_HTTP_CACHE
)

68 
ngx_hâp_com∂ex_vÆue_t
 
ˇche_key
;

71 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

73 
ngx_Êag_t
 
ªdúe˘
;

75 
ngx_uöt_t
 
hâp_vîsi⁄
;

77 
ngx_uöt_t
 
hódîs_hash_max_size
;

78 
ngx_uöt_t
 
hódîs_hash_buckë_size
;

79 } 
	tngx_hâp_¥oxy_loc_c⁄f_t
;

83 
ngx_hâp_°©us_t
 
°©us
;

84 
ngx_hâp_chunked_t
 
chunked
;

85 
ngx_hâp_¥oxy_v¨s_t
 
v¨s
;

86 
off_t
 
öã∫Æ_body_Àngth
;

88 
ngx_uöt_t
 
hód
;

89 } 
	tngx_hâp_¥oxy_˘x_t
;

92 
ngx_öt_t
 
	`ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

93 
ngx_hâp_¥oxy_˘x_t
 *
˘x
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

94 #i‡(
NGX_HTTP_CACHE
)

95 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

97 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

98 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

99 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

100 
ngx_öt_t
 
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

101 
ngx_öt_t
 
	`ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
);

102 
ngx_öt_t
 
	`ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
,

103 
ngx_buf_t
 *
buf
);

104 
ngx_öt_t
 
	`ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
,

105 
ngx_buf_t
 *
buf
);

106 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
,

107 
ssize_t
 
byãs
);

108 
ngx_öt_t
 
	`ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
,

109 
ssize_t
 
byãs
);

110 
	`ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

111 
	`ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

112 
ngx_öt_t
 
rc
);

114 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

115 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

116 
ngx_öt_t
 
	`ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

117 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

118 
ngx_öt_t


119 
	`ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

121 
ngx_öt_t


122 
	`ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

126 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_èbÀ_ñt_t
 *
h
);

128 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_èbÀ_ñt_t
 *
h
, 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
);

130 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
,

131 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
);

133 
ngx_öt_t
 
	`ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

134 *
	`ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

135 *
	`ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

136 *
∑ª¡
, *
chûd
);

137 
ngx_öt_t
 
	`ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
,

138 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_¥oxy_loc_c⁄f_à*
¥ev
);

140 *
	`ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

141 *
c⁄f
);

142 *
	`ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

143 *
c⁄f
);

144 *
	`ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

145 *
c⁄f
);

146 *
	`ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

147 *
c⁄f
);

148 *
	`ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

149 *
c⁄f
);

150 #i‡(
NGX_HTTP_CACHE
)

151 *
	`ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

152 *
c⁄f
);

153 *
	`ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

154 *
c⁄f
);

157 *
	`ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

159 
ngx_öt_t
 
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
,

160 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

162 #i‡(
NGX_HTTP_SSL
)

163 
ngx_öt_t
 
	`ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
,

164 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
);

166 
	`ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
);

169 
ngx_c⁄f_po°_t
 
ngx_hâp_¥oxy_low©_po°
 =

170 { 
ngx_hâp_¥oxy_low©_check
 
	}
};

173 
ngx_c⁄f_bômask_t
 
	gngx_hâp_¥oxy_√xt_up°ªam_masks
[] = {

174 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

175 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

176 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

177 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

178 { 
ngx_°rög
("hâp_502"), 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

179 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

180 { 
ngx_°rög
("hâp_504"), 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

181 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

182 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

183 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

184 { 
ngx_nuŒ_°rög
, 0 }

188 
ngx_c⁄f_íum_t
 
	gngx_hâp_¥oxy_hâp_vîsi⁄
[] = {

189 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

190 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

191 { 
ngx_nuŒ_°rög
, 0 }

195 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
;

198 
ngx_comm™d_t
 
	gngx_hâp_¥oxy_comm™ds
[] = {

200 { 
ngx_°rög
("proxy_pass"),

201 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

202 
ngx_hâp_¥oxy_∑ss
,

203 
NGX_HTTP_LOC_CONF_OFFSET
,

205 
NULL
 },

207 { 
ngx_°rög
("proxy_redirect"),

208 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

209 
ngx_hâp_¥oxy_ªdúe˘
,

210 
NGX_HTTP_LOC_CONF_OFFSET
,

212 
NULL
 },

214 { 
ngx_°rög
("proxy_cookie_domain"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

216 
ngx_hâp_¥oxy_cookõ_domaö
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
NULL
 },

221 { 
ngx_°rög
("proxy_cookie_path"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

223 
ngx_hâp_¥oxy_cookõ_∑th
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("proxy_store"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

230 
ngx_hâp_¥oxy_°‹e
,

231 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
NULL
 },

235 { 
ngx_°rög
("proxy_store_access"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

237 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

240 
NULL
 },

242 { 
ngx_°rög
("proxy_buffering"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

244 
ngx_c⁄f_£t_Êag_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

247 
NULL
 },

249 { 
ngx_°rög
("proxy_ignore_client_abort"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

251 
ngx_c⁄f_£t_Êag_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

254 
NULL
 },

256 { 
ngx_°rög
("proxy_bind"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

261 
NULL
 },

263 { 
ngx_°rög
("proxy_connect_timeout"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

265 
ngx_c⁄f_£t_m£c_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

268 
NULL
 },

270 { 
ngx_°rög
("proxy_send_timeout"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

272 
ngx_c⁄f_£t_m£c_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

275 
NULL
 },

277 { 
ngx_°rög
("proxy_send_lowat"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

279 
ngx_c⁄f_£t_size_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
£nd_low©
),

282 &
ngx_hâp_¥oxy_low©_po°
 },

284 { 
ngx_°rög
("proxy_intercept_errors"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

286 
ngx_c⁄f_£t_Êag_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

289 
NULL
 },

291 { 
ngx_°rög
("proxy_set_header"),

292 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

293 
ngx_c⁄f_£t_keyvÆ_¶Ÿ
,

294 
NGX_HTTP_LOC_CONF_OFFSET
,

295 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_sour˚
),

296 
NULL
 },

298 { 
ngx_°rög
("proxy_headers_hash_max_size"),

299 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

300 
ngx_c⁄f_£t_num_¶Ÿ
,

301 
NGX_HTTP_LOC_CONF_OFFSET
,

302 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_max_size
),

303 
NULL
 },

305 { 
ngx_°rög
("proxy_headers_hash_bucket_size"),

306 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

307 
ngx_c⁄f_£t_num_¶Ÿ
,

308 
NGX_HTTP_LOC_CONF_OFFSET
,

309 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hódîs_hash_buckë_size
),

310 
NULL
 },

312 { 
ngx_°rög
("proxy_set_body"),

313 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

314 
ngx_c⁄f_£t_°r_¶Ÿ
,

315 
NGX_HTTP_LOC_CONF_OFFSET
,

316 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
body_sour˚
),

317 
NULL
 },

319 { 
ngx_°rög
("proxy_method"),

320 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

321 
ngx_c⁄f_£t_°r_¶Ÿ
,

322 
NGX_HTTP_LOC_CONF_OFFSET
,

323 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
mëhod
),

324 
NULL
 },

326 { 
ngx_°rög
("proxy_pass_request_headers"),

327 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

328 
ngx_c⁄f_£t_Êag_¶Ÿ
,

329 
NGX_HTTP_LOC_CONF_OFFSET
,

330 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

331 
NULL
 },

333 { 
ngx_°rög
("proxy_pass_request_body"),

334 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

335 
ngx_c⁄f_£t_Êag_¶Ÿ
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

337 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

338 
NULL
 },

340 { 
ngx_°rög
("proxy_buffer_size"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

342 
ngx_c⁄f_£t_size_¶Ÿ
,

343 
NGX_HTTP_LOC_CONF_OFFSET
,

344 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

345 
NULL
 },

347 { 
ngx_°rög
("proxy_read_timeout"),

348 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

349 
ngx_c⁄f_£t_m£c_¶Ÿ
,

350 
NGX_HTTP_LOC_CONF_OFFSET
,

351 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

352 
NULL
 },

354 { 
ngx_°rög
("proxy_buffers"),

355 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

356 
ngx_c⁄f_£t_bufs_¶Ÿ
,

357 
NGX_HTTP_LOC_CONF_OFFSET
,

358 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
bufs
),

359 
NULL
 },

361 { 
ngx_°rög
("proxy_busy_buffers_size"),

362 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

363 
ngx_c⁄f_£t_size_¶Ÿ
,

364 
NGX_HTTP_LOC_CONF_OFFSET
,

365 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

366 
NULL
 },

368 #i‡(
NGX_HTTP_CACHE
)

370 { 
ngx_°rög
("proxy_cache"),

371 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

372 
ngx_hâp_¥oxy_ˇche
,

373 
NGX_HTTP_LOC_CONF_OFFSET
,

375 
NULL
 },

377 { 
ngx_°rög
("proxy_cache_key"),

378 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

379 
ngx_hâp_¥oxy_ˇche_key
,

380 
NGX_HTTP_LOC_CONF_OFFSET
,

382 
NULL
 },

384 { 
ngx_°rög
("proxy_cache_path"),

385 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

386 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

389 &
ngx_hâp_¥oxy_moduÀ
 },

391 { 
ngx_°rög
("proxy_cache_bypass"),

392 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

393 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

394 
NGX_HTTP_LOC_CONF_OFFSET
,

395 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

396 
NULL
 },

398 { 
ngx_°rög
("proxy_no_cache"),

399 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

400 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

401 
NGX_HTTP_LOC_CONF_OFFSET
,

402 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

403 
NULL
 },

405 { 
ngx_°rög
("proxy_cache_valid"),

406 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

407 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

408 
NGX_HTTP_LOC_CONF_OFFSET
,

409 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

410 
NULL
 },

412 { 
ngx_°rög
("proxy_cache_min_uses"),

413 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

414 
ngx_c⁄f_£t_num_¶Ÿ
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

416 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

417 
NULL
 },

419 { 
ngx_°rög
("proxy_cache_use_stale"),

420 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

421 
ngx_c⁄f_£t_bômask_¶Ÿ
,

422 
NGX_HTTP_LOC_CONF_OFFSET
,

423 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

424 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

426 { 
ngx_°rög
("proxy_cache_methods"),

427 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

428 
ngx_c⁄f_£t_bômask_¶Ÿ
,

429 
NGX_HTTP_LOC_CONF_OFFSET
,

430 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

431 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

433 { 
ngx_°rög
("proxy_cache_lock"),

434 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

435 
ngx_c⁄f_£t_Êag_¶Ÿ
,

436 
NGX_HTTP_LOC_CONF_OFFSET
,

437 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

438 
NULL
 },

440 { 
ngx_°rög
("proxy_cache_lock_timeout"),

441 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

442 
ngx_c⁄f_£t_m£c_¶Ÿ
,

443 
NGX_HTTP_LOC_CONF_OFFSET
,

444 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

445 
NULL
 },

449 { 
ngx_°rög
("proxy_temp_path"),

450 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

451 
ngx_c⁄f_£t_∑th_¶Ÿ
,

452 
NGX_HTTP_LOC_CONF_OFFSET
,

453 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

454 
NULL
 },

456 { 
ngx_°rög
("proxy_max_temp_file_size"),

457 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

458 
ngx_c⁄f_£t_size_¶Ÿ
,

459 
NGX_HTTP_LOC_CONF_OFFSET
,

460 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

461 
NULL
 },

463 { 
ngx_°rög
("proxy_temp_file_write_size"),

464 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

465 
ngx_c⁄f_£t_size_¶Ÿ
,

466 
NGX_HTTP_LOC_CONF_OFFSET
,

467 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

468 
NULL
 },

470 { 
ngx_°rög
("proxy_next_upstream"),

471 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

472 
ngx_c⁄f_£t_bômask_¶Ÿ
,

473 
NGX_HTTP_LOC_CONF_OFFSET
,

474 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

475 &
ngx_hâp_¥oxy_√xt_up°ªam_masks
 },

477 { 
ngx_°rög
("proxy_pass_header"),

478 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

479 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

480 
NGX_HTTP_LOC_CONF_OFFSET
,

481 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

482 
NULL
 },

484 { 
ngx_°rög
("proxy_hide_header"),

485 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

486 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

487 
NGX_HTTP_LOC_CONF_OFFSET
,

488 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

489 
NULL
 },

491 { 
ngx_°rög
("proxy_ignore_headers"),

492 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

493 
ngx_c⁄f_£t_bômask_¶Ÿ
,

494 
NGX_HTTP_LOC_CONF_OFFSET
,

495 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

496 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

498 { 
ngx_°rög
("proxy_http_version"),

499 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

500 
ngx_c⁄f_£t_íum_¶Ÿ
,

501 
NGX_HTTP_LOC_CONF_OFFSET
,

502 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
hâp_vîsi⁄
),

503 &
ngx_hâp_¥oxy_hâp_vîsi⁄
 },

505 #i‡(
NGX_HTTP_SSL
)

507 { 
ngx_°rög
("proxy_ssl_session_reuse"),

508 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

509 
ngx_c⁄f_£t_Êag_¶Ÿ
,

510 
NGX_HTTP_LOC_CONF_OFFSET
,

511 
off£tof
(
ngx_hâp_¥oxy_loc_c⁄f_t
, 
up°ªam
.
s¶_£ssi⁄_ªu£
),

512 
NULL
 },

516 
ngx_nuŒ_comm™d


520 
ngx_hâp_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ_˘x
 = {

521 
ngx_hâp_¥oxy_add_v¨übÀs
,

522 
NULL
,

524 
NULL
,

525 
NULL
,

527 
NULL
,

528 
NULL
,

530 
ngx_hâp_¥oxy_¸óã_loc_c⁄f
,

531 
ngx_hâp_¥oxy_mîge_loc_c⁄f


535 
ngx_moduÀ_t
 
	gngx_hâp_¥oxy_moduÀ
 = {

536 
NGX_MODULE_V1
,

537 &
ngx_hâp_¥oxy_moduÀ_˘x
,

538 
ngx_hâp_¥oxy_comm™ds
,

539 
NGX_HTTP_MODULE
,

540 
NULL
,

541 
NULL
,

542 
NULL
,

543 
NULL
,

544 
NULL
,

545 
NULL
,

546 
NULL
,

547 
NGX_MODULE_V1_PADDING


551 
	gngx_hâp_¥oxy_vîsi⁄
[] = " HTTP/1.0" 
CRLF
;

552 
	gngx_hâp_¥oxy_vîsi⁄_11
[] = " HTTP/1.1" 
CRLF
;

555 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_hódîs
[] = {

556 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

557 { 
ngx_°rög
("Connection"),Çgx_string("close") },

558 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

559 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("") },

560 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

561 { 
ngx_°rög
("Expect"),Çgx_string("") },

562 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

563 { 
ngx_nuŒ_°rög
,Çgx_null_string }

567 
ngx_°r_t
 
	gngx_hâp_¥oxy_hide_hódîs
[] = {

568 
ngx_°rög
("Date"),

569 
ngx_°rög
("Server"),

570 
ngx_°rög
("X-Pad"),

571 
ngx_°rög
("X-Accel-Expires"),

572 
ngx_°rög
("X-Accel-Redirect"),

573 
ngx_°rög
("X-Accel-Limit-Rate"),

574 
ngx_°rög
("X-Accel-Buffering"),

575 
ngx_°rög
("X-Accel-Charset"),

576 
ngx_nuŒ_°rög


580 #i‡(
NGX_HTTP_CACHE
)

582 
ngx_keyvÆ_t
 
	gngx_hâp_¥oxy_ˇche_hódîs
[] = {

583 { 
ngx_°rög
("Host"),Çgx_string("$proxy_host") },

584 { 
ngx_°rög
("Connection"),Çgx_string("close") },

585 { 
ngx_°rög
("Content-Length"),Çgx_string("$proxy_internal_body_length") },

586 { 
ngx_°rög
("Transfer-Encoding"),Çgx_string("") },

587 { 
ngx_°rög
("Keep-Alive"),Çgx_string("") },

588 { 
ngx_°rög
("Expect"),Çgx_string("") },

589 { 
ngx_°rög
("Upgrade"),Çgx_string("") },

590 { 
ngx_°rög
("If-Modified-Since"),Çgx_string("") },

591 { 
ngx_°rög
("If-Unmodified-Since"),Çgx_string("") },

592 { 
ngx_°rög
("If-None-Match"),Çgx_string("") },

593 { 
ngx_°rög
("If-Match"),Çgx_string("") },

594 { 
ngx_°rög
("Range"),Çgx_string("") },

595 { 
ngx_°rög
("If-Range"),Çgx_string("") },

596 { 
ngx_nuŒ_°rög
,Çgx_null_string }

602 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_¥oxy_v¨s
[] = {

604 { 
ngx_°rög
("¥oxy_ho°"), 
NULL
, 
ngx_hâp_¥oxy_ho°_v¨übÀ
, 0,

605 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

607 { 
ngx_°rög
("¥oxy_p‹t"), 
NULL
, 
ngx_hâp_¥oxy_p‹t_v¨übÀ
, 0,

608 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
|
NGX_HTTP_VAR_NOHASH
, 0 },

610 { 
ngx_°rög
("¥oxy_add_x_f‹w¨ded_f‹"), 
NULL
,

611 
ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

614 { 
ngx_°rög
("¥oxy_add_vü"), 
NULL
, NULL, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

617 { 
ngx_°rög
("¥oxy_öã∫Æ_body_Àngth"), 
NULL
,

618 
ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
, 0, 
NGX_HTTP_VAR_NOHASH
, 0 },

620 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

624 
ngx_∑th_öô_t
 
	gngx_hâp_¥oxy_ãmp_∑th
 = {

625 
ngx_°rög
(
NGX_HTTP_PROXY_TEMP_PATH
), { 1, 2, 0 }

629 
ngx_öt_t


630 
	$ngx_hâp_¥oxy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

632 
ngx_öt_t
 
rc
;

633 
ngx_hâp_up°ªam_t
 *
u
;

634 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

635 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

637 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

638  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

641 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_¥oxy_˘x_t
));

642 i‡(
˘x
 =
NULL
) {

643  
NGX_ERROR
;

646 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_¥oxy_moduÀ
);

648 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

650 
u
 = 
r
->
up°ªam
;

652 i‡(
∂cf
->
¥oxy_Àngths
 =
NULL
) {

653 
˘x
->
v¨s
 = 
∂cf
->vars;

654 
u
->
schema
 = 
∂cf
->
v¨s
.schema;

655 #i‡(
NGX_HTTP_SSL
)

656 
u
->
s¶
 = (
∂cf
->
up°ªam
.s¶ !
NULL
);

660 i‡(
	`ngx_hâp_¥oxy_evÆ
(
r
, 
˘x
, 
∂cf
Ë!
NGX_OK
) {

661  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

665 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_¥oxy_moduÀ
;

667 
u
->
c⁄f
 = &
∂cf
->
up°ªam
;

669 #i‡(
NGX_HTTP_CACHE
)

670 
u
->
¸óã_key
 = 
ngx_hâp_¥oxy_¸óã_key
;

672 
u
->
¸óã_ªque°
 = 
ngx_hâp_¥oxy_¸óã_ªque°
;

673 
u
->
ªöô_ªque°
 = 
ngx_hâp_¥oxy_ªöô_ªque°
;

674 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

675 
u
->
ab‹t_ªque°
 = 
ngx_hâp_¥oxy_ab‹t_ªque°
;

676 
u
->
föÆize_ªque°
 = 
ngx_hâp_¥oxy_föÆize_ªque°
;

677 
r
->
°©e
 = 0;

679 i‡(
∂cf
->
ªdúe˘s
) {

680 
u
->
ªwrôe_ªdúe˘
 = 
ngx_hâp_¥oxy_ªwrôe_ªdúe˘
;

683 i‡(
∂cf
->
cookõ_domaös
 ||Ölcf->
cookõ_∑ths
) {

684 
u
->
ªwrôe_cookõ
 = 
ngx_hâp_¥oxy_ªwrôe_cookõ
;

687 
u
->
buf„rög
 = 
∂cf
->
up°ªam
.buffering;

689 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

690 i‡(
u
->
pùe
 =
NULL
) {

691  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

694 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

695 
u
->
pùe
->
öput_˘x
 = 
r
;

697 
u
->
öput_fûãr_öô
 = 
ngx_hâp_¥oxy_öput_fûãr_öô
;

698 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

699 
u
->
öput_fûãr_˘x
 = 
r
;

701 
u
->
ac˚l
 = 1;

703 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

705 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

706  
rc
;

709  
NGX_DONE
;

710 
	}
}

713 
ngx_öt_t


714 
	$ngx_hâp_¥oxy_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_¥oxy_˘x_t
 *
˘x
,

715 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

717 
u_ch¨
 *
p
;

718 
size_t
 
add
;

719 
u_sh‹t
 
p‹t
;

720 
ngx_°r_t
 
¥oxy
;

721 
ngx_uæ_t
 
uæ
;

722 
ngx_hâp_up°ªam_t
 *
u
;

724 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
¥oxy
, 
∂cf
->
¥oxy_Àngths
->
ñts
, 0,

725 
∂cf
->
¥oxy_vÆues
->
ñts
)

726 =
NULL
)

728  
NGX_ERROR
;

731 i‡(
¥oxy
.
Àn
 > 7

732 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "http://", 7) == 0)

734 
add
 = 7;

735 
p‹t
 = 80;

737 #i‡(
NGX_HTTP_SSL
)

739 } i‡(
¥oxy
.
Àn
 > 8

740 && 
	`ngx_°∫ˇ£cmp
(
¥oxy
.
d©a
, (
u_ch¨
 *) "https://", 8) == 0)

742 
add
 = 8;

743 
p‹t
 = 443;

744 
r
->
up°ªam
->
s¶
 = 1;

749 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

750 "övÆid URLÖªfix i¿\"%V\"", &
¥oxy
);

751  
NGX_ERROR
;

754 
u
 = 
r
->
up°ªam
;

756 
u
->
schema
.
Àn
 = 
add
;

757 
u
->
schema
.
d©a
 = 
¥oxy
.data;

759 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

761 
uæ
.uæ.
Àn
 = 
¥oxy
.À¿- 
add
;

762 
uæ
.uæ.
d©a
 = 
¥oxy
.d©®+ 
add
;

763 
uæ
.
deÁu…_p‹t
 = 
p‹t
;

764 
uæ
.
uri_∑π
 = 1;

765 
uæ
.
no_ªsﬁve
 = 1;

767 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

768 i‡(
uæ
.
îr
) {

769 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

770 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

773  
NGX_ERROR
;

776 i‡(
uæ
.
uri
.
Àn
) {

777 i‡(
uæ
.
uri
.
d©a
[0] == '?') {

778 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
uæ
.
uri
.
Àn
 + 1);

779 i‡(
p
 =
NULL
) {

780  
NGX_ERROR
;

783 *
p
++ = '/';

784 
	`ngx_mem˝y
(
p
, 
uæ
.
uri
.
d©a
, uæ.uri.
Àn
);

786 
uæ
.
uri
.
Àn
++;

787 
uæ
.
uri
.
d©a
 = 
p
 - 1;

791 
˘x
->
v¨s
.
key_°¨t
 = 
u
->
schema
;

793 
	`ngx_hâp_¥oxy_£t_v¨s
(&
uæ
, &
˘x
->
v¨s
);

795 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

796 i‡(
u
->
ªsﬁved
 =
NULL
) {

797  
NGX_ERROR
;

800 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

801 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

802 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

803 
u
->
ªsﬁved
->
«ddrs
 = 1;

804 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

807 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

808 
u
->
ªsﬁved
->
p‹t
 = (
ö_p‹t_t
Ë(
uæ
.
no_p‹t
 ?Öort : url.port);

809 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

812  
NGX_OK
;

813 
	}
}

816 #i‡(
NGX_HTTP_CACHE
)

818 
ngx_öt_t


819 
	$ngx_hâp_¥oxy_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

821 
size_t
 
Àn
, 
loc_Àn
;

822 
u_ch¨
 *
p
;

823 
uöçå_t
 
esˇ≥
;

824 
ngx_°r_t
 *
key
;

825 
ngx_hâp_up°ªam_t
 *
u
;

826 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

827 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

829 
u
 = 
r
->
up°ªam
;

831 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

833 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

835 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

836 i‡(
key
 =
NULL
) {

837  
NGX_ERROR
;

840 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

842 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∂cf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

843  
NGX_ERROR
;

846  
NGX_OK
;

849 *
key
 = 
˘x
->
v¨s
.
key_°¨t
;

851 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

852 i‡(
key
 =
NULL
) {

853  
NGX_ERROR
;

856 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

858 *
key
 = 
˘x
->
v¨s
.
uri
;

859 
u
->
uri
 = 
˘x
->
v¨s
.uri;

861  
NGX_OK
;

863 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

865 *
key
 = 
r
->
u≈¨£d_uri
;

866 
u
->
uri
 = 
r
->
u≈¨£d_uri
;

868  
NGX_OK
;

871 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
Ë? 
∂cf
->
loˇti⁄
.len : 0;

873 i‡(
r
->
quŸed_uri
 ||Ñ->
öã∫Æ
) {

874 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

875 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

877 
esˇ≥
 = 0;

880 
Àn
 = 
˘x
->
v¨s
.
uri
.À¿+ 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


881 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

883 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

884 i‡(
p
 =
NULL
) {

885  
NGX_ERROR
;

888 
key
->
d©a
 = 
p
;

890 i‡(
r
->
vÆid_loˇti⁄
) {

891 
p
 = 
	`ngx_c›y
’, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

894 i‡(
esˇ≥
) {

895 
	`ngx_esˇ≥_uri
(
p
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

896 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

897 
p
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

900 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
 + 
loc_Àn
,Ñ->uri.
Àn
 -Üoc_len);

903 i‡(
r
->
¨gs
.
Àn
 > 0) {

904 *
p
++ = '?';

905 
p
 = 
	`ngx_c›y
’, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

908 
key
->
Àn
 = 
p
 - key->
d©a
;

909 
u
->
uri
 = *
key
;

911  
NGX_OK
;

912 
	}
}

917 
ngx_öt_t


918 
	$ngx_hâp_¥oxy_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

920 
size_t
 
Àn
, 
uri_Àn
, 
loc_Àn
, 
body_Àn
;

921 
uöçå_t
 
esˇ≥
;

922 
ngx_buf_t
 *
b
;

923 
ngx_°r_t
 
mëhod
;

924 
ngx_uöt_t
 
i
, 
u≈¨£d_uri
;

925 
ngx_chaö_t
 *
˛
, *
body
;

926 
ngx_li°_∑π_t
 *
∑π
;

927 
ngx_èbÀ_ñt_t
 *
hódî
;

928 
ngx_hâp_up°ªam_t
 *
u
;

929 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

930 
ngx_hâp_s¸ùt_code_±
 
code
;

931 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

932 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

933 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

935 
u
 = 
r
->
up°ªam
;

937 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

939 i‡(
u
->
mëhod
.
Àn
) {

941 
mëhod
 = 
u
->method;

942 
mëhod
.
Àn
++;

944 } i‡(
∂cf
->
mëhod
.
Àn
) {

945 
mëhod
 = 
∂cf
->method;

948 
mëhod
 = 
r
->
mëhod_«me
;

949 
mëhod
.
Àn
++;

952 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

954 i‡(
mëhod
.
Àn
 == 5

955 && 
	`ngx_°∫ˇ£cmp
(
mëhod
.
d©a
, (
u_ch¨
 *) "HEAD ", 5) == 0)

957 
˘x
->
hód
 = 1;

960 
Àn
 = 
mëhod
.À¿+ (
ngx_hâp_¥oxy_vîsi⁄
Ë- 1 + (
CRLF
) - 1;

962 
esˇ≥
 = 0;

963 
loc_Àn
 = 0;

964 
u≈¨£d_uri
 = 0;

966 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

967 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
;

969 } i‡(
˘x
->
v¨s
.
uri
.
Àn
 =0 && 
r
->
vÆid_u≈¨£d_uri
 &&Ñ =r->
maö
)

971 
u≈¨£d_uri
 = 1;

972 
uri_Àn
 = 
r
->
u≈¨£d_uri
.
Àn
;

975 
loc_Àn
 = (
r
->
vÆid_loˇti⁄
 && 
˘x
->
v¨s
.
uri
.
Àn
) ?

976 
∂cf
->
loˇti⁄
.
Àn
 : 0;

978 i‡(
r
->
quŸed_uri
 ||Ñ->
•a˚_ö_uri
 ||Ñ->
öã∫Æ
) {

979 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

980 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

983 
uri_Àn
 = 
˘x
->
v¨s
.
uri
.
Àn
 + 
r
->uri.À¿- 
loc_Àn
 + 
esˇ≥


984 + ("?"Ë- 1 + 
r
->
¨gs
.
Àn
;

987 i‡(
uri_Àn
 == 0) {

988 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

990  
NGX_ERROR
;

993 
Àn
 +
uri_Àn
;

995 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
∂cf
->
Êushes
);

997 i‡(
∂cf
->
body_£t_Àn
) {

998 
À
.
ù
 = 
∂cf
->
body_£t_Àn
->
ñts
;

999 
À
.
ªque°
 = 
r
;

1000 
À
.
Êushed
 = 1;

1001 
body_Àn
 = 0;

1003 *(
uöçå_t
 *Ë
À
.
ù
) {

1004 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1005 
body_Àn
 +
	`lcode
(&
À
);

1008 
˘x
->
öã∫Æ_body_Àngth
 = 
body_Àn
;

1009 
Àn
 +
body_Àn
;

1012 
˘x
->
öã∫Æ_body_Àngth
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1015 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1016 
À
.
ªque°
 = 
r
;

1017 
À
.
Êushed
 = 1;

1019 *(
uöçå_t
 *Ë
À
.
ù
) {

1020 *(
uöçå_t
 *Ë
À
.
ù
) {

1021 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1022 
Àn
 +
	`lcode
(&
À
);

1024 
À
.
ù
 +(
uöçå_t
);

1028 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1029 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1030 
hódî
 = 
∑π
->
ñts
;

1032 
i
 = 0; ; i++) {

1034 i‡(
i
 >
∑π
->
√…s
) {

1035 i‡(
∑π
->
√xt
 =
NULL
) {

1039 
∑π
 =Ö¨t->
√xt
;

1040 
hódî
 = 
∑π
->
ñts
;

1041 
i
 = 0;

1044 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1045 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1050 
Àn
 +
hódî
[
i
].
key
.len + (": ") - 1

1051 + 
hódî
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

1056 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

1057 i‡(
b
 =
NULL
) {

1058  
NGX_ERROR
;

1061 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1062 i‡(
˛
 =
NULL
) {

1063  
NGX_ERROR
;

1066 
˛
->
buf
 = 
b
;

1071 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
mëhod
.
d©a
, mëhod.
Àn
);

1073 
u
->
uri
.
d©a
 = 
b
->
œ°
;

1075 i‡(
∂cf
->
¥oxy_Àngths
 && 
˘x
->
v¨s
.
uri
.
Àn
) {

1076 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1078 } i‡(
u≈¨£d_uri
) {

1079 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

1082 i‡(
r
->
vÆid_loˇti⁄
) {

1083 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
˘x
->
v¨s
.
uri
.
d©a
, ctx->v¨s.uri.
Àn
);

1086 i‡(
esˇ≥
) {

1087 
	`ngx_esˇ≥_uri
(
b
->
œ°
, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1088 
r
->
uri
.
Àn
 - 
loc_Àn
, 
NGX_ESCAPE_URI
);

1089 
b
->
œ°
 +
r
->
uri
.
Àn
 - 
loc_Àn
 + 
esˇ≥
;

1092 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
uri
.
d©a
 + 
loc_Àn
,

1093 
r
->
uri
.
Àn
 - 
loc_Àn
);

1096 i‡(
r
->
¨gs
.
Àn
 > 0) {

1097 *
b
->
œ°
++ = '?';

1098 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1102 
u
->
uri
.
Àn
 = 
b
->
œ°
 - u->uri.
d©a
;

1104 i‡(
∂cf
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_11
) {

1105 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄_11
,

1106 (
ngx_hâp_¥oxy_vîsi⁄_11
) - 1);

1109 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_hâp_¥oxy_vîsi⁄
,

1110 (
ngx_hâp_¥oxy_vîsi⁄
) - 1);

1113 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1115 
e
.
ù
 = 
∂cf
->
hódîs_£t
->
ñts
;

1116 
e
.
pos
 = 
b
->
œ°
;

1117 
e
.
ªque°
 = 
r
;

1118 
e
.
Êushed
 = 1;

1120 
À
.
ù
 = 
∂cf
->
hódîs_£t_Àn
->
ñts
;

1122 *(
uöçå_t
 *Ë
À
.
ù
) {

1123 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1126 (Ë
	`lcode
(&
À
);

1128 i‡(*(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
) {

1130 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1131 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1134 
e
.
skù
 = (
Àn
 =(
CRLF
) - 1) ? 1 : 0;

1137 
e
.
skù
 = 0;

1140 
À
.
ù
 +(
uöçå_t
);

1142 *(
uöçå_t
 *Ë
e
.
ù
) {

1143 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1144 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1146 
e
.
ù
 +(
uöçå_t
);

1149 
b
->
œ°
 = 
e
.
pos
;

1152 i‡(
∂cf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

1153 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

1154 
hódî
 = 
∑π
->
ñts
;

1156 
i
 = 0; ; i++) {

1158 i‡(
i
 >
∑π
->
√…s
) {

1159 i‡(
∑π
->
√xt
 =
NULL
) {

1163 
∑π
 =Ö¨t->
√xt
;

1164 
hódî
 = 
∑π
->
ñts
;

1165 
i
 = 0;

1168 i‡(
	`ngx_hash_föd
(&
∂cf
->
hódîs_£t_hash
, 
hódî
[
i
].
hash
,

1169 
hódî
[
i
].
lowˇ£_key
, hódî[i].
key
.
Àn
))

1174 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1176 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

1178 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
,

1179 
hódî
[
i
].
vÆue
.
Àn
);

1181 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1183 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1185 &
hódî
[
i
].
key
, &hódî[i].
vÆue
);

1191 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1193 i‡(
∂cf
->
body_£t
) {

1194 
e
.
ù
 = 
∂cf
->
body_£t
->
ñts
;

1195 
e
.
pos
 = 
b
->
œ°
;

1197 *(
uöçå_t
 *Ë
e
.
ù
) {

1198 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1199 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1202 
b
->
œ°
 = 
e
.
pos
;

1205 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1207 (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

1209 i‡(
∂cf
->
body_£t
 =
NULL
 &&Ölcf->
up°ªam
.
∑ss_ªque°_body
) {

1211 
body
 = 
u
->
ªque°_bufs
;

1212 
u
->
ªque°_bufs
 = 
˛
;

1214 
body
) {

1215 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

1216 i‡(
b
 =
NULL
) {

1217  
NGX_ERROR
;

1220 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

1222 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1223 i‡(
˛
->
√xt
 =
NULL
) {

1224  
NGX_ERROR
;

1227 
˛
 = cl->
√xt
;

1228 
˛
->
buf
 = 
b
;

1230 
body
 = body->
√xt
;

1234 
u
->
ªque°_bufs
 = 
˛
;

1237 
b
->
Êush
 = 1;

1238 
˛
->
√xt
 = 
NULL
;

1240  
NGX_OK
;

1241 
	}
}

1244 
ngx_öt_t


1245 
	$ngx_hâp_¥oxy_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1247 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1249 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1251 i‡(
˘x
 =
NULL
) {

1252  
NGX_OK
;

1255 
˘x
->
°©us
.
code
 = 0;

1256 
˘x
->
°©us
.
cou¡
 = 0;

1257 
˘x
->
°©us
.
°¨t
 = 
NULL
;

1258 
˘x
->
°©us
.
íd
 = 
NULL
;

1259 
˘x
->
chunked
.
°©e
 = 0;

1261 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_°©us_löe
;

1262 
r
->
up°ªam
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_c›y_fûãr
;

1263 
r
->
up°ªam
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
;

1264 
r
->
°©e
 = 0;

1266  
NGX_OK
;

1267 
	}
}

1270 
ngx_öt_t


1271 
	$ngx_hâp_¥oxy_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

1273 
size_t
 
Àn
;

1274 
ngx_öt_t
 
rc
;

1275 
ngx_hâp_up°ªam_t
 *
u
;

1276 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1278 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1280 i‡(
˘x
 =
NULL
) {

1281  
NGX_ERROR
;

1284 
u
 = 
r
->
up°ªam
;

1286 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, &
˘x
->
°©us
);

1288 i‡(
rc
 =
NGX_AGAIN
) {

1289  
rc
;

1292 i‡(
rc
 =
NGX_ERROR
) {

1294 #i‡(
NGX_HTTP_CACHE
)

1296 i‡(
r
->
ˇche
) {

1297 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1298  
NGX_OK
;

1303 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1307 i‡(
u
->
ac˚l
) {

1308  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1312 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

1313 
u
->
°©e
->
°©us
 = 
NGX_HTTP_OK
;

1314 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1316  
NGX_OK
;

1319 i‡(
u
->
°©e
) {

1320 
u
->
°©e
->
°©us
 = 
˘x
->°©us.
code
;

1323 
u
->
hódîs_ö
.
°©us_n
 = 
˘x
->
°©us
.
code
;

1325 
Àn
 = 
˘x
->
°©us
.
íd
 - ctx->°©us.
°¨t
;

1326 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

1328 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1329 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

1330  
NGX_ERROR
;

1333 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
˘x
->
°©us
.
°¨t
, 
Àn
);

1335 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1337 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

1339 i‡(
˘x
->
°©us
.
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
) {

1340 
u
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

1343 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_¥oxy_¥o˚ss_hódî
;

1345  
	`ngx_hâp_¥oxy_¥o˚ss_hódî
(
r
);

1346 
	}
}

1349 
ngx_öt_t


1350 
	$ngx_hâp_¥oxy_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1352 
ngx_öt_t
 
rc
;

1353 
ngx_èbÀ_ñt_t
 *
h
;

1354 
ngx_hâp_up°ªam_t
 *
u
;

1355 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1356 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1357 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1359 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1363 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

1365 i‡(
rc
 =
NGX_OK
) {

1369 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1370 i‡(
h
 =
NULL
) {

1371  
NGX_ERROR
;

1374 
h
->
hash
 = 
r
->
hódî_hash
;

1376 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1377 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1379 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1380 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1 + h->key.len);

1381 i‡(
h
->
key
.
d©a
 =
NULL
) {

1382  
NGX_ERROR
;

1385 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

1386 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

1388 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

1389 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1390 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

1391 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1393 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1394 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1397 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1400 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

1401 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1403 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1404  
NGX_ERROR
;

1407 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1409 &
h
->
key
, &h->
vÆue
);

1414 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1426 i‡(
r
->
up°ªam
->
hódîs_ö
.
£rvî
 =
NULL
) {

1427 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1428 i‡(
h
 =
NULL
) {

1429  
NGX_ERROR
;

1432 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash(ngx_hash(

1433 
	`ngx_hash
('s', 'e'), 'r'), 'v'), 'e'), 'r');

1435 
	`ngx_°r_£t
(&
h
->
key
, "Server");

1436 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1437 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "server";

1440 i‡(
r
->
up°ªam
->
hódîs_ö
.
d©e
 =
NULL
) {

1441 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

1442 i‡(
h
 =
NULL
) {

1443  
NGX_ERROR
;

1446 
h
->
hash
 = 
	`ngx_hash
(ngx_hash(ngx_hash('d', 'a'), 't'), 'e');

1448 
	`ngx_°r_£t
(&
h
->
key
, "Date");

1449 
	`ngx_°r_nuŒ
(&
h
->
vÆue
);

1450 
h
->
lowˇ£_key
 = (
u_ch¨
 *) "date";

1455 
u
 = 
r
->
up°ªam
;

1457 i‡(
u
->
hódîs_ö
.
chunked
) {

1458 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1466 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1468 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1469 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1470 || 
˘x
->
hód


1471 || (!
u
->
hódîs_ö
.
chunked


1472 && 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0))

1474 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1477 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1478 
u
->
kì∑live
 = 0;

1480 i‡(
r
->
hódîs_ö
.
upgøde
) {

1481 
u
->
upgøde
 = 1;

1485  
NGX_OK
;

1488 i‡(
rc
 =
NGX_AGAIN
) {

1489  
NGX_AGAIN
;

1494 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1497  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1499 
	}
}

1502 
ngx_öt_t


1503 
	$ngx_hâp_¥oxy_öput_fûãr_öô
(*
d©a
)

1505 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1506 
ngx_hâp_up°ªam_t
 *
u
;

1507 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1509 
u
 = 
r
->
up°ªam
;

1510 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1512 i‡(
˘x
 =
NULL
) {

1513  
NGX_ERROR
;

1516 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1518 
u
->
hódîs_ö
.
°©us_n
, 
˘x
->
hód
, u->hódîs_ö.
chunked
,

1519 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1523 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NO_CONTENT


1524 || 
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_NOT_MODIFIED


1525 || 
˘x
->
hód
)

1530 
u
->
pùe
->
Àngth
 = 0;

1531 
u
->
Àngth
 = 0;

1532 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1534 } i‡(
u
->
hódîs_ö
.
chunked
) {

1537 
u
->
pùe
->
öput_fûãr
 = 
ngx_hâp_¥oxy_chunked_fûãr
;

1538 
u
->
pùe
->
Àngth
 = 3;

1540 
u
->
öput_fûãr
 = 
ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
;

1541 
u
->
Àngth
 = -1;

1543 } i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

1546 
u
->
pùe
->
Àngth
 = 0;

1547 
u
->
Àngth
 = 0;

1548 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1553 
u
->
pùe
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1554 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

1557  
NGX_OK
;

1558 
	}
}

1561 
ngx_öt_t


1562 
	$ngx_hâp_¥oxy_c›y_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1564 
ngx_buf_t
 *
b
;

1565 
ngx_chaö_t
 *
˛
;

1566 
ngx_hâp_ªque°_t
 *
r
;

1568 i‡(
buf
->
pos
 =buf->
œ°
) {

1569  
NGX_OK
;

1572 i‡(
p
->
‰ì
) {

1573 
˛
 = 
p
->
‰ì
;

1574 
b
 = 
˛
->
buf
;

1575 
p
->
‰ì
 = 
˛
->
√xt
;

1576 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1579 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1580 i‡(
b
 =
NULL
) {

1581  
NGX_ERROR
;

1585 
	`ngx_mem˝y
(
b
, 
buf
, (
ngx_buf_t
));

1586 
b
->
shadow
 = 
buf
;

1587 
b
->
èg
 = 
p
->tag;

1588 
b
->
œ°_shadow
 = 1;

1589 
b
->
ªcy˛ed
 = 1;

1590 
buf
->
shadow
 = 
b
;

1592 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1593 i‡(
˛
 =
NULL
) {

1594  
NGX_ERROR
;

1597 
˛
->
buf
 = 
b
;

1598 
˛
->
√xt
 = 
NULL
;

1600 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0, "öpuàbu‡#%d", 
b
->
num
);

1602 i‡(
p
->
ö
) {

1603 *
p
->
œ°_ö
 = 
˛
;

1605 
p
->
ö
 = 
˛
;

1607 
p
->
œ°_ö
 = &
˛
->
√xt
;

1609 i‡(
p
->
Àngth
 == -1) {

1610  
NGX_OK
;

1613 
p
->
Àngth
 -
b
->
œ°
 - b->
pos
;

1615 i‡(
p
->
Àngth
 == 0) {

1616 
r
 = 
p
->
öput_˘x
;

1617 
p
->
up°ªam_d⁄e
 = 1;

1618 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1620 } i‡(
p
->
Àngth
 < 0) {

1621 
r
 = 
p
->
öput_˘x
;

1622 
p
->
up°ªam_d⁄e
 = 1;

1624 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1629  
NGX_OK
;

1630 
	}
}

1633 
ngx_öt_t


1634 
	$ngx_hâp_¥oxy_chunked_fûãr
(
ngx_evít_pùe_t
 *
p
, 
ngx_buf_t
 *
buf
)

1636 
ngx_öt_t
 
rc
;

1637 
ngx_buf_t
 *
b
, **
¥ev
;

1638 
ngx_chaö_t
 *
˛
;

1639 
ngx_hâp_ªque°_t
 *
r
;

1640 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1642 i‡(
buf
->
pos
 =buf->
œ°
) {

1643  
NGX_OK
;

1646 
r
 = 
p
->
öput_˘x
;

1647 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1649 i‡(
˘x
 =
NULL
) {

1650  
NGX_ERROR
;

1653 
b
 = 
NULL
;

1654 
¥ev
 = &
buf
->
shadow
;

1658 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

1660 i‡(
rc
 =
NGX_OK
) {

1664 i‡(
p
->
‰ì
) {

1665 
˛
 = 
p
->
‰ì
;

1666 
b
 = 
˛
->
buf
;

1667 
p
->
‰ì
 = 
˛
->
√xt
;

1668 
	`ngx_‰ì_chaö
(
p
->
poﬁ
, 
˛
);

1671 
b
 = 
	`ngx_Æloc_buf
(
p
->
poﬁ
);

1672 i‡(
b
 =
NULL
) {

1673  
NGX_ERROR
;

1677 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1679 
b
->
pos
 = 
buf
->pos;

1680 
b
->
°¨t
 = 
buf
->start;

1681 
b
->
íd
 = 
buf
->end;

1682 
b
->
èg
 = 
p
->tag;

1683 
b
->
ãmp‹¨y
 = 1;

1684 
b
->
ªcy˛ed
 = 1;

1686 *
¥ev
 = 
b
;

1687 
¥ev
 = &
b
->
shadow
;

1689 
˛
 = 
	`ngx_Æloc_chaö_lök
(
p
->
poﬁ
);

1690 i‡(
˛
 =
NULL
) {

1691  
NGX_ERROR
;

1694 
˛
->
buf
 = 
b
;

1695 
˛
->
√xt
 = 
NULL
;

1697 i‡(
p
->
ö
) {

1698 *
p
->
œ°_ö
 = 
˛
;

1700 
p
->
ö
 = 
˛
;

1702 
p
->
œ°_ö
 = &
˛
->
√xt
;

1704  
b
->
num
 = 
buf
->num;

1706 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1707 "öpuàbu‡#%d %p", 
b
->
num
, b->
pos
);

1709 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

1711 
buf
->
pos
 +
˘x
->
chunked
.
size
;

1712 
b
->
œ°
 = 
buf
->
pos
;

1713 
˘x
->
chunked
.
size
 = 0;

1718 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

1719 
buf
->
pos
 = buf->
œ°
;

1720 
b
->
œ°
 = 
buf
->last;

1725 i‡(
rc
 =
NGX_DONE
) {

1729 
p
->
up°ªam_d⁄e
 = 1;

1730 
r
->
up°ªam
->
kì∑live
 = !r->up°ªam->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1735 i‡(
rc
 =
NGX_AGAIN
) {

1739 
p
->
Àngth
 = 
˘x
->
chunked
.length;

1746 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1749  
NGX_ERROR
;

1752 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1754 
˘x
->
chunked
.
°©e
, 
p
->
Àngth
);

1756 i‡(
b
) {

1757 
b
->
shadow
 = 
buf
;

1758 
b
->
œ°_shadow
 = 1;

1760 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
p
->
log
, 0,

1761 "öpuàbu‡%∞%z", 
b
->
pos
, b->
œ°
 - b->pos);

1763  
NGX_OK
;

1768 i‡(
	`ngx_evít_pùe_add_‰ì_buf
(
p
, 
buf
Ë!
NGX_OK
) {

1769  
NGX_ERROR
;

1772  
NGX_OK
;

1773 
	}
}

1776 
ngx_öt_t


1777 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_c›y_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1779 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1781 
ngx_buf_t
 *
b
;

1782 
ngx_chaö_t
 *
˛
, **
Œ
;

1783 
ngx_hâp_up°ªam_t
 *
u
;

1785 
u
 = 
r
->
up°ªam
;

1787 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1788 
Œ
 = &
˛
->
√xt
;

1791 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

1792 i‡(
˛
 =
NULL
) {

1793  
NGX_ERROR
;

1796 *
Œ
 = 
˛
;

1798 
˛
->
buf
->
Êush
 = 1;

1799 
˛
->
buf
->
mem‹y
 = 1;

1801 
b
 = &
u
->
buf„r
;

1803 
˛
->
buf
->
pos
 = 
b
->
œ°
;

1804 
b
->
œ°
 +
byãs
;

1805 
˛
->
buf
->
œ°
 = 
b
->last;

1806 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1808 i‡(
u
->
Àngth
 == -1) {

1809  
NGX_OK
;

1812 
u
->
Àngth
 -
byãs
;

1814 i‡(
u
->
Àngth
 == 0) {

1815 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1818  
NGX_OK
;

1819 
	}
}

1822 
ngx_öt_t


1823 
	$ngx_hâp_¥oxy_n⁄_buf„ªd_chunked_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

1825 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

1827 
ngx_öt_t
 
rc
;

1828 
ngx_buf_t
 *
b
, *
buf
;

1829 
ngx_chaö_t
 *
˛
, **
Œ
;

1830 
ngx_hâp_up°ªam_t
 *
u
;

1831 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1833 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1835 i‡(
˘x
 =
NULL
) {

1836  
NGX_ERROR
;

1839 
u
 = 
r
->
up°ªam
;

1840 
buf
 = &
u
->
buf„r
;

1842 
buf
->
pos
 = buf->
œ°
;

1843 
buf
->
œ°
 +
byãs
;

1845 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

1846 
Œ
 = &
˛
->
√xt
;

1851 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
buf
, &
˘x
->
chunked
);

1853 i‡(
rc
 =
NGX_OK
) {

1857 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

1858 i‡(
˛
 =
NULL
) {

1859  
NGX_ERROR
;

1862 *
Œ
 = 
˛
;

1863 
Œ
 = &
˛
->
√xt
;

1865 
b
 = 
˛
->
buf
;

1867 
b
->
Êush
 = 1;

1868 
b
->
mem‹y
 = 1;

1870 
b
->
pos
 = 
buf
->pos;

1871 
b
->
èg
 = 
u
->
ouçut
.tag;

1873 i‡(
buf
->
œ°
 - buf->
pos
 >
˘x
->
chunked
.
size
) {

1874 
buf
->
pos
 +
˘x
->
chunked
.
size
;

1875 
b
->
œ°
 = 
buf
->
pos
;

1876 
˘x
->
chunked
.
size
 = 0;

1879 
˘x
->
chunked
.
size
 -
buf
->
œ°
 - buf->
pos
;

1880 
buf
->
pos
 = buf->
œ°
;

1881 
b
->
œ°
 = 
buf
->last;

1884 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1886 
b
->
pos
, b->
œ°
 - b->pos);

1891 i‡(
rc
 =
NGX_DONE
) {

1895 
u
->
kì∑live
 = !u->
hódîs_ö
.
c⁄√˘i⁄_˛o£
;

1896 
u
->
Àngth
 = 0;

1901 i‡(
rc
 =
NGX_AGAIN
) {

1907 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1910  
NGX_ERROR
;

1915 i‡(
r
->
subªque°_ö_mem‹y
) {

1917 
˛
 = 
u
->
out_bufs
;

1919 i‡(
˛
) {

1920 
buf
->
pos
 = 
˛
->buf->pos;

1923 
buf
->
œ°
 = buf->
pos
;

1925 
˛
 = 
u
->
out_bufs
; cl; c»˛->
√xt
) {

1926 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1928 
˛
->
buf
->
pos
, cl->buf->
œ°
, 
	`ngx_buf_size
(cl->buf));

1930 i‡(
buf
->
œ°
 =
˛
->buf->
pos
) {

1931 
buf
->
œ°
 = 
˛
->buf->last;

1935 
buf
->
œ°
 = 
	`ngx_movemem
(buf->œ°, 
˛
->buf->
pos
,

1936 
˛
->
buf
->
œ°
 - cl->buf->
pos
);

1938 
˛
->
buf
->
pos
 = buf->
œ°
 - (cl->buf->last - cl->buf->pos);

1939 
˛
->
buf
->
œ°
 = buf->last;

1943  
NGX_OK
;

1944 
	}
}

1948 
	$ngx_hâp_¥oxy_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1950 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1954 
	}
}

1958 
	$ngx_hâp_¥oxy_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1960 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1964 
	}
}

1967 
ngx_öt_t


1968 
	$ngx_hâp_¥oxy_ho°_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1969 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1971 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1973 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1975 i‡(
˘x
 =
NULL
) {

1976 
v
->
nŸ_found
 = 1;

1977  
NGX_OK
;

1980 
v
->
Àn
 = 
˘x
->
v¨s
.
ho°_hódî
.len;

1981 
v
->
vÆid
 = 1;

1982 
v
->
no_ˇchóbÀ
 = 0;

1983 
v
->
nŸ_found
 = 0;

1984 
v
->
d©a
 = 
˘x
->
v¨s
.
ho°_hódî
.data;

1986  
NGX_OK
;

1987 
	}
}

1990 
ngx_öt_t


1991 
	$ngx_hâp_¥oxy_p‹t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

1992 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1994 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

1996 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

1998 i‡(
˘x
 =
NULL
) {

1999 
v
->
nŸ_found
 = 1;

2000  
NGX_OK
;

2003 
v
->
Àn
 = 
˘x
->
v¨s
.
p‹t
.len;

2004 
v
->
vÆid
 = 1;

2005 
v
->
no_ˇchóbÀ
 = 0;

2006 
v
->
nŸ_found
 = 0;

2007 
v
->
d©a
 = 
˘x
->
v¨s
.
p‹t
.data;

2009  
NGX_OK
;

2010 
	}
}

2013 
ngx_öt_t


2014 
	$ngx_hâp_¥oxy_add_x_f‹w¨ded_f‹_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2015 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2017 
size_t
 
Àn
;

2018 
u_ch¨
 *
p
;

2019 
ngx_uöt_t
 
i
, 
n
;

2020 
ngx_èbÀ_ñt_t
 **
h
;

2022 
v
->
vÆid
 = 1;

2023 
v
->
no_ˇchóbÀ
 = 0;

2024 
v
->
nŸ_found
 = 0;

2026 
n
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
√…s
;

2027 
h
 = 
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
.
ñts
;

2029 
Àn
 = 0;

2031 
i
 = 0; i < 
n
; i++) {

2032 
Àn
 +
h
[
i
]->
vÆue
.len + (", ") - 1;

2035 i‡(
Àn
 == 0) {

2036 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2037 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

2038  
NGX_OK
;

2041 
Àn
 +
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

2043 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2044 i‡(
p
 =
NULL
) {

2045  
NGX_ERROR
;

2048 
v
->
Àn
 =Üen;

2049 
v
->
d©a
 = 
p
;

2051 
i
 = 0; i < 
n
; i++) {

2052 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

2053 *
p
++ = ','; *p++ = ' ';

2056 
	`ngx_mem˝y
(
p
, 
r
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,Ñ->c⁄√˘i⁄->addr_ãxt.
Àn
);

2058  
NGX_OK
;

2059 
	}
}

2062 
ngx_öt_t


2063 
	$ngx_hâp_¥oxy_öã∫Æ_body_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2064 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2066 
ngx_hâp_¥oxy_˘x_t
 *
˘x
;

2068 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2070 i‡(
˘x
 =
NULL
 || ctx->
öã∫Æ_body_Àngth
 < 0) {

2071 
v
->
nŸ_found
 = 1;

2072  
NGX_OK
;

2075 
v
->
vÆid
 = 1;

2076 
v
->
no_ˇchóbÀ
 = 0;

2077 
v
->
nŸ_found
 = 0;

2079 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
c⁄√˘i⁄
->
poﬁ
, 
NGX_OFF_T_LEN
);

2081 i‡(
v
->
d©a
 =
NULL
) {

2082  
NGX_ERROR
;

2085 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%O", 
˘x
->
öã∫Æ_body_Àngth
) - v->data;

2087  
NGX_OK
;

2088 
	}
}

2091 
ngx_öt_t


2092 
	$ngx_hâp_¥oxy_ªwrôe_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2093 
size_t
 
¥efix
)

2095 
size_t
 
Àn
;

2096 
ngx_öt_t
 
rc
;

2097 
ngx_uöt_t
 
i
;

2098 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2099 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2101 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2103 
¥
 = 
∂cf
->
ªdúe˘s
->
ñts
;

2105 i‡(
¥
 =
NULL
) {

2106  
NGX_DECLINED
;

2109 
Àn
 = 
h
->
vÆue
.À¿- 
¥efix
;

2111 
i
 = 0; i < 
∂cf
->
ªdúe˘s
->
√…s
; i++) {

2112 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2114 i‡(
rc
 !
NGX_DECLINED
) {

2115  
rc
;

2119  
NGX_DECLINED
;

2120 
	}
}

2123 
ngx_öt_t


2124 
	$ngx_hâp_¥oxy_ªwrôe_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
)

2126 
size_t
 
¥efix
;

2127 
u_ch¨
 *
p
;

2128 
ngx_öt_t
 
rc
, 
rv
;

2129 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
;

2131 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
h
->
vÆue
.
d©a
, ';');

2132 i‡(
p
 =
NULL
) {

2133  
NGX_DECLINED
;

2136 
¥efix
 = 
p
 + 1 - 
h
->
vÆue
.
d©a
;

2138 
rv
 = 
NGX_DECLINED
;

2140 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_¥oxy_moduÀ
);

2142 i‡(
∂cf
->
cookõ_domaös
) {

2143 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "domain=", 7 - 1);

2145 i‡(
p
) {

2146 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 7,

2147 
∂cf
->
cookõ_domaös
);

2148 i‡(
rc
 =
NGX_ERROR
) {

2149  
NGX_ERROR
;

2152 i‡(
rc
 !
NGX_DECLINED
) {

2153 
rv
 = 
rc
;

2158 i‡(
∂cf
->
cookõ_∑ths
) {

2159 
p
 = 
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
 + 
¥efix
, "path=", 5 - 1);

2161 i‡(
p
) {

2162 
rc
 = 
	`ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
r
, 
h
, 
p
 + 5,

2163 
∂cf
->
cookõ_∑ths
);

2164 i‡(
rc
 =
NGX_ERROR
) {

2165  
NGX_ERROR
;

2168 i‡(
rc
 !
NGX_DECLINED
) {

2169 
rv
 = 
rc
;

2174  
rv
;

2175 
	}
}

2178 
ngx_öt_t


2179 
	$ngx_hâp_¥oxy_ªwrôe_cookõ_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2180 
u_ch¨
 *
vÆue
, 
ngx_¨øy_t
 *
ªwrôes
)

2182 
size_t
 
Àn
, 
¥efix
;

2183 
u_ch¨
 *
p
;

2184 
ngx_öt_t
 
rc
;

2185 
ngx_uöt_t
 
i
;

2186 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2188 
¥efix
 = 
vÆue
 - 
h
->vÆue.
d©a
;

2190 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
, ';');

2192 
Àn
 = 
p
 ? (
size_t
Ë’ - 
vÆue
Ë: (
h
->vÆue.À¿- 
¥efix
);

2194 
¥
 = 
ªwrôes
->
ñts
;

2196 
i
 = 0; i < 
ªwrôes
->
√…s
; i++) {

2197 
rc
 = 
¥
[
i
].
	`h™dÀr
(
r
, 
h
, 
¥efix
, 
Àn
, &pr[i]);

2199 i‡(
rc
 !
NGX_DECLINED
) {

2200  
rc
;

2204  
NGX_DECLINED
;

2205 
	}
}

2208 
ngx_öt_t


2209 
	$ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2210 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2212 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2214 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2215  
NGX_ERROR
;

2218 i‡(
∑âîn
.
Àn
 >Üen

2219 || 
	`ngx_r°∫cmp
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
∑âîn
.data,

2220 
∑âîn
.
Àn
) != 0)

2222  
NGX_DECLINED
;

2225 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2226  
NGX_ERROR
;

2229  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
∑âîn
.
Àn
, &
ª∂a˚mít
);

2230 
	}
}

2233 #i‡(
NGX_PCRE
)

2235 
ngx_öt_t


2236 
	$ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

2237 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2239 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2241 
∑âîn
.
Àn
 =Üen;

2242 
∑âîn
.
d©a
 = 
h
->
vÆue
.d©®+ 
¥efix
;

2244 i‡(
	`ngx_hâp_ªgex_exec
(
r
, 
¥
->
∑âîn
.
ªgex
, &∑âînË!
NGX_OK
) {

2245  
NGX_DECLINED
;

2248 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2249  
NGX_ERROR
;

2252 i‡(
¥efix
 =0 && 
h
->
vÆue
.
Àn
 ==Üen) {

2253 
h
->
vÆue
 = 
ª∂a˚mít
;

2254  
NGX_OK
;

2257  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2258 
	}
}

2263 
ngx_öt_t


2264 
	$ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

2265 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
, size_à
Àn
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
)

2267 
u_ch¨
 *
p
;

2268 
ngx_°r_t
 
∑âîn
, 
ª∂a˚mít
;

2270 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
∑âîn
.
com∂ex
, &∑âînË!
NGX_OK
) {

2271  
NGX_ERROR
;

2274 
p
 = 
h
->
vÆue
.
d©a
 + 
¥efix
;

2276 i‡(
p
[0] == '.') {

2277 
p
++;

2278 
¥efix
++;

2279 
Àn
--;

2282 i‡(
∑âîn
.
Àn
 !À¿|| 
	`ngx_r°∫ˇ£cmp
’©ã∫.
d©a
, 
p
,Üen) != 0) {

2283  
NGX_DECLINED
;

2286 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¥
->
ª∂a˚mít
, &ª∂a˚mítË!
NGX_OK
) {

2287  
NGX_ERROR
;

2290  
	`ngx_hâp_¥oxy_ªwrôe
(
r
, 
h
, 
¥efix
, 
Àn
, &
ª∂a˚mít
);

2291 
	}
}

2294 
ngx_öt_t


2295 
	$ngx_hâp_¥oxy_ªwrôe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
,

2296 
size_t
 
Àn
, 
ngx_°r_t
 *
ª∂a˚mít
)

2298 
u_ch¨
 *
p
, *
d©a
;

2299 
size_t
 
√w_Àn
;

2301 
√w_Àn
 = 
ª∂a˚mít
->
Àn
 + 
h
->
vÆue
.len -Üen;

2303 i‡(
ª∂a˚mít
->
Àn
 >Üen) {

2305 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
√w_Àn
);

2306 i‡(
d©a
 =
NULL
) {

2307  
NGX_ERROR
;

2310 
p
 = 
	`ngx_c›y
(
d©a
, 
h
->
vÆue
.d©a, 
¥efix
);

2311 
p
 = 
	`ngx_c›y
’, 
ª∂a˚mít
->
d©a
,Ñïœ˚mít->
Àn
);

2313 
	`ngx_mem˝y
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2314 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2316 
h
->
vÆue
.
d©a
 = data;

2319 
p
 = 
	`ngx_c›y
(
h
->
vÆue
.
d©a
 + 
¥efix
, 
ª∂a˚mít
->data,

2320 
ª∂a˚mít
->
Àn
);

2322 
	`ngx_memmove
(
p
, 
h
->
vÆue
.
d©a
 + 
¥efix
 + 
Àn
,

2323 
h
->
vÆue
.
Àn
 -Üí - 
¥efix
);

2326 
h
->
vÆue
.
Àn
 = 
√w_Àn
;

2328  
NGX_OK
;

2329 
	}
}

2332 
ngx_öt_t


2333 
	$ngx_hâp_¥oxy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

2335 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2337 
v
 = 
ngx_hâp_¥oxy_v¨s
; v->
«me
.
Àn
; v++) {

2338 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2339 i‡(
v¨
 =
NULL
) {

2340  
NGX_ERROR
;

2343 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2344 
v¨
->
d©a
 = 
v
->data;

2347  
NGX_OK
;

2348 
	}
}

2352 
	$ngx_hâp_¥oxy_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2354 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
;

2356 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_¥oxy_loc_c⁄f_t
));

2357 i‡(
c⁄f
 =
NULL
) {

2358  
NULL
;

2387 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

2388 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

2389 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

2390 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

2392 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

2394 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2395 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2396 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2398 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

2399 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

2401 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2402 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2403 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

2405 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

2406 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

2408 #i‡(
NGX_HTTP_CACHE
)

2409 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

2410 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

2411 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

2412 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

2413 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

2414 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

2415 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

2418 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2419 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

2421 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

2422 #i‡(
NGX_HTTP_SSL
)

2423 
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
 = 
NGX_CONF_UNSET
;

2427 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

2429 
c⁄f
->
ªdúe˘
 = 
NGX_CONF_UNSET
;

2430 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

2432 
c⁄f
->
cookõ_domaös
 = 
NGX_CONF_UNSET_PTR
;

2433 
c⁄f
->
cookõ_∑ths
 = 
NGX_CONF_UNSET_PTR
;

2435 
c⁄f
->
hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

2437 
c⁄f
->
hódîs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

2438 
c⁄f
->
hódîs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

2440 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "proxy");

2442  
c⁄f
;

2443 
	}
}

2447 
	$ngx_hâp_¥oxy_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2449 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2450 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2452 
u_ch¨
 *
p
;

2453 
size_t
 
size
;

2454 
ngx_hash_öô_t
 
hash
;

2455 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2456 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

2457 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2459 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

2460 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
,

2461 
¥ev
->
up°ªam
.
°‹e
, 0);

2463 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

2464 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

2465 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

2469 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

2470 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

2472 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

2473 
¥ev
->
up°ªam
.
buf„rög
, 1);

2475 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

2476 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

2478 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

2479 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

2481 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

2482 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

2484 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

2485 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

2487 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

2488 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

2490 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

2491 
¥ev
->
up°ªam
.
£nd_low©
, 0);

2493 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

2494 
¥ev
->
up°ªam
.
buf„r_size
,

2495 (
size_t
Ë
ngx_∑gesize
);

2497 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

2498 8, 
ngx_∑gesize
);

2500 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

2501 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2503  
NGX_CONF_ERROR
;

2507 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

2508 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

2509 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

2513 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2514 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

2515 
NGX_CONF_UNSET_SIZE
);

2517 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2518 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

2520 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

2521 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

2524 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

2525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2530  
NGX_CONF_ERROR
;

2533 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


2534 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

2536 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2540  
NGX_CONF_ERROR
;

2544 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2545 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

2546 
NGX_CONF_UNSET_SIZE
);

2548 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2549 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

2551 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

2552 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

2555 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

2556 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2561  
NGX_CONF_ERROR
;

2564 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2565 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

2566 
NGX_CONF_UNSET_SIZE
);

2568 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

2569 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

2571 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

2572 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

2575 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

2576 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
)

2578 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2584  
NGX_CONF_ERROR
;

2588 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

2589 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

2590 
NGX_CONF_BITMASK_SET
);

2593 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

2594 
¥ev
->
up°ªam
.
√xt_up°ªam
,

2595 (
NGX_CONF_BITMASK_SET


2596 |
NGX_HTTP_UPSTREAM_FT_ERROR


2597 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

2599 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2600 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


2601 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2604 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

2605 
¥ev
->
up°ªam
.
ãmp_∑th
,

2606 &
ngx_hâp_¥oxy_ãmp_∑th
)

2607 !
NGX_OK
)

2609  
NGX_CONF_ERROR
;

2613 #i‡(
NGX_HTTP_CACHE
)

2615 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

2616 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

2618 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

2619 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

2621 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

2623 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2625 &
shm_z⁄e
->
shm
.
«me
);

2627  
NGX_CONF_ERROR
;

2630 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

2631 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

2633 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

2634 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

2635 (
NGX_CONF_BITMASK_SET


2636 |
NGX_HTTP_UPSTREAM_FT_OFF
));

2638 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

2639 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


2640 |
NGX_HTTP_UPSTREAM_FT_OFF
;

2643 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

2644 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

2647 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

2648 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

2651 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

2653 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

2654 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

2656 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

2657 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

2659 i‡(
c⁄f
->
up°ªam
.
no_ˇche
 && c⁄f->up°ªam.
ˇche_by∑ss
 =
NULL
) {

2660 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

2665 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

2666 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

2668 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

2669 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

2672 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

2673 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

2675 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

2676 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

2680 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
mëhod
, 
¥ev
->method, "");

2682 i‡(
c⁄f
->
mëhod
.
Àn


2683 && 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
 - 1] != ' ')

2685 
c⁄f
->
mëhod
.
d©a
[c⁄f->mëhod.
Àn
] = ' ';

2686 
c⁄f
->
mëhod
.
Àn
++;

2689 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

2690 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

2691 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

2692 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

2694 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

2695 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

2697 #i‡(
NGX_HTTP_SSL
)

2698 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
s¶_£ssi⁄_ªu£
,

2699 
¥ev
->
up°ªam
.
s¶_£ssi⁄_ªu£
, 1);

2702 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªdúe˘
, 
¥ev
->redirect, 1);

2704 i‡(
c⁄f
->
ªdúe˘
) {

2706 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2707 
c⁄f
->
ªdúe˘s
 = 
¥ev
->redirects;

2710 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
 && c⁄f->
uæ
.
d©a
) {

2712 
c⁄f
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

2713 (
ngx_hâp_¥oxy_ªwrôe_t
));

2714 i‡(
c⁄f
->
ªdúe˘s
 =
NULL
) {

2715  
NGX_CONF_ERROR
;

2718 
¥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ªdúe˘s
);

2719 i‡(
¥
 =
NULL
) {

2720  
NGX_CONF_ERROR
;

2723 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
,

2724 (
ngx_hâp_com∂ex_vÆue_t
));

2726 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

2728 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

2730 i‡(
c⁄f
->
v¨s
.
uri
.
Àn
) {

2731 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
c⁄f
->
uæ
;

2732 
¥
->
ª∂a˚mít
.
vÆue
 = 
c⁄f
->
loˇti⁄
;

2735 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
c⁄f
->
uæ
.len

2738 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

2739 i‡(
p
 =
NULL
) {

2740  
NGX_CONF_ERROR
;

2743 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

2745 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
uæ
.
d©a
, c⁄f->uæ.
Àn
);

2746 *
p
 = '/';

2748 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

2753 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_domaös
, 
¥ev
->cookõ_domaös, 
NULL
);

2755 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
cookõ_∑ths
, 
¥ev
->cookõ_∑ths, 
NULL
);

2757 #i‡(
NGX_HTTP_SSL
)

2758 i‡(
c⁄f
->
up°ªam
.
s¶
 =
NULL
) {

2759 
c⁄f
->
up°ªam
.
s¶
 = 
¥ev
->upstream.ssl;

2763 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hâp_vîsi⁄
, 
¥ev
->http_version,

2764 
NGX_HTTP_VERSION_10
);

2766 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_max_size
,

2767 
¥ev
->
hódîs_hash_max_size
, 512);

2769 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
hódîs_hash_buckë_size
,

2770 
¥ev
->
hódîs_hash_buckë_size
, 64);

2772 
c⁄f
->
hódîs_hash_buckë_size
 = 
	`ngx_Æign
(conf->headers_hash_bucket_size,

2773 
ngx_ˇchñöe_size
);

2775 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

2776 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

2777 
hash
.
«me
 = "proxy_headers_hash";

2779 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

2780 &
¥ev
->
up°ªam
, 
ngx_hâp_¥oxy_hide_hódîs
, &
hash
)

2781 !
NGX_OK
)

2783  
NGX_CONF_ERROR
;

2786 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

2787 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

2788 
c⁄f
->
v¨s
 = 
¥ev
->vars;

2791 i‡(
c⁄f
->
¥oxy_Àngths
 =
NULL
) {

2792 
c⁄f
->
¥oxy_Àngths
 = 
¥ev
->proxy_lengths;

2793 
c⁄f
->
¥oxy_vÆues
 = 
¥ev
->proxy_values;

2796 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
¥oxy_Àngths
) {

2797 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2798 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

2799 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

2800 
c⁄f
->
loˇti⁄
 = 
¥ev
->location;

2804 i‡(
c⁄f
->
body_sour˚
.
d©a
 =
NULL
) {

2805 
c⁄f
->
body_sour˚
 = 
¥ev
->body_source;

2806 
c⁄f
->
body_£t_Àn
 = 
¥ev
->body_set_len;

2807 
c⁄f
->
body_£t
 = 
¥ev
->body_set;

2810 i‡(
c⁄f
->
body_sour˚
.
d©a
 && c⁄f->
body_£t_Àn
 =
NULL
) {

2812 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

2814 
sc
.
cf
 = cf;

2815 
sc
.
sour˚
 = &
c⁄f
->
body_sour˚
;

2816 
sc
.
Êushes
 = &
c⁄f
->flushes;

2817 
sc
.
Àngths
 = &
c⁄f
->
body_£t_Àn
;

2818 
sc
.
vÆues
 = &
c⁄f
->
body_£t
;

2819 
sc
.
com∂ëe_Àngths
 = 1;

2820 
sc
.
com∂ëe_vÆues
 = 1;

2822 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

2823  
NGX_CONF_ERROR
;

2827 i‡(
	`ngx_hâp_¥oxy_mîge_hódîs
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

2828  
NGX_CONF_ERROR
;

2831  
NGX_CONF_OK
;

2832 
	}
}

2835 
ngx_öt_t


2836 
	$ngx_hâp_¥oxy_mîge_hódîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
c⁄f
,

2837 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
¥ev
)

2839 
u_ch¨
 *
p
;

2840 
size_t
 
size
;

2841 
uöçå_t
 *
code
;

2842 
ngx_uöt_t
 
i
;

2843 
ngx_¨øy_t
 
hódîs_«mes
, 
hódîs_mîged
;

2844 
ngx_keyvÆ_t
 *
§c
, *
s
, *
h
;

2845 
ngx_hash_key_t
 *
hk
;

2846 
ngx_hash_öô_t
 
hash
;

2847 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

2848 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

2850 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2851 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

2852 
c⁄f
->
hódîs_£t_Àn
 = 
¥ev
->headers_set_len;

2853 
c⁄f
->
hódîs_£t
 = 
¥ev
->headers_set;

2854 
c⁄f
->
hódîs_£t_hash
 = 
¥ev
->headers_set_hash;

2855 
c⁄f
->
hódîs_sour˚
 = 
¥ev
->headers_source;

2858 i‡(
c⁄f
->
hódîs_£t_hash
.
buckës


2859 #i‡(
NGX_HTTP_CACHE
)

2860 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
Ë=(
¥ev
->upstream.cache == NULL))

2864  
NGX_OK
;

2868 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

2869 !
NGX_OK
)

2871  
NGX_ERROR
;

2874 i‡(
	`ngx_¨øy_öô
(&
hódîs_mîged
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_keyvÆ_t
))

2875 !
NGX_OK
)

2877  
NGX_ERROR
;

2880 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2881 
c⁄f
->
hódîs_sour˚
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

2882 (
ngx_keyvÆ_t
));

2883 i‡(
c⁄f
->
hódîs_sour˚
 =
NULL
) {

2884  
NGX_ERROR
;

2888 
c⁄f
->
hódîs_£t_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

2889 i‡(
c⁄f
->
hódîs_£t_Àn
 =
NULL
) {

2890  
NGX_ERROR
;

2893 
c⁄f
->
hódîs_£t
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

2894 i‡(
c⁄f
->
hódîs_£t
 =
NULL
) {

2895  
NGX_ERROR
;

2899 #i‡(
NGX_HTTP_CACHE
)

2901 
h
 = 
c⁄f
->
up°ªam
.
ˇche
 ? 
ngx_hâp_¥oxy_ˇche_hódîs
:

2902 
ngx_hâp_¥oxy_hódîs
;

2905 
h
 = 
ngx_hâp_¥oxy_hódîs
;

2909 
§c
 = 
c⁄f
->
hódîs_sour˚
->
ñts
;

2910 
i
 = 0; i < 
c⁄f
->
hódîs_sour˚
->
√…s
; i++) {

2912 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2913 i‡(
s
 =
NULL
) {

2914  
NGX_ERROR
;

2917 *
s
 = 
§c
[
i
];

2920 
h
->
key
.
Àn
) {

2922 
§c
 = 
hódîs_mîged
.
ñts
;

2923 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2924 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

2925 
√xt
;

2929 
s
 = 
	`ngx_¨øy_push
(&
hódîs_mîged
);

2930 i‡(
s
 =
NULL
) {

2931  
NGX_ERROR
;

2934 *
s
 = *
h
;

2936 
√xt
:

2938 
h
++;

2942 
§c
 = 
hódîs_mîged
.
ñts
;

2943 
i
 = 0; i < 
hódîs_mîged
.
√…s
; i++) {

2945 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

2946 i‡(
hk
 =
NULL
) {

2947  
NGX_ERROR
;

2950 
hk
->
key
 = 
§c
[
i
].key;

2951 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2952 
hk
->
vÆue
 = (*) 1;

2954 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

2958 i‡(
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
§c
[
i
].
vÆue
) == 0) {

2959 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2960 (
ngx_hâp_s¸ùt_c›y_code_t
));

2961 i‡(
c›y
 =
NULL
) {

2962  
NGX_ERROR
;

2965 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

2966 
ngx_hâp_s¸ùt_c›y_Àn_code
;

2967 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

2968 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

2971 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

2972 + 
§c
[
i
].
key
.
Àn
 + (": ") - 1

2973 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1

2974 + (
uöçå_t
) - 1)

2975 & ~((
uöçå_t
) - 1);

2977 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

2978 i‡(
c›y
 =
NULL
) {

2979  
NGX_ERROR
;

2982 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

2983 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1

2984 + 
§c
[
i
].
vÆue
.
Àn
 + (
CRLF
) - 1;

2986 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

2988 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

2989 *
p
++ = ':'; *p++ = ' ';

2990 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
vÆue
.
d©a
, src[i].vÆue.
Àn
);

2991 *
p
++ = 
CR
; *∞
LF
;

2994 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

2995 (
ngx_hâp_s¸ùt_c›y_code_t
));

2996 i‡(
c›y
 =
NULL
) {

2997  
NGX_ERROR
;

3000 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3001 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3002 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3005 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3006 + 
§c
[
i
].
key
.
Àn
 + (": "Ë- 1 + (
uöçå_t
) - 1)

3007 & ~((
uöçå_t
) - 1);

3009 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3010 i‡(
c›y
 =
NULL
) {

3011  
NGX_ERROR
;

3014 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3015 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + (": ") - 1;

3017 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3018 
p
 = 
	`ngx_˝ymem
’, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

3019 *
p
++ = ':'; *p = ' ';

3022 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3024 
sc
.
cf
 = cf;

3025 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

3026 
sc
.
Êushes
 = &
c⁄f
->flushes;

3027 
sc
.
Àngths
 = &
c⁄f
->
hódîs_£t_Àn
;

3028 
sc
.
vÆues
 = &
c⁄f
->
hódîs_£t
;

3030 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3031  
NGX_ERROR
;

3035 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
,

3036 (
ngx_hâp_s¸ùt_c›y_code_t
));

3037 i‡(
c›y
 =
NULL
) {

3038  
NGX_ERROR
;

3041 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
)

3042 
ngx_hâp_s¸ùt_c›y_Àn_code
;

3043 
c›y
->
Àn
 = (
CRLF
) - 1;

3046 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

3047 + (
CRLF
Ë- 1 + (
uöçå_t
) - 1)

3048 & ~((
uöçå_t
) - 1);

3050 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, 
size
);

3051 i‡(
c›y
 =
NULL
) {

3052  
NGX_ERROR
;

3055 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

3056 
c›y
->
Àn
 = (
CRLF
) - 1;

3058 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

3059 *
p
++ = 
CR
; *∞
LF
;

3062 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3063 i‡(
code
 =
NULL
) {

3064  
NGX_ERROR
;

3067 *
code
 = (
uöçå_t
Ë
NULL
;

3069 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t
, (
uöçå_t
));

3070 i‡(
code
 =
NULL
) {

3071  
NGX_ERROR
;

3074 *
code
 = (
uöçå_t
Ë
NULL
;

3077 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
hódîs_£t_Àn
, (
uöçå_t
));

3078 i‡(
code
 =
NULL
) {

3079  
NGX_ERROR
;

3082 *
code
 = (
uöçå_t
Ë
NULL
;

3085 
hash
.hash = &
c⁄f
->
hódîs_£t_hash
;

3086 
hash
.
key
 = 
ngx_hash_key_lc
;

3087 
hash
.
max_size
 = 
c⁄f
->
hódîs_hash_max_size
;

3088 
hash
.
buckë_size
 = 
c⁄f
->
hódîs_hash_buckë_size
;

3089 
hash
.
«me
 = "proxy_headers_hash";

3090 
hash
.
poﬁ
 = 
cf
->pool;

3091 
hash
.
ãmp_poﬁ
 = 
NULL
;

3093  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

3094 
	}
}

3098 
	$ngx_hâp_¥oxy_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3100 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3102 
size_t
 
add
;

3103 
u_sh‹t
 
p‹t
;

3104 
ngx_°r_t
 *
vÆue
, *
uæ
;

3105 
ngx_uæ_t
 
u
;

3106 
ngx_uöt_t
 
n
;

3107 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3108 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3110 i‡(
∂cf
->
up°ªam
.up°ªam ||Ölcf->
¥oxy_Àngths
) {

3114 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

3116 
˛cf
->
h™dÀr
 = 
ngx_hâp_¥oxy_h™dÀr
;

3118 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

3119 
˛cf
->
auto_ªdúe˘
 = 1;

3122 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3124 
uæ
 = &
vÆue
[1];

3126 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

3128 i‡(
n
) {

3130 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3132 
sc
.
cf
 = cf;

3133 
sc
.
sour˚
 = 
uæ
;

3134 
sc
.
Àngths
 = &
∂cf
->
¥oxy_Àngths
;

3135 
sc
.
vÆues
 = &
∂cf
->
¥oxy_vÆues
;

3136 
sc
.
v¨übÀs
 = 
n
;

3137 
sc
.
com∂ëe_Àngths
 = 1;

3138 
sc
.
com∂ëe_vÆues
 = 1;

3140 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3141  
NGX_CONF_ERROR
;

3144 #i‡(
NGX_HTTP_SSL
)

3145 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

3146  
NGX_CONF_ERROR
;

3150  
NGX_CONF_OK
;

3153 i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "http://", 7) == 0) {

3154 
add
 = 7;

3155 
p‹t
 = 80;

3157 } i‡(
	`ngx_°∫ˇ£cmp
(
uæ
->
d©a
, (
u_ch¨
 *) "https://", 8) == 0) {

3159 #i‡(
NGX_HTTP_SSL
)

3160 i‡(
	`ngx_hâp_¥oxy_£t_s¶
(
cf
, 
∂cf
Ë!
NGX_OK
) {

3161  
NGX_CONF_ERROR
;

3164 
add
 = 8;

3165 
p‹t
 = 443;

3167 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3169  
NGX_CONF_ERROR
;

3173 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalid URLÖrefix");

3174  
NGX_CONF_ERROR
;

3177 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3179 
u
.
uæ
.
Àn
 = uæ->À¿- 
add
;

3180 
u
.
uæ
.
d©a
 = uæ->d©®+ 
add
;

3181 
u
.
deÁu…_p‹t
 = 
p‹t
;

3182 
u
.
uri_∑π
 = 1;

3183 
u
.
no_ªsﬁve
 = 1;

3185 
∂cf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

3186 i‡(
∂cf
->
up°ªam
.up°ªam =
NULL
) {

3187  
NGX_CONF_ERROR
;

3190 
∂cf
->
v¨s
.
schema
.
Àn
 = 
add
;

3191 
∂cf
->
v¨s
.
schema
.
d©a
 = 
uæ
->data;

3192 
∂cf
->
v¨s
.
key_°¨t
 =Ölcf->v¨s.
schema
;

3194 
	`ngx_hâp_¥oxy_£t_v¨s
(&
u
, &
∂cf
->
v¨s
);

3196 
∂cf
->
loˇti⁄
 = 
˛cf
->
«me
;

3198 i‡(
˛cf
->
«med


3199 #i‡(
NGX_PCRE
)

3200 || 
˛cf
->
ªgex


3202 || 
˛cf
->
n⁄ame
)

3204 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3205 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3211  
NGX_CONF_ERROR
;

3214 
∂cf
->
loˇti⁄
.
Àn
 = 0;

3217 
∂cf
->
uæ
 = *url;

3219  
NGX_CONF_OK
;

3220 
	}
}

3224 
	$ngx_hâp_¥oxy_ªdúe˘
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3226 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3228 
u_ch¨
 *
p
;

3229 
ngx_°r_t
 *
vÆue
;

3230 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3231 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3233 i‡(
∂cf
->
ªdúe˘
 == 0) {

3234  
NGX_CONF_OK
;

3237 
∂cf
->
ªdúe˘
 = 1;

3239 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3241 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3242 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3243 
∂cf
->
ªdúe˘
 = 0;

3244 
∂cf
->
ªdúe˘s
 = 
NULL
;

3245  
NGX_CONF_OK
;

3248 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "false") == 0) {

3249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

3251 
∂cf
->
ªdúe˘
 = 0;

3252 
∂cf
->
ªdúe˘s
 = 
NULL
;

3253  
NGX_CONF_OK
;

3256 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") != 0) {

3257 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3258 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3259  
NGX_CONF_ERROR
;

3263 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3264 
∂cf
->
ªdúe˘s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3265 (
ngx_hâp_¥oxy_ªwrôe_t
));

3266 i‡(
∂cf
->
ªdúe˘s
 =
NULL
) {

3267  
NGX_CONF_ERROR
;

3271 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
ªdúe˘s
);

3272 i‡(
¥
 =
NULL
) {

3273  
NGX_CONF_ERROR
;

3276 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "default") == 0) {

3277 i‡(
∂cf
->
¥oxy_Àngths
) {

3278 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3281  
NGX_CONF_ERROR
;

3284 i‡(
∂cf
->
uæ
.
d©a
 =
NULL
) {

3285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3288  
NGX_CONF_ERROR
;

3291 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3293 
	`ngx_memzîo
(&
¥
->
∑âîn
.
com∂ex
, (
ngx_hâp_com∂ex_vÆue_t
));

3295 
	`ngx_memzîo
(&
¥
->
ª∂a˚mít
, (
ngx_hâp_com∂ex_vÆue_t
));

3297 i‡(
∂cf
->
v¨s
.
uri
.
Àn
) {

3298 
¥
->
∑âîn
.
com∂ex
.
vÆue
 = 
∂cf
->
uæ
;

3299 
¥
->
ª∂a˚mít
.
vÆue
 = 
∂cf
->
loˇti⁄
;

3302 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
 = 
∂cf
->
uæ
.len + ("/") - 1;

3304 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
Àn
);

3305 i‡(
p
 =
NULL
) {

3306  
NGX_CONF_ERROR
;

3309 
¥
->
∑âîn
.
com∂ex
.
vÆue
.
d©a
 = 
p
;

3311 
p
 = 
	`ngx_˝ymem
’, 
∂cf
->
uæ
.
d©a
,Ölcf->uæ.
Àn
);

3312 *
p
 = '/';

3314 
	`ngx_°r_£t
(&
¥
->
ª∂a˚mít
.
vÆue
, "/");

3317  
NGX_CONF_OK
;

3321 i‡(
vÆue
[1].
d©a
[0] == '~') {

3322 
vÆue
[1].
Àn
--;

3323 
vÆue
[1].
d©a
++;

3325 i‡(
vÆue
[1].
d©a
[0] == '*') {

3326 
vÆue
[1].
Àn
--;

3327 
vÆue
[1].
d©a
++;

3329 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3330  
NGX_CONF_ERROR
;

3334 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3335  
NGX_CONF_ERROR
;

3341 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3343 
ccv
.
cf
 = cf;

3344 
ccv
.
vÆue
 = &value[1];

3345 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3347 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3348  
NGX_CONF_ERROR
;

3351 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3355 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3357 
ccv
.
cf
 = cf;

3358 
ccv
.
vÆue
 = &value[2];

3359 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3361 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3362  
NGX_CONF_ERROR
;

3365  
NGX_CONF_OK
;

3366 
	}
}

3370 
	$ngx_hâp_¥oxy_cookõ_domaö
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3372 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3374 
ngx_°r_t
 *
vÆue
;

3375 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3376 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3378 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3379  
NGX_CONF_OK
;

3382 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3384 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3386 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3387 
∂cf
->
cookõ_domaös
 = 
NULL
;

3388  
NGX_CONF_OK
;

3391 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3392 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3393  
NGX_CONF_ERROR
;

3396 i‡(
∂cf
->
cookõ_domaös
 =
NGX_CONF_UNSET_PTR
) {

3397 
∂cf
->
cookõ_domaös
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3398 (
ngx_hâp_¥oxy_ªwrôe_t
));

3399 i‡(
∂cf
->
cookõ_domaös
 =
NULL
) {

3400  
NGX_CONF_ERROR
;

3404 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_domaös
);

3405 i‡(
¥
 =
NULL
) {

3406  
NGX_CONF_ERROR
;

3409 i‡(
vÆue
[1].
d©a
[0] == '~') {

3410 
vÆue
[1].
Àn
--;

3411 
vÆue
[1].
d©a
++;

3413 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3414  
NGX_CONF_ERROR
;

3419 i‡(
vÆue
[1].
d©a
[0] == '.') {

3420 
vÆue
[1].
Àn
--;

3421 
vÆue
[1].
d©a
++;

3424 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3426 
ccv
.
cf
 = cf;

3427 
ccv
.
vÆue
 = &value[1];

3428 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3430 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3431  
NGX_CONF_ERROR
;

3434 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_domaö_h™dÀr
;

3436 i‡(
vÆue
[2].
d©a
[0] == '.') {

3437 
vÆue
[2].
Àn
--;

3438 
vÆue
[2].
d©a
++;

3442 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3444 
ccv
.
cf
 = cf;

3445 
ccv
.
vÆue
 = &value[2];

3446 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3448 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3449  
NGX_CONF_ERROR
;

3452  
NGX_CONF_OK
;

3453 
	}
}

3457 
	$ngx_hâp_¥oxy_cookõ_∑th
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3459 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3461 
ngx_°r_t
 *
vÆue
;

3462 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
;

3463 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3465 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3466  
NGX_CONF_OK
;

3469 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3471 i‡(
cf
->
¨gs
->
√…s
 == 2) {

3473 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3474 
∂cf
->
cookõ_∑ths
 = 
NULL
;

3475  
NGX_CONF_OK
;

3478 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3479 "övÆidÖ¨amëî \"%V\"", &
vÆue
[1]);

3480  
NGX_CONF_ERROR
;

3483 i‡(
∂cf
->
cookõ_∑ths
 =
NGX_CONF_UNSET_PTR
) {

3484 
∂cf
->
cookõ_∑ths
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

3485 (
ngx_hâp_¥oxy_ªwrôe_t
));

3486 i‡(
∂cf
->
cookõ_∑ths
 =
NULL
) {

3487  
NGX_CONF_ERROR
;

3491 
¥
 = 
	`ngx_¨øy_push
(
∂cf
->
cookõ_∑ths
);

3492 i‡(
¥
 =
NULL
) {

3493  
NGX_CONF_ERROR
;

3496 i‡(
vÆue
[1].
d©a
[0] == '~') {

3497 
vÆue
[1].
Àn
--;

3498 
vÆue
[1].
d©a
++;

3500 i‡(
vÆue
[1].
d©a
[0] == '*') {

3501 
vÆue
[1].
Àn
--;

3502 
vÆue
[1].
d©a
++;

3504 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 1Ë!
NGX_OK
) {

3505  
NGX_CONF_ERROR
;

3509 i‡(
	`ngx_hâp_¥oxy_ªwrôe_ªgex
(
cf
, 
¥
, &
vÆue
[1], 0Ë!
NGX_OK
) {

3510  
NGX_CONF_ERROR
;

3516 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3518 
ccv
.
cf
 = cf;

3519 
ccv
.
vÆue
 = &value[1];

3520 
ccv
.
com∂ex_vÆue
 = &
¥
->
∑âîn
.
com∂ex
;

3522 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3523  
NGX_CONF_ERROR
;

3526 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_com∂ex_h™dÀr
;

3529 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3531 
ccv
.
cf
 = cf;

3532 
ccv
.
vÆue
 = &value[2];

3533 
ccv
.
com∂ex_vÆue
 = &
¥
->
ª∂a˚mít
;

3535 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3536  
NGX_CONF_ERROR
;

3539  
NGX_CONF_OK
;

3540 
	}
}

3543 
ngx_öt_t


3544 
	$ngx_hâp_¥oxy_ªwrôe_ªgex
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_ªwrôe_t
 *
¥
,

3545 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3547 #i‡(
NGX_PCRE
)

3548 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3549 
ngx_ªgex_compûe_t
 
rc
;

3551 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3553 
rc
.
∑âîn
 = *
ªgex
;

3554 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3555 
rc
.
îr
.
d©a
 = 
îr°r
;

3557 i‡(
ˇ£Àss
) {

3558 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3561 
¥
->
∑âîn
.
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3562 i‡(
¥
->
∑âîn
.
ªgex
 =
NULL
) {

3563  
NGX_ERROR
;

3566 
¥
->
h™dÀr
 = 
ngx_hâp_¥oxy_ªwrôe_ªgex_h™dÀr
;

3568  
NGX_OK
;

3572 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3573 "usögÑegex \"%V\"Ñequúe†PCREÜibøry", 
ªgex
);

3574  
NGX_ERROR
;

3577 
	}
}

3581 
	$ngx_hâp_¥oxy_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3583 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3585 
ngx_°r_t
 *
vÆue
;

3586 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

3588 i‡(
∂cf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET


3589 || 
∂cf
->
up°ªam
.
°‹e_Àngths
)

3594 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3596 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3597 
∂cf
->
up°ªam
.
°‹e
 = 0;

3598  
NGX_CONF_OK
;

3601 #i‡(
NGX_HTTP_CACHE
)

3603 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


3604 && 
∂cf
->
up°ªam
.
ˇche
 !
NULL
)

3611 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

3612 
∂cf
->
up°ªam
.
°‹e
 = 1;

3613  
NGX_CONF_OK
;

3617 
vÆue
[1].
Àn
++;

3619 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

3621 
sc
.
cf
 = cf;

3622 
sc
.
sour˚
 = &
vÆue
[1];

3623 
sc
.
Àngths
 = &
∂cf
->
up°ªam
.
°‹e_Àngths
;

3624 
sc
.
vÆues
 = &
∂cf
->
up°ªam
.
°‹e_vÆues
;

3625 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);

3626 
sc
.
com∂ëe_Àngths
 = 1;

3627 
sc
.
com∂ëe_vÆues
 = 1;

3629 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

3630  
NGX_CONF_ERROR
;

3633  
NGX_CONF_OK
;

3634 
	}
}

3637 #i‡(
NGX_HTTP_CACHE
)

3640 
	$ngx_hâp_¥oxy_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3642 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3644 
ngx_°r_t
 *
vÆue
;

3646 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3648 i‡(
∂cf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

3652 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

3653 
∂cf
->
up°ªam
.
ˇche
 = 
NULL
;

3654  
NGX_CONF_OK
;

3657 i‡(
∂cf
->
up°ªam
.
°‹e
 > 0 ||Ölcf->up°ªam.
°‹e_Àngths
) {

3661 
∂cf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

3662 &
ngx_hâp_¥oxy_moduÀ
);

3663 i‡(
∂cf
->
up°ªam
.
ˇche
 =
NULL
) {

3664  
NGX_CONF_ERROR
;

3667  
NGX_CONF_OK
;

3668 
	}
}

3672 
	$ngx_hâp_¥oxy_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3674 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

3676 
ngx_°r_t
 *
vÆue
;

3677 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

3679 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3681 i‡(
∂cf
->
ˇche_key
.
vÆue
.
d©a
) {

3685 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

3687 
ccv
.
cf
 = cf;

3688 
ccv
.
vÆue
 = &value[1];

3689 
ccv
.
com∂ex_vÆue
 = &
∂cf
->
ˇche_key
;

3691 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

3692  
NGX_CONF_ERROR
;

3695  
NGX_CONF_OK
;

3696 
	}
}

3702 
	$ngx_hâp_¥oxy_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

3704 #i‡(
NGX_FREEBSD
)

3705 
ssize_t
 *
≈
 = 
d©a
;

3707 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

3708 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3711 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

3713  
NGX_CONF_ERROR
;

3716 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

3717 
ssize_t
 *
≈
 = 
d©a
;

3719 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3722 *
≈
 = 0;

3726  
NGX_CONF_OK
;

3727 
	}
}

3730 #i‡(
NGX_HTTP_SSL
)

3732 
ngx_öt_t


3733 
	$ngx_hâp_¥oxy_£t_s¶
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_¥oxy_loc_c⁄f_t
 *
∂cf
)

3735 
ngx_poﬁ_˛ónup_t
 *
˛n
;

3737 
∂cf
->
up°ªam
.
s¶
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_s¶_t
));

3738 i‡(
∂cf
->
up°ªam
.
s¶
 =
NULL
) {

3739  
NGX_ERROR
;

3742 
∂cf
->
up°ªam
.
s¶
->
log
 = 
cf
->log;

3744 i‡(
	`ngx_s¶_¸óã
(
∂cf
->
up°ªam
.
s¶
,

3745 
NGX_SSL_SSLv2
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


3746 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
,

3747 
NULL
)

3748 !
NGX_OK
)

3750  
NGX_ERROR
;

3753 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

3754 i‡(
˛n
 =
NULL
) {

3755  
NGX_ERROR
;

3758 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

3759 
˛n
->
d©a
 = 
∂cf
->
up°ªam
.
s¶
;

3761  
NGX_OK
;

3762 
	}
}

3768 
	$ngx_hâp_¥oxy_£t_v¨s
(
ngx_uæ_t
 *
u
, 
ngx_hâp_¥oxy_v¨s_t
 *
v
)

3770 i‡(
u
->
Ámûy
 !
AF_UNIX
) {

3772 i‡(
u
->
no_p‹t
 || u->
p‹t
 =u->
deÁu…_p‹t
) {

3774 
v
->
ho°_hódî
 = 
u
->
ho°
;

3776 i‡(
u
->
deÁu…_p‹t
 == 80) {

3777 
	`ngx_°r_£t
(&
v
->
p‹t
, "80");

3780 
	`ngx_°r_£t
(&
v
->
p‹t
, "443");

3784 
v
->
ho°_hódî
.
Àn
 = 
u
->
ho°
.À¿+ 1 + u->
p‹t_ãxt
.len;

3785 
v
->
ho°_hódî
.
d©a
 = 
u
->
ho°
.data;

3786 
v
->
p‹t
 = 
u
->
p‹t_ãxt
;

3789 
v
->
key_°¨t
.
Àn
 +v->
ho°_hódî
.len;

3792 
	`ngx_°r_£t
(&
v
->
ho°_hódî
, "localhost");

3793 
	`ngx_°r_nuŒ
(&
v
->
p‹t
);

3794 
v
->
key_°¨t
.
Àn
 +("unix:"Ë- 1 + 
u
->
ho°
.len + 1;

3797 
v
->
uri
 = 
u
->uri;

3798 
	}
}

	@src/http/modules/ngx_http_random_index_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_Êag_t
 
	míabÀ
;

15 } 
	tngx_hâp_øndom_ödex_loc_c⁄f_t
;

18 
	#NGX_HTTP_RANDOM_INDEX_PREALLOCATE
 50

	)

21 
ngx_öt_t
 
ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_dú_t
 *
dú
, 
ngx_°r_t
 *
«me
);

23 
ngx_öt_t
 
ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

25 *
ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

26 *
∑ª¡
, *
chûd
);

29 
ngx_comm™d_t
 
	gngx_hâp_øndom_ödex_comm™ds
[] = {

31 { 
ngx_°rög
("random_index"),

32 
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

33 
ngx_c⁄f_£t_Êag_¶Ÿ
,

34 
NGX_HTTP_LOC_CONF_OFFSET
,

35 
off£tof
(
ngx_hâp_øndom_ödex_loc_c⁄f_t
, 
íabÀ
),

36 
NULL
 },

38 
ngx_nuŒ_comm™d


42 
ngx_hâp_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ_˘x
 = {

43 
NULL
,

44 
ngx_hâp_øndom_ödex_öô
,

46 
NULL
,

47 
NULL
,

49 
NULL
,

50 
NULL
,

52 
ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
,

53 
ngx_hâp_øndom_ödex_mîge_loc_c⁄f


57 
ngx_moduÀ_t
 
	gngx_hâp_øndom_ödex_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_hâp_øndom_ödex_moduÀ_˘x
,

60 
ngx_hâp_øndom_ödex_comm™ds
,

61 
NGX_HTTP_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


73 
ngx_öt_t


74 
	$ngx_hâp_øndom_ödex_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

76 
u_ch¨
 *
œ°
, *
fûíame
;

77 
size_t
 
Àn
, 
Æloˇãd
, 
roŸ
;

78 
ngx_îr_t
 
îr
;

79 
ngx_öt_t
 
rc
;

80 
ngx_°r_t
 
∑th
, 
uri
, *
«me
;

81 
ngx_dú_t
 
dú
;

82 
ngx_uöt_t
 
n
, 
Àvñ
;

83 
ngx_¨øy_t
 
«mes
;

84 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
æcf
;

86 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] != '/') {

87  
NGX_DECLINED
;

90 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

91  
NGX_DECLINED
;

94 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_øndom_ödex_moduÀ
);

96 i‡(!
æcf
->
íabÀ
) {

97  
NGX_DECLINED
;

100 #i‡(
NGX_HAVE_D_TYPE
)

101 
Àn
 = 
NGX_DIR_MASK_LEN
;

103 
Àn
 = 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

106 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Àn
);

107 i‡(
œ°
 =
NULL
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

111 
Æloˇãd
 = 
∑th
.
Àn
;

113 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
 - 1;

114 
∑th
.
d©a
[∑th.
Àn
] = '\0';

116 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

117 "hâ∞øndom index: \"%s\"", 
∑th
.
d©a
);

119 i‡(
	`ngx_›í_dú
(&
∑th
, &
dú
Ë=
NGX_ERROR
) {

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 =
NGX_ENOENT


123 || 
îr
 =
NGX_ENOTDIR


124 || 
îr
 =
NGX_ENAMETOOLONG
)

126 
Àvñ
 = 
NGX_LOG_ERR
;

127 
rc
 = 
NGX_HTTP_NOT_FOUND
;

129 } i‡(
îr
 =
NGX_EACCES
) {

130 
Àvñ
 = 
NGX_LOG_ERR
;

131 
rc
 = 
NGX_HTTP_FORBIDDEN
;

134 
Àvñ
 = 
NGX_LOG_CRIT
;

135 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

138 
	`ngx_log_îr‹
(
Àvñ
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

139 
ngx_›í_dú_n
 " \"%s\" faûed", 
∑th
.
d©a
);

141  
rc
;

144 i‡(
	`ngx_¨øy_öô
(&
«mes
, 
r
->
poﬁ
, 32, (
ngx_°r_t
)Ë!
NGX_OK
) {

145  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

148 
fûíame
 = 
∑th
.
d©a
;

149 
fûíame
[
∑th
.
Àn
] = '/';

152 
	`ngx_£t_î∫o
(0);

154 i‡(
	`ngx_ªad_dú
(&
dú
Ë=
NGX_ERROR
) {

155 
îr
 = 
ngx_î∫o
;

157 i‡(
îr
 !
NGX_ENOMOREFILES
) {

158 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

159 
ngx_ªad_dú_n
 " \"%V\" faûed", &
∑th
);

160  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

166 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

167 "hâ∞øndom index fûe: \"%s\"", 
	`ngx_de_«me
(&
dú
));

169 i‡(
	`ngx_de_«me
(&
dú
)[0] == '.') {

173 
Àn
 = 
	`ngx_de_«mñí
(&
dú
);

175 i‡(
dú
.
ty≥
 =0 || 
	`ngx_de_is_lök
(&dir)) {

179 i‡(
∑th
.
Àn
 + 1 +Üí + 1 > 
Æloˇãd
) {

180 
Æloˇãd
 = 
∑th
.
Àn
 + 1 +Üen + 1

181 + 
NGX_HTTP_RANDOM_INDEX_PREALLOCATE
;

183 
fûíame
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

184 i‡(
fûíame
 =
NULL
) {

185  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

188 
œ°
 = 
	`ngx_˝y°∫
(
fûíame
, 
∑th
.
d©a
,Ö©h.
Àn
 + 1);

189 *
œ°
++ = '/';

192 
	`ngx_˝y°∫
(
œ°
, 
	`ngx_de_«me
(&
dú
), 
Àn
 + 1);

194 i‡(
	`ngx_de_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

195 
îr
 = 
ngx_î∫o
;

197 i‡(
îr
 !
NGX_ENOENT
) {

198 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
îr
,

199 
ngx_de_öfo_n
 " \"%s\" faûed", 
fûíame
);

200  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

203 i‡(
	`ngx_de_lök_öfo
(
fûíame
, &
dú
Ë=
NGX_FILE_ERROR
) {

204 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

205 
ngx_de_lök_öfo_n
 " \"%s\" failed",

206 
fûíame
);

207  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

212 i‡(!
	`ngx_de_is_fûe
(&
dú
)) {

216 
«me
 = 
	`ngx_¨øy_push
(&
«mes
);

217 i‡(
«me
 =
NULL
) {

218  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

221 
«me
->
Àn
 =Üen;

223 
«me
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

224 i‡(
«me
->
d©a
 =
NULL
) {

225  
	`ngx_hâp_øndom_ödex_îr‹
(
r
, &
dú
, &
∑th
);

228 
	`ngx_mem˝y
(
«me
->
d©a
, 
	`ngx_de_«me
(&
dú
), 
Àn
);

231 i‡(
	`ngx_˛o£_dú
(&
dú
Ë=
NGX_ERROR
) {

232 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

233 
ngx_˛o£_dú_n
 " \"%s\" faûed", &
∑th
);

236 
n
 = 
«mes
.
√…s
;

238 i‡(
n
 == 0) {

239  
NGX_DECLINED
;

242 
«me
 = 
«mes
.
ñts
;

244 
n
 = (
ngx_uöt_t
Ë(((
uöt64_t
Ë
	`ngx_øndom
() *Ç) / 0x80000000);

246 
uri
.
Àn
 = 
r
->uri.À¿+ 
«me
[
n
].len;

248 
uri
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, uri.
Àn
);

249 i‡(
uri
.
d©a
 =
NULL
) {

250  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

253 
œ°
 = 
	`ngx_c›y
(
uri
.
d©a
, 
r
->uri.d©a,Ñ->uri.
Àn
);

254 
	`ngx_mem˝y
(
œ°
, 
«me
[
n
].
d©a
,Çame[n].
Àn
);

256  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &r->
¨gs
);

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_hâp_øndom_ödex_îr‹
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_dú_t
 *
dú
,

262 
ngx_°r_t
 *
«me
)

264 i‡(
	`ngx_˛o£_dú
(
dú
Ë=
NGX_ERROR
) {

265 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

266 
ngx_˛o£_dú_n
 " \"%V\" faûed", 
«me
);

269  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

270 
	}
}

274 
	$ngx_hâp_øndom_ödex_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

276 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
;

278 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_øndom_ödex_loc_c⁄f_t
));

279 i‡(
c⁄f
 =
NULL
) {

280  
NULL
;

283 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET
;

285  
c⁄f
;

286 
	}
}

290 
	$ngx_hâp_øndom_ödex_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

292 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

293 
ngx_hâp_øndom_ödex_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

295 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

297  
NGX_CONF_OK
;

298 
	}
}

301 
ngx_öt_t


302 
	$ngx_hâp_øndom_ödex_öô
(
ngx_c⁄f_t
 *
cf
)

304 
ngx_hâp_h™dÀr_±
 *
h
;

305 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

307 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

309 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

310 i‡(
h
 =
NULL
) {

311  
NGX_ERROR
;

314 *
h
 = 
ngx_hâp_øndom_ödex_h™dÀr
;

316  
NGX_OK
;

317 
	}
}

	@src/http/modules/ngx_http_range_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

49 
off_t
 
	m°¨t
;

50 
off_t
 
	míd
;

51 
ngx_°r_t
 
	mc⁄ã¡_ønge
;

52 } 
	tngx_hâp_ønge_t
;

56 
off_t
 
	moff£t
;

57 
ngx_°r_t
 
	mbound¨y_hódî
;

58 
ngx_¨øy_t
 
	mønges
;

59 } 
	tngx_hâp_ønge_fûãr_˘x_t
;

62 
ngx_öt_t
 
ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_uöt_t
 
ønges
);

64 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

65 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

67 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
);

68 
ngx_öt_t
 
ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
);

69 
ngx_öt_t
 
ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

71 
ngx_öt_t
 
ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

73 
ngx_öt_t
 
ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
);

76 
ngx_öt_t
 
ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

77 
ngx_öt_t
 
ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

80 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
 = {

81 
NULL
,

82 
ngx_hâp_ønge_hódî_fûãr_öô
,

84 
NULL
,

85 
NULL
,

87 
NULL
,

88 
NULL
,

90 
NULL
,

91 
NULL
,

95 
ngx_moduÀ_t
 
	gngx_hâp_ønge_hódî_fûãr_moduÀ
 = {

96 
NGX_MODULE_V1
,

97 &
ngx_hâp_ønge_hódî_fûãr_moduÀ_˘x
,

98 
NULL
,

99 
NGX_HTTP_MODULE
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NGX_MODULE_V1_PADDING


111 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ_˘x
 = {

112 
NULL
,

113 
ngx_hâp_ønge_body_fûãr_öô
,

115 
NULL
,

116 
NULL
,

118 
NULL
,

119 
NULL
,

121 
NULL
,

122 
NULL
,

126 
ngx_moduÀ_t
 
	gngx_hâp_ønge_body_fûãr_moduÀ
 = {

127 
NGX_MODULE_V1
,

128 &
ngx_hâp_ønge_body_fûãr_moduÀ_˘x
,

129 
NULL
,

130 
NGX_HTTP_MODULE
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NULL
,

137 
NULL
,

138 
NGX_MODULE_V1_PADDING


142 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

143 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

146 
ngx_öt_t


147 
	$ngx_hâp_ønge_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

149 
time_t
 
if_ønge_time
;

150 
ngx_°r_t
 *
if_ønge
, *
ëag
;

151 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

152 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

154 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10


155 || 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


156 || 
r
 !r->
maö


157 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == -1

158 || !
r
->
Ælow_ønges
)

160  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

163 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

165 i‡(
˛cf
->
max_ønges
 == 0) {

166  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

169 i‡(
r
->
hódîs_ö
.
ønge
 =
NULL


170 || 
r
->
hódîs_ö
.
ønge
->
vÆue
.
Àn
 < 7

171 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
,

172 (
u_ch¨
 *) "bytes=", 6)

175 
√xt_fûãr
;

178 i‡(
r
->
hódîs_ö
.
if_ønge
) {

180 
if_ønge
 = &
r
->
hódîs_ö
.if_ønge->
vÆue
;

182 i‡(
if_ønge
->
Àn
 >2 && if_ønge->
d©a
[if_range->len - 1] == '"') {

184 i‡(
r
->
hódîs_out
.
ëag
 =
NULL
) {

185 
√xt_fûãr
;

188 
ëag
 = &
r
->
hódîs_out
.ëag->
vÆue
;

190 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

191 "hâ∞ú:%VÉèg:%V", 
if_ønge
, 
ëag
);

193 i‡(
if_ønge
->
Àn
 !
ëag
->len

194 || 
	`ngx_°∫cmp
(
if_ønge
->
d©a
, 
ëag
->d©a,Éèg->
Àn
) != 0)

196 
√xt_fûãr
;

199 
∑r£
;

202 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 =(
time_t
) -1) {

203 
√xt_fûãr
;

206 
if_ønge_time
 = 
	`ngx_hâp_∑r£_time
(
if_ønge
->
d©a
, if_ønge->
Àn
);

208 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

210 
if_ønge_time
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

212 i‡(
if_ønge_time
 !
r
->
hódîs_out
.
œ°_modifõd_time
) {

213 
√xt_fûãr
;

217 
∑r£
:

219 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ønge_fûãr_˘x_t
));

220 i‡(
˘x
 =
NULL
) {

221  
NGX_ERROR
;

224 i‡(
	`ngx_¨øy_öô
(&
˘x
->
ønges
, 
r
->
poﬁ
, 1, (
ngx_hâp_ønge_t
))

225 !
NGX_OK
)

227  
NGX_ERROR
;

230 
	`ngx_hâp_ønge_∑r£
(
r
, 
˘x
, 
˛cf
->
max_ønges
)) {

232 
NGX_OK
:

233 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

235 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_PARTIAL_CONTENT
;

236 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

238 i‡(
˘x
->
ønges
.
√…s
 == 1) {

239  
	`ngx_hâp_ønge_sögÀ∑π_hódî
(
r
, 
˘x
);

242  
	`ngx_hâp_ønge_mu…ù¨t_hódî
(
r
, 
˘x
);

244 
NGX_HTTP_RANGE_NOT_SATISFIABLE
:

245  
	`ngx_hâp_ønge_nŸ_ßtisfübÀ
(
r
);

247 
NGX_ERROR
:

248  
NGX_ERROR
;

254 
√xt_fûãr
:

256 
r
->
hódîs_out
.
ac˚±_ønges
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

257 i‡(
r
->
hódîs_out
.
ac˚±_ønges
 =
NULL
) {

258  
NGX_ERROR
;

261 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 1;

262 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
key
, "Accept-Ranges");

263 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
ac˚±_ønges
->
vÆue
, "bytes");

265  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

266 
	}
}

269 
ngx_öt_t


270 
	$ngx_hâp_ønge_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
,

271 
ngx_uöt_t
 
ønges
)

273 
u_ch¨
 *
p
;

274 
off_t
 
°¨t
, 
íd
, 
size
, 
c⁄ã¡_Àngth
;

275 
ngx_uöt_t
 
suffix
;

276 
ngx_hâp_ønge_t
 *
ønge
;

278 
p
 = 
r
->
hódîs_ö
.
ønge
->
vÆue
.
d©a
 + 6;

279 
size
 = 0;

280 
c⁄ã¡_Àngth
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
;

283 
°¨t
 = 0;

284 
íd
 = 0;

285 
suffix
 = 0;

287 *
p
 == ' ') {Ö++; }

289 i‡(*
p
 != '-') {

290 i‡(*
p
 < '0' || *p > '9') {

291  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

294 *
p
 >= '0' && *p <= '9') {

295 
°¨t
 = sèπ * 10 + *
p
++ - '0';

298 *
p
 == ' ') {Ö++; }

300 i‡(*
p
++ != '-') {

301  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

304 *
p
 == ' ') {Ö++; }

306 i‡(*
p
 == ',' || *p == '\0') {

307 
íd
 = 
c⁄ã¡_Àngth
;

308 
found
;

312 
suffix
 = 1;

313 
p
++;

316 i‡(*
p
 < '0' || *p > '9') {

317  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

320 *
p
 >= '0' && *p <= '9') {

321 
íd
 =Énd * 10 + *
p
++ - '0';

324 *
p
 == ' ') {Ö++; }

326 i‡(*
p
 != ',' && *p != '\0') {

327  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

330 i‡(
suffix
) {

331 
°¨t
 = 
c⁄ã¡_Àngth
 - 
íd
;

332 
íd
 = 
c⁄ã¡_Àngth
 - 1;

335 i‡(
íd
 >
c⁄ã¡_Àngth
) {

336 
íd
 = 
c⁄ã¡_Àngth
;

339 
íd
++;

342 
found
:

344 i‡(
°¨t
 < 
íd
) {

345 
ønge
 = 
	`ngx_¨øy_push
(&
˘x
->
ønges
);

346 i‡(
ønge
 =
NULL
) {

347  
NGX_ERROR
;

350 
ønge
->
°¨t
 = start;

351 
ønge
->
íd
 =Énd;

353 
size
 +
íd
 - 
°¨t
;

355 i‡(
ønges
-- == 0) {

356  
NGX_DECLINED
;

360 i‡(*
p
++ != ',') {

365 i‡(
˘x
->
ønges
.
√…s
 == 0) {

366  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

369 i‡(
size
 > 
c⁄ã¡_Àngth
) {

370  
NGX_DECLINED
;

373  
NGX_OK
;

374 
	}
}

377 
ngx_öt_t


378 
	$ngx_hâp_ønge_sögÀ∑π_hódî
(
ngx_hâp_ªque°_t
 *
r
,

379 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

381 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

382 
ngx_hâp_ønge_t
 *
ønge
;

384 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

385 i‡(
c⁄ã¡_ønge
 =
NULL
) {

386  
NGX_ERROR
;

389 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

391 
c⁄ã¡_ønge
->
hash
 = 1;

392 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

394 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

395 ("byã†-/"Ë- 1 + 3 * 
NGX_OFF_T_LEN
);

396 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

397  
NGX_ERROR
;

402 
ønge
 = 
˘x
->
ønges
.
ñts
;

404 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

406 
ønge
->
°¨t
,Ñ™ge->
íd
 - 1,

407 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

408 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

410 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ønge
->
íd
 -Ñ™ge->
°¨t
;

412 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

413 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

414 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

417  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

418 
	}
}

421 
ngx_öt_t


422 
	$ngx_hâp_ønge_mu…ù¨t_hódî
(
ngx_hâp_ªque°_t
 *
r
,

423 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
)

425 
size_t
 
Àn
;

426 
ngx_uöt_t
 
i
;

427 
ngx_hâp_ønge_t
 *
ønge
;

428 
ngx_©omic_uöt_t
 
bound¨y
;

430 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


431 + (
CRLF
 "Content-Type: ") - 1

432 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn


433 + (
CRLF
 "Content-Range: bytes ") - 1;

435 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

436 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

439 
˘x
->
bound¨y_hódî
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

440 i‡(
˘x
->
bound¨y_hódî
.
d©a
 =
NULL
) {

441  
NGX_ERROR
;

444 
bound¨y
 = 
	`ngx_√xt_ãmp_numbî
(0);

454 i‡(
r
->
hódîs_out
.
ch¨£t
.
Àn
) {

455 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

456 
CRLF
 "--%0muA" CRLF

457 "C⁄ã¡-Ty≥: %V; ch¨£t=%V" 
CRLF


459 
bound¨y
,

460 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
,

461 &
r
->
hódîs_out
.
ch¨£t
)

462 - 
˘x
->
bound¨y_hódî
.
d©a
;

464 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 0;

466 } i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

467 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

468 
CRLF
 "--%0muA" CRLF

469 "C⁄ã¡-Ty≥: %V" 
CRLF


471 
bound¨y
,

472 &
r
->
hódîs_out
.
c⁄ã¡_ty≥
)

473 - 
˘x
->
bound¨y_hódî
.
d©a
;

476 
˘x
->
bound¨y_hódî
.
Àn
 = 
	`ngx_•rötf
(˘x->bound¨y_hódî.
d©a
,

477 
CRLF
 "--%0muA" CRLF

479 
bound¨y
)

480 - 
˘x
->
bound¨y_hódî
.
d©a
;

483 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =

484 
	`ngx_≤Æloc
(
r
->
poﬁ
,

486 + 
NGX_ATOMIC_T_LEN
);

488 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 =
NULL
) {

489  
NGX_ERROR
;

492 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

496 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =

497 
	`ngx_•rötf
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

499 
bound¨y
)

500 - 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
;

502 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =Ñ->hódîs_out.
c⁄ã¡_ty≥
.
Àn
;

506 
Àn
 = (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
 + ("--" CRLF) - 1;

508 
ønge
 = 
˘x
->
ønges
.
ñts
;

509 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

513 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =

514 
	`ngx_≤Æloc
(
r
->
poﬁ
, 3 * 
NGX_OFF_T_LEN
 + 2 + 4);

516 i‡(
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 =
NULL
) {

517  
NGX_ERROR
;

520 
ønge
[
i
].
c⁄ã¡_ønge
.
Àn
 = 
	`ngx_•rötf
‘™ge[i].c⁄ã¡_ønge.
d©a
,

521 "%O-%O/%O" 
CRLF
 CRLF,

522 
ønge
[
i
].
°¨t
,Ñ™ge[i].
íd
 - 1,

523 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

524 - 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

526 
Àn
 +
˘x
->
bound¨y_hódî
.À¿+ 
ønge
[
i
].
c⁄ã¡_ønge
.len

527 + (
size_t
Ë(
ønge
[
i
].
íd
 -Ñ™ge[i].
°¨t
);

530 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
Àn
;

532 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

533 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

534 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

537  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

538 
	}
}

541 
ngx_öt_t


542 
	$ngx_hâp_ønge_nŸ_ßtisfübÀ
(
ngx_hâp_ªque°_t
 *
r
)

544 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ønge
;

546 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

548 
c⁄ã¡_ønge
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

549 i‡(
c⁄ã¡_ønge
 =
NULL
) {

550  
NGX_ERROR
;

553 
r
->
hódîs_out
.
c⁄ã¡_ønge
 = content_range;

555 
c⁄ã¡_ønge
->
hash
 = 1;

556 
	`ngx_°r_£t
(&
c⁄ã¡_ønge
->
key
, "Content-Range");

558 
c⁄ã¡_ønge
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

559 ("byã†*/"Ë- 1 + 
NGX_OFF_T_LEN
);

560 i‡(
c⁄ã¡_ønge
->
vÆue
.
d©a
 =
NULL
) {

561  
NGX_ERROR
;

564 
c⁄ã¡_ønge
->
vÆue
.
Àn
 = 
	`ngx_•rötf
(c⁄ã¡_ønge->vÆue.
d©a
,

566 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

567 - 
c⁄ã¡_ønge
->
vÆue
.
d©a
;

569 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

571  
NGX_HTTP_RANGE_NOT_SATISFIABLE
;

572 
	}
}

575 
ngx_öt_t


576 
	$ngx_hâp_ønge_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

578 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
;

580 i‡(
ö
 =
NULL
) {

581  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

584 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ønge_body_fûãr_moduÀ
);

586 i‡(
˘x
 =
NULL
) {

587  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

590 i‡(
˘x
->
ønges
.
√…s
 == 1) {

591  
	`ngx_hâp_ønge_sögÀ∑π_body
(
r
, 
˘x
, 
ö
);

598 i‡(
	`ngx_buf_•ecül
(
ö
->
buf
)) {

599  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

602 i‡(
	`ngx_hâp_ønge_ã°_ovîœµed
(
r
, 
˘x
, 
ö
Ë!
NGX_OK
) {

603  
NGX_ERROR
;

606  
	`ngx_hâp_ønge_mu…ù¨t_body
(
r
, 
˘x
, 
ö
);

607 
	}
}

610 
ngx_öt_t


611 
	$ngx_hâp_ønge_ã°_ovîœµed
(
ngx_hâp_ªque°_t
 *
r
,

612 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

614 
off_t
 
°¨t
, 
œ°
;

615 
ngx_buf_t
 *
buf
;

616 
ngx_uöt_t
 
i
;

617 
ngx_hâp_ønge_t
 *
ønge
;

619 i‡(
˘x
->
off£t
) {

620 
ovîœµed
;

623 
buf
 = 
ö
->buf;

625 i‡(!
buf
->
œ°_buf
) {

626 
°¨t
 = 
˘x
->
off£t
;

627 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

629 
ønge
 = 
˘x
->
ønges
.
ñts
;

630 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

631 i‡(
°¨t
 > 
ønge
[
i
].°¨à|| 
œ°
 <Ñ™ge[i].
íd
) {

632 
ovîœµed
;

637 
˘x
->
off£t
 = 
	`ngx_buf_size
(
buf
);

639  
NGX_OK
;

641 
ovîœµed
:

643 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

646  
NGX_ERROR
;

647 
	}
}

650 
ngx_öt_t


651 
	$ngx_hâp_ønge_sögÀ∑π_body
(
ngx_hâp_ªque°_t
 *
r
,

652 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

654 
off_t
 
°¨t
, 
œ°
;

655 
ngx_buf_t
 *
buf
;

656 
ngx_chaö_t
 *
out
, *
˛
, **
Œ
;

657 
ngx_hâp_ønge_t
 *
ønge
;

659 
out
 = 
NULL
;

660 
Œ
 = &
out
;

661 
ønge
 = 
˘x
->
ønges
.
ñts
;

663 
˛
 = 
ö
; cl; c»˛->
√xt
) {

665 
buf
 = 
˛
->buf;

667 
°¨t
 = 
˘x
->
off£t
;

668 
œ°
 = 
˘x
->
off£t
 + 
	`ngx_buf_size
(
buf
);

670 
˘x
->
off£t
 = 
œ°
;

672 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

673 "hâ∞øngêbody buf: %O-%O", 
°¨t
, 
œ°
);

675 i‡(
	`ngx_buf_•ecül
(
buf
)) {

676 *
Œ
 = 
˛
;

677 
Œ
 = &
˛
->
√xt
;

681 i‡(
ønge
->
íd
 <
°¨t
 ||Ñ™ge->°¨à>
œ°
) {

683 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

686 i‡(
buf
->
ö_fûe
) {

687 
buf
->
fûe_pos
 = buf->
fûe_œ°
;

690 
buf
->
pos
 = buf->
œ°
;

691 
buf
->
sync
 = 1;

696 i‡(
ønge
->
°¨t
 > start) {

698 i‡(
buf
->
ö_fûe
) {

699 
buf
->
fûe_pos
 +
ønge
->
°¨t
 - start;

702 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

703 
buf
->
pos
 +(
size_t
Ë(
ønge
->
°¨t
 - start);

707 i‡(
ønge
->
íd
 <
œ°
) {

709 i‡(
buf
->
ö_fûe
) {

710 
buf
->
fûe_œ°
 -
œ°
 - 
ønge
->
íd
;

713 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

714 
buf
->
œ°
 -(
size_t
Ë÷a° - 
ønge
->
íd
);

717 
buf
->
œ°_buf
 = 1;

718 *
Œ
 = 
˛
;

719 
˛
->
√xt
 = 
NULL
;

724 *
Œ
 = 
˛
;

725 
Œ
 = &
˛
->
√xt
;

728 i‡(
out
 =
NULL
) {

729  
NGX_OK
;

732  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

733 
	}
}

736 
ngx_öt_t


737 
	$ngx_hâp_ønge_mu…ù¨t_body
(
ngx_hâp_ªque°_t
 *
r
,

738 
ngx_hâp_ønge_fûãr_˘x_t
 *
˘x
, 
ngx_chaö_t
 *
ö
)

740 
ngx_buf_t
 *
b
, *
buf
;

741 
ngx_uöt_t
 
i
;

742 
ngx_chaö_t
 *
out
, *
h˛
, *
r˛
, *
d˛
, **
Œ
;

743 
ngx_hâp_ønge_t
 *
ønge
;

745 
Œ
 = &
out
;

746 
buf
 = 
ö
->buf;

747 
ønge
 = 
˘x
->
ønges
.
ñts
;

749 
i
 = 0; i < 
˘x
->
ønges
.
√…s
; i++) {

759 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

760 i‡(
b
 =
NULL
) {

761  
NGX_ERROR
;

764 
b
->
mem‹y
 = 1;

765 
b
->
pos
 = 
˘x
->
bound¨y_hódî
.
d©a
;

766 
b
->
œ°
 = 
˘x
->
bound¨y_hódî
.
d©a
 + ctx->bound¨y_hódî.
Àn
;

768 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

769 i‡(
h˛
 =
NULL
) {

770  
NGX_ERROR
;

773 
h˛
->
buf
 = 
b
;

778 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

779 i‡(
b
 =
NULL
) {

780  
NGX_ERROR
;

783 
b
->
ãmp‹¨y
 = 1;

784 
b
->
pos
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
;

785 
b
->
œ°
 = 
ønge
[
i
].
c⁄ã¡_ønge
.
d©a
 +Ñ™ge[i].c⁄ã¡_ønge.
Àn
;

787 
r˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

788 i‡(
r˛
 =
NULL
) {

789  
NGX_ERROR
;

792 
r˛
->
buf
 = 
b
;

797 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

798 i‡(
b
 =
NULL
) {

799  
NGX_ERROR
;

802 
b
->
ö_fûe
 = 
buf
->in_file;

803 
b
->
ãmp‹¨y
 = 
buf
->temporary;

804 
b
->
mem‹y
 = 
buf
->memory;

805 
b
->
mm≠
 = 
buf
->mmap;

806 
b
->
fûe
 = 
buf
->file;

808 i‡(
buf
->
ö_fûe
) {

809 
b
->
fûe_pos
 = 
buf
->fûe_po†+ 
ønge
[
i
].
°¨t
;

810 
b
->
fûe_œ°
 = 
buf
->
fûe_pos
 + 
ønge
[
i
].
íd
;

813 i‡(
	`ngx_buf_ö_mem‹y
(
buf
)) {

814 
b
->
pos
 = 
buf
->po†+ (
size_t
Ë
ønge
[
i
].
°¨t
;

815 
b
->
œ°
 = 
buf
->
pos
 + (
size_t
Ë
ønge
[
i
].
íd
;

818 
d˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

819 i‡(
d˛
 =
NULL
) {

820  
NGX_ERROR
;

823 
d˛
->
buf
 = 
b
;

825 *
Œ
 = 
h˛
;

826 
h˛
->
√xt
 = 
r˛
;

827 
r˛
->
√xt
 = 
d˛
;

828 
Œ
 = &
d˛
->
√xt
;

833 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

834 i‡(
b
 =
NULL
) {

835  
NGX_ERROR
;

838 
b
->
ãmp‹¨y
 = 1;

839 
b
->
œ°_buf
 = 1;

841 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN


842 + ("--" 
CRLF
) - 1);

843 i‡(
b
->
pos
 =
NULL
) {

844  
NGX_ERROR
;

847 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
˘x
->
bound¨y_hódî
.
d©a
,

848 (
CRLF
 "--"Ë- 1 + 
NGX_ATOMIC_T_LEN
);

849 *
b
->
œ°
++ = '-'; *b->last++ = '-';

850 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

852 
h˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

853 i‡(
h˛
 =
NULL
) {

854  
NGX_ERROR
;

857 
h˛
->
buf
 = 
b
;

858 
h˛
->
√xt
 = 
NULL
;

860 *
Œ
 = 
h˛
;

862  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
out
);

863 
	}
}

866 
ngx_öt_t


867 
	$ngx_hâp_ønge_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

869 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

870 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ønge_hódî_fûãr
;

872  
NGX_OK
;

873 
	}
}

876 
ngx_öt_t


877 
	$ngx_hâp_ønge_body_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

879 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

880 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ønge_body_fûãr
;

882  
NGX_OK
;

883 
	}
}

	@src/http/modules/ngx_http_realip_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REALIP_XREALIP
 0

	)

14 
	#NGX_HTTP_REALIP_XFWD
 1

	)

15 
	#NGX_HTTP_REALIP_HEADER
 2

	)

19 
ngx_¨øy_t
 *
	m‰om
;

20 
ngx_uöt_t
 
	mty≥
;

21 
ngx_uöt_t
 
	mhash
;

22 
ngx_°r_t
 
	mhódî
;

23 
ngx_Êag_t
 
	mªcursive
;

24 } 
	tngx_hâp_ªÆù_loc_c⁄f_t
;

28 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

29 
sockaddr
 *
	msockaddr
;

30 
sockÀn_t
 
	msockÀn
;

31 
ngx_°r_t
 
	maddr_ãxt
;

32 } 
	tngx_hâp_ªÆù_˘x_t
;

35 
ngx_öt_t
 
ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

36 
ngx_öt_t
 
ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_addr_t
 *
addr
);

38 
ngx_hâp_ªÆù_˛ónup
(*
d©a
);

39 *
ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

40 *
c⁄f
);

41 *
ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

42 *
ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

43 *
ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

44 *
∑ª¡
, *
chûd
);

45 
ngx_öt_t
 
ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
);

48 
ngx_comm™d_t
 
	gngx_hâp_ªÆù_comm™ds
[] = {

50 { 
ngx_°rög
("set_real_ip_from"),

51 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_hâp_ªÆù_‰om
,

53 
NGX_HTTP_LOC_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("real_ip_header"),

58 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

59 
ngx_hâp_ªÆù
,

60 
NGX_HTTP_LOC_CONF_OFFSET
,

62 
NULL
 },

64 { 
ngx_°rög
("real_ip_recursive"),

65 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

66 
ngx_c⁄f_£t_Êag_¶Ÿ
,

67 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
off£tof
(
ngx_hâp_ªÆù_loc_c⁄f_t
, 
ªcursive
),

69 
NULL
 },

71 
ngx_nuŒ_comm™d


76 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ_˘x
 = {

77 
NULL
,

78 
ngx_hâp_ªÆù_öô
,

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
ngx_hâp_ªÆù_¸óã_loc_c⁄f
,

87 
ngx_hâp_ªÆù_mîge_loc_c⁄f


91 
ngx_moduÀ_t
 
	gngx_hâp_ªÆù_moduÀ
 = {

92 
NGX_MODULE_V1
,

93 &
ngx_hâp_ªÆù_moduÀ_˘x
,

94 
ngx_hâp_ªÆù_comm™ds
,

95 
NGX_HTTP_MODULE
,

96 
NULL
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NGX_MODULE_V1_PADDING


107 
ngx_öt_t


108 
	$ngx_hâp_ªÆù_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

110 
u_ch¨
 *
p
;

111 
size_t
 
Àn
;

112 
ngx_°r_t
 *
vÆue
;

113 
ngx_uöt_t
 
i
, 
hash
;

114 
ngx_addr_t
 
addr
;

115 
ngx_¨øy_t
 *
xfwd
;

116 
ngx_li°_∑π_t
 *
∑π
;

117 
ngx_èbÀ_ñt_t
 *
hódî
;

118 
ngx_c⁄√˘i⁄_t
 *
c
;

119 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

120 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
;

122 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

124 i‡(
˘x
) {

125  
NGX_DECLINED
;

128 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªÆù_moduÀ
);

130 i‡(
æcf
->
‰om
 =
NULL
) {

131  
NGX_DECLINED
;

134 
æcf
->
ty≥
) {

136 
NGX_HTTP_REALIP_XREALIP
:

138 i‡(
r
->
hódîs_ö
.
x_ªÆ_ù
 =
NULL
) {

139  
NGX_DECLINED
;

142 
vÆue
 = &
r
->
hódîs_ö
.
x_ªÆ_ù
->value;

143 
xfwd
 = 
NULL
;

147 
NGX_HTTP_REALIP_XFWD
:

149 
xfwd
 = &
r
->
hódîs_ö
.
x_f‹w¨ded_f‹
;

151 i‡(
xfwd
->
ñts
 =
NULL
) {

152  
NGX_DECLINED
;

155 
vÆue
 = 
NULL
;

161 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

162 
hódî
 = 
∑π
->
ñts
;

164 
hash
 = 
æcf
->hash;

165 
Àn
 = 
æcf
->
hódî
.len;

166 
p
 = 
æcf
->
hódî
.
d©a
;

168 
i
 = 0; ; i++) {

170 i‡(
i
 >
∑π
->
√…s
) {

171 i‡(
∑π
->
√xt
 =
NULL
) {

175 
∑π
 =Ö¨t->
√xt
;

176 
hódî
 = 
∑π
->
ñts
;

177 
i
 = 0;

180 i‡(
hash
 =
hódî
[
i
].hash

181 && 
Àn
 =
hódî
[
i
].
key
.len

182 && 
	`ngx_°∫cmp
(
p
, 
hódî
[
i
].
lowˇ£_key
, 
Àn
) == 0)

184 
vÆue
 = &
hódî
[
i
].value;

185 
xfwd
 = 
NULL
;

187 
found
;

191  
NGX_DECLINED
;

194 
found
:

196 
c
 = 
r
->
c⁄√˘i⁄
;

198 
addr
.
sockaddr
 = 
c
->sockaddr;

199 
addr
.
sockÀn
 = 
c
->socklen;

202 i‡(
	`ngx_hâp_gë_f‹w¨ded_addr
(
r
, &
addr
, 
xfwd
, 
vÆue
, 
æcf
->
‰om
,

203 
æcf
->
ªcursive
)

204 !
NGX_DECLINED
)

206  
	`ngx_hâp_ªÆù_£t_addr
(
r
, &
addr
);

209  
NGX_DECLINED
;

210 
	}
}

213 
ngx_öt_t


214 
	$ngx_hâp_ªÆù_£t_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
)

216 
size_t
 
Àn
;

217 
u_ch¨
 *
p
;

218 
u_ch¨
 
ãxt
[
NGX_SOCKADDR_STRLEN
];

219 
ngx_c⁄√˘i⁄_t
 *
c
;

220 
ngx_poﬁ_˛ónup_t
 *
˛n
;

221 
ngx_hâp_ªÆù_˘x_t
 *
˘x
;

223 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, (
ngx_hâp_ªÆù_˘x_t
));

224 i‡(
˛n
 =
NULL
) {

225  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

228 
˘x
 = 
˛n
->
d©a
;

229 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ªÆù_moduÀ
);

231 
c
 = 
r
->
c⁄√˘i⁄
;

233 
Àn
 = 
	`ngx_sock_¡›
(
addr
->
sockaddr
, 
ãxt
, 
NGX_SOCKADDR_STRLEN
, 0);

234 i‡(
Àn
 == 0) {

235  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

238 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
);

239 i‡(
p
 =
NULL
) {

240  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

243 
	`ngx_mem˝y
(
p
, 
ãxt
, 
Àn
);

245 
˛n
->
h™dÀr
 = 
ngx_hâp_ªÆù_˛ónup
;

247 
˘x
->
c⁄√˘i⁄
 = 
c
;

248 
˘x
->
sockaddr
 = 
c
->sockaddr;

249 
˘x
->
sockÀn
 = 
c
->socklen;

250 
˘x
->
addr_ãxt
 = 
c
->addr_text;

252 
c
->
sockaddr
 = 
addr
->sockaddr;

253 
c
->
sockÀn
 = 
addr
->socklen;

254 
c
->
addr_ãxt
.
Àn
 =Üen;

255 
c
->
addr_ãxt
.
d©a
 = 
p
;

257  
NGX_DECLINED
;

258 
	}
}

262 
	$ngx_hâp_ªÆù_˛ónup
(*
d©a
)

264 
ngx_hâp_ªÆù_˘x_t
 *
˘x
 = 
d©a
;

266 
ngx_c⁄√˘i⁄_t
 *
c
;

268 
c
 = 
˘x
->
c⁄√˘i⁄
;

270 
c
->
sockaddr
 = 
˘x
->sockaddr;

271 
c
->
sockÀn
 = 
˘x
->socklen;

272 
c
->
addr_ãxt
 = 
˘x
->addr_text;

273 
	}
}

277 
	$ngx_hâp_ªÆù_‰om
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

279 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

281 
ngx_öt_t
 
rc
;

282 
ngx_°r_t
 *
vÆue
;

283 
ngx_cidr_t
 *
cidr
;

285 
vÆue
 = 
cf
->
¨gs
->
ñts
;

287 i‡(
æcf
->
‰om
 =
NULL
) {

288 
æcf
->
‰om
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

289 (
ngx_cidr_t
));

290 i‡(
æcf
->
‰om
 =
NULL
) {

291  
NGX_CONF_ERROR
;

295 
cidr
 = 
	`ngx_¨øy_push
(
æcf
->
‰om
);

296 i‡(
cidr
 =
NULL
) {

297  
NGX_CONF_ERROR
;

300 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

302 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "unix:") == 0) {

303 
cidr
->
Ámûy
 = 
AF_UNIX
;

304  
NGX_CONF_OK
;

309 
rc
 = 
	`ngx_±ocidr
(&
vÆue
[1], 
cidr
);

311 i‡(
rc
 =
NGX_ERROR
) {

312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "invalidÖarameter \"%V\"",

313 &
vÆue
[1]);

314  
NGX_CONF_ERROR
;

317 i‡(
rc
 =
NGX_DONE
) {

318 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

319 "lowáddªs†bô†o‡%Váª mónögÀss", &
vÆue
[1]);

322  
NGX_CONF_OK
;

323 
	}
}

327 
	$ngx_hâp_ªÆù
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

329 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
æcf
 = 
c⁄f
;

331 
ngx_°r_t
 *
vÆue
;

333 
vÆue
 = 
cf
->
¨gs
->
ñts
;

335 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Real-IP") == 0) {

336 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XREALIP
;

337  
NGX_CONF_OK
;

340 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "X-Forwarded-For") == 0) {

341 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_XFWD
;

342  
NGX_CONF_OK
;

345 
æcf
->
ty≥
 = 
NGX_HTTP_REALIP_HEADER
;

346 
æcf
->
hash
 = 
	`ngx_hash_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

347 
æcf
->
hódî
 = 
vÆue
[1];

349  
NGX_CONF_OK
;

350 
	}
}

354 
	$ngx_hâp_ªÆù_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

356 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
;

358 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªÆù_loc_c⁄f_t
));

359 i‡(
c⁄f
 =
NULL
) {

360  
NULL
;

371 
c⁄f
->
ty≥
 = 
NGX_CONF_UNSET_UINT
;

372 
c⁄f
->
ªcursive
 = 
NGX_CONF_UNSET
;

374  
c⁄f
;

375 
	}
}

379 
	$ngx_hâp_ªÆù_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

381 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

382 
ngx_hâp_ªÆù_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

384 i‡(
c⁄f
->
‰om
 =
NULL
) {

385 
c⁄f
->
‰om
 = 
¥ev
->from;

388 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥
, 
¥ev
->ty≥, 
NGX_HTTP_REALIP_XREALIP
);

389 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive
, 
¥ev
->recursive, 0);

391 i‡(
c⁄f
->
hódî
.
Àn
 == 0) {

392 
c⁄f
->
hash
 = 
¥ev
->hash;

393 
c⁄f
->
hódî
 = 
¥ev
->header;

396  
NGX_CONF_OK
;

397 
	}
}

400 
ngx_öt_t


401 
	$ngx_hâp_ªÆù_öô
(
ngx_c⁄f_t
 *
cf
)

403 
ngx_hâp_h™dÀr_±
 *
h
;

404 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

406 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

408 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
);

409 i‡(
h
 =
NULL
) {

410  
NGX_ERROR
;

413 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

415 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
);

416 i‡(
h
 =
NULL
) {

417  
NGX_ERROR
;

420 *
h
 = 
ngx_hâp_ªÆù_h™dÀr
;

422  
NGX_OK
;

423 
	}
}

	@src/http/modules/ngx_http_referer_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_REFERER_NO_URI_PART
 ((*Ë4)

	)

15 #i‡!(
NGX_PCRE
)

17 
	#ngx_ªgex_t
 

	)

23 
ngx_hash_comböed_t
 
	mhash
;

25 #i‡(
NGX_PCRE
)

26 
ngx_¨øy_t
 *
	mªgex
;

29 
ngx_Êag_t
 
	mno_ª„ªr
;

30 
ngx_Êag_t
 
	mblocked_ª„ªr
;

32 
ngx_hash_keys_¨øys_t
 *
	mkeys
;

34 
ngx_uöt_t
 
	mª„ªr_hash_max_size
;

35 
ngx_uöt_t
 
	mª„ªr_hash_buckë_size
;

36 } 
	tngx_hâp_ª„ªr_c⁄f_t
;

39 * 
ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

40 * 
ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

41 *
chûd
);

42 *
ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

43 *
c⁄f
);

44 *
ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

45 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
);

46 *
ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
, 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
);

48 
ngx_libc_cde˛
 
ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
,

49 c⁄° *
two
);

52 
ngx_comm™d_t
 
	gngx_hâp_ª„ªr_comm™ds
[] = {

54 { 
ngx_°rög
("valid_referers"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

56 
ngx_hâp_vÆid_ª„ªrs
,

57 
NGX_HTTP_LOC_CONF_OFFSET
,

59 
NULL
 },

61 { 
ngx_°rög
("referer_hash_max_size"),

62 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_num_¶Ÿ
,

64 
NGX_HTTP_LOC_CONF_OFFSET
,

65 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_max_size
),

66 
NULL
 },

68 { 
ngx_°rög
("referer_hash_bucket_size"),

69 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_num_¶Ÿ
,

71 
NGX_HTTP_LOC_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_ª„ªr_c⁄f_t
, 
ª„ªr_hash_buckë_size
),

73 
NULL
 },

75 
ngx_nuŒ_comm™d


79 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ_˘x
 = {

80 
NULL
,

81 
NULL
,

83 
NULL
,

84 
NULL
,

86 
NULL
,

87 
NULL
,

89 
ngx_hâp_ª„ªr_¸óã_c⁄f
,

90 
ngx_hâp_ª„ªr_mîge_c⁄f


94 
ngx_moduÀ_t
 
	gngx_hâp_ª„ªr_moduÀ
 = {

95 
NGX_MODULE_V1
,

96 &
ngx_hâp_ª„ªr_moduÀ_˘x
,

97 
ngx_hâp_ª„ªr_comm™ds
,

98 
NGX_HTTP_MODULE
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NGX_MODULE_V1_PADDING


110 
ngx_öt_t


111 
	$ngx_hâp_ª„ªr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

112 
uöçå_t
 
d©a
)

114 
u_ch¨
 *
p
, *
ªf
, *
œ°
;

115 
size_t
 
Àn
;

116 
ngx_°r_t
 *
uri
;

117 
ngx_uöt_t
 
i
, 
key
;

118 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
;

119 
u_ch¨
 
buf
[256];

121 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ª„ªr_moduÀ
);

123 i‡(
æcf
->
hash
.hash.
buckës
 =
NULL


124 && 
æcf
->
hash
.
wc_hód
 =
NULL


125 && 
æcf
->
hash
.
wc_èû
 =
NULL


126 #i‡(
NGX_PCRE
)

127 && 
æcf
->
ªgex
 =
NULL


131 
vÆid
;

134 i‡(
r
->
hódîs_ö
.
ª„ªr
 =
NULL
) {

135 i‡(
æcf
->
no_ª„ªr
) {

136 
vÆid
;

139 
övÆid
;

142 
Àn
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.len;

143 
ªf
 = 
r
->
hódîs_ö
.
ª„ªr
->
vÆue
.
d©a
;

145 i‡(
Àn
 >= ("http://i.ru") - 1) {

146 
œ°
 = 
ªf
 + 
Àn
;

148 i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "http://", 7) == 0) {

149 
ªf
 += 7;

150 
vÆid_scheme
;

152 } i‡(
	`ngx_°∫ˇ£cmp
(
ªf
, (
u_ch¨
 *) "https://", 8) == 0) {

153 
ªf
 += 8;

154 
vÆid_scheme
;

158 i‡(
æcf
->
blocked_ª„ªr
) {

159 
vÆid
;

162 
övÆid
;

164 
vÆid_scheme
:

166 
i
 = 0;

167 
key
 = 0;

169 
p
 = 
ªf
;Ö < 
œ°
;Ö++) {

170 i‡(*
p
 == '/' || *p == ':') {

174 
buf
[
i
] = 
	`ngx_tﬁowî
(*
p
);

175 
key
 = 
	`ngx_hash
(key, 
buf
[
i
++]);

177 i‡(
i
 == 256) {

178 
övÆid
;

182 
uri
 = 
	`ngx_hash_föd_comböed
(&
æcf
->
hash
, 
key
, 
buf
, 
p
 - 
ªf
);

184 i‡(
uri
) {

185 
uri
;

188 #i‡(
NGX_PCRE
)

190 i‡(
æcf
->
ªgex
) {

191 
ngx_öt_t
 
rc
;

192 
ngx_°r_t
 
ª„ªr
;

194 
ª„ªr
.
Àn
 =Üen - 7;

195 
ª„ªr
.
d©a
 = 
ªf
;

197 
rc
 = 
	`ngx_ªgex_exec_¨øy
(
æcf
->
ªgex
, &
ª„ªr
, 
r
->
c⁄√˘i⁄
->
log
);

199 i‡(
rc
 =
NGX_OK
) {

200 
vÆid
;

203 i‡(
rc
 =
NGX_ERROR
) {

204  
rc
;

212 
övÆid
:

214 *
v
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

216  
NGX_OK
;

218 
uri
:

220  ; 
p
 < 
œ°
;Ö++) {

221 i‡(*
p
 == '/') {

226 
Àn
 = 
œ°
 - 
p
;

228 i‡(
uri
 =
NGX_HTTP_REFERER_NO_URI_PART
) {

229 
vÆid
;

232 i‡(
Àn
 < 
uri
->À¿|| 
	`ngx_°∫cmp
(uri->
d©a
, 
p
, uri->len) != 0) {

233 
övÆid
;

236 
vÆid
:

238 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

240  
NGX_OK
;

241 
	}
}

245 
	$ngx_hâp_ª„ªr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

247 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
;

249 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ª„ªr_c⁄f_t
));

250 i‡(
c⁄f
 =
NULL
) {

251  
NULL
;

254 #i‡(
NGX_PCRE
)

255 
c⁄f
->
ªgex
 = 
NGX_CONF_UNSET_PTR
;

258 
c⁄f
->
no_ª„ªr
 = 
NGX_CONF_UNSET
;

259 
c⁄f
->
blocked_ª„ªr
 = 
NGX_CONF_UNSET
;

260 
c⁄f
->
ª„ªr_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

261 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

263  
c⁄f
;

264 
	}
}

268 
	$ngx_hâp_ª„ªr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

270 
ngx_hâp_ª„ªr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

271 
ngx_hâp_ª„ªr_c⁄f_t
 *
c⁄f
 = 
chûd
;

273 
ngx_hash_öô_t
 
hash
;

275 i‡(
c⁄f
->
keys
 =
NULL
) {

276 
c⁄f
->
hash
 = 
¥ev
->hash;

278 #i‡(
NGX_PCRE
)

279 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

281 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
no_ª„ªr
, 
¥ev
->no_referer, 0);

282 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
blocked_ª„ªr
, 
¥ev
->blocked_referer, 0);

283 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

284 
¥ev
->
ª„ªr_hash_max_size
, 2048);

285 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

286 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

288  
NGX_CONF_OK
;

291 i‡((
c⁄f
->
no_ª„ªr
 =1 || c⁄f->
blocked_ª„ªr
 == 1)

292 && 
c⁄f
->
keys
->keys.
√…s
 == 0

293 && 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
 == 0

294 && 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
 == 0)

296 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

300  
NGX_CONF_ERROR
;

303 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_max_size
,

304 
¥ev
->
ª„ªr_hash_max_size
, 2048);

305 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ª„ªr_hash_buckë_size
,

306 
¥ev
->
ª„ªr_hash_buckë_size
, 64);

307 
c⁄f
->
ª„ªr_hash_buckë_size
 = 
	`ngx_Æign
(conf->referer_hash_bucket_size,

308 
ngx_ˇchñöe_size
);

310 
hash
.
key
 = 
ngx_hash_key_lc
;

311 
hash
.
max_size
 = 
c⁄f
->
ª„ªr_hash_max_size
;

312 
hash
.
buckë_size
 = 
c⁄f
->
ª„ªr_hash_buckë_size
;

313 
hash
.
«me
 = "referer_hash";

314 
hash
.
poﬁ
 = 
cf
->pool;

316 i‡(
c⁄f
->
keys
->keys.
√…s
) {

317 
hash
.hash = &
c⁄f
->hash.hash;

318 
hash
.
ãmp_poﬁ
 = 
NULL
;

320 i‡(
	`ngx_hash_öô
(&
hash
, 
c⁄f
->
keys
->keys.
ñts
, c⁄f->keys->keys.
√…s
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

327 i‡(
c⁄f
->
keys
->
dns_wc_hód
.
√…s
) {

329 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

330 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_hód
.
√…s
,

331 (
ngx_hash_key_t
),

332 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

334 
hash
.hash = 
NULL
;

335 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

337 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_hód
.
ñts
,

338 
c⁄f
->
keys
->
dns_wc_hód
.
√…s
)

339 !
NGX_OK
)

341  
NGX_CONF_ERROR
;

344 
c⁄f
->
hash
.
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

347 i‡(
c⁄f
->
keys
->
dns_wc_èû
.
√…s
) {

349 
	`ngx_qs‹t
(
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

350 (
size_t
Ë
c⁄f
->
keys
->
dns_wc_èû
.
√…s
,

351 (
ngx_hash_key_t
),

352 
ngx_hâp_cmp_ª„ªr_wûdˇrds
);

354 
hash
.hash = 
NULL
;

355 
hash
.
ãmp_poﬁ
 = 
cf
->temp_pool;

357 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
c⁄f
->
keys
->
dns_wc_èû
.
ñts
,

358 
c⁄f
->
keys
->
dns_wc_èû
.
√…s
)

359 !
NGX_OK
)

361  
NGX_CONF_ERROR
;

364 
c⁄f
->
hash
.
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *) hash.hash;

367 #i‡(
NGX_PCRE
)

368 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªgex
, 
¥ev
->ªgex, 
NULL
);

371 i‡(
c⁄f
->
no_ª„ªr
 =
NGX_CONF_UNSET
) {

372 
c⁄f
->
no_ª„ªr
 = 0;

375 i‡(
c⁄f
->
blocked_ª„ªr
 =
NGX_CONF_UNSET
) {

376 
c⁄f
->
blocked_ª„ªr
 = 0;

379 
c⁄f
->
keys
 = 
NULL
;

381  
NGX_CONF_OK
;

382 
	}
}

386 
	$ngx_hâp_vÆid_ª„ªrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

388 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
 = 
c⁄f
;

390 
u_ch¨
 *
p
;

391 
ngx_°r_t
 *
vÆue
, 
uri
, 
«me
;

392 
ngx_uöt_t
 
i
, 
n
;

393 
ngx_hâp_v¨übÀ_t
 *
v¨
;

394 
ngx_hâp_£rvî_«me_t
 *
¢
;

395 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

397 
	`ngx_°r_£t
(&
«me
, "invalid_referer");

399 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
,

400 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOHASH
);

401 i‡(
v¨
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_ª„ªr_v¨übÀ
;

407 i‡(
æcf
->
keys
 =
NULL
) {

408 
æcf
->
keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
, (
ngx_hash_keys_¨øys_t
));

409 i‡(
æcf
->
keys
 =
NULL
) {

410  
NGX_CONF_ERROR
;

413 
æcf
->
keys
->
poﬁ
 = 
cf
->pool;

414 
æcf
->
keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

416 i‡(
	`ngx_hash_keys_¨øy_öô
(
æcf
->
keys
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

417  
NGX_CONF_ERROR
;

421 
vÆue
 = 
cf
->
¨gs
->
ñts
;

423 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

424 i‡(
vÆue
[
i
].
Àn
 == 0) {

425 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

426 "övÆidÑe„ª∏\"%V\"", &
vÆue
[
i
]);

427  
NGX_CONF_ERROR
;

430 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

431 
æcf
->
no_ª„ªr
 = 1;

435 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "blocked") == 0) {

436 
æcf
->
blocked_ª„ªr
 = 1;

440 
	`ngx_°r_nuŒ
(&
uri
);

442 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "server_names") == 0) {

444 
cscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

446 
¢
 = 
cscf
->
£rvî_«mes
.
ñts
;

447 
n
 = 0;Ç < 
cscf
->
£rvî_«mes
.
√…s
;Ç++) {

449 #i‡(
NGX_PCRE
)

450 i‡(
¢
[
n
].
ªgex
) {

452 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
¢
[
n
].
«me
,

453 
¢
[
n
].
ªgex
->regex)

454 !
NGX_OK
)

456  
NGX_CONF_ERROR
;

463 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
¢
[
n
].
«me
, &
uri
)

464 !
NGX_OK
)

466  
NGX_CONF_ERROR
;

473 i‡(
vÆue
[
i
].
d©a
[0] == '~') {

474 i‡(
	`ngx_hâp_add_ªgex_ª„ªr
(
cf
, 
æcf
, &
vÆue
[
i
], 
NULL
Ë!
NGX_OK
)

476  
NGX_CONF_ERROR
;

482 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/');

484 i‡(
p
) {

485 
uri
.
Àn
 = (
vÆue
[
i
].
d©a
 + vÆue[i].ÀnË- 
p
;

486 
uri
.
d©a
 = 
p
;

487 
vÆue
[
i
].
Àn
 = 
p
 - vÆue[i].
d©a
;

490 i‡(
	`ngx_hâp_add_ª„ªr
(
cf
, 
æcf
->
keys
, &
vÆue
[
i
], &
uri
Ë!
NGX_OK
) {

491  
NGX_CONF_ERROR
;

495  
NGX_CONF_OK
;

496 
	}
}

500 
	$ngx_hâp_add_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hash_keys_¨øys_t
 *
keys
,

501 
ngx_°r_t
 *
vÆue
,Çgx_°r_à*
uri
)

503 
ngx_öt_t
 
rc
;

504 
ngx_°r_t
 *
u
;

506 i‡(
uri
->
Àn
 == 0) {

507 
u
 = 
NGX_HTTP_REFERER_NO_URI_PART
;

510 
u
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

511 i‡(
u
 =
NULL
) {

512  
NGX_CONF_ERROR
;

515 *
u
 = *
uri
;

518 
rc
 = 
	`ngx_hash_add_key
(
keys
, 
vÆue
, 
u
, 
NGX_HASH_WILDCARD_KEY
);

520 i‡(
rc
 =
NGX_OK
) {

521  
NGX_CONF_OK
;

524 i‡(
rc
 =
NGX_DECLINED
) {

525 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

526 "övÆid ho°«mê‹ wûdˇrd \"%V\"", 
vÆue
);

529 i‡(
rc
 =
NGX_BUSY
) {

530 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

531 "c⁄Êi˘ögÖ¨amëî \"%V\"", 
vÆue
);

534  
NGX_CONF_ERROR
;

535 
	}
}

539 
	$ngx_hâp_add_ªgex_ª„ªr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ª„ªr_c⁄f_t
 *
æcf
,

540 
ngx_°r_t
 *
«me
, 
ngx_ªgex_t
 *
ªgex
)

542 #i‡(
NGX_PCRE
)

543 
ngx_ªgex_ñt_t
 *
ª
;

544 
ngx_ªgex_compûe_t
 
rc
;

545 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

547 i‡(
«me
->
Àn
 == 1) {

548 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "em±yÑegex i¿\"%V\"", 
«me
);

549  
NGX_CONF_ERROR
;

552 i‡(
æcf
->
ªgex
 =
NGX_CONF_UNSET_PTR
) {

553 
æcf
->
ªgex
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2, (
ngx_ªgex_ñt_t
));

554 i‡(
æcf
->
ªgex
 =
NULL
) {

555  
NGX_CONF_ERROR
;

559 
ª
 = 
	`ngx_¨øy_push
(
æcf
->
ªgex
);

560 i‡(
ª
 =
NULL
) {

561  
NGX_CONF_ERROR
;

564 i‡(
ªgex
) {

565 
ª
->
ªgex
 =Ñegex;

566 
ª
->
«me
 =Çame->
d©a
;

568  
NGX_CONF_OK
;

571 
«me
->
Àn
--;

572 
«me
->
d©a
++;

574 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

576 
rc
.
∑âîn
 = *
«me
;

577 
rc
.
poﬁ
 = 
cf
->pool;

578 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

579 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

580 
rc
.
îr
.
d©a
 = 
îr°r
;

582 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

583 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

584  
NGX_CONF_ERROR
;

587 
ª
->
ªgex
 = 
rc
.regex;

588 
ª
->
«me
 =Çame->
d©a
;

590  
NGX_CONF_OK
;

594 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

596 
«me
);

598  
NGX_CONF_ERROR
;

601 
	}
}

604 
ngx_libc_cde˛


605 
	$ngx_hâp_cmp_ª„ªr_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

607 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

609 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

610 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

612  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

613 
	}
}

	@src/http/modules/ngx_http_rewrite_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_¨øy_t
 *
	mcodes
;

16 
ngx_uöt_t
 
	m°ack_size
;

18 
ngx_Êag_t
 
	mlog
;

19 
ngx_Êag_t
 
	munöôülized_v¨übÀ_w¨n
;

20 } 
	tngx_hâp_ªwrôe_loc_c⁄f_t
;

23 *
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

25 *
∑ª¡
, *
chûd
);

26 
ngx_öt_t
 
ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

28 *
ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

29 *
c⁄f
);

30 *
ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

31 *
c⁄f
);

32 *
ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

34 * 
ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
,

35 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
);

36 *
ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

38 *
ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

40 * 
ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
,

41 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
, 
ngx_°r_t
 *
vÆue
);

44 
ngx_comm™d_t
 
	gngx_hâp_ªwrôe_comm™ds
[] = {

46 { 
ngx_°rög
("rewrite"),

47 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


48 |
NGX_CONF_TAKE23
,

49 
ngx_hâp_ªwrôe
,

50 
NGX_HTTP_LOC_CONF_OFFSET
,

52 
NULL
 },

54 { 
ngx_°rög
("return"),

55 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


56 |
NGX_CONF_TAKE12
,

57 
ngx_hâp_ªwrôe_ªtu∫
,

58 
NGX_HTTP_LOC_CONF_OFFSET
,

60 
NULL
 },

62 { 
ngx_°rög
("break"),

63 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


64 |
NGX_CONF_NOARGS
,

65 
ngx_hâp_ªwrôe_bªak
,

66 
NGX_HTTP_LOC_CONF_OFFSET
,

68 
NULL
 },

70 { 
ngx_°rög
("if"),

71 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

72 
ngx_hâp_ªwrôe_if
,

73 
NGX_HTTP_LOC_CONF_OFFSET
,

75 
NULL
 },

77 { 
ngx_°rög
("set"),

78 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


79 |
NGX_CONF_TAKE2
,

80 
ngx_hâp_ªwrôe_£t
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("rewrite_log"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


87 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

88 
ngx_c⁄f_£t_Êag_¶Ÿ
,

89 
NGX_HTTP_LOC_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
log
),

91 
NULL
 },

93 { 
ngx_°rög
("uninitialized_variable_warn"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_SIF_CONF
|
NGX_HTTP_LOC_CONF


95 |
NGX_HTTP_LIF_CONF
|
NGX_CONF_FLAG
,

96 
ngx_c⁄f_£t_Êag_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_ªwrôe_loc_c⁄f_t
, 
unöôülized_v¨übÀ_w¨n
),

99 
NULL
 },

101 
ngx_nuŒ_comm™d


105 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ_˘x
 = {

106 
NULL
,

107 
ngx_hâp_ªwrôe_öô
,

109 
NULL
,

110 
NULL
,

112 
NULL
,

113 
NULL
,

115 
ngx_hâp_ªwrôe_¸óã_loc_c⁄f
,

116 
ngx_hâp_ªwrôe_mîge_loc_c⁄f


120 
ngx_moduÀ_t
 
	gngx_hâp_ªwrôe_moduÀ
 = {

121 
NGX_MODULE_V1
,

122 &
ngx_hâp_ªwrôe_moduÀ_˘x
,

123 
ngx_hâp_ªwrôe_comm™ds
,

124 
NGX_HTTP_MODULE
,

125 
NULL
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NGX_MODULE_V1_PADDING


136 
ngx_öt_t


137 
	$ngx_hâp_ªwrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

139 
ngx_öt_t
 
ödex
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

141 
ngx_hâp_s¸ùt_ígöe_t
 *
e
;

142 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

143 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

144 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

146 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

147 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

148 
ödex
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

150 i‡(
r
->
pha£_h™dÀr
 =
ödex
 &&Ñ->
loc_c⁄f
 =
cscf
->
˘x
->loc_conf) {

152  
NGX_DECLINED
;

155 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

157 i‡(
æcf
->
codes
 =
NULL
) {

158  
NGX_DECLINED
;

161 
e
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_s¸ùt_ígöe_t
));

162 i‡(
e
 =
NULL
) {

163  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

166 
e
->
•
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
,

167 
æcf
->
°ack_size
 * (
ngx_hâp_v¨übÀ_vÆue_t
));

168 i‡(
e
->
•
 =
NULL
) {

169  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

172 
e
->
ù
 = 
æcf
->
codes
->
ñts
;

173 
e
->
ªque°
 = 
r
;

174 
e
->
quŸe
 = 1;

175 
e
->
log
 = 
æcf
->log;

176 
e
->
°©us
 = 
NGX_DECLINED
;

178 *(
uöçå_t
 *Ë
e
->
ù
) {

179 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
->
ù
;

180 
	`code
(
e
);

183 i‡(
e
->
°©us
 < 
NGX_HTTP_BAD_REQUEST
) {

184  
e
->
°©us
;

187 i‡(
r
->
îr_°©us
 == 0) {

188  
e
->
°©us
;

191  
r
->
îr_°©us
;

192 
	}
}

195 
ngx_öt_t


196 
	$ngx_hâp_ªwrôe_v¨
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

197 
uöçå_t
 
d©a
)

199 
ngx_hâp_v¨übÀ_t
 *
v¨
;

200 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

201 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
æcf
;

203 
æcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ªwrôe_moduÀ
);

205 i‡(
æcf
->
unöôülized_v¨übÀ_w¨n
 == 0) {

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

207  
NGX_OK
;

210 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

212 
v¨
 = 
cmcf
->
v¨übÀs
.
ñts
;

220 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "usög unöôülized \"%V\" v¨übÀ", &
v¨
[
d©a
].
«me
);

223 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

225  
NGX_OK
;

226 
	}
}

230 
	$ngx_hâp_ªwrôe_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

232 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
;

234 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªwrôe_loc_c⁄f_t
));

235 i‡(
c⁄f
 =
NULL
) {

236  
NULL
;

239 
c⁄f
->
°ack_size
 = 
NGX_CONF_UNSET_UINT
;

240 
c⁄f
->
log
 = 
NGX_CONF_UNSET
;

241 
c⁄f
->
unöôülized_v¨übÀ_w¨n
 = 
NGX_CONF_UNSET
;

243  
c⁄f
;

244 
	}
}

248 
	$ngx_hâp_ªwrôe_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

250 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

251 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

253 
uöçå_t
 *
code
;

255 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log
, 
¥ev
->log, 0);

256 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
unöôülized_v¨übÀ_w¨n
,

257 
¥ev
->
unöôülized_v¨übÀ_w¨n
, 1);

258 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ack_size
, 
¥ev
->stack_size, 10);

260 i‡(
c⁄f
->
codes
 =
NULL
) {

261  
NGX_CONF_OK
;

264 i‡(
c⁄f
->
codes
 =
¥ev
->codes) {

265  
NGX_CONF_OK
;

268 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
codes
, (
uöçå_t
));

269 i‡(
code
 =
NULL
) {

270  
NGX_CONF_ERROR
;

273 *
code
 = (
uöçå_t
Ë
NULL
;

275  
NGX_CONF_OK
;

276 
	}
}

279 
ngx_öt_t


280 
	$ngx_hâp_ªwrôe_öô
(
ngx_c⁄f_t
 *
cf
)

282 
ngx_hâp_h™dÀr_±
 *
h
;

283 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

285 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

287 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
);

288 i‡(
h
 =
NULL
) {

289  
NGX_ERROR
;

292 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

294 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
);

295 i‡(
h
 =
NULL
) {

296  
NGX_ERROR
;

299 *
h
 = 
ngx_hâp_ªwrôe_h™dÀr
;

301  
NGX_OK
;

302 
	}
}

306 
	$ngx_hâp_ªwrôe
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

308 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

310 
ngx_°r_t
 *
vÆue
;

311 
ngx_uöt_t
 
œ°
;

312 
ngx_ªgex_compûe_t
 
rc
;

313 
ngx_hâp_s¸ùt_code_±
 *
code
;

314 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

315 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

316 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
ªgex_íd
;

317 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

319 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

320 (
ngx_hâp_s¸ùt_ªgex_code_t
));

321 i‡(
ªgex
 =
NULL
) {

322  
NGX_CONF_ERROR
;

325 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

327 
vÆue
 = 
cf
->
¨gs
->
ñts
;

329 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

331 
rc
.
∑âîn
 = 
vÆue
[1];

332 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

333 
rc
.
îr
.
d©a
 = 
îr°r
;

337 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

338 i‡(
ªgex
->ªgex =
NULL
) {

339  
NGX_CONF_ERROR
;

342 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

343 
ªgex
->
uri
 = 1;

344 
ªgex
->
«me
 = 
vÆue
[1];

346 i‡(
vÆue
[2].
d©a
[vÆue[2].
Àn
 - 1] == '?') {

349 
vÆue
[2].
Àn
--;

352 
ªgex
->
add_¨gs
 = 1;

355 
œ°
 = 0;

357 i‡(
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "http://", ("http://") - 1) == 0

358 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "https://", ("https://") - 1) == 0

359 || 
	`ngx_°∫cmp
(
vÆue
[2].
d©a
, "$scheme", ("$scheme") - 1) == 0)

361 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

362 
ªgex
->
ªdúe˘
 = 1;

363 
œ°
 = 1;

366 i‡(
cf
->
¨gs
->
√…s
 == 4) {

367 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "last") == 0) {

368 
œ°
 = 1;

370 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "break") == 0) {

371 
ªgex
->
bªak_cy˛e
 = 1;

372 
œ°
 = 1;

374 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "redirect") == 0) {

375 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

376 
ªgex
->
ªdúe˘
 = 1;

377 
œ°
 = 1;

379 } i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "permanent") == 0) {

380 
ªgex
->
°©us
 = 
NGX_HTTP_MOVED_PERMANENTLY
;

381 
ªgex
->
ªdúe˘
 = 1;

382 
œ°
 = 1;

385 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

386 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

387  
NGX_CONF_ERROR
;

391 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

393 
sc
.
cf
 = cf;

394 
sc
.
sour˚
 = &
vÆue
[2];

395 
sc
.
Àngths
 = &
ªgex
->lengths;

396 
sc
.
vÆues
 = &
lcf
->
codes
;

397 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[2]);

398 
sc
.
maö
 = 
ªgex
;

399 
sc
.
com∂ëe_Àngths
 = 1;

400 
sc
.
compûe_¨gs
 = !
ªgex
->
ªdúe˘
;

402 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

403  
NGX_CONF_ERROR
;

406 
ªgex
 = 
sc
.
maö
;

408 
ªgex
->
size
 = 
sc
.size;

409 
ªgex
->
¨gs
 = 
sc
.args;

411 i‡(
sc
.
v¨übÀs
 =0 && !sc.
dup_ˇ±uª
) {

412 
ªgex
->
Àngths
 = 
NULL
;

415 
ªgex_íd
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
,

416 (
ngx_hâp_s¸ùt_ªgex_íd_code_t
),

417 &
ªgex
);

418 i‡(
ªgex_íd
 =
NULL
) {

419  
NGX_CONF_ERROR
;

422 
ªgex_íd
->
code
 = 
ngx_hâp_s¸ùt_ªgex_íd_code
;

423 
ªgex_íd
->
uri
 = 
ªgex
->uri;

424 
ªgex_íd
->
¨gs
 = 
ªgex
->args;

425 
ªgex_íd
->
add_¨gs
 = 
ªgex
->add_args;

426 
ªgex_íd
->
ªdúe˘
 = 
ªgex
->redirect;

428 i‡(
œ°
) {

429 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(
lcf
->
codes
, (
uöçå_t
), &
ªgex
);

430 i‡(
code
 =
NULL
) {

431  
NGX_CONF_ERROR
;

434 *
code
 = 
NULL
;

437 
ªgex
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


438 - (
u_ch¨
 *Ë
ªgex
;

440  
NGX_CONF_OK
;

441 
	}
}

445 
	$ngx_hâp_ªwrôe_ªtu∫
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

447 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

449 
u_ch¨
 *
p
;

450 
ngx_°r_t
 *
vÆue
, *
v
;

451 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
ªt
;

452 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

454 
ªt
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

455 (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

456 i‡(
ªt
 =
NULL
) {

457  
NGX_CONF_ERROR
;

460 
vÆue
 = 
cf
->
¨gs
->
ñts
;

462 
	`ngx_memzîo
(
ªt
, (
ngx_hâp_s¸ùt_ªtu∫_code_t
));

464 
ªt
->
code
 = 
ngx_hâp_s¸ùt_ªtu∫_code
;

466 
p
 = 
vÆue
[1].
d©a
;

468 
ªt
->
°©us
 = 
	`ngx_©oi
(
p
, 
vÆue
[1].
Àn
);

470 i‡(
ªt
->
°©us
 =(
uöçå_t
Ë
NGX_ERROR
) {

472 i‡(
cf
->
¨gs
->
√…s
 == 2

473 && (
	`ngx_°∫cmp
(
p
, "http://", ("http://") - 1) == 0

474 || 
	`ngx_°∫cmp
(
p
, "https://", ("https://") - 1) == 0

475 || 
	`ngx_°∫cmp
(
p
, "$scheme", ("$scheme") - 1) == 0))

477 
ªt
->
°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

478 
v
 = &
vÆue
[1];

481 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

482 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

483  
NGX_CONF_ERROR
;

488 i‡(
ªt
->
°©us
 > 999) {

489 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

490 "övÆidÑëu∫ codê\"%V\"", &
vÆue
[1]);

491  
NGX_CONF_ERROR
;

494 i‡(
cf
->
¨gs
->
√…s
 == 2) {

495  
NGX_CONF_OK
;

498 
v
 = &
vÆue
[2];

501 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

503 
ccv
.
cf
 = cf;

504 
ccv
.
vÆue
 = 
v
;

505 
ccv
.
com∂ex_vÆue
 = &
ªt
->
ãxt
;

507 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

508  
NGX_CONF_ERROR
;

511  
NGX_CONF_OK
;

512 
	}
}

516 
	$ngx_hâp_ªwrôe_bªak
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

518 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

520 
ngx_hâp_s¸ùt_code_±
 *
code
;

522 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
, (
uöçå_t
));

523 i‡(
code
 =
NULL
) {

524  
NGX_CONF_ERROR
;

527 *
code
 = 
ngx_hâp_s¸ùt_bªak_code
;

529  
NGX_CONF_OK
;

530 
	}
}

534 
	$ngx_hâp_ªwrôe_if
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

536 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

538 *
mc⁄f
;

539 *
rv
;

540 
u_ch¨
 *
ñts
;

541 
ngx_uöt_t
 
i
;

542 
ngx_c⁄f_t
 
ßve
;

543 
ngx_hâp_moduÀ_t
 *
moduÀ
;

544 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

546 
ngx_hâp_s¸ùt_if_code_t
 *
if_code
;

547 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
∆cf
;

549 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

550 i‡(
˘x
 =
NULL
) {

551  
NGX_CONF_ERROR
;

554 
p˘x
 = 
cf
->
˘x
;

555 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

556 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

558 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

559 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

560  
NGX_CONF_ERROR
;

563 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

564 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

568 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

570 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

572 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

573 i‡(
mc⁄f
 =
NULL
) {

574  
NGX_CONF_ERROR
;

577 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

581 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

583 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

584 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

585 
˛cf
->
«me
 = 
p˛cf
->name;

586 
˛cf
->
n⁄ame
 = 1;

588 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

589  
NGX_CONF_ERROR
;

592 i‡(
	`ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
cf
, 
lcf
Ë!
NGX_CONF_OK
) {

593  
NGX_CONF_ERROR
;

596 
if_code
 = 
	`ngx_¨øy_push_n
(
lcf
->
codes
, (
ngx_hâp_s¸ùt_if_code_t
));

597 i‡(
if_code
 =
NULL
) {

598  
NGX_CONF_ERROR
;

601 
if_code
->
code
 = 
ngx_hâp_s¸ùt_if_code
;

603 
ñts
 = 
lcf
->
codes
->elts;

608 
∆cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_ªwrôe_moduÀ
.
˘x_ödex
];

609 
∆cf
->
codes
 = 
lcf
->codes;

612 
ßve
 = *
cf
;

613 
cf
->
˘x
 = ctx;

615 i‡(
p˛cf
->
«me
.
Àn
 == 0) {

616 
if_code
->
loc_c⁄f
 = 
NULL
;

617 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SIF_CONF
;

620 
if_code
->
loc_c⁄f
 = 
˘x
->loc_conf;

621 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LIF_CONF
;

624 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

626 *
cf
 = 
ßve
;

628 i‡(
rv
 !
NGX_CONF_OK
) {

629  
rv
;

633 i‡(
ñts
 !
lcf
->
codes
->elts) {

634 
if_code
 = (
ngx_hâp_s¸ùt_if_code_t
 *)

635 ((
u_ch¨
 *Ë
if_code
 + ((u_ch¨ *Ë
lcf
->
codes
->
ñts
 -Élts));

638 
if_code
->
√xt
 = (
u_ch¨
 *Ë
lcf
->
codes
->
ñts
 +Ücf->codes->
√…s


639 - (
u_ch¨
 *Ë
if_code
;

643 
∆cf
->
codes
 = 
NULL
;

645  
NGX_CONF_OK
;

646 
	}
}

650 
	$ngx_hâp_ªwrôe_if_c⁄dôi⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
)

652 
u_ch¨
 *
p
;

653 
size_t
 
Àn
;

654 
ngx_°r_t
 *
vÆue
;

655 
ngx_uöt_t
 
cur
, 
œ°
;

656 
ngx_ªgex_compûe_t
 
rc
;

657 
ngx_hâp_s¸ùt_code_±
 *
code
;

658 
ngx_hâp_s¸ùt_fûe_code_t
 *
f›
;

659 
ngx_hâp_s¸ùt_ªgex_code_t
 *
ªgex
;

660 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

662 
vÆue
 = 
cf
->
¨gs
->
ñts
;

663 
œ°
 = 
cf
->
¨gs
->
√…s
 - 1;

665 i‡(
vÆue
[1].
Àn
 < 1 || vÆue[1].
d©a
[0] != '(') {

666 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

667 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[1]);

668  
NGX_CONF_ERROR
;

671 i‡(
vÆue
[1].
Àn
 == 1) {

672 
cur
 = 2;

675 
cur
 = 1;

676 
vÆue
[1].
Àn
--;

677 
vÆue
[1].
d©a
++;

680 i‡(
vÆue
[
œ°
].
Àn
 < 1 || vÆue[œ°].
d©a
[value[last].len - 1] != ')') {

681 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

682 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
œ°
]);

683  
NGX_CONF_ERROR
;

686 i‡(
vÆue
[
œ°
].
Àn
 == 1) {

687 
œ°
--;

690 
vÆue
[
œ°
].
Àn
--;

691 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

694 
Àn
 = 
vÆue
[
cur
].len;

695 
p
 = 
vÆue
[
cur
].
d©a
;

697 i‡(
Àn
 > 1 && 
p
[0] == '$') {

699 i‡(
cur
 !
œ°
 && cur + 2 !=Üast) {

700 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

701 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

702  
NGX_CONF_ERROR
;

705 i‡(
	`ngx_hâp_ªwrôe_v¨übÀ
(
cf
, 
lcf
, &
vÆue
[
cur
]Ë!
NGX_CONF_OK
) {

706  
NGX_CONF_ERROR
;

709 i‡(
cur
 =
œ°
) {

710  
NGX_CONF_OK
;

713 
cur
++;

715 
Àn
 = 
vÆue
[
cur
].len;

716 
p
 = 
vÆue
[
cur
].
d©a
;

718 i‡(
Àn
 =1 && 
p
[0] == '=') {

720 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

721  
NGX_CONF_ERROR
;

724 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

725 (
uöçå_t
));

726 i‡(
code
 =
NULL
) {

727  
NGX_CONF_ERROR
;

730 *
code
 = 
ngx_hâp_s¸ùt_equÆ_code
;

732  
NGX_CONF_OK
;

735 i‡(
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '=') {

737 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

738  
NGX_CONF_ERROR
;

741 
code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

742 (
uöçå_t
));

743 i‡(
code
 =
NULL
) {

744  
NGX_CONF_ERROR
;

747 *
code
 = 
ngx_hâp_s¸ùt_nŸ_equÆ_code
;

748  
NGX_CONF_OK
;

751 i‡((
Àn
 =1 && 
p
[0] == '~')

752 || (
Àn
 =2 && 
p
[0] == '~' &&Ö[1] == '*')

753 || (
Àn
 =2 && 
p
[0] == '!' &&Ö[1] == '~')

754 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '~' &&Ö[2] == '*'))

756 
ªgex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

757 (
ngx_hâp_s¸ùt_ªgex_code_t
));

758 i‡(
ªgex
 =
NULL
) {

759  
NGX_CONF_ERROR
;

762 
	`ngx_memzîo
(
ªgex
, (
ngx_hâp_s¸ùt_ªgex_code_t
));

764 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

766 
rc
.
∑âîn
 = 
vÆue
[
œ°
];

767 
rc
.
›ti⁄s
 = (
p
[
Àn
 - 1] ='*'Ë? 
NGX_REGEX_CASELESS
 : 0;

768 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

769 
rc
.
îr
.
d©a
 = 
îr°r
;

771 
ªgex
->ªgex = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

772 i‡(
ªgex
->ªgex =
NULL
) {

773  
NGX_CONF_ERROR
;

776 
ªgex
->
code
 = 
ngx_hâp_s¸ùt_ªgex_°¨t_code
;

777 
ªgex
->
√xt
 = (
ngx_hâp_s¸ùt_ªgex_code_t
);

778 
ªgex
->
ã°
 = 1;

779 i‡(
p
[0] == '!') {

780 
ªgex
->
√g©ive_ã°
 = 1;

782 
ªgex
->
«me
 = 
vÆue
[
œ°
];

784  
NGX_CONF_OK
;

787 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

788 "u√x≥˘ed \"%V\" i¿c⁄dôi⁄", &
vÆue
[
cur
]);

789  
NGX_CONF_ERROR
;

791 } i‡((
Àn
 =2 && 
p
[0] == '-')

792 || (
Àn
 =3 && 
p
[0] == '!' &&Ö[1] == '-'))

794 i‡(
cur
 + 1 !
œ°
) {

795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

796 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

797  
NGX_CONF_ERROR
;

800 
vÆue
[
œ°
].
d©a
[vÆue[œ°].
Àn
] = '\0';

801 
vÆue
[
œ°
].
Àn
++;

803 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[
œ°
]Ë!
NGX_CONF_OK
) {

804  
NGX_CONF_ERROR
;

807 
f›
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

808 (
ngx_hâp_s¸ùt_fûe_code_t
));

809 i‡(
f›
 =
NULL
) {

810  
NGX_CONF_ERROR
;

813 
f›
->
code
 = 
ngx_hâp_s¸ùt_fûe_code
;

815 i‡(
p
[1] == 'f') {

816 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_∂aö
;

817  
NGX_CONF_OK
;

820 i‡(
p
[1] == 'd') {

821 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_dú
;

822  
NGX_CONF_OK
;

825 i‡(
p
[1] == 'e') {

826 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exi°s
;

827  
NGX_CONF_OK
;

830 i‡(
p
[1] == 'x') {

831 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_exec
;

832  
NGX_CONF_OK
;

835 i‡(
p
[0] == '!') {

836 i‡(
p
[2] == 'f') {

837 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
;

838  
NGX_CONF_OK
;

841 i‡(
p
[2] == 'd') {

842 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_dú
;

843  
NGX_CONF_OK
;

846 i‡(
p
[2] == 'e') {

847 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
;

848  
NGX_CONF_OK
;

851 i‡(
p
[2] == 'x') {

852 
f›
->
›
 = 
ngx_hâp_s¸ùt_fûe_nŸ_exec
;

853  
NGX_CONF_OK
;

857 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

858 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

859  
NGX_CONF_ERROR
;

862 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

863 "övÆid c⁄dôi⁄ \"%V\"", &
vÆue
[
cur
]);

865  
NGX_CONF_ERROR
;

866 
	}
}

870 
	$ngx_hâp_ªwrôe_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

871 
ngx_°r_t
 *
vÆue
)

873 
ngx_öt_t
 
ödex
;

874 
ngx_hâp_s¸ùt_v¨_code_t
 *
v¨_code
;

876 
vÆue
->
Àn
--;

877 
vÆue
->
d©a
++;

879 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, 
vÆue
);

881 i‡(
ödex
 =
NGX_ERROR
) {

882  
NGX_CONF_ERROR
;

885 
v¨_code
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

886 (
ngx_hâp_s¸ùt_v¨_code_t
));

887 i‡(
v¨_code
 =
NULL
) {

888  
NGX_CONF_ERROR
;

891 
v¨_code
->
code
 = 
ngx_hâp_s¸ùt_v¨_code
;

892 
v¨_code
->
ödex
 = index;

894  
NGX_CONF_OK
;

895 
	}
}

899 
	$ngx_hâp_ªwrôe_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

901 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
 = 
c⁄f
;

903 
ngx_öt_t
 
ödex
;

904 
ngx_°r_t
 *
vÆue
;

905 
ngx_hâp_v¨übÀ_t
 *
v
;

906 
ngx_hâp_s¸ùt_v¨_code_t
 *
vcode
;

907 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
vhcode
;

909 
vÆue
 = 
cf
->
¨gs
->
ñts
;

911 i‡(
vÆue
[1].
d©a
[0] != '$') {

912 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

913 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

914  
NGX_CONF_ERROR
;

917 
vÆue
[1].
Àn
--;

918 
vÆue
[1].
d©a
++;

920 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

921 i‡(
v
 =
NULL
) {

922  
NGX_CONF_ERROR
;

925 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

926 i‡(
ödex
 =
NGX_ERROR
) {

927  
NGX_CONF_ERROR
;

930 i‡(
v
->
gë_h™dÀr
 =
NULL


931 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "http_", 5) != 0

932 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "sent_http_", 10) != 0

933 && 
	`ngx_°∫ˇ£cmp
(
vÆue
[1].
d©a
, (
u_ch¨
 *) "upstream_http_", 14) != 0)

935 
v
->
gë_h™dÀr
 = 
ngx_hâp_ªwrôe_v¨
;

936 
v
->
d©a
 = 
ödex
;

939 i‡(
	`ngx_hâp_ªwrôe_vÆue
(
cf
, 
lcf
, &
vÆue
[2]Ë!
NGX_CONF_OK
) {

940  
NGX_CONF_ERROR
;

943 i‡(
v
->
£t_h™dÀr
) {

944 
vhcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

945 (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
));

946 i‡(
vhcode
 =
NULL
) {

947  
NGX_CONF_ERROR
;

950 
vhcode
->
code
 = 
ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
;

951 
vhcode
->
h™dÀr
 = 
v
->
£t_h™dÀr
;

952 
vhcode
->
d©a
 = 
v
->data;

954  
NGX_CONF_OK
;

957 
vcode
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

958 (
ngx_hâp_s¸ùt_v¨_code_t
));

959 i‡(
vcode
 =
NULL
) {

960  
NGX_CONF_ERROR
;

963 
vcode
->
code
 = 
ngx_hâp_s¸ùt_£t_v¨_code
;

964 
vcode
->
ödex
 = (
uöçå_t
) index;

966  
NGX_CONF_OK
;

967 
	}
}

971 
	$ngx_hâp_ªwrôe_vÆue
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_ªwrôe_loc_c⁄f_t
 *
lcf
,

972 
ngx_°r_t
 *
vÆue
)

974 
ngx_öt_t
 
n
;

975 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

976 
ngx_hâp_s¸ùt_vÆue_code_t
 *
vÆ
;

977 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
com∂ex
;

979 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
vÆue
);

981 i‡(
n
 == 0) {

982 
vÆ
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

983 (
ngx_hâp_s¸ùt_vÆue_code_t
));

984 i‡(
vÆ
 =
NULL
) {

985  
NGX_CONF_ERROR
;

988 
n
 = 
	`ngx_©oi
(
vÆue
->
d©a
, vÆue->
Àn
);

990 i‡(
n
 =
NGX_ERROR
) {

991 
n
 = 0;

994 
vÆ
->
code
 = 
ngx_hâp_s¸ùt_vÆue_code
;

995 
vÆ
->
vÆue
 = (
uöçå_t
Ë
n
;

996 
vÆ
->
ãxt_Àn
 = (
uöçå_t
Ë
vÆue
->
Àn
;

997 
vÆ
->
ãxt_d©a
 = (
uöçå_t
Ë
vÆue
->
d©a
;

999  
NGX_CONF_OK
;

1002 
com∂ex
 = 
	`ngx_hâp_s¸ùt_°¨t_code
(
cf
->
poﬁ
, &
lcf
->
codes
,

1003 (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
));

1004 i‡(
com∂ex
 =
NULL
) {

1005  
NGX_CONF_ERROR
;

1008 
com∂ex
->
code
 = 
ngx_hâp_s¸ùt_com∂ex_vÆue_code
;

1009 
com∂ex
->
Àngths
 = 
NULL
;

1011 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1013 
sc
.
cf
 = cf;

1014 
sc
.
sour˚
 = 
vÆue
;

1015 
sc
.
Àngths
 = &
com∂ex
->lengths;

1016 
sc
.
vÆues
 = &
lcf
->
codes
;

1017 
sc
.
v¨übÀs
 = 
n
;

1018 
sc
.
com∂ëe_Àngths
 = 1;

1020 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1021  
NGX_CONF_ERROR
;

1024  
NGX_CONF_OK
;

1025 
	}
}

	@src/http/modules/ngx_http_scgi_module.c

9 
	~<ngx_c⁄fig.h
>

10 
	~<ngx_c‹e.h
>

11 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

17 
ngx_¨øy_t
 *
	mÊushes
;

18 
ngx_¨øy_t
 *
	m∑øms_Àn
;

19 
ngx_¨øy_t
 *
	m∑øms
;

20 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

22 
ngx_hash_t
 
	mhódîs_hash
;

23 
ngx_uöt_t
 
	mhódî_∑øms
;

25 
ngx_¨øy_t
 *
	mscgi_Àngths
;

26 
ngx_¨øy_t
 *
	mscgi_vÆues
;

28 #i‡(
NGX_HTTP_CACHE
)

29 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

31 } 
	tngx_hâp_scgi_loc_c⁄f_t
;

34 
ngx_öt_t
 
ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
);

36 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

37 
ngx_öt_t
 
ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

38 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

39 
ngx_öt_t
 
ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

40 
ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

41 
ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 *
ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

44 *
ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

45 *
chûd
);

46 
ngx_öt_t
 
ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

47 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_scgi_loc_c⁄f_à*
¥ev
);

49 *
ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

50 *
ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

53 #i‡(
NGX_HTTP_CACHE
)

54 
ngx_öt_t
 
ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

55 *
ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

62 
ngx_c⁄f_bômask_t
 
	gngx_hâp_scgi_√xt_up°ªam_masks
[] = {

63 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

64 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

65 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

66 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

67 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

68 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

69 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

70 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

71 { 
ngx_nuŒ_°rög
, 0 }

75 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
;

78 
ngx_comm™d_t
 
	gngx_hâp_scgi_comm™ds
[] = {

80 { 
ngx_°rög
("scgi_pass"),

81 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

82 
ngx_hâp_scgi_∑ss
,

83 
NGX_HTTP_LOC_CONF_OFFSET
,

85 
NULL
 },

87 { 
ngx_°rög
("scgi_store"),

88 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

89 
ngx_hâp_scgi_°‹e
,

90 
NGX_HTTP_LOC_CONF_OFFSET
,

92 
NULL
 },

94 { 
ngx_°rög
("scgi_store_access"),

95 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

96 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

97 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

99 
NULL
 },

101 { 
ngx_°rög
("scgi_buffering"),

102 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

103 
ngx_c⁄f_£t_Êag_¶Ÿ
,

104 
NGX_HTTP_LOC_CONF_OFFSET
,

105 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

106 
NULL
 },

108 { 
ngx_°rög
("scgi_ignore_client_abort"),

109 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

110 
ngx_c⁄f_£t_Êag_¶Ÿ
,

111 
NGX_HTTP_LOC_CONF_OFFSET
,

112 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

113 
NULL
 },

115 { 
ngx_°rög
("scgi_bind"),

116 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

117 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

118 
NGX_HTTP_LOC_CONF_OFFSET
,

119 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

120 
NULL
 },

122 { 
ngx_°rög
("scgi_connect_timeout"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

124 
ngx_c⁄f_£t_m£c_¶Ÿ
,

125 
NGX_HTTP_LOC_CONF_OFFSET
,

126 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

127 
NULL
 },

129 { 
ngx_°rög
("scgi_send_timeout"),

130 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

131 
ngx_c⁄f_£t_m£c_¶Ÿ
,

132 
NGX_HTTP_LOC_CONF_OFFSET
,

133 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

134 
NULL
 },

136 { 
ngx_°rög
("scgi_buffer_size"),

137 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

138 
ngx_c⁄f_£t_size_¶Ÿ
,

139 
NGX_HTTP_LOC_CONF_OFFSET
,

140 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

141 
NULL
 },

143 { 
ngx_°rög
("scgi_pass_request_headers"),

144 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

145 
ngx_c⁄f_£t_Êag_¶Ÿ
,

146 
NGX_HTTP_LOC_CONF_OFFSET
,

147 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

148 
NULL
 },

150 { 
ngx_°rög
("scgi_pass_request_body"),

151 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

152 
ngx_c⁄f_£t_Êag_¶Ÿ
,

153 
NGX_HTTP_LOC_CONF_OFFSET
,

154 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

155 
NULL
 },

157 { 
ngx_°rög
("scgi_intercept_errors"),

158 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

159 
ngx_c⁄f_£t_Êag_¶Ÿ
,

160 
NGX_HTTP_LOC_CONF_OFFSET
,

161 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

162 
NULL
 },

164 { 
ngx_°rög
("scgi_read_timeout"),

165 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

166 
ngx_c⁄f_£t_m£c_¶Ÿ
,

167 
NGX_HTTP_LOC_CONF_OFFSET
,

168 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

169 
NULL
 },

171 { 
ngx_°rög
("scgi_buffers"),

172 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

173 
ngx_c⁄f_£t_bufs_¶Ÿ
,

174 
NGX_HTTP_LOC_CONF_OFFSET
,

175 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

176 
NULL
 },

178 { 
ngx_°rög
("scgi_busy_buffers_size"),

179 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

180 
ngx_c⁄f_£t_size_¶Ÿ
,

181 
NGX_HTTP_LOC_CONF_OFFSET
,

182 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

183 
NULL
 },

185 #i‡(
NGX_HTTP_CACHE
)

187 { 
ngx_°rög
("scgi_cache"),

188 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

189 
ngx_hâp_scgi_ˇche
,

190 
NGX_HTTP_LOC_CONF_OFFSET
,

192 
NULL
 },

194 { 
ngx_°rög
("scgi_cache_key"),

195 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

196 
ngx_hâp_scgi_ˇche_key
,

197 
NGX_HTTP_LOC_CONF_OFFSET
,

199 
NULL
 },

201 { 
ngx_°rög
("scgi_cache_path"),

202 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

203 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

206 &
ngx_hâp_scgi_moduÀ
 },

208 { 
ngx_°rög
("scgi_cache_bypass"),

209 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

210 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

211 
NGX_HTTP_LOC_CONF_OFFSET
,

212 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

213 
NULL
 },

215 { 
ngx_°rög
("scgi_no_cache"),

216 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

217 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

218 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

220 
NULL
 },

222 { 
ngx_°rög
("scgi_cache_valid"),

223 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

224 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

225 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

227 
NULL
 },

229 { 
ngx_°rög
("scgi_cache_min_uses"),

230 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

231 
ngx_c⁄f_£t_num_¶Ÿ
,

232 
NGX_HTTP_LOC_CONF_OFFSET
,

233 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

234 
NULL
 },

236 { 
ngx_°rög
("scgi_cache_use_stale"),

237 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

238 
ngx_c⁄f_£t_bômask_¶Ÿ
,

239 
NGX_HTTP_LOC_CONF_OFFSET
,

240 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

241 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

243 { 
ngx_°rög
("scgi_cache_methods"),

244 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

245 
ngx_c⁄f_£t_bômask_¶Ÿ
,

246 
NGX_HTTP_LOC_CONF_OFFSET
,

247 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

248 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

250 { 
ngx_°rög
("scgi_cache_lock"),

251 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

252 
ngx_c⁄f_£t_Êag_¶Ÿ
,

253 
NGX_HTTP_LOC_CONF_OFFSET
,

254 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

255 
NULL
 },

257 { 
ngx_°rög
("scgi_cache_lock_timeout"),

258 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

259 
ngx_c⁄f_£t_m£c_¶Ÿ
,

260 
NGX_HTTP_LOC_CONF_OFFSET
,

261 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

262 
NULL
 },

266 { 
ngx_°rög
("scgi_temp_path"),

267 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

268 
ngx_c⁄f_£t_∑th_¶Ÿ
,

269 
NGX_HTTP_LOC_CONF_OFFSET
,

270 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

271 
NULL
 },

273 { 
ngx_°rög
("scgi_max_temp_file_size"),

274 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

275 
ngx_c⁄f_£t_size_¶Ÿ
,

276 
NGX_HTTP_LOC_CONF_OFFSET
,

277 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

278 
NULL
 },

280 { 
ngx_°rög
("scgi_temp_file_write_size"),

281 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

282 
ngx_c⁄f_£t_size_¶Ÿ
,

283 
NGX_HTTP_LOC_CONF_OFFSET
,

284 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

285 
NULL
 },

287 { 
ngx_°rög
("scgi_next_upstream"),

288 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

289 
ngx_c⁄f_£t_bômask_¶Ÿ
,

290 
NGX_HTTP_LOC_CONF_OFFSET
,

291 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

292 &
ngx_hâp_scgi_√xt_up°ªam_masks
 },

294 { 
ngx_°rög
("scgi_param"),

295 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

296 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

297 
NGX_HTTP_LOC_CONF_OFFSET
,

298 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
∑øms_sour˚
),

299 
NULL
 },

301 { 
ngx_°rög
("scgi_pass_header"),

302 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

303 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

304 
NGX_HTTP_LOC_CONF_OFFSET
,

305 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

306 
NULL
 },

308 { 
ngx_°rög
("scgi_hide_header"),

309 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

310 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

311 
NGX_HTTP_LOC_CONF_OFFSET
,

312 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

313 
NULL
 },

315 { 
ngx_°rög
("scgi_ignore_headers"),

316 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

317 
ngx_c⁄f_£t_bômask_¶Ÿ
,

318 
NGX_HTTP_LOC_CONF_OFFSET
,

319 
off£tof
(
ngx_hâp_scgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

320 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

322 
ngx_nuŒ_comm™d


326 
ngx_hâp_moduÀ_t
 
	gngx_hâp_scgi_moduÀ_˘x
 = {

327 
NULL
,

328 
NULL
,

330 
NULL
,

331 
NULL
,

333 
NULL
,

334 
NULL
,

336 
ngx_hâp_scgi_¸óã_loc_c⁄f
,

337 
ngx_hâp_scgi_mîge_loc_c⁄f


341 
ngx_moduÀ_t
 
	gngx_hâp_scgi_moduÀ
 = {

342 
NGX_MODULE_V1
,

343 &
ngx_hâp_scgi_moduÀ_˘x
,

344 
ngx_hâp_scgi_comm™ds
,

345 
NGX_HTTP_MODULE
,

346 
NULL
,

347 
NULL
,

348 
NULL
,

349 
NULL
,

350 
NULL
,

351 
NULL
,

352 
NULL
,

353 
NGX_MODULE_V1_PADDING


357 
ngx_°r_t
 
	gngx_hâp_scgi_hide_hódîs
[] = {

358 
ngx_°rög
("Status"),

359 
ngx_°rög
("X-Accel-Expires"),

360 
ngx_°rög
("X-Accel-Redirect"),

361 
ngx_°rög
("X-Accel-Limit-Rate"),

362 
ngx_°rög
("X-Accel-Buffering"),

363 
ngx_°rög
("X-Accel-Charset"),

364 
ngx_nuŒ_°rög


368 #i‡(
NGX_HTTP_CACHE
)

370 
ngx_keyvÆ_t
 
	gngx_hâp_scgi_ˇche_hódîs
[] = {

371 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

372 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

373 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

374 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

375 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

376 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

377 { 
ngx_nuŒ_°rög
,Çgx_null_string }

383 
ngx_∑th_öô_t
 
	gngx_hâp_scgi_ãmp_∑th
 = {

384 
ngx_°rög
(
NGX_HTTP_SCGI_TEMP_PATH
), { 1, 2, 0 }

388 
ngx_öt_t


389 
	$ngx_hâp_scgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

391 
ngx_öt_t
 
rc
;

392 
ngx_hâp_°©us_t
 *
°©us
;

393 
ngx_hâp_up°ªam_t
 *
u
;

394 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

396 i‡(
r
->
subªque°_ö_mem‹y
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

400  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

403 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

404  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

407 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

408 i‡(
°©us
 =
NULL
) {

409  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

412 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_scgi_moduÀ
);

414 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

416 i‡(
scf
->
scgi_Àngths
) {

417 i‡(
	`ngx_hâp_scgi_evÆ
(
r
, 
scf
Ë!
NGX_OK
) {

418  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

422 
u
 = 
r
->
up°ªam
;

424 
	`ngx_°r_£t
(&
u
->
schema
, "scgi://");

425 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_scgi_moduÀ
;

427 
u
->
c⁄f
 = &
scf
->
up°ªam
;

429 #i‡(
NGX_HTTP_CACHE
)

430 
u
->
¸óã_key
 = 
ngx_hâp_scgi_¸óã_key
;

432 
u
->
¸óã_ªque°
 = 
ngx_hâp_scgi_¸óã_ªque°
;

433 
u
->
ªöô_ªque°
 = 
ngx_hâp_scgi_ªöô_ªque°
;

434 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

435 
u
->
ab‹t_ªque°
 = 
ngx_hâp_scgi_ab‹t_ªque°
;

436 
u
->
föÆize_ªque°
 = 
ngx_hâp_scgi_föÆize_ªque°
;

437 
r
->
°©e
 = 0;

439 
u
->
buf„rög
 = 
scf
->
up°ªam
.buffering;

441 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

442 i‡(
u
->
pùe
 =
NULL
) {

443  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

446 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

447 
u
->
pùe
->
öput_˘x
 = 
r
;

449 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

451 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

452  
rc
;

455  
NGX_DONE
;

456 
	}
}

459 
ngx_öt_t


460 
	$ngx_hâp_scgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_scgi_loc_c⁄f_t
 * 
scf
)

462 
ngx_uæ_t
 
uæ
;

463 
ngx_hâp_up°ªam_t
 *
u
;

465 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

467 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
scf
->
scgi_Àngths
->
ñts
, 0,

468 
scf
->
scgi_vÆues
->
ñts
)

469 =
NULL
)

471  
NGX_ERROR
;

474 
uæ
.
no_ªsﬁve
 = 1;

476 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

477 i‡(
uæ
.
îr
) {

478 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

479 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

482  
NGX_ERROR
;

485 
u
 = 
r
->
up°ªam
;

487 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

488 i‡(
u
->
ªsﬁved
 =
NULL
) {

489  
NGX_ERROR
;

492 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

493 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

494 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

495 
u
->
ªsﬁved
->
«ddrs
 = 1;

496 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

499 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

500 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

501 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

504  
NGX_OK
;

505 
	}
}

508 #i‡(
NGX_HTTP_CACHE
)

510 
ngx_öt_t


511 
	$ngx_hâp_scgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

513 
ngx_°r_t
 *
key
;

514 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

516 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

517 i‡(
key
 =
NULL
) {

518  
NGX_ERROR
;

521 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

523 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
scf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

524  
NGX_ERROR
;

527  
NGX_OK
;

528 
	}
}

533 
ngx_öt_t


534 
	$ngx_hâp_scgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

536 
off_t
 
c⁄ã¡_Àngth_n
;

537 
u_ch¨
 
ch
, *
key
, *
vÆ
, *
lowˇ£_key
;

538 
size_t
 
Àn
, 
key_Àn
, 
vÆ_Àn
, 
Æloˇãd
;

539 
ngx_buf_t
 *
b
;

540 
ngx_°r_t
 
c⁄ã¡_Àngth
;

541 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

542 
ngx_chaö_t
 *
˛
, *
body
;

543 
ngx_li°_∑π_t
 *
∑π
;

544 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

545 
ngx_hâp_s¸ùt_code_±
 
code
;

546 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

547 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
;

548 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

549 
u_ch¨
 
buf„r
[
NGX_OFF_T_LEN
];

551 
c⁄ã¡_Àngth_n
 = 0;

552 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

554 
body
) {

555 
c⁄ã¡_Àngth_n
 +
	`ngx_buf_size
(
body
->
buf
);

556 
body
 = body->
√xt
;

559 
c⁄ã¡_Àngth
.
d©a
 = 
buf„r
;

560 
c⁄ã¡_Àngth
.
Àn
 = 
	`ngx_•rötf
(
buf„r
, "%O", 
c⁄ã¡_Àngth_n
) - buffer;

562 
Àn
 = ("CONTENT_LENGTH"Ë+ 
c⁄ã¡_Àngth
.len + 1;

564 
hódî_∑øms
 = 0;

565 
ign‹ed
 = 
NULL
;

567 
scf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_scgi_moduÀ
);

569 i‡(
scf
->
∑øms_Àn
) {

570 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

572 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
scf
->
Êushes
);

573 
À
.
Êushed
 = 1;

575 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

576 
À
.
ªque°
 = 
r
;

578 *(
uöçå_t
 *Ë
À
.
ù
) {

580 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

581 
key_Àn
 = 
	`lcode
(&
À
);

583 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

584 
skù_em±y
 = 
	`lcode
(&
À
);

586 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

587 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

589 
À
.
ù
 +(
uöçå_t
);

591 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

595 
Àn
 +
key_Àn
 + 
vÆ_Àn
 + 1;

599 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

601 
Æloˇãd
 = 0;

602 
lowˇ£_key
 = 
NULL
;

604 i‡(
scf
->
hódî_∑øms
) {

605 
n
 = 0;

606 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

608 
∑π
) {

609 
n
 +
∑π
->
√…s
;

610 
∑π
 =Ö¨t->
√xt
;

613 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

614 i‡(
ign‹ed
 =
NULL
) {

615  
NGX_ERROR
;

619 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

620 
hódî
 = 
∑π
->
ñts
;

622 
i
 = 0; ; i++) {

624 i‡(
i
 >
∑π
->
√…s
) {

625 i‡(
∑π
->
√xt
 =
NULL
) {

629 
∑π
 =Ö¨t->
√xt
;

630 
hódî
 = 
∑π
->
ñts
;

631 
i
 = 0;

634 i‡(
scf
->
hódî_∑øms
) {

635 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

636 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

637 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

638 i‡(
lowˇ£_key
 =
NULL
) {

639  
NGX_ERROR
;

643 
hash
 = 0;

645 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

646 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

648 i‡(
ch
 >= 'A' && ch <= 'Z') {

649 
ch
 |= 0x20;

651 } i‡(
ch
 == '-') {

652 
ch
 = '_';

655 
hash
 = 
	`ngx_hash
(hash, 
ch
);

656 
lowˇ£_key
[
n
] = 
ch
;

659 i‡(
	`ngx_hash_föd
(&
scf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

660 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

665 
Àn
 +("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len + 1

666 + 
hódî
[
i
].
vÆue
.
Àn
 + 1;

672 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
 + 1 + 
Àn
 + 1);

673 i‡(
b
 =
NULL
) {

674  
NGX_ERROR
;

677 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

678 i‡(
˛
 =
NULL
) {

679  
NGX_ERROR
;

682 
˛
->
buf
 = 
b
;

684 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "%ui:CONTENT_LENGTH%Z%V%Z",

685 
Àn
, &
c⁄ã¡_Àngth
);

687 i‡(
scf
->
∑øms_Àn
) {

688 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

690 
e
.
ù
 = 
scf
->
∑øms
->
ñts
;

691 
e
.
pos
 = 
b
->
œ°
;

692 
e
.
ªque°
 = 
r
;

693 
e
.
Êushed
 = 1;

695 
À
.
ù
 = 
scf
->
∑øms_Àn
->
ñts
;

697 *(
uöçå_t
 *Ë
À
.
ù
) {

699 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

700 
	`lcode
(&
À
);

702 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

703 
skù_em±y
 = 
	`lcode
(&
À
);

705 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

706 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

708 
À
.
ù
 +(
uöçå_t
);

710 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

711 
e
.
skù
 = 1;

713 *(
uöçå_t
 *Ë
e
.
ù
) {

714 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

715 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

717 
e
.
ù
 +(
uöçå_t
);

719 
e
.
skù
 = 0;

724 #i‡(
NGX_DEBUG
)

725 
key
 = 
e
.
pos
;

727 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

728 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

730 #i‡(
NGX_DEBUG
)

731 
vÆ
 = 
e
.
pos
;

733 *(
uöçå_t
 *Ë
e
.
ù
) {

734 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

735 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

737 *
e
.
pos
++ = '\0';

738 
e
.
ù
 +(
uöçå_t
);

740 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

741 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

744 
b
->
œ°
 = 
e
.
pos
;

747 i‡(
scf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

749 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

750 
hódî
 = 
∑π
->
ñts
;

752 
i
 = 0; ; i++) {

754 i‡(
i
 >
∑π
->
√…s
) {

755 i‡(
∑π
->
√xt
 =
NULL
) {

759 
∑π
 =Ö¨t->
√xt
;

760 
hódî
 = 
∑π
->
ñts
;

761 
i
 = 0;

764 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

765 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

766 
√xt
;

770 
key
 = 
b
->
œ°
;

771 
b
->
œ°
 = 
	`ngx_˝ymem
(
key
, "HTTP_", ("HTTP_") - 1);

773 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

774 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

776 i‡(
ch
 >= 'a' && ch <= 'z') {

777 
ch
 &= ~0x20;

779 } i‡(
ch
 == '-') {

780 
ch
 = '_';

783 *
b
->
œ°
++ = 
ch
;

786 *
b
->
œ°
++ = (
u_ch¨
) 0;

788 
vÆ
 = 
b
->
œ°
;

789 
b
->
œ°
 = 
	`ngx_c›y
(
vÆ
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

790 *
b
->
œ°
++ = (
u_ch¨
) 0;

792 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

793 "scgò∑øm: \"%s: %s\"", 
key
, 
vÆ
);

795 
√xt
:

801 *
b
->
œ°
++ = (
u_ch¨
) ',';

803 i‡(
scf
->
up°ªam
.
∑ss_ªque°_body
) {

804 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

805 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

807 
body
) {

808 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

809 i‡(
b
 =
NULL
) {

810  
NGX_ERROR
;

813 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

815 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

816 i‡(
˛
->
√xt
 =
NULL
) {

817  
NGX_ERROR
;

820 
˛
 = cl->
√xt
;

821 
˛
->
buf
 = 
b
;

823 
body
 = body->
√xt
;

827 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

830 
˛
->
√xt
 = 
NULL
;

832  
NGX_OK
;

833 
	}
}

836 
ngx_öt_t


837 
	$ngx_hâp_scgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

839 
ngx_hâp_°©us_t
 *
°©us
;

841 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

843 i‡(
°©us
 =
NULL
) {

844  
NGX_OK
;

847 
°©us
->
code
 = 0;

848 
°©us
->
cou¡
 = 0;

849 
°©us
->
°¨t
 = 
NULL
;

850 
°©us
->
íd
 = 
NULL
;

852 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_°©us_löe
;

853 
r
->
°©e
 = 0;

855  
NGX_OK
;

856 
	}
}

859 
ngx_öt_t


860 
	$ngx_hâp_scgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

862 
size_t
 
Àn
;

863 
ngx_öt_t
 
rc
;

864 
ngx_hâp_°©us_t
 *
°©us
;

865 
ngx_hâp_up°ªam_t
 *
u
;

867 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_scgi_moduÀ
);

869 i‡(
°©us
 =
NULL
) {

870  
NGX_ERROR
;

873 
u
 = 
r
->
up°ªam
;

875 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

877 i‡(
rc
 =
NGX_AGAIN
) {

878  
rc
;

881 i‡(
rc
 =
NGX_ERROR
) {

882 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

883  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

886 i‡(
u
->
°©e
) {

887 
u
->
°©e
->
°©us
 = sètus->
code
;

890 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

892 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

893 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

895 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

896 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

897  
NGX_ERROR
;

900 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

902 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

904 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

906 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_scgi_¥o˚ss_hódî
;

908  
	`ngx_hâp_scgi_¥o˚ss_hódî
(
r
);

909 
	}
}

912 
ngx_öt_t


913 
	$ngx_hâp_scgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

915 
ngx_°r_t
 *
°©us_löe
;

916 
ngx_öt_t
 
rc
, 
°©us
;

917 
ngx_èbÀ_ñt_t
 *
h
;

918 
ngx_hâp_up°ªam_t
 *
u
;

919 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

920 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

922 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

926 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

928 i‡(
rc
 =
NGX_OK
) {

932 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

933 i‡(
h
 =
NULL
) {

934  
NGX_ERROR
;

937 
h
->
hash
 = 
r
->
hódî_hash
;

939 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

940 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

942 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

943 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

944 + 
h
->
key
.
Àn
);

945 i‡(
h
->
key
.
d©a
 =
NULL
) {

946  
NGX_ERROR
;

949 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

950 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

952 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

953 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

954 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

955 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

957 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

958 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

961 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

964 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

965 
h
->
lowˇ£_key
, h->
key
.
Àn
);

967 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

968  
NGX_ERROR
;

971 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

972 "hâ∞scgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

977 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

981 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

984 
u
 = 
r
->
up°ªam
;

986 i‡(
u
->
hódîs_ö
.
°©us_n
) {

987 
d⁄e
;

990 i‡(
u
->
hódîs_ö
.
°©us
) {

991 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

993 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

994 i‡(
°©us
 =
NGX_ERROR
) {

995 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

997 
°©us_löe
);

998  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1001 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1002 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1004 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1005 
u
->
hódîs_ö
.
°©us_n
 = 302;

1006 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1010 
u
->
hódîs_ö
.
°©us_n
 = 200;

1011 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1014 i‡(
u
->
°©e
) {

1015 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1018 
d⁄e
:

1020 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1021 && 
r
->
hódîs_ö
.
upgøde
)

1023 
u
->
upgøde
 = 1;

1026  
NGX_OK
;

1029 i‡(
rc
 =
NGX_AGAIN
) {

1030  
NGX_AGAIN
;

1035 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1038  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1040 
	}
}

1044 
	$ngx_hâp_scgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1046 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1050 
	}
}

1054 
	$ngx_hâp_scgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1056 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1060 
	}
}

1064 
	$ngx_hâp_scgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1066 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
;

1068 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_scgi_loc_c⁄f_t
));

1069 i‡(
c⁄f
 =
NULL
) {

1070  
NULL
;

1073 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1074 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1075 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1076 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1078 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1080 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1081 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1082 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1084 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1085 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1087 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1088 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1089 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1091 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1092 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1094 #i‡(
NGX_HTTP_CACHE
)

1095 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1096 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1097 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1098 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1099 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1100 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1101 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1104 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1105 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1107 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1110 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1112 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1114 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "scgi");

1116  
c⁄f
;

1117 
	}
}

1121 
	$ngx_hâp_scgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1123 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1124 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1126 
size_t
 
size
;

1127 
ngx_hash_öô_t
 
hash
;

1128 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1130 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1131 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1133 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1134 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1135 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1139 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1140 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1142 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1143 
¥ev
->
up°ªam
.
buf„rög
, 1);

1145 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1146 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1148 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1149 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1151 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1152 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1154 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1155 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1157 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1158 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1160 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1161 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1163 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1164 
¥ev
->
up°ªam
.
buf„r_size
,

1165 (
size_t
Ë
ngx_∑gesize
);

1168 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1169 8, 
ngx_∑gesize
);

1171 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1172 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1174  
NGX_CONF_ERROR
;

1178 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1179 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1180 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1184 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1185 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1186 
NGX_CONF_UNSET_SIZE
);

1188 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1189 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1191 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1192 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1195 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1196 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1201  
NGX_CONF_ERROR
;

1204 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1205 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1207 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1211  
NGX_CONF_ERROR
;

1215 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1216 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1217 
NGX_CONF_UNSET_SIZE
);

1219 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1220 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1222 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1223 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1226 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1227 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1232  
NGX_CONF_ERROR
;

1236 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1237 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1238 
NGX_CONF_UNSET_SIZE
);

1240 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1241 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1243 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1244 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1247 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1248 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1255  
NGX_CONF_ERROR
;

1259 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1260 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1261 
NGX_CONF_BITMASK_SET
);

1264 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1265 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1266 (
NGX_CONF_BITMASK_SET


1267 |
NGX_HTTP_UPSTREAM_FT_ERROR


1268 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1270 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1271 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1272 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1275 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1276 
¥ev
->
up°ªam
.
ãmp_∑th
,

1277 &
ngx_hâp_scgi_ãmp_∑th
)

1278 !
NGX_OK
)

1280  
NGX_CONF_ERROR
;

1283 #i‡(
NGX_HTTP_CACHE
)

1285 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1286 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1288 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1289 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1291 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1293 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1295 &
shm_z⁄e
->
shm
.
«me
);

1297  
NGX_CONF_ERROR
;

1300 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1301 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1303 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1304 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1305 (
NGX_CONF_BITMASK_SET


1306 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1308 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1309 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1310 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1313 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1314 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1317 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1318 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1321 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1323 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1324 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1326 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1327 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1329 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1330 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1332 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1333 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1336 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1337 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1339 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1340 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1344 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1345 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1346 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1347 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1349 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1350 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1352 
hash
.
max_size
 = 512;

1353 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1354 
hash
.
«me
 = "scgi_hide_headers_hash";

1356 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1357 &
¥ev
->
up°ªam
, 
ngx_hâp_scgi_hide_hódîs
, &
hash
)

1358 !
NGX_OK
)

1360  
NGX_CONF_ERROR
;

1363 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1364 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1367 i‡(
c⁄f
->
scgi_Àngths
 =
NULL
) {

1368 
c⁄f
->
scgi_Àngths
 = 
¥ev
->scgi_lengths;

1369 
c⁄f
->
scgi_vÆues
 = 
¥ev
->scgi_values;

1372 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
scgi_Àngths
) {

1373 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1374 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1375 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1379 i‡(
	`ngx_hâp_scgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1380  
NGX_CONF_ERROR
;

1383  
NGX_CONF_OK
;

1384 
	}
}

1387 
ngx_öt_t


1388 
	$ngx_hâp_scgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_scgi_loc_c⁄f_t
 *
c⁄f
,

1389 
ngx_hâp_scgi_loc_c⁄f_t
 *
¥ev
)

1391 
u_ch¨
 *
p
;

1392 
size_t
 
size
;

1393 
uöçå_t
 *
code
;

1394 
ngx_uöt_t
 
i
, 
n§c
;

1395 
ngx_¨øy_t
 
hódîs_«mes
;

1396 #i‡(
NGX_HTTP_CACHE
)

1397 
ngx_¨øy_t
 
∑øms_mîged
;

1399 
ngx_hash_key_t
 *
hk
;

1400 
ngx_hash_öô_t
 
hash
;

1401 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1402 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1403 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1405 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1406 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1408 i‡(
¥ev
->
hódîs_hash
.
buckës


1409 #i‡(
NGX_HTTP_CACHE
)

1410 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1411 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1415 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1416 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1417 
c⁄f
->
∑øms
 = 
¥ev
->params;

1418 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1419 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1421  
NGX_OK
;

1425 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1426 #i‡(
NGX_HTTP_CACHE
)

1427 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1431 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1432  
NGX_OK
;

1435 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1436 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1437  
NGX_ERROR
;

1440 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1441 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1442  
NGX_ERROR
;

1445 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1446 !
NGX_OK
)

1448  
NGX_ERROR
;

1451 i‡(
c⁄f
->
∑øms_sour˚
) {

1452 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1453 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1456 
§c
 = 
NULL
;

1457 
n§c
 = 0;

1460 #i‡(
NGX_HTTP_CACHE
)

1462 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1463 
ngx_keyvÆ_t
 *
h
;

1464 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1466 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1467 (
ngx_hâp_up°ªam_∑øm_t
))

1468 !
NGX_OK
)

1470  
NGX_ERROR
;

1473 
i
 = 0; i < 
n§c
; i++) {

1475 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1476 i‡(
s
 =
NULL
) {

1477  
NGX_ERROR
;

1480 *
s
 = 
§c
[
i
];

1483 
h
 = 
ngx_hâp_scgi_ˇche_hódîs
;

1485 
h
->
key
.
Àn
) {

1487 
§c
 = 
∑øms_mîged
.
ñts
;

1488 
n§c
 = 
∑øms_mîged
.
√…s
;

1490 
i
 = 0; i < 
n§c
; i++) {

1491 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1492 
√xt
;

1496 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1497 i‡(
s
 =
NULL
) {

1498  
NGX_ERROR
;

1501 
s
->
key
 = 
h
->key;

1502 
s
->
vÆue
 = 
h
->value;

1503 
s
->
skù_em±y
 = 0;

1505 
√xt
:

1507 
h
++;

1510 
§c
 = 
∑øms_mîged
.
ñts
;

1511 
n§c
 = 
∑øms_mîged
.
√…s
;

1516 
i
 = 0; i < 
n§c
; i++) {

1518 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1519 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1521 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1522 i‡(
hk
 =
NULL
) {

1523  
NGX_ERROR
;

1526 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1527 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1528 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1529 
hk
->
vÆue
 = (*) 1;

1531 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1536 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1537 (
ngx_hâp_s¸ùt_c›y_code_t
));

1538 i‡(
c›y
 =
NULL
) {

1539  
NGX_ERROR
;

1542 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1543 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1545 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1546 (
ngx_hâp_s¸ùt_c›y_code_t
));

1547 i‡(
c›y
 =
NULL
) {

1548  
NGX_ERROR
;

1551 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1552 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1555 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1556 + 
§c
[
i
].
key
.
Àn
 + 1 + (
uöçå_t
) - 1)

1557 & ~((
uöçå_t
) - 1);

1559 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1560 i‡(
c›y
 =
NULL
) {

1561  
NGX_ERROR
;

1564 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1565 
c›y
->
Àn
 = 
§c
[
i
].
key
.len + 1;

1567 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1568 (Ë
	`ngx_˝y°∫
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
 + 1);

1571 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1573 
sc
.
cf
 = cf;

1574 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1575 
sc
.
Êushes
 = &
c⁄f
->flushes;

1576 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1577 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1579 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1580  
NGX_ERROR
;

1583 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1584 i‡(
code
 =
NULL
) {

1585  
NGX_ERROR
;

1588 *
code
 = (
uöçå_t
Ë
NULL
;

1591 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1592 i‡(
code
 =
NULL
) {

1593  
NGX_ERROR
;

1596 *
code
 = (
uöçå_t
Ë
NULL
;

1599 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1600 i‡(
code
 =
NULL
) {

1601  
NGX_ERROR
;

1604 *
code
 = (
uöçå_t
Ë
NULL
;

1606 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1607 i‡(
code
 =
NULL
) {

1608  
NGX_ERROR
;

1611 *
code
 = (
uöçå_t
Ë
NULL
;

1613 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1615 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1616 
hash
.
key
 = 
ngx_hash_key_lc
;

1617 
hash
.
max_size
 = 512;

1618 
hash
.
buckë_size
 = 64;

1619 
hash
.
«me
 = "scgi_params_hash";

1620 
hash
.
poﬁ
 = 
cf
->pool;

1621 
hash
.
ãmp_poﬁ
 = 
NULL
;

1623  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1624 
	}
}

1628 
	$ngx_hâp_scgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1630 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1632 
ngx_uæ_t
 
u
;

1633 
ngx_°r_t
 *
vÆue
, *
uæ
;

1634 
ngx_uöt_t
 
n
;

1635 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1636 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1638 i‡(
scf
->
up°ªam
.up°ªam || scf->
scgi_Àngths
) {

1642 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1643 
˛cf
->
h™dÀr
 = 
ngx_hâp_scgi_h™dÀr
;

1645 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1647 
uæ
 = &
vÆue
[1];

1649 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1651 i‡(
n
) {

1653 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1655 
sc
.
cf
 = cf;

1656 
sc
.
sour˚
 = 
uæ
;

1657 
sc
.
Àngths
 = &
scf
->
scgi_Àngths
;

1658 
sc
.
vÆues
 = &
scf
->
scgi_vÆues
;

1659 
sc
.
v¨übÀs
 = 
n
;

1660 
sc
.
com∂ëe_Àngths
 = 1;

1661 
sc
.
com∂ëe_vÆues
 = 1;

1663 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1664  
NGX_CONF_ERROR
;

1667  
NGX_CONF_OK
;

1670 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1672 
u
.
uæ
 = 
vÆue
[1];

1673 
u
.
no_ªsﬁve
 = 1;

1675 
scf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1676 i‡(
scf
->
up°ªam
.up°ªam =
NULL
) {

1677  
NGX_CONF_ERROR
;

1680 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1681 
˛cf
->
auto_ªdúe˘
 = 1;

1684  
NGX_CONF_OK
;

1685 
	}
}

1689 
	$ngx_hâp_scgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1691 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1693 
ngx_°r_t
 *
vÆue
;

1694 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1696 i‡(
scf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || scf->up°ªam.
°‹e_Àngths
) {

1700 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1702 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1703 
scf
->
up°ªam
.
°‹e
 = 0;

1704  
NGX_CONF_OK
;

1707 #i‡(
NGX_HTTP_CACHE
)

1709 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1710 && 
scf
->
up°ªam
.
ˇche
 !
NULL
)

1717 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1718 
scf
->
up°ªam
.
°‹e
 = 1;

1719  
NGX_CONF_OK
;

1723 
vÆue
[1].
Àn
++;

1725 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1727 
sc
.
cf
 = cf;

1728 
sc
.
sour˚
 = &
vÆue
[1];

1729 
sc
.
Àngths
 = &
scf
->
up°ªam
.
°‹e_Àngths
;

1730 
sc
.
vÆues
 = &
scf
->
up°ªam
.
°‹e_vÆues
;

1731 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1732 
sc
.
com∂ëe_Àngths
 = 1;

1733 
sc
.
com∂ëe_vÆues
 = 1;

1735 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1736  
NGX_CONF_ERROR
;

1739  
NGX_CONF_OK
;

1740 
	}
}

1743 #i‡(
NGX_HTTP_CACHE
)

1746 
	$ngx_hâp_scgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1748 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1750 
ngx_°r_t
 *
vÆue
;

1752 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1754 i‡(
scf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1758 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1759 
scf
->
up°ªam
.
ˇche
 = 
NULL
;

1760  
NGX_CONF_OK
;

1763 i‡(
scf
->
up°ªam
.
°‹e
 > 0 || scf->up°ªam.
°‹e_Àngths
) {

1767 
scf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1768 &
ngx_hâp_scgi_moduÀ
);

1769 i‡(
scf
->
up°ªam
.
ˇche
 =
NULL
) {

1770  
NGX_CONF_ERROR
;

1773  
NGX_CONF_OK
;

1774 
	}
}

1778 
	$ngx_hâp_scgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1780 
ngx_hâp_scgi_loc_c⁄f_t
 *
scf
 = 
c⁄f
;

1782 
ngx_°r_t
 *
vÆue
;

1783 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1785 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1787 i‡(
scf
->
ˇche_key
.
vÆue
.
d©a
) {

1791 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1793 
ccv
.
cf
 = cf;

1794 
ccv
.
vÆue
 = &value[1];

1795 
ccv
.
com∂ex_vÆue
 = &
scf
->
ˇche_key
;

1797 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1798  
NGX_CONF_ERROR
;

1801  
NGX_CONF_OK
;

1802 
	}
}

	@src/http/modules/ngx_http_secure_link_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

15 
ngx_hâp_com∂ex_vÆue_t
 *
	mv¨übÀ
;

16 
ngx_hâp_com∂ex_vÆue_t
 *
	mmd5
;

17 
ngx_°r_t
 
	m£¸ë
;

18 } 
	tngx_hâp_£cuª_lök_c⁄f_t
;

22 
ngx_°r_t
 
	mexpúes
;

23 } 
	tngx_hâp_£cuª_lök_˘x_t
;

26 
ngx_öt_t
 
ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

28 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 *
ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

33 *
chûd
);

34 
ngx_öt_t
 
ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

37 
ngx_comm™d_t
 
	gngx_hâp_£cuª_lök_comm™ds
[] = {

39 { 
ngx_°rög
("secure_link"),

40 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

41 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

42 
NGX_HTTP_LOC_CONF_OFFSET
,

43 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
v¨übÀ
),

44 
NULL
 },

46 { 
ngx_°rög
("secure_link_md5"),

47 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

48 
ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
,

49 
NGX_HTTP_LOC_CONF_OFFSET
,

50 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
md5
),

51 
NULL
 },

53 { 
ngx_°rög
("secure_link_secret"),

54 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

55 
ngx_c⁄f_£t_°r_¶Ÿ
,

56 
NGX_HTTP_LOC_CONF_OFFSET
,

57 
off£tof
(
ngx_hâp_£cuª_lök_c⁄f_t
, 
£¸ë
),

58 
NULL
 },

60 
ngx_nuŒ_comm™d


64 
ngx_hâp_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ_˘x
 = {

65 
ngx_hâp_£cuª_lök_add_v¨übÀs
,

66 
NULL
,

68 
NULL
,

69 
NULL
,

71 
NULL
,

72 
NULL
,

74 
ngx_hâp_£cuª_lök_¸óã_c⁄f
,

75 
ngx_hâp_£cuª_lök_mîge_c⁄f


79 
ngx_moduÀ_t
 
	gngx_hâp_£cuª_lök_moduÀ
 = {

80 
NGX_MODULE_V1
,

81 &
ngx_hâp_£cuª_lök_moduÀ_˘x
,

82 
ngx_hâp_£cuª_lök_comm™ds
,

83 
NGX_HTTP_MODULE
,

84 
NULL
,

85 
NULL
,

86 
NULL
,

87 
NULL
,

88 
NULL
,

89 
NULL
,

90 
NULL
,

91 
NGX_MODULE_V1_PADDING


95 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_«me
 = 
ngx_°rög
("secure_link");

96 
ngx_°r_t
 
	gngx_hâp_£cuª_lök_expúes_«me
 =

97 
ngx_°rög
("secure_link_expires");

100 
ngx_öt_t


101 
	$ngx_hâp_£cuª_lök_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

104 
u_ch¨
 *
p
, *
œ°
;

105 
ngx_°r_t
 
vÆ
, 
hash
;

106 
time_t
 
expúes
;

107 
ngx_md5_t
 
md5
;

108 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

109 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

110 
u_ch¨
 
hash_buf
[16], 
md5_buf
[16];

112 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

114 i‡(
c⁄f
->
£¸ë
.
d©a
) {

115  
	`ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
r
, 
c⁄f
, 
v
, 
d©a
);

118 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 || c⁄f->
md5
 == NULL) {

119 
nŸ_found
;

122 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
v¨übÀ
, &
vÆ
Ë!
NGX_OK
) {

123  
NGX_ERROR
;

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

127 "£cuªÜök: \"%V\"", &
vÆ
);

129 
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

131 
p
 = 
	`ngx_°æchr
(
vÆ
.
d©a
, 
œ°
, ',');

132 
expúes
 = 0;

134 i‡(
p
) {

135 
vÆ
.
Àn
 = 
p
++ - vÆ.
d©a
;

137 
expúes
 = 
	`ngx_©Ÿm
(
p
, 
œ°
 -Ö);

138 i‡(
expúes
 <= 0) {

139 
nŸ_found
;

142 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_£cuª_lök_˘x_t
));

143 i‡(
˘x
 =
NULL
) {

144  
NGX_ERROR
;

147 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_£cuª_lök_moduÀ
);

149 
˘x
->
expúes
.
Àn
 = 
œ°
 - 
p
;

150 
˘x
->
expúes
.
d©a
 = 
p
;

153 i‡(
vÆ
.
Àn
 > 24) {

154 
nŸ_found
;

157 
hash
.
Àn
 = 16;

158 
hash
.
d©a
 = 
hash_buf
;

160 i‡(
	`ngx_decode_ba£64uæ
(&
hash
, &
vÆ
Ë!
NGX_OK
) {

161 
nŸ_found
;

164 i‡(
hash
.
Àn
 != 16) {

165 
nŸ_found
;

168 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
c⁄f
->
md5
, &
vÆ
Ë!
NGX_OK
) {

169  
NGX_ERROR
;

172 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

173 "£cuªÜök md5: \"%V\"", &
vÆ
);

175 
	`ngx_md5_öô
(&
md5
);

176 
	`ngx_md5_upd©e
(&
md5
, 
vÆ
.
d©a
, vÆ.
Àn
);

177 
	`ngx_md5_föÆ
(
md5_buf
, &
md5
);

179 i‡(
	`ngx_memcmp
(
hash_buf
, 
md5_buf
, 16) != 0) {

180 
nŸ_found
;

183 
v
->
d©a
 = (
u_ch¨
 *Ë((
expúes
 &&Éxpúe†< 
	`ngx_time
()) ? "0" : "1");

184 
v
->
Àn
 = 1;

185 
v
->
vÆid
 = 1;

186 
v
->
no_ˇchóbÀ
 = 0;

187 
v
->
nŸ_found
 = 0;

189  
NGX_OK
;

191 
nŸ_found
:

193 
v
->
nŸ_found
 = 1;

195  
NGX_OK
;

196 
	}
}

199 
ngx_öt_t


200 
	$ngx_hâp_£cuª_lök_ﬁd_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

201 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

202 
uöçå_t
 
d©a
)

204 
u_ch¨
 *
p
, *
°¨t
, *
íd
, *
œ°
;

205 
size_t
 
Àn
;

206 
ngx_öt_t
 
n
;

207 
ngx_uöt_t
 
i
;

208 
ngx_md5_t
 
md5
;

209 
u_ch¨
 
hash
[16];

211 
p
 = &
r
->
u≈¨£d_uri
.
d©a
[1];

212 
œ°
 = 
r
->
u≈¨£d_uri
.
d©a
 +Ñ->u≈¨£d_uri.
Àn
;

214 
p
 < 
œ°
) {

215 i‡(*
p
++ == '/') {

216 
°¨t
 = 
p
;

217 
md5_°¨t
;

221 
nŸ_found
;

223 
md5_°¨t
:

225 
p
 < 
œ°
) {

226 i‡(*
p
++ == '/') {

227 
íd
 = 
p
 - 1;

228 
uæ_°¨t
;

232 
nŸ_found
;

234 
uæ_°¨t
:

236 
Àn
 = 
œ°
 - 
p
;

238 i‡(
íd
 - 
°¨t
 !32 || 
Àn
 == 0) {

239 
nŸ_found
;

242 
	`ngx_md5_öô
(&
md5
);

243 
	`ngx_md5_upd©e
(&
md5
, 
p
, 
Àn
);

244 
	`ngx_md5_upd©e
(&
md5
, 
c⁄f
->
£¸ë
.
d©a
, c⁄f->£¸ë.
Àn
);

245 
	`ngx_md5_föÆ
(
hash
, &
md5
);

247 
i
 = 0; i < 16; i++) {

248 
n
 = 
	`ngx_hextoi
(&
°¨t
[2 * 
i
], 2);

249 i‡(
n
 =
NGX_ERROR
 ||Ç !
hash
[
i
]) {

250 
nŸ_found
;

254 
v
->
Àn
 =Üen;

255 
v
->
vÆid
 = 1;

256 
v
->
no_ˇchóbÀ
 = 0;

257 
v
->
nŸ_found
 = 0;

258 
v
->
d©a
 = 
p
;

260  
NGX_OK
;

262 
nŸ_found
:

264 
v
->
nŸ_found
 = 1;

266  
NGX_OK
;

267 
	}
}

270 
ngx_öt_t


271 
	$ngx_hâp_£cuª_lök_expúes_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

272 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

274 
ngx_hâp_£cuª_lök_˘x_t
 *
˘x
;

276 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_£cuª_lök_moduÀ
);

278 i‡(
˘x
) {

279 
v
->
Àn
 = 
˘x
->
expúes
.len;

280 
v
->
vÆid
 = 1;

281 
v
->
no_ˇchóbÀ
 = 0;

282 
v
->
nŸ_found
 = 0;

283 
v
->
d©a
 = 
˘x
->
expúes
.data;

286 
v
->
nŸ_found
 = 1;

289  
NGX_OK
;

290 
	}
}

294 
	$ngx_hâp_£cuª_lök_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
;

298 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_£cuª_lök_c⁄f_t
));

299 i‡(
c⁄f
 =
NULL
) {

300  
NULL
;

311  
c⁄f
;

312 
	}
}

316 
	$ngx_hâp_£cuª_lök_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

318 
ngx_hâp_£cuª_lök_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

319 
ngx_hâp_£cuª_lök_c⁄f_t
 *
c⁄f
 = 
chûd
;

321 i‡(
c⁄f
->
£¸ë
.
d©a
) {

322 i‡(
c⁄f
->
v¨übÀ
 || c⁄f->
md5
) {

323 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

326  
NGX_CONF_ERROR
;

329  
NGX_CONF_OK
;

332 i‡(
c⁄f
->
v¨übÀ
 =
NULL
) {

333 
c⁄f
->
v¨übÀ
 = 
¥ev
->variable;

336 i‡(
c⁄f
->
md5
 =
NULL
) {

337 
c⁄f
->
md5
 = 
¥ev
->md5;

340 i‡(
c⁄f
->
v¨übÀ
 =
NULL
 && c⁄f->
md5
 == NULL) {

341 
c⁄f
->
£¸ë
 = 
¥ev
->secret;

344  
NGX_CONF_OK
;

345 
	}
}

348 
ngx_öt_t


349 
	$ngx_hâp_£cuª_lök_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

351 
ngx_hâp_v¨übÀ_t
 *
v¨
;

353 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_«me
, 0);

354 i‡(
v¨
 =
NULL
) {

355  
NGX_ERROR
;

358 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_v¨übÀ
;

360 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_£cuª_lök_expúes_«me
, 0);

361 i‡(
v¨
 =
NULL
) {

362  
NGX_ERROR
;

365 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_£cuª_lök_expúes_v¨übÀ
;

367  
NGX_OK
;

368 
	}
}

	@src/http/modules/ngx_http_split_clients_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
uöt32_t
 
	m≥r˚¡
;

15 
ngx_hâp_v¨übÀ_vÆue_t
 
	mvÆue
;

16 } 
	tngx_hâp_•lô_˛õ¡s_∑π_t
;

20 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

21 
ngx_¨øy_t
 
	m∑πs
;

22 } 
	tngx_hâp_•lô_˛õ¡s_˘x_t
;

25 *
ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

26 *
c⁄f
);

27 *
ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

28 *
c⁄f
);

30 
ngx_comm™d_t
 
	gngx_hâp_•lô_˛õ¡s_comm™ds
[] = {

32 { 
ngx_°rög
("split_clients"),

33 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE2
,

34 
ngx_c⁄f_•lô_˛õ¡s_block
,

35 
NGX_HTTP_MAIN_CONF_OFFSET
,

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ_˘x
 = {

44 
NULL
,

45 
NULL
,

47 
NULL
,

48 
NULL
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL


58 
ngx_moduÀ_t
 
	gngx_hâp_•lô_˛õ¡s_moduÀ
 = {

59 
NGX_MODULE_V1
,

60 &
ngx_hâp_•lô_˛õ¡s_moduÀ_˘x
,

61 
ngx_hâp_•lô_˛õ¡s_comm™ds
,

62 
NGX_HTTP_MODULE
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NGX_MODULE_V1_PADDING


74 
ngx_öt_t


75 
	$ngx_hâp_•lô_˛õ¡s_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

78 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
 = (ngx_hâp_•lô_˛õ¡s_˘x_à*Ë
d©a
;

80 
uöt32_t
 
hash
;

81 
ngx_°r_t
 
vÆ
;

82 
ngx_uöt_t
 
i
;

83 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

85 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

87 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
˘x
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

88  
NGX_OK
;

91 
hash
 = 
	`ngx_murmur_hash2
(
vÆ
.
d©a
, vÆ.
Àn
);

93 
∑π
 = 
˘x
->
∑πs
.
ñts
;

95 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

97 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

98 "hâ∞•lô: %uD %uD", 
hash
, 
∑π
[
i
].
≥r˚¡
);

100 i‡(
hash
 < 
∑π
[
i
].
≥r˚¡
 ||Öart[i].percent == 0) {

101 *
v
 = 
∑π
[
i
].
vÆue
;

102  
NGX_OK
;

106  
NGX_OK
;

107 
	}
}

111 
	$ngx_c⁄f_•lô_˛õ¡s_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

113 *
rv
;

114 
uöt32_t
 
sum
, 
œ°
;

115 
ngx_°r_t
 *
vÆue
, 
«me
;

116 
ngx_uöt_t
 
i
;

117 
ngx_c⁄f_t
 
ßve
;

118 
ngx_hâp_v¨übÀ_t
 *
v¨
;

119 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

120 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

121 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

123 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•lô_˛õ¡s_˘x_t
));

124 i‡(
˘x
 =
NULL
) {

125  
NGX_CONF_ERROR
;

128 
vÆue
 = 
cf
->
¨gs
->
ñts
;

130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

132 
ccv
.
cf
 = cf;

133 
ccv
.
vÆue
 = &value[1];

134 
ccv
.
com∂ex_vÆue
 = &
˘x
->
vÆue
;

136 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

137  
NGX_CONF_ERROR
;

140 
«me
 = 
vÆue
[2];

142 i‡(
«me
.
d©a
[0] != '$') {

143 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

144 "övÆid v¨übÀÇamê\"%V\"", &
«me
);

145  
NGX_CONF_ERROR
;

148 
«me
.
Àn
--;

149 
«me
.
d©a
++;

151 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

152 i‡(
v¨
 =
NULL
) {

153  
NGX_CONF_ERROR
;

156 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s_v¨übÀ
;

157 
v¨
->
d©a
 = (
uöçå_t
Ë
˘x
;

159 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑πs
, 
cf
->
poﬁ
, 2,

160 (
ngx_hâp_•lô_˛õ¡s_∑π_t
))

161 !
NGX_OK
)

163  
NGX_CONF_ERROR
;

166 
ßve
 = *
cf
;

167 
cf
->
˘x
 = ctx;

168 
cf
->
h™dÀr
 = 
ngx_hâp_•lô_˛õ¡s
;

169 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

171 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

173 *
cf
 = 
ßve
;

175 i‡(
rv
 !
NGX_CONF_OK
) {

176  
rv
;

179 
sum
 = 0;

180 
œ°
 = 0;

181 
∑π
 = 
˘x
->
∑πs
.
ñts
;

183 
i
 = 0; i < 
˘x
->
∑πs
.
√…s
; i++) {

184 
sum
 = 
∑π
[
i
].
≥r˚¡
 ? sum +Öart[i].percent : 10000;

185 i‡(
sum
 > 10000) {

186 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

188  
NGX_CONF_ERROR
;

191 i‡(
∑π
[
i
].
≥r˚¡
) {

192 
œ°
 +
∑π
[
i
].
≥r˚¡
 * (
uöt64_t
) 0xffffffff / 10000;

193 
∑π
[
i
].
≥r˚¡
 = 
œ°
;

197  
rv
;

198 
	}
}

202 
	$ngx_hâp_•lô_˛õ¡s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

204 
ngx_öt_t
 
n
;

205 
ngx_°r_t
 *
vÆue
;

206 
ngx_hâp_•lô_˛õ¡s_˘x_t
 *
˘x
;

207 
ngx_hâp_•lô_˛õ¡s_∑π_t
 *
∑π
;

209 
˘x
 = 
cf
->ctx;

210 
vÆue
 = 
cf
->
¨gs
->
ñts
;

212 
∑π
 = 
	`ngx_¨øy_push
(&
˘x
->
∑πs
);

213 i‡(
∑π
 =
NULL
) {

214  
NGX_CONF_ERROR
;

217 i‡(
vÆue
[0].
Àn
 =1 && vÆue[0].
d©a
[0] == '*') {

218 
∑π
->
≥r˚¡
 = 0;

221 i‡(
vÆue
[0].
Àn
 =0 || vÆue[0].
d©a
[value[0].len - 1] != '%') {

222 
övÆid
;

225 
n
 = 
	`ngx_©oÂ
(
vÆue
[0].
d©a
, vÆue[0].
Àn
 - 1, 2);

226 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

227 
övÆid
;

230 
∑π
->
≥r˚¡
 = (
uöt32_t
Ë
n
;

233 
∑π
->
vÆue
.
Àn
 = value[1].len;

234 
∑π
->
vÆue
.
vÆid
 = 1;

235 
∑π
->
vÆue
.
no_ˇchóbÀ
 = 0;

236 
∑π
->
vÆue
.
nŸ_found
 = 0;

237 
∑π
->
vÆue
.
d©a
 = value[1].data;

239  
NGX_CONF_OK
;

241 
övÆid
:

243 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

244 "övÆidÖî˚¡ vÆuê\"%V\"", &
vÆue
[0]);

245  
NGX_CONF_ERROR
;

246 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	#NGX_HTTP_SSI_ERROR
 1

	)

14 
	#NGX_HTTP_SSI_DATE_LEN
 2048

	)

16 
	#NGX_HTTP_SSI_ADD_PREFIX
 1

	)

17 
	#NGX_HTTP_SSI_ADD_ZERO
 2

	)

21 
ngx_Êag_t
 
	míabÀ
;

22 
ngx_Êag_t
 
	msûít_îr‹s
;

23 
ngx_Êag_t
 
	mign‹e_ªcy˛ed_buf„rs
;

25 
ngx_hash_t
 
	mty≥s
;

27 
size_t
 
	mmö_fûe_chunk
;

28 
size_t
 
	mvÆue_Àn
;

30 
ngx_¨øy_t
 *
	mty≥s_keys
;

31 } 
	tngx_hâp_ssi_loc_c⁄f_t
;

35 
ngx_°r_t
 
	m«me
;

36 
ngx_uöt_t
 
	mkey
;

37 
ngx_°r_t
 
	mvÆue
;

38 } 
	tngx_hâp_ssi_v¨_t
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_chaö_t
 *
	mbufs
;

44 
ngx_uöt_t
 
	mcou¡
;

45 } 
	tngx_hâp_ssi_block_t
;

49 
	mssi_°¨t_°©e
 = 0,

50 
	mssi_èg_°©e
,

51 
	mssi_commít0_°©e
,

52 
	mssi_commít1_°©e
,

53 
	mssi_sh¨p_°©e
,

54 
	mssi_¥ecomm™d_°©e
,

55 
	mssi_comm™d_°©e
,

56 
	mssi_¥ï¨am_°©e
,

57 
	mssi_∑øm_°©e
,

58 
	mssi_¥ìquÆ_°©e
,

59 
	mssi_¥evÆue_°©e
,

60 
	mssi_doubÀ_quŸed_vÆue_°©e
,

61 
	mssi_quŸed_vÆue_°©e
,

62 
	mssi_quŸed_symbﬁ_°©e
,

63 
	mssi_po°∑øm_°©e
,

64 
	mssi_commít_íd0_°©e
,

65 
	mssi_commít_íd1_°©e
,

66 
	mssi_îr‹_°©e
,

67 
	mssi_îr‹_íd0_°©e
,

68 
	mssi_îr‹_íd1_°©e


69 } 
	tngx_hâp_ssi_°©e_e
;

72 
ngx_öt_t
 
ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

73 
ngx_hâp_ssi_˘x_t
 *
˘x
);

74 
ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_ssi_˘x_t
 *
˘x
);

76 
ngx_öt_t
 
ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_ssi_˘x_t
 *
˘x
);

78 
ngx_°r_t
 *
ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

80 
ngx_öt_t
 
ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
,

81 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
);

82 
ngx_öt_t
 
ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
,

83 
ngx_°r_t
 *
∑âîn
,Çgx_°r_à*
°r
);

85 
ngx_öt_t
 
ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

87 
ngx_öt_t
 
ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

88 
ngx_öt_t
 
rc
);

89 
ngx_öt_t
 
ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
,

90 
ngx_öt_t
 
rc
);

91 
ngx_öt_t
 
ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

93 
ngx_öt_t
 
ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

95 
ngx_öt_t
 
ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

97 
ngx_öt_t
 
ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

99 
ngx_öt_t
 
ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

101 
ngx_öt_t
 
ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

103 
ngx_öt_t
 
ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

105 
ngx_öt_t
 
ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_hâp_ssi_˘x_t
 *
˘x
, 
ngx_°r_t
 **
∑øms
);

108 
ngx_öt_t
 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
);

111 
ngx_öt_t
 
ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

112 *
ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

113 *
ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

114 *
ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

115 *
ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

116 *
∑ª¡
, *
chûd
);

117 
ngx_öt_t
 
ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

120 
ngx_comm™d_t
 
	gngx_hâp_ssi_fûãr_comm™ds
[] = {

122 { 
ngx_°rög
("ssi"),

123 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


124 |
NGX_CONF_FLAG
,

125 
ngx_c⁄f_£t_Êag_¶Ÿ
,

126 
NGX_HTTP_LOC_CONF_OFFSET
,

127 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
íabÀ
),

128 
NULL
 },

130 { 
ngx_°rög
("ssi_silent_errors"),

131 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

132 
ngx_c⁄f_£t_Êag_¶Ÿ
,

133 
NGX_HTTP_LOC_CONF_OFFSET
,

134 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
sûít_îr‹s
),

135 
NULL
 },

137 { 
ngx_°rög
("ssi_ignore_recycled_buffers"),

138 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

139 
ngx_c⁄f_£t_Êag_¶Ÿ
,

140 
NGX_HTTP_LOC_CONF_OFFSET
,

141 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ign‹e_ªcy˛ed_buf„rs
),

142 
NULL
 },

144 { 
ngx_°rög
("ssi_min_file_chunk"),

145 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

146 
ngx_c⁄f_£t_size_¶Ÿ
,

147 
NGX_HTTP_LOC_CONF_OFFSET
,

148 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
mö_fûe_chunk
),

149 
NULL
 },

151 { 
ngx_°rög
("ssi_value_length"),

152 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

153 
ngx_c⁄f_£t_size_¶Ÿ
,

154 
NGX_HTTP_LOC_CONF_OFFSET
,

155 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
vÆue_Àn
),

156 
NULL
 },

158 { 
ngx_°rög
("ssi_types"),

159 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

160 
ngx_hâp_ty≥s_¶Ÿ
,

161 
NGX_HTTP_LOC_CONF_OFFSET
,

162 
off£tof
(
ngx_hâp_ssi_loc_c⁄f_t
, 
ty≥s_keys
),

163 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

165 
ngx_nuŒ_comm™d


170 
ngx_hâp_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ_˘x
 = {

171 
ngx_hâp_ssi_¥ec⁄figuøti⁄
,

172 
ngx_hâp_ssi_fûãr_öô
,

174 
ngx_hâp_ssi_¸óã_maö_c⁄f
,

175 
ngx_hâp_ssi_öô_maö_c⁄f
,

177 
NULL
,

178 
NULL
,

180 
ngx_hâp_ssi_¸óã_loc_c⁄f
,

181 
ngx_hâp_ssi_mîge_loc_c⁄f


185 
ngx_moduÀ_t
 
	gngx_hâp_ssi_fûãr_moduÀ
 = {

186 
NGX_MODULE_V1
,

187 &
ngx_hâp_ssi_fûãr_moduÀ_˘x
,

188 
ngx_hâp_ssi_fûãr_comm™ds
,

189 
NGX_HTTP_MODULE
,

190 
NULL
,

191 
NULL
,

192 
NULL
,

193 
NULL
,

194 
NULL
,

195 
NULL
,

196 
NULL
,

197 
NGX_MODULE_V1_PADDING


201 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

202 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

205 
u_ch¨
 
	gngx_hâp_ssi_°rög
[] = "<!--";

207 
ngx_°r_t
 
	gngx_hâp_ssi_n⁄e
 = 
ngx_°rög
("(none)");

208 
ngx_°r_t
 
	gngx_hâp_ssi_nuŒ_°rög
 = 
ngx_nuŒ_°rög
;

211 
	#NGX_HTTP_SSI_INCLUDE_VIRTUAL
 0

	)

212 
	#NGX_HTTP_SSI_INCLUDE_FILE
 1

	)

213 
	#NGX_HTTP_SSI_INCLUDE_WAIT
 2

	)

214 
	#NGX_HTTP_SSI_INCLUDE_SET
 3

	)

215 
	#NGX_HTTP_SSI_INCLUDE_STUB
 4

	)

217 
	#NGX_HTTP_SSI_ECHO_VAR
 0

	)

218 
	#NGX_HTTP_SSI_ECHO_DEFAULT
 1

	)

219 
	#NGX_HTTP_SSI_ECHO_ENCODING
 2

	)

221 
	#NGX_HTTP_SSI_CONFIG_ERRMSG
 0

	)

222 
	#NGX_HTTP_SSI_CONFIG_TIMEFMT
 1

	)

224 
	#NGX_HTTP_SSI_SET_VAR
 0

	)

225 
	#NGX_HTTP_SSI_SET_VALUE
 1

	)

227 
	#NGX_HTTP_SSI_IF_EXPR
 0

	)

229 
	#NGX_HTTP_SSI_BLOCK_NAME
 0

	)

232 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_ö˛ude_∑øms
[] = {

233 { 
ngx_°rög
("vútuÆ"), 
NGX_HTTP_SSI_INCLUDE_VIRTUAL
, 0, 0 },

234 { 
ngx_°rög
("fûe"), 
NGX_HTTP_SSI_INCLUDE_FILE
, 0, 0 },

235 { 
ngx_°rög
("waô"), 
NGX_HTTP_SSI_INCLUDE_WAIT
, 0, 0 },

236 { 
ngx_°rög
("£t"), 
NGX_HTTP_SSI_INCLUDE_SET
, 0, 0 },

237 { 
ngx_°rög
("°ub"), 
NGX_HTTP_SSI_INCLUDE_STUB
, 0, 0 },

238 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

242 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_echo_∑øms
[] = {

243 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_ECHO_VAR
, 1, 0 },

244 { 
ngx_°rög
("deÁu…"), 
NGX_HTTP_SSI_ECHO_DEFAULT
, 0, 0 },

245 { 
ngx_°rög
("ícodög"), 
NGX_HTTP_SSI_ECHO_ENCODING
, 0, 0 },

246 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

250 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_c⁄fig_∑øms
[] = {

251 { 
ngx_°rög
("îrmsg"), 
NGX_HTTP_SSI_CONFIG_ERRMSG
, 0, 0 },

252 { 
ngx_°rög
("timefmt"), 
NGX_HTTP_SSI_CONFIG_TIMEFMT
, 0, 0 },

253 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

257 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_£t_∑øms
[] = {

258 { 
ngx_°rög
("v¨"), 
NGX_HTTP_SSI_SET_VAR
, 1, 0 },

259 { 
ngx_°rög
("vÆue"), 
NGX_HTTP_SSI_SET_VALUE
, 1, 0 },

260 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

264 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_if_∑øms
[] = {

265 { 
ngx_°rög
("ex¥"), 
NGX_HTTP_SSI_IF_EXPR
, 1, 0 },

266 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

270 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_block_∑øms
[] = {

271 { 
ngx_°rög
("«me"), 
NGX_HTTP_SSI_BLOCK_NAME
, 1, 0 },

272 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

276 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_ssi_no_∑øms
[] = {

277 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

281 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_ssi_comm™ds
[] = {

282 { 
ngx_°rög
("ö˛ude"), 
ngx_hâp_ssi_ö˛ude
,

283 
ngx_hâp_ssi_ö˛ude_∑øms
, 0, 0, 1 },

284 { 
ngx_°rög
("echo"), 
ngx_hâp_ssi_echo
,

285 
ngx_hâp_ssi_echo_∑øms
, 0, 0, 0 },

286 { 
ngx_°rög
("c⁄fig"), 
ngx_hâp_ssi_c⁄fig
,

287 
ngx_hâp_ssi_c⁄fig_∑øms
, 0, 0, 0 },

288 { 
ngx_°rög
("£t"), 
ngx_hâp_ssi_£t
, 
ngx_hâp_ssi_£t_∑øms
, 0, 0, 0 },

290 { 
ngx_°rög
("if"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
, 0, 0, 0 },

291 { 
ngx_°rög
("ñif"), 
ngx_hâp_ssi_if
, 
ngx_hâp_ssi_if_∑øms
,

292 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

293 { 
ngx_°rög
("ñ£"), 
ngx_hâp_ssi_ñ£
, 
ngx_hâp_ssi_no_∑øms
,

294 
NGX_HTTP_SSI_COND_IF
, 0, 0 },

295 { 
ngx_°rög
("ídif"), 
ngx_hâp_ssi_ídif
, 
ngx_hâp_ssi_no_∑øms
,

296 
NGX_HTTP_SSI_COND_ELSE
, 0, 0 },

298 { 
ngx_°rög
("block"), 
ngx_hâp_ssi_block
,

299 
ngx_hâp_ssi_block_∑øms
, 0, 0, 0 },

300 { 
ngx_°rög
("ídblock"), 
ngx_hâp_ssi_ídblock
,

301 
ngx_hâp_ssi_no_∑øms
, 0, 1, 0 },

303 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

307 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_ssi_v¨s
[] = {

309 { 
ngx_°rög
("d©e_loˇl"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 0,

310 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

312 { 
ngx_°rög
("d©e_gmt"), 
NULL
, 
ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
, 1,

313 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

315 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

320 
ngx_öt_t


321 
	$ngx_hâp_ssi_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

323 
ngx_hâp_ssi_˘x_t
 *
˘x
;

324 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

326 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

328 i‡(!
¶cf
->
íabÀ


329 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

330 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

332  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

335 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ssi_˘x_t
));

336 i‡(
˘x
 =
NULL
) {

337  
NGX_ERROR
;

340 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_ssi_fûãr_moduÀ
);

343 
˘x
->
vÆue_Àn
 = 
¶cf
->value_len;

344 
˘x
->
œ°_out
 = &˘x->
out
;

346 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

347 
˘x
->
ouçut
 = 1;

349 
˘x
->
∑øms
.
ñts
 = ctx->
∑øms_¨øy
;

350 
˘x
->
∑øms
.
size
 = (
ngx_èbÀ_ñt_t
);

351 
˘x
->
∑øms
.
«Œoc
 = 
NGX_HTTP_SSI_PARAMS_N
;

352 
˘x
->
∑øms
.
poﬁ
 = 
r
->pool;

354 
	`ngx_°r_£t
(&
˘x
->
timefmt
, "%A, %d-%b-%Y %H:%M:%S %Z");

355 
	`ngx_°r_£t
(&
˘x
->
îrmsg
,

358 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

360 i‡(
r
 =r->
maö
) {

361 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

362 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

363 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

364 
	`ngx_hâp_˛ór_ëag
(
r
);

367  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

368 
	}
}

371 
ngx_öt_t


372 
	$ngx_hâp_ssi_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

374 
size_t
 
Àn
;

375 
ngx_öt_t
 
rc
;

376 
ngx_buf_t
 *
b
;

377 
ngx_uöt_t
 
i
, 
ödex
;

378 
ngx_chaö_t
 *
˛
, **
Œ
;

379 
ngx_èbÀ_ñt_t
 *
∑øm
;

380 
ngx_hâp_ssi_˘x_t
 *
˘x
, *
m˘x
;

381 
ngx_hâp_ssi_block_t
 *
bl
;

382 
ngx_hâp_ssi_∑øm_t
 *
¥m
;

383 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

384 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

385 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

386 
ngx_°r_t
 *
∑øms
[
NGX_HTTP_SSI_MAX_PARAMS
 + 1];

388 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

390 i‡(
˘x
 =
NULL


391 || (
ö
 =
NULL


392 && 
˘x
->
buf
 =
NULL


393 && 
˘x
->
ö
 =
NULL


394 && 
˘x
->
busy
 =
NULL
))

396  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

401 i‡(
ö
) {

402 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

403  
NGX_ERROR
;

407 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

408 "hâ∞ssòfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

410 i‡(
˘x
->
waô
) {

412 i‡(
r
 !r->
c⁄√˘i⁄
->
d©a
) {

413 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

415 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

417  
NGX_AGAIN
;

420 i‡(
˘x
->
waô
->
d⁄e
) {

421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

423 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

425 
˘x
->
waô
 = 
NULL
;

428 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

430 &
˘x
->
waô
->
uri
, &˘x->waô->
¨gs
);

432  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
NULL
);

436 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

438 
˘x
->
ö
 || ctx->
buf
) {

440 i‡(
˘x
->
buf
 =
NULL
) {

441 
˘x
->
buf
 = ctx->
ö
->buf;

442 
˘x
->
ö
 = ctx->ö->
√xt
;

443 
˘x
->
pos
 = ctx->
buf
->pos;

446 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

447 
˘x
->
c›y_°¨t
 = ctx->
pos
;

448 
˘x
->
c›y_íd
 = ctx->
pos
;

451 
b
 = 
NULL
;

453 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

455 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

456 "ßved: %d sèã: %d", 
˘x
->
ßved
, ctx->
°©e
);

458 
rc
 = 
	`ngx_hâp_ssi_∑r£
(
r
, 
˘x
);

460 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

462 
rc
, 
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

464 i‡(
rc
 =
NGX_ERROR
) {

465  
rc
;

468 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

470 i‡(
˘x
->
ouçut
) {

472 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

473 "ßved: %d", 
˘x
->
ßved
);

475 i‡(
˘x
->
ßved
) {

477 i‡(
˘x
->
‰ì
) {

478 
˛
 = 
˘x
->
‰ì
;

479 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

480 
b
 = 
˛
->
buf
;

481 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

484 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

485 i‡(
b
 =
NULL
) {

486  
NGX_ERROR
;

489 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

490 i‡(
˛
 =
NULL
) {

491  
NGX_ERROR
;

494 
˛
->
buf
 = 
b
;

497 
b
->
mem‹y
 = 1;

498 
b
->
pos
 = 
ngx_hâp_ssi_°rög
;

499 
b
->
œ°
 = 
ngx_hâp_ssi_°rög
 + 
˘x
->
ßved
;

501 *
˘x
->
œ°_out
 = 
˛
;

502 
˘x
->
œ°_out
 = &
˛
->
√xt
;

504 
˘x
->
ßved
 = 0;

507 i‡(
˘x
->
‰ì
) {

508 
˛
 = 
˘x
->
‰ì
;

509 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

510 
b
 = 
˛
->
buf
;

513 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

514 i‡(
b
 =
NULL
) {

515  
NGX_ERROR
;

518 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

519 i‡(
˛
 =
NULL
) {

520  
NGX_ERROR
;

523 
˛
->
buf
 = 
b
;

526 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

528 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

529 
b
->
œ°
 = 
˘x
->
c›y_íd
;

530 
b
->
shadow
 = 
NULL
;

531 
b
->
œ°_buf
 = 0;

532 
b
->
ªcy˛ed
 = 0;

534 i‡(
b
->
ö_fûe
) {

535 i‡(
¶cf
->
mö_fûe_chunk
 < (
size_t
Ë(
b
->
œ°
 - b->
pos
))

537 
b
->
fûe_œ°
 = b->
fûe_pos


538 + (
b
->
œ°
 - 
˘x
->
buf
->
pos
);

539 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

542 
b
->
ö_fûe
 = 0;

546 
˛
->
√xt
 = 
NULL
;

547 *
˘x
->
œ°_out
 = 
˛
;

548 
˘x
->
œ°_out
 = &
˛
->
√xt
;

551 i‡(
˘x
->
block


552 && 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
))

554 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
,

555 
˘x
->
ßved
 + (˘x->
c›y_íd
 - ctx->
c›y_°¨t
));

557 i‡(
b
 =
NULL
) {

558  
NGX_ERROR
;

561 i‡(
˘x
->
ßved
) {

562 
b
->
œ°
 = 
	`ngx_˝ymem
(b->
pos
, 
ngx_hâp_ssi_°rög
,

563 
˘x
->
ßved
);

566 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
c›y_°¨t
,

567 
˘x
->
c›y_íd
 - ctx->
c›y_°¨t
);

569 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

570 i‡(
˛
 =
NULL
) {

571  
NGX_ERROR
;

574 
˛
->
buf
 = 
b
;

575 
˛
->
√xt
 = 
NULL
;

577 
b
 = 
NULL
;

579 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

580 
ngx_hâp_ssi_fûãr_moduÀ
);

581 
bl
 = 
m˘x
->
blocks
->
ñts
;

582 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

583 *
Œ
;

584 
Œ
 = &(*Œ)->
√xt
)

589 *
Œ
 = 
˛
;

592 
˘x
->
ßved
 = 0;

596 i‡(
˘x
->
°©e
 =
ssi_°¨t_°©e
) {

597 
˘x
->
c›y_°¨t
 = ctx->
pos
;

598 
˘x
->
c›y_íd
 = ctx->
pos
;

601 
˘x
->
c›y_°¨t
 = 
NULL
;

602 
˘x
->
c›y_íd
 = 
NULL
;

605 i‡(
rc
 =
NGX_AGAIN
) {

610 
b
 = 
NULL
;

612 i‡(
rc
 =
NGX_OK
) {

614 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
,

615 
ngx_hâp_ssi_fûãr_moduÀ
);

617 
cmd
 = 
	`ngx_hash_föd
(&
smcf
->
hash
, 
˘x
->
key
, ctx->
comm™d
.
d©a
,

618 
˘x
->
comm™d
.
Àn
);

620 i‡(
cmd
 =
NULL
) {

621 i‡(
˘x
->
ouçut
) {

622 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

624 &
˘x
->
comm™d
);

625 
ssi_îr‹
;

631 i‡(!
˘x
->
ouçut
 && !
cmd
->
block
) {

633 i‡(
˘x
->
block
) {

637 
Àn
 = 5 + 
˘x
->
comm™d
.len + 4;

639 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

640 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

641 
Àn
 +1 + 
∑øm
[
i
].
key
.len + 2

642 + 
∑øm
[
i
].
vÆue
.
Àn
 + 1;

645 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

647 i‡(
b
 =
NULL
) {

648  
NGX_ERROR
;

651 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

652 i‡(
˛
 =
NULL
) {

653  
NGX_ERROR
;

656 
˛
->
buf
 = 
b
;

657 
˛
->
√xt
 = 
NULL
;

659 *
b
->
œ°
++ = '<';

660 *
b
->
œ°
++ = '!';

661 *
b
->
œ°
++ = '-';

662 *
b
->
œ°
++ = '-';

663 *
b
->
œ°
++ = '#';

665 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
˘x
->
comm™d
.
d©a
,

666 
˘x
->
comm™d
.
Àn
);

668 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

669 *
b
->
œ°
++ = ' ';

670 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
key
.
d©a
,

671 
∑øm
[
i
].
key
.
Àn
);

672 *
b
->
œ°
++ = '=';

673 *
b
->
œ°
++ = '"';

674 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
∑øm
[
i
].
vÆue
.
d©a
,

675 
∑øm
[
i
].
vÆue
.
Àn
);

676 *
b
->
œ°
++ = '"';

679 *
b
->
œ°
++ = ' ';

680 *
b
->
œ°
++ = '-';

681 *
b
->
œ°
++ = '-';

682 *
b
->
œ°
++ = '>';

684 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
,

685 
ngx_hâp_ssi_fûãr_moduÀ
);

686 
bl
 = 
m˘x
->
blocks
->
ñts
;

687 
Œ
 = &
bl
[
m˘x
->
blocks
->
√…s
 - 1].
bufs
;

688 *
Œ
;

689 
Œ
 = &(*Œ)->
√xt
)

694 *
Œ
 = 
˛
;

696 
b
 = 
NULL
;

701 i‡(
cmd
->
c⁄dôi⁄Æ
 == 0) {

706 i‡(
cmd
->
c⁄dôi⁄Æ


707 && (
˘x
->
c⁄dôi⁄Æ
 == 0

708 || 
˘x
->
c⁄dôi⁄Æ
 > 
cmd
->conditional))

710 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

712 &
˘x
->
comm™d
);

713 
ssi_îr‹
;

716 i‡(
˘x
->
∑øms
.
√…s
 > 
NGX_HTTP_SSI_MAX_PARAMS
) {

717 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

719 &
˘x
->
comm™d
);

720 
ssi_îr‹
;

723 
	`ngx_memzîo
(
∑øms
,

724 (
NGX_HTTP_SSI_MAX_PARAMS
 + 1Ë* (
ngx_°r_t
 *));

726 
∑øm
 = 
˘x
->
∑øms
.
ñts
;

728 
i
 = 0; i < 
˘x
->
∑øms
.
√…s
; i++) {

730 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

732 i‡(
∑øm
[
i
].
key
.
Àn
 !
¥m
->
«me
.len

733 || 
	`ngx_°∫cmp
(
∑øm
[
i
].
key
.
d©a
, 
¥m
->
«me
.data,

734 
¥m
->
«me
.
Àn
) != 0)

739 i‡(!
¥m
->
mu…ùÀ
) {

740 i‡(
∑øms
[
¥m
->
ödex
]) {

741 
	`ngx_log_îr‹
(
NGX_LOG_ERR
,

742 
r
->
c⁄√˘i⁄
->
log
, 0,

745 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

747 
ssi_îr‹
;

750 
∑øms
[
¥m
->
ödex
] = &
∑øm
[
i
].
vÆue
;

755 
ödex
 = 
¥m
->ödex; 
∑øms
[index]; index++) {

759 
∑øms
[
ödex
] = &
∑øm
[
i
].
vÆue
;

764 i‡(
¥m
->
«me
.
Àn
 == 0) {

765 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

768 &
∑øm
[
i
].
key
, &
˘x
->
comm™d
);

770 
ssi_îr‹
;

774 
¥m
 = 
cmd
->
∑øms
;Örm->
«me
.
Àn
;Örm++) {

775 i‡(
¥m
->
m™d©‹y
 && 
∑øms
[¥m->
ödex
] == 0) {

776 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

779 &
¥m
->
«me
, &
˘x
->
comm™d
);

781 
ssi_îr‹
;

785 i‡(
cmd
->
Êush
 && 
˘x
->
out
) {

787 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

790 i‡(
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

791  
NGX_ERROR
;

795 
rc
 = 
cmd
->
	`h™dÀr
(
r
, 
˘x
, 
∑øms
);

797 i‡(
rc
 =
NGX_OK
) {

801 i‡(
rc
 =
NGX_DONE
 ||Ñ¯=
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

802 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

803  
rc
;

810 
ssi_îr‹
:

812 i‡(
¶cf
->
sûít_îr‹s
) {

816 i‡(
˘x
->
‰ì
) {

817 
˛
 = 
˘x
->
‰ì
;

818 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

819 
b
 = 
˛
->
buf
;

820 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

823 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

824 i‡(
b
 =
NULL
) {

825  
NGX_ERROR
;

828 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

829 i‡(
˛
 =
NULL
) {

830  
NGX_ERROR
;

833 
˛
->
buf
 = 
b
;

836 
b
->
mem‹y
 = 1;

837 
b
->
pos
 = 
˘x
->
îrmsg
.
d©a
;

838 
b
->
œ°
 = 
˘x
->
îrmsg
.
d©a
 + ctx->îrmsg.
Àn
;

840 
˛
->
√xt
 = 
NULL
;

841 *
˘x
->
œ°_out
 = 
˛
;

842 
˘x
->
œ°_out
 = &
˛
->
√xt
;

847 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

848 i‡(
b
 =
NULL
) {

849 i‡(
˘x
->
‰ì
) {

850 
˛
 = 
˘x
->
‰ì
;

851 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

852 
b
 = 
˛
->
buf
;

853 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

856 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

857 i‡(
b
 =
NULL
) {

858  
NGX_ERROR
;

861 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

862 i‡(
˛
 =
NULL
) {

863  
NGX_ERROR
;

866 
˛
->
buf
 = 
b
;

869 
b
->
sync
 = 1;

871 
˛
->
√xt
 = 
NULL
;

872 *
˘x
->
œ°_out
 = 
˛
;

873 
˘x
->
œ°_out
 = &
˛
->
√xt
;

876 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

877 
b
->
shadow
 = 
˘x
->
buf
;

879 i‡(
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 == 0) {

880 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

884 
˘x
->
buf
 = 
NULL
;

886 
˘x
->
ßved
 = ctx->
looked
;

889 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

890  
NGX_OK
;

893  
	`ngx_hâp_ssi_ouçut
(
r
, 
˘x
);

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_hâp_ssi_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

900 
ngx_öt_t
 
rc
;

901 
ngx_buf_t
 *
b
;

902 
ngx_chaö_t
 *
˛
;

905 
b
 = 
NULL
;

906 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

907 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

908 "ssòout: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

909 i‡(
˛
->
buf
 =
b
) {

910 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

912 
	`ngx_debug_poöt
();

913  
NGX_ERROR
;

915 
b
 = 
˛
->
buf
;

919 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

921 i‡(
˘x
->
busy
 =
NULL
) {

922 
˘x
->
busy
 = ctx->
out
;

925 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

926 
˛
->
√xt
 = 
˘x
->
out
;

929 
˘x
->
out
 = 
NULL
;

930 
˘x
->
œ°_out
 = &˘x->
out
;

932 
˘x
->
busy
) {

934 
˛
 = 
˘x
->
busy
;

935 
b
 = 
˛
->
buf
;

937 i‡(
	`ngx_buf_size
(
b
) != 0) {

941 i‡(
b
->
shadow
) {

942 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

945 
˘x
->
busy
 = 
˛
->
√xt
;

947 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

950 
˛
->
√xt
 = 
˘x
->
‰ì
;

951 
˘x
->
‰ì
 = 
˛
;

955 
	`ngx_hâp_ssi_buf„ªd
(
r
, 
˘x
);

957  
rc
;

958 
	}
}

962 
	$ngx_hâp_ssi_buf„ªd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

964 i‡(
˘x
->
ö
 || ctx->
buf
) {

965 
r
->
buf„ªd
 |
NGX_HTTP_SSI_BUFFERED
;

968 
r
->
buf„ªd
 &~
NGX_HTTP_SSI_BUFFERED
;

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_hâp_ssi_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
)

976 
u_ch¨
 *
p
, *
vÆue
, *
œ°
, *
c›y_íd
, 
ch
;

977 
size_t
 
looked
;

978 
ngx_hâp_ssi_°©e_e
 
°©e
;

980 
°©e
 = 
˘x
->state;

981 
looked
 = 
˘x
->looked;

982 
œ°
 = 
˘x
->
buf
->last;

983 
c›y_íd
 = 
˘x
->copy_end;

985 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

987 
ch
 = *
p
;

989 i‡(
°©e
 =
ssi_°¨t_°©e
) {

994 i‡(
ch
 == '<') {

995 
c›y_íd
 = 
p
;

996 
looked
 = 1;

997 
°©e
 = 
ssi_èg_°©e
;

999 
èg_°¨ãd
;

1002 i‡(++
p
 =
œ°
) {

1006 
ch
 = *
p
;

1009 
˘x
->
°©e
 = state;

1010 
˘x
->
pos
 = 
p
;

1011 
˘x
->
looked
 =Üooked;

1012 
˘x
->
c›y_íd
 = 
p
;

1014 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

1015 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1018  
NGX_AGAIN
;

1020 
èg_°¨ãd
:

1025 
°©e
) {

1027 
ssi_°¨t_°©e
:

1031 
ssi_èg_°©e
:

1032 
ch
) {

1034 
looked
 = 2;

1035 
°©e
 = 
ssi_commít0_°©e
;

1039 
c›y_íd
 = 
p
;

1043 
c›y_íd
 = 
p
;

1044 
looked
 = 0;

1045 
°©e
 = 
ssi_°¨t_°©e
;

1051 
ssi_commít0_°©e
:

1052 
ch
) {

1054 
looked
 = 3;

1055 
°©e
 = 
ssi_commít1_°©e
;

1059 
c›y_íd
 = 
p
;

1060 
looked
 = 1;

1061 
°©e
 = 
ssi_èg_°©e
;

1065 
c›y_íd
 = 
p
;

1066 
looked
 = 0;

1067 
°©e
 = 
ssi_°¨t_°©e
;

1073 
ssi_commít1_°©e
:

1074 
ch
) {

1076 
looked
 = 4;

1077 
°©e
 = 
ssi_sh¨p_°©e
;

1081 
c›y_íd
 = 
p
;

1082 
looked
 = 1;

1083 
°©e
 = 
ssi_èg_°©e
;

1087 
c›y_íd
 = 
p
;

1088 
looked
 = 0;

1089 
°©e
 = 
ssi_°¨t_°©e
;

1095 
ssi_sh¨p_°©e
:

1096 
ch
) {

1098 i‡(
p
 - 
˘x
->
pos
 < 4) {

1099 
˘x
->
ßved
 = 0;

1101 
looked
 = 0;

1102 
°©e
 = 
ssi_¥ecomm™d_°©e
;

1106 
c›y_íd
 = 
p
;

1107 
looked
 = 1;

1108 
°©e
 = 
ssi_èg_°©e
;

1112 
c›y_íd
 = 
p
;

1113 
looked
 = 0;

1114 
°©e
 = 
ssi_°¨t_°©e
;

1120 
ssi_¥ecomm™d_°©e
:

1121 
ch
) {

1123 
CR
:

1124 
LF
:

1129 
˘x
->
comm™d
.
Àn
 = 1;

1130 
˘x
->
comm™d
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1131 
NGX_HTTP_SSI_COMMAND_LEN
);

1132 i‡(
˘x
->
comm™d
.
d©a
 =
NULL
) {

1133  
NGX_ERROR
;

1136 
˘x
->
comm™d
.
d©a
[0] = 
ch
;

1138 
˘x
->
key
 = 0;

1139 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1141 
˘x
->
∑øms
.
√…s
 = 0;

1143 
°©e
 = 
ssi_comm™d_°©e
;

1149 
ssi_comm™d_°©e
:

1150 
ch
) {

1152 
CR
:

1153 
LF
:

1155 
°©e
 = 
ssi_¥ï¨am_°©e
;

1159 
°©e
 = 
ssi_commít_íd0_°©e
;

1163 i‡(
˘x
->
comm™d
.
Àn
 =
NGX_HTTP_SSI_COMMAND_LEN
) {

1164 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1166 &
˘x
->
comm™d
, 
ch
);

1168 
°©e
 = 
ssi_îr‹_°©e
;

1172 
˘x
->
comm™d
.
d©a
[˘x->comm™d.
Àn
++] = 
ch
;

1173 
˘x
->
key
 = 
	`ngx_hash
(˘x->key, 
ch
);

1178 
ssi_¥ï¨am_°©e
:

1179 
ch
) {

1181 
CR
:

1182 
LF
:

1187 
°©e
 = 
ssi_commít_íd0_°©e
;

1191 
˘x
->
∑øm
 = 
	`ngx_¨øy_push
(&˘x->
∑øms
);

1192 i‡(
˘x
->
∑øm
 =
NULL
) {

1193  
NGX_ERROR
;

1196 
˘x
->
∑øm
->
key
.
Àn
 = 1;

1197 
˘x
->
∑øm
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1198 
NGX_HTTP_SSI_PARAM_LEN
);

1199 i‡(
˘x
->
∑øm
->
key
.
d©a
 =
NULL
) {

1200  
NGX_ERROR
;

1203 
˘x
->
∑øm
->
key
.
d©a
[0] = 
ch
;

1205 
˘x
->
∑øm
->
vÆue
.
Àn
 = 0;

1207 i‡(
˘x
->
vÆue_buf
 =
NULL
) {

1208 
˘x
->
∑øm
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1209 
˘x
->
vÆue_Àn
 + 1);

1210 i‡(
˘x
->
∑øm
->
vÆue
.
d©a
 =
NULL
) {

1211  
NGX_ERROR
;

1215 
˘x
->
∑øm
->
vÆue
.
d©a
 = ctx->
vÆue_buf
;

1218 
°©e
 = 
ssi_∑øm_°©e
;

1224 
ssi_∑øm_°©e
:

1225 
ch
) {

1227 
CR
:

1228 
LF
:

1230 
°©e
 = 
ssi_¥ìquÆ_°©e
;

1234 
°©e
 = 
ssi_¥evÆue_°©e
;

1238 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1240 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1241 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1243 &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1247 i‡(
˘x
->
∑øm
->
key
.
Àn
 =
NGX_HTTP_SSI_PARAM_LEN
) {

1248 
°©e
 = 
ssi_îr‹_°©e
;

1249 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1252 &
˘x
->
∑øm
->
key
, 
ch
, &˘x->
comm™d
);

1256 
˘x
->
∑øm
->
key
.
d©a
[˘x->∑øm->key.
Àn
++] = 
ch
;

1261 
ssi_¥ìquÆ_°©e
:

1262 
ch
) {

1264 
CR
:

1265 
LF
:

1270 
°©e
 = 
ssi_¥evÆue_°©e
;

1274 i‡(
ch
 == '-') {

1275 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1277 
°©e
 = 
ssi_îr‹_°©e
;

1280 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1283 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1289 
ssi_¥evÆue_°©e
:

1290 
ch
) {

1292 
CR
:

1293 
LF
:

1298 
°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1302 
°©e
 = 
ssi_quŸed_vÆue_°©e
;

1306 i‡(
ch
 == '-') {

1307 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1309 
°©e
 = 
ssi_îr‹_°©e
;

1312 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1315 
ch
, &
˘x
->
∑øm
->
key
, &˘x->
comm™d
);

1321 
ssi_doubÀ_quŸed_vÆue_°©e
:

1322 
ch
) {

1324 
°©e
 = 
ssi_po°∑øm_°©e
;

1328 
˘x
->
ßved_°©e
 = 
ssi_doubÀ_quŸed_vÆue_°©e
;

1329 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1334 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1335 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1338 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1339 &
˘x
->
comm™d
);

1340 
°©e
 = 
ssi_îr‹_°©e
;

1344 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1349 
ssi_quŸed_vÆue_°©e
:

1350 
ch
) {

1352 
°©e
 = 
ssi_po°∑øm_°©e
;

1356 
˘x
->
ßved_°©e
 = 
ssi_quŸed_vÆue_°©e
;

1357 
°©e
 = 
ssi_quŸed_symbﬁ_°©e
;

1362 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1363 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1366 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1367 &
˘x
->
comm™d
);

1368 
°©e
 = 
ssi_îr‹_°©e
;

1372 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1377 
ssi_quŸed_symbﬁ_°©e
:

1378 
°©e
 = 
˘x
->
ßved_°©e
;

1380 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 =˘x->
vÆue_Àn
) {

1381 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1384 &
˘x
->
∑øm
->
vÆue
, 
ch
, &˘x->∑øm->
key
,

1385 &
˘x
->
comm™d
);

1386 
°©e
 = 
ssi_îr‹_°©e
;

1390 
˘x
->
∑øm
->
vÆue
.
d©a
[˘x->∑øm->vÆue.
Àn
++] = 
ch
;

1394 
ssi_po°∑øm_°©e
:

1396 i‡(
˘x
->
∑øm
->
vÆue
.
Àn
 + 1 < ctx->
vÆue_Àn
 / 2) {

1397 
vÆue
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
∑øm
->vÆue.
Àn
 + 1);

1398 i‡(
vÆue
 =
NULL
) {

1399  
NGX_ERROR
;

1402 
	`ngx_mem˝y
(
vÆue
, 
˘x
->
∑øm
->vÆue.
d©a
,

1403 
˘x
->
∑øm
->
vÆue
.
Àn
);

1405 
˘x
->
vÆue_buf
 = ctx->
∑øm
->
vÆue
.
d©a
;

1406 
˘x
->
∑øm
->
vÆue
.
d©a
 = value;

1409 
˘x
->
vÆue_buf
 = 
NULL
;

1412 
ch
) {

1414 
CR
:

1415 
LF
:

1417 
°©e
 = 
ssi_¥ï¨am_°©e
;

1421 
°©e
 = 
ssi_commít_íd0_°©e
;

1425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1428 
ch
, &
˘x
->
∑øm
->
vÆue
, &˘x->∑øm->
key
,

1429 &
˘x
->
comm™d
);

1430 
°©e
 = 
ssi_îr‹_°©e
;

1436 
ssi_commít_íd0_°©e
:

1437 
ch
) {

1439 
°©e
 = 
ssi_commít_íd1_°©e
;

1443 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1445 
ch
, &
˘x
->
comm™d
);

1446 
°©e
 = 
ssi_îr‹_°©e
;

1452 
ssi_commít_íd1_°©e
:

1453 
ch
) {

1455 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1456 
˘x
->
pos
 = 
p
 + 1;

1457 
˘x
->
looked
 =Üooked;

1458 
˘x
->
c›y_íd
 = copy_end;

1460 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1461 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1464  
NGX_OK
;

1467 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1469 
ch
, &
˘x
->
comm™d
);

1470 
°©e
 = 
ssi_îr‹_°©e
;

1476 
ssi_îr‹_°©e
:

1477 
ch
) {

1479 
°©e
 = 
ssi_îr‹_íd0_°©e
;

1488 
ssi_îr‹_íd0_°©e
:

1489 
ch
) {

1491 
°©e
 = 
ssi_îr‹_íd1_°©e
;

1495 
°©e
 = 
ssi_îr‹_°©e
;

1501 
ssi_îr‹_íd1_°©e
:

1502 
ch
) {

1504 
˘x
->
°©e
 = 
ssi_°¨t_°©e
;

1505 
˘x
->
pos
 = 
p
 + 1;

1506 
˘x
->
looked
 =Üooked;

1507 
˘x
->
c›y_íd
 = copy_end;

1509 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

1510 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1513  
NGX_HTTP_SSI_ERROR
;

1516 
°©e
 = 
ssi_îr‹_°©e
;

1524 
˘x
->
°©e
 = state;

1525 
˘x
->
pos
 = 
p
;

1526 
˘x
->
looked
 =Üooked;

1528 
˘x
->
c›y_íd
 = (
°©e
 =
ssi_°¨t_°©e
Ë? 
p
 : copy_end;

1530 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

1531 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

1534  
NGX_AGAIN
;

1535 
	}
}

1538 
ngx_°r_t
 *

1539 
	$ngx_hâp_ssi_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

1540 
ngx_uöt_t
 
key
)

1542 
ngx_uöt_t
 
i
;

1543 
ngx_li°_∑π_t
 *
∑π
;

1544 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1545 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1547 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1549 #i‡(
NGX_PCRE
)

1551 
ngx_°r_t
 *
vÆue
;

1553 i‡(
key
 >= '0' && key <= '9') {

1554 
i
 = 
key
 - '0';

1556 i‡(
i
 < 
˘x
->
nˇ±uªs
) {

1557 
vÆue
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_°r_t
));

1558 i‡(
vÆue
 =
NULL
) {

1559  
NULL
;

1562 
i
 *= 2;

1564 
vÆue
->
d©a
 = 
˘x
->
ˇ±uªs_d©a
 + ctx->
ˇ±uªs
[
i
];

1565 
vÆue
->
Àn
 = 
˘x
->
ˇ±uªs
[
i
 + 1] - ctx->captures[i];

1567  
vÆue
;

1573 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1574  
NULL
;

1577 
∑π
 = &
˘x
->
v¨übÀs
->part;

1578 
v¨
 = 
∑π
->
ñts
;

1580 
i
 = 0; ; i++) {

1582 i‡(
i
 >
∑π
->
√…s
) {

1583 i‡(
∑π
->
√xt
 =
NULL
) {

1587 
∑π
 =Ö¨t->
√xt
;

1588 
v¨
 = 
∑π
->
ñts
;

1589 
i
 = 0;

1592 i‡(
«me
->
Àn
 !
v¨
[
i
].name.len) {

1596 i‡(
key
 !
v¨
[
i
].key) {

1600 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, 
v¨
[
i
].«me.d©a,Çame->
Àn
) == 0) {

1601  &
v¨
[
i
].
vÆue
;

1605  
NULL
;

1606 
	}
}

1609 
ngx_öt_t


1610 
	$ngx_hâp_ssi_evÆu©e_°rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1611 
ngx_°r_t
 *
ãxt
, 
ngx_uöt_t
 
Êags
)

1613 
u_ch¨
 
ch
, *
p
, **
vÆue
, *
d©a
, *
∑π_d©a
;

1614 
size_t
 *
size
, 
Àn
, 
¥efix
, 
∑π_Àn
;

1615 
ngx_°r_t
 
v¨
, *
vÆ
;

1616 
ngx_öt_t
 
key
;

1617 
ngx_uöt_t
 
i
, 
n
, 
bøckë
, 
quŸed
;

1618 
ngx_¨øy_t
 
Àngths
, 
vÆues
;

1619 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

1621 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ãxt
);

1623 i‡(
n
 == 0) {

1625 
d©a
 = 
ãxt
->data;

1626 
p
 = 
d©a
;

1628 i‡((
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
Ë&& 
ãxt
->
d©a
[0] != '/') {

1630 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1631 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1636 i‡(
¥efix
) {

1637 
Àn
 = 
¥efix
 + 
ãxt
->len;

1639 
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1640 i‡(
d©a
 =
NULL
) {

1641  
NGX_ERROR
;

1644 
p
 = 
	`ngx_c›y
(
d©a
, 
r
->
uri
.d©a, 
¥efix
);

1648 
quŸed
 = 0;

1650 
i
 = 0; i < 
ãxt
->
Àn
; i++) {

1651 
ch
 = 
ãxt
->
d©a
[
i
];

1653 i‡(!
quŸed
) {

1655 i‡(
ch
 == '\\') {

1656 
quŸed
 = 1;

1661 
quŸed
 = 0;

1663 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1664 *
p
++ = '\\';

1668 *
p
++ = 
ch
;

1671 
ãxt
->
Àn
 = 
p
 - 
d©a
;

1672 
ãxt
->
d©a
 = data;

1674  
NGX_OK
;

1677 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
r
->
poﬁ
, 8, (
size_t
 *)Ë!
NGX_OK
) {

1678  
NGX_ERROR
;

1681 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
r
->
poﬁ
, 8, (
u_ch¨
 *)Ë!
NGX_OK
) {

1682  
NGX_ERROR
;

1685 
Àn
 = 0;

1686 
i
 = 0;

1688 
i
 < 
ãxt
->
Àn
) {

1690 i‡(
ãxt
->
d©a
[
i
] == '$') {

1692 
v¨
.
Àn
 = 0;

1694 i‡(++
i
 =
ãxt
->
Àn
) {

1695 
övÆid_v¨übÀ
;

1698 i‡(
ãxt
->
d©a
[
i
] == '{') {

1699 
bøckë
 = 1;

1701 i‡(++
i
 =
ãxt
->
Àn
) {

1702 
övÆid_v¨übÀ
;

1705 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1708 
bøckë
 = 0;

1709 
v¨
.
d©a
 = &
ãxt
->d©a[
i
];

1712  ; 
i
 < 
ãxt
->
Àn
; i++, 
v¨
.len++) {

1713 
ch
 = 
ãxt
->
d©a
[
i
];

1715 i‡(
ch
 ='}' && 
bøckë
) {

1716 
i
++;

1717 
bøckë
 = 0;

1721 i‡((
ch
 >= 'A' && ch <= 'Z')

1722 || (
ch
 >= 'a' && ch <= 'z')

1723 || (
ch
 >= '0' && ch <= '9')

1724 || 
ch
 == '_')

1732 i‡(
bøckë
) {

1733 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1735 "v¨übÀ i†missög", &
v¨
);

1736  
NGX_HTTP_SSI_ERROR
;

1739 i‡(
v¨
.
Àn
 == 0) {

1740 
övÆid_v¨übÀ
;

1743 
key
 = 
	`ngx_hash_°æow
(
v¨
.
d©a
, v¨.d©a, v¨.
Àn
);

1745 
vÆ
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1747 i‡(
vÆ
 =
NULL
) {

1748 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, &
v¨
, 
key
);

1749 i‡(
vv
 =
NULL
) {

1750  
NGX_ERROR
;

1753 i‡(
vv
->
nŸ_found
) {

1757 
∑π_d©a
 = 
vv
->
d©a
;

1758 
∑π_Àn
 = 
vv
->
Àn
;

1761 
∑π_d©a
 = 
vÆ
->
d©a
;

1762 
∑π_Àn
 = 
vÆ
->
Àn
;

1766 
∑π_d©a
 = &
ãxt
->
d©a
[
i
];

1767 
quŸed
 = 0;

1769 
p
 = 
∑π_d©a
; 
i
 < 
ãxt
->
Àn
; i++) {

1770 
ch
 = 
ãxt
->
d©a
[
i
];

1772 i‡(!
quŸed
) {

1774 i‡(
ch
 == '\\') {

1775 
quŸed
 = 1;

1779 i‡(
ch
 == '$') {

1784 
quŸed
 = 0;

1786 i‡(
ch
 != '\\' && ch != '\'' && ch != '"' && ch != '$') {

1787 *
p
++ = '\\';

1791 *
p
++ = 
ch
;

1794 
∑π_Àn
 = 
p
 - 
∑π_d©a
;

1797 
Àn
 +
∑π_Àn
;

1799 
size
 = 
	`ngx_¨øy_push
(&
Àngths
);

1800 i‡(
size
 =
NULL
) {

1801  
NGX_ERROR
;

1804 *
size
 = 
∑π_Àn
;

1806 
vÆue
 = 
	`ngx_¨øy_push
(&
vÆues
);

1807 i‡(
vÆue
 =
NULL
) {

1808  
NGX_ERROR
;

1811 *
vÆue
 = 
∑π_d©a
;

1814 
¥efix
 = 0;

1816 
size
 = 
Àngths
.
ñts
;

1817 
vÆue
 = 
vÆues
.
ñts
;

1819 i‡(
Êags
 & 
NGX_HTTP_SSI_ADD_PREFIX
) {

1820 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1821 i‡(
size
[
i
] != 0) {

1822 i‡(*
vÆue
[
i
] != '/') {

1823 
¥efix
 = 
r
->
uri
.
Àn
;Örefix;Örefix--) {

1824 i‡(
r
->
uri
.
d©a
[
¥efix
 - 1] == '/') {

1825 
Àn
 +
¥efix
;

1836 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
 + ((
Êags
 & 
NGX_HTTP_SSI_ADD_ZERO
) ? 1 : 0));

1837 i‡(
p
 =
NULL
) {

1838  
NGX_ERROR
;

1841 
ãxt
->
Àn
 =Üen;

1842 
ãxt
->
d©a
 = 
p
;

1844 
p
 = 
	`ngx_c›y
’, 
r
->
uri
.
d©a
, 
¥efix
);

1846 
i
 = 0; i < 
vÆues
.
√…s
; i++) {

1847 
p
 = 
	`ngx_c›y
’, 
vÆue
[
i
], 
size
[i]);

1850  
NGX_OK
;

1852 
övÆid_v¨übÀ
:

1854 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1855 "övÆid v¨übÀÇamêö \"%V\"", 
ãxt
);

1857  
NGX_HTTP_SSI_ERROR
;

1858 
	}
}

1861 
ngx_öt_t


1862 
	$ngx_hâp_ssi_ªgex_m©ch
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑âîn
,

1863 
ngx_°r_t
 *
°r
)

1865 #i‡(
NGX_PCRE
)

1866 
rc
, *
ˇ±uªs
;

1867 
u_ch¨
 *
p
, 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

1868 
size_t
 
size
;

1869 
ngx_öt_t
 
key
;

1870 
ngx_°r_t
 *
vv
, 
«me
, 
vÆue
;

1871 
ngx_uöt_t
 
i
, 
n
;

1872 
ngx_hâp_ssi_˘x_t
 *
˘x
;

1873 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1874 
ngx_ªgex_compûe_t
 
rgc
;

1876 
	`ngx_memzîo
(&
rgc
, (
ngx_ªgex_compûe_t
));

1878 
rgc
.
∑âîn
 = *pattern;

1879 
rgc
.
poﬁ
 = 
r
->pool;

1880 
rgc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

1881 
rgc
.
îr
.
d©a
 = 
îr°r
;

1883 i‡(
	`ngx_ªgex_compûe
(&
rgc
Ë!
NGX_OK
) {

1884 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "%V", &
rgc
.
îr
);

1885  
NGX_HTTP_SSI_ERROR
;

1888 
n
 = (
rgc
.
ˇ±uªs
 + 1) * 3;

1890 
ˇ±uªs
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * ());

1891 i‡(
ˇ±uªs
 =
NULL
) {

1892  
NGX_ERROR
;

1895 
rc
 = 
	`ngx_ªgex_exec
(
rgc
.
ªgex
, 
°r
, 
ˇ±uªs
, 
n
);

1897 i‡(
rc
 < 
NGX_REGEX_NO_MATCHED
) {

1898 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1899 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

1900 
rc
, 
°r
, 
∑âîn
);

1901  
NGX_HTTP_SSI_ERROR
;

1904 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

1905  
NGX_DECLINED
;

1908 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

1910 
˘x
->
nˇ±uªs
 = 
rc
;

1911 
˘x
->
ˇ±uªs
 = captures;

1912 
˘x
->
ˇ±uªs_d©a
 = 
°r
->
d©a
;

1914 i‡(
rgc
.
«med_ˇ±uªs
 > 0) {

1916 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1917 
˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

1918 (
ngx_hâp_ssi_v¨_t
));

1919 i‡(
˘x
->
v¨übÀs
 =
NULL
) {

1920  
NGX_ERROR
;

1924 
size
 = 
rgc
.
«me_size
;

1925 
p
 = 
rgc
.
«mes
;

1927 
i
 = 0; i < (
ngx_uöt_t
Ë
rgc
.
«med_ˇ±uªs
; i++, 
p
 +
size
) {

1929 
«me
.
d©a
 = &
p
[2];

1930 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

1932 
n
 = 2 * ((
p
[0] << 8) +Ö[1]);

1934 
vÆue
.
d©a
 = &
°r
->d©a[
ˇ±uªs
[
n
]];

1935 
vÆue
.
Àn
 = 
ˇ±uªs
[
n
 + 1] - captures[n];

1937 
key
 = 
	`ngx_hash_°æow
(
«me
.
d©a
,Çame.d©a,Çame.
Àn
);

1939 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, &
«me
, 
key
);

1941 i‡(
vv
) {

1942 *
vv
 = 
vÆue
;

1946 
v¨
 = 
	`ngx_li°_push
(
˘x
->
v¨übÀs
);

1947 i‡(
v¨
 =
NULL
) {

1948  
NGX_ERROR
;

1951 
v¨
->
«me
 =Çame;

1952 
v¨
->
key
 = key;

1953 
v¨
->
vÆue
 = value;

1957  
NGX_OK
;

1961 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1963 
∑âîn
);

1964  
NGX_HTTP_SSI_ERROR
;

1967 
	}
}

1970 
ngx_öt_t


1971 
	$ngx_hâp_ssi_ö˛ude
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

1972 
ngx_°r_t
 **
∑øms
)

1974 
u_ch¨
 *
d°
, *
§c
;

1975 
size_t
 
Àn
;

1976 
ngx_öt_t
 
rc
, 
key
;

1977 
ngx_°r_t
 *
uri
, *
fûe
, *
waô
, *
£t
, *
°ub
, 
¨gs
;

1978 
ngx_buf_t
 *
b
;

1979 
ngx_uöt_t
 
Êags
, 
i
;

1980 
ngx_chaö_t
 *
˛
, *
é
, **
Œ
, *
out
;

1981 
ngx_hâp_ªque°_t
 *
§
;

1982 
ngx_hâp_ssi_v¨_t
 *
v¨
;

1983 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

1984 
ngx_hâp_ssi_block_t
 *
bl
;

1985 
ngx_hâp_po°_subªque°_t
 *
p§
;

1987 
uri
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_VIRTUAL
];

1988 
fûe
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_FILE
];

1989 
waô
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_WAIT
];

1990 
£t
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_SET
];

1991 
°ub
 = 
∑øms
[
NGX_HTTP_SSI_INCLUDE_STUB
];

1993 i‡(
uri
 && 
fûe
) {

1994 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1996 
uri
, 
fûe
);

1997  
NGX_HTTP_SSI_ERROR
;

2000 i‡(
uri
 =
NULL
 && 
fûe
 == NULL) {

2001 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2003  
NGX_HTTP_SSI_ERROR
;

2006 i‡(
£t
 && 
°ub
) {

2007 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2010  
NGX_HTTP_SSI_ERROR
;

2013 i‡(
waô
) {

2014 i‡(
uri
 =
NULL
) {

2015 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2016 "\"waô\" c™nŸ bêu£d wôh fûe=\"%V\"", 
fûe
);

2017  
NGX_HTTP_SSI_ERROR
;

2020 i‡(
waô
->
Àn
 == 2

2021 && 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "no", 2) == 0)

2023 
waô
 = 
NULL
;

2025 } i‡(
waô
->
Àn
 != 3

2026 || 
	`ngx_°∫ˇ£cmp
(
waô
->
d©a
, (
u_ch¨
 *) "yes", 3) != 0)

2028 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2030 
waô
);

2031  
NGX_HTTP_SSI_ERROR
;

2035 i‡(
uri
 =
NULL
) {

2036 
uri
 = 
fûe
;

2037 
waô
 = (
ngx_°r_t
 *) -1;

2040 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
uri
, 
NGX_HTTP_SSI_ADD_PREFIX
);

2042 i‡(
rc
 !
NGX_OK
) {

2043  
rc
;

2046 
d°
 = 
uri
->
d©a
;

2047 
§c
 = 
uri
->
d©a
;

2049 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
uri
->
Àn
, 
NGX_UNESCAPE_URI
);

2051 
Àn
 = (
uri
->
d©a
 + uri->ÀnË- 
§c
;

2052 i‡(
Àn
) {

2053 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
Àn
);

2056 
uri
->
Àn
 = 
d°
 - uri->
d©a
;

2058 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2059 "ssòö˛ude: \"%V\"", 
uri
);

2061 
	`ngx_°r_nuŒ
(&
¨gs
);

2062 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

2064 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

2065  
NGX_HTTP_SSI_ERROR
;

2068 
p§
 = 
NULL
;

2070 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2072 i‡(
°ub
) {

2073 i‡(
m˘x
->
blocks
) {

2074 
bl
 = 
m˘x
->
blocks
->
ñts
;

2075 
i
 = 0; i < 
m˘x
->
blocks
->
√…s
; i++) {

2076 i‡(
°ub
->
Àn
 =
bl
[
i
].
«me
.len

2077 && 
	`ngx_°∫cmp
(
°ub
->
d©a
, 
bl
[
i
].
«me
.d©a, stub->
Àn
) == 0)

2079 
found
;

2084 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2085 "\"°ub\"=\"%V\" f‹ \"ö˛ude\"ÇŸ found", 
°ub
);

2086  
NGX_HTTP_SSI_ERROR
;

2088 
found
:

2090 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2091 i‡(
p§
 =
NULL
) {

2092  
NGX_ERROR
;

2095 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_°ub_ouçut
;

2097 i‡(
bl
[
i
].
cou¡
++) {

2099 
out
 = 
NULL
;

2100 
Œ
 = &
out
;

2102 
é
 = 
bl
[
i
].
bufs
;Ål;Å»é->
√xt
) {

2104 i‡(
˘x
->
‰ì
) {

2105 
˛
 = 
˘x
->
‰ì
;

2106 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

2107 
b
 = 
˛
->
buf
;

2110 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

2111 i‡(
b
 =
NULL
) {

2112  
NGX_ERROR
;

2115 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2116 i‡(
˛
 =
NULL
) {

2117  
NGX_ERROR
;

2120 
˛
->
buf
 = 
b
;

2123 
	`ngx_mem˝y
(
b
, 
é
->
buf
, (
ngx_buf_t
));

2125 
b
->
pos
 = b->
°¨t
;

2127 *
Œ
 = 
˛
;

2128 
˛
->
√xt
 = 
NULL
;

2129 
Œ
 = &
˛
->
√xt
;

2132 
p§
->
d©a
 = 
out
;

2135 
p§
->
d©a
 = 
bl
[
i
].
bufs
;

2139 i‡(
waô
) {

2140 
Êags
 |
NGX_HTTP_SUBREQUEST_WAITED
;

2143 i‡(
£t
) {

2144 
key
 = 
	`ngx_hash_°æow
(
£t
->
d©a
, së->d©a, së->
Àn
);

2146 
p§
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°_subªque°_t
));

2147 i‡(
p§
 =
NULL
) {

2148  
NGX_ERROR
;

2151 
p§
->
h™dÀr
 = 
ngx_hâp_ssi_£t_v¨übÀ
;

2152 
p§
->
d©a
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
£t
, 
key
);

2154 i‡(
p§
->
d©a
 =
NULL
) {

2156 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2157 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2158 (
ngx_hâp_ssi_v¨_t
));

2159 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2160  
NGX_ERROR
;

2164 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2165 i‡(
v¨
 =
NULL
) {

2166  
NGX_ERROR
;

2169 
v¨
->
«me
 = *
£t
;

2170 
v¨
->
key
 = key;

2171 
v¨
->
vÆue
 = 
ngx_hâp_ssi_nuŒ_°rög
;

2172 
p§
->
d©a
 = &
v¨
->
vÆue
;

2175 
Êags
 |
NGX_HTTP_SUBREQUEST_IN_MEMORY
|
NGX_HTTP_SUBREQUEST_WAITED
;

2178 i‡(
	`ngx_hâp_subªque°
(
r
, 
uri
, &
¨gs
, &
§
, 
p§
, 
Êags
Ë!
NGX_OK
) {

2179  
NGX_HTTP_SSI_ERROR
;

2182 i‡(
waô
 =
NULL
 && 
£t
 == NULL) {

2183  
NGX_OK
;

2186 i‡(
˘x
->
waô
 =
NULL
) {

2187 
˘x
->
waô
 = 
§
;

2189  
NGX_AGAIN
;

2192 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2196  
NGX_OK
;

2197 
	}
}

2200 
ngx_öt_t


2201 
	$ngx_hâp_ssi_°ub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2203 
ngx_chaö_t
 *
out
;

2205 i‡(
rc
 =
NGX_ERROR
 || 
r
->
c⁄√˘i⁄
->
îr‹
 ||Ñ->
ªque°_ouçut
) {

2206  
rc
;

2209 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2210 "ssò°ub ouçut: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2212 
out
 = 
d©a
;

2214 i‡(!
r
->
hódî_£¡
) {

2215 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =

2216 
r
->
∑ª¡
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

2217 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 =Ñ->
∑ª¡
->headers_out.content_type;

2219 i‡(
	`ngx_hâp_£nd_hódî
(
r
Ë=
NGX_ERROR
) {

2220  
NGX_ERROR
;

2224  
	`ngx_hâp_ouçut_fûãr
(
r
, 
out
);

2225 
	}
}

2228 
ngx_öt_t


2229 
	$ngx_hâp_ssi_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, *
d©a
, 
ngx_öt_t
 
rc
)

2231 
ngx_°r_t
 *
vÆue
 = 
d©a
;

2233 i‡(
r
->
up°ªam
) {

2234 
vÆue
->
Àn
 = 
r
->
up°ªam
->
buf„r
.
œ°
 -Ñ->up°ªam->buf„r.
pos
;

2235 
vÆue
->
d©a
 = 
r
->
up°ªam
->
buf„r
.
pos
;

2238  
rc
;

2239 
	}
}

2242 
ngx_öt_t


2243 
	$ngx_hâp_ssi_echo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2244 
ngx_°r_t
 **
∑øms
)

2246 
u_ch¨
 *
p
;

2247 
uöçå_t
 
Àn
;

2248 
ngx_öt_t
 
key
;

2249 
ngx_buf_t
 *
b
;

2250 
ngx_°r_t
 *
v¨
, *
vÆue
, *
íc
, 
ãxt
;

2251 
ngx_chaö_t
 *
˛
;

2252 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2254 
v¨
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_VAR
];

2256 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2257 "ssòechÿ\"%V\"", 
v¨
);

2259 
key
 = 
	`ngx_hash_°æow
(
v¨
->
d©a
, v¨->d©a, v¨->
Àn
);

2261 
vÆue
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2263 i‡(
vÆue
 =
NULL
) {

2264 
vv
 = 
	`ngx_hâp_gë_v¨übÀ
(
r
, 
v¨
, 
key
);

2266 i‡(
vv
 =
NULL
) {

2267  
NGX_HTTP_SSI_ERROR
;

2270 i‡(!
vv
->
nŸ_found
) {

2271 
ãxt
.
d©a
 = 
vv
->data;

2272 
ãxt
.
Àn
 = 
vv
->len;

2273 
vÆue
 = &
ãxt
;

2277 i‡(
vÆue
 =
NULL
) {

2278 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_DEFAULT
];

2280 i‡(
vÆue
 =
NULL
) {

2281 
vÆue
 = &
ngx_hâp_ssi_n⁄e
;

2283 } i‡(
vÆue
->
Àn
 == 0) {

2284  
NGX_OK
;

2288 i‡(
vÆue
->
Àn
 == 0) {

2289  
NGX_OK
;

2293 
íc
 = 
∑øms
[
NGX_HTTP_SSI_ECHO_ENCODING
];

2295 i‡(
íc
) {

2296 i‡(
íc
->
Àn
 =4 && 
	`ngx_°∫cmp
”nc->
d©a
, "none", 4) == 0) {

2298 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_NO_ENCODING
;

2300 } i‡(
íc
->
Àn
 =3 && 
	`ngx_°∫cmp
”nc->
d©a
, "url", 3) == 0) {

2302 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_URL_ENCODING
;

2304 } i‡(
íc
->
Àn
 =6 && 
	`ngx_°∫cmp
”nc->
d©a
, "entity", 6) == 0) {

2306 
˘x
->
ícodög
 = 
NGX_HTTP_SSI_ENTITY_ENCODING
;

2309 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2311 
íc
);

2315 
p
 = 
vÆue
->
d©a
;

2317 
˘x
->
ícodög
) {

2319 
NGX_HTTP_SSI_URL_ENCODING
:

2320 
Àn
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
vÆue
->
d©a
, value->len,

2321 
NGX_ESCAPE_HTML
);

2323 i‡(
Àn
) {

2324 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2325 i‡(
p
 =
NULL
) {

2326  
NGX_HTTP_SSI_ERROR
;

2329 (Ë
	`ngx_esˇ≥_uri
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
, 
NGX_ESCAPE_HTML
);

2332 
Àn
 +
vÆue
->len;

2335 
NGX_HTTP_SSI_ENTITY_ENCODING
:

2336 
Àn
 = 
	`ngx_esˇ≥_html
(
NULL
, 
vÆue
->
d©a
, value->len);

2338 i‡(
Àn
) {

2339 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 +Üen);

2340 i‡(
p
 =
NULL
) {

2341  
NGX_HTTP_SSI_ERROR
;

2344 (Ë
	`ngx_esˇ≥_html
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

2347 
Àn
 +
vÆue
->len;

2351 
Àn
 = 
vÆue
->len;

2355 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2356 i‡(
b
 =
NULL
) {

2357  
NGX_HTTP_SSI_ERROR
;

2360 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2361 i‡(
˛
 =
NULL
) {

2362  
NGX_HTTP_SSI_ERROR
;

2365 
b
->
mem‹y
 = 1;

2366 
b
->
pos
 = 
p
;

2367 
b
->
œ°
 = 
p
 + 
Àn
;

2369 
˛
->
buf
 = 
b
;

2370 
˛
->
√xt
 = 
NULL
;

2371 *
˘x
->
œ°_out
 = 
˛
;

2372 
˘x
->
œ°_out
 = &
˛
->
√xt
;

2374  
NGX_OK
;

2375 
	}
}

2378 
ngx_öt_t


2379 
	$ngx_hâp_ssi_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2380 
ngx_°r_t
 **
∑øms
)

2382 
ngx_°r_t
 *
vÆue
;

2384 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_TIMEFMT
];

2386 i‡(
vÆue
) {

2387 
˘x
->
timefmt
.
Àn
 = 
vÆue
->len;

2388 
˘x
->
timefmt
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
vÆue
->
Àn
 + 1);

2389 i‡(
˘x
->
timefmt
.
d©a
 =
NULL
) {

2390  
NGX_HTTP_SSI_ERROR
;

2393 
	`ngx_˝y°∫
(
˘x
->
timefmt
.
d©a
, 
vÆue
->d©a, vÆue->
Àn
 + 1);

2396 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_CONFIG_ERRMSG
];

2398 i‡(
vÆue
) {

2399 
˘x
->
îrmsg
 = *
vÆue
;

2402  
NGX_OK
;

2403 
	}
}

2406 
ngx_öt_t


2407 
	$ngx_hâp_ssi_£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2408 
ngx_°r_t
 **
∑øms
)

2410 
ngx_öt_t
 
key
, 
rc
;

2411 
ngx_°r_t
 *
«me
, *
vÆue
, *
vv
;

2412 
ngx_hâp_ssi_v¨_t
 *
v¨
;

2413 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2415 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2417 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2418 
m˘x
->
v¨übÀs
 = 
	`ngx_li°_¸óã
(
r
->
poﬁ
, 4,

2419 (
ngx_hâp_ssi_v¨_t
));

2420 i‡(
m˘x
->
v¨übÀs
 =
NULL
) {

2421  
NGX_ERROR
;

2425 
«me
 = 
∑øms
[
NGX_HTTP_SSI_SET_VAR
];

2426 
vÆue
 = 
∑øms
[
NGX_HTTP_SSI_SET_VALUE
];

2428 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2429 "ssò£à\"%V\" \"%V\"", 
«me
, 
vÆue
);

2431 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, 
vÆue
, 0);

2433 i‡(
rc
 !
NGX_OK
) {

2434  
rc
;

2437 
key
 = 
	`ngx_hash_°æow
(
«me
->
d©a
,Çame->d©a,Çame->
Àn
);

2439 
vv
 = 
	`ngx_hâp_ssi_gë_v¨übÀ
(
r
, 
«me
, 
key
);

2441 i‡(
vv
) {

2442 *
vv
 = *
vÆue
;

2443  
NGX_OK
;

2446 
v¨
 = 
	`ngx_li°_push
(
m˘x
->
v¨übÀs
);

2447 i‡(
v¨
 =
NULL
) {

2448  
NGX_ERROR
;

2451 
v¨
->
«me
 = *name;

2452 
v¨
->
key
 = key;

2453 
v¨
->
vÆue
 = *value;

2455 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2456 "£t: \"%V\"=\"%V\"", 
«me
, 
vÆue
);

2458  
NGX_OK
;

2459 
	}
}

2462 
ngx_öt_t


2463 
	$ngx_hâp_ssi_if
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2464 
ngx_°r_t
 **
∑øms
)

2466 
u_ch¨
 *
p
, *
œ°
;

2467 
ngx_°r_t
 *
ex¥
, 
À·
, 
right
;

2468 
ngx_öt_t
 
rc
;

2469 
ngx_uöt_t
 
√g©ive
, 
n‹egex
, 
Êags
;

2471 i‡(
˘x
->
comm™d
.
Àn
 == 2) {

2472 i‡(
˘x
->
c⁄dôi⁄Æ
) {

2473 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2475  
NGX_HTTP_SSI_ERROR
;

2479 i‡(
˘x
->
ouçut_cho£n
) {

2480 
˘x
->
ouçut
 = 0;

2481  
NGX_OK
;

2484 
ex¥
 = 
∑øms
[
NGX_HTTP_SSI_IF_EXPR
];

2486 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2487 "ssòi‡ex¥=\"%V\"", 
ex¥
);

2489 
À·
.
d©a
 = 
ex¥
->data;

2490 
œ°
 = 
ex¥
->
d©a
 +Éx¥->
Àn
;

2492 
p
 = 
À·
.
d©a
;Ö < 
œ°
;Ö++) {

2493 i‡(*
p
 >= 'A' && *p <= 'Z') {

2494 *
p
 |= 0x20;

2498 i‡((*
p
 >= 'a' && *p <= 'z')

2499 || (*
p
 >= '0' && *p <= '9')

2500 || *
p
 == '$' || *p == '{' || *p == '}' || *p == '_'

2501 || *
p
 == '"' || *p == '\'')

2509 
À·
.
Àn
 = 
p
 -Üe·.
d©a
;

2511 
p
 < 
œ°
 && *p == ' ') {

2512 
p
++;

2515 
Êags
 = 0;

2517 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2518 "À·: \"%V\"", &
À·
);

2520 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
À·
, 
Êags
);

2522 i‡(
rc
 !
NGX_OK
) {

2523  
rc
;

2526 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2527 "evÆuãdÜe·: \"%V\"", &
À·
);

2529 i‡(
p
 =
œ°
) {

2530 i‡(
À·
.
Àn
) {

2531 
˘x
->
ouçut
 = 1;

2532 
˘x
->
ouçut_cho£n
 = 1;

2535 
˘x
->
ouçut
 = 0;

2538 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2540  
NGX_OK
;

2543 i‡(
p
 < 
œ°
 && *p == '=') {

2544 
√g©ive
 = 0;

2545 
p
++;

2547 } i‡(
p
 + 1 < 
œ°
 && *p == '!' && *(p + 1) == '=') {

2548 
√g©ive
 = 1;

2549 
p
 += 2;

2552 
övÆid_ex¥essi⁄
;

2555 
p
 < 
œ°
 && *p == ' ') {

2556 
p
++;

2559 i‡(
p
 < 
œ°
 - 1 && *p == '/') {

2560 i‡(*(
œ°
 - 1) != '/') {

2561 
övÆid_ex¥essi⁄
;

2564 
n‹egex
 = 0;

2565 
Êags
 = 
NGX_HTTP_SSI_ADD_ZERO
;

2566 
œ°
--;

2567 
p
++;

2570 
n‹egex
 = 1;

2571 
Êags
 = 0;

2573 i‡(
p
 < 
œ°
 - 1 &&Ö[0] == '\\' &&Ö[1] == '/') {

2574 
p
++;

2578 
right
.
Àn
 = 
œ°
 - 
p
;

2579 
right
.
d©a
 = 
p
;

2581 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2582 "right: \"%V\"", &
right
);

2584 
rc
 = 
	`ngx_hâp_ssi_evÆu©e_°rög
(
r
, 
˘x
, &
right
, 
Êags
);

2586 i‡(
rc
 !
NGX_OK
) {

2587  
rc
;

2590 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2591 "evÆuãdÑight: \"%V\"", &
right
);

2593 i‡(
n‹egex
) {

2594 i‡(
À·
.
Àn
 !
right
.len) {

2595 
rc
 = -1;

2598 
rc
 = 
	`ngx_°∫cmp
(
À·
.
d©a
, 
right
.d©a,Ñight.
Àn
);

2602 
right
.
d©a
[right.
Àn
] = '\0';

2604 
rc
 = 
	`ngx_hâp_ssi_ªgex_m©ch
(
r
, &
right
, &
À·
);

2606 i‡(
rc
 =
NGX_OK
) {

2607 
rc
 = 0;

2608 } i‡(
rc
 =
NGX_DECLINED
) {

2609 
rc
 = -1;

2611  
rc
;

2615 i‡((
rc
 =0 && !
√g©ive
) || (rc != 0 &&Çegative)) {

2616 
˘x
->
ouçut
 = 1;

2617 
˘x
->
ouçut_cho£n
 = 1;

2620 
˘x
->
ouçut
 = 0;

2623 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_IF
;

2625  
NGX_OK
;

2627 
övÆid_ex¥essi⁄
:

2629 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2630 "övÆidÉx¥essi⁄ i¿\"%V\"", 
ex¥
);

2632  
NGX_HTTP_SSI_ERROR
;

2633 
	}
}

2636 
ngx_öt_t


2637 
	$ngx_hâp_ssi_ñ£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2638 
ngx_°r_t
 **
∑øms
)

2640 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2643 i‡(
˘x
->
ouçut_cho£n
) {

2644 
˘x
->
ouçut
 = 0;

2646 
˘x
->
ouçut
 = 1;

2649 
˘x
->
c⁄dôi⁄Æ
 = 
NGX_HTTP_SSI_COND_ELSE
;

2651  
NGX_OK
;

2652 
	}
}

2655 
ngx_öt_t


2656 
	$ngx_hâp_ssi_ídif
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2657 
ngx_°r_t
 **
∑øms
)

2659 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2662 
˘x
->
ouçut
 = 1;

2663 
˘x
->
ouçut_cho£n
 = 0;

2664 
˘x
->
c⁄dôi⁄Æ
 = 0;

2666  
NGX_OK
;

2667 
	}
}

2670 
ngx_öt_t


2671 
	$ngx_hâp_ssi_block
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2672 
ngx_°r_t
 **
∑øms
)

2674 
ngx_hâp_ssi_˘x_t
 *
m˘x
;

2675 
ngx_hâp_ssi_block_t
 *
bl
;

2677 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2680 
m˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
->
maö
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2682 i‡(
m˘x
->
blocks
 =
NULL
) {

2683 
m˘x
->
blocks
 = 
	`ngx_¨øy_¸óã
(
r
->
poﬁ
, 4,

2684 (
ngx_hâp_ssi_block_t
));

2685 i‡(
m˘x
->
blocks
 =
NULL
) {

2686  
NGX_HTTP_SSI_ERROR
;

2690 
bl
 = 
	`ngx_¨øy_push
(
m˘x
->
blocks
);

2691 i‡(
bl
 =
NULL
) {

2692  
NGX_HTTP_SSI_ERROR
;

2695 
bl
->
«me
 = *
∑øms
[
NGX_HTTP_SSI_BLOCK_NAME
];

2696 
bl
->
bufs
 = 
NULL
;

2697 
bl
->
cou¡
 = 0;

2699 
˘x
->
ouçut
 = 0;

2700 
˘x
->
block
 = 1;

2702  
NGX_OK
;

2703 
	}
}

2706 
ngx_öt_t


2707 
	$ngx_hâp_ssi_ídblock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
˘x
,

2708 
ngx_°r_t
 **
∑øms
)

2710 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2713 
˘x
->
ouçut
 = 1;

2714 
˘x
->
block
 = 0;

2716  
NGX_OK
;

2717 
	}
}

2720 
ngx_öt_t


2721 
	$ngx_hâp_ssi_d©e_gmt_loˇl_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

2722 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
gmt
)

2724 
ngx_hâp_ssi_˘x_t
 *
˘x
;

2725 
ngx_time_t
 *
ç
;

2726 
tm
Åm;

2727 
buf
[
NGX_HTTP_SSI_DATE_LEN
];

2729 
v
->
vÆid
 = 1;

2730 
v
->
no_ˇchóbÀ
 = 0;

2731 
v
->
nŸ_found
 = 0;

2733 
ç
 = 
	`ngx_timeofday
();

2735 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2737 i‡(
˘x
 =
NULL


2738 || (
˘x
->
timefmt
.
Àn
 == ("%s") - 1

2739 && 
˘x
->
timefmt
.
d©a
[0] == '%' && ctx->timefmt.data[1] == 's'))

2741 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
);

2742 i‡(
v
->
d©a
 =
NULL
) {

2743  
NGX_ERROR
;

2746 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%T", 
ç
->
£c
) - v->data;

2748  
NGX_OK
;

2751 i‡(
gmt
) {

2752 
	`ngx_libc_gmtime
(
ç
->
£c
, &
tm
);

2754 
	`ngx_libc_loˇ…ime
(
ç
->
£c
, &
tm
);

2757 
v
->
Àn
 = 
	`°r·ime
(
buf
, 
NGX_HTTP_SSI_DATE_LEN
,

2758 (*Ë
˘x
->
timefmt
.
d©a
, &
tm
);

2759 i‡(
v
->
Àn
 == 0) {

2760  
NGX_ERROR
;

2763 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

2764 i‡(
v
->
d©a
 =
NULL
) {

2765  
NGX_ERROR
;

2768 
	`ngx_mem˝y
(
v
->
d©a
, 
buf
, v->
Àn
);

2770  
NGX_OK
;

2771 
	}
}

2774 
ngx_öt_t


2775 
	$ngx_hâp_ssi_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

2777 
ngx_öt_t
 
rc
;

2778 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

2779 
ngx_hâp_ssi_comm™d_t
 *
cmd
;

2780 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2782 
v
 = 
ngx_hâp_ssi_v¨s
; v->
«me
.
Àn
; v++) {

2783 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

2784 i‡(
v¨
 =
NULL
) {

2785  
NGX_ERROR
;

2788 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

2789 
v¨
->
d©a
 = 
v
->data;

2792 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

2794 
cmd
 = 
ngx_hâp_ssi_comm™ds
; cmd->
«me
.
Àn
; cmd++) {

2795 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
cmd
->
«me
, cmd,

2796 
NGX_HASH_READONLY_KEY
);

2798 i‡(
rc
 =
NGX_OK
) {

2802 i‡(
rc
 =
NGX_BUSY
) {

2803 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2804 "c⁄Êi˘ög SSI comm™d \"%V\"", &
cmd
->
«me
);

2807  
NGX_ERROR
;

2810  
NGX_OK
;

2811 
	}
}

2815 
	$ngx_hâp_ssi_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2817 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

2819 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_maö_c⁄f_t
));

2820 i‡(
smcf
 =
NULL
) {

2821  
NULL
;

2824 
smcf
->
comm™ds
.
poﬁ
 = 
cf
->pool;

2825 
smcf
->
comm™ds
.
ãmp_poﬁ
 = 
cf
->temp_pool;

2827 i‡(
	`ngx_hash_keys_¨øy_öô
(&
smcf
->
comm™ds
, 
NGX_HASH_SMALL
Ë!
NGX_OK
) {

2828  
NULL
;

2831  
smcf
;

2832 
	}
}

2836 
	$ngx_hâp_ssi_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

2838 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

2840 
ngx_hash_öô_t
 
hash
;

2842 
hash
.hash = &
smcf
->hash;

2843 
hash
.
key
 = 
ngx_hash_key
;

2844 
hash
.
max_size
 = 1024;

2845 
hash
.
buckë_size
 = 
ngx_ˇchñöe_size
;

2846 
hash
.
«me
 = "ssi_command_hash";

2847 
hash
.
poﬁ
 = 
cf
->pool;

2848 
hash
.
ãmp_poﬁ
 = 
NULL
;

2850 i‡(
	`ngx_hash_öô
(&
hash
, 
smcf
->
comm™ds
.
keys
.
ñts
,

2851 
smcf
->
comm™ds
.
keys
.
√…s
)

2852 !
NGX_OK
)

2854  
NGX_CONF_ERROR
;

2857  
NGX_CONF_OK
;

2858 
	}
}

2862 
	$ngx_hâp_ssi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

2864 
ngx_hâp_ssi_loc_c⁄f_t
 *
¶cf
;

2866 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ssi_loc_c⁄f_t
));

2867 i‡(
¶cf
 =
NULL
) {

2868  
NULL
;

2878 
¶cf
->
íabÀ
 = 
NGX_CONF_UNSET
;

2879 
¶cf
->
sûít_îr‹s
 = 
NGX_CONF_UNSET
;

2880 
¶cf
->
ign‹e_ªcy˛ed_buf„rs
 = 
NGX_CONF_UNSET
;

2882 
¶cf
->
mö_fûe_chunk
 = 
NGX_CONF_UNSET_SIZE
;

2883 
¶cf
->
vÆue_Àn
 = 
NGX_CONF_UNSET_SIZE
;

2885  
¶cf
;

2886 
	}
}

2890 
	$ngx_hâp_ssi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

2892 
ngx_hâp_ssi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

2893 
ngx_hâp_ssi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

2895 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

2896 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
sûít_îr‹s
, 
¥ev
->silent_errors, 0);

2897 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_ªcy˛ed_buf„rs
,

2898 
¥ev
->
ign‹e_ªcy˛ed_buf„rs
, 0);

2900 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
mö_fûe_chunk
, 
¥ev
->min_file_chunk, 1024);

2901 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
vÆue_Àn
, 
¥ev
->value_len, 255);

2903 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

2904 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

2905 
ngx_hâp_html_deÁu…_ty≥s
)

2906 !
NGX_OK
)

2908  
NGX_CONF_ERROR
;

2911  
NGX_CONF_OK
;

2912 
	}
}

2915 
ngx_öt_t


2916 
	$ngx_hâp_ssi_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

2918 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

2919 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_ssi_hódî_fûãr
;

2921 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

2922 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_ssi_body_fûãr
;

2924  
NGX_OK
;

2925 
	}
}

	@src/http/modules/ngx_http_ssi_filter_module.h

8 #i‚de‡
_NGX_HTTP_SSI_FILTER_H_INCLUDED_


9 
	#_NGX_HTTP_SSI_FILTER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_SSI_MAX_PARAMS
 16

	)

19 
	#NGX_HTTP_SSI_COMMAND_LEN
 32

	)

20 
	#NGX_HTTP_SSI_PARAM_LEN
 32

	)

21 
	#NGX_HTTP_SSI_PARAMS_N
 4

	)

24 
	#NGX_HTTP_SSI_COND_IF
 1

	)

25 
	#NGX_HTTP_SSI_COND_ELSE
 2

	)

28 
	#NGX_HTTP_SSI_NO_ENCODING
 0

	)

29 
	#NGX_HTTP_SSI_URL_ENCODING
 1

	)

30 
	#NGX_HTTP_SSI_ENTITY_ENCODING
 2

	)

34 
ngx_hash_t
 
	mhash
;

35 
ngx_hash_keys_¨øys_t
 
	mcomm™ds
;

36 } 
	tngx_hâp_ssi_maö_c⁄f_t
;

40 
ngx_buf_t
 *
	mbuf
;

42 
u_ch¨
 *
	mpos
;

43 
u_ch¨
 *
	mc›y_°¨t
;

44 
u_ch¨
 *
	mc›y_íd
;

46 
ngx_uöt_t
 
	mkey
;

47 
ngx_°r_t
 
	mcomm™d
;

48 
ngx_¨øy_t
 
	m∑øms
;

49 
ngx_èbÀ_ñt_t
 *
	m∑øm
;

50 
ngx_èbÀ_ñt_t
 
	m∑øms_¨øy
[
NGX_HTTP_SSI_PARAMS_N
];

52 
ngx_chaö_t
 *
	mö
;

53 
ngx_chaö_t
 *
	mout
;

54 
ngx_chaö_t
 **
	mœ°_out
;

55 
ngx_chaö_t
 *
	mbusy
;

56 
ngx_chaö_t
 *
	m‰ì
;

58 
ngx_uöt_t
 
	m°©e
;

59 
ngx_uöt_t
 
	mßved_°©e
;

60 
size_t
 
	mßved
;

61 
size_t
 
	mlooked
;

63 
size_t
 
	mvÆue_Àn
;

65 
ngx_li°_t
 *
	mv¨übÀs
;

66 
ngx_¨øy_t
 *
	mblocks
;

68 #i‡(
NGX_PCRE
)

69 
ngx_uöt_t
 
	mnˇ±uªs
;

70 *
	mˇ±uªs
;

71 
u_ch¨
 *
	mˇ±uªs_d©a
;

74 
	mc⁄dôi⁄Æ
:2;

75 
	mícodög
:2;

76 
	mblock
:1;

77 
	mouçut
:1;

78 
	mouçut_cho£n
:1;

80 
ngx_hâp_ªque°_t
 *
	mwaô
;

81 *
	mvÆue_buf
;

82 
ngx_°r_t
 
	mtimefmt
;

83 
ngx_°r_t
 
	mîrmsg
;

84 } 
	tngx_hâp_ssi_˘x_t
;

87 
	$ngx_öt_t
 (*
	tngx_hâp_ssi_comm™d_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

88 
	tngx_hâp_ssi_˘x_t
 *
	t˘x
, 
	tngx_°r_t
 **);

92 
ngx_°r_t
 
«me
;

93 
ngx_uöt_t
 
ödex
;

95 
m™d©‹y
:1;

96 
mu…ùÀ
:1;

97 } 
	tngx_hâp_ssi_∑øm_t
;

101 
ngx_°r_t
 
«me
;

102 
ngx_hâp_ssi_comm™d_±
 
h™dÀr
;

103 
ngx_hâp_ssi_∑øm_t
 *
∑øms
;

105 
c⁄dôi⁄Æ
:2;

106 
block
:1;

107 
Êush
:1;

108 } 
	tngx_hâp_ssi_comm™d_t
;

111 
ngx_moduÀ_t
 
ngx_hâp_ssi_fûãr_moduÀ
;

	@src/http/modules/ngx_http_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	$ngx_öt_t
 (*
	tngx_s¶_v¨übÀ_h™dÀr_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
,

14 
	tngx_poﬁ_t
 *
	tpoﬁ
, 
	tngx_°r_t
 *
	ts
);

17 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

18 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

21 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


22 
	`ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

23 c⁄° **
out
, *
ouéí
, *
¨g
);

26 
ngx_öt_t
 
	`ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

28 
ngx_öt_t
 
	`ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

31 
ngx_öt_t
 
	`ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

32 *
	`ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

33 *
	`ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

34 *
∑ª¡
, *
chûd
);

36 *
	`ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

38 *
	`ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
c⁄f
);

41 
ngx_öt_t
 
	`ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
);

44 
ngx_c⁄f_bômask_t
 
ngx_hâp_s¶_¥Ÿocﬁs
[] = {

45 { 
	`ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

46 { 
	`ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

47 { 
	`ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

48 { 
	`ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

49 { 
	`ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

50 { 
ngx_nuŒ_°rög
, 0 }

51 
	}
};

54 
ngx_c⁄f_íum_t
 
	gngx_hâp_s¶_vîify
[] = {

55 { 
ngx_°rög
("off"), 0 },

56 { 
ngx_°rög
("on"), 1 },

57 { 
ngx_°rög
("optional"), 2 },

58 { 
ngx_°rög
("optional_no_ca"), 3 },

59 { 
ngx_nuŒ_°rög
, 0 }

63 
ngx_comm™d_t
 
	gngx_hâp_s¶_comm™ds
[] = {

65 { 
ngx_°rög
("ssl"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

67 
ngx_hâp_s¶_íabÀ
,

68 
NGX_HTTP_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
íabÀ
),

70 
NULL
 },

72 { 
ngx_°rög
("ssl_certificate"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_c⁄f_£t_°r_¶Ÿ
,

75 
NGX_HTTP_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã
),

77 
NULL
 },

79 { 
ngx_°rög
("ssl_certificate_key"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_°r_¶Ÿ
,

82 
NGX_HTTP_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˚πifiˇã_key
),

84 
NULL
 },

86 { 
ngx_°rög
("ssl_dhparam"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

88 
ngx_c⁄f_£t_°r_¶Ÿ
,

89 
NGX_HTTP_SRV_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
dh∑øm
),

91 
NULL
 },

93 { 
ngx_°rög
("ssl_ecdh_curve"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_c⁄f_£t_°r_¶Ÿ
,

96 
NGX_HTTP_SRV_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
ecdh_curve
),

98 
NULL
 },

100 { 
ngx_°rög
("ssl_protocols"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

102 
ngx_c⁄f_£t_bômask_¶Ÿ
,

103 
NGX_HTTP_SRV_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥Ÿocﬁs
),

105 &
ngx_hâp_s¶_¥Ÿocﬁs
 },

107 { 
ngx_°rög
("ssl_ciphers"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_°r_¶Ÿ
,

110 
NGX_HTTP_SRV_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
cùhîs
),

112 
NULL
 },

114 { 
ngx_°rög
("ssl_verify_client"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_c⁄f_£t_íum_¶Ÿ
,

117 
NGX_HTTP_SRV_CONF_OFFSET
,

118 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify
),

119 &
ngx_hâp_s¶_vîify
 },

121 { 
ngx_°rög
("ssl_verify_depth"),

122 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

123 
ngx_c⁄f_£t_num_¶Ÿ
,

124 
NGX_HTTP_SRV_CONF_OFFSET
,

125 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
vîify_dïth
),

126 
NULL
 },

128 { 
ngx_°rög
("ssl_client_certificate"),

129 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

130 
ngx_c⁄f_£t_°r_¶Ÿ
,

131 
NGX_HTTP_SRV_CONF_OFFSET
,

132 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
˛õ¡_˚πifiˇã
),

133 
NULL
 },

135 { 
ngx_°rög
("ssl_trusted_certificate"),

136 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

137 
ngx_c⁄f_£t_°r_¶Ÿ
,

138 
NGX_HTTP_SRV_CONF_OFFSET
,

139 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
åu°ed_˚πifiˇã
),

140 
NULL
 },

142 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

143 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

144 
ngx_c⁄f_£t_Êag_¶Ÿ
,

145 
NGX_HTTP_SRV_CONF_OFFSET
,

146 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

147 
NULL
 },

149 { 
ngx_°rög
("ssl_session_cache"),

150 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE12
,

151 
ngx_hâp_s¶_£ssi⁄_ˇche
,

152 
NGX_HTTP_SRV_CONF_OFFSET
,

154 
NULL
 },

156 { 
ngx_°rög
("ssl_session_timeout"),

157 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

158 
ngx_c⁄f_£t_£c_¶Ÿ
,

159 
NGX_HTTP_SRV_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
£ssi⁄_timeout
),

161 
NULL
 },

163 { 
ngx_°rög
("ssl_crl"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

165 
ngx_c⁄f_£t_°r_¶Ÿ
,

166 
NGX_HTTP_SRV_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
¸l
),

168 
NULL
 },

170 { 
ngx_°rög
("ssl_stapling"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

172 
ngx_c⁄f_£t_Êag_¶Ÿ
,

173 
NGX_HTTP_SRV_CONF_OFFSET
,

174 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög
),

175 
NULL
 },

177 { 
ngx_°rög
("ssl_stapling_file"),

178 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

179 
ngx_c⁄f_£t_°r_¶Ÿ
,

180 
NGX_HTTP_SRV_CONF_OFFSET
,

181 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_fûe
),

182 
NULL
 },

184 { 
ngx_°rög
("ssl_stapling_responder"),

185 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

186 
ngx_c⁄f_£t_°r_¶Ÿ
,

187 
NGX_HTTP_SRV_CONF_OFFSET
,

188 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_ª•⁄dî
),

189 
NULL
 },

191 { 
ngx_°rög
("ssl_stapling_verify"),

192 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

193 
ngx_c⁄f_£t_Êag_¶Ÿ
,

194 
NGX_HTTP_SRV_CONF_OFFSET
,

195 
off£tof
(
ngx_hâp_s¶_§v_c⁄f_t
, 
°≠lög_vîify
),

196 
NULL
 },

198 
ngx_nuŒ_comm™d


202 
ngx_hâp_moduÀ_t
 
	gngx_hâp_s¶_moduÀ_˘x
 = {

203 
ngx_hâp_s¶_add_v¨übÀs
,

204 
ngx_hâp_s¶_öô
,

206 
NULL
,

207 
NULL
,

209 
ngx_hâp_s¶_¸óã_§v_c⁄f
,

210 
ngx_hâp_s¶_mîge_§v_c⁄f
,

212 
NULL
,

213 
NULL


217 
ngx_moduÀ_t
 
	gngx_hâp_s¶_moduÀ
 = {

218 
NGX_MODULE_V1
,

219 &
ngx_hâp_s¶_moduÀ_˘x
,

220 
ngx_hâp_s¶_comm™ds
,

221 
NGX_HTTP_MODULE
,

222 
NULL
,

223 
NULL
,

224 
NULL
,

225 
NULL
,

226 
NULL
,

227 
NULL
,

228 
NULL
,

229 
NGX_MODULE_V1_PADDING


233 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_s¶_v¨s
[] = {

235 { 
ngx_°rög
("s¶_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

236 (
uöçå_t
Ë
ngx_s¶_gë_¥Ÿocﬁ
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

238 { 
ngx_°rög
("s¶_cùhî"), 
NULL
, 
ngx_hâp_s¶_°©ic_v¨übÀ
,

239 (
uöçå_t
Ë
ngx_s¶_gë_cùhî_«me
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

241 { 
ngx_°rög
("s¶_£ssi⁄_id"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

242 (
uöçå_t
Ë
ngx_s¶_gë_£ssi⁄_id
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

244 { 
ngx_°rög
("s¶_˛õ¡_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

245 (
uöçå_t
Ë
ngx_s¶_gë_˚πifiˇã
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

247 { 
ngx_°rög
("s¶_˛õ¡_øw_˚π"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

248 (
uöçå_t
Ë
ngx_s¶_gë_øw_˚πifiˇã
,

249 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

251 { 
ngx_°rög
("s¶_˛õ¡_s_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

252 (
uöçå_t
Ë
ngx_s¶_gë_subje˘_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

254 { 
ngx_°rög
("s¶_˛õ¡_i_dn"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

255 (
uöçå_t
Ë
ngx_s¶_gë_issuî_dn
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

257 { 
ngx_°rög
("s¶_˛õ¡_£rül"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

258 (
uöçå_t
Ë
ngx_s¶_gë_£rül_numbî
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

260 { 
ngx_°rög
("s¶_˛õ¡_vîify"), 
NULL
, 
ngx_hâp_s¶_v¨übÀ
,

261 (
uöçå_t
Ë
ngx_s¶_gë_˛õ¡_vîify
, 
NGX_HTTP_VAR_CHANGEABLE
, 0 },

263 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

267 
ngx_°r_t
 
	gngx_hâp_s¶_£ss_id_˘x
 = 
ngx_°rög
("HTTP");

270 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


272 
	#NGX_HTTP_NPN_ADVERTISE
 "\x08hâp/1.1"

	)

275 
	$ngx_hâp_s¶_≈n_advîti£d
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
,

276 c⁄° **
out
, *
ouéí
, *
¨g
)

278 #i‡(
NGX_HTTP_SPDY
 || 
NGX_DEBUG
)

279 
ngx_c⁄√˘i⁄_t
 *
c
;

281 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

282 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "SSL NPNádvertised");

285 #i‡(
NGX_HTTP_SPDY
)

287 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

289 
hc
 = 
c
->
d©a
;

291 i‡(
hc
->
addr_c⁄f
->
•dy
) {

292 *
out
 = (*Ë
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
;

293 *
ouéí
 = (
NGX_SPDY_NPN_ADVERTISE
 
NGX_HTTP_NPN_ADVERTISE
) - 1;

295  
SSL_TLSEXT_ERR_OK
;

300 *
out
 = (*Ë
NGX_HTTP_NPN_ADVERTISE
;

301 *
ouéí
 = (
NGX_HTTP_NPN_ADVERTISE
) - 1;

303  
SSL_TLSEXT_ERR_OK
;

304 
	}
}

309 
ngx_öt_t


310 
	$ngx_hâp_s¶_°©ic_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

311 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

313 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

315 
size_t
 
Àn
;

316 
ngx_°r_t
 
s
;

318 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

320 (Ë
	`h™dÀr
(
r
->
c⁄√˘i⁄
, 
NULL
, &
s
);

322 
v
->
d©a
 = 
s
.data;

324 
Àn
 = 0; 
v
->
d©a
[len];Üen++) { }

326 
v
->
Àn
 =Üen;

327 
v
->
vÆid
 = 1;

328 
v
->
no_ˇchóbÀ
 = 0;

329 
v
->
nŸ_found
 = 0;

331  
NGX_OK
;

334 
v
->
nŸ_found
 = 1;

336  
NGX_OK
;

337 
	}
}

340 
ngx_öt_t


341 
	$ngx_hâp_s¶_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

342 
uöçå_t
 
d©a
)

344 
ngx_s¶_v¨übÀ_h™dÀr_±
 
h™dÀr
 = (ngx_s¶_v¨übÀ_h™dÀr_±Ë
d©a
;

346 
ngx_°r_t
 
s
;

348 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

350 i‡(
	`h™dÀr
(
r
->
c⁄√˘i⁄
,Ñ->
poﬁ
, &
s
Ë!
NGX_OK
) {

351  
NGX_ERROR
;

354 
v
->
Àn
 = 
s
.len;

355 
v
->
d©a
 = 
s
.data;

357 i‡(
v
->
Àn
) {

358 
v
->
vÆid
 = 1;

359 
v
->
no_ˇchóbÀ
 = 0;

360 
v
->
nŸ_found
 = 0;

362  
NGX_OK
;

366 
v
->
nŸ_found
 = 1;

368  
NGX_OK
;

369 
	}
}

372 
ngx_öt_t


373 
	$ngx_hâp_s¶_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

375 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

377 
v
 = 
ngx_hâp_s¶_v¨s
; v->
«me
.
Àn
; v++) {

378 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

379 i‡(
v¨
 =
NULL
) {

380  
NGX_ERROR
;

383 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

384 
v¨
->
d©a
 = 
v
->data;

387  
NGX_OK
;

388 
	}
}

392 
	$ngx_hâp_s¶_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

394 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

396 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_s¶_§v_c⁄f_t
));

397 i‡(
sscf
 =
NULL
) {

398  
NULL
;

418 
sscf
->
íabÀ
 = 
NGX_CONF_UNSET
;

419 
sscf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

420 
sscf
->
vîify
 = 
NGX_CONF_UNSET_UINT
;

421 
sscf
->
vîify_dïth
 = 
NGX_CONF_UNSET_UINT
;

422 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

423 
sscf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

424 
sscf
->
°≠lög
 = 
NGX_CONF_UNSET
;

425 
sscf
->
°≠lög_vîify
 = 
NGX_CONF_UNSET
;

427  
sscf
;

428 
	}
}

432 
	$ngx_hâp_s¶_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

434 
ngx_hâp_s¶_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

435 
ngx_hâp_s¶_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

437 
ngx_poﬁ_˛ónup_t
 *
˛n
;

439 i‡(
c⁄f
->
íabÀ
 =
NGX_CONF_UNSET
) {

440 i‡(
¥ev
->
íabÀ
 =
NGX_CONF_UNSET
) {

441 
c⁄f
->
íabÀ
 = 0;

444 
c⁄f
->
íabÀ
 = 
¥ev
->enable;

445 
c⁄f
->
fûe
 = 
¥ev
->file;

446 
c⁄f
->
löe
 = 
¥ev
->line;

450 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

451 
¥ev
->
£ssi⁄_timeout
, 300);

453 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

454 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

456 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

457 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


458 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

460 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify
, 
¥ev
->verify, 0);

461 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
vîify_dïth
, 
¥ev
->verify_depth, 1);

463 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

464 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

466 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

468 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˛õ¡_˚πifiˇã
, 
¥ev
->client_certificate,

470 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
åu°ed_˚πifiˇã
,

471 
¥ev
->
åu°ed_˚πifiˇã
, "");

472 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
¸l
, 
¥ev
->crl, "");

474 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

475 
NGX_DEFAULT_ECDH_CURVE
);

477 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

479 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög
, 
¥ev
->stapling, 0);

480 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
°≠lög_vîify
, 
¥ev
->stapling_verify, 0);

481 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_fûe
, 
¥ev
->stapling_file, "");

482 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
°≠lög_ª•⁄dî
,

483 
¥ev
->
°≠lög_ª•⁄dî
, "");

485 
c⁄f
->
s¶
.
log
 = 
cf
->log;

487 i‡(
c⁄f
->
íabÀ
) {

489 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

490 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

493 
c⁄f
->
fûe
, c⁄f->
löe
);

494  
NGX_CONF_ERROR
;

497 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

498 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

501 
c⁄f
->
fûe
, c⁄f->
löe
);

502  
NGX_CONF_ERROR
;

507 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

508  
NGX_CONF_OK
;

511 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

512 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

514 "f‹ cîtifiˇã \"%V\"", &
c⁄f
->
˚πifiˇã
);

515  
NGX_CONF_ERROR
;

519 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, c⁄fË!
NGX_OK
) {

520  
NGX_CONF_ERROR
;

523 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


525 i‡(
	`SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
c⁄f
->
s¶
.
˘x
,

526 
ngx_hâp_s¶_£rvî«me
)

529 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

537 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


538 
	`SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
c⁄f
->
s¶
.
˘x
,

539 
ngx_hâp_s¶_≈n_advîti£d
, 
NULL
);

542 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

543 i‡(
˛n
 =
NULL
) {

544  
NGX_CONF_ERROR
;

547 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

548 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

550 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

551 &
c⁄f
->
˚πifiˇã_key
)

552 !
NGX_OK
)

554  
NGX_CONF_ERROR
;

557 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

558 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

561 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

563 &
c⁄f
->
cùhîs
);

566 i‡(
c⁄f
->
vîify
) {

568 i‡(
c⁄f
->
˛õ¡_˚πifiˇã
.
Àn
 =0 && c⁄f->
vîify
 != 3) {

569 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

571  
NGX_CONF_ERROR
;

574 i‡(
	`ngx_s¶_˛õ¡_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

575 &
c⁄f
->
˛õ¡_˚πifiˇã
,

576 
c⁄f
->
vîify_dïth
)

577 !
NGX_OK
)

579  
NGX_CONF_ERROR
;

583 i‡(
	`ngx_s¶_åu°ed_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
,

584 &
c⁄f
->
åu°ed_˚πifiˇã
,

585 
c⁄f
->
vîify_dïth
)

586 !
NGX_OK
)

588  
NGX_CONF_ERROR
;

591 i‡(
	`ngx_s¶_¸l
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
¸l
Ë!
NGX_OK
) {

592  
NGX_CONF_ERROR
;

595 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

596 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

600 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

602 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

603  
NGX_CONF_ERROR
;

606 i‡(
	`ngx_s¶_ecdh_curve
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
ecdh_curve
Ë!
NGX_OK
) {

607  
NGX_CONF_ERROR
;

610 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

611 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

613 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

614 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

617 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_hâp_s¶_£ss_id_˘x
,

618 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

619 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

620 !
NGX_OK
)

622  
NGX_CONF_ERROR
;

625 i‡(
c⁄f
->
°≠lög
) {

627 i‡(
	`ngx_s¶_°≠lög
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
°≠lög_fûe
,

628 &
c⁄f
->
°≠lög_ª•⁄dî
, c⁄f->
°≠lög_vîify
)

629 !
NGX_OK
)

631  
NGX_CONF_ERROR
;

636  
NGX_CONF_OK
;

637 
	}
}

641 
	$ngx_hâp_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

643 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

645 *
rv
;

647 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

649 i‡(
rv
 !
NGX_CONF_OK
) {

650  
rv
;

653 
sscf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

654 
sscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

656  
NGX_CONF_OK
;

657 
	}
}

661 
	$ngx_hâp_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

663 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
 = 
c⁄f
;

665 
size_t
 
Àn
;

666 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

667 
ngx_öt_t
 
n
;

668 
ngx_uöt_t
 
i
, 
j
;

670 
vÆue
 = 
cf
->
¨gs
->
ñts
;

672 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

674 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

675 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

679 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

680 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

684 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

685 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

689 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

690 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

693 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

694 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

696 i‡(
n
 =
NGX_ERROR
) {

697 
övÆid
;

700 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

705 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

706 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

709 
Àn
 = 0;

711 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

712 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

716 
Àn
++;

719 i‡(
Àn
 == 0) {

720 
övÆid
;

723 
«me
.
Àn
 =Üen;

724 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

726 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

727 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

729 
n
 = 
	`ngx_∑r£_size
(&
size
);

731 i‡(
n
 =
NGX_ERROR
) {

732 
övÆid
;

735 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

736 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

738 &
vÆue
[
i
]);

740  
NGX_CONF_ERROR
;

743 
sscf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

744 &
ngx_hâp_s¶_moduÀ
);

745 i‡(
sscf
->
shm_z⁄e
 =
NULL
) {

746  
NGX_CONF_ERROR
;

749 
sscf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

754 
övÆid
;

757 i‡(
sscf
->
shm_z⁄e
 && sscf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

758 
sscf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

761  
NGX_CONF_OK
;

763 
övÆid
:

765 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

766 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

768  
NGX_CONF_ERROR
;

769 
	}
}

772 
ngx_öt_t


773 
	$ngx_hâp_s¶_öô
(
ngx_c⁄f_t
 *
cf
)

775 
ngx_uöt_t
 
s
;

776 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

777 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

778 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

779 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

781 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

782 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

784 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

786 
sscf
 = 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
ngx_hâp_s¶_moduÀ
.
˘x_ödex
];

788 i‡(
sscf
->
s¶
.
˘x
 =
NULL
 || !sscf->
°≠lög
) {

792 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

794 i‡(
	`ngx_s¶_°≠lög_ªsﬁvî
(
cf
, &
sscf
->
s¶
, 
˛cf
->
ªsﬁvî
,

795 
˛cf
->
ªsﬁvî_timeout
)

796 !
NGX_OK
)

798  
NGX_ERROR
;

802  
NGX_OK
;

803 
	}
}

	@src/http/modules/ngx_http_ssl_module.h

8 #i‚de‡
_NGX_HTTP_SSL_H_INCLUDED_


9 
	#_NGX_HTTP_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
ngx_Êag_t
 
	míabÀ
;

20 
ngx_s¶_t
 
	ms¶
;

22 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

24 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

26 
ngx_uöt_t
 
	mvîify
;

27 
ngx_uöt_t
 
	mvîify_dïth
;

29 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

31 
time_t
 
	m£ssi⁄_timeout
;

33 
ngx_°r_t
 
	m˚πifiˇã
;

34 
ngx_°r_t
 
	m˚πifiˇã_key
;

35 
ngx_°r_t
 
	mdh∑øm
;

36 
ngx_°r_t
 
	mecdh_curve
;

37 
ngx_°r_t
 
	m˛õ¡_˚πifiˇã
;

38 
ngx_°r_t
 
	måu°ed_˚πifiˇã
;

39 
ngx_°r_t
 
	m¸l
;

41 
ngx_°r_t
 
	mcùhîs
;

43 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

45 
ngx_Êag_t
 
	m°≠lög
;

46 
ngx_Êag_t
 
	m°≠lög_vîify
;

47 
ngx_°r_t
 
	m°≠lög_fûe
;

48 
ngx_°r_t
 
	m°≠lög_ª•⁄dî
;

50 
u_ch¨
 *
	mfûe
;

51 
ngx_uöt_t
 
	mlöe
;

52 } 
	tngx_hâp_s¶_§v_c⁄f_t
;

55 
ngx_moduÀ_t
 
ngx_hâp_s¶_moduÀ
;

	@src/http/modules/ngx_http_static_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
);

17 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ_˘x
 = {

18 
NULL
,

19 
ngx_hâp_°©ic_öô
,

21 
NULL
,

22 
NULL
,

24 
NULL
,

25 
NULL
,

27 
NULL
,

28 
NULL


32 
ngx_moduÀ_t
 
	gngx_hâp_°©ic_moduÀ
 = {

33 
NGX_MODULE_V1
,

34 &
ngx_hâp_°©ic_moduÀ_˘x
,

35 
NULL
,

36 
NGX_HTTP_MODULE
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NGX_MODULE_V1_PADDING


48 
ngx_öt_t


49 
	$ngx_hâp_°©ic_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

51 
u_ch¨
 *
œ°
, *
loˇti⁄
;

52 
size_t
 
roŸ
, 
Àn
;

53 
ngx_°r_t
 
∑th
;

54 
ngx_öt_t
 
rc
;

55 
ngx_uöt_t
 
Àvñ
;

56 
ngx_log_t
 *
log
;

57 
ngx_buf_t
 *
b
;

58 
ngx_chaö_t
 
out
;

59 
ngx_›í_fûe_öfo_t
 
of
;

60 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

62 i‡(!(
r
->
mëhod
 & (
NGX_HTTP_GET
|
NGX_HTTP_HEAD
|
NGX_HTTP_POST
))) {

63  
NGX_HTTP_NOT_ALLOWED
;

66 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

67  
NGX_DECLINED
;

70 
log
 = 
r
->
c⁄√˘i⁄
->log;

77 
œ°
 = 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

78 i‡(
œ°
 =
NULL
) {

79  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

82 
∑th
.
Àn
 = 
œ°
 -Ö©h.
d©a
;

84 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0,

85 "hâ∞fûíame: \"%s\"", 
∑th
.
d©a
);

87 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

89 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

91 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

92 
of
.
dúe˘io
 = 
˛cf
->directio;

93 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

94 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

95 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

96 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

98 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

99  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

102 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

103 !
NGX_OK
)

105 
of
.
îr
) {

108  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

110 
NGX_ENOENT
:

111 
NGX_ENOTDIR
:

112 
NGX_ENAMETOOLONG
:

114 
Àvñ
 = 
NGX_LOG_ERR
;

115 
rc
 = 
NGX_HTTP_NOT_FOUND
;

118 
NGX_EACCES
:

119 #i‡(
NGX_HAVE_OPENAT
)

120 
NGX_EMLINK
:

121 
NGX_ELOOP
:

124 
Àvñ
 = 
NGX_LOG_ERR
;

125 
rc
 = 
NGX_HTTP_FORBIDDEN
;

130 
Àvñ
 = 
NGX_LOG_CRIT
;

131 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

135 i‡(
rc
 !
NGX_HTTP_NOT_FOUND
 || 
˛cf
->
log_nŸ_found
) {

136 
	`ngx_log_îr‹
(
Àvñ
, 
log
, 
of
.
îr
,

137 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

140  
rc
;

143 
r
->
roŸ_ã°ed
 = !r->
îr‹_∑ge
;

145 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "hâ∞°©i¯fd: %d", 
of
.
fd
);

147 i‡(
of
.
is_dú
) {

149 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http dir");

151 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

153 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_∑Œoc
‘->
poﬁ
, (
ngx_èbÀ_ñt_t
));

154 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
Àn
 = 
r
->
uri
.len + 1;

160 i‡(!
˛cf
->
Æüs
 && clcf->
roŸ_Àngths
 =
NULL
 && 
r
->
¨gs
.
Àn
 == 0) {

161 
loˇti⁄
 = 
∑th
.
d©a
 + 
˛cf
->
roŸ
.
Àn
;

163 *
œ°
 = '/';

166 i‡(
r
->
¨gs
.
Àn
) {

167 
Àn
 +
r
->
¨gs
.len + 1;

170 
loˇti⁄
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

171 i‡(
loˇti⁄
 =
NULL
) {

172  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

175 
œ°
 = 
	`ngx_c›y
(
loˇti⁄
, 
r
->
uri
.
d©a
,Ñ->uri.
Àn
);

177 *
œ°
 = '/';

179 i‡(
r
->
¨gs
.
Àn
) {

180 *++
œ°
 = '?';

181 
	`ngx_mem˝y
(++
œ°
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

190 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

191 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 =Üocation;

193  
NGX_HTTP_MOVED_PERMANENTLY
;

196 #i‡!(
NGX_WIN32
)

198 i‡(!
of
.
is_fûe
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

200 "\"%s\" i†nŸáÑeguœ∏fûe", 
∑th
.
d©a
);

202  
NGX_HTTP_NOT_FOUND
;

207 i‡(
r
->
mëhod
 & 
NGX_HTTP_POST
) {

208  
NGX_HTTP_NOT_ALLOWED
;

211 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

213 i‡(
rc
 !
NGX_OK
) {

214  
rc
;

217 
log
->
a˘i⁄
 = "sendingÑesponseÅo client";

219 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

220 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
of
.
size
;

221 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
of
.
mtime
;

223 i‡(
	`ngx_hâp_£t_ëag
(
r
Ë!
NGX_OK
) {

224  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

227 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

228  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

231 i‡(
r
 !r->
maö
 && 
of
.
size
 == 0) {

232  
	`ngx_hâp_£nd_hódî
(
r
);

235 
r
->
Ælow_ønges
 = 1;

239 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

240 i‡(
b
 =
NULL
) {

241  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

244 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

245 i‡(
b
->
fûe
 =
NULL
) {

246  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

249 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

251 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

252  
rc
;

255 
b
->
fûe_pos
 = 0;

256 
b
->
fûe_œ°
 = 
of
.
size
;

258 
b
->
ö_fûe
 = b->
fûe_œ°
 ? 1: 0;

259 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

260 
b
->
œ°_ö_chaö
 = 1;

262 
b
->
fûe
->
fd
 = 
of
.fd;

263 
b
->
fûe
->
«me
 = 
∑th
;

264 
b
->
fûe
->
log
 =Üog;

265 
b
->
fûe
->
dúe˘io
 = 
of
.
is_dúe˘io
;

267 
out
.
buf
 = 
b
;

268 
out
.
√xt
 = 
NULL
;

270  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

271 
	}
}

274 
ngx_öt_t


275 
	$ngx_hâp_°©ic_öô
(
ngx_c⁄f_t
 *
cf
)

277 
ngx_hâp_h™dÀr_±
 *
h
;

278 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

280 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

282 
h
 = 
	`ngx_¨øy_push
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
);

283 i‡(
h
 =
NULL
) {

284  
NGX_ERROR
;

287 *
h
 = 
ngx_hâp_°©ic_h™dÀr
;

289  
NGX_OK
;

290 
	}
}

	@src/http/modules/ngx_http_stub_status_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

15 
ngx_öt_t
 
ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

17 *
ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

18 *
c⁄f
);

20 
ngx_comm™d_t
 
	gngx_hâp_°©us_comm™ds
[] = {

22 { 
ngx_°rög
("stub_status"),

23 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

24 
ngx_hâp_£t_°©us
,

27 
NULL
 },

29 
ngx_nuŒ_comm™d


34 
ngx_hâp_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ_˘x
 = {

35 
ngx_hâp_°ub_°©us_add_v¨übÀs
,

36 
NULL
,

38 
NULL
,

39 
NULL
,

41 
NULL
,

42 
NULL
,

44 
NULL
,

45 
NULL


49 
ngx_moduÀ_t
 
	gngx_hâp_°ub_°©us_moduÀ
 = {

50 
NGX_MODULE_V1
,

51 &
ngx_hâp_°ub_°©us_moduÀ_˘x
,

52 
ngx_hâp_°©us_comm™ds
,

53 
NGX_HTTP_MODULE
,

54 
NULL
,

55 
NULL
,

56 
NULL
,

57 
NULL
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NGX_MODULE_V1_PADDING


65 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_°ub_°©us_v¨s
[] = {

67 { 
ngx_°rög
("c⁄√˘i⁄s_a˘ive"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

68 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

70 { 
ngx_°rög
("c⁄√˘i⁄s_ªadög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

71 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

73 { 
ngx_°rög
("c⁄√˘i⁄s_wrôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

74 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

76 { 
ngx_°rög
("c⁄√˘i⁄s_waôög"), 
NULL
, 
ngx_hâp_°ub_°©us_v¨übÀ
,

77 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

79 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

83 
ngx_öt_t
 
	$ngx_hâp_°©us_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

85 
size_t
 
size
;

86 
ngx_öt_t
 
rc
;

87 
ngx_buf_t
 *
b
;

88 
ngx_chaö_t
 
out
;

89 
ngx_©omic_öt_t
 
≠
, 
hn
, 
ac
, 
rq
, 
rd
, 
wr
, 
wa
;

91 i‡(
r
->
mëhod
 !
NGX_HTTP_GET
 &&Ñ->mëhod !
NGX_HTTP_HEAD
) {

92  
NGX_HTTP_NOT_ALLOWED
;

95 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

97 i‡(
rc
 !
NGX_OK
) {

98  
rc
;

101 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/plain");

103 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

104 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

106 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

108 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

109  
rc
;

113 
size
 = ("A˘ivêc⁄√˘i⁄s: \n"Ë+ 
NGX_ATOMIC_T_LEN


115 + 6 + 3 * 
NGX_ATOMIC_T_LEN


116 + ("Ródög: Wrôög: Waôög: \n"Ë+ 3 * 
NGX_ATOMIC_T_LEN
;

118 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

119 i‡(
b
 =
NULL
) {

120  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

123 
out
.
buf
 = 
b
;

124 
out
.
√xt
 = 
NULL
;

126 
≠
 = *
ngx_°©_ac˚±ed
;

127 
hn
 = *
ngx_°©_h™dÀd
;

128 
ac
 = *
ngx_°©_a˘ive
;

129 
rq
 = *
ngx_°©_ªque°s
;

130 
rd
 = *
ngx_°©_ªadög
;

131 
wr
 = *
ngx_°©_wrôög
;

132 
wa
 = *
ngx_°©_waôög
;

134 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "A˘ivêc⁄√˘i⁄s: %uA \n", 
ac
);

136 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "serveráccepts handledÑequests\n",

139 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, " %uA %uA %uA \n", 
≠
, 
hn
, 
rq
);

141 
b
->
œ°
 = 
	`ngx_•rötf
(b->last, "Reading: %uA Writing: %uA Waiting: %uA \n",

142 
rd
, 
wr
, 
wa
);

144 
r
->
hódîs_out
.
°©us
 = 
NGX_HTTP_OK
;

145 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

147 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

149 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

151 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

152  
rc
;

155  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

156 
	}
}

159 
ngx_öt_t


160 
	$ngx_hâp_°ub_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

161 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

163 
u_ch¨
 *
p
;

164 
ngx_©omic_öt_t
 
vÆue
;

166 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

167 i‡(
p
 =
NULL
) {

168  
NGX_ERROR
;

171 
d©a
) {

173 
vÆue
 = *
ngx_°©_a˘ive
;

177 
vÆue
 = *
ngx_°©_ªadög
;

181 
vÆue
 = *
ngx_°©_wrôög
;

185 
vÆue
 = *
ngx_°©_waôög
;

190 
vÆue
 = 0;

194 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
vÆue
) -Ö;

195 
v
->
vÆid
 = 1;

196 
v
->
no_ˇchóbÀ
 = 0;

197 
v
->
nŸ_found
 = 0;

198 
v
->
d©a
 = 
p
;

200  
NGX_OK
;

201 
	}
}

204 
ngx_öt_t


205 
	$ngx_hâp_°ub_°©us_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

207 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

209 
v
 = 
ngx_hâp_°ub_°©us_v¨s
; v->
«me
.
Àn
; v++) {

210 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

211 i‡(
v¨
 =
NULL
) {

212  
NGX_ERROR
;

215 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

216 
v¨
->
d©a
 = 
v
->data;

219  
NGX_OK
;

220 
	}
}

223 *
	$ngx_hâp_£t_°©us
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

225 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

227 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

228 
˛cf
->
h™dÀr
 = 
ngx_hâp_°©us_h™dÀr
;

230  
NGX_CONF_OK
;

231 
	}
}

	@src/http/modules/ngx_http_sub_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_°r_t
 
	mm©ch
;

15 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

17 
ngx_hash_t
 
	mty≥s
;

19 
ngx_Êag_t
 
	m⁄˚
;

21 
ngx_¨øy_t
 *
	mty≥s_keys
;

22 } 
	tngx_hâp_sub_loc_c⁄f_t
;

26 
	msub_°¨t_°©e
 = 0,

27 
	msub_m©ch_°©e
,

28 } 
	tngx_hâp_sub_°©e_e
;

32 
ngx_°r_t
 
	mm©ch
;

33 
ngx_°r_t
 
	mßved
;

34 
ngx_°r_t
 
	mlooked
;

36 
ngx_uöt_t
 
	m⁄˚
;

38 
ngx_buf_t
 *
	mbuf
;

40 
u_ch¨
 *
	mpos
;

41 
u_ch¨
 *
	mc›y_°¨t
;

42 
u_ch¨
 *
	mc›y_íd
;

44 
ngx_chaö_t
 *
	mö
;

45 
ngx_chaö_t
 *
	mout
;

46 
ngx_chaö_t
 **
	mœ°_out
;

47 
ngx_chaö_t
 *
	mbusy
;

48 
ngx_chaö_t
 *
	m‰ì
;

50 
ngx_°r_t
 
	msub
;

52 
ngx_uöt_t
 
	m°©e
;

53 } 
	tngx_hâp_sub_˘x_t
;

56 
ngx_öt_t
 
ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
,

57 
ngx_hâp_sub_˘x_t
 *
˘x
);

58 
ngx_öt_t
 
ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_sub_˘x_t
 *
˘x
);

61 * 
ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

64 *
ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

65 *
∑ª¡
, *
chûd
);

66 
ngx_öt_t
 
ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

69 
ngx_comm™d_t
 
	gngx_hâp_sub_fûãr_comm™ds
[] = {

71 { 
ngx_°rög
("sub_filter"),

72 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

73 
ngx_hâp_sub_fûãr
,

74 
NGX_HTTP_LOC_CONF_OFFSET
,

76 
NULL
 },

78 { 
ngx_°rög
("sub_filter_types"),

79 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

80 
ngx_hâp_ty≥s_¶Ÿ
,

81 
NGX_HTTP_LOC_CONF_OFFSET
,

82 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
ty≥s_keys
),

83 &
ngx_hâp_html_deÁu…_ty≥s
[0] },

85 { 
ngx_°rög
("sub_filter_once"),

86 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

87 
ngx_c⁄f_£t_Êag_¶Ÿ
,

88 
NGX_HTTP_LOC_CONF_OFFSET
,

89 
off£tof
(
ngx_hâp_sub_loc_c⁄f_t
, 
⁄˚
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_hâp_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ_˘x
 = {

97 
NULL
,

98 
ngx_hâp_sub_fûãr_öô
,

100 
NULL
,

101 
NULL
,

103 
NULL
,

104 
NULL
,

106 
ngx_hâp_sub_¸óã_c⁄f
,

107 
ngx_hâp_sub_mîge_c⁄f


111 
ngx_moduÀ_t
 
	gngx_hâp_sub_fûãr_moduÀ
 = {

112 
NGX_MODULE_V1
,

113 &
ngx_hâp_sub_fûãr_moduÀ_˘x
,

114 
ngx_hâp_sub_fûãr_comm™ds
,

115 
NGX_HTTP_MODULE
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NULL
,

120 
NULL
,

121 
NULL
,

122 
NULL
,

123 
NGX_MODULE_V1_PADDING


127 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

128 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

131 
ngx_öt_t


132 
	$ngx_hâp_sub_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

134 
ngx_hâp_sub_˘x_t
 *
˘x
;

135 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

137 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

139 i‡(
¶cf
->
m©ch
.
Àn
 == 0

140 || 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 == 0

141 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
¶cf
->
ty≥s
Ë=
NULL
)

143  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

146 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_sub_˘x_t
));

147 i‡(
˘x
 =
NULL
) {

148  
NGX_ERROR
;

151 
˘x
->
ßved
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

152 i‡(
˘x
->
ßved
.
d©a
 =
NULL
) {

153  
NGX_ERROR
;

156 
˘x
->
looked
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
¶cf
->
m©ch
.
Àn
);

157 i‡(
˘x
->
looked
.
d©a
 =
NULL
) {

158  
NGX_ERROR
;

161 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_sub_fûãr_moduÀ
);

163 
˘x
->
m©ch
 = 
¶cf
->match;

164 
˘x
->
œ°_out
 = &˘x->
out
;

166 
r
->
fûãr_√ed_ö_mem‹y
 = 1;

168 i‡(
r
 =r->
maö
) {

169 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
);

170 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

171 
	`ngx_hâp_˛ór_ëag
(
r
);

174  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

175 
	}
}

178 
ngx_öt_t


179 
	$ngx_hâp_sub_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

181 
ngx_öt_t
 
rc
;

182 
ngx_buf_t
 *
b
;

183 
ngx_chaö_t
 *
˛
;

184 
ngx_hâp_sub_˘x_t
 *
˘x
;

185 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

187 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

189 i‡(
˘x
 =
NULL
) {

190  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

193 i‡((
ö
 =
NULL


194 && 
˘x
->
buf
 =
NULL


195 && 
˘x
->
ö
 =
NULL


196 && 
˘x
->
busy
 =
NULL
))

198  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

201 i‡(
˘x
->
⁄˚
 && (˘x->
buf
 =
NULL
 || ctx->
ö
 == NULL)) {

203 i‡(
˘x
->
busy
) {

204 i‡(
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
Ë=
NGX_ERROR
) {

205  
NGX_ERROR
;

209  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

214 i‡(
ö
) {

215 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
˘x
->
ö
, inË!
NGX_OK
) {

216  
NGX_ERROR
;

220 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

221 "hâ∞sub fûã∏\"%V\"", &
r
->
uri
);

223 
˘x
->
ö
 || ctx->
buf
) {

225 i‡(
˘x
->
buf
 =
NULL
) {

226 
˘x
->
buf
 = ctx->
ö
->buf;

227 
˘x
->
ö
 = ctx->ö->
√xt
;

228 
˘x
->
pos
 = ctx->
buf
->pos;

231 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

232 
˘x
->
c›y_°¨t
 = ctx->
pos
;

233 
˘x
->
c›y_íd
 = ctx->
pos
;

236 
b
 = 
NULL
;

238 
˘x
->
pos
 < ctx->
buf
->
œ°
) {

240 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

241 "ßved: \"%V\" sèã: %d", &
˘x
->
ßved
, ctx->
°©e
);

243 
rc
 = 
	`ngx_hâp_sub_∑r£
(
r
, 
˘x
);

245 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

247 
rc
, &
˘x
->
looked
, ctx->
c›y_°¨t
, ctx->
c›y_íd
);

249 i‡(
rc
 =
NGX_ERROR
) {

250  
rc
;

253 i‡(
˘x
->
c›y_°¨t
 !˘x->
c›y_íd
) {

255 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

256 "ßved: \"%V\"", &
˘x
->
ßved
);

258 i‡(
˘x
->
ßved
.
Àn
) {

260 i‡(
˘x
->
‰ì
) {

261 
˛
 = 
˘x
->
‰ì
;

262 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

263 
b
 = 
˛
->
buf
;

264 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

267 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

268 i‡(
b
 =
NULL
) {

269  
NGX_ERROR
;

272 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

273 i‡(
˛
 =
NULL
) {

274  
NGX_ERROR
;

277 
˛
->
buf
 = 
b
;

280 
b
->
pos
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
˘x
->
ßved
.
Àn
);

281 i‡(
b
->
pos
 =
NULL
) {

282  
NGX_ERROR
;

285 
	`ngx_mem˝y
(
b
->
pos
, 
˘x
->
ßved
.
d©a
, ctx->ßved.
Àn
);

286 
b
->
œ°
 = b->
pos
 + 
˘x
->
ßved
.
Àn
;

287 
b
->
mem‹y
 = 1;

289 *
˘x
->
œ°_out
 = 
˛
;

290 
˘x
->
œ°_out
 = &
˛
->
√xt
;

292 
˘x
->
ßved
.
Àn
 = 0;

295 i‡(
˘x
->
‰ì
) {

296 
˛
 = 
˘x
->
‰ì
;

297 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

298 
b
 = 
˛
->
buf
;

301 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

302 i‡(
b
 =
NULL
) {

303  
NGX_ERROR
;

306 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

307 i‡(
˛
 =
NULL
) {

308  
NGX_ERROR
;

311 
˛
->
buf
 = 
b
;

314 
	`ngx_mem˝y
(
b
, 
˘x
->
buf
, (
ngx_buf_t
));

316 
b
->
pos
 = 
˘x
->
c›y_°¨t
;

317 
b
->
œ°
 = 
˘x
->
c›y_íd
;

318 
b
->
shadow
 = 
NULL
;

319 
b
->
œ°_buf
 = 0;

320 
b
->
ªcy˛ed
 = 0;

322 i‡(
b
->
ö_fûe
) {

323 
b
->
fûe_œ°
 = b->
fûe_pos
 + (b->
œ°
 - 
˘x
->
buf
->
pos
);

324 
b
->
fûe_pos
 +b->
pos
 - 
˘x
->
buf
->pos;

327 
˛
->
√xt
 = 
NULL
;

328 *
˘x
->
œ°_out
 = 
˛
;

329 
˘x
->
œ°_out
 = &
˛
->
√xt
;

332 i‡(
˘x
->
°©e
 =
sub_°¨t_°©e
) {

333 
˘x
->
c›y_°¨t
 = ctx->
pos
;

334 
˘x
->
c›y_íd
 = ctx->
pos
;

337 
˘x
->
c›y_°¨t
 = 
NULL
;

338 
˘x
->
c›y_íd
 = 
NULL
;

341 i‡(
rc
 =
NGX_AGAIN
) {

348 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

349 i‡(
b
 =
NULL
) {

350  
NGX_ERROR
;

353 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

354 i‡(
˛
 =
NULL
) {

355  
NGX_ERROR
;

358 
¶cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_sub_fûãr_moduÀ
);

360 i‡(
˘x
->
sub
.
d©a
 =
NULL
) {

362 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
¶cf
->
vÆue
, &
˘x
->
sub
)

363 !
NGX_OK
)

365  
NGX_ERROR
;

369 i‡(
˘x
->
sub
.
Àn
) {

370 
b
->
mem‹y
 = 1;

371 
b
->
pos
 = 
˘x
->
sub
.
d©a
;

372 
b
->
œ°
 = 
˘x
->
sub
.
d©a
 + ctx->sub.
Àn
;

375 
b
->
sync
 = 1;

378 
˛
->
buf
 = 
b
;

379 
˛
->
√xt
 = 
NULL
;

380 *
˘x
->
œ°_out
 = 
˛
;

381 
˘x
->
œ°_out
 = &
˛
->
√xt
;

383 
˘x
->
⁄˚
 = 
¶cf
->once;

388 i‡(
˘x
->
buf
->
œ°_buf
 || 
	`ngx_buf_ö_mem‹y
(ctx->buf)) {

389 i‡(
b
 =
NULL
) {

390 i‡(
˘x
->
‰ì
) {

391 
˛
 = 
˘x
->
‰ì
;

392 
˘x
->
‰ì
 = ctx->‰ì->
√xt
;

393 
b
 = 
˛
->
buf
;

394 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

397 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

398 i‡(
b
 =
NULL
) {

399  
NGX_ERROR
;

402 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

403 i‡(
˛
 =
NULL
) {

404  
NGX_ERROR
;

407 
˛
->
buf
 = 
b
;

410 
b
->
sync
 = 1;

412 
˛
->
√xt
 = 
NULL
;

413 *
˘x
->
œ°_out
 = 
˛
;

414 
˘x
->
œ°_out
 = &
˛
->
√xt
;

417 
b
->
œ°_buf
 = 
˘x
->
buf
->last_buf;

418 
b
->
shadow
 = 
˘x
->
buf
;

420 
b
->
ªcy˛ed
 = 
˘x
->
buf
->recycled;

423 
˘x
->
buf
 = 
NULL
;

425 
˘x
->
ßved
.
Àn
 = ctx->
looked
.len;

426 
	`ngx_mem˝y
(
˘x
->
ßved
.
d©a
, ctx->
looked
.d©a, ctx->looked.
Àn
);

429 i‡(
˘x
->
out
 =
NULL
 && ctx->
busy
 == NULL) {

430  
NGX_OK
;

433  
	`ngx_hâp_sub_ouçut
(
r
, 
˘x
);

434 
	}
}

437 
ngx_öt_t


438 
	$ngx_hâp_sub_ouçut
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

440 
ngx_öt_t
 
rc
;

441 
ngx_buf_t
 *
b
;

442 
ngx_chaö_t
 *
˛
;

445 
b
 = 
NULL
;

446 
˛
 = 
˘x
->
out
; cl; c»˛->
√xt
) {

447 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

448 "sub out: %∞%p", 
˛
->
buf
, cl->buf->
pos
);

449 i‡(
˛
->
buf
 =
b
) {

450 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

452 
	`ngx_debug_poöt
();

453  
NGX_ERROR
;

455 
b
 = 
˛
->
buf
;

459 
rc
 = 
	`ngx_hâp_√xt_body_fûãr
(
r
, 
˘x
->
out
);

461 i‡(
˘x
->
busy
 =
NULL
) {

462 
˘x
->
busy
 = ctx->
out
;

465 
˛
 = 
˘x
->
busy
; cl->
√xt
; cl = cl->next) { }

466 
˛
->
√xt
 = 
˘x
->
out
;

469 
˘x
->
out
 = 
NULL
;

470 
˘x
->
œ°_out
 = &˘x->
out
;

472 
˘x
->
busy
) {

474 
˛
 = 
˘x
->
busy
;

475 
b
 = 
˛
->
buf
;

477 i‡(
	`ngx_buf_size
(
b
) != 0) {

481 i‡(
b
->
shadow
) {

482 
b
->
shadow
->
pos
 = b->shadow->
œ°
;

485 
˘x
->
busy
 = 
˛
->
√xt
;

487 i‡(
	`ngx_buf_ö_mem‹y
(
b
Ë|| b->
ö_fûe
) {

490 
˛
->
√xt
 = 
˘x
->
‰ì
;

491 
˘x
->
‰ì
 = 
˛
;

495 i‡(
˘x
->
ö
 || ctx->
buf
) {

496 
r
->
buf„ªd
 |
NGX_HTTP_SUB_BUFFERED
;

499 
r
->
buf„ªd
 &~
NGX_HTTP_SUB_BUFFERED
;

502  
rc
;

503 
	}
}

506 
ngx_öt_t


507 
	$ngx_hâp_sub_∑r£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_sub_˘x_t
 *
˘x
)

509 
u_ch¨
 *
p
, *
œ°
, *
c›y_íd
, 
ch
, 
m©ch
;

510 
size_t
 
looked
;

511 
ngx_hâp_sub_°©e_e
 
°©e
;

513 i‡(
˘x
->
⁄˚
) {

514 
˘x
->
c›y_°¨t
 = ctx->
pos
;

515 
˘x
->
c›y_íd
 = ctx->
buf
->
œ°
;

516 
˘x
->
pos
 = ctx->
buf
->
œ°
;

517 
˘x
->
looked
.
Àn
 = 0;

519 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "once");

521  
NGX_AGAIN
;

524 
°©e
 = 
˘x
->state;

525 
looked
 = 
˘x
->looked.
Àn
;

526 
œ°
 = 
˘x
->
buf
->last;

527 
c›y_íd
 = 
˘x
->copy_end;

529 
p
 = 
˘x
->
pos
;Ö < 
œ°
;Ö++) {

531 
ch
 = *
p
;

532 
ch
 = 
	`ngx_tﬁowî
(ch);

534 i‡(
°©e
 =
sub_°¨t_°©e
) {

538 
m©ch
 = 
˘x
->m©ch.
d©a
[0];

541 i‡(
ch
 =
m©ch
) {

542 
c›y_íd
 = 
p
;

543 
˘x
->
looked
.
d©a
[0] = *
p
;

544 
looked
 = 1;

545 
°©e
 = 
sub_m©ch_°©e
;

547 
m©ch_°¨ãd
;

550 i‡(++
p
 =
œ°
) {

554 
ch
 = *
p
;

555 
ch
 = 
	`ngx_tﬁowî
(ch);

558 
˘x
->
°©e
 = state;

559 
˘x
->
pos
 = 
p
;

560 
˘x
->
looked
.
Àn
 =Üooked;

561 
˘x
->
c›y_íd
 = 
p
;

563 i‡(
˘x
->
c›y_°¨t
 =
NULL
) {

564 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

567  
NGX_AGAIN
;

569 
m©ch_°¨ãd
:

576 i‡(
ch
 =
˘x
->
m©ch
.
d©a
[
looked
]) {

577 
˘x
->
looked
.
d©a
[looked] = *
p
;

578 
looked
++;

580 i‡(
looked
 =
˘x
->
m©ch
.
Àn
) {

581 i‡((
size_t
Ë(
p
 - 
˘x
->
pos
Ë< 
looked
) {

582 
˘x
->
ßved
.
Àn
 = 0;

585 
˘x
->
°©e
 = 
sub_°¨t_°©e
;

586 
˘x
->
pos
 = 
p
 + 1;

587 
˘x
->
looked
.
Àn
 = 0;

588 
˘x
->
c›y_íd
 = copy_end;

590 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && 
c›y_íd
) {

591 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

594  
NGX_OK
;

597 } i‡(
ch
 =
˘x
->
m©ch
.
d©a
[0]) {

598 
c›y_íd
 = 
p
;

599 
˘x
->
looked
.
d©a
[0] = *
p
;

600 
looked
 = 1;

603 
c›y_íd
 = 
p
;

604 
looked
 = 0;

605 
°©e
 = 
sub_°¨t_°©e
;

609 
˘x
->
°©e
 = state;

610 
˘x
->
pos
 = 
p
;

611 
˘x
->
looked
.
Àn
 =Üooked;

613 
˘x
->
c›y_íd
 = (
°©e
 =
sub_°¨t_°©e
Ë? 
p
 : copy_end;

615 i‡(
˘x
->
c›y_°¨t
 =
NULL
 && ctx->
c›y_íd
) {

616 
˘x
->
c›y_°¨t
 = ctx->
buf
->
pos
;

619  
NGX_AGAIN
;

620 
	}
}

624 
	$ngx_hâp_sub_fûãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

626 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
 = 
c⁄f
;

628 
ngx_°r_t
 *
vÆue
;

629 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

631 i‡(
¶cf
->
m©ch
.
d©a
) {

635 
vÆue
 = 
cf
->
¨gs
->
ñts
;

637 
	`ngx_°æow
(
vÆue
[1].
d©a
, vÆue[1].d©a, vÆue[1].
Àn
);

639 
¶cf
->
m©ch
 = 
vÆue
[1];

641 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

643 
ccv
.
cf
 = cf;

644 
ccv
.
vÆue
 = &value[2];

645 
ccv
.
com∂ex_vÆue
 = &
¶cf
->
vÆue
;

647 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

648  
NGX_CONF_ERROR
;

651  
NGX_CONF_OK
;

652 
	}
}

656 
	$ngx_hâp_sub_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

658 
ngx_hâp_sub_loc_c⁄f_t
 *
¶cf
;

660 
¶cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_sub_loc_c⁄f_t
));

661 i‡(
¶cf
 =
NULL
) {

662  
NULL
;

676 
¶cf
->
⁄˚
 = 
NGX_CONF_UNSET
;

678  
¶cf
;

679 
	}
}

683 
	$ngx_hâp_sub_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

685 
ngx_hâp_sub_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

686 
ngx_hâp_sub_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

688 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
⁄˚
, 
¥ev
->once, 1);

689 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
m©ch
, 
¥ev
->match, "");

691 i‡(
c⁄f
->
vÆue
.vÆue.
d©a
 =
NULL
) {

692 
c⁄f
->
vÆue
 = 
¥ev
->value;

695 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

696 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

697 
ngx_hâp_html_deÁu…_ty≥s
)

698 !
NGX_OK
)

700  
NGX_CONF_ERROR
;

703  
NGX_CONF_OK
;

704 
	}
}

707 
ngx_öt_t


708 
	$ngx_hâp_sub_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

710 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

711 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_sub_hódî_fûãr
;

713 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

714 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_sub_body_fûãr
;

716  
NGX_OK
;

717 
	}
}

	@src/http/modules/ngx_http_upstream_ip_hash_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

15 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

17 
ngx_uöt_t
 
	mhash
;

19 
u_ch¨
 
	maddæí
;

20 
u_ch¨
 *
	maddr
;

22 
u_ch¨
 
	måõs
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 } 
	tngx_hâp_up°ªam_ù_hash_≥î_d©a_t
;

28 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

31 *
d©a
);

32 *
ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

33 *
c⁄f
);

36 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_ù_hash_comm™ds
[] = {

38 { 
ngx_°rög
("ip_hash"),

39 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

40 
ngx_hâp_up°ªam_ù_hash
,

43 
NULL
 },

45 
ngx_nuŒ_comm™d


49 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ_˘x
 = {

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
NULL
,

57 
NULL
,

59 
NULL
,

60 
NULL


64 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_ù_hash_moduÀ
 = {

65 
NGX_MODULE_V1
,

66 &
ngx_hâp_up°ªam_ù_hash_moduÀ_˘x
,

67 
ngx_hâp_up°ªam_ù_hash_comm™ds
,

68 
NGX_HTTP_MODULE
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NGX_MODULE_V1_PADDING


80 
u_ch¨
 
	gngx_hâp_up°ªam_ù_hash_p£udo_addr
[3];

83 
ngx_öt_t


84 
	$ngx_hâp_up°ªam_öô_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

86 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

87  
NGX_ERROR
;

90 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_ù_hash_≥î
;

92  
NGX_OK
;

93 
	}
}

96 
ngx_öt_t


97 
	$ngx_hâp_up°ªam_öô_ù_hash_≥î
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

100 
sockaddr_ö
 *
sö
;

101 #i‡(
NGX_HAVE_INET6
)

102 
sockaddr_ö6
 *
sö6
;

104 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
;

106 
ùhp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
));

107 i‡(
ùhp
 =
NULL
) {

108  
NGX_ERROR
;

111 
r
->
up°ªam
->
≥î
.
d©a
 = &
ùhp
->
ºp
;

113 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

114  
NGX_ERROR
;

117 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_ù_hash_≥î
;

119 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

121 
AF_INET
:

122 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

123 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
.
s_addr
;

124 
ùhp
->
addæí
 = 3;

127 #i‡(
NGX_HAVE_INET6
)

128 
AF_INET6
:

129 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

130 
ùhp
->
addr
 = (
u_ch¨
 *Ë&
sö6
->
sö6_addr
.
s6_addr
;

131 
ùhp
->
addæí
 = 16;

136 
ùhp
->
addr
 = 
ngx_hâp_up°ªam_ù_hash_p£udo_addr
;

137 
ùhp
->
addæí
 = 3;

140 
ùhp
->
hash
 = 89;

141 
ùhp
->
åõs
 = 0;

142 
ùhp
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

144  
NGX_OK
;

145 
	}
}

148 
ngx_öt_t


149 
	$ngx_hâp_up°ªam_gë_ù_hash_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

151 
ngx_hâp_up°ªam_ù_hash_≥î_d©a_t
 *
ùhp
 = 
d©a
;

153 
time_t
 
now
;

154 
ngx_öt_t
 
w
;

155 
uöçå_t
 
m
;

156 
ngx_uöt_t
 
i
, 
n
, 
p
, 
hash
;

157 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

159 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

160 "gë i∞hashÖìr,Åry: %ui", 
pc
->
åõs
);

164 i‡(
ùhp
->
åõs
 > 20 || iphp->
ºp
.
≥îs
->
sögÀ
) {

165  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

168 
now
 = 
	`ngx_time
();

170 
pc
->
ˇched
 = 0;

171 
pc
->
c⁄√˘i⁄
 = 
NULL
;

173 
hash
 = 
ùhp
->hash;

177 
i
 = 0; i < 
ùhp
->
addæí
; i++) {

178 
hash
 = (hash * 113 + 
ùhp
->
addr
[
i
]) % 6271;

181 i‡(!
ùhp
->
ºp
.
≥îs
->
weighãd
) {

182 
p
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
numbî
;

185 
w
 = 
hash
 % 
ùhp
->
ºp
.
≥îs
->
tŸÆ_weight
;

187 
i
 = 0; i < 
ùhp
->
ºp
.
≥îs
->
numbî
; i++) {

188 
w
 -
ùhp
->
ºp
.
≥îs
->
≥î
[
i
].
weight
;

189 i‡(
w
 < 0) {

194 
p
 = 
i
;

197 
n
 = 
p
 / (8 * (
uöçå_t
));

198 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

200 i‡(!(
ùhp
->
ºp
.
åõd
[
n
] & 
m
)) {

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

203 "gë i∞hashÖìr, hash: %uò%04XA", 
p
, 
m
);

205 
≥î
 = &
ùhp
->
ºp
.
≥îs
->≥î[
p
];

209 i‡(!
≥î
->
down
) {

211 i‡(
≥î
->
max_Áûs
 =0 ||Öìr->
Áûs
 <Öeer->max_fails) {

215 i‡(
now
 - 
≥î
->
checked
 >Öìr->
Áû_timeout
) {

216 
≥î
->
checked
 = 
now
;

221 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

225 
pc
->
åõs
--;

228 i‡(++
ùhp
->
åõs
 >= 20) {

229  
ùhp
->
	`gë_º_≥î
(
pc
, &ùhp->
ºp
);

233 
ùhp
->
ºp
.
cuºít
 = 
p
;

235 
pc
->
sockaddr
 = 
≥î
->sockaddr;

236 
pc
->
sockÀn
 = 
≥î
->socklen;

237 
pc
->
«me
 = &
≥î
->name;

241 
ùhp
->
ºp
.
åõd
[
n
] |
m
;

242 
ùhp
->
hash
 = hash;

244  
NGX_OK
;

245 
	}
}

249 
	$ngx_hâp_up°ªam_ù_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

251 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

253 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

255 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

256 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

260 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_ù_hash
;

262 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


263 |
NGX_HTTP_UPSTREAM_WEIGHT


264 |
NGX_HTTP_UPSTREAM_MAX_FAILS


265 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


266 |
NGX_HTTP_UPSTREAM_DOWN
;

268  
NGX_CONF_OK
;

269 
	}
}

	@src/http/modules/ngx_http_upstream_keepalive_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 
	mmax_ˇched
;

16 
ngx_queue_t
 
	mˇche
;

17 
ngx_queue_t
 
	m‰ì
;

19 
ngx_hâp_up°ªam_öô_±
 
	m‹igöÆ_öô_up°ªam
;

20 
ngx_hâp_up°ªam_öô_≥î_±
 
	m‹igöÆ_öô_≥î
;

22 } 
	tngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
;

26 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

28 
ngx_hâp_up°ªam_t
 *
	mup°ªam
;

30 *
	md©a
;

32 
ngx_evít_gë_≥î_±
 
	m‹igöÆ_gë_≥î
;

33 
ngx_evít_‰ì_≥î_±
 
	m‹igöÆ_‰ì_≥î
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_evít_£t_≥î_£ssi⁄_±
 
	m‹igöÆ_£t_£ssi⁄
;

37 
ngx_evít_ßve_≥î_£ssi⁄_±
 
	m‹igöÆ_ßve_£ssi⁄
;

40 } 
	tngx_hâp_up°ªam_kì∑live_≥î_d©a_t
;

44 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
	mc⁄f
;

46 
ngx_queue_t
 
	mqueue
;

47 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

49 
sockÀn_t
 
	msockÀn
;

50 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

52 } 
	tngx_hâp_up°ªam_kì∑live_ˇche_t
;

55 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

57 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

58 *
d©a
);

59 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

60 *
d©a
, 
ngx_uöt_t
 
°©e
);

62 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

63 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

64 
ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 #i‡(
NGX_HTTP_SSL
)

68 
ngx_öt_t
 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(

69 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

70 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

71 *
d©a
);

74 *
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

75 *
ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

76 *
c⁄f
);

79 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_kì∑live_comm™ds
[] = {

81 { 
ngx_°rög
("keepalive"),

82 
NGX_HTTP_UPS_CONF
|
NGX_CONF_TAKE12
,

83 
ngx_hâp_up°ªam_kì∑live
,

86 
NULL
 },

88 
ngx_nuŒ_comm™d


92 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ_˘x
 = {

93 
NULL
,

94 
NULL
,

96 
NULL
,

97 
NULL
,

99 
ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
,

100 
NULL
,

102 
NULL
,

103 
NULL


107 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_kì∑live_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_hâp_up°ªam_kì∑live_moduÀ_˘x
,

110 
ngx_hâp_up°ªam_kì∑live_comm™ds
,

111 
NGX_HTTP_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


123 
ngx_öt_t


124 
	$ngx_hâp_up°ªam_öô_kì∑live
(
ngx_c⁄f_t
 *
cf
,

125 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

127 
ngx_uöt_t
 
i
;

128 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

129 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ˇched
;

131 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

134 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

135 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

137 i‡(
kcf
->
	`‹igöÆ_öô_up°ªam
(
cf
, 
us
Ë!
NGX_OK
) {

138  
NGX_ERROR
;

141 
kcf
->
‹igöÆ_öô_≥î
 = 
us
->
≥î
.
öô
;

143 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_kì∑live_≥î
;

147 
ˇched
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

148 (
ngx_hâp_up°ªam_kì∑live_ˇche_t
Ë* 
kcf
->
max_ˇched
);

149 i‡(
ˇched
 =
NULL
) {

150  
NGX_ERROR
;

153 
	`ngx_queue_öô
(&
kcf
->
ˇche
);

154 
	`ngx_queue_öô
(&
kcf
->
‰ì
);

156 
i
 = 0; i < 
kcf
->
max_ˇched
; i++) {

157 
	`ngx_queue_ö£π_hód
(&
kcf
->
‰ì
, &
ˇched
[
i
].
queue
);

158 
ˇched
[
i
].
c⁄f
 = 
kcf
;

161  
NGX_OK
;

162 
	}
}

165 
ngx_öt_t


166 
	$ngx_hâp_up°ªam_öô_kì∑live_≥î
(
ngx_hâp_ªque°_t
 *
r
,

167 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

169 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
;

170 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

172 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

175 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

176 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

178 
kp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
));

179 i‡(
kp
 =
NULL
) {

180  
NGX_ERROR
;

183 i‡(
kcf
->
	`‹igöÆ_öô_≥î
(
r
, 
us
Ë!
NGX_OK
) {

184  
NGX_ERROR
;

187 
kp
->
c⁄f
 = 
kcf
;

188 
kp
->
up°ªam
 = 
r
->upstream;

189 
kp
->
d©a
 = 
r
->
up°ªam
->
≥î
.data;

190 
kp
->
‹igöÆ_gë_≥î
 = 
r
->
up°ªam
->
≥î
.
gë
;

191 
kp
->
‹igöÆ_‰ì_≥î
 = 
r
->
up°ªam
->
≥î
.
‰ì
;

193 
r
->
up°ªam
->
≥î
.
d©a
 = 
kp
;

194 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_kì∑live_≥î
;

195 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_kì∑live_≥î
;

197 #i‡(
NGX_HTTP_SSL
)

198 
kp
->
‹igöÆ_£t_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
;

199 
kp
->
‹igöÆ_ßve_£ssi⁄
 = 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
;

200 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
;

201 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
;

204  
NGX_OK
;

205 
	}
}

208 
ngx_öt_t


209 
	$ngx_hâp_up°ªam_gë_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

211 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

212 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

214 
ngx_öt_t
 
rc
;

215 
ngx_queue_t
 *
q
, *
ˇche
;

216 
ngx_c⁄√˘i⁄_t
 *
c
;

218 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

223 
rc
 = 
kp
->
	`‹igöÆ_gë_≥î
(
pc
, kp->
d©a
);

225 i‡(
rc
 !
NGX_OK
) {

226  
rc
;

231 
ˇche
 = &
kp
->
c⁄f
->cache;

233 
q
 = 
	`ngx_queue_hód
(
ˇche
);

234 
q
 !
	`ngx_queue_£¡öñ
(
ˇche
);

235 
q
 = 
	`ngx_queue_√xt
(q))

237 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

238 
c
 = 
ôem
->
c⁄√˘i⁄
;

240 i‡(
	`ngx_memn2cmp
((
u_ch¨
 *Ë&
ôem
->
sockaddr
, (u_ch¨ *Ë
pc
->sockaddr,

241 
ôem
->
sockÀn
, 
pc
->socklen)

244 
	`ngx_queue_ªmove
(
q
);

245 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
‰ì
, 
q
);

247 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

248 "gë kì∑livê≥î: usög c⁄√˘i⁄ %p", 
c
);

250 
c
->
idÀ
 = 0;

251 
c
->
log
 = 
pc
->log;

252 
c
->
ªad
->
log
 = 
pc
->log;

253 
c
->
wrôe
->
log
 = 
pc
->log;

254 
c
->
poﬁ
->
log
 = 
pc
->log;

256 
pc
->
c⁄√˘i⁄
 = 
c
;

257 
pc
->
ˇched
 = 1;

259  
NGX_DONE
;

263  
NGX_OK
;

264 
	}
}

268 
	$ngx_hâp_up°ªam_‰ì_kì∑live_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

269 
ngx_uöt_t
 
°©e
)

271 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

272 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

274 
ngx_queue_t
 *
q
;

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_hâp_up°ªam_t
 *
u
;

278 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

283 
u
 = 
kp
->
up°ªam
;

284 
c
 = 
pc
->
c⁄√˘i⁄
;

286 i‡(
°©e
 & 
NGX_PEER_FAILED


287 || 
c
 =
NULL


288 || 
c
->
ªad
->
eof


289 || 
c
->
ªad
->
îr‹


290 || 
c
->
ªad
->
timedout


291 || 
c
->
wrôe
->
îr‹


292 || 
c
->
wrôe
->
timedout
)

294 
övÆid
;

297 i‡(!
u
->
kì∑live
) {

298 
övÆid
;

301 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

302 
övÆid
;

305 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

306 "‰ì kì∑livê≥î: savög c⁄√˘i⁄ %p", 
c
);

308 i‡(
	`ngx_queue_em±y
(&
kp
->
c⁄f
->
‰ì
)) {

310 
q
 = 
	`ngx_queue_œ°
(&
kp
->
c⁄f
->
ˇche
);

311 
	`ngx_queue_ªmove
(
q
);

313 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

315 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
ôem
->
c⁄√˘i⁄
);

318 
q
 = 
	`ngx_queue_hód
(&
kp
->
c⁄f
->
‰ì
);

319 
	`ngx_queue_ªmove
(
q
);

321 
ôem
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_up°ªam_kì∑live_ˇche_t
, 
queue
);

324 
ôem
->
c⁄√˘i⁄
 = 
c
;

325 
	`ngx_queue_ö£π_hód
(&
kp
->
c⁄f
->
ˇche
, 
q
);

327 
pc
->
c⁄√˘i⁄
 = 
NULL
;

329 i‡(
c
->
ªad
->
timî_£t
) {

330 
	`ngx_dñ_timî
(
c
->
ªad
);

332 i‡(
c
->
wrôe
->
timî_£t
) {

333 
	`ngx_dñ_timî
(
c
->
wrôe
);

336 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
;

337 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
;

339 
c
->
d©a
 = 
ôem
;

340 
c
->
idÀ
 = 1;

341 
c
->
log
 = 
ngx_cy˛e
->log;

342 
c
->
ªad
->
log
 = 
ngx_cy˛e
->log;

343 
c
->
wrôe
->
log
 = 
ngx_cy˛e
->log;

344 
c
->
poﬁ
->
log
 = 
ngx_cy˛e
->log;

346 
ôem
->
sockÀn
 = 
pc
->socklen;

347 
	`ngx_mem˝y
(&
ôem
->
sockaddr
, 
pc
->sockaddr,Öc->
sockÀn
);

349 i‡(
c
->
ªad
->
ªady
) {

350 
	`ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
c
->
ªad
);

353 
övÆid
:

355 
kp
->
	`‹igöÆ_‰ì_≥î
(
pc
, kp->
d©a
, 
°©e
);

356 
	}
}

360 
	$ngx_hâp_up°ªam_kì∑live_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

362 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

364 
	}
}

368 
	$ngx_hâp_up°ªam_kì∑live_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
)

370 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

371 
ngx_hâp_up°ªam_kì∑live_ˇche_t
 *
ôem
;

373 
n
;

374 
buf
[1];

375 
ngx_c⁄√˘i⁄_t
 *
c
;

377 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

380 
c
 = 
ev
->
d©a
;

382 i‡(
c
->
˛o£
) {

383 
˛o£
;

386 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

388 i‡(
n
 =-1 && 
ngx_sockë_î∫o
 =
NGX_EAGAIN
) {

391 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

392 
˛o£
;

398 
˛o£
:

400 
ôem
 = 
c
->
d©a
;

401 
c⁄f
 = 
ôem
->conf;

403 
	`ngx_hâp_up°ªam_kì∑live_˛o£
(
c
);

405 
	`ngx_queue_ªmove
(&
ôem
->
queue
);

406 
	`ngx_queue_ö£π_hód
(&
c⁄f
->
‰ì
, &
ôem
->
queue
);

407 
	}
}

411 
	$ngx_hâp_up°ªam_kì∑live_˛o£
(
ngx_c⁄√˘i⁄_t
 *
c
)

414 #i‡(
NGX_HTTP_SSL
)

416 i‡(
c
->
s¶
) {

417 
c
->
s¶
->
no_waô_shutdown
 = 1;

418 
c
->
s¶
->
no_£nd_shutdown
 = 1;

420 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

421 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_kì∑live_˛o£
;

428 
	`ngx_de°roy_poﬁ
(
c
->
poﬁ
);

429 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

430 
	}
}

433 #i‡(
NGX_HTTP_SSL
)

435 
ngx_öt_t


436 
	$ngx_hâp_up°ªam_kì∑live_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

438 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

440  
kp
->
	`‹igöÆ_£t_£ssi⁄
(
pc
, kp->
d©a
);

441 
	}
}

445 
	$ngx_hâp_up°ªam_kì∑live_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

447 
ngx_hâp_up°ªam_kì∑live_≥î_d©a_t
 *
kp
 = 
d©a
;

449 
kp
->
	`‹igöÆ_ßve_£ssi⁄
(
pc
, kp->
d©a
);

451 
	}
}

457 
	$ngx_hâp_up°ªam_kì∑live_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

459 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
c⁄f
;

461 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

462 (
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
));

463 i‡(
c⁄f
 =
NULL
) {

464  
NULL
;

474 
c⁄f
->
max_ˇched
 = 1;

476  
c⁄f
;

477 
	}
}

481 
	$ngx_hâp_up°ªam_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

483 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

484 
ngx_hâp_up°ªam_kì∑live_§v_c⁄f_t
 *
kcf
;

486 
ngx_öt_t
 
n
;

487 
ngx_°r_t
 *
vÆue
;

488 
ngx_uöt_t
 
i
;

490 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

492 
kcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
,

493 
ngx_hâp_up°ªam_kì∑live_moduÀ
);

495 i‡(
kcf
->
‹igöÆ_öô_up°ªam
) {

499 
kcf
->
‹igöÆ_öô_up°ªam
 = 
uscf
->
≥î
.
öô_up°ªam


500 ? 
uscf
->
≥î
.
öô_up°ªam


501 : 
ngx_hâp_up°ªam_öô_round_robö
;

503 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_kì∑live
;

507 
vÆue
 = 
cf
->
¨gs
->
ñts
;

509 
n
 = 
	`ngx_©oi
(
vÆue
[1].
d©a
, vÆue[1].
Àn
);

511 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

512 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

514 &
vÆue
[1], &
cmd
->
«me
);

515  
NGX_CONF_ERROR
;

518 
kcf
->
max_ˇched
 = 
n
;

520 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

522 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "single") == 0) {

523 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

528 
övÆid
;

531  
NGX_CONF_OK
;

533 
övÆid
:

535 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

536 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

538  
NGX_CONF_ERROR
;

539 
	}
}

	@src/http/modules/ngx_http_upstream_least_conn_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_uöt_t
 *
	mc⁄ns
;

15 } 
	tngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
;

20 
ngx_hâp_up°ªam_º_≥î_d©a_t
 
	mºp
;

22 
ngx_uöt_t
 *
	mc⁄ns
;

24 
ngx_evít_gë_≥î_±
 
	mgë_º_≥î
;

25 
ngx_evít_‰ì_≥î_±
 
	m‰ì_º_≥î
;

26 } 
	tngx_hâp_up°ªam_lc_≥î_d©a_t
;

29 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

31 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(

32 
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
);

33 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

34 *
d©a
, 
ngx_uöt_t
 
°©e
);

35 *
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

37 *
c⁄f
);

40 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
[] = {

42 { 
ngx_°rög
("least_conn"),

43 
NGX_HTTP_UPS_CONF
|
NGX_CONF_NOARGS
,

44 
ngx_hâp_up°ªam_Àa°_c⁄n
,

47 
NULL
 },

49 
ngx_nuŒ_comm™d


53 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
 = {

54 
NULL
,

55 
NULL
,

57 
NULL
,

58 
NULL
,

60 
ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
,

61 
NULL
,

63 
NULL
,

64 
NULL


68 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ_˘x
,

71 
ngx_hâp_up°ªam_Àa°_c⁄n_comm™ds
,

72 
NGX_HTTP_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_öt_t


85 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
,

86 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

88 
ngx_uöt_t
 
n
;

89 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

90 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

92 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0,

95 i‡(
	`ngx_hâp_up°ªam_öô_round_robö
(
cf
, 
us
Ë!
NGX_OK
) {

96  
NGX_ERROR
;

99 
≥îs
 = 
us
->
≥î
.
d©a
;

101 
n
 = 
≥îs
->
numbî
;

103 i‡(
≥îs
->
√xt
) {

104 
n
 +
≥îs
->
√xt
->
numbî
;

107 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

108 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

110 
lcf
->
c⁄ns
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_uöt_t
Ë* 
n
);

111 i‡(
lcf
->
c⁄ns
 =
NULL
) {

112  
NGX_ERROR
;

115 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
;

117  
NGX_OK
;

118 
	}
}

121 
ngx_öt_t


122 
	$ngx_hâp_up°ªam_öô_Àa°_c⁄n_≥î
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

125 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
;

126 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
lcf
;

128 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

131 
lcf
 = 
	`ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
us
,

132 
ngx_hâp_up°ªam_Àa°_c⁄n_moduÀ
);

134 
l˝
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_lc_≥î_d©a_t
));

135 i‡(
l˝
 =
NULL
) {

136  
NGX_ERROR
;

139 
l˝
->
c⁄ns
 = 
lcf
->conns;

141 
r
->
up°ªam
->
≥î
.
d©a
 = &
l˝
->
ºp
;

143 i‡(
	`ngx_hâp_up°ªam_öô_round_robö_≥î
(
r
, 
us
Ë!
NGX_OK
) {

144  
NGX_ERROR
;

147 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
;

148 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
;

150 
l˝
->
gë_º_≥î
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

151 
l˝
->
‰ì_º_≥î
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

153  
NGX_OK
;

154 
	}
}

157 
ngx_öt_t


158 
	$ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

160 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

162 
time_t
 
now
;

163 
uöçå_t
 
m
;

164 
ngx_öt_t
 
rc
, 
tŸÆ
;

165 
ngx_uöt_t
 
i
, 
n
, 
p
, 
m™y
;

166 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

167 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

169 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

170 "gëÜó° c⁄¿≥î,Åry: %ui", 
pc
->
åõs
);

172 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

173  
l˝
->
	`gë_º_≥î
(
pc
, &l˝->
ºp
);

176 
pc
->
ˇched
 = 0;

177 
pc
->
c⁄√˘i⁄
 = 
NULL
;

179 
now
 = 
	`ngx_time
();

181 
≥îs
 = 
l˝
->
ºp
.peers;

183 
be°
 = 
NULL
;

184 
tŸÆ
 = 0;

186 #i‡(
NGX_SUPPRESS_WARN
)

187 
m™y
 = 0;

188 
p
 = 0;

191 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

193 
n
 = 
i
 / (8 * (
uöçå_t
));

194 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

196 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

200 
≥î
 = &
≥îs
->≥î[
i
];

202 i‡(
≥î
->
down
) {

206 i‡(
≥î
->
max_Áûs


207 && 
≥î
->
Áûs
 >≥î->
max_Áûs


208 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

219 i‡(
be°
 =
NULL


220 || 
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 <Ü˝->c⁄ns[
p
] * 
≥î
->weight)

222 
be°
 = 
≥î
;

223 
m™y
 = 0;

224 
p
 = 
i
;

226 } i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight


227 =
l˝
->
c⁄ns
[
p
] * 
≥î
->
weight
)

229 
m™y
 = 1;

233 i‡(
be°
 =
NULL
) {

234 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

237 
Áûed
;

240 i‡(
m™y
) {

241 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

244 
i
 = 
p
; i < 
≥îs
->
numbî
; i++) {

246 
n
 = 
i
 / (8 * (
uöçå_t
));

247 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

249 i‡(
l˝
->
ºp
.
åõd
[
n
] & 
m
) {

253 
≥î
 = &
≥îs
->≥î[
i
];

255 i‡(
≥î
->
down
) {

259 i‡(
l˝
->
c⁄ns
[
i
] * 
be°
->
weight
 !l˝->c⁄ns[
p
] * 
≥î
->weight) {

263 i‡(
≥î
->
max_Áûs


264 && 
≥î
->
Áûs
 >≥î->
max_Áûs


265 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

270 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

271 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

273 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

274 
≥î
->
ef„˘ive_weight
++;

277 i‡(
≥î
->
cuºít_weight
 > 
be°
->current_weight) {

278 
be°
 = 
≥î
;

279 
p
 = 
i
;

284 
be°
->
cuºít_weight
 -
tŸÆ
;

285 
be°
->
checked
 = 
now
;

287 
pc
->
sockaddr
 = 
be°
->sockaddr;

288 
pc
->
sockÀn
 = 
be°
->socklen;

289 
pc
->
«me
 = &
be°
->name;

291 
l˝
->
ºp
.
cuºít
 = 
p
;

293 
n
 = 
p
 / (8 * (
uöçå_t
));

294 
m
 = (
uöçå_t
Ë1 << 
p
 % (8 * (uintptr_t));

296 
l˝
->
ºp
.
åõd
[
n
] |
m
;

297 
l˝
->
c⁄ns
[
p
]++;

299 i‡(
pc
->
åõs
 =1 && 
≥îs
->
√xt
) {

300 
pc
->
åõs
 +
≥îs
->
√xt
->
numbî
;

303  
NGX_OK
;

305 
Áûed
:

307 i‡(
≥îs
->
√xt
) {

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

311 
l˝
->
c⁄ns
 +
≥îs
->
numbî
;

313 
l˝
->
ºp
.
≥îs
 =Öìrs->
√xt
;

314 
pc
->
åõs
 = 
l˝
->
ºp
.
≥îs
->
numbî
;

316 
n
 = (
l˝
->
ºp
.
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

317 / (8 * (
uöçå_t
));

319 
i
 = 0; i < 
n
; i++) {

320 
l˝
->
ºp
.
åõd
[
i
] = 0;

323 
rc
 = 
	`ngx_hâp_up°ªam_gë_Àa°_c⁄n_≥î
(
pc
, 
l˝
);

325 i‡(
rc
 !
NGX_BUSY
) {

326  
rc
;

332 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

333 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

336 
pc
->
«me
 = 
≥îs
->name;

338  
NGX_BUSY
;

339 
	}
}

343 
	$ngx_hâp_up°ªam_‰ì_Àa°_c⁄n_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

344 *
d©a
, 
ngx_uöt_t
 
°©e
)

346 
ngx_hâp_up°ªam_lc_≥î_d©a_t
 *
l˝
 = 
d©a
;

348 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

349 "‰ìÜó° c⁄¿≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

351 i‡(
l˝
->
ºp
.
≥îs
->
sögÀ
) {

352 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

356 
l˝
->
c⁄ns
[l˝->
ºp
.
cuºít
]--;

358 
l˝
->
	`‰ì_º_≥î
(
pc
, &l˝->
ºp
, 
°©e
);

359 
	}
}

363 
	$ngx_hâp_up°ªam_Àa°_c⁄n_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

365 
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
 *
c⁄f
;

367 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

368 (
ngx_hâp_up°ªam_Àa°_c⁄n_c⁄f_t
));

369 i‡(
c⁄f
 =
NULL
) {

370  
NULL
;

379  
c⁄f
;

380 
	}
}

384 
	$ngx_hâp_up°ªam_Àa°_c⁄n
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

386 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

388 
uscf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

390 i‡(
uscf
->
≥î
.
öô_up°ªam
) {

391 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

395 
uscf
->
≥î
.
öô_up°ªam
 = 
ngx_hâp_up°ªam_öô_Àa°_c⁄n
;

397 
uscf
->
Êags
 = 
NGX_HTTP_UPSTREAM_CREATE


398 |
NGX_HTTP_UPSTREAM_WEIGHT


399 |
NGX_HTTP_UPSTREAM_MAX_FAILS


400 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


401 |
NGX_HTTP_UPSTREAM_DOWN


402 |
NGX_HTTP_UPSTREAM_BACKUP
;

404  
NGX_CONF_OK
;

405 
	}
}

	@src/http/modules/ngx_http_userid_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
	#NGX_HTTP_USERID_OFF
 0

	)

14 
	#NGX_HTTP_USERID_LOG
 1

	)

15 
	#NGX_HTTP_USERID_V1
 2

	)

16 
	#NGX_HTTP_USERID_ON
 3

	)

19 
	#NGX_HTTP_USERID_MAX_EXPIRES
 2145916555

	)

23 
ngx_uöt_t
 
	míabÀ
;

25 
ngx_öt_t
 
	m£rvi˚
;

27 
ngx_°r_t
 
	m«me
;

28 
ngx_°r_t
 
	mdomaö
;

29 
ngx_°r_t
 
	m∑th
;

30 
ngx_°r_t
 
	mp3p
;

32 
time_t
 
	mexpúes
;

34 
u_ch¨
 
	mm¨k
;

35 } 
	tngx_hâp_u£rid_c⁄f_t
;

39 
uöt32_t
 
	muid_gŸ
[4];

40 
uöt32_t
 
	muid_£t
[4];

41 
ngx_°r_t
 
	mcookõ
;

42 
ngx_uöt_t
 
	mª£t
;

43 } 
	tngx_hâp_u£rid_˘x_t
;

46 
ngx_hâp_u£rid_˘x_t
 *
ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
,

47 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

48 
ngx_öt_t
 
ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
);

50 
ngx_öt_t
 
ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

52 
ngx_öt_t
 
ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
,

53 
ngx_hâp_u£rid_˘x_t
 *
˘x
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
);

55 
ngx_öt_t
 
ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

56 
ngx_öt_t
 
ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
);

57 *
ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

58 *
ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

59 *
chûd
);

60 *
ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

61 *
ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

62 *
ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

63 *
c⁄f
);

64 *
ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

65 *
ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 
ngx_öt_t
 
ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

71 
uöt32_t
 
	g°¨t_vÆue
;

72 
uöt32_t
 
	g£quí˚r_v1
 = 1;

73 
uöt32_t
 
	g£quí˚r_v2
 = 0x03030302;

76 
u_ch¨
 
	gexpúes
[] = ";Éxpires=Thu, 31-Dec-37 23:55:55 GMT";

79 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

82 
ngx_c⁄f_íum_t
 
	gngx_hâp_u£rid_°©e
[] = {

83 { 
ngx_°rög
("off"), 
NGX_HTTP_USERID_OFF
 },

84 { 
ngx_°rög
("log"), 
NGX_HTTP_USERID_LOG
 },

85 { 
ngx_°rög
("v1"), 
NGX_HTTP_USERID_V1
 },

86 { 
ngx_°rög
("⁄"), 
NGX_HTTP_USERID_ON
 },

87 { 
ngx_nuŒ_°rög
, 0 }

91 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_domaö_p
 =

92 
ngx_hâp_u£rid_domaö
;

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_∑th_p
 = 
ngx_hâp_u£rid_∑th
;

94 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_u£rid_p3p_p
 = 
ngx_hâp_u£rid_p3p
;

97 
ngx_comm™d_t
 
	gngx_hâp_u£rid_comm™ds
[] = {

99 { 
ngx_°rög
("userid"),

100 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

101 
ngx_c⁄f_£t_íum_¶Ÿ
,

102 
NGX_HTTP_LOC_CONF_OFFSET
,

103 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
íabÀ
),

104 
ngx_hâp_u£rid_°©e
 },

106 { 
ngx_°rög
("userid_service"),

107 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

108 
ngx_c⁄f_£t_num_¶Ÿ
,

109 
NGX_HTTP_LOC_CONF_OFFSET
,

110 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
£rvi˚
),

111 
NULL
 },

113 { 
ngx_°rög
("userid_name"),

114 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

115 
ngx_c⁄f_£t_°r_¶Ÿ
,

116 
NGX_HTTP_LOC_CONF_OFFSET
,

117 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
«me
),

118 
NULL
 },

120 { 
ngx_°rög
("userid_domain"),

121 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

122 
ngx_c⁄f_£t_°r_¶Ÿ
,

123 
NGX_HTTP_LOC_CONF_OFFSET
,

124 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
domaö
),

125 &
ngx_hâp_u£rid_domaö_p
 },

127 { 
ngx_°rög
("userid_path"),

128 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

129 
ngx_c⁄f_£t_°r_¶Ÿ
,

130 
NGX_HTTP_LOC_CONF_OFFSET
,

131 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
∑th
),

132 &
ngx_hâp_u£rid_∑th_p
 },

134 { 
ngx_°rög
("userid_expires"),

135 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

136 
ngx_hâp_u£rid_expúes
,

137 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
NULL
 },

141 { 
ngx_°rög
("userid_p3p"),

142 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

143 
ngx_c⁄f_£t_°r_¶Ÿ
,

144 
NGX_HTTP_LOC_CONF_OFFSET
,

145 
off£tof
(
ngx_hâp_u£rid_c⁄f_t
, 
p3p
),

146 &
ngx_hâp_u£rid_p3p_p
 },

148 { 
ngx_°rög
("userid_mark"),

149 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

150 
ngx_hâp_u£rid_m¨k
,

151 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
NULL
 },

155 
ngx_nuŒ_comm™d


159 
ngx_hâp_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ_˘x
 = {

160 
ngx_hâp_u£rid_add_v¨übÀs
,

161 
ngx_hâp_u£rid_öô
,

163 
NULL
,

164 
NULL
,

166 
NULL
,

167 
NULL
,

169 
ngx_hâp_u£rid_¸óã_c⁄f
,

170 
ngx_hâp_u£rid_mîge_c⁄f


174 
ngx_moduÀ_t
 
	gngx_hâp_u£rid_fûãr_moduÀ
 = {

175 
NGX_MODULE_V1
,

176 &
ngx_hâp_u£rid_fûãr_moduÀ_˘x
,

177 
ngx_hâp_u£rid_comm™ds
,

178 
NGX_HTTP_MODULE
,

179 
NULL
,

180 
NULL
,

181 
ngx_hâp_u£rid_öô_w‹kî
,

182 
NULL
,

183 
NULL
,

184 
NULL
,

185 
NULL
,

186 
NGX_MODULE_V1_PADDING


190 
ngx_°r_t
 
	gngx_hâp_u£rid_gŸ
 = 
ngx_°rög
("uid_got");

191 
ngx_°r_t
 
	gngx_hâp_u£rid_£t
 = 
ngx_°rög
("uid_set");

192 
ngx_°r_t
 
	gngx_hâp_u£rid_ª£t
 = 
ngx_°rög
("uid_reset");

193 
ngx_uöt_t
 
	gngx_hâp_u£rid_ª£t_ödex
;

196 
ngx_öt_t


197 
	$ngx_hâp_u£rid_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

199 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

200 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

202 i‡(
r
 !r->
maö
) {

203  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

206 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

208 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

209  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

212 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
, 
c⁄f
);

214 i‡(
˘x
 =
NULL
) {

215  
NGX_ERROR
;

218 i‡(
	`ngx_hâp_u£rid_£t_uid
(
r
, 
˘x
, 
c⁄f
Ë=
NGX_OK
) {

219  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

222  
NGX_ERROR
;

223 
	}
}

226 
ngx_öt_t


227 
	$ngx_hâp_u£rid_gŸ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

228 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

230 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

231 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

233 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

235 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_OFF
) {

236 
v
->
nŸ_found
 = 1;

237  
NGX_OK
;

240 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

242 i‡(
˘x
 =
NULL
) {

243  
NGX_ERROR
;

246 i‡(
˘x
->
uid_gŸ
[3] != 0) {

247  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
);

250 
v
->
nŸ_found
 = 1;

252  
NGX_OK
;

253 
	}
}

256 
ngx_öt_t


257 
	$ngx_hâp_u£rid_£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

258 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

260 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

261 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

263 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

265 i‡(
c⁄f
->
íabÀ
 < 
NGX_HTTP_USERID_V1
) {

266 
v
->
nŸ_found
 = 1;

267  
NGX_OK
;

270 
˘x
 = 
	`ngx_hâp_u£rid_gë_uid
(
r
->
maö
, 
c⁄f
);

272 i‡(
˘x
 =
NULL
) {

273  
NGX_ERROR
;

276 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
->
maö
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

277  
NGX_ERROR
;

280 i‡(
˘x
->
uid_£t
[3] == 0) {

281 
v
->
nŸ_found
 = 1;

282  
NGX_OK
;

285  
	`ngx_hâp_u£rid_v¨übÀ
(
r
->
maö
, 
v
, &
c⁄f
->
«me
, 
˘x
->
uid_£t
);

286 
	}
}

289 
ngx_hâp_u£rid_˘x_t
 *

290 
	$ngx_hâp_u£rid_gë_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

292 
ngx_öt_t
 
n
;

293 
ngx_°r_t
 
§c
, 
d°
;

294 
ngx_èbÀ_ñt_t
 **
cookõs
;

295 
ngx_hâp_u£rid_˘x_t
 *
˘x
;

297 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

299 i‡(
˘x
) {

300  
˘x
;

303 i‡(
˘x
 =
NULL
) {

304 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_u£rid_˘x_t
));

305 i‡(
˘x
 =
NULL
) {

306  
NULL
;

309 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_u£rid_fûãr_moduÀ
);

312 
n
 = 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
c⁄f
->
«me
,

313 &
˘x
->
cookõ
);

314 i‡(
n
 =
NGX_DECLINED
) {

315  
˘x
;

318 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

319 "uid cookõ: \"%V\"", &
˘x
->
cookõ
);

321 i‡(
˘x
->
cookõ
.
Àn
 < 22) {

322 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

323 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

325 &
cookõs
[
n
]->
vÆue
);

326  
˘x
;

329 
§c
 = 
˘x
->
cookõ
;

338 
§c
.
Àn
 = 22;

340 
d°
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_gŸ
;

342 i‡(
	`ngx_decode_ba£64
(&
d°
, &
§c
Ë=
NGX_ERROR
) {

343 
cookõs
 = 
r
->
hódîs_ö
.cookõs.
ñts
;

344 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

346 &
cookõs
[
n
]->
vÆue
);

347  
˘x
;

350 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

352 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

353 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

355  
˘x
;

356 
	}
}

359 
ngx_öt_t


360 
	$ngx_hâp_u£rid_£t_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

361 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

363 
u_ch¨
 *
cookõ
, *
p
;

364 
size_t
 
Àn
;

365 
ngx_°r_t
 
§c
, 
d°
;

366 
ngx_èbÀ_ñt_t
 *
£t_cookõ
, *
p3p
;

368 i‡(
	`ngx_hâp_u£rid_¸óã_uid
(
r
, 
˘x
, 
c⁄f
Ë!
NGX_OK
) {

369  
NGX_ERROR
;

372 i‡(
˘x
->
uid_£t
[3] == 0) {

373  
NGX_OK
;

376 
Àn
 = 
c⁄f
->
«me
.À¿+ 1 + 
	`ngx_ba£64_ícoded_Àngth
(16Ë+ c⁄f->
∑th
.len;

378 i‡(
c⁄f
->
expúes
) {

379 
Àn
 +(
expúes
) - 1 + 2;

382 i‡(
c⁄f
->
domaö
.
Àn
) {

383 
Àn
 +
c⁄f
->
domaö
.len;

386 
cookõ
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

387 i‡(
cookõ
 =
NULL
) {

388  
NGX_ERROR
;

391 
p
 = 
	`ngx_c›y
(
cookõ
, 
c⁄f
->
«me
.
d©a
, c⁄f->«me.
Àn
);

392 *
p
++ = '=';

394 i‡(
˘x
->
uid_gŸ
[3] =0 || ctx->
ª£t
) {

395 
§c
.
Àn
 = 16;

396 
§c
.
d©a
 = (
u_ch¨
 *Ë
˘x
->
uid_£t
;

397 
d°
.
d©a
 = 
p
;

399 
	`ngx_ícode_ba£64
(&
d°
, &
§c
);

401 
p
 +
d°
.
Àn
;

403 i‡(
c⁄f
->
m¨k
) {

404 *(
p
 - 2Ë
c⁄f
->
m¨k
;

408 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
cookõ
.
d©a
, 22);

409 *
p
++ = 
c⁄f
->
m¨k
;

410 *
p
++ = '=';

413 i‡(
c⁄f
->
expúes
 =
NGX_HTTP_USERID_MAX_EXPIRES
) {

414 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (expires) - 1);

416 } i‡(
c⁄f
->
expúes
) {

417 
p
 = 
	`ngx_˝ymem
’, 
expúes
, (";Éxpires=") - 1);

418 
p
 = 
	`ngx_hâp_cookõ_time
’, 
	`ngx_time
(Ë+ 
c⁄f
->
expúes
);

421 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
domaö
.
d©a
, c⁄f->domaö.
Àn
);

423 
p
 = 
	`ngx_c›y
’, 
c⁄f
->
∑th
.
d©a
, c⁄f->∑th.
Àn
);

425 
£t_cookõ
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

426 i‡(
£t_cookõ
 =
NULL
) {

427  
NGX_ERROR
;

430 
£t_cookõ
->
hash
 = 1;

431 
	`ngx_°r_£t
(&
£t_cookõ
->
key
, "Set-Cookie");

432 
£t_cookõ
->
vÆue
.
Àn
 = 
p
 - 
cookõ
;

433 
£t_cookõ
->
vÆue
.
d©a
 = 
cookõ
;

435 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

436 "uid cookõ: \"%V\"", &
£t_cookõ
->
vÆue
);

438 i‡(
c⁄f
->
p3p
.
Àn
 == 0) {

439  
NGX_OK
;

442 
p3p
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

443 i‡(
p3p
 =
NULL
) {

444  
NGX_ERROR
;

447 
p3p
->
hash
 = 1;

448 
	`ngx_°r_£t
(&
p3p
->
key
, "P3P");

449 
p3p
->
vÆue
 = 
c⁄f
->p3p;

451  
NGX_OK
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_hâp_u£rid_¸óã_uid
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_u£rid_˘x_t
 *
˘x
,

457 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
)

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
sockaddr_ö
 *
sö
;

461 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

462 #i‡(
NGX_HAVE_INET6
)

463 
u_ch¨
 *
p
;

464 
sockaddr_ö6
 *
sö6
;

467 i‡(
˘x
->
uid_£t
[3] != 0) {

468  
NGX_OK
;

471 i‡(
˘x
->
uid_gŸ
[3] != 0) {

473 
vv
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ngx_hâp_u£rid_ª£t_ödex
);

475 i‡(
vv
->
Àn
 =0 || (vv->À¿=1 && vv->
d©a
[0] == '0')) {

477 i‡(
c⁄f
->
m¨k
 == '\0'

478 || (
˘x
->
cookõ
.
Àn
 > 23

479 && 
˘x
->
cookõ
.
d©a
[22] =
c⁄f
->
m¨k


480 && 
˘x
->
cookõ
.
d©a
[23] == '='))

482  
NGX_OK
;

485 
˘x
->
uid_£t
[0] = ctx->
uid_gŸ
[0];

486 
˘x
->
uid_£t
[1] = ctx->
uid_gŸ
[1];

487 
˘x
->
uid_£t
[2] = ctx->
uid_gŸ
[2];

488 
˘x
->
uid_£t
[3] = ctx->
uid_gŸ
[3];

490  
NGX_OK
;

493 
˘x
->
ª£t
 = 1;

495 i‡(
vv
->
Àn
 =3 && 
	`ngx_°∫cmp
(vv->
d©a
, "log", 3) == 0) {

496 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

498 &
c⁄f
->
«me
, 
˘x
->
uid_gŸ
[0], ctx->uid_got[1],

499 
˘x
->
uid_gŸ
[2], ctx->uid_got[3]);

509 i‡(
c⁄f
->
íabÀ
 =
NGX_HTTP_USERID_V1
) {

510 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

511 
˘x
->
uid_£t
[0] = 0;

513 
˘x
->
uid_£t
[0] = 
c⁄f
->
£rvi˚
;

515 
˘x
->
uid_£t
[1] = (
uöt32_t
Ë
	`ngx_time
();

516 
˘x
->
uid_£t
[2] = 
°¨t_vÆue
;

517 
˘x
->
uid_£t
[3] = 
£quí˚r_v1
;

518 
£quí˚r_v1
 += 0x100;

521 i‡(
c⁄f
->
£rvi˚
 =
NGX_CONF_UNSET
) {

523 
c
 = 
r
->
c⁄√˘i⁄
;

525 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

526  
NGX_ERROR
;

529 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

531 #i‡(
NGX_HAVE_INET6
)

532 
AF_INET6
:

533 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

535 
p
 = (
u_ch¨
 *Ë&
˘x
->
uid_£t
[0];

537 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[12];

538 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[13];

539 *
p
++ = 
sö6
->
sö6_addr
.
s6_addr
[14];

540 *
p
 = 
sö6
->
sö6_addr
.
s6_addr
[15];

545 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

546 
˘x
->
uid_£t
[0] = 
sö
->
sö_addr
.
s_addr
;

551 
˘x
->
uid_£t
[0] = 
	`ht⁄l
(
c⁄f
->
£rvi˚
);

554 
˘x
->
uid_£t
[1] = 
	`ht⁄l
((
uöt32_t
Ë
	`ngx_time
());

555 
˘x
->
uid_£t
[2] = 
	`ht⁄l
(
°¨t_vÆue
);

556 
˘x
->
uid_£t
[3] = 
	`ht⁄l
(
£quí˚r_v2
);

557 
£quí˚r_v2
 += 0x100;

558 i‡(
£quí˚r_v2
 < 0x03030302) {

559 
£quí˚r_v2
 = 0x03030302;

563  
NGX_OK
;

564 
	}
}

567 
ngx_öt_t


568 
	$ngx_hâp_u£rid_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

569 
ngx_°r_t
 *
«me
, 
uöt32_t
 *
uid
)

571 
v
->
Àn
 = 
«me
->len + ("=00001111222233334444555566667777") - 1;

572 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, v->
Àn
);

573 i‡(
v
->
d©a
 =
NULL
) {

574  
NGX_ERROR
;

577 
v
->
vÆid
 = 1;

578 
v
->
no_ˇchóbÀ
 = 0;

579 
v
->
nŸ_found
 = 0;

581 
	`ngx_•rötf
(
v
->
d©a
, "%V=%08XD%08XD%08XD%08XD",

582 
«me
, 
uid
[0], uid[1], uid[2], uid[3]);

584  
NGX_OK
;

585 
	}
}

588 
ngx_öt_t


589 
	$ngx_hâp_u£rid_ª£t_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

590 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

592 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

594  
NGX_OK
;

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_hâp_u£rid_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

601 
ngx_öt_t
 
n
;

602 
ngx_hâp_v¨übÀ_t
 *
v¨
;

604 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_gŸ
, 0);

605 i‡(
v¨
 =
NULL
) {

606  
NGX_ERROR
;

609 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_gŸ_v¨übÀ
;

611 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_£t
, 0);

612 i‡(
v¨
 =
NULL
) {

613  
NGX_ERROR
;

616 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_£t_v¨übÀ
;

618 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
ngx_hâp_u£rid_ª£t
,

619 
NGX_HTTP_VAR_CHANGEABLE
);

620 i‡(
v¨
 =
NULL
) {

621  
NGX_ERROR
;

624 
v¨
->
gë_h™dÀr
 = 
ngx_hâp_u£rid_ª£t_v¨übÀ
;

626 
n
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
ngx_hâp_u£rid_ª£t
);

627 i‡(
n
 =
NGX_ERROR
) {

628  
NGX_ERROR
;

631 
ngx_hâp_u£rid_ª£t_ödex
 = 
n
;

633  
NGX_OK
;

634 
	}
}

638 
	$ngx_hâp_u£rid_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

640 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
;

642 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_u£rid_c⁄f_t
));

643 i‡(
c⁄f
 =
NULL
) {

644  
NULL
;

656 
c⁄f
->
íabÀ
 = 
NGX_CONF_UNSET_UINT
;

657 
c⁄f
->
£rvi˚
 = 
NGX_CONF_UNSET
;

658 
c⁄f
->
expúes
 = 
NGX_CONF_UNSET
;

659 
c⁄f
->
m¨k
 = (
u_ch¨
) '\xFF';

661  
c⁄f
;

662 
	}
}

666 
	$ngx_hâp_u£rid_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

668 
ngx_hâp_u£rid_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

669 
ngx_hâp_u£rid_c⁄f_t
 *
c⁄f
 = 
chûd
;

671 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable,

672 
NGX_HTTP_USERID_OFF
);

674 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
«me
, 
¥ev
->name, "uid");

675 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
domaö
, 
¥ev
->domain, "");

676 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
∑th
, 
¥ev
->path, ";Öath=/");

677 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
p3p
, 
¥ev
->p3p, "");

679 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvi˚
, 
¥ev
->£rvi˚, 
NGX_CONF_UNSET
);

680 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
expúes
, 
¥ev
->expires, 0);

682 i‡(
c⁄f
->
m¨k
 =(
u_ch¨
) '\xFF') {

683 i‡(
¥ev
->
m¨k
 =(
u_ch¨
) '\xFF') {

684 
c⁄f
->
m¨k
 = '\0';

686 
c⁄f
->
m¨k
 = 
¥ev
->mark;

690  
NGX_CONF_OK
;

691 
	}
}

694 
ngx_öt_t


695 
	$ngx_hâp_u£rid_öô
(
ngx_c⁄f_t
 *
cf
)

697 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

698 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_u£rid_fûãr
;

700  
NGX_OK
;

701 
	}
}

705 
	$ngx_hâp_u£rid_domaö
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

707 
ngx_°r_t
 *
domaö
 = 
d©a
;

709 
u_ch¨
 *
p
, *
√w
;

711 i‡(
	`ngx_°rcmp
(
domaö
->
d©a
, "none") == 0) {

712 
	`ngx_°r_£t
(
domaö
, "");

713  
NGX_CONF_OK
;

716 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, ("; domaö="Ë- 1 + 
domaö
->
Àn
);

717 i‡(
√w
 =
NULL
) {

718  
NGX_CONF_ERROR
;

721 
p
 = 
	`ngx_˝ymem
(
√w
, "; domain=", ("; domain=") - 1);

722 
	`ngx_mem˝y
(
p
, 
domaö
->
d©a
, domaö->
Àn
);

724 
domaö
->
Àn
 += ("; domain=") - 1;

725 
domaö
->
d©a
 = 
√w
;

727  
NGX_CONF_OK
;

728 
	}
}

732 
	$ngx_hâp_u£rid_∑th
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

734 
ngx_°r_t
 *
∑th
 = 
d©a
;

736 
u_ch¨
 *
p
, *
√w
;

738 
√w
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, (";Ö©h="Ë- 1 + 
∑th
->
Àn
);

739 i‡(
√w
 =
NULL
) {

740  
NGX_CONF_ERROR
;

743 
p
 = 
	`ngx_˝ymem
(
√w
, ";Öath=", (";Öath=") - 1);

744 
	`ngx_mem˝y
(
p
, 
∑th
->
d©a
,Ö©h->
Àn
);

746 
∑th
->
Àn
 += (";Öath=") - 1;

747 
∑th
->
d©a
 = 
√w
;

749  
NGX_CONF_OK
;

750 
	}
}

754 
	$ngx_hâp_u£rid_expúes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

756 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

758 
ngx_°r_t
 *
vÆue
;

760 i‡(
ucf
->
expúes
 !
NGX_CONF_UNSET
) {

764 
vÆue
 = 
cf
->
¨gs
->
ñts
;

766 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "max") == 0) {

767 
ucf
->
expúes
 = 
NGX_HTTP_USERID_MAX_EXPIRES
;

768  
NGX_CONF_OK
;

771 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

772 
ucf
->
expúes
 = 0;

773  
NGX_CONF_OK
;

776 
ucf
->
expúes
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 1);

777 i‡(
ucf
->
expúes
 =(
time_t
Ë
NGX_ERROR
) {

781  
NGX_CONF_OK
;

782 
	}
}

786 
	$ngx_hâp_u£rid_p3p
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

788 
ngx_°r_t
 *
p3p
 = 
d©a
;

790 i‡(
	`ngx_°rcmp
(
p3p
->
d©a
, "none") == 0) {

791 
	`ngx_°r_£t
(
p3p
, "");

794  
NGX_CONF_OK
;

795 
	}
}

799 
	$ngx_hâp_u£rid_m¨k
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

801 
ngx_hâp_u£rid_c⁄f_t
 *
ucf
 = 
c⁄f
;

803 
ngx_°r_t
 *
vÆue
;

805 i‡(
ucf
->
m¨k
 !(
u_ch¨
) '\xFF') {

809 
vÆue
 = 
cf
->
¨gs
->
ñts
;

811 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

812 
ucf
->
m¨k
 = '\0';

813  
NGX_CONF_OK
;

816 i‡(
vÆue
[1].
Àn
 != 1

817 || !((
vÆue
[1].
d©a
[0] >= '0' && value[1].data[0] <= '9')

818 || (
vÆue
[1].
d©a
[0] >= 'A' && value[1].data[0] <= 'Z')

819 || (
vÆue
[1].
d©a
[0] >= 'a' && value[1].data[0] <= 'z')

820 || 
vÆue
[1].
d©a
[0] == '='))

825 
ucf
->
m¨k
 = 
vÆue
[1].
d©a
[0];

827  
NGX_CONF_OK
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_u£rid_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

834 
timevÆ
 
ç
;

836 
	`ngx_gëtimeofday
(&
ç
);

839 
°¨t_vÆue
 = ((
ç
.
tv_u£c
 / 20Ë<< 16Ë| 
ngx_pid
;

841  
NGX_OK
;

842 
	}
}

	@src/http/modules/ngx_http_uwsgi_module.c

10 
	~<ngx_c⁄fig.h
>

11 
	~<ngx_c‹e.h
>

12 
	~<ngx_hâp.h
>

16 
ngx_hâp_up°ªam_c⁄f_t
 
	mup°ªam
;

18 
ngx_¨øy_t
 *
	mÊushes
;

19 
ngx_¨øy_t
 *
	m∑øms_Àn
;

20 
ngx_¨øy_t
 *
	m∑øms
;

21 
ngx_¨øy_t
 *
	m∑øms_sour˚
;

23 
ngx_hash_t
 
	mhódîs_hash
;

24 
ngx_uöt_t
 
	mhódî_∑øms
;

26 
ngx_¨øy_t
 *
	muwsgi_Àngths
;

27 
ngx_¨øy_t
 *
	muwsgi_vÆues
;

29 #i‡(
NGX_HTTP_CACHE
)

30 
ngx_hâp_com∂ex_vÆue_t
 
	mˇche_key
;

33 
ngx_°r_t
 
	muwsgi_°rög
;

35 
ngx_uöt_t
 
	mmodifõr1
;

36 
ngx_uöt_t
 
	mmodifõr2
;

37 } 
	tngx_hâp_uwsgi_loc_c⁄f_t
;

40 
ngx_öt_t
 
ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
);

42 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

43 
ngx_öt_t
 
ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_öt_t
 
rc
);

50 *
ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

52 *
chûd
);

53 
ngx_öt_t
 
ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
,

54 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,Çgx_hâp_uwsgi_loc_c⁄f_à*
¥ev
);

56 *
ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

57 *
c⁄f
);

58 *
ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

59 *
c⁄f
);

61 #i‡(
NGX_HTTP_CACHE
)

62 
ngx_öt_t
 
ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

63 *
ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

70 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_uwsgi_modifõr_bounds
 = {

71 
ngx_c⁄f_check_num_bounds
, 0, 255

75 
ngx_c⁄f_bômask_t
 
	gngx_hâp_uwsgi_√xt_up°ªam_masks
[] = {

76 { 
ngx_°rög
("îr‹"), 
NGX_HTTP_UPSTREAM_FT_ERROR
 },

77 { 
ngx_°rög
("timeout"), 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
 },

78 { 
ngx_°rög
("övÆid_hódî"), 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 },

79 { 
ngx_°rög
("hâp_500"), 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

80 { 
ngx_°rög
("hâp_503"), 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

81 { 
ngx_°rög
("hâp_404"), 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

82 { 
ngx_°rög
("upd©ög"), 
NGX_HTTP_UPSTREAM_FT_UPDATING
 },

83 { 
ngx_°rög
("off"), 
NGX_HTTP_UPSTREAM_FT_OFF
 },

84 { 
ngx_nuŒ_°rög
, 0 }

88 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
;

91 
ngx_comm™d_t
 
	gngx_hâp_uwsgi_comm™ds
[] = {

93 { 
ngx_°rög
("uwsgi_pass"),

94 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_hâp_uwsgi_∑ss
,

96 
NGX_HTTP_LOC_CONF_OFFSET
,

98 
NULL
 },

100 { 
ngx_°rög
("uwsgi_modifier1"),

101 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

102 
ngx_c⁄f_£t_num_¶Ÿ
,

103 
NGX_HTTP_LOC_CONF_OFFSET
,

104 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr1
),

105 &
ngx_hâp_uwsgi_modifõr_bounds
 },

107 { 
ngx_°rög
("uwsgi_modifier2"),

108 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

109 
ngx_c⁄f_£t_num_¶Ÿ
,

110 
NGX_HTTP_LOC_CONF_OFFSET
,

111 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
modifõr2
),

112 &
ngx_hâp_uwsgi_modifõr_bounds
 },

114 { 
ngx_°rög
("uwsgi_store"),

115 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

116 
ngx_hâp_uwsgi_°‹e
,

117 
NGX_HTTP_LOC_CONF_OFFSET
,

119 
NULL
 },

121 { 
ngx_°rög
("uwsgi_store_access"),

122 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE123
,

123 
ngx_c⁄f_£t_ac˚ss_¶Ÿ
,

124 
NGX_HTTP_LOC_CONF_OFFSET
,

125 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
°‹e_ac˚ss
),

126 
NULL
 },

128 { 
ngx_°rög
("uwsgi_buffering"),

129 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

130 
ngx_c⁄f_£t_Êag_¶Ÿ
,

131 
NGX_HTTP_LOC_CONF_OFFSET
,

132 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„rög
),

133 
NULL
 },

135 { 
ngx_°rög
("uwsgi_ignore_client_abort"),

136 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

137 
ngx_c⁄f_£t_Êag_¶Ÿ
,

138 
NGX_HTTP_LOC_CONF_OFFSET
,

139 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_˛õ¡_ab‹t
),

140 
NULL
 },

142 { 
ngx_°rög
("uwsgi_bind"),

143 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

144 
ngx_hâp_up°ªam_böd_£t_¶Ÿ
,

145 
NGX_HTTP_LOC_CONF_OFFSET
,

146 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
loˇl
),

147 
NULL
 },

149 { 
ngx_°rög
("uwsgi_connect_timeout"),

150 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

151 
ngx_c⁄f_£t_m£c_¶Ÿ
,

152 
NGX_HTTP_LOC_CONF_OFFSET
,

153 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
c⁄√˘_timeout
),

154 
NULL
 },

156 { 
ngx_°rög
("uwsgi_send_timeout"),

157 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

158 
ngx_c⁄f_£t_m£c_¶Ÿ
,

159 
NGX_HTTP_LOC_CONF_OFFSET
,

160 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
£nd_timeout
),

161 
NULL
 },

163 { 
ngx_°rög
("uwsgi_buffer_size"),

164 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

165 
ngx_c⁄f_£t_size_¶Ÿ
,

166 
NGX_HTTP_LOC_CONF_OFFSET
,

167 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
buf„r_size
),

168 
NULL
 },

170 { 
ngx_°rög
("uwsgi_pass_request_headers"),

171 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

172 
ngx_c⁄f_£t_Êag_¶Ÿ
,

173 
NGX_HTTP_LOC_CONF_OFFSET
,

174 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_hódîs
),

175 
NULL
 },

177 { 
ngx_°rög
("uwsgi_pass_request_body"),

178 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

179 
ngx_c⁄f_£t_Êag_¶Ÿ
,

180 
NGX_HTTP_LOC_CONF_OFFSET
,

181 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_ªque°_body
),

182 
NULL
 },

184 { 
ngx_°rög
("uwsgi_intercept_errors"),

185 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

186 
ngx_c⁄f_£t_Êag_¶Ÿ
,

187 
NGX_HTTP_LOC_CONF_OFFSET
,

188 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
öãr˚±_îr‹s
),

189 
NULL
 },

191 { 
ngx_°rög
("uwsgi_read_timeout"),

192 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

193 
ngx_c⁄f_£t_m£c_¶Ÿ
,

194 
NGX_HTTP_LOC_CONF_OFFSET
,

195 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ªad_timeout
),

196 
NULL
 },

198 { 
ngx_°rög
("uwsgi_buffers"),

199 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

200 
ngx_c⁄f_£t_bufs_¶Ÿ
,

201 
NGX_HTTP_LOC_CONF_OFFSET
,

202 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
bufs
),

203 
NULL
 },

205 { 
ngx_°rög
("uwsgi_busy_buffers_size"),

206 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

207 
ngx_c⁄f_£t_size_¶Ÿ
,

208 
NGX_HTTP_LOC_CONF_OFFSET
,

209 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
busy_buf„rs_size_c⁄f
),

210 
NULL
 },

212 #i‡(
NGX_HTTP_CACHE
)

214 { 
ngx_°rög
("uwsgi_cache"),

215 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

216 
ngx_hâp_uwsgi_ˇche
,

217 
NGX_HTTP_LOC_CONF_OFFSET
,

219 
NULL
 },

221 { 
ngx_°rög
("uwsgi_cache_key"),

222 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

223 
ngx_hâp_uwsgi_ˇche_key
,

224 
NGX_HTTP_LOC_CONF_OFFSET
,

226 
NULL
 },

228 { 
ngx_°rög
("uwsgi_cache_path"),

229 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_2MORE
,

230 
ngx_hâp_fûe_ˇche_£t_¶Ÿ
,

233 &
ngx_hâp_uwsgi_moduÀ
 },

235 { 
ngx_°rög
("uwsgi_cache_bypass"),

236 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

237 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

238 
NGX_HTTP_LOC_CONF_OFFSET
,

239 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_by∑ss
),

240 
NULL
 },

242 { 
ngx_°rög
("uwsgi_no_cache"),

243 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

244 
ngx_hâp_£t_¥ediˇã_¶Ÿ
,

245 
NGX_HTTP_LOC_CONF_OFFSET
,

246 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
no_ˇche
),

247 
NULL
 },

249 { 
ngx_°rög
("uwsgi_cache_valid"),

250 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

251 
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
,

252 
NGX_HTTP_LOC_CONF_OFFSET
,

253 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_vÆid
),

254 
NULL
 },

256 { 
ngx_°rög
("uwsgi_cache_min_uses"),

257 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

258 
ngx_c⁄f_£t_num_¶Ÿ
,

259 
NGX_HTTP_LOC_CONF_OFFSET
,

260 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mö_u£s
),

261 
NULL
 },

263 { 
ngx_°rög
("uwsgi_cache_use_stale"),

264 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

265 
ngx_c⁄f_£t_bômask_¶Ÿ
,

266 
NGX_HTTP_LOC_CONF_OFFSET
,

267 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_u£_°Æe
),

268 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

270 { 
ngx_°rög
("uwsgi_cache_methods"),

271 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

272 
ngx_c⁄f_£t_bômask_¶Ÿ
,

273 
NGX_HTTP_LOC_CONF_OFFSET
,

274 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_mëhods
),

275 &
ngx_hâp_up°ªam_ˇche_mëhod_mask
 },

277 { 
ngx_°rög
("uwsgi_cache_lock"),

278 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

279 
ngx_c⁄f_£t_Êag_¶Ÿ
,

280 
NGX_HTTP_LOC_CONF_OFFSET
,

281 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock
),

282 
NULL
 },

284 { 
ngx_°rög
("uwsgi_cache_lock_timeout"),

285 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

286 
ngx_c⁄f_£t_m£c_¶Ÿ
,

287 
NGX_HTTP_LOC_CONF_OFFSET
,

288 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ˇche_lock_timeout
),

289 
NULL
 },

293 { 
ngx_°rög
("uwsgi_temp_path"),

294 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

295 
ngx_c⁄f_£t_∑th_¶Ÿ
,

296 
NGX_HTTP_LOC_CONF_OFFSET
,

297 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_∑th
),

298 
NULL
 },

300 { 
ngx_°rög
("uwsgi_max_temp_file_size"),

301 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

302 
ngx_c⁄f_£t_size_¶Ÿ
,

303 
NGX_HTTP_LOC_CONF_OFFSET
,

304 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
max_ãmp_fûe_size_c⁄f
),

305 
NULL
 },

307 { 
ngx_°rög
("uwsgi_temp_file_write_size"),

308 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

309 
ngx_c⁄f_£t_size_¶Ÿ
,

310 
NGX_HTTP_LOC_CONF_OFFSET
,

311 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
),

312 
NULL
 },

314 { 
ngx_°rög
("uwsgi_next_upstream"),

315 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

316 
ngx_c⁄f_£t_bômask_¶Ÿ
,

317 
NGX_HTTP_LOC_CONF_OFFSET
,

318 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
√xt_up°ªam
),

319 &
ngx_hâp_uwsgi_√xt_up°ªam_masks
 },

321 { 
ngx_°rög
("uwsgi_param"),

322 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE23
,

323 
ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
,

324 
NGX_HTTP_LOC_CONF_OFFSET
,

325 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
∑øms_sour˚
),

326 
NULL
 },

328 { 
ngx_°rög
("uwsgi_string"),

329 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

330 
ngx_c⁄f_£t_°r_¶Ÿ
,

331 
NGX_HTTP_LOC_CONF_OFFSET
,

332 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
uwsgi_°rög
),

333 
NULL
 },

335 { 
ngx_°rög
("uwsgi_pass_header"),

336 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

337 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

338 
NGX_HTTP_LOC_CONF_OFFSET
,

339 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
∑ss_hódîs
),

340 
NULL
 },

342 { 
ngx_°rög
("uwsgi_hide_header"),

343 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

344 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

345 
NGX_HTTP_LOC_CONF_OFFSET
,

346 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
hide_hódîs
),

347 
NULL
 },

349 { 
ngx_°rög
("uwsgi_ignore_headers"),

350 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

351 
ngx_c⁄f_£t_bômask_¶Ÿ
,

352 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
off£tof
(
ngx_hâp_uwsgi_loc_c⁄f_t
, 
up°ªam
.
ign‹e_hódîs
),

354 &
ngx_hâp_up°ªam_ign‹e_hódîs_masks
 },

356 
ngx_nuŒ_comm™d


360 
ngx_hâp_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ_˘x
 = {

361 
NULL
,

362 
NULL
,

364 
NULL
,

365 
NULL
,

367 
NULL
,

368 
NULL
,

370 
ngx_hâp_uwsgi_¸óã_loc_c⁄f
,

371 
ngx_hâp_uwsgi_mîge_loc_c⁄f


375 
ngx_moduÀ_t
 
	gngx_hâp_uwsgi_moduÀ
 = {

376 
NGX_MODULE_V1
,

377 &
ngx_hâp_uwsgi_moduÀ_˘x
,

378 
ngx_hâp_uwsgi_comm™ds
,

379 
NGX_HTTP_MODULE
,

380 
NULL
,

381 
NULL
,

382 
NULL
,

383 
NULL
,

384 
NULL
,

385 
NULL
,

386 
NULL
,

387 
NGX_MODULE_V1_PADDING


391 
ngx_°r_t
 
	gngx_hâp_uwsgi_hide_hódîs
[] = {

392 
ngx_°rög
("X-Accel-Expires"),

393 
ngx_°rög
("X-Accel-Redirect"),

394 
ngx_°rög
("X-Accel-Limit-Rate"),

395 
ngx_°rög
("X-Accel-Buffering"),

396 
ngx_°rög
("X-Accel-Charset"),

397 
ngx_nuŒ_°rög


401 #i‡(
NGX_HTTP_CACHE
)

403 
ngx_keyvÆ_t
 
	gngx_hâp_uwsgi_ˇche_hódîs
[] = {

404 { 
ngx_°rög
("HTTP_IF_MODIFIED_SINCE"),Çgx_string("") },

405 { 
ngx_°rög
("HTTP_IF_UNMODIFIED_SINCE"),Çgx_string("") },

406 { 
ngx_°rög
("HTTP_IF_NONE_MATCH"),Çgx_string("") },

407 { 
ngx_°rög
("HTTP_IF_MATCH"),Çgx_string("") },

408 { 
ngx_°rög
("HTTP_RANGE"),Çgx_string("") },

409 { 
ngx_°rög
("HTTP_IF_RANGE"),Çgx_string("") },

410 { 
ngx_nuŒ_°rög
,Çgx_null_string }

416 
ngx_∑th_öô_t
 
	gngx_hâp_uwsgi_ãmp_∑th
 = {

417 
ngx_°rög
(
NGX_HTTP_UWSGI_TEMP_PATH
), { 1, 2, 0 }

421 
ngx_öt_t


422 
	$ngx_hâp_uwsgi_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

424 
ngx_öt_t
 
rc
;

425 
ngx_hâp_°©us_t
 *
°©us
;

426 
ngx_hâp_up°ªam_t
 *
u
;

427 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

429 i‡(
r
->
subªque°_ö_mem‹y
) {

430 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

433  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

436 i‡(
	`ngx_hâp_up°ªam_¸óã
(
r
Ë!
NGX_OK
) {

437  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

440 
°©us
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_°©us_t
));

441 i‡(
°©us
 =
NULL
) {

442  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

445 
	`ngx_hâp_£t_˘x
(
r
, 
°©us
, 
ngx_hâp_uwsgi_moduÀ
);

447 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

449 i‡(
uwcf
->
uwsgi_Àngths
) {

450 i‡(
	`ngx_hâp_uwsgi_evÆ
(
r
, 
uwcf
Ë!
NGX_OK
) {

451  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

455 
u
 = 
r
->
up°ªam
;

457 
	`ngx_°r_£t
(&
u
->
schema
, "uwsgi://");

458 
u
->
ouçut
.
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_uwsgi_moduÀ
;

460 
u
->
c⁄f
 = &
uwcf
->
up°ªam
;

462 #i‡(
NGX_HTTP_CACHE
)

463 
u
->
¸óã_key
 = 
ngx_hâp_uwsgi_¸óã_key
;

465 
u
->
¸óã_ªque°
 = 
ngx_hâp_uwsgi_¸óã_ªque°
;

466 
u
->
ªöô_ªque°
 = 
ngx_hâp_uwsgi_ªöô_ªque°
;

467 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

468 
u
->
ab‹t_ªque°
 = 
ngx_hâp_uwsgi_ab‹t_ªque°
;

469 
u
->
föÆize_ªque°
 = 
ngx_hâp_uwsgi_föÆize_ªque°
;

470 
r
->
°©e
 = 0;

472 
u
->
buf„rög
 = 
uwcf
->
up°ªam
.buffering;

474 
u
->
pùe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_evít_pùe_t
));

475 i‡(
u
->
pùe
 =
NULL
) {

476  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

479 
u
->
pùe
->
öput_fûãr
 = 
ngx_evít_pùe_c›y_öput_fûãr
;

480 
u
->
pùe
->
öput_˘x
 = 
r
;

482 
rc
 = 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
r
, 
ngx_hâp_up°ªam_öô
);

484 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

485  
rc
;

488  
NGX_DONE
;

489 
	}
}

492 
ngx_öt_t


493 
	$ngx_hâp_uwsgi_evÆ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 * 
uwcf
)

495 
ngx_uæ_t
 
uæ
;

496 
ngx_hâp_up°ªam_t
 *
u
;

498 
	`ngx_memzîo
(&
uæ
, (
ngx_uæ_t
));

500 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
uæ
.uæ, 
uwcf
->
uwsgi_Àngths
->
ñts
, 0,

501 
uwcf
->
uwsgi_vÆues
->
ñts
)

502 =
NULL
)

504  
NGX_ERROR
;

507 
uæ
.
no_ªsﬁve
 = 1;

509 i‡(
	`ngx_∑r£_uæ
(
r
->
poﬁ
, &
uæ
Ë!
NGX_OK
) {

510 i‡(
uæ
.
îr
) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

512 "%†ö up°ªam \"%V\"", 
uæ
.
îr
, &url.url);

515  
NGX_ERROR
;

518 
u
 = 
r
->
up°ªam
;

520 
u
->
ªsﬁved
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_ªsﬁved_t
));

521 i‡(
u
->
ªsﬁved
 =
NULL
) {

522  
NGX_ERROR
;

525 i‡(
uæ
.
addrs
 && uæ.addrs[0].
sockaddr
) {

526 
u
->
ªsﬁved
->
sockaddr
 = 
uæ
.
addrs
[0].sockaddr;

527 
u
->
ªsﬁved
->
sockÀn
 = 
uæ
.
addrs
[0].socklen;

528 
u
->
ªsﬁved
->
«ddrs
 = 1;

529 
u
->
ªsﬁved
->
ho°
 = 
uæ
.
addrs
[0].
«me
;

532 
u
->
ªsﬁved
->
ho°
 = 
uæ
.host;

533 
u
->
ªsﬁved
->
p‹t
 = 
uæ
.port;

534 
u
->
ªsﬁved
->
no_p‹t
 = 
uæ
.no_port;

537  
NGX_OK
;

538 
	}
}

541 #i‡(
NGX_HTTP_CACHE
)

543 
ngx_öt_t


544 
	$ngx_hâp_uwsgi_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

546 
ngx_°r_t
 *
key
;

547 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

549 
key
 = 
	`ngx_¨øy_push
(&
r
->
ˇche
->
keys
);

550 i‡(
key
 =
NULL
) {

551  
NGX_ERROR
;

554 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

556 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
uwcf
->
ˇche_key
, 
key
Ë!
NGX_OK
) {

557  
NGX_ERROR
;

560  
NGX_OK
;

561 
	}
}

566 
ngx_öt_t


567 
	$ngx_hâp_uwsgi_¸óã_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

569 
u_ch¨
 
ch
, *
lowˇ£_key
;

570 
size_t
 
key_Àn
, 
vÆ_Àn
, 
Àn
, 
Æloˇãd
;

571 
ngx_uöt_t
 
i
, 
n
, 
hash
, 
skù_em±y
, 
hódî_∑øms
;

572 
ngx_buf_t
 *
b
;

573 
ngx_chaö_t
 *
˛
, *
body
;

574 
ngx_li°_∑π_t
 *
∑π
;

575 
ngx_èbÀ_ñt_t
 *
hódî
, **
ign‹ed
;

576 
ngx_hâp_s¸ùt_code_±
 
code
;

577 
ngx_hâp_s¸ùt_ígöe_t
 
e
, 
À
;

578 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
;

579 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

581 
Àn
 = 0;

582 
hódî_∑øms
 = 0;

583 
ign‹ed
 = 
NULL
;

585 
uwcf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

587 i‡(
uwcf
->
∑øms_Àn
) {

588 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

590 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
r
, 
uwcf
->
Êushes
);

591 
À
.
Êushed
 = 1;

593 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

594 
À
.
ªque°
 = 
r
;

596 *(
uöçå_t
 *Ë
À
.
ù
) {

598 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

599 
key_Àn
 = 
	`lcode
(&
À
);

601 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

602 
skù_em±y
 = 
	`lcode
(&
À
);

604 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
 (&le)) {

605 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

607 
À
.
ù
 +(
uöçå_t
);

609 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

613 
Àn
 +2 + 
key_Àn
 + 2 + 
vÆ_Àn
;

617 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

619 
Æloˇãd
 = 0;

620 
lowˇ£_key
 = 
NULL
;

622 i‡(
uwcf
->
hódî_∑øms
) {

623 
n
 = 0;

624 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

626 
∑π
) {

627 
n
 +
∑π
->
√…s
;

628 
∑π
 =Ö¨t->
√xt
;

631 
ign‹ed
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
n
 * (*));

632 i‡(
ign‹ed
 =
NULL
) {

633  
NGX_ERROR
;

637 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

638 
hódî
 = 
∑π
->
ñts
;

640 
i
 = 0; ; i++) {

642 i‡(
i
 >
∑π
->
√…s
) {

643 i‡(
∑π
->
√xt
 =
NULL
) {

647 
∑π
 =Ö¨t->
√xt
;

648 
hódî
 = 
∑π
->
ñts
;

649 
i
 = 0;

652 i‡(
uwcf
->
hódî_∑øms
) {

653 i‡(
Æloˇãd
 < 
hódî
[
i
].
key
.
Àn
) {

654 
Æloˇãd
 = 
hódî
[
i
].
key
.
Àn
 + 16;

655 
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Æloˇãd
);

656 i‡(
lowˇ£_key
 =
NULL
) {

657  
NGX_ERROR
;

661 
hash
 = 0;

663 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

664 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

666 i‡(
ch
 >= 'A' && ch <= 'Z') {

667 
ch
 |= 0x20;

669 } i‡(
ch
 == '-') {

670 
ch
 = '_';

673 
hash
 = 
	`ngx_hash
(hash, 
ch
);

674 
lowˇ£_key
[
n
] = 
ch
;

677 i‡(
	`ngx_hash_föd
(&
uwcf
->
hódîs_hash
, 
hash
, 
lowˇ£_key
, 
n
)) {

678 
ign‹ed
[
hódî_∑øms
++] = &
hódî
[
i
];

683 
Àn
 +2 + ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.len

684 + 2 + 
hódî
[
i
].
vÆue
.
Àn
;

688 
Àn
 +
uwcf
->
uwsgi_°rög
.len;

692 i‡(
Àn
 > 0 &&Üen < 2) {

693 
	`ngx_log_îr‹
 (
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

694 "uwsgòªque° i†toÿlôée: %uz", 
Àn
);

695  
NGX_ERROR
;

699 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
 + 4);

700 i‡(
b
 =
NULL
) {

701  
NGX_ERROR
;

704 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

705 i‡(
˛
 =
NULL
) {

706  
NGX_ERROR
;

709 
˛
->
buf
 = 
b
;

711 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr1
;

712 *
b
->
œ°
++ = (
u_ch¨
Ë(
Àn
 & 0xff);

713 *
b
->
œ°
++ = (
u_ch¨
Ë((
Àn
 >> 8) & 0xff);

714 *
b
->
œ°
++ = (
u_ch¨
Ë
uwcf
->
modifõr2
;

716 i‡(
uwcf
->
∑øms_Àn
) {

717 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

719 
e
.
ù
 = 
uwcf
->
∑øms
->
ñts
;

720 
e
.
pos
 = 
b
->
œ°
;

721 
e
.
ªque°
 = 
r
;

722 
e
.
Êushed
 = 1;

724 
À
.
ù
 = 
uwcf
->
∑øms_Àn
->
ñts
;

726 *(
uöçå_t
 *Ë
À
.
ù
) {

728 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

729 
key_Àn
 = (
u_ch¨
Ë
	`lcode
 (&
À
);

731 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

732 
skù_em±y
 = 
	`lcode
(&
À
);

734 
vÆ_Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
; vÆ_À¿+
	`lcode
(&le)) {

735 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

737 
À
.
ù
 +(
uöçå_t
);

739 i‡(
skù_em±y
 && 
vÆ_Àn
 == 0) {

740 
e
.
skù
 = 1;

742 *(
uöçå_t
 *Ë
e
.
ù
) {

743 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

744 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

746 
e
.
ù
 +(
uöçå_t
);

748 
e
.
skù
 = 0;

753 *
e
.
pos
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

754 *
e
.
pos
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

756 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

757 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

759 *
e
.
pos
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

760 *
e
.
pos
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

762 *(
uöçå_t
 *Ë
e
.
ù
) {

763 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

764 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë& 
e
);

767 
e
.
ù
 +(
uöçå_t
);

769 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

771 
key_Àn
, 
e
.
pos
 - (key_À¿+ 2 + 
vÆ_Àn
),

772 
vÆ_Àn
, 
e
.
pos
 - val_len);

775 
b
->
œ°
 = 
e
.
pos
;

778 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_hódîs
) {

780 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

781 
hódî
 = 
∑π
->
ñts
;

783 
i
 = 0; ; i++) {

785 i‡(
i
 >
∑π
->
√…s
) {

786 i‡(
∑π
->
√xt
 =
NULL
) {

790 
∑π
 =Ö¨t->
√xt
;

791 
hódî
 = 
∑π
->
ñts
;

792 
i
 = 0;

795 
n
 = 0;Ç < 
hódî_∑øms
;Ç++) {

796 i‡(&
hódî
[
i
] =
ign‹ed
[
n
]) {

797 
√xt
;

801 
key_Àn
 = ("HTTP_"Ë- 1 + 
hódî
[
i
].
key
.
Àn
;

802 *
b
->
œ°
++ = (
u_ch¨
Ë(
key_Àn
 & 0xff);

803 *
b
->
œ°
++ = (
u_ch¨
Ë((
key_Àn
 >> 8) & 0xff);

805 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP_", ("HTTP_") - 1);

806 
n
 = 0;Ç < 
hódî
[
i
].
key
.
Àn
;Ç++) {

807 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

809 i‡(
ch
 >= 'a' && ch <= 'z') {

810 
ch
 &= ~0x20;

812 } i‡(
ch
 == '-') {

813 
ch
 = '_';

816 *
b
->
œ°
++ = 
ch
;

819 
vÆ_Àn
 = 
hódî
[
i
].
vÆue
.
Àn
;

820 *
b
->
œ°
++ = (
u_ch¨
Ë(
vÆ_Àn
 & 0xff);

821 *
b
->
œ°
++ = (
u_ch¨
Ë((
vÆ_Àn
 >> 8) & 0xff);

822 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, 
vÆ_Àn
);

824 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

826 
key_Àn
, 
b
->
œ°
 - (key_À¿+ 2 + 
vÆ_Àn
),

827 
vÆ_Àn
, 
b
->
œ°
 - val_len);

828 
√xt
:

834 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
uwcf
->
uwsgi_°rög
.
d©a
,

835 
uwcf
->
uwsgi_°rög
.
Àn
);

837 i‡(
uwcf
->
up°ªam
.
∑ss_ªque°_body
) {

838 
body
 = 
r
->
up°ªam
->
ªque°_bufs
;

839 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

841 
body
) {

842 
b
 = 
	`ngx_Æloc_buf
(
r
->
poﬁ
);

843 i‡(
b
 =
NULL
) {

844  
NGX_ERROR
;

847 
	`ngx_mem˝y
(
b
, 
body
->
buf
, (
ngx_buf_t
));

849 
˛
->
√xt
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

850 i‡(
˛
->
√xt
 =
NULL
) {

851  
NGX_ERROR
;

854 
˛
 = cl->
√xt
;

855 
˛
->
buf
 = 
b
;

857 
body
 = body->
√xt
;

861 
r
->
up°ªam
->
ªque°_bufs
 = 
˛
;

864 
˛
->
√xt
 = 
NULL
;

866  
NGX_OK
;

867 
	}
}

870 
ngx_öt_t


871 
	$ngx_hâp_uwsgi_ªöô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

873 
ngx_hâp_°©us_t
 *
°©us
;

875 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

877 i‡(
°©us
 =
NULL
) {

878  
NGX_OK
;

881 
°©us
->
code
 = 0;

882 
°©us
->
cou¡
 = 0;

883 
°©us
->
°¨t
 = 
NULL
;

884 
°©us
->
íd
 = 
NULL
;

886 
r
->
up°ªam
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_°©us_löe
;

887 
r
->
°©e
 = 0;

889  
NGX_OK
;

890 
	}
}

893 
ngx_öt_t


894 
	$ngx_hâp_uwsgi_¥o˚ss_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
)

896 
size_t
 
Àn
;

897 
ngx_öt_t
 
rc
;

898 
ngx_hâp_°©us_t
 *
°©us
;

899 
ngx_hâp_up°ªam_t
 *
u
;

901 
°©us
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_uwsgi_moduÀ
);

903 i‡(
°©us
 =
NULL
) {

904  
NGX_ERROR
;

907 
u
 = 
r
->
up°ªam
;

909 
rc
 = 
	`ngx_hâp_∑r£_°©us_löe
(
r
, &
u
->
buf„r
, 
°©us
);

911 i‡(
rc
 =
NGX_AGAIN
) {

912  
rc
;

915 i‡(
rc
 =
NGX_ERROR
) {

916 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

917  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

920 i‡(
u
->
°©e
) {

921 
u
->
°©e
->
°©us
 = sètus->
code
;

924 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
->
code
;

926 
Àn
 = 
°©us
->
íd
 - sètus->
°¨t
;

927 
u
->
hódîs_ö
.
°©us_löe
.
Àn
 =Üen;

929 
u
->
hódîs_ö
.
°©us_löe
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

930 i‡(
u
->
hódîs_ö
.
°©us_löe
.
d©a
 =
NULL
) {

931  
NGX_ERROR
;

934 
	`ngx_mem˝y
(
u
->
hódîs_ö
.
°©us_löe
.
d©a
, 
°©us
->
°¨t
, 
Àn
);

936 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 
u
->
hódîs_ö
.
°©us_n
, &u->hódîs_ö.
°©us_löe
);

940 
u
->
¥o˚ss_hódî
 = 
ngx_hâp_uwsgi_¥o˚ss_hódî
;

942  
	`ngx_hâp_uwsgi_¥o˚ss_hódî
(
r
);

943 
	}
}

946 
ngx_öt_t


947 
	$ngx_hâp_uwsgi_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
)

949 
ngx_°r_t
 *
°©us_löe
;

950 
ngx_öt_t
 
rc
, 
°©us
;

951 
ngx_èbÀ_ñt_t
 *
h
;

952 
ngx_hâp_up°ªam_t
 *
u
;

953 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

954 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

956 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

960 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
, &r->
up°ªam
->
buf„r
, 1);

962 i‡(
rc
 =
NGX_OK
) {

966 
h
 = 
	`ngx_li°_push
(&
r
->
up°ªam
->
hódîs_ö
.
hódîs
);

967 i‡(
h
 =
NULL
) {

968  
NGX_ERROR
;

971 
h
->
hash
 = 
r
->
hódî_hash
;

973 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

974 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

976 
h
->
key
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

977 
h
->
key
.
Àn
 + 1 + h->
vÆue
.len + 1

978 + 
h
->
key
.
Àn
);

979 i‡(
h
->
key
.
d©a
 =
NULL
) {

980  
NGX_ERROR
;

983 
h
->
vÆue
.
d©a
 = h->
key
.d©®+ h->key.
Àn
 + 1;

984 
h
->
lowˇ£_key
 = h->
key
.
d©a
 + h->key.
Àn
 + 1 + h->
vÆue
.len + 1;

986 
	`ngx_mem˝y
(
h
->
key
.
d©a
, 
r
->
hódî_«me_°¨t
, h->key.
Àn
);

987 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

988 
	`ngx_mem˝y
(
h
->
vÆue
.
d©a
, 
r
->
hódî_°¨t
, h->vÆue.
Àn
);

989 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

991 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

992 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

995 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

998 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
->
hash
,

999 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1001 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1002  
NGX_ERROR
;

1005 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1006 "hâ∞uwsgòhódî: \"%V: %V\"", &
h
->
key
, &h->
vÆue
);

1011 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1015 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1018 
u
 = 
r
->
up°ªam
;

1020 i‡(
u
->
hódîs_ö
.
°©us_n
) {

1021 
d⁄e
;

1024 i‡(
u
->
hódîs_ö
.
°©us
) {

1025 
°©us_löe
 = &
u
->
hódîs_ö
.
°©us
->
vÆue
;

1027 
°©us
 = 
	`ngx_©oi
(
°©us_löe
->
d©a
, 3);

1028 i‡(
°©us
 =
NGX_ERROR
) {

1029 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1031 
°©us_löe
);

1032  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1035 
u
->
hódîs_ö
.
°©us_n
 = 
°©us
;

1036 
u
->
hódîs_ö
.
°©us_löe
 = *status_line;

1038 } i‡(
u
->
hódîs_ö
.
loˇti⁄
) {

1039 
u
->
hódîs_ö
.
°©us_n
 = 302;

1040 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
,

1044 
u
->
hódîs_ö
.
°©us_n
 = 200;

1045 
	`ngx_°r_£t
(&
u
->
hódîs_ö
.
°©us_löe
, "200 OK");

1048 i‡(
u
->
°©e
) {

1049 
u
->
°©e
->
°©us
 = u->
hódîs_ö
.
°©us_n
;

1052 
d⁄e
:

1054 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_SWITCHING_PROTOCOLS


1055 && 
r
->
hódîs_ö
.
upgøde
)

1057 
u
->
upgøde
 = 1;

1060  
NGX_OK
;

1063 i‡(
rc
 =
NGX_AGAIN
) {

1064  
NGX_AGAIN
;

1069 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1072  
NGX_HTTP_UPSTREAM_INVALID_HEADER
;

1074 
	}
}

1078 
	$ngx_hâp_uwsgi_ab‹t_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1080 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1084 
	}
}

1088 
	$ngx_hâp_uwsgi_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

1090 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1094 
	}
}

1098 
	$ngx_hâp_uwsgi_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1100 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
;

1102 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_uwsgi_loc_c⁄f_t
));

1103 i‡(
c⁄f
 =
NULL
) {

1104  
NULL
;

1107 
c⁄f
->
modifõr1
 = 
NGX_CONF_UNSET_UINT
;

1108 
c⁄f
->
modifõr2
 = 
NGX_CONF_UNSET_UINT
;

1110 
c⁄f
->
up°ªam
.
°‹e
 = 
NGX_CONF_UNSET
;

1111 
c⁄f
->
up°ªam
.
°‹e_ac˚ss
 = 
NGX_CONF_UNSET_UINT
;

1112 
c⁄f
->
up°ªam
.
buf„rög
 = 
NGX_CONF_UNSET
;

1113 
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
 = 
NGX_CONF_UNSET
;

1115 
c⁄f
->
up°ªam
.
loˇl
 = 
NGX_CONF_UNSET_PTR
;

1117 
c⁄f
->
up°ªam
.
c⁄√˘_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1118 
c⁄f
->
up°ªam
.
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1119 
c⁄f
->
up°ªam
.
ªad_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1121 
c⁄f
->
up°ªam
.
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

1122 
c⁄f
->
up°ªam
.
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1124 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1125 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1126 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 = 
NGX_CONF_UNSET_SIZE
;

1128 
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
 = 
NGX_CONF_UNSET
;

1129 
c⁄f
->
up°ªam
.
∑ss_ªque°_body
 = 
NGX_CONF_UNSET
;

1131 #i‡(
NGX_HTTP_CACHE
)

1132 
c⁄f
->
up°ªam
.
ˇche
 = 
NGX_CONF_UNSET_PTR
;

1133 
c⁄f
->
up°ªam
.
ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

1134 
c⁄f
->
up°ªam
.
ˇche_by∑ss
 = 
NGX_CONF_UNSET_PTR
;

1135 
c⁄f
->
up°ªam
.
no_ˇche
 = 
NGX_CONF_UNSET_PTR
;

1136 
c⁄f
->
up°ªam
.
ˇche_vÆid
 = 
NGX_CONF_UNSET_PTR
;

1137 
c⁄f
->
up°ªam
.
ˇche_lock
 = 
NGX_CONF_UNSET
;

1138 
c⁄f
->
up°ªam
.
ˇche_lock_timeout
 = 
NGX_CONF_UNSET_MSEC
;

1141 
c⁄f
->
up°ªam
.
hide_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1142 
c⁄f
->
up°ªam
.
∑ss_hódîs
 = 
NGX_CONF_UNSET_PTR
;

1144 
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
 = 
NGX_CONF_UNSET
;

1147 
c⁄f
->
up°ªam
.
cy˛ic_ãmp_fûe
 = 0;

1149 
c⁄f
->
up°ªam
.
ch™ge_buf„rög
 = 1;

1151 
	`ngx_°r_£t
(&
c⁄f
->
up°ªam
.
moduÀ
, "uwsgi");

1153  
c⁄f
;

1154 
	}
}

1158 
	$ngx_hâp_uwsgi_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1160 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1161 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1163 
size_t
 
size
;

1164 
ngx_hash_öô_t
 
hash
;

1165 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1167 i‡(
c⁄f
->
up°ªam
.
°‹e
 != 0) {

1168 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
°‹e
, 
¥ev
->upstream.store, 0);

1170 i‡(
c⁄f
->
up°ªam
.
°‹e_Àngths
 =
NULL
) {

1171 
c⁄f
->
up°ªam
.
°‹e_Àngths
 = 
¥ev
->upstream.store_lengths;

1172 
c⁄f
->
up°ªam
.
°‹e_vÆues
 = 
¥ev
->upstream.store_values;

1176 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
°‹e_ac˚ss
,

1177 
¥ev
->
up°ªam
.
°‹e_ac˚ss
, 0600);

1179 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
buf„rög
,

1180 
¥ev
->
up°ªam
.
buf„rög
, 1);

1182 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
,

1183 
¥ev
->
up°ªam
.
ign‹e_˛õ¡_ab‹t
, 0);

1185 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
loˇl
,

1186 
¥ev
->
up°ªam
.
loˇl
, 
NULL
);

1188 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
c⁄√˘_timeout
,

1189 
¥ev
->
up°ªam
.
c⁄√˘_timeout
, 60000);

1191 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
£nd_timeout
,

1192 
¥ev
->
up°ªam
.
£nd_timeout
, 60000);

1194 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ªad_timeout
,

1195 
¥ev
->
up°ªam
.
ªad_timeout
, 60000);

1197 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
£nd_low©
,

1198 
¥ev
->
up°ªam
.
£nd_low©
, 0);

1200 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
buf„r_size
,

1201 
¥ev
->
up°ªam
.
buf„r_size
,

1202 (
size_t
Ë
ngx_∑gesize
);

1205 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
up°ªam
.
bufs
, 
¥ev
->upstream.bufs,

1206 8, 
ngx_∑gesize
);

1208 i‡(
c⁄f
->
up°ªam
.
bufs
.
num
 < 2) {

1209 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1211  
NGX_CONF_ERROR
;

1215 
size
 = 
c⁄f
->
up°ªam
.
buf„r_size
;

1216 i‡(
size
 < 
c⁄f
->
up°ªam
.
bufs
.size) {

1217 
size
 = 
c⁄f
->
up°ªam
.
bufs
.size;

1221 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1222 
¥ev
->
up°ªam
.
busy_buf„rs_size_c⁄f
,

1223 
NGX_CONF_UNSET_SIZE
);

1225 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1226 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 = 2 * 
size
;

1228 
c⁄f
->
up°ªam
.
busy_buf„rs_size
 =

1229 
c⁄f
->
up°ªam
.
busy_buf„rs_size_c⁄f
;

1232 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size
 < 
size
) {

1233 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1238  
NGX_CONF_ERROR
;

1241 i‡(
c⁄f
->
up°ªam
.
busy_buf„rs_size


1242 > (
c⁄f
->
up°ªam
.
bufs
.
num
 - 1Ë* c⁄f->up°ªam.bufs.
size
)

1244 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1248  
NGX_CONF_ERROR
;

1252 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1253 
¥ev
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
,

1254 
NGX_CONF_UNSET_SIZE
);

1256 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1257 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 = 2 * 
size
;

1259 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 =

1260 
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size_c⁄f
;

1263 i‡(
c⁄f
->
up°ªam
.
ãmp_fûe_wrôe_size
 < 
size
) {

1264 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1269  
NGX_CONF_ERROR
;

1273 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1274 
¥ev
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
,

1275 
NGX_CONF_UNSET_SIZE
);

1277 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
 =
NGX_CONF_UNSET_SIZE
) {

1278 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 = 1024 * 1024 * 1024;

1280 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 =

1281 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size_c⁄f
;

1284 i‡(
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 != 0

1285 && 
c⁄f
->
up°ªam
.
max_ãmp_fûe_size
 < 
size
) {

1286 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1292  
NGX_CONF_ERROR
;

1296 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ign‹e_hódîs
,

1297 
¥ev
->
up°ªam
.
ign‹e_hódîs
,

1298 
NGX_CONF_BITMASK_SET
);

1301 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
√xt_up°ªam
,

1302 
¥ev
->
up°ªam
.
√xt_up°ªam
,

1303 (
NGX_CONF_BITMASK_SET


1304 |
NGX_HTTP_UPSTREAM_FT_ERROR


1305 |
NGX_HTTP_UPSTREAM_FT_TIMEOUT
));

1307 i‡(
c⁄f
->
up°ªam
.
√xt_up°ªam
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1308 
c⁄f
->
up°ªam
.
√xt_up°ªam
 = 
NGX_CONF_BITMASK_SET


1309 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1312 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
up°ªam
.
ãmp_∑th
,

1313 
¥ev
->
up°ªam
.
ãmp_∑th
,

1314 &
ngx_hâp_uwsgi_ãmp_∑th
)

1315 !
NGX_OK
)

1317  
NGX_CONF_ERROR
;

1320 #i‡(
NGX_HTTP_CACHE
)

1322 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche
,

1323 
¥ev
->
up°ªam
.
ˇche
, 
NULL
);

1325 i‡(
c⁄f
->
up°ªam
.
ˇche
 && c⁄f->up°ªam.ˇche->
d©a
 =
NULL
) {

1326 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

1328 
shm_z⁄e
 = 
c⁄f
->
up°ªam
.
ˇche
;

1330 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1332 &
shm_z⁄e
->
shm
.
«me
);

1334  
NGX_CONF_ERROR
;

1337 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
up°ªam
.
ˇche_mö_u£s
,

1338 
¥ev
->
up°ªam
.
ˇche_mö_u£s
, 1);

1340 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
,

1341 
¥ev
->
up°ªam
.
ˇche_u£_°Æe
,

1342 (
NGX_CONF_BITMASK_SET


1343 |
NGX_HTTP_UPSTREAM_FT_OFF
));

1345 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_OFF
) {

1346 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 = 
NGX_CONF_BITMASK_SET


1347 |
NGX_HTTP_UPSTREAM_FT_OFF
;

1350 i‡(
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_ERROR
) {

1351 
c⁄f
->
up°ªam
.
ˇche_u£_°Æe
 |
NGX_HTTP_UPSTREAM_FT_NOLIVE
;

1354 i‡(
c⁄f
->
up°ªam
.
ˇche_mëhods
 == 0) {

1355 
c⁄f
->
up°ªam
.
ˇche_mëhods
 = 
¥ev
->upstream.cache_methods;

1358 
c⁄f
->
up°ªam
.
ˇche_mëhods
 |
NGX_HTTP_GET
|
NGX_HTTP_HEAD
;

1360 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_by∑ss
,

1361 
¥ev
->
up°ªam
.
ˇche_by∑ss
, 
NULL
);

1363 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
no_ˇche
,

1364 
¥ev
->
up°ªam
.
no_ˇche
, 
NULL
);

1366 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
up°ªam
.
ˇche_vÆid
,

1367 
¥ev
->
up°ªam
.
ˇche_vÆid
, 
NULL
);

1369 i‡(
c⁄f
->
ˇche_key
.
vÆue
.
d©a
 =
NULL
) {

1370 
c⁄f
->
ˇche_key
 = 
¥ev
->cache_key;

1373 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock
,

1374 
¥ev
->
up°ªam
.
ˇche_lock
, 0);

1376 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
up°ªam
.
ˇche_lock_timeout
,

1377 
¥ev
->
up°ªam
.
ˇche_lock_timeout
, 5000);

1381 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_hódîs
,

1382 
¥ev
->
up°ªam
.
∑ss_ªque°_hódîs
, 1);

1383 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
∑ss_ªque°_body
,

1384 
¥ev
->
up°ªam
.
∑ss_ªque°_body
, 1);

1386 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
up°ªam
.
öãr˚±_îr‹s
,

1387 
¥ev
->
up°ªam
.
öãr˚±_îr‹s
, 0);

1389 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
uwsgi_°rög
, 
¥ev
->uwsgi_string, "");

1391 
hash
.
max_size
 = 512;

1392 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

1393 
hash
.
«me
 = "uwsgi_hide_headers_hash";

1395 i‡(
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
cf
, &
c⁄f
->
up°ªam
,

1396 &
¥ev
->
up°ªam
, 
ngx_hâp_uwsgi_hide_hódîs
, &
hash
)

1397 !
NGX_OK
)

1399  
NGX_CONF_ERROR
;

1402 i‡(
c⁄f
->
up°ªam
.up°ªam =
NULL
) {

1403 
c⁄f
->
up°ªam
.up°ªam = 
¥ev
->upstream.upstream;

1406 i‡(
c⁄f
->
uwsgi_Àngths
 =
NULL
) {

1407 
c⁄f
->
uwsgi_Àngths
 = 
¥ev
->uwsgi_lengths;

1408 
c⁄f
->
uwsgi_vÆues
 = 
¥ev
->uwsgi_values;

1411 i‡(
c⁄f
->
up°ªam
.up°ªam || c⁄f->
uwsgi_Àngths
) {

1412 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1413 i‡(
˛cf
->
h™dÀr
 =
NULL
 && clcf->
lmt_ex˝t
) {

1414 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1418 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr1
, 
¥ev
->modifier1, 0);

1419 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
modifõr2
, 
¥ev
->modifier2, 0);

1421 i‡(
	`ngx_hâp_uwsgi_mîge_∑øms
(
cf
, 
c⁄f
, 
¥ev
Ë!
NGX_OK
) {

1422  
NGX_CONF_ERROR
;

1425  
NGX_CONF_OK
;

1426 
	}
}

1429 
ngx_öt_t


1430 
	$ngx_hâp_uwsgi_mîge_∑øms
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
c⁄f
,

1431 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
¥ev
)

1433 
u_ch¨
 *
p
;

1434 
size_t
 
size
;

1435 
uöçå_t
 *
code
;

1436 
ngx_uöt_t
 
i
, 
n§c
;

1437 
ngx_¨øy_t
 
hódîs_«mes
;

1438 #i‡(
NGX_HTTP_CACHE
)

1439 
ngx_¨øy_t
 
∑øms_mîged
;

1441 
ngx_hash_key_t
 *
hk
;

1442 
ngx_hash_öô_t
 
hash
;

1443 
ngx_hâp_up°ªam_∑øm_t
 *
§c
;

1444 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1445 
ngx_hâp_s¸ùt_c›y_code_t
 *
c›y
;

1447 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL
) {

1448 
c⁄f
->
∑øms_sour˚
 = 
¥ev
->params_source;

1450 i‡(
¥ev
->
hódîs_hash
.
buckës


1451 #i‡(
NGX_HTTP_CACHE
)

1452 && ((
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1453 =(
¥ev
->
up°ªam
.
ˇche
 =
NULL
))

1457 
c⁄f
->
Êushes
 = 
¥ev
->flushes;

1458 
c⁄f
->
∑øms_Àn
 = 
¥ev
->params_len;

1459 
c⁄f
->
∑øms
 = 
¥ev
->params;

1460 
c⁄f
->
hódîs_hash
 = 
¥ev
->headers_hash;

1461 
c⁄f
->
hódî_∑øms
 = 
¥ev
->header_params;

1463  
NGX_OK
;

1467 i‡(
c⁄f
->
∑øms_sour˚
 =
NULL


1468 #i‡(
NGX_HTTP_CACHE
)

1469 && (
c⁄f
->
up°ªam
.
ˇche
 =
NULL
)

1473 
c⁄f
->
hódîs_hash
.
buckës
 = (*) 1;

1474  
NGX_OK
;

1477 
c⁄f
->
∑øms_Àn
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, 1);

1478 i‡(
c⁄f
->
∑øms_Àn
 =
NULL
) {

1479  
NGX_ERROR
;

1482 
c⁄f
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 512, 1);

1483 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1484  
NGX_ERROR
;

1487 i‡(
	`ngx_¨øy_öô
(&
hódîs_«mes
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

1488 !
NGX_OK
)

1490  
NGX_ERROR
;

1493 i‡(
c⁄f
->
∑øms_sour˚
) {

1494 
§c
 = 
c⁄f
->
∑øms_sour˚
->
ñts
;

1495 
n§c
 = 
c⁄f
->
∑øms_sour˚
->
√…s
;

1498 
§c
 = 
NULL
;

1499 
n§c
 = 0;

1502 #i‡(
NGX_HTTP_CACHE
)

1504 i‡(
c⁄f
->
up°ªam
.
ˇche
) {

1505 
ngx_keyvÆ_t
 *
h
;

1506 
ngx_hâp_up°ªam_∑øm_t
 *
s
;

1508 i‡(
	`ngx_¨øy_öô
(&
∑øms_mîged
, 
cf
->
ãmp_poﬁ
, 4,

1509 (
ngx_hâp_up°ªam_∑øm_t
))

1510 !
NGX_OK
)

1512  
NGX_ERROR
;

1515 
i
 = 0; i < 
n§c
; i++) {

1517 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1518 i‡(
s
 =
NULL
) {

1519  
NGX_ERROR
;

1522 *
s
 = 
§c
[
i
];

1525 
h
 = 
ngx_hâp_uwsgi_ˇche_hódîs
;

1527 
h
->
key
.
Àn
) {

1529 
§c
 = 
∑øms_mîged
.
ñts
;

1530 
n§c
 = 
∑øms_mîged
.
√…s
;

1532 
i
 = 0; i < 
n§c
; i++) {

1533 i‡(
	`ngx_°rˇ£cmp
(
h
->
key
.
d©a
, 
§c
[
i
].key.data) == 0) {

1534 
√xt
;

1538 
s
 = 
	`ngx_¨øy_push
(&
∑øms_mîged
);

1539 i‡(
s
 =
NULL
) {

1540  
NGX_ERROR
;

1543 
s
->
key
 = 
h
->key;

1544 
s
->
vÆue
 = 
h
->value;

1545 
s
->
skù_em±y
 = 0;

1547 
√xt
:

1549 
h
++;

1552 
§c
 = 
∑øms_mîged
.
ñts
;

1553 
n§c
 = 
∑øms_mîged
.
√…s
;

1558 
i
 = 0; i < 
n§c
; i++) {

1560 i‡(
§c
[
i
].
key
.
Àn
 > ("HTTP_") - 1

1561 && 
	`ngx_°∫cmp
(
§c
[
i
].
key
.
d©a
, "HTTP_", ("HTTP_") - 1) == 0)

1563 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_«mes
);

1564 i‡(
hk
 =
NULL
) {

1565  
NGX_ERROR
;

1568 
hk
->
key
.
Àn
 = 
§c
[
i
].key.len - 5;

1569 
hk
->
key
.
d©a
 = 
§c
[
i
].key.data + 5;

1570 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(hk->
key
.
d©a
, hk->key.
Àn
);

1571 
hk
->
vÆue
 = (*) 1;

1573 i‡(
§c
[
i
].
vÆue
.
Àn
 == 0) {

1578 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1579 (
ngx_hâp_s¸ùt_c›y_code_t
));

1580 i‡(
c›y
 =
NULL
) {

1581  
NGX_ERROR
;

1584 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1585 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1587 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
,

1588 (
ngx_hâp_s¸ùt_c›y_code_t
));

1589 i‡(
c›y
 =
NULL
) {

1590  
NGX_ERROR
;

1593 
c›y
->
code
 = (
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

1594 
c›y
->
Àn
 = 
§c
[
i
].
skù_em±y
;

1597 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
)

1598 + 
§c
[
i
].
key
.
Àn
 + (
uöçå_t
) - 1)

1599 & ~((
uöçå_t
) - 1);

1601 
c›y
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, 
size
);

1602 i‡(
c›y
 =
NULL
) {

1603  
NGX_ERROR
;

1606 
c›y
->
code
 = 
ngx_hâp_s¸ùt_c›y_code
;

1607 
c›y
->
Àn
 = 
§c
[
i
].
key
.len;

1609 
p
 = (
u_ch¨
 *Ë
c›y
 + (
ngx_hâp_s¸ùt_c›y_code_t
);

1610 
	`ngx_mem˝y
(
p
, 
§c
[
i
].
key
.
d©a
, src[i].key.
Àn
);

1613 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1615 
sc
.
cf
 = cf;

1616 
sc
.
sour˚
 = &
§c
[
i
].
vÆue
;

1617 
sc
.
Êushes
 = &
c⁄f
->flushes;

1618 
sc
.
Àngths
 = &
c⁄f
->
∑øms_Àn
;

1619 
sc
.
vÆues
 = &
c⁄f
->
∑øms
;

1621 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1622  
NGX_ERROR
;

1625 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1626 i‡(
code
 =
NULL
) {

1627  
NGX_ERROR
;

1630 *
code
 = (
uöçå_t
Ë
NULL
;

1633 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms
, (
uöçå_t
));

1634 i‡(
code
 =
NULL
) {

1635  
NGX_ERROR
;

1638 *
code
 = (
uöçå_t
Ë
NULL
;

1641 
code
 = 
	`ngx_¨øy_push_n
(
c⁄f
->
∑øms_Àn
, (
uöçå_t
));

1642 i‡(
code
 =
NULL
) {

1643  
NGX_ERROR
;

1646 *
code
 = (
uöçå_t
Ë
NULL
;

1648 
c⁄f
->
hódî_∑øms
 = 
hódîs_«mes
.
√…s
;

1650 
hash
.hash = &
c⁄f
->
hódîs_hash
;

1651 
hash
.
key
 = 
ngx_hash_key_lc
;

1652 
hash
.
max_size
 = 512;

1653 
hash
.
buckë_size
 = 64;

1654 
hash
.
«me
 = "uwsgi_params_hash";

1655 
hash
.
poﬁ
 = 
cf
->pool;

1656 
hash
.
ãmp_poﬁ
 = 
NULL
;

1658  
	`ngx_hash_öô
(&
hash
, 
hódîs_«mes
.
ñts
, hódîs_«mes.
√…s
);

1659 
	}
}

1663 
	$ngx_hâp_uwsgi_∑ss
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1665 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1667 
ngx_uæ_t
 
u
;

1668 
ngx_°r_t
 *
vÆue
, *
uæ
;

1669 
ngx_uöt_t
 
n
;

1670 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1671 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1673 i‡(
uwcf
->
up°ªam
.up°ªam || uwcf->
uwsgi_Àngths
) {

1677 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
 (
cf
, 
ngx_hâp_c‹e_moduÀ
);

1678 
˛cf
->
h™dÀr
 = 
ngx_hâp_uwsgi_h™dÀr
;

1680 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1682 
uæ
 = &
vÆue
[1];

1684 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
uæ
);

1686 i‡(
n
) {

1688 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1690 
sc
.
cf
 = cf;

1691 
sc
.
sour˚
 = 
uæ
;

1692 
sc
.
Àngths
 = &
uwcf
->
uwsgi_Àngths
;

1693 
sc
.
vÆues
 = &
uwcf
->
uwsgi_vÆues
;

1694 
sc
.
v¨übÀs
 = 
n
;

1695 
sc
.
com∂ëe_Àngths
 = 1;

1696 
sc
.
com∂ëe_vÆues
 = 1;

1698 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1699  
NGX_CONF_ERROR
;

1702  
NGX_CONF_OK
;

1705 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1707 
u
.
uæ
 = 
vÆue
[1];

1708 
u
.
no_ªsﬁve
 = 1;

1710 
uwcf
->
up°ªam
.up°ªam = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 0);

1711 i‡(
uwcf
->
up°ªam
.up°ªam =
NULL
) {

1712  
NGX_CONF_ERROR
;

1715 i‡(
˛cf
->
«me
.
d©a
[˛cf->«me.
Àn
 - 1] == '/') {

1716 
˛cf
->
auto_ªdúe˘
 = 1;

1719  
NGX_CONF_OK
;

1720 
	}
}

1724 
	$ngx_hâp_uwsgi_°‹e
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1726 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1728 
ngx_°r_t
 *
vÆue
;

1729 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

1731 i‡(
uwcf
->
up°ªam
.
°‹e
 !
NGX_CONF_UNSET
 || uwcf->up°ªam.
°‹e_Àngths
)

1736 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1738 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1739 
uwcf
->
up°ªam
.
°‹e
 = 0;

1740  
NGX_CONF_OK
;

1743 #i‡(
NGX_HTTP_CACHE
)

1745 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR


1746 && 
uwcf
->
up°ªam
.
ˇche
 !
NULL
)

1753 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "on") == 0) {

1754 
uwcf
->
up°ªam
.
°‹e
 = 1;

1755  
NGX_CONF_OK
;

1759 
vÆue
[1].
Àn
++;

1761 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

1763 
sc
.
cf
 = cf;

1764 
sc
.
sour˚
 = &
vÆue
[1];

1765 
sc
.
Àngths
 = &
uwcf
->
up°ªam
.
°‹e_Àngths
;

1766 
sc
.
vÆues
 = &
uwcf
->
up°ªam
.
°‹e_vÆues
;

1767 
sc
.
v¨übÀs
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
vÆue
[1]);;

1768 
sc
.
com∂ëe_Àngths
 = 1;

1769 
sc
.
com∂ëe_vÆues
 = 1;

1771 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

1772  
NGX_CONF_ERROR
;

1775  
NGX_CONF_OK
;

1776 
	}
}

1779 #i‡(
NGX_HTTP_CACHE
)

1782 
	$ngx_hâp_uwsgi_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1784 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1786 
ngx_°r_t
 *
vÆue
;

1788 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1790 i‡(
uwcf
->
up°ªam
.
ˇche
 !
NGX_CONF_UNSET_PTR
) {

1794 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

1795 
uwcf
->
up°ªam
.
ˇche
 = 
NULL
;

1796  
NGX_CONF_OK
;

1799 i‡(
uwcf
->
up°ªam
.
°‹e
 > 0 || uwcf->up°ªam.
°‹e_Àngths
) {

1803 
uwcf
->
up°ªam
.
ˇche
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
vÆue
[1], 0,

1804 &
ngx_hâp_uwsgi_moduÀ
);

1805 i‡(
uwcf
->
up°ªam
.
ˇche
 =
NULL
) {

1806  
NGX_CONF_ERROR
;

1809  
NGX_CONF_OK
;

1810 
	}
}

1814 
	$ngx_hâp_uwsgi_ˇche_key
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1816 
ngx_hâp_uwsgi_loc_c⁄f_t
 *
uwcf
 = 
c⁄f
;

1818 
ngx_°r_t
 *
vÆue
;

1819 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

1821 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1823 i‡(
uwcf
->
ˇche_key
.
vÆue
.
d©a
) {

1827 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

1829 
ccv
.
cf
 = cf;

1830 
ccv
.
vÆue
 = &value[1];

1831 
ccv
.
com∂ex_vÆue
 = &
uwcf
->
ˇche_key
;

1833 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

1834  
NGX_CONF_ERROR
;

1837  
NGX_CONF_OK
;

1838 
	}
}

	@src/http/modules/ngx_http_xslt_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

12 
	~<libxml/∑r£r.h
>

13 
	~<libxml/åì.h
>

14 
	~<libx¶t/x¶t.h
>

15 
	~<libx¶t/x¶tI¡î«ls.h
>

16 
	~<libx¶t/å™sf‹m.h
>

17 
	~<libx¶t/v¨übÀs.h
>

18 
	~<libx¶t/x¶tutûs.h
>

20 #i‡(
NGX_HAVE_EXSLT
)

21 
	~<libex¶t/ex¶t.h
>

25 #i‚de‡
NGX_HTTP_XSLT_REUSE_DTD


26 
	#NGX_HTTP_XSLT_REUSE_DTD
 1

	)

31 
u_ch¨
 *
	m«me
;

32 *
	md©a
;

33 } 
	tngx_hâp_x¶t_fûe_t
;

37 
ngx_¨øy_t
 
	mdtd_fûes
;

38 
ngx_¨øy_t
 
	mshìt_fûes
;

39 } 
	tngx_hâp_x¶t_fûãr_maö_c⁄f_t
;

43 
u_ch¨
 *
	m«me
;

44 
ngx_hâp_com∂ex_vÆue_t
 
	mvÆue
;

45 
ngx_uöt_t
 
	mquŸe
;

46 } 
	tngx_hâp_x¶t_∑øm_t
;

50 
x¶tStyÀshìtPå
 
	m°yÀshìt
;

51 
ngx_¨øy_t
 
	m∑øms
;

52 } 
	tngx_hâp_x¶t_shìt_t
;

56 
xmlDtdPå
 
	mdtd
;

57 
ngx_¨øy_t
 
	mshìts
;

58 
ngx_hash_t
 
	mty≥s
;

59 
ngx_¨øy_t
 *
	mty≥s_keys
;

60 
ngx_¨øy_t
 *
	m∑øms
;

61 } 
	tngx_hâp_x¶t_fûãr_loc_c⁄f_t
;

65 
xmlDocPå
 
	mdoc
;

66 
xmlP¨£rCtxtPå
 
	m˘xt
;

67 
x¶tTønsf‹mC⁄ãxtPå
 
	må™sf‹m
;

68 
ngx_hâp_ªque°_t
 *
	mªque°
;

69 
ngx_¨øy_t
 
	m∑øms
;

71 
ngx_uöt_t
 
	md⁄e
;

72 } 
	tngx_hâp_x¶t_fûãr_˘x_t
;

75 
ngx_öt_t
 
ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

77 
ngx_öt_t
 
ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_buf_t
 *
b
);

81 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

82 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
);

83 
ngx_cde˛
 
ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...);

86 
ngx_buf_t
 *
ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
);

88 
ngx_öt_t
 
ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
, 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
);

90 
u_ch¨
 *
ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
);

91 
u_ch¨
 *
ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
);

92 
ngx_hâp_x¶t_˛ónup
(*
d©a
);

94 *
ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

95 *
c⁄f
);

96 *
ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

97 *
c⁄f
);

98 *
ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

99 *
c⁄f
);

100 
ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
);

101 
ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
);

102 *
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

103 *
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

104 *
ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

105 *
chûd
);

106 
ngx_öt_t
 
ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

107 
ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
);

110 
ngx_°r_t
 
	gngx_hâp_x¶t_deÁu…_ty≥s
[] = {

111 
ngx_°rög
("text/xml"),

112 
ngx_nuŒ_°rög


116 
ngx_comm™d_t
 
	gngx_hâp_x¶t_fûãr_comm™ds
[] = {

118 { 
ngx_°rög
("xml_entities"),

119 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

120 
ngx_hâp_x¶t_ítôõs
,

121 
NGX_HTTP_LOC_CONF_OFFSET
,

123 
NULL
 },

125 { 
ngx_°rög
("xslt_stylesheet"),

126 
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

127 
ngx_hâp_x¶t_°yÀshìt
,

128 
NGX_HTTP_LOC_CONF_OFFSET
,

130 
NULL
 },

132 { 
ngx_°rög
("xslt_param"),

133 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

134 
ngx_hâp_x¶t_∑øm
,

135 
NGX_HTTP_LOC_CONF_OFFSET
,

137 
NULL
 },

139 { 
ngx_°rög
("xslt_string_param"),

140 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

141 
ngx_hâp_x¶t_∑øm
,

142 
NGX_HTTP_LOC_CONF_OFFSET
,

146 { 
ngx_°rög
("xslt_types"),

147 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

148 
ngx_hâp_ty≥s_¶Ÿ
,

149 
NGX_HTTP_LOC_CONF_OFFSET
,

150 
off£tof
(
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
, 
ty≥s_keys
),

151 &
ngx_hâp_x¶t_deÁu…_ty≥s
[0] },

153 
ngx_nuŒ_comm™d


157 
ngx_hâp_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ_˘x
 = {

158 
NULL
,

159 
ngx_hâp_x¶t_fûãr_öô
,

161 
ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
,

162 
NULL
,

164 
NULL
,

165 
NULL
,

167 
ngx_hâp_x¶t_fûãr_¸óã_c⁄f
,

168 
ngx_hâp_x¶t_fûãr_mîge_c⁄f


172 
ngx_moduÀ_t
 
	gngx_hâp_x¶t_fûãr_moduÀ
 = {

173 
NGX_MODULE_V1
,

174 &
ngx_hâp_x¶t_fûãr_moduÀ_˘x
,

175 
ngx_hâp_x¶t_fûãr_comm™ds
,

176 
NGX_HTTP_MODULE
,

177 
NULL
,

178 
NULL
,

179 
NULL
,

180 
NULL
,

181 
NULL
,

182 
ngx_hâp_x¶t_fûãr_exô
,

183 
ngx_hâp_x¶t_fûãr_exô
,

184 
NGX_MODULE_V1_PADDING


188 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

189 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

192 
ngx_öt_t


193 
	$ngx_hâp_x¶t_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

195 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

196 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

198 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

201 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

202  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

205 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

207 i‡(
c⁄f
->
shìts
.
√…s
 == 0

208 || 
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
r
, &
c⁄f
->
ty≥s
Ë=
NULL
)

210  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

213 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

215 i‡(
˘x
) {

216  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

219 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_˘x_t
));

220 i‡(
˘x
 =
NULL
) {

221  
NGX_ERROR
;

224 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

226 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

228  
NGX_OK
;

229 
	}
}

232 
ngx_öt_t


233 
	$ngx_hâp_x¶t_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

235 
wñlF‹med
;

236 
ngx_chaö_t
 *
˛
;

237 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

239 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

242 i‡(
ö
 =
NULL
) {

243  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

246 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

248 i‡(
˘x
 =
NULL
 || ctx->
d⁄e
) {

249  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

252 
˛
 = 
ö
; cl; c»˛->
√xt
) {

254 i‡(
	`ngx_hâp_x¶t_add_chunk
(
r
, 
˘x
, 
˛
->
buf
Ë!
NGX_OK
) {

256 i‡(
˘x
->
˘xt
->
myDoc
) {

258 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

259 
˘x
->
˘xt
->
myDoc
->
extSub£t
 = 
NULL
;

261 
	`xmlFªeDoc
(
˘x
->
˘xt
->
myDoc
);

264 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

266  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

269 i‡(
˛
->
buf
->
œ°_buf
 || cl->buf->
œ°_ö_chaö
) {

271 
˘x
->
doc
 = ctx->
˘xt
->
myDoc
;

273 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

274 
˘x
->
doc
->
extSub£t
 = 
NULL
;

277 
wñlF‹med
 = 
˘x
->
˘xt
->wellFormed;

279 
	`xmlFªeP¨£rCtxt
(
˘x
->
˘xt
);

281 i‡(
wñlF‹med
) {

282  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
,

283 
	`ngx_hâp_x¶t_≠∂y_°yÀshìt
(
r
, 
˘x
));

286 
	`xmlFªeDoc
(
˘x
->
doc
);

288 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

291  
	`ngx_hâp_x¶t_£nd
(
r
, 
˘x
, 
NULL
);

295  
NGX_OK
;

296 
	}
}

299 
ngx_öt_t


300 
	$ngx_hâp_x¶t_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

301 
ngx_buf_t
 *
b
)

303 
ngx_öt_t
 
rc
;

304 
ngx_chaö_t
 
out
;

305 
ngx_poﬁ_˛ónup_t
 *
˛n
;

307 
˘x
->
d⁄e
 = 1;

309 i‡(
b
 =
NULL
) {

310  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

311 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

314 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

316 i‡(
˛n
 =
NULL
) {

317 
	`ngx_‰ì
(
b
->
pos
);

318  
	`ngx_hâp_fûãr_föÆize_ªque°
(
r
, &
ngx_hâp_x¶t_fûãr_moduÀ
,

319 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

322 i‡(
r
 =r->
maö
) {

323 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
b
->
œ°
 - b->
pos
;

325 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

326 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

327 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

330 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

331 
	`ngx_hâp_˛ór_ëag
(
r
);

334 
rc
 = 
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

336 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

337 
	`ngx_‰ì
(
b
->
pos
);

338  
rc
;

341 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup
;

342 
˛n
->
d©a
 = 
b
->
pos
;

344 
out
.
buf
 = 
b
;

345 
out
.
√xt
 = 
NULL
;

347  
	`ngx_hâp_√xt_body_fûãr
(
r
, &
out
);

348 
	}
}

351 
ngx_öt_t


352 
	$ngx_hâp_x¶t_add_chunk
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

353 
ngx_buf_t
 *
b
)

355 
îr
;

356 
xmlP¨£rCtxtPå
 
˘xt
;

358 i‡(
˘x
->
˘xt
 =
NULL
) {

360 
˘xt
 = 
	`xmlCª©ePushP¨£rCtxt
(
NULL
, NULL, NULL, 0, NULL);

361 i‡(
˘xt
 =
NULL
) {

362 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

364  
NGX_ERROR
;

366 
	`xmlCtxtU£O±i⁄s
(
˘xt
, 
XML_PARSE_NOENT
|
XML_PARSE_DTDLOAD


367 |
XML_PARSE_NOWARNING
);

369 
˘xt
->
ßx
->
exã∫ÆSub£t
 = 
ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
;

370 
˘xt
->
ßx
->
£tDocumítLoˇt‹
 = 
NULL
;

371 
˘xt
->
ßx
->
îr‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

372 
˘xt
->
ßx
->
ÁèlEº‹
 = 
ngx_hâp_x¶t_ßx_îr‹
;

373 
˘xt
->
ßx
->
_¥iv©e
 = 
˘x
;

375 
˘x
->
˘xt
 = ctxt;

376 
˘x
->
ªque°
 = 
r
;

379 
îr
 = 
	`xmlP¨£Chunk
(
˘x
->
˘xt
, (*Ë
b
->
pos
, (Ë(b->
œ°
 - b->pos),

380 (
b
->
œ°_buf
Ë|| (b->
œ°_ö_chaö
));

382 i‡(
îr
 == 0) {

383 
b
->
pos
 = b->
œ°
;

384  
NGX_OK
;

387 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

388 "xmlP¨£Chunk(ËÁûed,Éº‹:%d", 
îr
);

390  
NGX_ERROR
;

391 
	}
}

395 
	$ngx_hâp_x¶t_ßx_exã∫Æ_sub£t
(*
d©a
, c⁄° 
xmlCh¨
 *
«me
,

396 c⁄° 
xmlCh¨
 *
exã∫ÆId
, c⁄° xmlCh¨ *
sy°emId
)

398 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

400 
xmlDocPå
 
doc
;

401 
xmlDtdPå
 
dtd
;

402 
ngx_hâp_ªque°_t
 *
r
;

403 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

404 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

406 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

407 
r
 = 
˘x
->
ªque°
;

409 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

411 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

413 
«me
 ?Çamê: (
xmlCh¨
 *) "",

414 
exã∫ÆId
 ?Éxã∫ÆId : (
xmlCh¨
 *) "",

415 
sy°emId
 ? sy°emId : (
xmlCh¨
 *) "");

417 
doc
 = 
˘xt
->
myDoc
;

419 #i‡(
NGX_HTTP_XSLT_REUSE_DTD
)

421 
dtd
 = 
c⁄f
->dtd;

425 
dtd
 = 
	`xmlC›yDtd
(
c⁄f
->dtd);

426 i‡(
dtd
 =
NULL
) {

427 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

432 i‡(
doc
->
chûdªn
 =
NULL
) {

433 
	`xmlAddChûd
((
xmlNodePå
Ë
doc
, (xmlNodePåË
dtd
);

436 
	`xmlAddPªvSiblög
(
doc
->
chûdªn
, (
xmlNodePå
Ë
dtd
);

441 
doc
->
extSub£t
 = 
dtd
;

442 
	}
}

445 
ngx_cde˛


446 
	$ngx_hâp_x¶t_ßx_îr‹
(*
d©a
, c⁄° *
msg
, ...)

448 
xmlP¨£rCtxtPå
 
˘xt
 = 
d©a
;

450 
size_t
 
n
;

451 
va_li°
 
¨gs
;

452 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
;

453 
u_ch¨
 
buf
[
NGX_MAX_ERROR_STR
];

455 
˘x
 = 
˘xt
->
ßx
->
_¥iv©e
;

457 
buf
[0] = '\0';

459 
	`va_°¨t
(
¨gs
, 
msg
);

460 
n
 = (
size_t
Ë
	`v¢¥ötf
((*Ë
buf
, 
NGX_MAX_ERROR_STR
, 
msg
, 
¨gs
);

461 
	`va_íd
(
¨gs
);

463 --
n
 && (
buf
[n] =
CR
 || buf[n] =
LF
)) { }

465 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
˘x
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

466 "libxml2Éº‹: \"%*s\"", 
n
 + 1, 
buf
);

467 
	}
}

470 
ngx_buf_t
 *

471 
	$ngx_hâp_x¶t_≠∂y_°yÀshìt
(
ngx_hâp_ªque°_t
 *
r
,

472 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
)

474 
Àn
, 
rc
, 
doc_ty≥
;

475 
u_ch¨
 *
ty≥
, *
ícodög
;

476 
ngx_buf_t
 *
b
;

477 
ngx_uöt_t
 
i
;

478 
xmlCh¨
 *
buf
;

479 
xmlDocPå
 
doc
, 
ªs
;

480 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

481 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

483 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

484 
shìt
 = 
c⁄f
->
shìts
.
ñts
;

485 
doc
 = 
˘x
->doc;

489 i‡(
	`ngx_¨øy_öô
(&
˘x
->
∑øms
, 
r
->
poﬁ
, 4 * 2 + 1, (*))

490 !
NGX_OK
)

492 
	`xmlFªeDoc
(
doc
);

493  
NULL
;

496 
i
 = 0; i < 
c⁄f
->
shìts
.
√…s
; i++) {

498 
˘x
->
å™sf‹m
 = 
	`x¶tNewTønsf‹mC⁄ãxt
(
shìt
[
i
].
°yÀshìt
, 
doc
);

499 i‡(
˘x
->
å™sf‹m
 =
NULL
) {

500 
	`xmlFªeDoc
(
doc
);

501  
NULL
;

504 i‡(
c⁄f
->
∑øms


505 && 
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, 
c⁄f
->
∑øms
, 0Ë!
NGX_OK
)

507 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

508 
	`xmlFªeDoc
(
doc
);

509  
NULL
;

512 i‡(
	`ngx_hâp_x¶t_∑øms
(
r
, 
˘x
, &
shìt
[
i
].
∑øms
, 1Ë!
NGX_OK
) {

513 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

514 
	`xmlFªeDoc
(
doc
);

515  
NULL
;

518 
ªs
 = 
	`x¶tAµlyStyÀshìtU£r
(
shìt
[
i
].
°yÀshìt
, 
doc
,

519 
˘x
->
∑øms
.
ñts
, 
NULL
, NULL,

520 
˘x
->
å™sf‹m
);

522 
	`x¶tFªeTønsf‹mC⁄ãxt
(
˘x
->
å™sf‹m
);

523 
	`xmlFªeDoc
(
doc
);

525 i‡(
ªs
 =
NULL
) {

526 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

528  
NULL
;

531 
doc
 = 
ªs
;

534 
˘x
->
∑øms
.
√…s
 = 0;

539 i‡(
r
 =r->
maö
) {

540 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
shìt
[
i
 - 1].
°yÀshìt
);

543 
ty≥
 = 
NULL
;

546 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
shìt
[
i
 - 1].
°yÀshìt
);

547 
doc_ty≥
 = 
doc
->
ty≥
;

549 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

551 
doc_ty≥
, 
ty≥
 ?Åy≥ : (
u_ch¨
 *) "(null)",

552 
ícodög
 ?Éncodög : (
u_ch¨
 *) "(null)");

554 
rc
 = 
	`x¶tSaveResu…ToSåög
(&
buf
, &
Àn
, 
doc
, 
shìt
[
i
 - 1].
°yÀshìt
);

556 
	`xmlFªeDoc
(
doc
);

558 i‡(
rc
 != 0) {

559 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

561  
NULL
;

564 i‡(
Àn
 == 0) {

565 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

567  
NULL
;

570 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

571 i‡(
b
 =
NULL
) {

572 
	`ngx_‰ì
(
buf
);

573  
NULL
;

576 
b
->
pos
 = 
buf
;

577 
b
->
œ°
 = 
buf
 + 
Àn
;

578 
b
->
mem‹y
 = 1;

580 i‡(
ícodög
) {

581 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
	`ngx_°æí
(
ícodög
);

582 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
ícodög
;

585 i‡(
r
 !r->
maö
) {

586  
b
;

589 
b
->
œ°_buf
 = 1;

591 i‡(
ty≥
) {

592 
Àn
 = 
	`ngx_°æí
(
ty≥
);

594 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
Àn
;

595 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 =Üen;

596 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
ty≥
;

598 } i‡(
doc_ty≥
 =
XML_HTML_DOCUMENT_NODE
) {

600 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

601 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

604 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

606  
b
;

607 
	}
}

610 
ngx_öt_t


611 
	$ngx_hâp_x¶t_∑øms
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_x¶t_fûãr_˘x_t
 *
˘x
,

612 
ngx_¨øy_t
 *
∑øms
, 
ngx_uöt_t
 
föÆ
)

614 
u_ch¨
 *
p
, *
œ°
, *
vÆue
, *
d°
, *
§c
, **
s
;

615 
size_t
 
Àn
;

616 
ngx_uöt_t
 
i
;

617 
ngx_°r_t
 
°rög
;

618 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

620 
∑øm
 = 
∑øms
->
ñts
;

622 
i
 = 0; i < 
∑øms
->
√…s
; i++) {

624 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
∑øm
[
i
].
vÆue
, &
°rög
Ë!
NGX_OK
) {

625  
NGX_ERROR
;

628 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

629 "x¶àfûã∏∑øm: \"%s\"", 
°rög
.
d©a
);

631 i‡(
∑øm
[
i
].
«me
) {

633 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

634 "x¶àfûã∏∑ømÇame: \"%s\"", 
∑øm
[
i
].
«me
);

636 i‡(
∑øm
[
i
].
quŸe
) {

637 i‡(
	`x¶tQuŸeO√U£rP¨am
(
˘x
->
å™sf‹m
, 
∑øm
[
i
].
«me
,

638 
°rög
.
d©a
)

641 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

643 
∑øm
[
i
].
«me
, 
°rög
.
d©a
);

644  
NGX_ERROR
;

650 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

651 i‡(
s
 =
NULL
) {

652  
NGX_ERROR
;

655 *
s
 = 
∑øm
[
i
].
«me
;

657 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

658 i‡(
s
 =
NULL
) {

659  
NGX_ERROR
;

662 *
s
 = 
°rög
.
d©a
;

672 
p
 = 
°rög
.
d©a
;

673 
œ°
 = 
°rög
.
d©a
 + såög.
Àn
;

675 
p
 && *p) {

677 
vÆue
 = 
p
;

678 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, '=');

679 i‡(
p
 =
NULL
) {

680 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

681 "övÆidÜibx¶à∑ømëî \"%s\"", 
vÆue
);

682  
NGX_ERROR
;

684 *
p
++ = '\0';

686 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

687 "x¶àfûã∏∑ømÇame: \"%s\"", 
vÆue
);

689 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

690 i‡(
s
 =
NULL
) {

691  
NGX_ERROR
;

694 *
s
 = 
vÆue
;

696 
vÆue
 = 
p
;

697 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(p, ':');

699 i‡(
p
) {

700 
Àn
 = 
p
 - 
vÆue
;

701 *
p
++ = '\0';

704 
Àn
 = 
œ°
 - 
vÆue
;

707 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

708 "x¶àfûã∏∑øm vÆue: \"%s\"", 
vÆue
);

710 
d°
 = 
vÆue
;

711 
§c
 = 
vÆue
;

713 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
Àn
, 0);

715 *
d°
 = '\0';

717 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

718 "x¶àfûã∏∑øm u√sˇ≥d: \"%s\"", 
vÆue
);

720 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

721 i‡(
s
 =
NULL
) {

722  
NGX_ERROR
;

725 *
s
 = 
vÆue
;

729 i‡(
föÆ
) {

730 
s
 = 
	`ngx_¨øy_push
(&
˘x
->
∑øms
);

731 i‡(
s
 =
NULL
) {

732  
NGX_ERROR
;

735 *
s
 = 
NULL
;

738  
NGX_OK
;

739 
	}
}

742 
u_ch¨
 *

743 
	$ngx_hâp_x¶t_c⁄ã¡_ty≥
(
x¶tStyÀshìtPå
 
s
)

745 
u_ch¨
 *
ty≥
;

747 i‡(
s
->
medüTy≥
) {

748  
s
->
medüTy≥
;

751 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

753 
ty≥
 = 
	`ngx_hâp_x¶t_c⁄ã¡_ty≥
(
s
);

755 i‡(
ty≥
) {

756  
ty≥
;

760  
NULL
;

761 
	}
}

764 
u_ch¨
 *

765 
	$ngx_hâp_x¶t_ícodög
(
x¶tStyÀshìtPå
 
s
)

767 
u_ch¨
 *
ícodög
;

769 i‡(
s
->
ícodög
) {

770  
s
->
ícodög
;

773 
s
 = s->
imp‹ts
; s; s = s->
√xt
) {

775 
ícodög
 = 
	`ngx_hâp_x¶t_ícodög
(
s
);

777 i‡(
ícodög
) {

778  
ícodög
;

782  
NULL
;

783 
	}
}

787 
	$ngx_hâp_x¶t_˛ónup
(*
d©a
)

789 
	`ngx_‰ì
(
d©a
);

790 
	}
}

794 
	$ngx_hâp_x¶t_ítôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

796 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

798 
ngx_°r_t
 *
vÆue
;

799 
ngx_uöt_t
 
i
;

800 
ngx_poﬁ_˛ónup_t
 *
˛n
;

801 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

802 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

804 i‡(
xlcf
->
dtd
) {

808 
vÆue
 = 
cf
->
¨gs
->
ñts
;

810 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

812 
fûe
 = 
xmcf
->
dtd_fûes
.
ñts
;

813 
i
 = 0; i < 
xmcf
->
dtd_fûes
.
√…s
; i++) {

814 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

815 
xlcf
->
dtd
 = 
fûe
[
i
].
d©a
;

816  
NGX_CONF_OK
;

820 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

821 i‡(
˛n
 =
NULL
) {

822  
NGX_CONF_ERROR
;

825 
xlcf
->
dtd
 = 
	`xmlP¨£DTD
(
NULL
, (
xmlCh¨
 *Ë
vÆue
[1].
d©a
);

827 i‡(
xlcf
->
dtd
 =
NULL
) {

828 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0, "xmlParseDTD() failed");

829  
NGX_CONF_ERROR
;

832 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_dtd
;

833 
˛n
->
d©a
 = 
xlcf
->
dtd
;

835 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
dtd_fûes
);

836 i‡(
fûe
 =
NULL
) {

837  
NGX_CONF_ERROR
;

840 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

841 
fûe
->
d©a
 = 
xlcf
->
dtd
;

843  
NGX_CONF_OK
;

844 
	}
}

849 
	$ngx_hâp_x¶t_°yÀshìt
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

851 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

853 
ngx_°r_t
 *
vÆue
;

854 
ngx_uöt_t
 
i
, 
n
;

855 
ngx_poﬁ_˛ónup_t
 *
˛n
;

856 
ngx_hâp_x¶t_fûe_t
 *
fûe
;

857 
ngx_hâp_x¶t_shìt_t
 *
shìt
;

858 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

859 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

860 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
xmcf
;

862 
vÆue
 = 
cf
->
¨gs
->
ñts
;

864 i‡(
xlcf
->
shìts
.
ñts
 =
NULL
) {

865 i‡(
	`ngx_¨øy_öô
(&
xlcf
->
shìts
, 
cf
->
poﬁ
, 1,

866 (
ngx_hâp_x¶t_shìt_t
))

867 !
NGX_OK
)

869  
NGX_CONF_ERROR
;

873 
shìt
 = 
	`ngx_¨øy_push
(&
xlcf
->
shìts
);

874 i‡(
shìt
 =
NULL
) {

875  
NGX_CONF_ERROR
;

878 
	`ngx_memzîo
(
shìt
, (
ngx_hâp_x¶t_shìt_t
));

880 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
vÆue
[1], 0Ë!
NGX_OK
) {

881  
NGX_CONF_ERROR
;

884 
xmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_x¶t_fûãr_moduÀ
);

886 
fûe
 = 
xmcf
->
shìt_fûes
.
ñts
;

887 
i
 = 0; i < 
xmcf
->
shìt_fûes
.
√…s
; i++) {

888 i‡(
	`ngx_°rcmp
(
fûe
[
i
].
«me
, 
vÆue
[1].
d©a
) == 0) {

889 
shìt
->
°yÀshìt
 = 
fûe
[
i
].
d©a
;

890 
found
;

894 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

895 i‡(
˛n
 =
NULL
) {

896  
NGX_CONF_ERROR
;

899 
shìt
->
°yÀshìt
 = 
	`x¶tP¨£StyÀshìtFûe
(
vÆue
[1].
d©a
);

900 i‡(
shìt
->
°yÀshìt
 =
NULL
) {

901 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

903 
vÆue
[1].
d©a
);

904  
NGX_CONF_ERROR
;

907 
˛n
->
h™dÀr
 = 
ngx_hâp_x¶t_˛ónup_°yÀshìt
;

908 
˛n
->
d©a
 = 
shìt
->
°yÀshìt
;

910 
fûe
 = 
	`ngx_¨øy_push
(&
xmcf
->
shìt_fûes
);

911 i‡(
fûe
 =
NULL
) {

912  
NGX_CONF_ERROR
;

915 
fûe
->
«me
 = 
vÆue
[1].
d©a
;

916 
fûe
->
d©a
 = 
shìt
->
°yÀshìt
;

918 
found
:

920 
n
 = 
cf
->
¨gs
->
√…s
;

922 i‡(
n
 == 2) {

923  
NGX_CONF_OK
;

926 i‡(
	`ngx_¨øy_öô
(&
shìt
->
∑øms
, 
cf
->
poﬁ
, 
n
 - 2,

927 (
ngx_hâp_x¶t_∑øm_t
))

928 !
NGX_OK
)

930  
NGX_CONF_ERROR
;

933 
i
 = 2; i < 
n
; i++) {

935 
∑øm
 = 
	`ngx_¨øy_push
(&
shìt
->
∑øms
);

936 i‡(
∑øm
 =
NULL
) {

937  
NGX_CONF_ERROR
;

940 
	`ngx_memzîo
(
∑øm
, (
ngx_hâp_x¶t_∑øm_t
));

941 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

943 
ccv
.
cf
 = cf;

944 
ccv
.
vÆue
 = &vÆue[
i
];

945 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

946 
ccv
.
zîo
 = 1;

948 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

949  
NGX_CONF_ERROR
;

953  
NGX_CONF_OK
;

954 
	}
}

958 
	$ngx_hâp_x¶t_∑øm
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

960 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
xlcf
 = 
c⁄f
;

962 
ngx_hâp_x¶t_∑øm_t
 *
∑øm
;

963 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

964 
ngx_°r_t
 *
vÆue
;

966 
vÆue
 = 
cf
->
¨gs
->
ñts
;

968 i‡(
xlcf
->
∑øms
 =
NULL
) {

969 
xlcf
->
∑øms
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

970 (
ngx_hâp_x¶t_∑øm_t
));

971 i‡(
xlcf
->
∑øms
 =
NULL
) {

972  
NGX_CONF_ERROR
;

976 
∑øm
 = 
	`ngx_¨øy_push
(
xlcf
->
∑øms
);

977 i‡(
∑øm
 =
NULL
) {

978  
NGX_CONF_ERROR
;

981 
∑øm
->
«me
 = 
vÆue
[1].
d©a
;

982 
∑øm
->
quŸe
 = (
cmd
->
po°
 =
NULL
) ? 0 : 1;

984 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

986 
ccv
.
cf
 = cf;

987 
ccv
.
vÆue
 = &value[2];

988 
ccv
.
com∂ex_vÆue
 = &
∑øm
->
vÆue
;

989 
ccv
.
zîo
 = 1;

991 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

992  
NGX_CONF_ERROR
;

995  
NGX_CONF_OK
;

996 
	}
}

1000 
	$ngx_hâp_x¶t_˛ónup_dtd
(*
d©a
)

1002 
	`xmlFªeDtd
(
d©a
);

1003 
	}
}

1007 
	$ngx_hâp_x¶t_˛ónup_°yÀshìt
(*
d©a
)

1009 
	`x¶tFªeStyÀshìt
(
d©a
);

1010 
	}
}

1014 
	$ngx_hâp_x¶t_fûãr_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1016 
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
 *
c⁄f
;

1018 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_maö_c⁄f_t
));

1019 i‡(
c⁄f
 =
NULL
) {

1020  
NULL
;

1023 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
dtd_fûes
, 
cf
->
poﬁ
, 1,

1024 (
ngx_hâp_x¶t_fûe_t
))

1025 !
NGX_OK
)

1027  
NULL
;

1030 i‡(
	`ngx_¨øy_öô
(&
c⁄f
->
shìt_fûes
, 
cf
->
poﬁ
, 1,

1031 (
ngx_hâp_x¶t_fûe_t
))

1032 !
NGX_OK
)

1034  
NULL
;

1037  
c⁄f
;

1038 
	}
}

1042 
	$ngx_hâp_x¶t_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1044 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
;

1046 
c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
));

1047 i‡(
c⁄f
 =
NULL
) {

1048  
NULL
;

1061  
c⁄f
;

1062 
	}
}

1066 
	$ngx_hâp_x¶t_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1068 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1069 
ngx_hâp_x¶t_fûãr_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

1071 i‡(
c⁄f
->
dtd
 =
NULL
) {

1072 
c⁄f
->
dtd
 = 
¥ev
->dtd;

1075 i‡(
c⁄f
->
shìts
.
√…s
 == 0) {

1076 
c⁄f
->
shìts
 = 
¥ev
->sheets;

1079 i‡(
c⁄f
->
∑øms
 =
NULL
) {

1080 
c⁄f
->
∑øms
 = 
¥ev
->params;

1083 i‡(
	`ngx_hâp_mîge_ty≥s
(
cf
, &
c⁄f
->
ty≥s_keys
, &c⁄f->
ty≥s
,

1084 &
¥ev
->
ty≥s_keys
, &¥ev->
ty≥s
,

1085 
ngx_hâp_x¶t_deÁu…_ty≥s
)

1086 !
NGX_OK
)

1088  
NGX_CONF_ERROR
;

1091  
NGX_CONF_OK
;

1092 
	}
}

1095 
ngx_öt_t


1096 
	$ngx_hâp_x¶t_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

1098 
	`xmlInôP¨£r
();

1100 #i‡(
NGX_HAVE_EXSLT
)

1101 
	`ex¶tRegi°îAŒ
();

1104 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

1105 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_x¶t_hódî_fûãr
;

1107 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

1108 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_x¶t_body_fûãr
;

1110  
NGX_OK
;

1111 
	}
}

1115 
	$ngx_hâp_x¶t_fûãr_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1117 
	`x¶tCÀ™upGlobÆs
();

1118 
	`xmlCÀ™upP¨£r
();

1119 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_≥æ_moduÀ.h
>

15 
PîlI¡î¥ëî
 *
	m≥æ
;

16 
HV
 *
	mngöx
;

17 
ngx_¨øy_t
 *
	mmoduÀs
;

18 
ngx_¨øy_t
 *
	mªquúes
;

19 } 
	tngx_hâp_≥æ_maö_c⁄f_t
;

23 
SV
 *
	msub
;

24 
ngx_°r_t
 
	mh™dÀr
;

25 } 
	tngx_hâp_≥æ_loc_c⁄f_t
;

29 
SV
 *
	msub
;

30 
ngx_°r_t
 
	mh™dÀr
;

31 } 
	tngx_hâp_≥æ_v¨übÀ_t
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_öt_t
 
ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
, 
ngx_°r_t
 **
∑øms
);

39 *
ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

40 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

41 
PîlI¡î¥ëî
 *
ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

42 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
);

43 
ngx_öt_t
 
ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
,

44 
ngx_log_t
 *
log
);

45 
ngx_öt_t
 
ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
,

46 
HV
 *
ngöx
, 
SV
 *
sub
, SV **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
);

47 
ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
);

49 
ngx_öt_t
 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

50 *
ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

51 *
ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

52 *
ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

53 *
ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

54 *
chûd
);

55 *
ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

56 *
ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

58 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

59 
ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
);

62 
ngx_öt_t
 
ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

63 
ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
);

66 
ngx_comm™d_t
 
	gngx_hâp_≥æ_comm™ds
[] = {

68 { 
ngx_°rög
("perl_modules"),

69 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

70 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

71 
NGX_HTTP_MAIN_CONF_OFFSET
,

72 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
moduÀs
),

73 
NULL
 },

75 { 
ngx_°rög
("perl_require"),

76 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

77 
ngx_c⁄f_£t_°r_¨øy_¶Ÿ
,

78 
NGX_HTTP_MAIN_CONF_OFFSET
,

79 
off£tof
(
ngx_hâp_≥æ_maö_c⁄f_t
, 
ªquúes
),

80 
NULL
 },

82 { 
ngx_°rög
("perl"),

83 
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LMT_CONF
|
NGX_CONF_TAKE1
,

84 
ngx_hâp_≥æ
,

85 
NGX_HTTP_LOC_CONF_OFFSET
,

87 
NULL
 },

89 { 
ngx_°rög
("perl_set"),

90 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE2
,

91 
ngx_hâp_≥æ_£t
,

92 
NGX_HTTP_LOC_CONF_OFFSET
,

94 
NULL
 },

96 
ngx_nuŒ_comm™d


100 
ngx_hâp_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ_˘x
 = {

101 
ngx_hâp_≥æ_¥ec⁄figuøti⁄
,

102 
NULL
,

104 
ngx_hâp_≥æ_¸óã_maö_c⁄f
,

105 
ngx_hâp_≥æ_öô_maö_c⁄f
,

107 
NULL
,

108 
NULL
,

110 
ngx_hâp_≥æ_¸óã_loc_c⁄f
,

111 
ngx_hâp_≥æ_mîge_loc_c⁄f


115 
ngx_moduÀ_t
 
	gngx_hâp_≥æ_moduÀ
 = {

116 
NGX_MODULE_V1
,

117 &
ngx_hâp_≥æ_moduÀ_˘x
,

118 
ngx_hâp_≥æ_comm™ds
,

119 
NGX_HTTP_MODULE
,

120 
NULL
,

121 
NULL
,

122 
ngx_hâp_≥æ_öô_w‹kî
,

123 
NULL
,

124 
NULL
,

125 
NULL
,

126 
ngx_hâp_≥æ_exô
,

127 
NGX_MODULE_V1_PADDING


131 #i‡(
NGX_HTTP_SSI
)

133 
	#NGX_HTTP_PERL_SSI_SUB
 0

	)

134 
	#NGX_HTTP_PERL_SSI_ARG
 1

	)

137 
ngx_hâp_ssi_∑øm_t
 
	gngx_hâp_≥æ_ssi_∑øms
[] = {

138 { 
ngx_°rög
("sub"), 
NGX_HTTP_PERL_SSI_SUB
, 1, 0 },

139 { 
ngx_°rög
("¨g"), 
NGX_HTTP_PERL_SSI_ARG
, 0, 1 },

140 { 
ngx_nuŒ_°rög
, 0, 0, 0 }

143 
ngx_hâp_ssi_comm™d_t
 
	gngx_hâp_≥æ_ssi_comm™d
 = {

144 
ngx_°rög
("≥æ"), 
ngx_hâp_≥æ_ssi
, 
ngx_hâp_≥æ_ssi_∑øms
, 0, 0, 1

150 
ngx_°r_t
 
	gngx_nuŒ_«me
 = 
ngx_nuŒ_°rög
;

151 
HV
 *
	gngöx_°ash
;

153 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

154 
ngx_uöt_t
 
	gngx_≥æ_ãrm
;

156 
PîlI¡î¥ëî
 *
	g≥æ
;

161 
	$ngx_hâp_≥æ_xs_öô
(
pTHX
)

163 
	`√wXS
("Dy«Lﬂdî::boŸ_Dy«Lﬂdî", 
boŸ_Dy«Lﬂdî
, 
__FILE__
);

165 
ngöx_°ash
 = 
	`gv_°ashpv
("ngöx", 
TRUE
);

166 
	}
}

169 
ngx_öt_t


170 
	$ngx_hâp_≥æ_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

172 
r
->
maö
->
cou¡
++;

174 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

176  
NGX_DONE
;

177 
	}
}

181 
	$ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

183 
SV
 *
sub
;

184 
ngx_öt_t
 
rc
;

185 
ngx_°r_t
 
uri
, 
¨gs
, *
h™dÀr
;

186 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

187 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

188 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

190 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl handler");

192 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

194 i‡(
˘x
 =
NULL
) {

195 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

196 i‡(
˘x
 =
NULL
) {

197 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

201 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

204 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

208 
	`dTHXa
(
pmcf
->
≥æ
);

209 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

211 i‡(
˘x
->
√xt
 =
NULL
) {

212 
∂cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

213 
sub
 = 
∂cf
->sub;

214 
h™dÀr
 = &
∂cf
->handler;

217 
sub
 = 
˘x
->
√xt
;

218 
h™dÀr
 = &
ngx_nuŒ_«me
;

219 
˘x
->
√xt
 = 
NULL
;

222 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sub
, 
NULL
, 
h™dÀr
,

223 
NULL
);

227 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

228 "≥æ h™dÀ∏d⁄e: %i", 
rc
);

230 i‡(
rc
 =
NGX_DONE
) {

231 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

235 i‡(
rc
 > 600) {

236 
rc
 = 
NGX_OK
;

239 i‡(
˘x
->
ªdúe˘_uri
.
Àn
) {

240 
uri
 = 
˘x
->
ªdúe˘_uri
;

241 
¨gs
 = 
˘x
->
ªdúe˘_¨gs
;

244 
uri
.
Àn
 = 0;

247 
˘x
->
fûíame
.
d©a
 = 
NULL
;

248 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

250 i‡(
˘x
->
d⁄e
 || ctx->
√xt
) {

251 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

255 i‡(
uri
.
Àn
) {

256 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

257 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

261 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_HTTP_OK
) {

262 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

263 
˘x
->
d⁄e
 = 1;

266 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

267 
	}
}

271 
	$ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

273 
ngx_evít_t
 *
wev
;

275 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

278 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

280 i‡(
wev
->
timedout
) {

281 
wev
->
timedout
 = 0;

282 
	`ngx_hâp_≥æ_h™dÀ_ªque°
(
r
);

286 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

287 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

289 
	}
}

292 
ngx_öt_t


293 
	$ngx_hâp_≥æ_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

294 
uöçå_t
 
d©a
)

296 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
 = (ngx_hâp_≥æ_v¨übÀ_à*Ë
d©a
;

298 
ngx_öt_t
 
rc
;

299 
ngx_°r_t
 
vÆue
;

300 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

301 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

303 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

306 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

308 i‡(
˘x
 =
NULL
) {

309 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

310 i‡(
˘x
 =
NULL
) {

311  
NGX_ERROR
;

314 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

317 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

319 
vÆue
.
d©a
 = 
NULL
;

323 
	`dTHXa
(
pmcf
->
≥æ
);

324 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

326 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
pv
->
sub
, 
NULL
,

327 &
pv
->
h™dÀr
, &
vÆue
);

331 i‡(
vÆue
.
d©a
) {

332 
v
->
Àn
 = 
vÆue
.len;

333 
v
->
vÆid
 = 1;

334 
v
->
no_ˇchóbÀ
 = 0;

335 
v
->
nŸ_found
 = 0;

336 
v
->
d©a
 = 
vÆue
.data;

339 
v
->
nŸ_found
 = 1;

342 
˘x
->
fûíame
.
d©a
 = 
NULL
;

343 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

345 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

348  
rc
;

349 
	}
}

352 #i‡(
NGX_HTTP_SSI
)

354 
ngx_öt_t


355 
	$ngx_hâp_≥æ_ssi
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ssi_˘x_t
 *
ssi_˘x
,

356 
ngx_°r_t
 **
∑øms
)

358 
SV
 *
sv
, **
asv
;

359 
ngx_öt_t
 
rc
;

360 
ngx_°r_t
 *
h™dÀr
, **
¨gs
;

361 
ngx_uöt_t
 
i
;

362 
ngx_hâp_≥æ_˘x_t
 *
˘x
;

363 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

368 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_≥æ_moduÀ
);

370 i‡(
˘x
 =
NULL
) {

371 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_≥æ_˘x_t
));

372 i‡(
˘x
 =
NULL
) {

373  
NGX_ERROR
;

376 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_≥æ_moduÀ
);

379 
pmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_≥æ_moduÀ
);

381 
˘x
->
ssi
 = 
ssi_˘x
;

383 
h™dÀr
 = 
∑øms
[
NGX_HTTP_PERL_SSI_SUB
];

384 
h™dÀr
->
d©a
[h™dÀr->
Àn
] = '\0';

388 
	`dTHXa
(
pmcf
->
≥æ
);

389 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

395 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 
h™dÀr
, &
sv
);

397 i‡(
sv
 =&
PL_sv_undef
) {

398 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

399 "evÆ_pv(\"%V\"ËÁûed", 
h™dÀr
);

400  
NGX_ERROR
;

403 i‡(
sv
 =
NULL
) {

404 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

409 
sv
 = 
	`√wSVpvn
((*Ë
h™dÀr
->
d©a
, h™dÀr->
Àn
);

411 
¨gs
 = &
∑øms
[
NGX_HTTP_PERL_SSI_ARG
];

413 i‡(
¨gs
) {

415 
i
 = 0; 
¨gs
[i]; i++) { }

417 
asv
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
i
 + 1Ë* (
SV
 *));

419 i‡(
asv
 =
NULL
) {

420 
	`SvREFCNT_dec
(
sv
);

421  
NGX_ERROR
;

424 
asv
[0] = (
SV
 *Ë
i
;

426 
i
 = 0; 
¨gs
[i]; i++) {

427 
asv
[
i
 + 1] = 
	`√wSVpvn
((*Ë
¨gs
[i]->
d©a
,árgs[i]->
Àn
);

431 
asv
 = 
NULL
;

434 
rc
 = 
	`ngx_hâp_≥æ_ˇŒ_h™dÀr
(
aTHX_
 
r
, 
pmcf
->
ngöx
, 
sv
, 
asv
, 
h™dÀr
,

435 
NULL
);

437 
	`SvREFCNT_dec
(
sv
);

441 
˘x
->
fûíame
.
d©a
 = 
NULL
;

442 
˘x
->
ªdúe˘_uri
.
Àn
 = 0;

443 
˘x
->
ssi
 = 
NULL
;

445 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0, "perl ssi done");

447  
rc
;

448 
	}
}

454 
	$ngx_hâp_≥æ_öô_öãΩªãr
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

456 
ngx_°r_t
 *
m
;

457 
ngx_uöt_t
 
i
;

458 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

459 
ngx_poﬁ_˛ónup_t
 *
˛n
;

461 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

462 i‡(
˛n
 =
NULL
) {

463  
NGX_CONF_ERROR
;

468 #ifde‡
NGX_PERL_MODULES


469 i‡(
pmcf
->
moduÀs
 =
NGX_CONF_UNSET_PTR
) {

471 
pmcf
->
moduÀs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_°r_t
));

472 i‡(
pmcf
->
moduÀs
 =
NULL
) {

473  
NGX_CONF_ERROR
;

476 
m
 = 
	`ngx_¨øy_push
(
pmcf
->
moduÀs
);

477 i‡(
m
 =
NULL
) {

478  
NGX_CONF_ERROR
;

481 
	`ngx_°r_£t
(
m
, 
NGX_PERL_MODULES
);

485 i‡(
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
) {

486 
m
 = 
pmcf
->
moduÀs
->
ñts
;

487 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

488 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
m
[
i
], 0Ë!
NGX_OK
) {

489  
NGX_CONF_ERROR
;

494 #i‡!(
NGX_HAVE_PERL_MULTIPLICITY
)

496 i‡(
≥æ
) {

498 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

499  
NGX_CONF_ERROR
;

502 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
)

503 !
NGX_OK
)

505  
NGX_CONF_ERROR
;

508 
pmcf
->
≥æ
 =Öerl;

509 
pmcf
->
ngöx
 = 
ngöx_°ash
;

511  
NGX_CONF_OK
;

516 i‡(
ngöx_°ash
 =
NULL
) {

517 
	`PERL_SYS_INIT
(&
ngx_¨gc
, &
ngx_¨gv
);

520 
pmcf
->
≥æ
 = 
	`ngx_hâp_≥æ_¸óã_öãΩªãr
(
cf
,Ömcf);

522 i‡(
pmcf
->
≥æ
 =
NULL
) {

523  
NGX_CONF_ERROR
;

526 
pmcf
->
ngöx
 = 
ngöx_°ash
;

528 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

530 
˛n
->
h™dÀr
 = 
ngx_hâp_≥æ_˛ónup_≥æ
;

531 
˛n
->
d©a
 = 
pmcf
->
≥æ
;

535 
≥æ
 = 
pmcf
->perl;

539  
NGX_CONF_OK
;

540 
	}
}

543 
PîlI¡î¥ëî
 *

544 
	$ngx_hâp_≥æ_¸óã_öãΩªãr
(
ngx_c⁄f_t
 *
cf
,

545 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
)

547 
n
;

548 
STRLEN
 
Àn
;

549 
SV
 *
sv
;

550 *
vî
, **
embeddög
;

551 
ngx_°r_t
 *
m
;

552 
ngx_uöt_t
 
i
;

553 
PîlI¡î¥ëî
 *
≥æ
;

555 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cf
->
log
, 0, "createÖerl interpreter");

557 i‡(
	`ngx_£t_ívú⁄mít
(
cf
->
cy˛e
, 
NULL
) == NULL) {

558  
NULL
;

561 
≥æ
 = 
	`≥æ_Æloc
();

562 i‡(
≥æ
 =
NULL
) {

563 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "perl_alloc() failed");

564  
NULL
;

569 
	`dTHXa
(
≥æ
);

570 
	`PERL_SET_CONTEXT
(
≥æ
);

572 
	`≥æ_c⁄°ru˘
(
≥æ
);

574 #ifde‡
PERL_EXIT_DESTRUCT_END


575 
PL_exô_Êags
 |
PERL_EXIT_DESTRUCT_END
;

578 
n
 = (
pmcf
->
moduÀs
 !
NGX_CONF_UNSET_PTR
Ë?Ömcf->moduÀs->
√…s
 * 2 : 0;

580 
embeddög
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (4 + 
n
) * (*));

581 i‡(
embeddög
 =
NULL
) {

582 
Áû
;

585 
embeddög
[0] = "";

587 i‡(
n
++) {

588 
m
 = 
pmcf
->
moduÀs
->
ñts
;

589 
i
 = 0; i < 
pmcf
->
moduÀs
->
√…s
; i++) {

590 
embeddög
[2 * 
i
 + 1] = "-I";

591 
embeddög
[2 * 
i
 + 2] = (*Ë
m
[i].
d©a
;

595 
embeddög
[
n
++] = "-Mnginx";

596 
embeddög
[
n
++] = "-e";

597 
embeddög
[
n
++] = "0";

599 
n
 = 
	`≥æ_∑r£
(
≥æ
, 
ngx_hâp_≥æ_xs_öô
,Ç, 
embeddög
, 
NULL
);

601 i‡(
n
 != 0) {

602 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0, "≥æ_∑r£(ËÁûed: %d", 
n
);

603 
Áû
;

606 
sv
 = 
	`gë_sv
("ngöx::VERSION", 
FALSE
);

607 
vî
 = 
	`SvPV
(
sv
, 
Àn
);

609 i‡(
	`ngx_°rcmp
(
vî
, 
NGINX_VERSION
) != 0) {

610 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cf
->
log
, 0,

611 "vîsi⁄ " 
NGINX_VERSION
 " ofÇginx.pm isÑequired, "

612 "buà%†wa†found", 
vî
);

613 
Áû
;

616 i‡(
	`ngx_hâp_≥æ_run_ªquúes
(
aTHX_
 
pmcf
->
ªquúes
, 
cf
->
log
Ë!
NGX_OK
) {

617 
Áû
;

622  
≥æ
;

624 
Áû
:

626 (Ë
	`≥æ_de°ru˘
(
≥æ
);

628 
	`≥æ_‰ì
(
≥æ
);

630  
NULL
;

631 
	}
}

634 
ngx_öt_t


635 
	$ngx_hâp_≥æ_run_ªquúes
(
pTHX_
 
ngx_¨øy_t
 *
ªquúes
, 
ngx_log_t
 *
log
)

637 
u_ch¨
 *
îr
;

638 
STRLEN
 
Àn
;

639 
ngx_°r_t
 *
s¸ùt
;

640 
ngx_uöt_t
 
i
;

642 i‡(
ªquúes
 =
NGX_CONF_UNSET_PTR
) {

643  
NGX_OK
;

646 
s¸ùt
 = 
ªquúes
->
ñts
;

647 
i
 = 0; i < 
ªquúes
->
√…s
; i++) {

649 
	`ªquúe_pv
((*Ë
s¸ùt
[
i
].
d©a
);

651 i‡(
	`SvTRUE
(
ERRSV
)) {

653 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

654 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

656 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 0,

658 
s¸ùt
[
i
].
d©a
, 
Àn
 + 1, 
îr
);

660  
NGX_ERROR
;

664  
NGX_OK
;

665 
	}
}

668 
ngx_öt_t


669 
	$ngx_hâp_≥æ_ˇŒ_h™dÀr
(
pTHX_
 
ngx_hâp_ªque°_t
 *
r
, 
HV
 *
ngöx
, 
SV
 *
sub
,

670 
SV
 **
¨gs
, 
ngx_°r_t
 *
h™dÀr
,Çgx_°r_à*
rv
)

672 
SV
 *
sv
;

673 
n
, 
°©us
;

674 *
löe
;

675 
u_ch¨
 *
îr
;

676 
STRLEN
 
Àn
, 
n_a
;

677 
ngx_uöt_t
 
i
;

678 
ngx_c⁄√˘i⁄_t
 *
c
;

680 
dSP
;

682 
°©us
 = 0;

684 
ENTER
;

685 
SAVETMPS
;

687 
	`PUSHMARK
(
•
);

689 
sv
 = 
	`sv_2m‹èl
(
	`sv_bÀss
(
	`√wRV_noöc
(
	`√wSViv
(
	`PTR2IV
(
r
))), 
ngöx
));

690 
	`XPUSHs
(
sv
);

692 i‡(
¨gs
) {

693 
	`EXTEND
(
•
, (
öçå_t
Ë
¨gs
[0]);

695 
i
 = 1; i <(
ngx_uöt_t
Ë
¨gs
[0]; i++) {

696 
	`PUSHs
(
	`sv_2m‹èl
(
¨gs
[
i
]));

700 
PUTBACK
;

702 
c
 = 
r
->
c⁄√˘i⁄
;

704 
n
 = 
	`ˇŒ_sv
(
sub
, 
G_EVAL
);

706 
SPAGAIN
;

708 i‡(
n
) {

709 i‡(
rv
 =
NULL
) {

710 
°©us
 = 
POPi
;

712 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

713 "ˇŒ_sv: %d", 
°©us
);

716 
löe
 = 
	`SvPVx
(
POPs
, 
n_a
);

717 
rv
->
Àn
 = 
n_a
;

719 
rv
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
n_a
);

720 i‡(
rv
->
d©a
 =
NULL
) {

721  
NGX_ERROR
;

724 
	`ngx_mem˝y
(
rv
->
d©a
, 
löe
, 
n_a
);

728 
PUTBACK
;

730 
FREETMPS
;

731 
LEAVE
;

735 i‡(
	`SvTRUE
(
ERRSV
)) {

737 
îr
 = (
u_ch¨
 *Ë
	`SvPV
(
ERRSV
, 
Àn
);

738 --
Àn
 && (
îr
[Àn] =
CR
 ||Éº[Àn] =
LF
)) { }

740 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

741 "ˇŒ_sv(\"%V\"ËÁûed: \"%*s\"", 
h™dÀr
, 
Àn
 + 1, 
îr
);

743 i‡(
rv
) {

744  
NGX_ERROR
;

747  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

750 i‡(
n
 != 1) {

751 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

752 "ˇŒ_sv(\"%V\"Ëªtu∫ed %dÑesu…s", 
h™dÀr
, 
n
);

753 
°©us
 = 
NGX_OK
;

756 i‡(
rv
) {

757  
NGX_OK
;

760  (
ngx_öt_t
Ë
°©us
;

761 
	}
}

765 
	$ngx_hâp_≥æ_evÆ_™⁄_sub
(
pTHX_
 
ngx_°r_t
 *
h™dÀr
, 
SV
 **
sv
)

767 
u_ch¨
 *
p
;

769 
p
 = 
h™dÀr
->
d©a
; *p;Ö++) {

770 i‡(*
p
 !' ' && *∞!'\t' && *∞!
CR
 && *∞!
LF
) {

775 i‡(
	`ngx_°∫cmp
(
p
, "sub ", 4) == 0

776 || 
	`ngx_°∫cmp
(
p
, "sub{", 4) == 0

777 || 
	`ngx_°∫cmp
(
p
, "use ", 4) == 0)

779 *
sv
 = 
	`evÆ_pv
((*Ë
p
, 
FALSE
);

786 *
sv
 = 
NULL
;

787 
	}
}

791 
	$ngx_hâp_≥æ_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

793 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

795 
pmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_maö_c⁄f_t
));

796 i‡(
pmcf
 =
NULL
) {

797  
NULL
;

800 
pmcf
->
moduÀs
 = 
NGX_CONF_UNSET_PTR
;

801 
pmcf
->
ªquúes
 = 
NGX_CONF_UNSET_PTR
;

803  
pmcf
;

804 
	}
}

808 
	$ngx_hâp_≥æ_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

810 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
 = 
c⁄f
;

812 i‡(
pmcf
->
≥æ
 =
NULL
) {

813 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

814  
NGX_CONF_ERROR
;

818  
NGX_CONF_OK
;

819 
	}
}

822 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

825 
	$ngx_hâp_≥æ_˛ónup_≥æ
(*
d©a
)

827 
PîlI¡î¥ëî
 *
≥æ
 = 
d©a
;

829 
	`PERL_SET_CONTEXT
(
≥æ
);

831 (Ë
	`≥æ_de°ru˘
(
≥æ
);

833 
	`≥æ_‰ì
(
≥æ
);

835 i‡(
ngx_≥æ_ãrm
) {

836 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0, "perlÅerm");

838 
	`PERL_SYS_TERM
();

840 
	}
}

845 
ngx_öt_t


846 
	$ngx_hâp_≥æ_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

848 #i‡(
NGX_HTTP_SSI
)

849 
ngx_öt_t
 
rc
;

850 
ngx_hâp_ssi_maö_c⁄f_t
 *
smcf
;

852 
smcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_ssi_fûãr_moduÀ
);

854 
rc
 = 
	`ngx_hash_add_key
(&
smcf
->
comm™ds
, &
ngx_hâp_≥æ_ssi_comm™d
.
«me
,

855 &
ngx_hâp_≥æ_ssi_comm™d
, 
NGX_HASH_READONLY_KEY
);

857 i‡(
rc
 !
NGX_OK
) {

858 i‡(
rc
 =
NGX_BUSY
) {

859 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

861 &
ngx_hâp_≥æ_ssi_comm™d
.
«me
);

864  
NGX_ERROR
;

868  
NGX_OK
;

869 
	}
}

873 
	$ngx_hâp_≥æ_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

875 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
;

877 
∂cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_loc_c⁄f_t
));

878 i‡(
∂cf
 =
NULL
) {

879  
NULL
;

888  
∂cf
;

889 
	}
}

893 
	$ngx_hâp_≥æ_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

895 
ngx_hâp_≥æ_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

896 
ngx_hâp_≥æ_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

898 i‡(
c⁄f
->
sub
 =
NULL
) {

899 
c⁄f
->
sub
 = 
¥ev
->sub;

900 
c⁄f
->
h™dÀr
 = 
¥ev
->handler;

903  
NGX_CONF_OK
;

904 
	}
}

908 
	$ngx_hâp_≥æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

910 
ngx_hâp_≥æ_loc_c⁄f_t
 *
∂cf
 = 
c⁄f
;

912 
ngx_°r_t
 *
vÆue
;

913 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

914 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

916 
vÆue
 = 
cf
->
¨gs
->
ñts
;

918 i‡(
∂cf
->
h™dÀr
.
d©a
) {

919 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

920 "du∂iˇãÖî»h™dÀ∏\"%V\"", &
vÆue
[1]);

921  
NGX_CONF_ERROR
;

924 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

926 i‡(
pmcf
->
≥æ
 =
NULL
) {

927 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

928  
NGX_CONF_ERROR
;

932 
∂cf
->
h™dÀr
 = 
vÆue
[1];

936 
	`dTHXa
(
pmcf
->
≥æ
);

937 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

939 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[1], &
∂cf
->
sub
);

941 i‡(
∂cf
->
sub
 =&
PL_sv_undef
) {

942 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

943 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[1]);

944  
NGX_CONF_ERROR
;

947 i‡(
∂cf
->
sub
 =
NULL
) {

948 
∂cf
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[1].
d©a
, vÆue[1].
Àn
);

953 
˛cf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

954 
˛cf
->
h™dÀr
 = 
ngx_hâp_≥æ_h™dÀr
;

956  
NGX_CONF_OK
;

957 
	}
}

961 
	$ngx_hâp_≥æ_£t
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

963 
ngx_öt_t
 
ödex
;

964 
ngx_°r_t
 *
vÆue
;

965 
ngx_hâp_v¨übÀ_t
 *
v
;

966 
ngx_hâp_≥æ_v¨übÀ_t
 *
pv
;

967 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

969 
vÆue
 = 
cf
->
¨gs
->
ñts
;

971 i‡(
vÆue
[1].
d©a
[0] != '$') {

972 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

973 "övÆid v¨übÀÇamê\"%V\"", &
vÆue
[1]);

974  
NGX_CONF_ERROR
;

977 
vÆue
[1].
Àn
--;

978 
vÆue
[1].
d©a
++;

980 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
vÆue
[1], 
NGX_HTTP_VAR_CHANGEABLE
);

981 i‡(
v
 =
NULL
) {

982  
NGX_CONF_ERROR
;

985 
pv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_≥æ_v¨übÀ_t
));

986 i‡(
pv
 =
NULL
) {

987  
NGX_CONF_ERROR
;

990 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
vÆue
[1]);

991 i‡(
ödex
 =
NGX_ERROR
) {

992  
NGX_CONF_ERROR
;

995 
pmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_≥æ_moduÀ
);

997 i‡(
pmcf
->
≥æ
 =
NULL
) {

998 i‡(
	`ngx_hâp_≥æ_öô_öãΩªãr
(
cf
, 
pmcf
Ë!
NGX_CONF_OK
) {

999  
NGX_CONF_ERROR
;

1003 
pv
->
h™dÀr
 = 
vÆue
[2];

1007 
	`dTHXa
(
pmcf
->
≥æ
);

1008 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1010 
	`ngx_hâp_≥æ_evÆ_™⁄_sub
(
aTHX_
 &
vÆue
[2], &
pv
->
sub
);

1012 i‡(
pv
->
sub
 =&
PL_sv_undef
) {

1013 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_ERR
, 
cf
, 0,

1014 "evÆ_pv(\"%V\"ËÁûed", &
vÆue
[2]);

1015  
NGX_CONF_ERROR
;

1018 i‡(
pv
->
sub
 =
NULL
) {

1019 
pv
->
sub
 = 
	`√wSVpvn
((*Ë
vÆue
[2].
d©a
, vÆue[2].
Àn
);

1024 
v
->
gë_h™dÀr
 = 
ngx_hâp_≥æ_v¨übÀ
;

1025 
v
->
d©a
 = (
uöçå_t
Ë
pv
;

1027  
NGX_CONF_OK
;

1028 
	}
}

1031 
ngx_öt_t


1032 
	$ngx_hâp_≥æ_öô_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

1034 
ngx_hâp_≥æ_maö_c⁄f_t
 *
pmcf
;

1036 
pmcf
 = 
	`ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
ngx_hâp_≥æ_moduÀ
);

1038 i‡(
pmcf
) {

1039 
	`dTHXa
(
pmcf
->
≥æ
);

1040 
	`PERL_SET_CONTEXT
(
pmcf
->
≥æ
);

1044 
	`sv_£tiv
(
	`GvSV
(
	`gv_„tchpv
("$", 
TRUE
, 
SVt_PV
)), (
I32
Ë
ngx_pid
);

1047  
NGX_OK
;

1048 
	}
}

1052 
	$ngx_hâp_≥æ_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1054 #i‡(
NGX_HAVE_PERL_MULTIPLICITY
)

1061 
ngx_≥æ_ãrm
 = 1;

1065 i‡(
ngöx_°ash
) {

1066 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
cy˛e
->
log
, 0, "perlÅerm");

1068 (Ë
	`≥æ_de°ru˘
(
≥æ
);

1070 
	`≥æ_‰ì
(
≥æ
);

1072 
	`PERL_SYS_TERM
();

1076 
	}
}

	@src/http/modules/perl/ngx_http_perl_module.h

8 #i‚de‡
_NGX_HTTP_PERL_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_PERL_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

15 
	~<ngöx.h
>

17 
	~<EXTERN.h
>

18 
	~<≥æ.h
>

21 
ngx_hâp_ªque°_t
 *
	tngöx
;

24 
ngx_°r_t
 
	mfûíame
;

25 
ngx_°r_t
 
	mªdúe˘_uri
;

26 
ngx_°r_t
 
	mªdúe˘_¨gs
;

28 
SV
 *
	m√xt
;

30 
ngx_uöt_t
 
	md⁄e
;

32 
ngx_¨øy_t
 *
	mv¨übÀs
;

34 #i‡(
NGX_HTTP_SSI
)

35 
ngx_hâp_ssi_˘x_t
 *
	mssi
;

37 } 
	tngx_hâp_≥æ_˘x_t
;

41 
ngx_uöt_t
 
	mhash
;

42 
ngx_°r_t
 
	m«me
;

43 
ngx_°r_t
 
	mvÆue
;

44 } 
	tngx_hâp_≥æ_v¨_t
;

47 
ngx_moduÀ_t
 
ngx_hâp_≥æ_moduÀ
;

54 #i‚de‡
PERL_IMPLICIT_CONTEXT


55 #unde‡
dTHXa


56 
	#dTHXa
(
a
)

	)

60 
boŸ_Dy«Lﬂdî
(
pTHX_
 
CV
* 
cv
);

63 
ngx_hâp_≥æ_h™dÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

64 
ngx_hâp_≥æ_¶ìp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

	@src/http/ngx_http.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 *
ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

14 
ngx_öt_t
 
ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
,

15 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

16 
ngx_öt_t
 
ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
,

17 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

18 
ngx_öt_t
 
ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
,

19 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
);

21 
ngx_öt_t
 
ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
,

22 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

23 
ngx_hâp_li°í_›t_t
 *
ls›t
);

24 
ngx_öt_t
 
ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
,

25 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
,

26 
ngx_hâp_li°í_›t_t
 *
ls›t
);

27 
ngx_öt_t
 
ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

30 *
ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
,

31 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

32 
ngx_uöt_t
 
˘x_ödex
);

33 *
ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

34 
ngx_queue_t
 *
loˇti⁄s
, **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
,

35 
ngx_uöt_t
 
˘x_ödex
);

36 
ngx_öt_t
 
ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

37 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

38 
ngx_öt_t
 
ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

39 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
);

40 
ngx_öt_t
 
ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
,

41 c⁄° 
ngx_queue_t
 *
two
);

42 
ngx_öt_t
 
ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_queue_t
 *
loˇti⁄s
);

44 
ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,

45 
ngx_queue_t
 *
q
);

46 
ngx_hâp_loˇti⁄_åì_node_t
 *

47 
ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

48 
size_t
 
¥efix
);

50 
ngx_öt_t
 
ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
,

51 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_¨øy_t
 *
p‹ts
);

52 
ngx_öt_t
 
ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
,

53 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
);

54 
ngx_öt_t
 
ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

55 
ngx_libc_cde˛
 
ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
,

56 c⁄° *
two
);

58 
ngx_öt_t
 
ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
,

59 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
);

60 
ngx_li°íög_t
 *
ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
,

61 
ngx_hâp_c⁄f_addr_t
 *
addr
);

62 
ngx_öt_t
 
ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

63 
ngx_hâp_c⁄f_addr_t
 *
addr
);

64 #i‡(
NGX_HAVE_INET6
)

65 
ngx_öt_t
 
ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

66 
ngx_hâp_c⁄f_addr_t
 *
addr
);

69 
ngx_uöt_t
 
	gngx_hâp_max_moduÀ
;

72 
	$ngx_öt_t
 (*
ngx_hâp_t›_hódî_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
);

73 
	$ngx_öt_t
 (*
ngx_hâp_t›_body_fûãr
Ë(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ch
);

76 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[] = {

77 
	`ngx_°rög
("text/html"),

78 
ngx_nuŒ_°rög


79 
	}
};

82 
ngx_comm™d_t
 
	gngx_hâp_comm™ds
[] = {

84 { 
ngx_°rög
("http"),

85 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

86 
ngx_hâp_block
,

89 
NULL
 },

91 
ngx_nuŒ_comm™d


95 
ngx_c‹e_moduÀ_t
 
	gngx_hâp_moduÀ_˘x
 = {

96 
ngx_°rög
("http"),

97 
NULL
,

98 
NULL


102 
ngx_moduÀ_t
 
	gngx_hâp_moduÀ
 = {

103 
NGX_MODULE_V1
,

104 &
ngx_hâp_moduÀ_˘x
,

105 
ngx_hâp_comm™ds
,

106 
NGX_CORE_MODULE
,

107 
NULL
,

108 
NULL
,

109 
NULL
,

110 
NULL
,

111 
NULL
,

112 
NULL
,

113 
NULL
,

114 
NGX_MODULE_V1_PADDING


119 
	$ngx_hâp_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

121 *
rv
;

122 
ngx_uöt_t
 
mi
, 
m
, 
s
;

123 
ngx_c⁄f_t
 
pcf
;

124 
ngx_hâp_moduÀ_t
 *
moduÀ
;

125 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

126 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

127 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

128 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

132 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

133 i‡(
˘x
 =
NULL
) {

134  
NGX_CONF_ERROR
;

137 *(
ngx_hâp_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

142 
ngx_hâp_max_moduÀ
 = 0;

143 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

144 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

148 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_hâp_max_moduÀ
++;

154 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

155 (*Ë* 
ngx_hâp_max_moduÀ
);

156 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

157  
NGX_CONF_ERROR
;

166 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

167 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

168  
NGX_CONF_ERROR
;

177 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

178 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

179  
NGX_CONF_ERROR
;

188 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

189 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

193 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

194 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

196 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

197 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

198 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

199  
NGX_CONF_ERROR
;

203 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

204 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

205 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

206  
NGX_CONF_ERROR
;

210 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

211 
˘x
->
loc_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

212 i‡(
˘x
->
loc_c⁄f
[
mi
] =
NULL
) {

213  
NGX_CONF_ERROR
;

218 
pcf
 = *
cf
;

219 
cf
->
˘x
 = ctx;

221 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

222 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

226 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

228 i‡(
moduÀ
->
¥ec⁄figuøti⁄
) {

229 i‡(
moduÀ
->
	`¥ec⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

230  
NGX_CONF_ERROR
;

237 
cf
->
moduÀ_ty≥
 = 
NGX_HTTP_MODULE
;

238 
cf
->
cmd_ty≥
 = 
NGX_HTTP_MAIN_CONF
;

239 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

241 i‡(
rv
 !
NGX_CONF_OK
) {

242 
Áûed
;

250 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

251 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

253 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

254 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

258 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

259 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

263 i‡(
moduÀ
->
öô_maö_c⁄f
) {

264 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

265 i‡(
rv
 !
NGX_CONF_OK
) {

266 
Áûed
;

270 
rv
 = 
	`ngx_hâp_mîge_£rvîs
(
cf
, 
cmcf
, 
moduÀ
, 
mi
);

271 i‡(
rv
 !
NGX_CONF_OK
) {

272 
Áûed
;

279 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

281 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

283 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
cscÂ
[
s
], 
˛cf
Ë!
NGX_OK
) {

284  
NGX_CONF_ERROR
;

287 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

288  
NGX_CONF_ERROR
;

293 i‡(
	`ngx_hâp_öô_pha£s
(
cf
, 
cmcf
Ë!
NGX_OK
) {

294  
NGX_CONF_ERROR
;

297 i‡(
	`ngx_hâp_öô_hódîs_ö_hash
(
cf
, 
cmcf
Ë!
NGX_OK
) {

298  
NGX_CONF_ERROR
;

302 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

303 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

307 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

309 i‡(
moduÀ
->
po°c⁄figuøti⁄
) {

310 i‡(
moduÀ
->
	`po°c⁄figuøti⁄
(
cf
Ë!
NGX_OK
) {

311  
NGX_CONF_ERROR
;

316 i‡(
	`ngx_hâp_v¨übÀs_öô_v¨s
(
cf
Ë!
NGX_OK
) {

317  
NGX_CONF_ERROR
;

325 *
cf
 = 
pcf
;

328 i‡(
	`ngx_hâp_öô_pha£_h™dÀrs
(
cf
, 
cmcf
Ë!
NGX_OK
) {

329  
NGX_CONF_ERROR
;

335 i‡(
	`ngx_hâp_›timize_£rvîs
(
cf
, 
cmcf
, cmcf->
p‹ts
Ë!
NGX_OK
) {

336  
NGX_CONF_ERROR
;

339  
NGX_CONF_OK
;

341 
Áûed
:

343 *
cf
 = 
pcf
;

345  
rv
;

346 
	}
}

349 
ngx_öt_t


350 
	$ngx_hâp_öô_pha£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

352 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_POST_READ_PHASE
].
h™dÀrs
,

353 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

354 !
NGX_OK
)

356  
NGX_ERROR
;

359 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_SERVER_REWRITE_PHASE
].
h™dÀrs
,

360 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

361 !
NGX_OK
)

363  
NGX_ERROR
;

366 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
,

367 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

368 !
NGX_OK
)

370  
NGX_ERROR
;

373 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_PREACCESS_PHASE
].
h™dÀrs
,

374 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

375 !
NGX_OK
)

377  
NGX_ERROR
;

380 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
,

381 
cf
->
poﬁ
, 2, (
ngx_hâp_h™dÀr_±
))

382 !
NGX_OK
)

384  
NGX_ERROR
;

387 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_CONTENT_PHASE
].
h™dÀrs
,

388 
cf
->
poﬁ
, 4, (
ngx_hâp_h™dÀr_±
))

389 !
NGX_OK
)

391  
NGX_ERROR
;

394 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
,

395 
cf
->
poﬁ
, 1, (
ngx_hâp_h™dÀr_±
))

396 !
NGX_OK
)

398  
NGX_ERROR
;

401  
NGX_OK
;

402 
	}
}

405 
ngx_öt_t


406 
	$ngx_hâp_öô_hódîs_ö_hash
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

408 
ngx_¨øy_t
 
hódîs_ö
;

409 
ngx_hash_key_t
 *
hk
;

410 
ngx_hash_öô_t
 
hash
;

411 
ngx_hâp_hódî_t
 *
hódî
;

413 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

414 !
NGX_OK
)

416  
NGX_ERROR
;

419 
hódî
 = 
ngx_hâp_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

420 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

421 i‡(
hk
 =
NULL
) {

422  
NGX_ERROR
;

425 
hk
->
key
 = 
hódî
->
«me
;

426 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

427 
hk
->
vÆue
 = 
hódî
;

430 
hash
.hash = &
cmcf
->
hódîs_ö_hash
;

431 
hash
.
key
 = 
ngx_hash_key_lc
;

432 
hash
.
max_size
 = 512;

433 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

434 
hash
.
«me
 = "headers_in_hash";

435 
hash
.
poﬁ
 = 
cf
->pool;

436 
hash
.
ãmp_poﬁ
 = 
NULL
;

438 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

439  
NGX_ERROR
;

442  
NGX_OK
;

443 
	}
}

446 
ngx_öt_t


447 
	$ngx_hâp_öô_pha£_h™dÀrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
)

449 
ngx_öt_t
 
j
;

450 
ngx_uöt_t
 
i
, 
n
;

451 
ngx_uöt_t
 
föd_c⁄fig_ödex
, 
u£_ªwrôe
, 
u£_ac˚ss
;

452 
ngx_hâp_h™dÀr_±
 *
h
;

453 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

454 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

456 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

457 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = (
ngx_uöt_t
) -1;

458 
föd_c⁄fig_ödex
 = 0;

459 
u£_ªwrôe
 = 
cmcf
->
pha£s
[
NGX_HTTP_REWRITE_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

460 
u£_ac˚ss
 = 
cmcf
->
pha£s
[
NGX_HTTP_ACCESS_PHASE
].
h™dÀrs
.
√…s
 ? 1 : 0;

462 
n
 = 
u£_ªwrôe
 + 
u£_ac˚ss
 + 
cmcf
->
åy_fûes
 + 1 ;

464 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

465 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

468 
ph
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

469 
n
 * (
ngx_hâp_pha£_h™dÀr_t
) + (*));

470 i‡(
ph
 =
NULL
) {

471  
NGX_ERROR
;

474 
cmcf
->
pha£_ígöe
.
h™dÀrs
 = 
ph
;

475 
n
 = 0;

477 
i
 = 0; i < 
NGX_HTTP_LOG_PHASE
; i++) {

478 
h
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
ñts
;

480 
i
) {

482 
NGX_HTTP_SERVER_REWRITE_PHASE
:

483 i‡(
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

484 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
 = 
n
;

486 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

490 
NGX_HTTP_FIND_CONFIG_PHASE
:

491 
föd_c⁄fig_ödex
 = 
n
;

493 
ph
->
checkî
 = 
ngx_hâp_c‹e_föd_c⁄fig_pha£
;

494 
n
++;

495 
ph
++;

499 
NGX_HTTP_REWRITE_PHASE
:

500 i‡(
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 =(
ngx_uöt_t
) -1) {

501 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
 = 
n
;

503 
checkî
 = 
ngx_hâp_c‹e_ªwrôe_pha£
;

507 
NGX_HTTP_POST_REWRITE_PHASE
:

508 i‡(
u£_ªwrôe
) {

509 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ªwrôe_pha£
;

510 
ph
->
√xt
 = 
föd_c⁄fig_ödex
;

511 
n
++;

512 
ph
++;

517 
NGX_HTTP_ACCESS_PHASE
:

518 
checkî
 = 
ngx_hâp_c‹e_ac˚ss_pha£
;

519 
n
++;

522 
NGX_HTTP_POST_ACCESS_PHASE
:

523 i‡(
u£_ac˚ss
) {

524 
ph
->
checkî
 = 
ngx_hâp_c‹e_po°_ac˚ss_pha£
;

525 
ph
->
√xt
 = 
n
;

526 
ph
++;

531 
NGX_HTTP_TRY_FILES_PHASE
:

532 i‡(
cmcf
->
åy_fûes
) {

533 
ph
->
checkî
 = 
ngx_hâp_c‹e_åy_fûes_pha£
;

534 
n
++;

535 
ph
++;

540 
NGX_HTTP_CONTENT_PHASE
:

541 
checkî
 = 
ngx_hâp_c‹e_c⁄ã¡_pha£
;

545 
checkî
 = 
ngx_hâp_c‹e_gíîic_pha£
;

548 
n
 +
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
;

550 
j
 = 
cmcf
->
pha£s
[
i
].
h™dÀrs
.
√…s
 - 1; j >=0; j--) {

551 
ph
->
checkî
 = checker;

552 
ph
->
h™dÀr
 = 
h
[
j
];

553 
ph
->
√xt
 = 
n
;

554 
ph
++;

558  
NGX_OK
;

559 
	}
}

563 
	$ngx_hâp_mîge_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

564 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

566 *
rv
;

567 
ngx_uöt_t
 
s
;

568 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

569 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

570 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

572 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

573 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

574 
ßved
 = *
˘x
;

575 
rv
 = 
NGX_CONF_OK
;

577 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

581 
˘x
->
§v_c⁄f
 = 
cscÂ
[
s
]->ctx->srv_conf;

583 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

584 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
, 
ßved
.
§v_c⁄f
[
˘x_ödex
],

585 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
˘x_ödex
]);

586 i‡(
rv
 !
NGX_CONF_OK
) {

587 
Áûed
;

591 i‡(
moduÀ
->
mîge_loc_c⁄f
) {

595 
˘x
->
loc_c⁄f
 = 
cscÂ
[
s
]->ctx->loc_conf;

597 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
ßved
.
loc_c⁄f
[
˘x_ödex
],

598 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
˘x_ödex
]);

599 i‡(
rv
 !
NGX_CONF_OK
) {

600 
Áûed
;

605 
˛cf
 = 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

607 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
,

608 
cscÂ
[
s
]->
˘x
->
loc_c⁄f
,

609 
moduÀ
, 
˘x_ödex
);

610 i‡(
rv
 !
NGX_CONF_OK
) {

611 
Áûed
;

616 
Áûed
:

618 *
˘x
 = 
ßved
;

620  
rv
;

621 
	}
}

625 
	$ngx_hâp_mîge_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

626 **
loc_c⁄f
, 
ngx_hâp_moduÀ_t
 *
moduÀ
, 
ngx_uöt_t
 
˘x_ödex
)

628 *
rv
;

629 
ngx_queue_t
 *
q
;

630 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, 
ßved
;

631 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

632 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

634 i‡(
loˇti⁄s
 =
NULL
) {

635  
NGX_CONF_OK
;

638 
˘x
 = (
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->ctx;

639 
ßved
 = *
˘x
;

641 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

642 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

643 
q
 = 
	`ngx_queue_√xt
(q))

645 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

647 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

648 
˘x
->
loc_c⁄f
 = 
˛cf
->loc_conf;

650 
rv
 = 
moduÀ
->
	`mîge_loc_c⁄f
(
cf
, 
loc_c⁄f
[
˘x_ödex
],

651 
˛cf
->
loc_c⁄f
[
˘x_ödex
]);

652 i‡(
rv
 !
NGX_CONF_OK
) {

653  
rv
;

656 
rv
 = 
	`ngx_hâp_mîge_loˇti⁄s
(
cf
, 
˛cf
->
loˇti⁄s
, clcf->
loc_c⁄f
,

657 
moduÀ
, 
˘x_ödex
);

658 i‡(
rv
 !
NGX_CONF_OK
) {

659  
rv
;

663 *
˘x
 = 
ßved
;

665  
NGX_CONF_OK
;

666 
	}
}

669 
ngx_öt_t


670 
	$ngx_hâp_öô_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

671 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

673 
ngx_uöt_t
 
n
;

674 
ngx_queue_t
 *
q
, *
loˇti⁄s
, *
«med
, 
èû
;

675 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

676 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

677 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

678 #i‡(
NGX_PCRE
)

679 
ngx_uöt_t
 
r
;

680 
ngx_queue_t
 *
ªgex
;

683 
loˇti⁄s
 = 
p˛cf
->locations;

685 i‡(
loˇti⁄s
 =
NULL
) {

686  
NGX_OK
;

689 
	`ngx_queue_s‹t
(
loˇti⁄s
, 
ngx_hâp_cmp_loˇti⁄s
);

691 
«med
 = 
NULL
;

692 
n
 = 0;

693 #i‡(
NGX_PCRE
)

694 
ªgex
 = 
NULL
;

695 
r
 = 0;

698 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

699 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

700 
q
 = 
	`ngx_queue_√xt
(q))

702 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

704 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

706 i‡(
	`ngx_hâp_öô_loˇti⁄s
(
cf
, 
NULL
, 
˛cf
Ë!
NGX_OK
) {

707  
NGX_ERROR
;

710 #i‡(
NGX_PCRE
)

712 i‡(
˛cf
->
ªgex
) {

713 
r
++;

715 i‡(
ªgex
 =
NULL
) {

716 
ªgex
 = 
q
;

724 i‡(
˛cf
->
«med
) {

725 
n
++;

727 i‡(
«med
 =
NULL
) {

728 
«med
 = 
q
;

734 i‡(
˛cf
->
n⁄ame
) {

739 i‡(
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

740 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

743 i‡(
«med
) {

744 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

745 (
n
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

746 i‡(
˛cÂ
 =
NULL
) {

747  
NGX_ERROR
;

750 
cscf
->
«med_loˇti⁄s
 = 
˛cÂ
;

752 
q
 = 
«med
;

753 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

754 
q
 = 
	`ngx_queue_√xt
(q))

756 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

758 *(
˛cÂ
++Ë
lq
->
exa˘
;

761 *
˛cÂ
 = 
NULL
;

763 
	`ngx_queue_•lô
(
loˇti⁄s
, 
«med
, &
èû
);

766 #i‡(
NGX_PCRE
)

768 i‡(
ªgex
) {

770 
˛cÂ
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

771 (
r
 + 1Ë* (
ngx_hâp_c‹e_loc_c⁄f_t
 **));

772 i‡(
˛cÂ
 =
NULL
) {

773  
NGX_ERROR
;

776 
p˛cf
->
ªgex_loˇti⁄s
 = 
˛cÂ
;

778 
q
 = 
ªgex
;

779 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

780 
q
 = 
	`ngx_queue_√xt
(q))

782 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

784 *(
˛cÂ
++Ë
lq
->
exa˘
;

787 *
˛cÂ
 = 
NULL
;

789 
	`ngx_queue_•lô
(
loˇti⁄s
, 
ªgex
, &
èû
);

794  
NGX_OK
;

795 
	}
}

798 
ngx_öt_t


799 
	$ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
ngx_c⁄f_t
 *
cf
,

800 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
)

802 
ngx_queue_t
 *
q
, *
loˇti⁄s
;

803 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

804 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

806 
loˇti⁄s
 = 
p˛cf
->locations;

808 i‡(
loˇti⁄s
 =
NULL
) {

809  
NGX_OK
;

812 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

813  
NGX_OK
;

816 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

817 
q
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

818 
q
 = 
	`ngx_queue_√xt
(q))

820 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

822 
˛cf
 = 
lq
->
exa˘
 ?Üq->exa˘ :Üq->
ö˛usive
;

824 i‡(
	`ngx_hâp_öô_°©ic_loˇti⁄_åìs
(
cf
, 
˛cf
Ë!
NGX_OK
) {

825  
NGX_ERROR
;

829 i‡(
	`ngx_hâp_joö_exa˘_loˇti⁄s
(
cf
, 
loˇti⁄s
Ë!
NGX_OK
) {

830  
NGX_ERROR
;

833 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_hód
(locations));

835 
p˛cf
->
°©ic_loˇti⁄s
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 0);

836 i‡(
p˛cf
->
°©ic_loˇti⁄s
 =
NULL
) {

837  
NGX_ERROR
;

840  
NGX_OK
;

841 
	}
}

844 
ngx_öt_t


845 
	$ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

846 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
)

848 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

850 i‡(*
loˇti⁄s
 =
NULL
) {

851 *
loˇti⁄s
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
,

852 (
ngx_hâp_loˇti⁄_queue_t
));

853 i‡(*
loˇti⁄s
 =
NULL
) {

854  
NGX_ERROR
;

857 
	`ngx_queue_öô
(*
loˇti⁄s
);

860 
lq
 = 
	`ngx_∑Œoc
(
cf
->
ãmp_poﬁ
, (
ngx_hâp_loˇti⁄_queue_t
));

861 i‡(
lq
 =
NULL
) {

862  
NGX_ERROR
;

865 i‡(
˛cf
->
exa˘_m©ch


866 #i‡(
NGX_PCRE
)

867 || 
˛cf
->
ªgex


869 || 
˛cf
->
«med
 || clcf->
n⁄ame
)

871 
lq
->
exa˘
 = 
˛cf
;

872 
lq
->
ö˛usive
 = 
NULL
;

875 
lq
->
exa˘
 = 
NULL
;

876 
lq
->
ö˛usive
 = 
˛cf
;

879 
lq
->
«me
 = &
˛cf
->name;

880 
lq
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

881 
lq
->
löe
 = 
cf
->
c⁄f_fûe
->line;

883 
	`ngx_queue_öô
(&
lq
->
li°
);

885 
	`ngx_queue_ö£π_èû
(*
loˇti⁄s
, &
lq
->
queue
);

887  
NGX_OK
;

888 
	}
}

891 
ngx_öt_t


892 
	$ngx_hâp_cmp_loˇti⁄s
(c⁄° 
ngx_queue_t
 *
⁄e
, c⁄°Çgx_queue_à*
two
)

894 
ngx_öt_t
 
rc
;

895 
ngx_hâp_c‹e_loc_c⁄f_t
 *
fú°
, *
£c⁄d
;

896 
ngx_hâp_loˇti⁄_queue_t
 *
lq1
, *
lq2
;

898 
lq1
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
⁄e
;

899 
lq2
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
two
;

901 
fú°
 = 
lq1
->
exa˘
 ?Üq1->exa˘ :Üq1->
ö˛usive
;

902 
£c⁄d
 = 
lq2
->
exa˘
 ?Üq2->exa˘ :Üq2->
ö˛usive
;

904 i‡(
fú°
->
n⁄ame
 && !
£c⁄d
->noname) {

909 i‡(!
fú°
->
n⁄ame
 && 
£c⁄d
->noname) {

914 i‡(
fú°
->
n⁄ame
 || 
£c⁄d
->noname) {

919 i‡(
fú°
->
«med
 && !
£c⁄d
->named) {

924 i‡(!
fú°
->
«med
 && 
£c⁄d
->named) {

929 i‡(
fú°
->
«med
 && 
£c⁄d
->named) {

930  
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

933 #i‡(
NGX_PCRE
)

935 i‡(
fú°
->
ªgex
 && !
£c⁄d
->regex) {

940 i‡(!
fú°
->
ªgex
 && 
£c⁄d
->regex) {

945 i‡(
fú°
->
ªgex
 || 
£c⁄d
->regex) {

952 
rc
 = 
	`ngx_°rcmp
(
fú°
->
«me
.
d©a
, 
£c⁄d
->name.data);

954 i‡(
rc
 =0 && !
fú°
->
exa˘_m©ch
 && 
£c⁄d
->exact_match) {

959  
rc
;

960 
	}
}

963 
ngx_öt_t


964 
	$ngx_hâp_joö_exa˘_loˇti⁄s
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
)

966 
ngx_queue_t
 *
q
, *
x
;

967 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

969 
q
 = 
	`ngx_queue_hód
(
loˇti⁄s
);

971 
q
 !
	`ngx_queue_œ°
(
loˇti⁄s
)) {

973 
x
 = 
	`ngx_queue_√xt
(
q
);

975 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

976 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

978 i‡(
	`ngx_°rcmp
(
lq
->
«me
->
d©a
, 
lx
->name->data) == 0) {

980 i‡((
lq
->
exa˘
 && 
lx
->exa˘Ë|| (lq->
ö˛usive
 &&Üx->inclusive)) {

981 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

983 
lx
->
«me
,Üx->
fûe_«me
,Üx->
löe
);

985  
NGX_ERROR
;

988 
lq
->
ö˛usive
 = 
lx
->inclusive;

990 
	`ngx_queue_ªmove
(
x
);

995 
q
 = 
	`ngx_queue_√xt
(q);

998  
NGX_OK
;

999 
	}
}

1003 
	$ngx_hâp_¸óã_loˇti⁄s_li°
(
ngx_queue_t
 *
loˇti⁄s
,Çgx_queue_à*
q
)

1005 
u_ch¨
 *
«me
;

1006 
size_t
 
Àn
;

1007 
ngx_queue_t
 *
x
, 
èû
;

1008 
ngx_hâp_loˇti⁄_queue_t
 *
lq
, *
lx
;

1010 i‡(
q
 =
	`ngx_queue_œ°
(
loˇti⁄s
)) {

1014 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1016 i‡(
lq
->
ö˛usive
 =
NULL
) {

1017 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
	`ngx_queue_√xt
(
q
));

1021 
Àn
 = 
lq
->
«me
->len;

1022 
«me
 = 
lq
->«me->
d©a
;

1024 
x
 = 
	`ngx_queue_√xt
(
q
);

1025 
x
 !
	`ngx_queue_£¡öñ
(
loˇti⁄s
);

1026 
x
 = 
	`ngx_queue_√xt
(x))

1028 
lx
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
x
;

1030 i‡(
Àn
 > 
lx
->
«me
->len

1031 || (
	`ngx_°∫cmp
(
«me
, 
lx
->«me->
d©a
, 
Àn
) != 0))

1037 
q
 = 
	`ngx_queue_√xt
(q);

1039 i‡(
q
 =
x
) {

1040 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1044 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1045 
	`ngx_queue_add
(&
lq
->
li°
, &
èû
);

1047 i‡(
x
 =
	`ngx_queue_£¡öñ
(
loˇti⁄s
)) {

1048 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1052 
	`ngx_queue_•lô
(&
lq
->
li°
, 
x
, &
èû
);

1053 
	`ngx_queue_add
(
loˇti⁄s
, &
èû
);

1055 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(&
lq
->
li°
, 
	`ngx_queue_hód
(&lq->list));

1057 
	`ngx_hâp_¸óã_loˇti⁄s_li°
(
loˇti⁄s
, 
x
);

1058 
	}
}

1066 
ngx_hâp_loˇti⁄_åì_node_t
 *

1067 
	$ngx_hâp_¸óã_loˇti⁄s_åì
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 *
loˇti⁄s
,

1068 
size_t
 
¥efix
)

1070 
size_t
 
Àn
;

1071 
ngx_queue_t
 *
q
, 
èû
;

1072 
ngx_hâp_loˇti⁄_queue_t
 *
lq
;

1073 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
;

1075 
q
 = 
	`ngx_queue_middÀ
(
loˇti⁄s
);

1077 
lq
 = (
ngx_hâp_loˇti⁄_queue_t
 *Ë
q
;

1078 
Àn
 = 
lq
->
«me
->À¿- 
¥efix
;

1080 
node
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

1081 
	`off£tof
(
ngx_hâp_loˇti⁄_åì_node_t
, 
«me
Ë+ 
Àn
);

1082 i‡(
node
 =
NULL
) {

1083  
NULL
;

1086 
node
->
À·
 = 
NULL
;

1087 
node
->
right
 = 
NULL
;

1088 
node
->
åì
 = 
NULL
;

1089 
node
->
exa˘
 = 
lq
->exact;

1090 
node
->
ö˛usive
 = 
lq
->inclusive;

1092 
node
->
auto_ªdúe˘
 = (
u_ch¨
Ë((
lq
->
exa˘
 &&Üq->exact->auto_redirect)

1093 || (
lq
->
ö˛usive
 &&Üq->ö˛usive->
auto_ªdúe˘
));

1095 
node
->
Àn
 = (
u_ch¨
)Üen;

1096 
	`ngx_mem˝y
(
node
->
«me
, &
lq
->«me->
d©a
[
¥efix
], 
Àn
);

1098 
	`ngx_queue_•lô
(
loˇti⁄s
, 
q
, &
èû
);

1100 i‡(
	`ngx_queue_em±y
(
loˇti⁄s
)) {

1105 
ö˛usive
;

1108 
node
->
À·
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, 
loˇti⁄s
, 
¥efix
);

1109 i‡(
node
->
À·
 =
NULL
) {

1110  
NULL
;

1113 
	`ngx_queue_ªmove
(
q
);

1115 i‡(
	`ngx_queue_em±y
(&
èû
)) {

1116 
ö˛usive
;

1119 
node
->
right
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
èû
, 
¥efix
);

1120 i‡(
node
->
right
 =
NULL
) {

1121  
NULL
;

1124 
ö˛usive
:

1126 i‡(
	`ngx_queue_em±y
(&
lq
->
li°
)) {

1127  
node
;

1130 
node
->
åì
 = 
	`ngx_hâp_¸óã_loˇti⁄s_åì
(
cf
, &
lq
->
li°
, 
¥efix
 + 
Àn
);

1131 i‡(
node
->
åì
 =
NULL
) {

1132  
NULL
;

1135  
node
;

1136 
	}
}

1139 
ngx_öt_t


1140 
	$ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1141 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1143 
ö_p‹t_t
 
p
;

1144 
ngx_uöt_t
 
i
;

1145 
sockaddr
 *
ß
;

1146 
sockaddr_ö
 *
sö
;

1147 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1148 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1149 #i‡(
NGX_HAVE_INET6
)

1150 
sockaddr_ö6
 *
sö6
;

1153 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

1155 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1156 
cmcf
->
p‹ts
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 2,

1157 (
ngx_hâp_c⁄f_p‹t_t
));

1158 i‡(
cmcf
->
p‹ts
 =
NULL
) {

1159  
NGX_ERROR
;

1163 
ß
 = &
ls›t
->
u
.
sockaddr
;

1165 
ß
->
ß_Ámûy
) {

1167 #i‡(
NGX_HAVE_INET6
)

1168 
AF_INET6
:

1169 
sö6
 = &
ls›t
->
u
.
sockaddr_ö6
;

1170 
p
 = 
sö6
->
sö6_p‹t
;

1174 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1175 
AF_UNIX
:

1176 
p
 = 0;

1181 
sö
 = &
ls›t
->
u
.
sockaddr_ö
;

1182 
p
 = 
sö
->
sö_p‹t
;

1186 
p‹t
 = 
cmcf
->
p‹ts
->
ñts
;

1187 
i
 = 0; i < 
cmcf
->
p‹ts
->
√…s
; i++) {

1189 i‡(
p
 !
p‹t
[
i
].p‹à|| 
ß
->
ß_Ámûy
 !p‹t[i].
Ámûy
) {

1195  
	`ngx_hâp_add_addªs£s
(
cf
, 
cscf
, &
p‹t
[
i
], 
ls›t
);

1200 
p‹t
 = 
	`ngx_¨øy_push
(
cmcf
->
p‹ts
);

1201 i‡(
p‹t
 =
NULL
) {

1202  
NGX_ERROR
;

1205 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

1206 
p‹t
->p‹à
p
;

1207 
p‹t
->
addrs
.
ñts
 = 
NULL
;

1209  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1210 
	}
}

1213 
ngx_öt_t


1214 
	$ngx_hâp_add_addªs£s
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1215 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1217 
u_ch¨
 *
p
;

1218 
size_t
 
Àn
, 
off
;

1219 
ngx_uöt_t
 
i
, 
deÁu…_£rvî
;

1220 
sockaddr
 *
ß
;

1221 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1222 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1223 
sockaddr_un
 *
ßun
;

1225 #i‡(
NGX_HTTP_SSL
)

1226 
ngx_uöt_t
 
s¶
;

1228 #i‡(
NGX_HTTP_SPDY
)

1229 
ngx_uöt_t
 
•dy
;

1237 
ß
 = &
ls›t
->
u
.
sockaddr
;

1239 
ß
->
ß_Ámûy
) {

1241 #i‡(
NGX_HAVE_INET6
)

1242 
AF_INET6
:

1243 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

1244 
Àn
 = 16;

1248 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

1249 
AF_UNIX
:

1250 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

1251 
Àn
 = (
ßun
->
sun_∑th
);

1256 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

1257 
Àn
 = 4;

1261 
p
 = 
ls›t
->
u
.
sockaddr_d©a
 + 
off
;

1263 
addr
 = 
p‹t
->
addrs
.
ñts
;

1265 
i
 = 0; i < 
p‹t
->
addrs
.
√…s
; i++) {

1267 i‡(
	`ngx_memcmp
(
p
, 
addr
[
i
].
›t
.
u
.
sockaddr_d©a
 + 
off
, 
Àn
) != 0) {

1273 i‡(
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, &
addr
[
i
]Ë!
NGX_OK
) {

1274  
NGX_ERROR
;

1278 
deÁu…_£rvî
 = 
addr
[
i
].
›t
.default_server;

1280 #i‡(
NGX_HTTP_SSL
)

1281 
s¶
 = 
ls›t
->s¶ || 
addr
[
i
].
›t
.ssl;

1283 #i‡(
NGX_HTTP_SPDY
)

1284 
•dy
 = 
ls›t
->•dy || 
addr
[
i
].
›t
.spdy;

1287 i‡(
ls›t
->
£t
) {

1289 i‡(
addr
[
i
].
›t
.
£t
) {

1290 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1291 "du∂iˇãÜi°í o±i⁄†f‹ %s", 
addr
[
i
].
›t
.addr);

1292  
NGX_ERROR
;

1295 
addr
[
i
].
›t
 = *
ls›t
;

1300 i‡(
ls›t
->
deÁu…_£rvî
) {

1302 i‡(
deÁu…_£rvî
) {

1303 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1304 "®du∂iˇã deÁu… sîvî f‹ %s", 
addr
[
i
].
›t
.addr);

1305  
NGX_ERROR
;

1308 
deÁu…_£rvî
 = 1;

1309 
addr
[
i
].
deÁu…_£rvî
 = 
cscf
;

1312 
addr
[
i
].
›t
.
deÁu…_£rvî
 = default_server;

1313 #i‡(
NGX_HTTP_SSL
)

1314 
addr
[
i
].
›t
.
s¶
 = ssl;

1316 #i‡(
NGX_HTTP_SPDY
)

1317 
addr
[
i
].
›t
.
•dy
 = spdy;

1320  
NGX_OK
;

1325  
	`ngx_hâp_add_addªss
(
cf
, 
cscf
, 
p‹t
, 
ls›t
);

1326 
	}
}

1334 
ngx_öt_t


1335 
	$ngx_hâp_add_addªss
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1336 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
, 
ngx_hâp_li°í_›t_t
 *
ls›t
)

1338 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1340 i‡(
p‹t
->
addrs
.
ñts
 =
NULL
) {

1341 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 4,

1342 (
ngx_hâp_c⁄f_addr_t
))

1343 !
NGX_OK
)

1345  
NGX_ERROR
;

1349 #i‡(
NGX_HTTP_SPDY
 && 
NGX_HTTP_SSL
 && !
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
)

1350 i‡(
ls›t
->
•dy
 &&Üs›t->
s¶
) {

1351 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1353 "SPDY i†nŸÉ«bÀd f‹ %s", 
ls›t
->
addr
);

1357 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

1358 i‡(
addr
 =
NULL
) {

1359  
NGX_ERROR
;

1362 
addr
->
›t
 = *
ls›t
;

1363 
addr
->
hash
.
buckës
 = 
NULL
;

1364 
addr
->
hash
.
size
 = 0;

1365 
addr
->
wc_hód
 = 
NULL
;

1366 
addr
->
wc_èû
 = 
NULL
;

1367 #i‡(
NGX_PCRE
)

1368 
addr
->
ƒegex
 = 0;

1369 
addr
->
ªgex
 = 
NULL
;

1371 
addr
->
deÁu…_£rvî
 = 
cscf
;

1372 
addr
->
£rvîs
.
ñts
 = 
NULL
;

1374  
	`ngx_hâp_add_£rvî
(
cf
, 
cscf
, 
addr
);

1375 
	}
}

1380 
ngx_öt_t


1381 
	$ngx_hâp_add_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

1382 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1384 
ngx_uöt_t
 
i
;

1385 
ngx_hâp_c‹e_§v_c⁄f_t
 **
£rvî
;

1387 i‡(
addr
->
£rvîs
.
ñts
 =
NULL
) {

1388 i‡(
	`ngx_¨øy_öô
(&
addr
->
£rvîs
, 
cf
->
ãmp_poﬁ
, 4,

1389 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

1390 !
NGX_OK
)

1392  
NGX_ERROR
;

1396 
£rvî
 = 
addr
->
£rvîs
.
ñts
;

1397 
i
 = 0; i < 
addr
->
£rvîs
.
√…s
; i++) {

1398 i‡(
£rvî
[
i
] =
cscf
) {

1399 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1400 "®du∂iˇãÜi°í %s", 
addr
->
›t
.addr);

1401  
NGX_ERROR
;

1406 
£rvî
 = 
	`ngx_¨øy_push
(&
addr
->
£rvîs
);

1407 i‡(
£rvî
 =
NULL
) {

1408  
NGX_ERROR
;

1411 *
£rvî
 = 
cscf
;

1413  
NGX_OK
;

1414 
	}
}

1417 
ngx_öt_t


1418 
	$ngx_hâp_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1419 
ngx_¨øy_t
 *
p‹ts
)

1421 
ngx_uöt_t
 
p
, 
a
;

1422 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
;

1423 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1425 i‡(
p‹ts
 =
NULL
) {

1426  
NGX_OK
;

1429 
p‹t
 = 
p‹ts
->
ñts
;

1430 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

1432 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

1433 (
ngx_hâp_c⁄f_addr_t
), 
ngx_hâp_cmp_c⁄f_addrs
);

1440 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

1441 
a
 = 0;á < 
p‹t
[
p
].
addrs
.
√…s
;á++) {

1443 i‡(
addr
[
a
].
£rvîs
.
√…s
 > 1

1444 #i‡(
NGX_PCRE
)

1445 || 
addr
[
a
].
deÁu…_£rvî
->
ˇ±uªs


1449 i‡(
	`ngx_hâp_£rvî_«mes
(
cf
, 
cmcf
, &
addr
[
a
]Ë!
NGX_OK
) {

1450  
NGX_ERROR
;

1455 i‡(
	`ngx_hâp_öô_li°íög
(
cf
, &
p‹t
[
p
]Ë!
NGX_OK
) {

1456  
NGX_ERROR
;

1460  
NGX_OK
;

1461 
	}
}

1464 
ngx_öt_t


1465 
	$ngx_hâp_£rvî_«mes
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
,

1466 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1468 
ngx_öt_t
 
rc
;

1469 
ngx_uöt_t
 
n
, 
s
;

1470 
ngx_hash_öô_t
 
hash
;

1471 
ngx_hash_keys_¨øys_t
 
ha
;

1472 
ngx_hâp_£rvî_«me_t
 *
«me
;

1473 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
;

1474 #i‡(
NGX_PCRE
)

1475 
ngx_uöt_t
 
ªgex
, 
i
;

1477 
ªgex
 = 0;

1480 
	`ngx_memzîo
(&
ha
, (
ngx_hash_keys_¨øys_t
));

1482 
ha
.
ãmp_poﬁ
 = 
	`ngx_¸óã_poﬁ
(
NGX_DEFAULT_POOL_SIZE
, 
cf
->
log
);

1483 i‡(
ha
.
ãmp_poﬁ
 =
NULL
) {

1484  
NGX_ERROR
;

1487 
ha
.
poﬁ
 = 
cf
->pool;

1489 i‡(
	`ngx_hash_keys_¨øy_öô
(&
ha
, 
NGX_HASH_LARGE
Ë!
NGX_OK
) {

1490 
Áûed
;

1493 
cscÂ
 = 
addr
->
£rvîs
.
ñts
;

1495 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1497 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1499 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1501 #i‡(
NGX_PCRE
)

1502 i‡(
«me
[
n
].
ªgex
) {

1503 
ªgex
++;

1508 
rc
 = 
	`ngx_hash_add_key
(&
ha
, &
«me
[
n
].«me,Çame[n].
£rvî
,

1509 
NGX_HASH_WILDCARD_KEY
);

1511 i‡(
rc
 =
NGX_ERROR
) {

1512  
NGX_ERROR
;

1515 i‡(
rc
 =
NGX_DECLINED
) {

1516 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1518 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1519  
NGX_ERROR
;

1522 i‡(
rc
 =
NGX_BUSY
) {

1523 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

1525 &
«me
[
n
].«me, 
addr
->
›t
.addr);

1530 
hash
.
key
 = 
ngx_hash_key_lc
;

1531 
hash
.
max_size
 = 
cmcf
->
£rvî_«mes_hash_max_size
;

1532 
hash
.
buckë_size
 = 
cmcf
->
£rvî_«mes_hash_buckë_size
;

1533 
hash
.
«me
 = "server_names_hash";

1534 
hash
.
poﬁ
 = 
cf
->pool;

1536 i‡(
ha
.
keys
.
√…s
) {

1537 
hash
.hash = &
addr
->hash;

1538 
hash
.
ãmp_poﬁ
 = 
NULL
;

1540 i‡(
	`ngx_hash_öô
(&
hash
, 
ha
.
keys
.
ñts
, ha.keys.
√…s
Ë!
NGX_OK
) {

1541 
Áûed
;

1545 i‡(
ha
.
dns_wc_hód
.
√…s
) {

1547 
	`ngx_qs‹t
(
ha
.
dns_wc_hód
.
ñts
, (
size_t
Ëha.dns_wc_hód.
√…s
,

1548 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1550 
hash
.hash = 
NULL
;

1551 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1553 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_hód
.
ñts
,

1554 
ha
.
dns_wc_hód
.
√…s
)

1555 !
NGX_OK
)

1557 
Áûed
;

1560 
addr
->
wc_hód
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1563 i‡(
ha
.
dns_wc_èû
.
√…s
) {

1565 
	`ngx_qs‹t
(
ha
.
dns_wc_èû
.
ñts
, (
size_t
Ëha.dns_wc_èû.
√…s
,

1566 (
ngx_hash_key_t
), 
ngx_hâp_cmp_dns_wûdˇrds
);

1568 
hash
.hash = 
NULL
;

1569 
hash
.
ãmp_poﬁ
 = 
ha
.temp_pool;

1571 i‡(
	`ngx_hash_wûdˇrd_öô
(&
hash
, 
ha
.
dns_wc_èû
.
ñts
,

1572 
ha
.
dns_wc_èû
.
√…s
)

1573 !
NGX_OK
)

1575 
Áûed
;

1578 
addr
->
wc_èû
 = (
ngx_hash_wûdˇrd_t
 *Ë
hash
.hash;

1581 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1583 #i‡(
NGX_PCRE
)

1585 i‡(
ªgex
 == 0) {

1586  
NGX_OK
;

1589 
addr
->
ƒegex
 = 
ªgex
;

1590 
addr
->
ªgex
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,Ñegex * (
ngx_hâp_£rvî_«me_t
));

1591 i‡(
addr
->
ªgex
 =
NULL
) {

1592  
NGX_ERROR
;

1595 
i
 = 0;

1597 
s
 = 0; s < 
addr
->
£rvîs
.
√…s
; s++) {

1599 
«me
 = 
cscÂ
[
s
]->
£rvî_«mes
.
ñts
;

1601 
n
 = 0;Ç < 
cscÂ
[
s
]->
£rvî_«mes
.
√…s
;Ç++) {

1602 i‡(
«me
[
n
].
ªgex
) {

1603 
addr
->
ªgex
[
i
++] = 
«me
[
n
];

1610  
NGX_OK
;

1612 
Áûed
:

1614 
	`ngx_de°roy_poﬁ
(
ha
.
ãmp_poﬁ
);

1616  
NGX_ERROR
;

1617 
	}
}

1620 
ngx_öt_t


1621 
	$ngx_hâp_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

1623 
ngx_hâp_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

1625 
fú°
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
⁄e
;

1626 
£c⁄d
 = (
ngx_hâp_c⁄f_addr_t
 *Ë
two
;

1628 i‡(
fú°
->
›t
.
wûdˇrd
) {

1633 i‡(
£c⁄d
->
›t
.
wûdˇrd
) {

1638 i‡(
fú°
->
›t
.
böd
 && !
£c⁄d
->opt.bind) {

1643 i‡(!
fú°
->
›t
.
böd
 && 
£c⁄d
->opt.bind) {

1651 
	}
}

1654 
ngx_libc_cde˛


1655 
	$ngx_hâp_cmp_dns_wûdˇrds
(c⁄° *
⁄e
, c⁄° *
two
)

1657 
ngx_hash_key_t
 *
fú°
, *
£c⁄d
;

1659 
fú°
 = (
ngx_hash_key_t
 *Ë
⁄e
;

1660 
£c⁄d
 = (
ngx_hash_key_t
 *Ë
two
;

1662  
	`ngx_dns_°rcmp
(
fú°
->
key
.
d©a
, 
£c⁄d
->key.data);

1663 
	}
}

1666 
ngx_öt_t


1667 
	$ngx_hâp_öô_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_p‹t_t
 *
p‹t
)

1669 
ngx_uöt_t
 
i
, 
œ°
, 
böd_wûdˇrd
;

1670 
ngx_li°íög_t
 *
ls
;

1671 
ngx_hâp_p‹t_t
 *
hp‹t
;

1672 
ngx_hâp_c⁄f_addr_t
 *
addr
;

1674 
addr
 = 
p‹t
->
addrs
.
ñts
;

1675 
œ°
 = 
p‹t
->
addrs
.
√…s
;

1684 i‡(
addr
[
œ°
 - 1].
›t
.
wûdˇrd
) {

1685 
addr
[
œ°
 - 1].
›t
.
böd
 = 1;

1686 
böd_wûdˇrd
 = 1;

1689 
böd_wûdˇrd
 = 0;

1692 
i
 = 0;

1694 
i
 < 
œ°
) {

1696 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
›t
.
böd
) {

1697 
i
++;

1701 
ls
 = 
	`ngx_hâp_add_li°íög
(
cf
, &
addr
[
i
]);

1702 i‡(
ls
 =
NULL
) {

1703  
NGX_ERROR
;

1706 
hp‹t
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_p‹t_t
));

1707 i‡(
hp‹t
 =
NULL
) {

1708  
NGX_ERROR
;

1711 
ls
->
£rvîs
 = 
hp‹t
;

1713 i‡(
i
 =
œ°
 - 1) {

1714 
hp‹t
->
«ddrs
 = 
œ°
;

1717 
hp‹t
->
«ddrs
 = 1;

1718 
i
 = 0;

1721 
ls
->
sockaddr
->
ß_Ámûy
) {

1723 #i‡(
NGX_HAVE_INET6
)

1724 
AF_INET6
:

1725 i‡(
	`ngx_hâp_add_addrs6
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1726  
NGX_ERROR
;

1731 i‡(
	`ngx_hâp_add_addrs
(
cf
, 
hp‹t
, 
addr
Ë!
NGX_OK
) {

1732  
NGX_ERROR
;

1737 
addr
++;

1738 
œ°
--;

1741  
NGX_OK
;

1742 
	}
}

1745 
ngx_li°íög_t
 *

1746 
	$ngx_hâp_add_li°íög
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1748 
ngx_li°íög_t
 *
ls
;

1749 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1750 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1752 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, &
addr
->
›t
.
u
.
sockaddr
,áddr->›t.
sockÀn
);

1753 i‡(
ls
 =
NULL
) {

1754  
NULL
;

1757 
ls
->
addr_¡›
 = 1;

1759 
ls
->
h™dÀr
 = 
ngx_hâp_öô_c⁄√˘i⁄
;

1761 
cscf
 = 
addr
->
deÁu…_£rvî
;

1762 
ls
->
poﬁ_size
 = 
cscf
->
c⁄√˘i⁄_poﬁ_size
;

1763 
ls
->
po°_ac˚±_timeout
 = 
cscf
->
˛õ¡_hódî_timeout
;

1765 
˛cf
 = 
cscf
->
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

1767 
ls
->
logp
 = 
˛cf
->
îr‹_log
;

1768 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

1769 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

1771 #i‡(
NGX_WIN32
)

1773 
ngx_io˝_c⁄f_t
 *
io˝cf
 = 
NULL
;

1775 i‡(
	`ngx_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_evíts_moduÀ
)) {

1776 
io˝cf
 = 
	`ngx_evít_gë_c⁄f
(
cf
->
cy˛e
->
c⁄f_˘x
, 
ngx_io˝_moduÀ
);

1778 i‡(
io˝cf
 && io˝cf->
ac˚±ex_ªad
) {

1779 
ls
->
po°_ac˚±_buf„r_size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

1784 
ls
->
backlog
 = 
addr
->
›t
.backlog;

1785 
ls
->
rcvbuf
 = 
addr
->
›t
.rcvbuf;

1786 
ls
->
¢dbuf
 = 
addr
->
›t
.sndbuf;

1788 
ls
->
kì∑live
 = 
addr
->
›t
.
so_kì∑live
;

1789 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

1790 
ls
->
kìpidÀ
 = 
addr
->
›t
.
t˝_kìpidÀ
;

1791 
ls
->
kìpötvl
 = 
addr
->
›t
.
t˝_kìpötvl
;

1792 
ls
->
kìp˙t
 = 
addr
->
›t
.
t˝_kìp˙t
;

1795 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

1796 
ls
->
ac˚±_fûãr
 = 
addr
->
›t
.accept_filter;

1799 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

1800 
ls
->
de„ºed_ac˚±
 = 
addr
->
›t
.deferred_accept;

1803 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

1804 
ls
->
ùv6⁄ly
 = 
addr
->
›t
.ipv6only;

1807 #i‡(
NGX_HAVE_SETFIB
)

1808 
ls
->
£tfib
 = 
addr
->
›t
.setfib;

1811  
ls
;

1812 
	}
}

1815 
ngx_öt_t


1816 
	$ngx_hâp_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1817 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1819 
ngx_uöt_t
 
i
;

1820 
ngx_hâp_ö_addr_t
 *
addrs
;

1821 
sockaddr_ö
 *
sö
;

1822 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1824 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1825 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö_addr_t
));

1826 i‡(
hp‹t
->
addrs
 =
NULL
) {

1827  
NGX_ERROR
;

1830 
addrs
 = 
hp‹t
->addrs;

1832 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1834 
sö
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö
;

1835 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

1836 
addrs
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1837 #i‡(
NGX_HTTP_SSL
)

1838 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1840 #i‡(
NGX_HTTP_SPDY
)

1841 
addrs
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1844 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1845 && (
addr
[
i
].
wc_hód
 =
NULL


1846 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1847 && (
addr
[
i
].
wc_èû
 =
NULL


1848 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1849 #i‡(
NGX_PCRE
)

1850 && 
addr
[
i
].
ƒegex
 == 0

1857 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1858 i‡(
vn
 =
NULL
) {

1859  
NGX_ERROR
;

1862 
addrs
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1864 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1865 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1866 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1867 #i‡(
NGX_PCRE
)

1868 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1869 
vn
->
ªgex
 = 
addr
[
i
].regex;

1873  
NGX_OK
;

1874 
	}
}

1877 #i‡(
NGX_HAVE_INET6
)

1879 
ngx_öt_t


1880 
	$ngx_hâp_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_p‹t_t
 *
hp‹t
,

1881 
ngx_hâp_c⁄f_addr_t
 *
addr
)

1883 
ngx_uöt_t
 
i
;

1884 
ngx_hâp_ö6_addr_t
 *
addrs6
;

1885 
sockaddr_ö6
 *
sö6
;

1886 
ngx_hâp_vútuÆ_«mes_t
 *
vn
;

1888 
hp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

1889 
hp‹t
->
«ddrs
 * (
ngx_hâp_ö6_addr_t
));

1890 i‡(
hp‹t
->
addrs
 =
NULL
) {

1891  
NGX_ERROR
;

1894 
addrs6
 = 
hp‹t
->
addrs
;

1896 
i
 = 0; i < 
hp‹t
->
«ddrs
; i++) {

1898 
sö6
 = &
addr
[
i
].
›t
.
u
.
sockaddr_ö6
;

1899 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

1900 
addrs6
[
i
].
c⁄f
.
deÁu…_£rvî
 = 
addr
[i].default_server;

1901 #i‡(
NGX_HTTP_SSL
)

1902 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].
›t
.ssl;

1904 #i‡(
NGX_HTTP_SPDY
)

1905 
addrs6
[
i
].
c⁄f
.
•dy
 = 
addr
[i].
›t
.spdy;

1908 i‡(
addr
[
i
].
hash
.
buckës
 =
NULL


1909 && (
addr
[
i
].
wc_hód
 =
NULL


1910 || 
addr
[
i
].
wc_hód
->
hash
.
buckës
 =
NULL
)

1911 && (
addr
[
i
].
wc_èû
 =
NULL


1912 || 
addr
[
i
].
wc_èû
->
hash
.
buckës
 =
NULL
)

1913 #i‡(
NGX_PCRE
)

1914 && 
addr
[
i
].
ƒegex
 == 0

1921 
vn
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_vútuÆ_«mes_t
));

1922 i‡(
vn
 =
NULL
) {

1923  
NGX_ERROR
;

1926 
addrs6
[
i
].
c⁄f
.
vútuÆ_«mes
 = 
vn
;

1928 
vn
->
«mes
.
hash
 = 
addr
[
i
].hash;

1929 
vn
->
«mes
.
wc_hód
 = 
addr
[
i
].wc_head;

1930 
vn
->
«mes
.
wc_èû
 = 
addr
[
i
].wc_tail;

1931 #i‡(
NGX_PCRE
)

1932 
vn
->
ƒegex
 = 
addr
[
i
].nregex;

1933 
vn
->
ªgex
 = 
addr
[
i
].regex;

1937  
NGX_OK
;

1938 
	}
}

1944 
	$ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1946 *
p
 = 
c⁄f
;

1948 
ngx_¨øy_t
 **
ty≥s
;

1949 
ngx_°r_t
 *
vÆue
, *
deÁu…_ty≥
;

1950 
ngx_uöt_t
 
i
, 
n
, 
hash
;

1951 
ngx_hash_key_t
 *
ty≥
;

1953 
ty≥s
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1955 i‡(*
ty≥s
 == (*) -1) {

1956  
NGX_CONF_OK
;

1959 
deÁu…_ty≥
 = 
cmd
->
po°
;

1961 i‡(*
ty≥s
 =
NULL
) {

1962 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

1963 i‡(*
ty≥s
 =
NULL
) {

1964  
NGX_CONF_ERROR
;

1967 i‡(
deÁu…_ty≥
) {

1968 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

1969 i‡(
ty≥
 =
NULL
) {

1970  
NGX_CONF_ERROR
;

1973 
ty≥
->
key
 = *
deÁu…_ty≥
;

1974 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

1975 
deÁu…_ty≥
->
Àn
);

1976 
ty≥
->
vÆue
 = (*) 4;

1980 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1982 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

1984 i‡(
vÆue
[
i
].
Àn
 =1 && vÆue[i].
d©a
[0] == '*') {

1985 *
ty≥s
 = (*) -1;

1986  
NGX_CONF_OK
;

1989 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

1990 
vÆue
[
i
].
d©a
[vÆue[i].
Àn
] = '\0';

1992 
ty≥
 = (*
ty≥s
)->
ñts
;

1993 
n
 = 0;Ç < (*
ty≥s
)->
√…s
;Ç++) {

1995 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

1996 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

1997 "du∂iˇã MIMEÅy≥ \"%V\"", &
vÆue
[
i
]);

2002 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2003 i‡(
ty≥
 =
NULL
) {

2004  
NGX_CONF_ERROR
;

2007 
ty≥
->
key
 = 
vÆue
[
i
];

2008 
ty≥
->
key_hash
 = 
hash
;

2009 
ty≥
->
vÆue
 = (*) 4;

2012  
NGX_CONF_OK
;

2013 
	}
}

2017 
	$ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
, 
ngx_hash_t
 *
ty≥s_hash
,

2018 
ngx_¨øy_t
 **
¥ev_keys
, 
ngx_hash_t
 *
¥ev_ty≥s_hash
,

2019 
ngx_°r_t
 *
deÁu…_ty≥s
)

2021 
ngx_hash_öô_t
 
hash
;

2023 i‡(*
keys
) {

2025 i‡(*
keys
 == (*) -1) {

2026  
NGX_CONF_OK
;

2029 
hash
.hash = 
ty≥s_hash
;

2030 
hash
.
key
 = 
NULL
;

2031 
hash
.
max_size
 = 2048;

2032 
hash
.
buckë_size
 = 64;

2033 
hash
.
«me
 = "test_types_hash";

2034 
hash
.
poﬁ
 = 
cf
->pool;

2035 
hash
.
ãmp_poﬁ
 = 
NULL
;

2037 i‡(
	`ngx_hash_öô
(&
hash
, (*
keys
)->
ñts
, (*keys)->
√…s
Ë!
NGX_OK
) {

2038  
NGX_CONF_ERROR
;

2041  
NGX_CONF_OK
;

2044 i‡(
¥ev_ty≥s_hash
->
buckës
 =
NULL
) {

2046 i‡(*
¥ev_keys
 =
NULL
) {

2048 i‡(
	`ngx_hâp_£t_deÁu…_ty≥s
(
cf
, 
¥ev_keys
, 
deÁu…_ty≥s
)

2049 !
NGX_OK
)

2051  
NGX_CONF_ERROR
;

2054 } i‡(*
¥ev_keys
 == (*) -1) {

2055 *
keys
 = *
¥ev_keys
;

2056  
NGX_CONF_OK
;

2059 
hash
.hash = 
¥ev_ty≥s_hash
;

2060 
hash
.
key
 = 
NULL
;

2061 
hash
.
max_size
 = 2048;

2062 
hash
.
buckë_size
 = 64;

2063 
hash
.
«me
 = "test_types_hash";

2064 
hash
.
poﬁ
 = 
cf
->pool;

2065 
hash
.
ãmp_poﬁ
 = 
NULL
;

2067 i‡(
	`ngx_hash_öô
(&
hash
, (*
¥ev_keys
)->
ñts
, (*¥ev_keys)->
√…s
)

2068 !
NGX_OK
)

2070  
NGX_CONF_ERROR
;

2074 *
ty≥s_hash
 = *
¥ev_ty≥s_hash
;

2076  
NGX_CONF_OK
;

2078 
	}
}

2081 
ngx_öt_t


2082 
	$ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

2083 
ngx_°r_t
 *
deÁu…_ty≥
)

2085 
ngx_hash_key_t
 *
ty≥
;

2087 *
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
ãmp_poﬁ
, 1, (
ngx_hash_key_t
));

2088 i‡(*
ty≥s
 =
NULL
) {

2089  
NGX_ERROR
;

2092 
deÁu…_ty≥
->
Àn
) {

2094 
ty≥
 = 
	`ngx_¨øy_push
(*
ty≥s
);

2095 i‡(
ty≥
 =
NULL
) {

2096  
NGX_ERROR
;

2099 
ty≥
->
key
 = *
deÁu…_ty≥
;

2100 
ty≥
->
key_hash
 = 
	`ngx_hash_key
(
deÁu…_ty≥
->
d©a
,

2101 
deÁu…_ty≥
->
Àn
);

2102 
ty≥
->
vÆue
 = (*) 4;

2104 
deÁu…_ty≥
++;

2107  
NGX_OK
;

2108 
	}
}

	@src/http/ngx_http.h

8 #i‚de‡
_NGX_HTTP_H_INCLUDED_


9 
	#_NGX_HTTP_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_hâp_ªque°_s
 
	tngx_hâp_ªque°_t
;

17 
ngx_hâp_up°ªam_s
 
	tngx_hâp_up°ªam_t
;

18 
ngx_hâp_ˇche_s
 
	tngx_hâp_ˇche_t
;

19 
ngx_hâp_fûe_ˇche_s
 
	tngx_hâp_fûe_ˇche_t
;

20 
ngx_hâp_log_˘x_s
 
	tngx_hâp_log_˘x_t
;

21 
ngx_hâp_chunked_s
 
	tngx_hâp_chunked_t
;

23 #i‡(
NGX_HTTP_SPDY
)

24 
ngx_hâp_•dy_°ªam_s
 
	tngx_hâp_•dy_°ªam_t
;

27 
	$ngx_öt_t
 (*
	tngx_hâp_hódî_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

28 
	tngx_èbÀ_ñt_t
 *
	th
, 
	tngx_uöt_t
 
	toff£t
);

29 
u_ch¨
 *(*
	tngx_hâp_log_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

30 
	tngx_hâp_ªque°_t
 *
	t§
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tÀn
);

33 
	~<ngx_hâp_v¨übÀs.h
>

34 
	~<ngx_hâp_c⁄fig.h
>

35 
	~<ngx_hâp_ªque°.h
>

36 
	~<ngx_hâp_s¸ùt.h
>

37 
	~<ngx_hâp_up°ªam.h
>

38 
	~<ngx_hâp_up°ªam_round_robö.h
>

39 
	~<ngx_hâp_busy_lock.h
>

40 
	~<ngx_hâp_c‹e_moduÀ.h
>

42 #i‡(
NGX_HTTP_SPDY
)

43 
	~<ngx_hâp_•dy.h
>

45 #i‡(
NGX_HTTP_CACHE
)

46 
	~<ngx_hâp_ˇche.h
>

48 #i‡(
NGX_HTTP_SSI
)

49 
	~<ngx_hâp_ssi_fûãr_moduÀ.h
>

51 #i‡(
NGX_HTTP_SSL
)

52 
	~<ngx_hâp_s¶_moduÀ.h
>

56 
	sngx_hâp_log_˘x_s
 {

57 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

58 
ngx_hâp_ªque°_t
 *
ªque°
;

59 
ngx_hâp_ªque°_t
 *
cuºít_ªque°
;

63 
	sngx_hâp_chunked_s
 {

64 
ngx_uöt_t
 
°©e
;

65 
off_t
 
size
;

66 
off_t
 
Àngth
;

71 
ngx_uöt_t
 
hâp_vîsi⁄
;

72 
ngx_uöt_t
 
code
;

73 
ngx_uöt_t
 
cou¡
;

74 
u_ch¨
 *
°¨t
;

75 
u_ch¨
 *
íd
;

76 } 
	tngx_hâp_°©us_t
;

79 
	#ngx_hâp_gë_moduÀ_˘x
(
r
, 
moduÀ
Ë‘)->
˘x
[moduÀ.
˘x_ödex
]

	)

80 
	#ngx_hâp_£t_˘x
(
r
, 
c
, 
moduÀ
Ër->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

83 
ngx_öt_t
 
	`ngx_hâp_add_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_queue_t
 **
loˇti⁄s
,

84 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
);

85 
ngx_öt_t
 
	`ngx_hâp_add_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
,

86 
ngx_hâp_li°í_›t_t
 *
ls›t
);

89 
	`ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

90 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

92 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


93 
	`ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
);

96 
ngx_öt_t
 
	`ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
);

97 
ngx_öt_t
 
	`ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
);

98 
ngx_öt_t
 
	`ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_uöt_t
 
mîge_¶ashes
);

100 
ngx_öt_t
 
	`ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

101 
ngx_hâp_°©us_t
 *
°©us
);

102 
ngx_öt_t
 
	`ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

103 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
);

104 
ngx_öt_t
 
	`ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

105 
ngx_uöt_t
 
Ælow_undîsc‹es
);

106 
ngx_öt_t
 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
,

107 
ngx_°r_t
 *
«me
,Çgx_°r_à*
vÆue
);

108 
ngx_öt_t
 
	`ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
,

109 
ngx_°r_t
 *
vÆue
);

110 
	`ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

111 
ngx_°r_t
 *
¨gs
);

112 
ngx_öt_t
 
	`ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

113 
ngx_hâp_chunked_t
 *
˘x
);

116 
ngx_hâp_ªque°_t
 *
	`ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
);

117 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
);

118 
ngx_öt_t
 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

119 
	`ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

120 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
);

121 
	`ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

122 
	`ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
);

123 
ngx_öt_t
 
	`ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_hâp_po°ed_ªque°_t
 *
¥
);

125 
	`ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

126 
	`ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

128 
	`ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
);

129 
	`ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

132 
	#ngx_hâp_ïhemîÆ
(
r
Ë(*Ë(&r->
uri_°¨t
)

	)

135 
	#NGX_HTTP_LAST
 1

	)

136 
	#NGX_HTTP_FLUSH
 2

	)

138 
ngx_öt_t
 
	`ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
);

141 
ngx_öt_t
 
	`ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

142 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

144 
ngx_öt_t
 
	`ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
);

145 
ngx_öt_t
 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

146 
ngx_öt_t
 
îr‹
);

147 
ngx_öt_t
 
	`ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_moduÀ_t
 *
m
, 
ngx_öt_t
 
îr‹
);

149 
	`ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
);

152 
time_t
 
	`ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
);

153 
size_t
 
	`ngx_hâp_gë_time
(*
buf
, 
time_t
 
t
);

157 
ngx_öt_t
 
	`ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

158 
	`ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

159 
	`ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

160 
	`ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
);

163 *
	`ngx_hâp_ty≥s_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

164 *
	`ngx_hâp_mîge_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
keys
,

165 
ngx_hash_t
 *
ty≥s_hash
, 
ngx_¨øy_t
 **
¥ev_keys
,

166 
ngx_hash_t
 *
¥ev_ty≥s_hash
, 
ngx_°r_t
 *
deÁu…_ty≥s
);

167 
ngx_öt_t
 
	`ngx_hâp_£t_deÁu…_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 **
ty≥s
,

168 
ngx_°r_t
 *
deÁu…_ty≥
);

170 #i‡(
NGX_HTTP_DEGRADATION
)

171 
ngx_uöt_t
 
	`ngx_hâp_degøded
(
ngx_hâp_ªque°_t
 *);

175 
ngx_moduÀ_t
 
ngx_hâp_moduÀ
;

177 
ngx_°r_t
 
ngx_hâp_html_deÁu…_ty≥s
[];

180 
ngx_hâp_ouçut_hódî_fûãr_±
 
ngx_hâp_t›_hódî_fûãr
;

181 
ngx_hâp_ouçut_body_fûãr_±
 
ngx_hâp_t›_body_fûãr
;

	@src/http/ngx_http_busy_lock.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

15 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

16 
lock
);

19 
	$ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

21 i‡(
bl
->
busy
 < bl->
max_busy
) {

22 
bl
->
busy
++;

24 i‡(
bc
->
time
) {

25 
bc
->
time
 = 0;

26 
bl
->
waôög
--;

29  
NGX_OK
;

32 i‡(
bc
->
time
) {

33 i‡(
bc
->
time
 < 
bl
->
timeout
) {

34 
	`ngx_add_timî
(
bc
->
evít
, 1000);

35  
NGX_AGAIN
;

38 
bl
->
waôög
--;

39  
NGX_DONE
;

43 i‡(
bl
->
timeout
 == 0) {

44  
NGX_DONE
;

47 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

48 
bl
->
waôög
++;

51 
	`ngx_add_timî
(
bc
->
evít
, 1000);

52 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

57  
NGX_AGAIN
;

60  
NGX_ERROR
;

61 
	}
}

64 
	$ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

65 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
)

67 
rc
;

69 
rc
 = 
	`ngx_hâp_busy_lock_look_ˇchóbÀ
(
bl
, 
bc
, 
lock
);

71 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
bc
->
evít
->
log
, 0,

73 
rc
, 
bl
->
waôög
, bl->
max_waôög
);

75 i‡(
rc
 =
NGX_OK
) {

76  
NGX_OK
;

79 i‡(
rc
 =
NGX_ERROR
 && !
lock
) {

80  
NGX_OK
;

85 i‡(
bc
->
time
) {

86 i‡(
bc
->
time
 < 
bl
->
timeout
) {

87 
	`ngx_add_timî
(
bc
->
evít
, 1000);

88  
NGX_AGAIN
;

91 
bl
->
waôög
--;

92  
NGX_DONE
;

96 i‡(
bl
->
timeout
 == 0) {

97  
NGX_DONE
;

100 i‡(
bl
->
waôög
 < bl->
max_waôög
) {

102 
bl
->
waôög
++;

103 
	`ngx_add_timî
(
bc
->
evít
, 1000);

104 
bc
->
evít
->
evít_h™dÀr
 = bc->event_handler;

109  
NGX_AGAIN
;

112  
NGX_ERROR
;

113 
	}
}

116 
	$ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

117 
ngx_hâp_busy_lock_˘x_t
 *
bc
)

119 i‡(
bl
 =
NULL
) {

123 i‡(
bl
->
md5
) {

124 
bl
->
md5_mask
[
bc
->
¶Ÿ
 / 8] &= ~(1 << (bc->slot & 7));

125 
bl
->
ˇchóbÀ
--;

128 
bl
->
busy
--;

129 
	}
}

132 
	$ngx_hâp_busy_lock_look_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

133 
ngx_hâp_busy_lock_˘x_t
 *
bc
,

134 
lock
)

136 
i
, 
b
, 
ˇchóbÀ
, 
‰ì
;

137 
u_öt
 
mask
;

139 
b
 = 0;

140 
ˇchóbÀ
 = 0;

141 
‰ì
 = -1;

143 #i‡(
NGX_SUPPRESS_WARN
)

144 
mask
 = 0;

147 
i
 = 0; i < 
bl
->
max_busy
; i++) {

149 i‡((
b
 & 7) == 0) {

150 
mask
 = 
bl
->
md5_mask
[
i
 / 8];

153 i‡(
mask
 & 1) {

154 i‡(
	`ngx_memcmp
(&
bl
->
md5
[
i
 * 16], 
bc
->md5, 16) == 0) {

155  
NGX_AGAIN
;

157 
ˇchóbÀ
++;

159 } i‡(
‰ì
 == -1) {

160 
‰ì
 = 
i
;

164 i‡(
ˇchóbÀ
 =
bl
->cacheable) {

165 i‡(
‰ì
 =-1 && 
ˇchóbÀ
 < 
bl
->
max_busy
) {

166 
‰ì
 = 
i
 + 1;

173 
mask
 >>= 1;

174 
b
++;

177 i‡(
‰ì
 == -1) {

178  
NGX_ERROR
;

181 i‡(
lock
) {

182 i‡(
bl
->
busy
 =bl->
max_busy
) {

183  
NGX_ERROR
;

186 
	`ngx_mem˝y
(&
bl
->
md5
[
‰ì
 * 16], 
bc
->md5, 16);

187 
bl
->
md5_mask
[
‰ì
 / 8] |= 1 << (free & 7);

188 
bc
->
¶Ÿ
 = 
‰ì
;

190 
bl
->
ˇchóbÀ
++;

191 
bl
->
busy
++;

194  
NGX_OK
;

195 
	}
}

198 *
	$ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

199 *
c⁄f
)

201 *
p
 = 
c⁄f
;

203 
ngx_uöt_t
 
i
, 
dup
, 
övÆid
;

204 
ngx_°r_t
 *
vÆue
, 
löe
;

205 
ngx_hâp_busy_lock_t
 *
bl
, **
bÕ
;

207 
bÕ
 = (
ngx_hâp_busy_lock_t
 **Ë(
p
 + 
cmd
->
off£t
);

208 i‡(*
bÕ
) {

213 
bl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_busy_lock_t
));

214 i‡(
bl
 =
NULL
) {

215  
NGX_CONF_ERROR
;

217 *
bÕ
 = 
bl
;

220 
bl
->
muãx
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_evít_muãx_t
));

221 i‡(
bl
->
muãx
 =
NULL
) {

222  
NGX_CONF_ERROR
;

225 
dup
 = 0;

226 
övÆid
 = 0;

227 
vÆue
 = 
cf
->
¨gs
->
ñts
;

229 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

231 i‡(
vÆue
[
i
].
d©a
[1] != '=') {

232 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

233 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

234  
NGX_CONF_ERROR
;

237 
vÆue
[
i
].
d©a
[0]) {

240 i‡(
bl
->
max_busy
) {

241 
dup
 = 1;

245 
bl
->
max_busy
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

246 i‡(
bl
->
max_busy
 =
NGX_ERROR
) {

247 
övÆid
 = 1;

254 i‡(
bl
->
max_waôög
) {

255 
dup
 = 1;

259 
bl
->
max_waôög
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 2, vÆue[i].
Àn
 - 2);

260 i‡(
bl
->
max_waôög
 =
NGX_ERROR
) {

261 
övÆid
 = 1;

268 i‡(
bl
->
timeout
) {

269 
dup
 = 1;

273 
löe
.
Àn
 = 
vÆue
[
i
].len - 2;

274 
löe
.
d©a
 = 
vÆue
[
i
].data + 2;

276 
bl
->
timeout
 = 
	`ngx_∑r£_time
(&
löe
, 1);

277 i‡(
bl
->
timeout
 =(
time_t
Ë
NGX_ERROR
) {

278 
övÆid
 = 1;

285 
övÆid
 = 1;

288 i‡(
dup
) {

289 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

290 "du∂iˇã vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

291  
NGX_CONF_ERROR
;

294 i‡(
övÆid
) {

295 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

296 "övÆid vÆuê\"%s\"", 
vÆue
[
i
].
d©a
);

297  
NGX_CONF_ERROR
;

301 i‡(
bl
->
timeout
 =0 && bl->
max_waôög
) {

302 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

306  
NGX_CONF_OK
;

307 
	}
}

	@src/http/ngx_http_busy_lock.h

8 #i‚de‡
_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


9 
	#_NGX_HTTP_BUSY_LOCK_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_hâp.h
>

19 
u_ch¨
 *
	mmd5_mask
;

20 *
	mmd5
;

21 
	mˇchóbÀ
;

23 
	mbusy
;

24 
	mmax_busy
;

26 
	mwaôög
;

27 
	mmax_waôög
;

29 
time_t
 
	mtimeout
;

31 
ngx_evít_muãx_t
 *
	mmuãx
;

32 } 
	tngx_hâp_busy_lock_t
;

36 
time_t
 
	mtime
;

37 
ngx_evít_t
 *
	mevít
;

38 (*
	mevít_h™dÀr
)(
ngx_evít_t
 *
	mev
);

39 
u_ch¨
 *
	mmd5
;

40 
	m¶Ÿ
;

41 } 
	tngx_hâp_busy_lock_˘x_t
;

44 
ngx_hâp_busy_lock
(
ngx_hâp_busy_lock_t
 *
bl
, 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

45 
ngx_hâp_busy_lock_ˇchóbÀ
(
ngx_hâp_busy_lock_t
 *
bl
,

46 
ngx_hâp_busy_lock_˘x_t
 *
bc
, 
lock
);

47 
ngx_hâp_busy_u∆ock
(
ngx_hâp_busy_lock_t
 *
bl
,

48 
ngx_hâp_busy_lock_˘x_t
 *
bc
);

50 *
ngx_hâp_£t_busy_lock_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

	@src/http/ngx_http_cache.h

8 #i‚de‡
_NGX_HTTP_CACHE_H_INCLUDED_


9 
	#_NGX_HTTP_CACHE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_CACHE_MISS
 1

	)

18 
	#NGX_HTTP_CACHE_BYPASS
 2

	)

19 
	#NGX_HTTP_CACHE_EXPIRED
 3

	)

20 
	#NGX_HTTP_CACHE_STALE
 4

	)

21 
	#NGX_HTTP_CACHE_UPDATING
 5

	)

22 
	#NGX_HTTP_CACHE_HIT
 6

	)

23 
	#NGX_HTTP_CACHE_SCARCE
 7

	)

25 
	#NGX_HTTP_CACHE_KEY_LEN
 16

	)

29 
ngx_uöt_t
 
	m°©us
;

30 
time_t
 
	mvÆid
;

31 } 
	tngx_hâp_ˇche_vÆid_t
;

35 
ngx_rbåì_node_t
 
	mnode
;

36 
ngx_queue_t
 
	mqueue
;

38 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN


39 - (
ngx_rbåì_key_t
)];

41 
	mcou¡
:20;

42 
	mu£s
:10;

43 
	mvÆid_m£c
:10;

44 
	mîr‹
:10;

45 
	mexi°s
:1;

46 
	mupd©ög
:1;

47 
	mdñëög
:1;

50 
ngx_fûe_uniq_t
 
	muniq
;

51 
time_t
 
	mexpúe
;

52 
time_t
 
	mvÆid_£c
;

53 
size_t
 
	mbody_°¨t
;

54 
off_t
 
	mfs_size
;

55 } 
	tngx_hâp_fûe_ˇche_node_t
;

58 
	sngx_hâp_ˇche_s
 {

59 
ngx_fûe_t
 
	mfûe
;

60 
ngx_¨øy_t
 
	mkeys
;

61 
uöt32_t
 
	m¸c32
;

62 
u_ch¨
 
	mkey
[
NGX_HTTP_CACHE_KEY_LEN
];

64 
ngx_fûe_uniq_t
 
	muniq
;

65 
time_t
 
	mvÆid_£c
;

66 
time_t
 
	mœ°_modifõd
;

67 
time_t
 
	md©e
;

69 
size_t
 
	mhódî_°¨t
;

70 
size_t
 
	mbody_°¨t
;

71 
off_t
 
	mÀngth
;

72 
off_t
 
	mfs_size
;

74 
ngx_uöt_t
 
	mmö_u£s
;

75 
ngx_uöt_t
 
	mîr‹
;

76 
ngx_uöt_t
 
	mvÆid_m£c
;

78 
ngx_buf_t
 *
	mbuf
;

80 
ngx_hâp_fûe_ˇche_t
 *
	mfûe_ˇche
;

81 
ngx_hâp_fûe_ˇche_node_t
 *
	mnode
;

83 
ngx_m£c_t
 
	mlock_timeout
;

84 
ngx_m£c_t
 
	mwaô_time
;

86 
ngx_evít_t
 
	mwaô_evít
;

88 
	mlock
:1;

89 
	mwaôög
:1;

91 
	mupd©ed
:1;

92 
	mupd©ög
:1;

93 
	mexi°s
:1;

94 
	mãmp_fûe
:1;

99 
time_t
 
	mvÆid_£c
;

100 
time_t
 
	mœ°_modifõd
;

101 
time_t
 
	md©e
;

102 
uöt32_t
 
	m¸c32
;

103 
u_sh‹t
 
	mvÆid_m£c
;

104 
u_sh‹t
 
	mhódî_°¨t
;

105 
u_sh‹t
 
	mbody_°¨t
;

106 } 
	tngx_hâp_fûe_ˇche_hódî_t
;

110 
ngx_rbåì_t
 
	mrbåì
;

111 
ngx_rbåì_node_t
 
	m£¡öñ
;

112 
ngx_queue_t
 
	mqueue
;

113 
ngx_©omic_t
 
	mcﬁd
;

114 
ngx_©omic_t
 
	mlﬂdög
;

115 
off_t
 
	msize
;

116 } 
	tngx_hâp_fûe_ˇche_sh_t
;

119 
	sngx_hâp_fûe_ˇche_s
 {

120 
ngx_hâp_fûe_ˇche_sh_t
 *
	msh
;

121 
ngx_¶ab_poﬁ_t
 *
	mshpoﬁ
;

123 
ngx_∑th_t
 *
	m∑th
;

125 
off_t
 
	mmax_size
;

126 
size_t
 
	mbsize
;

128 
time_t
 
	möa˘ive
;

130 
ngx_uöt_t
 
	mfûes
;

131 
ngx_uöt_t
 
	mlﬂdî_fûes
;

132 
ngx_m£c_t
 
	mœ°
;

133 
ngx_m£c_t
 
	mlﬂdî_¶ìp
;

134 
ngx_m£c_t
 
	mlﬂdî_thªshﬁd
;

136 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

140 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
);

141 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

142 
ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
);

143 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
);

145 
ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
);

146 
ngx_öt_t
 
ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *);

147 
ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
);

148 
time_t
 
ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
);

150 *
ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

151 *
c⁄f
);

152 *
ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

153 *
c⁄f
);

156 
ngx_°r_t
 
ngx_hâp_ˇche_°©us
[];

	@src/http/ngx_http_config.h

8 #i‚de‡
_NGX_HTTP_CONFIG_H_INCLUDED_


9 
	#_NGX_HTTP_CONFIG_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 **
	mmaö_c⁄f
;

19 **
	m§v_c⁄f
;

20 **
	mloc_c⁄f
;

21 } 
	tngx_hâp_c⁄f_˘x_t
;

25 
ngx_öt_t
 (*
¥ec⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

26 
ngx_öt_t
 (*
po°c⁄figuøti⁄
)(
ngx_c⁄f_t
 *
	mcf
);

28 *(*
	m¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

29 *(*
	möô_maö_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	mc⁄f
);

31 *(*
	m¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

32 *(*
	mmîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

34 *(*
	m¸óã_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
);

35 *(*
	mmîge_loc_c⁄f
)(
ngx_c⁄f_t
 *
	mcf
, *
	m¥ev
, *
	mc⁄f
);

36 } 
	tngx_hâp_moduÀ_t
;

39 
	#NGX_HTTP_MODULE
 0x50545448

	)

41 
	#NGX_HTTP_MAIN_CONF
 0x02000000

	)

42 
	#NGX_HTTP_SRV_CONF
 0x04000000

	)

43 
	#NGX_HTTP_LOC_CONF
 0x08000000

	)

44 
	#NGX_HTTP_UPS_CONF
 0x10000000

	)

45 
	#NGX_HTTP_SIF_CONF
 0x20000000

	)

46 
	#NGX_HTTP_LIF_CONF
 0x40000000

	)

47 
	#NGX_HTTP_LMT_CONF
 0x80000000

	)

50 
	#NGX_HTTP_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

51 
	#NGX_HTTP_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

52 
	#NGX_HTTP_LOC_CONF_OFFSET
 
	`off£tof
(
ngx_hâp_c⁄f_˘x_t
, 
loc_c⁄f
)

	)

55 
	#ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
moduÀ
) \

56 (
r
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

57 
	#ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
moduÀ
Ë‘)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

58 
	#ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
moduÀ
Ë‘)->
loc_c⁄f
[moduÀ.
˘x_ödex
]

	)

61 
	#ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

62 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

63 
	#ngx_hâp_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

64 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

65 
	#ngx_hâp_c⁄f_gë_moduÀ_loc_c⁄f
(
cf
, 
moduÀ
) \

66 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
loc_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

68 
	#ngx_hâp_cy˛e_gë_moduÀ_maö_c⁄f
(
cy˛e
, 
moduÀ
) \

69 (
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
] ? \

70 ((
ngx_hâp_c⁄f_˘x_t
 *Ë
cy˛e
->
c⁄f_˘x
[
ngx_hâp_moduÀ
.
ödex
]) \

71 ->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]: \

72 
NULL
)

	)

	@src/http/ngx_http_copy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
ngx_bufs_t
 
	mbufs
;

15 } 
	tngx_hâp_c›y_fûãr_c⁄f_t
;

18 #i‡(
NGX_HAVE_FILE_AIO
)

19 
ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
,

20 
ngx_fûe_t
 *
fûe
);

21 
ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

22 #i‡(
NGX_HAVE_AIO_SENDFILE
)

23 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

27 *
ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

28 *
ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
,

29 *
∑ª¡
, *
chûd
);

30 
ngx_öt_t
 
ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

33 
ngx_comm™d_t
 
	gngx_hâp_c›y_fûãr_comm™ds
[] = {

35 { 
ngx_°rög
("output_buffers"),

36 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE2
,

37 
ngx_c⁄f_£t_bufs_¶Ÿ
,

38 
NGX_HTTP_LOC_CONF_OFFSET
,

39 
off£tof
(
ngx_hâp_c›y_fûãr_c⁄f_t
, 
bufs
),

40 
NULL
 },

42 
ngx_nuŒ_comm™d


46 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ_˘x
 = {

47 
NULL
,

48 
ngx_hâp_c›y_fûãr_öô
,

50 
NULL
,

51 
NULL
,

53 
NULL
,

54 
NULL
,

56 
ngx_hâp_c›y_fûãr_¸óã_c⁄f
,

57 
ngx_hâp_c›y_fûãr_mîge_c⁄f


61 
ngx_moduÀ_t
 
	gngx_hâp_c›y_fûãr_moduÀ
 = {

62 
NGX_MODULE_V1
,

63 &
ngx_hâp_c›y_fûãr_moduÀ_˘x
,

64 
ngx_hâp_c›y_fûãr_comm™ds
,

65 
NGX_HTTP_MODULE
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NULL
,

70 
NULL
,

71 
NULL
,

72 
NULL
,

73 
NGX_MODULE_V1_PADDING


77 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

80 
ngx_öt_t


81 
	$ngx_hâp_c›y_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

83 
ngx_öt_t
 
rc
;

84 
ngx_c⁄√˘i⁄_t
 *
c
;

85 
ngx_ouçut_chaö_˘x_t
 *
˘x
;

86 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

87 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

89 
c
 = 
r
->
c⁄√˘i⁄
;

91 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

92 "hâ∞c›y fûãr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

94 
˘x
 = 
	`ngx_hâp_gë_moduÀ_˘x
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

96 i‡(
˘x
 =
NULL
) {

97 
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ouçut_chaö_˘x_t
));

98 i‡(
˘x
 =
NULL
) {

99  
NGX_ERROR
;

102 
	`ngx_hâp_£t_˘x
(
r
, 
˘x
, 
ngx_hâp_c›y_fûãr_moduÀ
);

104 
c⁄f
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c›y_fûãr_moduÀ
);

105 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

107 
˘x
->
£ndfûe
 = 
c
->sendfile;

108 
˘x
->
√ed_ö_mem‹y
 = 
r
->
maö_fûãr_√ed_ö_mem‹y


109 || 
r
->
fûãr_√ed_ö_mem‹y
;

110 
˘x
->
√ed_ö_ãmp
 = 
r
->
fûãr_√ed_ãmp‹¨y
;

112 
˘x
->
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

114 
˘x
->
poﬁ
 = 
r
->pool;

115 
˘x
->
bufs
 = 
c⁄f
->bufs;

116 
˘x
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_c›y_fûãr_moduÀ
;

118 
˘x
->
ouçut_fûãr
 = (
ngx_ouçut_chaö_fûãr_±
)

119 
ngx_hâp_√xt_body_fûãr
;

120 
˘x
->
fûãr_˘x
 = 
r
;

122 #i‡(
NGX_HAVE_FILE_AIO
)

123 i‡(
ngx_fûe_aio
) {

124 i‡(
˛cf
->
aio
) {

125 
˘x
->
aio_h™dÀr
 = 
ngx_hâp_c›y_aio_h™dÀr
;

127 #i‡(
NGX_HAVE_AIO_SENDFILE
)

128 
c
->
aio_£ndfûe
 = (
˛cf
->
aio
 =
NGX_HTTP_AIO_SENDFILE
);

133 i‡(
ö
 && in->
buf
 && 
	`ngx_buf_size
(in->buf)) {

134 
r
->
ªque°_ouçut
 = 1;

138 #i‡(
NGX_HAVE_FILE_AIO
)

139 
˘x
->
aio
 = 
r
->aio;

143 
rc
 = 
	`ngx_ouçut_chaö
(
˘x
, 
ö
);

145 i‡(
˘x
->
ö
 =
NULL
) {

146 
r
->
buf„ªd
 &~
NGX_HTTP_COPY_BUFFERED
;

149 
r
->
buf„ªd
 |
NGX_HTTP_COPY_BUFFERED
;

152 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

153 "hâ∞c›y fûãr: %ò\"%V?%V\"", 
rc
, &
r
->
uri
, &r->
¨gs
);

155 #i‡(
NGX_HAVE_FILE_AIO
 && 
NGX_HAVE_AIO_SENDFILE
)

157 i‡(
c
->
busy_£ndfûe
) {

158 
ssize_t
 
n
;

159 
off_t
 
off£t
;

160 
ngx_fûe_t
 *
fûe
;

161 
ngx_hâp_ïhemîÆ_t
 *
e
;

163 i‡(
r
->
aio
) {

164 
c
->
busy_£ndfûe
 = 
NULL
;

165  
rc
;

168 
fûe
 = 
c
->
busy_£ndfûe
->file;

169 
off£t
 = 
c
->
busy_£ndfûe
->
fûe_pos
;

171 i‡(
fûe
->
aio
) {

172 
c
->
aio_£ndfûe
 = (
off£t
 !
fûe
->
aio
->
œ°_off£t
);

173 
fûe
->
aio
->
œ°_off£t
 = 
off£t
;

175 i‡(
c
->
aio_£ndfûe
 == 0) {

176 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

178 &
fûe
->
«me
);

182 
c
->
busy_£ndfûe
 = 
NULL
;

183 
e
 = (
ngx_hâp_ïhemîÆ_t
 *Ë&
r
->
uri_°¨t
;

185 
n
 = 
	`ngx_fûe_aio_ªad
(
fûe
, &
e
->
aio_¥ñﬂd
, 1, 
off£t
, 
r
->
poﬁ
);

187 i‡(
n
 > 0) {

188 
ö
 = 
NULL
;

192 
rc
 = 
n
;

194 i‡(
rc
 =
NGX_AGAIN
) {

195 
fûe
->
aio
->
d©a
 = 
r
;

196 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
;

198 
r
->
maö
->
blocked
++;

199 
r
->
aio
 = 1;

204  
rc
;

206 
	}
}

209 #i‡(
NGX_HAVE_FILE_AIO
)

212 
	$ngx_hâp_c›y_aio_h™dÀr
(
ngx_ouçut_chaö_˘x_t
 *
˘x
, 
ngx_fûe_t
 *
fûe
)

214 
ngx_hâp_ªque°_t
 *
r
;

216 
r
 = 
˘x
->
fûãr_˘x
;

218 
fûe
->
aio
->
d©a
 = 
r
;

219 
fûe
->
aio
->
h™dÀr
 = 
ngx_hâp_c›y_aio_evít_h™dÀr
;

221 
r
->
maö
->
blocked
++;

222 
r
->
aio
 = 1;

223 
˘x
->
aio
 = 1;

224 
	}
}

228 
	$ngx_hâp_c›y_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

230 
ngx_evít_aio_t
 *
aio
;

231 
ngx_hâp_ªque°_t
 *
r
;

233 
aio
 = 
ev
->
d©a
;

234 
r
 = 
aio
->
d©a
;

236 
r
->
maö
->
blocked
--;

237 
r
->
aio
 = 0;

239 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

240 
	}
}

243 #i‡(
NGX_HAVE_AIO_SENDFILE
)

246 
	$ngx_hâp_c›y_aio_£ndfûe_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

248 
ngx_evít_aio_t
 *
aio
;

249 
ngx_hâp_ªque°_t
 *
r
;

251 
aio
 = 
ev
->
d©a
;

252 
r
 = 
aio
->
d©a
;

254 
r
->
maö
->
blocked
--;

255 
r
->
aio
 = 0;

256 
ev
->
com∂ëe
 = 0;

258 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

259 
	}
}

266 
	$ngx_hâp_c›y_fûãr_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

268 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
;

270 
c⁄f
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_c›y_fûãr_c⁄f_t
));

271 i‡(
c⁄f
 =
NULL
) {

272  
NULL
;

275 
c⁄f
->
bufs
.
num
 = 0;

277  
c⁄f
;

278 
	}
}

282 
	$ngx_hâp_c›y_fûãr_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

284 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

285 
ngx_hâp_c›y_fûãr_c⁄f_t
 *
c⁄f
 = 
chûd
;

287 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
bufs
, 
¥ev
->bufs, 1, 32768);

289  
NULL
;

290 
	}
}

293 
ngx_öt_t


294 
	$ngx_hâp_c›y_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

296 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

297 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_c›y_fûãr
;

299  
NGX_OK
;

300 
	}
}

	@src/http/ngx_http_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

14 
u_ch¨
 *
	m«me
;

15 
uöt32_t
 
	mmëhod
;

16 } 
	tngx_hâp_mëhod_«me_t
;

19 
	#NGX_HTTP_REQUEST_BODY_FILE_OFF
 0

	)

20 
	#NGX_HTTP_REQUEST_BODY_FILE_ON
 1

	)

21 
	#NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 2

	)

24 
ngx_öt_t
 
ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_öt_t
 
ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
);

28 
ngx_öt_t
 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
);

29 *
ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

30 *
ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

31 *
ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

32 *
ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
,

33 *
∑ª¡
, *
chûd
);

34 *
ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
);

35 *
ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
,

36 *
∑ª¡
, *
chûd
);

38 *
ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

39 *
dummy
);

40 *
ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

41 *
dummy
);

42 
ngx_öt_t
 
ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
,

43 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
);

45 *
ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

46 *
c⁄f
);

47 *
ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
,

48 *
c⁄f
);

50 *
ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

51 *
c⁄f
);

52 *
ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

53 *
c⁄f
);

54 *
ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

55 *
ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

56 *
c⁄f
);

57 *
ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

58 *
c⁄f
);

59 *
ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

60 *
c⁄f
);

61 *
ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

62 *
c⁄f
);

63 *
ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

64 *
c⁄f
);

65 *
ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

66 *
c⁄f
);

67 *
ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

68 *
c⁄f
);

69 *
ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

70 *
c⁄f
);

71 *
ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

72 *
c⁄f
);

73 #i‡(
NGX_HTTP_GZIP
)

74 
ngx_öt_t
 
ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
);

75 
ngx_uöt_t
 
ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
);

76 *
ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

77 *
c⁄f
);

79 
ngx_öt_t
 
ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_addr_t
 *
addr
, 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
,

81 
ªcursive
);

82 #i‡(
NGX_HAVE_OPENAT
)

83 *
ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

84 *
c⁄f
);

87 *
ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

88 *
ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

90 
ngx_c⁄f_po°_t
 
	gngx_hâp_c‹e_low©_po°
 =

91 { 
ngx_hâp_c‹e_low©_check
 };

93 
ngx_c⁄f_po°_h™dÀr_±
 
	gngx_hâp_c‹e_poﬁ_size_p
 =

94 
ngx_hâp_c‹e_poﬁ_size
;

96 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 = {

97 
ngx_c⁄f_dïªˇãd
, "optimize_server_names", "server_name_in_redirect"

100 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 = {

101 
ngx_c⁄f_dïªˇãd
, "open_file_cache_retest", "open_file_cache_valid"

104 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_ßtisfy_™y
 = {

105 
ngx_c⁄f_dïªˇãd
, "satisfy_any", "satisfy"

109 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ªque°_body_ö_fûe
[] = {

110 { 
ngx_°rög
("off"), 
NGX_HTTP_REQUEST_BODY_FILE_OFF
 },

111 { 
ngx_°rög
("⁄"), 
NGX_HTTP_REQUEST_BODY_FILE_ON
 },

112 { 
ngx_°rög
("˛ón"), 
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
 },

113 { 
ngx_nuŒ_°rög
, 0 }

117 #i‡(
NGX_HAVE_FILE_AIO
)

119 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_aio
[] = {

120 { 
ngx_°rög
("off"), 
NGX_HTTP_AIO_OFF
 },

121 { 
ngx_°rög
("⁄"), 
NGX_HTTP_AIO_ON
 },

122 #i‡(
NGX_HAVE_AIO_SENDFILE
)

123 { 
ngx_°rög
("£ndfûe"), 
NGX_HTTP_AIO_SENDFILE
 },

125 { 
ngx_nuŒ_°rög
, 0 }

131 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_ßtisfy
[] = {

132 { 
ngx_°rög
("Æl"), 
NGX_HTTP_SATISFY_ALL
 },

133 { 
ngx_°rög
("™y"), 
NGX_HTTP_SATISFY_ANY
 },

134 { 
ngx_nuŒ_°rög
, 0 }

138 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_lögîög_˛o£
[] = {

139 { 
ngx_°rög
("off"), 
NGX_HTTP_LINGERING_OFF
 },

140 { 
ngx_°rög
("⁄"), 
NGX_HTTP_LINGERING_ON
 },

141 { 
ngx_°rög
("Æways"), 
NGX_HTTP_LINGERING_ALWAYS
 },

142 { 
ngx_nuŒ_°rög
, 0 }

146 
ngx_c⁄f_íum_t
 
	gngx_hâp_c‹e_if_modifõd_sö˚
[] = {

147 { 
ngx_°rög
("off"), 
NGX_HTTP_IMS_OFF
 },

148 { 
ngx_°rög
("exa˘"), 
NGX_HTTP_IMS_EXACT
 },

149 { 
ngx_°rög
("bef‹e"), 
NGX_HTTP_IMS_BEFORE
 },

150 { 
ngx_nuŒ_°rög
, 0 }

154 
ngx_c⁄f_bômask_t
 
	gngx_hâp_c‹e_kì∑live_dißbÀ
[] = {

155 { 
ngx_°rög
("n⁄e"), 
NGX_HTTP_KEEPALIVE_DISABLE_NONE
 },

156 { 
ngx_°rög
("msõ6"), 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 },

157 { 
ngx_°rög
("ßÁri"), 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 },

158 { 
ngx_nuŒ_°rög
, 0 }

162 
ngx_∑th_öô_t
 
	gngx_hâp_˛õ¡_ãmp_∑th
 = {

163 
ngx_°rög
(
NGX_HTTP_CLIENT_TEMP_PATH
), { 0, 0, 0 }

167 #i‡(
NGX_HTTP_GZIP
)

169 
ngx_c⁄f_íum_t
 
	gngx_hâp_gzù_hâp_vîsi⁄
[] = {

170 { 
ngx_°rög
("1.0"), 
NGX_HTTP_VERSION_10
 },

171 { 
ngx_°rög
("1.1"), 
NGX_HTTP_VERSION_11
 },

172 { 
ngx_nuŒ_°rög
, 0 }

176 
ngx_c⁄f_bômask_t
 
	gngx_hâp_gzù_¥oxõd_mask
[] = {

177 { 
ngx_°rög
("off"), 
NGX_HTTP_GZIP_PROXIED_OFF
 },

178 { 
ngx_°rög
("expúed"), 
NGX_HTTP_GZIP_PROXIED_EXPIRED
 },

179 { 
ngx_°rög
("no-ˇche"), 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
 },

180 { 
ngx_°rög
("no-°‹e"), 
NGX_HTTP_GZIP_PROXIED_NO_STORE
 },

181 { 
ngx_°rög
("¥iv©e"), 
NGX_HTTP_GZIP_PROXIED_PRIVATE
 },

182 { 
ngx_°rög
("no_œ°_modifõd"), 
NGX_HTTP_GZIP_PROXIED_NO_LM
 },

183 { 
ngx_°rög
("no_ëag"), 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
 },

184 { 
ngx_°rög
("auth"), 
NGX_HTTP_GZIP_PROXIED_AUTH
 },

185 { 
ngx_°rög
("™y"), 
NGX_HTTP_GZIP_PROXIED_ANY
 },

186 { 
ngx_nuŒ_°rög
, 0 }

190 
ngx_°r_t
 
	gngx_hâp_gzù_no_ˇche
 = 
ngx_°rög
("no-cache");

191 
ngx_°r_t
 
	gngx_hâp_gzù_no_°‹e
 = 
ngx_°rög
("no-store");

192 
ngx_°r_t
 
	gngx_hâp_gzù_¥iv©e
 = 
ngx_°rög
("private");

197 
ngx_comm™d_t
 
	gngx_hâp_c‹e_comm™ds
[] = {

199 { 
ngx_°rög
("variables_hash_max_size"),

200 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

201 
ngx_c⁄f_£t_num_¶Ÿ
,

202 
NGX_HTTP_MAIN_CONF_OFFSET
,

203 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_max_size
),

204 
NULL
 },

206 { 
ngx_°rög
("variables_hash_bucket_size"),

207 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

208 
ngx_c⁄f_£t_num_¶Ÿ
,

209 
NGX_HTTP_MAIN_CONF_OFFSET
,

210 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
v¨übÀs_hash_buckë_size
),

211 
NULL
 },

213 { 
ngx_°rög
("server_names_hash_max_size"),

214 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

215 
ngx_c⁄f_£t_num_¶Ÿ
,

216 
NGX_HTTP_MAIN_CONF_OFFSET
,

217 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_max_size
),

218 
NULL
 },

220 { 
ngx_°rög
("server_names_hash_bucket_size"),

221 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

222 
ngx_c⁄f_£t_num_¶Ÿ
,

223 
NGX_HTTP_MAIN_CONF_OFFSET
,

224 
off£tof
(
ngx_hâp_c‹e_maö_c⁄f_t
, 
£rvî_«mes_hash_buckë_size
),

225 
NULL
 },

227 { 
ngx_°rög
("server"),

228 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

229 
ngx_hâp_c‹e_£rvî
,

232 
NULL
 },

234 { 
ngx_°rög
("connection_pool_size"),

235 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

236 
ngx_c⁄f_£t_size_¶Ÿ
,

237 
NGX_HTTP_SRV_CONF_OFFSET
,

238 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
c⁄√˘i⁄_poﬁ_size
),

239 &
ngx_hâp_c‹e_poﬁ_size_p
 },

241 { 
ngx_°rög
("request_pool_size"),

242 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

243 
ngx_c⁄f_£t_size_¶Ÿ
,

244 
NGX_HTTP_SRV_CONF_OFFSET
,

245 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ªque°_poﬁ_size
),

246 &
ngx_hâp_c‹e_poﬁ_size_p
 },

248 { 
ngx_°rög
("client_header_timeout"),

249 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

250 
ngx_c⁄f_£t_m£c_¶Ÿ
,

251 
NGX_HTTP_SRV_CONF_OFFSET
,

252 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_timeout
),

253 
NULL
 },

255 { 
ngx_°rög
("client_header_buffer_size"),

256 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

257 
ngx_c⁄f_£t_size_¶Ÿ
,

258 
NGX_HTTP_SRV_CONF_OFFSET
,

259 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
˛õ¡_hódî_buf„r_size
),

260 
NULL
 },

262 { 
ngx_°rög
("large_client_header_buffers"),

263 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE2
,

264 
ngx_c⁄f_£t_bufs_¶Ÿ
,

265 
NGX_HTTP_SRV_CONF_OFFSET
,

266 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
œrge_˛õ¡_hódî_buf„rs
),

267 
NULL
 },

269 { 
ngx_°rög
("optimize_server_names"),

270 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

271 
ngx_c⁄f_£t_Êag_¶Ÿ
,

272 
NGX_HTTP_LOC_CONF_OFFSET
,

273 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

274 &
ngx_c⁄f_dïªˇãd_›timize_£rvî_«mes
 },

276 { 
ngx_°rög
("ignore_invalid_headers"),

277 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

278 
ngx_c⁄f_£t_Êag_¶Ÿ
,

279 
NGX_HTTP_SRV_CONF_OFFSET
,

280 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
ign‹e_övÆid_hódîs
),

281 
NULL
 },

283 { 
ngx_°rög
("merge_slashes"),

284 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

285 
ngx_c⁄f_£t_Êag_¶Ÿ
,

286 
NGX_HTTP_SRV_CONF_OFFSET
,

287 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
mîge_¶ashes
),

288 
NULL
 },

290 { 
ngx_°rög
("underscores_in_headers"),

291 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_FLAG
,

292 
ngx_c⁄f_£t_Êag_¶Ÿ
,

293 
NGX_HTTP_SRV_CONF_OFFSET
,

294 
off£tof
(
ngx_hâp_c‹e_§v_c⁄f_t
, 
undîsc‹es_ö_hódîs
),

295 
NULL
 },

297 { 
ngx_°rög
("location"),

298 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE12
,

299 
ngx_hâp_c‹e_loˇti⁄
,

300 
NGX_HTTP_SRV_CONF_OFFSET
,

302 
NULL
 },

304 { 
ngx_°rög
("listen"),

305 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

306 
ngx_hâp_c‹e_li°í
,

307 
NGX_HTTP_SRV_CONF_OFFSET
,

309 
NULL
 },

311 { 
ngx_°rög
("server_name"),

312 
NGX_HTTP_SRV_CONF
|
NGX_CONF_1MORE
,

313 
ngx_hâp_c‹e_£rvî_«me
,

314 
NGX_HTTP_SRV_CONF_OFFSET
,

316 
NULL
 },

318 { 
ngx_°rög
("types_hash_max_size"),

319 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

320 
ngx_c⁄f_£t_num_¶Ÿ
,

321 
NGX_HTTP_LOC_CONF_OFFSET
,

322 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_max_size
),

323 
NULL
 },

325 { 
ngx_°rög
("types_hash_bucket_size"),

326 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

327 
ngx_c⁄f_£t_num_¶Ÿ
,

328 
NGX_HTTP_LOC_CONF_OFFSET
,

329 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ty≥s_hash_buckë_size
),

330 
NULL
 },

332 { 
ngx_°rög
("types"),

333 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF


334 |
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

335 
ngx_hâp_c‹e_ty≥s
,

336 
NGX_HTTP_LOC_CONF_OFFSET
,

338 
NULL
 },

340 { 
ngx_°rög
("default_type"),

341 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

342 
ngx_c⁄f_£t_°r_¶Ÿ
,

343 
NGX_HTTP_LOC_CONF_OFFSET
,

344 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
deÁu…_ty≥
),

345 
NULL
 },

347 { 
ngx_°rög
("root"),

348 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


349 |
NGX_CONF_TAKE1
,

350 
ngx_hâp_c‹e_roŸ
,

351 
NGX_HTTP_LOC_CONF_OFFSET
,

353 
NULL
 },

355 { 
ngx_°rög
("alias"),

356 
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

357 
ngx_hâp_c‹e_roŸ
,

358 
NGX_HTTP_LOC_CONF_OFFSET
,

360 
NULL
 },

362 { 
ngx_°rög
("limit_except"),

363 
NGX_HTTP_LOC_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_1MORE
,

364 
ngx_hâp_c‹e_limô_ex˚±
,

365 
NGX_HTTP_LOC_CONF_OFFSET
,

367 
NULL
 },

369 { 
ngx_°rög
("client_max_body_size"),

370 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

371 
ngx_c⁄f_£t_off_¶Ÿ
,

372 
NGX_HTTP_LOC_CONF_OFFSET
,

373 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_max_body_size
),

374 
NULL
 },

376 { 
ngx_°rög
("client_body_buffer_size"),

377 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

378 
ngx_c⁄f_£t_size_¶Ÿ
,

379 
NGX_HTTP_LOC_CONF_OFFSET
,

380 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_buf„r_size
),

381 
NULL
 },

383 { 
ngx_°rög
("client_body_timeout"),

384 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

385 
ngx_c⁄f_£t_m£c_¶Ÿ
,

386 
NGX_HTTP_LOC_CONF_OFFSET
,

387 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_timeout
),

388 
NULL
 },

390 { 
ngx_°rög
("client_body_temp_path"),

391 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1234
,

392 
ngx_c⁄f_£t_∑th_¶Ÿ
,

393 
NGX_HTTP_LOC_CONF_OFFSET
,

394 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ãmp_∑th
),

395 
NULL
 },

397 { 
ngx_°rög
("client_body_in_file_only"),

398 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

399 
ngx_c⁄f_£t_íum_¶Ÿ
,

400 
NGX_HTTP_LOC_CONF_OFFSET
,

401 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_fûe_⁄ly
),

402 &
ngx_hâp_c‹e_ªque°_body_ö_fûe
 },

404 { 
ngx_°rög
("client_body_in_single_buffer"),

405 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

406 
ngx_c⁄f_£t_Êag_¶Ÿ
,

407 
NGX_HTTP_LOC_CONF_OFFSET
,

408 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
˛õ¡_body_ö_sögÀ_buf„r
),

409 
NULL
 },

411 { 
ngx_°rög
("sendfile"),

412 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


413 |
NGX_CONF_FLAG
,

414 
ngx_c⁄f_£t_Êag_¶Ÿ
,

415 
NGX_HTTP_LOC_CONF_OFFSET
,

416 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe
),

417 
NULL
 },

419 { 
ngx_°rög
("sendfile_max_chunk"),

420 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

421 
ngx_c⁄f_£t_size_¶Ÿ
,

422 
NGX_HTTP_LOC_CONF_OFFSET
,

423 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£ndfûe_max_chunk
),

424 
NULL
 },

426 #i‡(
NGX_HAVE_FILE_AIO
)

428 { 
ngx_°rög
("aio"),

429 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

430 
ngx_c⁄f_£t_íum_¶Ÿ
,

431 
NGX_HTTP_LOC_CONF_OFFSET
,

432 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
aio
),

433 &
ngx_hâp_c‹e_aio
 },

437 { 
ngx_°rög
("read_ahead"),

438 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

439 
ngx_c⁄f_£t_size_¶Ÿ
,

440 
NGX_HTTP_LOC_CONF_OFFSET
,

441 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªad_ahód
),

442 
NULL
 },

444 { 
ngx_°rög
("directio"),

445 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

446 
ngx_hâp_c‹e_dúe˘io
,

447 
NGX_HTTP_LOC_CONF_OFFSET
,

449 
NULL
 },

451 { 
ngx_°rög
("directio_alignment"),

452 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

453 
ngx_c⁄f_£t_off_¶Ÿ
,

454 
NGX_HTTP_LOC_CONF_OFFSET
,

455 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
dúe˘io_Æignmít
),

456 
NULL
 },

458 { 
ngx_°rög
("tcp_nopush"),

459 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

460 
ngx_c⁄f_£t_Êag_¶Ÿ
,

461 
NGX_HTTP_LOC_CONF_OFFSET
,

462 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_n›ush
),

463 
NULL
 },

465 { 
ngx_°rög
("tcp_nodelay"),

466 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

467 
ngx_c⁄f_£t_Êag_¶Ÿ
,

468 
NGX_HTTP_LOC_CONF_OFFSET
,

469 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
t˝_nodñay
),

470 
NULL
 },

472 { 
ngx_°rög
("send_timeout"),

473 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

474 
ngx_c⁄f_£t_m£c_¶Ÿ
,

475 
NGX_HTTP_LOC_CONF_OFFSET
,

476 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_timeout
),

477 
NULL
 },

479 { 
ngx_°rög
("send_lowat"),

480 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

481 
ngx_c⁄f_£t_size_¶Ÿ
,

482 
NGX_HTTP_LOC_CONF_OFFSET
,

483 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£nd_low©
),

484 &
ngx_hâp_c‹e_low©_po°
 },

486 { 
ngx_°rög
("postpone_output"),

487 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

488 
ngx_c⁄f_£t_size_¶Ÿ
,

489 
NGX_HTTP_LOC_CONF_OFFSET
,

490 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°p⁄e_ouçut
),

491 
NULL
 },

493 { 
ngx_°rög
("limit_rate"),

494 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


495 |
NGX_CONF_TAKE1
,

496 
ngx_c⁄f_£t_size_¶Ÿ
,

497 
NGX_HTTP_LOC_CONF_OFFSET
,

498 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã
),

499 
NULL
 },

501 { 
ngx_°rög
("limit_rate_after"),

502 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


503 |
NGX_CONF_TAKE1
,

504 
ngx_c⁄f_£t_size_¶Ÿ
,

505 
NGX_HTTP_LOC_CONF_OFFSET
,

506 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
limô_øã_a·î
),

507 
NULL
 },

509 { 
ngx_°rög
("keepalive_timeout"),

510 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

511 
ngx_hâp_c‹e_kì∑live
,

512 
NGX_HTTP_LOC_CONF_OFFSET
,

514 
NULL
 },

516 { 
ngx_°rög
("keepalive_requests"),

517 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

518 
ngx_c⁄f_£t_num_¶Ÿ
,

519 
NGX_HTTP_LOC_CONF_OFFSET
,

520 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_ªque°s
),

521 
NULL
 },

523 { 
ngx_°rög
("keepalive_disable"),

524 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

525 
ngx_c⁄f_£t_bômask_¶Ÿ
,

526 
NGX_HTTP_LOC_CONF_OFFSET
,

527 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
kì∑live_dißbÀ
),

528 &
ngx_hâp_c‹e_kì∑live_dißbÀ
 },

530 { 
ngx_°rög
("satisfy"),

531 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

532 
ngx_c⁄f_£t_íum_¶Ÿ
,

533 
NGX_HTTP_LOC_CONF_OFFSET
,

534 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

535 &
ngx_hâp_c‹e_ßtisfy
 },

537 { 
ngx_°rög
("satisfy_any"),

538 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

539 
ngx_c⁄f_£t_Êag_¶Ÿ
,

540 
NGX_HTTP_LOC_CONF_OFFSET
,

541 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ßtisfy
),

542 &
ngx_c⁄f_dïªˇãd_ßtisfy_™y
 },

544 { 
ngx_°rög
("internal"),

545 
NGX_HTTP_LOC_CONF
|
NGX_CONF_NOARGS
,

546 
ngx_hâp_c‹e_öã∫Æ
,

547 
NGX_HTTP_LOC_CONF_OFFSET
,

549 
NULL
 },

551 { 
ngx_°rög
("lingering_close"),

552 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

553 
ngx_c⁄f_£t_íum_¶Ÿ
,

554 
NGX_HTTP_LOC_CONF_OFFSET
,

555 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_˛o£
),

556 &
ngx_hâp_c‹e_lögîög_˛o£
 },

558 { 
ngx_°rög
("lingering_time"),

559 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

560 
ngx_c⁄f_£t_m£c_¶Ÿ
,

561 
NGX_HTTP_LOC_CONF_OFFSET
,

562 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_time
),

563 
NULL
 },

565 { 
ngx_°rög
("lingering_timeout"),

566 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

567 
ngx_c⁄f_£t_m£c_¶Ÿ
,

568 
NGX_HTTP_LOC_CONF_OFFSET
,

569 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
lögîög_timeout
),

570 
NULL
 },

572 { 
ngx_°rög
("reset_timedout_connection"),

573 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

574 
ngx_c⁄f_£t_Êag_¶Ÿ
,

575 
NGX_HTTP_LOC_CONF_OFFSET
,

576 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ª£t_timedout_c⁄√˘i⁄
),

577 
NULL
 },

579 { 
ngx_°rög
("server_name_in_redirect"),

580 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

581 
ngx_c⁄f_£t_Êag_¶Ÿ
,

582 
NGX_HTTP_LOC_CONF_OFFSET
,

583 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_«me_ö_ªdúe˘
),

584 
NULL
 },

586 { 
ngx_°rög
("port_in_redirect"),

587 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

588 
ngx_c⁄f_£t_Êag_¶Ÿ
,

589 
NGX_HTTP_LOC_CONF_OFFSET
,

590 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
p‹t_ö_ªdúe˘
),

591 
NULL
 },

593 { 
ngx_°rög
("msie_padding"),

594 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

595 
ngx_c⁄f_£t_Êag_¶Ÿ
,

596 
NGX_HTTP_LOC_CONF_OFFSET
,

597 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_∑ddög
),

598 
NULL
 },

600 { 
ngx_°rög
("msie_refresh"),

601 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

602 
ngx_c⁄f_£t_Êag_¶Ÿ
,

603 
NGX_HTTP_LOC_CONF_OFFSET
,

604 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
msõ_ª‰esh
),

605 
NULL
 },

607 { 
ngx_°rög
("log_not_found"),

608 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

609 
ngx_c⁄f_£t_Êag_¶Ÿ
,

610 
NGX_HTTP_LOC_CONF_OFFSET
,

611 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_nŸ_found
),

612 
NULL
 },

614 { 
ngx_°rög
("log_subrequest"),

615 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

616 
ngx_c⁄f_£t_Êag_¶Ÿ
,

617 
NGX_HTTP_LOC_CONF_OFFSET
,

618 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
log_subªque°
),

619 
NULL
 },

621 { 
ngx_°rög
("recursive_error_pages"),

622 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

623 
ngx_c⁄f_£t_Êag_¶Ÿ
,

624 
NGX_HTTP_LOC_CONF_OFFSET
,

625 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªcursive_îr‹_∑ges
),

626 
NULL
 },

628 { 
ngx_°rög
("server_tokens"),

629 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

630 
ngx_c⁄f_£t_Êag_¶Ÿ
,

631 
NGX_HTTP_LOC_CONF_OFFSET
,

632 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
£rvî_tokís
),

633 
NULL
 },

635 { 
ngx_°rög
("if_modified_since"),

636 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

637 
ngx_c⁄f_£t_íum_¶Ÿ
,

638 
NGX_HTTP_LOC_CONF_OFFSET
,

639 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
if_modifõd_sö˚
),

640 &
ngx_hâp_c‹e_if_modifõd_sö˚
 },

642 { 
ngx_°rög
("max_ranges"),

643 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

644 
ngx_c⁄f_£t_num_¶Ÿ
,

645 
NGX_HTTP_LOC_CONF_OFFSET
,

646 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
max_ønges
),

647 
NULL
 },

649 { 
ngx_°rög
("chunked_transfer_encoding"),

650 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

651 
ngx_c⁄f_£t_Êag_¶Ÿ
,

652 
NGX_HTTP_LOC_CONF_OFFSET
,

653 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
chunked_å™s„r_ícodög
),

654 
NULL
 },

656 { 
ngx_°rög
("etag"),

657 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

658 
ngx_c⁄f_£t_Êag_¶Ÿ
,

659 
NGX_HTTP_LOC_CONF_OFFSET
,

660 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ëag
),

661 
NULL
 },

663 { 
ngx_°rög
("error_page"),

664 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


665 |
NGX_CONF_2MORE
,

666 
ngx_hâp_c‹e_îr‹_∑ge
,

667 
NGX_HTTP_LOC_CONF_OFFSET
,

669 
NULL
 },

671 { 
ngx_°rög
("try_files"),

672 
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_2MORE
,

673 
ngx_hâp_c‹e_åy_fûes
,

674 
NGX_HTTP_LOC_CONF_OFFSET
,

676 
NULL
 },

678 { 
ngx_°rög
("post_action"),

679 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_HTTP_LIF_CONF


680 |
NGX_CONF_TAKE1
,

681 
ngx_c⁄f_£t_°r_¶Ÿ
,

682 
NGX_HTTP_LOC_CONF_OFFSET
,

683 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
po°_a˘i⁄
),

684 
NULL
 },

686 { 
ngx_°rög
("error_log"),

687 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

688 
ngx_hâp_c‹e_îr‹_log
,

689 
NGX_HTTP_LOC_CONF_OFFSET
,

691 
NULL
 },

693 { 
ngx_°rög
("open_file_cache"),

694 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

695 
ngx_hâp_c‹e_›í_fûe_ˇche
,

696 
NGX_HTTP_LOC_CONF_OFFSET
,

697 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche
),

698 
NULL
 },

700 { 
ngx_°rög
("open_file_cache_valid"),

701 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

702 
ngx_c⁄f_£t_£c_¶Ÿ
,

703 
NGX_HTTP_LOC_CONF_OFFSET
,

704 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

705 
NULL
 },

707 { 
ngx_°rög
("open_file_cache_retest"),

708 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

709 
ngx_c⁄f_£t_£c_¶Ÿ
,

710 
NGX_HTTP_LOC_CONF_OFFSET
,

711 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_vÆid
),

712 &
ngx_c⁄f_dïªˇãd_›í_fûe_ˇche_ªã°
 },

714 { 
ngx_°rög
("open_file_cache_min_uses"),

715 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

716 
ngx_c⁄f_£t_num_¶Ÿ
,

717 
NGX_HTTP_LOC_CONF_OFFSET
,

718 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_mö_u£s
),

719 
NULL
 },

721 { 
ngx_°rög
("open_file_cache_errors"),

722 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

723 
ngx_c⁄f_£t_Êag_¶Ÿ
,

724 
NGX_HTTP_LOC_CONF_OFFSET
,

725 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_îr‹s
),

726 
NULL
 },

728 { 
ngx_°rög
("open_file_cache_events"),

729 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

730 
ngx_c⁄f_£t_Êag_¶Ÿ
,

731 
NGX_HTTP_LOC_CONF_OFFSET
,

732 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
›í_fûe_ˇche_evíts
),

733 
NULL
 },

735 { 
ngx_°rög
("resolver"),

736 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

737 
ngx_hâp_c‹e_ªsﬁvî
,

738 
NGX_HTTP_LOC_CONF_OFFSET
,

740 
NULL
 },

742 { 
ngx_°rög
("resolver_timeout"),

743 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

744 
ngx_c⁄f_£t_m£c_¶Ÿ
,

745 
NGX_HTTP_LOC_CONF_OFFSET
,

746 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
ªsﬁvî_timeout
),

747 
NULL
 },

749 #i‡(
NGX_HTTP_GZIP
)

751 { 
ngx_°rög
("gzip_vary"),

752 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_FLAG
,

753 
ngx_c⁄f_£t_Êag_¶Ÿ
,

754 
NGX_HTTP_LOC_CONF_OFFSET
,

755 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_v¨y
),

756 
NULL
 },

758 { 
ngx_°rög
("gzip_http_version"),

759 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE1
,

760 
ngx_c⁄f_£t_íum_¶Ÿ
,

761 
NGX_HTTP_LOC_CONF_OFFSET
,

762 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_hâp_vîsi⁄
),

763 &
ngx_hâp_gzù_hâp_vîsi⁄
 },

765 { 
ngx_°rög
("gzip_proxied"),

766 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

767 
ngx_c⁄f_£t_bômask_¶Ÿ
,

768 
NGX_HTTP_LOC_CONF_OFFSET
,

769 
off£tof
(
ngx_hâp_c‹e_loc_c⁄f_t
, 
gzù_¥oxõd
),

770 &
ngx_hâp_gzù_¥oxõd_mask
 },

772 { 
ngx_°rög
("gzip_disable"),

773 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_1MORE
,

774 
ngx_hâp_gzù_dißbÀ
,

775 
NGX_HTTP_LOC_CONF_OFFSET
,

777 
NULL
 },

781 #i‡(
NGX_HAVE_OPENAT
)

783 { 
ngx_°rög
("disable_symlinks"),

784 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_HTTP_LOC_CONF
|
NGX_CONF_TAKE12
,

785 
ngx_hâp_dißbÀ_symlöks
,

786 
NGX_HTTP_LOC_CONF_OFFSET
,

788 
NULL
 },

792 
ngx_nuŒ_comm™d


796 
ngx_hâp_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ_˘x
 = {

797 
ngx_hâp_c‹e_¥ec⁄figuøti⁄
,

798 
NULL
,

800 
ngx_hâp_c‹e_¸óã_maö_c⁄f
,

801 
ngx_hâp_c‹e_öô_maö_c⁄f
,

803 
ngx_hâp_c‹e_¸óã_§v_c⁄f
,

804 
ngx_hâp_c‹e_mîge_§v_c⁄f
,

806 
ngx_hâp_c‹e_¸óã_loc_c⁄f
,

807 
ngx_hâp_c‹e_mîge_loc_c⁄f


811 
ngx_moduÀ_t
 
	gngx_hâp_c‹e_moduÀ
 = {

812 
NGX_MODULE_V1
,

813 &
ngx_hâp_c‹e_moduÀ_˘x
,

814 
ngx_hâp_c‹e_comm™ds
,

815 
NGX_HTTP_MODULE
,

816 
NULL
,

817 
NULL
,

818 
NULL
,

819 
NULL
,

820 
NULL
,

821 
NULL
,

822 
NULL
,

823 
NGX_MODULE_V1_PADDING


827 
ngx_°r_t
 
	gngx_hâp_c‹e_gë_mëhod
 = { 3, (
u_ch¨
 *) "GET " };

831 
	$ngx_hâp_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

833 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

835 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = 
NULL
;

837 
r
->
c⁄√˘i⁄
->
u√x≥˘ed_eof
 = 0;

839 i‡(!
r
->
öã∫Æ
) {

840 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
) {

842 
r
->
kì∑live
 = (r->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
);

845 
NGX_HTTP_CONNECTION_CLOSE
:

846 
r
->
kì∑live
 = 0;

849 
NGX_HTTP_CONNECTION_KEEP_ALIVE
:

850 
r
->
kì∑live
 = 1;

854 
r
->
lögîög_˛o£
 = (r->
hódîs_ö
.
c⁄ã¡_Àngth_n
 > 0

855 || 
r
->
hódîs_ö
.
chunked
);

856 
r
->
pha£_h™dÀr
 = 0;

859 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

860 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
£rvî_ªwrôe_ödex
;

863 
r
->
vÆid_loˇti⁄
 = 1;

864 #i‡(
NGX_HTTP_GZIP
)

865 
r
->
gzù_ã°ed
 = 0;

866 
r
->
gzù_ok
 = 0;

867 
r
->
gzù_v¨y
 = 0;

870 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

871 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

872 
	}
}

876 
	$ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
)

878 
ngx_öt_t
 
rc
;

879 
ngx_hâp_pha£_h™dÀr_t
 *
ph
;

880 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

882 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

884 
ph
 = 
cmcf
->
pha£_ígöe
.
h™dÀrs
;

886 
ph
[
r
->
pha£_h™dÀr
].
checkî
) {

888 
rc
 = 
ph
[
r
->
pha£_h™dÀr
].
	`checkî
(r, &ph[r->phase_handler]);

890 i‡(
rc
 =
NGX_OK
) {

894 
	}
}

897 
ngx_öt_t


898 
	$ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

900 
ngx_öt_t
 
rc
;

907 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

908 "gíîi¯pha£: %ui", 
r
->
pha£_h™dÀr
);

910 
rc
 = 
ph
->
	`h™dÀr
(
r
);

912 i‡(
rc
 =
NGX_OK
) {

913 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

914  
NGX_AGAIN
;

917 i‡(
rc
 =
NGX_DECLINED
) {

918 
r
->
pha£_h™dÀr
++;

919  
NGX_AGAIN
;

922 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

923  
NGX_OK
;

928 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

930  
NGX_OK
;

931 
	}
}

934 
ngx_öt_t


935 
	$ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

937 
ngx_öt_t
 
rc
;

939 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

940 "ªwrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

942 
rc
 = 
ph
->
	`h™dÀr
(
r
);

944 i‡(
rc
 =
NGX_DECLINED
) {

945 
r
->
pha£_h™dÀr
++;

946  
NGX_AGAIN
;

949 i‡(
rc
 =
NGX_DONE
) {

950  
NGX_OK
;

955 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

957  
NGX_OK
;

958 
	}
}

961 
ngx_öt_t


962 
	$ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

963 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

965 
u_ch¨
 *
p
;

966 
size_t
 
Àn
;

967 
ngx_öt_t
 
rc
;

968 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

970 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

971 
r
->
uri_ch™ged
 = 0;

973 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

975 i‡(
rc
 =
NGX_ERROR
) {

976 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

977  
NGX_OK
;

980 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

982 i‡(!
r
->
öã∫Æ
 && 
˛cf
->internal) {

983 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

984  
NGX_OK
;

987 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

989 (
˛cf
->
n⁄ame
 ? "*" : (˛cf->
exa˘_m©ch
 ? "=" : "")),

990 &
˛cf
->
«me
);

992 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

994 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

996 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
, 
˛cf
->
˛õ¡_max_body_size
);

998 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

999 && !
r
->
disˇrd_body


1000 && 
˛cf
->
˛õ¡_max_body_size


1001 && 
˛cf
->
˛õ¡_max_body_size
 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
)

1003 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1005 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
);

1007 
r
->
ex≥˘_ã°ed
 = 1;

1008 (Ë
	`ngx_hâp_disˇrd_ªque°_body
(
r
);

1009 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
);

1010  
NGX_OK
;

1013 i‡(
rc
 =
NGX_DONE
) {

1014 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1016 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1017 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1018 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1019  
NGX_OK
;

1027 i‡(
r
->
¨gs
.
Àn
 == 0) {

1028 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
˛cf
->
«me
;

1031 
Àn
 = 
˛cf
->
«me
.À¿+ 1 + 
r
->
¨gs
.len;

1032 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1034 i‡(
p
 =
NULL
) {

1035 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1036  
NGX_OK
;

1039 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 =Üen;

1040 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

1042 
p
 = 
	`ngx_˝ymem
’, 
˛cf
->
«me
.
d©a
, clcf->«me.
Àn
);

1043 *
p
++ = '?';

1044 
	`ngx_mem˝y
(
p
, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1047 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_MOVED_PERMANENTLY
);

1048  
NGX_OK
;

1051 
r
->
pha£_h™dÀr
++;

1052  
NGX_AGAIN
;

1053 
	}
}

1056 
ngx_öt_t


1057 
	$ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1058 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1060 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1062 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1063 "po°Ñewrôêpha£: %ui", 
r
->
pha£_h™dÀr
);

1065 i‡(!
r
->
uri_ch™ged
) {

1066 
r
->
pha£_h™dÀr
++;

1067  
NGX_AGAIN
;

1070 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1071 "uròch™ges: %d", 
r
->
uri_ch™ges
);

1080 
r
->
uri_ch™ges
--;

1082 i‡(
r
->
uri_ch™ges
 == 0) {

1083 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1085 "whûê¥o˚ssög \"%V\"", &
r
->
uri
);

1087 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1088  
NGX_OK
;

1091 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1093 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1094 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

1096  
NGX_AGAIN
;

1097 
	}
}

1100 
ngx_öt_t


1101 
	$ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1103 
ngx_öt_t
 
rc
;

1104 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1106 i‡(
r
 !r->
maö
) {

1107 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1108  
NGX_AGAIN
;

1111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1112 "ac˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1114 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1116 i‡(
rc
 =
NGX_DECLINED
) {

1117 
r
->
pha£_h™dÀr
++;

1118  
NGX_AGAIN
;

1121 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_DONE
) {

1122  
NGX_OK
;

1125 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1127 i‡(
˛cf
->
ßtisfy
 =
NGX_HTTP_SATISFY_ALL
) {

1129 i‡(
rc
 =
NGX_OK
) {

1130 
r
->
pha£_h™dÀr
++;

1131  
NGX_AGAIN
;

1135 i‡(
rc
 =
NGX_OK
) {

1136 
r
->
ac˚ss_code
 = 0;

1138 i‡(
r
->
hódîs_out
.
www_authítiˇã
) {

1139 
r
->
hódîs_out
.
www_authítiˇã
->
hash
 = 0;

1142 
r
->
pha£_h™dÀr
 = 
ph
->
√xt
;

1143  
NGX_AGAIN
;

1146 i‡(
rc
 =
NGX_HTTP_FORBIDDEN
 ||Ñ¯=
NGX_HTTP_UNAUTHORIZED
) {

1147 
r
->
ac˚ss_code
 = 
rc
;

1149 
r
->
pha£_h™dÀr
++;

1150  
NGX_AGAIN
;

1156 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1157  
NGX_OK
;

1158 
	}
}

1161 
ngx_öt_t


1162 
	$ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1163 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1165 
ngx_öt_t
 
ac˚ss_code
;

1167 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1168 "po°ác˚s†pha£: %ui", 
r
->
pha£_h™dÀr
);

1170 
ac˚ss_code
 = 
r
->access_code;

1172 i‡(
ac˚ss_code
) {

1173 i‡(
ac˚ss_code
 =
NGX_HTTP_FORBIDDEN
) {

1174 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1178 
r
->
ac˚ss_code
 = 0;

1179 
	`ngx_hâp_föÆize_ªque°
(
r
, 
ac˚ss_code
);

1180  
NGX_OK
;

1183 
r
->
pha£_h™dÀr
++;

1184  
NGX_AGAIN
;

1185 
	}
}

1188 
ngx_öt_t


1189 
	$ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1190 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1192 
size_t
 
Àn
, 
roŸ
, 
Æüs
, 
ª£rve
, 
Æloˇãd
;

1193 
u_ch¨
 *
p
, *
«me
;

1194 
ngx_°r_t
 
∑th
, 
¨gs
;

1195 
ngx_uöt_t
 
ã°_dú
;

1196 
ngx_hâp_åy_fûe_t
 *
tf
;

1197 
ngx_›í_fûe_öfo_t
 
of
;

1198 
ngx_hâp_s¸ùt_code_±
 
code
;

1199 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

1200 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1201 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1203 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1204 "åy fûe†pha£: %ui", 
r
->
pha£_h™dÀr
);

1206 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1208 i‡(
˛cf
->
åy_fûes
 =
NULL
) {

1209 
r
->
pha£_h™dÀr
++;

1210  
NGX_AGAIN
;

1213 
Æloˇãd
 = 0;

1214 
roŸ
 = 0;

1215 
«me
 = 
NULL
;

1217 
∑th
.
d©a
 = 
NULL
;

1219 
tf
 = 
˛cf
->
åy_fûes
;

1221 
Æüs
 = 
˛cf
->alias;

1225 i‡(
tf
->
Àngths
) {

1226 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

1228 
e
.
ù
 = 
tf
->
Àngths
->
ñts
;

1229 
e
.
ªque°
 = 
r
;

1232 
Àn
 = 1;

1234 *(
uöçå_t
 *Ë
e
.
ù
) {

1235 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

1236 
Àn
 +
	`lcode
(&
e
);

1240 
Àn
 = 
tf
->
«me
.len;

1243 i‡(!
Æüs
) {

1244 
ª£rve
 = 
Àn
 > 
r
->
uri
.len ?Üen -Ñ->uri.len : 0;

1246 #i‡(
NGX_PCRE
)

1247 } i‡(
˛cf
->
ªgex
) {

1248 
ª£rve
 = 
Àn
;

1252 
ª£rve
 = 
Àn
 > 
r
->
uri
.À¿- 
Æüs
 ?Üen - (r->uri.len -álias) : 0;

1255 i‡(
ª£rve
 > 
Æloˇãd
 || !allocated) {

1258 
Æloˇãd
 = 
ª£rve
 + 16;

1260 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 
Æloˇãd
Ë=
NULL
) {

1261 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1262  
NGX_OK
;

1265 
«me
 = 
∑th
.
d©a
 + 
roŸ
;

1268 i‡(
tf
->
vÆues
 =
NULL
) {

1272 
	`ngx_mem˝y
(
«me
, 
tf
->«me.
d©a
,Åf->«me.
Àn
);

1274 
∑th
.
Àn
 = (
«me
 + 
tf
->«me.À¿- 1Ë-Ö©h.
d©a
;

1277 
e
.
ù
 = 
tf
->
vÆues
->
ñts
;

1278 
e
.
pos
 = 
«me
;

1279 
e
.
Êushed
 = 1;

1281 *(
uöçå_t
 *Ë
e
.
ù
) {

1282 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

1283 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

1286 
∑th
.
Àn
 = 
e
.
pos
 -Ö©h.
d©a
;

1288 *
e
.
pos
 = '\0';

1290 i‡(
Æüs
 && 
	`ngx_°∫cmp
(
«me
, 
˛cf
->«me.
d©a
,álias) == 0) {

1291 
	`ngx_memmove
(
«me
,Çamê+ 
Æüs
, 
Àn
 -álias);

1292 
∑th
.
Àn
 -
Æüs
;

1296 
ã°_dú
 = 
tf
->test_dir;

1298 
tf
++;

1300 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1302 
ã°_dú
 ? "dú" : "fûe", 
«me
, 
∑th
.
d©a
);

1304 i‡(
tf
->
Àngths
 =
NULL
 &&Åf->
«me
.
Àn
 == 0) {

1306 i‡(
tf
->
code
) {

1307 
	`ngx_hâp_föÆize_ªque°
(
r
, 
tf
->
code
);

1308  
NGX_OK
;

1311 
∑th
.
Àn
 -
roŸ
;

1312 
∑th
.
d©a
 +
roŸ
;

1314 i‡(
∑th
.
d©a
[0] == '@') {

1315 (Ë
	`ngx_hâp_«med_loˇti⁄
(
r
, &
∑th
);

1318 
	`ngx_hâp_•lô_¨gs
(
r
, &
∑th
, &
¨gs
);

1320 (Ë
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
∑th
, &
¨gs
);

1323 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1324  
NGX_OK
;

1327 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1329 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1330 
of
.
dúe˘io
 = 
˛cf
->directio;

1331 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1332 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1333 
of
.
ã°_⁄ly
 = 1;

1334 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1335 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1337 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1338 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1339  
NGX_OK
;

1342 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1343 !
NGX_OK
)

1345 i‡(
of
.
îr
 !
NGX_ENOENT


1346 && 
of
.
îr
 !
NGX_ENOTDIR


1347 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1349 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1350 "%†\"%s\" faûed", 
of
.
Áûed
, 
∑th
.
d©a
);

1356 i‡(
of
.
is_dú
 && !
ã°_dú
) {

1360 
∑th
.
Àn
 -
roŸ
;

1361 
∑th
.
d©a
 +
roŸ
;

1363 i‡(!
Æüs
) {

1364 
r
->
uri
 = 
∑th
;

1366 #i‡(
NGX_PCRE
)

1367 } i‡(
˛cf
->
ªgex
) {

1368 i‡(!
ã°_dú
) {

1369 
r
->
uri
 = 
∑th
;

1370 
r
->
add_uri_to_Æüs
 = 1;

1374 
r
->
uri
.
Àn
 = 
Æüs
 + 
∑th
.len;

1375 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
);

1376 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1377 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1378  
NGX_OK
;

1381 
p
 = 
	`ngx_c›y
(
r
->
uri
.
d©a
, 
˛cf
->
«me
.d©a, 
Æüs
);

1382 
	`ngx_mem˝y
(
p
, 
«me
, 
∑th
.
Àn
);

1385 
	`ngx_hâp_£t_exãn
(
r
);

1387 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1388 "åy fûêuri: \"%V\"", &
r
->
uri
);

1390 
r
->
pha£_h™dÀr
++;

1391  
NGX_AGAIN
;

1395 
	}
}

1398 
ngx_öt_t


1399 
	$ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

1400 
ngx_hâp_pha£_h™dÀr_t
 *
ph
)

1402 
size_t
 
roŸ
;

1403 
ngx_öt_t
 
rc
;

1404 
ngx_°r_t
 
∑th
;

1406 i‡(
r
->
c⁄ã¡_h™dÀr
) {

1407 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

1408 
	`ngx_hâp_föÆize_ªque°
(
r
,Ñ->
	`c⁄ã¡_h™dÀr
(r));

1409  
NGX_OK
;

1412 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1413 "c⁄ã¡Öha£: %ui", 
r
->
pha£_h™dÀr
);

1415 
rc
 = 
ph
->
	`h™dÀr
(
r
);

1417 i‡(
rc
 !
NGX_DECLINED
) {

1418 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1419  
NGX_OK
;

1424 
ph
++;

1426 i‡(
ph
->
checkî
) {

1427 
r
->
pha£_h™dÀr
++;

1428  
NGX_AGAIN
;

1433 i‡(
r
->
uri
.
d©a
[r->uri.
Àn
 - 1] == '/') {

1435 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë!
NULL
) {

1436 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1437 "dúe˘‹y index o‡\"%s\" i†f‹biddí", 
∑th
.
d©a
);

1440 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_FORBIDDEN
);

1441  
NGX_OK
;

1444 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "no handler found");

1446 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1447  
NGX_OK
;

1448 
	}
}

1452 
	$ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
ngx_hâp_ªque°_t
 *
r
)

1454 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1456 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1458 i‡(
r
->
mëhod
 & 
˛cf
->
limô_ex˚±
) {

1459 
r
->
loc_c⁄f
 = 
˛cf
->
limô_ex˚±_loc_c⁄f
;

1460 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1463 i‡(
r
 =r->
maö
) {

1464 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

1467 i‡((
ngx_io
.
Êags
 & 
NGX_IO_SENDFILE
Ë&& 
˛cf
->
£ndfûe
) {

1468 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 1;

1471 
r
->
c⁄√˘i⁄
->
£ndfûe
 = 0;

1474 i‡(
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
) {

1475 
r
->
ªque°_body_ö_fûe_⁄ly
 = 1;

1476 
r
->
ªque°_body_ö_≥rsi°ít_fûe
 = 1;

1477 
r
->
ªque°_body_ö_˛ón_fûe
 =

1478 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 =
NGX_HTTP_REQUEST_BODY_FILE_CLEAN
;

1479 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_NOTICE
;

1482 
r
->
ªque°_body_fûe_log_Àvñ
 = 
NGX_LOG_WARN
;

1485 
r
->
ªque°_body_ö_sögÀ_buf
 = 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
;

1487 i‡(
r
->
kì∑live
) {

1488 i‡(
˛cf
->
kì∑live_timeout
 == 0) {

1489 
r
->
kì∑live
 = 0;

1491 } i‡(
r
->
c⁄√˘i⁄
->
ªque°s
 >
˛cf
->
kì∑live_ªque°s
) {

1492 
r
->
kì∑live
 = 0;

1494 } i‡(
r
->
hódîs_ö
.
msõ6


1495 && 
r
->
mëhod
 =
NGX_HTTP_POST


1496 && (
˛cf
->
kì∑live_dißbÀ


1497 & 
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
))

1503 
r
->
kì∑live
 = 0;

1505 } i‡(
r
->
hódîs_ö
.
ßÁri


1506 && (
˛cf
->
kì∑live_dißbÀ


1507 & 
NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
))

1514 
r
->
kì∑live
 = 0;

1518 i‡(!
˛cf
->
t˝_n›ush
) {

1520 
r
->
c⁄√˘i⁄
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_DISABLED
;

1523 i‡(
r
->
limô_øã
 == 0) {

1524 
r
->
limô_øã
 = 
˛cf
->limit_rate;

1527 i‡(
˛cf
->
h™dÀr
) {

1528 
r
->
c⁄ã¡_h™dÀr
 = 
˛cf
->
h™dÀr
;

1530 
	}
}

1541 
ngx_öt_t


1542 
	$ngx_hâp_c‹e_föd_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
)

1544 
ngx_öt_t
 
rc
;

1545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
;

1546 #i‡(
NGX_PCRE
)

1547 
ngx_öt_t
 
n
;

1548 
ngx_uöt_t
 
n‹egex
;

1549 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, **
˛cÂ
;

1551 
n‹egex
 = 0;

1554 
p˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1556 
rc
 = 
	`ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
r
, 
p˛cf
->
°©ic_loˇti⁄s
);

1558 i‡(
rc
 =
NGX_AGAIN
) {

1560 #i‡(
NGX_PCRE
)

1561 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1563 
n‹egex
 = 
˛cf
->noregex;

1568 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1571 i‡(
rc
 =
NGX_OK
 ||Ñ¯=
NGX_DONE
) {

1572  
rc
;

1577 #i‡(
NGX_PCRE
)

1579 i‡(
n‹egex
 =0 && 
p˛cf
->
ªgex_loˇti⁄s
) {

1581 
˛cÂ
 = 
p˛cf
->
ªgex_loˇti⁄s
; *clcfp; clcfp++) {

1583 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1584 "ã°Üoˇti⁄: ~ \"%V\"", &(*
˛cÂ
)->
«me
);

1586 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, (*
˛cÂ
)->
ªgex
, &r->
uri
);

1588 i‡(
n
 =
NGX_OK
) {

1589 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

1593 
rc
 = 
	`ngx_hâp_c‹e_föd_loˇti⁄
(
r
);

1595  (
rc
 =
NGX_ERROR
Ë?Ñ¯: 
NGX_OK
;

1598 i‡(
n
 =
NGX_DECLINED
) {

1602  
NGX_ERROR
;

1607  
rc
;

1608 
	}
}

1618 
ngx_öt_t


1619 
	$ngx_hâp_c‹e_föd_°©ic_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1620 
ngx_hâp_loˇti⁄_åì_node_t
 *
node
)

1622 
u_ch¨
 *
uri
;

1623 
size_t
 
Àn
, 
n
;

1624 
ngx_öt_t
 
rc
, 
rv
;

1626 
Àn
 = 
r
->
uri
.len;

1627 
uri
 = 
r
->uri.
d©a
;

1629 
rv
 = 
NGX_DECLINED
;

1633 i‡(
node
 =
NULL
) {

1634  
rv
;

1637 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1638 "ã°Üoˇti⁄: \"%*s\"", 
node
->
Àn
,Çode->
«me
);

1640 
n
 = (
Àn
 <(
size_t
Ë
node
->len) ?Üen :Çode->len;

1642 
rc
 = 
	`ngx_fûíame_cmp
(
uri
, 
node
->
«me
, 
n
);

1644 i‡(
rc
 != 0) {

1645 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

1650 i‡(
Àn
 > (
size_t
Ë
node
->len) {

1652 i‡(
node
->
ö˛usive
) {

1654 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1655 
rv
 = 
NGX_AGAIN
;

1657 
node
 =Çode->
åì
;

1658 
uri
 +
n
;

1659 
Àn
 -
n
;

1666 
node
 =Çode->
right
;

1671 i‡(
Àn
 =(
size_t
Ë
node
->len) {

1673 i‡(
node
->
exa˘
) {

1674 
r
->
loc_c⁄f
 = 
node
->
exa˘
->loc_conf;

1675  
NGX_OK
;

1678 
r
->
loc_c⁄f
 = 
node
->
ö˛usive
->loc_conf;

1679  
NGX_AGAIN
;

1685 i‡(
Àn
 + 1 =(
size_t
Ë
node
->À¿&&Çode->
auto_ªdúe˘
) {

1687 
r
->
loc_c⁄f
 = (
node
->
exa˘
) ?Çode->exact->loc_conf:

1688 
node
->
ö˛usive
->
loc_c⁄f
;

1689 
rv
 = 
NGX_DONE
;

1692 
node
 =Çode->
À·
;

1694 
	}
}

1698 
	$ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
)

1700 
u_ch¨
 
c
, *
lowˇ£
;

1701 
size_t
 
Àn
;

1702 
ngx_uöt_t
 
i
, 
hash
;

1704 i‡(
ty≥s_hash
->
size
 == 0) {

1708 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 == 0) {

1709  
NULL
;

1712 
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
;

1714 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 =
NULL
) {

1716 
lowˇ£
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1717 i‡(
lowˇ£
 =
NULL
) {

1718  
NULL
;

1721 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
lowˇ£
;

1723 
hash
 = 0;

1725 
i
 = 0; i < 
Àn
; i++) {

1726 
c
 = 
	`ngx_tﬁowî
(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
[
i
]);

1727 
hash
 = 
	`ngx_hash
(hash, 
c
);

1728 
lowˇ£
[
i
] = 
c
;

1731 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
 = 
hash
;

1734  
	`ngx_hash_föd
(
ty≥s_hash
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥_hash
,

1735 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
, 
Àn
);

1736 
	}
}

1739 
ngx_öt_t


1740 
	$ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
)

1742 
u_ch¨
 
c
, *
exãn
;

1743 
ngx_°r_t
 *
ty≥
;

1744 
ngx_uöt_t
 
i
, 
hash
;

1745 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1747 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1748  
NGX_OK
;

1751 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1753 i‡(
r
->
exãn
.
Àn
) {

1755 
hash
 = 0;

1757 
i
 = 0; i < 
r
->
exãn
.
Àn
; i++) {

1758 
c
 = 
r
->
exãn
.
d©a
[
i
];

1760 i‡(
c
 >= 'A' && c <= 'Z') {

1762 
exãn
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->exãn.
Àn
);

1763 i‡(
exãn
 =
NULL
) {

1764  
NGX_ERROR
;

1767 
hash
 = 
	`ngx_hash_°æow
(
exãn
, 
r
->exãn.
d©a
,Ñ->exãn.
Àn
);

1769 
r
->
exãn
.
d©a
 =Éxten;

1774 
hash
 = 
	`ngx_hash
(hash, 
c
);

1777 
ty≥
 = 
	`ngx_hash_föd
(&
˛cf
->
ty≥s_hash
, 
hash
,

1778 
r
->
exãn
.
d©a
,Ñ->exãn.
Àn
);

1780 i‡(
ty≥
) {

1781 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
ty≥
->
Àn
;

1782 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
ty≥
;

1784  
NGX_OK
;

1788 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˛cf
->
deÁu…_ty≥
.
Àn
;

1789 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
˛cf
->
deÁu…_ty≥
;

1791  
NGX_OK
;

1792 
	}
}

1796 
	$ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
)

1798 
ngx_öt_t
 
i
;

1800 
	`ngx_°r_nuŒ
(&
r
->
exãn
);

1802 
i
 = 
r
->
uri
.
Àn
 - 1; i > 1; i--) {

1803 i‡(
r
->
uri
.
d©a
[
i
] == '.' &&Ñ->uri.data[i - 1] != '/') {

1805 
r
->
exãn
.
Àn
 =Ñ->
uri
.À¿- 
i
 - 1;

1806 
r
->
exãn
.
d©a
 = &r->
uri
.d©a[
i
 + 1];

1810 } i‡(
r
->
uri
.
d©a
[
i
] == '/') {

1816 
	}
}

1819 
ngx_öt_t


1820 
	$ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
)

1822 
ngx_èbÀ_ñt_t
 *
ëag
;

1823 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1825 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1827 i‡(!
˛cf
->
ëag
) {

1828  
NGX_OK
;

1831 
ëag
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1832 i‡(
ëag
 =
NULL
) {

1833  
NGX_ERROR
;

1836 
ëag
->
hash
 = 1;

1837 
	`ngx_°r_£t
(&
ëag
->
key
, "ETag");

1839 
ëag
->
vÆue
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
 + 
NGX_TIME_T_LEN
 + 3);

1840 i‡(
ëag
->
vÆue
.
d©a
 =
NULL
) {

1841  
NGX_ERROR
;

1844 
ëag
->
vÆue
.
Àn
 = 
	`ngx_•rötf
”èg->vÆue.
d©a
, "\"%xT-%xO\"",

1845 
r
->
hódîs_out
.
œ°_modifõd_time
,

1846 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
)

1847 - 
ëag
->
vÆue
.
d©a
;

1849 
r
->
hódîs_out
.
ëag
 =Étag;

1851  
NGX_OK
;

1852 
	}
}

1855 
ngx_öt_t


1856 
	$ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

1857 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
)

1859 
ngx_öt_t
 
rc
;

1860 
ngx_°r_t
 
vÆ
;

1861 
ngx_buf_t
 *
b
;

1862 
ngx_chaö_t
 
out
;

1864 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

1865  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1868 
r
->
hódîs_out
.
°©us
 = status;

1870 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
cv
, &
vÆ
Ë!
NGX_OK
) {

1871  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1874 i‡(
°©us
 =
NGX_HTTP_MOVED_PERMANENTLY


1875 || 
°©us
 =
NGX_HTTP_MOVED_TEMPORARILY


1876 || 
°©us
 =
NGX_HTTP_SEE_OTHER


1877 || 
°©us
 =
NGX_HTTP_TEMPORARY_REDIRECT
)

1879 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1881 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1882 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1883  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1886 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1887 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1888 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
vÆ
;

1890  
°©us
;

1893 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
vÆ
.
Àn
;

1895 i‡(
˘
) {

1896 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
˘
->
Àn
;

1897 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = *
˘
;

1900 i‡(
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
r
Ë!
NGX_OK
) {

1901  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1905 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
 || (∏!r->
maö
 && 
vÆ
.
Àn
 == 0)) {

1906  
	`ngx_hâp_£nd_hódî
(
r
);

1909 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

1910 i‡(
b
 =
NULL
) {

1911  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1914 
b
->
pos
 = 
vÆ
.
d©a
;

1915 
b
->
œ°
 = 
vÆ
.
d©a
 + vÆ.
Àn
;

1916 
b
->
mem‹y
 = 
vÆ
.
Àn
 ? 1 : 0;

1917 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1 : 0;

1918 
b
->
œ°_ö_chaö
 = 1;

1920 
out
.
buf
 = 
b
;

1921 
out
.
√xt
 = 
NULL
;

1923 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1925 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1926  
rc
;

1929  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1930 
	}
}

1933 
ngx_öt_t


1934 
	$ngx_hâp_£nd_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1936 i‡(
r
->
îr_°©us
) {

1937 
r
->
hódîs_out
.
°©us
 =Ñ->
îr_°©us
;

1938 
r
->
hódîs_out
.
°©us_löe
.
Àn
 = 0;

1941  
	`ngx_hâp_t›_hódî_fûãr
(
r
);

1942 
	}
}

1945 
ngx_öt_t


1946 
	$ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1948 
ngx_öt_t
 
rc
;

1949 
ngx_c⁄√˘i⁄_t
 *
c
;

1951 
c
 = 
r
->
c⁄√˘i⁄
;

1953 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1954 "hâ∞ouçuàfûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

1956 
rc
 = 
	`ngx_hâp_t›_body_fûãr
(
r
, 
ö
);

1958 i‡(
rc
 =
NGX_ERROR
) {

1960 
c
->
îr‹
 = 1;

1963  
rc
;

1964 
	}
}

1967 
u_ch¨
 *

1968 
	$ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
∑th
,

1969 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
)

1971 
u_ch¨
 *
œ°
;

1972 
size_t
 
Æüs
;

1973 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1975 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1977 
Æüs
 = 
˛cf
->alias;

1979 i‡(
Æüs
 && !
r
->
vÆid_loˇti⁄
) {

1980 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1982 "whîêURI wa†ªwrôãn", &
˛cf
->
«me
);

1983  
NULL
;

1986 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1988 *
roŸ_Àngth
 = 
˛cf
->
roŸ
.
Àn
;

1990 
∑th
->
Àn
 = 
˛cf
->
roŸ
.À¿+ 
ª£rved
 + 
r
->
uri
.À¿- 
Æüs
 + 1;

1992 
∑th
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ö©h->
Àn
);

1993 i‡(
∑th
->
d©a
 =
NULL
) {

1994  
NULL
;

1997 
œ°
 = 
	`ngx_c›y
(
∑th
->
d©a
, 
˛cf
->
roŸ
.d©a, clcf->roŸ.
Àn
);

2001 #i‡(
NGX_PCRE
)

2002 
ngx_uöt_t
 
ˇ±uªs
;

2004 
ˇ±uªs
 = 
Æüs
 && 
˛cf
->
ªgex
;

2006 
ª£rved
 +
ˇ±uªs
 ? 
r
->
add_uri_to_Æüs
 ?Ñ->
uri
.
Àn
 + 1 : 1

2007 : 
r
->
uri
.
Àn
 - 
Æüs
 + 1;

2009 
ª£rved
 +
r
->
uri
.
Àn
 - 
Æüs
 + 1;

2012 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, 
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 
ª£rved
,

2013 
˛cf
->
roŸ_vÆues
->
ñts
)

2014 =
NULL
)

2016  
NULL
;

2019 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, 
∑th
, 0Ë!
NGX_OK
) {

2020  
NULL
;

2023 *
roŸ_Àngth
 = 
∑th
->
Àn
 - 
ª£rved
;

2024 
œ°
 = 
∑th
->
d©a
 + *
roŸ_Àngth
;

2026 #i‡(
NGX_PCRE
)

2027 i‡(
ˇ±uªs
) {

2028 i‡(!
r
->
add_uri_to_Æüs
) {

2029 *
œ°
 = '\0';

2030  
œ°
;

2033 
Æüs
 = 0;

2038 
œ°
 = 
	`ngx_˝y°∫
÷a°, 
r
->
uri
.
d©a
 + 
Æüs
,Ñ->uri.
Àn
 -álias + 1);

2040  
œ°
;

2041 
	}
}

2044 
ngx_öt_t


2045 
	$ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
)

2047 
ngx_°r_t
 
auth
, 
ícoded
;

2048 
ngx_uöt_t
 
Àn
;

2050 i‡(
r
->
hódîs_ö
.
u£r
.
Àn
 =0 &&Ñ->hódîs_ö.u£r.
d©a
 !
NULL
) {

2051  
NGX_DECLINED
;

2054 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 =
NULL
) {

2055 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2056  
NGX_DECLINED
;

2059 
ícoded
 = 
r
->
hódîs_ö
.
auth‹iz©i⁄
->
vÆue
;

2061 i‡(
ícoded
.
Àn
 < ("Basic ") - 1

2062 || 
	`ngx_°∫ˇ£cmp
(
ícoded
.
d©a
, (
u_ch¨
 *) "Basic ",

2066 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2067  
NGX_DECLINED
;

2070 
ícoded
.
Àn
 -= ("Basic ") - 1;

2071 
ícoded
.
d©a
 += ("Basic ") - 1;

2073 
ícoded
.
Àn
 &&Éncoded.
d©a
[0] == ' ') {

2074 
ícoded
.
Àn
--;

2075 
ícoded
.
d©a
++;

2078 i‡(
ícoded
.
Àn
 == 0) {

2079 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2080  
NGX_DECLINED
;

2083 
auth
.
Àn
 = 
	`ngx_ba£64_decoded_Àngth
(
ícoded
.len);

2084 
auth
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,áuth.
Àn
 + 1);

2085 i‡(
auth
.
d©a
 =
NULL
) {

2086  
NGX_ERROR
;

2089 i‡(
	`ngx_decode_ba£64
(&
auth
, &
ícoded
Ë!
NGX_OK
) {

2090 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2091  
NGX_DECLINED
;

2094 
auth
.
d©a
[auth.
Àn
] = '\0';

2096 
Àn
 = 0;Üí < 
auth
.len;Üen++) {

2097 i‡(
auth
.
d©a
[
Àn
] == ':') {

2102 i‡(
Àn
 =0 ||Üí =
auth
.len) {

2103 
r
->
hódîs_ö
.
u£r
.
d©a
 = (
u_ch¨
 *) "";

2104  
NGX_DECLINED
;

2107 
r
->
hódîs_ö
.
u£r
.
Àn
 =Üen;

2108 
r
->
hódîs_ö
.
u£r
.
d©a
 = 
auth
.data;

2109 
r
->
hódîs_ö
.
∑sswd
.
Àn
 = 
auth
.len -Üen - 1;

2110 
r
->
hódîs_ö
.
∑sswd
.
d©a
 = &
auth
.d©a[
Àn
 + 1];

2112  
NGX_OK
;

2113 
	}
}

2116 #i‡(
NGX_HTTP_GZIP
)

2118 
ngx_öt_t


2119 
	$ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
)

2121 
time_t
 
d©e
, 
expúes
;

2122 
ngx_uöt_t
 
p
;

2123 
ngx_¨øy_t
 *
cc
;

2124 
ngx_èbÀ_ñt_t
 *
e
, *
d
, *
´
;

2125 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2127 
r
->
gzù_ã°ed
 = 1;

2129 i‡(
r
 !r->
maö
) {

2130  
NGX_DECLINED
;

2133 #i‡(
NGX_HTTP_SPDY
)

2134 i‡(
r
->
•dy_°ªam
) {

2135 
r
->
gzù_ok
 = 1;

2136  
NGX_OK
;

2140 
´
 = 
r
->
hódîs_ö
.
ac˚±_ícodög
;

2141 i‡(
´
 =
NULL
) {

2142  
NGX_DECLINED
;

2145 i‡(
´
->
vÆue
.
Àn
 < ("gzip") - 1) {

2146  
NGX_DECLINED
;

2158 i‡(
	`ngx_memcmp
(
´
->
vÆue
.
d©a
, "gzip,", 5) != 0

2159 && 
	`ngx_hâp_gzù_ac˚±_ícodög
(&
´
->
vÆue
Ë!
NGX_OK
)

2161  
NGX_DECLINED
;

2164 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2166 i‡(
r
->
hódîs_ö
.
msõ6
 && 
˛cf
->
gzù_dißbÀ_msõ6
) {

2167  
NGX_DECLINED
;

2170 i‡(
r
->
hâp_vîsi⁄
 < 
˛cf
->
gzù_hâp_vîsi⁄
) {

2171  
NGX_DECLINED
;

2174 i‡(
r
->
hódîs_ö
.
vü
 =
NULL
) {

2175 
ok
;

2178 
p
 = 
˛cf
->
gzù_¥oxõd
;

2180 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_OFF
) {

2181  
NGX_DECLINED
;

2184 i‡(
p
 & 
NGX_HTTP_GZIP_PROXIED_ANY
) {

2185 
ok
;

2188 i‡(
r
->
hódîs_ö
.
auth‹iz©i⁄
 && (
p
 & 
NGX_HTTP_GZIP_PROXIED_AUTH
)) {

2189 
ok
;

2192 
e
 = 
r
->
hódîs_out
.
expúes
;

2194 i‡(
e
) {

2196 i‡(!(
p
 & 
NGX_HTTP_GZIP_PROXIED_EXPIRED
)) {

2197  
NGX_DECLINED
;

2200 
expúes
 = 
	`ngx_hâp_∑r£_time
(
e
->
vÆue
.
d©a
,É->vÆue.
Àn
);

2201 i‡(
expúes
 =
NGX_ERROR
) {

2202  
NGX_DECLINED
;

2205 
d
 = 
r
->
hódîs_out
.
d©e
;

2207 i‡(
d
) {

2208 
d©e
 = 
	`ngx_hâp_∑r£_time
(
d
->
vÆue
.
d©a
, d->vÆue.
Àn
);

2209 i‡(
d©e
 =
NGX_ERROR
) {

2210  
NGX_DECLINED
;

2214 
d©e
 = 
	`ngx_time
();

2217 i‡(
expúes
 < 
d©e
) {

2218 
ok
;

2221  
NGX_DECLINED
;

2224 
cc
 = &
r
->
hódîs_out
.
ˇche_c⁄åﬁ
;

2226 i‡(
cc
->
ñts
) {

2228 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_CACHE
)

2229 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_ˇche
,

2230 
NULL
)

2233 
ok
;

2236 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_STORE
)

2237 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_no_°‹e
,

2238 
NULL
)

2241 
ok
;

2244 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_PRIVATE
)

2245 && 
	`ngx_hâp_∑r£_mu…i_hódî_löes
(
cc
, &
ngx_hâp_gzù_¥iv©e
,

2246 
NULL
)

2249 
ok
;

2252  
NGX_DECLINED
;

2255 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_LM
Ë&& 
r
->
hódîs_out
.
œ°_modifõd
) {

2256  
NGX_DECLINED
;

2259 i‡((
p
 & 
NGX_HTTP_GZIP_PROXIED_NO_ETAG
Ë&& 
r
->
hódîs_out
.
ëag
) {

2260  
NGX_DECLINED
;

2263 
ok
:

2265 #i‡(
NGX_PCRE
)

2267 i‡(
˛cf
->
gzù_dißbÀ
 && 
r
->
hódîs_ö
.
u£r_agít
) {

2269 i‡(
	`ngx_ªgex_exec_¨øy
(
˛cf
->
gzù_dißbÀ
,

2270 &
r
->
hódîs_ö
.
u£r_agít
->
vÆue
,

2271 
r
->
c⁄√˘i⁄
->
log
)

2272 !
NGX_DECLINED
)

2274  
NGX_DECLINED
;

2280 
r
->
gzù_ok
 = 1;

2282  
NGX_OK
;

2283 
	}
}

2293 
ngx_öt_t


2294 
	$ngx_hâp_gzù_ac˚±_ícodög
(
ngx_°r_t
 *
´
)

2296 
u_ch¨
 *
p
, *
°¨t
, *
œ°
;

2298 
°¨t
 = 
´
->
d©a
;

2299 
œ°
 = 
°¨t
 + 
´
->
Àn
;

2302 
p
 = 
	`ngx_°rˇ£°∫
(
°¨t
, "gzip", 4 - 1);

2303 i‡(
p
 =
NULL
) {

2304  
NGX_DECLINED
;

2307 i‡(
p
 =
°¨t
 || (*(p - 1) == ',' || *(p - 1) == ' ')) {

2311 
°¨t
 = 
p
 + 4;

2314 
p
 += 4;

2316 
p
 < 
œ°
) {

2317 *
p
++) {

2319  
NGX_OK
;

2321 
qu™tôy
;

2325  
NGX_DECLINED
;

2329  
NGX_OK
;

2331 
qu™tôy
:

2333 
p
 < 
œ°
) {

2334 *
p
++) {

2337 
equÆ
;

2341  
NGX_DECLINED
;

2345  
NGX_OK
;

2347 
equÆ
:

2349 i‡(
p
 + 2 > 
œ°
 || *p++ != '=') {

2350  
NGX_DECLINED
;

2353 i‡(
	`ngx_hâp_gzù_qu™tôy
(
p
, 
œ°
) == 0) {

2354  
NGX_DECLINED
;

2357  
NGX_OK
;

2358 
	}
}

2361 
ngx_uöt_t


2362 
	$ngx_hâp_gzù_qu™tôy
(
u_ch¨
 *
p
, u_ch¨ *
œ°
)

2364 
u_ch¨
 
c
;

2365 
ngx_uöt_t
 
n
, 
q
;

2367 
c
 = *
p
++;

2369 i‡(
c
 != '0' && c != '1') {

2373 
q
 = (
c
 - '0') * 100;

2375 i‡(
p
 =
œ°
) {

2376  
q
;

2379 
c
 = *
p
++;

2381 i‡(
c
 == ',' || c == ' ') {

2382  
q
;

2385 i‡(
c
 != '.') {

2389 
n
 = 0;

2391 
p
 < 
œ°
) {

2392 
c
 = *
p
++;

2394 i‡(
c
 == ',' || c == ' ') {

2398 i‡(
c
 >= '0' && c <= '9') {

2399 
q
 +
c
 - '0';

2400 
n
++;

2407 i‡(
q
 > 100 || 
n
 > 3) {

2411  
q
;

2412 
	}
}

2417 
ngx_öt_t


2418 
	$ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

2419 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
p§
,

2420 
ngx_hâp_po°_subªque°_t
 *
ps
, 
ngx_uöt_t
 
Êags
)

2422 
ngx_time_t
 *
ç
;

2423 
ngx_c⁄√˘i⁄_t
 *
c
;

2424 
ngx_hâp_ªque°_t
 *
§
;

2425 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2426 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, *
p
;

2428 
r
->
maö
->
subªque°s
--;

2430 i‡(
r
->
maö
->
subªque°s
 == 0) {

2431 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2432 "subªque°†cy˛êwhûê¥o˚ssög \"%V\"", 
uri
);

2433 
r
->
maö
->
subªque°s
 = 1;

2434  
NGX_ERROR
;

2437 
§
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_t
));

2438 i‡(
§
 =
NULL
) {

2439  
NGX_ERROR
;

2442 
§
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

2444 
c
 = 
r
->
c⁄√˘i⁄
;

2445 
§
->
c⁄√˘i⁄
 = 
c
;

2447 
§
->
˘x
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2448 i‡(
§
->
˘x
 =
NULL
) {

2449  
NGX_ERROR
;

2452 i‡(
	`ngx_li°_öô
(&
§
->
hódîs_out
.
hódîs
, 
r
->
poﬁ
, 20,

2453 (
ngx_èbÀ_ñt_t
))

2454 !
NGX_OK
)

2456  
NGX_ERROR
;

2459 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2460 
§
->
maö_c⁄f
 = 
cscf
->
˘x
->main_conf;

2461 
§
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2462 
§
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2464 
§
->
poﬁ
 = 
r
->pool;

2466 
§
->
hódîs_ö
 = 
r
->headers_in;

2468 
	`ngx_hâp_˛ór_c⁄ã¡_Àngth
(
§
);

2469 
	`ngx_hâp_˛ór_ac˚±_ønges
(
§
);

2470 
	`ngx_hâp_˛ór_œ°_modifõd
(
§
);

2472 
§
->
ªque°_body
 = 
r
->request_body;

2474 #i‡(
NGX_HTTP_SPDY
)

2475 
§
->
•dy_°ªam
 = 
r
->spdy_stream;

2478 
§
->
mëhod
 = 
NGX_HTTP_GET
;

2479 
§
->
hâp_vîsi⁄
 = 
r
->http_version;

2481 
§
->
ªque°_löe
 = 
r
->request_line;

2482 
§
->
uri
 = *uri;

2484 i‡(
¨gs
) {

2485 
§
->
¨gs
 = *args;

2488 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2489 "hâ∞subªque° \"%V?%V\"", 
uri
, &
§
->
¨gs
);

2491 
§
->
subªque°_ö_mem‹y
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_IN_MEMORY
) != 0;

2492 
§
->
waôed
 = (
Êags
 & 
NGX_HTTP_SUBREQUEST_WAITED
) != 0;

2494 
§
->
u≈¨£d_uri
 = 
r
->unparsed_uri;

2495 
§
->
mëhod_«me
 = 
ngx_hâp_c‹e_gë_mëhod
;

2496 
§
->
hâp_¥Ÿocﬁ
 = 
r
->http_protocol;

2498 
	`ngx_hâp_£t_exãn
(
§
);

2500 
§
->
maö
 = 
r
->main;

2501 
§
->
∑ª¡
 = 
r
;

2502 
§
->
po°_subªque°
 = 
ps
;

2503 
§
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2504 
§
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_h™dÀr
;

2506 i‡(
c
->
d©a
 =
r
 &&Ñ->
po°p⁄ed
 =
NULL
) {

2507 
c
->
d©a
 = 
§
;

2510 
§
->
v¨übÀs
 = 
r
->variables;

2512 
§
->
log_h™dÀr
 = 
r
->log_handler;

2514 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

2515 i‡(
¥
 =
NULL
) {

2516  
NGX_ERROR
;

2519 
¥
->
ªque°
 = 
§
;

2520 
¥
->
out
 = 
NULL
;

2521 
¥
->
√xt
 = 
NULL
;

2523 i‡(
r
->
po°p⁄ed
) {

2524 
p
 = 
r
->
po°p⁄ed
;Ö->
√xt
;Ö =Ö->next) { }

2525 
p
->
√xt
 = 
¥
;

2528 
r
->
po°p⁄ed
 = 
¥
;

2531 
§
->
öã∫Æ
 = 1;

2533 
§
->
disˇrd_body
 = 
r
->discard_body;

2534 
§
->
ex≥˘_ã°ed
 = 1;

2535 
§
->
maö_fûãr_√ed_ö_mem‹y
 = 
r
->main_filter_need_in_memory;

2537 
§
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

2539 
ç
 = 
	`ngx_timeofday
();

2540 
§
->
°¨t_£c
 = 
ç
->
£c
;

2541 
§
->
°¨t_m£c
 = 
ç
->
m£c
;

2543 
r
->
maö
->
cou¡
++;

2545 *
p§
 = 
§
;

2547  
	`ngx_hâp_po°_ªque°
(
§
, 
NULL
);

2548 
	}
}

2551 
ngx_öt_t


2552 
	$ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

2553 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

2555 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2557 
r
->
uri_ch™ges
--;

2559 i‡(
r
->
uri_ch™ges
 == 0) {

2560 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2562 "whûêöã∫ÆlyÑedúe˘ögÅÿ\"%V\"", 
uri
);

2564 
r
->
maö
->
cou¡
++;

2565 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2566  
NGX_DONE
;

2569 
r
->
uri
 = *uri;

2571 i‡(
¨gs
) {

2572 
r
->
¨gs
 = *args;

2575 
	`ngx_°r_nuŒ
(&
r
->
¨gs
);

2578 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2579 "öã∫ÆÑedúe˘: \"%V?%V\"", 
uri
, &
r
->
¨gs
);

2581 
	`ngx_hâp_£t_exãn
(
r
);

2584 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2586 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2587 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2589 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2591 #i‡(
NGX_HTTP_CACHE
)

2592 
r
->
ˇche
 = 
NULL
;

2595 
r
->
öã∫Æ
 = 1;

2596 
r
->
vÆid_u≈¨£d_uri
 = 0;

2597 
r
->
add_uri_to_Æüs
 = 0;

2598 
r
->
maö
->
cou¡
++;

2600 
	`ngx_hâp_h™dÀr
(
r
);

2602  
NGX_DONE
;

2603 
	}
}

2606 
ngx_öt_t


2607 
	$ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
)

2609 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2610 
ngx_hâp_c‹e_loc_c⁄f_t
 **
˛cÂ
;

2611 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2613 
r
->
maö
->
cou¡
++;

2614 
r
->
uri_ch™ges
--;

2616 i‡(
r
->
uri_ch™ges
 == 0) {

2617 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2619 "whûêªdúe˘Åÿ«medÜoˇti⁄ \"%V\"", 
«me
);

2621 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2622  
NGX_DONE
;

2625 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2627 i‡(
cscf
->
«med_loˇti⁄s
) {

2629 
˛cÂ
 = 
cscf
->
«med_loˇti⁄s
; *clcfp; clcfp++) {

2631 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2632 "ã°Üoˇti⁄: \"%V\"", &(*
˛cÂ
)->
«me
);

2634 i‡(
«me
->
Àn
 !(*
˛cÂ
)->name.len

2635 || 
	`ngx_°∫cmp
(
«me
->
d©a
, (*
˛cÂ
)->«me.d©a,Çame->
Àn
) != 0)

2640 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2642 
«me
, &
r
->
uri
, &r->
¨gs
);

2644 
r
->
öã∫Æ
 = 1;

2645 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2646 
r
->
uri_ch™ged
 = 0;

2647 
r
->
loc_c⁄f
 = (*
˛cÂ
)->loc_conf;

2650 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

2652 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
r
);

2654 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2656 
r
->
pha£_h™dÀr
 = 
cmcf
->
pha£_ígöe
.
loˇti⁄_ªwrôe_ödex
;

2658 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2659 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2661  
NGX_DONE
;

2665 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2666 "couldÇŸ födÇamedÜoˇti⁄ \"%V\"", 
«me
);

2668 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2670  
NGX_DONE
;

2671 
	}
}

2674 
ngx_hâp_˛ónup_t
 *

2675 
	$ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
)

2677 
ngx_hâp_˛ónup_t
 *
˛n
;

2679 
r
 =Ñ->
maö
;

2681 
˛n
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_˛ónup_t
));

2682 i‡(
˛n
 =
NULL
) {

2683  
NULL
;

2686 i‡(
size
) {

2687 
˛n
->
d©a
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
size
);

2688 i‡(
˛n
->
d©a
 =
NULL
) {

2689  
NULL
;

2693 
˛n
->
d©a
 = 
NULL
;

2696 
˛n
->
h™dÀr
 = 
NULL
;

2697 
˛n
->
√xt
 = 
r
->
˛ónup
;

2699 
r
->
˛ónup
 = 
˛n
;

2701 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2702 "hâ∞˛ónu∞add: %p", 
˛n
);

2704  
˛n
;

2705 
	}
}

2708 
ngx_öt_t


2709 
	$ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

2710 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
)

2712 #i‡(
NGX_HAVE_OPENAT
)

2713 
u_ch¨
 *
p
;

2714 
ngx_°r_t
 
‰om
;

2716 
of
->
dißbÀ_symlöks
 = 
˛cf
->disable_symlinks;

2718 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NULL
) {

2719  
NGX_OK
;

2722 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
˛cf
->
dißbÀ_symlöks_‰om
, &
‰om
)

2723 !
NGX_OK
)

2725  
NGX_ERROR
;

2728 i‡(
‰om
.
Àn
 == 0

2729 || 
‰om
.
Àn
 > 
∑th
->len

2730 || 
	`ngx_memcmp
(
∑th
->
d©a
, 
‰om
.d©a, from.
Àn
) != 0)

2732  
NGX_OK
;

2735 i‡(
‰om
.
Àn
 =
∑th
->len) {

2736 
of
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

2737  
NGX_OK
;

2740 
p
 = 
∑th
->
d©a
 + 
‰om
.
Àn
;

2742 i‡(*
p
 == '/') {

2743 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
;

2744  
NGX_OK
;

2747 
p
--;

2749 i‡(*
p
 == '/') {

2750 
of
->
dißbÀ_symlöks_‰om
 = 
‰om
.
Àn
 - 1;

2754  
NGX_OK
;

2755 
	}
}

2758 
ngx_öt_t


2759 
	$ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2760 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

2761 
ªcursive
)

2763 
ngx_öt_t
 
rc
;

2764 
ngx_uöt_t
 
i
, 
found
;

2765 
ngx_èbÀ_ñt_t
 **
h
;

2767 i‡(
hódîs
 =
NULL
) {

2768  
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
vÆue
->
d©a
,

2769 
vÆue
->
Àn
, 
¥oxõs
,

2770 
ªcursive
);

2773 
i
 = 
hódîs
->
√…s
;

2774 
h
 = 
hódîs
->
ñts
;

2776 
rc
 = 
NGX_DECLINED
;

2778 
found
 = 0;

2780 
i
-- > 0) {

2781 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
h
[
i
]->
vÆue
.
d©a
,

2782 
h
[
i
]->
vÆue
.
Àn
, 
¥oxõs
,

2783 
ªcursive
);

2785 i‡(!
ªcursive
) {

2789 i‡(
rc
 =
NGX_DECLINED
 && 
found
) {

2790 
rc
 = 
NGX_DONE
;

2794 i‡(
rc
 !
NGX_OK
) {

2798 
found
 = 1;

2801  
rc
;

2802 
	}
}

2805 
ngx_öt_t


2806 
	$ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

2807 
u_ch¨
 *
xff
, 
size_t
 
xfÊí
, 
ngx_¨øy_t
 *
¥oxõs
, 
ªcursive
)

2809 
u_ch¨
 *
p
;

2810 
ö_addr_t
 
öaddr
;

2811 
ngx_öt_t
 
rc
;

2812 
ngx_addr_t
 
∑ddr
;

2813 
ngx_cidr_t
 *
cidr
;

2814 
ngx_uöt_t
 
Ámûy
, 
i
;

2815 #i‡(
NGX_HAVE_INET6
)

2816 
ngx_uöt_t
 
n
;

2817 
ö6_addr
 *
öaddr6
;

2820 #i‡(
NGX_SUPPRESS_WARN
)

2821 
öaddr
 = 0;

2822 #i‡(
NGX_HAVE_INET6
)

2823 
öaddr6
 = 
NULL
;

2827 
Ámûy
 = 
addr
->
sockaddr
->
ß_Ámûy
;

2829 i‡(
Ámûy
 =
AF_INET
) {

2830 
öaddr
 = ((
sockaddr_ö
 *Ë
addr
->
sockaddr
)->
sö_addr
.
s_addr
;

2833 #i‡(
NGX_HAVE_INET6
)

2834 i‡(
Ámûy
 =
AF_INET6
) {

2835 
öaddr6
 = &((
sockaddr_ö6
 *Ë
addr
->
sockaddr
)->
sö6_addr
;

2837 i‡(
	`IN6_IS_ADDR_V4MAPPED
(
öaddr6
)) {

2838 
Ámûy
 = 
AF_INET
;

2840 
p
 = 
öaddr6
->
s6_addr
;

2842 
öaddr
 = 
p
[12] << 24;

2843 
öaddr
 +
p
[13] << 16;

2844 
öaddr
 +
p
[14] << 8;

2845 
öaddr
 +
p
[15];

2847 
öaddr
 = 
	`ht⁄l
(inaddr);

2852 
cidr
 = 
¥oxõs
->
ñts
, 
i
 = 0; i <Öroxõs->
√…s
; i++) {

2853 i‡(
cidr
[
i
].
Ámûy
 != family) {

2854 
√xt
;

2857 
Ámûy
) {

2859 #i‡(
NGX_HAVE_INET6
)

2860 
AF_INET6
:

2861 
n
 = 0;Ç < 16;Ç++) {

2862 i‡((
öaddr6
->
s6_addr
[
n
] & 
cidr
[
i
].
u
.
ö6
.
mask
.s6_addr[n])

2863 !
cidr
[
i
].
u
.
ö6
.
addr
.
s6_addr
[
n
])

2865 
√xt
;

2871 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

2872 
AF_UNIX
:

2877 i‡((
öaddr
 & 
cidr
[
i
].
u
.
ö
.
mask
Ë!cidr[i].u.ö.
addr
) {

2878 
√xt
;

2883 
p
 = 
xff
 + 
xfÊí
 - 1;Ö > xff;Ö--, xfflen--) {

2884 i‡(*
p
 != ' ' && *p != ',') {

2889  ; 
p
 > 
xff
;Ö--) {

2890 i‡(*
p
 == ' ' || *p == ',') {

2891 
p
++;

2896 i‡(
	`ngx_∑r£_addr
(
r
->
poﬁ
, &
∑ddr
, 
p
, 
xfÊí
 - (∞- 
xff
)Ë!
NGX_OK
) {

2897  
NGX_DECLINED
;

2900 *
addr
 = 
∑ddr
;

2902 i‡(
ªcursive
 && 
p
 > 
xff
) {

2903 
rc
 = 
	`ngx_hâp_gë_f‹w¨ded_addr_öã∫Æ
(
r
, 
addr
, 
xff
, 
p
 - 1 - xff,

2904 
¥oxõs
, 1);

2906 i‡(
rc
 =
NGX_DECLINED
) {

2907  
NGX_DONE
;

2911  
rc
;

2914  
NGX_OK
;

2916 
√xt
:

2920  
NGX_DECLINED
;

2921 
	}
}

2925 
	$ngx_hâp_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

2927 *
rv
;

2928 *
mc⁄f
;

2929 
ngx_uöt_t
 
i
;

2930 
ngx_c⁄f_t
 
pcf
;

2931 
ngx_hâp_moduÀ_t
 *
moduÀ
;

2932 
sockaddr_ö
 *
sö
;

2933 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

2934 
ngx_hâp_li°í_›t_t
 
ls›t
;

2935 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

2936 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2938 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

2939 i‡(
˘x
 =
NULL
) {

2940  
NGX_CONF_ERROR
;

2943 
hâp_˘x
 = 
cf
->
˘x
;

2944 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

2948 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2949 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

2950  
NGX_CONF_ERROR
;

2955 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

2956 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

2957  
NGX_CONF_ERROR
;

2960 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

2961 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

2965 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

2967 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

2968 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

2969 i‡(
mc⁄f
 =
NULL
) {

2970  
NGX_CONF_ERROR
;

2973 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2976 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

2977 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

2978 i‡(
mc⁄f
 =
NULL
) {

2979  
NGX_CONF_ERROR
;

2982 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

2989 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2990 
cscf
->
˘x
 = ctx;

2993 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

2995 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

2996 i‡(
cscÂ
 =
NULL
) {

2997  
NGX_CONF_ERROR
;

3000 *
cscÂ
 = 
cscf
;

3005 
pcf
 = *
cf
;

3006 
cf
->
˘x
 = ctx;

3007 
cf
->
cmd_ty≥
 = 
NGX_HTTP_SRV_CONF
;

3009 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3011 *
cf
 = 
pcf
;

3013 i‡(
rv
 =
NGX_CONF_OK
 && !
cscf
->
li°í
) {

3014 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3016 
sö
 = &
ls›t
.
u
.
sockaddr_ö
;

3018 
sö
->
sö_Ámûy
 = 
AF_INET
;

3019 #i‡(
NGX_WIN32
)

3020 
sö
->
sö_p‹t
 = 
	`ht⁄s
(80);

3022 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
	`gëuid
() == 0) ? 80 : 8000);

3024 
sö
->
sö_addr
.
s_addr
 = 
INADDR_ANY
;

3026 
ls›t
.
sockÀn
 = (
sockaddr_ö
);

3028 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3029 
ls›t
.
rcvbuf
 = -1;

3030 
ls›t
.
¢dbuf
 = -1;

3031 #i‡(
NGX_HAVE_SETFIB
)

3032 
ls›t
.
£tfib
 = -1;

3034 
ls›t
.
wûdˇrd
 = 1;

3036 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

3037 
NGX_SOCKADDR_STRLEN
, 1);

3039 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë!
NGX_OK
) {

3040  
NGX_CONF_ERROR
;

3044  
rv
;

3045 
	}
}

3049 
	$ngx_hâp_c‹e_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

3051 *
rv
;

3052 
u_ch¨
 *
mod
;

3053 
size_t
 
Àn
;

3054 
ngx_°r_t
 *
vÆue
, *
«me
;

3055 
ngx_uöt_t
 
i
;

3056 
ngx_c⁄f_t
 
ßve
;

3057 
ngx_hâp_moduÀ_t
 *
moduÀ
;

3058 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

3059 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, *
p˛cf
;

3061 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

3062 i‡(
˘x
 =
NULL
) {

3063  
NGX_CONF_ERROR
;

3066 
p˘x
 = 
cf
->
˘x
;

3067 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

3068 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

3070 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

3071 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

3072  
NGX_CONF_ERROR
;

3075 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

3076 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

3080 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

3082 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

3083 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =

3084 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

3085 i‡(
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] =
NULL
) {

3086  
NGX_CONF_ERROR
;

3091 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3092 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

3094 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3096 i‡(
cf
->
¨gs
->
√…s
 == 3) {

3098 
Àn
 = 
vÆue
[1].len;

3099 
mod
 = 
vÆue
[1].
d©a
;

3100 
«me
 = &
vÆue
[2];

3102 i‡(
Àn
 =1 && 
mod
[0] == '=') {

3104 
˛cf
->
«me
 = *name;

3105 
˛cf
->
exa˘_m©ch
 = 1;

3107 } i‡(
Àn
 =2 && 
mod
[0] == '^' && mod[1] == '~') {

3109 
˛cf
->
«me
 = *name;

3110 
˛cf
->
n‹egex
 = 1;

3112 } i‡(
Àn
 =1 && 
mod
[0] == '~') {

3114 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3115  
NGX_CONF_ERROR
;

3118 } i‡(
Àn
 =2 && 
mod
[0] == '~' && mod[1] == '*') {

3120 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3121  
NGX_CONF_ERROR
;

3125 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3126 "övÆidÜoˇti⁄ modifõ∏\"%V\"", &
vÆue
[1]);

3127  
NGX_CONF_ERROR
;

3132 
«me
 = &
vÆue
[1];

3134 i‡(
«me
->
d©a
[0] == '=') {

3136 
˛cf
->
«me
.
Àn
 =Çame->len - 1;

3137 
˛cf
->
«me
.
d©a
 =Çame->data + 1;

3138 
˛cf
->
exa˘_m©ch
 = 1;

3140 } i‡(
«me
->
d©a
[0] == '^' &&Çame->data[1] == '~') {

3142 
˛cf
->
«me
.
Àn
 =Çame->len - 2;

3143 
˛cf
->
«me
.
d©a
 =Çame->data + 2;

3144 
˛cf
->
n‹egex
 = 1;

3146 } i‡(
«me
->
d©a
[0] == '~') {

3148 
«me
->
Àn
--;

3149 
«me
->
d©a
++;

3151 i‡(
«me
->
d©a
[0] == '*') {

3153 
«me
->
Àn
--;

3154 
«me
->
d©a
++;

3156 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 1Ë!
NGX_OK
) {

3157  
NGX_CONF_ERROR
;

3161 i‡(
	`ngx_hâp_c‹e_ªgex_loˇti⁄
(
cf
, 
˛cf
, 
«me
, 0Ë!
NGX_OK
) {

3162  
NGX_CONF_ERROR
;

3168 
˛cf
->
«me
 = *name;

3170 i‡(
«me
->
d©a
[0] == '@') {

3171 
˛cf
->
«med
 = 1;

3176 
p˛cf
 = 
p˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

3178 i‡(
p˛cf
->
«me
.
Àn
) {

3183 
˛cf
->
¥ev_loˇti⁄
 = 
p˛cf
;

3186 i‡(
p˛cf
->
exa˘_m©ch
) {

3187 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3190 &
˛cf
->
«me
, &
p˛cf
->name);

3191  
NGX_CONF_ERROR
;

3194 i‡(
p˛cf
->
«med
) {

3195 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3198 &
˛cf
->
«me
, &
p˛cf
->name);

3199  
NGX_CONF_ERROR
;

3202 i‡(
˛cf
->
«med
) {

3203 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3206 &
˛cf
->
«me
);

3207  
NGX_CONF_ERROR
;

3210 
Àn
 = 
p˛cf
->
«me
.len;

3212 #i‡(
NGX_PCRE
)

3213 i‡(
˛cf
->
ªgex
 =
NULL


3214 && 
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3216 i‡(
	`ngx_°∫cmp
(
˛cf
->
«me
.
d©a
, 
p˛cf
->«me.d©a, 
Àn
) != 0)

3219 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3221 &
˛cf
->
«me
, &
p˛cf
->name);

3222  
NGX_CONF_ERROR
;

3226 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

3227  
NGX_CONF_ERROR
;

3230 
ßve
 = *
cf
;

3231 
cf
->
˘x
 = ctx;

3232 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LOC_CONF
;

3234 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3236 *
cf
 = 
ßve
;

3238  
rv
;

3239 
	}
}

3242 
ngx_öt_t


3243 
	$ngx_hâp_c‹e_ªgex_loˇti⁄
(
ngx_c⁄f_t
 *
cf
, 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
,

3244 
ngx_°r_t
 *
ªgex
, 
ngx_uöt_t
 
ˇ£Àss
)

3246 #i‡(
NGX_PCRE
)

3247 
ngx_ªgex_compûe_t
 
rc
;

3248 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

3250 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

3252 
rc
.
∑âîn
 = *
ªgex
;

3253 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

3254 
rc
.
îr
.
d©a
 = 
îr°r
;

3256 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

3257 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

3259 
rc
.
›ti⁄s
 = 
ˇ£Àss
 ? 
NGX_REGEX_CASELESS
 : 0;

3262 
˛cf
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

3263 i‡(
˛cf
->
ªgex
 =
NULL
) {

3264  
NGX_ERROR
;

3267 
˛cf
->
«me
 = *
ªgex
;

3269  
NGX_OK
;

3273 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3275 
ªgex
);

3276  
NGX_ERROR
;

3279 
	}
}

3283 
	$ngx_hâp_c‹e_ty≥s
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3285 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3287 *
rv
;

3288 
ngx_c⁄f_t
 
ßve
;

3290 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3291 
˛cf
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 64, (
ngx_hash_key_t
));

3292 i‡(
˛cf
->
ty≥s
 =
NULL
) {

3293  
NGX_CONF_ERROR
;

3297 
ßve
 = *
cf
;

3298 
cf
->
h™dÀr
 = 
ngx_hâp_c‹e_ty≥
;

3299 
cf
->
h™dÀr_c⁄f
 = 
c⁄f
;

3301 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

3303 *
cf
 = 
ßve
;

3305  
rv
;

3306 
	}
}

3310 
	$ngx_hâp_c‹e_ty≥
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
dummy
, *
c⁄f
)

3312 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

3314 
ngx_°r_t
 *
vÆue
, *
c⁄ã¡_ty≥
, *
ﬁd
;

3315 
ngx_uöt_t
 
i
, 
n
, 
hash
;

3316 
ngx_hash_key_t
 *
ty≥
;

3318 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3320 i‡(
	`ngx_°rcmp
(
vÆue
[0].
d©a
, "include") == 0) {

3321 i‡(
cf
->
¨gs
->
√…s
 != 2) {

3322 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3325  
NGX_CONF_ERROR
;

3328  
	`ngx_c⁄f_ö˛ude
(
cf
, 
dummy
, 
c⁄f
);

3331 
c⁄ã¡_ty≥
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_°r_t
));

3332 i‡(
c⁄ã¡_ty≥
 =
NULL
) {

3333  
NGX_CONF_ERROR
;

3336 *
c⁄ã¡_ty≥
 = 
vÆue
[0];

3338 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

3340 
hash
 = 
	`ngx_hash_°æow
(
vÆue
[
i
].
d©a
, vÆue[i].d©a, vÆue[i].
Àn
);

3342 
ty≥
 = 
˛cf
->
ty≥s
->
ñts
;

3343 
n
 = 0;Ç < 
˛cf
->
ty≥s
->
√…s
;Ç++) {

3344 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, 
ty≥
[
n
].
key
.data) == 0) {

3345 
ﬁd
 = 
ty≥
[
n
].
vÆue
;

3346 
ty≥
[
n
].
vÆue
 = 
c⁄ã¡_ty≥
;

3348 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

3352 &
vÆue
[
i
], 
c⁄ã¡_ty≥
, 
ﬁd
);

3353 
√xt
;

3358 
ty≥
 = 
	`ngx_¨øy_push
(
˛cf
->
ty≥s
);

3359 i‡(
ty≥
 =
NULL
) {

3360  
NGX_CONF_ERROR
;

3363 
ty≥
->
key
 = 
vÆue
[
i
];

3364 
ty≥
->
key_hash
 = 
hash
;

3365 
ty≥
->
vÆue
 = 
c⁄ã¡_ty≥
;

3367 
√xt
:

3371  
NGX_CONF_OK
;

3372 
	}
}

3375 
ngx_öt_t


3376 
	$ngx_hâp_c‹e_¥ec⁄figuøti⁄
(
ngx_c⁄f_t
 *
cf
)

3378  
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
cf
);

3379 
	}
}

3383 
	$ngx_hâp_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3385 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3387 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_maö_c⁄f_t
));

3388 i‡(
cmcf
 =
NULL
) {

3389  
NULL
;

3392 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

3393 (
ngx_hâp_c‹e_§v_c⁄f_t
 *))

3394 !
NGX_OK
)

3396  
NULL
;

3399 
cmcf
->
£rvî_«mes_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3400 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3402 
cmcf
->
v¨übÀs_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3403 
cmcf
->
v¨übÀs_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3405  
cmcf
;

3406 
	}
}

3410 
	$ngx_hâp_c‹e_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

3412 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
 = 
c⁄f
;

3414 i‡(
cmcf
->
£rvî_«mes_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3415 
cmcf
->
£rvî_«mes_hash_max_size
 = 512;

3418 i‡(
cmcf
->
£rvî_«mes_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3419 
cmcf
->
£rvî_«mes_hash_buckë_size
 = 
ngx_ˇchñöe_size
;

3422 
cmcf
->
£rvî_«mes_hash_buckë_size
 =

3423 
	`ngx_Æign
(
cmcf
->
£rvî_«mes_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3426 i‡(
cmcf
->
v¨übÀs_hash_max_size
 =
NGX_CONF_UNSET_UINT
) {

3427 
cmcf
->
v¨übÀs_hash_max_size
 = 512;

3430 i‡(
cmcf
->
v¨übÀs_hash_buckë_size
 =
NGX_CONF_UNSET_UINT
) {

3431 
cmcf
->
v¨übÀs_hash_buckë_size
 = 64;

3434 
cmcf
->
v¨übÀs_hash_buckë_size
 =

3435 
	`ngx_Æign
(
cmcf
->
v¨übÀs_hash_buckë_size
, 
ngx_ˇchñöe_size
);

3437 i‡(
cmcf
->
nˇ±uªs
) {

3438 
cmcf
->
nˇ±uªs
 = (cmcf->ncaptures + 1) * 3;

3441  
NGX_CONF_OK
;

3442 
	}
}

3446 
	$ngx_hâp_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3448 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3450 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_§v_c⁄f_t
));

3451 i‡(
cscf
 =
NULL
) {

3452  
NULL
;

3461 i‡(
	`ngx_¨øy_öô
(&
cscf
->
£rvî_«mes
, 
cf
->
ãmp_poﬁ
, 4,

3462 (
ngx_hâp_£rvî_«me_t
))

3463 !
NGX_OK
)

3465  
NULL
;

3468 
cscf
->
c⁄√˘i⁄_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3469 
cscf
->
ªque°_poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

3470 
cscf
->
˛õ¡_hódî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3471 
cscf
->
˛õ¡_hódî_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3472 
cscf
->
ign‹e_övÆid_hódîs
 = 
NGX_CONF_UNSET
;

3473 
cscf
->
mîge_¶ashes
 = 
NGX_CONF_UNSET
;

3474 
cscf
->
undîsc‹es_ö_hódîs
 = 
NGX_CONF_UNSET
;

3476  
cscf
;

3477 
	}
}

3481 
	$ngx_hâp_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3483 
ngx_hâp_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3484 
ngx_hâp_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

3486 
ngx_°r_t
 
«me
;

3487 
ngx_hâp_£rvî_«me_t
 *
¢
;

3491 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
c⁄√˘i⁄_poﬁ_size
,

3492 
¥ev
->
c⁄√˘i⁄_poﬁ_size
, 256);

3493 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªque°_poﬁ_size
,

3494 
¥ev
->
ªque°_poﬁ_size
, 4096);

3495 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_hódî_timeout
,

3496 
¥ev
->
˛õ¡_hódî_timeout
, 60000);

3497 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_hódî_buf„r_size
,

3498 
¥ev
->
˛õ¡_hódî_buf„r_size
, 1024);

3499 
	`ngx_c⁄f_mîge_bufs_vÆue
(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
,

3500 
¥ev
->
œrge_˛õ¡_hódî_buf„rs
,

3503 i‡(
c⁄f
->
œrge_˛õ¡_hódî_buf„rs
.
size
 < c⁄f->
c⁄√˘i⁄_poﬁ_size
) {

3504 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3507  
NGX_CONF_ERROR
;

3510 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ign‹e_övÆid_hódîs
,

3511 
¥ev
->
ign‹e_övÆid_hódîs
, 1);

3513 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
mîge_¶ashes
, 
¥ev
->merge_slashes, 1);

3515 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
undîsc‹es_ö_hódîs
,

3516 
¥ev
->
undîsc‹es_ö_hódîs
, 0);

3518 i‡(
c⁄f
->
£rvî_«mes
.
√…s
 == 0) {

3520 
¢
 = 
	`ngx_¨øy_push
(&
c⁄f
->
£rvî_«mes
);

3521 #i‡(
NGX_PCRE
)

3522 
¢
->
ªgex
 = 
NULL
;

3524 
¢
->
£rvî
 = 
c⁄f
;

3525 
	`ngx_°r_£t
(&
¢
->
«me
, "");

3528 
¢
 = 
c⁄f
->
£rvî_«mes
.
ñts
;

3529 
«me
 = 
¢
[0].name;

3531 #i‡(
NGX_PCRE
)

3532 i‡(
¢
->
ªgex
) {

3533 
«me
.
Àn
++;

3534 
«me
.
d©a
--;

3538 i‡(
«me
.
d©a
[0] == '.') {

3539 
«me
.
Àn
--;

3540 
«me
.
d©a
++;

3543 
c⁄f
->
£rvî_«me
.
Àn
 = 
«me
.len;

3544 
c⁄f
->
£rvî_«me
.
d©a
 = 
	`ngx_p°rdup
(
cf
->
poﬁ
, &
«me
);

3545 i‡(
c⁄f
->
£rvî_«me
.
d©a
 =
NULL
) {

3546  
NGX_CONF_ERROR
;

3549  
NGX_CONF_OK
;

3550 
	}
}

3554 
	$ngx_hâp_c‹e_¸óã_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
)

3556 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3558 
˛cf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c‹e_loc_c⁄f_t
));

3559 i‡(
˛cf
 =
NULL
) {

3560  
NULL
;

3583 
˛cf
->
˛õ¡_max_body_size
 = 
NGX_CONF_UNSET
;

3584 
˛cf
->
˛õ¡_body_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

3585 
˛cf
->
˛õ¡_body_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3586 
˛cf
->
ßtisfy
 = 
NGX_CONF_UNSET_UINT
;

3587 
˛cf
->
if_modifõd_sö˚
 = 
NGX_CONF_UNSET_UINT
;

3588 
˛cf
->
max_ønges
 = 
NGX_CONF_UNSET_UINT
;

3589 
˛cf
->
˛õ¡_body_ö_fûe_⁄ly
 = 
NGX_CONF_UNSET_UINT
;

3590 
˛cf
->
˛õ¡_body_ö_sögÀ_buf„r
 = 
NGX_CONF_UNSET
;

3591 
˛cf
->
öã∫Æ
 = 
NGX_CONF_UNSET
;

3592 
˛cf
->
£ndfûe
 = 
NGX_CONF_UNSET
;

3593 
˛cf
->
£ndfûe_max_chunk
 = 
NGX_CONF_UNSET_SIZE
;

3594 #i‡(
NGX_HAVE_FILE_AIO
)

3595 
˛cf
->
aio
 = 
NGX_CONF_UNSET
;

3597 
˛cf
->
ªad_ahód
 = 
NGX_CONF_UNSET_SIZE
;

3598 
˛cf
->
dúe˘io
 = 
NGX_CONF_UNSET
;

3599 
˛cf
->
dúe˘io_Æignmít
 = 
NGX_CONF_UNSET
;

3600 
˛cf
->
t˝_n›ush
 = 
NGX_CONF_UNSET
;

3601 
˛cf
->
t˝_nodñay
 = 
NGX_CONF_UNSET
;

3602 
˛cf
->
£nd_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3603 
˛cf
->
£nd_low©
 = 
NGX_CONF_UNSET_SIZE
;

3604 
˛cf
->
po°p⁄e_ouçut
 = 
NGX_CONF_UNSET_SIZE
;

3605 
˛cf
->
limô_øã
 = 
NGX_CONF_UNSET_SIZE
;

3606 
˛cf
->
limô_øã_a·î
 = 
NGX_CONF_UNSET_SIZE
;

3607 
˛cf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3608 
˛cf
->
kì∑live_hódî
 = 
NGX_CONF_UNSET
;

3609 
˛cf
->
kì∑live_ªque°s
 = 
NGX_CONF_UNSET_UINT
;

3610 
˛cf
->
lögîög_˛o£
 = 
NGX_CONF_UNSET_UINT
;

3611 
˛cf
->
lögîög_time
 = 
NGX_CONF_UNSET_MSEC
;

3612 
˛cf
->
lögîög_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3613 
˛cf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

3614 
˛cf
->
ª£t_timedout_c⁄√˘i⁄
 = 
NGX_CONF_UNSET
;

3615 
˛cf
->
£rvî_«me_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3616 
˛cf
->
p‹t_ö_ªdúe˘
 = 
NGX_CONF_UNSET
;

3617 
˛cf
->
msõ_∑ddög
 = 
NGX_CONF_UNSET
;

3618 
˛cf
->
msõ_ª‰esh
 = 
NGX_CONF_UNSET
;

3619 
˛cf
->
log_nŸ_found
 = 
NGX_CONF_UNSET
;

3620 
˛cf
->
log_subªque°
 = 
NGX_CONF_UNSET
;

3621 
˛cf
->
ªcursive_îr‹_∑ges
 = 
NGX_CONF_UNSET
;

3622 
˛cf
->
£rvî_tokís
 = 
NGX_CONF_UNSET
;

3623 
˛cf
->
chunked_å™s„r_ícodög
 = 
NGX_CONF_UNSET
;

3624 
˛cf
->
ëag
 = 
NGX_CONF_UNSET
;

3625 
˛cf
->
ty≥s_hash_max_size
 = 
NGX_CONF_UNSET_UINT
;

3626 
˛cf
->
ty≥s_hash_buckë_size
 = 
NGX_CONF_UNSET_UINT
;

3628 
˛cf
->
›í_fûe_ˇche
 = 
NGX_CONF_UNSET_PTR
;

3629 
˛cf
->
›í_fûe_ˇche_vÆid
 = 
NGX_CONF_UNSET
;

3630 
˛cf
->
›í_fûe_ˇche_mö_u£s
 = 
NGX_CONF_UNSET_UINT
;

3631 
˛cf
->
›í_fûe_ˇche_îr‹s
 = 
NGX_CONF_UNSET
;

3632 
˛cf
->
›í_fûe_ˇche_evíts
 = 
NGX_CONF_UNSET
;

3634 #i‡(
NGX_HTTP_GZIP
)

3635 
˛cf
->
gzù_v¨y
 = 
NGX_CONF_UNSET
;

3636 
˛cf
->
gzù_hâp_vîsi⁄
 = 
NGX_CONF_UNSET_UINT
;

3637 #i‡(
NGX_PCRE
)

3638 
˛cf
->
gzù_dißbÀ
 = 
NGX_CONF_UNSET_PTR
;

3640 
˛cf
->
gzù_dißbÀ_msõ6
 = 3;

3641 #i‡(
NGX_HTTP_DEGRADATION
)

3642 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 3;

3646 #i‡(
NGX_HAVE_OPENAT
)

3647 
˛cf
->
dißbÀ_symlöks
 = 
NGX_CONF_UNSET_UINT
;

3648 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NGX_CONF_UNSET_PTR
;

3651  
˛cf
;

3652 
	}
}

3655 
ngx_°r_t
 
	gngx_hâp_c‹e_ãxt_html_ty≥
 = 
ngx_°rög
("text/html");

3656 
ngx_°r_t
 
	gngx_hâp_c‹e_image_gif_ty≥
 = 
ngx_°rög
("image/gif");

3657 
ngx_°r_t
 
	gngx_hâp_c‹e_image_j≥g_ty≥
 = 
ngx_°rög
("image/jpeg");

3659 
ngx_hash_key_t
 
	gngx_hâp_c‹e_deÁu…_ty≥s
[] = {

3660 { 
ngx_°rög
("html"), 0, &
ngx_hâp_c‹e_ãxt_html_ty≥
 },

3661 { 
ngx_°rög
("gif"), 0, &
ngx_hâp_c‹e_image_gif_ty≥
 },

3662 { 
ngx_°rög
("jpg"), 0, &
ngx_hâp_c‹e_image_j≥g_ty≥
 },

3663 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

3668 
	$ngx_hâp_c‹e_mîge_loc_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

3670 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

3671 
ngx_hâp_c‹e_loc_c⁄f_t
 *
c⁄f
 = 
chûd
;

3673 
ngx_uöt_t
 
i
;

3674 
ngx_hash_key_t
 *
ty≥
;

3675 
ngx_hash_öô_t
 
ty≥s_hash
;

3677 i‡(
c⁄f
->
roŸ
.
d©a
 =
NULL
) {

3679 
c⁄f
->
Æüs
 = 
¥ev
->alias;

3680 
c⁄f
->
roŸ
 = 
¥ev
->root;

3681 
c⁄f
->
roŸ_Àngths
 = 
¥ev
->root_lengths;

3682 
c⁄f
->
roŸ_vÆues
 = 
¥ev
->root_values;

3684 i‡(
¥ev
->
roŸ
.
d©a
 =
NULL
) {

3685 
	`ngx_°r_£t
(&
c⁄f
->
roŸ
, "html");

3687 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
c⁄f
->
roŸ
, 0Ë!
NGX_OK
) {

3688  
NGX_CONF_ERROR
;

3693 i‡(
c⁄f
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3694 
c⁄f
->
po°_a˘i⁄
 = 
¥ev
->post_action;

3697 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_max_size
,

3698 
¥ev
->
ty≥s_hash_max_size
, 1024);

3700 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ty≥s_hash_buckë_size
,

3701 
¥ev
->
ty≥s_hash_buckë_size
,

3702 
ngx_ˇchñöe_size
);

3704 
c⁄f
->
ty≥s_hash_buckë_size
 = 
	`ngx_Æign
(conf->types_hash_bucket_size,

3705 
ngx_ˇchñöe_size
);

3712 i‡(
¥ev
->
ty≥s
 &&Öªv->
ty≥s_hash
.
buckës
 =
NULL
) {

3714 
ty≥s_hash
.
hash
 = &
¥ev
->types_hash;

3715 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3716 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3717 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3718 
ty≥s_hash
.
«me
 = "types_hash";

3719 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3720 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3722 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
¥ev
->
ty≥s
->
ñts
,Öªv->ty≥s->
√…s
)

3723 !
NGX_OK
)

3725  
NGX_CONF_ERROR
;

3729 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3730 
c⁄f
->
ty≥s
 = 
¥ev
->types;

3731 
c⁄f
->
ty≥s_hash
 = 
¥ev
->types_hash;

3734 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3735 
c⁄f
->
ty≥s
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 3, (
ngx_hash_key_t
));

3736 i‡(
c⁄f
->
ty≥s
 =
NULL
) {

3737  
NGX_CONF_ERROR
;

3740 
i
 = 0; 
ngx_hâp_c‹e_deÁu…_ty≥s
[i].
key
.
Àn
; i++) {

3741 
ty≥
 = 
	`ngx_¨øy_push
(
c⁄f
->
ty≥s
);

3742 i‡(
ty≥
 =
NULL
) {

3743  
NGX_CONF_ERROR
;

3746 
ty≥
->
key
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].key;

3747 
ty≥
->
key_hash
 =

3748 
	`ngx_hash_key_lc
(
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
d©a
,

3749 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].
key
.
Àn
);

3750 
ty≥
->
vÆue
 = 
ngx_hâp_c‹e_deÁu…_ty≥s
[
i
].value;

3754 i‡(
c⁄f
->
ty≥s_hash
.
buckës
 =
NULL
) {

3756 
ty≥s_hash
.
hash
 = &
c⁄f
->types_hash;

3757 
ty≥s_hash
.
key
 = 
ngx_hash_key_lc
;

3758 
ty≥s_hash
.
max_size
 = 
c⁄f
->
ty≥s_hash_max_size
;

3759 
ty≥s_hash
.
buckë_size
 = 
c⁄f
->
ty≥s_hash_buckë_size
;

3760 
ty≥s_hash
.
«me
 = "types_hash";

3761 
ty≥s_hash
.
poﬁ
 = 
cf
->pool;

3762 
ty≥s_hash
.
ãmp_poﬁ
 = 
NULL
;

3764 i‡(
	`ngx_hash_öô
(&
ty≥s_hash
, 
c⁄f
->
ty≥s
->
ñts
, c⁄f->ty≥s->
√…s
)

3765 !
NGX_OK
)

3767  
NGX_CONF_ERROR
;

3771 i‡(
c⁄f
->
îr‹_log
 =
NULL
) {

3772 i‡(
¥ev
->
îr‹_log
) {

3773 
c⁄f
->
îr‹_log
 = 
¥ev
->error_log;

3775 
c⁄f
->
îr‹_log
 = &
cf
->
cy˛e
->
√w_log
;

3779 i‡(
c⁄f
->
îr‹_∑ges
 =
NULL
 && 
¥ev
->error_pages) {

3780 
c⁄f
->
îr‹_∑ges
 = 
¥ev
->error_pages;

3783 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
deÁu…_ty≥
,

3784 
¥ev
->
deÁu…_ty≥
, "text/plain");

3786 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
˛õ¡_max_body_size
,

3787 
¥ev
->
˛õ¡_max_body_size
, 1 * 1024 * 1024);

3788 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_body_buf„r_size
,

3789 
¥ev
->
˛õ¡_body_buf„r_size
,

3790 (
size_t
Ë2 * 
ngx_∑gesize
);

3791 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
˛õ¡_body_timeout
,

3792 
¥ev
->
˛õ¡_body_timeout
, 60000);

3794 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
kì∑live_dißbÀ
,

3795 
¥ev
->
kì∑live_dißbÀ
,

3796 (
NGX_CONF_BITMASK_SET


3797 |
NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
));

3798 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
ßtisfy
, 
¥ev
->satisfy,

3799 
NGX_HTTP_SATISFY_ALL
);

3800 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
if_modifõd_sö˚
, 
¥ev
->if_modified_since,

3801 
NGX_HTTP_IMS_EXACT
);

3802 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
max_ønges
, 
¥ev
->max_ranges,

3803 
NGX_MAX_INT32_VALUE
);

3804 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
˛õ¡_body_ö_fûe_⁄ly
,

3805 
¥ev
->
˛õ¡_body_ö_fûe_⁄ly
,

3806 
NGX_HTTP_REQUEST_BODY_FILE_OFF
);

3807 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
˛õ¡_body_ö_sögÀ_buf„r
,

3808 
¥ev
->
˛õ¡_body_ö_sögÀ_buf„r
, 0);

3809 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
öã∫Æ
, 
¥ev
->internal, 0);

3810 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ndfûe
, 
¥ev
->sendfile, 0);

3811 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£ndfûe_max_chunk
,

3812 
¥ev
->
£ndfûe_max_chunk
, 0);

3813 #i‡(
NGX_HAVE_FILE_AIO
)

3814 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
aio
, 
¥ev
->aio, 
NGX_HTTP_AIO_OFF
);

3816 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
ªad_ahód
, 
¥ev
->read_ahead, 0);

3817 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io
, 
¥ev
->directio,

3818 
NGX_OPEN_FILE_DIRECTIO_OFF
);

3819 
	`ngx_c⁄f_mîge_off_vÆue
(
c⁄f
->
dúe˘io_Æignmít
, 
¥ev
->directio_alignment,

3821 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_n›ush
, 
¥ev
->tcp_nopush, 0);

3822 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
t˝_nodñay
, 
¥ev
->tcp_nodelay, 1);

3824 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
£nd_timeout
, 
¥ev
->send_timeout, 60000);

3825 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
£nd_low©
, 
¥ev
->send_lowat, 0);

3826 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
po°p⁄e_ouçut
, 
¥ev
->postpone_output,

3828 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã
, 
¥ev
->limit_rate, 0);

3829 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
limô_øã_a·î
, 
¥ev
->limit_rate_after,

3831 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

3832 
¥ev
->
kì∑live_timeout
, 75000);

3833 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
kì∑live_hódî
,

3834 
¥ev
->
kì∑live_hódî
, 0);

3835 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
kì∑live_ªque°s
,

3836 
¥ev
->
kì∑live_ªque°s
, 100);

3837 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
lögîög_˛o£
,

3838 
¥ev
->
lögîög_˛o£
, 
NGX_HTTP_LINGERING_ON
);

3839 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_time
,

3840 
¥ev
->
lögîög_time
, 30000);

3841 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
lögîög_timeout
,

3842 
¥ev
->
lögîög_timeout
, 5000);

3843 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
,

3844 
¥ev
->
ªsﬁvî_timeout
, 30000);

3846 i‡(
c⁄f
->
ªsﬁvî
 =
NULL
) {

3848 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3855 
¥ev
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, 
NULL
, 0);

3856 i‡(
¥ev
->
ªsﬁvî
 =
NULL
) {

3857  
NGX_CONF_ERROR
;

3861 
c⁄f
->
ªsﬁvî
 = 
¥ev
->resolver;

3864 i‡(
	`ngx_c⁄f_mîge_∑th_vÆue
(
cf
, &
c⁄f
->
˛õ¡_body_ãmp_∑th
,

3865 
¥ev
->
˛õ¡_body_ãmp_∑th
,

3866 &
ngx_hâp_˛õ¡_ãmp_∑th
)

3867 !
NGX_OK
)

3869  
NGX_CONF_ERROR
;

3872 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ª£t_timedout_c⁄√˘i⁄
,

3873 
¥ev
->
ª£t_timedout_c⁄√˘i⁄
, 0);

3874 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_«me_ö_ªdúe˘
,

3875 
¥ev
->
£rvî_«me_ö_ªdúe˘
, 0);

3876 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
p‹t_ö_ªdúe˘
, 
¥ev
->port_in_redirect, 1);

3877 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_∑ddög
, 
¥ev
->msie_padding, 1);

3878 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
msõ_ª‰esh
, 
¥ev
->msie_refresh, 0);

3879 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_nŸ_found
, 
¥ev
->log_not_found, 1);

3880 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
log_subªque°
, 
¥ev
->log_subrequest, 0);

3881 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ªcursive_îr‹_∑ges
,

3882 
¥ev
->
ªcursive_îr‹_∑ges
, 0);

3883 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£rvî_tokís
, 
¥ev
->server_tokens, 1);

3884 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
chunked_å™s„r_ícodög
,

3885 
¥ev
->
chunked_å™s„r_ícodög
, 1);

3886 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
ëag
, 
¥ev
->etag, 1);

3888 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
›í_fûe_ˇche
,

3889 
¥ev
->
›í_fûe_ˇche
, 
NULL
);

3891 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_vÆid
,

3892 
¥ev
->
›í_fûe_ˇche_vÆid
, 60);

3894 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
›í_fûe_ˇche_mö_u£s
,

3895 
¥ev
->
›í_fûe_ˇche_mö_u£s
, 1);

3897 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_îr‹s
,

3898 
¥ev
->
›í_fûe_ˇche_îr‹s
, 0);

3900 
	`ngx_c⁄f_mîge_£c_vÆue
(
c⁄f
->
›í_fûe_ˇche_evíts
,

3901 
¥ev
->
›í_fûe_ˇche_evíts
, 0);

3902 #i‡(
NGX_HTTP_GZIP
)

3904 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
gzù_v¨y
, 
¥ev
->gzip_vary, 0);

3905 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
gzù_hâp_vîsi⁄
, 
¥ev
->gzip_http_version,

3906 
NGX_HTTP_VERSION_11
);

3907 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
gzù_¥oxõd
, 
¥ev
->gzip_proxied,

3908 (
NGX_CONF_BITMASK_SET
|
NGX_HTTP_GZIP_PROXIED_OFF
));

3910 #i‡(
NGX_PCRE
)

3911 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
gzù_dißbÀ
, 
¥ev
->gzù_dißbÀ, 
NULL
);

3914 i‡(
c⁄f
->
gzù_dißbÀ_msõ6
 == 3) {

3915 
c⁄f
->
gzù_dißbÀ_msõ6
 =

3916 (
¥ev
->
gzù_dißbÀ_msõ6
 == 3) ? 0 :Örev->gzip_disable_msie6;

3919 #i‡(
NGX_HTTP_DEGRADATION
)

3921 i‡(
c⁄f
->
gzù_dißbÀ_degød©i⁄
 == 3) {

3922 
c⁄f
->
gzù_dißbÀ_degød©i⁄
 =

3923 (
¥ev
->
gzù_dißbÀ_degød©i⁄
 == 3) ?

3924 0 : 
¥ev
->
gzù_dißbÀ_degød©i⁄
;

3930 #i‡(
NGX_HAVE_OPENAT
)

3931 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
dißbÀ_symlöks
, 
¥ev
->disable_symlinks,

3932 
NGX_DISABLE_SYMLINKS_OFF
);

3933 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
dißbÀ_symlöks_‰om
,

3934 
¥ev
->
dißbÀ_symlöks_‰om
, 
NULL
);

3937  
NGX_CONF_OK
;

3938 
	}
}

3942 
	$ngx_hâp_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

3944 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

3946 
ngx_°r_t
 *
vÆue
, 
size
;

3947 
ngx_uæ_t
 
u
;

3948 
ngx_uöt_t
 
n
;

3949 
ngx_hâp_li°í_›t_t
 
ls›t
;

3951 
cscf
->
li°í
 = 1;

3953 
vÆue
 = 
cf
->
¨gs
->
ñts
;

3955 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

3957 
u
.
uæ
 = 
vÆue
[1];

3958 
u
.
li°í
 = 1;

3959 
u
.
deÁu…_p‹t
 = 80;

3961 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

3962 i‡(
u
.
îr
) {

3963 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

3965 
u
.
îr
, &u.
uæ
);

3968  
NGX_CONF_ERROR
;

3971 
	`ngx_memzîo
(&
ls›t
, (
ngx_hâp_li°í_›t_t
));

3973 
	`ngx_mem˝y
(&
ls›t
.
u
.
sockaddr
, u.sockaddr, u.
sockÀn
);

3975 
ls›t
.
sockÀn
 = 
u
.socklen;

3976 
ls›t
.
backlog
 = 
NGX_LISTEN_BACKLOG
;

3977 
ls›t
.
rcvbuf
 = -1;

3978 
ls›t
.
¢dbuf
 = -1;

3979 #i‡(
NGX_HAVE_SETFIB
)

3980 
ls›t
.
£tfib
 = -1;

3982 
ls›t
.
wûdˇrd
 = 
u
.wildcard;

3983 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

3984 
ls›t
.
ùv6⁄ly
 = 1;

3987 (Ë
	`ngx_sock_¡›
(&
ls›t
.
u
.
sockaddr
,Üs›t.
addr
,

3988 
NGX_SOCKADDR_STRLEN
, 1);

3990 
n
 = 2;Ç < 
cf
->
¨gs
->
√…s
;Ç++) {

3992 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default_server") == 0

3993 || 
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "default") == 0)

3995 
ls›t
.
deÁu…_£rvî
 = 1;

3999 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "bind") == 0) {

4000 
ls›t
.
£t
 = 1;

4001 
ls›t
.
böd
 = 1;

4005 #i‡(
NGX_HAVE_SETFIB
)

4006 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "setfib=", 7) == 0) {

4007 
ls›t
.
£tfib
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 7, vÆue[n].
Àn
 - 7);

4009 i‡(
ls›t
.
£tfib
 =
NGX_ERROR
) {

4010 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4011 "övÆid sëfib \"%V\"", &
vÆue
[
n
]);

4012  
NGX_CONF_ERROR
;

4018 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "backlog=", 8) == 0) {

4019 
ls›t
.
backlog
 = 
	`ngx_©oi
(
vÆue
[
n
].
d©a
 + 8, vÆue[n].
Àn
 - 8);

4020 
ls›t
.
£t
 = 1;

4021 
ls›t
.
böd
 = 1;

4023 i‡(
ls›t
.
backlog
 =
NGX_ERROR
 ||Üsopt.backlog == 0) {

4024 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4025 "övÆid backlog \"%V\"", &
vÆue
[
n
]);

4026  
NGX_CONF_ERROR
;

4032 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "rcvbuf=", 7) == 0) {

4033 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4034 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4036 
ls›t
.
rcvbuf
 = 
	`ngx_∑r£_size
(&
size
);

4037 
ls›t
.
£t
 = 1;

4038 
ls›t
.
böd
 = 1;

4040 i‡(
ls›t
.
rcvbuf
 =
NGX_ERROR
) {

4041 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4042 "övÆidÑcvbu‡\"%V\"", &
vÆue
[
n
]);

4043  
NGX_CONF_ERROR
;

4049 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "sndbuf=", 7) == 0) {

4050 
size
.
Àn
 = 
vÆue
[
n
].len - 7;

4051 
size
.
d©a
 = 
vÆue
[
n
].data + 7;

4053 
ls›t
.
¢dbuf
 = 
	`ngx_∑r£_size
(&
size
);

4054 
ls›t
.
£t
 = 1;

4055 
ls›t
.
böd
 = 1;

4057 i‡(
ls›t
.
¢dbuf
 =
NGX_ERROR
) {

4058 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4059 "övÆid sndbu‡\"%V\"", &
vÆue
[
n
]);

4060  
NGX_CONF_ERROR
;

4066 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "accept_filter=", 14) == 0) {

4067 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

4068 
ls›t
.
ac˚±_fûãr
 = (*Ë&
vÆue
[
n
].
d©a
[14];

4069 
ls›t
.
£t
 = 1;

4070 
ls›t
.
böd
 = 1;

4072 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4075 &
vÆue
[
n
]);

4080 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "deferred") == 0) {

4081 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

4082 
ls›t
.
de„ºed_ac˚±
 = 1;

4083 
ls›t
.
£t
 = 1;

4084 
ls›t
.
böd
 = 1;

4086 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4093 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "ipv6only=o", 10) == 0) {

4094 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

4095 
sockaddr
 *
ß
;

4097 
ß
 = &
ls›t
.
u
.
sockaddr
;

4099 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

4101 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "n") == 0) {

4102 
ls›t
.
ùv6⁄ly
 = 1;

4104 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[10], "ff") == 0) {

4105 
ls›t
.
ùv6⁄ly
 = 0;

4108 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4110 &
vÆue
[
n
].
d©a
[9]);

4111  
NGX_CONF_ERROR
;

4114 
ls›t
.
£t
 = 1;

4115 
ls›t
.
böd
 = 1;

4118 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4120 "⁄ádd∏\"%s\", ign‹ed", 
ls›t
.
addr
);

4125 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4128  
NGX_CONF_ERROR
;

4132 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "ssl") == 0) {

4133 #i‡(
NGX_HTTP_SSL
)

4134 
ls›t
.
s¶
 = 1;

4137 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4140  
NGX_CONF_ERROR
;

4144 i‡(
	`ngx_°rcmp
(
vÆue
[
n
].
d©a
, "spdy") == 0) {

4145 #i‡(
NGX_HTTP_SPDY
)

4146 
ls›t
.
•dy
 = 1;

4149 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4152  
NGX_CONF_ERROR
;

4156 i‡(
	`ngx_°∫cmp
(
vÆue
[
n
].
d©a
, "so_keepalive=", 13) == 0) {

4158 i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "on") == 0) {

4159 
ls›t
.
so_kì∑live
 = 1;

4161 } i‡(
	`ngx_°rcmp
(&
vÆue
[
n
].
d©a
[13], "off") == 0) {

4162 
ls›t
.
so_kì∑live
 = 2;

4166 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4167 
u_ch¨
 *
p
, *
íd
;

4168 
ngx_°r_t
 
s
;

4170 
íd
 = 
vÆue
[
n
].
d©a
 + vÆue[n].
Àn
;

4171 
s
.
d©a
 = 
vÆue
[
n
].data + 13;

4173 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4174 i‡(
p
 =
NULL
) {

4175 
p
 = 
íd
;

4178 i‡(
p
 > 
s
.
d©a
) {

4179 
s
.
Àn
 = 
p
 - s.
d©a
;

4181 
ls›t
.
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

4182 i‡(
ls›t
.
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

4183 
övÆid_so_kì∑live
;

4187 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4189 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

4190 i‡(
p
 =
NULL
) {

4191 
p
 = 
íd
;

4194 i‡(
p
 > 
s
.
d©a
) {

4195 
s
.
Àn
 = 
p
 - s.
d©a
;

4197 
ls›t
.
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

4198 i‡(
ls›t
.
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

4199 
övÆid_so_kì∑live
;

4203 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

4205 i‡(
s
.
d©a
 < 
íd
) {

4206 
s
.
Àn
 = 
íd
 - s.
d©a
;

4208 
ls›t
.
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

4209 i‡(
ls›t
.
t˝_kìp˙t
 =
NGX_ERROR
) {

4210 
övÆid_so_kì∑live
;

4214 i‡(
ls›t
.
t˝_kìpidÀ
 =0 &&Üs›t.
t˝_kìpötvl
 == 0

4215 && 
ls›t
.
t˝_kìp˙t
 == 0)

4217 
övÆid_so_kì∑live
;

4220 
ls›t
.
so_kì∑live
 = 1;

4224 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4227  
NGX_CONF_ERROR
;

4232 
ls›t
.
£t
 = 1;

4233 
ls›t
.
böd
 = 1;

4237 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

4238 
övÆid_so_kì∑live
:

4240 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4242 &
vÆue
[
n
].
d©a
[13]);

4243  
NGX_CONF_ERROR
;

4247 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4248 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
n
]);

4249  
NGX_CONF_ERROR
;

4252 i‡(
	`ngx_hâp_add_li°í
(
cf
, 
cscf
, &
ls›t
Ë=
NGX_OK
) {

4253  
NGX_CONF_OK
;

4256  
NGX_CONF_ERROR
;

4257 
	}
}

4261 
	$ngx_hâp_c‹e_£rvî_«me
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4263 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

4265 
u_ch¨
 
ch
;

4266 
ngx_°r_t
 *
vÆue
;

4267 
ngx_uöt_t
 
i
;

4268 
ngx_hâp_£rvî_«me_t
 *
¢
;

4270 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4272 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4274 
ch
 = 
vÆue
[
i
].
d©a
[0];

4276 i‡((
ch
 ='*' && (
vÆue
[
i
].
Àn
 < 3 || vÆue[i].
d©a
[1] != '.'))

4277 || (
ch
 ='.' && 
vÆue
[
i
].
Àn
 < 2))

4279 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4280 "£rvîÇamê\"%V\" i†övÆid", &
vÆue
[
i
]);

4281  
NGX_CONF_ERROR
;

4284 i‡(
	`ngx_°rchr
(
vÆue
[
i
].
d©a
, '/')) {

4285 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4287 &
vÆue
[
i
]);

4290 
¢
 = 
	`ngx_¨øy_push
(&
cscf
->
£rvî_«mes
);

4291 i‡(
¢
 =
NULL
) {

4292  
NGX_CONF_ERROR
;

4295 #i‡(
NGX_PCRE
)

4296 
¢
->
ªgex
 = 
NULL
;

4298 
¢
->
£rvî
 = 
cscf
;

4300 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, (
u_ch¨
 *) "$hostname") == 0) {

4301 
¢
->
«me
 = 
cf
->
cy˛e
->
ho°«me
;

4304 
¢
->
«me
 = 
vÆue
[
i
];

4307 i‡(
vÆue
[
i
].
d©a
[0] != '~') {

4308 
	`ngx_°æow
(
¢
->
«me
.
d©a
, sn->«me.d©a, sn->«me.
Àn
);

4312 #i‡(
NGX_PCRE
)

4314 
u_ch¨
 *
p
;

4315 
ngx_ªgex_compûe_t
 
rc
;

4316 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

4318 i‡(
vÆue
[
i
].
Àn
 == 1) {

4319 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4320 "em±yÑegex i¿£rvîÇamê\"%V\"", &
vÆue
[
i
]);

4321  
NGX_CONF_ERROR
;

4324 
vÆue
[
i
].
Àn
--;

4325 
vÆue
[
i
].
d©a
++;

4327 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

4329 
rc
.
∑âîn
 = 
vÆue
[
i
];

4330 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

4331 
rc
.
îr
.
d©a
 = 
îr°r
;

4333 
p
 = 
vÆue
[
i
].
d©a
;Ö < vÆue[i].d©®+ vÆue[i].
Àn
;Ö++) {

4334 i‡(*
p
 >= 'A' && *p <= 'Z') {

4335 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

4340 
¢
->
ªgex
 = 
	`ngx_hâp_ªgex_compûe
(
cf
, &
rc
);

4341 i‡(
¢
->
ªgex
 =
NULL
) {

4342  
NGX_CONF_ERROR
;

4345 
¢
->
«me
 = 
vÆue
[
i
];

4346 
cscf
->
ˇ±uªs
 = (
rc
.captures > 0);

4349 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4351 "ªquúe†PCREÜibøry", &
vÆue
[
i
]);

4353  
NGX_CONF_ERROR
;

4357  
NGX_CONF_OK
;

4358 
	}
}

4362 
	$ngx_hâp_c‹e_roŸ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4364 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4366 
ngx_°r_t
 *
vÆue
;

4367 
ngx_öt_t
 
Æüs
;

4368 
ngx_uöt_t
 
n
;

4369 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4371 
Æüs
 = (
cmd
->
«me
.
Àn
 == ("alias") - 1) ? 1 : 0;

4373 i‡(
˛cf
->
roŸ
.
d©a
) {

4375 i‡((
˛cf
->
Æüs
 != 0) ==álias) {

4376 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4378 &
cmd
->
«me
);

4380 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4383 &
cmd
->
«me
, 
˛cf
->
Æüs
 ? "alias" : "root");

4386  
NGX_CONF_ERROR
;

4389 i‡(
˛cf
->
«med
 && 
Æüs
) {

4390 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4394  
NGX_CONF_ERROR
;

4397 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4399 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$document_root")

4400 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${document_root}"))

4402 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4405 &
cmd
->
«me
);

4407  
NGX_CONF_ERROR
;

4410 i‡(
	`ngx_°r°r
(
vÆue
[1].
d©a
, "$realpath_root")

4411 || 
	`ngx_°r°r
(
vÆue
[1].
d©a
, "${realpath_root}"))

4413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4416 &
cmd
->
«me
);

4418  
NGX_CONF_ERROR
;

4421 
˛cf
->
Æüs
 =álü†? clcf->
«me
.
Àn
 : 0;

4422 
˛cf
->
roŸ
 = 
vÆue
[1];

4424 i‡(!
Æüs
 && 
˛cf
->
roŸ
.
d©a
[˛cf->roŸ.
Àn
 - 1] == '/') {

4425 
˛cf
->
roŸ
.
Àn
--;

4428 i‡(
˛cf
->
roŸ
.
d©a
[0] != '$') {

4429 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
˛cf
->
roŸ
, 0Ë!
NGX_OK
) {

4430  
NGX_CONF_ERROR
;

4434 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
˛cf
->
roŸ
);

4436 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4437 
sc
.
v¨übÀs
 = 
n
;

4439 #i‡(
NGX_PCRE
)

4440 i‡(
Æüs
 && 
˛cf
->
ªgex
) {

4441 
n
 = 1;

4445 i‡(
n
) {

4446 
sc
.
cf
 = cf;

4447 
sc
.
sour˚
 = &
˛cf
->
roŸ
;

4448 
sc
.
Àngths
 = &
˛cf
->
roŸ_Àngths
;

4449 
sc
.
vÆues
 = &
˛cf
->
roŸ_vÆues
;

4450 
sc
.
com∂ëe_Àngths
 = 1;

4451 
sc
.
com∂ëe_vÆues
 = 1;

4453 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4454  
NGX_CONF_ERROR
;

4458  
NGX_CONF_OK
;

4459 
	}
}

4462 
ngx_hâp_mëhod_«me_t
 
	gngx_mëhods_«mes
[] = {

4463 { (
u_ch¨
 *Ë"GET", (
uöt32_t
Ë~
NGX_HTTP_GET
 },

4464 { (
u_ch¨
 *Ë"HEAD", (
uöt32_t
Ë~
NGX_HTTP_HEAD
 },

4465 { (
u_ch¨
 *Ë"POST", (
uöt32_t
Ë~
NGX_HTTP_POST
 },

4466 { (
u_ch¨
 *Ë"PUT", (
uöt32_t
Ë~
NGX_HTTP_PUT
 },

4467 { (
u_ch¨
 *Ë"DELETE", (
uöt32_t
Ë~
NGX_HTTP_DELETE
 },

4468 { (
u_ch¨
 *Ë"MKCOL", (
uöt32_t
Ë~
NGX_HTTP_MKCOL
 },

4469 { (
u_ch¨
 *Ë"COPY", (
uöt32_t
Ë~
NGX_HTTP_COPY
 },

4470 { (
u_ch¨
 *Ë"MOVE", (
uöt32_t
Ë~
NGX_HTTP_MOVE
 },

4471 { (
u_ch¨
 *Ë"OPTIONS", (
uöt32_t
Ë~
NGX_HTTP_OPTIONS
 },

4472 { (
u_ch¨
 *Ë"PROPFIND" , (
uöt32_t
Ë~
NGX_HTTP_PROPFIND
 },

4473 { (
u_ch¨
 *Ë"PROPPATCH", (
uöt32_t
Ë~
NGX_HTTP_PROPPATCH
 },

4474 { (
u_ch¨
 *Ë"LOCK", (
uöt32_t
Ë~
NGX_HTTP_LOCK
 },

4475 { (
u_ch¨
 *Ë"UNLOCK", (
uöt32_t
Ë~
NGX_HTTP_UNLOCK
 },

4476 { (
u_ch¨
 *Ë"PATCH", (
uöt32_t
Ë~
NGX_HTTP_PATCH
 },

4477 { 
NULL
, 0 }

4482 
	$ngx_hâp_c‹e_limô_ex˚±
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4484 
ngx_hâp_c‹e_loc_c⁄f_t
 *
p˛cf
 = 
c⁄f
;

4486 *
rv
;

4487 *
mc⁄f
;

4488 
ngx_°r_t
 *
vÆue
;

4489 
ngx_uöt_t
 
i
;

4490 
ngx_c⁄f_t
 
ßve
;

4491 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4492 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
p˘x
;

4493 
ngx_hâp_mëhod_«me_t
 *
«me
;

4494 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

4496 i‡(
p˛cf
->
limô_ex˚±
) {

4500 
p˛cf
->
limô_ex˚±
 = 0xffffffff;

4502 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4504 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4505 
«me
 = 
ngx_mëhods_«mes
;Çame->name;Çame++) {

4507 i‡(
	`ngx_°rˇ£cmp
(
vÆue
[
i
].
d©a
, 
«me
->name) == 0) {

4508 
p˛cf
->
limô_ex˚±
 &
«me
->
mëhod
;

4509 
√xt
;

4513 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4514 "övÆid mëhod \"%V\"", &
vÆue
[
i
]);

4515  
NGX_CONF_ERROR
;

4517 
√xt
:

4521 i‡(!(
p˛cf
->
limô_ex˚±
 & 
NGX_HTTP_GET
)) {

4522 
p˛cf
->
limô_ex˚±
 &(
uöt32_t
Ë~
NGX_HTTP_HEAD
;

4525 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4526 i‡(
˘x
 =
NULL
) {

4527  
NGX_CONF_ERROR
;

4530 
p˘x
 = 
cf
->
˘x
;

4531 
˘x
->
maö_c⁄f
 = 
p˘x
->main_conf;

4532 
˘x
->
§v_c⁄f
 = 
p˘x
->srv_conf;

4534 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4535 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4536  
NGX_CONF_ERROR
;

4539 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

4540 i‡(
ngx_moduÀs
[
i
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4544 
moduÀ
 = 
ngx_moduÀs
[
i
]->
˘x
;

4546 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4548 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4549 i‡(
mc⁄f
 =
NULL
) {

4550  
NGX_CONF_ERROR
;

4553 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
i
]->
˘x_ödex
] = 
mc⁄f
;

4558 
˛cf
 = 
˘x
->
loc_c⁄f
[
ngx_hâp_c‹e_moduÀ
.
˘x_ödex
];

4559 
p˛cf
->
limô_ex˚±_loc_c⁄f
 = 
˘x
->
loc_c⁄f
;

4560 
˛cf
->
loc_c⁄f
 = 
˘x
->loc_conf;

4561 
˛cf
->
«me
 = 
p˛cf
->name;

4562 
˛cf
->
n⁄ame
 = 1;

4563 
˛cf
->
lmt_ex˝t
 = 1;

4565 i‡(
	`ngx_hâp_add_loˇti⁄
(
cf
, &
p˛cf
->
loˇti⁄s
, 
˛cf
Ë!
NGX_OK
) {

4566  
NGX_CONF_ERROR
;

4569 
ßve
 = *
cf
;

4570 
cf
->
˘x
 = ctx;

4571 
cf
->
cmd_ty≥
 = 
NGX_HTTP_LMT_CONF
;

4573 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4575 *
cf
 = 
ßve
;

4577  
rv
;

4578 
	}
}

4582 
	$ngx_hâp_c‹e_dúe˘io
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4584 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4586 
ngx_°r_t
 *
vÆue
;

4588 i‡(
˛cf
->
dúe˘io
 !
NGX_CONF_UNSET
) {

4592 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4594 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4595 
˛cf
->
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

4596  
NGX_CONF_OK
;

4599 
˛cf
->
dúe˘io
 = 
	`ngx_∑r£_off£t
(&
vÆue
[1]);

4600 i‡(
˛cf
->
dúe˘io
 =(
off_t
Ë
NGX_ERROR
) {

4604  
NGX_CONF_OK
;

4605 
	}
}

4609 
	$ngx_hâp_c‹e_îr‹_∑ge
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4611 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4613 
u_ch¨
 *
p
;

4614 
ngx_öt_t
 
ovîwrôe
;

4615 
ngx_°r_t
 *
vÆue
, 
uri
, 
¨gs
;

4616 
ngx_uöt_t
 
i
, 
n
;

4617 
ngx_hâp_îr_∑ge_t
 *
îr
;

4618 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4619 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4621 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4622 
˛cf
->
îr‹_∑ges
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4623 (
ngx_hâp_îr_∑ge_t
));

4624 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

4625  
NGX_CONF_ERROR
;

4629 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4631 
i
 = 
cf
->
¨gs
->
√…s
 - 2;

4633 i‡(
vÆue
[
i
].
d©a
[0] == '=') {

4634 i‡(
i
 == 1) {

4635 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4636 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4637  
NGX_CONF_ERROR
;

4640 i‡(
vÆue
[
i
].
Àn
 > 1) {

4641 
ovîwrôe
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[1], vÆue[i].
Àn
 - 1);

4643 i‡(
ovîwrôe
 =
NGX_ERROR
) {

4644 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4645 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4646  
NGX_CONF_ERROR
;

4650 
ovîwrôe
 = 0;

4653 
n
 = 2;

4656 
ovîwrôe
 = -1;

4657 
n
 = 1;

4660 
uri
 = 
vÆue
[
cf
->
¨gs
->
√…s
 - 1];

4662 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4664 
ccv
.
cf
 = cf;

4665 
ccv
.
vÆue
 = &
uri
;

4666 
ccv
.
com∂ex_vÆue
 = &
cv
;

4668 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4669  
NGX_CONF_ERROR
;

4672 
	`ngx_°r_nuŒ
(&
¨gs
);

4674 i‡(
cv
.
Àngths
 =
NULL
 && 
uri
.
Àn
 && uri.
d©a
[0] == '/') {

4675 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
uri
.
d©a
, '?');

4677 i‡(
p
) {

4678 
cv
.
vÆue
.
Àn
 = 
p
 - 
uri
.
d©a
;

4679 
cv
.
vÆue
.
d©a
 = 
uri
.data;

4680 
p
++;

4681 
¨gs
.
Àn
 = (
uri
.
d©a
 + uri.ÀnË- 
p
;

4682 
¨gs
.
d©a
 = 
p
;

4686 
i
 = 1; i < 
cf
->
¨gs
->
√…s
 - 
n
; i++) {

4687 
îr
 = 
	`ngx_¨øy_push
(
˛cf
->
îr‹_∑ges
);

4688 i‡(
îr
 =
NULL
) {

4689  
NGX_CONF_ERROR
;

4692 
îr
->
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

4694 i‡(
îr
->
°©us
 =
NGX_ERROR
 ||Érr->status == 499) {

4695 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4696 "övÆid vÆuê\"%V\"", &
vÆue
[
i
]);

4697  
NGX_CONF_ERROR
;

4700 i‡(
îr
->
°©us
 < 300 ||Érr->status > 599) {

4701 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4703 &
vÆue
[
i
]);

4704  
NGX_CONF_ERROR
;

4707 
îr
->
ovîwrôe
 = overwrite;

4709 i‡(
ovîwrôe
 == -1) {

4710 
îr
->
°©us
) {

4711 
NGX_HTTP_TO_HTTPS
:

4712 
NGX_HTTPS_CERT_ERROR
:

4713 
NGX_HTTPS_NO_CERT
:

4714 
îr
->
ovîwrôe
 = 
NGX_HTTP_BAD_REQUEST
;

4720 
îr
->
vÆue
 = 
cv
;

4721 
îr
->
¨gs
 =árgs;

4724  
NGX_CONF_OK
;

4725 
	}
}

4729 
	$ngx_hâp_c‹e_åy_fûes
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4731 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4733 
ngx_°r_t
 *
vÆue
;

4734 
ngx_öt_t
 
code
;

4735 
ngx_uöt_t
 
i
, 
n
;

4736 
ngx_hâp_åy_fûe_t
 *
tf
;

4737 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

4738 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

4740 i‡(
˛cf
->
åy_fûes
) {

4744 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

4746 
cmcf
->
åy_fûes
 = 1;

4748 
tf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, cf->
¨gs
->
√…s
 * (
ngx_hâp_åy_fûe_t
));

4749 i‡(
tf
 =
NULL
) {

4750  
NGX_CONF_ERROR
;

4753 
˛cf
->
åy_fûes
 = 
tf
;

4755 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4757 
i
 = 0; i < 
cf
->
¨gs
->
√…s
 - 1; i++) {

4759 
tf
[
i
].
«me
 = 
vÆue
[i + 1];

4761 i‡(
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
 - 1] == '/') {

4762 
tf
[
i
].
ã°_dú
 = 1;

4763 
tf
[
i
].
«me
.
Àn
--;

4764 
tf
[
i
].
«me
.
d©a
[tf[i].«me.
Àn
] = '\0';

4767 
n
 = 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(&
tf
[
i
].
«me
);

4769 i‡(
n
) {

4770 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

4772 
sc
.
cf
 = cf;

4773 
sc
.
sour˚
 = &
tf
[
i
].
«me
;

4774 
sc
.
Àngths
 = &
tf
[
i
].lengths;

4775 
sc
.
vÆues
 = &
tf
[
i
].values;

4776 
sc
.
v¨übÀs
 = 
n
;

4777 
sc
.
com∂ëe_Àngths
 = 1;

4778 
sc
.
com∂ëe_vÆues
 = 1;

4780 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

4781  
NGX_CONF_ERROR
;

4786 
tf
[
i
].
«me
.
Àn
++;

4790 i‡(
tf
[
i
 - 1].
«me
.
d©a
[0] == '=') {

4792 
code
 = 
	`ngx_©oi
(
tf
[
i
 - 1].
«me
.
d©a
 + 1,Åf[ò- 1].«me.
Àn
 - 2);

4794 i‡(
code
 =
NGX_ERROR
 || code > 999) {

4795 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4797 
tf
[
i
 - 1].
«me
.
Àn
 - 1,Åf[ò- 1].«me.
d©a
);

4798  
NGX_CONF_ERROR
;

4801 
tf
[
i
].
code
 = code;

4804  
NGX_CONF_OK
;

4805 
	}
}

4809 
	$ngx_hâp_c‹e_›í_fûe_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4811 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4813 
time_t
 
öa˘ive
;

4814 
ngx_°r_t
 *
vÆue
, 
s
;

4815 
ngx_öt_t
 
max
;

4816 
ngx_uöt_t
 
i
;

4818 i‡(
˛cf
->
›í_fûe_ˇche
 !
NGX_CONF_UNSET_PTR
) {

4822 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4824 
max
 = 0;

4825 
öa˘ive
 = 60;

4827 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

4829 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max=", 4) == 0) {

4831 
max
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 4, vÆue[i].
Àn
 - 4);

4832 i‡(
max
 <= 0) {

4833 
Áûed
;

4839 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

4841 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

4842 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

4844 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

4845 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

4846 
Áûed
;

4852 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

4854 
˛cf
->
›í_fûe_ˇche
 = 
NULL
;

4859 
Áûed
:

4861 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4863 &
vÆue
[
i
]);

4864  
NGX_CONF_ERROR
;

4867 i‡(
˛cf
->
›í_fûe_ˇche
 =
NULL
) {

4868  
NGX_CONF_OK
;

4871 i‡(
max
 == 0) {

4872 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4874  
NGX_CONF_ERROR
;

4877 
˛cf
->
›í_fûe_ˇche
 = 
	`ngx_›í_fûe_ˇche_öô
(
cf
->
poﬁ
, 
max
, 
öa˘ive
);

4878 i‡(
˛cf
->
›í_fûe_ˇche
) {

4879  
NGX_CONF_OK
;

4882  
NGX_CONF_ERROR
;

4883 
	}
}

4887 
	$ngx_hâp_c‹e_îr‹_log
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4889 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4891 
ngx_°r_t
 *
vÆue
, 
«me
;

4893 i‡(
˛cf
->
îr‹_log
) {

4897 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4899 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "stderr") == 0) {

4900 
	`ngx_°r_nuŒ
(&
«me
);

4903 
«me
 = 
vÆue
[1];

4906 
˛cf
->
îr‹_log
 = 
	`ngx_log_¸óã
(
cf
->
cy˛e
, &
«me
);

4907 i‡(
˛cf
->
îr‹_log
 =
NULL
) {

4908  
NGX_CONF_ERROR
;

4911 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4912 
˛cf
->
îr‹_log
->
log_Àvñ
 = 
NGX_LOG_ERR
;

4913  
NGX_CONF_OK
;

4916  
	`ngx_log_£t_Àvñs
(
cf
, 
˛cf
->
îr‹_log
);

4917 
	}
}

4921 
	$ngx_hâp_c‹e_kì∑live
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4923 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4925 
ngx_°r_t
 *
vÆue
;

4927 i‡(
˛cf
->
kì∑live_timeout
 !
NGX_CONF_UNSET_MSEC
) {

4931 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4933 
˛cf
->
kì∑live_timeout
 = 
	`ngx_∑r£_time
(&
vÆue
[1], 0);

4935 i‡(
˛cf
->
kì∑live_timeout
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

4939 i‡(
cf
->
¨gs
->
√…s
 == 2) {

4940  
NGX_CONF_OK
;

4943 
˛cf
->
kì∑live_hódî
 = 
	`ngx_∑r£_time
(&
vÆue
[2], 1);

4945 i‡(
˛cf
->
kì∑live_hódî
 =(
time_t
Ë
NGX_ERROR
) {

4949  
NGX_CONF_OK
;

4950 
	}
}

4954 
	$ngx_hâp_c‹e_öã∫Æ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4956 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4958 i‡(
˛cf
->
öã∫Æ
 !
NGX_CONF_UNSET
) {

4962 
˛cf
->
öã∫Æ
 = 1;

4964  
NGX_CONF_OK
;

4965 
	}
}

4969 
	$ngx_hâp_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4971 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4973 
ngx_°r_t
 *
vÆue
;

4975 i‡(
˛cf
->
ªsﬁvî
) {

4979 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4981 
˛cf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

4982 i‡(
˛cf
->
ªsﬁvî
 =
NULL
) {

4983  
NGX_CONF_ERROR
;

4986  
NGX_CONF_OK
;

4987 
	}
}

4990 #i‡(
NGX_HTTP_GZIP
)

4993 
	$ngx_hâp_gzù_dißbÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4995 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

4997 #i‡(
NGX_PCRE
)

4999 
ngx_°r_t
 *
vÆue
;

5000 
ngx_uöt_t
 
i
;

5001 
ngx_ªgex_ñt_t
 *
ª
;

5002 
ngx_ªgex_compûe_t
 
rc
;

5003 
u_ch¨
 
îr°r
[
NGX_MAX_CONF_ERRSTR
];

5005 i‡(
˛cf
->
gzù_dißbÀ
 =
NGX_CONF_UNSET_PTR
) {

5006 
˛cf
->
gzù_dißbÀ
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 2,

5007 (
ngx_ªgex_ñt_t
));

5008 i‡(
˛cf
->
gzù_dißbÀ
 =
NULL
) {

5009  
NGX_CONF_ERROR
;

5013 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5015 
	`ngx_memzîo
(&
rc
, (
ngx_ªgex_compûe_t
));

5017 
rc
.
poﬁ
 = 
cf
->pool;

5018 
rc
.
îr
.
Àn
 = 
NGX_MAX_CONF_ERRSTR
;

5019 
rc
.
îr
.
d©a
 = 
îr°r
;

5021 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5023 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5024 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5028 #i‡(
NGX_HTTP_DEGRADATION
)

5030 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5031 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5037 
ª
 = 
	`ngx_¨øy_push
(
˛cf
->
gzù_dißbÀ
);

5038 i‡(
ª
 =
NULL
) {

5039  
NGX_CONF_ERROR
;

5042 
rc
.
∑âîn
 = 
vÆue
[
i
];

5043 
rc
.
›ti⁄s
 = 
NGX_REGEX_CASELESS
;

5045 i‡(
	`ngx_ªgex_compûe
(&
rc
Ë!
NGX_OK
) {

5046 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
.
îr
);

5047  
NGX_CONF_ERROR
;

5050 
ª
->
ªgex
 = 
rc
.regex;

5051 
ª
->
«me
 = 
vÆue
[
i
].
d©a
;

5054  
NGX_CONF_OK
;

5057 
ngx_°r_t
 *
vÆue
;

5058 
ngx_uöt_t
 
i
;

5060 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5062 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5063 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "msie6") == 0) {

5064 
˛cf
->
gzù_dißbÀ_msõ6
 = 1;

5068 #i‡(
NGX_HTTP_DEGRADATION
)

5070 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "degradation") == 0) {

5071 
˛cf
->
gzù_dißbÀ_degød©i⁄
 = 1;

5077 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5081  
NGX_CONF_ERROR
;

5084  
NGX_CONF_OK
;

5087 
	}
}

5092 #i‡(
NGX_HAVE_OPENAT
)

5095 
	$ngx_hâp_dißbÀ_symlöks
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

5097 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
 = 
c⁄f
;

5099 
ngx_°r_t
 *
vÆue
;

5100 
ngx_uöt_t
 
i
;

5101 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

5103 i‡(
˛cf
->
dißbÀ_symlöks
 !
NGX_CONF_UNSET_UINT
) {

5107 
vÆue
 = 
cf
->
¨gs
->
ñts
;

5109 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

5111 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

5112 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_OFF
;

5116 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "if_not_owner") == 0) {

5117 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_NOTOWNER
;

5121 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "on") == 0) {

5122 
˛cf
->
dißbÀ_symlöks
 = 
NGX_DISABLE_SYMLINKS_ON
;

5126 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "from=", 5) == 0) {

5127 
vÆue
[
i
].
Àn
 -= 5;

5128 
vÆue
[
i
].
d©a
 += 5;

5130 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

5132 
ccv
.
cf
 = cf;

5133 
ccv
.
vÆue
 = &vÆue[
i
];

5134 
ccv
.
com∂ex_vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
,

5135 (
ngx_hâp_com∂ex_vÆue_t
));

5136 i‡(
ccv
.
com∂ex_vÆue
 =
NULL
) {

5137  
NGX_CONF_ERROR
;

5140 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

5141  
NGX_CONF_ERROR
;

5144 
˛cf
->
dißbÀ_symlöks_‰om
 = 
ccv
.
com∂ex_vÆue
;

5149 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5150 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

5151  
NGX_CONF_ERROR
;

5154 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_CONF_UNSET_UINT
) {

5155 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5158 &
cmd
->
«me
);

5159  
NGX_CONF_ERROR
;

5162 i‡(
cf
->
¨gs
->
√…s
 == 2) {

5163 
˛cf
->
dißbÀ_symlöks_‰om
 = 
NULL
;

5164  
NGX_CONF_OK
;

5167 i‡(
˛cf
->
dißbÀ_symlöks_‰om
 =
NGX_CONF_UNSET_PTR
) {

5168 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5170 &
vÆue
[1], &value[2]);

5171  
NGX_CONF_ERROR
;

5174 i‡(
˛cf
->
dißbÀ_symlöks
 =
NGX_DISABLE_SYMLINKS_OFF
) {

5175 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5177  
NGX_CONF_ERROR
;

5180  
NGX_CONF_OK
;

5181 
	}
}

5187 
	$ngx_hâp_c‹e_low©_check
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5189 #i‡(
NGX_FREEBSD
)

5190 
ssize_t
 *
≈
 = 
d©a
;

5192 i‡((
u_l⁄g
Ë*
≈
 >
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
) {

5193 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5196 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
);

5198  
NGX_CONF_ERROR
;

5201 #ñi‡!(
NGX_HAVE_SO_SNDLOWAT
)

5202 
ssize_t
 *
≈
 = 
d©a
;

5204 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

5207 *
≈
 = 0;

5211  
NGX_CONF_OK
;

5212 
	}
}

5216 
	$ngx_hâp_c‹e_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

5218 
size_t
 *
•
 = 
d©a
;

5220 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

5221 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5223 
NGX_MIN_POOL_SIZE
);

5224  
NGX_CONF_ERROR
;

5227 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

5228 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

5230 
NGX_POOL_ALIGNMENT
);

5231  
NGX_CONF_ERROR
;

5234  
NGX_CONF_OK
;

5235 
	}
}

	@src/http/ngx_http_core_module.h

8 #i‚de‡
_NGX_HTTP_CORE_H_INCLUDED_


9 
	#_NGX_HTTP_CORE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
	#NGX_HTTP_GZIP_PROXIED_OFF
 0x0002

	)

18 
	#NGX_HTTP_GZIP_PROXIED_EXPIRED
 0x0004

	)

19 
	#NGX_HTTP_GZIP_PROXIED_NO_CACHE
 0x0008

	)

20 
	#NGX_HTTP_GZIP_PROXIED_NO_STORE
 0x0010

	)

21 
	#NGX_HTTP_GZIP_PROXIED_PRIVATE
 0x0020

	)

22 
	#NGX_HTTP_GZIP_PROXIED_NO_LM
 0x0040

	)

23 
	#NGX_HTTP_GZIP_PROXIED_NO_ETAG
 0x0080

	)

24 
	#NGX_HTTP_GZIP_PROXIED_AUTH
 0x0100

	)

25 
	#NGX_HTTP_GZIP_PROXIED_ANY
 0x0200

	)

28 
	#NGX_HTTP_AIO_OFF
 0

	)

29 
	#NGX_HTTP_AIO_ON
 1

	)

30 
	#NGX_HTTP_AIO_SENDFILE
 2

	)

33 
	#NGX_HTTP_SATISFY_ALL
 0

	)

34 
	#NGX_HTTP_SATISFY_ANY
 1

	)

37 
	#NGX_HTTP_LINGERING_OFF
 0

	)

38 
	#NGX_HTTP_LINGERING_ON
 1

	)

39 
	#NGX_HTTP_LINGERING_ALWAYS
 2

	)

42 
	#NGX_HTTP_IMS_OFF
 0

	)

43 
	#NGX_HTTP_IMS_EXACT
 1

	)

44 
	#NGX_HTTP_IMS_BEFORE
 2

	)

47 
	#NGX_HTTP_KEEPALIVE_DISABLE_NONE
 0x0002

	)

48 
	#NGX_HTTP_KEEPALIVE_DISABLE_MSIE6
 0x0004

	)

49 
	#NGX_HTTP_KEEPALIVE_DISABLE_SAFARI
 0x0008

	)

52 
ngx_hâp_loˇti⁄_åì_node_s
 
	tngx_hâp_loˇti⁄_åì_node_t
;

53 
ngx_hâp_c‹e_loc_c⁄f_s
 
	tngx_hâp_c‹e_loc_c⁄f_t
;

58 
sockaddr
 
	msockaddr
;

59 
sockaddr_ö
 
	msockaddr_ö
;

60 #i‡(
NGX_HAVE_INET6
)

61 
sockaddr_ö6
 
	msockaddr_ö6
;

63 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

64 
sockaddr_un
 
	msockaddr_un
;

66 
u_ch¨
 
	msockaddr_d©a
[
NGX_SOCKADDRLEN
];

67 } 
	mu
;

69 
sockÀn_t
 
	msockÀn
;

71 
	m£t
:1;

72 
	mdeÁu…_£rvî
:1;

73 
	mböd
:1;

74 
	mwûdˇrd
:1;

75 #i‡(
NGX_HTTP_SSL
)

76 
	ms¶
:1;

78 #i‡(
NGX_HTTP_SPDY
)

79 
	m•dy
:1;

81 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

82 
	mùv6⁄ly
:1;

84 
	mso_kì∑live
:2;

86 
	mbacklog
;

87 
	mrcvbuf
;

88 
	m¢dbuf
;

89 #i‡(
NGX_HAVE_SETFIB
)

90 
	m£tfib
;

92 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

93 
	mt˝_kìpidÀ
;

94 
	mt˝_kìpötvl
;

95 
	mt˝_kìp˙t
;

98 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
SO_ACCEPTFILTER
)

99 *
	mac˚±_fûãr
;

101 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

102 
ngx_uöt_t
 
	mde„ºed_ac˚±
;

105 
u_ch¨
 
	maddr
[
NGX_SOCKADDR_STRLEN
 + 1];

106 } 
	tngx_hâp_li°í_›t_t
;

110 
	mNGX_HTTP_POST_READ_PHASE
 = 0,

112 
	mNGX_HTTP_SERVER_REWRITE_PHASE
,

114 
	mNGX_HTTP_FIND_CONFIG_PHASE
,

115 
	mNGX_HTTP_REWRITE_PHASE
,

116 
	mNGX_HTTP_POST_REWRITE_PHASE
,

118 
	mNGX_HTTP_PREACCESS_PHASE
,

120 
	mNGX_HTTP_ACCESS_PHASE
,

121 
	mNGX_HTTP_POST_ACCESS_PHASE
,

123 
	mNGX_HTTP_TRY_FILES_PHASE
,

124 
	mNGX_HTTP_CONTENT_PHASE
,

126 
	mNGX_HTTP_LOG_PHASE


127 } 
	tngx_hâp_pha£s
;

129 
ngx_hâp_pha£_h™dÀr_s
 
	tngx_hâp_pha£_h™dÀr_t
;

131 
	$ngx_öt_t
 (*
	tngx_hâp_pha£_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

132 
	tngx_hâp_pha£_h™dÀr_t
 *
	tph
);

134 
	sngx_hâp_pha£_h™dÀr_s
 {

135 
ngx_hâp_pha£_h™dÀr_±
 
checkî
;

136 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

137 
ngx_uöt_t
 
√xt
;

142 
ngx_hâp_pha£_h™dÀr_t
 *
h™dÀrs
;

143 
ngx_uöt_t
 
£rvî_ªwrôe_ödex
;

144 
ngx_uöt_t
 
loˇti⁄_ªwrôe_ödex
;

145 } 
	tngx_hâp_pha£_ígöe_t
;

149 
ngx_¨øy_t
 
h™dÀrs
;

150 } 
	tngx_hâp_pha£_t
;

154 
ngx_¨øy_t
 
£rvîs
;

156 
ngx_hâp_pha£_ígöe_t
 
pha£_ígöe
;

158 
ngx_hash_t
 
hódîs_ö_hash
;

160 
ngx_hash_t
 
v¨übÀs_hash
;

162 
ngx_¨øy_t
 
v¨übÀs
;

163 
ngx_uöt_t
 
nˇ±uªs
;

165 
ngx_uöt_t
 
£rvî_«mes_hash_max_size
;

166 
ngx_uöt_t
 
£rvî_«mes_hash_buckë_size
;

168 
ngx_uöt_t
 
v¨übÀs_hash_max_size
;

169 
ngx_uöt_t
 
v¨übÀs_hash_buckë_size
;

171 
ngx_hash_keys_¨øys_t
 *
v¨übÀs_keys
;

173 
ngx_¨øy_t
 *
p‹ts
;

175 
ngx_uöt_t
 
åy_fûes
;

177 
ngx_hâp_pha£_t
 
pha£s
[
NGX_HTTP_LOG_PHASE
 + 1];

178 } 
	tngx_hâp_c‹e_maö_c⁄f_t
;

183 
ngx_¨øy_t
 
£rvî_«mes
;

186 
ngx_hâp_c⁄f_˘x_t
 *
˘x
;

188 
ngx_°r_t
 
£rvî_«me
;

190 
size_t
 
c⁄√˘i⁄_poﬁ_size
;

191 
size_t
 
ªque°_poﬁ_size
;

192 
size_t
 
˛õ¡_hódî_buf„r_size
;

194 
ngx_bufs_t
 
œrge_˛õ¡_hódî_buf„rs
;

196 
ngx_m£c_t
 
˛õ¡_hódî_timeout
;

198 
ngx_Êag_t
 
ign‹e_övÆid_hódîs
;

199 
ngx_Êag_t
 
mîge_¶ashes
;

200 
ngx_Êag_t
 
undîsc‹es_ö_hódîs
;

202 
li°í
:1;

203 #i‡(
NGX_PCRE
)

204 
ˇ±uªs
:1;

207 
ngx_hâp_c‹e_loc_c⁄f_t
 **
«med_loˇti⁄s
;

208 } 
	tngx_hâp_c‹e_§v_c⁄f_t
;

215 #i‡(
NGX_PCRE
)

216 
ngx_hâp_ªgex_t
 *
ªgex
;

218 
ngx_hâp_c‹e_§v_c⁄f_t
 *
£rvî
;

219 
ngx_°r_t
 
«me
;

220 } 
	tngx_hâp_£rvî_«me_t
;

224 
ngx_hash_comböed_t
 
«mes
;

226 
ngx_uöt_t
 
ƒegex
;

227 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

228 } 
	tngx_hâp_vútuÆ_«mes_t
;

231 
	sngx_hâp_addr_c⁄f_s
 {

233 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

235 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
;

237 #i‡(
NGX_HTTP_SSL
)

238 
s¶
:1;

240 #i‡(
NGX_HTTP_SPDY
)

241 
•dy
:1;

247 
ö_addr_t
 
addr
;

248 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

249 } 
	tngx_hâp_ö_addr_t
;

252 #i‡(
NGX_HAVE_INET6
)

255 
ö6_addr
 
addr6
;

256 
ngx_hâp_addr_c⁄f_t
 
c⁄f
;

257 } 
	tngx_hâp_ö6_addr_t
;

264 *
addrs
;

265 
ngx_uöt_t
 
«ddrs
;

266 } 
	tngx_hâp_p‹t_t
;

270 
ngx_öt_t
 
Ámûy
;

271 
ö_p‹t_t
 
p‹t
;

272 
ngx_¨øy_t
 
addrs
;

273 } 
	tngx_hâp_c⁄f_p‹t_t
;

277 
ngx_hâp_li°í_›t_t
 
›t
;

279 
ngx_hash_t
 
hash
;

280 
ngx_hash_wûdˇrd_t
 *
wc_hód
;

281 
ngx_hash_wûdˇrd_t
 *
wc_èû
;

283 #i‡(
NGX_PCRE
)

284 
ngx_uöt_t
 
ƒegex
;

285 
ngx_hâp_£rvî_«me_t
 *
ªgex
;

289 
ngx_hâp_c‹e_§v_c⁄f_t
 *
deÁu…_£rvî
;

290 
ngx_¨øy_t
 
£rvîs
;

291 } 
	tngx_hâp_c⁄f_addr_t
;

295 
ngx_öt_t
 
°©us
;

296 
ngx_öt_t
 
ovîwrôe
;

297 
ngx_hâp_com∂ex_vÆue_t
 
vÆue
;

298 
ngx_°r_t
 
¨gs
;

299 } 
	tngx_hâp_îr_∑ge_t
;

303 
ngx_¨øy_t
 *
Àngths
;

304 
ngx_¨øy_t
 *
vÆues
;

305 
ngx_°r_t
 
«me
;

307 
code
:10;

308 
ã°_dú
:1;

309 } 
	tngx_hâp_åy_fûe_t
;

312 
	sngx_hâp_c‹e_loc_c⁄f_s
 {

313 
ngx_°r_t
 
«me
;

315 #i‡(
NGX_PCRE
)

316 
ngx_hâp_ªgex_t
 *
ªgex
;

319 
n⁄ame
:1;

320 
lmt_ex˝t
:1;

321 
«med
:1;

323 
exa˘_m©ch
:1;

324 
n‹egex
:1;

326 
auto_ªdúe˘
:1;

327 #i‡(
NGX_HTTP_GZIP
)

328 
gzù_dißbÀ_msõ6
:2;

329 #i‡(
NGX_HTTP_DEGRADATION
)

330 
gzù_dißbÀ_degød©i⁄
:2;

334 
ngx_hâp_loˇti⁄_åì_node_t
 *
°©ic_loˇti⁄s
;

335 #i‡(
NGX_PCRE
)

336 
ngx_hâp_c‹e_loc_c⁄f_t
 **
ªgex_loˇti⁄s
;

340 **
loc_c⁄f
;

342 
uöt32_t
 
limô_ex˚±
;

343 **
limô_ex˚±_loc_c⁄f
;

345 
ngx_hâp_h™dÀr_±
 
h™dÀr
;

348 
size_t
 
Æüs
;

349 
ngx_°r_t
 
roŸ
;

350 
ngx_°r_t
 
po°_a˘i⁄
;

352 
ngx_¨øy_t
 *
roŸ_Àngths
;

353 
ngx_¨øy_t
 *
roŸ_vÆues
;

355 
ngx_¨øy_t
 *
ty≥s
;

356 
ngx_hash_t
 
ty≥s_hash
;

357 
ngx_°r_t
 
deÁu…_ty≥
;

359 
off_t
 
˛õ¡_max_body_size
;

360 
off_t
 
dúe˘io
;

361 
off_t
 
dúe˘io_Æignmít
;

363 
size_t
 
˛õ¡_body_buf„r_size
;

364 
size_t
 
£nd_low©
;

365 
size_t
 
po°p⁄e_ouçut
;

366 
size_t
 
limô_øã
;

367 
size_t
 
limô_øã_a·î
;

368 
size_t
 
£ndfûe_max_chunk
;

369 
size_t
 
ªad_ahód
;

371 
ngx_m£c_t
 
˛õ¡_body_timeout
;

372 
ngx_m£c_t
 
£nd_timeout
;

373 
ngx_m£c_t
 
kì∑live_timeout
;

374 
ngx_m£c_t
 
lögîög_time
;

375 
ngx_m£c_t
 
lögîög_timeout
;

376 
ngx_m£c_t
 
ªsﬁvî_timeout
;

378 
ngx_ªsﬁvî_t
 *
ªsﬁvî
;

380 
time_t
 
kì∑live_hódî
;

382 
ngx_uöt_t
 
kì∑live_ªque°s
;

383 
ngx_uöt_t
 
kì∑live_dißbÀ
;

384 
ngx_uöt_t
 
ßtisfy
;

385 
ngx_uöt_t
 
lögîög_˛o£
;

386 
ngx_uöt_t
 
if_modifõd_sö˚
;

387 
ngx_uöt_t
 
max_ønges
;

388 
ngx_uöt_t
 
˛õ¡_body_ö_fûe_⁄ly
;

390 
ngx_Êag_t
 
˛õ¡_body_ö_sögÀ_buf„r
;

392 
ngx_Êag_t
 
öã∫Æ
;

393 
ngx_Êag_t
 
£ndfûe
;

394 #i‡(
NGX_HAVE_FILE_AIO
)

395 
ngx_Êag_t
 
aio
;

397 
ngx_Êag_t
 
t˝_n›ush
;

398 
ngx_Êag_t
 
t˝_nodñay
;

399 
ngx_Êag_t
 
ª£t_timedout_c⁄√˘i⁄
;

400 
ngx_Êag_t
 
£rvî_«me_ö_ªdúe˘
;

401 
ngx_Êag_t
 
p‹t_ö_ªdúe˘
;

402 
ngx_Êag_t
 
msõ_∑ddög
;

403 
ngx_Êag_t
 
msõ_ª‰esh
;

404 
ngx_Êag_t
 
log_nŸ_found
;

405 
ngx_Êag_t
 
log_subªque°
;

406 
ngx_Êag_t
 
ªcursive_îr‹_∑ges
;

407 
ngx_Êag_t
 
£rvî_tokís
;

408 
ngx_Êag_t
 
chunked_å™s„r_ícodög
;

409 
ngx_Êag_t
 
ëag
;

411 #i‡(
NGX_HTTP_GZIP
)

412 
ngx_Êag_t
 
gzù_v¨y
;

414 
ngx_uöt_t
 
gzù_hâp_vîsi⁄
;

415 
ngx_uöt_t
 
gzù_¥oxõd
;

417 #i‡(
NGX_PCRE
)

418 
ngx_¨øy_t
 *
gzù_dißbÀ
;

422 #i‡(
NGX_HAVE_OPENAT
)

423 
ngx_uöt_t
 
dißbÀ_symlöks
;

424 
ngx_hâp_com∂ex_vÆue_t
 *
dißbÀ_symlöks_‰om
;

427 
ngx_¨øy_t
 *
îr‹_∑ges
;

428 
ngx_hâp_åy_fûe_t
 *
åy_fûes
;

430 
ngx_∑th_t
 *
˛õ¡_body_ãmp_∑th
;

432 
ngx_›í_fûe_ˇche_t
 *
›í_fûe_ˇche
;

433 
time_t
 
›í_fûe_ˇche_vÆid
;

434 
ngx_uöt_t
 
›í_fûe_ˇche_mö_u£s
;

435 
ngx_Êag_t
 
›í_fûe_ˇche_îr‹s
;

436 
ngx_Êag_t
 
›í_fûe_ˇche_evíts
;

438 
ngx_log_t
 *
îr‹_log
;

440 
ngx_uöt_t
 
ty≥s_hash_max_size
;

441 
ngx_uöt_t
 
ty≥s_hash_buckë_size
;

443 
ngx_queue_t
 *
loˇti⁄s
;

446 
ngx_hâp_c‹e_loc_c⁄f_t
 *
¥ev_loˇti⁄
;

452 
ngx_queue_t
 
queue
;

453 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

454 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

455 
ngx_°r_t
 *
«me
;

456 
u_ch¨
 *
fûe_«me
;

457 
ngx_uöt_t
 
löe
;

458 
ngx_queue_t
 
li°
;

459 } 
	tngx_hâp_loˇti⁄_queue_t
;

462 
	sngx_hâp_loˇti⁄_åì_node_s
 {

463 
ngx_hâp_loˇti⁄_åì_node_t
 *
À·
;

464 
ngx_hâp_loˇti⁄_åì_node_t
 *
right
;

465 
ngx_hâp_loˇti⁄_åì_node_t
 *
åì
;

467 
ngx_hâp_c‹e_loc_c⁄f_t
 *
exa˘
;

468 
ngx_hâp_c‹e_loc_c⁄f_t
 *
ö˛usive
;

470 
u_ch¨
 
auto_ªdúe˘
;

471 
u_ch¨
 
Àn
;

472 
u_ch¨
 
«me
[1];

476 
	`ngx_hâp_c‹e_run_pha£s
(
ngx_hâp_ªque°_t
 *
r
);

477 
ngx_öt_t
 
	`ngx_hâp_c‹e_gíîic_pha£
(
ngx_hâp_ªque°_t
 *
r
,

478 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

479 
ngx_öt_t
 
	`ngx_hâp_c‹e_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

480 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

481 
ngx_öt_t
 
	`ngx_hâp_c‹e_föd_c⁄fig_pha£
(
ngx_hâp_ªque°_t
 *
r
,

482 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

483 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ªwrôe_pha£
(
ngx_hâp_ªque°_t
 *
r
,

484 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

485 
ngx_öt_t
 
	`ngx_hâp_c‹e_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

486 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

487 
ngx_öt_t
 
	`ngx_hâp_c‹e_po°_ac˚ss_pha£
(
ngx_hâp_ªque°_t
 *
r
,

488 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

489 
ngx_öt_t
 
	`ngx_hâp_c‹e_åy_fûes_pha£
(
ngx_hâp_ªque°_t
 *
r
,

490 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

491 
ngx_öt_t
 
	`ngx_hâp_c‹e_c⁄ã¡_pha£
(
ngx_hâp_ªque°_t
 *
r
,

492 
ngx_hâp_pha£_h™dÀr_t
 *
ph
);

495 *
	`ngx_hâp_ã°_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hash_t
 *
ty≥s_hash
);

496 
ngx_öt_t
 
	`ngx_hâp_£t_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
);

497 
	`ngx_hâp_£t_exãn
(
ngx_hâp_ªque°_t
 *
r
);

498 
ngx_öt_t
 
	`ngx_hâp_£t_ëag
(
ngx_hâp_ªque°_t
 *
r
);

499 
ngx_öt_t
 
	`ngx_hâp_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
°©us
,

500 
ngx_°r_t
 *
˘
, 
ngx_hâp_com∂ex_vÆue_t
 *
cv
);

501 
u_ch¨
 *
	`ngx_hâp_m≠_uri_to_∑th
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
,

502 
size_t
 *
roŸ_Àngth
, size_à
ª£rved
);

503 
ngx_öt_t
 
	`ngx_hâp_auth_basic_u£r
(
ngx_hâp_ªque°_t
 *
r
);

504 #i‡(
NGX_HTTP_GZIP
)

505 
ngx_öt_t
 
	`ngx_hâp_gzù_ok
(
ngx_hâp_ªque°_t
 *
r
);

509 
ngx_öt_t
 
	`ngx_hâp_subªque°
(
ngx_hâp_ªque°_t
 *
r
,

510 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
, 
ngx_hâp_ªque°_t
 **
§
,

511 
ngx_hâp_po°_subªque°_t
 *
p§
, 
ngx_uöt_t
 
Êags
);

512 
ngx_öt_t
 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
ngx_hâp_ªque°_t
 *
r
,

513 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
);

514 
ngx_öt_t
 
	`ngx_hâp_«med_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
);

517 
ngx_hâp_˛ónup_t
 *
	`ngx_hâp_˛ónup_add
(
ngx_hâp_ªque°_t
 *
r
, 
size_t
 
size
);

520 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_hódî_fûãr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

521 
	$ngx_öt_t
 (*
	tngx_hâp_ouçut_body_fûãr_±
)

522 (
	tngx_hâp_ªque°_t
 *
	tr
, 
	tngx_chaö_t
 *
	tchaö
);

525 
ngx_öt_t
 
	`ngx_hâp_ouçut_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

526 
ngx_öt_t
 
	`ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
chaö
);

529 
ngx_öt_t
 
	`ngx_hâp_£t_dißbÀ_symlöks
(
ngx_hâp_ªque°_t
 *
r
,

530 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_°r_t
 *
∑th
, 
ngx_›í_fûe_öfo_t
 *
of
);

532 
ngx_öt_t
 
	`ngx_hâp_gë_f‹w¨ded_addr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_addr_t
 *
addr
,

533 
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
vÆue
,Çgx_¨øy_à*
¥oxõs
,

534 
ªcursive
);

537 
ngx_moduÀ_t
 
ngx_hâp_c‹e_moduÀ
;

539 
ngx_uöt_t
 
ngx_hâp_max_moduÀ
;

541 
ngx_°r_t
 
ngx_hâp_c‹e_gë_mëhod
;

544 
	#ngx_hâp_˛ór_c⁄ã¡_Àngth
(
r
) \

546 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1; \

547 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) { \

548 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0; \

549 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
; \

550 
	}

	)
}

552 
	#ngx_hâp_˛ór_ac˚±_ønges
(
r
) \

554 
r
->
Ælow_ønges
 = 0; \

555 i‡(
r
->
hódîs_out
.
ac˚±_ønges
) { \

556 
r
->
hódîs_out
.
ac˚±_ønges
->
hash
 = 0; \

557 
r
->
hódîs_out
.
ac˚±_ønges
 = 
NULL
; \

558 }

	)

560 
	#ngx_hâp_˛ór_œ°_modifõd
(
r
) \

562 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1; \

563 i‡(
r
->
hódîs_out
.
œ°_modifõd
) { \

564 
r
->
hódîs_out
.
œ°_modifõd
->
hash
 = 0; \

565 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
; \

566 }

	)

568 
	#ngx_hâp_˛ór_loˇti⁄
(
r
) \

570 i‡(
r
->
hódîs_out
.
loˇti⁄
) { \

571 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0; \

572 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
; \

573 }

	)

575 
	#ngx_hâp_˛ór_ëag
(
r
) \

577 i‡(
r
->
hódîs_out
.
ëag
) { \

578 
r
->
hódîs_out
.
ëag
->
hash
 = 0; \

579 
r
->
hódîs_out
.
ëag
 = 
NULL
; \

580 }

	)

	@src/http/ngx_http_file_cache.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_md5.h
>

14 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_ˇche_t
 *
c
);

16 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
);

17 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_hâp_ˇche_t
 *
c
);

19 
ssize_t
 
ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
,

20 
ngx_hâp_ˇche_t
 *
c
);

21 #i‡(
NGX_HAVE_FILE_AIO
)

22 
ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

24 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

25 
ngx_hâp_ˇche_t
 *
c
);

26 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_∑th_t
 *
∑th
);

28 
ngx_hâp_fûe_ˇche_node_t
 *

29 
ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
);

30 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

31 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
);

32 
ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
);

33 
time_t
 
ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

34 
time_t
 
ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

35 
ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

36 
ngx_queue_t
 *
q
, 
u_ch¨
 *
«me
);

37 
ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
);

38 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
,

39 
ngx_°r_t
 *
∑th
);

40 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
,

41 
ngx_°r_t
 *
∑th
);

42 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
,

43 
ngx_°r_t
 *
∑th
);

44 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
,

45 
ngx_hâp_ˇche_t
 *
c
);

46 
ngx_öt_t
 
ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
,

47 
ngx_°r_t
 *
∑th
);

50 
ngx_°r_t
 
	gngx_hâp_ˇche_°©us
[] = {

51 
ngx_°rög
("MISS"),

52 
ngx_°rög
("BYPASS"),

53 
ngx_°rög
("EXPIRED"),

54 
ngx_°rög
("STALE"),

55 
ngx_°rög
("UPDATING"),

56 
ngx_°rög
("HIT")

60 
u_ch¨
 
	gngx_hâp_fûe_ˇche_key
[] = { 
LF
, 'K', 'E', 'Y', ':', ' ' };

63 
ngx_öt_t


64 
	$ngx_hâp_fûe_ˇche_öô
(
ngx_shm_z⁄e_t
 *
shm_z⁄e
, *
d©a
)

66 
ngx_hâp_fûe_ˇche_t
 *
oˇche
 = 
d©a
;

68 
size_t
 
Àn
;

69 
ngx_uöt_t
 
n
;

70 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

72 
ˇche
 = 
shm_z⁄e
->
d©a
;

74 i‡(
oˇche
) {

75 i‡(
	`ngx_°rcmp
(
ˇche
->
∑th
->
«me
.
d©a
, 
oˇche
->path->name.data) != 0) {

76 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

79 &
shm_z⁄e
->
shm
.
«me
, &
ˇche
->
∑th
->name,

80 &
oˇche
->
∑th
->
«me
);

82  
NGX_ERROR
;

85 
n
 = 0;Ç < 3;Ç++) {

86 i‡(
ˇche
->
∑th
->
Àvñ
[
n
] !
oˇche
->path->level[n]) {

87 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
shm_z⁄e
->
shm
.
log
, 0,

89 &
shm_z⁄e
->
shm
.
«me
);

90  
NGX_ERROR
;

94 
ˇche
->
sh
 = 
oˇche
->sh;

96 
ˇche
->
shpoﬁ
 = 
oˇche
->shpool;

97 
ˇche
->
bsize
 = 
oˇche
->bsize;

99 
ˇche
->
max_size
 /ˇche->
bsize
;

101 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

102 
ˇche
->
∑th
->
lﬂdî
 = 
NULL
;

105  
NGX_OK
;

108 
ˇche
->
shpoﬁ
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
->
shm
.
addr
;

110 i‡(
shm_z⁄e
->
shm
.
exi°s
) {

111 
ˇche
->
sh
 = cache->
shpoﬁ
->
d©a
;

112 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

114  
NGX_OK
;

117 
ˇche
->
sh
 = 
	`ngx_¶ab_Æloc
(ˇche->
shpoﬁ
, (
ngx_hâp_fûe_ˇche_sh_t
));

118 i‡(
ˇche
->
sh
 =
NULL
) {

119  
NGX_ERROR
;

122 
ˇche
->
shpoﬁ
->
d©a
 = cache->
sh
;

124 
	`ngx_rbåì_öô
(&
ˇche
->
sh
->
rbåì
, &ˇche->sh->
£¡öñ
,

125 
ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
);

127 
	`ngx_queue_öô
(&
ˇche
->
sh
->
queue
);

129 
ˇche
->
sh
->
cﬁd
 = 1;

130 
ˇche
->
sh
->
lﬂdög
 = 0;

131 
ˇche
->
sh
->
size
 = 0;

133 
ˇche
->
bsize
 = 
	`ngx_fs_bsize
(ˇche->
∑th
->
«me
.
d©a
);

135 
ˇche
->
max_size
 /ˇche->
bsize
;

137 
Àn
 = (" i¿ˇchêkey†z⁄ê\"\""Ë+ 
shm_z⁄e
->
shm
.
«me
.len;

139 
ˇche
->
shpoﬁ
->
log_˘x
 = 
	`ngx_¶ab_Æloc
(ˇche->shpoﬁ, 
Àn
);

140 i‡(
ˇche
->
shpoﬁ
->
log_˘x
 =
NULL
) {

141  
NGX_ERROR
;

144 
	`ngx_•rötf
(
ˇche
->
shpoﬁ
->
log_˘x
, " in cache keys zone \"%V\"%Z",

145 &
shm_z⁄e
->
shm
.
«me
);

147  
NGX_OK
;

148 
	}
}

151 
ngx_öt_t


152 
	$ngx_hâp_fûe_ˇche_√w
(
ngx_hâp_ªque°_t
 *
r
)

154 
ngx_hâp_ˇche_t
 *
c
;

156 
c
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ˇche_t
));

157 i‡(
c
 =
NULL
) {

158  
NGX_ERROR
;

161 i‡(
	`ngx_¨øy_öô
(&
c
->
keys
, 
r
->
poﬁ
, 4, (
ngx_°r_t
)Ë!
NGX_OK
) {

162  
NGX_ERROR
;

165 
r
->
ˇche
 = 
c
;

166 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

167 
c
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

169  
NGX_OK
;

170 
	}
}

173 
ngx_öt_t


174 
	$ngx_hâp_fûe_ˇche_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

176 
ngx_hâp_ˇche_t
 *
c
;

177 
ngx_poﬁ_˛ónup_t
 *
˛n
;

178 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

180 
c
 = 
r
->
ˇche
;

181 
ˇche
 = 
c
->
fûe_ˇche
;

183 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

184 i‡(
˛n
 =
NULL
) {

185  
NGX_ERROR
;

188 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

189 
˛n
->
d©a
 = 
c
;

191 i‡(
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
Ë=
NGX_ERROR
) {

192  
NGX_ERROR
;

195 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199  
NGX_OK
;

200 
	}
}

204 
	$ngx_hâp_fûe_ˇche_¸óã_key
(
ngx_hâp_ªque°_t
 *
r
)

206 
size_t
 
Àn
;

207 
ngx_°r_t
 *
key
;

208 
ngx_uöt_t
 
i
;

209 
ngx_md5_t
 
md5
;

210 
ngx_hâp_ˇche_t
 *
c
;

212 
c
 = 
r
->
ˇche
;

214 
Àn
 = 0;

216 
	`ngx_¸c32_öô
(
c
->
¸c32
);

217 
	`ngx_md5_öô
(&
md5
);

219 
key
 = 
c
->
keys
.
ñts
;

220 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

221 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

222 "hâ∞ˇchêkey: \"%V\"", &
key
[
i
]);

224 
Àn
 +
key
[
i
].len;

226 
	`ngx_¸c32_upd©e
(&
c
->
¸c32
, 
key
[
i
].
d©a
, key[i].
Àn
);

227 
	`ngx_md5_upd©e
(&
md5
, 
key
[
i
].
d©a
, key[i].
Àn
);

230 
c
->
hódî_°¨t
 = (
ngx_hâp_fûe_ˇche_hódî_t
)

231 + (
ngx_hâp_fûe_ˇche_key
Ë+ 
Àn
 + 1;

233 
	`ngx_¸c32_föÆ
(
c
->
¸c32
);

234 
	`ngx_md5_föÆ
(
c
->
key
, &
md5
);

235 
	}
}

238 
ngx_öt_t


239 
	$ngx_hâp_fûe_ˇche_›í
(
ngx_hâp_ªque°_t
 *
r
)

241 
ngx_öt_t
 
rc
, 
rv
;

242 
ngx_uöt_t
 
cﬁd
, 
ã°
;

243 
ngx_hâp_ˇche_t
 *
c
;

244 
ngx_poﬁ_˛ónup_t
 *
˛n
;

245 
ngx_›í_fûe_öfo_t
 
of
;

246 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

247 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

249 
c
 = 
r
->
ˇche
;

251 i‡(
c
->
waôög
) {

252  
NGX_AGAIN
;

255 i‡(
c
->
buf
) {

256  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

259 
ˇche
 = 
c
->
fûe_ˇche
;

261 i‡(
c
->
node
 =
NULL
) {

262 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
r
->
poﬁ
, 0);

263 i‡(
˛n
 =
NULL
) {

264  
NGX_ERROR
;

267 
˛n
->
h™dÀr
 = 
ngx_hâp_fûe_ˇche_˛ónup
;

268 
˛n
->
d©a
 = 
c
;

271 
rc
 = 
	`ngx_hâp_fûe_ˇche_exi°s
(
ˇche
, 
c
);

273 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

274 "hâ∞fûêˇchêexi°s: %òe:%d", 
rc
, 
c
->
exi°s
);

276 i‡(
rc
 =
NGX_ERROR
) {

277  
rc
;

280 i‡(
rc
 =
NGX_AGAIN
) {

281  
NGX_HTTP_CACHE_SCARCE
;

284 
cﬁd
 = 
ˇche
->
sh
->cold;

286 i‡(
rc
 =
NGX_OK
) {

288 i‡(
c
->
îr‹
) {

289  
c
->
îr‹
;

292 
c
->
ãmp_fûe
 = 1;

293 
ã°
 = 
c
->
exi°s
 ? 1 : 0;

294 
rv
 = 
NGX_DECLINED
;

298 i‡(
c
->
mö_u£s
 > 1) {

300 i‡(!
cﬁd
) {

301  
NGX_HTTP_CACHE_SCARCE
;

304 
ã°
 = 1;

305 
rv
 = 
NGX_HTTP_CACHE_SCARCE
;

308 
c
->
ãmp_fûe
 = 1;

309 
ã°
 = 
cﬁd
 ? 1 : 0;

310 
rv
 = 
NGX_DECLINED
;

314 i‡(
	`ngx_hâp_fûe_ˇche_«me
(
r
, 
ˇche
->
∑th
Ë!
NGX_OK
) {

315  
NGX_ERROR
;

318 i‡(!
ã°
) {

319 
d⁄e
;

322 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

324 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

326 
of
.
uniq
 = 
c
->uniq;

327 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

328 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

329 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

330 
of
.
dúe˘io
 = 
NGX_OPEN_FILE_DIRECTIO_OFF
;

331 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

333 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
c
->
fûe
.
«me
, &
of
, 
r
->
poﬁ
)

334 !
NGX_OK
)

336 
of
.
îr
) {

339  
NGX_ERROR
;

341 
NGX_ENOENT
:

342 
NGX_ENOTDIR
:

343 
d⁄e
;

346 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

347 
ngx_›í_fûe_n
 " \"%s\" faûed", 
c
->
fûe
.
«me
.
d©a
);

348  
NGX_ERROR
;

352 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

353 "hâ∞fûêˇchêfd: %d", 
of
.
fd
);

355 
c
->
fûe
.
fd
 = 
of
.fd;

356 
c
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

357 
c
->
uniq
 = 
of
.uniq;

358 
c
->
Àngth
 = 
of
.
size
;

359 
c
->
fs_size
 = (
of
.fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

361 
c
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, c->
body_°¨t
);

362 i‡(
c
->
buf
 =
NULL
) {

363  
NGX_ERROR
;

366  
	`ngx_hâp_fûe_ˇche_ªad
(
r
, 
c
);

368 
d⁄e
:

370 i‡(
rv
 =
NGX_DECLINED
) {

371  
	`ngx_hâp_fûe_ˇche_lock
(
r
, 
c
);

374  
rv
;

375 
	}
}

378 
ngx_öt_t


379 
	$ngx_hâp_fûe_ˇche_lock
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

381 
ngx_m£c_t
 
now
, 
timî
;

382 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

384 i‡(!
c
->
lock
) {

385  
NGX_DECLINED
;

388 
ˇche
 = 
c
->
fûe_ˇche
;

390 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

392 i‡(!
c
->
node
->
upd©ög
) {

393 
c
->
node
->
upd©ög
 = 1;

394 
c
->
upd©ög
 = 1;

397 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

399 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

401 
c
->
upd©ög
, c->
waô_time
);

403 i‡(
c
->
upd©ög
) {

404  
NGX_DECLINED
;

407 
c
->
waôög
 = 1;

409 
now
 = 
ngx_cuºít_m£c
;

411 i‡(
c
->
waô_time
 == 0) {

412 
c
->
waô_time
 = 
now
 + c->
lock_timeout
;

414 
c
->
waô_evít
.
h™dÀr
 = 
ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
;

415 
c
->
waô_evít
.
d©a
 = 
r
;

416 
c
->
waô_evít
.
log
 = 
r
->
c⁄√˘i⁄
->log;

419 
timî
 = 
c
->
waô_time
 - 
now
;

421 
	`ngx_add_timî
(&
c
->
waô_evít
, (
timî
 > 500) ? 500 :Åimer);

423 
r
->
maö
->
blocked
++;

425  
NGX_AGAIN
;

426 
	}
}

430 
	$ngx_hâp_fûe_ˇche_lock_waô_h™dÀr
(
ngx_evít_t
 *
ev
)

432 
ngx_uöt_t
 
waô
;

433 
ngx_m£c_t
 
timî
;

434 
ngx_hâp_ˇche_t
 *
c
;

435 
ngx_hâp_ªque°_t
 *
r
;

436 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

438 
r
 = 
ev
->
d©a
;

439 
c
 = 
r
->
ˇche
;

441 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

443 
c
->
waô_time
, 
ngx_cuºít_m£c
);

445 
timî
 = 
c
->
waô_time
 - 
ngx_cuºít_m£c
;

447 i‡((
ngx_m£c_öt_t
Ë
timî
 <= 0) {

448 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

450 
c
->
lock
 = 0;

451 
wakeup
;

454 
ˇche
 = 
c
->
fûe_ˇche
;

455 
waô
 = 0;

457 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

459 i‡(
c
->
node
->
upd©ög
) {

460 
waô
 = 1;

463 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

465 i‡(
waô
) {

466 
	`ngx_add_timî
(
ev
, (
timî
 > 500) ? 500 :Åimer);

470 
wakeup
:

472 
c
->
waôög
 = 0;

473 
r
->
maö
->
blocked
--;

474 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûe_ˇche_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

481 
time_t
 
now
;

482 
ssize_t
 
n
;

483 
ngx_öt_t
 
rc
;

484 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

485 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
;

487 
n
 = 
	`ngx_hâp_fûe_ˇche_aio_ªad
(
r
, 
c
);

489 i‡(
n
 < 0) {

490  
n
;

493 i‡((
size_t
Ë
n
 < 
c
->
hódî_°¨t
) {

494 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

495 "ˇchêfûê\"%s\" i†toÿsmÆl", 
c
->
fûe
.
«me
.
d©a
);

496  
NGX_DECLINED
;

499 
h
 = (
ngx_hâp_fûe_ˇche_hódî_t
 *Ë
c
->
buf
->
pos
;

501 i‡(
h
->
¸c32
 !
c
->crc32) {

502 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

503 "ˇchêfûê\"%s\" ha†md5 cﬁlisi⁄", 
c
->
fûe
.
«me
.
d©a
);

504  
NGX_DECLINED
;

507 i‡(
h
->
body_°¨t
 > 
c
->body_start) {

508 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

510 
c
->
fûe
.
«me
.
d©a
);

511  
NGX_DECLINED
;

514 
c
->
buf
->
œ°
 +
n
;

516 
c
->
vÆid_£c
 = 
h
->valid_sec;

517 
c
->
œ°_modifõd
 = 
h
->last_modified;

518 
c
->
d©e
 = 
h
->date;

519 
c
->
vÆid_m£c
 = 
h
->valid_msec;

520 
c
->
hódî_°¨t
 = 
h
->header_start;

521 
c
->
body_°¨t
 = 
h
->body_start;

523 
r
->
ˇched
 = 1;

525 
ˇche
 = 
c
->
fûe_ˇche
;

527 i‡(
ˇche
->
sh
->
cﬁd
) {

529 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

531 i‡(!
c
->
node
->
exi°s
) {

532 
c
->
node
->
u£s
 = 1;

533 
c
->
node
->
body_°¨t
 = c->body_start;

534 
c
->
node
->
exi°s
 = 1;

535 
c
->
node
->
uniq
 = c->uniq;

536 
c
->
node
->
fs_size
 = c->fs_size;

538 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

541 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

544 
now
 = 
	`ngx_time
();

546 i‡(
c
->
vÆid_£c
 < 
now
) {

548 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

550 i‡(
c
->
node
->
upd©ög
) {

551 
rc
 = 
NGX_HTTP_CACHE_UPDATING
;

554 
c
->
node
->
upd©ög
 = 1;

555 
c
->
upd©ög
 = 1;

556 
rc
 = 
NGX_HTTP_CACHE_STALE
;

559 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

561 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

563 
rc
, 
c
->
vÆid_£c
, 
now
);

565  
rc
;

568  
NGX_OK
;

569 
	}
}

572 
ssize_t


573 
	$ngx_hâp_fûe_ˇche_aio_ªad
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ˇche_t
 *
c
)

575 #i‡(
NGX_HAVE_FILE_AIO
)

576 
ssize_t
 
n
;

577 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

579 i‡(!
ngx_fûe_aio
) {

580 
nﬂio
;

583 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

585 i‡(!
˛cf
->
aio
) {

586 
nﬂio
;

589 
n
 = 
	`ngx_fûe_aio_ªad
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0, 
r
->
poﬁ
);

591 i‡(
n
 !
NGX_AGAIN
) {

592  
n
;

595 
c
->
fûe
.
aio
->
d©a
 = 
r
;

596 
c
->
fûe
.
aio
->
h™dÀr
 = 
ngx_hâp_ˇche_aio_evít_h™dÀr
;

598 
r
->
maö
->
blocked
++;

599 
r
->
aio
 = 1;

601  
NGX_AGAIN
;

603 
nﬂio
:

607  
	`ngx_ªad_fûe
(&
c
->
fûe
, c->
buf
->
pos
, c->
body_°¨t
, 0);

608 
	}
}

611 #i‡(
NGX_HAVE_FILE_AIO
)

614 
	$ngx_hâp_ˇche_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

616 
ngx_evít_aio_t
 *
aio
;

617 
ngx_hâp_ªque°_t
 *
r
;

619 
aio
 = 
ev
->
d©a
;

620 
r
 = 
aio
->
d©a
;

622 
r
->
maö
->
blocked
--;

623 
r
->
aio
 = 0;

625 
r
->
c⁄√˘i⁄
->
wrôe
->
	`h™dÀr
(r->connection->write);

626 
	}
}

631 
ngx_öt_t


632 
	$ngx_hâp_fûe_ˇche_exi°s
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

634 
ngx_öt_t
 
rc
;

635 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

637 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

639 
f˙
 = 
c
->
node
;

641 i‡(
f˙
 =
NULL
) {

642 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

645 i‡(
f˙
) {

646 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

648 i‡(
c
->
node
 =
NULL
) {

649 
f˙
->
u£s
++;

650 
f˙
->
cou¡
++;

653 i‡(
f˙
->
îr‹
) {

655 i‡(
f˙
->
vÆid_£c
 < 
	`ngx_time
()) {

656 
ª√w
;

659 
rc
 = 
NGX_OK
;

661 
d⁄e
;

664 i‡(
f˙
->
exi°s
 || f˙->
u£s
 >
c
->
mö_u£s
) {

666 
c
->
exi°s
 = 
f˙
->exists;

667 i‡(
f˙
->
body_°¨t
) {

668 
c
->
body_°¨t
 = 
f˙
->body_start;

671 
rc
 = 
NGX_OK
;

673 
d⁄e
;

676 
rc
 = 
NGX_AGAIN
;

678 
d⁄e
;

681 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

682 (
ngx_hâp_fûe_ˇche_node_t
));

683 i‡(
f˙
 =
NULL
) {

684 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

686 (Ë
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

688 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

690 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

691 (
ngx_hâp_fûe_ˇche_node_t
));

692 i‡(
f˙
 =
NULL
) {

693 
rc
 = 
NGX_ERROR
;

694 
Áûed
;

698 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

700 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

701 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

703 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

705 
f˙
->
u£s
 = 1;

706 
f˙
->
cou¡
 = 1;

707 
f˙
->
upd©ög
 = 0;

708 
f˙
->
dñëög
 = 0;

710 
ª√w
:

712 
rc
 = 
NGX_DECLINED
;

714 
f˙
->
vÆid_m£c
 = 0;

715 
f˙
->
îr‹
 = 0;

716 
f˙
->
exi°s
 = 0;

717 
f˙
->
vÆid_£c
 = 0;

718 
f˙
->
uniq
 = 0;

719 
f˙
->
body_°¨t
 = 0;

720 
f˙
->
fs_size
 = 0;

722 
d⁄e
:

724 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

726 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

728 
c
->
uniq
 = 
f˙
->uniq;

729 
c
->
îr‹
 = 
f˙
->error;

730 
c
->
node
 = 
f˙
;

732 
Áûed
:

734 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

736  
rc
;

737 
	}
}

740 
ngx_öt_t


741 
	$ngx_hâp_fûe_ˇche_«me
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_∑th_t
 *
∑th
)

743 
u_ch¨
 *
p
;

744 
ngx_hâp_ˇche_t
 *
c
;

746 
c
 = 
r
->
ˇche
;

748 i‡(
c
->
fûe
.
«me
.
Àn
) {

749  
NGX_OK
;

752 
c
->
fûe
.
«me
.
Àn
 = 
∑th
->name.len + 1 +Öath->len

753 + 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

755 
c
->
fûe
.
«me
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, c->fûe.«me.
Àn
 + 1);

756 i‡(
c
->
fûe
.
«me
.
d©a
 =
NULL
) {

757  
NGX_ERROR
;

760 
	`ngx_mem˝y
(
c
->
fûe
.
«me
.
d©a
, 
∑th
->«me.d©a,Ö©h->«me.
Àn
);

762 
p
 = 
c
->
fûe
.
«me
.
d©a
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

763 
p
 = 
	`ngx_hex_dump
’, 
c
->
key
, 
NGX_HTTP_CACHE_KEY_LEN
);

764 *
p
 = '\0';

766 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
c
->
fûe
.
«me
.
d©a
, c->fûe.«me.
Àn
);

768 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

769 "ˇchêfûe: \"%s\"", 
c
->
fûe
.
«me
.
d©a
);

771  
NGX_OK
;

772 
	}
}

775 
ngx_hâp_fûe_ˇche_node_t
 *

776 
	$ngx_hâp_fûe_ˇche_lookup
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
u_ch¨
 *
key
)

778 
ngx_öt_t
 
rc
;

779 
ngx_rbåì_key_t
 
node_key
;

780 
ngx_rbåì_node_t
 *
node
, *
£¡öñ
;

781 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

783 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
node_key
, 
key
, (
ngx_rbåì_key_t
));

785 
node
 = 
ˇche
->
sh
->
rbåì
.
roŸ
;

786 
£¡öñ
 = 
ˇche
->
sh
->
rbåì
.sentinel;

788 
node
 !
£¡öñ
) {

790 i‡(
node_key
 < 
node
->
key
) {

791 
node
 =Çode->
À·
;

795 i‡(
node_key
 > 
node
->
key
) {

796 
node
 =Çode->
right
;

802 
f˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

804 
rc
 = 
	`ngx_memcmp
(&
key
[(
ngx_rbåì_key_t
)], 
f˙
->key,

805 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

807 i‡(
rc
 == 0) {

808  
f˙
;

811 
node
 = (
rc
 < 0Ë?Çode->
À·
 :Çode->
right
;

816  
NULL
;

817 
	}
}

821 
	$ngx_hâp_fûe_ˇche_rbåì_ö£π_vÆue
(
ngx_rbåì_node_t
 *
ãmp
,

822 
ngx_rbåì_node_t
 *
node
,Çgx_rbåì_node_à*
£¡öñ
)

824 
ngx_rbåì_node_t
 **
p
;

825 
ngx_hâp_fûe_ˇche_node_t
 *
˙
, *
˙t
;

829 i‡(
node
->
key
 < 
ãmp
->key) {

831 
p
 = &
ãmp
->
À·
;

833 } i‡(
node
->
key
 > 
ãmp
->key) {

835 
p
 = &
ãmp
->
right
;

839 
˙
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
node
;

840 
˙t
 = (
ngx_hâp_fûe_ˇche_node_t
 *Ë
ãmp
;

842 
p
 = (
	`ngx_memcmp
(
˙
->
key
, 
˙t
->key,

843 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
))

845 ? &
ãmp
->
À·
 : &ãmp->
right
;

848 i‡(*
p
 =
£¡öñ
) {

852 
ãmp
 = *
p
;

855 *
p
 = 
node
;

856 
node
->
∑ª¡
 = 
ãmp
;

857 
node
->
À·
 = 
£¡öñ
;

858 
node
->
right
 = 
£¡öñ
;

859 
	`ngx_rbt_ªd
(
node
);

860 
	}
}

864 
	$ngx_hâp_fûe_ˇche_£t_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
buf
)

866 
ngx_hâp_fûe_ˇche_hódî_t
 *
h
 = (ngx_hâp_fûe_ˇche_hódî_à*Ë
buf
;

868 
u_ch¨
 *
p
;

869 
ngx_°r_t
 *
key
;

870 
ngx_uöt_t
 
i
;

871 
ngx_hâp_ˇche_t
 *
c
;

873 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

876 
c
 = 
r
->
ˇche
;

878 
h
->
vÆid_£c
 = 
c
->valid_sec;

879 
h
->
œ°_modifõd
 = 
c
->last_modified;

880 
h
->
d©e
 = 
c
->date;

881 
h
->
¸c32
 = 
c
->crc32;

882 
h
->
vÆid_m£c
 = (
u_sh‹t
Ë
c
->valid_msec;

883 
h
->
hódî_°¨t
 = (
u_sh‹t
Ë
c
->header_start;

884 
h
->
body_°¨t
 = (
u_sh‹t
Ë
c
->body_start;

886 
p
 = 
buf
 + (
ngx_hâp_fûe_ˇche_hódî_t
);

888 
p
 = 
	`ngx_˝ymem
’, 
ngx_hâp_fûe_ˇche_key
, (ngx_http_file_cache_key));

890 
key
 = 
c
->
keys
.
ñts
;

891 
i
 = 0; i < 
c
->
keys
.
√…s
; i++) {

892 
p
 = 
	`ngx_c›y
’, 
key
[
i
].
d©a
, key[i].
Àn
);

895 *
p
 = 
LF
;

896 
	}
}

900 
	$ngx_hâp_fûe_ˇche_upd©e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_ãmp_fûe_t
 *
tf
)

902 
off_t
 
fs_size
;

903 
ngx_öt_t
 
rc
;

904 
ngx_fûe_uniq_t
 
uniq
;

905 
ngx_fûe_öfo_t
 
fi
;

906 
ngx_hâp_ˇche_t
 *
c
;

907 
ngx_ext_ª«me_fûe_t
 
ext
;

908 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

910 
c
 = 
r
->
ˇche
;

912 i‡(
c
->
upd©ed
) {

916 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

919 
c
->
upd©ed
 = 1;

920 
c
->
upd©ög
 = 0;

922 
ˇche
 = 
c
->
fûe_ˇche
;

924 
uniq
 = 0;

925 
fs_size
 = 0;

927 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

929 
tf
->
fûe
.
«me
.
d©a
, 
c
->file.name.data);

931 
ext
.
ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

932 
ext
.
∑th_ac˚ss
 = 
NGX_FILE_OWNER_ACCESS
;

933 
ext
.
time
 = -1;

934 
ext
.
¸óã_∑th
 = 1;

935 
ext
.
dñëe_fûe
 = 1;

936 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

938 
rc
 = 
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
c
->fûe.«me, &
ext
);

940 i‡(
rc
 =
NGX_OK
) {

942 i‡(
	`ngx_fd_öfo
(
tf
->
fûe
.
fd
, &
fi
Ë=
NGX_FILE_ERROR
) {

943 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

944 
ngx_fd_öfo_n
 " \"%s\" faûed", 
tf
->
fûe
.
«me
.
d©a
);

946 
rc
 = 
NGX_ERROR
;

949 
uniq
 = 
	`ngx_fûe_uniq
(&
fi
);

950 
fs_size
 = (
	`ngx_fûe_fs_size
(&
fi
Ë+ 
ˇche
->
bsize
 - 1) / cache->bsize;

954 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

956 
c
->
node
->
cou¡
--;

957 
c
->
node
->
uniq
 = uniq;

958 
c
->
node
->
body_°¨t
 = c->body_start;

960 
ˇche
->
sh
->
size
 +
fs_size
 - 
c
->
node
->fs_size;

961 
c
->
node
->
fs_size
 = fs_size;

963 i‡(
rc
 =
NGX_OK
) {

964 
c
->
node
->
exi°s
 = 1;

967 
c
->
node
->
upd©ög
 = 0;

969 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

970 
	}
}

973 
ngx_öt_t


974 
	$ngx_hâp_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
)

976 
ngx_öt_t
 
rc
;

977 
ngx_buf_t
 *
b
;

978 
ngx_chaö_t
 
out
;

979 
ngx_hâp_ˇche_t
 *
c
;

981 
c
 = 
r
->
ˇche
;

983 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

984 "hâ∞fûêˇchê£nd: %s", 
c
->
fûe
.
«me
.
d©a
);

986 i‡(
r
 !r->
maö
 && 
c
->
Àngth
 - c->
body_°¨t
 == 0) {

987  
	`ngx_hâp_£nd_hódî
(
r
);

992 
b
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_buf_t
));

993 i‡(
b
 =
NULL
) {

994  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

997 
b
->
fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_fûe_t
));

998 i‡(
b
->
fûe
 =
NULL
) {

999  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1002 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

1004 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
hódî_⁄ly
) {

1005  
rc
;

1008 
b
->
fûe_pos
 = 
c
->
body_°¨t
;

1009 
b
->
fûe_œ°
 = 
c
->
Àngth
;

1011 
b
->
ö_fûe
 = (
c
->
Àngth
 - c->
body_°¨t
) ? 1: 0;

1012 
b
->
œ°_buf
 = (
r
 =r->
maö
) ? 1: 0;

1013 
b
->
œ°_ö_chaö
 = 1;

1015 
b
->
fûe
->
fd
 = 
c
->file.fd;

1016 
b
->
fûe
->
«me
 = 
c
->file.name;

1017 
b
->
fûe
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1019 
out
.
buf
 = 
b
;

1020 
out
.
√xt
 = 
NULL
;

1022  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

1023 
	}
}

1027 
	$ngx_hâp_fûe_ˇche_‰ì
(
ngx_hâp_ˇche_t
 *
c
, 
ngx_ãmp_fûe_t
 *
tf
)

1029 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1030 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1032 i‡(
c
->
upd©ed
 || c->
node
 =
NULL
) {

1036 
ˇche
 = 
c
->
fûe_ˇche
;

1038 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1039 "hâ∞fûêˇchê‰ì, fd: %d", 
c
->
fûe
.
fd
);

1041 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1043 
f˙
 = 
c
->
node
;

1044 
f˙
->
cou¡
--;

1046 i‡(
c
->
upd©ög
) {

1047 
f˙
->
upd©ög
 = 0;

1050 i‡(
c
->
îr‹
) {

1051 
f˙
->
îr‹
 = 
c
->error;

1053 i‡(
c
->
vÆid_£c
) {

1054 
f˙
->
vÆid_£c
 = 
c
->valid_sec;

1055 
f˙
->
vÆid_m£c
 = 
c
->valid_msec;

1058 } i‡(!
f˙
->
exi°s
 && f˙->
cou¡
 =0 && 
c
->
mö_u£s
 == 1) {

1059 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1060 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1061 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1062 
c
->
node
 = 
NULL
;

1065 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1067 
c
->
upd©ed
 = 1;

1068 
c
->
upd©ög
 = 0;

1070 i‡(
c
->
ãmp_fûe
) {

1071 i‡(
tf
 &&Åf->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

1072 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1074 
tf
->
fûe
.
«me
.
d©a
);

1076 i‡(
	`ngx_dñëe_fûe
(
tf
->
fûe
.
«me
.
d©a
Ë=
NGX_FILE_ERROR
) {

1077 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
fûe
.
log
, 
ngx_î∫o
,

1078 
ngx_dñëe_fûe_n
 " \"%s\" failed",

1079 
tf
->
fûe
.
«me
.
d©a
);

1084 i‡(
c
->
waô_evít
.
timî_£t
) {

1085 
	`ngx_dñ_timî
(&
c
->
waô_evít
);

1087 
	}
}

1091 
	$ngx_hâp_fûe_ˇche_˛ónup
(*
d©a
)

1093 
ngx_hâp_ˇche_t
 *
c
 = 
d©a
;

1095 i‡(
c
->
upd©ed
) {

1099 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
fûe
.
log
, 0,

1102 i‡(
c
->
upd©ög
) {

1103 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
fûe
.
log
, 0,

1104 "°ÆÀd cachêupd©ög,Éº‹:%ui", 
c
->
îr‹
);

1107 
	`ngx_hâp_fûe_ˇche_‰ì
(
c
, 
NULL
);

1108 
	}
}

1111 
time_t


1112 
	$ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1114 
u_ch¨
 *
«me
;

1115 
size_t
 
Àn
;

1116 
time_t
 
waô
;

1117 
ngx_uöt_t
 
åõs
;

1118 
ngx_∑th_t
 *
∑th
;

1119 
ngx_queue_t
 *
q
;

1120 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1122 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1125 
∑th
 = 
ˇche
->path;

1126 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1128 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1129 i‡(
«me
 =
NULL
) {

1133 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1135 
waô
 = 10;

1136 
åõs
 = 20;

1138 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1140 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1141 
q
 !
	`ngx_queue_£¡öñ
(&
ˇche
->
sh
->
queue
);

1142 
q
 = 
	`ngx_queue_¥ev
(q))

1144 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1146 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1148 
f˙
->
cou¡
, f˙->
exi°s
,

1149 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1151 i‡(
f˙
->
cou¡
 == 0) {

1152 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1153 
waô
 = 0;

1156 i‡(--
åõs
) {

1160 
waô
 = 1;

1166 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1168 
	`ngx_‰ì
(
«me
);

1170  
waô
;

1171 
	}
}

1174 
time_t


1175 
	$ngx_hâp_fûe_ˇche_expúe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1177 
u_ch¨
 *
«me
, *
p
;

1178 
size_t
 
Àn
;

1179 
time_t
 
now
, 
waô
;

1180 
ngx_∑th_t
 *
∑th
;

1181 
ngx_queue_t
 *
q
;

1182 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1183 
u_ch¨
 
key
[2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1185 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1188 
∑th
 = 
ˇche
->path;

1189 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1191 
«me
 = 
	`ngx_Æloc
(
Àn
 + 1, 
ngx_cy˛e
->
log
);

1192 i‡(
«me
 =
NULL
) {

1196 
	`ngx_mem˝y
(
«me
, 
∑th
->«me.
d©a
,Ö©h->«me.
Àn
);

1198 
now
 = 
	`ngx_time
();

1200 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1204 i‡(
	`ngx_queue_em±y
(&
ˇche
->
sh
->
queue
)) {

1205 
waô
 = 10;

1209 
q
 = 
	`ngx_queue_œ°
(&
ˇche
->
sh
->
queue
);

1211 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1213 
waô
 = 
f˙
->
expúe
 - 
now
;

1215 i‡(
waô
 > 0) {

1216 
waô
 = wait > 10 ? 10 : wait;

1220 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1222 
f˙
->
cou¡
, f˙->
exi°s
,

1223 
f˙
->
key
[0], fcn->key[1], fcn->key[2], fcn->key[3]);

1225 i‡(
f˙
->
cou¡
 == 0) {

1226 
	`ngx_hâp_fûe_ˇche_dñëe
(
ˇche
, 
q
, 
«me
);

1230 i‡(
f˙
->
dñëög
) {

1231 
waô
 = 1;

1235 
p
 = 
	`ngx_hex_dump
(
key
, (
u_ch¨
 *Ë&
f˙
->
node
.key,

1236 (
ngx_rbåì_key_t
));

1237 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1238 (Ë
	`ngx_hex_dump
(
p
, 
f˙
->
key
, 
Àn
);

1246 
	`ngx_queue_ªmove
(
q
);

1247 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1248 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1250 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

1252 2 * 
NGX_HTTP_CACHE_KEY_LEN
, 
key
, 
f˙
->
cou¡
);

1255 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1257 
	`ngx_‰ì
(
«me
);

1259  
waô
;

1260 
	}
}

1264 
	$ngx_hâp_fûe_ˇche_dñëe
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_queue_t
 *
q
,

1265 
u_ch¨
 *
«me
)

1267 
u_ch¨
 *
p
;

1268 
size_t
 
Àn
;

1269 
ngx_∑th_t
 *
∑th
;

1270 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1272 
f˙
 = 
	`ngx_queue_d©a
(
q
, 
ngx_hâp_fûe_ˇche_node_t
, 
queue
);

1274 i‡(
f˙
->
exi°s
) {

1275 
ˇche
->
sh
->
size
 -
f˙
->
fs_size
;

1277 
∑th
 = 
ˇche
->path;

1278 
p
 = 
«me
 + 
∑th
->«me.
Àn
 + 1 +Öath->len;

1279 
p
 = 
	`ngx_hex_dump
’, (
u_ch¨
 *Ë&
f˙
->
node
.
key
,

1280 (
ngx_rbåì_key_t
));

1281 
Àn
 = 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
);

1282 
p
 = 
	`ngx_hex_dump
’, 
f˙
->
key
, 
Àn
);

1283 *
p
 = '\0';

1285 
f˙
->
cou¡
++;

1286 
f˙
->
dñëög
 = 1;

1287 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1289 
Àn
 = 
∑th
->
«me
.À¿+ 1 +Ö©h->À¿+ 2 * 
NGX_HTTP_CACHE_KEY_LEN
;

1290 
	`ngx_¸óã_hashed_fûíame
(
∑th
, 
«me
, 
Àn
);

1292 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1293 "hâ∞fûêˇchêexpúe: \"%s\"", 
«me
);

1295 i‡(
	`ngx_dñëe_fûe
(
«me
Ë=
NGX_FILE_ERROR
) {

1296 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 
ngx_î∫o
,

1297 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
«me
);

1300 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1301 
f˙
->
cou¡
--;

1302 
f˙
->
dñëög
 = 0;

1305 i‡(
f˙
->
cou¡
 == 0) {

1306 
	`ngx_queue_ªmove
(
q
);

1307 
	`ngx_rbåì_dñëe
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1308 
	`ngx_¶ab_‰ì_locked
(
ˇche
->
shpoﬁ
, 
f˙
);

1310 
	}
}

1313 
time_t


1314 
	$ngx_hâp_fûe_ˇche_m™agî
(*
d©a
)

1316 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1318 
off_t
 
size
;

1319 
time_t
 
√xt
, 
waô
;

1321 
√xt
 = 
	`ngx_hâp_fûe_ˇche_expúe
(
ˇche
);

1323 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1324 
ˇche
->
fûes
 = 0;

1327 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1329 
size
 = 
ˇche
->
sh
->size;

1331 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1333 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1334 "hâ∞fûêˇchêsize: %O", 
size
);

1336 i‡(
size
 < 
ˇche
->
max_size
) {

1337  
√xt
;

1340 
waô
 = 
	`ngx_hâp_fûe_ˇche_f‹˚d_expúe
(
ˇche
);

1342 i‡(
waô
 > 0) {

1343  
waô
;

1346 i‡(
ngx_quô
 || 
ngx_ãrmö©e
) {

1347  
√xt
;

1350 
	}
}

1354 
	$ngx_hâp_fûe_ˇche_lﬂdî
(*
d©a
)

1356 
ngx_hâp_fûe_ˇche_t
 *
ˇche
 = 
d©a
;

1358 
ngx_åì_˘x_t
 
åì
;

1360 i‡(!
ˇche
->
sh
->
cﬁd
 || cache->sh->
lﬂdög
) {

1364 i‡(!
	`ngx_©omic_cmp_£t
(&
ˇche
->
sh
->
lﬂdög
, 0, 
ngx_pid
)) {

1368 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1371 
åì
.
öô_h™dÀr
 = 
NULL
;

1372 
åì
.
fûe_h™dÀr
 = 
ngx_hâp_fûe_ˇche_m™age_fûe
;

1373 
åì
.
¥e_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1374 
åì
.
po°_åì_h™dÀr
 = 
ngx_hâp_fûe_ˇche_no›
;

1375 
åì
.
•ec_h™dÀr
 = 
ngx_hâp_fûe_ˇche_dñëe_fûe
;

1376 
åì
.
d©a
 = 
ˇche
;

1377 
åì
.
Æloc
 = 0;

1378 
åì
.
log
 = 
ngx_cy˛e
->log;

1380 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1381 
ˇche
->
fûes
 = 0;

1383 i‡(
	`ngx_wÆk_åì
(&
åì
, &
ˇche
->
∑th
->
«me
Ë=
NGX_ABORT
) {

1384 
ˇche
->
sh
->
lﬂdög
 = 0;

1388 
ˇche
->
sh
->
cﬁd
 = 0;

1389 
ˇche
->
sh
->
lﬂdög
 = 0;

1391 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

1393 &
ˇche
->
∑th
->
«me
,

1394 ((Ë
ˇche
->
sh
->
size
 * cache->
bsize
) / (1024 * 1024),

1395 
ˇche
->
bsize
);

1396 
	}
}

1399 
ngx_öt_t


1400 
	$ngx_hâp_fûe_ˇche_no›
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1402  
NGX_OK
;

1403 
	}
}

1406 
ngx_öt_t


1407 
	$ngx_hâp_fûe_ˇche_m™age_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1409 
ngx_m£c_t
 
ñ≠£d
;

1410 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1412 
ˇche
 = 
˘x
->
d©a
;

1414 i‡(
	`ngx_hâp_fûe_ˇche_add_fûe
(
˘x
, 
∑th
Ë!
NGX_OK
) {

1415 (Ë
	`ngx_hâp_fûe_ˇche_dñëe_fûe
(
˘x
, 
∑th
);

1418 i‡(++
ˇche
->
fûes
 >ˇche->
lﬂdî_fûes
) {

1419 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1422 
	`ngx_time_upd©e
();

1424 
ñ≠£d
 = 
	`ngx_abs
((
ngx_m£c_öt_t
Ë(
ngx_cuºít_m£c
 - 
ˇche
->
œ°
));

1426 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ngx_cy˛e
->
log
, 0,

1427 "hâ∞fûêˇchêlﬂdîÅimêñ≠£d: %M", 
ñ≠£d
);

1429 i‡(
ñ≠£d
 >
ˇche
->
lﬂdî_thªshﬁd
) {

1430 
	`ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ˇche
);

1434  (
ngx_quô
 || 
ngx_ãrmö©e
Ë? 
NGX_ABORT
 : 
NGX_OK
;

1435 
	}
}

1439 
	$ngx_hâp_fûe_ˇche_lﬂdî_¶ìp
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
)

1441 
	`ngx_m¶ìp
(
ˇche
->
lﬂdî_¶ìp
);

1443 
	`ngx_time_upd©e
();

1445 
ˇche
->
œ°
 = 
ngx_cuºít_m£c
;

1446 
ˇche
->
fûes
 = 0;

1447 
	}
}

1450 
ngx_öt_t


1451 
	$ngx_hâp_fûe_ˇche_add_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
«me
)

1453 
u_ch¨
 *
p
;

1454 
ngx_öt_t
 
n
;

1455 
ngx_uöt_t
 
i
;

1456 
ngx_hâp_ˇche_t
 
c
;

1457 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1459 i‡(
«me
->
Àn
 < 2 * 
NGX_HTTP_CACHE_KEY_LEN
) {

1460  
NGX_ERROR
;

1463 i‡(
˘x
->
size
 < (
off_t
Ë(
ngx_hâp_fûe_ˇche_hódî_t
)) {

1464 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 0,

1465 "ˇchêfûê\"%s\" i†toÿsmÆl", 
«me
->
d©a
);

1466  
NGX_ERROR
;

1469 
	`ngx_memzîo
(&
c
, (
ngx_hâp_ˇche_t
));

1470 
ˇche
 = 
˘x
->
d©a
;

1472 
c
.
Àngth
 = 
˘x
->
size
;

1473 
c
.
fs_size
 = (
˘x
->fs_sizê+ 
ˇche
->
bsize
 - 1) / cache->bsize;

1475 
p
 = &
«me
->
d©a
[«me->
Àn
 - 2 * 
NGX_HTTP_CACHE_KEY_LEN
];

1477 
i
 = 0; i < 
NGX_HTTP_CACHE_KEY_LEN
; i++) {

1478 
n
 = 
	`ngx_hextoi
(
p
, 2);

1480 i‡(
n
 =
NGX_ERROR
) {

1481  
NGX_ERROR
;

1484 
p
 += 2;

1486 
c
.
key
[
i
] = (
u_ch¨
Ë
n
;

1489  
	`ngx_hâp_fûe_ˇche_add
(
ˇche
, &
c
);

1490 
	}
}

1493 
ngx_öt_t


1494 
	$ngx_hâp_fûe_ˇche_add
(
ngx_hâp_fûe_ˇche_t
 *
ˇche
, 
ngx_hâp_ˇche_t
 *
c
)

1496 
ngx_hâp_fûe_ˇche_node_t
 *
f˙
;

1498 
	`ngx_shmtx_lock
(&
ˇche
->
shpoﬁ
->
muãx
);

1500 
f˙
 = 
	`ngx_hâp_fûe_ˇche_lookup
(
ˇche
, 
c
->
key
);

1502 i‡(
f˙
 =
NULL
) {

1504 
f˙
 = 
	`ngx_¶ab_Æloc_locked
(
ˇche
->
shpoﬁ
,

1505 (
ngx_hâp_fûe_ˇche_node_t
));

1506 i‡(
f˙
 =
NULL
) {

1507 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1508  
NGX_ERROR
;

1511 
	`ngx_mem˝y
((
u_ch¨
 *Ë&
f˙
->
node
.
key
, 
c
->key, (
ngx_rbåì_key_t
));

1513 
	`ngx_mem˝y
(
f˙
->
key
, &
c
->key[(
ngx_rbåì_key_t
)],

1514 
NGX_HTTP_CACHE_KEY_LEN
 - (
ngx_rbåì_key_t
));

1516 
	`ngx_rbåì_ö£π
(&
ˇche
->
sh
->
rbåì
, &
f˙
->
node
);

1518 
f˙
->
u£s
 = 1;

1519 
f˙
->
cou¡
 = 0;

1520 
f˙
->
vÆid_m£c
 = 0;

1521 
f˙
->
îr‹
 = 0;

1522 
f˙
->
exi°s
 = 1;

1523 
f˙
->
upd©ög
 = 0;

1524 
f˙
->
dñëög
 = 0;

1525 
f˙
->
uniq
 = 0;

1526 
f˙
->
vÆid_£c
 = 0;

1527 
f˙
->
body_°¨t
 = 0;

1528 
f˙
->
fs_size
 = 
c
->fs_size;

1530 
ˇche
->
sh
->
size
 +
c
->
fs_size
;

1533 
	`ngx_queue_ªmove
(&
f˙
->
queue
);

1536 
f˙
->
expúe
 = 
	`ngx_time
(Ë+ 
ˇche
->
öa˘ive
;

1538 
	`ngx_queue_ö£π_hód
(&
ˇche
->
sh
->
queue
, &
f˙
->queue);

1540 
	`ngx_shmtx_u∆ock
(&
ˇche
->
shpoﬁ
->
muãx
);

1542  
NGX_OK
;

1543 
	}
}

1546 
ngx_öt_t


1547 
	$ngx_hâp_fûe_ˇche_dñëe_fûe
(
ngx_åì_˘x_t
 *
˘x
, 
ngx_°r_t
 *
∑th
)

1549 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
˘x
->
log
, 0,

1550 "hâ∞fûêˇchêdñëe: \"%s\"", 
∑th
->
d©a
);

1552 i‡(
	`ngx_dñëe_fûe
(
∑th
->
d©a
Ë=
NGX_FILE_ERROR
) {

1553 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
˘x
->
log
, 
ngx_î∫o
,

1554 
ngx_dñëe_fûe_n
 " \"%s\" faûed", 
∑th
->
d©a
);

1557  
NGX_OK
;

1558 
	}
}

1561 
time_t


1562 
	$ngx_hâp_fûe_ˇche_vÆid
(
ngx_¨øy_t
 *
ˇche_vÆid
, 
ngx_uöt_t
 
°©us
)

1564 
ngx_uöt_t
 
i
;

1565 
ngx_hâp_ˇche_vÆid_t
 *
vÆid
;

1567 i‡(
ˇche_vÆid
 =
NULL
) {

1571 
vÆid
 = 
ˇche_vÆid
->
ñts
;

1572 
i
 = 0; i < 
ˇche_vÆid
->
√…s
; i++) {

1574 i‡(
vÆid
[
i
].
°©us
 == 0) {

1575  
vÆid
[
i
].valid;

1578 i‡(
vÆid
[
i
].
°©us
 == status) {

1579  
vÆid
[
i
].valid;

1584 
	}
}

1588 
	$ngx_hâp_fûe_ˇche_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1590 
off_t
 
max_size
;

1591 
u_ch¨
 *
œ°
, *
p
;

1592 
time_t
 
öa˘ive
;

1593 
ssize_t
 
size
;

1594 
ngx_°r_t
 
s
, 
«me
, *
vÆue
;

1595 
ngx_öt_t
 
lﬂdî_fûes
;

1596 
ngx_m£c_t
 
lﬂdî_¶ìp
, 
lﬂdî_thªshﬁd
;

1597 
ngx_uöt_t
 
i
, 
n
;

1598 
ngx_hâp_fûe_ˇche_t
 *
ˇche
;

1600 
ˇche
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_fûe_ˇche_t
));

1601 i‡(
ˇche
 =
NULL
) {

1602  
NGX_CONF_ERROR
;

1605 
ˇche
->
∑th
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_∑th_t
));

1606 i‡(
ˇche
->
∑th
 =
NULL
) {

1607  
NGX_CONF_ERROR
;

1610 
öa˘ive
 = 600;

1611 
lﬂdî_fûes
 = 100;

1612 
lﬂdî_¶ìp
 = 50;

1613 
lﬂdî_thªshﬁd
 = 200;

1615 
«me
.
Àn
 = 0;

1616 
size
 = 0;

1617 
max_size
 = 
NGX_MAX_OFF_T_VALUE
;

1619 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1621 
ˇche
->
∑th
->
«me
 = 
vÆue
[1];

1623 i‡(
ˇche
->
∑th
->
«me
.
d©a
[ˇche->∑th->«me.
Àn
 - 1] == '/') {

1624 
ˇche
->
∑th
->
«me
.
Àn
--;

1627 i‡(
	`ngx_c⁄f_fuŒ_«me
(
cf
->
cy˛e
, &
ˇche
->
∑th
->
«me
, 0Ë!
NGX_OK
) {

1628  
NGX_CONF_ERROR
;

1631 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

1633 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "levels=", 7) == 0) {

1635 
p
 = 
vÆue
[
i
].
d©a
 + 7;

1636 
œ°
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

1638 
n
 = 0;Ç < 3 && 
p
 < 
œ°
;Ç++) {

1640 i‡(*
p
 > '0' && *p < '3') {

1642 
ˇche
->
∑th
->
Àvñ
[
n
] = *
p
++ - '0';

1643 
ˇche
->
∑th
->
Àn
 +ˇche->∑th->
Àvñ
[
n
] + 1;

1645 i‡(
p
 =
œ°
) {

1649 i‡(*
p
++ =':' && 
n
 < 2 &&Ö !
œ°
) {

1653 
övÆid_Àvñs
;

1656 
övÆid_Àvñs
;

1659 i‡(
ˇche
->
∑th
->
Àn
 < 10 + 3) {

1663 
övÆid_Àvñs
:

1665 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1666 "övÆid \"Àvñs\" \"%V\"", &
vÆue
[
i
]);

1667  
NGX_CONF_ERROR
;

1670 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "keys_zone=", 10) == 0) {

1672 
«me
.
d©a
 = 
vÆue
[
i
].data + 10;

1674 
p
 = (
u_ch¨
 *Ë
	`ngx_°rchr
(
«me
.
d©a
, ':');

1676 i‡(
p
) {

1677 
«me
.
Àn
 = 
p
 -Çame.
d©a
;

1679 
p
++;

1681 
s
.
Àn
 = 
vÆue
[
i
].
d©a
 + vÆue[i].À¿- 
p
;

1682 
s
.
d©a
 = 
p
;

1684 
size
 = 
	`ngx_∑r£_size
(&
s
);

1685 i‡(
size
 > 8191) {

1690 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1691 "övÆid key†z⁄êsizê\"%V\"", &
vÆue
[
i
]);

1692  
NGX_CONF_ERROR
;

1695 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "inactive=", 9) == 0) {

1697 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1698 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1700 
öa˘ive
 = 
	`ngx_∑r£_time
(&
s
, 1);

1701 i‡(
öa˘ive
 =(
time_t
Ë
NGX_ERROR
) {

1702 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1703 "övÆid i«˘ivêvÆuê\"%V\"", &
vÆue
[
i
]);

1704  
NGX_CONF_ERROR
;

1710 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_size=", 9) == 0) {

1712 
s
.
Àn
 = 
vÆue
[
i
].len - 9;

1713 
s
.
d©a
 = 
vÆue
[
i
].data + 9;

1715 
max_size
 = 
	`ngx_∑r£_off£t
(&
s
);

1716 i‡(
max_size
 < 0) {

1717 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1718 "övÆid max_sizêvÆuê\"%V\"", &
vÆue
[
i
]);

1719  
NGX_CONF_ERROR
;

1725 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_files=", 13) == 0) {

1727 
lﬂdî_fûes
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + 13, vÆue[i].
Àn
 - 13);

1728 i‡(
lﬂdî_fûes
 =
NGX_ERROR
) {

1729 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1730 "övÆidÜﬂdî_fûe†vÆuê\"%V\"", &
vÆue
[
i
]);

1731  
NGX_CONF_ERROR
;

1737 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_sleep=", 13) == 0) {

1739 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

1740 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

1742 
lﬂdî_¶ìp
 = 
	`ngx_∑r£_time
(&
s
, 0);

1743 i‡(
lﬂdî_¶ìp
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1744 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1745 "övÆidÜﬂdî_¶ì∞vÆuê\"%V\"", &
vÆue
[
i
]);

1746  
NGX_CONF_ERROR
;

1752 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "loader_threshold=", 17) == 0) {

1754 
s
.
Àn
 = 
vÆue
[
i
].len - 17;

1755 
s
.
d©a
 = 
vÆue
[
i
].data + 17;

1757 
lﬂdî_thªshﬁd
 = 
	`ngx_∑r£_time
(&
s
, 0);

1758 i‡(
lﬂdî_thªshﬁd
 =(
ngx_m£c_t
Ë
NGX_ERROR
) {

1759 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1760 "övÆidÜﬂdî_thªshﬁd vÆuê\"%V\"", &
vÆue
[
i
]);

1761  
NGX_CONF_ERROR
;

1767 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1768 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

1769  
NGX_CONF_ERROR
;

1772 i‡(
«me
.
Àn
 =0 || 
size
 == 0) {

1773 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1775 &
cmd
->
«me
);

1776  
NGX_CONF_ERROR
;

1779 
ˇche
->
∑th
->
m™agî
 = 
ngx_hâp_fûe_ˇche_m™agî
;

1780 
ˇche
->
∑th
->
lﬂdî
 = 
ngx_hâp_fûe_ˇche_lﬂdî
;

1781 
ˇche
->
∑th
->
d©a
 = cache;

1782 
ˇche
->
∑th
->
c⁄f_fûe
 = 
cf
->c⁄f_fûe->
fûe
.
«me
.
d©a
;

1783 
ˇche
->
∑th
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1784 
ˇche
->
lﬂdî_fûes
 =Üoader_files;

1785 
ˇche
->
lﬂdî_¶ìp
 =Üoader_sleep;

1786 
ˇche
->
lﬂdî_thªshﬁd
 =Üoader_threshold;

1788 i‡(
	`ngx_add_∑th
(
cf
, &
ˇche
->
∑th
Ë!
NGX_OK
) {

1789  
NGX_CONF_ERROR
;

1792 
ˇche
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
size
, 
cmd
->
po°
);

1793 i‡(
ˇche
->
shm_z⁄e
 =
NULL
) {

1794  
NGX_CONF_ERROR
;

1797 i‡(
ˇche
->
shm_z⁄e
->
d©a
) {

1798 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1799 "du∂iˇã z⁄ê\"%V\"", &
«me
);

1800  
NGX_CONF_ERROR
;

1804 
ˇche
->
shm_z⁄e
->
öô
 = 
ngx_hâp_fûe_ˇche_öô
;

1805 
ˇche
->
shm_z⁄e
->
d©a
 = cache;

1807 
ˇche
->
öa˘ive
 = inactive;

1808 
ˇche
->
max_size
 = max_size;

1810  
NGX_CONF_OK
;

1811 
	}
}

1815 
	$ngx_hâp_fûe_ˇche_vÆid_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

1816 *
c⁄f
)

1818 *
p
 = 
c⁄f
;

1820 
time_t
 
vÆid
;

1821 
ngx_°r_t
 *
vÆue
;

1822 
ngx_uöt_t
 
i
, 
n
, 
°©us
;

1823 
ngx_¨øy_t
 **
a
;

1824 
ngx_hâp_ˇche_vÆid_t
 *
v
;

1825 
ngx_uöt_t
 
°©u£s
[] = { 200, 301, 302 };

1827 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

1829 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

1830 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_ˇche_vÆid_t
));

1831 i‡(*
a
 =
NULL
) {

1832  
NGX_CONF_ERROR
;

1836 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1837 
n
 = 
cf
->
¨gs
->
√…s
 - 1;

1839 
vÆid
 = 
	`ngx_∑r£_time
(&
vÆue
[
n
], 1);

1840 i‡(
vÆid
 =(
time_t
Ë
NGX_ERROR
) {

1841 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1842 "övÆidÅimêvÆuê\"%V\"", &
vÆue
[
n
]);

1843  
NGX_CONF_ERROR
;

1846 i‡(
n
 == 1) {

1848 
i
 = 0; i < 3; i++) {

1849 
v
 = 
	`ngx_¨øy_push
(*
a
);

1850 i‡(
v
 =
NULL
) {

1851  
NGX_CONF_ERROR
;

1854 
v
->
°©us
 = 
°©u£s
[
i
];

1855 
v
->
vÆid
 = valid;

1858  
NGX_CONF_OK
;

1861 
i
 = 1; i < 
n
; i++) {

1863 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "any") == 0) {

1865 
°©us
 = 0;

1869 
°©us
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
, vÆue[i].
Àn
);

1870 i‡(
°©us
 < 100) {

1871 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1872 "övÆid sètu†\"%V\"", &
vÆue
[
i
]);

1873  
NGX_CONF_ERROR
;

1877 
v
 = 
	`ngx_¨øy_push
(*
a
);

1878 i‡(
v
 =
NULL
) {

1879  
NGX_CONF_ERROR
;

1882 
v
->
°©us
 = status;

1883 
v
->
vÆid
 = valid;

1886  
NGX_CONF_OK
;

1887 
	}
}

	@src/http/ngx_http_header_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

15 
ngx_öt_t
 
ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_hódî_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL
,

33 
ngx_moduÀ_t
 
	gngx_hâp_hódî_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_hódî_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
	gngx_hâp_£rvî_°rög
[] = "Sîvî:Çgöx" 
CRLF
;

50 
	gngx_hâp_£rvî_fuŒ_°rög
[] = "Sîvî: " 
NGINX_VER
 
CRLF
;

53 
ngx_°r_t
 
	gngx_hâp_°©us_löes
[] = {

55 
ngx_°rög
("200 OK"),

56 
ngx_°rög
("201 Created"),

57 
ngx_°rög
("202 Accepted"),

58 
ngx_nuŒ_°rög
,

59 
ngx_°rög
("204 No Content"),

60 
ngx_nuŒ_°rög
,

61 
ngx_°rög
("206 Partial Content"),

65 
	#NGX_HTTP_LAST_2XX
 207

	)

66 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 200)

	)

70 
ngx_°rög
("301 Moved Permanently"),

71 
ngx_°rög
("302 Moved Temporarily"),

72 
ngx_°rög
("303 See Other"),

73 
ngx_°rög
("304 Not Modified"),

74 
ngx_nuŒ_°rög
,

75 
ngx_nuŒ_°rög
,

76 
ngx_°rög
("307 Temporary Redirect"),

78 
	#NGX_HTTP_LAST_3XX
 308

	)

79 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

81 
ngx_°rög
("400 Bad Request"),

82 
ngx_°rög
("401 Unauthorized"),

83 
ngx_°rög
("402 Payment Required"),

84 
ngx_°rög
("403 Forbidden"),

85 
ngx_°rög
("404 Not Found"),

86 
ngx_°rög
("405 Not Allowed"),

87 
ngx_°rög
("406 Not Acceptable"),

88 
ngx_nuŒ_°rög
,

89 
ngx_°rög
("408 Request Time-out"),

90 
ngx_°rög
("409 Conflict"),

91 
ngx_°rög
("410 Gone"),

92 
ngx_°rög
("411 Length Required"),

93 
ngx_°rög
("412 Precondition Failed"),

94 
ngx_°rög
("413 Request Entity Too Large"),

95 
ngx_nuŒ_°rög
,

99 
ngx_°rög
("415 Unsupported Media Type"),

100 
ngx_°rög
("416 Requested Range Not Satisfiable"),

111 
	#NGX_HTTP_LAST_4XX
 417

	)

112 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

114 
ngx_°rög
("500 Internal Server Error"),

115 
ngx_°rög
("501 Not Implemented"),

116 
ngx_°rög
("502 Bad Gateway"),

117 
ngx_°rög
("503 Service Temporarily Unavailable"),

118 
ngx_°rög
("504 Gateway Time-out"),

120 
ngx_nuŒ_°rög
,

121 
ngx_nuŒ_°rög
,

122 
ngx_°rög
("507 Insufficient Storage"),

127 
	#NGX_HTTP_LAST_5XX
 508

	)

132 
ngx_hâp_hódî_out_t
 
	gngx_hâp_hódîs_out
[] = {

133 { 
ngx_°rög
("Sîvî"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
) },

134 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
) },

135 { 
ngx_°rög
("Content-Length"),

136 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_Àngth
) },

137 { 
ngx_°rög
("Content-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_out_t
, 
c⁄ã¡_ícodög
) },

139 { 
ngx_°rög
("Loˇti⁄"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
loˇti⁄
) },

140 { 
ngx_°rög
("Last-Modified"),

141 
off£tof
(
ngx_hâp_hódîs_out_t
, 
œ°_modifõd
) },

142 { 
ngx_°rög
("Accept-Ranges"),

143 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
) },

144 { 
ngx_°rög
("Expúes"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
) },

145 { 
ngx_°rög
("Cache-Control"),

146 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
) },

147 { 
ngx_°rög
("ETag"), 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
) },

149 { 
ngx_nuŒ_°rög
, 0 }

153 
ngx_öt_t


154 
	$ngx_hâp_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

156 
u_ch¨
 *
p
;

157 
size_t
 
Àn
;

158 
ngx_°r_t
 
ho°
, *
°©us_löe
;

159 
ngx_buf_t
 *
b
;

160 
ngx_uöt_t
 
°©us
, 
i
, 
p‹t
;

161 
ngx_chaö_t
 
out
;

162 
ngx_li°_∑π_t
 *
∑π
;

163 
ngx_èbÀ_ñt_t
 *
hódî
;

164 
ngx_c⁄√˘i⁄_t
 *
c
;

165 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

166 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

167 
sockaddr_ö
 *
sö
;

168 #i‡(
NGX_HAVE_INET6
)

169 
sockaddr_ö6
 *
sö6
;

171 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

173 i‡(
r
->
hódî_£¡
) {

174  
NGX_OK
;

177 
r
->
hódî_£¡
 = 1;

179 i‡(
r
 !r->
maö
) {

180  
NGX_OK
;

183 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

184  
NGX_OK
;

187 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

188 
r
->
hódî_⁄ly
 = 1;

191 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 != -1) {

192 i‡(
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_OK


193 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_PARTIAL_CONTENT


194 && 
r
->
hódîs_out
.
°©us
 !
NGX_HTTP_NOT_MODIFIED
)

196 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

197 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

201 
Àn
 = ("HTTP/1.x "Ë- 1 + (
CRLF
) - 1

203 + (
CRLF
) - 1;

207 i‡(
r
->
hódîs_out
.
°©us_löe
.
Àn
) {

208 
Àn
 +
r
->
hódîs_out
.
°©us_löe
.len;

209 
°©us_löe
 = &
r
->
hódîs_out
.status_line;

210 #i‡(
NGX_SUPPRESS_WARN
)

211 
°©us
 = 0;

216 
°©us
 = 
r
->
hódîs_out
.status;

218 i‡(
°©us
 >
NGX_HTTP_OK


219 && 
°©us
 < 
NGX_HTTP_LAST_2XX
)

223 i‡(
°©us
 =
NGX_HTTP_NO_CONTENT
) {

224 
r
->
hódî_⁄ly
 = 1;

225 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

226 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

227 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

228 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

229 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

232 
°©us
 -
NGX_HTTP_OK
;

233 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

234 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

236 } i‡(
°©us
 >
NGX_HTTP_MOVED_PERMANENTLY


237 && 
°©us
 < 
NGX_HTTP_LAST_3XX
)

241 i‡(
°©us
 =
NGX_HTTP_NOT_MODIFIED
) {

242 
r
->
hódî_⁄ly
 = 1;

245 
°©us
 = sètu†- 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

246 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

247 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

249 } i‡(
°©us
 >
NGX_HTTP_BAD_REQUEST


250 && 
°©us
 < 
NGX_HTTP_LAST_4XX
)

253 
°©us
 = sètu†- 
NGX_HTTP_BAD_REQUEST


254 + 
NGX_HTTP_OFF_4XX
;

256 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

257 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

259 } i‡(
°©us
 >
NGX_HTTP_INTERNAL_SERVER_ERROR


260 && 
°©us
 < 
NGX_HTTP_LAST_5XX
)

263 
°©us
 = sètu†- 
NGX_HTTP_INTERNAL_SERVER_ERROR


264 + 
NGX_HTTP_OFF_5XX
;

266 
°©us_löe
 = &
ngx_hâp_°©us_löes
[
°©us
];

267 
Àn
 +
ngx_hâp_°©us_löes
[
°©us
].len;

270 
Àn
 +
NGX_INT_T_LEN
;

271 
°©us_löe
 = 
NULL
;

275 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

277 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

278 
Àn
 +
˛cf
->
£rvî_tokís
 ? (
ngx_hâp_£rvî_fuŒ_°rög
) - 1:

279 (
ngx_hâp_£rvî_°rög
) - 1;

282 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

283 
Àn
 +("D©e: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

286 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

287 
Àn
 += ("Content-Type: ") - 1

288 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 + 2;

290 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


291 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

293 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

297 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


298 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

300 
Àn
 +("C⁄ã¡-Lígth: "Ë- 1 + 
NGX_OFF_T_LEN
 + 2;

303 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


304 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

306 
Àn
 +("La°-Modifõd: M⁄, 28 Sï 1970 06:00:00 GMT" 
CRLF
) - 1;

309 
c
 = 
r
->
c⁄√˘i⁄
;

311 i‡(
r
->
hódîs_out
.
loˇti⁄


312 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


313 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

315 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

317 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

318 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

319 
ho°
 = 
cscf
->
£rvî_«me
;

321 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

322 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

325 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

326 
ho°
.
d©a
 = 
addr
;

328 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

329  
NGX_ERROR
;

333 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

335 #i‡(
NGX_HAVE_INET6
)

336 
AF_INET6
:

337 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

338 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

341 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

342 
AF_UNIX
:

343 
p‹t
 = 0;

347 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

348 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

352 
Àn
 += ("Location: https://") - 1

353 + 
ho°
.
Àn


354 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 + 2;

356 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

358 #i‡(
NGX_HTTP_SSL
)

359 i‡(
c
->
s¶
)

360 
p‹t
 = (port == 443) ? 0 :Öort;

363 
p‹t
 = (port == 80) ? 0 :Öort;

366 
p‹t
 = 0;

369 i‡(
p‹t
) {

370 
Àn
 += (":65535") - 1;

374 
	`ngx_°r_nuŒ
(&
ho°
);

375 
p‹t
 = 0;

378 i‡(
r
->
chunked
) {

379 
Àn
 +("Tøns„r-Encodög: chunked" 
CRLF
) - 1;

382 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

383 
Àn
 +("C⁄√˘i⁄: upgøde" 
CRLF
) - 1;

385 } i‡(
r
->
kì∑live
) {

386 
Àn
 +("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1;

396 i‡(
˛cf
->
kì∑live_hódî
) {

397 
Àn
 +("Kìp-Alive:Åimeout="Ë- 1 + 
NGX_TIME_T_LEN
 + 2;

401 
Àn
 +("C⁄√˘i⁄: clo£" 
CRLF
) - 1;

404 #i‡(
NGX_HTTP_GZIP
)

405 i‡(
r
->
gzù_v¨y
) {

406 i‡(
˛cf
->
gzù_v¨y
) {

407 
Àn
 +("V¨y: Ac˚±-Encodög" 
CRLF
) - 1;

410 
r
->
gzù_v¨y
 = 0;

415 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

416 
hódî
 = 
∑π
->
ñts
;

418 
i
 = 0; ; i++) {

420 i‡(
i
 >
∑π
->
√…s
) {

421 i‡(
∑π
->
√xt
 =
NULL
) {

425 
∑π
 =Ö¨t->
√xt
;

426 
hódî
 = 
∑π
->
ñts
;

427 
i
 = 0;

430 i‡(
hódî
[
i
].
hash
 == 0) {

434 
Àn
 +
hódî
[
i
].
key
.À¿+ (": "Ë- 1 + hódî[i].
vÆue
.len

435 + (
CRLF
) - 1;

438 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
Àn
);

439 i‡(
b
 =
NULL
) {

440  
NGX_ERROR
;

444 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "HTTP/1.1 ", ("HTTP/1.x ") - 1);

447 i‡(
°©us_löe
) {

448 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
°©us_löe
->
d©a
, sètus_löe->
Àn
);

451 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "%03ui", 
°©us
);

453 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

455 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

456 i‡(
˛cf
->
£rvî_tokís
) {

457 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_fuŒ_°rög
;

458 
Àn
 = (
ngx_hâp_£rvî_fuŒ_°rög
) - 1;

461 
p
 = (
u_ch¨
 *Ë
ngx_hâp_£rvî_°rög
;

462 
Àn
 = (
ngx_hâp_£rvî_°rög
) - 1;

465 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
p
, 
Àn
);

468 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

469 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Date: ", ("Date: ") - 1);

470 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
ngx_ˇched_hâp_time
.
d©a
,

471 
ngx_ˇched_hâp_time
.
Àn
);

473 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

476 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

477 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Content-Type: ",

479 
p
 = 
b
->
œ°
;

480 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

481 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

483 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


484 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

486 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "; charset=",

488 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

489 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

493 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
b
->
œ°
 - 
p
;

494 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

497 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

500 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


501 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

503 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "C⁄ã¡-Lígth: %O" 
CRLF
,

504 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

507 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


508 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

510 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Last-Modified: ",

512 
b
->
œ°
 = 
	`ngx_hâp_time
(b->œ°, 
r
->
hódîs_out
.
œ°_modifõd_time
);

514 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

517 i‡(
ho°
.
d©a
) {

519 
p
 = 
b
->
œ°
 + ("Location: ") - 1;

521 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Location: http",

524 #i‡(
NGX_HTTP_SSL
)

525 i‡(
c
->
s¶
) {

526 *
b
->
œ°
++ ='s';

530 *
b
->
œ°
++ = ':'; *b->last++ = '/'; *b->last++ = '/';

531 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ho°
.
d©a
, ho°.
Àn
);

533 i‡(
p‹t
) {

534 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, ":%ui", 
p‹t
);

537 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

538 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

542 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
b
->
œ°
 - 
p
;

543 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

544 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

546 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

549 i‡(
r
->
chunked
) {

550 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "Tøns„r-Encodög: chunked" 
CRLF
,

551 ("Tøns„r-Encodög: chunked" 
CRLF
) - 1);

554 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

555 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: upgøde" 
CRLF
,

556 ("C⁄√˘i⁄: upgøde" 
CRLF
) - 1);

558 } i‡(
r
->
kì∑live
) {

559 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: kìp-Æive" 
CRLF
,

560 ("C⁄√˘i⁄: kìp-Æive" 
CRLF
) - 1);

562 i‡(
˛cf
->
kì∑live_hódî
) {

563 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Kìp-Alive:Åimeout=%T" 
CRLF
,

564 
˛cf
->
kì∑live_hódî
);

568 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "C⁄√˘i⁄: clo£" 
CRLF
,

569 ("C⁄√˘i⁄: clo£" 
CRLF
) - 1);

572 #i‡(
NGX_HTTP_GZIP
)

573 i‡(
r
->
gzù_v¨y
) {

574 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, "V¨y: Ac˚±-Encodög" 
CRLF
,

575 ("V¨y: Ac˚±-Encodög" 
CRLF
) - 1);

579 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

580 
hódî
 = 
∑π
->
ñts
;

582 
i
 = 0; ; i++) {

584 i‡(
i
 >
∑π
->
√…s
) {

585 i‡(
∑π
->
√xt
 =
NULL
) {

589 
∑π
 =Ö¨t->
√xt
;

590 
hódî
 = 
∑π
->
ñts
;

591 
i
 = 0;

594 i‡(
hódî
[
i
].
hash
 == 0) {

598 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

599 *
b
->
œ°
++ = ':'; *b->last++ = ' ';

601 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

602 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

605 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

606 "%*s", (
size_t
Ë(
b
->
œ°
 - b->
pos
), b->pos);

609 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

611 
r
->
hódî_size
 = 
b
->
œ°
 - b->
pos
;

613 i‡(
r
->
hódî_⁄ly
) {

614 
b
->
œ°_buf
 = 1;

617 
out
.
buf
 = 
b
;

618 
out
.
√xt
 = 
NULL
;

620  
	`ngx_hâp_wrôe_fûãr
(
r
, &
out
);

621 
	}
}

624 
ngx_öt_t


625 
	$ngx_hâp_hódî_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

627 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_hódî_fûãr
;

629  
NGX_OK
;

630 
	}
}

	@src/http/ngx_http_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
uöt32_t
 
	gusuÆ
[] = {

20 #i‡(
NGX_WIN32
)

36 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

38 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

39 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

41 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

42 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

44 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

45 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
)

	)

47 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

48 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

49 && 
m
[4] =
c4


	)

51 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

52 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

53 && (((
uöt32_t
 *Ë
m
)[1] & 0xffffË=((
c5
 << 8Ë| 
c4
)

	)

55 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

56 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

57 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

59 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

60 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

61 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
)

	)

63 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

64 *(
uöt32_t
 *Ë
m
 =((
c3
 << 24Ë| (
c2
 << 16Ë| (
c1
 << 8Ë| 
c0
) \

65 && ((
uöt32_t
 *Ë
m
)[1] =((
c7
 << 24Ë| (
c6
 << 16Ë| (
c5
 << 8Ë| 
c4
) \

66 && 
m
[8] =
c8


	)

70 
	#ngx_°r3_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

71 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2


	)

73 
	#ngx_°r3Ocmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

74 
m
[0] =
c0
 && m[2] =
c2
 && m[3] =
c3


	)

76 
	#ngx_°r4cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
) \

77 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3


	)

79 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

80 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

82 
	#ngx_°r6cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
) \

83 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

84 && 
m
[4] =
c4
 && m[5] =
c5


	)

86 
	#ngx_°r7_cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

87 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

88 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6


	)

90 
	#ngx_°r8cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
) \

91 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

92 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7


	)

94 
	#ngx_°r9cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
, 
c5
, 
c6
, 
c7
, 
c8
) \

95 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 \

96 && 
m
[4] =
c4
 && m[5] =
c5
 && m[6] =
c6
 && m[7] =
c7
 && m[8] =
c8


	)

103 
ngx_öt_t


104 
	$ngx_hâp_∑r£_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

106 
u_ch¨
 
c
, 
ch
, *
p
, *
m
;

108 
sw_°¨t
 = 0,

109 
sw_mëhod
,

110 
sw_•a˚s_bef‹e_uri
,

111 
sw_schema
,

112 
sw_schema_¶ash
,

113 
sw_schema_¶ash_¶ash
,

114 
sw_ho°_°¨t
,

115 
sw_ho°
,

116 
sw_ho°_íd
,

117 
sw_ho°_ù_lôîÆ
,

118 
sw_p‹t
,

119 
sw_ho°_hâp_09
,

120 
sw_a·î_¶ash_ö_uri
,

121 
sw_check_uri
,

122 
sw_check_uri_hâp_09
,

123 
sw_uri
,

124 
sw_hâp_09
,

125 
sw_hâp_H
,

126 
sw_hâp_HT
,

127 
sw_hâp_HTT
,

128 
sw_hâp_HTTP
,

129 
sw_fú°_maj‹_digô
,

130 
sw_maj‹_digô
,

131 
sw_fú°_mö‹_digô
,

132 
sw_mö‹_digô
,

133 
sw_•a˚s_a·î_digô
,

134 
sw_Æmo°_d⁄e


135 } 
°©e
;

137 
°©e
 = 
r
->state;

139 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

140 
ch
 = *
p
;

142 
°©e
) {

145 
sw_°¨t
:

146 
r
->
ªque°_°¨t
 = 
p
;

148 i‡(
ch
 =
CR
 || ch =
LF
) {

152 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

153  
NGX_HTTP_PARSE_INVALID_METHOD
;

156 
°©e
 = 
sw_mëhod
;

159 
sw_mëhod
:

160 i‡(
ch
 == ' ') {

161 
r
->
mëhod_íd
 = 
p
 - 1;

162 
m
 = 
r
->
ªque°_°¨t
;

164 
p
 - 
m
) {

167 i‡(
	`ngx_°r3_cmp
(
m
, 'G', 'E', 'T', ' ')) {

168 
r
->
mëhod
 = 
NGX_HTTP_GET
;

172 i‡(
	`ngx_°r3_cmp
(
m
, 'P', 'U', 'T', ' ')) {

173 
r
->
mëhod
 = 
NGX_HTTP_PUT
;

180 i‡(
m
[1] == 'O') {

182 i‡(
	`ngx_°r3Ocmp
(
m
, 'P', 'O', 'S', 'T')) {

183 
r
->
mëhod
 = 
NGX_HTTP_POST
;

187 i‡(
	`ngx_°r3Ocmp
(
m
, 'C', 'O', 'P', 'Y')) {

188 
r
->
mëhod
 = 
NGX_HTTP_COPY
;

192 i‡(
	`ngx_°r3Ocmp
(
m
, 'M', 'O', 'V', 'E')) {

193 
r
->
mëhod
 = 
NGX_HTTP_MOVE
;

197 i‡(
	`ngx_°r3Ocmp
(
m
, 'L', 'O', 'C', 'K')) {

198 
r
->
mëhod
 = 
NGX_HTTP_LOCK
;

204 i‡(
	`ngx_°r4cmp
(
m
, 'H', 'E', 'A', 'D')) {

205 
r
->
mëhod
 = 
NGX_HTTP_HEAD
;

213 i‡(
	`ngx_°r5cmp
(
m
, 'M', 'K', 'C', 'O', 'L')) {

214 
r
->
mëhod
 = 
NGX_HTTP_MKCOL
;

217 i‡(
	`ngx_°r5cmp
(
m
, 'P', 'A', 'T', 'C', 'H')) {

218 
r
->
mëhod
 = 
NGX_HTTP_PATCH
;

221 i‡(
	`ngx_°r5cmp
(
m
, 'T', 'R', 'A', 'C', 'E')) {

222 
r
->
mëhod
 = 
NGX_HTTP_TRACE
;

228 i‡(
	`ngx_°r6cmp
(
m
, 'D', 'E', 'L', 'E', 'T', 'E')) {

229 
r
->
mëhod
 = 
NGX_HTTP_DELETE
;

233 i‡(
	`ngx_°r6cmp
(
m
, 'U', 'N', 'L', 'O', 'C', 'K')) {

234 
r
->
mëhod
 = 
NGX_HTTP_UNLOCK
;

241 i‡(
	`ngx_°r7_cmp
(
m
, 'O', 'P', 'T', 'I', 'O', 'N', 'S', ' '))

243 
r
->
mëhod
 = 
NGX_HTTP_OPTIONS
;

249 i‡(
	`ngx_°r8cmp
(
m
, 'P', 'R', 'O', 'P', 'F', 'I', 'N', 'D'))

251 
r
->
mëhod
 = 
NGX_HTTP_PROPFIND
;

257 i‡(
	`ngx_°r9cmp
(
m
,

260 
r
->
mëhod
 = 
NGX_HTTP_PROPPATCH
;

266 
°©e
 = 
sw_•a˚s_bef‹e_uri
;

270 i‡((
ch
 < 'A' || ch > 'Z') && ch != '_') {

271  
NGX_HTTP_PARSE_INVALID_METHOD
;

277 
sw_•a˚s_bef‹e_uri
:

279 i‡(
ch
 == '/') {

280 
r
->
uri_°¨t
 = 
p
;

281 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

285 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

286 i‡(
c
 >= 'a' && c <= 'z') {

287 
r
->
schema_°¨t
 = 
p
;

288 
°©e
 = 
sw_schema
;

292 
ch
) {

296  
NGX_HTTP_PARSE_INVALID_REQUEST
;

300 
sw_schema
:

302 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

303 i‡(
c
 >= 'a' && c <= 'z') {

307 
ch
) {

309 
r
->
schema_íd
 = 
p
;

310 
°©e
 = 
sw_schema_¶ash
;

313  
NGX_HTTP_PARSE_INVALID_REQUEST
;

317 
sw_schema_¶ash
:

318 
ch
) {

320 
°©e
 = 
sw_schema_¶ash_¶ash
;

323  
NGX_HTTP_PARSE_INVALID_REQUEST
;

327 
sw_schema_¶ash_¶ash
:

328 
ch
) {

330 
°©e
 = 
sw_ho°_°¨t
;

333  
NGX_HTTP_PARSE_INVALID_REQUEST
;

337 
sw_ho°_°¨t
:

339 
r
->
ho°_°¨t
 = 
p
;

341 i‡(
ch
 == '[') {

342 
°©e
 = 
sw_ho°_ù_lôîÆ
;

346 
°©e
 = 
sw_ho°
;

350 
sw_ho°
:

352 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

353 i‡(
c
 >= 'a' && c <= 'z') {

357 i‡((
ch
 >= '0' && ch <= '9') || ch == '.' || ch == '-') {

363 
sw_ho°_íd
:

365 
r
->
ho°_íd
 = 
p
;

367 
ch
) {

369 
°©e
 = 
sw_p‹t
;

372 
r
->
uri_°¨t
 = 
p
;

373 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

380 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

381 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

382 
°©e
 = 
sw_ho°_hâp_09
;

385  
NGX_HTTP_PARSE_INVALID_REQUEST
;

389 
sw_ho°_ù_lôîÆ
:

391 i‡(
ch
 >= '0' && ch <= '9') {

395 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

396 i‡(
c
 >= 'a' && c <= 'z') {

400 
ch
) {

404 
°©e
 = 
sw_ho°_íd
;

426  
NGX_HTTP_PARSE_INVALID_REQUEST
;

430 
sw_p‹t
:

431 i‡(
ch
 >= '0' && ch <= '9') {

435 
ch
) {

437 
r
->
p‹t_íd
 = 
p
;

438 
r
->
uri_°¨t
 = 
p
;

439 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

442 
r
->
p‹t_íd
 = 
p
;

447 
r
->
uri_°¨t
 =Ñ->
schema_íd
 + 1;

448 
r
->
uri_íd
 =Ñ->
schema_íd
 + 2;

449 
°©e
 = 
sw_ho°_hâp_09
;

452  
NGX_HTTP_PARSE_INVALID_REQUEST
;

457 
sw_ho°_hâp_09
:

458 
ch
) {

461 
CR
:

462 
r
->
hâp_mö‹
 = 9;

463 
°©e
 = 
sw_Æmo°_d⁄e
;

465 
LF
:

466 
r
->
hâp_mö‹
 = 9;

467 
d⁄e
;

469 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

470 
°©e
 = 
sw_hâp_H
;

473  
NGX_HTTP_PARSE_INVALID_REQUEST
;

479 
sw_a·î_¶ash_ö_uri
:

481 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

482 
°©e
 = 
sw_check_uri
;

486 
ch
) {

488 
r
->
uri_íd
 = 
p
;

489 
°©e
 = 
sw_check_uri_hâp_09
;

491 
CR
:

492 
r
->
uri_íd
 = 
p
;

493 
r
->
hâp_mö‹
 = 9;

494 
°©e
 = 
sw_Æmo°_d⁄e
;

496 
LF
:

497 
r
->
uri_íd
 = 
p
;

498 
r
->
hâp_mö‹
 = 9;

499 
d⁄e
;

501 
r
->
com∂ex_uri
 = 1;

502 
°©e
 = 
sw_uri
;

505 
r
->
quŸed_uri
 = 1;

506 
°©e
 = 
sw_uri
;

509 
r
->
com∂ex_uri
 = 1;

510 
°©e
 = 
sw_uri
;

512 #i‡(
NGX_WIN32
)

514 
r
->
com∂ex_uri
 = 1;

515 
°©e
 = 
sw_uri
;

519 
r
->
¨gs_°¨t
 = 
p
 + 1;

520 
°©e
 = 
sw_uri
;

523 
r
->
com∂ex_uri
 = 1;

524 
°©e
 = 
sw_uri
;

527 
r
->
∂us_ö_uri
 = 1;

530  
NGX_HTTP_PARSE_INVALID_REQUEST
;

532 
°©e
 = 
sw_check_uri
;

538 
sw_check_uri
:

540 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

544 
ch
) {

546 #i‡(
NGX_WIN32
)

547 i‡(
r
->
uri_ext
 =
p
) {

548 
r
->
com∂ex_uri
 = 1;

549 
°©e
 = 
sw_uri
;

553 
r
->
uri_ext
 = 
NULL
;

554 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

557 
r
->
uri_ext
 = 
p
 + 1;

560 
r
->
uri_íd
 = 
p
;

561 
°©e
 = 
sw_check_uri_hâp_09
;

563 
CR
:

564 
r
->
uri_íd
 = 
p
;

565 
r
->
hâp_mö‹
 = 9;

566 
°©e
 = 
sw_Æmo°_d⁄e
;

568 
LF
:

569 
r
->
uri_íd
 = 
p
;

570 
r
->
hâp_mö‹
 = 9;

571 
d⁄e
;

572 #i‡(
NGX_WIN32
)

574 
r
->
com∂ex_uri
 = 1;

575 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

579 
r
->
quŸed_uri
 = 1;

580 
°©e
 = 
sw_uri
;

583 
r
->
¨gs_°¨t
 = 
p
 + 1;

584 
°©e
 = 
sw_uri
;

587 
r
->
com∂ex_uri
 = 1;

588 
°©e
 = 
sw_uri
;

591 
r
->
∂us_ö_uri
 = 1;

594  
NGX_HTTP_PARSE_INVALID_REQUEST
;

599 
sw_check_uri_hâp_09
:

600 
ch
) {

603 
CR
:

604 
r
->
hâp_mö‹
 = 9;

605 
°©e
 = 
sw_Æmo°_d⁄e
;

607 
LF
:

608 
r
->
hâp_mö‹
 = 9;

609 
d⁄e
;

611 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

612 
°©e
 = 
sw_hâp_H
;

615 
r
->
•a˚_ö_uri
 = 1;

616 
°©e
 = 
sw_check_uri
;

623 
sw_uri
:

625 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

629 
ch
) {

631 
r
->
uri_íd
 = 
p
;

632 
°©e
 = 
sw_hâp_09
;

634 
CR
:

635 
r
->
uri_íd
 = 
p
;

636 
r
->
hâp_mö‹
 = 9;

637 
°©e
 = 
sw_Æmo°_d⁄e
;

639 
LF
:

640 
r
->
uri_íd
 = 
p
;

641 
r
->
hâp_mö‹
 = 9;

642 
d⁄e
;

644 
r
->
com∂ex_uri
 = 1;

647  
NGX_HTTP_PARSE_INVALID_REQUEST
;

652 
sw_hâp_09
:

653 
ch
) {

656 
CR
:

657 
r
->
hâp_mö‹
 = 9;

658 
°©e
 = 
sw_Æmo°_d⁄e
;

660 
LF
:

661 
r
->
hâp_mö‹
 = 9;

662 
d⁄e
;

664 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
p
;

665 
°©e
 = 
sw_hâp_H
;

668 
r
->
•a˚_ö_uri
 = 1;

669 
°©e
 = 
sw_uri
;

674 
sw_hâp_H
:

675 
ch
) {

677 
°©e
 = 
sw_hâp_HT
;

680  
NGX_HTTP_PARSE_INVALID_REQUEST
;

684 
sw_hâp_HT
:

685 
ch
) {

687 
°©e
 = 
sw_hâp_HTT
;

690  
NGX_HTTP_PARSE_INVALID_REQUEST
;

694 
sw_hâp_HTT
:

695 
ch
) {

697 
°©e
 = 
sw_hâp_HTTP
;

700  
NGX_HTTP_PARSE_INVALID_REQUEST
;

704 
sw_hâp_HTTP
:

705 
ch
) {

707 
°©e
 = 
sw_fú°_maj‹_digô
;

710  
NGX_HTTP_PARSE_INVALID_REQUEST
;

715 
sw_fú°_maj‹_digô
:

716 i‡(
ch
 < '1' || ch > '9') {

717  
NGX_HTTP_PARSE_INVALID_REQUEST
;

720 
r
->
hâp_maj‹
 = 
ch
 - '0';

721 
°©e
 = 
sw_maj‹_digô
;

725 
sw_maj‹_digô
:

726 i‡(
ch
 == '.') {

727 
°©e
 = 
sw_fú°_mö‹_digô
;

731 i‡(
ch
 < '0' || ch > '9') {

732  
NGX_HTTP_PARSE_INVALID_REQUEST
;

735 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

739 
sw_fú°_mö‹_digô
:

740 i‡(
ch
 < '0' || ch > '9') {

741  
NGX_HTTP_PARSE_INVALID_REQUEST
;

744 
r
->
hâp_mö‹
 = 
ch
 - '0';

745 
°©e
 = 
sw_mö‹_digô
;

749 
sw_mö‹_digô
:

750 i‡(
ch
 =
CR
) {

751 
°©e
 = 
sw_Æmo°_d⁄e
;

755 i‡(
ch
 =
LF
) {

756 
d⁄e
;

759 i‡(
ch
 == ' ') {

760 
°©e
 = 
sw_•a˚s_a·î_digô
;

764 i‡(
ch
 < '0' || ch > '9') {

765  
NGX_HTTP_PARSE_INVALID_REQUEST
;

768 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

771 
sw_•a˚s_a·î_digô
:

772 
ch
) {

775 
CR
:

776 
°©e
 = 
sw_Æmo°_d⁄e
;

778 
LF
:

779 
d⁄e
;

781  
NGX_HTTP_PARSE_INVALID_REQUEST
;

786 
sw_Æmo°_d⁄e
:

787 
r
->
ªque°_íd
 = 
p
 - 1;

788 
ch
) {

789 
LF
:

790 
d⁄e
;

792  
NGX_HTTP_PARSE_INVALID_REQUEST
;

797 
b
->
pos
 = 
p
;

798 
r
->
°©e
 = state;

800  
NGX_AGAIN
;

802 
d⁄e
:

804 
b
->
pos
 = 
p
 + 1;

806 i‡(
r
->
ªque°_íd
 =
NULL
) {

807 
r
->
ªque°_íd
 = 
p
;

810 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

811 
r
->
°©e
 = 
sw_°¨t
;

813 i‡(
r
->
hâp_vîsi⁄
 =9 &&Ñ->
mëhod
 !
NGX_HTTP_GET
) {

814  
NGX_HTTP_PARSE_INVALID_09_METHOD
;

817  
NGX_OK
;

818 
	}
}

821 
ngx_öt_t


822 
	$ngx_hâp_∑r£_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

823 
ngx_uöt_t
 
Ælow_undîsc‹es
)

825 
u_ch¨
 
c
, 
ch
, *
p
;

826 
ngx_uöt_t
 
hash
, 
i
;

828 
sw_°¨t
 = 0,

829 
sw_«me
,

830 
sw_•a˚_bef‹e_vÆue
,

831 
sw_vÆue
,

832 
sw_•a˚_a·î_vÆue
,

833 
sw_ign‹e_löe
,

834 
sw_Æmo°_d⁄e
,

835 
sw_hódî_Æmo°_d⁄e


836 } 
°©e
;

840 
u_ch¨
 
lowˇ£
[] =

850 
°©e
 = 
r
->state;

851 
hash
 = 
r
->
hódî_hash
;

852 
i
 = 
r
->
lowˇ£_ödex
;

854 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

855 
ch
 = *
p
;

857 
°©e
) {

860 
sw_°¨t
:

861 
r
->
hódî_«me_°¨t
 = 
p
;

862 
r
->
övÆid_hódî
 = 0;

864 
ch
) {

865 
CR
:

866 
r
->
hódî_íd
 = 
p
;

867 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

869 
LF
:

870 
r
->
hódî_íd
 = 
p
;

871 
hódî_d⁄e
;

873 
°©e
 = 
sw_«me
;

875 
c
 = 
lowˇ£
[
ch
];

877 i‡(
c
) {

878 
hash
 = 
	`ngx_hash
(0, 
c
);

879 
r
->
lowˇ£_hódî
[0] = 
c
;

880 
i
 = 1;

884 i‡(
ch
 == '\0') {

885  
NGX_HTTP_PARSE_INVALID_HEADER
;

888 
r
->
övÆid_hódî
 = 1;

896 
sw_«me
:

897 
c
 = 
lowˇ£
[
ch
];

899 i‡(
c
) {

900 
hash
 = 
	`ngx_hash
(hash, 
c
);

901 
r
->
lowˇ£_hódî
[
i
++] = 
c
;

902 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

906 i‡(
ch
 == '_') {

907 i‡(
Ælow_undîsc‹es
) {

908 
hash
 = 
	`ngx_hash
(hash, 
ch
);

909 
r
->
lowˇ£_hódî
[
i
++] = 
ch
;

910 
i
 &(
NGX_HTTP_LC_HEADER_LEN
 - 1);

913 
r
->
övÆid_hódî
 = 1;

919 i‡(
ch
 == ':') {

920 
r
->
hódî_«me_íd
 = 
p
;

921 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

925 i‡(
ch
 =
CR
) {

926 
r
->
hódî_«me_íd
 = 
p
;

927 
r
->
hódî_°¨t
 = 
p
;

928 
r
->
hódî_íd
 = 
p
;

929 
°©e
 = 
sw_Æmo°_d⁄e
;

933 i‡(
ch
 =
LF
) {

934 
r
->
hódî_«me_íd
 = 
p
;

935 
r
->
hódî_°¨t
 = 
p
;

936 
r
->
hódî_íd
 = 
p
;

937 
d⁄e
;

941 i‡(
ch
 == '/'

942 && 
r
->
up°ªam


943 && 
p
 - 
r
->
hódî_«me_°¨t
 == 4

944 && 
	`ngx_°∫cmp
(
r
->
hódî_«me_°¨t
, "HTTP", 4) == 0)

946 
°©e
 = 
sw_ign‹e_löe
;

950 i‡(
ch
 == '\0') {

951  
NGX_HTTP_PARSE_INVALID_HEADER
;

954 
r
->
övÆid_hódî
 = 1;

959 
sw_•a˚_bef‹e_vÆue
:

960 
ch
) {

963 
CR
:

964 
r
->
hódî_°¨t
 = 
p
;

965 
r
->
hódî_íd
 = 
p
;

966 
°©e
 = 
sw_Æmo°_d⁄e
;

968 
LF
:

969 
r
->
hódî_°¨t
 = 
p
;

970 
r
->
hódî_íd
 = 
p
;

971 
d⁄e
;

973  
NGX_HTTP_PARSE_INVALID_HEADER
;

975 
r
->
hódî_°¨t
 = 
p
;

976 
°©e
 = 
sw_vÆue
;

982 
sw_vÆue
:

983 
ch
) {

985 
r
->
hódî_íd
 = 
p
;

986 
°©e
 = 
sw_•a˚_a·î_vÆue
;

988 
CR
:

989 
r
->
hódî_íd
 = 
p
;

990 
°©e
 = 
sw_Æmo°_d⁄e
;

992 
LF
:

993 
r
->
hódî_íd
 = 
p
;

994 
d⁄e
;

996  
NGX_HTTP_PARSE_INVALID_HEADER
;

1001 
sw_•a˚_a·î_vÆue
:

1002 
ch
) {

1005 
CR
:

1006 
°©e
 = 
sw_Æmo°_d⁄e
;

1008 
LF
:

1009 
d⁄e
;

1011  
NGX_HTTP_PARSE_INVALID_HEADER
;

1013 
°©e
 = 
sw_vÆue
;

1019 
sw_ign‹e_löe
:

1020 
ch
) {

1021 
LF
:

1022 
°©e
 = 
sw_°¨t
;

1030 
sw_Æmo°_d⁄e
:

1031 
ch
) {

1032 
LF
:

1033 
d⁄e
;

1034 
CR
:

1037  
NGX_HTTP_PARSE_INVALID_HEADER
;

1042 
sw_hódî_Æmo°_d⁄e
:

1043 
ch
) {

1044 
LF
:

1045 
hódî_d⁄e
;

1047  
NGX_HTTP_PARSE_INVALID_HEADER
;

1052 
b
->
pos
 = 
p
;

1053 
r
->
°©e
 = state;

1054 
r
->
hódî_hash
 = 
hash
;

1055 
r
->
lowˇ£_ödex
 = 
i
;

1057  
NGX_AGAIN
;

1059 
d⁄e
:

1061 
b
->
pos
 = 
p
 + 1;

1062 
r
->
°©e
 = 
sw_°¨t
;

1063 
r
->
hódî_hash
 = 
hash
;

1064 
r
->
lowˇ£_ödex
 = 
i
;

1066  
NGX_OK
;

1068 
hódî_d⁄e
:

1070 
b
->
pos
 = 
p
 + 1;

1071 
r
->
°©e
 = 
sw_°¨t
;

1073  
NGX_HTTP_PARSE_HEADER_DONE
;

1074 
	}
}

1077 
ngx_öt_t


1078 
	$ngx_hâp_∑r£_uri
(
ngx_hâp_ªque°_t
 *
r
)

1080 
u_ch¨
 *
p
, 
ch
;

1082 
sw_°¨t
 = 0,

1083 
sw_a·î_¶ash_ö_uri
,

1084 
sw_check_uri
,

1085 
sw_uri


1086 } 
°©e
;

1088 
°©e
 = 
sw_°¨t
;

1090 
p
 = 
r
->
uri_°¨t
;Ö !r->
uri_íd
;Ö++) {

1092 
ch
 = *
p
;

1094 
°©e
) {

1096 
sw_°¨t
:

1098 i‡(
ch
 != '/') {

1099  
NGX_ERROR
;

1102 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1106 
sw_a·î_¶ash_ö_uri
:

1108 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1109 
°©e
 = 
sw_check_uri
;

1113 
ch
) {

1115 
r
->
•a˚_ö_uri
 = 1;

1116 
°©e
 = 
sw_check_uri
;

1119 
r
->
com∂ex_uri
 = 1;

1120 
°©e
 = 
sw_uri
;

1123 
r
->
quŸed_uri
 = 1;

1124 
°©e
 = 
sw_uri
;

1127 
r
->
com∂ex_uri
 = 1;

1128 
°©e
 = 
sw_uri
;

1130 #i‡(
NGX_WIN32
)

1132 
r
->
com∂ex_uri
 = 1;

1133 
°©e
 = 
sw_uri
;

1137 
r
->
¨gs_°¨t
 = 
p
 + 1;

1138 
°©e
 = 
sw_uri
;

1141 
r
->
com∂ex_uri
 = 1;

1142 
°©e
 = 
sw_uri
;

1145 
r
->
∂us_ö_uri
 = 1;

1148 
°©e
 = 
sw_check_uri
;

1154 
sw_check_uri
:

1156 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1160 
ch
) {

1162 #i‡(
NGX_WIN32
)

1163 i‡(
r
->
uri_ext
 =
p
) {

1164 
r
->
com∂ex_uri
 = 1;

1165 
°©e
 = 
sw_uri
;

1169 
r
->
uri_ext
 = 
NULL
;

1170 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1173 
r
->
uri_ext
 = 
p
 + 1;

1176 
r
->
•a˚_ö_uri
 = 1;

1178 #i‡(
NGX_WIN32
)

1180 
r
->
com∂ex_uri
 = 1;

1181 
°©e
 = 
sw_a·î_¶ash_ö_uri
;

1185 
r
->
quŸed_uri
 = 1;

1186 
°©e
 = 
sw_uri
;

1189 
r
->
¨gs_°¨t
 = 
p
 + 1;

1190 
°©e
 = 
sw_uri
;

1193 
r
->
com∂ex_uri
 = 1;

1194 
°©e
 = 
sw_uri
;

1197 
r
->
∂us_ö_uri
 = 1;

1203 
sw_uri
:

1205 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1209 
ch
) {

1211 
r
->
•a˚_ö_uri
 = 1;

1214 
r
->
com∂ex_uri
 = 1;

1221  
NGX_OK
;

1222 
	}
}

1225 
ngx_öt_t


1226 
	$ngx_hâp_∑r£_com∂ex_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
mîge_¶ashes
)

1228 
u_ch¨
 
c
, 
ch
, 
decoded
, *
p
, *
u
;

1230 
sw_usuÆ
 = 0,

1231 
sw_¶ash
,

1232 
sw_dŸ
,

1233 
sw_dŸ_dŸ
,

1234 
sw_quŸed
,

1235 
sw_quŸed_£c⁄d


1236 } 
°©e
, 
quŸed_°©e
;

1238 #i‡(
NGX_SUPPRESS_WARN
)

1239 
decoded
 = '\0';

1240 
quŸed_°©e
 = 
sw_usuÆ
;

1243 
°©e
 = 
sw_usuÆ
;

1244 
p
 = 
r
->
uri_°¨t
;

1245 
u
 = 
r
->
uri
.
d©a
;

1246 
r
->
uri_ext
 = 
NULL
;

1247 
r
->
¨gs_°¨t
 = 
NULL
;

1249 
ch
 = *
p
++;

1251 
p
 <
r
->
uri_íd
) {

1259 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1260 "s:%d in:'%Xd:%c', out:'%c'", 
°©e
, 
ch
, ch, *
u
);

1262 
°©e
) {

1264 
sw_usuÆ
:

1266 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1267 *
u
++ = 
ch
;

1268 
ch
 = *
p
++;

1272 
ch
) {

1273 #i‡(
NGX_WIN32
)

1275 i‡(
u
 - 2 >
r
->
uri
.
d©a


1276 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1278 
u
--;

1281 
r
->
uri_ext
 = 
NULL
;

1283 i‡(
p
 =
r
->
uri_°¨t
 +Ñ->
uri
.
Àn
) {

1293 
°©e
 = 
sw_¶ash
;

1294 *
u
++ = '/';

1298 #i‡(
NGX_WIN32
)

1299 i‡(
u
 - 2 >
r
->
uri
.
d©a


1300 && *(
u
 - 1) == '.' && *(u - 2) != '.')

1302 
u
--;

1305 
r
->
uri_ext
 = 
NULL
;

1306 
°©e
 = 
sw_¶ash
;

1307 *
u
++ = 
ch
;

1310 
quŸed_°©e
 = 
°©e
;

1311 
°©e
 = 
sw_quŸed
;

1314 
r
->
¨gs_°¨t
 = 
p
;

1315 
¨gs
;

1317 
d⁄e
;

1319 
r
->
uri_ext
 = 
u
 + 1;

1320 *
u
++ = 
ch
;

1323 
r
->
∂us_ö_uri
 = 1;

1326 *
u
++ = 
ch
;

1330 
ch
 = *
p
++;

1333 
sw_¶ash
:

1335 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1336 
°©e
 = 
sw_usuÆ
;

1337 *
u
++ = 
ch
;

1338 
ch
 = *
p
++;

1342 
ch
) {

1343 #i‡(
NGX_WIN32
)

1348 i‡(!
mîge_¶ashes
) {

1349 *
u
++ = 
ch
;

1353 
°©e
 = 
sw_dŸ
;

1354 *
u
++ = 
ch
;

1357 
quŸed_°©e
 = 
°©e
;

1358 
°©e
 = 
sw_quŸed
;

1361 
r
->
¨gs_°¨t
 = 
p
;

1362 
¨gs
;

1364 
d⁄e
;

1366 
r
->
∂us_ö_uri
 = 1;

1368 
°©e
 = 
sw_usuÆ
;

1369 *
u
++ = 
ch
;

1373 
ch
 = *
p
++;

1376 
sw_dŸ
:

1378 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1379 
°©e
 = 
sw_usuÆ
;

1380 *
u
++ = 
ch
;

1381 
ch
 = *
p
++;

1385 
ch
) {

1386 #i‡(
NGX_WIN32
)

1390 
°©e
 = 
sw_¶ash
;

1391 
u
--;

1394 
°©e
 = 
sw_dŸ_dŸ
;

1395 *
u
++ = 
ch
;

1398 
quŸed_°©e
 = 
°©e
;

1399 
°©e
 = 
sw_quŸed
;

1402 
r
->
¨gs_°¨t
 = 
p
;

1403 
¨gs
;

1405 
d⁄e
;

1407 
r
->
∂us_ö_uri
 = 1;

1409 
°©e
 = 
sw_usuÆ
;

1410 *
u
++ = 
ch
;

1414 
ch
 = *
p
++;

1417 
sw_dŸ_dŸ
:

1419 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1420 
°©e
 = 
sw_usuÆ
;

1421 *
u
++ = 
ch
;

1422 
ch
 = *
p
++;

1426 
ch
) {

1427 #i‡(
NGX_WIN32
)

1431 
°©e
 = 
sw_¶ash
;

1432 
u
 -= 5;

1434 i‡(
u
 < 
r
->
uri
.
d©a
) {

1435  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1437 i‡(*
u
 == '/') {

1438 
u
++;

1441 
u
--;

1445 
quŸed_°©e
 = 
°©e
;

1446 
°©e
 = 
sw_quŸed
;

1449 
r
->
¨gs_°¨t
 = 
p
;

1450 
¨gs
;

1452 
d⁄e
;

1454 
r
->
∂us_ö_uri
 = 1;

1456 
°©e
 = 
sw_usuÆ
;

1457 *
u
++ = 
ch
;

1461 
ch
 = *
p
++;

1464 
sw_quŸed
:

1465 
r
->
quŸed_uri
 = 1;

1467 i‡(
ch
 >= '0' && ch <= '9') {

1468 
decoded
 = (
u_ch¨
Ë(
ch
 - '0');

1469 
°©e
 = 
sw_quŸed_£c⁄d
;

1470 
ch
 = *
p
++;

1474 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1475 i‡(
c
 >= 'a' && c <= 'f') {

1476 
decoded
 = (
u_ch¨
Ë(
c
 - 'a' + 10);

1477 
°©e
 = 
sw_quŸed_£c⁄d
;

1478 
ch
 = *
p
++;

1482  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1484 
sw_quŸed_£c⁄d
:

1485 i‡(
ch
 >= '0' && ch <= '9') {

1486 
ch
 = (
u_ch¨
Ë((
decoded
 << 4) + ch - '0');

1488 i‡(
ch
 == '%' || ch == '#') {

1489 
°©e
 = 
sw_usuÆ
;

1490 *
u
++ = 
ch
;

1491 
ch
 = *
p
++;

1494 } i‡(
ch
 == '\0') {

1495  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1498 
°©e
 = 
quŸed_°©e
;

1502 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

1503 i‡(
c
 >= 'a' && c <= 'f') {

1504 
ch
 = (
u_ch¨
Ë((
decoded
 << 4Ë+ 
c
 - 'a' + 10);

1506 i‡(
ch
 == '?') {

1507 
°©e
 = 
sw_usuÆ
;

1508 *
u
++ = 
ch
;

1509 
ch
 = *
p
++;

1512 } i‡(
ch
 == '+') {

1513 
r
->
∂us_ö_uri
 = 1;

1516 
°©e
 = 
quŸed_°©e
;

1520  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1524 
d⁄e
:

1526 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1528 i‡(
r
->
uri_ext
) {

1529 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1530 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1533 
r
->
uri_ext
 = 
NULL
;

1535  
NGX_OK
;

1537 
¨gs
:

1539 
p
 < 
r
->
uri_íd
) {

1540 i‡(*
p
++ != '#') {

1544 
r
->
¨gs
.
Àn
 = 
p
 - 1 -Ñ->
¨gs_°¨t
;

1545 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1546 
r
->
¨gs_°¨t
 = 
NULL
;

1551 
r
->
uri
.
Àn
 = 
u
 -Ñ->uri.
d©a
;

1553 i‡(
r
->
uri_ext
) {

1554 
r
->
exãn
.
Àn
 = 
u
 -Ñ->
uri_ext
;

1555 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1558 
r
->
uri_ext
 = 
NULL
;

1560  
NGX_OK
;

1561 
	}
}

1564 
ngx_öt_t


1565 
	$ngx_hâp_∑r£_°©us_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1566 
ngx_hâp_°©us_t
 *
°©us
)

1568 
u_ch¨
 
ch
;

1569 
u_ch¨
 *
p
;

1571 
sw_°¨t
 = 0,

1572 
sw_H
,

1573 
sw_HT
,

1574 
sw_HTT
,

1575 
sw_HTTP
,

1576 
sw_fú°_maj‹_digô
,

1577 
sw_maj‹_digô
,

1578 
sw_fú°_mö‹_digô
,

1579 
sw_mö‹_digô
,

1580 
sw_°©us
,

1581 
sw_•a˚_a·î_°©us
,

1582 
sw_°©us_ãxt
,

1583 
sw_Æmo°_d⁄e


1584 } 
°©e
;

1586 
°©e
 = 
r
->state;

1588 
p
 = 
b
->
pos
;Ö < b->
œ°
;Ö++) {

1589 
ch
 = *
p
;

1591 
°©e
) {

1594 
sw_°¨t
:

1595 
ch
) {

1597 
°©e
 = 
sw_H
;

1600  
NGX_ERROR
;

1604 
sw_H
:

1605 
ch
) {

1607 
°©e
 = 
sw_HT
;

1610  
NGX_ERROR
;

1614 
sw_HT
:

1615 
ch
) {

1617 
°©e
 = 
sw_HTT
;

1620  
NGX_ERROR
;

1624 
sw_HTT
:

1625 
ch
) {

1627 
°©e
 = 
sw_HTTP
;

1630  
NGX_ERROR
;

1634 
sw_HTTP
:

1635 
ch
) {

1637 
°©e
 = 
sw_fú°_maj‹_digô
;

1640  
NGX_ERROR
;

1645 
sw_fú°_maj‹_digô
:

1646 i‡(
ch
 < '1' || ch > '9') {

1647  
NGX_ERROR
;

1650 
r
->
hâp_maj‹
 = 
ch
 - '0';

1651 
°©e
 = 
sw_maj‹_digô
;

1655 
sw_maj‹_digô
:

1656 i‡(
ch
 == '.') {

1657 
°©e
 = 
sw_fú°_mö‹_digô
;

1661 i‡(
ch
 < '0' || ch > '9') {

1662  
NGX_ERROR
;

1665 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

1669 
sw_fú°_mö‹_digô
:

1670 i‡(
ch
 < '0' || ch > '9') {

1671  
NGX_ERROR
;

1674 
r
->
hâp_mö‹
 = 
ch
 - '0';

1675 
°©e
 = 
sw_mö‹_digô
;

1679 
sw_mö‹_digô
:

1680 i‡(
ch
 == ' ') {

1681 
°©e
 = 
sw_°©us
;

1685 i‡(
ch
 < '0' || ch > '9') {

1686  
NGX_ERROR
;

1689 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

1693 
sw_°©us
:

1694 i‡(
ch
 == ' ') {

1698 i‡(
ch
 < '0' || ch > '9') {

1699  
NGX_ERROR
;

1702 
°©us
->
code
 = sètus->codê* 10 + 
ch
 - '0';

1704 i‡(++
°©us
->
cou¡
 == 3) {

1705 
°©e
 = 
sw_•a˚_a·î_°©us
;

1706 
°©us
->
°¨t
 = 
p
 - 2;

1712 
sw_•a˚_a·î_°©us
:

1713 
ch
) {

1715 
°©e
 = 
sw_°©us_ãxt
;

1718 
°©e
 = 
sw_°©us_ãxt
;

1720 
CR
:

1721 
°©e
 = 
sw_Æmo°_d⁄e
;

1723 
LF
:

1724 
d⁄e
;

1726  
NGX_ERROR
;

1731 
sw_°©us_ãxt
:

1732 
ch
) {

1733 
CR
:

1734 
°©e
 = 
sw_Æmo°_d⁄e
;

1737 
LF
:

1738 
d⁄e
;

1743 
sw_Æmo°_d⁄e
:

1744 
°©us
->
íd
 = 
p
 - 1;

1745 
ch
) {

1746 
LF
:

1747 
d⁄e
;

1749  
NGX_ERROR
;

1754 
b
->
pos
 = 
p
;

1755 
r
->
°©e
 = state;

1757  
NGX_AGAIN
;

1759 
d⁄e
:

1761 
b
->
pos
 = 
p
 + 1;

1763 i‡(
°©us
->
íd
 =
NULL
) {

1764 
°©us
->
íd
 = 
p
;

1767 
°©us
->
hâp_vîsi⁄
 = 
r
->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

1768 
r
->
°©e
 = 
sw_°¨t
;

1770  
NGX_OK
;

1771 
	}
}

1774 
ngx_öt_t


1775 
	$ngx_hâp_∑r£_unß„_uri
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,

1776 
ngx_°r_t
 *
¨gs
, 
ngx_uöt_t
 *
Êags
)

1778 
u_ch¨
 
ch
, *
p
;

1779 
size_t
 
Àn
;

1781 
Àn
 = 
uri
->len;

1782 
p
 = 
uri
->
d©a
;

1784 i‡(
Àn
 =0 || 
p
[0] == '?') {

1785 
unß„
;

1788 i‡(
p
[0] ='.' && 
Àn
 =3 &&Ö[1] ='.' && (
	`ngx_∑th_£∑øt‹
(p[2]))) {

1789 
unß„
;

1792  ; 
Àn
;Üen--) {

1794 
ch
 = *
p
++;

1796 i‡(
usuÆ
[
ch
 >> 5] & (1 << (ch & 0x1f))) {

1800 i‡(
ch
 == '?') {

1801 
¨gs
->
Àn
 =Üen - 1;

1802 
¨gs
->
d©a
 = 
p
;

1803 
uri
->
Àn
 -=Üen;

1805  
NGX_OK
;

1808 i‡(
ch
 == '\0') {

1809 
unß„
;

1812 i‡(
	`ngx_∑th_£∑øt‹
(
ch
Ë&& 
Àn
 > 2) {

1816 i‡(
p
[0] ='.' &&Ö[1] ='.' && 
	`ngx_∑th_£∑øt‹
(p[2])) {

1817 
unß„
;

1822  
NGX_OK
;

1824 
unß„
:

1826 i‡(*
Êags
 & 
NGX_HTTP_LOG_UNSAFE
) {

1827 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1828 "unß„ URI \"%V\" wa†dëe˘ed", 
uri
);

1831  
NGX_ERROR
;

1832 
	}
}

1835 
ngx_öt_t


1836 
	$ngx_hâp_∑r£_mu…i_hódî_löes
(
ngx_¨øy_t
 *
hódîs
, 
ngx_°r_t
 *
«me
,

1837 
ngx_°r_t
 *
vÆue
)

1839 
ngx_uöt_t
 
i
;

1840 
u_ch¨
 *
°¨t
, *
œ°
, *
íd
, 
ch
;

1841 
ngx_èbÀ_ñt_t
 **
h
;

1843 
h
 = 
hódîs
->
ñts
;

1845 
i
 = 0; i < 
hódîs
->
√…s
; i++) {

1847 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
hódîs
->
poﬁ
->
log
, 0,

1848 "∑r£ hódî: \"%V: %V\"", &
h
[
i
]->
key
, &h[i]->
vÆue
);

1850 i‡(
«me
->
Àn
 > 
h
[
i
]->
vÆue
.len) {

1854 
°¨t
 = 
h
[
i
]->
vÆue
.
d©a
;

1855 
íd
 = 
h
[
i
]->
vÆue
.
d©a
 + h[i]->vÆue.
Àn
;

1857 
°¨t
 < 
íd
) {

1859 i‡(
	`ngx_°∫ˇ£cmp
(
°¨t
, 
«me
->
d©a
,Çame->
Àn
) != 0) {

1860 
skù
;

1863 
°¨t
 +
«me
->
Àn
; sèπ < 
íd
 && *start == ' '; start++) {

1867 i‡(
vÆue
 =
NULL
) {

1868 i‡(
°¨t
 =
íd
 || *start == ',') {

1869  
i
;

1872 
skù
;

1875 i‡(
°¨t
 =
íd
 || *start++ != '=') {

1877 
skù
;

1880 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1882 
œ°
 = 
°¨t
;Üa° < 
íd
 && *last != ';';Üast++) {

1886 
vÆue
->
Àn
 = 
œ°
 - 
°¨t
;

1887 
vÆue
->
d©a
 = 
°¨t
;

1889  
i
;

1891 
skù
:

1893 
°¨t
 < 
íd
) {

1894 
ch
 = *
°¨t
++;

1895 i‡(
ch
 == ';' || ch == ',') {

1900 
°¨t
 < 
íd
 && *start == ' ') { start++; }

1904  
NGX_DECLINED
;

1905 
	}
}

1908 
ngx_öt_t


1909 
	$ngx_hâp_¨g
(
ngx_hâp_ªque°_t
 *
r
, 
u_ch¨
 *
«me
, 
size_t
 
Àn
, 
ngx_°r_t
 *
vÆue
)

1911 
u_ch¨
 *
p
, *
œ°
;

1913 i‡(
r
->
¨gs
.
Àn
 == 0) {

1914  
NGX_DECLINED
;

1917 
p
 = 
r
->
¨gs
.
d©a
;

1918 
œ°
 = 
p
 + 
r
->
¨gs
.
Àn
;

1920  ; 
p
 < 
œ°
;Ö++) {

1924 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
 - 1, 
«me
, 
Àn
 - 1);

1926 i‡(
p
 =
NULL
) {

1927  
NGX_DECLINED
;

1930 i‡((
p
 =
r
->
¨gs
.
d©a
 || *’ - 1Ë='&'Ë&& *’ + 
Àn
) == '=') {

1932 
vÆue
->
d©a
 = 
p
 + 
Àn
 + 1;

1934 
p
 = 
	`ngx_°æchr
’, 
œ°
, '&');

1936 i‡(
p
 =
NULL
) {

1937 
p
 = 
r
->
¨gs
.
d©a
 +Ñ->¨gs.
Àn
;

1940 
vÆue
->
Àn
 = 
p
 - vÆue->
d©a
;

1942  
NGX_OK
;

1946  
NGX_DECLINED
;

1947 
	}
}

1951 
	$ngx_hâp_•lô_¨gs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
uri
,Çgx_°r_à*
¨gs
)

1953 
u_ch¨
 *
p
, *
œ°
;

1955 
œ°
 = 
uri
->
d©a
 + uri->
Àn
;

1957 
p
 = 
	`ngx_°æchr
(
uri
->
d©a
, 
œ°
, '?');

1959 i‡(
p
) {

1960 
uri
->
Àn
 = 
p
 - uri->
d©a
;

1961 
p
++;

1962 
¨gs
->
Àn
 = 
œ°
 - 
p
;

1963 
¨gs
->
d©a
 = 
p
;

1966 
¨gs
->
Àn
 = 0;

1968 
	}
}

1971 
ngx_öt_t


1972 
	$ngx_hâp_∑r£_chunked
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
,

1973 
ngx_hâp_chunked_t
 *
˘x
)

1975 
u_ch¨
 *
pos
, 
ch
, 
c
;

1976 
ngx_öt_t
 
rc
;

1978 
sw_chunk_°¨t
 = 0,

1979 
sw_chunk_size
,

1980 
sw_chunk_exãnsi⁄
,

1981 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
,

1982 
sw_chunk_d©a
,

1983 
sw_a·î_d©a
,

1984 
sw_a·î_d©a_Æmo°_d⁄e
,

1985 
sw_œ°_chunk_exãnsi⁄
,

1986 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
,

1987 
sw_åaûî
,

1988 
sw_åaûî_Æmo°_d⁄e
,

1989 
sw_åaûî_hódî
,

1990 
sw_åaûî_hódî_Æmo°_d⁄e


1991 } 
°©e
;

1993 
°©e
 = 
˘x
->state;

1995 i‡(
°©e
 =
sw_chunk_d©a
 && 
˘x
->
size
 == 0) {

1996 
°©e
 = 
sw_a·î_d©a
;

1999 
rc
 = 
NGX_AGAIN
;

2001 
pos
 = 
b
->pos;Öo†< b->
œ°
;Öos++) {

2003 
ch
 = *
pos
;

2005 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2006 "hâ∞chunked byã: %02Xd s:%d", 
ch
, 
°©e
);

2008 
°©e
) {

2010 
sw_chunk_°¨t
:

2011 i‡(
ch
 >= '0' && ch <= '9') {

2012 
°©e
 = 
sw_chunk_size
;

2013 
˘x
->
size
 = 
ch
 - '0';

2017 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2019 i‡(
c
 >= 'a' && c <= 'f') {

2020 
°©e
 = 
sw_chunk_size
;

2021 
˘x
->
size
 = 
c
 - 'a' + 10;

2025 
övÆid
;

2027 
sw_chunk_size
:

2028 i‡(
ch
 >= '0' && ch <= '9') {

2029 
˘x
->
size
 = ctx->sizê* 16 + (
ch
 - '0');

2033 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

2035 i‡(
c
 >= 'a' && c <= 'f') {

2036 
˘x
->
size
 = ctx->sizê* 16 + (
c
 - 'a' + 10);

2040 i‡(
˘x
->
size
 == 0) {

2042 
ch
) {

2043 
CR
:

2044 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2046 
LF
:

2047 
°©e
 = 
sw_åaûî
;

2052 
°©e
 = 
sw_œ°_chunk_exãnsi⁄
;

2055 
övÆid
;

2061 
ch
) {

2062 
CR
:

2063 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2065 
LF
:

2066 
°©e
 = 
sw_chunk_d©a
;

2071 
°©e
 = 
sw_chunk_exãnsi⁄
;

2074 
övÆid
;

2079 
sw_chunk_exãnsi⁄
:

2080 
ch
) {

2081 
CR
:

2082 
°©e
 = 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
;

2084 
LF
:

2085 
°©e
 = 
sw_chunk_d©a
;

2089 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2090 i‡(
ch
 =
LF
) {

2091 
°©e
 = 
sw_chunk_d©a
;

2094 
övÆid
;

2096 
sw_chunk_d©a
:

2097 
rc
 = 
NGX_OK
;

2098 
d©a
;

2100 
sw_a·î_d©a
:

2101 
ch
) {

2102 
CR
:

2103 
°©e
 = 
sw_a·î_d©a_Æmo°_d⁄e
;

2105 
LF
:

2106 
°©e
 = 
sw_chunk_°¨t
;

2110 
sw_a·î_d©a_Æmo°_d⁄e
:

2111 i‡(
ch
 =
LF
) {

2112 
°©e
 = 
sw_chunk_°¨t
;

2115 
övÆid
;

2117 
sw_œ°_chunk_exãnsi⁄
:

2118 
ch
) {

2119 
CR
:

2120 
°©e
 = 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
;

2122 
LF
:

2123 
°©e
 = 
sw_åaûî
;

2127 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2128 i‡(
ch
 =
LF
) {

2129 
°©e
 = 
sw_åaûî
;

2132 
övÆid
;

2134 
sw_åaûî
:

2135 
ch
) {

2136 
CR
:

2137 
°©e
 = 
sw_åaûî_Æmo°_d⁄e
;

2139 
LF
:

2140 
d⁄e
;

2142 
°©e
 = 
sw_åaûî_hódî
;

2146 
sw_åaûî_Æmo°_d⁄e
:

2147 i‡(
ch
 =
LF
) {

2148 
d⁄e
;

2150 
övÆid
;

2152 
sw_åaûî_hódî
:

2153 
ch
) {

2154 
CR
:

2155 
°©e
 = 
sw_åaûî_hódî_Æmo°_d⁄e
;

2157 
LF
:

2158 
°©e
 = 
sw_åaûî
;

2162 
sw_åaûî_hódî_Æmo°_d⁄e
:

2163 i‡(
ch
 =
LF
) {

2164 
°©e
 = 
sw_åaûî
;

2167 
övÆid
;

2172 
d©a
:

2174 
˘x
->
°©e
 = state;

2175 
b
->
pos
 =Öos;

2177 
°©e
) {

2179 
sw_chunk_°¨t
:

2180 
˘x
->
Àngth
 = 3 ;

2182 
sw_chunk_size
:

2183 
˘x
->
Àngth
 = 2

2184 + (
˘x
->
size
 ? ctx->size + 4 : 0);

2186 
sw_chunk_exãnsi⁄
:

2187 
sw_chunk_exãnsi⁄_Æmo°_d⁄e
:

2188 
˘x
->
Àngth
 = 1 + ctx->
size
 + 4 ;

2190 
sw_chunk_d©a
:

2191 
˘x
->
Àngth
 = ctx->
size
 + 4 ;

2193 
sw_a·î_d©a
:

2194 
sw_a·î_d©a_Æmo°_d⁄e
:

2195 
˘x
->
Àngth
 = 4 ;

2197 
sw_œ°_chunk_exãnsi⁄
:

2198 
sw_œ°_chunk_exãnsi⁄_Æmo°_d⁄e
:

2199 
˘x
->
Àngth
 = 2 ;

2201 
sw_åaûî
:

2202 
sw_åaûî_Æmo°_d⁄e
:

2203 
˘x
->
Àngth
 = 1 ;

2205 
sw_åaûî_hódî
:

2206 
sw_åaûî_hódî_Æmo°_d⁄e
:

2207 
˘x
->
Àngth
 = 2 ;

2212 i‡(
˘x
->
size
 < 0 || ctx->
Àngth
 < 0) {

2213 
övÆid
;

2216  
rc
;

2218 
d⁄e
:

2220 
˘x
->
°©e
 = 0;

2221 
b
->
pos
 =Öos + 1;

2223  
NGX_DONE
;

2225 
övÆid
:

2227  
NGX_ERROR
;

2228 
	}
}

	@src/http/ngx_http_parse_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_uöt_t
 
	gmday
[] = { 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 };

15 
time_t


16 
	$ngx_hâp_∑r£_time
(
u_ch¨
 *
vÆue
, 
size_t
 
Àn
)

18 
u_ch¨
 *
p
, *
íd
;

19 
ngx_öt_t
 
m⁄th
;

20 
ngx_uöt_t
 
day
, 
yór
, 
hour
, 
mö
, 
£c
;

21 
uöt64_t
 
time
;

23 
no
 = 0,

24 
rfc822
,

25 
rfc850
,

26 
isoc


27 } 
fmt
;

29 
fmt
 = 0;

30 
íd
 = 
vÆue
 + 
Àn
;

32 #i‡(
NGX_SUPPRESS_WARN
)

33 
day
 = 32;

34 
yór
 = 2038;

37 
p
 = 
vÆue
;Ö < 
íd
;Ö++) {

38 i‡(*
p
 == ',') {

42 i‡(*
p
 == ' ') {

43 
fmt
 = 
isoc
;

48 
p
++;Ö < 
íd
;Ö++)

49 i‡(*
p
 != ' ') {

53 i‡(
íd
 - 
p
 < 18) {

54  
NGX_ERROR
;

57 i‡(
fmt
 !
isoc
) {

58 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

59  
NGX_ERROR
;

62 
day
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

63 
p
 += 2;

65 i‡(*
p
 == ' ') {

66 i‡(
íd
 - 
p
 < 18) {

67  
NGX_ERROR
;

69 
fmt
 = 
rfc822
;

71 } i‡(*
p
 == '-') {

72 
fmt
 = 
rfc850
;

75  
NGX_ERROR
;

78 
p
++;

81 *
p
) {

84 
m⁄th
 = *(
p
 + 1) == 'a' ? 0 : *(p + 2) == 'n' ? 5 : 6;

88 
m⁄th
 = 1;

92 
m⁄th
 = *(
p
 + 2) == 'r' ? 2 : 4;

96 
m⁄th
 = *(
p
 + 1) == 'p' ? 3 : 7;

100 
m⁄th
 = 8;

104 
m⁄th
 = 9;

108 
m⁄th
 = 10;

112 
m⁄th
 = 11;

116  
NGX_ERROR
;

119 
p
 += 3;

121 i‡((
fmt
 =
rfc822
 && *
p
 !' 'Ë|| (fmà=
rfc850
 && *p != '-')) {

122  
NGX_ERROR
;

125 
p
++;

127 i‡(
fmt
 =
rfc822
) {

128 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

129 || *(
p
 + 2) < '0' || *(p + 2) > '9'

130 || *(
p
 + 3) < '0' || *(p + 3) > '9')

132  
NGX_ERROR
;

135 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

136 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

137 
p
 += 4;

139 } i‡(
fmt
 =
rfc850
) {

140 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

141  
NGX_ERROR
;

144 
yór
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

145 
yór
 += (year < 70) ? 2000 : 1900;

146 
p
 += 2;

149 i‡(
fmt
 =
isoc
) {

150 i‡(*
p
 == ' ') {

151 
p
++;

154 i‡(*
p
 < '0' || *p > '9') {

155  
NGX_ERROR
;

158 
day
 = *
p
++ - '0';

160 i‡(*
p
 != ' ') {

161 i‡(*
p
 < '0' || *p > '9') {

162  
NGX_ERROR
;

165 
day
 = day * 10 + *
p
++ - '0';

168 i‡(
íd
 - 
p
 < 14) {

169  
NGX_ERROR
;

173 i‡(*
p
++ != ' ') {

174  
NGX_ERROR
;

177 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

178  
NGX_ERROR
;

181 
hour
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

182 
p
 += 2;

184 i‡(*
p
++ != ':') {

185  
NGX_ERROR
;

188 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

189  
NGX_ERROR
;

192 
mö
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

193 
p
 += 2;

195 i‡(*
p
++ != ':') {

196  
NGX_ERROR
;

199 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9') {

200  
NGX_ERROR
;

203 
£c
 = (*
p
 - '0') * 10 + *(p + 1) - '0';

205 i‡(
fmt
 =
isoc
) {

206 
p
 += 2;

208 i‡(*
p
++ != ' ') {

209  
NGX_ERROR
;

212 i‡(*
p
 < '0' || *p > '9' || *(p + 1) < '0' || *(p + 1) > '9'

213 || *(
p
 + 2) < '0' || *(p + 2) > '9'

214 || *(
p
 + 3) < '0' || *(p + 3) > '9')

216  
NGX_ERROR
;

219 
yór
 = (*
p
 - '0') * 1000 + (*(p + 1) - '0') * 100

220 + (*(
p
 + 2) - '0') * 10 + *(p + 3) - '0';

223 i‡(
hour
 > 23 || 
mö
 > 59 || 
£c
 > 59) {

224  
NGX_ERROR
;

227 i‡(
day
 =29 && 
m⁄th
 == 1) {

228 i‡((
yór
 & 3) || ((year % 100 == 0) && (year % 400) != 0)) {

229  
NGX_ERROR
;

232 } i‡(
day
 > 
mday
[
m⁄th
]) {

233  
NGX_ERROR
;

241 i‡(--
m⁄th
 <= 0) {

242 
m⁄th
 += 12;

243 
yór
 -= 1;

248 
time
 = (
uöt64_t
) (

251 365 * 
yór
 + year / 4 - year / 100 + year / 400

255 + 367 * 
m⁄th
 / 12 - 30

259 + 
day
 - 1

266 - 719527 + 31 + 28Ë* 86400 + 
hour
 * 3600 + 
mö
 * 60 + 
£c
;

268 #i‡(
NGX_TIME_T_SIZE
 <= 4)

270 i‡(
time
 > 0x7fffffff) {

271  
NGX_ERROR
;

276  (
time_t
Ë
time
;

277 
	}
}

	@src/http/ngx_http_postpone_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
,

14 
ngx_chaö_t
 *
ö
);

15 
ngx_öt_t
 
ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

18 
ngx_hâp_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
 = {

19 
NULL
,

20 
ngx_hâp_po°p⁄e_fûãr_öô
,

22 
NULL
,

23 
NULL
,

25 
NULL
,

26 
NULL
,

28 
NULL
,

29 
NULL


33 
ngx_moduÀ_t
 
	gngx_hâp_po°p⁄e_fûãr_moduÀ
 = {

34 
NGX_MODULE_V1
,

35 &
ngx_hâp_po°p⁄e_fûãr_moduÀ_˘x
,

36 
NULL
,

37 
NGX_HTTP_MODULE
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NULL
,

44 
NULL
,

45 
NGX_MODULE_V1_PADDING


49 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

52 
ngx_öt_t


53 
	$ngx_hâp_po°p⁄e_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

55 
ngx_c⁄√˘i⁄_t
 *
c
;

56 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
;

58 
c
 = 
r
->
c⁄√˘i⁄
;

60 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

61 "hâ∞po°p⁄êfûã∏\"%V?%V\" %p", &
r
->
uri
, &r->
¨gs
, 
ö
);

63 i‡(
r
 !
c
->
d©a
) {

65 i‡(
ö
) {

66 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

67  
NGX_OK
;

72 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

74 &
r
->
uri
, &r->
¨gs
);

77  
NGX_OK
;

80 i‡(
r
->
po°p⁄ed
 =
NULL
) {

82 i‡(
ö
 || 
c
->
buf„ªd
) {

83  
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
ö
);

86  
NGX_OK
;

89 i‡(
ö
) {

90 
	`ngx_hâp_po°p⁄e_fûãr_add
(
r
, 
ö
);

94 
¥
 = 
r
->
po°p⁄ed
;

96 i‡(
¥
->
ªque°
) {

98 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

100 &
¥
->
ªque°
->
uri
, &¥->ªque°->
¨gs
);

102 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

104 
c
->
d©a
 = 
¥
->
ªque°
;

106  
	`ngx_hâp_po°_ªque°
(
¥
->
ªque°
, 
NULL
);

109 i‡(
¥
->
out
 =
NULL
) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

112 &
r
->
uri
, &r->
¨gs
);

115 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

117 &
r
->
uri
, &r->
¨gs
);

119 i‡(
	`ngx_hâp_√xt_body_fûãr
(
r
->
maö
, 
¥
->
out
Ë=
NGX_ERROR
) {

120  
NGX_ERROR
;

124 
r
->
po°p⁄ed
 = 
¥
->
√xt
;

126 } 
r
->
po°p⁄ed
);

128  
NGX_OK
;

129 
	}
}

132 
ngx_öt_t


133 
	$ngx_hâp_po°p⁄e_fûãr_add
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

135 
ngx_hâp_po°p⁄ed_ªque°_t
 *
¥
, **
µr
;

137 i‡(
r
->
po°p⁄ed
) {

138 
¥
 = 
r
->
po°p⁄ed
;Ör->
√xt
;Ör =Ör->next) { }

140 i‡(
¥
->
ªque°
 =
NULL
) {

141 
found
;

144 
µr
 = &
¥
->
√xt
;

147 
µr
 = &
r
->
po°p⁄ed
;

150 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°p⁄ed_ªque°_t
));

151 i‡(
¥
 =
NULL
) {

152  
NGX_ERROR
;

155 *
µr
 = 
¥
;

157 
¥
->
ªque°
 = 
NULL
;

158 
¥
->
out
 = 
NULL
;

159 
¥
->
√xt
 = 
NULL
;

161 
found
:

163 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
¥
->
out
, 
ö
Ë=
NGX_OK
) {

164  
NGX_OK
;

167  
NGX_ERROR
;

168 
	}
}

171 
ngx_öt_t


172 
	$ngx_hâp_po°p⁄e_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

174 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

175 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_po°p⁄e_fûãr
;

177  
NGX_OK
;

178 
	}
}

	@src/http/ngx_http_request.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

14 
ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
);

15 
ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
);

16 
ssize_t
 
ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_uöt_t
 
ªque°_löe
);

20 
ngx_öt_t
 
ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

22 
ngx_öt_t
 
ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

24 
ngx_öt_t
 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

25 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

26 
ngx_öt_t
 
ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

28 
ngx_öt_t
 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

30 
ngx_öt_t
 
ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

33 
ngx_öt_t
 
ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
,

34 
ngx_uöt_t
 
Æloc
);

35 
ngx_öt_t
 
ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
,

36 
ngx_°r_t
 *
ho°
);

37 
ngx_öt_t
 
ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

38 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

39 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
);

41 
ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
);

42 
ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
);

43 
ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

44 
ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

45 
ngx_öt_t
 
ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

46 
ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
);

47 
ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
);

49 
ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
);

50 
ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ev
);

51 
ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ev
);

53 
ngx_öt_t
 
ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

54 
ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
);

55 
ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

57 
u_ch¨
 *
ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

58 
u_ch¨
 *
ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

59 
ngx_hâp_ªque°_t
 *
§
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
);

61 #i‡(
NGX_HTTP_SSL
)

62 
ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
);

63 
ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

67 *
	gngx_hâp_˛õ¡_îr‹s
[] = {

80 
ngx_hâp_hódî_t
 
	gngx_hâp_hódîs_ö
[] = {

81 { 
ngx_°rög
("Ho°"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ho°
),

82 
ngx_hâp_¥o˚ss_ho°
 },

84 { 
ngx_°rög
("C⁄√˘i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄√˘i⁄
),

85 
ngx_hâp_¥o˚ss_c⁄√˘i⁄
 },

87 { 
ngx_°rög
("If-Modified-Since"),

88 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_modifõd_sö˚
),

89 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

91 { 
ngx_°rög
("If-Unmodified-Since"),

92 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_unmodifõd_sö˚
),

93 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

95 { 
ngx_°rög
("If-Match"),

96 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_m©ch
),

97 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

99 { 
ngx_°rög
("If-None-Match"),

100 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_n⁄e_m©ch
),

101 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

103 { 
ngx_°rög
("U£r-Agít"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
u£r_agít
),

104 
ngx_hâp_¥o˚ss_u£r_agít
 },

106 { 
ngx_°rög
("Re„ªr"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ª„ªr
),

107 
ngx_hâp_¥o˚ss_hódî_löe
 },

109 { 
ngx_°rög
("Content-Length"),

110 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

111 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

113 { 
ngx_°rög
("Content-Type"),

114 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

115 
ngx_hâp_¥o˚ss_hódî_löe
 },

117 { 
ngx_°rög
("R™ge"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ønge
),

118 
ngx_hâp_¥o˚ss_hódî_löe
 },

120 { 
ngx_°rög
("If-Range"),

121 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
if_ønge
),

122 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

124 { 
ngx_°rög
("Transfer-Encoding"),

125 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
å™s„r_ícodög
),

126 
ngx_hâp_¥o˚ss_hódî_löe
 },

128 { 
ngx_°rög
("Expect"),

129 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ex≥˘
),

130 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

132 { 
ngx_°rög
("Upgrade"),

133 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
upgøde
),

134 
ngx_hâp_¥o˚ss_hódî_löe
 },

136 #i‡(
NGX_HTTP_GZIP
)

137 { 
ngx_°rög
("Accept-Encoding"),

138 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_ícodög
),

139 
ngx_hâp_¥o˚ss_hódî_löe
 },

141 { 
ngx_°rög
("Vü"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
vü
),

142 
ngx_hâp_¥o˚ss_hódî_löe
 },

145 { 
ngx_°rög
("Authorization"),

146 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
auth‹iz©i⁄
),

147 
ngx_hâp_¥o˚ss_unique_hódî_löe
 },

149 { 
ngx_°rög
("Kìp-Alive"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
kìp_Æive
),

150 
ngx_hâp_¥o˚ss_hódî_löe
 },

152 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

153 { 
ngx_°rög
("X-Forwarded-For"),

154 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_f‹w¨ded_f‹
),

155 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

158 #i‡(
NGX_HTTP_REALIP
)

159 { 
ngx_°rög
("X-Real-IP"),

160 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
x_ªÆ_ù
),

161 
ngx_hâp_¥o˚ss_hódî_löe
 },

164 #i‡(
NGX_HTTP_HEADERS
)

165 { 
ngx_°rög
("Ac˚±"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±
),

166 
ngx_hâp_¥o˚ss_hódî_löe
 },

168 { 
ngx_°rög
("Accept-Language"),

169 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ac˚±_œnguage
),

170 
ngx_hâp_¥o˚ss_hódî_löe
 },

173 #i‡(
NGX_HTTP_DAV
)

174 { 
ngx_°rög
("Dïth"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
dïth
),

175 
ngx_hâp_¥o˚ss_hódî_löe
 },

177 { 
ngx_°rög
("De°ö©i⁄"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
de°ö©i⁄
),

178 
ngx_hâp_¥o˚ss_hódî_löe
 },

180 { 
ngx_°rög
("Ovîwrôe"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
ovîwrôe
),

181 
ngx_hâp_¥o˚ss_hódî_löe
 },

183 { 
ngx_°rög
("D©e"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
d©e
),

184 
ngx_hâp_¥o˚ss_hódî_löe
 },

187 { 
ngx_°rög
("Cookõ"), 
off£tof
(
ngx_hâp_hódîs_ö_t
, 
cookõs
),

188 
ngx_hâp_¥o˚ss_mu…i_hódî_löes
 },

190 { 
ngx_nuŒ_°rög
, 0, 
NULL
 }

195 
	$ngx_hâp_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

197 
ngx_uöt_t
 
i
;

198 
ngx_evít_t
 *
ªv
;

199 
sockaddr_ö
 *
sö
;

200 
ngx_hâp_p‹t_t
 *
p‹t
;

201 
ngx_hâp_ö_addr_t
 *
addr
;

202 
ngx_hâp_log_˘x_t
 *
˘x
;

203 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

204 #i‡(
NGX_HAVE_INET6
)

205 
sockaddr_ö6
 *
sö6
;

206 
ngx_hâp_ö6_addr_t
 *
addr6
;

209 
hc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_c⁄√˘i⁄_t
));

210 i‡(
hc
 =
NULL
) {

211 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

215 
c
->
d©a
 = 
hc
;

219 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

221 i‡(
p‹t
->
«ddrs
 > 1) {

229 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

230 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

234 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

236 #i‡(
NGX_HAVE_INET6
)

237 
AF_INET6
:

238 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

240 
addr6
 = 
p‹t
->
addrs
;

244 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

245 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

250 
hc
->
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

256 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

258 
addr
 = 
p‹t
->
addrs
;

262 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

263 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

268 
hc
->
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

275 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

277 #i‡(
NGX_HAVE_INET6
)

278 
AF_INET6
:

279 
addr6
 = 
p‹t
->
addrs
;

280 
hc
->
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

285 
addr
 = 
p‹t
->
addrs
;

286 
hc
->
addr_c⁄f
 = &
addr
[0].
c⁄f
;

292 
hc
->
c⁄f_˘x
 = hc->
addr_c⁄f
->
deÁu…_£rvî
->
˘x
;

294 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

295 i‡(
˘x
 =
NULL
) {

296 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

300 
˘x
->
c⁄√˘i⁄
 = 
c
;

301 
˘x
->
ªque°
 = 
NULL
;

302 
˘x
->
cuºít_ªque°
 = 
NULL
;

304 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

305 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

306 
c
->
log
->
d©a
 = 
˘x
;

307 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

309 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

311 
ªv
 = 
c
->
ªad
;

312 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

313 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

315 #i‡(
NGX_HTTP_SPDY
)

316 i‡(
hc
->
addr_c⁄f
->
•dy
) {

317 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_öô
;

321 #i‡(
NGX_HTTP_SSL
)

323 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

325 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

327 i‡(
sscf
->
íabÀ
 || 
hc
->
addr_c⁄f
->
s¶
) {

329 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

331 i‡(
hc
->
addr_c⁄f
->
s¶
 && 
sscf
->s¶.
˘x
 =
NULL
) {

332 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

335 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

339 
hc
->
s¶
 = 1;

341 
ªv
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake
;

346 i‡(
ªv
->
ªady
) {

349 i‡(
ngx_u£_ac˚±_muãx
) {

350 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

354 
ªv
->
	`h™dÀr
(rev);

358 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

359 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

361 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

362 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

365 
	}
}

369 
	$ngx_hâp_waô_ªque°_h™dÀr
(
ngx_evít_t
 *
ªv
)

371 
size_t
 
size
;

372 
ssize_t
 
n
;

373 
ngx_buf_t
 *
b
;

374 
ngx_c⁄√˘i⁄_t
 *
c
;

375 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

376 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

378 
c
 = 
ªv
->
d©a
;

380 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http waitÑequest handler");

382 i‡(
ªv
->
timedout
) {

383 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

384 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

388 i‡(
c
->
˛o£
) {

389 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

393 
hc
 = 
c
->
d©a
;

394 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

396 
size
 = 
cscf
->
˛õ¡_hódî_buf„r_size
;

398 
b
 = 
c
->
buf„r
;

400 i‡(
b
 =
NULL
) {

401 
b
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
size
);

402 i‡(
b
 =
NULL
) {

403 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

407 
c
->
buf„r
 = 
b
;

409 } i‡(
b
->
°¨t
 =
NULL
) {

411 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

412 i‡(
b
->
°¨t
 =
NULL
) {

413 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

417 
b
->
pos
 = b->
°¨t
;

418 
b
->
œ°
 = b->
°¨t
;

419 
b
->
íd
 = b->
œ°
 + 
size
;

422 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

424 i‡(
n
 =
NGX_AGAIN
) {

426 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

427 i‡(
c
->
li°íög
->
de„ºed_ac˚±


428 #i‡(
NGX_HTTP_SSL
)

429 && 
c
->
s¶
 =
NULL


433 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

435 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

440 i‡(!
ªv
->
timî_£t
) {

441 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

442 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

445 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

446 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

454 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

455 
b
->
°¨t
 = 
NULL
;

461 i‡(
n
 =
NGX_ERROR
) {

462 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

466 i‡(
n
 == 0) {

467 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

469 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

473 
b
->
œ°
 +
n
;

475 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

477 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

479 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

480 i‡(
c
->
d©a
 =
NULL
) {

481 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

485 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

486 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

487 
	}
}

490 
ngx_hâp_ªque°_t
 *

491 
	$ngx_hâp_¸óã_ªque°
(
ngx_c⁄√˘i⁄_t
 *
c
)

493 
ngx_poﬁ_t
 *
poﬁ
;

494 
ngx_time_t
 *
ç
;

495 
ngx_hâp_ªque°_t
 *
r
;

496 
ngx_hâp_log_˘x_t
 *
˘x
;

497 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

498 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

499 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

500 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

502 
c
->
ªque°s
++;

504 
hc
 = 
c
->
d©a
;

506 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

508 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
cscf
->
ªque°_poﬁ_size
, 
c
->
log
);

509 i‡(
poﬁ
 =
NULL
) {

510  
NULL
;

513 
r
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_hâp_ªque°_t
));

514 i‡(
r
 =
NULL
) {

515 
	`ngx_de°roy_poﬁ
(
poﬁ
);

516  
NULL
;

519 
r
->
poﬁ
 =Öool;

521 
r
->
hâp_c⁄√˘i⁄
 = 
hc
;

522 
r
->
sig«tuª
 = 
NGX_HTTP_MODULE
;

523 
r
->
c⁄√˘i⁄
 = 
c
;

525 
r
->
maö_c⁄f
 = 
hc
->
c⁄f_˘x
->main_conf;

526 
r
->
§v_c⁄f
 = 
hc
->
c⁄f_˘x
->srv_conf;

527 
r
->
loc_c⁄f
 = 
hc
->
c⁄f_˘x
->loc_conf;

529 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

531 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

533 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

535 
r
->
hódî_ö
 = 
hc
->
nbusy
 ? hc->
busy
[0] : 
c
->
buf„r
;

537 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_out
.
hódîs
,Ñ->
poﬁ
, 20,

538 (
ngx_èbÀ_ñt_t
))

539 !
NGX_OK
)

541 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

542  
NULL
;

545 
r
->
˘x
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

546 i‡(
r
->
˘x
 =
NULL
) {

547 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

548  
NULL
;

551 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

553 
r
->
v¨übÀs
 = 
	`ngx_pˇŒoc
‘->
poﬁ
, 
cmcf
->v¨übÀs.
√…s


554 * (
ngx_hâp_v¨übÀ_vÆue_t
));

555 i‡(
r
->
v¨übÀs
 =
NULL
) {

556 
	`ngx_de°roy_poﬁ
(
r
->
poﬁ
);

557  
NULL
;

560 #i‡(
NGX_HTTP_SSL
)

561 i‡(
c
->
s¶
) {

562 
r
->
maö_fûãr_√ed_ö_mem‹y
 = 1;

566 
r
->
maö
 =Ñ;

567 
r
->
cou¡
 = 1;

569 
ç
 = 
	`ngx_timeofday
();

570 
r
->
°¨t_£c
 = 
ç
->
£c
;

571 
r
->
°¨t_m£c
 = 
ç
->
m£c
;

573 
r
->
mëhod
 = 
NGX_HTTP_UNKNOWN
;

575 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

576 
r
->
hódîs_ö
.
kìp_Æive_n
 = -1;

577 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

578 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

580 
r
->
uri_ch™ges
 = 
NGX_HTTP_MAX_URI_CHANGES
 + 1;

581 
r
->
subªque°s
 = 
NGX_HTTP_MAX_SUBREQUESTS
 + 1;

583 
r
->
hâp_°©e
 = 
NGX_HTTP_READING_REQUEST_STATE
;

585 
˘x
 = 
c
->
log
->
d©a
;

586 
˘x
->
ªque°
 = 
r
;

587 
˘x
->
cuºít_ªque°
 = 
r
;

588 
r
->
log_h™dÀr
 = 
ngx_hâp_log_îr‹_h™dÀr
;

590 #i‡(
NGX_STAT_STUB
)

591 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, 1);

592 
r
->
°©_ªadög
 = 1;

593 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªque°s
, 1);

596  
r
;

597 
	}
}

600 #i‡(
NGX_HTTP_SSL
)

603 
	$ngx_hâp_s¶_h™dshake
(
ngx_evít_t
 *
ªv
)

605 
u_ch¨
 
buf
[1];

606 
ssize_t
 
n
;

607 
ngx_îr_t
 
îr
;

608 
ngx_öt_t
 
rc
;

609 
ngx_c⁄√˘i⁄_t
 *
c
;

610 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

611 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

613 
c
 = 
ªv
->
d©a
;

615 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

618 i‡(
ªv
->
timedout
) {

619 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

620 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

624 i‡(
c
->
˛o£
) {

625 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

629 
n
 = 
	`ªcv
(
c
->
fd
, (*Ë
buf
, 1, 
MSG_PEEK
);

631 
îr
 = 
ngx_sockë_î∫o
;

633 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "hâ∞ªcv(): %d", 
n
);

635 i‡(
n
 == -1) {

636 i‡(
îr
 =
NGX_EAGAIN
) {

638 #i‡(
NGX_HAVE_DEFERRED_ACCEPT
 && 
deföed
 
TCP_DEFER_ACCEPT
)

639 i‡(
c
->
li°íög
->
de„ºed_ac˚±
) {

640 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

642 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

647 i‡(!
ªv
->
timî_£t
) {

648 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

649 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

652 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

653 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

659 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

660 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

665 i‡(
n
 == 1) {

666 i‡(
buf
[0] & 0x80 || buf[0] == 0x16 ) {

667 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

668 "hâp†s¶ h™dshake: 0x%02Xd", 
buf
[0]);

670 
hc
 = 
c
->
d©a
;

671 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
,

672 
ngx_hâp_s¶_moduÀ
);

674 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(&
sscf
->
s¶
, 
c
, 
NGX_SSL_BUFFER
)

675 !
NGX_OK
)

677 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

681 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

683 i‡(
rc
 =
NGX_AGAIN
) {

685 i‡(!
ªv
->
timî_£t
) {

686 
	`ngx_add_timî
(
ªv
, 
c
->
li°íög
->
po°_ac˚±_timeout
);

689 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

691 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_s¶_h™dshake_h™dÀr
;

695 
	`ngx_hâp_s¶_h™dshake_h™dÀr
(
c
);

700 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "plain http");

702 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

704 
ªv
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

705 
	`ngx_hâp_waô_ªque°_h™dÀr
(
ªv
);

710 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "client closed connection");

711 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

712 
	}
}

716 
	$ngx_hâp_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

718 i‡(
c
->
s¶
->
h™dshaked
) {

728 
c
->
s¶
->
no_waô_shutdown
 = 1;

730 #i‡(
NGX_HTTP_SPDY
 && 
deföed
 
TLSEXT_TYPE_√xt_¥Ÿo_√g
)

732 
Àn
;

733 c⁄° *
d©a
;

734 c⁄° 
ngx_°r_t
 
•dy
 = 
	`ngx_°rög
(
NGX_SPDY_NPN_NEGOTIATED
);

736 
	`SSL_gë0_√xt_¥Ÿo_√gŸüãd
(
c
->
s¶
->
c⁄√˘i⁄
, &
d©a
, &
Àn
);

738 i‡(
Àn
 =
•dy
.À¿&& 
	`ngx_°∫cmp
(
d©a
, spdy.data, spdy.len) == 0) {

739 
	`ngx_hâp_•dy_öô
(
c
->
ªad
);

745 
c
->
log
->
a˘i⁄
 = "waiting forÑequest";

747 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_waô_ªque°_h™dÀr
;

748  
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

750 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

752 
	`ngx_hâp_waô_ªque°_h™dÀr
(
c
->
ªad
);

757 i‡(
c
->
ªad
->
timedout
) {

758 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

761 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

762 
	}
}

764 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


767 
	$ngx_hâp_s¶_£rvî«me
(
ngx_s¶_c⁄n_t
 *
s¶_c⁄n
, *
ad
, *
¨g
)

769 
ngx_°r_t
 
ho°
;

770 c⁄° *
£rvî«me
;

771 
ngx_c⁄√˘i⁄_t
 *
c
;

772 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

773 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

774 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

775 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

777 
£rvî«me
 = 
	`SSL_gë_£rvî«me
(
s¶_c⁄n
, 
TLSEXT_NAMETYPE_ho°_«me
);

779 i‡(
£rvî«me
 =
NULL
) {

780  
SSL_TLSEXT_ERR_NOACK
;

783 
c
 = 
	`ngx_s¶_gë_c⁄√˘i⁄
(
s¶_c⁄n
);

785 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

786 "SSL sîvîÇame: \"%s\"", 
£rvî«me
);

788 
ho°
.
Àn
 = 
	`ngx_°æí
(
£rvî«me
);

790 i‡(
ho°
.
Àn
 == 0) {

791  
SSL_TLSEXT_ERR_NOACK
;

794 
ho°
.
d©a
 = (
u_ch¨
 *Ë
£rvî«me
;

796 i‡(
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
c
->
poﬁ
, 1Ë!
NGX_OK
) {

797  
SSL_TLSEXT_ERR_NOACK
;

800 
hc
 = 
c
->
d©a
;

802 i‡(
	`ngx_hâp_föd_vútuÆ_£rvî
(
c
, 
hc
->
addr_c⁄f
->
vútuÆ_«mes
, &
ho°
,

803 
NULL
, &
cscf
)

804 !
NGX_OK
)

806  
SSL_TLSEXT_ERR_NOACK
;

809 
hc
->
s¶_£rvî«me
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_°r_t
));

810 i‡(
hc
->
s¶_£rvî«me
 =
NULL
) {

811  
SSL_TLSEXT_ERR_NOACK
;

814 *
hc
->
s¶_£rvî«me
 = 
ho°
;

816 
hc
->
c⁄f_˘x
 = 
cscf
->
˘x
;

818 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_c‹e_moduÀ
);

820 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
˛cf
->
îr‹_log
);

822 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_s¶_moduÀ
);

824 i‡(
sscf
->
s¶
.
˘x
) {

825 
	`SSL_£t_SSL_CTX
(
s¶_c⁄n
, 
sscf
->
s¶
.
˘x
);

832 
	`SSL_£t_vîify
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_mode
(
sscf
->
s¶
.
˘x
),

833 
	`SSL_CTX_gë_vîify_ˇŒback
(
sscf
->
s¶
.
˘x
));

835 
	`SSL_£t_vîify_dïth
(
s¶_c⁄n
, 
	`SSL_CTX_gë_vîify_dïth
(
sscf
->
s¶
.
˘x
));

837 #ifde‡
SSL_CTRL_CLEAR_OPTIONS


839 
	`SSL_˛ór_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_gë_›ti⁄s
(ssl_conn) &

840 ~
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

843 
	`SSL_£t_›ti⁄s
(
s¶_c⁄n
, 
	`SSL_CTX_gë_›ti⁄s
(
sscf
->
s¶
.
˘x
));

846  
SSL_TLSEXT_ERR_OK
;

847 
	}
}

855 
	$ngx_hâp_¥o˚ss_ªque°_löe
(
ngx_evít_t
 *
ªv
)

857 
ssize_t
 
n
;

858 
ngx_öt_t
 
rc
, 
rv
;

859 
ngx_°r_t
 
ho°
;

860 
ngx_c⁄√˘i⁄_t
 *
c
;

861 
ngx_hâp_ªque°_t
 *
r
;

863 
c
 = 
ªv
->
d©a
;

864 
r
 = 
c
->
d©a
;

866 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

869 i‡(
ªv
->
timedout
) {

870 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

871 
c
->
timedout
 = 1;

872 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

876 
rc
 = 
NGX_AGAIN
;

880 i‡(
rc
 =
NGX_AGAIN
) {

881 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

883 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

888 
rc
 = 
	`ngx_hâp_∑r£_ªque°_löe
(
r
,Ñ->
hódî_ö
);

890 i‡(
rc
 =
NGX_OK
) {

894 
r
->
ªque°_löe
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->
ªque°_°¨t
;

895 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

896 
r
->
ªque°_Àngth
 =Ñ->
hódî_ö
->
pos
 -Ñ->
ªque°_°¨t
;

898 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

899 "hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

901 
r
->
mëhod_«me
.
Àn
 =Ñ->
mëhod_íd
 -Ñ->
ªque°_°¨t
 + 1;

902 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

904 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

905 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
ªque°_íd
 -Ñ->hâp_¥Ÿocﬁ.
d©a
;

908 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

912 i‡(
r
->
ho°_°¨t
 &&Ñ->
ho°_íd
) {

914 
ho°
.
Àn
 = 
r
->
ho°_íd
 -Ñ->
ho°_°¨t
;

915 
ho°
.
d©a
 = 
r
->
ho°_°¨t
;

917 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

919 i‡(
rc
 =
NGX_DECLINED
) {

920 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

922 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

926 i‡(
rc
 =
NGX_ERROR
) {

927 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

931 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

935 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

938 i‡(
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_10
) {

940 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

941 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

942 =
NGX_ERROR
)

947 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

952 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 20,

953 (
ngx_èbÀ_ñt_t
))

954 !
NGX_OK
)

956 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

960 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

962 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_hódîs
;

963 
	`ngx_hâp_¥o˚ss_ªque°_hódîs
(
ªv
);

968 i‡(
rc
 !
NGX_AGAIN
) {

972 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

973 
ngx_hâp_˛õ¡_îr‹s
[
rc
 - 
NGX_HTTP_CLIENT_ERROR
]);

974 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

980 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

982 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 1);

984 i‡(
rv
 =
NGX_ERROR
) {

985 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

989 i‡(
rv
 =
NGX_DECLINED
) {

990 
r
->
ªque°_löe
.
Àn
 =Ñ->
hódî_ö
->
íd
 -Ñ->
ªque°_°¨t
;

991 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

993 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

995 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_URI_TOO_LARGE
);

1000 
	}
}

1003 
ngx_öt_t


1004 
	$ngx_hâp_¥o˚ss_ªque°_uri
(
ngx_hâp_ªque°_t
 *
r
)

1006 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1008 i‡(
r
->
¨gs_°¨t
) {

1009 
r
->
uri
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_°¨t
;

1011 
r
->
uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1014 i‡(
r
->
com∂ex_uri
 ||Ñ->
quŸed_uri
) {

1016 
r
->
uri
.
d©a
 = 
	`ngx_≤Æloc
‘->
poﬁ
,Ñ->uri.
Àn
 + 1);

1017 i‡(
r
->
uri
.
d©a
 =
NULL
) {

1018 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1019  
NGX_ERROR
;

1022 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1024 i‡(
	`ngx_hâp_∑r£_com∂ex_uri
(
r
, 
cscf
->
mîge_¶ashes
Ë!
NGX_OK
) {

1025 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1027 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1028  
NGX_ERROR
;

1032 
r
->
uri
.
d©a
 =Ñ->
uri_°¨t
;

1035 
r
->
u≈¨£d_uri
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_°¨t
;

1036 
r
->
u≈¨£d_uri
.
d©a
 =Ñ->
uri_°¨t
;

1038 
r
->
vÆid_u≈¨£d_uri
 =Ñ->
•a˚_ö_uri
 ? 0 : 1;

1040 i‡(
r
->
uri_ext
) {

1041 i‡(
r
->
¨gs_°¨t
) {

1042 
r
->
exãn
.
Àn
 =Ñ->
¨gs_°¨t
 - 1 -Ñ->
uri_ext
;

1044 
r
->
exãn
.
Àn
 =Ñ->
uri_íd
 -Ñ->
uri_ext
;

1047 
r
->
exãn
.
d©a
 =Ñ->
uri_ext
;

1050 i‡(
r
->
¨gs_°¨t
 &&Ñ->
uri_íd
 >Ñ->args_start) {

1051 
r
->
¨gs
.
Àn
 =Ñ->
uri_íd
 -Ñ->
¨gs_°¨t
;

1052 
r
->
¨gs
.
d©a
 =Ñ->
¨gs_°¨t
;

1055 #i‡(
NGX_WIN32
)

1057 
u_ch¨
 *
p
, *
œ°
;

1059 
p
 = 
r
->
uri
.
d©a
;

1060 
œ°
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
;

1062 
p
 < 
œ°
) {

1064 i‡(*
p
++ == ':') {

1071 i‡(
p
 < 
œ°
 && *p == '$') {

1072 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1074 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1075  
NGX_ERROR
;

1080 
p
 = 
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1;

1082 
p
 > 
r
->
uri
.
d©a
) {

1084 i‡(*
p
 == ' ') {

1085 
p
--;

1089 i‡(*
p
 == '.') {

1090 
p
--;

1097 i‡(
p
 !
r
->
uri
.
d©a
 +Ñ->uri.
Àn
 - 1) {

1098 
r
->
uri
.
Àn
 = 
p
 + 1 -Ñ->uri.
d©a
;

1099 
	`ngx_hâp_£t_exãn
(
r
);

1105 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1106 "hâ∞uri: \"%V\"", &
r
->
uri
);

1108 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1109 "hâ∞¨gs: \"%V\"", &
r
->
¨gs
);

1111 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1112 "hâ∞exãn: \"%V\"", &
r
->
exãn
);

1114  
NGX_OK
;

1115 
	}
}

1119 
	$ngx_hâp_¥o˚ss_ªque°_hódîs
(
ngx_evít_t
 *
ªv
)

1121 
u_ch¨
 *
p
;

1122 
size_t
 
Àn
;

1123 
ssize_t
 
n
;

1124 
ngx_öt_t
 
rc
, 
rv
;

1125 
ngx_èbÀ_ñt_t
 *
h
;

1126 
ngx_c⁄√˘i⁄_t
 *
c
;

1127 
ngx_hâp_hódî_t
 *
hh
;

1128 
ngx_hâp_ªque°_t
 *
r
;

1129 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1130 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1132 
c
 = 
ªv
->
d©a
;

1133 
r
 = 
c
->
d©a
;

1135 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0,

1138 i‡(
ªv
->
timedout
) {

1139 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

1140 
c
->
timedout
 = 1;

1141 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

1145 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1147 
rc
 = 
NGX_AGAIN
;

1151 i‡(
rc
 =
NGX_AGAIN
) {

1153 i‡(
r
->
hódî_ö
->
pos
 =r->hódî_ö->
íd
) {

1155 
rv
 = 
	`ngx_hâp_Æloc_œrge_hódî_buf„r
(
r
, 0);

1157 i‡(
rv
 =
NGX_ERROR
) {

1158 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1162 i‡(
rv
 =
NGX_DECLINED
) {

1163 
p
 = 
r
->
hódî_«me_°¨t
;

1165 
r
->
lögîög_˛o£
 = 1;

1167 i‡(
p
 =
NULL
) {

1168 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1170 
	`ngx_hâp_föÆize_ªque°
(
r
,

1171 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1175 
Àn
 = 
r
->
hódî_ö
->
íd
 - 
p
;

1177 i‡(
Àn
 > 
NGX_MAX_ERROR_STR
 - 300) {

1178 
Àn
 = 
NGX_MAX_ERROR_STR
 - 300;

1179 
p
[
Àn
++] = '.';Ö[len++] = '.';Ö[len++] = '.';

1182 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1184 
Àn
, 
r
->
hódî_«me_°¨t
);

1186 
	`ngx_hâp_föÆize_ªque°
(
r
,

1187 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

1192 
n
 = 
	`ngx_hâp_ªad_ªque°_hódî
(
r
);

1194 i‡(
n
 =
NGX_AGAIN
 ||Ç =
NGX_ERROR
) {

1200 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1202 
rc
 = 
	`ngx_hâp_∑r£_hódî_löe
(
r
,Ñ->
hódî_ö
,

1203 
cscf
->
undîsc‹es_ö_hódîs
);

1205 i‡(
rc
 =
NGX_OK
) {

1207 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1209 i‡(
r
->
övÆid_hódî
 && 
cscf
->
ign‹e_övÆid_hódîs
) {

1213 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1215 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1216 
r
->
hódî_«me_°¨t
);

1222 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

1223 i‡(
h
 =
NULL
) {

1224 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1228 
h
->
hash
 = 
r
->
hódî_hash
;

1230 
h
->
key
.
Àn
 = 
r
->
hódî_«me_íd
 -Ñ->
hódî_«me_°¨t
;

1231 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

1232 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

1234 
h
->
vÆue
.
Àn
 = 
r
->
hódî_íd
 -Ñ->
hódî_°¨t
;

1235 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

1236 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

1238 
h
->
lowˇ£_key
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, h->
key
.
Àn
);

1239 i‡(
h
->
lowˇ£_key
 =
NULL
) {

1240 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1244 i‡(
h
->
key
.
Àn
 =
r
->
lowˇ£_ödex
) {

1245 
	`ngx_mem˝y
(
h
->
lowˇ£_key
, 
r
->
lowˇ£_hódî
, h->
key
.
Àn
);

1248 
	`ngx_°æow
(
h
->
lowˇ£_key
, h->
key
.
d©a
, h->key.
Àn
);

1251 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
->
hash
,

1252 
h
->
lowˇ£_key
, h->
key
.
Àn
);

1254 i‡(
hh
 && hh->
	`h™dÀr
(
r
, 
h
, hh->
off£t
Ë!
NGX_OK
) {

1258 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1260 &
h
->
key
, &h->
vÆue
);

1265 i‡(
rc
 =
NGX_HTTP_PARSE_HEADER_DONE
) {

1269 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1272 
r
->
ªque°_Àngth
 +r->
hódî_ö
->
pos
 -Ñ->
hódî_«me_°¨t
;

1274 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

1276 
rc
 = 
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
);

1278 i‡(
rc
 !
NGX_OK
) {

1282 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

1287 i‡(
rc
 =
NGX_AGAIN
) {

1296 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1298 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

1299 
r
->
hódî_«me_°¨t
);

1300 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1303 
	}
}

1306 
ssize_t


1307 
	$ngx_hâp_ªad_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1309 
ssize_t
 
n
;

1310 
ngx_evít_t
 *
ªv
;

1311 
ngx_c⁄√˘i⁄_t
 *
c
;

1312 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1314 
c
 = 
r
->
c⁄√˘i⁄
;

1315 
ªv
 = 
c
->
ªad
;

1317 
n
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

1319 i‡(
n
 > 0) {

1320  
n
;

1323 i‡(
ªv
->
ªady
) {

1324 
n
 = 
c
->
	`ªcv
(c, 
r
->
hódî_ö
->
œ°
,

1325 
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
);

1327 
n
 = 
NGX_AGAIN
;

1330 i‡(
n
 =
NGX_AGAIN
) {

1331 i‡(!
ªv
->
timî_£t
) {

1332 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1333 
	`ngx_add_timî
(
ªv
, 
cscf
->
˛õ¡_hódî_timeout
);

1336 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1337 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1338  
NGX_ERROR
;

1341  
NGX_AGAIN
;

1344 i‡(
n
 == 0) {

1345 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1349 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

1350 
c
->
îr‹
 = 1;

1351 
c
->
log
->
a˘i⁄
 = "reading clientÑequest headers";

1353 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1354  
NGX_ERROR
;

1357 
r
->
hódî_ö
->
œ°
 +
n
;

1359  
n
;

1360 
	}
}

1363 
ngx_öt_t


1364 
	$ngx_hâp_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
,

1365 
ngx_uöt_t
 
ªque°_löe
)

1367 
u_ch¨
 *
ﬁd
, *
√w
;

1368 
ngx_buf_t
 *
b
;

1369 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1370 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1372 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1375 i‡(
ªque°_löe
 && 
r
->
°©e
 == 0) {

1379 
r
->
hódî_ö
->
pos
 =Ñ->hódî_ö->
°¨t
;

1380 
r
->
hódî_ö
->
œ°
 =Ñ->hódî_ö->
°¨t
;

1382  
NGX_OK
;

1385 
ﬁd
 = 
ªque°_löe
 ? 
r
->
ªque°_°¨t
 :Ñ->
hódî_«me_°¨t
;

1387 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1389 i‡(
r
->
°©e
 != 0

1390 && (
size_t
Ë(
r
->
hódî_ö
->
pos
 - 
ﬁd
)

1391 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
)

1393  
NGX_DECLINED
;

1396 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1398 i‡(
hc
->
n‰ì
) {

1399 
b
 = 
hc
->
‰ì
[--hc->
n‰ì
];

1401 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1403 
b
->
pos
, b->
íd
 - b->
œ°
);

1405 } i‡(
hc
->
nbusy
 < 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
) {

1407 i‡(
hc
->
busy
 =
NULL
) {

1408 
hc
->
busy
 = 
	`ngx_∑Œoc
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1409 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

1410 i‡(
hc
->
busy
 =
NULL
) {

1411  
NGX_ERROR
;

1415 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
c⁄√˘i⁄
->
poﬁ
,

1416 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

1417 i‡(
b
 =
NULL
) {

1418  
NGX_ERROR
;

1421 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1423 
b
->
pos
, b->
íd
 - b->
œ°
);

1426  
NGX_DECLINED
;

1429 
hc
->
busy
[hc->
nbusy
++] = 
b
;

1431 i‡(
r
->
°©e
 == 0) {

1438 
r
->
hódî_ö
 = 
b
;

1440  
NGX_OK
;

1443 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1444 "hâ∞œrgêhódî c›y: %d", 
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1446 
√w
 = 
b
->
°¨t
;

1448 
	`ngx_mem˝y
(
√w
, 
ﬁd
, 
r
->
hódî_ö
->
pos
 - old);

1450 
b
->
pos
 = 
√w
 + (
r
->
hódî_ö
->po†- 
ﬁd
);

1451 
b
->
œ°
 = 
√w
 + (
r
->
hódî_ö
->
pos
 - 
ﬁd
);

1453 i‡(
ªque°_löe
) {

1454 
r
->
ªque°_°¨t
 = 
√w
;

1456 i‡(
r
->
ªque°_íd
) {

1457 
r
->
ªque°_íd
 = 
√w
 + (r->ªque°_íd - 
ﬁd
);

1460 
r
->
mëhod_íd
 = 
√w
 + (r->mëhod_íd - 
ﬁd
);

1462 
r
->
uri_°¨t
 = 
√w
 + (r->uri_°¨à- 
ﬁd
);

1463 
r
->
uri_íd
 = 
√w
 + (r->uri_íd - 
ﬁd
);

1465 i‡(
r
->
schema_°¨t
) {

1466 
r
->
schema_°¨t
 = 
√w
 + (r->schema_°¨à- 
ﬁd
);

1467 
r
->
schema_íd
 = 
√w
 + (r->schema_íd - 
ﬁd
);

1470 i‡(
r
->
ho°_°¨t
) {

1471 
r
->
ho°_°¨t
 = 
√w
 + (r->ho°_°¨à- 
ﬁd
);

1472 i‡(
r
->
ho°_íd
) {

1473 
r
->
ho°_íd
 = 
√w
 + (r->ho°_íd - 
ﬁd
);

1477 i‡(
r
->
p‹t_°¨t
) {

1478 
r
->
p‹t_°¨t
 = 
√w
 + (r->p‹t_°¨à- 
ﬁd
);

1479 
r
->
p‹t_íd
 = 
√w
 + (r->p‹t_íd - 
ﬁd
);

1482 i‡(
r
->
uri_ext
) {

1483 
r
->
uri_ext
 = 
√w
 + (r->uri_exà- 
ﬁd
);

1486 i‡(
r
->
¨gs_°¨t
) {

1487 
r
->
¨gs_°¨t
 = 
√w
 + (r->¨gs_°¨à- 
ﬁd
);

1490 i‡(
r
->
hâp_¥Ÿocﬁ
.
d©a
) {

1491 
r
->
hâp_¥Ÿocﬁ
.
d©a
 = 
√w
 + (r->hâp_¥Ÿocﬁ.d©®- 
ﬁd
);

1495 
r
->
hódî_«me_°¨t
 = 
√w
;

1496 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

1497 
r
->
hódî_°¨t
 = 
√w
 + (r->hódî_°¨à- 
ﬁd
);

1498 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

1501 
r
->
hódî_ö
 = 
b
;

1503  
NGX_OK
;

1504 
	}
}

1507 
ngx_öt_t


1508 
	$ngx_hâp_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1509 
ngx_uöt_t
 
off£t
)

1511 
ngx_èbÀ_ñt_t
 **
ph
;

1513 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1515 i‡(*
ph
 =
NULL
) {

1516 *
ph
 = 
h
;

1519  
NGX_OK
;

1520 
	}
}

1523 
ngx_öt_t


1524 
	$ngx_hâp_¥o˚ss_unique_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1525 
ngx_uöt_t
 
off£t
)

1527 
ngx_èbÀ_ñt_t
 **
ph
;

1529 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1531 i‡(*
ph
 =
NULL
) {

1532 *
ph
 = 
h
;

1533  
NGX_OK
;

1536 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1539 &
h
->
key
, &h->
vÆue
, &(*
ph
)->key, &(*ph)->value);

1541 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1543  
NGX_ERROR
;

1544 
	}
}

1547 
ngx_öt_t


1548 
	$ngx_hâp_¥o˚ss_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1549 
ngx_uöt_t
 
off£t
)

1551 
ngx_öt_t
 
rc
;

1552 
ngx_°r_t
 
ho°
;

1554 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
) {

1555 
r
->
hódîs_ö
.
ho°
 = 
h
;

1558 
ho°
 = 
h
->
vÆue
;

1560 
rc
 = 
	`ngx_hâp_vÆid©e_ho°
(&
ho°
, 
r
->
poﬁ
, 0);

1562 i‡(
rc
 =
NGX_DECLINED
) {

1563 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1565 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1566  
NGX_ERROR
;

1569 i‡(
rc
 =
NGX_ERROR
) {

1570 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1571  
NGX_ERROR
;

1574 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1575  
NGX_OK
;

1578 i‡(
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &
ho°
Ë=
NGX_ERROR
) {

1579  
NGX_ERROR
;

1582 
r
->
hódîs_ö
.
£rvî
 = 
ho°
;

1584  
NGX_OK
;

1585 
	}
}

1588 
ngx_öt_t


1589 
	$ngx_hâp_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1590 
ngx_uöt_t
 
off£t
)

1592 i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "close", 5 - 1)) {

1593 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1595 } i‡(
	`ngx_°rˇ£°∫
(
h
->
vÆue
.
d©a
, "keep-alive", 10 - 1)) {

1596 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_KEEP_ALIVE
;

1599  
NGX_OK
;

1600 
	}
}

1603 
ngx_öt_t


1604 
	$ngx_hâp_¥o˚ss_u£r_agít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1605 
ngx_uöt_t
 
off£t
)

1607 
u_ch¨
 *
u£r_agít
, *
msõ
;

1609 i‡(
r
->
hódîs_ö
.
u£r_agít
) {

1610  
NGX_OK
;

1613 
r
->
hódîs_ö
.
u£r_agít
 = 
h
;

1617 
u£r_agít
 = 
h
->
vÆue
.
d©a
;

1619 
msõ
 = 
	`ngx_°r°∫
(
u£r_agít
, "MSIE ", 5 - 1);

1621 i‡(
msõ
 && msõ + 7 < 
u£r_agít
 + 
h
->
vÆue
.
Àn
) {

1623 
r
->
hódîs_ö
.
msõ
 = 1;

1625 i‡(
msõ
[6] == '.') {

1627 
msõ
[5]) {

1630 
r
->
hódîs_ö
.
msõ6
 = 1;

1633 i‡(
	`ngx_°r°∫
(
msõ
 + 8, "SV1", 3 - 1Ë=
NULL
) {

1634 
r
->
hódîs_ö
.
msõ6
 = 1;

1642 i‡(
c
->
s¶
) {

1643 
c
->
s¶
->
no_£nd_shutdown
 = 1;

1648 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Opera", 5 - 1)) {

1649 
r
->
hódîs_ö
.
›îa
 = 1;

1650 
r
->
hódîs_ö
.
msõ
 = 0;

1651 
r
->
hódîs_ö
.
msõ6
 = 0;

1654 i‡(!
r
->
hódîs_ö
.
msõ
 && !r->hódîs_ö.
›îa
) {

1656 i‡(
	`ngx_°r°∫
(
u£r_agít
, "Gecko/", 6 - 1)) {

1657 
r
->
hódîs_ö
.
gecko
 = 1;

1659 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Chrome/", 7 - 1)) {

1660 
r
->
hódîs_ö
.
chrome
 = 1;

1662 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Safari/", 7 - 1)

1663 && 
	`ngx_°r°∫
(
u£r_agít
, "Mac OS X", 8 - 1))

1665 
r
->
hódîs_ö
.
ßÁri
 = 1;

1667 } i‡(
	`ngx_°r°∫
(
u£r_agít
, "Konqueror", 9 - 1)) {

1668 
r
->
hódîs_ö
.
k⁄quî‹
 = 1;

1672  
NGX_OK
;

1673 
	}
}

1676 
ngx_öt_t


1677 
	$ngx_hâp_¥o˚ss_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

1678 
ngx_uöt_t
 
off£t
)

1680 
ngx_¨øy_t
 *
hódîs
;

1681 
ngx_èbÀ_ñt_t
 **
ph
;

1683 
hódîs
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_ö
 + 
off£t
);

1685 i‡(
hódîs
->
ñts
 =
NULL
) {

1686 i‡(
	`ngx_¨øy_öô
(
hódîs
, 
r
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
 *))

1687 !
NGX_OK
)

1689 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1690  
NGX_ERROR
;

1694 
ph
 = 
	`ngx_¨øy_push
(
hódîs
);

1695 i‡(
ph
 =
NULL
) {

1696 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1697  
NGX_ERROR
;

1700 *
ph
 = 
h
;

1701  
NGX_OK
;

1702 
	}
}

1705 
ngx_öt_t


1706 
	$ngx_hâp_¥o˚ss_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1708 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
 == 0

1709 && 
	`ngx_hâp_£t_vútuÆ_£rvî
(
r
, &r->
hódîs_ö
.
£rvî
)

1710 =
NGX_ERROR
)

1712  
NGX_ERROR
;

1715 i‡(
r
->
hódîs_ö
.
ho°
 =
NULL
 &&Ñ->
hâp_vîsi⁄
 > 
NGX_HTTP_VERSION_10
) {

1716 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1718 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1719  
NGX_ERROR
;

1722 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1723 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =

1724 
	`ngx_©oof
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
d©a
,

1725 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.
Àn
);

1727 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
NGX_ERROR
) {

1728 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1730 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

1731  
NGX_ERROR
;

1735 i‡(
r
->
mëhod
 & 
NGX_HTTP_TRACE
) {

1736 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1738 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_ALLOWED
);

1739  
NGX_ERROR
;

1742 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
) {

1743 i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 == 7

1744 && 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1745 (
u_ch¨
 *) "chunked", 7) == 0)

1747 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
NULL
;

1748 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1749 
r
->
hódîs_ö
.
chunked
 = 1;

1751 } i‡(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
Àn
 != 8

1752 || 
	`ngx_°∫ˇ£cmp
(
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
.
d©a
,

1753 (
u_ch¨
 *) "identity", 8) != 0)

1755 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1757 &
r
->
hódîs_ö
.
å™s„r_ícodög
->
vÆue
);

1758 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_IMPLEMENTED
);

1759  
NGX_ERROR
;

1763 i‡(
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 =
NGX_HTTP_CONNECTION_KEEP_ALIVE
) {

1764 i‡(
r
->
hódîs_ö
.
kìp_Æive
) {

1765 
r
->
hódîs_ö
.
kìp_Æive_n
 =

1766 
	`ngx_©Ÿm
(
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
d©a
,

1767 
r
->
hódîs_ö
.
kìp_Æive
->
vÆue
.
Àn
);

1771  
NGX_OK
;

1772 
	}
}

1776 
	$ngx_hâp_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

1778 
ngx_c⁄√˘i⁄_t
 *
c
;

1780 
c
 = 
r
->
c⁄√˘i⁄
;

1782 #i‡(
NGX_HTTP_SSL
)

1784 i‡(
r
->
hâp_c⁄√˘i⁄
->
s¶
) {

1785 
rc
;

1786 
X509
 *
˚π
;

1787 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1789 i‡(
c
->
s¶
 =
NULL
) {

1790 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1792 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_TO_HTTPS
);

1796 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_s¶_moduÀ
);

1798 i‡(
sscf
->
vîify
) {

1799 
rc
 = 
	`SSL_gë_vîify_ªsu…
(
c
->
s¶
->
c⁄√˘i⁄
);

1801 i‡(
rc
 !
X509_V_OK


1802 && (
sscf
->
vîify
 !3 || !
	`ngx_s¶_vîify_îr‹_›ti⁄Æ
(
rc
)))

1804 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1806 
rc
, 
	`X509_vîify_˚π_îr‹_°rög
(rc));

1808 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1809 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1811 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_CERT_ERROR
);

1815 i‡(
sscf
->
vîify
 == 1) {

1816 
˚π
 = 
	`SSL_gë_≥î_˚πifiˇã
(
c
->
s¶
->
c⁄√˘i⁄
);

1818 i‡(
˚π
 =
NULL
) {

1819 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

1822 
	`ngx_s¶_ªmove_ˇched_£ssi⁄
(
sscf
->
s¶
.
˘x
,

1823 (
	`SSL_gë0_£ssi⁄
(
c
->
s¶
->
c⁄√˘i⁄
)));

1825 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTPS_NO_CERT
);

1829 
	`X509_‰ì
(
˚π
);

1836 i‡(
c
->
ªad
->
timî_£t
) {

1837 
	`ngx_dñ_timî
(
c
->
ªad
);

1840 #i‡(
NGX_STAT_STUB
)

1841 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

1842 
r
->
°©_ªadög
 = 0;

1843 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, 1);

1844 
r
->
°©_wrôög
 = 1;

1847 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1848 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

1849 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

1851 
	`ngx_hâp_h™dÀr
(
r
);

1853 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

1854 
	}
}

1857 
ngx_öt_t


1858 
	$ngx_hâp_vÆid©e_ho°
(
ngx_°r_t
 *
ho°
, 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_uöt_t
 
Æloc
)

1860 
u_ch¨
 *
h
, 
ch
;

1861 
size_t
 
i
, 
dŸ_pos
, 
ho°_Àn
;

1864 
sw_usuÆ
 = 0,

1865 
sw_lôîÆ
,

1866 
sw_ª°


1867 } 
°©e
;

1869 
dŸ_pos
 = 
ho°
->
Àn
;

1870 
ho°_Àn
 = 
ho°
->
Àn
;

1872 
h
 = 
ho°
->
d©a
;

1874 
°©e
 = 
sw_usuÆ
;

1876 
i
 = 0; i < 
ho°
->
Àn
; i++) {

1877 
ch
 = 
h
[
i
];

1879 
ch
) {

1882 i‡(
dŸ_pos
 =
i
 - 1) {

1883  
NGX_DECLINED
;

1885 
dŸ_pos
 = 
i
;

1889 i‡(
°©e
 =
sw_usuÆ
) {

1890 
ho°_Àn
 = 
i
;

1891 
°©e
 = 
sw_ª°
;

1896 i‡(
i
 == 0) {

1897 
°©e
 = 
sw_lôîÆ
;

1902 i‡(
°©e
 =
sw_lôîÆ
) {

1903 
ho°_Àn
 = 
i
 + 1;

1904 
°©e
 = 
sw_ª°
;

1909  
NGX_DECLINED
;

1913 i‡(
	`ngx_∑th_£∑øt‹
(
ch
)) {

1914  
NGX_DECLINED
;

1917 i‡(
ch
 >= 'A' && ch <= 'Z') {

1918 
Æloc
 = 1;

1925 i‡(
dŸ_pos
 =
ho°_Àn
 - 1) {

1926 
ho°_Àn
--;

1929 i‡(
ho°_Àn
 == 0) {

1930  
NGX_DECLINED
;

1933 i‡(
Æloc
) {

1934 
ho°
->
d©a
 = 
	`ngx_≤Æloc
(
poﬁ
, 
ho°_Àn
);

1935 i‡(
ho°
->
d©a
 =
NULL
) {

1936  
NGX_ERROR
;

1939 
	`ngx_°æow
(
ho°
->
d©a
, 
h
, 
ho°_Àn
);

1942 
ho°
->
Àn
 = 
ho°_Àn
;

1944  
NGX_OK
;

1945 
	}
}

1948 
ngx_öt_t


1949 
	$ngx_hâp_£t_vútuÆ_£rvî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
ho°
)

1951 
ngx_öt_t
 
rc
;

1952 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

1953 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1954 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1956 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

1958 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


1960 i‡(
hc
->
s¶_£rvî«me
) {

1961 i‡(
hc
->
s¶_£rvî«me
->
Àn
 =
ho°
->len

1962 && 
	`ngx_°∫cmp
(
hc
->
s¶_£rvî«me
->
d©a
,

1963 
ho°
->
d©a
, ho°->
Àn
) == 0)

1965 #i‡(
NGX_PCRE
)

1966 i‡(
hc
->
s¶_£rvî«me_ªgex


1967 && 
	`ngx_hâp_ªgex_exec
(
r
, 
hc
->
s¶_£rvî«me_ªgex
,

1968 
hc
->
s¶_£rvî«me
Ë!
NGX_OK
)

1970 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1971  
NGX_ERROR
;

1974  
NGX_OK
;

1980 
rc
 = 
	`ngx_hâp_föd_vútuÆ_£rvî
(
r
->
c⁄√˘i⁄
,

1981 
hc
->
addr_c⁄f
->
vútuÆ_«mes
,

1982 
ho°
, 
r
, &
cscf
);

1984 i‡(
rc
 =
NGX_ERROR
) {

1985 
	`ngx_hâp_˛o£_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1986  
NGX_ERROR
;

1989 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


1991 i‡(
hc
->
s¶_£rvî«me
) {

1992 
ngx_hâp_s¶_§v_c⁄f_t
 *
sscf
;

1994 i‡(
rc
 =
NGX_DECLINED
) {

1995 
cscf
 = 
hc
->
addr_c⁄f
->
deÁu…_£rvî
;

1996 
rc
 = 
NGX_OK
;

1999 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
cscf
->
˘x
, 
ngx_hâp_s¶_moduÀ
);

2001 i‡(
sscf
->
vîify
) {

2002 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2005 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2006  
NGX_ERROR
;

2012 i‡(
rc
 =
NGX_DECLINED
) {

2013  
NGX_OK
;

2016 
r
->
§v_c⁄f
 = 
cscf
->
˘x
->srv_conf;

2017 
r
->
loc_c⁄f
 = 
cscf
->
˘x
->loc_conf;

2019 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2021 
	`ngx_hâp_£t_c⁄√˘i⁄_log
(
r
->
c⁄√˘i⁄
, 
˛cf
->
îr‹_log
);

2023  
NGX_OK
;

2024 
	}
}

2027 
ngx_öt_t


2028 
	$ngx_hâp_föd_vútuÆ_£rvî
(
ngx_c⁄√˘i⁄_t
 *
c
,

2029 
ngx_hâp_vútuÆ_«mes_t
 *
vútuÆ_«mes
, 
ngx_°r_t
 *
ho°
,

2030 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_c‹e_§v_c⁄f_t
 **
cscÂ
)

2032 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2034 i‡(
vútuÆ_«mes
 =
NULL
) {

2035  
NGX_DECLINED
;

2038 
cscf
 = 
	`ngx_hash_föd_comböed
(&
vútuÆ_«mes
->
«mes
,

2039 
	`ngx_hash_key
(
ho°
->
d©a
, ho°->
Àn
),

2040 
ho°
->
d©a
, ho°->
Àn
);

2042 i‡(
cscf
) {

2043 *
cscÂ
 = 
cscf
;

2044  
NGX_OK
;

2047 #i‡(
NGX_PCRE
)

2049 i‡(
ho°
->
Àn
 && 
vútuÆ_«mes
->
ƒegex
) {

2050 
ngx_öt_t
 
n
;

2051 
ngx_uöt_t
 
i
;

2052 
ngx_hâp_£rvî_«me_t
 *
¢
;

2054 
¢
 = 
vútuÆ_«mes
->
ªgex
;

2056 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


2058 i‡(
r
 =
NULL
) {

2059 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2061 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2063 
n
 = 
	`ngx_ªgex_exec
(
¢
[
i
].
ªgex
->ªgex, 
ho°
, 
NULL
, 0);

2065 i‡(
n
 =
NGX_REGEX_NO_MATCHED
) {

2069 i‡(
n
 >= 0) {

2070 
hc
 = 
c
->
d©a
;

2071 
hc
->
s¶_£rvî«me_ªgex
 = 
¢
[
i
].
ªgex
;

2073 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2074  
NGX_OK
;

2077 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2078 
ngx_ªgex_exec_n
 " failed: %i "

2080 
n
, 
ho°
, &
¢
[
i
].
ªgex
->
«me
);

2082  
NGX_ERROR
;

2085  
NGX_DECLINED
;

2090 
i
 = 0; i < 
vútuÆ_«mes
->
ƒegex
; i++) {

2092 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
¢
[
i
].
ªgex
, 
ho°
);

2094 i‡(
n
 =
NGX_DECLINED
) {

2098 i‡(
n
 =
NGX_OK
) {

2099 *
cscÂ
 = 
¢
[
i
].
£rvî
;

2100  
NGX_OK
;

2103  
NGX_ERROR
;

2109  
NGX_DECLINED
;

2110 
	}
}

2114 
	$ngx_hâp_ªque°_h™dÀr
(
ngx_evít_t
 *
ev
)

2116 
ngx_c⁄√˘i⁄_t
 *
c
;

2117 
ngx_hâp_ªque°_t
 *
r
;

2118 
ngx_hâp_log_˘x_t
 *
˘x
;

2120 
c
 = 
ev
->
d©a
;

2121 
r
 = 
c
->
d©a
;

2123 
˘x
 = 
c
->
log
->
d©a
;

2124 
˘x
->
cuºít_ªque°
 = 
r
;

2126 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2127 "hâ∞ru¿ªque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2129 i‡(
ev
->
wrôe
) {

2130 
r
->
	`wrôe_evít_h™dÀr
(r);

2133 
r
->
	`ªad_evít_h™dÀr
(r);

2136 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

2137 
	}
}

2141 
	$ngx_hâp_run_po°ed_ªque°s
(
ngx_c⁄√˘i⁄_t
 *
c
)

2143 
ngx_hâp_ªque°_t
 *
r
;

2144 
ngx_hâp_log_˘x_t
 *
˘x
;

2145 
ngx_hâp_po°ed_ªque°_t
 *
¥
;

2149 i‡(
c
->
de°royed
) {

2153 
r
 = 
c
->
d©a
;

2154 
¥
 = 
r
->
maö
->
po°ed_ªque°s
;

2156 i‡(
¥
 =
NULL
) {

2160 
r
->
maö
->
po°ed_ªque°s
 = 
¥
->
√xt
;

2162 
r
 = 
¥
->
ªque°
;

2164 
˘x
 = 
c
->
log
->
d©a
;

2165 
˘x
->
cuºít_ªque°
 = 
r
;

2167 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2168 "hâ∞po°edÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2170 
r
->
	`wrôe_evít_h™dÀr
(r);

2172 
	}
}

2175 
ngx_öt_t


2176 
	$ngx_hâp_po°_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_po°ed_ªque°_t
 *
¥
)

2178 
ngx_hâp_po°ed_ªque°_t
 **
p
;

2180 i‡(
¥
 =
NULL
) {

2181 
¥
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_po°ed_ªque°_t
));

2182 i‡(
¥
 =
NULL
) {

2183  
NGX_ERROR
;

2187 
¥
->
ªque°
 = 
r
;

2188 
¥
->
√xt
 = 
NULL
;

2190 
p
 = &
r
->
maö
->
po°ed_ªque°s
; *p;Ö = &(*p)->
√xt
) { }

2192 *
p
 = 
¥
;

2194  
NGX_OK
;

2195 
	}
}

2199 
	$ngx_hâp_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2201 
ngx_c⁄√˘i⁄_t
 *
c
;

2202 
ngx_hâp_ªque°_t
 *
¥
;

2203 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2205 
c
 = 
r
->
c⁄√˘i⁄
;

2207 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2209 
rc
, &
r
->
uri
, &r->
¨gs
,Ñ =
c
->
d©a
,Ñ->
maö
->
cou¡
);

2211 i‡(
rc
 =
NGX_DONE
) {

2212 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2216 i‡(
rc
 =
NGX_OK
 && 
r
->
fûãr_föÆize
) {

2217 
c
->
îr‹
 = 1;

2220 i‡(
rc
 =
NGX_DECLINED
) {

2221 
r
->
c⁄ã¡_h™dÀr
 = 
NULL
;

2222 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_c‹e_run_pha£s
;

2223 
	`ngx_hâp_c‹e_run_pha£s
(
r
);

2227 i‡(
r
 !r->
maö
 &&Ñ->
po°_subªque°
) {

2228 
rc
 = 
r
->
po°_subªque°
->
	`h™dÀr
‘,Ñ->po°_subªque°->
d©a
,Ñc);

2231 i‡(
rc
 =
NGX_ERROR


2232 || 
rc
 =
NGX_HTTP_REQUEST_TIME_OUT


2233 || 
rc
 =
NGX_HTTP_CLIENT_CLOSED_REQUEST


2234 || 
c
->
îr‹
)

2236 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2240 i‡(
r
->
maö
->
blocked
) {

2241 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2244 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2248 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE


2249 || 
rc
 =
NGX_HTTP_CREATED


2250 || 
rc
 =
NGX_HTTP_NO_CONTENT
)

2252 i‡(
rc
 =
NGX_HTTP_CLOSE
) {

2253 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 
rc
);

2257 i‡(
r
 =r->
maö
) {

2258 i‡(
c
->
ªad
->
timî_£t
) {

2259 
	`ngx_dñ_timî
(
c
->
ªad
);

2262 i‡(
c
->
wrôe
->
timî_£t
) {

2263 
	`ngx_dñ_timî
(
c
->
wrôe
);

2267 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2268 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_ªque°_h™dÀr
;

2270 
	`ngx_hâp_föÆize_ªque°
(
r
, 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
‘, 
rc
));

2274 i‡(
r
 !r->
maö
) {

2276 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
) {

2278 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2279 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2285 
¥
 = 
r
->
∑ª¡
;

2287 i‡(
r
 =
c
->
d©a
) {

2289 
r
->
maö
->
cou¡
--;

2290 
r
->
maö
->
subªque°s
++;

2292 i‡(!
r
->
logged
) {

2294 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2296 i‡(
˛cf
->
log_subªque°
) {

2297 
	`ngx_hâp_log_ªque°
(
r
);

2300 
r
->
logged
 = 1;

2303 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2305 &
r
->
uri
, &r->
¨gs
);

2308 
r
->
d⁄e
 = 1;

2310 i‡(
¥
->
po°p⁄ed
 &&Ör->po°p⁄ed->
ªque°
 =
r
) {

2311 
¥
->
po°p⁄ed
 =Ör->po°p⁄ed->
√xt
;

2314 
c
->
d©a
 = 
¥
;

2318 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2320 &
r
->
uri
, &r->
¨gs
);

2322 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_föÆizî
;

2324 i‡(
r
->
waôed
) {

2325 
r
->
d⁄e
 = 1;

2329 i‡(
	`ngx_hâp_po°_ªque°
(
¥
, 
NULL
Ë!
NGX_OK
) {

2330 
r
->
maö
->
cou¡
++;

2331 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2335 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2337 &
¥
->
uri
, &¥->
¨gs
);

2342 i‡(
r
->
buf„ªd
 || 
c
->buf„ªd ||Ñ->
po°p⁄ed
 ||Ñ->
blocked
) {

2344 i‡(
	`ngx_hâp_£t_wrôe_h™dÀr
(
r
Ë!
NGX_OK
) {

2345 
	`ngx_hâp_ãrmö©e_ªque°
(
r
, 0);

2351 i‡(
r
 !
c
->
d©a
) {

2352 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2354 &
r
->
uri
, &r->
¨gs
);

2358 
r
->
d⁄e
 = 1;

2359 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2361 i‡(!
r
->
po°_a˘i⁄
) {

2362 
r
->
ªque°_com∂ëe
 = 1;

2365 i‡(
	`ngx_hâp_po°_a˘i⁄
(
r
Ë=
NGX_OK
) {

2369 i‡(
c
->
ªad
->
timî_£t
) {

2370 
	`ngx_dñ_timî
(
c
->
ªad
);

2373 i‡(
c
->
wrôe
->
timî_£t
) {

2374 
c
->
wrôe
->
dñayed
 = 0;

2375 
	`ngx_dñ_timî
(
c
->
wrôe
);

2378 i‡(
c
->
ªad
->
eof
) {

2379 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2383 
	`ngx_hâp_föÆize_c⁄√˘i⁄
(
r
);

2384 
	}
}

2388 
	$ngx_hâp_ãrmö©e_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

2390 
ngx_hâp_˛ónup_t
 *
˛n
;

2391 
ngx_hâp_ªque°_t
 *
mr
;

2392 
ngx_hâp_ïhemîÆ_t
 *
e
;

2394 
mr
 = 
r
->
maö
;

2396 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2397 "hâ∞ãrmö©êªque° cou¡:%d", 
mr
->
cou¡
);

2399 i‡(
rc
 > 0 && (
mr
->
hódîs_out
.
°©us
 =0 || mr->
c⁄√˘i⁄
->
£¡
 == 0)) {

2400 
mr
->
hódîs_out
.
°©us
 = 
rc
;

2403 
˛n
 = 
mr
->
˛ónup
;

2404 
mr
->
˛ónup
 = 
NULL
;

2406 
˛n
) {

2407 i‡(
˛n
->
h™dÀr
) {

2408 
˛n
->
	`h™dÀr
(˛n->
d©a
);

2411 
˛n
 = c ->
√xt
;

2414 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2416 
mr
->
cou¡
, mr->
blocked
);

2418 i‡(
mr
->
wrôe_evít_h™dÀr
) {

2420 i‡(
mr
->
blocked
) {

2424 
e
 = 
	`ngx_hâp_ïhemîÆ
(
mr
);

2425 
mr
->
po°ed_ªque°s
 = 
NULL
;

2426 
mr
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ãrmö©e_h™dÀr
;

2427 (Ë
	`ngx_hâp_po°_ªque°
(
mr
, &
e
->
ãrmöÆ_po°ed_ªque°
);

2431 
	`ngx_hâp_˛o£_ªque°
(
mr
, 
rc
);

2432 
	}
}

2436 
	$ngx_hâp_ãrmö©e_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2438 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2439 "hâ∞ãrmö©êh™dÀ∏cou¡:%d", 
r
->
cou¡
);

2441 
r
->
cou¡
 = 1;

2443 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2444 
	}
}

2448 
	$ngx_hâp_föÆize_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

2450 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2452 #i‡(
NGX_HTTP_SPDY
)

2453 i‡(
r
->
•dy_°ªam
) {

2454 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2459 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2461 i‡(
r
->
maö
->
cou¡
 != 1) {

2463 i‡(
r
->
disˇrd_body
) {

2464 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

2465 
	`ngx_add_timî
(
r
->
c⁄√˘i⁄
->
ªad
, 
˛cf
->
lögîög_timeout
);

2467 i‡(
r
->
lögîög_time
 == 0) {

2468 
r
->
lögîög_time
 = 
	`ngx_time
()

2469 + (
time_t
Ë(
˛cf
->
lögîög_time
 / 1000);

2473 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2477 i‡(!
ngx_ãrmö©e


2478 && !
ngx_exôög


2479 && 
r
->
kì∑live


2480 && 
˛cf
->
kì∑live_timeout
 > 0)

2482 
	`ngx_hâp_£t_kì∑live
(
r
);

2486 i‡(
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ALWAYS


2487 || (
˛cf
->
lögîög_˛o£
 =
NGX_HTTP_LINGERING_ON


2488 && (
r
->
lögîög_˛o£


2489 || 
r
->
hódî_ö
->
pos
 <Ñ->hódî_ö->
œ°


2490 || 
r
->
c⁄√˘i⁄
->
ªad
->
ªady
)))

2492 
	`ngx_hâp_£t_lögîög_˛o£
(
r
);

2496 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2497 
	}
}

2500 
ngx_öt_t


2501 
	$ngx_hâp_£t_wrôe_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

2503 
ngx_evít_t
 *
wev
;

2504 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2506 
r
->
hâp_°©e
 = 
NGX_HTTP_WRITING_REQUEST_STATE
;

2508 
r
->
ªad_evít_h™dÀr
 =Ñ->
disˇrd_body
 ?

2509 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
:

2510 
ngx_hâp_ã°_ªadög
;

2511 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_wrôî
;

2513 #i‡(
NGX_HTTP_SPDY
)

2514 i‡(
r
->
•dy_°ªam
) {

2515  
NGX_OK
;

2519 
wev
 = 
r
->
c⁄√˘i⁄
->
wrôe
;

2521 i‡(
wev
->
ªady
 && wev->
dñayed
) {

2522  
NGX_OK
;

2525 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2526 i‡(!
wev
->
dñayed
) {

2527 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2530 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2531 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2532  
NGX_ERROR
;

2535  
NGX_OK
;

2536 
	}
}

2540 
	$ngx_hâp_wrôî
(
ngx_hâp_ªque°_t
 *
r
)

2542 
rc
;

2543 
ngx_evít_t
 *
wev
;

2544 
ngx_c⁄√˘i⁄_t
 *
c
;

2545 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2547 
c
 = 
r
->
c⁄√˘i⁄
;

2548 
wev
 = 
c
->
wrôe
;

2550 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2551 "hâ∞wrôî h™dÀr: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2553 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
->
maö
, 
ngx_hâp_c‹e_moduÀ
);

2555 i‡(
wev
->
timedout
) {

2556 i‡(!
wev
->
dñayed
) {

2557 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

2559 
c
->
timedout
 = 1;

2561 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2565 
wev
->
timedout
 = 0;

2566 
wev
->
dñayed
 = 0;

2568 i‡(!
wev
->
ªady
) {

2569 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2571 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2572 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2580 i‡(
wev
->
dñayed
 || 
r
->
aio
) {

2581 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2584 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2585 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2591 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
NULL
);

2593 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2595 
rc
, &
r
->
uri
, &r->
¨gs
);

2597 i‡(
rc
 =
NGX_ERROR
) {

2598 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2602 i‡(
r
->
buf„ªd
 ||Ñ->
po°p⁄ed
 || (∏=r->
maö
 && 
c
->buffered)) {

2604 i‡(!
wev
->
dñayed
) {

2605 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

2608 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

2609 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2615 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0,

2616 "hâ∞wrôî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2618 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2620 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

2621 
	}
}

2625 
	$ngx_hâp_ªque°_föÆizî
(
ngx_hâp_ªque°_t
 *
r
)

2627 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2628 "hâ∞föÆizî d⁄e: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

2630 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2631 
	}
}

2635 
	$ngx_hâp_block_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2637 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2642 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)

2643 && 
r
->
c⁄√˘i⁄
->
ªad
->
a˘ive
)

2645 i‡(
	`ngx_dñ_evít
(
r
->
c⁄√˘i⁄
->
ªad
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2646 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2649 
	}
}

2653 
	$ngx_hâp_ã°_ªadög
(
ngx_hâp_ªque°_t
 *
r
)

2655 
n
;

2656 
buf
[1];

2657 
ngx_îr_t
 
îr
;

2658 
ngx_evít_t
 *
ªv
;

2659 
ngx_c⁄√˘i⁄_t
 *
c
;

2661 
c
 = 
r
->
c⁄√˘i⁄
;

2662 
ªv
 = 
c
->
ªad
;

2664 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "httpÅestÑeading");

2666 #i‡(
NGX_HTTP_SPDY
)

2668 i‡(
r
->
•dy_°ªam
) {

2669 i‡(
c
->
îr‹
) {

2670 
îr
 = 0;

2671 
˛o£d
;

2679 #i‡(
NGX_HAVE_KQUEUE
)

2681 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2683 i‡(!
ªv
->
≥ndög_eof
) {

2687 
ªv
->
eof
 = 1;

2688 
c
->
îr‹
 = 1;

2689 
îr
 = 
ªv
->
kq_î∫o
;

2691 
˛o£d
;

2696 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

2698 i‡(
n
 == 0) {

2699 
ªv
->
eof
 = 1;

2700 
c
->
îr‹
 = 1;

2701 
îr
 = 0;

2703 
˛o£d
;

2705 } i‡(
n
 == -1) {

2706 
îr
 = 
ngx_sockë_î∫o
;

2708 i‡(
îr
 !
NGX_EAGAIN
) {

2709 
ªv
->
eof
 = 1;

2710 
c
->
îr‹
 = 1;

2712 
˛o£d
;

2718 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ªv
->
a˘ive
) {

2720 i‡(
	`ngx_dñ_evít
(
ªv
, 
NGX_READ_EVENT
, 0Ë!
NGX_OK
) {

2721 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2727 
˛o£d
:

2729 i‡(
îr
) {

2730 
ªv
->
îr‹
 = 1;

2733 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
îr
,

2736 
	`ngx_hâp_föÆize_ªque°
(
r
, 0);

2737 
	}
}

2741 
	$ngx_hâp_£t_kì∑live
(
ngx_hâp_ªque°_t
 *
r
)

2743 
t˝_nodñay
;

2744 
ngx_öt_t
 
i
;

2745 
ngx_buf_t
 *
b
, *
f
;

2746 
ngx_evít_t
 *
ªv
, *
wev
;

2747 
ngx_c⁄√˘i⁄_t
 *
c
;

2748 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

2749 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2750 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2752 
c
 = 
r
->
c⁄√˘i⁄
;

2753 
ªv
 = 
c
->
ªad
;

2755 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2757 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "set http keepalive handler");

2759 i‡(
r
->
disˇrd_body
) {

2760 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2761 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

2762 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

2766 
c
->
log
->
a˘i⁄
 = "closingÑequest";

2768 
hc
 = 
r
->
hâp_c⁄√˘i⁄
;

2769 
b
 = 
r
->
hódî_ö
;

2771 i‡(
b
->
pos
 < b->
œ°
) {

2775 i‡(
b
 !
c
->
buf„r
) {

2785 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2787 i‡(
hc
->
‰ì
 =
NULL
) {

2788 
hc
->
‰ì
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
,

2789 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
 * (
ngx_buf_t
 *));

2791 i‡(
hc
->
‰ì
 =
NULL
) {

2792 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

2797 
i
 = 0; i < 
hc
->
nbusy
 - 1; i++) {

2798 
f
 = 
hc
->
busy
[
i
];

2799 
hc
->
‰ì
[hc->
n‰ì
++] = 
f
;

2800 
f
->
pos
 = f->
°¨t
;

2801 
f
->
œ°
 = f->
°¨t
;

2804 
hc
->
busy
[0] = 
b
;

2805 
hc
->
nbusy
 = 1;

2810 
r
->
kì∑live
 = 0;

2812 
	`ngx_hâp_‰ì_ªque°
(
r
, 0);

2814 
c
->
d©a
 = 
hc
;

2816 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2817 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2821 
wev
 = 
c
->
wrôe
;

2822 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2824 i‡(
b
->
pos
 < b->
œ°
) {

2826 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "pipelinedÑequest");

2828 
c
->
log
->
a˘i⁄
 = "reading clientÖipelinedÑequestÜine";

2830 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
c
);

2831 i‡(
r
 =
NULL
) {

2832 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2836 
r
->
pùñöe
 = 1;

2838 
c
->
d©a
 = 
r
;

2840 
c
->
£¡
 = 0;

2841 
c
->
de°royed
 = 0;

2843 i‡(
ªv
->
timî_£t
) {

2844 
	`ngx_dñ_timî
(
ªv
);

2847 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

2848 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2859 
b
 = 
c
->
buf„r
;

2861 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

2868 
b
->
pos
 = 
NULL
;

2871 
b
->
pos
 = b->
°¨t
;

2872 
b
->
œ°
 = b->
°¨t
;

2875 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc free: %p %d",

2876 
hc
->
‰ì
, hc->
n‰ì
);

2878 i‡(
hc
->
‰ì
) {

2879 
i
 = 0; i < 
hc
->
n‰ì
; i++) {

2880 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
‰ì
[
i
]->
°¨t
);

2881 
hc
->
‰ì
[
i
] = 
NULL
;

2884 
hc
->
n‰ì
 = 0;

2887 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "hc busy: %p %d",

2888 
hc
->
busy
, hc->
nbusy
);

2890 i‡(
hc
->
busy
) {

2891 
i
 = 0; i < 
hc
->
nbusy
; i++) {

2892 
	`ngx_p‰ì
(
c
->
poﬁ
, 
hc
->
busy
[
i
]->
°¨t
);

2893 
hc
->
busy
[
i
] = 
NULL
;

2896 
hc
->
nbusy
 = 0;

2899 #i‡(
NGX_HTTP_SSL
)

2900 i‡(
c
->
s¶
) {

2901 
	`ngx_s¶_‰ì_buf„r
(
c
);

2905 
ªv
->
h™dÀr
 = 
ngx_hâp_kì∑live_h™dÀr
;

2907 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

2908 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

2909 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2914 
c
->
log
->
a˘i⁄
 = "keepalive";

2916 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

2917 i‡(
	`ngx_t˝_push
(
c
->
fd
) == -1) {

2918 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
, 
ngx_t˝_push_n
 " failed");

2919 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2923 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

2924 
t˝_nodñay
 = 
ngx_t˝_nodñay_™d_t˝_n›ush
 ? 1 : 0;

2927 
t˝_nodñay
 = 1;

2930 i‡(
t˝_nodñay


2931 && 
˛cf
->
t˝_nodñay


2932 && 
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
)

2934 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2936 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2937 (c⁄° *Ë&
t˝_nodñay
, ())

2940 #i‡(
NGX_SOLARIS
)

2942 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_EINVAL
;

2945 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2948 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

2949 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2953 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2958 
r
->
hâp_°©e
 = 
NGX_HTTP_KEEPALIVE_STATE
;

2961 
c
->
idÀ
 = 1;

2962 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

2964 
	`ngx_add_timî
(
ªv
, 
˛cf
->
kì∑live_timeout
);

2966 i‡(
ªv
->
ªady
) {

2967 
	`ngx_po°_evít
(
ªv
, &
ngx_po°ed_evíts
);

2969 
	}
}

2973 
	$ngx_hâp_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

2975 
size_t
 
size
;

2976 
ssize_t
 
n
;

2977 
ngx_buf_t
 *
b
;

2978 
ngx_c⁄√˘i⁄_t
 *
c
;

2980 
c
 = 
ªv
->
d©a
;

2982 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "http keepalive handler");

2984 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

2985 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2989 #i‡(
NGX_HAVE_KQUEUE
)

2991 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2992 i‡(
ªv
->
≥ndög_eof
) {

2993 
c
->
log
->
h™dÀr
 = 
NULL
;

2994 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

2996 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2997 #i‡(
NGX_HTTP_SSL
)

2998 i‡(
c
->
s¶
) {

2999 
c
->
s¶
->
no_£nd_shutdown
 = 1;

3002 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3009 
b
 = 
c
->
buf„r
;

3010 
size
 = 
b
->
íd
 - b->
°¨t
;

3012 i‡(
b
->
pos
 =
NULL
) {

3020 
b
->
pos
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, 
size
);

3021 i‡(
b
->
pos
 =
NULL
) {

3022 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3026 
b
->
°¨t
 = b->
pos
;

3027 
b
->
œ°
 = b->
pos
;

3028 
b
->
íd
 = b->
pos
 + 
size
;

3036 
c
->
log_îr‹
 = 
NGX_ERROR_IGNORE_ECONNRESET
;

3037 
	`ngx_£t_sockë_î∫o
(0);

3039 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

3040 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

3042 i‡(
n
 =
NGX_AGAIN
) {

3043 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3044 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3053 i‡(
	`ngx_p‰ì
(
c
->
poﬁ
, 
b
->
°¨t
Ë=
NGX_OK
) {

3059 
b
->
pos
 = 
NULL
;

3065 i‡(
n
 =
NGX_ERROR
) {

3066 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3070 
c
->
log
->
h™dÀr
 = 
NULL
;

3072 i‡(
n
 == 0) {

3073 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ngx_sockë_î∫o
,

3074 "˛õ¡ %V clo£d kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

3075 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3079 
b
->
œ°
 +
n
;

3081 
c
->
log
->
h™dÀr
 = 
ngx_hâp_log_îr‹
;

3082 
c
->
log
->
a˘i⁄
 = "reading clientÑequestÜine";

3084 
c
->
idÀ
 = 0;

3085 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

3087 
c
->
d©a
 = 
	`ngx_hâp_¸óã_ªque°
(c);

3088 i‡(
c
->
d©a
 =
NULL
) {

3089 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3093 
c
->
£¡
 = 0;

3094 
c
->
de°royed
 = 0;

3096 
	`ngx_dñ_timî
(
ªv
);

3098 
ªv
->
h™dÀr
 = 
ngx_hâp_¥o˚ss_ªque°_löe
;

3099 
	`ngx_hâp_¥o˚ss_ªque°_löe
(
ªv
);

3100 
	}
}

3104 
	$ngx_hâp_£t_lögîög_˛o£
(
ngx_hâp_ªque°_t
 *
r
)

3106 
ngx_evít_t
 *
ªv
, *
wev
;

3107 
ngx_c⁄√˘i⁄_t
 *
c
;

3108 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3110 
c
 = 
r
->
c⁄√˘i⁄
;

3112 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3114 
ªv
 = 
c
->
ªad
;

3115 
ªv
->
h™dÀr
 = 
ngx_hâp_lögîög_˛o£_h™dÀr
;

3117 
r
->
lögîög_time
 = 
	`ngx_time
(Ë+ (
time_t
Ë(
˛cf
->lingering_time / 1000);

3118 
	`ngx_add_timî
(
ªv
, 
˛cf
->
lögîög_timeout
);

3120 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3121 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3125 
wev
 = 
c
->
wrôe
;

3126 
wev
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

3128 i‡(
wev
->
a˘ive
 && (
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
)) {

3129 i‡(
	`ngx_dñ_evít
(
wev
, 
NGX_WRITE_EVENT
, 0Ë!
NGX_OK
) {

3130 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3135 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

3136 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

3137 
ngx_shutdown_sockë_n
 " failed");

3138 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3142 i‡(
ªv
->
ªady
) {

3143 
	`ngx_hâp_lögîög_˛o£_h™dÀr
(
ªv
);

3145 
	}
}

3149 
	$ngx_hâp_lögîög_˛o£_h™dÀr
(
ngx_evít_t
 *
ªv
)

3151 
ssize_t
 
n
;

3152 
ngx_m£c_t
 
timî
;

3153 
ngx_c⁄√˘i⁄_t
 *
c
;

3154 
ngx_hâp_ªque°_t
 *
r
;

3155 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3156 
u_ch¨
 
buf„r
[
NGX_HTTP_LINGERING_BUFFER_SIZE
];

3158 
c
 = 
ªv
->
d©a
;

3159 
r
 = 
c
->
d©a
;

3161 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3164 i‡(
ªv
->
timedout
) {

3165 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3169 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

3170 i‡(
timî
 <= 0) {

3171 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3176 
n
 = 
c
->
	`ªcv
(c, 
buf„r
, 
NGX_HTTP_LINGERING_BUFFER_SIZE
);

3178 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "lögîögÑód: %d", 
n
);

3180 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

3181 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3185 } 
ªv
->
ªady
);

3187 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

3188 
	`ngx_hâp_˛o£_ªque°
(
r
, 0);

3192 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3194 
timî
 *= 1000;

3196 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

3197 
timî
 = 
˛cf
->
lögîög_timeout
;

3200 
	`ngx_add_timî
(
ªv
, 
timî
);

3201 
	}
}

3205 
	$ngx_hâp_em±y_h™dÀr
(
ngx_evít_t
 *
wev
)

3207 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
wev
->
log
, 0, "httpÉmpty handler");

3210 
	}
}

3214 
	$ngx_hâp_ªque°_em±y_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

3216 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3220 
	}
}

3223 
ngx_öt_t


3224 
	$ngx_hâp_£nd_•ecül
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
Êags
)

3226 
ngx_buf_t
 *
b
;

3227 
ngx_chaö_t
 
out
;

3229 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

3230 i‡(
b
 =
NULL
) {

3231  
NGX_ERROR
;

3234 i‡(
Êags
 & 
NGX_HTTP_LAST
) {

3236 i‡(
r
 =r->
maö
 && !r->
po°_a˘i⁄
) {

3237 
b
->
œ°_buf
 = 1;

3240 
b
->
sync
 = 1;

3241 
b
->
œ°_ö_chaö
 = 1;

3245 i‡(
Êags
 & 
NGX_HTTP_FLUSH
) {

3246 
b
->
Êush
 = 1;

3249 
out
.
buf
 = 
b
;

3250 
out
.
√xt
 = 
NULL
;

3252  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

3253 
	}
}

3256 
ngx_öt_t


3257 
	$ngx_hâp_po°_a˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

3259 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3261 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3263 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
 =
NULL
) {

3264  
NGX_DECLINED
;

3267 i‡(
r
->
po°_a˘i⁄
 &&Ñ->
uri_ch™ges
 == 0) {

3268  
NGX_DECLINED
;

3271 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3272 "po°á˘i⁄: \"%V\"", &
˛cf
->
po°_a˘i⁄
);

3274 
r
->
maö
->
cou¡
--;

3276 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

3277 
r
->
hódî_⁄ly
 = 1;

3278 
r
->
po°_a˘i⁄
 = 1;

3280 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

3282 i‡(
˛cf
->
po°_a˘i⁄
.
d©a
[0] == '/') {

3283 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
˛cf
->
po°_a˘i⁄
, 
NULL
);

3286 
	`ngx_hâp_«med_loˇti⁄
(
r
, &
˛cf
->
po°_a˘i⁄
);

3289  
NGX_OK
;

3290 
	}
}

3294 
	$ngx_hâp_˛o£_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3296 
ngx_c⁄√˘i⁄_t
 *
c
;

3298 
r
 =Ñ->
maö
;

3299 
c
 = 
r
->
c⁄√˘i⁄
;

3301 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3302 "hâ∞ªque° cou¡:%d blk:%d", 
r
->
cou¡
,Ñ->
blocked
);

3304 i‡(
r
->
cou¡
 == 0) {

3305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "httpÑequest count is zero");

3308 
r
->
cou¡
--;

3310 i‡(
r
->
cou¡
 ||Ñ->
blocked
) {

3314 #i‡(
NGX_HTTP_SPDY
)

3315 i‡(
r
->
•dy_°ªam
) {

3316 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
, 
rc
);

3321 
	`ngx_hâp_‰ì_ªque°
(
r
, 
rc
);

3322 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

3323 
	}
}

3327 
	$ngx_hâp_‰ì_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
rc
)

3329 
ngx_log_t
 *
log
;

3330 
ngx_poﬁ_t
 *
poﬁ
;

3331 
lögî
Üinger;

3332 
ngx_hâp_˛ónup_t
 *
˛n
;

3333 
ngx_hâp_log_˘x_t
 *
˘x
;

3334 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

3336 
log
 = 
r
->
c⁄√˘i⁄
->log;

3338 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
log
, 0, "http closeÑequest");

3340 i‡(
r
->
poﬁ
 =
NULL
) {

3341 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0, "httpÑequestálready closed");

3345 
˛n
 = 
r
->
˛ónup
; c ; c  = c ->
√xt
) {

3346 i‡(
˛n
->
h™dÀr
) {

3347 
˛n
->
	`h™dÀr
(˛n->
d©a
);

3351 #i‡(
NGX_STAT_STUB
)

3353 i‡(
r
->
°©_ªadög
) {

3354 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_ªadög
, -1);

3357 i‡(
r
->
°©_wrôög
) {

3358 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_wrôög
, -1);

3363 i‡(
rc
 > 0 && (
r
->
hódîs_out
.
°©us
 =0 ||Ñ->
c⁄√˘i⁄
->
£¡
 == 0)) {

3364 
r
->
hódîs_out
.
°©us
 = 
rc
;

3367 
log
->
a˘i⁄
 = "loggingÑequest";

3369 
	`ngx_hâp_log_ªque°
(
r
);

3371 
log
->
a˘i⁄
 = "closingÑequest";

3373 i‡(
r
->
c⁄√˘i⁄
->
timedout
) {

3374 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3376 i‡(
˛cf
->
ª£t_timedout_c⁄√˘i⁄
) {

3377 
lögî
.
l_⁄off
 = 1;

3378 
lögî
.
l_lögî
 = 0;

3380 i‡(
	`£tsock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_LINGER
,

3381 (c⁄° *Ë&
lögî
, (linger)) == -1)

3383 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_sockë_î∫o
,

3390 
˘x
 = 
log
->
d©a
;

3391 
˘x
->
ªque°
 = 
NULL
;

3393 
r
->
ªque°_löe
.
Àn
 = 0;

3395 
r
->
c⁄√˘i⁄
->
de°royed
 = 1;

3402 
poﬁ
 = 
r
->pool;

3403 
r
->
poﬁ
 = 
NULL
;

3405 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3406 
	}
}

3410 
	$ngx_hâp_log_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

3412 
ngx_uöt_t
 
i
, 
n
;

3413 
ngx_hâp_h™dÀr_±
 *
log_h™dÀr
;

3414 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

3416 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3418 
log_h™dÀr
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
ñts
;

3419 
n
 = 
cmcf
->
pha£s
[
NGX_HTTP_LOG_PHASE
].
h™dÀrs
.
√…s
;

3421 
i
 = 0; i < 
n
; i++) {

3422 
log_h™dÀr
[
i
](
r
);

3424 
	}
}

3428 
	$ngx_hâp_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

3430 
ngx_poﬁ_t
 *
poﬁ
;

3432 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

3433 "˛o£ hâ∞c⁄√˘i⁄: %d", 
c
->
fd
);

3435 #i‡(
NGX_HTTP_SSL
)

3437 i‡(
c
->
s¶
) {

3438 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

3439 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_˛o£_c⁄√˘i⁄
;

3446 #i‡(
NGX_STAT_STUB
)

3447 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

3450 
c
->
de°royed
 = 1;

3452 
poﬁ
 = 
c
->pool;

3454 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

3456 
	`ngx_de°roy_poﬁ
(
poﬁ
);

3457 
	}
}

3460 
u_ch¨
 *

3461 
	$ngx_hâp_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3463 
u_ch¨
 *
p
;

3464 
ngx_hâp_ªque°_t
 *
r
;

3465 
ngx_hâp_log_˘x_t
 *
˘x
;

3467 i‡(
log
->
a˘i⁄
) {

3468 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

3469 
Àn
 -
p
 - 
buf
;

3470 
buf
 = 
p
;

3473 
˘x
 = 
log
->
d©a
;

3475 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", &
˘x
->
c⁄√˘i⁄
->
addr_ãxt
);

3476 
Àn
 -
p
 - 
buf
;

3478 
r
 = 
˘x
->
ªque°
;

3480 i‡(
r
) {

3481  
r
->
	`log_h™dÀr
‘, 
˘x
->
cuºít_ªque°
, 
p
, 
Àn
);

3484 
p
 = 
	`ngx_¢¥ötf
’, 
Àn
, ", server: %V",

3485 &
˘x
->
c⁄√˘i⁄
->
li°íög
->
addr_ãxt
);

3488  
p
;

3489 
	}
}

3492 
u_ch¨
 *

3493 
	$ngx_hâp_log_îr‹_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,Çgx_hâp_ªque°_à*
§
,

3494 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

3496 *
uri_£∑øt‹
;

3497 
u_ch¨
 *
p
;

3498 
ngx_hâp_up°ªam_t
 *
u
;

3499 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

3501 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

3503 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", sîvî: %V", &
cscf
->
£rvî_«me
);

3504 
Àn
 -
p
 - 
buf
;

3505 
buf
 = 
p
;

3507 i‡(
r
->
ªque°_löe
.
d©a
 =
NULL
 &&Ñ->
ªque°_°¨t
) {

3508 
p
 = 
r
->
ªque°_°¨t
;Ö <Ñ->
hódî_ö
->
œ°
;Ö++) {

3509 i‡(*
p
 =
CR
 || *∞=
LF
) {

3514 
r
->
ªque°_löe
.
Àn
 = 
p
 -Ñ->
ªque°_°¨t
;

3515 
r
->
ªque°_löe
.
d©a
 =Ñ->
ªque°_°¨t
;

3518 i‡(
r
->
ªque°_löe
.
Àn
) {

3519 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeque°: \"%V\"", &
r
->
ªque°_löe
);

3520 
Àn
 -
p
 - 
buf
;

3521 
buf
 = 
p
;

3524 i‡(
r
 !
§
) {

3525 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", subªque°: \"%V\"", &
§
->
uri
);

3526 
Àn
 -
p
 - 
buf
;

3527 
buf
 = 
p
;

3530 
u
 = 
§
->
up°ªam
;

3532 i‡(
u
 && u->
≥î
.
«me
) {

3534 
uri_£∑øt‹
 = "";

3536 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

3537 i‡(
u
->
≥î
.
sockaddr
 && u->≥î.sockaddr->
ß_Ámûy
 =
AF_UNIX
) {

3538 
uri_£∑øt‹
 = ":";

3542 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", upstream: \"%V%V%s%V\"",

3543 &
u
->
schema
, u->
≥î
.
«me
,

3544 
uri_£∑øt‹
, &
u
->
uri
);

3545 
Àn
 -
p
 - 
buf
;

3546 
buf
 = 
p
;

3549 i‡(
r
->
hódîs_ö
.
ho°
) {

3550 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", host: \"%V\"",

3551 &
r
->
hódîs_ö
.
ho°
->
vÆue
);

3552 
Àn
 -
p
 - 
buf
;

3553 
buf
 = 
p
;

3556 i‡(
r
->
hódîs_ö
.
ª„ªr
) {

3557 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Ñeferrer: \"%V\"",

3558 &
r
->
hódîs_ö
.
ª„ªr
->
vÆue
);

3559 
buf
 = 
p
;

3562  
buf
;

3563 
	}
}

	@src/http/ngx_http_request.h

8 #i‚de‡
_NGX_HTTP_REQUEST_H_INCLUDED_


9 
	#_NGX_HTTP_REQUEST_H_INCLUDED_


	)

12 
	#NGX_HTTP_MAX_URI_CHANGES
 10

	)

13 
	#NGX_HTTP_MAX_SUBREQUESTS
 200

	)

16 
	#NGX_HTTP_LC_HEADER_LEN
 32

	)

19 
	#NGX_HTTP_DISCARD_BUFFER_SIZE
 4096

	)

20 
	#NGX_HTTP_LINGERING_BUFFER_SIZE
 4096

	)

23 
	#NGX_HTTP_VERSION_9
 9

	)

24 
	#NGX_HTTP_VERSION_10
 1000

	)

25 
	#NGX_HTTP_VERSION_11
 1001

	)

27 
	#NGX_HTTP_UNKNOWN
 0x0001

	)

28 
	#NGX_HTTP_GET
 0x0002

	)

29 
	#NGX_HTTP_HEAD
 0x0004

	)

30 
	#NGX_HTTP_POST
 0x0008

	)

31 
	#NGX_HTTP_PUT
 0x0010

	)

32 
	#NGX_HTTP_DELETE
 0x0020

	)

33 
	#NGX_HTTP_MKCOL
 0x0040

	)

34 
	#NGX_HTTP_COPY
 0x0080

	)

35 
	#NGX_HTTP_MOVE
 0x0100

	)

36 
	#NGX_HTTP_OPTIONS
 0x0200

	)

37 
	#NGX_HTTP_PROPFIND
 0x0400

	)

38 
	#NGX_HTTP_PROPPATCH
 0x0800

	)

39 
	#NGX_HTTP_LOCK
 0x1000

	)

40 
	#NGX_HTTP_UNLOCK
 0x2000

	)

41 
	#NGX_HTTP_PATCH
 0x4000

	)

42 
	#NGX_HTTP_TRACE
 0x8000

	)

44 
	#NGX_HTTP_CONNECTION_CLOSE
 1

	)

45 
	#NGX_HTTP_CONNECTION_KEEP_ALIVE
 2

	)

48 
	#NGX_NONE
 1

	)

51 
	#NGX_HTTP_PARSE_HEADER_DONE
 1

	)

53 
	#NGX_HTTP_CLIENT_ERROR
 10

	)

54 
	#NGX_HTTP_PARSE_INVALID_METHOD
 10

	)

55 
	#NGX_HTTP_PARSE_INVALID_REQUEST
 11

	)

56 
	#NGX_HTTP_PARSE_INVALID_09_METHOD
 12

	)

58 
	#NGX_HTTP_PARSE_INVALID_HEADER
 13

	)

62 
	#NGX_HTTP_SUBREQUEST_IN_MEMORY
 2

	)

63 
	#NGX_HTTP_SUBREQUEST_WAITED
 4

	)

64 
	#NGX_HTTP_LOG_UNSAFE
 8

	)

67 
	#NGX_HTTP_CONTINUE
 100

	)

68 
	#NGX_HTTP_SWITCHING_PROTOCOLS
 101

	)

69 
	#NGX_HTTP_PROCESSING
 102

	)

71 
	#NGX_HTTP_OK
 200

	)

72 
	#NGX_HTTP_CREATED
 201

	)

73 
	#NGX_HTTP_ACCEPTED
 202

	)

74 
	#NGX_HTTP_NO_CONTENT
 204

	)

75 
	#NGX_HTTP_PARTIAL_CONTENT
 206

	)

77 
	#NGX_HTTP_SPECIAL_RESPONSE
 300

	)

78 
	#NGX_HTTP_MOVED_PERMANENTLY
 301

	)

79 
	#NGX_HTTP_MOVED_TEMPORARILY
 302

	)

80 
	#NGX_HTTP_SEE_OTHER
 303

	)

81 
	#NGX_HTTP_NOT_MODIFIED
 304

	)

82 
	#NGX_HTTP_TEMPORARY_REDIRECT
 307

	)

84 
	#NGX_HTTP_BAD_REQUEST
 400

	)

85 
	#NGX_HTTP_UNAUTHORIZED
 401

	)

86 
	#NGX_HTTP_FORBIDDEN
 403

	)

87 
	#NGX_HTTP_NOT_FOUND
 404

	)

88 
	#NGX_HTTP_NOT_ALLOWED
 405

	)

89 
	#NGX_HTTP_REQUEST_TIME_OUT
 408

	)

90 
	#NGX_HTTP_CONFLICT
 409

	)

91 
	#NGX_HTTP_LENGTH_REQUIRED
 411

	)

92 
	#NGX_HTTP_PRECONDITION_FAILED
 412

	)

93 
	#NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
 413

	)

94 
	#NGX_HTTP_REQUEST_URI_TOO_LARGE
 414

	)

95 
	#NGX_HTTP_UNSUPPORTED_MEDIA_TYPE
 415

	)

96 
	#NGX_HTTP_RANGE_NOT_SATISFIABLE
 416

	)

102 
	#NGX_HTTP_CLOSE
 444

	)

104 
	#NGX_HTTP_NGINX_CODES
 494

	)

106 
	#NGX_HTTP_REQUEST_HEADER_TOO_LARGE
 494

	)

108 
	#NGX_HTTPS_CERT_ERROR
 495

	)

109 
	#NGX_HTTPS_NO_CERT
 496

	)

115 
	#NGX_HTTP_TO_HTTPS
 497

	)

125 
	#NGX_HTTP_CLIENT_CLOSED_REQUEST
 499

	)

128 
	#NGX_HTTP_INTERNAL_SERVER_ERROR
 500

	)

129 
	#NGX_HTTP_NOT_IMPLEMENTED
 501

	)

130 
	#NGX_HTTP_BAD_GATEWAY
 502

	)

131 
	#NGX_HTTP_SERVICE_UNAVAILABLE
 503

	)

132 
	#NGX_HTTP_GATEWAY_TIME_OUT
 504

	)

133 
	#NGX_HTTP_INSUFFICIENT_STORAGE
 507

	)

136 
	#NGX_HTTP_LOWLEVEL_BUFFERED
 0xf0

	)

137 
	#NGX_HTTP_WRITE_BUFFERED
 0x10

	)

138 
	#NGX_HTTP_GZIP_BUFFERED
 0x20

	)

139 
	#NGX_HTTP_SSI_BUFFERED
 0x01

	)

140 
	#NGX_HTTP_SUB_BUFFERED
 0x02

	)

141 
	#NGX_HTTP_COPY_BUFFERED
 0x04

	)

145 
	mNGX_HTTP_INITING_REQUEST_STATE
 = 0,

146 
	mNGX_HTTP_READING_REQUEST_STATE
,

147 
	mNGX_HTTP_PROCESS_REQUEST_STATE
,

149 
	mNGX_HTTP_CONNECT_UPSTREAM_STATE
,

150 
	mNGX_HTTP_WRITING_UPSTREAM_STATE
,

151 
	mNGX_HTTP_READING_UPSTREAM_STATE
,

153 
	mNGX_HTTP_WRITING_REQUEST_STATE
,

154 
	mNGX_HTTP_LINGERING_CLOSE_STATE
,

155 
	mNGX_HTTP_KEEPALIVE_STATE


156 } 
	tngx_hâp_°©e_e
;

160 
ngx_°r_t
 
	m«me
;

161 
ngx_uöt_t
 
	moff£t
;

162 
ngx_hâp_hódî_h™dÀr_±
 
	mh™dÀr
;

163 } 
	tngx_hâp_hódî_t
;

167 
ngx_°r_t
 
	m«me
;

168 
ngx_uöt_t
 
	moff£t
;

169 } 
	tngx_hâp_hódî_out_t
;

173 
ngx_li°_t
 
	mhódîs
;

175 
ngx_èbÀ_ñt_t
 *
	mho°
;

176 
ngx_èbÀ_ñt_t
 *
	mc⁄√˘i⁄
;

177 
ngx_èbÀ_ñt_t
 *
	mif_modifõd_sö˚
;

178 
ngx_èbÀ_ñt_t
 *
	mif_unmodifõd_sö˚
;

179 
ngx_èbÀ_ñt_t
 *
	mif_m©ch
;

180 
ngx_èbÀ_ñt_t
 *
	mif_n⁄e_m©ch
;

181 
ngx_èbÀ_ñt_t
 *
	mu£r_agít
;

182 
ngx_èbÀ_ñt_t
 *
	mª„ªr
;

183 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

184 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ty≥
;

186 
ngx_èbÀ_ñt_t
 *
	mønge
;

187 
ngx_èbÀ_ñt_t
 *
	mif_ønge
;

189 
ngx_èbÀ_ñt_t
 *
	må™s„r_ícodög
;

190 
ngx_èbÀ_ñt_t
 *
	mex≥˘
;

191 
ngx_èbÀ_ñt_t
 *
	mupgøde
;

193 #i‡(
NGX_HTTP_GZIP
)

194 
ngx_èbÀ_ñt_t
 *
	mac˚±_ícodög
;

195 
ngx_èbÀ_ñt_t
 *
	mvü
;

198 
ngx_èbÀ_ñt_t
 *
	mauth‹iz©i⁄
;

200 
ngx_èbÀ_ñt_t
 *
	mkìp_Æive
;

202 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

203 
ngx_¨øy_t
 
	mx_f‹w¨ded_f‹
;

206 #i‡(
NGX_HTTP_REALIP
)

207 
ngx_èbÀ_ñt_t
 *
	mx_ªÆ_ù
;

210 #i‡(
NGX_HTTP_HEADERS
)

211 
ngx_èbÀ_ñt_t
 *
	mac˚±
;

212 
ngx_èbÀ_ñt_t
 *
	mac˚±_œnguage
;

215 #i‡(
NGX_HTTP_DAV
)

216 
ngx_èbÀ_ñt_t
 *
	mdïth
;

217 
ngx_èbÀ_ñt_t
 *
	mde°ö©i⁄
;

218 
ngx_èbÀ_ñt_t
 *
	movîwrôe
;

219 
ngx_èbÀ_ñt_t
 *
	md©e
;

222 
ngx_°r_t
 
	mu£r
;

223 
ngx_°r_t
 
	m∑sswd
;

225 
ngx_¨øy_t
 
	mcookõs
;

227 
ngx_°r_t
 
	m£rvî
;

228 
off_t
 
	mc⁄ã¡_Àngth_n
;

229 
time_t
 
	mkìp_Æive_n
;

231 
	mc⁄√˘i⁄_ty≥
:2;

232 
	mchunked
:1;

233 
	mmsõ
:1;

234 
	mmsõ6
:1;

235 
	m›îa
:1;

236 
	mgecko
:1;

237 
	mchrome
:1;

238 
	mßÁri
:1;

239 
	mk⁄quî‹
:1;

240 } 
	tngx_hâp_hódîs_ö_t
;

244 
ngx_li°_t
 
	mhódîs
;

246 
ngx_uöt_t
 
	m°©us
;

247 
ngx_°r_t
 
	m°©us_löe
;

249 
ngx_èbÀ_ñt_t
 *
	m£rvî
;

250 
ngx_èbÀ_ñt_t
 *
	md©e
;

251 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_Àngth
;

252 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ícodög
;

253 
ngx_èbÀ_ñt_t
 *
	mloˇti⁄
;

254 
ngx_èbÀ_ñt_t
 *
	mª‰esh
;

255 
ngx_èbÀ_ñt_t
 *
	mœ°_modifõd
;

256 
ngx_èbÀ_ñt_t
 *
	mc⁄ã¡_ønge
;

257 
ngx_èbÀ_ñt_t
 *
	mac˚±_ønges
;

258 
ngx_èbÀ_ñt_t
 *
	mwww_authítiˇã
;

259 
ngx_èbÀ_ñt_t
 *
	mexpúes
;

260 
ngx_èbÀ_ñt_t
 *
	mëag
;

262 
ngx_°r_t
 *
	movîride_ch¨£t
;

264 
size_t
 
	mc⁄ã¡_ty≥_Àn
;

265 
ngx_°r_t
 
	mc⁄ã¡_ty≥
;

266 
ngx_°r_t
 
	mch¨£t
;

267 
u_ch¨
 *
	mc⁄ã¡_ty≥_lowˇ£
;

268 
ngx_uöt_t
 
	mc⁄ã¡_ty≥_hash
;

270 
ngx_¨øy_t
 
	mˇche_c⁄åﬁ
;

272 
off_t
 
	mc⁄ã¡_Àngth_n
;

273 
time_t
 
	md©e_time
;

274 
time_t
 
	mœ°_modifõd_time
;

275 } 
	tngx_hâp_hódîs_out_t
;

278 (*
	tngx_hâp_˛õ¡_body_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

281 
ngx_ãmp_fûe_t
 *
ãmp_fûe
;

282 
ngx_chaö_t
 *
bufs
;

283 
ngx_buf_t
 *
buf
;

284 
off_t
 
ª°
;

285 
ngx_chaö_t
 *
‰ì
;

286 
ngx_chaö_t
 *
busy
;

287 
ngx_hâp_chunked_t
 *
chunked
;

288 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
;

289 } 
	tngx_hâp_ªque°_body_t
;

292 
ngx_hâp_addr_c⁄f_s
 
	tngx_hâp_addr_c⁄f_t
;

295 
ngx_hâp_addr_c⁄f_t
 *
addr_c⁄f
;

296 
ngx_hâp_c⁄f_˘x_t
 *
c⁄f_˘x
;

298 #ifde‡
SSL_CTRL_SET_TLSEXT_HOSTNAME


299 
ngx_°r_t
 *
s¶_£rvî«me
;

300 #i‡(
NGX_PCRE
)

301 
ngx_hâp_ªgex_t
 *
s¶_£rvî«me_ªgex
;

305 
ngx_buf_t
 **
busy
;

306 
ngx_öt_t
 
nbusy
;

308 
ngx_buf_t
 **
‰ì
;

309 
ngx_öt_t
 
n‰ì
;

311 #i‡(
NGX_HTTP_SSL
)

312 
ngx_uöt_t
 
s¶
;

314 } 
	tngx_hâp_c⁄√˘i⁄_t
;

317 (*
	tngx_hâp_˛ónup_±
)(*
	td©a
);

319 
ngx_hâp_˛ónup_s
 
	tngx_hâp_˛ónup_t
;

321 
	sngx_hâp_˛ónup_s
 {

322 
ngx_hâp_˛ónup_±
 
h™dÀr
;

323 *
d©a
;

324 
ngx_hâp_˛ónup_t
 *
√xt
;

328 
	$ngx_öt_t
 (*
	tngx_hâp_po°_subªque°_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

329 *
	td©a
, 
	tngx_öt_t
 
	trc
);

332 
ngx_hâp_po°_subªque°_±
 
h™dÀr
;

333 *
d©a
;

334 } 
	tngx_hâp_po°_subªque°_t
;

337 
ngx_hâp_po°p⁄ed_ªque°_s
 
	tngx_hâp_po°p⁄ed_ªque°_t
;

339 
	sngx_hâp_po°p⁄ed_ªque°_s
 {

340 
ngx_hâp_ªque°_t
 *
ªque°
;

341 
ngx_chaö_t
 *
out
;

342 
ngx_hâp_po°p⁄ed_ªque°_t
 *
√xt
;

346 
ngx_hâp_po°ed_ªque°_s
 
	tngx_hâp_po°ed_ªque°_t
;

348 
	sngx_hâp_po°ed_ªque°_s
 {

349 
ngx_hâp_ªque°_t
 *
ªque°
;

350 
ngx_hâp_po°ed_ªque°_t
 *
√xt
;

354 
	$ngx_öt_t
 (*
	tngx_hâp_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

355 (*
	tngx_hâp_evít_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
);

358 
	sngx_hâp_ªque°_s
 {

359 
uöt32_t
 
sig«tuª
;

361 
ngx_c⁄√˘i⁄_t
 *
c⁄√˘i⁄
;

363 **
˘x
;

364 **
maö_c⁄f
;

365 **
§v_c⁄f
;

366 **
loc_c⁄f
;

368 
ngx_hâp_evít_h™dÀr_±
 
ªad_evít_h™dÀr
;

369 
ngx_hâp_evít_h™dÀr_±
 
wrôe_evít_h™dÀr
;

371 #i‡(
NGX_HTTP_CACHE
)

372 
ngx_hâp_ˇche_t
 *
ˇche
;

375 
ngx_hâp_up°ªam_t
 *
up°ªam
;

376 
ngx_¨øy_t
 *
up°ªam_°©es
;

379 
ngx_poﬁ_t
 *
poﬁ
;

380 
ngx_buf_t
 *
hódî_ö
;

382 
ngx_hâp_hódîs_ö_t
 
hódîs_ö
;

383 
ngx_hâp_hódîs_out_t
 
hódîs_out
;

385 
ngx_hâp_ªque°_body_t
 *
ªque°_body
;

387 
time_t
 
lögîög_time
;

388 
time_t
 
°¨t_£c
;

389 
ngx_m£c_t
 
°¨t_m£c
;

391 
ngx_uöt_t
 
mëhod
;

392 
ngx_uöt_t
 
hâp_vîsi⁄
;

394 
ngx_°r_t
 
ªque°_löe
;

395 
ngx_°r_t
 
uri
;

396 
ngx_°r_t
 
¨gs
;

397 
ngx_°r_t
 
exãn
;

398 
ngx_°r_t
 
u≈¨£d_uri
;

400 
ngx_°r_t
 
mëhod_«me
;

401 
ngx_°r_t
 
hâp_¥Ÿocﬁ
;

403 
ngx_chaö_t
 *
out
;

404 
ngx_hâp_ªque°_t
 *
maö
;

405 
ngx_hâp_ªque°_t
 *
∑ª¡
;

406 
ngx_hâp_po°p⁄ed_ªque°_t
 *
po°p⁄ed
;

407 
ngx_hâp_po°_subªque°_t
 *
po°_subªque°
;

408 
ngx_hâp_po°ed_ªque°_t
 *
po°ed_ªque°s
;

410 
ngx_öt_t
 
pha£_h™dÀr
;

411 
ngx_hâp_h™dÀr_±
 
c⁄ã¡_h™dÀr
;

412 
ngx_uöt_t
 
ac˚ss_code
;

414 
ngx_hâp_v¨übÀ_vÆue_t
 *
v¨übÀs
;

416 #i‡(
NGX_PCRE
)

417 
ngx_uöt_t
 
nˇ±uªs
;

418 *
ˇ±uªs
;

419 
u_ch¨
 *
ˇ±uªs_d©a
;

422 
size_t
 
limô_øã
;

425 
size_t
 
hódî_size
;

427 
off_t
 
ªque°_Àngth
;

429 
ngx_uöt_t
 
îr_°©us
;

431 
ngx_hâp_c⁄√˘i⁄_t
 *
hâp_c⁄√˘i⁄
;

432 #i‡(
NGX_HTTP_SPDY
)

433 
ngx_hâp_•dy_°ªam_t
 *
•dy_°ªam
;

436 
ngx_hâp_log_h™dÀr_±
 
log_h™dÀr
;

438 
ngx_hâp_˛ónup_t
 *
˛ónup
;

440 
subªque°s
:8;

441 
cou¡
:8;

442 
blocked
:8;

444 
aio
:1;

446 
hâp_°©e
:4;

449 
com∂ex_uri
:1;

452 
quŸed_uri
:1;

455 
∂us_ö_uri
:1;

458 
•a˚_ö_uri
:1;

460 
övÆid_hódî
:1;

462 
add_uri_to_Æüs
:1;

463 
vÆid_loˇti⁄
:1;

464 
vÆid_u≈¨£d_uri
:1;

465 
uri_ch™ged
:1;

466 
uri_ch™ges
:4;

468 
ªque°_body_ö_sögÀ_buf
:1;

469 
ªque°_body_ö_fûe_⁄ly
:1;

470 
ªque°_body_ö_≥rsi°ít_fûe
:1;

471 
ªque°_body_ö_˛ón_fûe
:1;

472 
ªque°_body_fûe_group_ac˚ss
:1;

473 
ªque°_body_fûe_log_Àvñ
:3;

475 
subªque°_ö_mem‹y
:1;

476 
waôed
:1;

478 #i‡(
NGX_HTTP_CACHE
)

479 
ˇched
:1;

482 #i‡(
NGX_HTTP_GZIP
)

483 
gzù_ã°ed
:1;

484 
gzù_ok
:1;

485 
gzù_v¨y
:1;

488 
¥oxy
:1;

489 
by∑ss_ˇche
:1;

490 
no_ˇche
:1;

497 
limô_c⁄n_£t
:1;

498 
limô_ªq_£t
:1;

501 
ˇchóbÀ
:1;

504 
pùñöe
:1;

505 
chunked
:1;

506 
hódî_⁄ly
:1;

507 
kì∑live
:1;

508 
lögîög_˛o£
:1;

509 
disˇrd_body
:1;

510 
öã∫Æ
:1;

511 
îr‹_∑ge
:1;

512 
ign‹e_c⁄ã¡_ícodög
:1;

513 
fûãr_föÆize
:1;

514 
po°_a˘i⁄
:1;

515 
ªque°_com∂ëe
:1;

516 
ªque°_ouçut
:1;

517 
hódî_£¡
:1;

518 
ex≥˘_ã°ed
:1;

519 
roŸ_ã°ed
:1;

520 
d⁄e
:1;

521 
logged
:1;

523 
buf„ªd
:4;

525 
maö_fûãr_√ed_ö_mem‹y
:1;

526 
fûãr_√ed_ö_mem‹y
:1;

527 
fûãr_√ed_ãmp‹¨y
:1;

528 
Ælow_ønges
:1;

530 #i‡(
NGX_STAT_STUB
)

531 
°©_ªadög
:1;

532 
°©_wrôög
:1;

537 
ngx_uöt_t
 
°©e
;

539 
ngx_uöt_t
 
hódî_hash
;

540 
ngx_uöt_t
 
lowˇ£_ödex
;

541 
u_ch¨
 
lowˇ£_hódî
[
NGX_HTTP_LC_HEADER_LEN
];

543 
u_ch¨
 *
hódî_«me_°¨t
;

544 
u_ch¨
 *
hódî_«me_íd
;

545 
u_ch¨
 *
hódî_°¨t
;

546 
u_ch¨
 *
hódî_íd
;

553 
u_ch¨
 *
uri_°¨t
;

554 
u_ch¨
 *
uri_íd
;

555 
u_ch¨
 *
uri_ext
;

556 
u_ch¨
 *
¨gs_°¨t
;

557 
u_ch¨
 *
ªque°_°¨t
;

558 
u_ch¨
 *
ªque°_íd
;

559 
u_ch¨
 *
mëhod_íd
;

560 
u_ch¨
 *
schema_°¨t
;

561 
u_ch¨
 *
schema_íd
;

562 
u_ch¨
 *
ho°_°¨t
;

563 
u_ch¨
 *
ho°_íd
;

564 
u_ch¨
 *
p‹t_°¨t
;

565 
u_ch¨
 *
p‹t_íd
;

567 
hâp_mö‹
:16;

568 
hâp_maj‹
:16;

573 
ngx_hâp_po°ed_ªque°_t
 
ãrmöÆ_po°ed_ªque°
;

574 #i‡(
NGX_HAVE_AIO_SENDFILE
)

575 
u_ch¨
 
aio_¥ñﬂd
;

577 } 
	tngx_hâp_ïhemîÆ_t
;

580 
ngx_hâp_hódî_t
 
ngx_hâp_hódîs_ö
[];

581 
ngx_hâp_hódî_out_t
 
ngx_hâp_hódîs_out
[];

584 
	#ngx_hâp_£t_c⁄√˘i⁄_log
(
c
, 
l
) \

586 
c
->
log
->
fûe
 = 
l
->file; \

587 i‡(!(
c
->
log
->
log_Àvñ
 & 
NGX_LOG_DEBUG_CONNECTION
)) { \

588 
c
->
log
->
log_Àvñ
 = 
l
->log_level; \

589 
	}

	)
}

	@src/http/ngx_http_request_body.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
);

14 
ngx_öt_t
 
ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

15 
ngx_öt_t
 
ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

16 
ngx_öt_t
 
ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

17 
ngx_öt_t
 
ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

18 
ngx_buf_t
 *
b
);

19 
ngx_öt_t
 
ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
);

21 
ngx_öt_t
 
ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

22 
ngx_chaö_t
 *
ö
);

23 
ngx_öt_t
 
ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

24 
ngx_chaö_t
 *
ö
);

25 
ngx_öt_t
 
ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_chaö_t
 *
ö
);

27 
ngx_öt_t
 
ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_chaö_t
 *
ö
);

31 
ngx_öt_t


32 
	$ngx_hâp_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

35 
size_t
 
¥îód
;

36 
ssize_t
 
size
;

37 
ngx_öt_t
 
rc
;

38 
ngx_buf_t
 *
b
;

39 
ngx_chaö_t
 
out
, *
˛
;

40 
ngx_hâp_ªque°_body_t
 *
rb
;

41 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

43 
r
->
maö
->
cou¡
++;

45 #i‡(
NGX_HTTP_SPDY
)

46 i‡(
r
->
•dy_°ªam
) {

47 
rc
 = 
	`ngx_hâp_•dy_ªad_ªque°_body
(
r
, 
po°_h™dÀr
);

48 
d⁄e
;

52 i‡(
r
 !r->
maö
 ||Ñ->
ªque°_body
 ||Ñ->
disˇrd_body
) {

53 
	`po°_h™dÀr
(
r
);

54  
NGX_OK
;

57 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

58 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

59 
d⁄e
;

62 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

63 i‡(
rb
 =
NULL
) {

64 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

65 
d⁄e
;

78 
rb
->
ª°
 = -1;

79 
rb
->
po°_h™dÀr
 =Öost_handler;

81 
r
->
ªque°_body
 = 
rb
;

83 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0 && !r->hódîs_ö.
chunked
) {

84 
	`po°_h™dÀr
(
r
);

85  
NGX_OK
;

88 
¥îód
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

90 i‡(
¥îód
) {

94 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

95 "hâ∞˛õ¡Ñeque° bodyÖªªad %uz", 
¥îód
);

97 
out
.
buf
 = 
r
->
hódî_ö
;

98 
out
.
√xt
 = 
NULL
;

100 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

102 i‡(
rc
 !
NGX_OK
) {

103 
d⁄e
;

106 
r
->
ªque°_Àngth
 +
¥îód
 - (r->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
);

108 i‡(!
r
->
hódîs_ö
.
chunked


109 && 
rb
->
ª°
 > 0

110 && 
rb
->
ª°
 <(
off_t
Ë(
r
->
hódî_ö
->
íd
 -Ñ->hódî_ö->
œ°
))

114 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

115 i‡(
b
 =
NULL
) {

116 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

117 
d⁄e
;

120 
b
->
ãmp‹¨y
 = 1;

121 
b
->
°¨t
 = 
r
->
hódî_ö
->
pos
;

122 
b
->
pos
 = 
r
->
hódî_ö
->pos;

123 
b
->
œ°
 = 
r
->
hódî_ö
->last;

124 
b
->
íd
 = 
r
->
hódî_ö
->end;

126 
rb
->
buf
 = 
b
;

128 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

129 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

131 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

132 
d⁄e
;

138 i‡(
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
Ë!
NGX_OK
) {

139 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

140 
d⁄e
;

144 i‡(
rb
->
ª°
 == 0) {

147 i‡(
r
->
ªque°_body_ö_fûe_⁄ly
) {

148 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

149 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

150 
d⁄e
;

153 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

154 i‡(
˛
 =
NULL
) {

155  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

158 
b
 = 
˛
->
buf
;

160 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

162 
b
->
ö_fûe
 = 1;

163 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

164 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

166 
rb
->
bufs
 = 
˛
;

169 
	`po°_h™dÀr
(
r
);

171  
NGX_OK
;

174 i‡(
rb
->
ª°
 < 0) {

175 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

177 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

178 
d⁄e
;

181 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

183 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

184 
size
 += size >> 2;

188 i‡(!
r
->
hódîs_ö
.
chunked
 && 
rb
->
ª°
 < 
size
) {

189 
size
 = (
ssize_t
Ë
rb
->
ª°
;

191 i‡(
r
->
ªque°_body_ö_sögÀ_buf
) {

192 
size
 +
¥îód
;

196 
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

199 
rb
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

200 i‡(
rb
->
buf
 =
NULL
) {

201 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

202 
d⁄e
;

205 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
;

206 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

208 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

210 
d⁄e
:

212 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

213 
r
->
maö
->
cou¡
--;

216  
rc
;

217 
	}
}

221 
	$ngx_hâp_ªad_˛õ¡_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

223 
ngx_öt_t
 
rc
;

225 i‡(
r
->
c⁄√˘i⁄
->
ªad
->
timedout
) {

226 
r
->
c⁄√˘i⁄
->
timedout
 = 1;

227 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_REQUEST_TIME_OUT
);

231 
rc
 = 
	`ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
r
);

233 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

234 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

236 
	}
}

239 
ngx_öt_t


240 
	$ngx_hâp_do_ªad_˛õ¡_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

242 
off_t
 
ª°
;

243 
size_t
 
size
;

244 
ssize_t
 
n
;

245 
ngx_öt_t
 
rc
;

246 
ngx_buf_t
 *
b
;

247 
ngx_chaö_t
 *
˛
, 
out
;

248 
ngx_c⁄√˘i⁄_t
 *
c
;

249 
ngx_hâp_ªque°_body_t
 *
rb
;

250 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

252 
c
 = 
r
->
c⁄√˘i⁄
;

253 
rb
 = 
r
->
ªque°_body
;

255 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

260 i‡(
rb
->
buf
->
œ°
 =rb->buf->
íd
) {

264 
out
.
buf
 = 
rb
->buf;

265 
out
.
√xt
 = 
NULL
;

267 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

269 i‡(
rc
 !
NGX_OK
) {

270  
rc
;

275 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

276  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

281 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, 
NULL
);

283 i‡(
rc
 !
NGX_OK
) {

284  
rc
;

287 i‡(
rb
->
busy
 !
NULL
) {

288  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

291 
rb
->
buf
->
pos
 =Ñb->buf->
°¨t
;

292 
rb
->
buf
->
œ°
 =Ñb->buf->
°¨t
;

295 
size
 = 
rb
->
buf
->
íd
 -Ñb->buf->
œ°
;

296 
ª°
 = 
rb
->ª° - (rb->
buf
->
œ°
 -Ñb->buf->
pos
);

298 i‡((
off_t
Ë
size
 > 
ª°
) {

299 
size
 = (
size_t
Ë
ª°
;

302 
n
 = 
c
->
	`ªcv
(c, 
rb
->
buf
->
œ°
, 
size
);

304 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

305 "hâ∞˛õ¡Ñeque° bodyÑecv %z", 
n
);

307 i‡(
n
 =
NGX_AGAIN
) {

311 i‡(
n
 == 0) {

312 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

316 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

317 
c
->
îr‹
 = 1;

318  
NGX_HTTP_BAD_REQUEST
;

321 
rb
->
buf
->
œ°
 +
n
;

322 
r
->
ªque°_Àngth
 +
n
;

324 i‡(
n
 =
ª°
) {

327 
out
.
buf
 = 
rb
->buf;

328 
out
.
√xt
 = 
NULL
;

330 
rc
 = 
	`ngx_hâp_ªque°_body_fûãr
(
r
, &
out
);

332 i‡(
rc
 !
NGX_OK
) {

333  
rc
;

337 i‡(
rb
->
ª°
 == 0) {

341 i‡(
rb
->
buf
->
œ°
 <Ñb->buf->
íd
) {

346 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

347 "hâ∞˛õ¡Ñeque° bodyÑe° %O", 
rb
->
ª°
);

349 i‡(
rb
->
ª°
 == 0) {

353 i‡(!
c
->
ªad
->
ªady
) {

354 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

355 
	`ngx_add_timî
(
c
->
ªad
, 
˛cf
->
˛õ¡_body_timeout
);

357 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

358  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

361  
NGX_AGAIN
;

365 i‡(
c
->
ªad
->
timî_£t
) {

366 
	`ngx_dñ_timî
(
c
->
ªad
);

369 i‡(
rb
->
ãmp_fûe
 || 
r
->
ªque°_body_ö_fûe_⁄ly
) {

373 i‡(
	`ngx_hâp_wrôe_ªque°_body
(
r
Ë!
NGX_OK
) {

374  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

377 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

378 i‡(
˛
 =
NULL
) {

379  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

382 
b
 = 
˛
->
buf
;

384 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

386 
b
->
ö_fûe
 = 1;

387 
b
->
fûe_œ°
 = 
rb
->
ãmp_fûe
->
fûe
.
off£t
;

388 
b
->
fûe
 = &
rb
->
ãmp_fûe
->file;

390 
rb
->
bufs
 = 
˛
;

393 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

395 
rb
->
	`po°_h™dÀr
(
r
);

397  
NGX_OK
;

398 
	}
}

401 
ngx_öt_t


402 
	$ngx_hâp_wrôe_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

404 
ssize_t
 
n
;

405 
ngx_chaö_t
 *
˛
;

406 
ngx_ãmp_fûe_t
 *
tf
;

407 
ngx_hâp_ªque°_body_t
 *
rb
;

408 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

410 
rb
 = 
r
->
ªque°_body
;

412 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

413 "hâ∞wrôê˛õ¡Ñeque° body, buf†%p", 
rb
->
bufs
);

415 i‡(
rb
->
ãmp_fûe
 =
NULL
) {

416 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

417 i‡(
tf
 =
NULL
) {

418  
NGX_ERROR
;

421 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

423 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

424 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

425 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

426 
tf
->
poﬁ
 = 
r
->pool;

427 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

428 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

429 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

430 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

432 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

433 
tf
->
ac˚ss
 = 0660;

436 
rb
->
ãmp_fûe
 = 
tf
;

438 i‡(
rb
->
bufs
 =
NULL
) {

441 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

442 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

443 !
NGX_OK
)

445  
NGX_ERROR
;

448  
NGX_OK
;

452 i‡(
rb
->
bufs
 =
NULL
) {

453  
NGX_OK
;

456 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
rb
->
ãmp_fûe
,Ñb->
bufs
);

460 i‡(
n
 =
NGX_ERROR
) {

461  
NGX_ERROR
;

464 
rb
->
ãmp_fûe
->
off£t
 +
n
;

468 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

469 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

472 
rb
->
bufs
 = 
NULL
;

474  
NGX_OK
;

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_disˇrd_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

481 
ssize_t
 
size
;

482 
ngx_öt_t
 
rc
;

483 
ngx_evít_t
 *
ªv
;

485 #i‡(
NGX_HTTP_SPDY
)

486 i‡(
r
->
•dy_°ªam
 &&Ñ =r->
maö
) {

487 
r
->
•dy_°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_DISCARD
;

488  
NGX_OK
;

492 i‡(
r
 !r->
maö
 ||Ñ->
disˇrd_body
 ||Ñ->
ªque°_body
) {

493  
NGX_OK
;

496 i‡(
	`ngx_hâp_ã°_ex≥˘
(
r
Ë!
NGX_OK
) {

497  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

500 
ªv
 = 
r
->
c⁄√˘i⁄
->
ªad
;

502 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
ªv
->
log
, 0, "http set discard body");

504 i‡(
ªv
->
timî_£t
) {

505 
	`ngx_dñ_timî
(
ªv
);

508 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 <0 && !r->hódîs_ö.
chunked
) {

509  
NGX_OK
;

512 
size
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

514 i‡(
size
 || 
r
->
hódîs_ö
.
chunked
) {

515 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
,Ñ->
hódî_ö
);

517 i‡(
rc
 !
NGX_OK
) {

518  
rc
;

521 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

522  
NGX_OK
;

526 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

528 i‡(
rc
 =
NGX_OK
) {

529 
r
->
lögîög_˛o£
 = 0;

530  
NGX_OK
;

533 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

534  
rc
;

539 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_disˇrded_ªque°_body_h™dÀr
;

541 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

542  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

545 
r
->
cou¡
++;

546 
r
->
disˇrd_body
 = 1;

548  
NGX_OK
;

549 
	}
}

553 
	$ngx_hâp_disˇrded_ªque°_body_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
)

555 
ngx_öt_t
 
rc
;

556 
ngx_m£c_t
 
timî
;

557 
ngx_evít_t
 *
ªv
;

558 
ngx_c⁄√˘i⁄_t
 *
c
;

559 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

561 
c
 = 
r
->
c⁄√˘i⁄
;

562 
ªv
 = 
c
->
ªad
;

564 i‡(
ªv
->
timedout
) {

565 
c
->
timedout
 = 1;

566 
c
->
îr‹
 = 1;

567 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

571 i‡(
r
->
lögîög_time
) {

572 
timî
 = (
ngx_m£c_t
Ë(
r
->
lögîög_time
 - 
	`ngx_time
());

574 i‡(
timî
 <= 0) {

575 
r
->
disˇrd_body
 = 0;

576 
r
->
lögîög_˛o£
 = 0;

577 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

582 
timî
 = 0;

585 
rc
 = 
	`ngx_hâp_ªad_disˇrded_ªque°_body
(
r
);

587 i‡(
rc
 =
NGX_OK
) {

588 
r
->
disˇrd_body
 = 0;

589 
r
->
lögîög_˛o£
 = 0;

590 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

594 i‡(
rc
 >
NGX_HTTP_SPECIAL_RESPONSE
) {

595 
c
->
îr‹
 = 1;

596 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

602 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

603 
c
->
îr‹
 = 1;

604 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_ERROR
);

608 i‡(
timî
) {

610 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

612 
timî
 *= 1000;

614 i‡(
timî
 > 
˛cf
->
lögîög_timeout
) {

615 
timî
 = 
˛cf
->
lögîög_timeout
;

618 
	`ngx_add_timî
(
ªv
, 
timî
);

620 
	}
}

623 
ngx_öt_t


624 
	$ngx_hâp_ªad_disˇrded_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

626 
size_t
 
size
;

627 
ssize_t
 
n
;

628 
ngx_öt_t
 
rc
;

629 
ngx_buf_t
 
b
;

630 
u_ch¨
 
buf„r
[
NGX_HTTP_DISCARD_BUFFER_SIZE
];

632 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

635 
	`ngx_memzîo
(&
b
, (
ngx_buf_t
));

637 
b
.
ãmp‹¨y
 = 1;

640 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == 0) {

641 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_block_ªadög
;

642  
NGX_OK
;

645 i‡(!
r
->
c⁄√˘i⁄
->
ªad
->
ªady
) {

646  
NGX_AGAIN
;

649 
size
 = (
size_t
Ë
	`ngx_mö
(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
,

650 
NGX_HTTP_DISCARD_BUFFER_SIZE
);

652 
n
 = 
r
->
c⁄√˘i⁄
->
	`ªcv
‘->c⁄√˘i⁄, 
buf„r
, 
size
);

654 i‡(
n
 =
NGX_ERROR
) {

655 
r
->
c⁄√˘i⁄
->
îr‹
 = 1;

656  
NGX_OK
;

659 i‡(
n
 =
NGX_AGAIN
) {

660  
NGX_AGAIN
;

663 i‡(
n
 == 0) {

664  
NGX_OK
;

667 
b
.
pos
 = 
buf„r
;

668 
b
.
œ°
 = 
buf„r
 + 
n
;

670 
rc
 = 
	`ngx_hâp_disˇrd_ªque°_body_fûãr
(
r
, &
b
);

672 i‡(
rc
 !
NGX_OK
) {

673  
rc
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_disˇrd_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_buf_t
 *
b
)

682 
size_t
 
size
;

683 
ngx_öt_t
 
rc
;

684 
ngx_hâp_ªque°_body_t
 *
rb
;

686 i‡(
r
->
hódîs_ö
.
chunked
) {

688 
rb
 = 
r
->
ªque°_body
;

690 i‡(
rb
 =
NULL
) {

692 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

693 i‡(
rb
 =
NULL
) {

694  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

697 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

698 i‡(
rb
->
chunked
 =
NULL
) {

699  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

702 
r
->
ªque°_body
 = 
rb
;

707 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
b
, 
rb
->
chunked
);

709 i‡(
rc
 =
NGX_OK
) {

713 
size
 = 
b
->
œ°
 - b->
pos
;

715 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

716 
b
->
pos
 +
rb
->
chunked
->
size
;

717 
rb
->
chunked
->
size
 = 0;

720 
rb
->
chunked
->
size
 -= size;

721 
b
->
pos
 = b->
œ°
;

727 i‡(
rc
 =
NGX_DONE
) {

731 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

735 i‡(
rc
 =
NGX_AGAIN
) {

739 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
chunked
->
Àngth
;

745 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

748  
NGX_HTTP_BAD_REQUEST
;

752 
size
 = 
b
->
œ°
 - b->
pos
;

754 i‡((
off_t
Ë
size
 > 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) {

755 
b
->
pos
 +
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

756 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

759 
b
->
pos
 = b->
œ°
;

760 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 -
size
;

764  
NGX_OK
;

765 
	}
}

768 
ngx_öt_t


769 
	$ngx_hâp_ã°_ex≥˘
(
ngx_hâp_ªque°_t
 *
r
)

771 
ngx_öt_t
 
n
;

772 
ngx_°r_t
 *
ex≥˘
;

774 i‡(
r
->
ex≥˘_ã°ed


775 || 
r
->
hódîs_ö
.
ex≥˘
 =
NULL


776 || 
r
->
hâp_vîsi⁄
 < 
NGX_HTTP_VERSION_11
)

778  
NGX_OK
;

781 
r
->
ex≥˘_ã°ed
 = 1;

783 
ex≥˘
 = &
r
->
hódîs_ö
.ex≥˘->
vÆue
;

785 i‡(
ex≥˘
->
Àn
 != ("100-continue") - 1

786 || 
	`ngx_°∫ˇ£cmp
(
ex≥˘
->
d©a
, (
u_ch¨
 *) "100-continue",

790  
NGX_OK
;

793 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

796 
n
 = 
r
->
c⁄√˘i⁄
->
	`£nd
(r->connection,

797 (
u_ch¨
 *Ë"HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF,

798 ("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1);

800 i‡(
n
 =("HTTP/1.1 100 C⁄töue" 
CRLF
 CRLF) - 1) {

801  
NGX_OK
;

806  
NGX_ERROR
;

807 
	}
}

810 
ngx_öt_t


811 
	$ngx_hâp_ªque°_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

813 i‡(
r
->
hódîs_ö
.
chunked
) {

814  
	`ngx_hâp_ªque°_body_chunked_fûãr
(
r
, 
ö
);

817  
	`ngx_hâp_ªque°_body_Àngth_fûãr
(
r
, 
ö
);

819 
	}
}

822 
ngx_öt_t


823 
	$ngx_hâp_ªque°_body_Àngth_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

825 
size_t
 
size
;

826 
ngx_öt_t
 
rc
;

827 
ngx_buf_t
 *
b
;

828 
ngx_chaö_t
 *
˛
, *
é
, *
out
, **
Œ
;

829 
ngx_hâp_ªque°_body_t
 *
rb
;

831 
rb
 = 
r
->
ªque°_body
;

833 i‡(
rb
->
ª°
 == -1) {

834 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

837 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

840 
out
 = 
NULL
;

841 
Œ
 = &
out
;

843 
˛
 = 
ö
; cl; c»˛->
√xt
) {

845 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

846 i‡(
é
 =
NULL
) {

847  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

850 
b
 = 
é
->
buf
;

852 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

854 
b
->
ãmp‹¨y
 = 1;

855 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

856 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

857 
b
->
pos
 = 
˛
->
buf
->pos;

858 
b
->
œ°
 = 
˛
->
buf
->last;

859 
b
->
íd
 = 
˛
->
buf
->end;

861 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

863 i‡((
off_t
Ë
size
 < 
rb
->
ª°
) {

864 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

865 
rb
->
ª°
 -
size
;

868 
˛
->
buf
->
pos
 +
rb
->
ª°
;

869 
rb
->
ª°
 = 0;

870 
b
->
œ°
 = 
˛
->
buf
->
pos
;

871 
b
->
œ°_buf
 = 1;

874 *
Œ
 = 
é
;

875 
Œ
 = &
é
->
√xt
;

878 
rc
 = 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
r
, 
out
);

880 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

881 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

883  
rc
;

884 
	}
}

887 
ngx_öt_t


888 
	$ngx_hâp_ªque°_body_chunked_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

890 
size_t
 
size
;

891 
ngx_öt_t
 
rc
;

892 
ngx_buf_t
 *
b
;

893 
ngx_chaö_t
 *
˛
, *
out
, *
é
, **
Œ
;

894 
ngx_hâp_ªque°_body_t
 *
rb
;

895 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

897 
rb
 = 
r
->
ªque°_body
;

899 i‡(
rb
->
ª°
 == -1) {

901 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

904 
rb
->
chunked
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_chunked_t
));

905 i‡(
rb
->
chunked
 =
NULL
) {

906  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

909 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 0;

910 
rb
->
ª°
 = 3;

913 
out
 = 
NULL
;

914 
Œ
 = &
out
;

916 
˛
 = 
ö
; cl; c»˛->
√xt
) {

920 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

923 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

924 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

925 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

926 
˛
->
buf
->
fûe_pos
,

927 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

929 
rc
 = 
	`ngx_hâp_∑r£_chunked
(
r
, 
˛
->
buf
, 
rb
->
chunked
);

931 i‡(
rc
 =
NGX_OK
) {

935 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

937 i‡(
˛cf
->
˛õ¡_max_body_size


938 && 
˛cf
->
˛õ¡_max_body_size


939 < 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 + 
rb
->
chunked
->
size
)

941 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

944 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n


945 + 
rb
->
chunked
->
size
);

947 
r
->
lögîög_˛o£
 = 1;

949  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

952 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

953 i‡(
é
 =
NULL
) {

954  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

957 
b
 = 
é
->
buf
;

959 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

961 
b
->
ãmp‹¨y
 = 1;

962 
b
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
;

963 
b
->
°¨t
 = 
˛
->
buf
->
pos
;

964 
b
->
pos
 = 
˛
->
buf
->pos;

965 
b
->
œ°
 = 
˛
->
buf
->last;

966 
b
->
íd
 = 
˛
->
buf
->end;

968 *
Œ
 = 
é
;

969 
Œ
 = &
é
->
√xt
;

971 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

973 i‡((
off_t
Ë
size
 > 
rb
->
chunked
->size) {

974 
˛
->
buf
->
pos
 +
rb
->
chunked
->
size
;

975 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
rb
->
chunked
->
size
;

976 
rb
->
chunked
->
size
 = 0;

979 
rb
->
chunked
->
size
 -= size;

980 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 +
size
;

981 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

984 
b
->
œ°
 = 
˛
->
buf
->
pos
;

989 i‡(
rc
 =
NGX_DONE
) {

993 
rb
->
ª°
 = 0;

995 
é
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
rb
->
‰ì
);

996 i‡(
é
 =
NULL
) {

997  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1000 
b
 = 
é
->
buf
;

1002 
	`ngx_memzîo
(
b
, (
ngx_buf_t
));

1004 
b
->
œ°_buf
 = 1;

1006 *
Œ
 = 
é
;

1007 
Œ
 = &
é
->
√xt
;

1012 i‡(
rc
 =
NGX_AGAIN
) {

1016 
rb
->
ª°
 =Ñb->
chunked
->
Àngth
;

1023 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1026  
NGX_HTTP_BAD_REQUEST
;

1030 
rc
 = 
	`ngx_hâp_ªque°_body_ßve_fûãr
(
r
, 
out
);

1032 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
rb
->
‰ì
, &rb->
busy
, &
out
,

1033 (
ngx_buf_èg_t
Ë&
ngx_hâp_ªad_˛õ¡_ªque°_body
);

1035  
rc
;

1036 
	}
}

1039 
ngx_öt_t


1040 
	$ngx_hâp_ªque°_body_ßve_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

1042 #i‡(
NGX_DEBUG
)

1043 
ngx_chaö_t
 *
˛
;

1045 
ngx_hâp_ªque°_body_t
 *
rb
;

1047 
rb
 = 
r
->
ªque°_body
;

1049 #i‡(
NGX_DEBUG
)

1051 
˛
 = 
rb
->
bufs
; cl; c»˛->
√xt
) {

1052 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1055 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1056 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1057 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1058 
˛
->
buf
->
fûe_pos
,

1059 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1062 
˛
 = 
ö
; cl; c»˛->
√xt
) {

1063 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1066 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

1067 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

1068 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

1069 
˛
->
buf
->
fûe_pos
,

1070 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

1077 i‡(
	`ngx_chaö_add_c›y
(
r
->
poﬁ
, &
rb
->
bufs
, 
ö
Ë!
NGX_OK
) {

1078  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1081  
NGX_OK
;

1082 
	}
}

	@src/http/ngx_http_script.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

14 
ngx_öt_t
 
ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

15 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

16 
ngx_°r_t
 *
vÆue
, 
ngx_uöt_t
 
œ°
);

17 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

18 
ngx_°r_t
 *
«me
);

19 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

20 #i‡(
NGX_PCRE
)

21 
ngx_öt_t
 
ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
,

22 
ngx_uöt_t
 
n
);

24 
ngx_öt_t


25 
ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

26 
size_t
 
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

27 
ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

30 
	#ngx_hâp_s¸ùt_exô
 (
u_ch¨
 *Ë&
ngx_hâp_s¸ùt_exô_code


	)

32 
uöçå_t
 
	gngx_hâp_s¸ùt_exô_code
 = (uöçå_tË
NULL
;

36 
	$ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
)

39 
ngx_uöt_t
 *
ödex
;

41 
ödex
 = 
vÆ
->
Êushes
;

43 i‡(
ödex
) {

44 *
ödex
 !(
ngx_uöt_t
) -1) {

46 i‡(
r
->
v¨übÀs
[*
ödex
].
no_ˇchóbÀ
) {

47 
r
->
v¨übÀs
[*
ödex
].
vÆid
 = 0;

48 
r
->
v¨übÀs
[*
ödex
].
nŸ_found
 = 0;

51 
ödex
++;

54 
	}
}

57 
ngx_öt_t


58 
	$ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
,

59 
ngx_°r_t
 *
vÆue
)

61 
size_t
 
Àn
;

62 
ngx_hâp_s¸ùt_code_±
 
code
;

63 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

64 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

66 i‡(
vÆ
->
Àngths
 =
NULL
) {

67 *
vÆue
 = 
vÆ
->value;

68  
NGX_OK
;

71 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
r
, 
vÆ
);

73 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

75 
e
.
ù
 = 
vÆ
->
Àngths
;

76 
e
.
ªque°
 = 
r
;

77 
e
.
Êushed
 = 1;

79 
Àn
 = 0;

81 *(
uöçå_t
 *Ë
e
.
ù
) {

82 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

83 
Àn
 +
	`lcode
(&
e
);

86 
vÆue
->
Àn
 =Üen;

87 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

88 i‡(
vÆue
->
d©a
 =
NULL
) {

89  
NGX_ERROR
;

92 
e
.
ù
 = 
vÆ
->
vÆues
;

93 
e
.
pos
 = 
vÆue
->
d©a
;

94 
e
.
buf
 = *
vÆue
;

96 *(
uöçå_t
 *Ë
e
.
ù
) {

97 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

98 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

101 *
vÆue
 = 
e
.
buf
;

103  
NGX_OK
;

104 
	}
}

107 
ngx_öt_t


108 
	$ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
)

110 
ngx_°r_t
 *
v
;

111 
ngx_uöt_t
 
i
, 
n
, 
nv
, 
nc
;

112 
ngx_¨øy_t
 
Êushes
, 
Àngths
, 
vÆues
, *
pf
, *
∂
, *
pv
;

113 
ngx_hâp_s¸ùt_compûe_t
 
sc
;

115 
v
 = 
ccv
->
vÆue
;

117 
nv
 = 0;

118 
nc
 = 0;

120 
i
 = 0; i < 
v
->
Àn
; i++) {

121 i‡(
v
->
d©a
[
i
] == '$') {

122 i‡(
v
->
d©a
[
i
 + 1] >= '1' && v->data[i + 1] <= '9') {

123 
nc
++;

126 
nv
++;

131 i‡((
v
->
Àn
 =0 || v->
d©a
[0] != '$')

132 && (
ccv
->
c⁄f_¥efix
 || ccv->
roŸ_¥efix
))

134 i‡(
	`ngx_c⁄f_fuŒ_«me
(
ccv
->
cf
->
cy˛e
, 
v
, ccv->
c⁄f_¥efix
Ë!
NGX_OK
) {

135  
NGX_ERROR
;

138 
ccv
->
c⁄f_¥efix
 = 0;

139 
ccv
->
roŸ_¥efix
 = 0;

142 
ccv
->
com∂ex_vÆue
->
vÆue
 = *
v
;

143 
ccv
->
com∂ex_vÆue
->
Êushes
 = 
NULL
;

144 
ccv
->
com∂ex_vÆue
->
Àngths
 = 
NULL
;

145 
ccv
->
com∂ex_vÆue
->
vÆues
 = 
NULL
;

147 i‡(
nv
 =0 && 
nc
 == 0) {

148  
NGX_OK
;

151 
n
 = 
nv
 + 1;

153 i‡(
	`ngx_¨øy_öô
(&
Êushes
, 
ccv
->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
))

154 !
NGX_OK
)

156  
NGX_ERROR
;

159 
n
 = 
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

160 + (
ngx_hâp_s¸ùt_v¨_code_t
))

161 + (
uöçå_t
);

163 i‡(
	`ngx_¨øy_öô
(&
Àngths
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

164  
NGX_ERROR
;

167 
n
 = (
nv
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

168 + (
ngx_hâp_s¸ùt_v¨_code_t
))

169 + (
uöçå_t
)

170 + 
v
->
Àn


171 + (
uöçå_t
) - 1)

172 & ~((
uöçå_t
) - 1);

174 i‡(
	`ngx_¨øy_öô
(&
vÆues
, 
ccv
->
cf
->
poﬁ
, 
n
, 1Ë!
NGX_OK
) {

175  
NGX_ERROR
;

178 
pf
 = &
Êushes
;

179 
∂
 = &
Àngths
;

180 
pv
 = &
vÆues
;

182 
	`ngx_memzîo
(&
sc
, (
ngx_hâp_s¸ùt_compûe_t
));

184 
sc
.
cf
 = 
ccv
->cf;

185 
sc
.
sour˚
 = 
v
;

186 
sc
.
Êushes
 = &
pf
;

187 
sc
.
Àngths
 = &
∂
;

188 
sc
.
vÆues
 = &
pv
;

189 
sc
.
com∂ëe_Àngths
 = 1;

190 
sc
.
com∂ëe_vÆues
 = 1;

191 
sc
.
zîo
 = 
ccv
->zero;

192 
sc
.
c⁄f_¥efix
 = 
ccv
->conf_prefix;

193 
sc
.
roŸ_¥efix
 = 
ccv
->root_prefix;

195 i‡(
	`ngx_hâp_s¸ùt_compûe
(&
sc
Ë!
NGX_OK
) {

196  
NGX_ERROR
;

199 i‡(
Êushes
.
√…s
) {

200 
ccv
->
com∂ex_vÆue
->
Êushes
 = flushes.
ñts
;

201 
ccv
->
com∂ex_vÆue
->
Êushes
[Êushes.
√…s
] = (
ngx_uöt_t
) -1;

204 
ccv
->
com∂ex_vÆue
->
Àngths
 =Üígths.
ñts
;

205 
ccv
->
com∂ex_vÆue
->
vÆues
 = vÆues.
ñts
;

207  
NGX_OK
;

208 
	}
}

212 
	$ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
p
 = 
c⁄f
;

216 
ngx_°r_t
 *
vÆue
;

217 
ngx_hâp_com∂ex_vÆue_t
 **
cv
;

218 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

220 
cv
 = (
ngx_hâp_com∂ex_vÆue_t
 **Ë(
p
 + 
cmd
->
off£t
);

222 i‡(*
cv
 !
NULL
) {

226 *
cv
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

227 i‡(*
cv
 =
NULL
) {

228  
NGX_CONF_ERROR
;

231 
vÆue
 = 
cf
->
¨gs
->
ñts
;

233 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

235 
ccv
.
cf
 = cf;

236 
ccv
.
vÆue
 = &value[1];

237 
ccv
.
com∂ex_vÆue
 = *
cv
;

239 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

240  
NGX_CONF_ERROR
;

243  
NGX_CONF_OK
;

244 
	}
}

247 
ngx_öt_t


248 
	$ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_¨øy_t
 *
¥ediˇãs
)

250 
ngx_°r_t
 
vÆ
;

251 
ngx_uöt_t
 
i
;

252 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

254 i‡(
¥ediˇãs
 =
NULL
) {

255  
NGX_OK
;

258 
cv
 = 
¥ediˇãs
->
ñts
;

260 
i
 = 0; i < 
¥ediˇãs
->
√…s
; i++) {

261 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
cv
[
i
], &
vÆ
Ë!
NGX_OK
) {

262  
NGX_ERROR
;

265 i‡(
vÆ
.
Àn
 && (vÆ.À¿!1 || vÆ.
d©a
[0] != '0')) {

266  
NGX_DECLINED
;

270  
NGX_OK
;

271 
	}
}

275 
	$ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

277 *
p
 = 
c⁄f
;

279 
ngx_°r_t
 *
vÆue
;

280 
ngx_uöt_t
 
i
;

281 
ngx_¨øy_t
 **
a
;

282 
ngx_hâp_com∂ex_vÆue_t
 *
cv
;

283 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

285 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

287 i‡(*
a
 =
NGX_CONF_UNSET_PTR
) {

288 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_hâp_com∂ex_vÆue_t
));

289 i‡(*
a
 =
NULL
) {

290  
NGX_CONF_ERROR
;

294 
vÆue
 = 
cf
->
¨gs
->
ñts
;

296 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

297 
cv
 = 
	`ngx_¨øy_push
(*
a
);

298 i‡(
cv
 =
NULL
) {

299  
NGX_CONF_ERROR
;

302 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

304 
ccv
.
cf
 = cf;

305 
ccv
.
vÆue
 = &vÆue[
i
];

306 
ccv
.
com∂ex_vÆue
 = 
cv
;

308 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

309  
NGX_CONF_ERROR
;

313  
NGX_CONF_OK
;

314 
	}
}

317 
ngx_uöt_t


318 
	$ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
)

320 
ngx_uöt_t
 
i
, 
n
;

322 
n
 = 0, 
i
 = 0; i < 
vÆue
->
Àn
; i++) {

323 i‡(
vÆue
->
d©a
[
i
] == '$') {

324 
n
++;

328  
n
;

329 
	}
}

332 
ngx_öt_t


333 
	$ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

335 
u_ch¨
 
ch
;

336 
ngx_°r_t
 
«me
;

337 
ngx_uöt_t
 
i
, 
bøckë
;

339 i‡(
	`ngx_hâp_s¸ùt_öô_¨øys
(
sc
Ë!
NGX_OK
) {

340  
NGX_ERROR
;

343 
i
 = 0; i < 
sc
->
sour˚
->
Àn
; ) {

345 
«me
.
Àn
 = 0;

347 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

349 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

350 
övÆid_v¨übÀ
;

353 #i‡(
NGX_PCRE
)

355 
ngx_uöt_t
 
n
;

357 i‡(
sc
->
sour˚
->
d©a
[
i
] >= '1' && sc->source->data[i] <= '9') {

359 
n
 = 
sc
->
sour˚
->
d©a
[
i
] - '0';

361 i‡(
sc
->
ˇ±uªs_mask
 & (1 << 
n
)) {

362 
sc
->
dup_ˇ±uª
 = 1;

365 
sc
->
ˇ±uªs_mask
 |1 << 
n
;

367 i‡(
	`ngx_hâp_s¸ùt_add_ˇ±uª_code
(
sc
, 
n
Ë!
NGX_OK
) {

368  
NGX_ERROR
;

371 
i
++;

378 i‡(
sc
->
sour˚
->
d©a
[
i
] == '{') {

379 
bøckë
 = 1;

381 i‡(++
i
 =
sc
->
sour˚
->
Àn
) {

382 
övÆid_v¨übÀ
;

385 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

388 
bøckë
 = 0;

389 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

392  ; 
i
 < 
sc
->
sour˚
->
Àn
; i++, 
«me
.len++) {

393 
ch
 = 
sc
->
sour˚
->
d©a
[
i
];

395 i‡(
ch
 ='}' && 
bøckë
) {

396 
i
++;

397 
bøckë
 = 0;

401 i‡((
ch
 >= 'A' && ch <= 'Z')

402 || (
ch
 >= 'a' && ch <= 'z')

403 || (
ch
 >= '0' && ch <= '9')

404 || 
ch
 == '_')

412 i‡(
bøckë
) {

413 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0,

415 "v¨übÀ i†missög", &
«me
);

416  
NGX_ERROR
;

419 i‡(
«me
.
Àn
 == 0) {

420 
övÆid_v¨übÀ
;

423 
sc
->
v¨übÀs
++;

425 i‡(
	`ngx_hâp_s¸ùt_add_v¨_code
(
sc
, &
«me
Ë!
NGX_OK
) {

426  
NGX_ERROR
;

432 i‡(
sc
->
sour˚
->
d©a
[
i
] ='?' && sc->
compûe_¨gs
) {

433 
sc
->
¨gs
 = 1;

434 
sc
->
compûe_¨gs
 = 0;

436 i‡(
	`ngx_hâp_s¸ùt_add_¨gs_code
(
sc
Ë!
NGX_OK
) {

437  
NGX_ERROR
;

440 
i
++;

445 
«me
.
d©a
 = &
sc
->
sour˚
->d©a[
i
];

447 
i
 < 
sc
->
sour˚
->
Àn
) {

449 i‡(
sc
->
sour˚
->
d©a
[
i
] == '$') {

453 i‡(
sc
->
sour˚
->
d©a
[
i
] == '?') {

455 
sc
->
¨gs
 = 1;

457 i‡(
sc
->
compûe_¨gs
) {

462 
i
++;

463 
«me
.
Àn
++;

466 
sc
->
size
 +
«me
.
Àn
;

468 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
«me
, (
i
 =sc->
sour˚
->
Àn
))

469 !
NGX_OK
)

471  
NGX_ERROR
;

475  
	`ngx_hâp_s¸ùt_d⁄e
(
sc
);

477 
övÆid_v¨übÀ
:

479 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
sc
->
cf
, 0, "invalid variableÇame");

481  
NGX_ERROR
;

482 
	}
}

485 
u_ch¨
 *

486 
	$ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

487 *
code_Àngths
, 
size_t
 
Àn
, *
code_vÆues
)

489 
ngx_uöt_t
 
i
;

490 
ngx_hâp_s¸ùt_code_±
 
code
;

491 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

492 
ngx_hâp_s¸ùt_ígöe_t
 
e
;

493 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

495 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

497 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

498 i‡(
r
->
v¨übÀs
[
i
].
no_ˇchóbÀ
) {

499 
r
->
v¨übÀs
[
i
].
vÆid
 = 0;

500 
r
->
v¨übÀs
[
i
].
nŸ_found
 = 0;

504 
	`ngx_memzîo
(&
e
, (
ngx_hâp_s¸ùt_ígöe_t
));

506 
e
.
ù
 = 
code_Àngths
;

507 
e
.
ªque°
 = 
r
;

508 
e
.
Êushed
 = 1;

510 *(
uöçå_t
 *Ë
e
.
ù
) {

511 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
e
.
ù
;

512 
Àn
 +
	`lcode
(&
e
);

516 
vÆue
->
Àn
 =Üen;

517 
vÆue
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

518 i‡(
vÆue
->
d©a
 =
NULL
) {

519  
NULL
;

522 
e
.
ù
 = 
code_vÆues
;

523 
e
.
pos
 = 
vÆue
->
d©a
;

525 *(
uöçå_t
 *Ë
e
.
ù
) {

526 
code
 = *(
ngx_hâp_s¸ùt_code_±
 *Ë
e
.
ù
;

527 
	`code
((
ngx_hâp_s¸ùt_ígöe_t
 *Ë&
e
);

530  
e
.
pos
;

531 
	}
}

535 
	$ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

536 
ngx_¨øy_t
 *
ödi˚s
)

538 
ngx_uöt_t
 
n
, *
ödex
;

540 i‡(
ödi˚s
) {

541 
ödex
 = 
ödi˚s
->
ñts
;

542 
n
 = 0;Ç < 
ödi˚s
->
√…s
;Ç++) {

543 i‡(
r
->
v¨übÀs
[
ödex
[
n
]].
no_ˇchóbÀ
) {

544 
r
->
v¨übÀs
[
ödex
[
n
]].
vÆid
 = 0;

545 
r
->
v¨übÀs
[
ödex
[
n
]].
nŸ_found
 = 0;

549 
	}
}

552 
ngx_öt_t


553 
	$ngx_hâp_s¸ùt_öô_¨øys
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

555 
ngx_uöt_t
 
n
;

557 i‡(
sc
->
Êushes
 && *sc->Êushe†=
NULL
) {

558 
n
 = 
sc
->
v¨übÀs
 ? sc->variables : 1;

559 *
sc
->
Êushes
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, (
ngx_uöt_t
));

560 i‡(*
sc
->
Êushes
 =
NULL
) {

561  
NGX_ERROR
;

565 i‡(*
sc
->
Àngths
 =
NULL
) {

566 
n
 = 
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

567 + (
ngx_hâp_s¸ùt_v¨_code_t
))

568 + (
uöçå_t
);

570 *
sc
->
Àngths
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

571 i‡(*
sc
->
Àngths
 =
NULL
) {

572  
NGX_ERROR
;

576 i‡(*
sc
->
vÆues
 =
NULL
) {

577 
n
 = (
sc
->
v¨übÀs
 * (2 * (
ngx_hâp_s¸ùt_c›y_code_t
)

578 + (
ngx_hâp_s¸ùt_v¨_code_t
))

579 + (
uöçå_t
)

580 + 
sc
->
sour˚
->
Àn


581 + (
uöçå_t
) - 1)

582 & ~((
uöçå_t
) - 1);

584 *
sc
->
vÆues
 = 
	`ngx_¨øy_¸óã
(sc->
cf
->
poﬁ
, 
n
, 1);

585 i‡(*
sc
->
vÆues
 =
NULL
) {

586  
NGX_ERROR
;

590 
sc
->
v¨übÀs
 = 0;

592  
NGX_OK
;

593 
	}
}

596 
ngx_öt_t


597 
	$ngx_hâp_s¸ùt_d⁄e
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

599 
ngx_°r_t
 
zîo
;

600 
uöçå_t
 *
code
;

602 i‡(
sc
->
zîo
) {

604 
zîo
.
Àn
 = 1;

605 
zîo
.
d©a
 = (
u_ch¨
 *) "\0";

607 i‡(
	`ngx_hâp_s¸ùt_add_c›y_code
(
sc
, &
zîo
, 0Ë!
NGX_OK
) {

608  
NGX_ERROR
;

612 i‡(
sc
->
c⁄f_¥efix
 || sc->
roŸ_¥efix
) {

613 i‡(
	`ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
sc
Ë!
NGX_OK
) {

614  
NGX_ERROR
;

618 i‡(
sc
->
com∂ëe_Àngths
) {

619 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

620 i‡(
code
 =
NULL
) {

621  
NGX_ERROR
;

624 *
code
 = (
uöçå_t
Ë
NULL
;

627 i‡(
sc
->
com∂ëe_vÆues
) {

628 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
),

629 &
sc
->
maö
);

630 i‡(
code
 =
NULL
) {

631  
NGX_ERROR
;

634 *
code
 = (
uöçå_t
Ë
NULL
;

637  
NGX_OK
;

638 
	}
}

642 
	$ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
, 
size_t
 
size
)

644 i‡(*
codes
 =
NULL
) {

645 *
codes
 = 
	`ngx_¨øy_¸óã
(
poﬁ
, 256, 1);

646 i‡(*
codes
 =
NULL
) {

647  
NULL
;

651  
	`ngx_¨øy_push_n
(*
codes
, 
size
);

652 
	}
}

656 
	$ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
)

658 
u_ch¨
 *
ñts
, **
p
;

659 *
√w
;

661 
ñts
 = 
codes
->elts;

663 
√w
 = 
	`ngx_¨øy_push_n
(
codes
, 
size
);

664 i‡(
√w
 =
NULL
) {

665  
NULL
;

668 i‡(
code
) {

669 i‡(
ñts
 !
codes
->elts) {

670 
p
 = 
code
;

671 *
p
 +(
u_ch¨
 *Ë
codes
->
ñts
 -Élts;

675  
√w
;

676 
	}
}

679 
ngx_öt_t


680 
	$ngx_hâp_s¸ùt_add_c›y_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
vÆue
,

681 
ngx_uöt_t
 
œ°
)

683 
u_ch¨
 *
p
;

684 
size_t
 
size
, 
Àn
, 
zîo
;

685 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

687 
zîo
 = (
sc
->zîÿ&& 
œ°
);

688 
Àn
 = 
vÆue
->À¿+ 
zîo
;

690 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

691 (
ngx_hâp_s¸ùt_c›y_code_t
), 
NULL
);

692 i‡(
code
 =
NULL
) {

693  
NGX_ERROR
;

696 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_Àn_code
;

697 
code
->
Àn
 =Üen;

699 
size
 = ((
ngx_hâp_s¸ùt_c›y_code_t
Ë+ 
Àn
 + (
uöçå_t
) - 1)

700 & ~((
uöçå_t
) - 1);

702 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, 
size
, &sc->
maö
);

703 i‡(
code
 =
NULL
) {

704  
NGX_ERROR
;

707 
code
->codê
ngx_hâp_s¸ùt_c›y_code
;

708 
code
->
Àn
 =Üen;

710 
p
 = 
	`ngx_˝ymem
((
u_ch¨
 *Ë
code
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

711 
vÆue
->
d©a
, vÆue->
Àn
);

713 i‡(
zîo
) {

714 *
p
 = '\0';

715 
sc
->
zîo
 = 0;

718  
NGX_OK
;

719 
	}
}

722 
size_t


723 
	$ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

725 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

727 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

729 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
);

731  
code
->
Àn
;

732 
	}
}

736 
	$ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

738 
u_ch¨
 *
p
;

739 
ngx_hâp_s¸ùt_c›y_code_t
 *
code
;

741 
code
 = (
ngx_hâp_s¸ùt_c›y_code_t
 *Ë
e
->
ù
;

743 
p
 = 
e
->
pos
;

745 i‡(!
e
->
skù
) {

746 
e
->
pos
 = 
	`ngx_c›y
(
p
,É->
ù
 + (
ngx_hâp_s¸ùt_c›y_code_t
),

747 
code
->
Àn
);

750 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_code_t
)

751 + ((
code
->
Àn
 + (
uöçå_t
) - 1) & ~((uintptr_t) - 1));

753 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

754 "hâ∞s¸ùàc›y: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

755 
	}
}

758 
ngx_öt_t


759 
	$ngx_hâp_s¸ùt_add_v¨_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_°r_t
 *
«me
)

761 
ngx_öt_t
 
ödex
, *
p
;

762 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

764 
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
sc
->
cf
, 
«me
);

766 i‡(
ödex
 =
NGX_ERROR
) {

767  
NGX_ERROR
;

770 i‡(
sc
->
Êushes
) {

771 
p
 = 
	`ngx_¨øy_push
(*
sc
->
Êushes
);

772 i‡(
p
 =
NULL
) {

773  
NGX_ERROR
;

776 *
p
 = 
ödex
;

779 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

780 (
ngx_hâp_s¸ùt_v¨_code_t
), 
NULL
);

781 i‡(
code
 =
NULL
) {

782  
NGX_ERROR
;

785 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_c›y_v¨_Àn_code
;

786 
code
->
ödex
 = (
uöçå_t
) index;

788 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

789 (
ngx_hâp_s¸ùt_v¨_code_t
),

790 &
sc
->
maö
);

791 i‡(
code
 =
NULL
) {

792  
NGX_ERROR
;

795 
code
->codê
ngx_hâp_s¸ùt_c›y_v¨_code
;

796 
code
->
ödex
 = (
uöçå_t
) index;

798  
NGX_OK
;

799 
	}
}

802 
size_t


803 
	$ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

805 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

806 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

808 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

810 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

812 i‡(
e
->
Êushed
) {

813 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

816 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

819 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

820  
vÆue
->
Àn
;

824 
	}
}

828 
	$ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

830 
u_ch¨
 *
p
;

831 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

832 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

834 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

836 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

838 i‡(!
e
->
skù
) {

840 i‡(
e
->
Êushed
) {

841 
vÆue
 = 
	`ngx_hâp_gë_ödexed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

844 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

847 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

848 
p
 = 
e
->
pos
;

849 
e
->
pos
 = 
	`ngx_c›y
(
p
, 
vÆue
->
d©a
, vÆue->
Àn
);

851 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
,

852 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

853 "hâ∞s¸ùàv¨: \"%*s\"", 
e
->
pos
 - 
p
,Ö);

856 
	}
}

859 
ngx_öt_t


860 
	$ngx_hâp_s¸ùt_add_¨gs_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

862 
uöçå_t
 *
code
;

864 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
, (
uöçå_t
), 
NULL
);

865 i‡(
code
 =
NULL
) {

866  
NGX_ERROR
;

869 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_m¨k_¨gs_code
;

871 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
, (
uöçå_t
), &sc->
maö
);

872 i‡(
code
 =
NULL
) {

873  
NGX_ERROR
;

876 *
code
 = (
uöçå_t
Ë
ngx_hâp_s¸ùt_°¨t_¨gs_code
;

878  
NGX_OK
;

879 
	}
}

882 
size_t


883 
	$ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

885 
e
->
is_¨gs
 = 1;

886 
e
->
ù
 +(
uöçå_t
);

889 
	}
}

893 
	$ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

895 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

898 
e
->
is_¨gs
 = 1;

899 
e
->
¨gs
 =É->
pos
;

900 
e
->
ù
 +(
uöçå_t
);

901 
	}
}

904 #i‡(
NGX_PCRE
)

907 
	$ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

909 
size_t
 
Àn
;

910 
ngx_öt_t
 
rc
;

911 
ngx_uöt_t
 
n
;

912 
ngx_hâp_ªque°_t
 *
r
;

913 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

914 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

915 
ngx_hâp_s¸ùt_ªgex_code_t
 *
code
;

917 
code
 = (
ngx_hâp_s¸ùt_ªgex_code_t
 *Ë
e
->
ù
;

919 
r
 = 
e
->
ªque°
;

921 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

922 "hâ∞s¸ùàªgex: \"%V\"", &
code
->
«me
);

924 i‡(
code
->
uri
) {

925 
e
->
löe
 = 
r
->
uri
;

927 
e
->
•
--;

928 
e
->
löe
.
Àn
 =É->
•
->len;

929 
e
->
löe
.
d©a
 =É->
•
->data;

932 
rc
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
code
->
ªgex
, &
e
->
löe
);

934 i‡(
rc
 =
NGX_DECLINED
) {

935 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

936 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

938 &
code
->
«me
, &
e
->
löe
);

941 
r
->
nˇ±uªs
 = 0;

943 i‡(
code
->
ã°
) {

944 i‡(
code
->
√g©ive_ã°
) {

945 
e
->
•
->
Àn
 = 1;

946 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

949 
e
->
•
->
Àn
 = 0;

950 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

953 
e
->
•
++;

955 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

959 
e
->
ù
 +
code
->
√xt
;

963 i‡(
rc
 =
NGX_ERROR
) {

964 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

965 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

969 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

970 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

971 "\"%V\" m©che†\"%V\"", &
code
->
«me
, &
e
->
löe
);

974 i‡(
code
->
ã°
) {

975 i‡(
code
->
√g©ive_ã°
) {

976 
e
->
•
->
Àn
 = 0;

977 
e
->
•
->
d©a
 = (
u_ch¨
 *) "";

980 
e
->
•
->
Àn
 = 1;

981 
e
->
•
->
d©a
 = (
u_ch¨
 *) "1";

984 
e
->
•
++;

986 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

990 i‡(
code
->
°©us
) {

991 
e
->
°©us
 = 
code
->status;

993 i‡(!
code
->
ªdúe˘
) {

994 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

999 i‡(
code
->
uri
) {

1000 
r
->
öã∫Æ
 = 1;

1001 
r
->
vÆid_u≈¨£d_uri
 = 0;

1003 i‡(
code
->
bªak_cy˛e
) {

1004 
r
->
vÆid_loˇti⁄
 = 0;

1005 
r
->
uri_ch™ged
 = 0;

1008 
r
->
uri_ch™ged
 = 1;

1012 i‡(
code
->
Àngths
 =
NULL
) {

1013 
e
->
buf
.
Àn
 = 
code
->
size
;

1015 i‡(
code
->
uri
) {

1016 i‡(
r
->
nˇ±uªs
 && (r->
quŸed_uri
 ||Ñ->
∂us_ö_uri
)) {

1017 
e
->
buf
.
Àn
 +2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
r
->
uri
.
d©a
,Ñ->uri.len,

1018 
NGX_ESCAPE_ARGS
);

1022 
n
 = 2;Ç < 
r
->
nˇ±uªs
;Ç += 2) {

1023 
e
->
buf
.
Àn
 +
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

1027 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1029 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1030 
À
.
löe
 = 
e
->line;

1031 
À
.
ªque°
 = 
r
;

1032 
À
.
quŸe
 = 
code
->
ªdúe˘
;

1034 
Àn
 = 0;

1036 *(
uöçå_t
 *Ë
À
.
ù
) {

1037 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1038 
Àn
 +
	`lcode
(&
À
);

1041 
e
->
buf
.
Àn
 =Üen;

1044 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1045 
e
->
buf
.
Àn
 +
r
->
¨gs
.len + 1;

1048 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,É->buf.
Àn
);

1049 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1050 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1051 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1055 
e
->
quŸe
 = 
code
->
ªdúe˘
;

1057 
e
->
pos
 =É->
buf
.
d©a
;

1059 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_code_t
);

1060 
	}
}

1064 
	$ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1066 
u_ch¨
 *
d°
, *
§c
;

1067 
ngx_hâp_ªque°_t
 *
r
;

1068 
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *
code
;

1070 
code
 = (
ngx_hâp_s¸ùt_ªgex_íd_code_t
 *Ë
e
->
ù
;

1072 
r
 = 
e
->
ªque°
;

1074 
e
->
quŸe
 = 0;

1076 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1079 i‡(
code
->
ªdúe˘
) {

1081 
d°
 = 
e
->
buf
.
d©a
;

1082 
§c
 = 
e
->
buf
.
d©a
;

1084 
	`ngx_u√sˇ≥_uri
(&
d°
, &
§c
, 
e
->
pos
 -É->
buf
.
d©a
,

1085 
NGX_UNESCAPE_REDIRECT
);

1087 i‡(
§c
 < 
e
->
pos
) {

1088 
d°
 = 
	`ngx_movemem
(d°, 
§c
, 
e
->
pos
 - src);

1091 
e
->
pos
 = 
d°
;

1093 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1094 *
e
->
pos
++ = (
u_ch¨
Ë(
code
->
¨gs
 ? '&' : '?');

1095 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1098 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1100 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1101 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1102 "ªwrôã¿ªdúe˘: \"%V\"", &
e
->
buf
);

1105 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

1107 
r
->
hódîs_out
.
loˇti⁄
 = 
	`ngx_li°_push
(&r->hódîs_out.
hódîs
);

1108 i‡(
r
->
hódîs_out
.
loˇti⁄
 =
NULL
) {

1109 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1110 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1114 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 1;

1115 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "Location");

1116 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
 = 
e
->
buf
;

1118 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1122 i‡(
e
->
¨gs
) {

1123 
e
->
buf
.
Àn
 =É->
¨gs
 -É->buf.
d©a
;

1125 i‡(
code
->
add_¨gs
 && 
r
->
¨gs
.
Àn
) {

1126 *
e
->
pos
++ = '&';

1127 
e
->
pos
 = 
	`ngx_c›y
”->pos, 
r
->
¨gs
.
d©a
,Ñ->¨gs.
Àn
);

1130 
r
->
¨gs
.
Àn
 = 
e
->
pos
 -É->args;

1131 
r
->
¨gs
.
d©a
 = 
e
->args;

1133 
e
->
¨gs
 = 
NULL
;

1136 
e
->
buf
.
Àn
 =É->
pos
 -É->buf.
d©a
;

1138 i‡(!
code
->
add_¨gs
) {

1139 
r
->
¨gs
.
Àn
 = 0;

1143 i‡(
e
->
log
 || (
r
->
c⁄√˘i⁄
->log->
log_Àvñ
 & 
NGX_LOG_DEBUG_HTTP
)) {

1144 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1146 &
e
->
buf
, &
r
->
¨gs
);

1149 i‡(
code
->
uri
) {

1150 
r
->
uri
 = 
e
->
buf
;

1152 i‡(
r
->
uri
.
Àn
 == 0) {

1153 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1155 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1156 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1160 
	`ngx_hâp_£t_exãn
(
r
);

1163 
e
->
ù
 +(
ngx_hâp_s¸ùt_ªgex_íd_code_t
);

1164 
	}
}

1167 
ngx_öt_t


1168 
	$ngx_hâp_s¸ùt_add_ˇ±uª_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
, 
ngx_uöt_t
 
n
)

1170 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1172 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1173 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1174 
NULL
);

1175 i‡(
code
 =
NULL
) {

1176  
NGX_ERROR
;

1179 
code
->codê(
ngx_hâp_s¸ùt_code_±
)

1180 
ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
;

1181 
code
->
n
 = 2 *Ç;

1184 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1185 (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
),

1186 &
sc
->
maö
);

1187 i‡(
code
 =
NULL
) {

1188  
NGX_ERROR
;

1191 
code
->codê
ngx_hâp_s¸ùt_c›y_ˇ±uª_code
;

1192 
code
->
n
 = 2 *Ç;

1194 i‡(
sc
->
nˇ±uªs
 < 
n
) {

1195 
sc
->
nˇ±uªs
 = 
n
;

1198  
NGX_OK
;

1199 
	}
}

1202 
size_t


1203 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1205 *
ˇp
;

1206 
u_ch¨
 *
p
;

1207 
ngx_uöt_t
 
n
;

1208 
ngx_hâp_ªque°_t
 *
r
;

1209 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1211 
r
 = 
e
->
ªque°
;

1213 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1215 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1217 
n
 = 
code
->n;

1219 i‡(
n
 < 
r
->
nˇ±uªs
) {

1221 
ˇp
 = 
r
->
ˇ±uªs
;

1223 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1224 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1226 
p
 = 
r
->
ˇ±uªs_d©a
;

1228  
ˇp
[
n
 + 1] - cap[n]

1229 + 2 * 
	`ngx_esˇ≥_uri
(
NULL
, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n],

1230 
NGX_ESCAPE_ARGS
);

1232  
ˇp
[
n
 + 1] - cap[n];

1237 
	}
}

1241 
	$ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1243 *
ˇp
;

1244 
u_ch¨
 *
p
, *
pos
;

1245 
ngx_uöt_t
 
n
;

1246 
ngx_hâp_ªque°_t
 *
r
;

1247 
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *
code
;

1249 
r
 = 
e
->
ªque°
;

1251 
code
 = (
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
 *Ë
e
->
ù
;

1253 
e
->
ù
 +(
ngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
);

1255 
n
 = 
code
->n;

1257 
pos
 = 
e
->pos;

1259 i‡(
n
 < 
r
->
nˇ±uªs
) {

1261 
ˇp
 = 
r
->
ˇ±uªs
;

1262 
p
 = 
r
->
ˇ±uªs_d©a
;

1264 i‡((
e
->
is_¨gs
 ||É->
quŸe
)

1265 && (
e
->
ªque°
->
quŸed_uri
 ||É->ªque°->
∂us_ö_uri
))

1267 
e
->
pos
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’os, &
p
[
ˇp
[
n
]],

1268 
ˇp
[
n
 + 1] - cap[n],

1269 
NGX_ESCAPE_ARGS
);

1271 
e
->
pos
 = 
	`ngx_c›y
’os, &
p
[
ˇp
[
n
]], cap[n + 1] - cap[n]);

1275 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1276 "hâ∞s¸ùàˇ±uª: \"%*s\"", 
e
->
pos
 -Öos,Öos);

1277 
	}
}

1282 
ngx_öt_t


1283 
	$ngx_hâp_s¸ùt_add_fuŒ_«me_code
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
)

1285 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1287 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
Àngths
,

1288 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1289 
NULL
);

1290 i‡(
code
 =
NULL
) {

1291  
NGX_ERROR
;

1294 
code
->codê(
ngx_hâp_s¸ùt_code_±
Ë
ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
;

1295 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1297 
code
 = 
	`ngx_hâp_s¸ùt_add_code
(*
sc
->
vÆues
,

1298 (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
),

1299 &
sc
->
maö
);

1300 i‡(
code
 =
NULL
) {

1301  
NGX_ERROR
;

1304 
code
->codê
ngx_hâp_s¸ùt_fuŒ_«me_code
;

1305 
code
->
c⁄f_¥efix
 = 
sc
->conf_prefix;

1307  
NGX_OK
;

1308 
	}
}

1311 
size_t


1312 
	$ngx_hâp_s¸ùt_fuŒ_«me_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1314 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1316 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1318 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1320  
code
->
c⁄f_¥efix
 ? 
ngx_cy˛e
->c⁄f_¥efix.
Àn
:

1321 
ngx_cy˛e
->
¥efix
.
Àn
;

1322 
	}
}

1326 
	$ngx_hâp_s¸ùt_fuŒ_«me_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1328 
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *
code
;

1330 
ngx_°r_t
 
vÆue
;

1332 
code
 = (
ngx_hâp_s¸ùt_fuŒ_«me_code_t
 *Ë
e
->
ù
;

1334 
vÆue
.
d©a
 = 
e
->
buf
.data;

1335 
vÆue
.
Àn
 = 
e
->
pos
 -É->
buf
.
d©a
;

1337 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
vÆue
, 
code
->
c⁄f_¥efix
)

1338 !
NGX_OK
)

1340 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1341 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1345 
e
->
buf
 = 
vÆue
;

1347 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1348 "hâ∞s¸ùàfuŒ«me: \"%V\"", &
vÆue
);

1350 
e
->
ù
 +(
ngx_hâp_s¸ùt_fuŒ_«me_code_t
);

1351 
	}
}

1355 
	$ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1357 
ngx_hâp_s¸ùt_ªtu∫_code_t
 *
code
;

1359 
code
 = (
ngx_hâp_s¸ùt_ªtu∫_code_t
 *Ë
e
->
ù
;

1361 i‡(
code
->
°©us
 < 
NGX_HTTP_BAD_REQUEST


1362 || 
code
->
ãxt
.
vÆue
.
Àn


1363 || 
code
->
ãxt
.
Àngths
)

1365 
e
->
°©us
 = 
	`ngx_hâp_£nd_ª•⁄£
”->
ªque°
, 
code
->°©us, 
NULL
,

1366 &
code
->
ãxt
);

1368 
e
->
°©us
 = 
code
->status;

1371 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1372 
	}
}

1376 
	$ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1378 
e
->
ªque°
->
uri_ch™ged
 = 0;

1380 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1381 
	}
}

1385 
	$ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1387 
ngx_hâp_s¸ùt_if_code_t
 *
code
;

1389 
code
 = (
ngx_hâp_s¸ùt_if_code_t
 *Ë
e
->
ù
;

1391 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1394 
e
->
•
--;

1396 i‡(
e
->
•
->
Àn
 && (e->•->À¿!=1 ||É->•->
d©a
[0] != '0')) {

1397 i‡(
code
->
loc_c⁄f
) {

1398 
e
->
ªque°
->
loc_c⁄f
 = 
code
->loc_conf;

1399 
	`ngx_hâp_upd©e_loˇti⁄_c⁄fig
(
e
->
ªque°
);

1402 
e
->
ù
 +(
ngx_hâp_s¸ùt_if_code_t
);

1406 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1409 
e
->
ù
 +
code
->
√xt
;

1410 
	}
}

1414 
	$ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1416 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1418 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1421 
e
->
•
--;

1422 
vÆ
 = 
e
->
•
;

1423 
ªs
 = 
e
->
•
 - 1;

1425 
e
->
ù
 +(
uöçå_t
);

1427 i‡(
vÆ
->
Àn
 =
ªs
->len

1428 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1430 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1434 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1437 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1438 
	}
}

1442 
	$ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1444 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆ
, *
ªs
;

1446 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1449 
e
->
•
--;

1450 
vÆ
 = 
e
->
•
;

1451 
ªs
 = 
e
->
•
 - 1;

1453 
e
->
ù
 +(
uöçå_t
);

1455 i‡(
vÆ
->
Àn
 =
ªs
->len

1456 && 
	`ngx_°∫cmp
(
vÆ
->
d©a
, 
ªs
->d©a,Ñes->
Àn
) == 0)

1458 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1461 *
ªs
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1465 *
ªs
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1466 
	}
}

1470 
	$ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1472 
ngx_°r_t
 
∑th
;

1473 
ngx_hâp_ªque°_t
 *
r
;

1474 
ngx_›í_fûe_öfo_t
 
of
;

1475 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1476 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1477 
ngx_hâp_s¸ùt_fûe_code_t
 *
code
;

1479 
vÆue
 = 
e
->
•
 - 1;

1481 
code
 = (
ngx_hâp_s¸ùt_fûe_code_t
 *Ë
e
->
ù
;

1482 
e
->
ù
 +(
ngx_hâp_s¸ùt_fûe_code_t
);

1484 
∑th
.
Àn
 = 
vÆue
->len - 1;

1485 
∑th
.
d©a
 = 
vÆue
->data;

1487 
r
 = 
e
->
ªque°
;

1489 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1490 "hâ∞s¸ùàfûê› %∞\"%V\"", 
code
->
›
, &
∑th
);

1492 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1494 
	`ngx_memzîo
(&
of
, (
ngx_›í_fûe_öfo_t
));

1496 
of
.
ªad_ahód
 = 
˛cf
->read_ahead;

1497 
of
.
dúe˘io
 = 
˛cf
->directio;

1498 
of
.
vÆid
 = 
˛cf
->
›í_fûe_ˇche_vÆid
;

1499 
of
.
mö_u£s
 = 
˛cf
->
›í_fûe_ˇche_mö_u£s
;

1500 
of
.
ã°_⁄ly
 = 1;

1501 
of
.
îr‹s
 = 
˛cf
->
›í_fûe_ˇche_îr‹s
;

1502 
of
.
evíts
 = 
˛cf
->
›í_fûe_ˇche_evíts
;

1504 i‡(
	`ngx_hâp_£t_dißbÀ_symlöks
(
r
, 
˛cf
, &
∑th
, &
of
Ë!
NGX_OK
) {

1505 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1506 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1510 i‡(
	`ngx_›í_ˇched_fûe
(
˛cf
->
›í_fûe_ˇche
, &
∑th
, &
of
, 
r
->
poﬁ
)

1511 !
NGX_OK
)

1513 i‡(
of
.
îr
 !
NGX_ENOENT


1514 && 
of
.
îr
 !
NGX_ENOTDIR


1515 && 
of
.
îr
 !
NGX_ENAMETOOLONG
)

1517 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
of
.
îr
,

1518 "%†\"%s\" faûed", 
of
.
Áûed
, 
vÆue
->
d©a
);

1521 
code
->
›
) {

1523 
ngx_hâp_s¸ùt_fûe_∂aö
:

1524 
ngx_hâp_s¸ùt_fûe_dú
:

1525 
ngx_hâp_s¸ùt_fûe_exi°s
:

1526 
ngx_hâp_s¸ùt_fûe_exec
:

1527 
Ál£_vÆue
;

1529 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1530 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1531 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1532 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1533 
åue_vÆue
;

1536 
Ál£_vÆue
;

1539 
code
->
›
) {

1540 
ngx_hâp_s¸ùt_fûe_∂aö
:

1541 i‡(
of
.
is_fûe
) {

1542 
åue_vÆue
;

1544 
Ál£_vÆue
;

1546 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
:

1547 i‡(
of
.
is_fûe
) {

1548 
Ál£_vÆue
;

1550 
åue_vÆue
;

1552 
ngx_hâp_s¸ùt_fûe_dú
:

1553 i‡(
of
.
is_dú
) {

1554 
åue_vÆue
;

1556 
Ál£_vÆue
;

1558 
ngx_hâp_s¸ùt_fûe_nŸ_dú
:

1559 i‡(
of
.
is_dú
) {

1560 
Ál£_vÆue
;

1562 
åue_vÆue
;

1564 
ngx_hâp_s¸ùt_fûe_exi°s
:

1565 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1566 
åue_vÆue
;

1568 
Ál£_vÆue
;

1570 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
:

1571 i‡(
of
.
is_fûe
 || of.
is_dú
 || of.
is_lök
) {

1572 
Ál£_vÆue
;

1574 
åue_vÆue
;

1576 
ngx_hâp_s¸ùt_fûe_exec
:

1577 i‡(
of
.
is_exec
) {

1578 
åue_vÆue
;

1580 
Ál£_vÆue
;

1582 
ngx_hâp_s¸ùt_fûe_nŸ_exec
:

1583 i‡(
of
.
is_exec
) {

1584 
Ál£_vÆue
;

1586 
åue_vÆue
;

1589 
Ál£_vÆue
:

1591 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1594 *
vÆue
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1597 
åue_vÆue
:

1599 *
vÆue
 = 
ngx_hâp_v¨übÀ_åue_vÆue
;

1601 
	}
}

1605 
	$ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1607 
size_t
 
Àn
;

1608 
ngx_hâp_s¸ùt_ígöe_t
 
À
;

1609 
ngx_hâp_s¸ùt_Àn_code_±
 
lcode
;

1610 
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *
code
;

1612 
code
 = (
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
 *Ë
e
->
ù
;

1614 
e
->
ù
 +(
ngx_hâp_s¸ùt_com∂ex_vÆue_code_t
);

1616 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1619 
	`ngx_memzîo
(&
À
, (
ngx_hâp_s¸ùt_ígöe_t
));

1621 
À
.
ù
 = 
code
->
Àngths
->
ñts
;

1622 
À
.
löe
 = 
e
->line;

1623 
À
.
ªque°
 = 
e
->request;

1624 
À
.
quŸe
 = 
e
->quote;

1626 
Àn
 = 0; *(
uöçå_t
 *Ë
À
.
ù
;Üí +
	`lcode
(&le)) {

1627 
lcode
 = *(
ngx_hâp_s¸ùt_Àn_code_±
 *Ë
À
.
ù
;

1630 
e
->
buf
.
Àn
 =Üen;

1631 
e
->
buf
.
d©a
 = 
	`ngx_≤Æloc
”->
ªque°
->
poﬁ
, 
Àn
);

1632 i‡(
e
->
buf
.
d©a
 =
NULL
) {

1633 
e
->
ù
 = 
ngx_hâp_s¸ùt_exô
;

1634 
e
->
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1638 
e
->
pos
 =É->
buf
.
d©a
;

1640 
e
->
•
->
Àn
 =É->
buf
.len;

1641 
e
->
•
->
d©a
 =É->
buf
.data;

1642 
e
->
•
++;

1643 
	}
}

1647 
	$ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1649 
ngx_hâp_s¸ùt_vÆue_code_t
 *
code
;

1651 
code
 = (
ngx_hâp_s¸ùt_vÆue_code_t
 *Ë
e
->
ù
;

1653 
e
->
ù
 +(
ngx_hâp_s¸ùt_vÆue_code_t
);

1655 
e
->
•
->
Àn
 = 
code
->
ãxt_Àn
;

1656 
e
->
•
->
d©a
 = (
u_ch¨
 *Ë
code
->
ãxt_d©a
;

1658 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1659 "hâ∞s¸ùàvÆue: \"%v\"", 
e
->
•
);

1661 
e
->
•
++;

1662 
	}
}

1666 
	$ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1668 
ngx_hâp_ªque°_t
 *
r
;

1669 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1671 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1673 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1675 
r
 = 
e
->
ªque°
;

1677 
e
->
•
--;

1679 
r
->
v¨übÀs
[
code
->
ödex
].
Àn
 = 
e
->
•
->len;

1680 
r
->
v¨übÀs
[
code
->
ödex
].
vÆid
 = 1;

1681 
r
->
v¨übÀs
[
code
->
ödex
].
no_ˇchóbÀ
 = 0;

1682 
r
->
v¨übÀs
[
code
->
ödex
].
nŸ_found
 = 0;

1683 
r
->
v¨übÀs
[
code
->
ödex
].
d©a
 = 
e
->
•
->data;

1685 #i‡(
NGX_DEBUG
)

1687 
ngx_hâp_v¨übÀ_t
 *
v
;

1688 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

1690 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1692 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

1694 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1695 "hâ∞s¸ùà£à$%V", &
v
[
code
->
ödex
].
«me
);

1698 
	}
}

1702 
	$ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1704 
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *
code
;

1706 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1709 
code
 = (
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
 *Ë
e
->
ù
;

1711 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_h™dÀr_code_t
);

1713 
e
->
•
--;

1715 
code
->
	`h™dÀr
(
e
->
ªque°
,É->
•
, code->
d©a
);

1716 
	}
}

1720 
	$ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1722 
ngx_hâp_v¨übÀ_vÆue_t
 *
vÆue
;

1723 
ngx_hâp_s¸ùt_v¨_code_t
 *
code
;

1725 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1728 
code
 = (
ngx_hâp_s¸ùt_v¨_code_t
 *Ë
e
->
ù
;

1730 
e
->
ù
 +(
ngx_hâp_s¸ùt_v¨_code_t
);

1732 
vÆue
 = 
	`ngx_hâp_gë_Êushed_v¨übÀ
(
e
->
ªque°
, 
code
->
ödex
);

1734 i‡(
vÆue
 && !vÆue->
nŸ_found
) {

1735 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
e
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

1736 "hâ∞s¸ùàv¨: \"%v\"", 
vÆue
);

1738 *
e
->
•
 = *
vÆue
;

1739 
e
->
•
++;

1744 *
e
->
•
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1745 
e
->
•
++;

1746 
	}
}

1750 
	$ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
)

1752 
e
->
ù
 +(
uöçå_t
);

1753 
	}
}

	@src/http/ngx_http_script.h

8 #i‚de‡
_NGX_HTTP_SCRIPT_H_INCLUDED_


9 
	#_NGX_HTTP_SCRIPT_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
u_ch¨
 *
	mù
;

19 
u_ch¨
 *
	mpos
;

20 
ngx_hâp_v¨übÀ_vÆue_t
 *
	m•
;

22 
ngx_°r_t
 
	mbuf
;

23 
ngx_°r_t
 
	mlöe
;

26 
u_ch¨
 *
	m¨gs
;

28 
	mÊushed
:1;

29 
	mskù
:1;

30 
	mquŸe
:1;

31 
	mis_¨gs
:1;

32 
	mlog
:1;

34 
ngx_öt_t
 
	m°©us
;

35 
ngx_hâp_ªque°_t
 *
	mªque°
;

36 } 
	tngx_hâp_s¸ùt_ígöe_t
;

40 
ngx_c⁄f_t
 *
	mcf
;

41 
ngx_°r_t
 *
	msour˚
;

43 
ngx_¨øy_t
 **
	mÊushes
;

44 
ngx_¨øy_t
 **
	mÀngths
;

45 
ngx_¨øy_t
 **
	mvÆues
;

47 
ngx_uöt_t
 
	mv¨übÀs
;

48 
ngx_uöt_t
 
	mnˇ±uªs
;

49 
ngx_uöt_t
 
	mˇ±uªs_mask
;

50 
ngx_uöt_t
 
	msize
;

52 *
	mmaö
;

54 
	mcompûe_¨gs
:1;

55 
	mcom∂ëe_Àngths
:1;

56 
	mcom∂ëe_vÆues
:1;

57 
	mzîo
:1;

58 
	mc⁄f_¥efix
:1;

59 
	mroŸ_¥efix
:1;

61 
	mdup_ˇ±uª
:1;

62 
	m¨gs
:1;

63 } 
	tngx_hâp_s¸ùt_compûe_t
;

67 
ngx_°r_t
 
	mvÆue
;

68 
ngx_uöt_t
 *
	mÊushes
;

69 *
	mÀngths
;

70 *
	mvÆues
;

71 } 
	tngx_hâp_com∂ex_vÆue_t
;

75 
ngx_c⁄f_t
 *
	mcf
;

76 
ngx_°r_t
 *
	mvÆue
;

77 
ngx_hâp_com∂ex_vÆue_t
 *
	mcom∂ex_vÆue
;

79 
	mzîo
:1;

80 
	mc⁄f_¥efix
:1;

81 
	mroŸ_¥efix
:1;

82 } 
	tngx_hâp_compûe_com∂ex_vÆue_t
;

85 (*
	tngx_hâp_s¸ùt_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

86 
	$size_t
 (*
	tngx_hâp_s¸ùt_Àn_code_±
Ë(
	tngx_hâp_s¸ùt_ígöe_t
 *
	te
);

90 
ngx_hâp_s¸ùt_code_±
 
code
;

91 
uöçå_t
 
Àn
;

92 } 
	tngx_hâp_s¸ùt_c›y_code_t
;

96 
ngx_hâp_s¸ùt_code_±
 
code
;

97 
uöçå_t
 
ödex
;

98 } 
	tngx_hâp_s¸ùt_v¨_code_t
;

102 
ngx_hâp_s¸ùt_code_±
 
code
;

103 
ngx_hâp_£t_v¨übÀ_±
 
h™dÀr
;

104 
uöçå_t
 
d©a
;

105 } 
	tngx_hâp_s¸ùt_v¨_h™dÀr_code_t
;

109 
ngx_hâp_s¸ùt_code_±
 
code
;

110 
uöçå_t
 
n
;

111 } 
	tngx_hâp_s¸ùt_c›y_ˇ±uª_code_t
;

114 #i‡(
NGX_PCRE
)

117 
ngx_hâp_s¸ùt_code_±
 
code
;

118 
ngx_hâp_ªgex_t
 *
ªgex
;

119 
ngx_¨øy_t
 *
Àngths
;

120 
uöçå_t
 
size
;

121 
uöçå_t
 
°©us
;

122 
uöçå_t
 
√xt
;

124 
uöçå_t
 
ã°
:1;

125 
uöçå_t
 
√g©ive_ã°
:1;

126 
uöçå_t
 
uri
:1;

127 
uöçå_t
 
¨gs
:1;

130 
uöçå_t
 
add_¨gs
:1;

132 
uöçå_t
 
ªdúe˘
:1;

133 
uöçå_t
 
bªak_cy˛e
:1;

135 
ngx_°r_t
 
«me
;

136 } 
	tngx_hâp_s¸ùt_ªgex_code_t
;

140 
ngx_hâp_s¸ùt_code_±
 
code
;

142 
uöçå_t
 
uri
:1;

143 
uöçå_t
 
¨gs
:1;

146 
uöçå_t
 
add_¨gs
:1;

148 
uöçå_t
 
ªdúe˘
:1;

149 } 
	tngx_hâp_s¸ùt_ªgex_íd_code_t
;

155 
ngx_hâp_s¸ùt_code_±
 
code
;

156 
uöçå_t
 
c⁄f_¥efix
;

157 } 
	tngx_hâp_s¸ùt_fuŒ_«me_code_t
;

161 
ngx_hâp_s¸ùt_code_±
 
code
;

162 
uöçå_t
 
°©us
;

163 
ngx_hâp_com∂ex_vÆue_t
 
ãxt
;

164 } 
	tngx_hâp_s¸ùt_ªtu∫_code_t
;

168 
ngx_hâp_s¸ùt_fûe_∂aö
 = 0,

169 
ngx_hâp_s¸ùt_fûe_nŸ_∂aö
,

170 
ngx_hâp_s¸ùt_fûe_dú
,

171 
ngx_hâp_s¸ùt_fûe_nŸ_dú
,

172 
ngx_hâp_s¸ùt_fûe_exi°s
,

173 
ngx_hâp_s¸ùt_fûe_nŸ_exi°s
,

174 
ngx_hâp_s¸ùt_fûe_exec
,

175 
ngx_hâp_s¸ùt_fûe_nŸ_exec


176 } 
	tngx_hâp_s¸ùt_fûe_›_e
;

180 
ngx_hâp_s¸ùt_code_±
 
code
;

181 
uöçå_t
 
›
;

182 } 
	tngx_hâp_s¸ùt_fûe_code_t
;

186 
ngx_hâp_s¸ùt_code_±
 
code
;

187 
uöçå_t
 
√xt
;

188 **
loc_c⁄f
;

189 } 
	tngx_hâp_s¸ùt_if_code_t
;

193 
ngx_hâp_s¸ùt_code_±
 
code
;

194 
ngx_¨øy_t
 *
Àngths
;

195 } 
	tngx_hâp_s¸ùt_com∂ex_vÆue_code_t
;

199 
ngx_hâp_s¸ùt_code_±
 
code
;

200 
uöçå_t
 
vÆue
;

201 
uöçå_t
 
ãxt_Àn
;

202 
uöçå_t
 
ãxt_d©a
;

203 } 
	tngx_hâp_s¸ùt_vÆue_code_t
;

206 
	`ngx_hâp_s¸ùt_Êush_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

207 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
);

208 
ngx_öt_t
 
	`ngx_hâp_com∂ex_vÆue
(
ngx_hâp_ªque°_t
 *
r
,

209 
ngx_hâp_com∂ex_vÆue_t
 *
vÆ
, 
ngx_°r_t
 *
vÆue
);

210 
ngx_öt_t
 
	`ngx_hâp_compûe_com∂ex_vÆue
(
ngx_hâp_compûe_com∂ex_vÆue_t
 *
ccv
);

211 *
	`ngx_hâp_£t_com∂ex_vÆue_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

212 *
c⁄f
);

215 
ngx_öt_t
 
	`ngx_hâp_ã°_¥ediˇãs
(
ngx_hâp_ªque°_t
 *
r
,

216 
ngx_¨øy_t
 *
¥ediˇãs
);

217 *
	`ngx_hâp_£t_¥ediˇã_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

218 *
c⁄f
);

220 
ngx_uöt_t
 
	`ngx_hâp_s¸ùt_v¨übÀs_cou¡
(
ngx_°r_t
 *
vÆue
);

221 
ngx_öt_t
 
	`ngx_hâp_s¸ùt_compûe
(
ngx_hâp_s¸ùt_compûe_t
 *
sc
);

222 
u_ch¨
 *
	`ngx_hâp_s¸ùt_run
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
vÆue
,

223 *
code_Àngths
, 
size_t
 
ª£rved
, *
code_vÆues
);

224 
	`ngx_hâp_s¸ùt_Êush_no_ˇchóbÀ_v¨übÀs
(
ngx_hâp_ªque°_t
 *
r
,

225 
ngx_¨øy_t
 *
ödi˚s
);

227 *
	`ngx_hâp_s¸ùt_°¨t_code
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_¨øy_t
 **
codes
,

228 
size_t
 
size
);

229 *
	`ngx_hâp_s¸ùt_add_code
(
ngx_¨øy_t
 *
codes
, 
size_t
 
size
, *
code
);

231 
size_t
 
	`ngx_hâp_s¸ùt_c›y_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

232 
	`ngx_hâp_s¸ùt_c›y_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

233 
size_t
 
	`ngx_hâp_s¸ùt_c›y_v¨_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

234 
	`ngx_hâp_s¸ùt_c›y_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

235 
size_t
 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_Àn_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

236 
	`ngx_hâp_s¸ùt_c›y_ˇ±uª_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

237 
size_t
 
	`ngx_hâp_s¸ùt_m¨k_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

238 
	`ngx_hâp_s¸ùt_°¨t_¨gs_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

239 #i‡(
NGX_PCRE
)

240 
	`ngx_hâp_s¸ùt_ªgex_°¨t_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

241 
	`ngx_hâp_s¸ùt_ªgex_íd_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

243 
	`ngx_hâp_s¸ùt_ªtu∫_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

244 
	`ngx_hâp_s¸ùt_bªak_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

245 
	`ngx_hâp_s¸ùt_if_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

246 
	`ngx_hâp_s¸ùt_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

247 
	`ngx_hâp_s¸ùt_nŸ_equÆ_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

248 
	`ngx_hâp_s¸ùt_fûe_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

249 
	`ngx_hâp_s¸ùt_com∂ex_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

250 
	`ngx_hâp_s¸ùt_vÆue_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

251 
	`ngx_hâp_s¸ùt_£t_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

252 
	`ngx_hâp_s¸ùt_v¨_£t_h™dÀr_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

253 
	`ngx_hâp_s¸ùt_v¨_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

254 
	`ngx_hâp_s¸ùt_n›_code
(
ngx_hâp_s¸ùt_ígöe_t
 *
e
);

	@src/http/ngx_http_spdy.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

13 
	~<zlib.h
>

16 #i‡(
NGX_HAVE_LITTLE_ENDIAN
 && 
NGX_HAVE_NONALIGNED
)

18 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

19 *(
uöt32_t
 *Ë
m
 =(
c3
 << 24 | 
c2
 << 16 | 
c1
 << 8 | 
c0
) \

20 && 
m
[4] =
c4


	)

24 
	#ngx_°r5cmp
(
m
, 
c0
, 
c1
, 
c2
, 
c3
, 
c4
) \

25 
m
[0] =
c0
 && m[1] =
c1
 && m[2] =
c2
 && m[3] =
c3
 && m[4] =
c4


	)

30 #i‡(
NGX_HAVE_NONALIGNED
)

32 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë
	`¡ohs
(*(
uöt16_t
 *Ë’))

	)

33 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë
	`¡ohl
(*(
uöt32_t
 *Ë’))

	)

37 
	#ngx_•dy_‰ame_∑r£_uöt16
(
p
Ë(’)[0] << 8 | (p)[1])

	)

38 
	#ngx_•dy_‰ame_∑r£_uöt32
(
p
) \

39 ((
p
)[0] << 24 | (p)[1] << 16 | (p)[2] << 8 | (p)[3])

	)

43 
	#ngx_•dy_‰ame_∑r£_sid
(
p
) \

44 (
	`ngx_•dy_‰ame_∑r£_uöt32
(
p
Ë& 0x7fffffff)

	)

47 
	#ngx_•dy_˘l_‰ame_check
(
h
) \

48 (((
h
Ë& 0xffffff00Ë=
	`ngx_•dy_˘l_‰ame_hód
(0))

	)

49 
	#ngx_•dy_d©a_‰ame_check
(
h
) \

50 (!((
h
Ë& (
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31))

	)

52 
	#ngx_•dy_˘l_‰ame_ty≥
(
h
Ë((hË& 0x000000ff)

	)

53 
	#ngx_•dy_‰ame_Êags
(
p
Ë(’Ë>> 24)

	)

54 
	#ngx_•dy_‰ame_Àngth
(
p
Ë(’Ë& 0x00ffffff)

	)

57 
	#NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
 4096

	)

58 
	#NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 16

	)

60 
	#NGX_SPDY_PROTOCOL_ERROR
 1

	)

61 
	#NGX_SPDY_INVALID_STREAM
 2

	)

62 
	#NGX_SPDY_REFUSED_STREAM
 3

	)

63 
	#NGX_SPDY_UNSUPPORTED_VERSION
 4

	)

64 
	#NGX_SPDY_CANCEL
 5

	)

65 
	#NGX_SPDY_INTERNAL_ERROR
 6

	)

66 
	#NGX_SPDY_FLOW_CONTROL_ERROR
 7

	)

68 
	#NGX_SPDY_SETTINGS_MAX_STREAMS
 4

	)

70 
	#NGX_SPDY_SETTINGS_FLAG_PERSIST
 0x01

	)

73 
ngx_uöt_t
 
	mhash
;

74 
u_ch¨
 
	mÀn
;

75 
u_ch¨
 
	mhódî
[7];

76 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_ªque°_t
 *
	mr
);

77 } 
	tngx_hâp_•dy_ªque°_hódî_t
;

80 
ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

81 
ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

82 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

84 
u_ch¨
 *
ngx_hâp_•dy_°©e_dëe˘_£âögs
(

85 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

86 
u_ch¨
 *
ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

87 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

88 
u_ch¨
 *
ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

89 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

90 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

91 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

92 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

93 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

94 
u_ch¨
 *
ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

95 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

96 
u_ch¨
 *
ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

97 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

98 
u_ch¨
 *
ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

99 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

100 
u_ch¨
 *
ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

101 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

102 
u_ch¨
 *
ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

103 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

104 
u_ch¨
 *
ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

105 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

106 
u_ch¨
 *
ngx_hâp_•dy_°©e_no›
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

107 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

108 
u_ch¨
 *
ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

109 
u_ch¨
 *
pos
, u_ch¨ *
íd
);

110 
u_ch¨
 *
ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

111 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
);

112 
u_ch¨
 *
ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(

113 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

114 
u_ch¨
 *
ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(

115 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

117 
ngx_öt_t
 
ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

118 
ngx_uöt_t
 
sid
,Çgx_uöt_à
°©us
,Çgx_uöt_à
¥i‹ôy
);

119 
ngx_öt_t
 
ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

120 
ngx_öt_t
 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(

121 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

122 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_gë_˘l_‰ame
(

123 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
size
, 
ngx_uöt_t
 
¥i‹ôy
);

124 
ngx_öt_t
 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
(

125 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

127 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_¸óã_°ªam
(

128 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,Çgx_uöt_à
¥i‹ôy
);

129 
ngx_hâp_•dy_°ªam_t
 *
ngx_hâp_•dy_gë_°ªam_by_id
(

130 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
);

131 
	#ngx_hâp_•dy_°ªams_ödex_size
(
sscf
Ë(sscf->
°ªams_ödex_mask
 + 1)

	)

132 
	#ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
) \

133 ((
sid
 >> 1Ë& 
sscf
->
°ªams_ödex_mask
)

	)

135 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
);

136 
ngx_öt_t
 
ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
);

138 
ngx_öt_t
 
ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
);

139 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
);

140 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
);

141 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_uæ
(
ngx_hâp_ªque°_t
 *
r
);

142 
ngx_öt_t
 
ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
);

144 
ngx_öt_t
 
ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
);

145 
ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

146 
ngx_öt_t
 
ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
);

148 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
);

149 
ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
);

150 
ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

151 
ngx_öt_t
 
rc
);

153 
ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
);

155 *
ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
);

156 
ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
);

159 c⁄° 
u_ch¨
 
	gngx_hâp_•dy_di˘
[] =

186 
ngx_hâp_•dy_ªque°_hódî_t
 
	gngx_hâp_•dy_ªque°_hódîs
[] = {

187 { 0, 6, "mëhod", 
ngx_hâp_•dy_∑r£_mëhod
 },

188 { 0, 6, "scheme", 
ngx_hâp_•dy_∑r£_scheme
 },

189 { 0, 3, "uæ", 
ngx_hâp_•dy_∑r£_uæ
 },

190 { 0, 7, "vîsi⁄", 
ngx_hâp_•dy_∑r£_vîsi⁄
 },

193 
	#NGX_SPDY_REQUEST_HEADERS
 \

194 ((
ngx_hâp_•dy_ªque°_hódîs
) \

195 / (
ngx_hâp_•dy_ªque°_hódî_t
))

	)

199 
	$ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
)

201 
rc
;

202 
ngx_c⁄√˘i⁄_t
 *
c
;

203 
ngx_poﬁ_˛ónup_t
 *
˛n
;

204 
ngx_hâp_c⁄√˘i⁄_t
 *
hc
;

205 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

206 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

207 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

209 
c
 = 
ªv
->
d©a
;

210 
hc
 = 
c
->
d©a
;

212 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

215 
c
->
log
->
a˘i⁄
 = "processing SPDY";

217 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

219 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

220 
smcf
->
ªcv_buf„r
 = 
	`ngx_∑Œoc
(
ngx_cy˛e
->
poﬁ
, smcf->
ªcv_buf„r_size
);

221 i‡(
smcf
->
ªcv_buf„r
 =
NULL
) {

222 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

227 
sc
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_hâp_•dy_c⁄√˘i⁄_t
));

228 i‡(
sc
 =
NULL
) {

229 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

233 
sc
->
c⁄√˘i⁄
 = 
c
;

234 
sc
->
hâp_c⁄√˘i⁄
 = 
hc
;

236 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_°©e_dëe˘_£âögs
;

238 
sc
->
z°ªam_ö
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

239 
sc
->
z°ªam_ö
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

240 
sc
->
z°ªam_ö
.
›aque
 = sc;

242 
rc
 = 
	`öÊ©eInô
(&
sc
->
z°ªam_ö
);

243 i‡(
rc
 !
Z_OK
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

245 "öÊ©eInô(ËÁûed: %d", 
rc
);

246 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

250 
sc
->
z°ªam_out
.
zÆloc
 = 
ngx_hâp_•dy_zÆloc
;

251 
sc
->
z°ªam_out
.
z‰ì
 = 
ngx_hâp_•dy_z‰ì
;

252 
sc
->
z°ªam_out
.
›aque
 = sc;

254 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
hc
->
c⁄f_˘x
, 
ngx_hâp_•dy_moduÀ
);

256 
rc
 = 
	`deÊ©eInô2
(&
sc
->
z°ªam_out
, (Ë
sscf
->
hódîs_comp
,

257 
Z_DEFLATED
, 11, 4, 
Z_DEFAULT_STRATEGY
);

259 i‡(
rc
 !
Z_OK
) {

260 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

261 "deÊ©eInô2(ËÁûed: %d", 
rc
);

262 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

266 
rc
 = 
	`deÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_out
, 
ngx_hâp_•dy_di˘
,

267 (
ngx_hâp_•dy_di˘
));

268 i‡(
rc
 !
Z_OK
) {

269 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

270 "deÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
rc
);

271 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

275 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

276 i‡(
sc
->
poﬁ
 =
NULL
) {

277 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

281 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
c
->
poﬁ
, (
ngx_poﬁ_˛ónup_fûe_t
));

282 i‡(
˛n
 =
NULL
) {

283 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

287 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_poﬁ_˛ónup
;

288 
˛n
->
d©a
 = 
sc
;

290 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

291 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

292 * (
ngx_hâp_•dy_°ªam_t
 *));

293 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

294 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

298 
c
->
d©a
 = 
sc
;

300 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

301 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

303 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

304 
	}
}

308 
	$ngx_hâp_•dy_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

310 
u_ch¨
 *
p
, *
íd
;

311 
size_t
 
avaûabÀ
;

312 
ssize_t
 
n
;

313 
ngx_c⁄√˘i⁄_t
 *
c
;

314 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

315 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

317 
c
 = 
ªv
->
d©a
;

318 
sc
 = 
c
->
d©a
;

320 i‡(
ªv
->
timedout
) {

321 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

322 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_REQUEST_TIME_OUT
);

326 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdyÑead handler");

328 
sc
->
blocked
 = 1;

330 
smcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

331 
ngx_hâp_•dy_moduÀ
);

333 
avaûabÀ
 = 
smcf
->
ªcv_buf„r_size
 - 2 * 
NGX_SPDY_STATE_BUFFER_SIZE
;

336 
p
 = 
smcf
->
ªcv_buf„r
;

338 
	`ngx_mem˝y
(
p
, 
sc
->
buf„r
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

339 
íd
 = 
p
 + 
sc
->
buf„r_u£d
;

341 
n
 = 
c
->
	`ªcv
(c, 
íd
, 
avaûabÀ
);

343 i‡(
n
 =
NGX_AGAIN
) {

347 i‡(
n
 =0 && (
sc
->
waôög
 || sc->
¥o˚ssög
)) {

348 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

352 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

353 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
,

354 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

358 
íd
 +
n
;

360 
sc
->
buf„r_u£d
 = 0;

361 
sc
->
waôög
 = 0;

364 
p
 = 
sc
->
	`h™dÀr
(sc,Ö, 
íd
);

366 i‡(
p
 =
NULL
) {

370 } 
p
 !
íd
);

372 } 
ªv
->
ªady
);

374 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

375 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

379 
sc
->
blocked
 = 0;

381 i‡(
sc
->
¥o˚ssög
) {

382 i‡(
ªv
->
timî_£t
) {

383 
	`ngx_dñ_timî
(
ªv
);

388 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

389 
	}
}

393 
	$ngx_hâp_•dy_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

395 
ngx_öt_t
 
rc
;

396 
ngx_c⁄√˘i⁄_t
 *
c
;

397 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, *
s
, *
¢
;

398 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

400 
c
 = 
wev
->
d©a
;

401 
sc
 = 
c
->
d©a
;

403 i‡(
wev
->
timedout
) {

404 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

406 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

410 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy write handler");

412 
sc
->
blocked
 = 2;

414 
rc
 = 
	`ngx_hâp_•dy_£nd_ouçut_queue
(
sc
);

416 i‡(
rc
 =
NGX_ERROR
) {

417 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

421 
°ªam
 = 
NULL
;

423 
s
 = 
sc
->
œ°_°ªam
; s; s = 
¢
) {

424 
¢
 = 
s
->
√xt
;

425 
s
->
√xt
 = 
°ªam
;

426 
°ªam
 = 
s
;

429 
sc
->
œ°_°ªam
 = 
NULL
;

431 
sc
->
blocked
 = 1;

433  ; 
°ªam
; såóm = 
¢
) {

434 
¢
 = 
°ªam
->
√xt
;

435 
°ªam
->
h™dÀd
 = 0;

437 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

438 "•dyÑu¿°ªam %ui", 
°ªam
->
id
);

440 
wev
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
wrôe
;

441 
wev
->
	`h™dÀr
(wev);

444 
sc
->
blocked
 = 0;

446 i‡(
rc
 =
NGX_AGAIN
) {

450 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
sc
);

451 
	}
}

454 
ngx_öt_t


455 
	$ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

457 
ngx_chaö_t
 *
˛
;

458 
ngx_evít_t
 *
wev
;

459 
ngx_c⁄√˘i⁄_t
 *
c
;

460 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

461 
ngx_hâp_•dy_out_‰ame_t
 *
out
, *
‰ame
, *
‚
;

463 
c
 = 
sc
->
c⁄√˘i⁄
;

465 i‡(
c
->
îr‹
) {

466  
NGX_ERROR
;

469 
wev
 = 
c
->
wrôe
;

471 i‡(!
wev
->
ªady
) {

472  
NGX_OK
;

475 
˛
 = 
NULL
;

476 
out
 = 
NULL
;

478 
‰ame
 = 
sc
->
œ°_out
; føme; fømê
‚
) {

479 
‰ame
->
œ°
->
√xt
 = 
˛
;

480 
˛
 = 
‰ame
->
fú°
;

482 
‚
 = 
‰ame
->
√xt
;

483 
‰ame
->
√xt
 = 
out
;

484 
out
 = 
‰ame
;

486 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

488 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0, out->
¥i‹ôy
,

489 
out
->
blocked
, out->
size
);

492 
˛
 = 
c
->
	`£nd_chaö
(c, cl, 0);

494 i‡(
˛
 =
NGX_CHAIN_ERROR
) {

495 
c
->
îr‹
 = 1;

497 i‡(!
sc
->
blocked
) {

498 
	`ngx_po°_evít
(
wev
, &
ngx_po°ed_evíts
);

501  
NGX_ERROR
;

504 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

505 
ngx_hâp_c‹e_moduÀ
);

507 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
˛cf
->
£nd_low©
Ë!
NGX_OK
) {

508  
NGX_ERROR
;

511 i‡(
˛
) {

512 
	`ngx_add_timî
(
wev
, 
˛cf
->
£nd_timeout
);

515 i‡(
wev
->
timî_£t
) {

516 
	`ngx_dñ_timî
(
wev
);

520  ; 
out
; ouàout->
√xt
) {

521 i‡(
out
->
	`h™dÀr
(
sc
, outË!
NGX_OK
) {

522 
out
->
blocked
 = 1;

523 
out
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

527 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

529 
out
, out->
°ªam
 ? out->°ªam->
id
 : 0,

530 
out
->
blocked
, out->
size
);

533 
‰ame
 = 
NULL
;

535  ; 
out
; ouà
‚
) {

536 
‚
 = 
out
->
√xt
;

537 
out
->
√xt
 = 
‰ame
;

538 
‰ame
 = 
out
;

541 
sc
->
œ°_out
 = 
‰ame
;

543  
NGX_OK
;

544 
	}
}

548 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

550 
ngx_c⁄√˘i⁄_t
 *
c
;

551 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

553 i‡(
sc
->
œ°_out
 || sc->
¥o˚ssög
) {

557 
c
 = 
sc
->
c⁄√˘i⁄
;

559 i‡(
c
->
îr‹
) {

560 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

564 i‡(
c
->
buf„ªd
) {

568 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

569 
ngx_hâp_•dy_moduÀ
);

570 i‡(
sc
->
waôög
) {

571 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
ªcv_timeout
);

575 i‡(
ngx_ãrmö©e
 || 
ngx_exôög
) {

576 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

580 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

582 
sc
->
poﬁ
 = 
NULL
;

583 
sc
->
‰ì_˘l_‰ames
 = 
NULL
;

584 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
NULL
;

586 #i‡(
NGX_HTTP_SSL
)

587 i‡(
c
->
s¶
) {

588 
	`ngx_s¶_‰ì_buf„r
(
c
);

592 
c
->
de°royed
 = 1;

593 
c
->
idÀ
 = 1;

594 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 1);

596 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

597 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_•dy_kì∑live_h™dÀr
;

599 i‡(
c
->
wrôe
->
timî_£t
) {

600 
	`ngx_dñ_timî
(
c
->
wrôe
);

603 
	`ngx_add_timî
(
c
->
ªad
, 
sscf
->
kì∑live_timeout
);

604 
	}
}

607 
u_ch¨
 *

608 
	$ngx_hâp_•dy_°©e_dëe˘_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

609 
u_ch¨
 *
pos
, u_ch¨ *
íd
)

611 i‡(
íd
 - 
pos
 < 
NGX_SPDY_FRAME_HEADER_SIZE
) {

612  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

613 
ngx_hâp_•dy_°©e_dëe˘_£âögs
);

621 i‡(*(
uöt32_t
 *Ë
pos
 =
	`ht⁄l
(
	`ngx_•dy_˘l_‰ame_hód
(
NGX_SPDY_SETTINGS
)))

623 
sc
->
Àngth
 = 
	`ngx_•dy_‰ame_Àngth
(
	`ht⁄l
(((
uöt32_t
 *Ë
pos
)[1]));

625 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

626 "•dy SETTINGS fømêª˚ived, size: %uz", 
sc
->
Àngth
);

628 
pos
 +
NGX_SPDY_FRAME_HEADER_SIZE
;

630  
	`ngx_hâp_•dy_°©e_£âögs
(
sc
, 
pos
, 
íd
);

633 
	`ngx_hâp_•dy_£nd_£âögs
(
sc
);

635  
	`ngx_hâp_•dy_°©e_hód
(
sc
, 
pos
, 
íd
);

636 
	}
}

639 
u_ch¨
 *

640 
	$ngx_hâp_•dy_°©e_hód
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

641 
u_ch¨
 *
íd
)

643 
uöt32_t
 
hód
, 
Êí
;

645 i‡(
íd
 - 
pos
 < 
NGX_SPDY_FRAME_HEADER_SIZE
) {

646  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

647 
ngx_hâp_•dy_°©e_hód
);

650 
hód
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

652 
pos
 +(
uöt32_t
);

654 
Êí
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

656 
sc
->
Êags
 = 
	`ngx_•dy_‰ame_Êags
(
Êí
);

657 
sc
->
Àngth
 = 
	`ngx_•dy_‰ame_Àngth
(
Êí
);

659 
pos
 +(
uöt32_t
);

661 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

663 
hód
, 
sc
->
Êags
, sc->
Àngth
);

665 i‡(
	`ngx_•dy_˘l_‰ame_check
(
hód
)) {

666 
	`ngx_•dy_˘l_‰ame_ty≥
(
hód
)) {

668 
NGX_SPDY_SYN_STREAM
:

669  
	`ngx_hâp_•dy_°©e_syn_°ªam
(
sc
, 
pos
, 
íd
);

671 
NGX_SPDY_SYN_REPLY
:

672  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

674 
NGX_SPDY_RST_STREAM
:

675  
	`ngx_hâp_•dy_°©e_r°_°ªam
(
sc
, 
pos
, 
íd
);

677 
NGX_SPDY_SETTINGS
:

678  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

680 
NGX_SPDY_NOOP
:

681  
	`ngx_hâp_•dy_°©e_no›
(
sc
, 
pos
, 
íd
);

683 
NGX_SPDY_PING
:

684  
	`ngx_hâp_•dy_°©e_pög
(
sc
, 
pos
, 
íd
);

686 
NGX_SPDY_GOAWAY
:

687  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

689 
NGX_SPDY_HEADERS
:

690  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

693  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

697 i‡(
	`ngx_•dy_d©a_‰ame_check
(
hód
)) {

698 
sc
->
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(sc, 
hód
);

699  
	`ngx_hâp_•dy_°©e_d©a
(
sc
, 
pos
, 
íd
);

704 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

707  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

708 
	}
}

711 
u_ch¨
 *

712 
	$ngx_hâp_•dy_°©e_syn_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

713 
u_ch¨
 *
íd
)

715 
ngx_uöt_t
 
sid
, 
¥io
;

716 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

717 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

719 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SYN_STREAM_SIZE
) {

720  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

721 
ngx_hâp_•dy_°©e_syn_°ªam
);

724 i‡(
sc
->
Àngth
 <
NGX_SPDY_SYN_STREAM_SIZE
) {

726  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

729 
sc
->
Àngth
 -
NGX_SPDY_SYN_STREAM_SIZE
;

731 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

732 
¥io
 = 
pos
[8] >> 6;

734 
pos
 +
NGX_SPDY_SYN_STREAM_SIZE
;

736 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

737 "•dy SYN_STREAM fømêsid:%uò¥io:%ui", 
sid
, 
¥io
);

739 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

740 
ngx_hâp_•dy_moduÀ
);

742 i‡(
sc
->
¥o˚ssög
 >
sscf
->
c⁄cuºít_°ªams
) {

744 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

745 "•dy c⁄cuºíà°ªam†ex˚s£d %ui", 
sc
->
¥o˚ssög
);

747 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
sid
, 
NGX_SPDY_REFUSED_STREAM
,

748 
¥io
)

749 !
NGX_OK
)

751  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

754  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

757 
°ªam
 = 
	`ngx_hâp_•dy_¸óã_°ªam
(
sc
, 
sid
, 
¥io
);

758 i‡(
°ªam
 =
NULL
) {

759  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

762 
°ªam
->
ö_˛o£d
 = (
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) ? 1 : 0;

764 
°ªam
->
ªque°
->
ªque°_Àngth
 = 
NGX_SPDY_FRAME_HEADER_SIZE


765 + 
NGX_SPDY_SYN_STREAM_SIZE


766 + 
sc
->
Àngth
;

768 
sc
->
°ªam
 = stream;

770 
sc
->
œ°_sid
 = 
sid
;

772  
	`ngx_hâp_•dy_°©e_hódîs
(
sc
, 
pos
, 
íd
);

773 
	}
}

776 
u_ch¨
 *

777 
	$ngx_hâp_•dy_°©e_hódîs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

778 
u_ch¨
 *
íd
)

780 
z
;

781 
size_t
 
size
;

782 
ngx_buf_t
 *
buf
;

783 
ngx_öt_t
 
rc
;

784 
ngx_uöt_t
 
com∂ëe
;

785 
ngx_hâp_ªque°_t
 *
r
;

787 
size
 = 
íd
 - 
pos
;

789 i‡(
size
 == 0) {

790  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

791 
ngx_hâp_•dy_°©e_hódîs
);

794 i‡(
size
 >
sc
->
Àngth
) {

795 
size
 = 
sc
->
Àngth
;

796 
com∂ëe
 = 1;

799 
com∂ëe
 = 0;

802 
r
 = 
sc
->
°ªam
->
ªque°
;

804 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

805 "•dyÖro˚s†HEADERS %uz o‡%uz", 
size
, 
sc
->
Àngth
);

807 
buf
 = 
r
->
hódî_ö
;

809 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

810 
sc
->
z°ªam_ö
.
avaû_ö
 = 
size
;

811 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

812 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

814 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

816 i‡(
z
 =
Z_NEED_DICT
) {

817 
z
 = 
	`öÊ©eSëDi˘i⁄¨y
(&
sc
->
z°ªam_ö
, 
ngx_hâp_•dy_di˘
,

818 (
ngx_hâp_•dy_di˘
));

819 i‡(
z
 !
Z_OK
) {

820 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

821 "•dy inÊ©eSëDi˘i⁄¨y(ËÁûed: %d", 
z
);

822 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

823  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

826 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

827 "•dy inÊ©eSëDi˘i⁄¨y(): %d", 
z
);

829 
z
 = 
sc
->
z°ªam_ö
.
avaû_ö
 ? 
	`öÊ©e
(&sc->z°ªam_ö, 
Z_NO_FLUSH
)

830 : 
Z_OK
;

833 i‡(
z
 !
Z_OK
) {

834 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

835 "•dy inÊ©e(ËÁûed: %d", 
z
);

836 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

837  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

840 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

842 
sc
->
z°ªam_ö
.
√xt_ö
, sc->z°ªam_ö.
√xt_out
,

843 
sc
->
z°ªam_ö
.
avaû_ö
, sc->z°ªam_ö.
avaû_out
,

844 
z
);

846 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

847 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

849 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

851 i‡(
r
->
hódîs_ö
.
hódîs
.
∑π
.
ñts
 =
NULL
) {

853 i‡(
buf
->
œ°
 - buf->
pos
 < 
NGX_SPDY_NV_NUM_SIZE
) {

854  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

855 
ngx_hâp_•dy_°©e_hódîs
);

858 
sc
->
hódîs
 = 
	`ngx_•dy_‰ame_∑r£_uöt16
(
buf
->
pos
);

860 
buf
->
pos
 +
NGX_SPDY_NV_NUM_SIZE
;

862 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

863 "•dy hódî†cou¡: %ui", 
sc
->
hódîs
);

865 i‡(
	`ngx_li°_öô
(&
r
->
hódîs_ö
.
hódîs
,Ñ->
poﬁ
, 
sc
->headers + 3,

866 (
ngx_èbÀ_ñt_t
))

867 !
NGX_OK
)

869 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

870 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

871  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

874 i‡(
	`ngx_¨øy_öô
(&
r
->
hódîs_ö
.
cookõs
,Ñ->
poﬁ
, 2,

875 (
ngx_èbÀ_ñt_t
 *))

876 !
NGX_OK
)

878 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

879 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

880  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

884 
sc
->
hódîs
) {

886 
rc
 = 
	`ngx_hâp_•dy_∑r£_hódî
(
r
);

888 
rc
) {

890 
NGX_DONE
:

891 
sc
->
hódîs
--;

893 
NGX_OK
:

896 
NGX_AGAIN
:

898 i‡(
sc
->
z°ªam_ö
.
avaû_ö
) {

900 
rc
 = 
	`ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
r
);

902 i‡(
rc
 =
NGX_DECLINED
) {

904 
	`ngx_hâp_föÆize_ªque°
(
r
,

905 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
);

906  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

909 i‡(
rc
 !
NGX_OK
) {

910 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
,

911 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

912  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

915 
buf
 = 
r
->
hódî_ö
;

917 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf
->
œ°
;

918 
sc
->
z°ªam_ö
.
avaû_out
 = 
buf
->
íd
 - buf->
œ°
 - 1;

920 
z
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

922 i‡(
z
 !
Z_OK
) {

923 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

924 "•dy inÊ©e(ËÁûed: %d", 
z
);

925 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

926  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

929 
sc
->
Àngth
 -sc->
z°ªam_ö
.
√xt_ö
 - 
pos
;

930 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

932 
buf
->
œ°
 = 
sc
->
z°ªam_ö
.
√xt_out
;

937 i‡(
com∂ëe
) {

939 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

941 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 0);

942  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

945  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

946 
ngx_hâp_•dy_°©e_hódîs
);

948 
NGX_HTTP_PARSE_INVALID_REQUEST
:

951 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

954 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

956  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

960 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

962 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

963  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

968 
rc
 = 
	`ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
r
);

970 i‡(
rc
 !
NGX_OK
) {

971 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_HEADER
) {

972 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

974 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

975  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

978 i‡(
rc
 =
NGX_HTTP_PARSE_INVALID_REQUEST
) {

979 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

982  
	`ngx_hâp_•dy_°©e_hódîs_îr‹
(
sc
, 
pos
, 
íd
);

986 i‡(
buf
->
pos
 !buf->
œ°
) {

988 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

989 "íd %uò%∞%p", 
com∂ëe
, 
buf
->
pos
, buf->
œ°
);

990 
	`ngx_hâp_•dy_˛o£_°ªam
(
sc
->
°ªam
, 
NGX_HTTP_BAD_REQUEST
);

991  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

994 i‡(!
com∂ëe
) {

995  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

996 
ngx_hâp_•dy_°©e_hódîs
);

999 
	`ngx_hâp_•dy_run_ªque°
(
r
);

1001  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1002 
	}
}

1005 
u_ch¨
 *

1006 
	$ngx_hâp_•dy_°©e_hódîs_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1007 
u_ch¨
 *
íd
)

1009 i‡(
sc
->
c⁄√˘i⁄
->
îr‹
) {

1010  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1013  
	`ngx_hâp_•dy_°©e_hódîs_skù
(
sc
, 
pos
, 
íd
);

1014 
	}
}

1017 
u_ch¨
 *

1018 
	$ngx_hâp_•dy_°©e_hódîs_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1019 
u_ch¨
 *
íd
)

1021 
n
;

1022 
size_t
 
size
;

1023 
u_ch¨
 
buf„r
[
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
];

1025 i‡(
sc
->
Àngth
 == 0) {

1026  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1029 
size
 = 
íd
 - 
pos
;

1031 i‡(
size
 == 0) {

1032  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1033 
ngx_hâp_•dy_°©e_hódîs_skù
);

1036 
sc
->
z°ªam_ö
.
√xt_ö
 = 
pos
;

1037 
sc
->
z°ªam_ö
.
avaû_ö
 = (
size
 < sc->
Àngth
) ? size : sc->length;

1039 
sc
->
z°ªam_ö
.
avaû_ö
) {

1040 
sc
->
z°ªam_ö
.
√xt_out
 = 
buf„r
;

1041 
sc
->
z°ªam_ö
.
avaû_out
 = 
NGX_SPDY_SKIP_HEADERS_BUFFER_SIZE
;

1043 
n
 = 
	`öÊ©e
(&
sc
->
z°ªam_ö
, 
Z_NO_FLUSH
);

1045 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1046 "•dy inÊ©e(): %d", 
n
);

1048 i‡(
n
 !
Z_OK
) {

1050  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1054 
pos
 = 
sc
->
z°ªam_ö
.
√xt_ö
;

1056 i‡(
size
 < 
sc
->
Àngth
) {

1057 
sc
->
Àngth
 -
size
;

1058  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1059 
ngx_hâp_•dy_°©e_hódîs_skù
);

1062  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1063 
	}
}

1066 
u_ch¨
 *

1067 
	$ngx_hâp_•dy_°©e_d©a
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1068 
u_ch¨
 *
íd
)

1070 
size_t
 
size
;

1071 
ssize_t
 
n
;

1072 
ngx_buf_t
 *
buf
;

1073 
ngx_öt_t
 
rc
;

1074 
ngx_uöt_t
 
com∂ëe
;

1075 
ngx_ãmp_fûe_t
 *
tf
;

1076 
ngx_hâp_ªque°_t
 *
r
;

1077 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1078 
ngx_hâp_ªque°_body_t
 *
rb
;

1079 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1081 
°ªam
 = 
sc
->stream;

1083 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1086 i‡(
°ªam
 =
NULL
) {

1087  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1090 i‡(
°ªam
->
ö_˛o£d
) {

1092  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1095 i‡(
°ªam
->
skù_d©a
) {

1097 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1098 
°ªam
->
ö_˛o£d
 = 1;

1102  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1105 
size
 = 
íd
 - 
pos
;

1107 i‡(
size
 >
sc
->
Àngth
) {

1108 
size
 = 
sc
->
Àngth
;

1109 
com∂ëe
 = 1;

1112 
sc
->
Àngth
 -
size
;

1113 
com∂ëe
 = 0;

1116 
r
 = 
°ªam
->
ªque°
;

1118 i‡(
r
->
ªque°_body
 =
NULL


1119 && 
	`ngx_hâp_•dy_öô_ªque°_body
(
r
Ë!
NGX_OK
)

1121 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1122  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1125 
rb
 = 
r
->
ªque°_body
;

1126 
tf
 = 
rb
->
ãmp_fûe
;

1127 
buf
 = 
rb
->buf;

1129 i‡(
size
) {

1130 
rb
->
ª°
 +
size
;

1132 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 != -1

1133 && 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 
rb
->
ª°
)

1136 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1137 
îr‹
;

1140 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1142 i‡(
˛cf
->
˛õ¡_max_body_size


1143 && 
˛cf
->
˛õ¡_max_body_size
 < 
rb
->
ª°
)

1145 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1148 
rb
->
ª°
);

1150 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_ERROR
;

1151 
îr‹
;

1155 i‡(
tf
) {

1156 
buf
->
°¨t
 = 
pos
;

1157 
buf
->
pos
 =Öos;

1159 
pos
 +
size
;

1161 
buf
->
íd
 = 
pos
;

1162 
buf
->
œ°
 = 
pos
;

1164 
n
 = 
	`ngx_wrôe_chaö_to_ãmp_fûe
(
tf
, 
rb
->
bufs
);

1168 i‡(
n
 =
NGX_ERROR
) {

1169 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

1170 
îr‹
;

1173 
tf
->
off£t
 +
n
;

1176 
buf
->
œ°
 = 
	`ngx_˝ymem
(buf->œ°, 
pos
, 
size
);

1177 
pos
 +
size
;

1180 
r
->
ªque°_Àngth
 +
size
;

1183 i‡(!
com∂ëe
) {

1184  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1185 
ngx_hâp_•dy_°©e_d©a
);

1188 i‡(
sc
->
Êags
 & 
NGX_SPDY_FLAG_FIN
) {

1190 
°ªam
->
ö_˛o£d
 = 1;

1192 i‡(
tf
) {

1193 
	`ngx_memzîo
(
buf
, (
ngx_buf_t
));

1195 
buf
->
ö_fûe
 = 1;

1196 
buf
->
fûe_œ°
 = 
tf
->
fûe
.
off£t
;

1197 
buf
->
fûe
 = &
tf
->file;

1199 
rb
->
buf
 = 
NULL
;

1202 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 < 0) {

1203 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
rb
->
ª°
;

1206 i‡(
rb
->
po°_h™dÀr
) {

1207 
rb
->
	`po°_h™dÀr
(
r
);

1211  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1213 
îr‹
:

1215 i‡(
rb
->
po°_h™dÀr
) {

1217 i‡(
°ªam
->
skù_d©a
 =
NGX_SPDY_DATA_ERROR
) {

1218 
rc
 = (
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1)

1219 ? 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE


1220 : 
NGX_HTTP_BAD_REQUEST
;

1223 
rc
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

1226 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

1229  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1230 
	}
}

1233 
u_ch¨
 *

1234 
	$ngx_hâp_•dy_°©e_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1235 
u_ch¨
 *
íd
)

1237 
ngx_uöt_t
 
sid
, 
°©us
;

1238 
ngx_evít_t
 *
ev
;

1239 
ngx_c⁄√˘i⁄_t
 *
fc
;

1240 
ngx_hâp_ªque°_t
 *
r
;

1241 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1243 i‡(
íd
 - 
pos
 < 
NGX_SPDY_RST_STREAM_SIZE
) {

1244  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1245 
ngx_hâp_•dy_°©e_r°_°ªam
);

1248 i‡(
sc
->
Àngth
 !
NGX_SPDY_RST_STREAM_SIZE
) {

1250  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1253 
sid
 = 
	`ngx_•dy_‰ame_∑r£_sid
(
pos
);

1255 
pos
 +
NGX_SPDY_SID_SIZE
;

1257 
°©us
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1259 
pos
 +(
uöt32_t
);

1261 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1262 "•dy RST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

1265 
°©us
) {

1267 
NGX_SPDY_PROTOCOL_ERROR
:

1269  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1271 
NGX_SPDY_INVALID_STREAM
:

1275 
NGX_SPDY_REFUSED_STREAM
:

1279 
NGX_SPDY_UNSUPPORTED_VERSION
:

1281  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1283 
NGX_SPDY_CANCEL
:

1284 
NGX_SPDY_INTERNAL_ERROR
:

1285 
°ªam
 = 
	`ngx_hâp_•dy_gë_°ªam_by_id
(
sc
, 
sid
);

1286 i‡(
°ªam
 =
NULL
) {

1291 
°ªam
->
ö_˛o£d
 = 1;

1292 
°ªam
->
out_˛o£d
 = 1;

1294 
r
 = 
°ªam
->
ªque°
;

1296 
fc
 = 
r
->
c⁄√˘i⁄
;

1297 
fc
->
îr‹
 = 1;

1299 
ev
 = 
fc
->
ªad
;

1300 
ev
->
	`h™dÀr
(ev);

1304 
NGX_SPDY_FLOW_CONTROL_ERROR
:

1306  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1310  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1313  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1314 
	}
}

1317 
u_ch¨
 *

1318 
	$ngx_hâp_•dy_°©e_pög
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1319 
u_ch¨
 *
íd
)

1321 
u_ch¨
 *
p
;

1322 
ngx_buf_t
 *
buf
;

1323 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1325 i‡(
íd
 - 
pos
 < 
NGX_SPDY_PING_SIZE
) {

1326  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1327 
ngx_hâp_•dy_°©e_pög
);

1330 i‡(
sc
->
Àngth
 !
NGX_SPDY_PING_SIZE
) {

1332  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1335 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1338 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_PING_SIZE
,

1339 
NGX_SPDY_HIGHEST_PRIORITY
);

1340 i‡(
‰ame
 =
NULL
) {

1341  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1344 
buf
 = 
‰ame
->
fú°
->buf;

1346 
p
 = 
buf
->
pos
;

1348 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_PING
);

1349 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_PING_SIZE
);

1351 
p
 = 
	`ngx_˝ymem
’, 
pos
, 
NGX_SPDY_PING_SIZE
);

1353 
buf
->
œ°
 = 
p
;

1355 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1357 
pos
 +
NGX_SPDY_PING_SIZE
;

1359  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1360 
	}
}

1363 
u_ch¨
 *

1364 
	$ngx_hâp_•dy_°©e_skù
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1365 
u_ch¨
 *
íd
)

1367 
size_t
 
size
;

1369 
size
 = 
íd
 - 
pos
;

1371 i‡(
size
 < 
sc
->
Àngth
) {

1372 
sc
->
Àngth
 -
size
;

1373  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
íd
,Énd,

1374 
ngx_hâp_•dy_°©e_skù
);

1377  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
 + sc->
Àngth
, 
íd
);

1378 
	}
}

1381 
u_ch¨
 *

1382 
	$ngx_hâp_•dy_°©e_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1383 
u_ch¨
 *
íd
)

1385 
ngx_uöt_t
 
v
;

1386 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

1388 i‡(
sc
->
hódîs
 == 0) {

1390 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_NUM_SIZE
) {

1391  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1392 
ngx_hâp_•dy_°©e_£âögs
);

1395 
sc
->
hódîs
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
);

1397 
pos
 +
NGX_SPDY_SETTINGS_NUM_SIZE
;

1398 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_NUM_SIZE
;

1400 i‡(
sc
->
Àngth
 < sc->
hódîs
 * 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1402  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1405 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1407 
sc
->
hódîs
);

1410 
sc
->
hódîs
) {

1411 i‡(
íd
 - 
pos
 < 
NGX_SPDY_SETTINGS_PAIR_SIZE
) {

1412  
	`ngx_hâp_•dy_°©e_ßve
(
sc
, 
pos
, 
íd
,

1413 
ngx_hâp_•dy_°©e_£âögs
);

1416 
sc
->
hódîs
--;

1418 i‡(
pos
[0] !
NGX_SPDY_SETTINGS_MAX_STREAMS
) {

1419 
pos
 +
NGX_SPDY_SETTINGS_PAIR_SIZE
;

1420 
sc
->
Àngth
 -
NGX_SPDY_SETTINGS_PAIR_SIZE
;

1424 
v
 = 
	`ngx_•dy_‰ame_∑r£_uöt32
(
pos
 + 
NGX_SPDY_SETTINGS_IDF_SIZE
);

1426 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1427 
ngx_hâp_•dy_moduÀ
);

1429 i‡(
v
 !
sscf
->
c⁄cuºít_°ªams
) {

1430 
	`ngx_hâp_•dy_£nd_£âögs
(
sc
);

1433  
	`ngx_hâp_•dy_°©e_skù
(
sc
, 
pos
, 
íd
);

1436 
	`ngx_hâp_•dy_£nd_£âögs
(
sc
);

1438  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1439 
	}
}

1442 
u_ch¨
 *

1443 
	$ngx_hâp_•dy_°©e_no›
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1444 
u_ch¨
 *
íd
)

1446 i‡(
sc
->
Àngth
) {

1448  
	`ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
sc
);

1451  
	`ngx_hâp_•dy_°©e_com∂ëe
(
sc
, 
pos
, 
íd
);

1452 
	}
}

1455 
u_ch¨
 *

1456 
	$ngx_hâp_•dy_°©e_com∂ëe
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
u_ch¨
 *
pos
,

1457 
u_ch¨
 *
íd
)

1459 
sc
->
h™dÀr
 = 
ngx_hâp_•dy_°©e_hód
;

1460  
pos
;

1461 
	}
}

1464 
u_ch¨
 *

1465 
	$ngx_hâp_•dy_°©e_ßve
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1466 
u_ch¨
 *
pos
, u_ch¨ *
íd
, 
ngx_hâp_•dy_h™dÀr_±
 
h™dÀr
)

1468 #i‡(
NGX_DEBUG
)

1469 i‡(
íd
 - 
pos
 > 
NGX_SPDY_STATE_BUFFER_SIZE
) {

1470 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1472 "%òbyã†ªquúed", 
íd
 - 
pos
);

1473  
	`ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
sc
);

1477 
	`ngx_mem˝y
(
sc
->
buf„r
, 
pos
, 
NGX_SPDY_STATE_BUFFER_SIZE
);

1479 
sc
->
buf„r_u£d
 = 
íd
 - 
pos
;

1480 
sc
->
h™dÀr
 = handler;

1481 
sc
->
waôög
 = 1;

1483  
íd
;

1484 
	}
}

1487 
u_ch¨
 *

1488 
	$ngx_hâp_•dy_°©e_¥Ÿocﬁ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1490 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1494 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1495  
NULL
;

1496 
	}
}

1499 
u_ch¨
 *

1500 
	$ngx_hâp_•dy_°©e_öã∫Æ_îr‹
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1502 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1506 
	`ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
sc
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1507  
NULL
;

1508 
	}
}

1511 
ngx_öt_t


1512 
	$ngx_hâp_•dy_£nd_r°_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
sid
,

1513 
ngx_uöt_t
 
°©us
,Çgx_uöt_à
¥i‹ôy
)

1515 
u_ch¨
 *
p
;

1516 
ngx_buf_t
 *
buf
;

1517 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1519 i‡(
sc
->
c⁄√˘i⁄
->
îr‹
) {

1520  
NGX_OK
;

1523 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1524 "•dy wrôêRST_STREAM sid:%uò°:%ui", 
sid
, 
°©us
);

1526 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_RST_STREAM_SIZE
,

1527 
¥i‹ôy
);

1528 i‡(
‰ame
 =
NULL
) {

1529  
NGX_ERROR
;

1532 
buf
 = 
‰ame
->
fú°
->buf;

1534 
p
 = 
buf
->
pos
;

1536 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_RST_STREAM
);

1537 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_RST_STREAM_SIZE
);

1539 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sid
);

1540 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
°©us
);

1542 
buf
->
œ°
 = 
p
;

1544 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1546  
NGX_OK
;

1547 
	}
}

1551 
ngx_öt_t


1552 
	$ngx_hâp_•dy_£nd_gﬂway
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1554 
u_ch¨
 *
p
;

1555 
ngx_buf_t
 *
buf
;

1556 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1558 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1559 "•dy cª©êGOAWAY sid:%ui", 
sc
->
œ°_sid
);

1561 
‰ame
 = 
	`ngx_hâp_•dy_gë_˘l_‰ame
(
sc
, 
NGX_SPDY_GOAWAY_SIZE
,

1562 
NGX_SPDY_HIGHEST_PRIORITY
);

1563 i‡(
‰ame
 =
NULL
) {

1564  
NGX_ERROR
;

1567 
buf
 = 
‰ame
->
fú°
->buf;

1569 
p
 = 
buf
->
pos
;

1571 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_GOAWAY
);

1572 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 0, 
NGX_SPDY_GOAWAY_SIZE
);

1574 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
sc
->
œ°_sid
);

1576 
buf
->
œ°
 = 
p
;

1578 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1580  
NGX_OK
;

1581 
	}
}

1585 
ngx_öt_t


1586 
	$ngx_hâp_•dy_£nd_£âögs
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
)

1588 
u_ch¨
 *
p
;

1589 
ngx_buf_t
 *
buf
;

1590 
ngx_poﬁ_t
 *
poﬁ
;

1591 
ngx_chaö_t
 *
˛
;

1592 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

1593 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1595 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

1598 
poﬁ
 = 
sc
->
c⁄√˘i⁄
->pool;

1600 
‰ame
 = 
	`ngx_∑Œoc
(
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

1601 i‡(
‰ame
 =
NULL
) {

1602  
NGX_ERROR
;

1605 
˛
 = 
	`ngx_Æloc_chaö_lök
(
poﬁ
);

1606 i‡(
˛
 =
NULL
) {

1607  
NGX_ERROR
;

1610 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


1611 + 
NGX_SPDY_SETTINGS_NUM_SIZE


1612 + 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

1613 i‡(
buf
 =
NULL
) {

1614  
NGX_ERROR
;

1617 
buf
->
œ°_buf
 = 1;

1619 
˛
->
buf
 = buf;

1620 
˛
->
√xt
 = 
NULL
;

1622 
‰ame
->
fú°
 = 
˛
;

1623 
‰ame
->
œ°
 = 
˛
;

1624 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_£âögs_‰ame_h™dÀr
;

1625 #i‡(
NGX_DEBUG
)

1626 
‰ame
->
°ªam
 = 
NULL
;

1627 
‰ame
->
size
 = 
NGX_SPDY_FRAME_HEADER_SIZE


1628 + 
NGX_SPDY_SETTINGS_NUM_SIZE


1629 + 
NGX_SPDY_SETTINGS_PAIR_SIZE
;

1631 
‰ame
->
¥i‹ôy
 = 
NGX_SPDY_HIGHEST_PRIORITY
;

1632 
‰ame
->
blocked
 = 0;

1634 
p
 = 
buf
->
pos
;

1636 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SETTINGS
);

1637 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_CLEAR_SETTINGS
,

1638 
NGX_SPDY_SETTINGS_NUM_SIZE


1639 + 
NGX_SPDY_SETTINGS_PAIR_SIZE
);

1641 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(p, 1);

1642 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(p,

1643 
NGX_SPDY_SETTINGS_MAX_STREAMS
 << 24

1644 | 
NGX_SPDY_SETTINGS_FLAG_PERSIST
);

1646 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1647 
ngx_hâp_•dy_moduÀ
);

1649 
p
 = 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
’, 
sscf
->
c⁄cuºít_°ªams
);

1651 
buf
->
œ°
 = 
p
;

1653 
	`ngx_hâp_•dy_queue_‰ame
(
sc
, 
‰ame
);

1655  
NGX_OK
;

1656 
	}
}

1659 
ngx_öt_t


1660 
	$ngx_hâp_•dy_£âögs_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1661 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1663 
ngx_buf_t
 *
buf
;

1665 
buf
 = 
‰ame
->
fú°
->buf;

1667 i‡(
buf
->
pos
 !buf->
œ°
) {

1668  
NGX_AGAIN
;

1671 
	`ngx_‰ì_chaö
(
sc
->
poﬁ
, 
‰ame
->
fú°
);

1673  
NGX_OK
;

1674 
	}
}

1677 
ngx_hâp_•dy_out_‰ame_t
 *

1678 
	$ngx_hâp_•dy_gë_˘l_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
size_t
 
size
,

1679 
ngx_uöt_t
 
¥i‹ôy
)

1681 
ngx_chaö_t
 *
˛
;

1682 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

1684 
‰ame
 = 
sc
->
‰ì_˘l_‰ames
;

1686 i‡(
‰ame
) {

1687 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
->
‰ì
;

1689 
˛
 = 
‰ame
->
fú°
;

1690 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1693 
‰ame
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

1694 i‡(
‰ame
 =
NULL
) {

1695  
NULL
;

1698 
˛
 = 
	`ngx_Æloc_chaö_lök
(
sc
->
poﬁ
);

1699 i‡(
˛
 =
NULL
) {

1700  
NULL
;

1703 
˛
->
buf
 = 
	`ngx_¸óã_ãmp_buf
(
sc
->
poﬁ
,

1704 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
);

1705 i‡(
˛
->
buf
 =
NULL
) {

1706  
NULL
;

1709 
˛
->
buf
->
œ°_buf
 = 1;

1711 
‰ame
->
fú°
 = 
˛
;

1712 
‰ame
->
œ°
 = 
˛
;

1713 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_˘l_‰ame_h™dÀr
;

1716 
‰ame
->
‰ì
 = 
NULL
;

1718 #i‡(
NGX_DEBUG
)

1719 i‡(
size
 > 
NGX_SPDY_CTL_FRAME_BUFFER_SIZE
 - 
NGX_SPDY_FRAME_HEADER_SIZE
) {

1720 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
sc
->
poﬁ
->
log
, 0,

1721 "ªque°ed c⁄åﬁ fømêi†toÿbig: %z", 
size
);

1722  
NULL
;

1725 
‰ame
->
°ªam
 = 
NULL
;

1726 
‰ame
->
size
 = size;

1729 
‰ame
->
¥i‹ôy
 =Öriority;

1730 
‰ame
->
blocked
 = 0;

1732  
‰ame
;

1733 
	}
}

1736 
ngx_öt_t


1737 
	$ngx_hâp_•dy_˘l_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1738 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

1740 
ngx_buf_t
 *
buf
;

1742 
buf
 = 
‰ame
->
fú°
->buf;

1744 i‡(
buf
->
pos
 !buf->
œ°
) {

1745  
NGX_AGAIN
;

1748 
‰ame
->
‰ì
 = 
sc
->
‰ì_˘l_‰ames
;

1749 
sc
->
‰ì_˘l_‰ames
 = 
‰ame
;

1751  
NGX_OK
;

1752 
	}
}

1755 
ngx_hâp_•dy_°ªam_t
 *

1756 
	$ngx_hâp_•dy_¸óã_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_uöt_t
 
id
,

1757 
ngx_uöt_t
 
¥i‹ôy
)

1759 
ngx_log_t
 *
log
;

1760 
ngx_uöt_t
 
ödex
;

1761 
ngx_evít_t
 *
ªv
, *
wev
;

1762 
ngx_c⁄√˘i⁄_t
 *
fc
;

1763 
ngx_hâp_log_˘x_t
 *
˘x
;

1764 
ngx_hâp_ªque°_t
 *
r
;

1765 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1766 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1767 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

1769 
fc
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

1771 i‡(
fc
) {

1772 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
->
d©a
;

1774 
ªv
 = 
fc
->
ªad
;

1775 
wev
 = 
fc
->
wrôe
;

1776 
log
 = 
fc
->log;

1777 
˘x
 = 
log
->
d©a
;

1780 
fc
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_c⁄√˘i⁄_t
));

1781 i‡(
fc
 =
NULL
) {

1782  
NULL
;

1785 
ªv
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

1786 i‡(
ªv
 =
NULL
) {

1787  
NULL
;

1790 
wev
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_evít_t
));

1791 i‡(
wev
 =
NULL
) {

1792  
NULL
;

1795 
log
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_log_t
));

1796 i‡(
log
 =
NULL
) {

1797  
NULL
;

1800 
˘x
 = 
	`ngx_∑Œoc
(
sc
->
poﬁ
, (
ngx_hâp_log_˘x_t
));

1801 i‡(
˘x
 =
NULL
) {

1802  
NULL
;

1805 
˘x
->
c⁄√˘i⁄
 = 
fc
;

1806 
˘x
->
ªque°
 = 
NULL
;

1809 
	`ngx_mem˝y
(
log
, 
sc
->
c⁄√˘i⁄
->log, (
ngx_log_t
));

1811 
log
->
d©a
 = 
˘x
;

1813 
	`ngx_memzîo
(
ªv
, (
ngx_evít_t
));

1815 
ªv
->
d©a
 = 
fc
;

1816 
ªv
->
ªady
 = 1;

1817 
ªv
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

1818 
ªv
->
log
 =Üog;

1820 
	`ngx_mem˝y
(
wev
, 
ªv
, (
ngx_evít_t
));

1822 
wev
->
wrôe
 = 1;

1824 
	`ngx_mem˝y
(
fc
, 
sc
->
c⁄√˘i⁄
, (
ngx_c⁄√˘i⁄_t
));

1826 
fc
->
d©a
 = 
sc
->
hâp_c⁄√˘i⁄
;

1827 
fc
->
ªad
 = 
ªv
;

1828 
fc
->
wrôe
 = 
wev
;

1829 
fc
->
£¡
 = 0;

1830 
fc
->
log
 =Üog;

1831 
fc
->
buf„ªd
 = 0;

1832 
fc
->
¢dlow©
 = 1;

1833 
fc
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_DISABLED
;

1835 
r
 = 
	`ngx_hâp_¸óã_ªque°
(
fc
);

1836 i‡(
r
 =
NULL
) {

1837  
NULL
;

1840 
r
->
vÆid_loˇti⁄
 = 1;

1842 
fc
->
d©a
 = 
r
;

1843 
sc
->
c⁄√˘i⁄
->
ªque°s
++;

1845 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1847 
r
->
hódî_ö
 = 
	`ngx_¸óã_ãmp_buf
‘->
poﬁ
,

1848 
cscf
->
˛õ¡_hódî_buf„r_size
);

1849 i‡(
r
->
hódî_ö
 =
NULL
) {

1850 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1851  
NULL
;

1854 
r
->
hódîs_ö
.
c⁄√˘i⁄_ty≥
 = 
NGX_HTTP_CONNECTION_CLOSE
;

1856 
°ªam
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_°ªam_t
));

1857 i‡(
°ªam
 =
NULL
) {

1858 
	`ngx_hâp_‰ì_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1859  
NULL
;

1862 
r
->
•dy_°ªam
 = 
°ªam
;

1864 
°ªam
->
id
 = id;

1865 
°ªam
->
ªque°
 = 
r
;

1866 
°ªam
->
c⁄√˘i⁄
 = 
sc
;

1867 
°ªam
->
¥i‹ôy
 =Öriority;

1869 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_•dy_moduÀ
);

1871 
ödex
 = 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
id
);

1873 
°ªam
->
ödex
 = 
sc
->
°ªams_ödex
[index];

1874 
sc
->
°ªams_ödex
[
ödex
] = 
°ªam
;

1876 
sc
->
¥o˚ssög
++;

1878  
°ªam
;

1879 
	}
}

1882 
ngx_hâp_•dy_°ªam_t
 *

1883 
	$ngx_hâp_•dy_gë_°ªam_by_id
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

1884 
ngx_uöt_t
 
sid
)

1886 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

1887 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

1889 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

1890 
ngx_hâp_•dy_moduÀ
);

1892 
°ªam
 = 
sc
->
°ªams_ödex
[
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
sid
)];

1894 
°ªam
) {

1895 i‡(
°ªam
->
id
 =
sid
) {

1896  
°ªam
;

1899 
°ªam
 = såóm->
ödex
;

1902  
NULL
;

1903 
	}
}

1906 
ngx_öt_t


1907 
	$ngx_hâp_•dy_∑r£_hódî
(
ngx_hâp_ªque°_t
 *
r
)

1909 
u_ch¨
 *
p
, *
íd
, 
ch
;

1910 
ngx_uöt_t
 
Àn
, 
hash
;

1911 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1914 
sw_«me_Àn
 = 0,

1915 
sw_«me
,

1916 
sw_vÆue_Àn
,

1917 
sw_vÆue


1918 } 
°©e
;

1920 
°©e
 = 
r
->state;

1922 
p
 = 
r
->
hódî_ö
->
pos
;

1923 
íd
 = 
r
->
hódî_ö
->
œ°
;

1925 
°©e
) {

1927 
sw_«me_Àn
:

1929 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_NLEN_SIZE
) {

1930  
NGX_AGAIN
;

1933 
Àn
 = 
	`ngx_•dy_‰ame_∑r£_uöt16
(
p
);

1935 i‡(!
Àn
) {

1936  
NGX_HTTP_PARSE_INVALID_HEADER
;

1939 
p
 +
NGX_SPDY_NV_NLEN_SIZE
;

1941 
r
->
hódî_«me_íd
 = 
p
 + 
Àn
;

1942 
r
->
lowˇ£_ödex
 = 
Àn
;

1943 
r
->
övÆid_hódî
 = 0;

1945 
°©e
 = 
sw_«me
;

1949 
sw_«me
:

1951 i‡(
r
->
hódî_«me_íd
 > 
íd
) {

1955 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1957 
r
->
hódî_«me_°¨t
 = 
p
;

1959 
hash
 = 0;

1961  ; 
p
 !
r
->
hódî_«me_íd
;Ö++) {

1963 
ch
 = *
p
;

1965 
hash
 = 
	`ngx_hash
(hash, 
ch
);

1967 i‡((
ch
 >= 'a' && ch <= 'z')

1968 || (
ch
 == '-')

1969 || (
ch
 >= '0' && ch <= '9')

1970 || (
ch
 ='_' && 
cscf
->
undîsc‹es_ö_hódîs
))

1975 
ch
) {

1977 
LF
:

1978 
CR
:

1980  
NGX_HTTP_PARSE_INVALID_REQUEST
;

1983 i‡(
ch
 >= 'A' && ch <= 'Z') {

1984  
NGX_HTTP_PARSE_INVALID_HEADER
;

1987 
r
->
övÆid_hódî
 = 1;

1990 
r
->
hódî_hash
 = 
hash
;

1992 
°©e
 = 
sw_vÆue_Àn
;

1996 
sw_vÆue_Àn
:

1998 i‡(
íd
 - 
p
 < 
NGX_SPDY_NV_VLEN_SIZE
) {

2002 
Àn
 = 
	`ngx_•dy_‰ame_∑r£_uöt16
(
p
);

2004 i‡(!
Àn
) {

2005  
NGX_ERROR
;

2008 
p
 +
NGX_SPDY_NV_VLEN_SIZE
;

2010 
r
->
hódî_íd
 = 
p
 + 
Àn
;

2012 
°©e
 = 
sw_vÆue
;

2016 
sw_vÆue
:

2018 i‡(
r
->
hódî_íd
 > 
íd
) {

2022 
r
->
hódî_°¨t
 = 
p
;

2024  ; 
p
 !
r
->
hódî_íd
;Ö++) {

2026 
ch
 = *
p
;

2028 i‡(
ch
 == '\0') {

2030 i‡(
p
 =
r
->
hódî_°¨t
) {

2031  
NGX_ERROR
;

2034 
r
->
hódî_size
 = 
p
 -Ñ->
hódî_°¨t
;

2035 
r
->
hódî_ö
->
pos
 = 
p
 + 1;

2037  
NGX_OK
;

2040 i‡(
ch
 =
CR
 || ch =
LF
) {

2041  
NGX_HTTP_PARSE_INVALID_HEADER
;

2045 
r
->
hódî_size
 = 
p
 -Ñ->
hódî_°¨t
;

2046 
r
->
hódî_ö
->
pos
 = 
p
;

2048 
r
->
°©e
 = 0;

2050  
NGX_DONE
;

2053 
r
->
hódî_ö
->
pos
 = 
p
;

2054 
r
->
°©e
 = state;

2056  
NGX_AGAIN
;

2057 
	}
}

2060 
ngx_öt_t


2061 
	$ngx_hâp_•dy_Æloc_œrge_hódî_buf„r
(
ngx_hâp_ªque°_t
 *
r
)

2063 
u_ch¨
 *
ﬁd
, *
√w
;

2064 
size_t
 
ª°
;

2065 
ngx_buf_t
 *
buf
;

2066 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2067 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2069 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2072 
°ªam
 = 
r
->
•dy_°ªam
;

2074 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2076 i‡(
°ªam
->
hódî_buf„rs


2077 =(
ngx_uöt_t
Ë
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
num
)

2079  
NGX_DECLINED
;

2082 
ª°
 = 
r
->
hódî_ö
->
œ°
 -Ñ->hódî_ö->
pos
;

2084 i‡(
ª°
 >
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
) {

2085  
NGX_DECLINED
;

2088 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
cscf
->
œrge_˛õ¡_hódî_buf„rs
.
size
);

2089 i‡(
buf
 =
NULL
) {

2090  
NGX_ERROR
;

2093 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2095 
buf
->
pos
, buf->
íd
 - buf->
œ°
);

2097 
ﬁd
 = 
r
->
hódî_ö
->
pos
;

2098 
√w
 = 
buf
->
pos
;

2100 i‡(
ª°
) {

2101 
buf
->
œ°
 = 
	`ngx_˝ymem
(
√w
, 
ﬁd
, 
ª°
);

2104 i‡(
r
->
hódî_«me_íd
 > 
ﬁd
) {

2105 
r
->
hódî_«me_íd
 = 
√w
 + (r->hódî_«me_íd - 
ﬁd
);

2107 } i‡(
r
->
hódî_íd
 > 
ﬁd
) {

2108 
r
->
hódî_íd
 = 
√w
 + (r->hódî_íd - 
ﬁd
);

2111 
r
->
hódî_ö
 = 
buf
;

2113 
°ªam
->
hódî_buf„rs
++;

2115  
NGX_OK
;

2116 
	}
}

2119 
ngx_öt_t


2120 
	$ngx_hâp_•dy_h™dÀ_ªque°_hódî
(
ngx_hâp_ªque°_t
 *
r
)

2122 
ngx_uöt_t
 
i
;

2123 
ngx_èbÀ_ñt_t
 *
h
;

2124 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

2125 
ngx_hâp_•dy_ªque°_hódî_t
 *
sh
;

2127 i‡(
r
->
övÆid_hódî
) {

2128 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2130 i‡(
cscf
->
ign‹e_övÆid_hódîs
) {

2131 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2133 
r
->
hódî_íd
 -Ñ->
hódî_«me_°¨t
,

2134 
r
->
hódî_«me_°¨t
);

2135  
NGX_OK
;

2139 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2140 
sh
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2142 i‡(
sh
->
hash
 !
r
->
hódî_hash


2143 || 
sh
->
Àn
 !
r
->
lowˇ£_ödex


2144 || 
	`ngx_°∫cmp
(
sh
->
hódî
, 
r
->
hódî_«me_°¨t
,

2145 
r
->
lowˇ£_ödex
)

2151  
sh
->
	`h™dÀr
(
r
);

2155 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_ö
.
hódîs
);

2156 i‡(
h
 =
NULL
) {

2157 
	`ngx_hâp_•dy_˛o£_°ªam
(
r
->
•dy_°ªam
,

2158 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2159  
NGX_ERROR
;

2162 
h
->
hash
 = 
r
->
hódî_hash
;

2164 
h
->
key
.
Àn
 = 
r
->
lowˇ£_ödex
;

2165 
h
->
key
.
d©a
 = 
r
->
hódî_«me_°¨t
;

2166 
h
->
key
.
d©a
[h->key.
Àn
] = '\0';

2168 
h
->
vÆue
.
Àn
 = 
r
->
hódî_size
;

2169 
h
->
vÆue
.
d©a
 = 
r
->
hódî_°¨t
;

2170 
h
->
vÆue
.
d©a
[h->vÆue.
Àn
] = '\0';

2172 
h
->
lowˇ£_key
 = h->
key
.
d©a
;

2174  
NGX_OK
;

2175 
	}
}

2179 
	$ngx_hâp_•dy_ªque°_hódîs_öô
()

2181 
ngx_uöt_t
 
i
;

2182 
ngx_hâp_•dy_ªque°_hódî_t
 *
h
;

2184 
i
 = 0; i < 
NGX_SPDY_REQUEST_HEADERS
; i++) {

2185 
h
 = &
ngx_hâp_•dy_ªque°_hódîs
[
i
];

2186 
h
->
hash
 = 
	`ngx_hash_key
(h->
hódî
, h->
Àn
);

2188 
	}
}

2191 
ngx_öt_t


2192 
	$ngx_hâp_•dy_∑r£_mëhod
(
ngx_hâp_ªque°_t
 *
r
)

2194 
size_t
 
k
, 
Àn
;

2195 
ngx_uöt_t
 
n
;

2196 c⁄° 
u_ch¨
 *
p
, *
m
;

2204 
u_ch¨
 
Àn
;

2205 c⁄° 
u_ch¨
 
mëhod
[11];

2206 
uöt32_t
 
vÆue
;

2207 } 
ã°s
[] = {

2208 { 3, "GET", 
NGX_HTTP_GET
 },

2209 { 4, "POST", 
NGX_HTTP_POST
 },

2210 { 4, "HEAD", 
NGX_HTTP_HEAD
 },

2211 { 7, "OPTIONS", 
NGX_HTTP_OPTIONS
 },

2212 { 8, "PROPFIND", 
NGX_HTTP_PROPFIND
 },

2213 { 3, "PUT", 
NGX_HTTP_PUT
 },

2214 { 5, "MKCOL", 
NGX_HTTP_MKCOL
 },

2215 { 6, "DELETE", 
NGX_HTTP_DELETE
 },

2216 { 4, "COPY", 
NGX_HTTP_COPY
 },

2217 { 4, "MOVE", 
NGX_HTTP_MOVE
 },

2218 { 9, "PROPPATCH", 
NGX_HTTP_PROPPATCH
 },

2219 { 4, "LOCK", 
NGX_HTTP_LOCK
 },

2220 { 6, "UNLOCK", 
NGX_HTTP_UNLOCK
 },

2221 { 5, "PATCH", 
NGX_HTTP_PATCH
 },

2222 { 5, "TRACE", 
NGX_HTTP_TRACE
 }

2223 }, *
ã°
;

2225 i‡(
r
->
mëhod_«me
.
Àn
) {

2226  
NGX_HTTP_PARSE_INVALID_HEADER
;

2229 
Àn
 = 
r
->
hódî_size
;

2231 
r
->
mëhod_«me
.
Àn
 =Üen;

2232 
r
->
mëhod_«me
.
d©a
 =Ñ->
hódî_°¨t
;

2234 
ã°
 = 
ã°s
;

2235 
n
 = (
ã°s
) / (tests[0]);

2238 i‡(
Àn
 =
ã°
->len) {

2239 
p
 = 
r
->
mëhod_«me
.
d©a
;

2240 
m
 = 
ã°
->
mëhod
;

2241 
k
 = 
Àn
;

2244 i‡(*
p
++ !*
m
++) {

2245 
√xt
;

2247 } --
k
);

2249 
r
->
mëhod
 = 
ã°
->
vÆue
;

2250  
NGX_OK
;

2253 
√xt
:

2254 
ã°
++;

2256 } --
n
);

2258 
p
 = 
r
->
mëhod_«me
.
d©a
;

2261 i‡((*
p
 < 'A' || *p > 'Z') && *p != '_') {

2262 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2264  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2267 
p
++;

2269 } --
Àn
);

2271  
NGX_OK
;

2272 
	}
}

2275 
ngx_öt_t


2276 
	$ngx_hâp_•dy_∑r£_scheme
(
ngx_hâp_ªque°_t
 *
r
)

2278 i‡(
r
->
schema_°¨t
) {

2279  
NGX_HTTP_PARSE_INVALID_HEADER
;

2282 
r
->
schema_°¨t
 =Ñ->
hódî_°¨t
;

2283 
r
->
schema_íd
 =Ñ->
hódî_íd
;

2285  
NGX_OK
;

2286 
	}
}

2289 
ngx_öt_t


2290 
	$ngx_hâp_•dy_∑r£_uæ
(
ngx_hâp_ªque°_t
 *
r
)

2292 i‡(
r
->
u≈¨£d_uri
.
Àn
) {

2293  
NGX_HTTP_PARSE_INVALID_HEADER
;

2296 
r
->
uri_°¨t
 =Ñ->
hódî_°¨t
;

2297 
r
->
uri_íd
 =Ñ->
hódî_íd
;

2299 i‡(
	`ngx_hâp_∑r£_uri
(
r
Ë!
NGX_OK
) {

2300  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2303 i‡(
	`ngx_hâp_¥o˚ss_ªque°_uri
(
r
Ë!
NGX_OK
) {

2304  
NGX_ERROR
;

2307  
NGX_OK
;

2308 
	}
}

2311 
ngx_öt_t


2312 
	$ngx_hâp_•dy_∑r£_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
)

2314 
u_ch¨
 *
p
, 
ch
;

2316 i‡(
r
->
hâp_¥Ÿocﬁ
.
Àn
) {

2317  
NGX_HTTP_PARSE_INVALID_HEADER
;

2320 
p
 = 
r
->
hódî_°¨t
;

2322 i‡(
r
->
hódî_size
 < 8 || !(
	`ngx_°r5cmp
(
p
, 'H', 'T', 'T', 'P', '/'))) {

2323  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2326 
ch
 = *(
p
 + 5);

2328 i‡(
ch
 < '1' || ch > '9') {

2329  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2332 
r
->
hâp_maj‹
 = 
ch
 - '0';

2334 
p
 +6;Ö !
r
->
hódî_íd
 - 2;Ö++) {

2336 
ch
 = *
p
;

2338 i‡(
ch
 < '0' || ch > '9') {

2339  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2342 
r
->
hâp_maj‹
 =Ñ->hâp_maj‹ * 10 + 
ch
 - '0';

2345 i‡(*
p
 != '.') {

2346  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2349 
ch
 = *(
p
 + 1);

2351 i‡(
ch
 < '0' || ch > '9') {

2352  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2355 
r
->
hâp_mö‹
 = 
ch
 - '0';

2357 
p
 +2;Ö !
r
->
hódî_íd
;Ö++) {

2359 
ch
 = *
p
;

2361 i‡(
ch
 < '0' || ch > '9') {

2362  
NGX_HTTP_PARSE_INVALID_REQUEST
;

2365 
r
->
hâp_mö‹
 =Ñ->hâp_mö‹ * 10 + 
ch
 - '0';

2368 
r
->
hâp_¥Ÿocﬁ
.
Àn
 =Ñ->
hódî_size
;

2369 
r
->
hâp_¥Ÿocﬁ
.
d©a
 =Ñ->
hódî_°¨t
;

2370 
r
->
hâp_vîsi⁄
 =Ñ->
hâp_maj‹
 * 1000 +Ñ->
hâp_mö‹
;

2372  
NGX_OK
;

2373 
	}
}

2376 
ngx_öt_t


2377 
	$ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
)

2379 
u_ch¨
 *
p
;

2381 i‡(
r
->
mëhod_«me
.
Àn
 == 0

2382 || 
r
->
u≈¨£d_uri
.
Àn
 == 0

2383 || 
r
->
hâp_¥Ÿocﬁ
.
Àn
 == 0)

2385 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_BAD_REQUEST
);

2386  
NGX_ERROR
;

2389 
r
->
ªque°_löe
.
Àn
 =Ñ->
mëhod_«me
.len + 1

2390 + 
r
->
u≈¨£d_uri
.
Àn
 + 1

2391 + 
r
->
hâp_¥Ÿocﬁ
.
Àn
;

2393 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,Ñ->
ªque°_löe
.
Àn
 + 1);

2394 i‡(
p
 =
NULL
) {

2395 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

2396  
NGX_ERROR
;

2399 
r
->
ªque°_löe
.
d©a
 = 
p
;

2401 
p
 = 
	`ngx_˝ymem
’, 
r
->
mëhod_«me
.
d©a
,Ñ->mëhod_«me.
Àn
);

2403 *
p
++ = ' ';

2405 
p
 = 
	`ngx_˝ymem
’, 
r
->
u≈¨£d_uri
.
d©a
,Ñ->u≈¨£d_uri.
Àn
);

2407 *
p
++ = ' ';

2409 
	`ngx_mem˝y
(
p
, 
r
->
hâp_¥Ÿocﬁ
.
d©a
,Ñ->hâp_¥Ÿocﬁ.
Àn
 + 1);

2412 
r
->
mëhod_«me
.
d©a
 =Ñ->
ªque°_löe
.data;

2414  
NGX_OK
;

2415 
	}
}

2419 
	$ngx_hâp_•dy_run_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2421 
ngx_uöt_t
 
i
;

2422 
ngx_li°_∑π_t
 *
∑π
;

2423 
ngx_èbÀ_ñt_t
 *
h
;

2424 
ngx_hâp_hódî_t
 *
hh
;

2425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2427 i‡(
	`ngx_hâp_•dy_c⁄°ru˘_ªque°_löe
(
r
Ë!
NGX_OK
) {

2431 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2432 "•dy hâ∞ªque°Üöe: \"%V\"", &
r
->
ªque°_löe
);

2434 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2436 
∑π
 = &
r
->
hódîs_ö
.
hódîs
.part;

2437 
h
 = 
∑π
->
ñts
;

2439 
i
 = 0 ;; i++) {

2441 i‡(
i
 >
∑π
->
√…s
) {

2442 i‡(
∑π
->
√xt
 =
NULL
) {

2446 
∑π
 =Ö¨t->
√xt
;

2447 
h
 = 
∑π
->
ñts
;

2448 
i
 = 0;

2451 
hh
 = 
	`ngx_hash_föd
(&
cmcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

2452 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

2454 i‡(
hh
 && hh->
	`h™dÀr
(
r
, &
h
[
i
], hh->
off£t
Ë!
NGX_OK
) {

2458 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2459 "hâ∞hódî: \"%V: %V\"", &
h
[
i
].
key
, &h[i].
vÆue
);

2462 
r
->
hâp_°©e
 = 
NGX_HTTP_PROCESS_REQUEST_STATE
;

2464 i‡(
	`ngx_hâp_¥o˚ss_ªque°_hódî
(
r
Ë!
NGX_OK
) {

2468 
	`ngx_hâp_¥o˚ss_ªque°
(
r
);

2469 
	}
}

2472 
ngx_öt_t


2473 
	$ngx_hâp_•dy_öô_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
)

2475 
ngx_buf_t
 *
buf
;

2476 
ngx_ãmp_fûe_t
 *
tf
;

2477 
ngx_hâp_ªque°_body_t
 *
rb
;

2478 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2480 
rb
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_ªque°_body_t
));

2481 i‡(
rb
 =
NULL
) {

2482  
NGX_ERROR
;

2485 
r
->
ªque°_body
 = 
rb
;

2487 i‡(
r
->
•dy_°ªam
->
ö_˛o£d
) {

2488  
NGX_OK
;

2491 
rb
->
ª°
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

2493 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2495 i‡(
r
->
ªque°_body_ö_fûe_⁄ly


2496 || 
rb
->
ª°
 > (
off_t
Ë
˛cf
->
˛õ¡_body_buf„r_size


2497 || 
rb
->
ª°
 < 0)

2499 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2500 i‡(
tf
 =
NULL
) {

2501  
NGX_ERROR
;

2504 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2505 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

2506 
tf
->
∑th
 = 
˛cf
->
˛õ¡_body_ãmp_∑th
;

2507 
tf
->
poﬁ
 = 
r
->pool;

2508 
tf
->
w¨n
 = "a clientÑequest body is bufferedÅoáÅemporary file";

2509 
tf
->
log_Àvñ
 = 
r
->
ªque°_body_fûe_log_Àvñ
;

2510 
tf
->
≥rsi°ít
 = 
r
->
ªque°_body_ö_≥rsi°ít_fûe
;

2511 
tf
->
˛ón
 = 
r
->
ªque°_body_ö_˛ón_fûe
;

2513 i‡(
r
->
ªque°_body_fûe_group_ac˚ss
) {

2514 
tf
->
ac˚ss
 = 0660;

2517 
rb
->
ãmp_fûe
 = 
tf
;

2519 i‡(
r
->
•dy_°ªam
->
ö_˛o£d


2520 && 
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

2521 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

2522 !
NGX_OK
)

2524  
NGX_ERROR
;

2527 
buf
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2528 i‡(
buf
 =
NULL
) {

2529  
NGX_ERROR
;

2532 i‡(
rb
->
ª°
 == 0) {

2533 
buf
->
ö_fûe
 = 1;

2534 
buf
->
fûe
 = &
tf
->file;

2536 
rb
->
buf
 = buf;

2541 i‡(
rb
->
ª°
 == 0) {

2542  
NGX_OK
;

2545 
buf
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, (
size_t
Ë
rb
->
ª°
);

2546 i‡(
buf
 =
NULL
) {

2547  
NGX_ERROR
;

2550 
rb
->
buf
 = buf;

2553 
rb
->
bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2554 i‡(
rb
->
bufs
 =
NULL
) {

2555  
NGX_ERROR
;

2558 
rb
->
bufs
->
buf
 = buf;

2559 
rb
->
bufs
->
√xt
 = 
NULL
;

2561 
rb
->
ª°
 = 0;

2563  
NGX_OK
;

2564 
	}
}

2567 
ngx_öt_t


2568 
	$ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

2569 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
)

2571 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2573 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2576 
°ªam
 = 
r
->
•dy_°ªam
;

2578 
°ªam
->
skù_d©a
) {

2580 
NGX_SPDY_DATA_DISCARD
:

2581 
	`po°_h™dÀr
(
r
);

2582  
NGX_OK
;

2584 
NGX_SPDY_DATA_ERROR
:

2585 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1) {

2586  
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
;

2588  
NGX_HTTP_BAD_REQUEST
;

2591 
NGX_SPDY_DATA_INTERNAL_ERROR
:

2592  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2595 i‡(!
r
->
ªque°_body
 && 
	`ngx_hâp_•dy_öô_ªque°_body
‘Ë!
NGX_OK
) {

2596 
°ªam
->
skù_d©a
 = 
NGX_SPDY_DATA_INTERNAL_ERROR
;

2597  
NGX_HTTP_INTERNAL_SERVER_ERROR
;

2600 i‡(
°ªam
->
ö_˛o£d
) {

2601 
	`po°_h™dÀr
(
r
);

2602  
NGX_OK
;

2605 
r
->
ªque°_body
->
po°_h™dÀr
 =Öost_handler;

2607  
NGX_AGAIN
;

2608 
	}
}

2612 
	$ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
)

2614 
ngx_evít_t
 *
ev
;

2615 
ngx_c⁄√˘i⁄_t
 *
fc
;

2616 
ngx_hâp_•dy_°ªam_t
 **
ödex
, *
s
;

2617 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2618 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

2620 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

2622 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2624 
°ªam
->
id
, 
sc
->
¥o˚ssög
);

2626 i‡(!
°ªam
->
out_˛o£d
) {

2627 i‡(
	`ngx_hâp_•dy_£nd_r°_°ªam
(
sc
, 
°ªam
->
id
,

2628 
NGX_SPDY_INTERNAL_ERROR
,

2629 
°ªam
->
¥i‹ôy
)

2630 !
NGX_OK
)

2632 
sc
->
c⁄√˘i⁄
->
îr‹
 = 1;

2636 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2637 
ngx_hâp_•dy_moduÀ
);

2639 
ödex
 = 
sc
->
°ªams_ödex
 + 
	`ngx_hâp_•dy_°ªam_ödex
(
sscf
, 
°ªam
->
id
);

2642 
s
 = *
ödex
;

2644 i‡(
s
 =
NULL
) {

2648 i‡(
s
 =
°ªam
) {

2649 *
ödex
 = 
s
->index;

2653 
ödex
 = &
s
->index;

2656 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

2658 
	`ngx_hâp_‰ì_ªque°
(
°ªam
->
ªque°
, 
rc
);

2660 
ev
 = 
fc
->
ªad
;

2662 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

2663 
	`ngx_dñ_evít
(
ev
, 
NGX_READ_EVENT
, 0);

2666 i‡(
ev
->
timî_£t
) {

2667 
	`ngx_dñ_timî
(
ev
);

2670 i‡(
ev
->
¥ev
) {

2671 
	`ngx_dñëe_po°ed_evít
(
ev
);

2674 
ev
 = 
fc
->
wrôe
;

2676 i‡(
ev
->
a˘ive
 ||Év->
dißbÀd
) {

2677 
	`ngx_dñ_evít
(
ev
, 
NGX_WRITE_EVENT
, 0);

2680 i‡(
ev
->
timî_£t
) {

2681 
	`ngx_dñ_timî
(
ev
);

2684 i‡(
ev
->
¥ev
) {

2685 
	`ngx_dñëe_po°ed_evít
(
ev
);

2688 
fc
->
d©a
 = 
sc
->
‰ì_Áke_c⁄√˘i⁄s
;

2689 
sc
->
‰ì_Áke_c⁄√˘i⁄s
 = 
fc
;

2691 
sc
->
¥o˚ssög
--;

2693 i‡(
sc
->
¥o˚ssög
 || sc->
blocked
) {

2697 
ev
 = 
sc
->
c⁄√˘i⁄
->
ªad
;

2699 
ev
->
h™dÀr
 = 
ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
;

2700 
	`ngx_po°_evít
(
ev
, &
ngx_po°ed_evíts
);

2701 
	}
}

2705 
	$ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄_h™dÀr
(
ngx_evít_t
 *
ªv
)

2707 
ngx_c⁄√˘i⁄_t
 *
c
;

2709 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

2711 i‡(
ªv
->
ªady
) {

2712 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

2716 
c
 = 
ªv
->
d©a
;

2718 
	`ngx_hâp_•dy_h™dÀ_c⁄√˘i⁄
(
c
->
d©a
);

2719 
	}
}

2723 
	$ngx_hâp_•dy_kì∑live_h™dÀr
(
ngx_evít_t
 *
ªv
)

2725 
ngx_c⁄√˘i⁄_t
 *
c
;

2726 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2727 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

2729 
c
 = 
ªv
->
d©a
;

2731 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "spdy keepalive handler");

2733 i‡(
ªv
->
timedout
 || 
c
->
˛o£
) {

2734 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2738 #i‡(
NGX_HAVE_KQUEUE
)

2740 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

2741 i‡(
ªv
->
≥ndög_eof
) {

2742 
c
->
log
->
h™dÀr
 = 
NULL
;

2743 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

2745 "kì∑livêc⁄√˘i⁄", &
c
->
addr_ãxt
);

2746 #i‡(
NGX_HTTP_SSL
)

2747 i‡(
c
->
s¶
) {

2748 
c
->
s¶
->
no_£nd_shutdown
 = 1;

2751 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2758 
c
->
de°royed
 = 0;

2759 
c
->
idÀ
 = 0;

2760 
	`ngx_ªußbÀ_c⁄√˘i⁄
(
c
, 0);

2762 
sc
 = 
c
->
d©a
;

2764 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2765 
ngx_hâp_•dy_moduÀ
);

2767 
sc
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(
sscf
->
poﬁ_size
, sc->
c⁄√˘i⁄
->
log
);

2768 i‡(
sc
->
poﬁ
 =
NULL
) {

2769 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2773 
sc
->
°ªams_ödex
 = 
	`ngx_pˇŒoc
(sc->
poﬁ
,

2774 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
)

2775 * (
ngx_hâp_•dy_°ªam_t
 *));

2776 i‡(
sc
->
°ªams_ödex
 =
NULL
) {

2777 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2781 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_•dy_wrôe_h™dÀr
;

2783 
ªv
->
h™dÀr
 = 
ngx_hâp_•dy_ªad_h™dÀr
;

2784 
	`ngx_hâp_•dy_ªad_h™dÀr
(
ªv
);

2785 
	}
}

2789 
	$ngx_hâp_•dy_föÆize_c⁄√˘i⁄
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

2790 
ngx_öt_t
 
rc
)

2792 
ngx_uöt_t
 
i
, 
size
;

2793 
ngx_evít_t
 *
ev
;

2794 
ngx_c⁄√˘i⁄_t
 *
c
, *
fc
;

2795 
ngx_hâp_ªque°_t
 *
r
;

2796 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

2797 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

2799 
c
 = 
sc
->
c⁄√˘i⁄
;

2801 i‡(!
sc
->
¥o˚ssög
) {

2802 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2806 
c
->
îr‹
 = 1;

2807 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_em±y_h™dÀr
;

2809 
sc
->
œ°_out
 = 
NULL
;

2811 
sc
->
blocked
 = 1;

2813 
sscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
sc
->
hâp_c⁄√˘i⁄
->
c⁄f_˘x
,

2814 
ngx_hâp_•dy_moduÀ
);

2816 
size
 = 
	`ngx_hâp_•dy_°ªams_ödex_size
(
sscf
);

2818 
i
 = 0; i < 
size
; i++) {

2819 
°ªam
 = 
sc
->
°ªams_ödex
[
i
];

2821 
°ªam
) {

2822 
r
 = 
°ªam
->
ªque°
;

2824 
fc
 = 
r
->
c⁄√˘i⁄
;

2825 
fc
->
îr‹
 = 1;

2827 i‡(
°ªam
->
waôög
) {

2828 
r
->
blocked
 -
°ªam
->
waôög
;

2829 
°ªam
->
waôög
 = 0;

2830 
ev
 = 
fc
->
wrôe
;

2833 
ev
 = 
fc
->
ªad
;

2836 
°ªam
 = såóm->
ödex
;

2838 
ev
->
eof
 = 1;

2839 
ev
->
	`h™dÀr
(ev);

2843 
sc
->
blocked
 = 0;

2845 i‡(
sc
->
¥o˚ssög
) {

2849 
	`ngx_hâp_˛o£_c⁄√˘i⁄
(
c
);

2850 
	}
}

2854 
	$ngx_hâp_•dy_poﬁ_˛ónup
(*
d©a
)

2856 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
d©a
;

2858 i‡(
sc
->
poﬁ
) {

2859 
	`ngx_de°roy_poﬁ
(
sc
->
poﬁ
);

2861 
	}
}

2865 
	$ngx_hâp_•dy_zÆloc
(*
›aque
, 
u_öt
 
ôems
, u_öà
size
)

2867 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

2869  
	`ngx_∑Œoc
(
sc
->
c⁄√˘i⁄
->
poﬁ
, 
ôems
 * 
size
);

2870 
	}
}

2874 
	$ngx_hâp_•dy_z‰ì
(*
›aque
, *
addªss
)

2877 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
 = 
›aque
;

2879 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

2880 "•dy z‰ì: %p", 
addªss
);

2882 
	}
}

	@src/http/ngx_http_spdy.h

7 #i‚de‡
_NGX_HTTP_SPDY_H_INCLUDED_


8 
	#_NGX_HTTP_SPDY_H_INCLUDED_


	)

11 
	~<ngx_c⁄fig.h
>

12 
	~<ngx_c‹e.h
>

13 
	~<ngx_hâp.h
>

15 
	~<zlib.h
>

18 
	#NGX_SPDY_VERSION
 2

	)

20 #ifde‡
TLSEXT_TYPE_√xt_¥Ÿo_√g


21 
	#NGX_SPDY_NPN_ADVERTISE
 "\x06•dy/2"

	)

22 
	#NGX_SPDY_NPN_NEGOTIATED
 "•dy/2"

	)

25 
	#NGX_SPDY_STATE_BUFFER_SIZE
 16

	)

27 
	#NGX_SPDY_CTL_BIT
 1

	)

29 
	#NGX_SPDY_SYN_STREAM
 1

	)

30 
	#NGX_SPDY_SYN_REPLY
 2

	)

31 
	#NGX_SPDY_RST_STREAM
 3

	)

32 
	#NGX_SPDY_SETTINGS
 4

	)

33 
	#NGX_SPDY_NOOP
 5

	)

34 
	#NGX_SPDY_PING
 6

	)

35 
	#NGX_SPDY_GOAWAY
 7

	)

36 
	#NGX_SPDY_HEADERS
 8

	)

38 
	#NGX_SPDY_FRAME_HEADER_SIZE
 8

	)

40 
	#NGX_SPDY_SID_SIZE
 4

	)

42 
	#NGX_SPDY_SYN_STREAM_SIZE
 10

	)

43 
	#NGX_SPDY_SYN_REPLY_SIZE
 6

	)

44 
	#NGX_SPDY_RST_STREAM_SIZE
 8

	)

45 
	#NGX_SPDY_PING_SIZE
 4

	)

46 
	#NGX_SPDY_GOAWAY_SIZE
 4

	)

47 
	#NGX_SPDY_NV_NUM_SIZE
 2

	)

48 
	#NGX_SPDY_NV_NLEN_SIZE
 2

	)

49 
	#NGX_SPDY_NV_VLEN_SIZE
 2

	)

50 
	#NGX_SPDY_SETTINGS_NUM_SIZE
 4

	)

51 
	#NGX_SPDY_SETTINGS_IDF_SIZE
 4

	)

52 
	#NGX_SPDY_SETTINGS_VAL_SIZE
 4

	)

54 
	#NGX_SPDY_SETTINGS_PAIR_SIZE
 \

55 (
NGX_SPDY_SETTINGS_IDF_SIZE
 + 
NGX_SPDY_SETTINGS_VAL_SIZE
)

	)

57 
	#NGX_SPDY_HIGHEST_PRIORITY
 0

	)

58 
	#NGX_SPDY_LOWEST_PRIORITY
 3

	)

60 
	#NGX_SPDY_FLAG_FIN
 0x01

	)

61 
	#NGX_SPDY_FLAG_UNIDIRECTIONAL
 0x02

	)

62 
	#NGX_SPDY_FLAG_CLEAR_SETTINGS
 0x01

	)

64 
	#NGX_SPDY_MAX_FRAME_SIZE
 ((1 << 24Ë- 1)

	)

66 
	#NGX_SPDY_DATA_DISCARD
 1

	)

67 
	#NGX_SPDY_DATA_ERROR
 2

	)

68 
	#NGX_SPDY_DATA_INTERNAL_ERROR
 3

	)

71 
ngx_hâp_•dy_c⁄√˘i⁄_s
 
	tngx_hâp_•dy_c⁄√˘i⁄_t
;

72 
ngx_hâp_•dy_out_‰ame_s
 
	tngx_hâp_•dy_out_‰ame_t
;

75 
	gu_ch¨
 *(*
	tngx_hâp_•dy_h™dÀr_±
Ë(
	tngx_hâp_•dy_c⁄√˘i⁄_t
 *
	tsc
,

76 
	tu_ch¨
 *
	tpos
, u_ch¨ *
	tíd
);

78 
	sngx_hâp_•dy_c⁄√˘i⁄_s
 {

79 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

80 
ngx_hâp_c⁄√˘i⁄_t
 *
	mhâp_c⁄√˘i⁄
;

82 
ngx_uöt_t
 
	m¥o˚ssög
;

84 
u_ch¨
 
	mbuf„r
[
NGX_SPDY_STATE_BUFFER_SIZE
];

85 
size_t
 
	mbuf„r_u£d
;

86 
ngx_hâp_•dy_h™dÀr_±
 
	mh™dÀr
;

88 
z_°ªam
 
	mz°ªam_ö
;

89 
z_°ªam
 
	mz°ªam_out
;

91 
ngx_poﬁ_t
 *
	mpoﬁ
;

93 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_˘l_‰ames
;

94 
ngx_c⁄√˘i⁄_t
 *
	m‰ì_Áke_c⁄√˘i⁄s
;

96 
ngx_hâp_•dy_°ªam_t
 **
	m°ªams_ödex
;

98 
ngx_hâp_•dy_out_‰ame_t
 *
	mœ°_out
;

99 
ngx_hâp_•dy_°ªam_t
 *
	mœ°_°ªam
;

101 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

103 
ngx_uöt_t
 
	mhódîs
;

104 
size_t
 
	mÀngth
;

105 
u_ch¨
 
	mÊags
;

107 
ngx_uöt_t
 
	mœ°_sid
;

109 
	mblocked
:2;

110 
	mwaôög
:1;

114 
	sngx_hâp_•dy_°ªam_s
 {

115 
ngx_uöt_t
 
	mid
;

116 
ngx_hâp_ªque°_t
 *
	mªque°
;

117 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

118 
ngx_hâp_•dy_°ªam_t
 *
	mödex
;

119 
ngx_hâp_•dy_°ªam_t
 *
	m√xt
;

121 
ngx_uöt_t
 
	mhódî_buf„rs
;

122 
ngx_uöt_t
 
	mwaôög
;

123 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì_‰ames
;

124 
ngx_chaö_t
 *
	m‰ì_d©a_hódîs
;

126 
	m¥i‹ôy
:2;

127 
	mh™dÀd
:1;

128 
	mö_˛o£d
:1;

129 
	mout_˛o£d
:1;

130 
	mskù_d©a
:2;

134 
	sngx_hâp_•dy_out_‰ame_s
 {

135 
ngx_hâp_•dy_out_‰ame_t
 *
	m√xt
;

136 
ngx_chaö_t
 *
	mfú°
;

137 
ngx_chaö_t
 *
	mœ°
;

138 
ngx_öt_t
 (*
h™dÀr
)(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
	msc
,

139 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ame
);

141 
ngx_hâp_•dy_out_‰ame_t
 *
	m‰ì
;

143 
ngx_hâp_•dy_°ªam_t
 *
	m°ªam
;

144 
size_t
 
	msize
;

146 
ngx_uöt_t
 
	m¥i‹ôy
;

147 
	mblocked
:1;

148 
	mfö
:1;

152 
ngx_ölöe
 

153 
	$ngx_hâp_•dy_queue_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

154 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

156 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

158 
out
 = &
sc
->
œ°_out
; *out; ouà&(*out)->
√xt
)

160 i‡(
‰ame
->
¥i‹ôy
 >(*
out
)->priority) {

165 
‰ame
->
√xt
 = *
out
;

166 *
out
 = 
‰ame
;

167 
	}
}

170 
ngx_ölöe
 

171 
	$ngx_hâp_•dy_queue_blocked_‰ame
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

172 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

174 
ngx_hâp_•dy_out_‰ame_t
 **
out
;

176 
out
 = &
sc
->
œ°_out
; *ouà&& !(*out)->
blocked
; ouà&(*out)->
√xt
)

178 i‡(
‰ame
->
¥i‹ôy
 >(*
out
)->priority) {

183 
‰ame
->
√xt
 = *
out
;

184 *
out
 = 
‰ame
;

185 
	}
}

188 
ngx_hâp_•dy_öô
(
ngx_evít_t
 *
ªv
);

189 
ngx_hâp_•dy_ªque°_hódîs_öô
();

191 
ngx_öt_t
 
ngx_hâp_•dy_ªad_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

192 
ngx_hâp_˛õ¡_body_h™dÀr_±
 
po°_h™dÀr
);

194 
ngx_hâp_•dy_˛o£_°ªam
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_öt_t
 
rc
);

196 
ngx_öt_t
 
ngx_hâp_•dy_£nd_ouçut_queue
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
);

199 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt16
(
p
, 
s
) \

200 (*(
uöt16_t
 *Ë(
p
Ë
	`ht⁄s
((uöt16_tË(
s
)), (pË+ (uöt16_t))

	)

202 
	#ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
s
) \

203 (*(
uöt32_t
 *Ë(
p
Ë
	`ht⁄l
((uöt32_tË(
s
)), (pË+ (uöt32_t))

	)

205 #i‡(
NGX_HAVE_NONALIGNED
)

207 
	#ngx_•dy_‰ame_wrôe_uöt16
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt16


	)

208 
	#ngx_•dy_‰ame_wrôe_uöt32
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

212 
	#ngx_•dy_‰ame_wrôe_uöt16
(
p
, 
s
) \

213 ((
p
)[0] = (
u_ch¨
Ë(
s
Ë>> 8, (p)[1] = (u_ch¨Ë(s), (pË+ (
uöt16_t
))

	)

215 
	#ngx_•dy_‰ame_wrôe_uöt32
(
p
, 
s
) \

216 ((
p
)[0] = (
u_ch¨
Ë(
s
) >> 24, \

217 (
p
)[1] = (
u_ch¨
Ë(
s
) >> 16, \

218 (
p
)[2] = (
u_ch¨
Ë(
s
) >> 8, \

219 (
p
)[3] = (
u_ch¨
Ë(
s
), (pË+ (
uöt32_t
))

	)

224 
	#ngx_•dy_˘l_‰ame_hód
(
t
) \

225 ((
uöt32_t
Ë
NGX_SPDY_CTL_BIT
 << 31 | 
NGX_SPDY_VERSION
 << 16 | (
t
))

	)

227 
	#ngx_•dy_‰ame_wrôe_hód
(
p
, 
t
) \

228 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, 
	`ngx_•dy_˘l_‰ame_hód
(
t
))

	)

230 
	#ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
f
, 
l
) \

231 
	`ngx_•dy_‰ame_Æig√d_wrôe_uöt32
(
p
, (
f
Ë<< 24 | (
l
))

	)

233 
	#ngx_•dy_‰ame_wrôe_sid
 
ngx_•dy_‰ame_Æig√d_wrôe_uöt32


	)

	@src/http/ngx_http_spdy_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

12 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
	~<zlib.h
>

17 
	#NGX_SPDY_WRITE_BUFFERED
 
NGX_HTTP_WRITE_BUFFERED


	)

19 
	#ngx_hâp_•dy_nv_nsize
(
h
Ë(
NGX_SPDY_NV_NLEN_SIZE
 + (hË- 1)

	)

20 
	#ngx_hâp_•dy_nv_vsize
(
h
Ë(
NGX_SPDY_NV_VLEN_SIZE
 + (hË- 1)

	)

22 
	#ngx_hâp_•dy_nv_wrôe_num
 
ngx_•dy_‰ame_wrôe_uöt16


	)

23 
	#ngx_hâp_•dy_nv_wrôe_∆í
 
ngx_•dy_‰ame_wrôe_uöt16


	)

24 
	#ngx_hâp_•dy_nv_wrôe_vÀn
 
ngx_•dy_‰ame_wrôe_uöt16


	)

26 
	#ngx_hâp_•dy_nv_wrôe_«me
(
p
, 
h
) \

27 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_∆í
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

29 
	#ngx_hâp_•dy_nv_wrôe_vÆ
(
p
, 
h
) \

30 
	`ngx_˝ymem
(
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
, (
h
Ë- 1), h, (hË- 1)

	)

32 
ngx_ölöe
 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_£nd
(

33 
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

35 
ngx_hâp_•dy_out_‰ame_t
 *
ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(

36 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
size_t
 
Àn
, 
ngx_uöt_t
 
Êags
,

37 
ngx_chaö_t
 *
fú°
,Çgx_chaö_à*
œ°
);

39 
ngx_öt_t
 
ngx_hâp_•dy_syn_‰ame_h™dÀr
(

40 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

41 
ngx_öt_t
 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
(

42 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

43 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_‰ame
(

44 
ngx_hâp_•dy_°ªam_t
 *
°ªam
, 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
);

45 
ngx_ölöe
 
ngx_hâp_•dy_h™dÀ_°ªam
(

46 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
);

48 
ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
);

50 
ngx_öt_t
 
ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

53 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ_˘x
 = {

54 
NULL
,

55 
ngx_hâp_•dy_fûãr_öô
,

57 
NULL
,

58 
NULL
,

60 
NULL
,

61 
NULL
,

63 
NULL
,

64 
NULL


68 
ngx_moduÀ_t
 
	gngx_hâp_•dy_fûãr_moduÀ
 = {

69 
NGX_MODULE_V1
,

70 &
ngx_hâp_•dy_fûãr_moduÀ_˘x
,

71 
NULL
,

72 
NGX_HTTP_MODULE
,

73 
NULL
,

74 
NULL
,

75 
NULL
,

76 
NULL
,

77 
NULL
,

78 
NULL
,

79 
NULL
,

80 
NGX_MODULE_V1_PADDING


84 
ngx_hâp_ouçut_hódî_fûãr_±
 
	gngx_hâp_√xt_hódî_fûãr
;

85 
ngx_hâp_ouçut_body_fûãr_±
 
	gngx_hâp_√xt_body_fûãr
;

88 
ngx_öt_t


89 
	$ngx_hâp_•dy_hódî_fûãr
(
ngx_hâp_ªque°_t
 *
r
)

91 
rc
;

92 
size_t
 
Àn
;

93 
u_ch¨
 *
p
, *
buf
, *
œ°
;

94 
ngx_buf_t
 *
b
;

95 
ngx_°r_t
 
ho°
;

96 
ngx_uöt_t
 
i
, 
j
, 
cou¡
, 
p‹t
;

97 
ngx_chaö_t
 *
˛
;

98 
ngx_li°_∑π_t
 *
∑π
, *
±
;

99 
ngx_èbÀ_ñt_t
 *
hódî
, *
h
;

100 
ngx_c⁄√˘i⁄_t
 *
c
;

101 
ngx_hâp_˛ónup_t
 *
˛n
;

102 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

103 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

104 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

105 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

106 
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
;

107 
sockaddr_ö
 *
sö
;

108 #i‡(
NGX_HAVE_INET6
)

109 
sockaddr_ö6
 *
sö6
;

111 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

113 i‡(!
r
->
•dy_°ªam
) {

114  
	`ngx_hâp_√xt_hódî_fûãr
(
r
);

117 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

120 i‡(
r
->
hódî_£¡
) {

121  
NGX_OK
;

124 
r
->
hódî_£¡
 = 1;

126 i‡(
r
 !r->
maö
) {

127  
NGX_OK
;

130 
c
 = 
r
->
c⁄√˘i⁄
;

132 i‡(
r
->
mëhod
 =
NGX_HTTP_HEAD
) {

133 
r
->
hódî_⁄ly
 = 1;

136 
r
->
hódîs_out
.
°©us
) {

138 
NGX_HTTP_OK
:

139 
NGX_HTTP_PARTIAL_CONTENT
:

142 
NGX_HTTP_NOT_MODIFIED
:

143 
r
->
hódî_⁄ly
 = 1;

146 
NGX_HTTP_NO_CONTENT
:

147 
r
->
hódî_⁄ly
 = 1;

149 
	`ngx_°r_nuŒ
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
);

151 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

152 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

157 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

158 
r
->
hódîs_out
.
œ°_modifõd
 = 
NULL
;

161 
Àn
 = 
NGX_SPDY_NV_NUM_SIZE


162 + 
	`ngx_hâp_•dy_nv_nsize
("version")

163 + 
	`ngx_hâp_•dy_nv_vsize
("HTTP/1.1")

164 + 
	`ngx_hâp_•dy_nv_nsize
("status")

165 + 
	`ngx_hâp_•dy_nv_vsize
("418");

167 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

169 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

170 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("server");

171 
Àn
 +
˛cf
->
£rvî_tokís
 ? 
	`ngx_hâp_•dy_nv_vsize
(
NGINX_VER
)

172 : 
	`ngx_hâp_•dy_nv_vsize
("nginx");

175 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

176 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("date")

177 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

180 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

181 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-type")

182 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
;

184 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


185 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

187 
Àn
 +("; ch¨£t="Ë- 1 + 
r
->
hódîs_out
.
ch¨£t
.len;

191 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


192 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

194 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("content-length")

195 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
NGX_OFF_T_LEN
;

198 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


199 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

201 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("last-modified")

202 + 
	`ngx_hâp_•dy_nv_vsize
("Wed, 31 Dec 1986 10:00:00 GMT");

205 i‡(
r
->
hódîs_out
.
loˇti⁄


206 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn


207 && 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
[0] == '/')

209 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

211 i‡(
˛cf
->
£rvî_«me_ö_ªdúe˘
) {

212 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

213 
ho°
 = 
cscf
->
£rvî_«me
;

215 } i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

216 
ho°
 = 
r
->
hódîs_ö
.
£rvî
;

219 
ho°
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

220 
ho°
.
d©a
 = 
addr
;

222 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, &
ho°
, 0Ë!
NGX_OK
) {

223  
NGX_ERROR
;

227 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

229 #i‡(
NGX_HAVE_INET6
)

230 
AF_INET6
:

231 
sö6
 = (
sockaddr_ö6
 *Ë
c
->
loˇl_sockaddr
;

232 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

235 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

236 
AF_UNIX
:

237 
p‹t
 = 0;

241 
sö
 = (
sockaddr_ö
 *Ë
c
->
loˇl_sockaddr
;

242 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

246 
Àn
 +
	`ngx_hâp_•dy_nv_nsize
("location")

247 + 
	`ngx_hâp_•dy_nv_vsize
("https://")

248 + 
ho°
.
Àn


249 + 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
;

251 i‡(
˛cf
->
p‹t_ö_ªdúe˘
) {

253 #i‡(
NGX_HTTP_SSL
)

254 i‡(
c
->
s¶
)

255 
p‹t
 = (port == 443) ? 0 :Öort;

258 
p‹t
 = (port == 80) ? 0 :Öort;

261 
p‹t
 = 0;

264 i‡(
p‹t
) {

265 
Àn
 += (":65535") - 1;

269 
	`ngx_°r_nuŒ
(&
ho°
);

270 
p‹t
 = 0;

273 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

274 
hódî
 = 
∑π
->
ñts
;

276 
i
 = 0; ; i++) {

278 i‡(
i
 >
∑π
->
√…s
) {

279 i‡(
∑π
->
√xt
 =
NULL
) {

283 
∑π
 =Ö¨t->
√xt
;

284 
hódî
 = 
∑π
->
ñts
;

285 
i
 = 0;

288 i‡(
hódî
[
i
].
hash
 == 0) {

292 
Àn
 +
NGX_SPDY_NV_NLEN_SIZE
 + 
hódî
[
i
].
key
.len

293 + 
NGX_SPDY_NV_VLEN_SIZE
 + 
hódî
[
i
].
vÆue
.
Àn
;

296 
buf
 = 
	`ngx_Æloc
(
Àn
, 
r
->
poﬁ
->
log
);

297 i‡(
buf
 =
NULL
) {

298  
NGX_ERROR
;

301 
œ°
 = 
buf
 + 
NGX_SPDY_NV_NUM_SIZE
;

303 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "version");

304 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(last, "HTTP/1.1");

306 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "status");

307 
œ°
 = 
	`ngx_•dy_‰ame_wrôe_uöt16
(last, 3);

308 
œ°
 = 
	`ngx_•rötf
÷a°, "%03ui", 
r
->
hódîs_out
.
°©us
);

310 
cou¡
 = 2;

312 i‡(
r
->
hódîs_out
.
£rvî
 =
NULL
) {

313 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "server");

314 
œ°
 = 
˛cf
->
£rvî_tokís


315 ? 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, 
NGINX_VER
)

316 : 
	`ngx_hâp_•dy_nv_wrôe_vÆ
(
œ°
, "nginx");

318 
cou¡
++;

321 i‡(
r
->
hódîs_out
.
d©e
 =
NULL
) {

322 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "date");

324 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_vÀn
÷a°, 
ngx_ˇched_hâp_time
.
Àn
);

326 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ngx_ˇched_hâp_time
.
d©a
,

327 
ngx_ˇched_hâp_time
.
Àn
);

329 
cou¡
++;

332 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

334 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-type");

336 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

338 
œ°
 = 
	`ngx_˝ymem
(
p
, 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
,

339 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

341 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 =r->hódîs_out.
c⁄ã¡_ty≥
.
Àn


342 && 
r
->
hódîs_out
.
ch¨£t
.
Àn
)

344 
œ°
 = 
	`ngx_˝ymem
(last, "; charset=", ("; charset=") - 1);

346 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
ch¨£t
.
d©a
,

347 
r
->
hódîs_out
.
ch¨£t
.
Àn
);

351 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 
œ°
 - 
p
;

352 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
d©a
 = 
p
;

355 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

356 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
);

358 
cou¡
++;

361 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
 =
NULL


362 && 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0)

364 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "content-length");

366 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

368 
œ°
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
);

370 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

371 
œ°
 - 
p
);

373 
cou¡
++;

376 i‡(
r
->
hódîs_out
.
œ°_modifõd
 =
NULL


377 && 
r
->
hódîs_out
.
œ°_modifõd_time
 != -1)

379 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "last-modified");

381 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

383 
œ°
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
);

385 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

386 
œ°
 - 
p
);

388 
cou¡
++;

391 i‡(
ho°
.
d©a
) {

393 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_«me
(last, "location");

395 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

397 
œ°
 = 
	`ngx_˝ymem
(
p
, "http", ("http") - 1);

399 #i‡(
NGX_HTTP_SSL
)

400 i‡(
c
->
s¶
) {

401 *
œ°
++ ='s';

405 *
œ°
++ = ':'; *last++ = '/'; *last++ = '/';

407 
œ°
 = 
	`ngx_˝ymem
÷a°, 
ho°
.
d©a
, ho°.
Àn
);

409 i‡(
p‹t
) {

410 
œ°
 = 
	`ngx_•rötf
÷a°, ":%ui", 
p‹t
);

413 
œ°
 = 
	`ngx_˝ymem
÷a°, 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
,

414 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

418 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
 = 
œ°
 - 
p
;

419 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
d©a
 = 
p
;

420 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
loˇti⁄
->
key
, "location");

422 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

423 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.
Àn
);

425 
cou¡
++;

428 
∑π
 = &
r
->
hódîs_out
.
hódîs
.part;

429 
hódî
 = 
∑π
->
ñts
;

431 
i
 = 0; ; i++) {

433 i‡(
i
 >
∑π
->
√…s
) {

434 i‡(
∑π
->
√xt
 =
NULL
) {

438 
∑π
 =Ö¨t->
√xt
;

439 
hódî
 = 
∑π
->
ñts
;

440 
i
 = 0;

443 i‡(
hódî
[
i
].
hash
 == 0 || header[i].hash == 2) {

447 i‡((
hódî
[
i
].
key
.
Àn
 == 6

448 && 
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
,

449 (
u_ch¨
 *) "status", 6) == 0)

450 || (
hódî
[
i
].
key
.
Àn
 == 7

451 && 
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
,

452 (
u_ch¨
 *) "version", 7) == 0))

454 
hódî
[
i
].
hash
 = 0;

458 
œ°
 = 
	`ngx_hâp_•dy_nv_wrôe_∆í
÷a°, 
hódî
[
i
].
key
.
Àn
);

460 
	`ngx_°æow
(
œ°
, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

461 
œ°
 +
hódî
[
i
].
key
.
Àn
;

463 
p
 = 
œ°
 + 
NGX_SPDY_NV_VLEN_SIZE
;

465 
œ°
 = 
	`ngx_˝ymem
(
p
, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

467 
±
 = 
∑π
;

468 
h
 = 
hódî
;

470 
j
 = 
i
 + 1; ; j++) {

472 i‡(
j
 >
±
->
√…s
) {

473 i‡(
±
->
√xt
 =
NULL
) {

477 
±
 =Öt->
√xt
;

478 
h
 = 
±
->
ñts
;

479 
j
 = 0;

482 i‡(
h
[
j
].
hash
 == 0 || h[j].hash == 2

483 || 
h
[
j
].
key
.
Àn
 !
hódî
[
i
].key.len

484 || 
	`ngx_°∫ˇ£cmp
(
hódî
[
i
].
key
.
d©a
, 
h
[
j
].key.data,

485 
hódî
[
i
].
key
.
Àn
))

490 *
œ°
++ = '\0';

492 
œ°
 = 
	`ngx_˝ymem
÷a°, 
h
[
j
].
vÆue
.
d©a
, h[j].vÆue.
Àn
);

494 
h
[
j
].
hash
 = 2;

497 (Ë
	`ngx_hâp_•dy_nv_wrôe_vÀn
(
p
 - 
NGX_SPDY_NV_VLEN_SIZE
,

498 
œ°
 - 
p
);

500 
cou¡
++;

503 (Ë
	`ngx_•dy_‰ame_wrôe_uöt16
(
buf
, 
cou¡
);

505 
°ªam
 = 
r
->
•dy_°ªam
;

506 
sc
 = 
°ªam
->
c⁄√˘i⁄
;

508 
Àn
 = 
œ°
 - 
buf
;

510 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE


511 + 
NGX_SPDY_SYN_REPLY_SIZE


512 + 
	`deÊ©eBound
(&
sc
->
z°ªam_out
, 
Àn
));

513 i‡(
b
 =
NULL
) {

514 
	`ngx_‰ì
(
buf
);

515  
NGX_ERROR
;

518 
b
->
œ°
 +
NGX_SPDY_FRAME_HEADER_SIZE
 + 
NGX_SPDY_SYN_REPLY_SIZE
;

520 
sc
->
z°ªam_out
.
√xt_ö
 = 
buf
;

521 
sc
->
z°ªam_out
.
avaû_ö
 = 
Àn
;

522 
sc
->
z°ªam_out
.
√xt_out
 = 
b
->
œ°
;

523 
sc
->
z°ªam_out
.
avaû_out
 = 
b
->
íd
 - b->
œ°
;

525 
rc
 = 
	`deÊ©e
(&
sc
->
z°ªam_out
, 
Z_SYNC_FLUSH
);

527 
	`ngx_‰ì
(
buf
);

529 i‡(
rc
 !
Z_OK
) {

530 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

531 "•dy deÊ©e(ËÁûed: %d", 
rc
);

532  
NGX_ERROR
;

535 
	`ngx_log_debug5
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

537 
sc
->
z°ªam_out
.
√xt_ö
, sc->z°ªam_out.
√xt_out
,

538 
sc
->
z°ªam_out
.
avaû_ö
, sc->z°ªam_out.
avaû_out
,

539 
rc
);

541 
b
->
œ°
 = 
sc
->
z°ªam_out
.
√xt_out
;

543 
p
 = 
b
->
pos
;

544 
p
 = 
	`ngx_•dy_‰ame_wrôe_hód
’, 
NGX_SPDY_SYN_REPLY
);

546 
Àn
 = 
b
->
œ°
 - b->
pos
;

548 
r
->
hódî_size
 = 
Àn
;

550 i‡(
r
->
hódî_⁄ly
) {

551 
b
->
œ°_buf
 = 1;

552 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
NGX_SPDY_FLAG_FIN
,

553 
Àn
 - 
NGX_SPDY_FRAME_HEADER_SIZE
);

555 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(p, 0,

556 
Àn
 - 
NGX_SPDY_FRAME_HEADER_SIZE
);

559 (Ë
	`ngx_•dy_‰ame_wrôe_sid
(
p
, 
°ªam
->
id
);

561 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

562 i‡(
˛
 =
NULL
) {

563  
NGX_ERROR
;

566 
˛
->
buf
 = 
b
;

567 
˛
->
√xt
 = 
NULL
;

569 
‰ame
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_•dy_out_‰ame_t
));

570 i‡(
‰ame
 =
NULL
) {

571  
NGX_ERROR
;

574 
‰ame
->
fú°
 = 
˛
;

575 
‰ame
->
œ°
 = 
˛
;

576 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_syn_‰ame_h™dÀr
;

577 
‰ame
->
‰ì
 = 
NULL
;

578 
‰ame
->
°ªam
 = stream;

579 
‰ame
->
size
 = 
Àn
;

580 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

581 
‰ame
->
blocked
 = 1;

582 
‰ame
->
fö
 = 
r
->
hódî_⁄ly
;

584 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

586 
°ªam
->
id
, 
‰ame
, føme->
size
);

588 
	`ngx_hâp_•dy_queue_blocked_‰ame
(
sc
, 
‰ame
);

590 
r
->
blocked
++;

592 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

593 i‡(
˛n
 =
NULL
) {

594  
NGX_ERROR
;

597 
˛n
->
h™dÀr
 = 
ngx_hâp_•dy_fûãr_˛ónup
;

598 
˛n
->
d©a
 = 
°ªam
;

600 
°ªam
->
waôög
 = 1;

602  
	`ngx_hâp_•dy_fûãr_£nd
(
c
, 
°ªam
);

603 
	}
}

606 
ngx_öt_t


607 
	$ngx_hâp_•dy_body_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

609 
off_t
 
size
;

610 
ngx_buf_t
 *
b
;

611 
ngx_chaö_t
 *
˛
, *
Œ
, *
out
, **
 
;

612 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

613 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

615 
°ªam
 = 
r
->
•dy_°ªam
;

617 i‡(
°ªam
 =
NULL
) {

618  
	`ngx_hâp_√xt_body_fûãr
(
r
, 
ö
);

621 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

622 "•dy body fûã∏\"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

624 i‡(
ö
 =
NULL
 || 
r
->
hódî_⁄ly
) {

626 i‡(
°ªam
->
waôög
) {

627  
NGX_AGAIN
;

630 
r
->
c⁄√˘i⁄
->
buf„ªd
 &~
NGX_SPDY_WRITE_BUFFERED
;

632  
NGX_OK
;

635 
size
 = 0;

636 
 
 = &
out
;

637 
Œ
 = 
ö
;

640 
b
 = 
Œ
->
buf
;

642 i‡(
	`ngx_buf_size
(
b
Ë=0 && !
	`ngx_buf_•ecül
(b)) {

643 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

646 
b
->
ãmp‹¨y
,

647 
b
->
ªcy˛ed
,

648 
b
->
ö_fûe
,

649 
b
->
°¨t
,

650 
b
->
pos
,

651 
b
->
œ°
,

652 
b
->
fûe
,

653 
b
->
fûe_pos
,

654 
b
->
fûe_œ°
);

656 
	`ngx_debug_poöt
();

657  
NGX_ERROR
;

660 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

661 i‡(
˛
 =
NULL
) {

662  
NGX_ERROR
;

665 
size
 +
	`ngx_buf_size
(
b
);

666 
˛
->
buf
 = 
b
;

668 *
 
 = 
˛
;

669 
 
 = &
˛
->
√xt
;

671 i‡(
Œ
->
√xt
 =
NULL
) {

675 
Œ
 =Ül->
√xt
;

678 i‡(
size
 > 
NGX_SPDY_MAX_FRAME_SIZE
) {

679 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

680 "FIXME: chaöÅoÿbig i¿•dy fûãr: %O", 
size
);

681  
NGX_ERROR
;

684 
‰ame
 = 
	`ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
°ªam
, (
size_t
Ë
size
,

685 
b
->
œ°_buf
, 
out
, 
˛
);

686 i‡(
‰ame
 =
NULL
) {

687  
NGX_ERROR
;

690 
	`ngx_hâp_•dy_queue_‰ame
(
°ªam
->
c⁄√˘i⁄
, 
‰ame
);

692 
°ªam
->
waôög
++;

694 
r
->
maö
->
blocked
++;

696  
	`ngx_hâp_•dy_fûãr_£nd
(
r
->
c⁄√˘i⁄
, 
°ªam
);

697 
	}
}

700 
ngx_hâp_•dy_out_‰ame_t
 *

701 
	$ngx_hâp_•dy_fûãr_gë_d©a_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

702 
size_t
 
Àn
, 
ngx_uöt_t
 
fö
, 
ngx_chaö_t
 *
fú°
,Çgx_chaö_à*
œ°
)

704 
u_ch¨
 *
p
;

705 
ngx_buf_t
 *
buf
;

706 
ngx_uöt_t
 
Êags
;

707 
ngx_chaö_t
 *
˛
;

708 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
;

711 
‰ame
 = 
°ªam
->
‰ì_‰ames
;

713 i‡(
‰ame
) {

714 
°ªam
->
‰ì_‰ames
 = 
‰ame
->
‰ì
;

717 
‰ame
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
,

718 (
ngx_hâp_•dy_out_‰ame_t
));

719 i‡(
‰ame
 =
NULL
) {

720  
NULL
;

724 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
°ªam
->
ªque°
->
c⁄√˘i⁄
->
log
, 0,

726 
°ªam
->
id
, 
‰ame
, 
Àn
, 
fö
);

728 i‡(
Àn
 || 
fö
) {

730 
Êags
 = 
fö
 ? 
NGX_SPDY_FLAG_FIN
 : 0;

732 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
°ªam
->
ªque°
->
poﬁ
,

733 &
°ªam
->
‰ì_d©a_hódîs
);

734 i‡(
˛
 =
NULL
) {

735  
NULL
;

738 
buf
 = 
˛
->buf;

740 i‡(
buf
->
°¨t
) {

741 
p
 = 
buf
->
°¨t
;

742 
buf
->
pos
 = 
p
;

744 
p
 +(
uöt32_t
);

746 (Ë
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
(
p
, 
Êags
, 
Àn
);

749 
p
 = 
	`ngx_∑Œoc
(
°ªam
->
ªque°
->
poﬁ
, 
NGX_SPDY_FRAME_HEADER_SIZE
);

750 i‡(
p
 =
NULL
) {

751  
NULL
;

754 
buf
->
pos
 = 
p
;

755 
buf
->
°¨t
 = 
p
;

757 
p
 = 
	`ngx_•dy_‰ame_wrôe_sid
’, 
°ªam
->
id
);

758 
p
 = 
	`ngx_•dy_‰ame_wrôe_Êags_™d_Àn
’, 
Êags
, 
Àn
);

760 
buf
->
œ°
 = 
p
;

761 
buf
->
íd
 = 
p
;

763 
buf
->
èg
 = (
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_moduÀ
;

764 
buf
->
mem‹y
 = 1;

767 
˛
->
√xt
 = 
fú°
;

768 
fú°
 = 
˛
;

771 
‰ame
->
fú°
 = first;

772 
‰ame
->
œ°
 =Üast;

773 
‰ame
->
h™dÀr
 = 
ngx_hâp_•dy_d©a_‰ame_h™dÀr
;

774 
‰ame
->
‰ì
 = 
NULL
;

775 
‰ame
->
°ªam
 = stream;

776 
‰ame
->
size
 = 
NGX_SPDY_FRAME_HEADER_SIZE
 + 
Àn
;

777 
‰ame
->
¥i‹ôy
 = 
°ªam
->priority;

778 
‰ame
->
blocked
 = 0;

779 
‰ame
->
fö
 = fin;

781  
‰ame
;

782 
	}
}

785 
ngx_ölöe
 
ngx_öt_t


786 
	$ngx_hâp_•dy_fûãr_£nd
(
ngx_c⁄√˘i⁄_t
 *
fc
, 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

788 i‡(
	`ngx_hâp_•dy_£nd_ouçut_queue
(
°ªam
->
c⁄√˘i⁄
Ë=
NGX_ERROR
) {

789 
fc
->
îr‹
 = 1;

790  
NGX_ERROR
;

793 i‡(
°ªam
->
waôög
) {

794 
fc
->
buf„ªd
 |
NGX_SPDY_WRITE_BUFFERED
;

795 
fc
->
wrôe
->
dñayed
 = 1;

796  
NGX_AGAIN
;

799 
fc
->
buf„ªd
 &~
NGX_SPDY_WRITE_BUFFERED
;

801  
NGX_OK
;

802 
	}
}

805 
ngx_öt_t


806 
	$ngx_hâp_•dy_syn_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

807 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

809 
ngx_buf_t
 *
buf
;

810 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

812 
buf
 = 
‰ame
->
fú°
->buf;

814 i‡(
buf
->
pos
 !buf->
œ°
) {

815  
NGX_AGAIN
;

818 
°ªam
 = 
‰ame
->stream;

820 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

821 "•dy:%uòSYN_REPLY fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

823 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
‰ame
->
fú°
);

825 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

827 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

829  
NGX_OK
;

830 
	}
}

833 
ngx_öt_t


834 
	$ngx_hâp_•dy_d©a_‰ame_h™dÀr
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

835 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

837 
ngx_chaö_t
 *
˛
, *
 
;

838 
ngx_hâp_•dy_°ªam_t
 *
°ªam
;

840 
°ªam
 = 
‰ame
->stream;

842 
˛
 = 
‰ame
->
fú°
;

844 i‡(
˛
->
buf
->
èg
 =(
ngx_buf_èg_t
Ë&
ngx_hâp_•dy_fûãr_moduÀ
) {

846 i‡(
˛
->
buf
->
pos
 !˛->buf->
œ°
) {

847 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

849 
°ªam
->
id
, 
‰ame
);

851  
NGX_AGAIN
;

854 
 
 = 
˛
->
√xt
;

856 
˛
->
√xt
 = 
°ªam
->
‰ì_d©a_hódîs
;

857 
°ªam
->
‰ì_d©a_hódîs
 = 
˛
;

859 i‡(
˛
 =
‰ame
->
œ°
) {

860 
d⁄e
;

863 
˛
 = 
 
;

867 i‡(
	`ngx_buf_size
(
˛
->
buf
) != 0) {

869 i‡(
˛
 !
‰ame
->
fú°
) {

870 
‰ame
->
fú°
 = 
˛
;

871 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

874 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

876 
°ªam
->
id
, 
‰ame
);

878  
NGX_AGAIN
;

881 
 
 = 
˛
->
√xt
;

883 
	`ngx_‰ì_chaö
(
°ªam
->
ªque°
->
poﬁ
, 
˛
);

885 i‡(
˛
 =
‰ame
->
œ°
) {

886 
d⁄e
;

889 
˛
 = 
 
;

892 
d⁄e
:

894 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
sc
->
c⁄√˘i⁄
->
log
, 0,

895 "•dy:%uòDATA fømê%∞wa†£¡", 
°ªam
->
id
, 
‰ame
);

897 
°ªam
->
ªque°
->
hódî_size
 +
NGX_SPDY_FRAME_HEADER_SIZE
;

899 
	`ngx_hâp_•dy_h™dÀ_‰ame
(
°ªam
, 
‰ame
);

901 
	`ngx_hâp_•dy_h™dÀ_°ªam
(
sc
, 
°ªam
);

903  
NGX_OK
;

904 
	}
}

907 
ngx_ölöe
 

908 
	$ngx_hâp_•dy_h™dÀ_‰ame
(
ngx_hâp_•dy_°ªam_t
 *
°ªam
,

909 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
)

911 
ngx_hâp_ªque°_t
 *
r
;

913 
r
 = 
°ªam
->
ªque°
;

915 
r
->
c⁄√˘i⁄
->
£¡
 +
‰ame
->
size
;

916 
r
->
blocked
--;

918 i‡(
‰ame
->
fö
) {

919 
°ªam
->
out_˛o£d
 = 1;

922 
‰ame
->
‰ì
 = 
°ªam
->
‰ì_‰ames
;

923 
°ªam
->
‰ì_‰ames
 = 
‰ame
;

925 
°ªam
->
waôög
--;

926 
	}
}

929 
ngx_ölöe
 

930 
	$ngx_hâp_•dy_h™dÀ_°ªam
(
ngx_hâp_•dy_c⁄√˘i⁄_t
 *
sc
,

931 
ngx_hâp_•dy_°ªam_t
 *
°ªam
)

933 
ngx_c⁄√˘i⁄_t
 *
fc
;

935 
fc
 = 
°ªam
->
ªque°
->
c⁄√˘i⁄
;

937 
fc
->
wrôe
->
dñayed
 = 0;

939 i‡(
°ªam
->
h™dÀd
) {

943 i‡(
sc
->
blocked
 == 2) {

944 
°ªam
->
h™dÀd
 = 1;

946 
°ªam
->
√xt
 = 
sc
->
œ°_°ªam
;

947 
sc
->
œ°_°ªam
 = 
°ªam
;

949 
	}
}

953 
	$ngx_hâp_•dy_fûãr_˛ónup
(*
d©a
)

955 
ngx_hâp_•dy_°ªam_t
 *
°ªam
 = 
d©a
;

957 
ngx_hâp_ªque°_t
 *
r
;

958 
ngx_hâp_•dy_out_‰ame_t
 *
‰ame
, **
‚
;

960 i‡(
°ªam
->
waôög
 == 0) {

964 
r
 = 
°ªam
->
ªque°
;

966 
‚
 = &
°ªam
->
c⁄√˘i⁄
->
œ°_out
;

969 
‰ame
 = *
‚
;

971 i‡(
‰ame
 =
NULL
) {

975 i‡(
‰ame
->
°ªam
 =°ªam && !‰ame->
blocked
) {

977 
°ªam
->
waôög
--;

978 
r
->
blocked
--;

980 *
‚
 = 
‰ame
->
√xt
;

984 
‚
 = &
‰ame
->
√xt
;

986 
	}
}

989 
ngx_öt_t


990 
	$ngx_hâp_•dy_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

992 
ngx_hâp_√xt_hódî_fûãr
 = 
ngx_hâp_t›_hódî_fûãr
;

993 
ngx_hâp_t›_hódî_fûãr
 = 
ngx_hâp_•dy_hódî_fûãr
;

995 
ngx_hâp_√xt_body_fûãr
 = 
ngx_hâp_t›_body_fûãr
;

996 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_•dy_body_fûãr
;

998  
NGX_OK
;

999 
	}
}

	@src/http/ngx_http_spdy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngx_hâp_•dy_moduÀ.h
>

14 
ngx_öt_t
 
ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_öt_t
 
ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

21 
ngx_öt_t
 
ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
);

23 *
ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

24 *
ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

26 *
ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

27 *
ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

28 *
chûd
);

30 *
ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
,

31 *
d©a
);

32 *
ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
);

33 *
ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
,

34 *
d©a
);

37 
ngx_c⁄f_num_bounds_t
 
	gngx_hâp_•dy_hódîs_comp_bounds
 = {

38 
ngx_c⁄f_check_num_bounds
, 0, 9

41 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_ªcv_buf„r_size_po°
 =

42 { 
ngx_hâp_•dy_ªcv_buf„r_size
 };

43 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_poﬁ_size_po°
 =

44 { 
ngx_hâp_•dy_poﬁ_size
 };

45 
ngx_c⁄f_po°_t
 
	gngx_hâp_•dy_°ªams_ödex_mask_po°
 =

46 { 
ngx_hâp_•dy_°ªams_ödex_mask
 };

49 
ngx_comm™d_t
 
	gngx_hâp_•dy_comm™ds
[] = {

51 { 
ngx_°rög
("spdy_recv_buffer_size"),

52 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_TAKE1
,

53 
ngx_c⁄f_£t_size_¶Ÿ
,

54 
NGX_HTTP_MAIN_CONF_OFFSET
,

55 
off£tof
(
ngx_hâp_•dy_maö_c⁄f_t
, 
ªcv_buf„r_size
),

56 &
ngx_hâp_•dy_ªcv_buf„r_size_po°
 },

58 { 
ngx_°rög
("spdy_pool_size"),

59 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

60 
ngx_c⁄f_£t_size_¶Ÿ
,

61 
NGX_HTTP_SRV_CONF_OFFSET
,

62 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
poﬁ_size
),

63 &
ngx_hâp_•dy_poﬁ_size_po°
 },

65 { 
ngx_°rög
("spdy_max_concurrent_streams"),

66 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

67 
ngx_c⁄f_£t_num_¶Ÿ
,

68 
NGX_HTTP_SRV_CONF_OFFSET
,

69 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
c⁄cuºít_°ªams
),

70 
NULL
 },

72 { 
ngx_°rög
("spdy_streams_index_size"),

73 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

74 
ngx_c⁄f_£t_num_¶Ÿ
,

75 
NGX_HTTP_SRV_CONF_OFFSET
,

76 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
°ªams_ödex_mask
),

77 &
ngx_hâp_•dy_°ªams_ödex_mask_po°
 },

79 { 
ngx_°rög
("spdy_recv_timeout"),

80 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

81 
ngx_c⁄f_£t_m£c_¶Ÿ
,

82 
NGX_HTTP_SRV_CONF_OFFSET
,

83 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
ªcv_timeout
),

84 
NULL
 },

86 { 
ngx_°rög
("spdy_keepalive_timeout"),

87 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

88 
ngx_c⁄f_£t_m£c_¶Ÿ
,

89 
NGX_HTTP_SRV_CONF_OFFSET
,

90 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
kì∑live_timeout
),

91 
NULL
 },

93 { 
ngx_°rög
("spdy_headers_comp"),

94 
NGX_HTTP_MAIN_CONF
|
NGX_HTTP_SRV_CONF
|
NGX_CONF_TAKE1
,

95 
ngx_c⁄f_£t_num_¶Ÿ
,

96 
NGX_HTTP_SRV_CONF_OFFSET
,

97 
off£tof
(
ngx_hâp_•dy_§v_c⁄f_t
, 
hódîs_comp
),

98 &
ngx_hâp_•dy_hódîs_comp_bounds
 },

100 
ngx_nuŒ_comm™d


104 
ngx_hâp_moduÀ_t
 
	gngx_hâp_•dy_moduÀ_˘x
 = {

105 
ngx_hâp_•dy_add_v¨übÀs
,

106 
NULL
,

108 
ngx_hâp_•dy_¸óã_maö_c⁄f
,

109 
ngx_hâp_•dy_öô_maö_c⁄f
,

111 
ngx_hâp_•dy_¸óã_§v_c⁄f
,

112 
ngx_hâp_•dy_mîge_§v_c⁄f
,

114 
NULL
,

115 
NULL


119 
ngx_moduÀ_t
 
	gngx_hâp_•dy_moduÀ
 = {

120 
NGX_MODULE_V1
,

121 &
ngx_hâp_•dy_moduÀ_˘x
,

122 
ngx_hâp_•dy_comm™ds
,

123 
NGX_HTTP_MODULE
,

124 
NULL
,

125 
ngx_hâp_•dy_moduÀ_öô
,

126 
NULL
,

127 
NULL
,

128 
NULL
,

129 
NULL
,

130 
NULL
,

131 
NGX_MODULE_V1_PADDING


135 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_•dy_v¨s
[] = {

137 { 
ngx_°rög
("•dy"), 
NULL
,

138 
ngx_hâp_•dy_v¨übÀ
, 0, 0, 0 },

140 { 
ngx_°rög
("•dy_ªque°_¥i‹ôy"), 
NULL
,

141 
ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
, 0, 0, 0 },

143 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

147 
ngx_öt_t


148 
	$ngx_hâp_•dy_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

150 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

152 
v
 = 
ngx_hâp_•dy_v¨s
; v->
«me
.
Àn
; v++) {

153 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

154 i‡(
v¨
 =
NULL
) {

155  
NGX_ERROR
;

158 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

159 
v¨
->
d©a
 = 
v
->data;

162  
NGX_OK
;

163 
	}
}

166 
ngx_öt_t


167 
	$ngx_hâp_•dy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

168 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

170 i‡(
r
->
•dy_°ªam
) {

171 
v
->
Àn
 = 1;

172 
v
->
vÆid
 = 1;

173 
v
->
no_ˇchóbÀ
 = 0;

174 
v
->
nŸ_found
 = 0;

175 
v
->
d©a
 = (
u_ch¨
 *) "2";

177  
NGX_OK
;

180 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

182  
NGX_OK
;

183 
	}
}

186 
ngx_öt_t


187 
	$ngx_hâp_•dy_ªque°_¥i‹ôy_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

188 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

190 i‡(
r
->
•dy_°ªam
) {

191 
v
->
Àn
 = 1;

192 
v
->
vÆid
 = 1;

193 
v
->
no_ˇchóbÀ
 = 0;

194 
v
->
nŸ_found
 = 0;

196 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 1);

197 i‡(
v
->
d©a
 =
NULL
) {

198  
NGX_ERROR
;

201 
v
->
d©a
[0] = '0' + (
u_ch¨
Ë
r
->
•dy_°ªam
->
¥i‹ôy
;

203  
NGX_OK
;

206 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

208  
NGX_OK
;

209 
	}
}

212 
ngx_öt_t


213 
	$ngx_hâp_•dy_moduÀ_öô
(
ngx_cy˛e_t
 *
cy˛e
)

215 
	`ngx_hâp_•dy_ªque°_hódîs_öô
();

217  
NGX_OK
;

218 
	}
}

222 
	$ngx_hâp_•dy_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

224 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
;

226 
smcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_maö_c⁄f_t
));

227 i‡(
smcf
 =
NULL
) {

228  
NULL
;

231 
smcf
->
ªcv_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

233  
smcf
;

234 
	}
}

238 
	$ngx_hâp_•dy_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

240 
ngx_hâp_•dy_maö_c⁄f_t
 *
smcf
 = 
c⁄f
;

242 i‡(
smcf
->
ªcv_buf„r_size
 =
NGX_CONF_UNSET_SIZE
) {

243 
smcf
->
ªcv_buf„r_size
 = 256 * 1024;

246  
NGX_CONF_OK
;

247 
	}
}

251 
	$ngx_hâp_•dy_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

253 
ngx_hâp_•dy_§v_c⁄f_t
 *
sscf
;

255 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_•dy_§v_c⁄f_t
));

256 i‡(
sscf
 =
NULL
) {

257  
NULL
;

260 
sscf
->
poﬁ_size
 = 
NGX_CONF_UNSET_SIZE
;

262 
sscf
->
c⁄cuºít_°ªams
 = 
NGX_CONF_UNSET_UINT
;

263 
sscf
->
°ªams_ödex_mask
 = 
NGX_CONF_UNSET_UINT
;

265 
sscf
->
ªcv_timeout
 = 
NGX_CONF_UNSET_MSEC
;

266 
sscf
->
kì∑live_timeout
 = 
NGX_CONF_UNSET_MSEC
;

268 
sscf
->
hódîs_comp
 = 
NGX_CONF_UNSET
;

270  
sscf
;

271 
	}
}

275 
	$ngx_hâp_•dy_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

277 
ngx_hâp_•dy_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

278 
ngx_hâp_•dy_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

280 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
poﬁ_size
, 
¥ev
->pool_size, 4096);

282 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
c⁄cuºít_°ªams
,

283 
¥ev
->
c⁄cuºít_°ªams
, 100);

285 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°ªams_ödex_mask
,

286 
¥ev
->
°ªams_ödex_mask
, 32 - 1);

288 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªcv_timeout
,

289 
¥ev
->
ªcv_timeout
, 30000);

290 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
kì∑live_timeout
,

291 
¥ev
->
kì∑live_timeout
, 180000);

293 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
hódîs_comp
, 
¥ev
->headers_comp, 0);

295  
NGX_CONF_OK
;

296 
	}
}

300 
	$ngx_hâp_•dy_ªcv_buf„r_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

302 
size_t
 *
•
 = 
d©a
;

304 i‡(*
•
 <2 * 
NGX_SPDY_STATE_BUFFER_SIZE
) {

308  
NGX_CONF_OK
;

309 
	}
}

313 
	$ngx_hâp_•dy_poﬁ_size
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

315 
size_t
 *
•
 = 
d©a
;

317 i‡(*
•
 < 
NGX_MIN_POOL_SIZE
) {

318 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

320 
NGX_MIN_POOL_SIZE
);

321  
NGX_CONF_ERROR
;

324 i‡(*
•
 % 
NGX_POOL_ALIGNMENT
) {

325 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

327 
NGX_POOL_ALIGNMENT
);

328  
NGX_CONF_ERROR
;

331  
NGX_CONF_OK
;

332 
	}
}

336 
	$ngx_hâp_•dy_°ªams_ödex_mask
(
ngx_c⁄f_t
 *
cf
, *
po°
, *
d©a
)

338 
ngx_uöt_t
 *
≈
 = 
d©a
;

340 
ngx_uöt_t
 
mask
;

342 
mask
 = *
≈
 - 1;

344 i‡(*
≈
 =0 || (*≈ & 
mask
)) {

348 *
≈
 = 
mask
;

350  
NGX_CONF_OK
;

351 
	}
}

	@src/http/ngx_http_spdy_module.h

8 #i‚de‡
_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


9 
	#_NGX_HTTP_SPDY_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
size_t
 
	mªcv_buf„r_size
;

19 
u_ch¨
 *
	mªcv_buf„r
;

20 } 
	tngx_hâp_•dy_maö_c⁄f_t
;

24 
size_t
 
	mpoﬁ_size
;

25 
ngx_uöt_t
 
	mc⁄cuºít_°ªams
;

26 
ngx_uöt_t
 
	m°ªams_ödex_mask
;

27 
ngx_m£c_t
 
	mªcv_timeout
;

28 
ngx_m£c_t
 
	mkì∑live_timeout
;

29 
ngx_öt_t
 
	mhódîs_comp
;

30 } 
	tngx_hâp_•dy_§v_c⁄f_t
;

33 
ngx_moduÀ_t
 
ngx_hâp_•dy_moduÀ
;

	@src/http/ngx_http_special_response.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
);

16 
ngx_öt_t
 
ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
);

18 
ngx_öt_t
 
ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
);

21 
u_ch¨
 
	gngx_hâp_îr‹_fuŒ_èû
[] =

22 "<hr><˚¡î>" 
NGINX_VER
 "</˚¡î>" 
CRLF


23 "</body>" 
CRLF


24 "</html>" 
CRLF


28 
u_ch¨
 
	gngx_hâp_îr‹_èû
[] =

29 "<hr><˚¡î>ngöx</˚¡î>" 
CRLF


30 "</body>" 
CRLF


31 "</html>" 
CRLF


35 
u_ch¨
 
	gngx_hâp_msõ_∑ddög
[] =

36 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


37 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


38 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


39 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


40 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


41 "<!--áÖaddögÅÿdißbÀ MSIEánd Chromê‰õndlyÉº‹Öagê-->" 
CRLF


45 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_hód
[] =

49 
u_ch¨
 
	gngx_hâp_msõ_ª‰esh_èû
[] =

50 "\"></hód><body></body></html>" 
CRLF
;

53 
	gngx_hâp_îr‹_301_∑ge
[] =

54 "<html>" 
CRLF


55 "<hód><tôÀ>301 Moved Pîm™íéy</tôÀ></hód>" 
CRLF


56 "<body bgcﬁ‹=\"whôe\">" 
CRLF


57 "<˚¡î><h1>301 Moved Pîm™íéy</h1></˚¡î>" 
CRLF


61 
	gngx_hâp_îr‹_302_∑ge
[] =

62 "<html>" 
CRLF


63 "<hód><tôÀ>302 Found</tôÀ></hód>" 
CRLF


64 "<body bgcﬁ‹=\"whôe\">" 
CRLF


65 "<˚¡î><h1>302 Found</h1></˚¡î>" 
CRLF


69 
	gngx_hâp_îr‹_303_∑ge
[] =

70 "<html>" 
CRLF


71 "<hód><tôÀ>303 Sì Othî</tôÀ></hód>" 
CRLF


72 "<body bgcﬁ‹=\"whôe\">" 
CRLF


73 "<˚¡î><h1>303 Sì Othî</h1></˚¡î>" 
CRLF


77 
	gngx_hâp_îr‹_307_∑ge
[] =

78 "<html>" 
CRLF


79 "<hód><tôÀ>307 Temp‹¨y Redúe˘</tôÀ></hód>" 
CRLF


80 "<body bgcﬁ‹=\"whôe\">" 
CRLF


81 "<˚¡î><h1>307 Temp‹¨y Redúe˘</h1></˚¡î>" 
CRLF


85 
	gngx_hâp_îr‹_400_∑ge
[] =

86 "<html>" 
CRLF


87 "<hód><tôÀ>400 Bad Reque°</tôÀ></hód>" 
CRLF


88 "<body bgcﬁ‹=\"whôe\">" 
CRLF


89 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


93 
	gngx_hâp_îr‹_401_∑ge
[] =

94 "<html>" 
CRLF


95 "<hód><tôÀ>401 Auth‹iz©i⁄ Requúed</tôÀ></hód>" 
CRLF


96 "<body bgcﬁ‹=\"whôe\">" 
CRLF


97 "<˚¡î><h1>401 Auth‹iz©i⁄ Requúed</h1></˚¡î>" 
CRLF


101 
	gngx_hâp_îr‹_402_∑ge
[] =

102 "<html>" 
CRLF


103 "<hód><tôÀ>402 PaymíàRequúed</tôÀ></hód>" 
CRLF


104 "<body bgcﬁ‹=\"whôe\">" 
CRLF


105 "<˚¡î><h1>402 PaymíàRequúed</h1></˚¡î>" 
CRLF


109 
	gngx_hâp_îr‹_403_∑ge
[] =

110 "<html>" 
CRLF


111 "<hód><tôÀ>403 F‹biddí</tôÀ></hód>" 
CRLF


112 "<body bgcﬁ‹=\"whôe\">" 
CRLF


113 "<˚¡î><h1>403 F‹biddí</h1></˚¡î>" 
CRLF


117 
	gngx_hâp_îr‹_404_∑ge
[] =

118 "<html>" 
CRLF


119 "<hód><tôÀ>404 NŸ Found</tôÀ></hód>" 
CRLF


120 "<body bgcﬁ‹=\"whôe\">" 
CRLF


121 "<˚¡î><h1>404 NŸ Found</h1></˚¡î>" 
CRLF


125 
	gngx_hâp_îr‹_405_∑ge
[] =

126 "<html>" 
CRLF


127 "<hód><tôÀ>405 NŸ AŒowed</tôÀ></hód>" 
CRLF


128 "<body bgcﬁ‹=\"whôe\">" 
CRLF


129 "<˚¡î><h1>405 NŸ AŒowed</h1></˚¡î>" 
CRLF


133 
	gngx_hâp_îr‹_406_∑ge
[] =

134 "<html>" 
CRLF


135 "<hód><tôÀ>406 NŸ Ac˚±abÀ</tôÀ></hód>" 
CRLF


136 "<body bgcﬁ‹=\"whôe\">" 
CRLF


137 "<˚¡î><h1>406 NŸ Ac˚±abÀ</h1></˚¡î>" 
CRLF


141 
	gngx_hâp_îr‹_408_∑ge
[] =

142 "<html>" 
CRLF


143 "<hód><tôÀ>408 Reque° Time-out</tôÀ></hód>" 
CRLF


144 "<body bgcﬁ‹=\"whôe\">" 
CRLF


145 "<˚¡î><h1>408 Reque° Time-out</h1></˚¡î>" 
CRLF


149 
	gngx_hâp_îr‹_409_∑ge
[] =

150 "<html>" 
CRLF


151 "<hód><tôÀ>409 C⁄Êi˘</tôÀ></hód>" 
CRLF


152 "<body bgcﬁ‹=\"whôe\">" 
CRLF


153 "<˚¡î><h1>409 C⁄Êi˘</h1></˚¡î>" 
CRLF


157 
	gngx_hâp_îr‹_410_∑ge
[] =

158 "<html>" 
CRLF


159 "<hód><tôÀ>410 G⁄e</tôÀ></hód>" 
CRLF


160 "<body bgcﬁ‹=\"whôe\">" 
CRLF


161 "<˚¡î><h1>410 G⁄e</h1></˚¡î>" 
CRLF


165 
	gngx_hâp_îr‹_411_∑ge
[] =

166 "<html>" 
CRLF


167 "<hód><tôÀ>411 Lígth Requúed</tôÀ></hód>" 
CRLF


168 "<body bgcﬁ‹=\"whôe\">" 
CRLF


169 "<˚¡î><h1>411 Lígth Requúed</h1></˚¡î>" 
CRLF


173 
	gngx_hâp_îr‹_412_∑ge
[] =

174 "<html>" 
CRLF


175 "<hód><tôÀ>412 Pªc⁄dôi⁄ Faûed</tôÀ></hód>" 
CRLF


176 "<body bgcﬁ‹=\"whôe\">" 
CRLF


177 "<˚¡î><h1>412 Pªc⁄dôi⁄ Faûed</h1></˚¡î>" 
CRLF


181 
	gngx_hâp_îr‹_413_∑ge
[] =

182 "<html>" 
CRLF


183 "<hód><tôÀ>413 Reque° E¡ôy ToÿL¨ge</tôÀ></hód>" 
CRLF


184 "<body bgcﬁ‹=\"whôe\">" 
CRLF


185 "<˚¡î><h1>413 Reque° E¡ôy ToÿL¨ge</h1></˚¡î>" 
CRLF


189 
	gngx_hâp_îr‹_414_∑ge
[] =

190 "<html>" 
CRLF


191 "<hód><tôÀ>414 Reque°-URI ToÿL¨ge</tôÀ></hód>" 
CRLF


192 "<body bgcﬁ‹=\"whôe\">" 
CRLF


193 "<˚¡î><h1>414 Reque°-URI ToÿL¨ge</h1></˚¡î>" 
CRLF


197 
	gngx_hâp_îr‹_415_∑ge
[] =

198 "<html>" 
CRLF


199 "<hód><tôÀ>415 Unsuµ‹ãd Medü Ty≥</tôÀ></hód>" 
CRLF


200 "<body bgcﬁ‹=\"whôe\">" 
CRLF


201 "<˚¡î><h1>415 Unsuµ‹ãd Medü Ty≥</h1></˚¡î>" 
CRLF


205 
	gngx_hâp_îr‹_416_∑ge
[] =

206 "<html>" 
CRLF


207 "<hód><tôÀ>416 Reque°ed R™gêNŸ S©isfübÀ</tôÀ></hód>" 
CRLF


208 "<body bgcﬁ‹=\"whôe\">" 
CRLF


209 "<˚¡î><h1>416 Reque°ed R™gêNŸ S©isfübÀ</h1></˚¡î>" 
CRLF


213 
	gngx_hâp_îr‹_494_∑ge
[] =

214 "<html>" 
CRLF


216 
CRLF


217 "<body bgcﬁ‹=\"whôe\">" 
CRLF


218 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


219 "<˚¡î>Reque° Hódî O∏Cookõ ToÿL¨ge</˚¡î>" 
CRLF


223 
	gngx_hâp_îr‹_495_∑ge
[] =

224 "<html>" 
CRLF


226 
CRLF


227 "<body bgcﬁ‹=\"whôe\">" 
CRLF


228 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


229 "<˚¡î>ThêSSL cîtifiˇãÉº‹</˚¡î>" 
CRLF


233 
	gngx_hâp_îr‹_496_∑ge
[] =

234 "<html>" 
CRLF


236 
CRLF


237 "<body bgcﬁ‹=\"whôe\">" 
CRLF


238 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


239 "<˚¡î>Nÿªquúed SSL cîtifiˇã wa†£¡</˚¡î>" 
CRLF


243 
	gngx_hâp_îr‹_497_∑ge
[] =

244 "<html>" 
CRLF


246 
CRLF


247 "<body bgcﬁ‹=\"whôe\">" 
CRLF


248 "<˚¡î><h1>400 Bad Reque°</h1></˚¡î>" 
CRLF


249 "<˚¡î>Thê∂aö HTTPÑeque° wa†£¡ÅÿHTTPSÖ‹t</˚¡î>" 
CRLF


253 
	gngx_hâp_îr‹_500_∑ge
[] =

254 "<html>" 
CRLF


255 "<hód><tôÀ>500 I¡î«»Sîvî Eº‹</tôÀ></hód>" 
CRLF


256 "<body bgcﬁ‹=\"whôe\">" 
CRLF


257 "<˚¡î><h1>500 I¡î«»Sîvî Eº‹</h1></˚¡î>" 
CRLF


261 
	gngx_hâp_îr‹_501_∑ge
[] =

262 "<html>" 
CRLF


263 "<hód><tôÀ>501 NŸ Im∂emíãd</tôÀ></hód>" 
CRLF


264 "<body bgcﬁ‹=\"whôe\">" 
CRLF


265 "<˚¡î><h1>501 NŸ Im∂emíãd</h1></˚¡î>" 
CRLF


269 
	gngx_hâp_îr‹_502_∑ge
[] =

270 "<html>" 
CRLF


271 "<hód><tôÀ>502 Bad G©eway</tôÀ></hód>" 
CRLF


272 "<body bgcﬁ‹=\"whôe\">" 
CRLF


273 "<˚¡î><h1>502 Bad G©eway</h1></˚¡î>" 
CRLF


277 
	gngx_hâp_îr‹_503_∑ge
[] =

278 "<html>" 
CRLF


279 "<hód><tôÀ>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</tôÀ></hód>" 
CRLF


280 "<body bgcﬁ‹=\"whôe\">" 
CRLF


281 "<˚¡î><h1>503 Sîvi˚ Temp‹¨ûy U«vaûabÀ</h1></˚¡î>" 
CRLF


285 
	gngx_hâp_îr‹_504_∑ge
[] =

286 "<html>" 
CRLF


287 "<hód><tôÀ>504 G©eway Time-out</tôÀ></hód>" 
CRLF


288 "<body bgcﬁ‹=\"whôe\">" 
CRLF


289 "<˚¡î><h1>504 G©eway Time-out</h1></˚¡î>" 
CRLF


293 
	gngx_hâp_îr‹_507_∑ge
[] =

294 "<html>" 
CRLF


295 "<hód><tôÀ>507 Insufficõ¡ St‹age</tôÀ></hód>" 
CRLF


296 "<body bgcﬁ‹=\"whôe\">" 
CRLF


297 "<˚¡î><h1>507 Insufficõ¡ St‹age</h1></˚¡î>" 
CRLF


301 
ngx_°r_t
 
	gngx_hâp_îr‹_∑ges
[] = {

303 
ngx_nuŒ_°rög
,

305 
	#NGX_HTTP_LAST_2XX
 202

	)

306 
	#NGX_HTTP_OFF_3XX
 (
NGX_HTTP_LAST_2XX
 - 201)

	)

309 
ngx_°rög
(
ngx_hâp_îr‹_301_∑ge
),

310 
ngx_°rög
(
ngx_hâp_îr‹_302_∑ge
),

311 
ngx_°rög
(
ngx_hâp_îr‹_303_∑ge
),

312 
ngx_nuŒ_°rög
,

313 
ngx_nuŒ_°rög
,

314 
ngx_nuŒ_°rög
,

315 
ngx_°rög
(
ngx_hâp_îr‹_307_∑ge
),

317 
	#NGX_HTTP_LAST_3XX
 308

	)

318 
	#NGX_HTTP_OFF_4XX
 (
NGX_HTTP_LAST_3XX
 - 301 + 
NGX_HTTP_OFF_3XX
)

	)

320 
ngx_°rög
(
ngx_hâp_îr‹_400_∑ge
),

321 
ngx_°rög
(
ngx_hâp_îr‹_401_∑ge
),

322 
ngx_°rög
(
ngx_hâp_îr‹_402_∑ge
),

323 
ngx_°rög
(
ngx_hâp_îr‹_403_∑ge
),

324 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

325 
ngx_°rög
(
ngx_hâp_îr‹_405_∑ge
),

326 
ngx_°rög
(
ngx_hâp_îr‹_406_∑ge
),

327 
ngx_nuŒ_°rög
,

328 
ngx_°rög
(
ngx_hâp_îr‹_408_∑ge
),

329 
ngx_°rög
(
ngx_hâp_îr‹_409_∑ge
),

330 
ngx_°rög
(
ngx_hâp_îr‹_410_∑ge
),

331 
ngx_°rög
(
ngx_hâp_îr‹_411_∑ge
),

332 
ngx_°rög
(
ngx_hâp_îr‹_412_∑ge
),

333 
ngx_°rög
(
ngx_hâp_îr‹_413_∑ge
),

334 
ngx_°rög
(
ngx_hâp_îr‹_414_∑ge
),

335 
ngx_°rög
(
ngx_hâp_îr‹_415_∑ge
),

336 
ngx_°rög
(
ngx_hâp_îr‹_416_∑ge
),

338 
	#NGX_HTTP_LAST_4XX
 417

	)

339 
	#NGX_HTTP_OFF_5XX
 (
NGX_HTTP_LAST_4XX
 - 400 + 
NGX_HTTP_OFF_4XX
)

	)

341 
ngx_°rög
(
ngx_hâp_îr‹_494_∑ge
),

342 
ngx_°rög
(
ngx_hâp_îr‹_495_∑ge
),

343 
ngx_°rög
(
ngx_hâp_îr‹_496_∑ge
),

344 
ngx_°rög
(
ngx_hâp_îr‹_497_∑ge
),

345 
ngx_°rög
(
ngx_hâp_îr‹_404_∑ge
),

346 
ngx_nuŒ_°rög
,

348 
ngx_°rög
(
ngx_hâp_îr‹_500_∑ge
),

349 
ngx_°rög
(
ngx_hâp_îr‹_501_∑ge
),

350 
ngx_°rög
(
ngx_hâp_îr‹_502_∑ge
),

351 
ngx_°rög
(
ngx_hâp_îr‹_503_∑ge
),

352 
ngx_°rög
(
ngx_hâp_îr‹_504_∑ge
),

353 
ngx_nuŒ_°rög
,

354 
ngx_nuŒ_°rög
,

355 
ngx_°rög
(
ngx_hâp_îr‹_507_∑ge
)

357 
	#NGX_HTTP_LAST_5XX
 508

	)

362 
ngx_°r_t
 
	gngx_hâp_gë_«me
 = { 3, (
u_ch¨
 *) "GET " };

365 
ngx_öt_t


366 
	$ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_öt_t
 
îr‹
)

368 
ngx_uöt_t
 
i
, 
îr
;

369 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

370 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

372 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

374 
îr‹
, &
r
->
uri
, &r->
¨gs
);

376 
r
->
îr_°©us
 = 
îr‹
;

378 i‡(
r
->
kì∑live
) {

379 
îr‹
) {

380 
NGX_HTTP_BAD_REQUEST
:

381 
NGX_HTTP_REQUEST_ENTITY_TOO_LARGE
:

382 
NGX_HTTP_REQUEST_URI_TOO_LARGE
:

383 
NGX_HTTP_TO_HTTPS
:

384 
NGX_HTTPS_CERT_ERROR
:

385 
NGX_HTTPS_NO_CERT
:

386 
NGX_HTTP_INTERNAL_SERVER_ERROR
:

387 
NGX_HTTP_NOT_IMPLEMENTED
:

388 
r
->
kì∑live
 = 0;

392 i‡(
r
->
lögîög_˛o£
) {

393 
îr‹
) {

394 
NGX_HTTP_BAD_REQUEST
:

395 
NGX_HTTP_TO_HTTPS
:

396 
NGX_HTTPS_CERT_ERROR
:

397 
NGX_HTTPS_NO_CERT
:

398 
r
->
lögîög_˛o£
 = 0;

402 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
 = 0;

404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

406 i‡(!
r
->
îr‹_∑ge
 && 
˛cf
->
îr‹_∑ges
 &&Ñ->
uri_ch™ges
 != 0) {

408 i‡(
˛cf
->
ªcursive_îr‹_∑ges
 == 0) {

409 
r
->
îr‹_∑ge
 = 1;

412 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

414 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

415 i‡(
îr_∑ge
[
i
].
°©us
 =
îr‹
) {

416  
	`ngx_hâp_£nd_îr‹_∑ge
(
r
, &
îr_∑ge
[
i
]);

421 
r
->
ex≥˘_ã°ed
 = 1;

423 i‡(
	`ngx_hâp_disˇrd_ªque°_body
(
r
Ë!
NGX_OK
) {

424 
r
->
kì∑live
 = 0;

427 i‡(
˛cf
->
msõ_ª‰esh


428 && 
r
->
hódîs_ö
.
msõ


429 && (
îr‹
 =
NGX_HTTP_MOVED_PERMANENTLY


430 || 
îr‹
 =
NGX_HTTP_MOVED_TEMPORARILY
))

432  
	`ngx_hâp_£nd_ª‰esh
(
r
);

435 i‡(
îr‹
 =
NGX_HTTP_CREATED
) {

437 
îr
 = 0;

439 } i‡(
îr‹
 =
NGX_HTTP_NO_CONTENT
) {

441 
îr
 = 0;

443 } i‡(
îr‹
 >
NGX_HTTP_MOVED_PERMANENTLY


444 && 
îr‹
 < 
NGX_HTTP_LAST_3XX
)

447 
îr
 = 
îr‹
 - 
NGX_HTTP_MOVED_PERMANENTLY
 + 
NGX_HTTP_OFF_3XX
;

449 } i‡(
îr‹
 >
NGX_HTTP_BAD_REQUEST


450 && 
îr‹
 < 
NGX_HTTP_LAST_4XX
)

453 
îr
 = 
îr‹
 - 
NGX_HTTP_BAD_REQUEST
 + 
NGX_HTTP_OFF_4XX
;

455 } i‡(
îr‹
 >
NGX_HTTP_NGINX_CODES


456 && 
îr‹
 < 
NGX_HTTP_LAST_5XX
)

459 
îr
 = 
îr‹
 - 
NGX_HTTP_NGINX_CODES
 + 
NGX_HTTP_OFF_5XX
;

460 
îr‹
) {

461 
NGX_HTTP_TO_HTTPS
:

462 
NGX_HTTPS_CERT_ERROR
:

463 
NGX_HTTPS_NO_CERT
:

464 
NGX_HTTP_REQUEST_HEADER_TOO_LARGE
:

465 
r
->
îr_°©us
 = 
NGX_HTTP_BAD_REQUEST
;

471 
îr
 = 0;

474  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
, 
îr
);

475 
	}
}

478 
ngx_öt_t


479 
	$ngx_hâp_fûãr_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_moduÀ_t
 *
m
,

480 
ngx_öt_t
 
îr‹
)

482 *
˘x
;

483 
ngx_öt_t
 
rc
;

485 
	`ngx_hâp_˛ón_hódî
(
r
);

487 
˘x
 = 
NULL
;

489 i‡(
m
) {

490 
˘x
 = 
r
->˘x[
m
->
˘x_ödex
];

494 
	`ngx_memzîo
(
r
->
˘x
, (*Ë* 
ngx_hâp_max_moduÀ
);

496 i‡(
m
) {

497 
r
->
˘x
[
m
->
˘x_ödex
] = ctx;

500 
r
->
fûãr_föÆize
 = 1;

502 
rc
 = 
	`ngx_hâp_•ecül_ª•⁄£_h™dÀr
(
r
, 
îr‹
);

506 
rc
) {

508 
NGX_OK
:

509 
NGX_DONE
:

510  
NGX_ERROR
;

513  
rc
;

515 
	}
}

519 
	$ngx_hâp_˛ón_hódî
(
ngx_hâp_ªque°_t
 *
r
)

521 
	`ngx_memzîo
(&
r
->
hódîs_out
.
°©us
,

522 (
ngx_hâp_hódîs_out_t
)

523 - 
	`off£tof
(
ngx_hâp_hódîs_out_t
, 
°©us
));

525 
r
->
hódîs_out
.
hódîs
.
∑π
.
√…s
 = 0;

526 
r
->
hódîs_out
.
hódîs
.
∑π
.
√xt
 = 
NULL
;

527 
r
->
hódîs_out
.
hódîs
.
œ°
 = &r->hódîs_out.hódîs.
∑π
;

529 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = -1;

530 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

531 
	}
}

534 
ngx_öt_t


535 
	$ngx_hâp_£nd_îr‹_∑ge
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
)

537 
ngx_öt_t
 
ovîwrôe
;

538 
ngx_°r_t
 
uri
, 
¨gs
;

539 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

540 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

542 
ovîwrôe
 = 
îr_∑ge
->overwrite;

544 i‡(
ovîwrôe
 && ovîwrôê!
NGX_HTTP_OK
) {

545 
r
->
ex≥˘_ã°ed
 = 1;

548 i‡(
ovîwrôe
 >= 0) {

549 
r
->
îr_°©us
 = 
ovîwrôe
;

552 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, &
îr_∑ge
->
vÆue
, &
uri
Ë!
NGX_OK
) {

553  
NGX_ERROR
;

556 i‡(
uri
.
d©a
[0] == '/') {

558 i‡(
îr_∑ge
->
vÆue
.
Àngths
) {

559 
	`ngx_hâp_•lô_¨gs
(
r
, &
uri
, &
¨gs
);

562 
¨gs
 = 
îr_∑ge
->args;

565 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

566 
r
->
mëhod
 = 
NGX_HTTP_GET
;

567 
r
->
mëhod_«me
 = 
ngx_hâp_gë_«me
;

570  
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, &
uri
, &
¨gs
);

573 i‡(
uri
.
d©a
[0] == '@') {

574  
	`ngx_hâp_«med_loˇti⁄
(
r
, &
uri
);

577 
loˇti⁄
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

579 i‡(
loˇti⁄
 =
NULL
) {

580  
NGX_ERROR
;

583 i‡(
ovîwrôe
 !
NGX_HTTP_MOVED_PERMANENTLY


584 && 
ovîwrôe
 !
NGX_HTTP_MOVED_TEMPORARILY


585 && 
ovîwrôe
 !
NGX_HTTP_SEE_OTHER


586 && 
ovîwrôe
 !
NGX_HTTP_TEMPORARY_REDIRECT
)

588 
r
->
îr_°©us
 = 
NGX_HTTP_MOVED_TEMPORARILY
;

591 
loˇti⁄
->
hash
 = 1;

592 
	`ngx_°r_£t
(&
loˇti⁄
->
key
, "Location");

593 
loˇti⁄
->
vÆue
 = 
uri
;

595 
	`ngx_hâp_˛ór_loˇti⁄
(
r
);

597 
r
->
hódîs_out
.
loˇti⁄
 =Üocation;

599 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

601 i‡(
˛cf
->
msõ_ª‰esh
 && 
r
->
hódîs_ö
.
msõ
) {

602  
	`ngx_hâp_£nd_ª‰esh
(
r
);

605  
	`ngx_hâp_£nd_•ecül_ª•⁄£
(
r
, 
˛cf
,Ñ->
îr_°©us


606 - 
NGX_HTTP_MOVED_PERMANENTLY


607 + 
NGX_HTTP_OFF_3XX
);

608 
	}
}

611 
ngx_öt_t


612 
	$ngx_hâp_£nd_•ecül_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

613 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
, 
ngx_uöt_t
 
îr
)

615 
u_ch¨
 *
èû
;

616 
size_t
 
Àn
;

617 
ngx_öt_t
 
rc
;

618 
ngx_buf_t
 *
b
;

619 
ngx_uöt_t
 
msõ_∑ddög
;

620 
ngx_chaö_t
 
out
[3];

622 i‡(
˛cf
->
£rvî_tokís
) {

623 
Àn
 = (
ngx_hâp_îr‹_fuŒ_èû
) - 1;

624 
èû
 = 
ngx_hâp_îr‹_fuŒ_èû
;

627 
Àn
 = (
ngx_hâp_îr‹_èû
) - 1;

628 
èû
 = 
ngx_hâp_îr‹_èû
;

631 
msõ_∑ddög
 = 0;

633 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
) {

634 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 +Üen;

635 i‡(
˛cf
->
msõ_∑ddög


636 && (
r
->
hódîs_ö
.
msõ
 ||Ñ->hódîs_ö.
chrome
)

637 && 
r
->
hâp_vîsi⁄
 >
NGX_HTTP_VERSION_10


638 && 
îr
 >
NGX_HTTP_OFF_4XX
)

640 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 +=

641 (
ngx_hâp_msõ_∑ddög
) - 1;

642 
msõ_∑ddög
 = 1;

645 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

646 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

647 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

650 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 0;

653 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

654 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

655 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

658 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

659 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

660 
	`ngx_hâp_˛ór_ëag
(
r
);

662 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

664 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

665  
rc
;

668 i‡(
ngx_hâp_îr‹_∑ges
[
îr
].
Àn
 == 0) {

669  
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

672 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

673 i‡(
b
 =
NULL
) {

674  
NGX_ERROR
;

677 
b
->
mem‹y
 = 1;

678 
b
->
pos
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
;

679 
b
->
œ°
 = 
ngx_hâp_îr‹_∑ges
[
îr
].
d©a
 +Çgx_hâp_îr‹_∑ges[îr].
Àn
;

681 
out
[0].
buf
 = 
b
;

682 
out
[0].
√xt
 = &out[1];

684 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

685 i‡(
b
 =
NULL
) {

686  
NGX_ERROR
;

689 
b
->
mem‹y
 = 1;

691 
b
->
pos
 = 
èû
;

692 
b
->
œ°
 = 
èû
 + 
Àn
;

694 
out
[1].
buf
 = 
b
;

695 
out
[1].
√xt
 = 
NULL
;

697 i‡(
msõ_∑ddög
) {

698 
b
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

699 i‡(
b
 =
NULL
) {

700  
NGX_ERROR
;

703 
b
->
mem‹y
 = 1;

704 
b
->
pos
 = 
ngx_hâp_msõ_∑ddög
;

705 
b
->
œ°
 = 
ngx_hâp_msõ_∑ddög
 + (ngx_http_msie_padding) - 1;

707 
out
[1].
√xt
 = &out[2];

708 
out
[2].
buf
 = 
b
;

709 
out
[2].
√xt
 = 
NULL
;

712 i‡(
r
 =r->
maö
) {

713 
b
->
œ°_buf
 = 1;

716 
b
->
œ°_ö_chaö
 = 1;

718  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
[0]);

719 
	}
}

722 
ngx_öt_t


723 
	$ngx_hâp_£nd_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
)

725 
u_ch¨
 *
p
, *
loˇti⁄
;

726 
size_t
 
Àn
, 
size
;

727 
uöçå_t
 
esˇ≥
;

728 
ngx_öt_t
 
rc
;

729 
ngx_buf_t
 *
b
;

730 
ngx_chaö_t
 
out
;

732 
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

733 
loˇti⁄
 = 
r
->
hódîs_out
.loˇti⁄->
vÆue
.
d©a
;

735 
esˇ≥
 = 2 * 
	`ngx_esˇ≥_uri
(
NULL
, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

737 
size
 = (
ngx_hâp_msõ_ª‰esh_hód
) - 1

738 + 
esˇ≥
 + 
Àn


739 + (
ngx_hâp_msõ_ª‰esh_èû
) - 1;

741 
r
->
îr_°©us
 = 
NGX_HTTP_OK
;

743 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = ("text/html") - 1;

744 
	`ngx_°r_£t
(&
r
->
hódîs_out
.
c⁄ã¡_ty≥
, "text/html");

745 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

747 
r
->
hódîs_out
.
loˇti⁄
->
hash
 = 0;

748 
r
->
hódîs_out
.
loˇti⁄
 = 
NULL
;

750 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
size
;

752 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

753 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
hash
 = 0;

754 
r
->
hódîs_out
.
c⁄ã¡_Àngth
 = 
NULL
;

757 
	`ngx_hâp_˛ór_ac˚±_ønges
(
r
);

758 
	`ngx_hâp_˛ór_œ°_modifõd
(
r
);

759 
	`ngx_hâp_˛ór_ëag
(
r
);

761 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

763 i‡(
rc
 =
NGX_ERROR
 || 
r
->
hódî_⁄ly
) {

764  
rc
;

767 
b
 = 
	`ngx_¸óã_ãmp_buf
(
r
->
poﬁ
, 
size
);

768 i‡(
b
 =
NULL
) {

769  
NGX_ERROR
;

772 
p
 = 
	`ngx_˝ymem
(
b
->
pos
, 
ngx_hâp_msõ_ª‰esh_hód
,

773 (
ngx_hâp_msõ_ª‰esh_hód
) - 1);

775 i‡(
esˇ≥
 == 0) {

776 
p
 = 
	`ngx_˝ymem
’, 
loˇti⁄
, 
Àn
);

779 
p
 = (
u_ch¨
 *Ë
	`ngx_esˇ≥_uri
’, 
loˇti⁄
, 
Àn
, 
NGX_ESCAPE_REFRESH
);

782 
b
->
œ°
 = 
	`ngx_˝ymem
(
p
, 
ngx_hâp_msõ_ª‰esh_èû
,

783 (
ngx_hâp_msõ_ª‰esh_èû
) - 1);

785 
b
->
œ°_buf
 = 1;

786 
b
->
œ°_ö_chaö
 = 1;

788 
out
.
buf
 = 
b
;

789 
out
.
√xt
 = 
NULL
;

791  
	`ngx_hâp_ouçut_fûãr
(
r
, &
out
);

792 
	}
}

	@src/http/ngx_http_upstream.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 #i‡(
NGX_HTTP_CACHE
)

14 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_up°ªam_t
 *
u
);

16 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_up°ªam_t
 *
u
);

18 
ngx_öt_t
 
ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

23 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

24 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

25 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
);

26 
ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

27 
ngx_evít_t
 *
ev
);

28 
ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
,

29 
ngx_hâp_up°ªam_t
 *
u
);

30 
ngx_öt_t
 
ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
,

31 
ngx_hâp_up°ªam_t
 *
u
);

32 
ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_up°ªam_t
 *
u
);

34 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_up°ªam_t
 *
u
);

36 
ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_up°ªam_t
 *
u
);

38 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_up°ªam_t
 *
u
);

40 
ngx_öt_t
 
ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_up°ªam_t
 *
u
);

42 
ngx_öt_t
 
ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
);

43 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_up°ªam_t
 *
u
);

45 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

46 
ngx_hâp_up°ªam_t
 *
u
);

47 
ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_up°ªam_t
 *
u
);

49 
ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_up°ªam_t
 *
u
);

51 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

52 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

53 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_up°ªam_t
 *
u
);

55 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_up°ªam_t
 *
u
);

57 
ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
);

60 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

62 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

63 
ngx_hâp_up°ªam_t
 *
u
);

65 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_uöt_t
 
do_wrôe
);

67 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
);

68 
ngx_öt_t
 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
,

69 
ssize_t
 
byãs
);

70 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
);

71 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_t
 *
u
);

73 
ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
);

74 
ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
,

75 
ngx_hâp_up°ªam_t
 *
u
);

76 
ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

77 
ngx_hâp_up°ªam_t
 *
u
);

78 
ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
,

79 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_uöt_t
 
·_ty≥
);

80 
ngx_hâp_up°ªam_˛ónup
(*
d©a
);

81 
ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
);

84 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

85 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

86 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

87 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

88 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

89 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

90 
ngx_öt_t


91 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

93 
ngx_öt_t
 
ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

95 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

97 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

98 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

99 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
,

100 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

101 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
,

102 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

103 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
,

104 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

105 
ngx_öt_t
 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

106 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

107 
ngx_öt_t


108 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

110 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

112 
ngx_öt_t


113 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

115 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

117 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

118 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

119 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

120 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

121 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
,

122 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

123 
ngx_öt_t
 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

124 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

125 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

126 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

128 #i‡(
NGX_HTTP_GZIP
)

129 
ngx_öt_t
 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

130 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
);

133 
ngx_öt_t
 
ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
);

134 
ngx_öt_t
 
ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

135 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

136 
ngx_öt_t
 
ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

137 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

138 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

139 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

140 
ngx_öt_t
 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(

141 
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

143 *
ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
);

144 *
ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

145 *
c⁄f
);

147 
ngx_addr_t
 *
ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

148 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
);

150 *
ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

151 *
ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

153 #i‡(
NGX_HTTP_SSL
)

154 
ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *,

155 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
);

156 
ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
);

160 
ngx_hâp_up°ªam_hódî_t
 
	gngx_hâp_up°ªam_hódîs_ö
[] = {

162 { 
ngx_°rög
("Status"),

163 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

164 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
°©us
),

165 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

167 { 
ngx_°rög
("Content-Type"),

168 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

169 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ty≥
),

170 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
, 0, 1 },

172 { 
ngx_°rög
("Content-Length"),

173 
ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
,

174 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_Àngth
),

175 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

177 { 
ngx_°rög
("Date"),

178 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

179 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
d©e
),

180 
ngx_hâp_up°ªam_c›y_hódî_löe
,

181 
off£tof
(
ngx_hâp_hódîs_out_t
, 
d©e
), 0 },

183 { 
ngx_°rög
("Last-Modified"),

184 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

185 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
œ°_modifõd
),

186 
ngx_hâp_up°ªam_c›y_œ°_modifõd
, 0, 0 },

188 { 
ngx_°rög
("ETag"),

189 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

190 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ëag
),

191 
ngx_hâp_up°ªam_c›y_hódî_löe
,

192 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ëag
), 0 },

194 { 
ngx_°rög
("Server"),

195 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

196 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
£rvî
),

197 
ngx_hâp_up°ªam_c›y_hódî_löe
,

198 
off£tof
(
ngx_hâp_hódîs_out_t
, 
£rvî
), 0 },

200 { 
ngx_°rög
("WWW-Authenticate"),

201 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

202 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
www_authítiˇã
),

203 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

205 { 
ngx_°rög
("Location"),

206 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

207 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
loˇti⁄
),

208 
ngx_hâp_up°ªam_ªwrôe_loˇti⁄
, 0, 0 },

210 { 
ngx_°rög
("Refresh"),

211 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

212 
ngx_hâp_up°ªam_ªwrôe_ª‰esh
, 0, 0 },

214 { 
ngx_°rög
("Set-Cookie"),

215 
ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
, 0,

216 
ngx_hâp_up°ªam_ªwrôe_£t_cookõ
, 0, 1 },

218 { 
ngx_°rög
("Content-Disposition"),

219 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

220 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 1 },

222 { 
ngx_°rög
("Cache-Control"),

223 
ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
, 0,

224 
ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
,

225 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ˇche_c⁄åﬁ
), 1 },

227 { 
ngx_°rög
("Expires"),

228 
ngx_hâp_up°ªam_¥o˚ss_expúes
, 0,

229 
ngx_hâp_up°ªam_c›y_hódî_löe
,

230 
off£tof
(
ngx_hâp_hódîs_out_t
, 
expúes
), 1 },

232 { 
ngx_°rög
("Accept-Ranges"),

233 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

234 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
ac˚±_ønges
),

235 
ngx_hâp_up°ªam_c›y_Ælow_ønges
,

236 
off£tof
(
ngx_hâp_hódîs_out_t
, 
ac˚±_ønges
), 1 },

238 { 
ngx_°rög
("Connection"),

239 
ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
, 0,

240 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

242 { 
ngx_°rög
("Keep-Alive"),

243 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

244 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

246 { 
ngx_°rög
("X-Powered-By"),

247 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0,

248 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

250 { 
ngx_°rög
("X-Accel-Expires"),

251 
ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
, 0,

252 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

254 { 
ngx_°rög
("X-Accel-Redirect"),

255 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

256 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
x_ac˚l_ªdúe˘
),

257 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

259 { 
ngx_°rög
("X-Accel-Limit-Rate"),

260 
ngx_hâp_up°ªam_¥o˚ss_limô_øã
, 0,

261 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

263 { 
ngx_°rög
("X-Accel-Buffering"),

264 
ngx_hâp_up°ªam_¥o˚ss_buf„rög
, 0,

265 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

267 { 
ngx_°rög
("X-Accel-Charset"),

268 
ngx_hâp_up°ªam_¥o˚ss_ch¨£t
, 0,

269 
ngx_hâp_up°ªam_c›y_hódî_löe
, 0, 0 },

271 { 
ngx_°rög
("Transfer-Encoding"),

272 
ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
, 0,

273 
ngx_hâp_up°ªam_ign‹e_hódî_löe
, 0, 0 },

275 #i‡(
NGX_HTTP_GZIP
)

276 { 
ngx_°rög
("Content-Encoding"),

277 
ngx_hâp_up°ªam_¥o˚ss_hódî_löe
,

278 
off£tof
(
ngx_hâp_up°ªam_hódîs_ö_t
, 
c⁄ã¡_ícodög
),

279 
ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
, 0, 0 },

282 { 
ngx_nuŒ_°rög
, 
NULL
, 0, NULL, 0, 0 }

286 
ngx_comm™d_t
 
	gngx_hâp_up°ªam_comm™ds
[] = {

288 { 
ngx_°rög
("upstream"),

289 
NGX_HTTP_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_TAKE1
,

290 
ngx_hâp_up°ªam
,

293 
NULL
 },

295 { 
ngx_°rög
("server"),

296 
NGX_HTTP_UPS_CONF
|
NGX_CONF_1MORE
,

297 
ngx_hâp_up°ªam_£rvî
,

298 
NGX_HTTP_SRV_CONF_OFFSET
,

300 
NULL
 },

302 
ngx_nuŒ_comm™d


306 
ngx_hâp_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ_˘x
 = {

307 
ngx_hâp_up°ªam_add_v¨übÀs
,

308 
NULL
,

310 
ngx_hâp_up°ªam_¸óã_maö_c⁄f
,

311 
ngx_hâp_up°ªam_öô_maö_c⁄f
,

313 
NULL
,

314 
NULL
,

316 
NULL
,

317 
NULL


321 
ngx_moduÀ_t
 
	gngx_hâp_up°ªam_moduÀ
 = {

322 
NGX_MODULE_V1
,

323 &
ngx_hâp_up°ªam_moduÀ_˘x
,

324 
ngx_hâp_up°ªam_comm™ds
,

325 
NGX_HTTP_MODULE
,

326 
NULL
,

327 
NULL
,

328 
NULL
,

329 
NULL
,

330 
NULL
,

331 
NULL
,

332 
NULL
,

333 
NGX_MODULE_V1_PADDING


337 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_up°ªam_v¨s
[] = {

339 { 
ngx_°rög
("up°ªam_addr"), 
NULL
,

340 
ngx_hâp_up°ªam_addr_v¨übÀ
, 0,

341 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

343 { 
ngx_°rög
("up°ªam_°©us"), 
NULL
,

344 
ngx_hâp_up°ªam_°©us_v¨übÀ
, 0,

345 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

347 { 
ngx_°rög
("up°ªam_ª•⁄£_time"), 
NULL
,

348 
ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
, 0,

349 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

351 { 
ngx_°rög
("up°ªam_ª•⁄£_Àngth"), 
NULL
,

352 
ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
, 0,

353 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

355 #i‡(
NGX_HTTP_CACHE
)

357 { 
ngx_°rög
("up°ªam_ˇche_°©us"), 
NULL
,

358 
ngx_hâp_up°ªam_ˇche_°©us
, 0,

359 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

363 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

367 
ngx_hâp_up°ªam_√xt_t
 
	gngx_hâp_up°ªam_√xt_îr‹s
[] = {

368 { 500, 
NGX_HTTP_UPSTREAM_FT_HTTP_500
 },

369 { 502, 
NGX_HTTP_UPSTREAM_FT_HTTP_502
 },

370 { 503, 
NGX_HTTP_UPSTREAM_FT_HTTP_503
 },

371 { 504, 
NGX_HTTP_UPSTREAM_FT_HTTP_504
 },

372 { 404, 
NGX_HTTP_UPSTREAM_FT_HTTP_404
 },

377 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ˇche_mëhod_mask
[] = {

378 { 
ngx_°rög
("GET"), 
NGX_HTTP_GET
},

379 { 
ngx_°rög
("HEAD"), 
NGX_HTTP_HEAD
 },

380 { 
ngx_°rög
("POST"), 
NGX_HTTP_POST
 },

381 { 
ngx_nuŒ_°rög
, 0 }

385 
ngx_c⁄f_bômask_t
 
	gngx_hâp_up°ªam_ign‹e_hódîs_masks
[] = {

386 { 
ngx_°rög
("X-Ac˚l-Redúe˘"), 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 },

387 { 
ngx_°rög
("X-Ac˚l-Expúes"), 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 },

388 { 
ngx_°rög
("X-Ac˚l-Limô-R©e"), 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 },

389 { 
ngx_°rög
("X-Ac˚l-Buf„rög"), 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 },

390 { 
ngx_°rög
("X-Ac˚l-Ch¨£t"), 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 },

391 { 
ngx_°rög
("Expúes"), 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
 },

392 { 
ngx_°rög
("Cache-C⁄åﬁ"), 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 },

393 { 
ngx_°rög
("Së-Cookõ"), 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 },

394 { 
ngx_nuŒ_°rög
, 0 }

398 
ngx_öt_t


399 
	$ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
)

401 
ngx_hâp_up°ªam_t
 *
u
;

403 
u
 = 
r
->
up°ªam
;

405 i‡(
u
 && u->
˛ónup
) {

406 
r
->
maö
->
cou¡
++;

407 
	`ngx_hâp_up°ªam_˛ónup
(
r
);

410 
u
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_t
));

411 i‡(
u
 =
NULL
) {

412  
NGX_ERROR
;

415 
r
->
up°ªam
 = 
u
;

417 
u
->
≥î
.
log
 = 
r
->
c⁄√˘i⁄
->log;

418 
u
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

419 #i‡(
NGX_THREADS
)

420 
u
->
≥î
.
lock
 = &
r
->
c⁄√˘i⁄
->lock;

423 #i‡(
NGX_HTTP_CACHE
)

424 
r
->
ˇche
 = 
NULL
;

427 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

429  
NGX_OK
;

430 
	}
}

434 
	$ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
)

436 
ngx_c⁄√˘i⁄_t
 *
c
;

438 
c
 = 
r
->
c⁄√˘i⁄
;

440 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

441 "hâ∞öô up°ªam, clõ¡Åimî: %d", 
c
->
ªad
->
timî_£t
);

443 #i‡(
NGX_HTTP_SPDY
)

444 i‡(
r
->
•dy_°ªam
) {

445 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

450 i‡(
c
->
ªad
->
timî_£t
) {

451 
	`ngx_dñ_timî
(
c
->
ªad
);

454 i‡(
ngx_evít_Êags
 & 
NGX_USE_CLEAR_EVENT
) {

456 i‡(!
c
->
wrôe
->
a˘ive
) {

457 i‡(
	`ngx_add_evít
(
c
->
wrôe
, 
NGX_WRITE_EVENT
, 
NGX_CLEAR_EVENT
)

458 =
NGX_ERROR
)

460 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

466 
	`ngx_hâp_up°ªam_öô_ªque°
(
r
);

467 
	}
}

471 
	$ngx_hâp_up°ªam_öô_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

473 
ngx_°r_t
 *
ho°
;

474 
ngx_uöt_t
 
i
;

475 
ngx_ªsﬁvî_˘x_t
 *
˘x
, 
ãmp
;

476 
ngx_hâp_˛ónup_t
 *
˛n
;

477 
ngx_hâp_up°ªam_t
 *
u
;

478 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

479 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

480 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

482 i‡(
r
->
aio
) {

486 
u
 = 
r
->
up°ªam
;

488 #i‡(
NGX_HTTP_CACHE
)

490 i‡(
u
->
c⁄f
->
ˇche
) {

491 
ngx_öt_t
 
rc
;

493 
rc
 = 
	`ngx_hâp_up°ªam_ˇche
(
r
, 
u
);

495 i‡(
rc
 =
NGX_BUSY
) {

496 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_öô_ªque°
;

500 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

502 i‡(
rc
 =
NGX_DONE
) {

506 i‡(
rc
 !
NGX_DECLINED
) {

507 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

514 
u
->
°‹e
 = (u->
c⁄f
->°‹ê|| u->c⁄f->
°‹e_Àngths
);

516 i‡(!
u
->
°‹e
 && !
r
->
po°_a˘i⁄
 && !u->
c⁄f
->
ign‹e_˛õ¡_ab‹t
) {

517 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
;

518 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
;

521 i‡(
r
->
ªque°_body
) {

522 
u
->
ªque°_bufs
 = 
r
->
ªque°_body
->
bufs
;

525 i‡(
u
->
	`¸óã_ªque°
(
r
Ë!
NGX_OK
) {

526 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

530 
u
->
≥î
.
loˇl
 = 
	`ngx_hâp_up°ªam_gë_loˇl
(
r
, u->
c⁄f
->local);

532 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

534 
u
->
ouçut
.
Æignmít
 = 
˛cf
->
dúe˘io_Æignmít
;

535 
u
->
ouçut
.
poﬁ
 = 
r
->pool;

536 
u
->
ouçut
.
bufs
.
num
 = 1;

537 
u
->
ouçut
.
bufs
.
size
 = 
˛cf
->
˛õ¡_body_buf„r_size
;

538 
u
->
ouçut
.
ouçut_fûãr
 = 
ngx_chaö_wrôî
;

539 
u
->
ouçut
.
fûãr_˘x
 = &u->
wrôî
;

541 
u
->
wrôî
.
poﬁ
 = 
r
->pool;

543 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

545 
r
->
up°ªam_°©es
 = 
	`ngx_¨øy_¸óã
‘->
poﬁ
, 1,

546 (
ngx_hâp_up°ªam_°©e_t
));

547 i‡(
r
->
up°ªam_°©es
 =
NULL
) {

548 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

554 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

555 i‡(
u
->
°©e
 =
NULL
) {

556 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

557 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

561 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

564 
˛n
 = 
	`ngx_hâp_˛ónup_add
(
r
, 0);

565 i‡(
˛n
 =
NULL
) {

566 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

570 
˛n
->
h™dÀr
 = 
ngx_hâp_up°ªam_˛ónup
;

571 
˛n
->
d©a
 = 
r
;

572 
u
->
˛ónup
 = &
˛n
->
h™dÀr
;

574 i‡(
u
->
ªsﬁved
 =
NULL
) {

576 
uscf
 = 
u
->
c⁄f
->
up°ªam
;

580 i‡(
u
->
ªsﬁved
->
sockaddr
) {

582 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
u
->
ªsﬁved
)

583 !
NGX_OK
)

585 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

586 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

590 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

595 
ho°
 = &
u
->
ªsﬁved
->host;

597 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

599 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

601 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

603 
uscf
 = 
uscÂ
[
i
];

605 i‡(
uscf
->
ho°
.
Àn
 == host->len

606 && ((
uscf
->
p‹t
 =0 && 
u
->
ªsﬁved
->
no_p‹t
)

607 || 
uscf
->
p‹t
 =
u
->
ªsﬁved
->port)

608 && 
	`ngx_memcmp
(
uscf
->
ho°
.
d©a
, ho°->d©a, ho°->
Àn
) == 0)

610 
found
;

614 i‡(
u
->
ªsﬁved
->
p‹t
 == 0) {

615 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

616 "nÿp‹àö up°ªam \"%V\"", 
ho°
);

617 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

618 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

622 
ãmp
.
«me
 = *
ho°
;

624 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
˛cf
->
ªsﬁvî
, &
ãmp
);

625 i‡(
˘x
 =
NULL
) {

626 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

627 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

631 i‡(
˘x
 =
NGX_NO_RESOLVER
) {

632 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

633 "nÿªsﬁvî deföedÅÿªsﬁvê%V", 
ho°
);

635 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

639 
˘x
->
«me
 = *
ho°
;

640 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

641 
˘x
->
h™dÀr
 = 
ngx_hâp_up°ªam_ªsﬁve_h™dÀr
;

642 
˘x
->
d©a
 = 
r
;

643 
˘x
->
timeout
 = 
˛cf
->
ªsﬁvî_timeout
;

645 
u
->
ªsﬁved
->
˘x
 = ctx;

647 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

648 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

649 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

650 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

657 
found
:

659 i‡(
uscf
 =
NULL
) {

660 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

662 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

663 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

667 i‡(
uscf
->
≥î
.
	`öô
(
r
, uscfË!
NGX_OK
) {

668 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

669 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

673 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

674 
	}
}

677 #i‡(
NGX_HTTP_CACHE
)

679 
ngx_öt_t


680 
	$ngx_hâp_up°ªam_ˇche
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

682 
ngx_öt_t
 
rc
;

683 
ngx_hâp_ˇche_t
 *
c
;

685 
c
 = 
r
->
ˇche
;

687 i‡(
c
 =
NULL
) {

689 i‡(!(
r
->
mëhod
 & 
u
->
c⁄f
->
ˇche_mëhods
)) {

690  
NGX_DECLINED
;

693 i‡(
r
->
mëhod
 & 
NGX_HTTP_HEAD
) {

694 
u
->
mëhod
 = 
ngx_hâp_c‹e_gë_mëhod
;

697 i‡(
	`ngx_hâp_fûe_ˇche_√w
(
r
Ë!
NGX_OK
) {

698  
NGX_ERROR
;

701 i‡(
u
->
	`¸óã_key
(
r
Ë!
NGX_OK
) {

702  
NGX_ERROR
;

707 
	`ngx_hâp_fûe_ˇche_¸óã_key
(
r
);

709 i‡(
r
->
ˇche
->
hódî_°¨t
 + 256 >
u
->
c⁄f
->
buf„r_size
) {

710 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

713 &
u
->
c⁄f
->
moduÀ
, u->c⁄f->
buf„r_size
,

714 
	`ngx_Æign
(
r
->
ˇche
->
hódî_°¨t
 + 256, 1024));

716 
r
->
ˇche
 = 
NULL
;

717  
NGX_DECLINED
;

720 
u
->
ˇchóbÀ
 = 1;

722 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
ˇche_by∑ss
)) {

724 
NGX_ERROR
:

725  
NGX_ERROR
;

727 
NGX_DECLINED
:

728 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_BYPASS
;

729  
NGX_DECLINED
;

735 
c
 = 
r
->
ˇche
;

737 
c
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

738 
c
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

739 
c
->
fûe_ˇche
 = 
u
->
c⁄f
->
ˇche
->
d©a
;

741 
c
->
lock
 = 
u
->
c⁄f
->
ˇche_lock
;

742 
c
->
lock_timeout
 = 
u
->
c⁄f
->
ˇche_lock_timeout
;

744 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_MISS
;

747 
rc
 = 
	`ngx_hâp_fûe_ˇche_›í
(
r
);

749 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

750 "hâ∞up°ªam cache: %i", 
rc
);

752 
rc
) {

754 
NGX_HTTP_CACHE_UPDATING
:

756 i‡(
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
NGX_HTTP_UPSTREAM_FT_UPDATING
) {

757 
u
->
ˇche_°©us
 = 
rc
;

758 
rc
 = 
NGX_OK
;

761 
rc
 = 
NGX_HTTP_CACHE_STALE
;

766 
NGX_OK
:

767 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

770 
rc
) {

772 
NGX_OK
:

774 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

776 i‡(
rc
 !
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

777  
rc
;

782 
NGX_HTTP_CACHE_STALE
:

784 
c
->
vÆid_£c
 = 0;

785 
u
->
buf„r
.
°¨t
 = 
NULL
;

786 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_EXPIRED
;

790 
NGX_DECLINED
:

792 i‡((
size_t
Ë(
u
->
buf„r
.
íd
 - u->buf„r.
°¨t
Ë< u->
c⁄f
->
buf„r_size
) {

793 
u
->
buf„r
.
°¨t
 = 
NULL
;

796 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
 + 
c
->
hódî_°¨t
;

797 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

802 
NGX_HTTP_CACHE_SCARCE
:

804 
u
->
ˇchóbÀ
 = 0;

808 
NGX_AGAIN
:

810  
NGX_BUSY
;

812 
NGX_ERROR
:

814  
NGX_ERROR
;

820 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_HIT
;

822  
rc
;

825 
r
->
ˇched
 = 0;

827  
NGX_DECLINED
;

828 
	}
}

831 
ngx_öt_t


832 
	$ngx_hâp_up°ªam_ˇche_£nd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

834 
ngx_öt_t
 
rc
;

835 
ngx_hâp_ˇche_t
 *
c
;

837 
r
->
ˇched
 = 1;

838 
c
 = 
r
->
ˇche
;

840 i‡(
c
->
hódî_°¨t
 =c->
body_°¨t
) {

841 
r
->
hâp_vîsi⁄
 = 
NGX_HTTP_VERSION_9
;

842  
	`ngx_hâp_ˇche_£nd
(
r
);

847 
u
->
buf„r
 = *
c
->
buf
;

848 
u
->
buf„r
.
pos
 +
c
->
hódî_°¨t
;

850 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

851 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

853 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

854 (
ngx_èbÀ_ñt_t
))

855 !
NGX_OK
)

857  
NGX_ERROR
;

860 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

862 i‡(
rc
 =
NGX_OK
) {

864 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

865  
NGX_DONE
;

868  
	`ngx_hâp_ˇche_£nd
(
r
);

871 i‡(
rc
 =
NGX_ERROR
) {

872  
NGX_ERROR
;

879  
rc
;

880 
	}
}

886 
	$ngx_hâp_up°ªam_ªsﬁve_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

888 
ngx_c⁄√˘i⁄_t
 *
c
;

889 
ngx_hâp_ªque°_t
 *
r
;

890 
ngx_hâp_up°ªam_t
 *
u
;

891 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
;

893 
r
 = 
˘x
->
d©a
;

894 
c
 = 
r
->
c⁄√˘i⁄
;

896 
u
 = 
r
->
up°ªam
;

897 
ur
 = 
u
->
ªsﬁved
;

899 i‡(
˘x
->
°©e
) {

900 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

902 &
˘x
->
«me
, ctx->
°©e
,

903 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

905 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_BAD_GATEWAY
);

906 
Áûed
;

909 
ur
->
«ddrs
 = 
˘x
->naddrs;

910 
ur
->
addrs
 = 
˘x
->addrs;

912 #i‡(
NGX_DEBUG
)

914 
ö_addr_t
 
addr
;

915 
ngx_uöt_t
 
i
;

917 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

918 
addr
 = 
	`¡ohl
(
ur
->
addrs
[
i
]);

920 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

922 (
addr
 >> 24) & 0xff, (addr >> 16) & 0xff,

923 (
addr
 >> 8) & 0xff,áddr & 0xff);

928 i‡(
	`ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
r
, 
ur
Ë!
NGX_OK
) {

929 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

930 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

931 
Áûed
;

934 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

935 
ur
->
˘x
 = 
NULL
;

937 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

939 
Áûed
:

941 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

942 
	}
}

946 
	$ngx_hâp_up°ªam_h™dÀr
(
ngx_evít_t
 *
ev
)

948 
ngx_c⁄√˘i⁄_t
 *
c
;

949 
ngx_hâp_ªque°_t
 *
r
;

950 
ngx_hâp_log_˘x_t
 *
˘x
;

951 
ngx_hâp_up°ªam_t
 *
u
;

953 
c
 = 
ev
->
d©a
;

954 
r
 = 
c
->
d©a
;

956 
u
 = 
r
->
up°ªam
;

957 
c
 = 
r
->
c⁄√˘i⁄
;

959 
˘x
 = 
c
->
log
->
d©a
;

960 
˘x
->
cuºít_ªque°
 = 
r
;

962 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

963 "hâ∞up°ªamÑeque°: \"%V?%V\"", &
r
->
uri
, &r->
¨gs
);

965 i‡(
ev
->
wrôe
) {

966 
u
->
	`wrôe_evít_h™dÀr
(
r
, u);

969 
u
->
	`ªad_evít_h™dÀr
(
r
, u);

972 
	`ngx_hâp_run_po°ed_ªque°s
(
c
);

973 
	}
}

977 
	$ngx_hâp_up°ªam_rd_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

979 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
ªad
);

980 
	}
}

984 
	$ngx_hâp_up°ªam_wr_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
)

986 
	`ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
r
,Ñ->
c⁄√˘i⁄
->
wrôe
);

987 
	}
}

991 
	$ngx_hâp_up°ªam_check_brokí_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

992 
ngx_evít_t
 *
ev
)

994 
n
;

995 
buf
[1];

996 
ngx_îr_t
 
îr
;

997 
ngx_öt_t
 
evít
;

998 
ngx_c⁄√˘i⁄_t
 *
c
;

999 
ngx_hâp_up°ªam_t
 *
u
;

1001 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 0,

1003 
ev
->
wrôe
, &
r
->
uri
);

1005 
c
 = 
r
->
c⁄√˘i⁄
;

1006 
u
 = 
r
->
up°ªam
;

1008 i‡(
c
->
îr‹
) {

1009 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1011 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1013 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1014 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1015 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1020 i‡(!
u
->
ˇchóbÀ
) {

1021 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1022 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1028 #i‡(
NGX_HTTP_SPDY
)

1029 i‡(
r
->
•dy_°ªam
) {

1034 #i‡(
NGX_HAVE_KQUEUE
)

1036 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1038 i‡(!
ev
->
≥ndög_eof
) {

1042 
ev
->
eof
 = 1;

1043 
c
->
îr‹
 = 1;

1045 i‡(
ev
->
kq_î∫o
) {

1046 
ev
->
îr‹
 = 1;

1049 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1050 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1053 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1054 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1058 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
,Év->
kq_î∫o
,

1062 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1063 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1064 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1072 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 1, 
MSG_PEEK
);

1074 
îr
 = 
ngx_sockë_î∫o
;

1076 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
ev
->
log
, 
îr
,

1077 "hâ∞up°ªamÑecv(): %d", 
n
);

1079 i‡(
ev
->
wrôe
 && (
n
 >0 || 
îr
 =
NGX_EAGAIN
)) {

1083 i‡((
ngx_evít_Êags
 & 
NGX_USE_LEVEL_EVENT
Ë&& 
ev
->
a˘ive
) {

1085 
evít
 = 
ev
->
wrôe
 ? 
NGX_WRITE_EVENT
 : 
NGX_READ_EVENT
;

1087 i‡(
	`ngx_dñ_evít
(
ev
, 
evít
, 0Ë!
NGX_OK
) {

1088 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1089 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1094 i‡(
n
 > 0) {

1098 i‡(
n
 == -1) {

1099 i‡(
îr
 =
NGX_EAGAIN
) {

1103 
ev
->
îr‹
 = 1;

1106 
îr
 = 0;

1109 
ev
->
eof
 = 1;

1110 
c
->
îr‹
 = 1;

1112 i‡(!
u
->
ˇchóbÀ
 && u->
≥î
.
c⁄√˘i⁄
) {

1113 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1116 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1117 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1121 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ev
->
log
, 
îr
,

1124 i‡(
u
->
≥î
.
c⁄√˘i⁄
 =
NULL
) {

1125 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1126 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

1128 
	}
}

1132 
	$ngx_hâp_up°ªam_c⁄√˘
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1134 
ngx_öt_t
 
rc
;

1135 
ngx_time_t
 *
ç
;

1136 
ngx_c⁄√˘i⁄_t
 *
c
;

1138 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1140 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

1141 
ç
 = 
	`ngx_timeofday
();

1142 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

1143 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

1146 
u
->
°©e
 = 
	`ngx_¨øy_push
(
r
->
up°ªam_°©es
);

1147 i‡(
u
->
°©e
 =
NULL
) {

1148 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1149 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1153 
	`ngx_memzîo
(
u
->
°©e
, (
ngx_hâp_up°ªam_°©e_t
));

1155 
ç
 = 
	`ngx_timeofday
();

1156 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
;

1157 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
;

1159 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
u
->
≥î
);

1161 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1162 "hâ∞up°ªam c⁄√˘: %i", 
rc
);

1164 i‡(
rc
 =
NGX_ERROR
) {

1165 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1166 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1170 
u
->
°©e
->
≥î
 = u->≥î.
«me
;

1172 i‡(
rc
 =
NGX_BUSY
) {

1173 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0, "noÜive upstreams");

1174 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_NOLIVE
);

1178 i‡(
rc
 =
NGX_DECLINED
) {

1179 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1185 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1187 
c
->
d©a
 = 
r
;

1189 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1190 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1192 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
;

1193 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_hódî
;

1195 
c
->
£ndfûe
 &
r
->
c⁄√˘i⁄
->sendfile;

1196 
u
->
ouçut
.
£ndfûe
 = 
c
->sendfile;

1198 i‡(
c
->
poﬁ
 =
NULL
) {

1202 
c
->
poﬁ
 = 
	`ngx_¸óã_poﬁ
(128, 
r
->
c⁄√˘i⁄
->
log
);

1203 i‡(
c
->
poﬁ
 =
NULL
) {

1204 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1205 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1210 
c
->
log
 = 
r
->
c⁄√˘i⁄
->log;

1211 
c
->
poﬁ
->
log
 = c->log;

1212 
c
->
ªad
->
log
 = c->log;

1213 
c
->
wrôe
->
log
 = c->log;

1217 
u
->
wrôî
.
out
 = 
NULL
;

1218 
u
->
wrôî
.
œ°
 = &u->wrôî.
out
;

1219 
u
->
wrôî
.
c⁄√˘i⁄
 = 
c
;

1220 
u
->
wrôî
.
limô
 = 0;

1222 i‡(
u
->
ªque°_£¡
) {

1223 i‡(
	`ngx_hâp_up°ªam_ªöô
(
r
, 
u
Ë!
NGX_OK
) {

1224 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1225 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1230 i‡(
r
->
ªque°_body


1231 && 
r
->
ªque°_body
->
buf


1232 && 
r
->
ªque°_body
->
ãmp_fûe


1233 && 
r
 =r->
maö
)

1240 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1241 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1242 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1243 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1247 
u
->
ouçut
.
‰ì
->
buf
 = 
r
->
ªque°_body
->buf;

1248 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1249 
u
->
ouçut
.
Æloˇãd
 = 1;

1251 
r
->
ªque°_body
->
buf
->
pos
 =Ñ->ªque°_body->buf->
°¨t
;

1252 
r
->
ªque°_body
->
buf
->
œ°
 =Ñ->ªque°_body->buf->
°¨t
;

1253 
r
->
ªque°_body
->
buf
->
èg
 = 
u
->
ouçut
.tag;

1256 
u
->
ªque°_£¡
 = 0;

1258 i‡(
rc
 =
NGX_AGAIN
) {

1259 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
c⁄√˘_timeout
);

1263 #i‡(
NGX_HTTP_SSL
)

1265 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1266 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1272 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1273 
	}
}

1276 #i‡(
NGX_HTTP_SSL
)

1279 
	$ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1280 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_c⁄√˘i⁄_t
 *
c
)

1282 
ngx_öt_t
 
rc
;

1284 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
u
->
c⁄f
->
s¶
, 
c
,

1285 
NGX_SSL_BUFFER
|
NGX_SSL_CLIENT
)

1286 !
NGX_OK
)

1288 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1289 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1293 
c
->
£ndfûe
 = 0;

1294 
u
->
ouçut
.
£ndfûe
 = 0;

1296 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1297 i‡(
u
->
≥î
.
	`£t_£ssi⁄
(&u->≥î, u->≥î.
d©a
Ë!
NGX_OK
) {

1298 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1299 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1304 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "SSL handshakingÅo upstream";

1306 
rc
 = 
	`ngx_s¶_h™dshake
(
c
);

1308 i‡(
rc
 =
NGX_AGAIN
) {

1309 
c
->
s¶
->
h™dÀr
 = 
ngx_hâp_up°ªam_s¶_h™dshake
;

1313 
	`ngx_hâp_up°ªam_s¶_h™dshake
(
c
);

1314 
	}
}

1318 
	$ngx_hâp_up°ªam_s¶_h™dshake
(
ngx_c⁄√˘i⁄_t
 *
c
)

1320 
ngx_hâp_ªque°_t
 *
r
;

1321 
ngx_hâp_up°ªam_t
 *
u
;

1323 
r
 = 
c
->
d©a
;

1324 
u
 = 
r
->
up°ªam
;

1326 i‡(
c
->
s¶
->
h™dshaked
) {

1328 i‡(
u
->
c⁄f
->
s¶_£ssi⁄_ªu£
) {

1329 
u
->
≥î
.
	`ßve_£ssi⁄
(&u->≥î, u->≥î.
d©a
);

1332 
c
->
wrôe
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1333 
c
->
ªad
->
h™dÀr
 = 
ngx_hâp_up°ªam_h™dÀr
;

1335 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1340 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1342 
	}
}

1347 
ngx_öt_t


1348 
	$ngx_hâp_up°ªam_ªöô
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1350 
ngx_chaö_t
 *
˛
;

1352 i‡(
u
->
	`ªöô_ªque°
(
r
Ë!
NGX_OK
) {

1353  
NGX_ERROR
;

1356 
u
->
kì∑live
 = 0;

1357 
u
->
upgøde
 = 0;

1359 
	`ngx_memzîo
(&
u
->
hódîs_ö
, (
ngx_hâp_up°ªam_hódîs_ö_t
));

1360 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = -1;

1362 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1363 (
ngx_èbÀ_ñt_t
))

1364 !
NGX_OK
)

1366  
NGX_ERROR
;

1371 
˛
 = 
u
->
ªque°_bufs
; cl; c»˛->
√xt
) {

1372 
˛
->
buf
->
pos
 = cl->buf->
°¨t
;

1373 
˛
->
buf
->
fûe_pos
 = 0;

1378 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe


1379 && 
r
 !r->
maö
 && 
u
->
ouçut
.
buf
)

1381 
u
->
ouçut
.
‰ì
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

1382 i‡(
u
->
ouçut
.
‰ì
 =
NULL
) {

1383  
NGX_ERROR
;

1386 
u
->
ouçut
.
‰ì
->
buf
 = u->output.buf;

1387 
u
->
ouçut
.
‰ì
->
√xt
 = 
NULL
;

1389 
u
->
ouçut
.
buf
->
pos
 = u->ouçut.buf->
°¨t
;

1390 
u
->
ouçut
.
buf
->
œ°
 = u->ouçut.buf->
°¨t
;

1393 
u
->
ouçut
.
buf
 = 
NULL
;

1394 
u
->
ouçut
.
ö
 = 
NULL
;

1395 
u
->
ouçut
.
busy
 = 
NULL
;

1399 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1401 #i‡(
NGX_HTTP_CACHE
)

1403 i‡(
r
->
ˇche
) {

1404 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1409 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1411  
NGX_OK
;

1412 
	}
}

1416 
	$ngx_hâp_up°ªam_£nd_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1418 
ngx_öt_t
 
rc
;

1419 
ngx_c⁄√˘i⁄_t
 *
c
;

1421 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1423 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1426 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1427 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1431 
c
->
log
->
a˘i⁄
 = "sendingÑequestÅo upstream";

1433 
rc
 = 
	`ngx_ouçut_chaö
(&
u
->
ouçut
, u->
ªque°_£¡
 ? 
NULL
 : u->
ªque°_bufs
);

1435 
u
->
ªque°_£¡
 = 1;

1437 i‡(
rc
 =
NGX_ERROR
) {

1438 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1442 i‡(
c
->
wrôe
->
timî_£t
) {

1443 
	`ngx_dñ_timî
(
c
->
wrôe
);

1446 i‡(
rc
 =
NGX_AGAIN
) {

1447 
	`ngx_add_timî
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

1449 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
Ë!
NGX_OK
) {

1450 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1451 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1460 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_SET
) {

1461 i‡(
	`ngx_t˝_push
(
c
->
fd
Ë=
NGX_ERROR
) {

1462 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
ngx_sockë_î∫o
,

1463 
ngx_t˝_push_n
 " failed");

1464 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1465 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1469 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_UNSET
;

1472 
	`ngx_add_timî
(
c
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

1475 i‡(
c
->
ªad
->
ªady
) {

1486 
	`ngx_hâp_up°ªam_¥o˚ss_hódî
(
r
, 
u
);

1491 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1493 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

1494 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1495 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1498 
	}
}

1502 
	$ngx_hâp_up°ªam_£nd_ªque°_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
,

1503 
ngx_hâp_up°ªam_t
 *
u
)

1505 
ngx_c⁄√˘i⁄_t
 *
c
;

1507 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1509 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

1512 i‡(
c
->
wrôe
->
timedout
) {

1513 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1517 #i‡(
NGX_HTTP_SSL
)

1519 i‡(
u
->
s¶
 && 
c
->s¶ =
NULL
) {

1520 
	`ngx_hâp_up°ªam_s¶_öô_c⁄√˘i⁄
(
r
, 
u
, 
c
);

1526 i‡(
u
->
hódî_£¡
) {

1527 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_dummy_h™dÀr
;

1529 (Ë
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0);

1534 
	`ngx_hâp_up°ªam_£nd_ªque°
(
r
, 
u
);

1535 
	}
}

1539 
	$ngx_hâp_up°ªam_¥o˚ss_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1541 
ssize_t
 
n
;

1542 
ngx_öt_t
 
rc
;

1543 
ngx_c⁄√˘i⁄_t
 *
c
;

1545 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

1547 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

1550 
c
->
log
->
a˘i⁄
 = "readingÑesponse header from upstream";

1552 i‡(
c
->
ªad
->
timedout
) {

1553 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
);

1557 i‡(!
u
->
ªque°_£¡
 && 
	`ngx_hâp_up°ªam_ã°_c⁄√˘
(
c
Ë!
NGX_OK
) {

1558 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1562 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1563 
u
->
buf„r
.
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, u->
c⁄f
->
buf„r_size
);

1564 i‡(
u
->
buf„r
.
°¨t
 =
NULL
) {

1565 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1566 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1570 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

1571 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

1572 
u
->
buf„r
.
íd
 = u->buf„r.
°¨t
 + u->
c⁄f
->
buf„r_size
;

1573 
u
->
buf„r
.
ãmp‹¨y
 = 1;

1575 
u
->
buf„r
.
èg
 = u->
ouçut
.tag;

1577 i‡(
	`ngx_li°_öô
(&
u
->
hódîs_ö
.
hódîs
, 
r
->
poﬁ
, 8,

1578 (
ngx_èbÀ_ñt_t
))

1579 !
NGX_OK
)

1581 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1582 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1586 #i‡(
NGX_HTTP_CACHE
)

1588 i‡(
r
->
ˇche
) {

1589 
u
->
buf„r
.
pos
 +
r
->
ˇche
->
hódî_°¨t
;

1590 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1597 
n
 = 
c
->
	`ªcv
(c, 
u
->
buf„r
.
œ°
, u->buf„r.
íd
 - u->buffer.last);

1599 i‡(
n
 =
NGX_AGAIN
) {

1601 
	`ngx_add_timî
(
ªv
, 
u
->
ªad_timeout
);

1604 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

1605 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1606 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1613 i‡(
n
 == 0) {

1614 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1618 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

1619 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_ERROR
);

1623 
u
->
buf„r
.
œ°
 +
n
;

1626 
u
->
vÆid_hódî_ö
 = 0;

1628 
u
->
≥î
.
ˇched
 = 0;

1631 
rc
 = 
u
->
	`¥o˚ss_hódî
(
r
);

1633 i‡(
rc
 =
NGX_AGAIN
) {

1635 i‡(
u
->
buf„r
.
œ°
 =u->buf„r.
íd
) {

1636 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

1639 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
,

1640 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1650 i‡(
rc
 =
NGX_HTTP_UPSTREAM_INVALID_HEADER
) {

1651 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
);

1655 i‡(
rc
 =
NGX_ERROR
) {

1656 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1657 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1663 i‡(
u
->
hódîs_ö
.
°©us_n
 > 
NGX_HTTP_SPECIAL_RESPONSE
) {

1665 i‡(
r
->
subªque°_ö_mem‹y
) {

1666 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

1669 i‡(
	`ngx_hâp_up°ªam_ã°_√xt
(
r
, 
u
Ë=
NGX_OK
) {

1673 i‡(
	`ngx_hâp_up°ªam_öãr˚±_îr‹s
(
r
, 
u
Ë=
NGX_OK
) {

1678 i‡(
	`ngx_hâp_up°ªam_¥o˚ss_hódîs
(
r
, 
u
Ë!
NGX_OK
) {

1682 i‡(!
r
->
subªque°_ö_mem‹y
) {

1683 
	`ngx_hâp_up°ªam_£nd_ª•⁄£
(
r
, 
u
);

1689 i‡(
u
->
öput_fûãr
 =
NULL
) {

1690 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

1691 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

1692 
u
->
öput_fûãr_˘x
 = 
r
;

1695 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

1696 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1697 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1701 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

1703 i‡(
n
) {

1704 
u
->
buf„r
.
œ°
 -
n
;

1706 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

1708 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

1709 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

1713 i‡(
u
->
Àngth
 == 0) {

1714 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

1719 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
;

1721 
	`ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
r
, 
u
);

1722 
	}
}

1725 
ngx_öt_t


1726 
	$ngx_hâp_up°ªam_ã°_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1728 
ngx_uöt_t
 
°©us
;

1729 
ngx_hâp_up°ªam_√xt_t
 *
un
;

1731 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1733 
un
 = 
ngx_hâp_up°ªam_√xt_îr‹s
; un->
°©us
; un++) {

1735 i‡(
°©us
 !
un
->status) {

1739 i‡(
u
->
≥î
.
åõs
 > 1 && (u->
c⁄f
->
√xt_up°ªam
 & 
un
->
mask
)) {

1740 
	`ngx_hâp_up°ªam_√xt
(
r
, 
u
, 
un
->
mask
);

1741  
NGX_OK
;

1744 #i‡(
NGX_HTTP_CACHE
)

1746 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


1747 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
un
->
mask
))

1749 
ngx_öt_t
 
rc
;

1751 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

1753 i‡(
rc
 =
NGX_OK
) {

1754 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

1755 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

1758 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

1759  
NGX_OK
;

1765  
NGX_DECLINED
;

1766 
	}
}

1769 
ngx_öt_t


1770 
	$ngx_hâp_up°ªam_öãr˚±_îr‹s
(
ngx_hâp_ªque°_t
 *
r
,

1771 
ngx_hâp_up°ªam_t
 *
u
)

1773 
ngx_öt_t
 
°©us
;

1774 
ngx_uöt_t
 
i
;

1775 
ngx_èbÀ_ñt_t
 *
h
;

1776 
ngx_hâp_îr_∑ge_t
 *
îr_∑ge
;

1777 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1779 
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

1781 i‡(
°©us
 =
NGX_HTTP_NOT_FOUND
 && 
u
->
c⁄f
->
öãr˚±_404
) {

1782 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_NOT_FOUND
);

1783  
NGX_OK
;

1786 i‡(!
u
->
c⁄f
->
öãr˚±_îr‹s
) {

1787  
NGX_DECLINED
;

1790 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1792 i‡(
˛cf
->
îr‹_∑ges
 =
NULL
) {

1793  
NGX_DECLINED
;

1796 
îr_∑ge
 = 
˛cf
->
îr‹_∑ges
->
ñts
;

1797 
i
 = 0; i < 
˛cf
->
îr‹_∑ges
->
√…s
; i++) {

1799 i‡(
îr_∑ge
[
i
].
°©us
 == status) {

1801 i‡(
°©us
 =
NGX_HTTP_UNAUTHORIZED


1802 && 
u
->
hódîs_ö
.
www_authítiˇã
)

1804 
h
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

1806 i‡(
h
 =
NULL
) {

1807 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1808 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1809  
NGX_OK
;

1812 *
h
 = *
u
->
hódîs_ö
.
www_authítiˇã
;

1814 
r
->
hódîs_out
.
www_authítiˇã
 = 
h
;

1817 #i‡(
NGX_HTTP_CACHE
)

1819 i‡(
r
->
ˇche
) {

1820 
time_t
 
vÆid
;

1822 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
°©us
);

1824 i‡(
vÆid
) {

1825 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

1826 
r
->
ˇche
->
îr‹
 = 
°©us
;

1829 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

1832 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

1834  
NGX_OK
;

1838  
NGX_DECLINED
;

1839 
	}
}

1842 
ngx_öt_t


1843 
	$ngx_hâp_up°ªam_ã°_c⁄√˘
(
ngx_c⁄√˘i⁄_t
 *
c
)

1845 
îr
;

1846 
sockÀn_t
 
Àn
;

1848 #i‡(
NGX_HAVE_KQUEUE
)

1850 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

1851 i‡(
c
->
wrôe
->
≥ndög_eof
 || c->
ªad
->pending_eof) {

1852 i‡(
c
->
wrôe
->
≥ndög_eof
) {

1853 
îr
 = 
c
->
wrôe
->
kq_î∫o
;

1856 
îr
 = 
c
->
ªad
->
kq_î∫o
;

1859 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1860 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

1862  
NGX_ERROR
;

1868 
îr
 = 0;

1869 
Àn
 = ();

1876 i‡(
	`gësock›t
(
c
->
fd
, 
SOL_SOCKET
, 
SO_ERROR
, (*Ë&
îr
, &
Àn
)

1879 
îr
 = 
ngx_î∫o
;

1882 i‡(
îr
) {

1883 
c
->
log
->
a˘i⁄
 = "connectingÅo upstream";

1884 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "connect() failed");

1885  
NGX_ERROR
;

1889  
NGX_OK
;

1890 
	}
}

1893 
ngx_öt_t


1894 
	$ngx_hâp_up°ªam_¥o˚ss_hódîs
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

1896 
ngx_°r_t
 *
uri
, 
¨gs
;

1897 
ngx_uöt_t
 
i
, 
Êags
;

1898 
ngx_li°_∑π_t
 *
∑π
;

1899 
ngx_èbÀ_ñt_t
 *
h
;

1900 
ngx_hâp_up°ªam_hódî_t
 *
hh
;

1901 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

1903 
umcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_up°ªam_moduÀ
);

1905 i‡(
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘


1906 && !(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
))

1908 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_DECLINED
);

1910 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1911 
h
 = 
∑π
->
ñts
;

1913 
i
 = 0; ; i++) {

1915 i‡(
i
 >
∑π
->
√…s
) {

1916 i‡(
∑π
->
√xt
 =
NULL
) {

1920 
∑π
 =Ö¨t->
√xt
;

1921 
h
 = 
∑π
->
ñts
;

1922 
i
 = 0;

1925 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1926 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1928 i‡(
hh
 && hh->
ªdúe˘
) {

1929 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1930 
	`ngx_hâp_föÆize_ªque°
(
r
,

1931 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1932  
NGX_DONE
;

1937 
uri
 = &
u
->
hódîs_ö
.
x_ac˚l_ªdúe˘
->
vÆue
;

1938 
	`ngx_°r_nuŒ
(&
¨gs
);

1939 
Êags
 = 
NGX_HTTP_LOG_UNSAFE
;

1941 i‡(
	`ngx_hâp_∑r£_unß„_uri
(
r
, 
uri
, &
¨gs
, &
Êags
Ë!
NGX_OK
) {

1942 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_HTTP_NOT_FOUND
);

1943  
NGX_DONE
;

1946 i‡(
r
->
mëhod
 !
NGX_HTTP_HEAD
) {

1947 
r
->
mëhod
 = 
NGX_HTTP_GET
;

1950 
	`ngx_hâp_öã∫Æ_ªdúe˘
(
r
, 
uri
, &
¨gs
);

1951 
	`ngx_hâp_föÆize_ªque°
(
r
, 
NGX_DONE
);

1952  
NGX_DONE
;

1955 
∑π
 = &
u
->
hódîs_ö
.
hódîs
.part;

1956 
h
 = 
∑π
->
ñts
;

1958 
i
 = 0; ; i++) {

1960 i‡(
i
 >
∑π
->
√…s
) {

1961 i‡(
∑π
->
√xt
 =
NULL
) {

1965 
∑π
 =Ö¨t->
√xt
;

1966 
h
 = 
∑π
->
ñts
;

1967 
i
 = 0;

1970 i‡(
	`ngx_hash_föd
(&
u
->
c⁄f
->
hide_hódîs_hash
, 
h
[
i
].
hash
,

1971 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
))

1976 
hh
 = 
	`ngx_hash_föd
(&
umcf
->
hódîs_ö_hash
, 
h
[
i
].
hash
,

1977 
h
[
i
].
lowˇ£_key
, h[i].
key
.
Àn
);

1979 i‡(
hh
) {

1980 i‡(
hh
->
	`c›y_h™dÀr
(
r
, &
h
[
i
], hh->
c⁄f
Ë!
NGX_OK
) {

1981 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1982 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1983  
NGX_DONE
;

1989 i‡(
	`ngx_hâp_up°ªam_c›y_hódî_löe
(
r
, &
h
[
i
], 0Ë!
NGX_OK
) {

1990 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

1991 
NGX_HTTP_INTERNAL_SERVER_ERROR
);

1992  
NGX_DONE
;

1996 i‡(
r
->
hódîs_out
.
£rvî
 &&Ñ->hódîs_out.£rvî->
vÆue
.
d©a
 =
NULL
) {

1997 
r
->
hódîs_out
.
£rvî
->
hash
 = 0;

2000 i‡(
r
->
hódîs_out
.
d©e
 &&Ñ->hódîs_out.d©e->
vÆue
.
d©a
 =
NULL
) {

2001 
r
->
hódîs_out
.
d©e
->
hash
 = 0;

2004 
r
->
hódîs_out
.
°©us
 = 
u
->
hódîs_ö
.
°©us_n
;

2005 
r
->
hódîs_out
.
°©us_löe
 = 
u
->
hódîs_ö
.status_line;

2007 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 = 
u
->
hódîs_ö
.content_length_n;

2009 
u
->
Àngth
 = u->
hódîs_ö
.
c⁄ã¡_Àngth_n
;

2011  
NGX_OK
;

2012 
	}
}

2016 
	$ngx_hâp_up°ªam_¥o˚ss_body_ö_mem‹y
(
ngx_hâp_ªque°_t
 *
r
,

2017 
ngx_hâp_up°ªam_t
 *
u
)

2019 
size_t
 
size
;

2020 
ssize_t
 
n
;

2021 
ngx_buf_t
 *
b
;

2022 
ngx_evít_t
 *
ªv
;

2023 
ngx_c⁄√˘i⁄_t
 *
c
;

2025 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2026 
ªv
 = 
c
->
ªad
;

2028 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2031 i‡(
ªv
->
timedout
) {

2032 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2033 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ETIMEDOUT
);

2037 
b
 = &
u
->
buf„r
;

2041 
size
 = 
b
->
íd
 - b->
œ°
;

2043 i‡(
size
 == 0) {

2044 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

2046 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2050 
n
 = 
c
->
	`ªcv
(c, 
b
->
œ°
, 
size
);

2052 i‡(
n
 =
NGX_AGAIN
) {

2056 i‡(
n
 =0 ||Ç =
NGX_ERROR
) {

2057 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
n
);

2061 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2063 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2064 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2068 i‡(!
ªv
->
ªady
) {

2073 i‡(
u
->
Àngth
 == 0) {

2074 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2078 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

2079 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_ERROR
);

2083 i‡(
ªv
->
a˘ive
) {

2084 
	`ngx_add_timî
(
ªv
, 
u
->
c⁄f
->
ªad_timeout
);

2086 } i‡(
ªv
->
timî_£t
) {

2087 
	`ngx_dñ_timî
(
ªv
);

2089 
	}
}

2093 
	$ngx_hâp_up°ªam_£nd_ª•⁄£
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2095 
t˝_nodñay
;

2096 
ssize_t
 
n
;

2097 
ngx_öt_t
 
rc
;

2098 
ngx_evít_pùe_t
 *
p
;

2099 
ngx_c⁄√˘i⁄_t
 *
c
;

2100 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2102 
rc
 = 
	`ngx_hâp_£nd_hódî
(
r
);

2104 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯> 
NGX_OK
 || 
r
->
po°_a˘i⁄
) {

2105 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2109 i‡(
u
->
upgøde
) {

2110 
	`ngx_hâp_up°ªam_upgøde
(
r
, 
u
);

2114 
c
 = 
r
->
c⁄√˘i⁄
;

2116 i‡(
r
->
hódî_⁄ly
) {

2118 i‡(
u
->
ˇchóbÀ
 || u->
°‹e
) {

2120 i‡(
	`ngx_shutdown_sockë
(
c
->
fd
, 
NGX_WRITE_SHUTDOWN
) == -1) {

2121 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2122 
ngx_shutdown_sockë_n
 " failed");

2125 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2126 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_ªque°_em±y_h™dÀr
;

2127 
c
->
îr‹
 = 1;

2130 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

2135 
u
->
hódî_£¡
 = 1;

2137 i‡(
r
->
ªque°_body
 &&Ñ->ªque°_body->
ãmp_fûe
) {

2138 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
);

2139 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2142 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2144 i‡(!
u
->
buf„rög
) {

2146 i‡(
u
->
öput_fûãr
 =
NULL
) {

2147 
u
->
öput_fûãr_öô
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
;

2148 
u
->
öput_fûãr
 = 
ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
;

2149 
u
->
öput_fûãr_˘x
 = 
r
;

2152 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
;

2153 
r
->
wrôe_evít_h™dÀr
 =

2154 
ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
;

2156 
r
->
limô_øã
 = 0;

2158 i‡(
u
->
	`öput_fûãr_öô
(u->
öput_fûãr_˘x
Ë=
NGX_ERROR
) {

2159 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2163 i‡(
˛cf
->
t˝_nodñay
 && 
c
->t˝_nodñay =
NGX_TCP_NODELAY_UNSET
) {

2164 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2166 
t˝_nodñay
 = 1;

2168 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2169 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2171 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2173 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2177 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2180 
n
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2182 i‡(
n
) {

2183 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2185 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2187 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2188 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2192 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
r
);

2195 
u
->
buf„r
.
pos
 = u->buf„r.
°¨t
;

2196 
u
->
buf„r
.
œ°
 = u->buf„r.
°¨t
;

2198 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2199 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2203 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady
 || u->
Àngth
 == 0) {

2204 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
r
, 
u
);

2213 #i‡(
NGX_HTTP_CACHE
)

2215 i‡(
r
->
ˇche
 &&Ñ->ˇche->
fûe
.
fd
 !
NGX_INVALID_FILE
) {

2216 
	`ngx_poﬁ_run_˛ónup_fûe
(
r
->
poﬁ
,Ñ->
ˇche
->
fûe
.
fd
);

2217 
r
->
ˇche
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2220 
	`ngx_hâp_ã°_¥ediˇãs
(
r
, 
u
->
c⁄f
->
no_ˇche
)) {

2222 
NGX_ERROR
:

2223 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2226 
NGX_DECLINED
:

2227 
u
->
ˇchóbÀ
 = 0;

2232 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_BYPASS
) {

2234 
r
->
ˇche
->
mö_u£s
 = 
u
->
c⁄f
->
ˇche_mö_u£s
;

2235 
r
->
ˇche
->
body_°¨t
 = 
u
->
c⁄f
->
buf„r_size
;

2236 
r
->
ˇche
->
fûe_ˇche
 = 
u
->
c⁄f
->ˇche->
d©a
;

2238 i‡(
	`ngx_hâp_fûe_ˇche_¸óã
(
r
Ë!
NGX_OK
) {

2239 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2247 i‡(
u
->
ˇchóbÀ
) {

2248 
time_t
 
now
, 
vÆid
;

2250 
now
 = 
	`ngx_time
();

2252 
vÆid
 = 
r
->
ˇche
->
vÆid_£c
;

2254 i‡(
vÆid
 == 0) {

2255 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
,

2256 
u
->
hódîs_ö
.
°©us_n
);

2257 i‡(
vÆid
) {

2258 
r
->
ˇche
->
vÆid_£c
 = 
now
 + 
vÆid
;

2262 i‡(
vÆid
) {

2263 
r
->
ˇche
->
œ°_modifõd
 =Ñ->
hódîs_out
.
œ°_modifõd_time
;

2264 
r
->
ˇche
->
d©e
 = 
now
;

2265 
r
->
ˇche
->
body_°¨t
 = (
u_sh‹t
Ë(
u
->
buf„r
.
pos
 - u->buf„r.
°¨t
);

2267 
	`ngx_hâp_fûe_ˇche_£t_hódî
(
r
, 
u
->
buf„r
.
°¨t
);

2270 
u
->
ˇchóbÀ
 = 0;

2271 
r
->
hódîs_out
.
œ°_modifõd_time
 = -1;

2275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2276 "hâ∞ˇchóbÀ: %d", 
u
->
ˇchóbÀ
);

2278 i‡(
u
->
ˇchóbÀ
 =0 && 
r
->
ˇche
) {

2279 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

2284 
p
 = 
u
->
pùe
;

2286 
p
->
ouçut_fûãr
 = (
ngx_evít_pùe_ouçut_fûãr_±
Ë
ngx_hâp_ouçut_fûãr
;

2287 
p
->
ouçut_˘x
 = 
r
;

2288 
p
->
èg
 = 
u
->
ouçut
.tag;

2289 
p
->
bufs
 = 
u
->
c⁄f
->bufs;

2290 
p
->
busy_size
 = 
u
->
c⁄f
->
busy_buf„rs_size
;

2291 
p
->
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2292 
p
->
down°ªam
 = 
c
;

2293 
p
->
poﬁ
 = 
r
->pool;

2294 
p
->
log
 = 
c
->log;

2296 
p
->
ˇchóbÀ
 = 
u
->ˇchóbÀ || u->
°‹e
;

2298 
p
->
ãmp_fûe
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

2299 i‡(
p
->
ãmp_fûe
 =
NULL
) {

2300 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2304 
p
->
ãmp_fûe
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

2305 
p
->
ãmp_fûe
->
fûe
.
log
 = 
c
->log;

2306 
p
->
ãmp_fûe
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

2307 
p
->
ãmp_fûe
->
poﬁ
 = 
r
->pool;

2309 i‡(
p
->
ˇchóbÀ
) {

2310 
p
->
ãmp_fûe
->
≥rsi°ít
 = 1;

2313 
p
->
ãmp_fûe
->
log_Àvñ
 = 
NGX_LOG_WARN
;

2314 
p
->
ãmp_fûe
->
w¨n
 = "an upstreamÑesponse is buffered "

2318 
p
->
max_ãmp_fûe_size
 = 
u
->
c⁄f
->max_temp_file_size;

2319 
p
->
ãmp_fûe_wrôe_size
 = 
u
->
c⁄f
->temp_file_write_size;

2321 
p
->
¥îód_bufs
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

2322 i‡(
p
->
¥îód_bufs
 =
NULL
) {

2323 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2327 
p
->
¥îód_bufs
->
buf
 = &
u
->
buf„r
;

2328 
p
->
¥îód_bufs
->
√xt
 = 
NULL
;

2329 
u
->
buf„r
.
ªcy˛ed
 = 1;

2331 
p
->
¥îód_size
 = 
u
->
buf„r
.
œ°
 - u->buf„r.
pos
;

2333 i‡(
u
->
ˇchóbÀ
) {

2335 
p
->
buf_to_fûe
 = 
	`ngx_ˇŒoc_buf
(
r
->
poﬁ
);

2336 i‡(
p
->
buf_to_fûe
 =
NULL
) {

2337 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2341 
p
->
buf_to_fûe
->
°¨t
 = 
u
->
buf„r
.start;

2342 
p
->
buf_to_fûe
->
pos
 = 
u
->
buf„r
.
°¨t
;

2343 
p
->
buf_to_fûe
->
œ°
 = 
u
->
buf„r
.
pos
;

2344 
p
->
buf_to_fûe
->
ãmp‹¨y
 = 1;

2347 i‡(
ngx_evít_Êags
 & 
NGX_USE_AIO_EVENT
) {

2349 
p
->
sögÀ_buf
 = 1;

2353 
p
->
‰ì_bufs
 = 1;

2359 
u
->
buf„r
.
œ°
 = u->buf„r.
pos
;

2361 i‡(
u
->
c⁄f
->
cy˛ic_ãmp_fûe
) {

2369 
p
->
cy˛ic_ãmp_fûe
 = 1;

2370 
c
->
£ndfûe
 = 0;

2373 
p
->
cy˛ic_ãmp_fûe
 = 0;

2376 
p
->
ªad_timeout
 = 
u
->
c⁄f
->read_timeout;

2377 
p
->
£nd_timeout
 = 
˛cf
->send_timeout;

2378 
p
->
£nd_low©
 = 
˛cf
->send_lowat;

2380 
p
->
Àngth
 = -1;

2382 i‡(
u
->
öput_fûãr_öô


2383 && 
u
->
	`öput_fûãr_öô
(
p
->
öput_˘x
Ë!
NGX_OK
)

2385 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2389 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_up°ªam
;

2390 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_¥o˚ss_down°ªam
;

2392 
	`ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
r
, 
u
);

2393 
	}
}

2397 
	$ngx_hâp_up°ªam_upgøde
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

2399 
t˝_nodñay
;

2400 
ngx_c⁄√˘i⁄_t
 *
c
;

2401 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2403 
c
 = 
r
->
c⁄√˘i⁄
;

2404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2408 
r
->
kì∑live
 = 0;

2409 
c
->
log
->
a˘i⁄
 = "proxying upgraded connection";

2411 
u
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_up°ªam
;

2412 
u
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
;

2413 
r
->
ªad_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_ªad_down°ªam
;

2414 
r
->
wrôe_evít_h™dÀr
 = 
ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
;

2416 i‡(
˛cf
->
t˝_nodñay
) {

2417 
t˝_nodñay
 = 1;

2419 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

2420 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0, "tcp_nodelay");

2422 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2423 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2425 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ngx_sockë_î∫o
,

2427 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2431 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2434 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

2435 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
u
->
≥î
.
c⁄√˘i⁄
->
log
, 0,

2438 i‡(
	`£tsock›t
(
u
->
≥î
.
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

2439 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

2441 
	`ngx_c⁄√˘i⁄_îr‹
(
u
->
≥î
.
c⁄√˘i⁄
, 
ngx_sockë_î∫o
,

2443 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2447 
u
->
≥î
.
c⁄√˘i⁄
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_SET
;

2451 i‡(
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_FLUSH
Ë=
NGX_ERROR
) {

2452 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2456 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
ªad
->
ªady


2457 || 
u
->
buf„r
.
pos
 !u->buf„r.
œ°
)

2459 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

2462 i‡(
c
->
ªad
->
ªady


2463 || 
r
->
hódî_ö
->
pos
 !r->hódî_ö->
œ°
)

2465 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

2467 
	}
}

2471 
	$ngx_hâp_up°ªam_upgøded_ªad_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2473 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 0);

2474 
	}
}

2478 
	$ngx_hâp_up°ªam_upgøded_wrôe_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2480 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 1);

2481 
	}
}

2485 
	$ngx_hâp_up°ªam_upgøded_ªad_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2486 
ngx_hâp_up°ªam_t
 *
u
)

2488 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 1, 0);

2489 
	}
}

2493 
	$ngx_hâp_up°ªam_upgøded_wrôe_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2494 
ngx_hâp_up°ªam_t
 *
u
)

2496 
	`ngx_hâp_up°ªam_¥o˚ss_upgøded
(
r
, 0, 1);

2497 
	}
}

2501 
	$ngx_hâp_up°ªam_¥o˚ss_upgøded
(
ngx_hâp_ªque°_t
 *
r
,

2502 
ngx_uöt_t
 
‰om_up°ªam
,Çgx_uöt_à
do_wrôe
)

2504 
size_t
 
size
;

2505 
ssize_t
 
n
;

2506 
ngx_buf_t
 *
b
;

2507 
ngx_c⁄√˘i⁄_t
 *
c
, *
down°ªam
, *
up°ªam
, *
d°
, *
§c
;

2508 
ngx_hâp_up°ªam_t
 *
u
;

2509 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2511 
c
 = 
r
->
c⁄√˘i⁄
;

2512 
u
 = 
r
->
up°ªam
;

2514 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2515 "hâ∞up°ªamÖro˚s†upgøded, fu:%ui", 
‰om_up°ªam
);

2517 
down°ªam
 = 
c
;

2518 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2520 i‡(
down°ªam
->
wrôe
->
timedout
) {

2521 
c
->
timedout
 = 1;

2522 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2523 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2527 i‡(
up°ªam
->
ªad
->
timedout
 || up°ªam->
wrôe
->timedout) {

2528 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2529 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2533 i‡(
‰om_up°ªam
) {

2534 
§c
 = 
up°ªam
;

2535 
d°
 = 
down°ªam
;

2536 
b
 = &
u
->
buf„r
;

2539 
§c
 = 
down°ªam
;

2540 
d°
 = 
up°ªam
;

2541 
b
 = &
u
->
‰om_˛õ¡
;

2543 i‡(
r
->
hódî_ö
->
œ°
 >Ñ->hódî_ö->
pos
) {

2544 
b
 = 
r
->
hódî_ö
;

2545 
b
->
íd
 = b->
œ°
;

2546 
do_wrôe
 = 1;

2549 i‡(
b
->
°¨t
 =
NULL
) {

2550 
b
->
°¨t
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, 
u
->
c⁄f
->
buf„r_size
);

2551 i‡(
b
->
°¨t
 =
NULL
) {

2552 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2556 
b
->
pos
 = b->
°¨t
;

2557 
b
->
œ°
 = b->
°¨t
;

2558 
b
->
íd
 = b->
°¨t
 + 
u
->
c⁄f
->
buf„r_size
;

2559 
b
->
ãmp‹¨y
 = 1;

2560 
b
->
èg
 = 
u
->
ouçut
.tag;

2566 i‡(
do_wrôe
) {

2568 
size
 = 
b
->
œ°
 - b->
pos
;

2570 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

2572 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

2574 i‡(
n
 =
NGX_ERROR
) {

2575 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2579 i‡(
n
 > 0) {

2580 
b
->
pos
 +
n
;

2582 i‡(
b
->
pos
 =b->
œ°
) {

2583 
b
->
pos
 = b->
°¨t
;

2584 
b
->
œ°
 = b->
°¨t
;

2590 
size
 = 
b
->
íd
 - b->
œ°
;

2592 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

2594 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

2596 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

2600 i‡(
n
 > 0) {

2601 
do_wrôe
 = 1;

2602 
b
->
œ°
 +
n
;

2607 i‡(
n
 =
NGX_ERROR
) {

2608 
§c
->
ªad
->
eof
 = 1;

2615 i‡((
up°ªam
->
ªad
->
eof
 && 
u
->
buf„r
.
pos
 =u->buf„r.
œ°
)

2616 || (
down°ªam
->
ªad
->
eof
 && 
u
->
‰om_˛õ¡
.
pos
 =u->‰om_˛õ¡.
œ°
)

2617 || (
down°ªam
->
ªad
->
eof
 && 
up°ªam
->read->eof))

2619 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2621 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2625 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2627 i‡(
	`ngx_h™dÀ_wrôe_evít
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_low©
)

2628 !
NGX_OK
)

2630 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2634 i‡(
up°ªam
->
wrôe
->
a˘ive
 && !up°ªam->wrôe->
ªady
) {

2635 
	`ngx_add_timî
(
up°ªam
->
wrôe
, 
u
->
c⁄f
->
£nd_timeout
);

2637 } i‡(
up°ªam
->
wrôe
->
timî_£t
) {

2638 
	`ngx_dñ_timî
(
up°ªam
->
wrôe
);

2641 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2642 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2646 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2647 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2649 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2650 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2653 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2654 !
NGX_OK
)

2656 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2660 i‡(
	`ngx_h™dÀ_ªad_evít
(
down°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2661 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2665 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2666 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2668 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2669 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2671 
	}
}

2675 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2677 
ngx_evít_t
 *
wev
;

2678 
ngx_c⁄√˘i⁄_t
 *
c
;

2679 
ngx_hâp_up°ªam_t
 *
u
;

2681 
c
 = 
r
->
c⁄√˘i⁄
;

2682 
u
 = 
r
->
up°ªam
;

2683 
wev
 = 
c
->
wrôe
;

2685 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2688 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2690 i‡(
wev
->
timedout
) {

2691 
c
->
timedout
 = 1;

2692 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2693 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
NGX_HTTP_REQUEST_TIME_OUT
);

2697 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 1);

2698 
	}
}

2702 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2703 
ngx_hâp_up°ªam_t
 *
u
)

2705 
ngx_c⁄√˘i⁄_t
 *
c
;

2707 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2709 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2712 
c
->
log
->
a˘i⁄
 = "reading upstream";

2714 i‡(
c
->
ªad
->
timedout
) {

2715 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2716 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2720 
	`ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
r
, 0);

2721 
	}
}

2725 
	$ngx_hâp_up°ªam_¥o˚ss_n⁄_buf„ªd_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

2726 
ngx_uöt_t
 
do_wrôe
)

2728 
size_t
 
size
;

2729 
ssize_t
 
n
;

2730 
ngx_buf_t
 *
b
;

2731 
ngx_öt_t
 
rc
;

2732 
ngx_c⁄√˘i⁄_t
 *
down°ªam
, *
up°ªam
;

2733 
ngx_hâp_up°ªam_t
 *
u
;

2734 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

2736 
u
 = 
r
->
up°ªam
;

2737 
down°ªam
 = 
r
->
c⁄√˘i⁄
;

2738 
up°ªam
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2740 
b
 = &
u
->
buf„r
;

2742 
do_wrôe
 = do_wrôê|| 
u
->
Àngth
 == 0;

2746 i‡(
do_wrôe
) {

2748 i‡(
u
->
out_bufs
 || u->
busy_bufs
) {

2749 
rc
 = 
	`ngx_hâp_ouçut_fûãr
(
r
, 
u
->
out_bufs
);

2751 i‡(
rc
 =
NGX_ERROR
) {

2752 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2756 
	`ngx_chaö_upd©e_chaös
(
r
->
poﬁ
, &
u
->
‰ì_bufs
, &u->
busy_bufs
,

2757 &
u
->
out_bufs
, u->
ouçut
.
èg
);

2760 i‡(
u
->
busy_bufs
 =
NULL
) {

2762 i‡(
u
->
Àngth
 == 0

2763 || 
up°ªam
->
ªad
->
eof


2764 || 
up°ªam
->
ªad
->
îr‹
)

2766 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2770 
b
->
pos
 = b->
°¨t
;

2771 
b
->
œ°
 = b->
°¨t
;

2775 
size
 = 
b
->
íd
 - b->
œ°
;

2777 i‡(
size
 && 
up°ªam
->
ªad
->
ªady
) {

2779 
n
 = 
up°ªam
->
	`ªcv
(up°ªam, 
b
->
œ°
, 
size
);

2781 i‡(
n
 =
NGX_AGAIN
) {

2785 i‡(
n
 > 0) {

2786 
u
->
°©e
->
ª•⁄£_Àngth
 +
n
;

2788 i‡(
u
->
	`öput_fûãr
(u->
öput_fûãr_˘x
, 
n
Ë=
NGX_ERROR
) {

2789 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2794 
do_wrôe
 = 1;

2802 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2804 i‡(
down°ªam
->
d©a
 =
r
) {

2805 i‡(
	`ngx_h™dÀ_wrôe_evít
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_low©
)

2806 !
NGX_OK
)

2808 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2813 i‡(
down°ªam
->
wrôe
->
a˘ive
 && !down°ªam->wrôe->
ªady
) {

2814 
	`ngx_add_timî
(
down°ªam
->
wrôe
, 
˛cf
->
£nd_timeout
);

2816 } i‡(
down°ªam
->
wrôe
->
timî_£t
) {

2817 
	`ngx_dñ_timî
(
down°ªam
->
wrôe
);

2820 i‡(
	`ngx_h™dÀ_ªad_evít
(
up°ªam
->
ªad
, 0Ë!
NGX_OK
) {

2821 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2825 i‡(
up°ªam
->
ªad
->
a˘ive
 && !up°ªam->ªad->
ªady
) {

2826 
	`ngx_add_timî
(
up°ªam
->
ªad
, 
u
->
c⁄f
->
ªad_timeout
);

2828 } i‡(
up°ªam
->
ªad
->
timî_£t
) {

2829 
	`ngx_dñ_timî
(
up°ªam
->
ªad
);

2831 
	}
}

2834 
ngx_öt_t


2835 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr_öô
(*
d©a
)

2837  
NGX_OK
;

2838 
	}
}

2841 
ngx_öt_t


2842 
	$ngx_hâp_up°ªam_n⁄_buf„ªd_fûãr
(*
d©a
, 
ssize_t
 
byãs
)

2844 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

2846 
ngx_buf_t
 *
b
;

2847 
ngx_chaö_t
 *
˛
, **
Œ
;

2848 
ngx_hâp_up°ªam_t
 *
u
;

2850 
u
 = 
r
->
up°ªam
;

2852 
˛
 = 
u
->
out_bufs
, 
Œ
 = &u->out_bufs; cl; c»˛->
√xt
) {

2853 
Œ
 = &
˛
->
√xt
;

2856 
˛
 = 
	`ngx_chaö_gë_‰ì_buf
(
r
->
poﬁ
, &
u
->
‰ì_bufs
);

2857 i‡(
˛
 =
NULL
) {

2858  
NGX_ERROR
;

2861 *
Œ
 = 
˛
;

2863 
˛
->
buf
->
Êush
 = 1;

2864 
˛
->
buf
->
mem‹y
 = 1;

2866 
b
 = &
u
->
buf„r
;

2868 
˛
->
buf
->
pos
 = 
b
->
œ°
;

2869 
b
->
œ°
 +
byãs
;

2870 
˛
->
buf
->
œ°
 = 
b
->last;

2871 
˛
->
buf
->
èg
 = 
u
->
ouçut
.tag;

2873 i‡(
u
->
Àngth
 == -1) {

2874  
NGX_OK
;

2877 
u
->
Àngth
 -
byãs
;

2879  
NGX_OK
;

2880 
	}
}

2884 
	$ngx_hâp_up°ªam_¥o˚ss_down°ªam
(
ngx_hâp_ªque°_t
 *
r
)

2886 
ngx_evít_t
 *
wev
;

2887 
ngx_c⁄√˘i⁄_t
 *
c
;

2888 
ngx_evít_pùe_t
 *
p
;

2889 
ngx_hâp_up°ªam_t
 *
u
;

2891 
c
 = 
r
->
c⁄√˘i⁄
;

2892 
u
 = 
r
->
up°ªam
;

2893 
p
 = 
u
->
pùe
;

2894 
wev
 = 
c
->
wrôe
;

2896 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2899 
c
->
log
->
a˘i⁄
 = "sendingÅo client";

2901 i‡(
wev
->
timedout
) {

2903 i‡(
wev
->
dñayed
) {

2905 
wev
->
timedout
 = 0;

2906 
wev
->
dñayed
 = 0;

2908 i‡(!
wev
->
ªady
) {

2909 
	`ngx_add_timî
(
wev
, 
p
->
£nd_timeout
);

2911 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2912 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2918 i‡(
	`ngx_evít_pùe
(
p
, 
wev
->
wrôe
Ë=
NGX_ABORT
) {

2919 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2924 
p
->
down°ªam_îr‹
 = 1;

2925 
c
->
timedout
 = 1;

2926 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "clientÅimed out");

2931 i‡(
wev
->
dñayed
) {

2933 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2936 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 
p
->
£nd_low©
Ë!
NGX_OK
) {

2937 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2943 i‡(
	`ngx_evít_pùe
(
p
, 1Ë=
NGX_ABORT
) {

2944 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2949 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2950 
	}
}

2954 
	$ngx_hâp_up°ªam_¥o˚ss_up°ªam
(
ngx_hâp_ªque°_t
 *
r
,

2955 
ngx_hâp_up°ªam_t
 *
u
)

2957 
ngx_c⁄√˘i⁄_t
 *
c
;

2959 
c
 = 
u
->
≥î
.
c⁄√˘i⁄
;

2961 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

2964 
c
->
log
->
a˘i⁄
 = "reading upstream";

2966 i‡(
c
->
ªad
->
timedout
) {

2967 
u
->
pùe
->
up°ªam_îr‹
 = 1;

2968 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
NGX_ETIMEDOUT
, "upstreamÅimed out");

2971 i‡(
	`ngx_evít_pùe
(
u
->
pùe
, 0Ë=
NGX_ABORT
) {

2972 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

2977 
	`ngx_hâp_up°ªam_¥o˚ss_ªque°
(
r
);

2978 
	}
}

2982 
	$ngx_hâp_up°ªam_¥o˚ss_ªque°
(
ngx_hâp_ªque°_t
 *
r
)

2984 
ngx_ãmp_fûe_t
 *
tf
;

2985 
ngx_evít_pùe_t
 *
p
;

2986 
ngx_hâp_up°ªam_t
 *
u
;

2988 
u
 = 
r
->
up°ªam
;

2989 
p
 = 
u
->
pùe
;

2991 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

2993 i‡(
u
->
°‹e
) {

2995 i‡(
p
->
up°ªam_eof
 ||Ö->
up°ªam_d⁄e
) {

2997 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

2999 i‡(
u
->
hódîs_ö
.
°©us_n
 =
NGX_HTTP_OK


3000 && (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3001 || (
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 =
tf
->
off£t
)))

3003 
	`ngx_hâp_up°ªam_°‹e
(
r
, 
u
);

3004 
u
->
°‹e
 = 0;

3009 #i‡(
NGX_HTTP_CACHE
)

3011 i‡(
u
->
ˇchóbÀ
) {

3013 i‡(
p
->
up°ªam_d⁄e
) {

3014 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
u
->
pùe
->
ãmp_fûe
);

3016 } i‡(
p
->
up°ªam_eof
) {

3018 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

3020 i‡(
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 == -1

3021 || 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n


3022 =
tf
->
off£t
 - (
off_t
Ë
r
->
ˇche
->
body_°¨t
)

3024 
	`ngx_hâp_fûe_ˇche_upd©e
(
r
, 
tf
);

3027 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
tf
);

3030 } i‡(
p
->
up°ªam_îr‹
) {

3031 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3037 i‡(
p
->
up°ªam_d⁄e
 ||Ö->
up°ªam_eof
 ||Ö->
up°ªam_îr‹
) {

3038 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3039 "hâ∞up°ªamÉxô: %p", 
p
->
out
);

3041 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

3043 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3048 i‡(
p
->
down°ªam_îr‹
) {

3049 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3052 i‡(!
u
->
ˇchóbÀ
 && !u->
°‹e
 && u->
≥î
.
c⁄√˘i⁄
) {

3053 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 0);

3056 
	}
}

3060 
	$ngx_hâp_up°ªam_°‹e
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3062 
size_t
 
roŸ
;

3063 
time_t
 
lm
;

3064 
ngx_°r_t
 
∑th
;

3065 
ngx_ãmp_fûe_t
 *
tf
;

3066 
ngx_ext_ª«me_fûe_t
 
ext
;

3068 
tf
 = 
u
->
pùe
->
ãmp_fûe
;

3070 i‡(
tf
->
fûe
.
fd
 =
NGX_INVALID_FILE
) {

3074 
tf
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_ãmp_fûe_t
));

3075 i‡(
tf
 =
NULL
) {

3079 
tf
->
fûe
.
fd
 = 
NGX_INVALID_FILE
;

3080 
tf
->
fûe
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3081 
tf
->
∑th
 = 
u
->
c⁄f
->
ãmp_∑th
;

3082 
tf
->
poﬁ
 = 
r
->pool;

3083 
tf
->
≥rsi°ít
 = 1;

3085 i‡(
	`ngx_¸óã_ãmp_fûe
(&
tf
->
fûe
,Åf->
∑th
,Åf->
poﬁ
,

3086 
tf
->
≥rsi°ít
,Åf->
˛ón
,Åf->
ac˚ss
)

3087 !
NGX_OK
)

3092 
u
->
pùe
->
ãmp_fûe
 = 
tf
;

3095 
ext
.
ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3096 
ext
.
∑th_ac˚ss
 = 
u
->
c⁄f
->
°‹e_ac˚ss
;

3097 
ext
.
time
 = -1;

3098 
ext
.
¸óã_∑th
 = 1;

3099 
ext
.
dñëe_fûe
 = 1;

3100 
ext
.
log
 = 
r
->
c⁄√˘i⁄
->log;

3102 i‡(
u
->
hódîs_ö
.
œ°_modifõd
) {

3104 
lm
 = 
	`ngx_hâp_∑r£_time
(
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
d©a
,

3105 
u
->
hódîs_ö
.
œ°_modifõd
->
vÆue
.
Àn
);

3107 i‡(
lm
 !
NGX_ERROR
) {

3108 
ext
.
time
 = 
lm
;

3109 
ext
.
fd
 = 
tf
->
fûe
.fd;

3113 i‡(
u
->
c⁄f
->
°‹e_Àngths
 =
NULL
) {

3115 
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0);

3118 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
u
->
c⁄f
->
°‹e_Àngths
->
ñts
, 0,

3119 
u
->
c⁄f
->
°‹e_vÆues
->
ñts
)

3120 =
NULL
)

3126 
∑th
.
Àn
--;

3128 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3130 
tf
->
fûe
.
«me
.
d©a
, 
∑th
.data);

3132 (Ë
	`ngx_ext_ª«me_fûe
(&
tf
->
fûe
.
«me
, &
∑th
, &
ext
);

3133 
	}
}

3137 
	$ngx_hâp_up°ªam_dummy_h™dÀr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
)

3139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3141 
	}
}

3145 
	$ngx_hâp_up°ªam_√xt
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_up°ªam_t
 *
u
,

3146 
ngx_uöt_t
 
·_ty≥
)

3148 
ngx_uöt_t
 
°©us
, 
°©e
;

3150 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3151 "hâ∞√xàup°ªam, %xi", 
·_ty≥
);

3154 
	`ngx_hâp_busy_u∆ock
(
u
->
c⁄f
->
busy_lock
, &u->busy_lock);

3157 i‡(
u
->
≥î
.
sockaddr
) {

3159 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_HTTP_404
) {

3160 
°©e
 = 
NGX_PEER_NEXT
;

3162 
°©e
 = 
NGX_PEER_FAILED
;

3165 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 
°©e
);

3166 
u
->
≥î
.
sockaddr
 = 
NULL
;

3169 i‡(
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_TIMEOUT
) {

3170 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 
NGX_ETIMEDOUT
,

3174 i‡(
u
->
≥î
.
ˇched
 && 
·_ty≥
 =
NGX_HTTP_UPSTREAM_FT_ERROR
) {

3175 
°©us
 = 0;

3179 
u
->
≥î
.
åõs
++;

3182 
·_ty≥
) {

3184 
NGX_HTTP_UPSTREAM_FT_TIMEOUT
:

3185 
°©us
 = 
NGX_HTTP_GATEWAY_TIME_OUT
;

3188 
NGX_HTTP_UPSTREAM_FT_HTTP_500
:

3189 
°©us
 = 
NGX_HTTP_INTERNAL_SERVER_ERROR
;

3192 
NGX_HTTP_UPSTREAM_FT_HTTP_404
:

3193 
°©us
 = 
NGX_HTTP_NOT_FOUND
;

3202 
°©us
 = 
NGX_HTTP_BAD_GATEWAY
;

3206 i‡(
r
->
c⁄√˘i⁄
->
îr‹
) {

3207 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
,

3208 
NGX_HTTP_CLIENT_CLOSED_REQUEST
);

3212 i‡(
°©us
) {

3213 
u
->
°©e
->
°©us
 = status;

3215 i‡(
u
->
≥î
.
åõs
 =0 || !(u->
c⁄f
->
√xt_up°ªam
 & 
·_ty≥
)) {

3217 #i‡(
NGX_HTTP_CACHE
)

3219 i‡(
u
->
ˇche_°©us
 =
NGX_HTTP_CACHE_EXPIRED


3220 && (
u
->
c⁄f
->
ˇche_u£_°Æe
 & 
·_ty≥
))

3222 
ngx_öt_t
 
rc
;

3224 
rc
 = 
u
->
	`ªöô_ªque°
(
r
);

3226 i‡(
rc
 =
NGX_OK
) {

3227 
u
->
ˇche_°©us
 = 
NGX_HTTP_CACHE_STALE
;

3228 
rc
 = 
	`ngx_hâp_up°ªam_ˇche_£nd
(
r
, 
u
);

3231 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
rc
);

3236 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
, 
u
, 
°©us
);

3241 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3244 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3245 #i‡(
NGX_HTTP_SSL
)

3247 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3248 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3249 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_£nd_shutdown
 = 1;

3251 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3255 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3256 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3259 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3260 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3264 i‡(
u
->
c⁄f
->
busy_lock
 && !u->
busy_locked
) {

3265 
	`ngx_hâp_up°ªam_busy_lock
(
p
);

3270 
	`ngx_hâp_up°ªam_c⁄√˘
(
r
, 
u
);

3271 
	}
}

3275 
	$ngx_hâp_up°ªam_˛ónup
(*
d©a
)

3277 
ngx_hâp_ªque°_t
 *
r
 = 
d©a
;

3279 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3280 "˛ónu∞hâ∞up°ªamÑeque°: \"%V\"", &
r
->
uri
);

3282 
	`ngx_hâp_up°ªam_föÆize_ªque°
(
r
,Ñ->
up°ªam
, 
NGX_DONE
);

3283 
	}
}

3287 
	$ngx_hâp_up°ªam_föÆize_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

3288 
ngx_hâp_up°ªam_t
 *
u
, 
ngx_öt_t
 
rc
)

3290 
ngx_time_t
 *
ç
;

3292 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3293 "föÆizêhâ∞up°ªamÑeque°: %i", 
rc
);

3295 i‡(
u
->
˛ónup
) {

3296 *
u
->
˛ónup
 = 
NULL
;

3297 
u
->
˛ónup
 = 
NULL
;

3300 i‡(
u
->
ªsﬁved
 && u->ªsﬁved->
˘x
) {

3301 
	`ngx_ªsﬁve_«me_d⁄e
(
u
->
ªsﬁved
->
˘x
);

3302 
u
->
ªsﬁved
->
˘x
 = 
NULL
;

3305 i‡(
u
->
°©e
 && u->°©e->
ª•⁄£_£c
) {

3306 
ç
 = 
	`ngx_timeofday
();

3307 
u
->
°©e
->
ª•⁄£_£c
 = 
ç
->
£c
 - u->state->response_sec;

3308 
u
->
°©e
->
ª•⁄£_m£c
 = 
ç
->
m£c
 - u->state->response_msec;

3310 i‡(
u
->
pùe
 && u->pùe->
ªad_Àngth
) {

3311 
u
->
°©e
->
ª•⁄£_Àngth
 = u->
pùe
->
ªad_Àngth
;

3315 
u
->
	`föÆize_ªque°
(
r
, 
rc
);

3317 i‡(
u
->
≥î
.
‰ì
 && u->≥î.
sockaddr
) {

3318 
u
->
≥î
.
	`‰ì
(&u->≥î, u->≥î.
d©a
, 0);

3319 
u
->
≥î
.
sockaddr
 = 
NULL
;

3322 i‡(
u
->
≥î
.
c⁄√˘i⁄
) {

3324 #i‡(
NGX_HTTP_SSL
)

3328 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
s¶
) {

3336 
u
->
≥î
.
c⁄√˘i⁄
->
s¶
->
no_waô_shutdown
 = 1;

3338 (Ë
	`ngx_s¶_shutdown
(
u
->
≥î
.
c⁄√˘i⁄
);

3342 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3344 
u
->
≥î
.
c⁄√˘i⁄
->
fd
);

3346 i‡(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
) {

3347 
	`ngx_de°roy_poﬁ
(
u
->
≥î
.
c⁄√˘i⁄
->
poﬁ
);

3350 
	`ngx_˛o£_c⁄√˘i⁄
(
u
->
≥î
.
c⁄√˘i⁄
);

3353 
u
->
≥î
.
c⁄√˘i⁄
 = 
NULL
;

3355 i‡(
u
->
pùe
 && u->pùe->
ãmp_fûe
) {

3356 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3358 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
);

3361 i‡(
u
->
°‹e
 && u->
pùe
 && u->pùe->
ãmp_fûe


3362 && 
u
->
pùe
->
ãmp_fûe
->
fûe
.
fd
 !
NGX_INVALID_FILE
)

3364 i‡(
	`ngx_dñëe_fûe
(
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
)

3365 =
NGX_FILE_ERROR
)

3367 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

3368 
ngx_dñëe_fûe_n
 " \"%s\" failed",

3369 
u
->
pùe
->
ãmp_fûe
->
fûe
.
«me
.
d©a
);

3373 #i‡(
NGX_HTTP_CACHE
)

3375 i‡(
r
->
ˇche
) {

3377 i‡(
u
->
ˇchóbÀ
) {

3379 i‡(
rc
 =
NGX_HTTP_BAD_GATEWAY
 ||Ñ¯=
NGX_HTTP_GATEWAY_TIME_OUT
) {

3380 
time_t
 
vÆid
;

3382 
vÆid
 = 
	`ngx_hâp_fûe_ˇche_vÆid
(
u
->
c⁄f
->
ˇche_vÆid
, 
rc
);

3384 i‡(
vÆid
) {

3385 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
vÆid
;

3386 
r
->
ˇche
->
îr‹
 = 
rc
;

3391 
	`ngx_hâp_fûe_ˇche_‰ì
(
r
->
ˇche
, 
u
->
pùe
->
ãmp_fûe
);

3396 i‡(
u
->
hódî_£¡


3397 && 
rc
 !
NGX_HTTP_REQUEST_TIME_OUT


3398 && (
rc
 =
NGX_ERROR
 ||Ñ¯>
NGX_HTTP_SPECIAL_RESPONSE
))

3400 
rc
 = 0;

3403 i‡(
rc
 =
NGX_DECLINED
) {

3407 
r
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÅo client";

3409 i‡(
rc
 == 0

3410 && !
r
->
hódî_⁄ly


3411 #i‡(
NGX_HTTP_CACHE
)

3412 && !
r
->
ˇched


3416 
rc
 = 
	`ngx_hâp_£nd_•ecül
(
r
, 
NGX_HTTP_LAST
);

3419 
	`ngx_hâp_föÆize_ªque°
(
r
, 
rc
);

3420 
	}
}

3423 
ngx_öt_t


3424 
	$ngx_hâp_up°ªam_¥o˚ss_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3425 
ngx_uöt_t
 
off£t
)

3427 
ngx_èbÀ_ñt_t
 **
ph
;

3429 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
up°ªam
->
hódîs_ö
 + 
off£t
);

3431 i‡(*
ph
 =
NULL
) {

3432 *
ph
 = 
h
;

3435  
NGX_OK
;

3436 
	}
}

3439 
ngx_öt_t


3440 
	$ngx_hâp_up°ªam_ign‹e_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3441 
ngx_uöt_t
 
off£t
)

3443  
NGX_OK
;

3444 
	}
}

3447 
ngx_öt_t


3448 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

3449 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3451 
ngx_hâp_up°ªam_t
 *
u
;

3453 
u
 = 
r
->
up°ªam
;

3455 
u
->
hódîs_ö
.
c⁄ã¡_Àngth
 = 
h
;

3456 
u
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 = 
	`ngx_©oof
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3458  
NGX_OK
;

3459 
	}
}

3462 
ngx_öt_t


3463 
	$ngx_hâp_up°ªam_¥o˚ss_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3464 
ngx_uöt_t
 
off£t
)

3466 #i‡(
NGX_HTTP_CACHE
)

3467 
ngx_hâp_up°ªam_t
 *
u
;

3469 
u
 = 
r
->
up°ªam
;

3471 i‡(!(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
)) {

3472 
u
->
ˇchóbÀ
 = 0;

3476  
NGX_OK
;

3477 
	}
}

3480 
ngx_öt_t


3481 
	$ngx_hâp_up°ªam_¥o˚ss_ˇche_c⁄åﬁ
(
ngx_hâp_ªque°_t
 *
r
,

3482 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3484 
ngx_¨øy_t
 *
∑
;

3485 
ngx_èbÀ_ñt_t
 **
ph
;

3486 
ngx_hâp_up°ªam_t
 *
u
;

3488 
u
 = 
r
->
up°ªam
;

3489 
∑
 = &
u
->
hódîs_ö
.
ˇche_c⁄åﬁ
;

3491 i‡(
∑
->
ñts
 =
NULL
) {

3492 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3494  
NGX_ERROR
;

3498 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3499 i‡(
ph
 =
NULL
) {

3500  
NGX_ERROR
;

3503 *
ph
 = 
h
;

3505 #i‡(
NGX_HTTP_CACHE
)

3507 
u_ch¨
 *
p
, *
œ°
;

3508 
ngx_öt_t
 
n
;

3510 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
) {

3511  
NGX_OK
;

3514 i‡(
r
->
ˇche
 =
NULL
) {

3515  
NGX_OK
;

3518 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3519  
NGX_OK
;

3522 
p
 = 
h
->
vÆue
.
d©a
;

3523 
œ°
 = 
p
 + 
h
->
vÆue
.
Àn
;

3525 i‡(
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-ˇche", 8 - 1Ë!
NULL


3526 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"no-°‹e", 8 - 1Ë!
NULL


3527 || 
	`ngx_°æˇ£°∫
(
p
, 
œ°
, (
u_ch¨
 *Ë"¥iv©e", 7 - 1Ë!
NULL
)

3529 
u
->
ˇchóbÀ
 = 0;

3530  
NGX_OK
;

3533 
p
 = 
	`ngx_°æˇ£°∫
’, 
œ°
, (
u_ch¨
 *) "max-age=", 8 - 1);

3535 i‡(
p
 =
NULL
) {

3536  
NGX_OK
;

3539 
n
 = 0;

3541 
p
 +8;Ö < 
œ°
;Ö++) {

3542 i‡(*
p
 == ',' || *p == ';' || *p == ' ') {

3546 i‡(*
p
 >= '0' && *p <= '9') {

3547 
n
 =Ç * 10 + *
p
 - '0';

3551 
u
->
ˇchóbÀ
 = 0;

3552  
NGX_OK
;

3555 i‡(
n
 == 0) {

3556 
u
->
ˇchóbÀ
 = 0;

3557  
NGX_OK
;

3560 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3564  
NGX_OK
;

3565 
	}
}

3568 
ngx_öt_t


3569 
	$ngx_hâp_up°ªam_¥o˚ss_expúes
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3570 
ngx_uöt_t
 
off£t
)

3572 
ngx_hâp_up°ªam_t
 *
u
;

3574 
u
 = 
r
->
up°ªam
;

3575 
u
->
hódîs_ö
.
expúes
 = 
h
;

3577 #i‡(
NGX_HTTP_CACHE
)

3579 
time_t
 
expúes
;

3581 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_EXPIRES
) {

3582  
NGX_OK
;

3585 i‡(
r
->
ˇche
 =
NULL
) {

3586  
NGX_OK
;

3589 i‡(
r
->
ˇche
->
vÆid_£c
 != 0) {

3590  
NGX_OK
;

3593 
expúes
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3595 i‡(
expúes
 =
NGX_ERROR
 ||Éxpúe†< 
	`ngx_time
()) {

3596 
u
->
ˇchóbÀ
 = 0;

3597  
NGX_OK
;

3600 
r
->
ˇche
->
vÆid_£c
 = 
expúes
;

3604  
NGX_OK
;

3605 
	}
}

3608 
ngx_öt_t


3609 
	$ngx_hâp_up°ªam_¥o˚ss_ac˚l_expúes
(
ngx_hâp_ªque°_t
 *
r
,

3610 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3612 
ngx_hâp_up°ªam_t
 *
u
;

3614 
u
 = 
r
->
up°ªam
;

3615 
u
->
hódîs_ö
.
x_ac˚l_expúes
 = 
h
;

3617 #i‡(
NGX_HTTP_CACHE
)

3619 
u_ch¨
 *
p
;

3620 
size_t
 
Àn
;

3621 
ngx_öt_t
 
n
;

3623 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
) {

3624  
NGX_OK
;

3627 i‡(
r
->
ˇche
 =
NULL
) {

3628  
NGX_OK
;

3631 
Àn
 = 
h
->
vÆue
.len;

3632 
p
 = 
h
->
vÆue
.
d©a
;

3634 i‡(
p
[0] != '@') {

3635 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3637 
n
) {

3639 
u
->
ˇchóbÀ
 = 0;

3642 
NGX_ERROR
:

3643  
NGX_OK
;

3646 
r
->
ˇche
->
vÆid_£c
 = 
	`ngx_time
(Ë+ 
n
;

3647  
NGX_OK
;

3651 
p
++;

3652 
Àn
--;

3654 
n
 = 
	`ngx_©oi
(
p
, 
Àn
);

3656 i‡(
n
 !
NGX_ERROR
) {

3657 
r
->
ˇche
->
vÆid_£c
 = 
n
;

3662  
NGX_OK
;

3663 
	}
}

3666 
ngx_öt_t


3667 
	$ngx_hâp_up°ªam_¥o˚ss_limô_øã
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3668 
ngx_uöt_t
 
off£t
)

3670 
ngx_öt_t
 
n
;

3671 
ngx_hâp_up°ªam_t
 *
u
;

3673 
u
 = 
r
->
up°ªam
;

3674 
u
->
hódîs_ö
.
x_ac˚l_limô_øã
 = 
h
;

3676 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
) {

3677  
NGX_OK
;

3680 
n
 = 
	`ngx_©oi
(
h
->
vÆue
.
d©a
, h->vÆue.
Àn
);

3682 i‡(
n
 !
NGX_ERROR
) {

3683 
r
->
limô_øã
 = (
size_t
Ë
n
;

3686  
NGX_OK
;

3687 
	}
}

3690 
ngx_öt_t


3691 
	$ngx_hâp_up°ªam_¥o˚ss_buf„rög
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3692 
ngx_uöt_t
 
off£t
)

3694 
u_ch¨
 
c0
, 
c1
, 
c2
;

3695 
ngx_hâp_up°ªam_t
 *
u
;

3697 
u
 = 
r
->
up°ªam
;

3699 i‡(
u
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
) {

3700  
NGX_OK
;

3703 i‡(
u
->
c⁄f
->
ch™ge_buf„rög
) {

3705 i‡(
h
->
vÆue
.
Àn
 == 2) {

3706 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3707 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3709 i‡(
c0
 ='n' && 
c1
 == 'o') {

3710 
u
->
buf„rög
 = 0;

3713 } i‡(
h
->
vÆue
.
Àn
 == 3) {

3714 
c0
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[0]);

3715 
c1
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[1]);

3716 
c2
 = 
	`ngx_tﬁowî
(
h
->
vÆue
.
d©a
[2]);

3718 i‡(
c0
 ='y' && 
c1
 ='e' && 
c2
 == 's') {

3719 
u
->
buf„rög
 = 1;

3724  
NGX_OK
;

3725 
	}
}

3728 
ngx_öt_t


3729 
	$ngx_hâp_up°ªam_¥o˚ss_ch¨£t
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3730 
ngx_uöt_t
 
off£t
)

3732 i‡(
r
->
up°ªam
->
c⁄f
->
ign‹e_hódîs
 & 
NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
) {

3733  
NGX_OK
;

3736 
r
->
hódîs_out
.
ovîride_ch¨£t
 = &
h
->
vÆue
;

3738  
NGX_OK
;

3739 
	}
}

3742 
ngx_öt_t


3743 
	$ngx_hâp_up°ªam_¥o˚ss_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3744 
ngx_uöt_t
 
off£t
)

3746 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄
 = 
h
;

3748 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3749 (
u_ch¨
 *) "close", 5 - 1)

3750 !
NULL
)

3752 
r
->
up°ªam
->
hódîs_ö
.
c⁄√˘i⁄_˛o£
 = 1;

3755  
NGX_OK
;

3756 
	}
}

3759 
ngx_öt_t


3760 
	$ngx_hâp_up°ªam_¥o˚ss_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

3761 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3763 
r
->
up°ªam
->
hódîs_ö
.
å™s„r_ícodög
 = 
h
;

3765 i‡(
	`ngx_°æˇ£°∫
(
h
->
vÆue
.
d©a
, h->vÆue.d©®+ h->vÆue.
Àn
,

3766 (
u_ch¨
 *) "chunked", 7 - 1)

3767 !
NULL
)

3769 
r
->
up°ªam
->
hódîs_ö
.
chunked
 = 1;

3772  
NGX_OK
;

3773 
	}
}

3776 
ngx_öt_t


3777 
	$ngx_hâp_up°ªam_c›y_hódî_löe
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3778 
ngx_uöt_t
 
off£t
)

3780 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3782 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3783 i‡(
ho
 =
NULL
) {

3784  
NGX_ERROR
;

3787 *
ho
 = *
h
;

3789 i‡(
off£t
) {

3790 
ph
 = (
ngx_èbÀ_ñt_t
 **Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3791 *
ph
 = 
ho
;

3794  
NGX_OK
;

3795 
	}
}

3798 
ngx_öt_t


3799 
	$ngx_hâp_up°ªam_c›y_mu…i_hódî_löes
(
ngx_hâp_ªque°_t
 *
r
,

3800 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

3802 
ngx_¨øy_t
 *
∑
;

3803 
ngx_èbÀ_ñt_t
 *
ho
, **
ph
;

3805 
∑
 = (
ngx_¨øy_t
 *Ë((*Ë&
r
->
hódîs_out
 + 
off£t
);

3807 i‡(
∑
->
ñts
 =
NULL
) {

3808 i‡(
	`ngx_¨øy_öô
(
∑
, 
r
->
poﬁ
, 2, (
ngx_èbÀ_ñt_t
 *)Ë!
NGX_OK
)

3810  
NGX_ERROR
;

3814 
ph
 = 
	`ngx_¨øy_push
(
∑
);

3815 i‡(
ph
 =
NULL
) {

3816  
NGX_ERROR
;

3819 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3820 i‡(
ho
 =
NULL
) {

3821  
NGX_ERROR
;

3824 *
ho
 = *
h
;

3825 *
ph
 = 
ho
;

3827  
NGX_OK
;

3828 
	}
}

3831 
ngx_öt_t


3832 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3833 
ngx_uöt_t
 
off£t
)

3835 
u_ch¨
 *
p
, *
œ°
;

3837 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
h
->
vÆue
.
Àn
;

3838 
r
->
hódîs_out
.
c⁄ã¡_ty≥
 = 
h
->
vÆue
;

3839 
r
->
hódîs_out
.
c⁄ã¡_ty≥_lowˇ£
 = 
NULL
;

3841 
p
 = 
h
->
vÆue
.
d©a
; *p;Ö++) {

3843 i‡(*
p
 != ';') {

3847 
œ°
 = 
p
;

3849 *++
p
 == ' ') { }

3851 i‡(*
p
 == '\0') {

3852  
NGX_OK
;

3855 i‡(
	`ngx_°∫ˇ£cmp
(
p
, (
u_ch¨
 *) "charset=", 8) != 0) {

3859 
p
 += 8;

3861 
r
->
hódîs_out
.
c⁄ã¡_ty≥_Àn
 = 
œ°
 - 
h
->
vÆue
.
d©a
;

3863 i‡(*
p
 == '"') {

3864 
p
++;

3867 
œ°
 = 
h
->
vÆue
.
d©a
 + h->vÆue.
Àn
;

3869 i‡(*(
œ°
 - 1) == '"') {

3870 
œ°
--;

3873 
r
->
hódîs_out
.
ch¨£t
.
Àn
 = 
œ°
 - 
p
;

3874 
r
->
hódîs_out
.
ch¨£t
.
d©a
 = 
p
;

3876  
NGX_OK
;

3879  
NGX_OK
;

3880 
	}
}

3883 
ngx_öt_t


3884 
	$ngx_hâp_up°ªam_c›y_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3885 
ngx_uöt_t
 
off£t
)

3887 
ngx_èbÀ_ñt_t
 *
ho
;

3889 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3890 i‡(
ho
 =
NULL
) {

3891  
NGX_ERROR
;

3894 *
ho
 = *
h
;

3896 
r
->
hódîs_out
.
œ°_modifõd
 = 
ho
;

3898 #i‡(
NGX_HTTP_CACHE
)

3900 i‡(
r
->
up°ªam
->
ˇchóbÀ
) {

3901 
r
->
hódîs_out
.
œ°_modifõd_time
 = 
	`ngx_hâp_∑r£_time
(
h
->
vÆue
.
d©a
,

3902 
h
->
vÆue
.
Àn
);

3907  
NGX_OK
;

3908 
	}
}

3911 
ngx_öt_t


3912 
	$ngx_hâp_up°ªam_ªwrôe_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3913 
ngx_uöt_t
 
off£t
)

3915 
ngx_öt_t
 
rc
;

3916 
ngx_èbÀ_ñt_t
 *
ho
;

3918 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3919 i‡(
ho
 =
NULL
) {

3920  
NGX_ERROR
;

3923 *
ho
 = *
h
;

3925 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3926 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 0);

3928 i‡(
rc
 =
NGX_DECLINED
) {

3929  
NGX_OK
;

3932 i‡(
rc
 =
NGX_OK
) {

3933 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3935 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3936 "ªwrôã¿loˇti⁄: \"%V\"", &
ho
->
vÆue
);

3939  
rc
;

3942 i‡(
ho
->
vÆue
.
d©a
[0] != '/') {

3943 
r
->
hódîs_out
.
loˇti⁄
 = 
ho
;

3951  
NGX_OK
;

3952 
	}
}

3955 
ngx_öt_t


3956 
	$ngx_hâp_up°ªam_ªwrôe_ª‰esh
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

3957 
ngx_uöt_t
 
off£t
)

3959 
u_ch¨
 *
p
;

3960 
ngx_öt_t
 
rc
;

3961 
ngx_èbÀ_ñt_t
 *
ho
;

3963 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

3964 i‡(
ho
 =
NULL
) {

3965  
NGX_ERROR
;

3968 *
ho
 = *
h
;

3970 i‡(
r
->
up°ªam
->
ªwrôe_ªdúe˘
) {

3972 
p
 = 
	`ngx_°rˇ£°∫
(
ho
->
vÆue
.
d©a
, "url=", 4 - 1);

3974 i‡(
p
) {

3975 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_ªdúe˘
‘, 
ho
, 
p
 + 4 - ho->
vÆue
.
d©a
);

3978  
NGX_OK
;

3981 i‡(
rc
 =
NGX_DECLINED
) {

3982  
NGX_OK
;

3985 i‡(
rc
 =
NGX_OK
) {

3986 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3988 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

3989 "ªwrôã¿ª‰esh: \"%V\"", &
ho
->
vÆue
);

3992  
rc
;

3995 
r
->
hódîs_out
.
ª‰esh
 = 
ho
;

3997  
NGX_OK
;

3998 
	}
}

4001 
ngx_öt_t


4002 
	$ngx_hâp_up°ªam_ªwrôe_£t_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_èbÀ_ñt_t
 *
h
,

4003 
ngx_uöt_t
 
off£t
)

4005 
ngx_öt_t
 
rc
;

4006 
ngx_èbÀ_ñt_t
 *
ho
;

4008 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4009 i‡(
ho
 =
NULL
) {

4010  
NGX_ERROR
;

4013 *
ho
 = *
h
;

4015 i‡(
r
->
up°ªam
->
ªwrôe_cookõ
) {

4016 
rc
 = 
r
->
up°ªam
->
	`ªwrôe_cookõ
‘, 
ho
);

4018 i‡(
rc
 =
NGX_DECLINED
) {

4019  
NGX_OK
;

4022 #i‡(
NGX_DEBUG
)

4023 i‡(
rc
 =
NGX_OK
) {

4024 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4025 "ªwrôã¿cookõ: \"%V\"", &
ho
->
vÆue
);

4029  
rc
;

4032  
NGX_OK
;

4033 
	}
}

4036 
ngx_öt_t


4037 
	$ngx_hâp_up°ªam_c›y_Ælow_ønges
(
ngx_hâp_ªque°_t
 *
r
,

4038 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4040 
ngx_èbÀ_ñt_t
 *
ho
;

4042 #i‡(
NGX_HTTP_CACHE
)

4044 i‡(
r
->
ˇched
) {

4045 
r
->
Ælow_ønges
 = 1;

4046  
NGX_OK
;

4052 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4053 i‡(
ho
 =
NULL
) {

4054  
NGX_ERROR
;

4057 *
ho
 = *
h
;

4059 
r
->
hódîs_out
.
ac˚±_ønges
 = 
ho
;

4061  
NGX_OK
;

4062 
	}
}

4065 #i‡(
NGX_HTTP_GZIP
)

4067 
ngx_öt_t


4068 
	$ngx_hâp_up°ªam_c›y_c⁄ã¡_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

4069 
ngx_èbÀ_ñt_t
 *
h
, 
ngx_uöt_t
 
off£t
)

4071 
ngx_èbÀ_ñt_t
 *
ho
;

4073 
ho
 = 
	`ngx_li°_push
(&
r
->
hódîs_out
.
hódîs
);

4074 i‡(
ho
 =
NULL
) {

4075  
NGX_ERROR
;

4078 *
ho
 = *
h
;

4080 
r
->
hódîs_out
.
c⁄ã¡_ícodög
 = 
ho
;

4082  
NGX_OK
;

4083 
	}
}

4088 
ngx_öt_t


4089 
	$ngx_hâp_up°ªam_add_v¨übÀs
(
ngx_c⁄f_t
 *
cf
)

4091 
ngx_hâp_v¨übÀ_t
 *
v¨
, *
v
;

4093 
v
 = 
ngx_hâp_up°ªam_v¨s
; v->
«me
.
Àn
; v++) {

4094 
v¨
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
v
->
«me
, v->
Êags
);

4095 i‡(
v¨
 =
NULL
) {

4096  
NGX_ERROR
;

4099 
v¨
->
gë_h™dÀr
 = 
v
->get_handler;

4100 
v¨
->
d©a
 = 
v
->data;

4103  
NGX_OK
;

4104 
	}
}

4107 
ngx_öt_t


4108 
	$ngx_hâp_up°ªam_addr_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4111 
u_ch¨
 *
p
;

4112 
size_t
 
Àn
;

4113 
ngx_uöt_t
 
i
;

4114 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4116 
v
->
vÆid
 = 1;

4117 
v
->
no_ˇchóbÀ
 = 0;

4118 
v
->
nŸ_found
 = 0;

4120 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4121 
v
->
nŸ_found
 = 1;

4122  
NGX_OK
;

4125 
Àn
 = 0;

4126 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4128 
i
 = 0; i < 
r
->
up°ªam_°©es
->
√…s
; i++) {

4129 i‡(
°©e
[
i
].
≥î
) {

4130 
Àn
 +
°©e
[
i
].
≥î
->len + 2;

4133 
Àn
 += 3;

4137 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4138 i‡(
p
 =
NULL
) {

4139  
NGX_ERROR
;

4142 
v
->
d©a
 = 
p
;

4144 
i
 = 0;

4147 i‡(
°©e
[
i
].
≥î
) {

4148 
p
 = 
	`ngx_˝ymem
’, 
°©e
[
i
].
≥î
->
d©a
, sèã[i].≥î->
Àn
);

4151 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4155 i‡(
°©e
[
i
].
≥î
) {

4156 *
p
++ = ',';

4157 *
p
++ = ' ';

4160 *
p
++ = ' ';

4161 *
p
++ = ':';

4162 *
p
++ = ' ';

4164 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4172 
v
->
Àn
 = 
p
 - v->
d©a
;

4174  
NGX_OK
;

4175 
	}
}

4178 
ngx_öt_t


4179 
	$ngx_hâp_up°ªam_°©us_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4180 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4182 
u_ch¨
 *
p
;

4183 
size_t
 
Àn
;

4184 
ngx_uöt_t
 
i
;

4185 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4187 
v
->
vÆid
 = 1;

4188 
v
->
no_ˇchóbÀ
 = 0;

4189 
v
->
nŸ_found
 = 0;

4191 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4192 
v
->
nŸ_found
 = 1;

4193  
NGX_OK
;

4196 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (3 + 2);

4198 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4199 i‡(
p
 =
NULL
) {

4200  
NGX_ERROR
;

4203 
v
->
d©a
 = 
p
;

4205 
i
 = 0;

4206 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4209 i‡(
°©e
[
i
].
°©us
) {

4210 
p
 = 
	`ngx_•rötf
’, "%ui", 
°©e
[
i
].
°©us
);

4213 *
p
++ = '-';

4216 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4220 i‡(
°©e
[
i
].
≥î
) {

4221 *
p
++ = ',';

4222 *
p
++ = ' ';

4225 *
p
++ = ' ';

4226 *
p
++ = ':';

4227 *
p
++ = ' ';

4229 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4237 
v
->
Àn
 = 
p
 - v->
d©a
;

4239  
NGX_OK
;

4240 
	}
}

4243 
ngx_öt_t


4244 
	$ngx_hâp_up°ªam_ª•⁄£_time_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4245 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4247 
u_ch¨
 *
p
;

4248 
size_t
 
Àn
;

4249 
ngx_uöt_t
 
i
;

4250 
ngx_m£c_öt_t
 
ms
;

4251 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4253 
v
->
vÆid
 = 1;

4254 
v
->
no_ˇchóbÀ
 = 0;

4255 
v
->
nŸ_found
 = 0;

4257 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4258 
v
->
nŸ_found
 = 1;

4259  
NGX_OK
;

4262 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_TIME_T_LEN
 + 4 + 2);

4264 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4265 i‡(
p
 =
NULL
) {

4266  
NGX_ERROR
;

4269 
v
->
d©a
 = 
p
;

4271 
i
 = 0;

4272 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4275 i‡(
°©e
[
i
].
°©us
) {

4276 
ms
 = (
ngx_m£c_öt_t
)

4277 (
°©e
[
i
].
ª•⁄£_£c
 * 1000 + sèã[i].
ª•⁄£_m£c
);

4278 
ms
 = 
	`ngx_max
(ms, 0);

4279 
p
 = 
	`ngx_•rötf
’, "%d.%03d", 
ms
 / 1000, ms % 1000);

4282 *
p
++ = '-';

4285 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4289 i‡(
°©e
[
i
].
≥î
) {

4290 *
p
++ = ',';

4291 *
p
++ = ' ';

4294 *
p
++ = ' ';

4295 *
p
++ = ':';

4296 *
p
++ = ' ';

4298 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4306 
v
->
Àn
 = 
p
 - v->
d©a
;

4308  
NGX_OK
;

4309 
	}
}

4312 
ngx_öt_t


4313 
	$ngx_hâp_up°ªam_ª•⁄£_Àngth_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4314 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4316 
u_ch¨
 *
p
;

4317 
size_t
 
Àn
;

4318 
ngx_uöt_t
 
i
;

4319 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

4321 
v
->
vÆid
 = 1;

4322 
v
->
no_ˇchóbÀ
 = 0;

4323 
v
->
nŸ_found
 = 0;

4325 i‡(
r
->
up°ªam_°©es
 =
NULL
 ||Ñ->up°ªam_°©es->
√…s
 == 0) {

4326 
v
->
nŸ_found
 = 1;

4327  
NGX_OK
;

4330 
Àn
 = 
r
->
up°ªam_°©es
->
√…s
 * (
NGX_OFF_T_LEN
 + 2);

4332 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

4333 i‡(
p
 =
NULL
) {

4334  
NGX_ERROR
;

4337 
v
->
d©a
 = 
p
;

4339 
i
 = 0;

4340 
°©e
 = 
r
->
up°ªam_°©es
->
ñts
;

4343 
p
 = 
	`ngx_•rötf
’, "%O", 
°©e
[
i
].
ª•⁄£_Àngth
);

4345 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4349 i‡(
°©e
[
i
].
≥î
) {

4350 *
p
++ = ',';

4351 *
p
++ = ' ';

4354 *
p
++ = ' ';

4355 *
p
++ = ':';

4356 *
p
++ = ' ';

4358 i‡(++
i
 =
r
->
up°ªam_°©es
->
√…s
) {

4366 
v
->
Àn
 = 
p
 - v->
d©a
;

4368  
NGX_OK
;

4369 
	}
}

4372 
ngx_öt_t


4373 
	$ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

4374 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4376 i‡(
r
->
up°ªam
 =
NULL
) {

4377 
v
->
nŸ_found
 = 1;

4378  
NGX_OK
;

4381  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

4382 &
r
->
up°ªam
->
hódîs_ö
.
hódîs
.
∑π
,

4384 
	}
}

4387 #i‡(
NGX_HTTP_CACHE
)

4389 
ngx_öt_t


4390 
	$ngx_hâp_up°ªam_ˇche_°©us
(
ngx_hâp_ªque°_t
 *
r
,

4391 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

4393 
ngx_uöt_t
 
n
;

4395 i‡(
r
->
up°ªam
 =
NULL
 ||Ñ->up°ªam->
ˇche_°©us
 == 0) {

4396 
v
->
nŸ_found
 = 1;

4397  
NGX_OK
;

4400 
n
 = 
r
->
up°ªam
->
ˇche_°©us
 - 1;

4402 
v
->
vÆid
 = 1;

4403 
v
->
no_ˇchóbÀ
 = 0;

4404 
v
->
nŸ_found
 = 0;

4405 
v
->
Àn
 = 
ngx_hâp_ˇche_°©us
[
n
].len;

4406 
v
->
d©a
 = 
ngx_hâp_ˇche_°©us
[
n
].data;

4408  
NGX_OK
;

4409 
	}
}

4415 
	$ngx_hâp_up°ªam
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
dummy
)

4417 *
rv
;

4418 *
mc⁄f
;

4419 
ngx_°r_t
 *
vÆue
;

4420 
ngx_uæ_t
 
u
;

4421 
ngx_uöt_t
 
m
;

4422 
ngx_c⁄f_t
 
pcf
;

4423 
ngx_hâp_moduÀ_t
 *
moduÀ
;

4424 
ngx_hâp_c⁄f_˘x_t
 *
˘x
, *
hâp_˘x
;

4425 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
;

4427 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4429 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4430 
u
.
ho°
 = 
vÆue
[1];

4431 
u
.
no_ªsﬁve
 = 1;

4432 
u
.
no_p‹t
 = 1;

4434 
uscf
 = 
	`ngx_hâp_up°ªam_add
(
cf
, &
u
, 
NGX_HTTP_UPSTREAM_CREATE


4435 |
NGX_HTTP_UPSTREAM_WEIGHT


4436 |
NGX_HTTP_UPSTREAM_MAX_FAILS


4437 |
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT


4438 |
NGX_HTTP_UPSTREAM_DOWN


4439 |
NGX_HTTP_UPSTREAM_BACKUP
);

4440 i‡(
uscf
 =
NULL
) {

4441  
NGX_CONF_ERROR
;

4445 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_c⁄f_˘x_t
));

4446 i‡(
˘x
 =
NULL
) {

4447  
NGX_CONF_ERROR
;

4450 
hâp_˘x
 = 
cf
->
˘x
;

4451 
˘x
->
maö_c⁄f
 = 
hâp_˘x
->main_conf;

4455 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4456 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

4457  
NGX_CONF_ERROR
;

4460 
˘x
->
§v_c⁄f
[
ngx_hâp_up°ªam_moduÀ
.
˘x_ödex
] = 
uscf
;

4462 
uscf
->
§v_c⁄f
 = 
˘x
->srv_conf;

4467 
˘x
->
loc_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_hâp_max_moduÀ
);

4468 i‡(
˘x
->
loc_c⁄f
 =
NULL
) {

4469  
NGX_CONF_ERROR
;

4472 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

4473 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_HTTP_MODULE
) {

4477 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

4479 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

4480 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

4481 i‡(
mc⁄f
 =
NULL
) {

4482  
NGX_CONF_ERROR
;

4485 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4488 i‡(
moduÀ
->
¸óã_loc_c⁄f
) {

4489 
mc⁄f
 = 
moduÀ
->
	`¸óã_loc_c⁄f
(
cf
);

4490 i‡(
mc⁄f
 =
NULL
) {

4491  
NGX_CONF_ERROR
;

4494 
˘x
->
loc_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

4501 
pcf
 = *
cf
;

4502 
cf
->
˘x
 = ctx;

4503 
cf
->
cmd_ty≥
 = 
NGX_HTTP_UPS_CONF
;

4505 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

4507 *
cf
 = 
pcf
;

4509 i‡(
rv
 !
NGX_CONF_OK
) {

4510  
rv
;

4513 i‡(
uscf
->
£rvîs
 =
NULL
) {

4514 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4516  
NGX_CONF_ERROR
;

4519  
rv
;

4520 
	}
}

4524 
	$ngx_hâp_up°ªam_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

4526 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
 = 
c⁄f
;

4528 
time_t
 
Áû_timeout
;

4529 
ngx_°r_t
 *
vÆue
, 
s
;

4530 
ngx_uæ_t
 
u
;

4531 
ngx_öt_t
 
weight
, 
max_Áûs
;

4532 
ngx_uöt_t
 
i
;

4533 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4535 i‡(
uscf
->
£rvîs
 =
NULL
) {

4536 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4,

4537 (
ngx_hâp_up°ªam_£rvî_t
));

4538 i‡(
uscf
->
£rvîs
 =
NULL
) {

4539  
NGX_CONF_ERROR
;

4543 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4544 i‡(
us
 =
NULL
) {

4545  
NGX_CONF_ERROR
;

4548 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4550 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4552 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

4554 
u
.
uæ
 = 
vÆue
[1];

4555 
u
.
deÁu…_p‹t
 = 80;

4557 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

4558 i‡(
u
.
îr
) {

4559 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4560 "%†ö up°ªam \"%V\"", 
u
.
îr
, &u.
uæ
);

4563  
NGX_CONF_ERROR
;

4566 
weight
 = 1;

4567 
max_Áûs
 = 1;

4568 
Áû_timeout
 = 10;

4570 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

4572 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "weight=", 7) == 0) {

4574 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_WEIGHT
)) {

4575 
övÆid
;

4578 
weight
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[7], vÆue[i].
Àn
 - 7);

4580 i‡(
weight
 =
NGX_ERROR
 || weight == 0) {

4581 
övÆid
;

4587 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "max_fails=", 10) == 0) {

4589 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_MAX_FAILS
)) {

4590 
övÆid
;

4593 
max_Áûs
 = 
	`ngx_©oi
(&
vÆue
[
i
].
d©a
[10], vÆue[i].
Àn
 - 10);

4595 i‡(
max_Áûs
 =
NGX_ERROR
) {

4596 
övÆid
;

4602 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "fail_timeout=", 13) == 0) {

4604 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
)) {

4605 
övÆid
;

4608 
s
.
Àn
 = 
vÆue
[
i
].len - 13;

4609 
s
.
d©a
 = &
vÆue
[
i
].data[13];

4611 
Áû_timeout
 = 
	`ngx_∑r£_time
(&
s
, 1);

4613 i‡(
Áû_timeout
 =(
time_t
Ë
NGX_ERROR
) {

4614 
övÆid
;

4620 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "backup", 6) == 0) {

4622 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_BACKUP
)) {

4623 
övÆid
;

4626 
us
->
backup
 = 1;

4631 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "down", 4) == 0) {

4633 i‡(!(
uscf
->
Êags
 & 
NGX_HTTP_UPSTREAM_DOWN
)) {

4634 
övÆid
;

4637 
us
->
down
 = 1;

4642 
övÆid
;

4645 
us
->
addrs
 = 
u
.addrs;

4646 
us
->
«ddrs
 = 
u
.naddrs;

4647 
us
->
weight
 = weight;

4648 
us
->
max_Áûs
 = max_fails;

4649 
us
->
Áû_timeout
 = fail_timeout;

4651  
NGX_CONF_OK
;

4653 
övÆid
:

4655 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4656 "övÆidÖ¨amëî \"%V\"", &
vÆue
[
i
]);

4658  
NGX_CONF_ERROR
;

4659 
	}
}

4662 
ngx_hâp_up°ªam_§v_c⁄f_t
 *

4663 
	$ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
, 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
)

4665 
ngx_uöt_t
 
i
;

4666 
ngx_hâp_up°ªam_£rvî_t
 *
us
;

4667 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
uscf
, **
uscÂ
;

4668 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

4670 i‡(!(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)) {

4672 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, 
u
Ë!
NGX_OK
) {

4673 i‡(
u
->
îr
) {

4674 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4675 "%†ö up°ªam \"%V\"", 
u
->
îr
, &u->
uæ
);

4678  
NULL
;

4682 
umcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_up°ªam_moduÀ
);

4684 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

4686 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

4688 i‡(
uscÂ
[
i
]->
ho°
.
Àn
 !
u
->host.len

4689 || 
	`ngx_°∫ˇ£cmp
(
uscÂ
[
i
]->
ho°
.
d©a
, 
u
->ho°.d©a, u->ho°.
Àn
)

4695 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
)

4696 && (
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
))

4698 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4699 "du∂iˇã up°ªam \"%V\"", &
u
->
ho°
);

4700  
NULL
;

4703 i‡((
uscÂ
[
i
]->
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
u
->
no_p‹t
) {

4704 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

4706 &
u
->
ho°
, u->
p‹t
);

4707  
NULL
;

4710 i‡((
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
Ë&& !
uscÂ
[
i
]->
no_p‹t
) {

4711 
	`ngx_log_îr‹
(
NGX_LOG_WARN
, 
cf
->
log
, 0,

4713 &
u
->
ho°
, 
uscÂ
[
i
]->
p‹t
,

4714 
uscÂ
[
i
]->
fûe_«me
, uscÂ[i]->
löe
);

4715  
NULL
;

4718 i‡(
uscÂ
[
i
]->
p‹t
 && 
u
->port

4719 && 
uscÂ
[
i
]->
p‹t
 !
u
->port)

4724 i‡(
uscÂ
[
i
]->
deÁu…_p‹t
 && 
u
->default_port

4725 && 
uscÂ
[
i
]->
deÁu…_p‹t
 !
u
->default_port)

4730 i‡(
Êags
 & 
NGX_HTTP_UPSTREAM_CREATE
) {

4731 
uscÂ
[
i
]->
Êags
 = flags;

4734  
uscÂ
[
i
];

4737 
uscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_§v_c⁄f_t
));

4738 i‡(
uscf
 =
NULL
) {

4739  
NULL
;

4742 
uscf
->
Êags
 = flags;

4743 
uscf
->
ho°
 = 
u
->host;

4744 
uscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

4745 
uscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

4746 
uscf
->
p‹t
 = 
u
->port;

4747 
uscf
->
deÁu…_p‹t
 = 
u
->default_port;

4748 
uscf
->
no_p‹t
 = 
u
->no_port;

4750 i‡(
u
->
«ddrs
 == 1) {

4751 
uscf
->
£rvîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1,

4752 (
ngx_hâp_up°ªam_£rvî_t
));

4753 i‡(
uscf
->
£rvîs
 =
NULL
) {

4754  
NULL
;

4757 
us
 = 
	`ngx_¨øy_push
(
uscf
->
£rvîs
);

4758 i‡(
us
 =
NULL
) {

4759  
NULL
;

4762 
	`ngx_memzîo
(
us
, (
ngx_hâp_up°ªam_£rvî_t
));

4764 
us
->
addrs
 = 
u
->addrs;

4765 
us
->
«ddrs
 = 1;

4768 
uscÂ
 = 
	`ngx_¨øy_push
(&
umcf
->
up°ªams
);

4769 i‡(
uscÂ
 =
NULL
) {

4770  
NULL
;

4773 *
uscÂ
 = 
uscf
;

4775  
uscf
;

4776 
	}
}

4780 
	$ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4781 *
c⁄f
)

4783 *
p
 = 
c⁄f
;

4785 
ngx_öt_t
 
rc
;

4786 
ngx_°r_t
 *
vÆue
;

4787 
ngx_hâp_com∂ex_vÆue_t
 
cv
;

4788 
ngx_hâp_up°ªam_loˇl_t
 **
∂oˇl
, *
loˇl
;

4789 
ngx_hâp_compûe_com∂ex_vÆue_t
 
ccv
;

4791 
∂oˇl
 = (
ngx_hâp_up°ªam_loˇl_t
 **Ë(
p
 + 
cmd
->
off£t
);

4793 i‡(*
∂oˇl
 !
NGX_CONF_UNSET_PTR
) {

4797 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4799 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

4800 *
∂oˇl
 = 
NULL
;

4801  
NGX_CONF_OK
;

4804 
	`ngx_memzîo
(&
ccv
, (
ngx_hâp_compûe_com∂ex_vÆue_t
));

4806 
ccv
.
cf
 = cf;

4807 
ccv
.
vÆue
 = &value[1];

4808 
ccv
.
com∂ex_vÆue
 = &
cv
;

4810 i‡(
	`ngx_hâp_compûe_com∂ex_vÆue
(&
ccv
Ë!
NGX_OK
) {

4811  
NGX_CONF_ERROR
;

4814 
loˇl
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_loˇl_t
));

4815 i‡(
loˇl
 =
NULL
) {

4816  
NGX_CONF_ERROR
;

4819 *
∂oˇl
 = 
loˇl
;

4821 i‡(
cv
.
Àngths
) {

4822 
loˇl
->
vÆue
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_com∂ex_vÆue_t
));

4823 i‡(
loˇl
->
vÆue
 =
NULL
) {

4824  
NGX_CONF_ERROR
;

4827 *
loˇl
->
vÆue
 = 
cv
;

4829  
NGX_CONF_OK
;

4832 
loˇl
->
addr
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_addr_t
));

4833 i‡(
loˇl
->
addr
 =
NULL
) {

4834  
NGX_CONF_ERROR
;

4837 
rc
 = 
	`ngx_∑r£_addr
(
cf
->
poﬁ
, 
loˇl
->
addr
, 
vÆue
[1].
d©a
, vÆue[1].
Àn
);

4839 
rc
) {

4840 
NGX_OK
:

4841 
loˇl
->
addr
->
«me
 = 
vÆue
[1];

4842  
NGX_CONF_OK
;

4844 
NGX_DECLINED
:

4845 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4846 "övÆidáddªs†\"%V\"", &
vÆue
[1]);

4850  
NGX_CONF_ERROR
;

4852 
	}
}

4855 
ngx_addr_t
 *

4856 
	$ngx_hâp_up°ªam_gë_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

4857 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
)

4859 
ngx_öt_t
 
rc
;

4860 
ngx_°r_t
 
vÆ
;

4861 
ngx_addr_t
 *
addr
;

4863 i‡(
loˇl
 =
NULL
) {

4864  
NULL
;

4867 i‡(
loˇl
->
vÆue
 =
NULL
) {

4868  
loˇl
->
addr
;

4871 i‡(
	`ngx_hâp_com∂ex_vÆue
(
r
, 
loˇl
->
vÆue
, &
vÆ
Ë!
NGX_OK
) {

4872  
NULL
;

4875 i‡(
vÆ
.
Àn
 == 0) {

4876  
NULL
;

4879 
addr
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_addr_t
));

4880 i‡(
addr
 =
NULL
) {

4881  
NULL
;

4884 
rc
 = 
	`ngx_∑r£_addr
(
r
->
poﬁ
, 
addr
, 
vÆ
.
d©a
, vÆ.
Àn
);

4886 
rc
) {

4887 
NGX_OK
:

4888 
addr
->
«me
 = 
vÆ
;

4889  
addr
;

4891 
NGX_DECLINED
:

4892 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

4893 "övÆidÜoˇ»addªs†\"%V\"", &
vÆ
);

4897  
NULL
;

4899 
	}
}

4903 
	$ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

4904 *
c⁄f
)

4906 *
p
 = 
c⁄f
;

4908 
ngx_°r_t
 *
vÆue
;

4909 
ngx_¨øy_t
 **
a
;

4910 
ngx_hâp_up°ªam_∑øm_t
 *
∑øm
;

4912 
a
 = (
ngx_¨øy_t
 **Ë(
p
 + 
cmd
->
off£t
);

4914 i‡(*
a
 =
NULL
) {

4915 *
a
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 4, (
ngx_hâp_up°ªam_∑øm_t
));

4916 i‡(*
a
 =
NULL
) {

4917  
NGX_CONF_ERROR
;

4921 
∑øm
 = 
	`ngx_¨øy_push
(*
a
);

4922 i‡(
∑øm
 =
NULL
) {

4923  
NGX_CONF_ERROR
;

4926 
vÆue
 = 
cf
->
¨gs
->
ñts
;

4928 
∑øm
->
key
 = 
vÆue
[1];

4929 
∑øm
->
vÆue
 = value[2];

4930 
∑øm
->
skù_em±y
 = 0;

4932 i‡(
cf
->
¨gs
->
√…s
 == 4) {

4933 i‡(
	`ngx_°rcmp
(
vÆue
[3].
d©a
, "if_not_empty") != 0) {

4934 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

4935 "övÆidÖ¨amëî \"%V\"", &
vÆue
[3]);

4936  
NGX_CONF_ERROR
;

4939 
∑øm
->
skù_em±y
 = 1;

4942  
NGX_CONF_OK
;

4943 
	}
}

4946 
ngx_öt_t


4947 
	$ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

4948 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

4949 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
)

4951 
ngx_°r_t
 *
h
;

4952 
ngx_uöt_t
 
i
, 
j
;

4953 
ngx_¨øy_t
 
hide_hódîs
;

4954 
ngx_hash_key_t
 *
hk
;

4956 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR


4957 && 
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
)

4959 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4960 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4962 
c⁄f
->
hide_hódîs_hash
 = 
¥ev
->hide_headers_hash;

4964 i‡(
c⁄f
->
hide_hódîs_hash
.
buckës


4965 #i‡(
NGX_HTTP_CACHE
)

4966 && ((
c⁄f
->
ˇche
 =
NULL
Ë=(
¥ev
->cache == NULL))

4970  
NGX_OK
;

4974 i‡(
c⁄f
->
hide_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4975 
c⁄f
->
hide_hódîs
 = 
¥ev
->hide_headers;

4978 i‡(
c⁄f
->
∑ss_hódîs
 =
NGX_CONF_UNSET_PTR
) {

4979 
c⁄f
->
∑ss_hódîs
 = 
¥ev
->pass_headers;

4983 i‡(
	`ngx_¨øy_öô
(&
hide_hódîs
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_hash_key_t
))

4984 !
NGX_OK
)

4986  
NGX_ERROR
;

4989 
h
 = 
deÁu…_hide_hódîs
; h->
Àn
; h++) {

4990 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

4991 i‡(
hk
 =
NULL
) {

4992  
NGX_ERROR
;

4995 
hk
->
key
 = *
h
;

4996 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
->
d©a
, h->
Àn
);

4997 
hk
->
vÆue
 = (*) 1;

5000 i‡(
c⁄f
->
hide_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5002 
h
 = 
c⁄f
->
hide_hódîs
->
ñts
;

5004 
i
 = 0; i < 
c⁄f
->
hide_hódîs
->
√…s
; i++) {

5006 
hk
 = 
hide_hódîs
.
ñts
;

5008 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5009 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5010 
exi°
;

5014 
hk
 = 
	`ngx_¨øy_push
(&
hide_hódîs
);

5015 i‡(
hk
 =
NULL
) {

5016  
NGX_ERROR
;

5019 
hk
->
key
 = 
h
[
i
];

5020 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
h
[
i
].
d©a
, h[i].
Àn
);

5021 
hk
->
vÆue
 = (*) 1;

5023 
exi°
:

5029 i‡(
c⁄f
->
∑ss_hódîs
 !
NGX_CONF_UNSET_PTR
) {

5031 
h
 = 
c⁄f
->
∑ss_hódîs
->
ñts
;

5032 
hk
 = 
hide_hódîs
.
ñts
;

5034 
i
 = 0; i < 
c⁄f
->
∑ss_hódîs
->
√…s
; i++) {

5035 
j
 = 0; j < 
hide_hódîs
.
√…s
; j++) {

5037 i‡(
hk
[
j
].
key
.
d©a
 =
NULL
) {

5041 i‡(
	`ngx_°rˇ£cmp
(
h
[
i
].
d©a
, 
hk
[
j
].
key
.data) == 0) {

5042 
hk
[
j
].
key
.
d©a
 = 
NULL
;

5049 
hash
->hash = &
c⁄f
->
hide_hódîs_hash
;

5050 
hash
->
key
 = 
ngx_hash_key_lc
;

5051 
hash
->
poﬁ
 = 
cf
->pool;

5052 
hash
->
ãmp_poﬁ
 = 
NULL
;

5054  
	`ngx_hash_öô
(
hash
, 
hide_hódîs
.
ñts
, hide_hódîs.
√…s
);

5055 
	}
}

5059 
	$ngx_hâp_up°ªam_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

5061 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
;

5063 
umcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_maö_c⁄f_t
));

5064 i‡(
umcf
 =
NULL
) {

5065  
NULL
;

5068 i‡(
	`ngx_¨øy_öô
(&
umcf
->
up°ªams
, 
cf
->
poﬁ
, 4,

5069 (
ngx_hâp_up°ªam_§v_c⁄f_t
 *))

5070 !
NGX_OK
)

5072  
NULL
;

5075  
umcf
;

5076 
	}
}

5080 
	$ngx_hâp_up°ªam_öô_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
c⁄f
)

5082 
ngx_hâp_up°ªam_maö_c⁄f_t
 *
umcf
 = 
c⁄f
;

5084 
ngx_uöt_t
 
i
;

5085 
ngx_¨øy_t
 
hódîs_ö
;

5086 
ngx_hash_key_t
 *
hk
;

5087 
ngx_hash_öô_t
 
hash
;

5088 
ngx_hâp_up°ªam_öô_±
 
öô
;

5089 
ngx_hâp_up°ªam_hódî_t
 *
hódî
;

5090 
ngx_hâp_up°ªam_§v_c⁄f_t
 **
uscÂ
;

5092 
uscÂ
 = 
umcf
->
up°ªams
.
ñts
;

5094 
i
 = 0; i < 
umcf
->
up°ªams
.
√…s
; i++) {

5096 
öô
 = 
uscÂ
[
i
]->
≥î
.
öô_up°ªam
 ? uscfp[i]->peer.init_upstream:

5097 
ngx_hâp_up°ªam_öô_round_robö
;

5099 i‡(
	`öô
(
cf
, 
uscÂ
[
i
]Ë!
NGX_OK
) {

5100  
NGX_CONF_ERROR
;

5107 i‡(
	`ngx_¨øy_öô
(&
hódîs_ö
, 
cf
->
ãmp_poﬁ
, 32, (
ngx_hash_key_t
))

5108 !
NGX_OK
)

5110  
NGX_CONF_ERROR
;

5113 
hódî
 = 
ngx_hâp_up°ªam_hódîs_ö
; hódî->
«me
.
Àn
; header++) {

5114 
hk
 = 
	`ngx_¨øy_push
(&
hódîs_ö
);

5115 i‡(
hk
 =
NULL
) {

5116  
NGX_CONF_ERROR
;

5119 
hk
->
key
 = 
hódî
->
«me
;

5120 
hk
->
key_hash
 = 
	`ngx_hash_key_lc
(
hódî
->
«me
.
d©a
, hódî->«me.
Àn
);

5121 
hk
->
vÆue
 = 
hódî
;

5124 
hash
.hash = &
umcf
->
hódîs_ö_hash
;

5125 
hash
.
key
 = 
ngx_hash_key_lc
;

5126 
hash
.
max_size
 = 512;

5127 
hash
.
buckë_size
 = 
	`ngx_Æign
(64, 
ngx_ˇchñöe_size
);

5128 
hash
.
«me
 = "upstream_headers_in_hash";

5129 
hash
.
poﬁ
 = 
cf
->pool;

5130 
hash
.
ãmp_poﬁ
 = 
NULL
;

5132 i‡(
	`ngx_hash_öô
(&
hash
, 
hódîs_ö
.
ñts
, hódîs_ö.
√…s
Ë!
NGX_OK
) {

5133  
NGX_CONF_ERROR
;

5136  
NGX_CONF_OK
;

5137 
	}
}

	@src/http/ngx_http_upstream.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

16 
	~<ngx_evít_pùe.h
>

17 
	~<ngx_hâp.h
>

20 
	#NGX_HTTP_UPSTREAM_FT_ERROR
 0x00000002

	)

21 
	#NGX_HTTP_UPSTREAM_FT_TIMEOUT
 0x00000004

	)

22 
	#NGX_HTTP_UPSTREAM_FT_INVALID_HEADER
 0x00000008

	)

23 
	#NGX_HTTP_UPSTREAM_FT_HTTP_500
 0x00000010

	)

24 
	#NGX_HTTP_UPSTREAM_FT_HTTP_502
 0x00000020

	)

25 
	#NGX_HTTP_UPSTREAM_FT_HTTP_503
 0x00000040

	)

26 
	#NGX_HTTP_UPSTREAM_FT_HTTP_504
 0x00000080

	)

27 
	#NGX_HTTP_UPSTREAM_FT_HTTP_404
 0x00000100

	)

28 
	#NGX_HTTP_UPSTREAM_FT_UPDATING
 0x00000200

	)

29 
	#NGX_HTTP_UPSTREAM_FT_BUSY_LOCK
 0x00000400

	)

30 
	#NGX_HTTP_UPSTREAM_FT_MAX_WAITING
 0x00000800

	)

31 
	#NGX_HTTP_UPSTREAM_FT_NOLIVE
 0x40000000

	)

32 
	#NGX_HTTP_UPSTREAM_FT_OFF
 0x80000000

	)

34 
	#NGX_HTTP_UPSTREAM_FT_STATUS
 (
NGX_HTTP_UPSTREAM_FT_HTTP_500
 \

35 |
NGX_HTTP_UPSTREAM_FT_HTTP_502
 \

36 |
NGX_HTTP_UPSTREAM_FT_HTTP_503
 \

37 |
NGX_HTTP_UPSTREAM_FT_HTTP_504
 \

38 |
NGX_HTTP_UPSTREAM_FT_HTTP_404
)

	)

40 
	#NGX_HTTP_UPSTREAM_INVALID_HEADER
 40

	)

43 
	#NGX_HTTP_UPSTREAM_IGN_XA_REDIRECT
 0x00000002

	)

44 
	#NGX_HTTP_UPSTREAM_IGN_XA_EXPIRES
 0x00000004

	)

45 
	#NGX_HTTP_UPSTREAM_IGN_EXPIRES
 0x00000008

	)

46 
	#NGX_HTTP_UPSTREAM_IGN_CACHE_CONTROL
 0x00000010

	)

47 
	#NGX_HTTP_UPSTREAM_IGN_SET_COOKIE
 0x00000020

	)

48 
	#NGX_HTTP_UPSTREAM_IGN_XA_LIMIT_RATE
 0x00000040

	)

49 
	#NGX_HTTP_UPSTREAM_IGN_XA_BUFFERING
 0x00000080

	)

50 
	#NGX_HTTP_UPSTREAM_IGN_XA_CHARSET
 0x00000100

	)

54 
ngx_m£c_t
 
	mbl_time
;

55 
ngx_uöt_t
 
	mbl_°©e
;

57 
ngx_uöt_t
 
	m°©us
;

58 
time_t
 
	mª•⁄£_£c
;

59 
ngx_uöt_t
 
	mª•⁄£_m£c
;

60 
off_t
 
	mª•⁄£_Àngth
;

62 
ngx_°r_t
 *
	m≥î
;

63 } 
	tngx_hâp_up°ªam_°©e_t
;

67 
ngx_hash_t
 
	mhódîs_ö_hash
;

68 
ngx_¨øy_t
 
	mup°ªams
;

70 } 
	tngx_hâp_up°ªam_maö_c⁄f_t
;

72 
ngx_hâp_up°ªam_§v_c⁄f_s
 
	tngx_hâp_up°ªam_§v_c⁄f_t
;

74 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_±
)(
	tngx_c⁄f_t
 *
	tcf
,

75 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

76 
	$ngx_öt_t
 (*
	tngx_hâp_up°ªam_öô_≥î_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

77 
	tngx_hâp_up°ªam_§v_c⁄f_t
 *
	tus
);

81 
ngx_hâp_up°ªam_öô_±
 
öô_up°ªam
;

82 
ngx_hâp_up°ªam_öô_≥î_±
 
öô
;

83 *
d©a
;

84 } 
	tngx_hâp_up°ªam_≥î_t
;

88 
ngx_addr_t
 *
addrs
;

89 
ngx_uöt_t
 
«ddrs
;

90 
ngx_uöt_t
 
weight
;

91 
ngx_uöt_t
 
max_Áûs
;

92 
time_t
 
Áû_timeout
;

94 
down
:1;

95 
backup
:1;

96 } 
	tngx_hâp_up°ªam_£rvî_t
;

99 
	#NGX_HTTP_UPSTREAM_CREATE
 0x0001

	)

100 
	#NGX_HTTP_UPSTREAM_WEIGHT
 0x0002

	)

101 
	#NGX_HTTP_UPSTREAM_MAX_FAILS
 0x0004

	)

102 
	#NGX_HTTP_UPSTREAM_FAIL_TIMEOUT
 0x0008

	)

103 
	#NGX_HTTP_UPSTREAM_DOWN
 0x0010

	)

104 
	#NGX_HTTP_UPSTREAM_BACKUP
 0x0020

	)

107 
	sngx_hâp_up°ªam_§v_c⁄f_s
 {

108 
ngx_hâp_up°ªam_≥î_t
 
≥î
;

109 **
§v_c⁄f
;

111 
ngx_¨øy_t
 *
£rvîs
;

113 
ngx_uöt_t
 
Êags
;

114 
ngx_°r_t
 
ho°
;

115 
u_ch¨
 *
fûe_«me
;

116 
ngx_uöt_t
 
löe
;

117 
ö_p‹t_t
 
p‹t
;

118 
ö_p‹t_t
 
deÁu…_p‹t
;

119 
ngx_uöt_t
 
no_p‹t
;

124 
ngx_addr_t
 *
addr
;

125 
ngx_hâp_com∂ex_vÆue_t
 *
vÆue
;

126 } 
	tngx_hâp_up°ªam_loˇl_t
;

130 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
up°ªam
;

132 
ngx_m£c_t
 
c⁄√˘_timeout
;

133 
ngx_m£c_t
 
£nd_timeout
;

134 
ngx_m£c_t
 
ªad_timeout
;

135 
ngx_m£c_t
 
timeout
;

137 
size_t
 
£nd_low©
;

138 
size_t
 
buf„r_size
;

140 
size_t
 
busy_buf„rs_size
;

141 
size_t
 
max_ãmp_fûe_size
;

142 
size_t
 
ãmp_fûe_wrôe_size
;

144 
size_t
 
busy_buf„rs_size_c⁄f
;

145 
size_t
 
max_ãmp_fûe_size_c⁄f
;

146 
size_t
 
ãmp_fûe_wrôe_size_c⁄f
;

148 
ngx_bufs_t
 
bufs
;

150 
ngx_uöt_t
 
ign‹e_hódîs
;

151 
ngx_uöt_t
 
√xt_up°ªam
;

152 
ngx_uöt_t
 
°‹e_ac˚ss
;

153 
ngx_Êag_t
 
buf„rög
;

154 
ngx_Êag_t
 
∑ss_ªque°_hódîs
;

155 
ngx_Êag_t
 
∑ss_ªque°_body
;

157 
ngx_Êag_t
 
ign‹e_˛õ¡_ab‹t
;

158 
ngx_Êag_t
 
öãr˚±_îr‹s
;

159 
ngx_Êag_t
 
cy˛ic_ãmp_fûe
;

161 
ngx_∑th_t
 *
ãmp_∑th
;

163 
ngx_hash_t
 
hide_hódîs_hash
;

164 
ngx_¨øy_t
 *
hide_hódîs
;

165 
ngx_¨øy_t
 *
∑ss_hódîs
;

167 
ngx_hâp_up°ªam_loˇl_t
 *
loˇl
;

169 #i‡(
NGX_HTTP_CACHE
)

170 
ngx_shm_z⁄e_t
 *
ˇche
;

172 
ngx_uöt_t
 
ˇche_mö_u£s
;

173 
ngx_uöt_t
 
ˇche_u£_°Æe
;

174 
ngx_uöt_t
 
ˇche_mëhods
;

176 
ngx_Êag_t
 
ˇche_lock
;

177 
ngx_m£c_t
 
ˇche_lock_timeout
;

179 
ngx_¨øy_t
 *
ˇche_vÆid
;

180 
ngx_¨øy_t
 *
ˇche_by∑ss
;

181 
ngx_¨øy_t
 *
no_ˇche
;

184 
ngx_¨øy_t
 *
°‹e_Àngths
;

185 
ngx_¨øy_t
 *
°‹e_vÆues
;

187 sig√d 
°‹e
:2;

188 
öãr˚±_404
:1;

189 
ch™ge_buf„rög
:1;

191 #i‡(
NGX_HTTP_SSL
)

192 
ngx_s¶_t
 *
s¶
;

193 
ngx_Êag_t
 
s¶_£ssi⁄_ªu£
;

196 
ngx_°r_t
 
moduÀ
;

197 } 
	tngx_hâp_up°ªam_c⁄f_t
;

201 
ngx_°r_t
 
«me
;

202 
ngx_hâp_hódî_h™dÀr_±
 
h™dÀr
;

203 
ngx_uöt_t
 
off£t
;

204 
ngx_hâp_hódî_h™dÀr_±
 
c›y_h™dÀr
;

205 
ngx_uöt_t
 
c⁄f
;

206 
ngx_uöt_t
 
ªdúe˘
;

207 } 
	tngx_hâp_up°ªam_hódî_t
;

211 
ngx_li°_t
 
hódîs
;

213 
ngx_uöt_t
 
°©us_n
;

214 
ngx_°r_t
 
°©us_löe
;

216 
ngx_èbÀ_ñt_t
 *
°©us
;

217 
ngx_èbÀ_ñt_t
 *
d©e
;

218 
ngx_èbÀ_ñt_t
 *
£rvî
;

219 
ngx_èbÀ_ñt_t
 *
c⁄√˘i⁄
;

221 
ngx_èbÀ_ñt_t
 *
expúes
;

222 
ngx_èbÀ_ñt_t
 *
ëag
;

223 
ngx_èbÀ_ñt_t
 *
x_ac˚l_expúes
;

224 
ngx_èbÀ_ñt_t
 *
x_ac˚l_ªdúe˘
;

225 
ngx_èbÀ_ñt_t
 *
x_ac˚l_limô_øã
;

227 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ty≥
;

228 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_Àngth
;

230 
ngx_èbÀ_ñt_t
 *
œ°_modifõd
;

231 
ngx_èbÀ_ñt_t
 *
loˇti⁄
;

232 
ngx_èbÀ_ñt_t
 *
ac˚±_ønges
;

233 
ngx_èbÀ_ñt_t
 *
www_authítiˇã
;

234 
ngx_èbÀ_ñt_t
 *
å™s„r_ícodög
;

236 #i‡(
NGX_HTTP_GZIP
)

237 
ngx_èbÀ_ñt_t
 *
c⁄ã¡_ícodög
;

240 
off_t
 
c⁄ã¡_Àngth_n
;

242 
ngx_¨øy_t
 
ˇche_c⁄åﬁ
;

244 
c⁄√˘i⁄_˛o£
:1;

245 
chunked
:1;

246 } 
	tngx_hâp_up°ªam_hódîs_ö_t
;

250 
ngx_°r_t
 
ho°
;

251 
ö_p‹t_t
 
p‹t
;

252 
ngx_uöt_t
 
no_p‹t
;

254 
ngx_uöt_t
 
«ddrs
;

255 
ö_addr_t
 *
addrs
;

257 
sockaddr
 *sockaddr;

258 
sockÀn_t
 
sockÀn
;

260 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

261 } 
	tngx_hâp_up°ªam_ªsﬁved_t
;

264 (*
	tngx_hâp_up°ªam_h™dÀr_±
)(
	tngx_hâp_ªque°_t
 *
	tr
,

265 
	tngx_hâp_up°ªam_t
 *
	tu
);

268 
	sngx_hâp_up°ªam_s
 {

269 
ngx_hâp_up°ªam_h™dÀr_±
 
ªad_evít_h™dÀr
;

270 
ngx_hâp_up°ªam_h™dÀr_±
 
wrôe_evít_h™dÀr
;

272 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

274 
ngx_evít_pùe_t
 *
pùe
;

276 
ngx_chaö_t
 *
ªque°_bufs
;

278 
ngx_ouçut_chaö_˘x_t
 
ouçut
;

279 
ngx_chaö_wrôî_˘x_t
 
wrôî
;

281 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
;

283 
ngx_hâp_up°ªam_hódîs_ö_t
 
hódîs_ö
;

285 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ªsﬁved
;

287 
ngx_buf_t
 
‰om_˛õ¡
;

289 
ngx_buf_t
 
buf„r
;

290 
off_t
 
Àngth
;

292 
ngx_chaö_t
 *
out_bufs
;

293 
ngx_chaö_t
 *
busy_bufs
;

294 
ngx_chaö_t
 *
‰ì_bufs
;

296 
	`ngx_öt_t
 (*
öput_fûãr_öô
)(*
d©a
);

297 
	`ngx_öt_t
 (*
öput_fûãr
)(*
d©a
, 
ssize_t
 
byãs
);

298 *
öput_fûãr_˘x
;

300 #i‡(
NGX_HTTP_CACHE
)

301 
	`ngx_öt_t
 (*
¸óã_key
)(
ngx_hâp_ªque°_t
 *
r
);

303 
	`ngx_öt_t
 (*
¸óã_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

304 
	`ngx_öt_t
 (*
ªöô_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

305 
	`ngx_öt_t
 (*
¥o˚ss_hódî
)(
ngx_hâp_ªque°_t
 *
r
);

306 (*
ab‹t_ªque°
)(
ngx_hâp_ªque°_t
 *
r
);

307 (*
föÆize_ªque°
)(
ngx_hâp_ªque°_t
 *
r
,

308 
ngx_öt_t
 
rc
);

309 
	`ngx_öt_t
 (*
ªwrôe_ªdúe˘
)(
ngx_hâp_ªque°_t
 *
r
,

310 
ngx_èbÀ_ñt_t
 *
h
, 
size_t
 
¥efix
);

311 
	`ngx_öt_t
 (*
ªwrôe_cookõ
)(
ngx_hâp_ªque°_t
 *
r
,

312 
ngx_èbÀ_ñt_t
 *
h
);

314 
ngx_m£c_t
 
timeout
;

316 
ngx_hâp_up°ªam_°©e_t
 *
°©e
;

318 
ngx_°r_t
 
mëhod
;

319 
ngx_°r_t
 
schema
;

320 
ngx_°r_t
 
uri
;

322 
ngx_hâp_˛ónup_±
 *
˛ónup
;

324 
°‹e
:1;

325 
ˇchóbÀ
:1;

326 
ac˚l
:1;

327 
s¶
:1;

328 #i‡(
NGX_HTTP_CACHE
)

329 
ˇche_°©us
:3;

332 
buf„rög
:1;

333 
kì∑live
:1;

334 
upgøde
:1;

336 
ªque°_£¡
:1;

337 
hódî_£¡
:1;

342 
ngx_uöt_t
 
°©us
;

343 
ngx_uöt_t
 
mask
;

344 } 
	tngx_hâp_up°ªam_√xt_t
;

348 
ngx_°r_t
 
key
;

349 
ngx_°r_t
 
vÆue
;

350 
ngx_uöt_t
 
skù_em±y
;

351 } 
	tngx_hâp_up°ªam_∑øm_t
;

354 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

355 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

357 
ngx_öt_t
 
	`ngx_hâp_up°ªam_¸óã
(
ngx_hâp_ªque°_t
 *
r
);

358 
	`ngx_hâp_up°ªam_öô
(
ngx_hâp_ªque°_t
 *
r
);

359 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
	`ngx_hâp_up°ªam_add
(
ngx_c⁄f_t
 *
cf
,

360 
ngx_uæ_t
 *
u
, 
ngx_uöt_t
 
Êags
);

361 *
	`ngx_hâp_up°ªam_böd_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

362 *
c⁄f
);

363 *
	`ngx_hâp_up°ªam_∑øm_£t_¶Ÿ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

364 *
c⁄f
);

365 
ngx_öt_t
 
	`ngx_hâp_up°ªam_hide_hódîs_hash
(
ngx_c⁄f_t
 *
cf
,

366 
ngx_hâp_up°ªam_c⁄f_t
 *
c⁄f
,Çgx_hâp_up°ªam_c⁄f_à*
¥ev
,

367 
ngx_°r_t
 *
deÁu…_hide_hódîs
, 
ngx_hash_öô_t
 *
hash
);

370 
	#ngx_hâp_c⁄f_up°ªam_§v_c⁄f
(
uscf
, 
moduÀ
) \

371 
uscf
->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

374 
ngx_moduÀ_t
 
ngx_hâp_up°ªam_moduÀ
;

375 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ˇche_mëhod_mask
[];

376 
ngx_c⁄f_bômask_t
 
ngx_hâp_up°ªam_ign‹e_hódîs_masks
[];

	@src/http/ngx_http_upstream_round_robin.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_hâp_up°ªam_º_≥î_t
 *
ngx_hâp_up°ªam_gë_≥î
(

14 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
);

16 #i‡(
NGX_HTTP_SSL
)

18 
ngx_öt_t
 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

19 *
d©a
);

20 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

21 *
d©a
);

26 
ngx_öt_t


27 
	$ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

28 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

30 
ngx_uæ_t
 
u
;

31 
ngx_uöt_t
 
i
, 
j
, 
n
, 
w
;

32 
ngx_hâp_up°ªam_£rvî_t
 *
£rvî
;

33 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
, *
backup
;

35 
us
->
≥î
.
öô
 = 
ngx_hâp_up°ªam_öô_round_robö_≥î
;

37 i‡(
us
->
£rvîs
) {

38 
£rvî
 = 
us
->
£rvîs
->
ñts
;

40 
n
 = 0;

41 
w
 = 0;

43 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

44 i‡(
£rvî
[
i
].
backup
) {

48 
n
 +
£rvî
[
i
].
«ddrs
;

49 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

52 i‡(
n
 == 0) {

53 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

55 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

56  
NGX_ERROR
;

59 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

60 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

61 i‡(
≥îs
 =
NULL
) {

62  
NGX_ERROR
;

65 
≥îs
->
sögÀ
 = (
n
 == 1);

66 
≥îs
->
numbî
 = 
n
;

67 
≥îs
->
weighãd
 = (
w
 !
n
);

68 
≥îs
->
tŸÆ_weight
 = 
w
;

69 
≥îs
->
«me
 = &
us
->
ho°
;

71 
n
 = 0;

73 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

74 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

75 i‡(
£rvî
[
i
].
backup
) {

79 
≥îs
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

80 
≥îs
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

81 
≥îs
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

82 
≥îs
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

83 
≥îs
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

84 
≥îs
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

85 
≥îs
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

86 
≥îs
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

87 
≥îs
->
≥î
[
n
].
cuºít_weight
 = 0;

88 
n
++;

92 
us
->
≥î
.
d©a
 = 
≥îs
;

96 
n
 = 0;

97 
w
 = 0;

99 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

100 i‡(!
£rvî
[
i
].
backup
) {

104 
n
 +
£rvî
[
i
].
«ddrs
;

105 
w
 +
£rvî
[
i
].
«ddrs
 * sîvî[i].
weight
;

108 i‡(
n
 == 0) {

109  
NGX_OK
;

112 
backup
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

113 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

114 i‡(
backup
 =
NULL
) {

115  
NGX_ERROR
;

118 
≥îs
->
sögÀ
 = 0;

119 
backup
->
sögÀ
 = 0;

120 
backup
->
numbî
 = 
n
;

121 
backup
->
weighãd
 = (
w
 !
n
);

122 
backup
->
tŸÆ_weight
 = 
w
;

123 
backup
->
«me
 = &
us
->
ho°
;

125 
n
 = 0;

127 
i
 = 0; i < 
us
->
£rvîs
->
√…s
; i++) {

128 
j
 = 0; j < 
£rvî
[
i
].
«ddrs
; j++) {

129 i‡(!
£rvî
[
i
].
backup
) {

133 
backup
->
≥î
[
n
].
sockaddr
 = 
£rvî
[
i
].
addrs
[
j
].sockaddr;

134 
backup
->
≥î
[
n
].
sockÀn
 = 
£rvî
[
i
].
addrs
[
j
].socklen;

135 
backup
->
≥î
[
n
].
«me
 = 
£rvî
[
i
].
addrs
[
j
].name;

136 
backup
->
≥î
[
n
].
weight
 = 
£rvî
[
i
].weight;

137 
backup
->
≥î
[
n
].
ef„˘ive_weight
 = 
£rvî
[
i
].
weight
;

138 
backup
->
≥î
[
n
].
cuºít_weight
 = 0;

139 
backup
->
≥î
[
n
].
max_Áûs
 = 
£rvî
[
i
].max_fails;

140 
backup
->
≥î
[
n
].
Áû_timeout
 = 
£rvî
[
i
].fail_timeout;

141 
backup
->
≥î
[
n
].
down
 = 
£rvî
[
i
].down;

142 
n
++;

146 
≥îs
->
√xt
 = 
backup
;

148  
NGX_OK
;

154 i‡(
us
->
p‹t
 == 0) {

155 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

157 &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

158  
NGX_ERROR
;

161 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

163 
u
.
ho°
 = 
us
->host;

164 
u
.
p‹t
 = 
us
->port;

166 i‡(
	`ngx_öë_ªsﬁve_ho°
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

167 i‡(
u
.
îr
) {

168 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

170 
u
.
îr
, &
us
->
ho°
, us->
fûe_«me
, us->
löe
);

173  
NGX_ERROR
;

176 
n
 = 
u
.
«ddrs
;

178 
≥îs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

179 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
n
 - 1));

180 i‡(
≥îs
 =
NULL
) {

181  
NGX_ERROR
;

184 
≥îs
->
sögÀ
 = (
n
 == 1);

185 
≥îs
->
numbî
 = 
n
;

186 
≥îs
->
weighãd
 = 0;

187 
≥îs
->
tŸÆ_weight
 = 
n
;

188 
≥îs
->
«me
 = &
us
->
ho°
;

190 
i
 = 0; i < 
u
.
«ddrs
; i++) {

191 
≥îs
->
≥î
[
i
].
sockaddr
 = 
u
.
addrs
[i].sockaddr;

192 
≥îs
->
≥î
[
i
].
sockÀn
 = 
u
.
addrs
[i].socklen;

193 
≥îs
->
≥î
[
i
].
«me
 = 
u
.
addrs
[i].name;

194 
≥îs
->
≥î
[
i
].
weight
 = 1;

195 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

196 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

197 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

198 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

201 
us
->
≥î
.
d©a
 = 
≥îs
;

205  
NGX_OK
;

206 
	}
}

209 
ngx_öt_t


210 
	$ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

211 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
)

213 
ngx_uöt_t
 
n
;

214 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

216 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

218 i‡(
ºp
 =
NULL
) {

219 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

220 i‡(
ºp
 =
NULL
) {

221  
NGX_ERROR
;

224 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

227 
ºp
->
≥îs
 = 
us
->
≥î
.
d©a
;

228 
ºp
->
cuºít
 = 0;

230 
n
 = 
ºp
->
≥îs
->
numbî
;

232 i‡(
ºp
->
≥îs
->
√xt
 &&ÑΩ->≥îs->√xt->
numbî
 > 
n
) {

233 
n
 = 
ºp
->
≥îs
->
√xt
->
numbî
;

236 i‡(
n
 <8 * (
uöçå_t
)) {

237 
ºp
->
åõd
 = &ºp->
d©a
;

238 
ºp
->
d©a
 = 0;

241 
n
 = (¿+ (8 * (
uöçå_t
) - 1)) / (8 * (uintptr_t));

243 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

244 i‡(
ºp
->
åõd
 =
NULL
) {

245  
NGX_ERROR
;

249 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

250 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

251 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

252 #i‡(
NGX_HTTP_SSL
)

253 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 =

254 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
;

255 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 =

256 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
;

259  
NGX_OK
;

260 
	}
}

263 
ngx_öt_t


264 
	$ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

265 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
)

267 
u_ch¨
 *
p
;

268 
size_t
 
Àn
;

269 
ngx_uöt_t
 
i
, 
n
;

270 
sockaddr_ö
 *
sö
;

271 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

272 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
;

274 
ºp
 = 
r
->
up°ªam
->
≥î
.
d©a
;

276 i‡(
ºp
 =
NULL
) {

277 
ºp
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥î_d©a_t
));

278 i‡(
ºp
 =
NULL
) {

279  
NGX_ERROR
;

282 
r
->
up°ªam
->
≥î
.
d©a
 = 
ºp
;

285 
≥îs
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
ngx_hâp_up°ªam_º_≥îs_t
)

286 + (
ngx_hâp_up°ªam_º_≥î_t
Ë* (
ur
->
«ddrs
 - 1));

287 i‡(
≥îs
 =
NULL
) {

288  
NGX_ERROR
;

291 
≥îs
->
sögÀ
 = (
ur
->
«ddrs
 == 1);

292 
≥îs
->
numbî
 = 
ur
->
«ddrs
;

293 
≥îs
->
«me
 = &
ur
->
ho°
;

295 i‡(
ur
->
sockaddr
) {

296 
≥îs
->
≥î
[0].
sockaddr
 = 
ur
->sockaddr;

297 
≥îs
->
≥î
[0].
sockÀn
 = 
ur
->socklen;

298 
≥îs
->
≥î
[0].
«me
 = 
ur
->
ho°
;

299 
≥îs
->
≥î
[0].
weight
 = 1;

300 
≥îs
->
≥î
[0].
ef„˘ive_weight
 = 1;

301 
≥îs
->
≥î
[0].
cuºít_weight
 = 0;

302 
≥îs
->
≥î
[0].
max_Áûs
 = 1;

303 
≥îs
->
≥î
[0].
Áû_timeout
 = 10;

307 
i
 = 0; i < 
ur
->
«ddrs
; i++) {

309 
Àn
 = 
NGX_INET_ADDRSTRLEN
 + (":65536") - 1;

311 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

312 i‡(
p
 =
NULL
) {

313  
NGX_ERROR
;

316 
Àn
 = 
	`ngx_öë_¡›
(
AF_INET
, &
ur
->
addrs
[
i
], 
p
, 
NGX_INET_ADDRSTRLEN
);

317 
Àn
 = 
	`ngx_•rötf
(&
p
[Àn], ":%d", 
ur
->
p‹t
) -Ö;

319 
sö
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, (
sockaddr_ö
));

320 i‡(
sö
 =
NULL
) {

321  
NGX_ERROR
;

324 
sö
->
sö_Ámûy
 = 
AF_INET
;

325 
sö
->
sö_p‹t
 = 
	`ht⁄s
(
ur
->
p‹t
);

326 
sö
->
sö_addr
.
s_addr
 = 
ur
->
addrs
[
i
];

328 
≥îs
->
≥î
[
i
].
sockaddr
 = (sockadd∏*Ë
sö
;

329 
≥îs
->
≥î
[
i
].
sockÀn
 = (
sockaddr_ö
);

330 
≥îs
->
≥î
[
i
].
«me
.
Àn
 =Üen;

331 
≥îs
->
≥î
[
i
].
«me
.
d©a
 = 
p
;

332 
≥îs
->
≥î
[
i
].
weight
 = 1;

333 
≥îs
->
≥î
[
i
].
ef„˘ive_weight
 = 1;

334 
≥îs
->
≥î
[
i
].
cuºít_weight
 = 0;

335 
≥îs
->
≥î
[
i
].
max_Áûs
 = 1;

336 
≥îs
->
≥î
[
i
].
Áû_timeout
 = 10;

340 
ºp
->
≥îs
 =Öeers;

341 
ºp
->
cuºít
 = 0;

343 i‡(
ºp
->
≥îs
->
numbî
 <8 * (
uöçå_t
)) {

344 
ºp
->
åõd
 = &ºp->
d©a
;

345 
ºp
->
d©a
 = 0;

348 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

349 / (8 * (
uöçå_t
));

351 
ºp
->
åõd
 = 
	`ngx_pˇŒoc
(
r
->
poﬁ
, 
n
 * (
uöçå_t
));

352 i‡(
ºp
->
åõd
 =
NULL
) {

353  
NGX_ERROR
;

357 
r
->
up°ªam
->
≥î
.
gë
 = 
ngx_hâp_up°ªam_gë_round_robö_≥î
;

358 
r
->
up°ªam
->
≥î
.
‰ì
 = 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
;

359 
r
->
up°ªam
->
≥î
.
åõs
 = 
ºp
->
≥îs
->
numbî
;

360 #i‡(
NGX_HTTP_SSL
)

361 
r
->
up°ªam
->
≥î
.
£t_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_£t_£ssi⁄
;

362 
r
->
up°ªam
->
≥î
.
ßve_£ssi⁄
 = 
ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
;

365  
NGX_OK
;

366 
	}
}

369 
ngx_öt_t


370 
	$ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

372 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

374 
ngx_öt_t
 
rc
;

375 
ngx_uöt_t
 
i
, 
n
;

376 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

377 
ngx_hâp_up°ªam_º_≥îs_t
 *
≥îs
;

379 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

380 "gëÑ∏≥î,Åry: %ui", 
pc
->
åõs
);

384 
pc
->
ˇched
 = 0;

385 
pc
->
c⁄√˘i⁄
 = 
NULL
;

387 i‡(
ºp
->
≥îs
->
sögÀ
) {

388 
≥î
 = &
ºp
->
≥îs
->peer[0];

390 i‡(
≥î
->
down
) {

391 
Áûed
;

398 
≥î
 = 
	`ngx_hâp_up°ªam_gë_≥î
(
ºp
);

400 i‡(
≥î
 =
NULL
) {

401 
Áûed
;

404 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

406 
ºp
->
cuºít
, 
≥î
->
cuºít_weight
);

409 
pc
->
sockaddr
 = 
≥î
->sockaddr;

410 
pc
->
sockÀn
 = 
≥î
->socklen;

411 
pc
->
«me
 = &
≥î
->name;

415 i‡(
pc
->
åõs
 =1 && 
ºp
->
≥îs
->
√xt
) {

416 
pc
->
åõs
 +
ºp
->
≥îs
->
√xt
->
numbî
;

419  
NGX_OK
;

421 
Áûed
:

423 
≥îs
 = 
ºp
->peers;

425 i‡(
≥îs
->
√xt
) {

429 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0, "backup servers");

431 
ºp
->
≥îs
 =Öìrs->
√xt
;

432 
pc
->
åõs
 = 
ºp
->
≥îs
->
numbî
;

434 
n
 = (
ºp
->
≥îs
->
numbî
 + (8 * (
uöçå_t
) - 1))

435 / (8 * (
uöçå_t
));

437 
i
 = 0; i < 
n
; i++) {

438 
ºp
->
åõd
[
i
] = 0;

441 
rc
 = 
	`ngx_hâp_up°ªam_gë_round_robö_≥î
(
pc
, 
ºp
);

443 i‡(
rc
 !
NGX_BUSY
) {

444  
rc
;

452 
i
 = 0; i < 
≥îs
->
numbî
; i++) {

453 
≥îs
->
≥î
[
i
].
Áûs
 = 0;

458 
pc
->
«me
 = 
≥îs
->name;

460  
NGX_BUSY
;

461 
	}
}

464 
ngx_hâp_up°ªam_º_≥î_t
 *

465 
	$ngx_hâp_up°ªam_gë_≥î
(
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
)

467 
time_t
 
now
;

468 
uöçå_t
 
m
;

469 
ngx_öt_t
 
tŸÆ
;

470 
ngx_uöt_t
 
i
, 
n
;

471 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
, *
be°
;

473 
now
 = 
	`ngx_time
();

475 
be°
 = 
NULL
;

476 
tŸÆ
 = 0;

478 
i
 = 0; i < 
ºp
->
≥îs
->
numbî
; i++) {

480 
n
 = 
i
 / (8 * (
uöçå_t
));

481 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

483 i‡(
ºp
->
åõd
[
n
] & 
m
) {

487 
≥î
 = &
ºp
->
≥îs
->≥î[
i
];

489 i‡(
≥î
->
down
) {

493 i‡(
≥î
->
max_Áûs


494 && 
≥î
->
Áûs
 >≥î->
max_Áûs


495 && 
now
 - 
≥î
->
checked
 <≥î->
Áû_timeout
)

500 
≥î
->
cuºít_weight
 +≥î->
ef„˘ive_weight
;

501 
tŸÆ
 +
≥î
->
ef„˘ive_weight
;

503 i‡(
≥î
->
ef„˘ive_weight
 <Öìr->
weight
) {

504 
≥î
->
ef„˘ive_weight
++;

507 i‡(
be°
 =
NULL
 || 
≥î
->
cuºít_weight
 > best->current_weight) {

508 
be°
 = 
≥î
;

512 i‡(
be°
 =
NULL
) {

513  
NULL
;

516 
i
 = 
be°
 - &
ºp
->
≥îs
->
≥î
[0];

518 
ºp
->
cuºít
 = 
i
;

520 
n
 = 
i
 / (8 * (
uöçå_t
));

521 
m
 = (
uöçå_t
Ë1 << 
i
 % (8 * (uintptr_t));

523 
ºp
->
åõd
[
n
] |
m
;

525 
be°
->
cuºít_weight
 -
tŸÆ
;

526 
be°
->
checked
 = 
now
;

528  
be°
;

529 
	}
}

533 
	$ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
,

534 
ngx_uöt_t
 
°©e
)

536 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

538 
time_t
 
now
;

539 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

541 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

542 "‰ìÑ∏≥î %uò%ui", 
pc
->
åõs
, 
°©e
);

546 i‡(
ºp
->
≥îs
->
sögÀ
) {

547 
pc
->
åõs
 = 0;

551 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

553 i‡(
°©e
 & 
NGX_PEER_FAILED
) {

554 
now
 = 
	`ngx_time
();

558 
≥î
->
Áûs
++;

559 
≥î
->
ac˚s£d
 = 
now
;

560 
≥î
->
checked
 = 
now
;

562 i‡(
≥î
->
max_Áûs
) {

563 
≥î
->
ef„˘ive_weight
 -≥î->
weight
 /Öìr->
max_Áûs
;

566 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

568 
ºp
->
cuºít
, 
≥î
->
ef„˘ive_weight
);

570 i‡(
≥î
->
ef„˘ive_weight
 < 0) {

571 
≥î
->
ef„˘ive_weight
 = 0;

580 i‡(
≥î
->
ac˚s£d
 <Öìr->
checked
) {

581 
≥î
->
Áûs
 = 0;

585 i‡(
pc
->
åõs
) {

586 
pc
->
åõs
--;

590 
	}
}

593 #i‡(
NGX_HTTP_SSL
)

595 
ngx_öt_t


596 
	$ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

597 *
d©a
)

599 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

601 
ngx_öt_t
 
rc
;

602 
ngx_s¶_£ssi⁄_t
 *
s¶_£ssi⁄
;

603 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

605 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

610 
s¶_£ssi⁄
 = 
≥î
->ssl_session;

612 
rc
 = 
	`ngx_s¶_£t_£ssi⁄
(
pc
->
c⁄√˘i⁄
, 
s¶_£ssi⁄
);

614 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

616 
s¶_£ssi⁄
, s¶_£ssi⁄ ? s¶_£ssi⁄->
ª„ªn˚s
 : 0);

620  
rc
;

621 
	}
}

625 
	$ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

626 *
d©a
)

628 
ngx_hâp_up°ªam_º_≥î_d©a_t
 *
ºp
 = 
d©a
;

630 
ngx_s¶_£ssi⁄_t
 *
ﬁd_s¶_£ssi⁄
, *
s¶_£ssi⁄
;

631 
ngx_hâp_up°ªam_º_≥î_t
 *
≥î
;

633 
s¶_£ssi⁄
 = 
	`ngx_s¶_gë_£ssi⁄
(
pc
->
c⁄√˘i⁄
);

635 i‡(
s¶_£ssi⁄
 =
NULL
) {

639 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

640 "ßvê£ssi⁄: %p:%d", 
s¶_£ssi⁄
, s¶_£ssi⁄->
ª„ªn˚s
);

642 
≥î
 = &
ºp
->
≥îs
->≥î[ºp->
cuºít
];

647 
ﬁd_s¶_£ssi⁄
 = 
≥î
->
s¶_£ssi⁄
;

648 
≥î
->
s¶_£ssi⁄
 = ssl_session;

652 i‡(
ﬁd_s¶_£ssi⁄
) {

654 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_HTTP
, 
pc
->
log
, 0,

656 
ﬁd_s¶_£ssi⁄
, old_s¶_£ssi⁄->
ª„ªn˚s
);

660 
	`ngx_s¶_‰ì_£ssi⁄
(
ﬁd_s¶_£ssi⁄
);

662 
	}
}

665 
ngx_öt_t


666 
	$ngx_hâp_up°ªam_em±y_£t_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

668  
NGX_OK
;

669 
	}
}

673 
	$ngx_hâp_up°ªam_em±y_ßve_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
, *
d©a
)

676 
	}
}

	@src/http/ngx_http_upstream_round_robin.h

8 #i‚de‡
_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


9 
	#_NGX_HTTP_UPSTREAM_ROUND_ROBIN_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

18 
sockaddr
 *
	msockaddr
;

19 
sockÀn_t
 
	msockÀn
;

20 
ngx_°r_t
 
	m«me
;

22 
ngx_öt_t
 
	mcuºít_weight
;

23 
ngx_öt_t
 
	mef„˘ive_weight
;

24 
ngx_öt_t
 
	mweight
;

26 
ngx_uöt_t
 
	mÁûs
;

27 
time_t
 
	mac˚s£d
;

28 
time_t
 
	mchecked
;

30 
ngx_uöt_t
 
	mmax_Áûs
;

31 
time_t
 
	mÁû_timeout
;

33 
ngx_uöt_t
 
	mdown
;

35 #i‡(
NGX_HTTP_SSL
)

36 
ngx_s¶_£ssi⁄_t
 *
	ms¶_£ssi⁄
;

38 } 
	tngx_hâp_up°ªam_º_≥î_t
;

41 
ngx_hâp_up°ªam_º_≥îs_s
 
	tngx_hâp_up°ªam_º_≥îs_t
;

43 
	sngx_hâp_up°ªam_º_≥îs_s
 {

44 
ngx_uöt_t
 
	mnumbî
;

48 
ngx_uöt_t
 
	mtŸÆ_weight
;

50 
	msögÀ
:1;

51 
	mweighãd
:1;

53 
ngx_°r_t
 *
	m«me
;

55 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m√xt
;

57 
ngx_hâp_up°ªam_º_≥î_t
 
	m≥î
[1];

62 
ngx_hâp_up°ªam_º_≥îs_t
 *
	m≥îs
;

63 
ngx_uöt_t
 
	mcuºít
;

64 
uöçå_t
 *
	måõd
;

65 
uöçå_t
 
	md©a
;

66 } 
	tngx_hâp_up°ªam_º_≥î_d©a_t
;

69 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö
(
ngx_c⁄f_t
 *
cf
,

70 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

71 
ngx_öt_t
 
ngx_hâp_up°ªam_öô_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_up°ªam_§v_c⁄f_t
 *
us
);

73 
ngx_öt_t
 
ngx_hâp_up°ªam_¸óã_round_robö_≥î
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_up°ªam_ªsﬁved_t
 *
ur
);

75 
ngx_öt_t
 
ngx_hâp_up°ªam_gë_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

76 *
d©a
);

77 
ngx_hâp_up°ªam_‰ì_round_robö_≥î
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

78 *
d©a
, 
ngx_uöt_t
 
°©e
);

80 #i‡(
NGX_HTTP_SSL
)

81 
ngx_öt_t


82 
ngx_hâp_up°ªam_£t_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

83 *
d©a
);

84 
ngx_hâp_up°ªam_ßve_round_robö_≥î_£ssi⁄
(
ngx_≥î_c⁄√˘i⁄_t
 *
pc
,

85 *
d©a
);

	@src/http/ngx_http_variables.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

11 
	~<ngöx.h
>

14 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
,

15 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

16 
ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

17 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

18 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

19 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

20 
ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

21 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

22 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
,

23 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

25 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

26 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

27 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

28 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

29 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

30 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
);

32 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

33 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

34 
ngx_öt_t
 
ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

35 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

36 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

37 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

38 
ngx_öt_t
 
ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
,

39 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

40 
ngx_öt_t
 
ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
,

41 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

42 #i‡(
NGX_HAVE_TCP_INFO
)

43 
ngx_öt_t
 
ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
,

44 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

47 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

49 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
,

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

51 
ngx_öt_t
 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

52 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

53 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

55 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

56 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

57 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

58 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

59 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

60 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

61 
ngx_öt_t
 
ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

62 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

63 
ngx_öt_t
 
ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

64 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

65 
ngx_öt_t
 
ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

66 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

67 
ngx_öt_t
 
ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

68 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

69 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

70 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

71 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

72 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

73 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

74 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

75 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

76 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

77 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

78 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

79 
ngx_öt_t
 
ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

80 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

81 
ngx_öt_t
 
ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

82 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

83 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

84 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

85 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

86 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

87 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

88 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

89 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

90 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

91 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

92 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

93 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

94 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

95 
ngx_öt_t
 
ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

96 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

98 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

99 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

100 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

101 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

102 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

103 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

104 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

105 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

106 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

108 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

109 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

110 
ngx_öt_t
 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

111 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

113 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

114 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

115 
ngx_öt_t
 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

116 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

118 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

119 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

120 
ngx_öt_t
 
ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

121 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

122 
ngx_öt_t
 
ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

123 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

124 
ngx_öt_t
 
ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

125 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

126 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

127 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

128 
ngx_öt_t
 
ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

129 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
);

147 
ngx_hâp_v¨übÀ_t
 
	gngx_hâp_c‹e_v¨übÀs
[] = {

149 { 
ngx_°rög
("hâp_ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

150 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ho°
), 0, 0 },

152 { 
ngx_°rög
("hâp_u£r_agít"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

153 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
u£r_agít
), 0, 0 },

155 { 
ngx_°rög
("hâp_ª„ªr"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

156 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
ª„ªr
), 0, 0 },

158 #i‡(
NGX_HTTP_GZIP
)

159 { 
ngx_°rög
("hâp_vü"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

160 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
vü
), 0, 0 },

163 #i‡(
NGX_HTTP_X_FORWARDED_FOR
)

164 { 
ngx_°rög
("hâp_x_f‹w¨ded_f‹"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

165 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
x_f‹w¨ded_f‹
), 0, 0 },

168 { 
ngx_°rög
("hâp_cookõ"), 
NULL
, 
ngx_hâp_v¨übÀ_cookõs
,

169 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
cookõs
), 0, 0 },

171 { 
ngx_°rög
("c⁄ã¡_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
,

174 { 
ngx_°rög
("c⁄ã¡_ty≥"), 
NULL
, 
ngx_hâp_v¨übÀ_hódî
,

175 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_ö
.
c⁄ã¡_ty≥
), 0, 0 },

177 { 
ngx_°rög
("ho°"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°
, 0, 0, 0 },

179 { 
ngx_°rög
("bö¨y_ªmŸe_addr"), 
NULL
,

180 
ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
, 0, 0, 0 },

182 { 
ngx_°rög
("ªmŸe_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_addr
, 0, 0, 0 },

184 { 
ngx_°rög
("ªmŸe_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_p‹t
, 0, 0, 0 },

186 { 
ngx_°rög
("£rvî_addr"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_addr
, 0, 0, 0 },

188 { 
ngx_°rög
("£rvî_p‹t"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_p‹t
, 0, 0, 0 },

190 { 
ngx_°rög
("£rvî_¥Ÿocﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

191 
off£tof
(
ngx_hâp_ªque°_t
, 
hâp_¥Ÿocﬁ
), 0, 0 },

193 { 
ngx_°rög
("scheme"), 
NULL
, 
ngx_hâp_v¨übÀ_scheme
, 0, 0, 0 },

195 { 
ngx_°rög
("hâps"), 
NULL
, 
ngx_hâp_v¨übÀ_hâps
, 0, 0, 0 },

197 { 
ngx_°rög
("ªque°_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

198 
off£tof
(
ngx_hâp_ªque°_t
, 
u≈¨£d_uri
), 0, 0 },

200 { 
ngx_°rög
("uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

201 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

202 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

204 { 
ngx_°rög
("documít_uri"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

205 
off£tof
(
ngx_hâp_ªque°_t
, 
uri
),

206 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

208 { 
ngx_°rög
("ªque°"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_löe
, 0, 0, 0 },

210 { 
ngx_°rög
("documít_roŸ"), 
NULL
,

211 
ngx_hâp_v¨übÀ_documít_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

213 { 
ngx_°rög
("ªÆ∑th_roŸ"), 
NULL
,

214 
ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
, 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

216 { 
ngx_°rög
("quîy_°rög"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°
,

217 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

218 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

220 { 
ngx_°rög
("args"),

221 
ngx_hâp_v¨übÀ_ªque°_£t
,

222 
ngx_hâp_v¨übÀ_ªque°
,

223 
off£tof
(
ngx_hâp_ªque°_t
, 
¨gs
),

224 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

226 { 
ngx_°rög
("is_¨gs"), 
NULL
, 
ngx_hâp_v¨übÀ_is_¨gs
,

227 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

229 { 
ngx_°rög
("ªque°_fûíame"), 
NULL
,

230 
ngx_hâp_v¨übÀ_ªque°_fûíame
, 0,

231 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

233 { 
ngx_°rög
("£rvî_«me"), 
NULL
, 
ngx_hâp_v¨übÀ_£rvî_«me
, 0, 0, 0 },

235 { 
ngx_°rög
("ªque°_mëhod"), 
NULL
,

236 
ngx_hâp_v¨übÀ_ªque°_mëhod
, 0,

237 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

239 { 
ngx_°rög
("ªmŸe_u£r"), 
NULL
, 
ngx_hâp_v¨übÀ_ªmŸe_u£r
, 0, 0, 0 },

241 { 
ngx_°rög
("byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_byãs_£¡
,

244 { 
ngx_°rög
("body_byãs_£¡"), 
NULL
, 
ngx_hâp_v¨übÀ_body_byãs_£¡
,

247 { 
ngx_°rög
("pùe"), 
NULL
, 
ngx_hâp_v¨übÀ_pùe
,

250 { 
ngx_°rög
("ªque°_com∂ëi⁄"), 
NULL
,

251 
ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
,

254 { 
ngx_°rög
("ªque°_body"), 
NULL
,

255 
ngx_hâp_v¨übÀ_ªque°_body
,

258 { 
ngx_°rög
("ªque°_body_fûe"), 
NULL
,

259 
ngx_hâp_v¨übÀ_ªque°_body_fûe
,

262 { 
ngx_°rög
("ªque°_Àngth"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_Àngth
,

263 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

265 { 
ngx_°rög
("ªque°_time"), 
NULL
, 
ngx_hâp_v¨übÀ_ªque°_time
,

266 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

268 { 
ngx_°rög
("°©us"), 
NULL
,

269 
ngx_hâp_v¨übÀ_°©us
, 0,

270 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

272 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_ty≥"), 
NULL
,

273 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
, 0, 0, 0 },

275 { 
ngx_°rög
("£¡_hâp_c⁄ã¡_Àngth"), 
NULL
,

276 
ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
, 0, 0, 0 },

278 { 
ngx_°rög
("£¡_hâp_loˇti⁄"), 
NULL
,

279 
ngx_hâp_v¨übÀ_£¡_loˇti⁄
, 0, 0, 0 },

281 { 
ngx_°rög
("£¡_hâp_œ°_modifõd"), 
NULL
,

282 
ngx_hâp_v¨übÀ_£¡_œ°_modifõd
, 0, 0, 0 },

284 { 
ngx_°rög
("£¡_hâp_c⁄√˘i⁄"), 
NULL
,

285 
ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
, 0, 0, 0 },

287 { 
ngx_°rög
("£¡_hâp_kìp_Æive"), 
NULL
,

288 
ngx_hâp_v¨übÀ_£¡_kìp_Æive
, 0, 0, 0 },

290 { 
ngx_°rög
("£¡_hâp_å™s„r_ícodög"), 
NULL
,

291 
ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
, 0, 0, 0 },

293 { 
ngx_°rög
("£¡_hâp_ˇche_c⁄åﬁ"), 
NULL
, 
ngx_hâp_v¨übÀ_hódîs
,

294 
off£tof
(
ngx_hâp_ªque°_t
, 
hódîs_out
.
ˇche_c⁄åﬁ
), 0, 0 },

296 { 
ngx_°rög
("limô_øã"), 
ngx_hâp_v¨übÀ_ªque°_£t_size
,

297 
ngx_hâp_v¨übÀ_ªque°_gë_size
,

298 
off£tof
(
ngx_hâp_ªque°_t
, 
limô_øã
),

299 
NGX_HTTP_VAR_CHANGEABLE
|
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

301 { 
ngx_°rög
("c⁄√˘i⁄"), 
NULL
,

302 
ngx_hâp_v¨übÀ_c⁄√˘i⁄
, 0, 0, 0 },

304 { 
ngx_°rög
("c⁄√˘i⁄_ªque°s"), 
NULL
,

305 
ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
, 0, 0, 0 },

307 { 
ngx_°rög
("ngöx_vîsi⁄"), 
NULL
, 
ngx_hâp_v¨übÀ_ngöx_vîsi⁄
,

310 { 
ngx_°rög
("ho°«me"), 
NULL
, 
ngx_hâp_v¨übÀ_ho°«me
,

313 { 
ngx_°rög
("pid"), 
NULL
, 
ngx_hâp_v¨übÀ_pid
,

316 { 
ngx_°rög
("m£c"), 
NULL
, 
ngx_hâp_v¨übÀ_m£c
,

317 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

319 { 
ngx_°rög
("time_iso8601"), 
NULL
, 
ngx_hâp_v¨übÀ_time_iso8601
,

320 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

322 { 
ngx_°rög
("time_loˇl"), 
NULL
, 
ngx_hâp_v¨übÀ_time_loˇl
,

323 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

325 #i‡(
NGX_HAVE_TCP_INFO
)

326 { 
ngx_°rög
("t˝öfo_πt"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

327 0, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

329 { 
ngx_°rög
("t˝öfo_πtv¨"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

330 1, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

332 { 
ngx_°rög
("t˝öfo_¢d_cwnd"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

333 2, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

335 { 
ngx_°rög
("t˝öfo_rcv_•a˚"), 
NULL
, 
ngx_hâp_v¨übÀ_t˝öfo
,

336 3, 
NGX_HTTP_VAR_NOCACHEABLE
, 0 },

339 { 
ngx_nuŒ_°rög
, 
NULL
, NULL, 0, 0, 0 }

343 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_nuŒ_vÆue
 =

344 
ngx_hâp_v¨übÀ
("");

345 
ngx_hâp_v¨übÀ_vÆue_t
 
	gngx_hâp_v¨übÀ_åue_vÆue
 =

346 
ngx_hâp_v¨übÀ
("1");

349 
ngx_hâp_v¨übÀ_t
 *

350 
	$ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
Êags
)

352 
ngx_öt_t
 
rc
;

353 
ngx_uöt_t
 
i
;

354 
ngx_hash_key_t
 *
key
;

355 
ngx_hâp_v¨übÀ_t
 *
v
;

356 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

358 i‡(
«me
->
Àn
 == 0) {

359 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

361  
NULL
;

364 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

366 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

367 
i
 = 0; i < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
; i++) {

368 i‡(
«me
->
Àn
 !
key
[
i
].key.len

369 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
key
[
i
].key.d©a,Çame->
Àn
) != 0)

374 
v
 = 
key
[
i
].
vÆue
;

376 i‡(!(
v
->
Êags
 & 
NGX_HTTP_VAR_CHANGEABLE
)) {

377 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

378 "thêdu∂iˇã \"%V\" v¨übÀ", 
«me
);

379  
NULL
;

382  
v
;

385 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

386 i‡(
v
 =
NULL
) {

387  
NULL
;

390 
v
->
«me
.
Àn
 =Çame->len;

391 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

392 i‡(
v
->
«me
.
d©a
 =
NULL
) {

393  
NULL
;

396 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

398 
v
->
£t_h™dÀr
 = 
NULL
;

399 
v
->
gë_h™dÀr
 = 
NULL
;

400 
v
->
d©a
 = 0;

401 
v
->
Êags
 = flags;

402 
v
->
ödex
 = 0;

404 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v, 0);

406 i‡(
rc
 =
NGX_ERROR
) {

407  
NULL
;

410 i‡(
rc
 =
NGX_BUSY
) {

411 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

412 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", 
«me
);

413  
NULL
;

416  
v
;

417 
	}
}

420 
ngx_öt_t


421 
	$ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
)

423 
ngx_uöt_t
 
i
;

424 
ngx_hâp_v¨übÀ_t
 *
v
;

425 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

427 i‡(
«me
->
Àn
 == 0) {

428 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

430  
NGX_ERROR
;

433 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

435 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

437 i‡(
v
 =
NULL
) {

438 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
v¨übÀs
, 
cf
->
poﬁ
, 4,

439 (
ngx_hâp_v¨übÀ_t
))

440 !
NGX_OK
)

442  
NGX_ERROR
;

446 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

447 i‡(
«me
->
Àn
 !
v
[
i
].name.len

448 || 
	`ngx_°∫ˇ£cmp
(
«me
->
d©a
, 
v
[
i
].«me.d©a,Çame->
Àn
) != 0)

453  
i
;

457 
v
 = 
	`ngx_¨øy_push
(&
cmcf
->
v¨übÀs
);

458 i‡(
v
 =
NULL
) {

459  
NGX_ERROR
;

462 
v
->
«me
.
Àn
 =Çame->len;

463 
v
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
,Çame->
Àn
);

464 i‡(
v
->
«me
.
d©a
 =
NULL
) {

465  
NGX_ERROR
;

468 
	`ngx_°æow
(
v
->
«me
.
d©a
,Çame->d©a,Çame->
Àn
);

470 
v
->
£t_h™dÀr
 = 
NULL
;

471 
v
->
gë_h™dÀr
 = 
NULL
;

472 
v
->
d©a
 = 0;

473 
v
->
Êags
 = 0;

474 
v
->
ödex
 = 
cmcf
->
v¨übÀs
.
√…s
 - 1;

476  
v
->
ödex
;

477 
	}
}

480 
ngx_hâp_v¨übÀ_vÆue_t
 *

481 
	$ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

483 
ngx_hâp_v¨übÀ_t
 *
v
;

484 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

486 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

488 i‡(
cmcf
->
v¨übÀs
.
√…s
 <
ödex
) {

489 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

490 "unknow¿v¨übÀ index: %d", 
ödex
);

491  
NULL
;

494 i‡(
r
->
v¨übÀs
[
ödex
].
nŸ_found
 ||Ñ->v¨übÀs[ödex].
vÆid
) {

495  &
r
->
v¨übÀs
[
ödex
];

498 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

500 i‡(
v
[
ödex
].
	`gë_h™dÀr
(
r
, &r->
v¨übÀs
[ödex], v[ödex].
d©a
)

501 =
NGX_OK
)

503 i‡(
v
[
ödex
].
Êags
 & 
NGX_HTTP_VAR_NOCACHEABLE
) {

504 
r
->
v¨übÀs
[
ödex
].
no_ˇchóbÀ
 = 1;

507  &
r
->
v¨übÀs
[
ödex
];

510 
r
->
v¨übÀs
[
ödex
].
vÆid
 = 0;

511 
r
->
v¨übÀs
[
ödex
].
nŸ_found
 = 1;

513  
NULL
;

514 
	}
}

517 
ngx_hâp_v¨übÀ_vÆue_t
 *

518 
	$ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_uöt_t
 
ödex
)

520 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
;

522 
v
 = &
r
->
v¨übÀs
[
ödex
];

524 i‡(
v
->
vÆid
 || v->
nŸ_found
) {

525 i‡(!
v
->
no_ˇchóbÀ
) {

526  
v
;

529 
v
->
vÆid
 = 0;

530 
v
->
nŸ_found
 = 0;

533  
	`ngx_hâp_gë_ödexed_v¨übÀ
(
r
, 
ödex
);

534 
	}
}

537 
ngx_hâp_v¨übÀ_vÆue_t
 *

538 
	$ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
)

540 
ngx_hâp_v¨übÀ_t
 *
v
;

541 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

542 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

544 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

546 
v
 = 
	`ngx_hash_föd
(&
cmcf
->
v¨übÀs_hash
, 
key
, 
«me
->
d©a
,Çame->
Àn
);

548 i‡(
v
) {

549 i‡(
v
->
Êags
 & 
NGX_HTTP_VAR_INDEXED
) {

550  
	`ngx_hâp_gë_Êushed_v¨übÀ
(
r
, 
v
->
ödex
);

554 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

556 i‡(
vv
 && 
v
->
	`gë_h™dÀr
(
r
, vv, v->
d©a
Ë=
NGX_OK
) {

557  
vv
;

560  
NULL
;

564 
vv
 = 
	`ngx_∑Œoc
(
r
->
poﬁ
, (
ngx_hâp_v¨übÀ_vÆue_t
));

565 i‡(
vv
 =
NULL
) {

566  
NULL
;

569 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "http_", 5) == 0) {

571 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_ö
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

572 =
NGX_OK
)

574  
vv
;

577  
NULL
;

580 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "sent_http_", 10) == 0) {

582 i‡(
	`ngx_hâp_v¨übÀ_unknown_hódî_out
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

583 =
NGX_OK
)

585  
vv
;

588  
NULL
;

591 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "upstream_http_", 14) == 0) {

593 i‡(
	`ngx_hâp_up°ªam_hódî_v¨übÀ
(
r
, 
vv
, (
uöçå_t
Ë
«me
)

594 =
NGX_OK
)

596  
vv
;

599  
NULL
;

602 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "cookie_", 7) == 0) {

604 i‡(
	`ngx_hâp_v¨übÀ_cookõ
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

605  
vv
;

608  
NULL
;

611 i‡(
	`ngx_°∫cmp
(
«me
->
d©a
, "arg_", 4) == 0) {

613 i‡(
	`ngx_hâp_v¨übÀ_¨gumít
(
r
, 
vv
, (
uöçå_t
Ë
«me
Ë=
NGX_OK
) {

614  
vv
;

617  
NULL
;

620 
vv
->
nŸ_found
 = 1;

622  
vv
;

623 
	}
}

626 
ngx_öt_t


627 
	$ngx_hâp_v¨übÀ_ªque°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

628 
uöçå_t
 
d©a
)

630 
ngx_°r_t
 *
s
;

632 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

634 i‡(
s
->
d©a
) {

635 
v
->
Àn
 = 
s
->len;

636 
v
->
vÆid
 = 1;

637 
v
->
no_ˇchóbÀ
 = 0;

638 
v
->
nŸ_found
 = 0;

639 
v
->
d©a
 = 
s
->data;

642 
v
->
nŸ_found
 = 1;

645  
NGX_OK
;

646 
	}
}

650 
	$ngx_hâp_v¨übÀ_ªque°_£t
(
ngx_hâp_ªque°_t
 *
r
,

651 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

653 
ngx_°r_t
 *
s
;

655 
s
 = (
ngx_°r_t
 *Ë((*Ë
r
 + 
d©a
);

657 
s
->
Àn
 = 
v
->len;

658 
s
->
d©a
 = 
v
->data;

659 
	}
}

662 
ngx_öt_t


663 
	$ngx_hâp_v¨übÀ_ªque°_gë_size
(
ngx_hâp_ªque°_t
 *
r
,

664 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

666 
size_t
 *
•
;

668 
•
 = (
size_t
 *Ë((*Ë
r
 + 
d©a
);

670 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_SIZE_T_LEN
);

671 i‡(
v
->
d©a
 =
NULL
) {

672  
NGX_ERROR
;

675 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uz", *
•
) - v->data;

676 
v
->
vÆid
 = 1;

677 
v
->
no_ˇchóbÀ
 = 0;

678 
v
->
nŸ_found
 = 0;

680  
NGX_OK
;

681 
	}
}

685 
	$ngx_hâp_v¨übÀ_ªque°_£t_size
(
ngx_hâp_ªque°_t
 *
r
,

686 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

688 
ssize_t
 
s
, *
•
;

689 
ngx_°r_t
 
vÆ
;

691 
vÆ
.
Àn
 = 
v
->len;

692 
vÆ
.
d©a
 = 
v
->data;

694 
s
 = 
	`ngx_∑r£_size
(&
vÆ
);

696 i‡(
s
 =
NGX_ERROR
) {

697 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
r
->
c⁄√˘i⁄
->
log
, 0,

698 "övÆid sizê\"%V\"", &
vÆ
);

702 
•
 = (
ssize_t
 *Ë((*Ë
r
 + 
d©a
);

704 *
•
 = 
s
;

707 
	}
}

710 
ngx_öt_t


711 
	$ngx_hâp_v¨übÀ_hódî
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

712 
uöçå_t
 
d©a
)

714 
ngx_èbÀ_ñt_t
 *
h
;

716 
h
 = *(
ngx_èbÀ_ñt_t
 **Ë((*Ë
r
 + 
d©a
);

718 i‡(
h
) {

719 
v
->
Àn
 = 
h
->
vÆue
.len;

720 
v
->
vÆid
 = 1;

721 
v
->
no_ˇchóbÀ
 = 0;

722 
v
->
nŸ_found
 = 0;

723 
v
->
d©a
 = 
h
->
vÆue
.data;

726 
v
->
nŸ_found
 = 1;

729  
NGX_OK
;

730 
	}
}

733 
ngx_öt_t


734 
	$ngx_hâp_v¨übÀ_cookõs
(
ngx_hâp_ªque°_t
 *
r
,

735 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

737  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ';');

738 
	}
}

741 
ngx_öt_t


742 
	$ngx_hâp_v¨übÀ_hódîs
(
ngx_hâp_ªque°_t
 *
r
,

743 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

745  
	`ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
r
, 
v
, 
d©a
, ',');

746 
	}
}

749 
ngx_öt_t


750 
	$ngx_hâp_v¨übÀ_hódîs_öã∫Æ
(
ngx_hâp_ªque°_t
 *
r
,

751 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
, 
u_ch¨
 
£p
)

753 
size_t
 
Àn
;

754 
u_ch¨
 *
p
, *
íd
;

755 
ngx_uöt_t
 
i
, 
n
;

756 
ngx_¨øy_t
 *
a
;

757 
ngx_èbÀ_ñt_t
 **
h
;

759 
a
 = (
ngx_¨øy_t
 *Ë((*Ë
r
 + 
d©a
);

761 
n
 = 
a
->
√…s
;

762 
h
 = 
a
->
ñts
;

764 
Àn
 = 0;

766 
i
 = 0; i < 
n
; i++) {

768 i‡(
h
[
i
]->
hash
 == 0) {

772 
Àn
 +
h
[
i
]->
vÆue
.len + 2;

775 i‡(
Àn
 == 0) {

776 
v
->
nŸ_found
 = 1;

777  
NGX_OK
;

780 
Àn
 -= 2;

782 
v
->
vÆid
 = 1;

783 
v
->
no_ˇchóbÀ
 = 0;

784 
v
->
nŸ_found
 = 0;

786 i‡(
n
 == 1) {

787 
v
->
Àn
 = (*
h
)->
vÆue
.len;

788 
v
->
d©a
 = (*
h
)->
vÆue
.data;

790  
NGX_OK
;

793 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

794 i‡(
p
 =
NULL
) {

795  
NGX_ERROR
;

798 
v
->
Àn
 =Üen;

799 
v
->
d©a
 = 
p
;

801 
íd
 = 
p
 + 
Àn
;

803 
i
 = 0; ; i++) {

805 i‡(
h
[
i
]->
hash
 == 0) {

809 
p
 = 
	`ngx_c›y
’, 
h
[
i
]->
vÆue
.
d©a
, h[i]->vÆue.
Àn
);

811 i‡(
p
 =
íd
) {

815 *
p
++ = 
£p
; *p++ = ' ';

818  
NGX_OK
;

819 
	}
}

822 
ngx_öt_t


823 
	$ngx_hâp_v¨übÀ_unknown_hódî_ö
(
ngx_hâp_ªque°_t
 *
r
,

824 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

826  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

827 &
r
->
hódîs_ö
.
hódîs
.
∑π
,

829 
	}
}

832 
ngx_öt_t


833 
	$ngx_hâp_v¨übÀ_unknown_hódî_out
(
ngx_hâp_ªque°_t
 *
r
,

834 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

836  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, (
ngx_°r_t
 *Ë
d©a
,

837 &
r
->
hódîs_out
.
hódîs
.
∑π
,

839 
	}
}

842 
ngx_öt_t


843 
	$ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
ngx_°r_t
 *
v¨
,

844 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
)

846 
u_ch¨
 
ch
;

847 
ngx_uöt_t
 
i
, 
n
;

848 
ngx_èbÀ_ñt_t
 *
hódî
;

850 
hódî
 = 
∑π
->
ñts
;

852 
i
 = 0; ; i++) {

854 i‡(
i
 >
∑π
->
√…s
) {

855 i‡(
∑π
->
√xt
 =
NULL
) {

859 
∑π
 =Ö¨t->
√xt
;

860 
hódî
 = 
∑π
->
ñts
;

861 
i
 = 0;

864 i‡(
hódî
[
i
].
hash
 == 0) {

868 
n
 = 0;Ç + 
¥efix
 < 
v¨
->
Àn
 &&Ç < 
hódî
[
i
].
key
.len;Ç++) {

869 
ch
 = 
hódî
[
i
].
key
.
d©a
[
n
];

871 i‡(
ch
 >= 'A' && ch <= 'Z') {

872 
ch
 |= 0x20;

874 } i‡(
ch
 == '-') {

875 
ch
 = '_';

878 i‡(
v¨
->
d©a
[
n
 + 
¥efix
] !
ch
) {

883 i‡(
n
 + 
¥efix
 =
v¨
->
Àn
 &&Ç =
hódî
[
i
].
key
.len) {

884 
v
->
Àn
 = 
hódî
[
i
].
vÆue
.len;

885 
v
->
vÆid
 = 1;

886 
v
->
no_ˇchóbÀ
 = 0;

887 
v
->
nŸ_found
 = 0;

888 
v
->
d©a
 = 
hódî
[
i
].
vÆue
.data;

890  
NGX_OK
;

894 
v
->
nŸ_found
 = 1;

896  
NGX_OK
;

897 
	}
}

900 
ngx_öt_t


901 
	$ngx_hâp_v¨übÀ_ªque°_löe
(
ngx_hâp_ªque°_t
 *
r
,

902 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

904 
u_ch¨
 *
p
, *
s
;

906 
s
 = 
r
->
ªque°_löe
.
d©a
;

908 i‡(
s
 =
NULL
) {

909 
s
 = 
r
->
ªque°_°¨t
;

911 i‡(
s
 =
NULL
) {

912 
v
->
nŸ_found
 = 1;

913  
NGX_OK
;

916 
p
 = 
s
;Ö < 
r
->
hódî_ö
->
œ°
;Ö++) {

917 i‡(*
p
 =
CR
 || *∞=
LF
) {

922 
r
->
ªque°_löe
.
Àn
 = 
p
 - 
s
;

923 
r
->
ªque°_löe
.
d©a
 = 
s
;

926 
v
->
Àn
 = 
r
->
ªque°_löe
.len;

927 
v
->
vÆid
 = 1;

928 
v
->
no_ˇchóbÀ
 = 0;

929 
v
->
nŸ_found
 = 0;

930 
v
->
d©a
 = 
s
;

932  
NGX_OK
;

933 
	}
}

936 
ngx_öt_t


937 
	$ngx_hâp_v¨übÀ_cookõ
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

938 
uöçå_t
 
d©a
)

940 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

942 
ngx_°r_t
 
cookõ
, 
s
;

944 
s
.
Àn
 = 
«me
->len - (("cookie_") - 1);

945 
s
.
d©a
 = 
«me
->data + ("cookie_") - 1;

947 i‡(
	`ngx_hâp_∑r£_mu…i_hódî_löes
(&
r
->
hódîs_ö
.
cookõs
, &
s
, &
cookõ
)

948 =
NGX_DECLINED
)

950 
v
->
nŸ_found
 = 1;

951  
NGX_OK
;

954 
v
->
Àn
 = 
cookõ
.len;

955 
v
->
vÆid
 = 1;

956 
v
->
no_ˇchóbÀ
 = 0;

957 
v
->
nŸ_found
 = 0;

958 
v
->
d©a
 = 
cookõ
.data;

960  
NGX_OK
;

961 
	}
}

964 
ngx_öt_t


965 
	$ngx_hâp_v¨übÀ_¨gumít
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

966 
uöçå_t
 
d©a
)

968 
ngx_°r_t
 *
«me
 = (ngx_°r_à*Ë
d©a
;

970 
u_ch¨
 *
¨g
;

971 
size_t
 
Àn
;

972 
ngx_°r_t
 
vÆue
;

974 
Àn
 = 
«me
->len - (("arg_") - 1);

975 
¨g
 = 
«me
->
d©a
 + ("arg_") - 1;

977 i‡(
	`ngx_hâp_¨g
(
r
, 
¨g
, 
Àn
, &
vÆue
Ë!
NGX_OK
) {

978 
v
->
nŸ_found
 = 1;

979  
NGX_OK
;

982 
v
->
d©a
 = 
vÆue
.data;

983 
v
->
Àn
 = 
vÆue
.len;

984 
v
->
vÆid
 = 1;

985 
v
->
no_ˇchóbÀ
 = 0;

986 
v
->
nŸ_found
 = 0;

988  
NGX_OK
;

989 
	}
}

992 #i‡(
NGX_HAVE_TCP_INFO
)

994 
ngx_öt_t


995 
	$ngx_hâp_v¨übÀ_t˝öfo
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

996 
uöçå_t
 
d©a
)

998 
t˝_öfo
 
ti
;

999 
sockÀn_t
 
Àn
;

1000 
uöt32_t
 
vÆue
;

1002 
Àn
 = (
t˝_öfo
);

1003 i‡(
	`gësock›t
(
r
->
c⁄√˘i⁄
->
fd
, 
IPPROTO_TCP
, 
TCP_INFO
, &
ti
, &
Àn
) == -1) {

1004 
v
->
nŸ_found
 = 1;

1005  
NGX_OK
;

1008 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT32_LEN
);

1009 i‡(
v
->
d©a
 =
NULL
) {

1010  
NGX_ERROR
;

1013 
d©a
) {

1015 
vÆue
 = 
ti
.
t˝i_πt
;

1019 
vÆue
 = 
ti
.
t˝i_πtv¨
;

1023 
vÆue
 = 
ti
.
t˝i_¢d_cwnd
;

1027 
vÆue
 = 
ti
.
t˝i_rcv_•a˚
;

1032 
vÆue
 = 0;

1036 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%uD", 
vÆue
) - v->data;

1037 
v
->
vÆid
 = 1;

1038 
v
->
no_ˇchóbÀ
 = 0;

1039 
v
->
nŸ_found
 = 0;

1041  
NGX_OK
;

1042 
	}
}

1047 
ngx_öt_t


1048 
	$ngx_hâp_v¨übÀ_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1049 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1051 
u_ch¨
 *
p
;

1053 i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth
) {

1054 
v
->
Àn
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.len;

1055 
v
->
d©a
 = 
r
->
hódîs_ö
.
c⁄ã¡_Àngth
->
vÆue
.data;

1056 
v
->
vÆid
 = 1;

1057 
v
->
no_ˇchóbÀ
 = 0;

1058 
v
->
nŸ_found
 = 0;

1060 } i‡(
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
 >= 0) {

1061 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1062 i‡(
p
 =
NULL
) {

1063  
NGX_ERROR
;

1066 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_ö
.
c⁄ã¡_Àngth_n
) -Ö;

1067 
v
->
d©a
 = 
p
;

1068 
v
->
vÆid
 = 1;

1069 
v
->
no_ˇchóbÀ
 = 0;

1070 
v
->
nŸ_found
 = 0;

1073 
v
->
nŸ_found
 = 1;

1076  
NGX_OK
;

1077 
	}
}

1080 
ngx_öt_t


1081 
	$ngx_hâp_v¨übÀ_ho°
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

1082 
uöçå_t
 
d©a
)

1084 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1086 i‡(
r
->
hódîs_ö
.
£rvî
.
Àn
) {

1087 
v
->
Àn
 = 
r
->
hódîs_ö
.
£rvî
.len;

1088 
v
->
d©a
 = 
r
->
hódîs_ö
.
£rvî
.data;

1091 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1093 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1094 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1097 
v
->
vÆid
 = 1;

1098 
v
->
no_ˇchóbÀ
 = 0;

1099 
v
->
nŸ_found
 = 0;

1101  
NGX_OK
;

1102 
	}
}

1105 
ngx_öt_t


1106 
	$ngx_hâp_v¨übÀ_bö¨y_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1107 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1109 
sockaddr_ö
 *
sö
;

1110 #i‡(
NGX_HAVE_INET6
)

1111 
sockaddr_ö6
 *
sö6
;

1114 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1116 #i‡(
NGX_HAVE_INET6
)

1117 
AF_INET6
:

1118 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1120 
v
->
Àn
 = (
ö6_addr
);

1121 
v
->
vÆid
 = 1;

1122 
v
->
no_ˇchóbÀ
 = 0;

1123 
v
->
nŸ_found
 = 0;

1124 
v
->
d©a
 = 
sö6
->
sö6_addr
.
s6_addr
;

1130 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1132 
v
->
Àn
 = (
ö_addr_t
);

1133 
v
->
vÆid
 = 1;

1134 
v
->
no_ˇchóbÀ
 = 0;

1135 
v
->
nŸ_found
 = 0;

1136 
v
->
d©a
 = (
u_ch¨
 *Ë&
sö
->
sö_addr
;

1141  
NGX_OK
;

1142 
	}
}

1145 
ngx_öt_t


1146 
	$ngx_hâp_v¨übÀ_ªmŸe_addr
(
ngx_hâp_ªque°_t
 *
r
,

1147 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1149 
v
->
Àn
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.len;

1150 
v
->
vÆid
 = 1;

1151 
v
->
no_ˇchóbÀ
 = 0;

1152 
v
->
nŸ_found
 = 0;

1153 
v
->
d©a
 = 
r
->
c⁄√˘i⁄
->
addr_ãxt
.data;

1155  
NGX_OK
;

1156 
	}
}

1159 
ngx_öt_t


1160 
	$ngx_hâp_v¨übÀ_ªmŸe_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1161 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1163 
ngx_uöt_t
 
p‹t
;

1164 
sockaddr_ö
 *
sö
;

1165 #i‡(
NGX_HAVE_INET6
)

1166 
sockaddr_ö6
 *
sö6
;

1169 
v
->
Àn
 = 0;

1170 
v
->
vÆid
 = 1;

1171 
v
->
no_ˇchóbÀ
 = 0;

1172 
v
->
nŸ_found
 = 0;

1174 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1175 i‡(
v
->
d©a
 =
NULL
) {

1176  
NGX_ERROR
;

1179 
r
->
c⁄√˘i⁄
->
sockaddr
->
ß_Ámûy
) {

1181 #i‡(
NGX_HAVE_INET6
)

1182 
AF_INET6
:

1183 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1184 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1189 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
sockaddr
;

1190 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1194 i‡(
p‹t
 > 0 &&Öort < 65536) {

1195 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1198  
NGX_OK
;

1199 
	}
}

1202 
ngx_öt_t


1203 
	$ngx_hâp_v¨übÀ_£rvî_addr
(
ngx_hâp_ªque°_t
 *
r
,

1204 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1206 
ngx_°r_t
 
s
;

1207 
u_ch¨
 
addr
[
NGX_SOCKADDR_STRLEN
];

1209 
s
.
Àn
 = 
NGX_SOCKADDR_STRLEN
;

1210 
s
.
d©a
 = 
addr
;

1212 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, &
s
, 0Ë!
NGX_OK
) {

1213  
NGX_ERROR
;

1216 
s
.
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, s.
Àn
);

1217 i‡(
s
.
d©a
 =
NULL
) {

1218  
NGX_ERROR
;

1221 
	`ngx_mem˝y
(
s
.
d©a
, 
addr
, s.
Àn
);

1223 
v
->
Àn
 = 
s
.len;

1224 
v
->
vÆid
 = 1;

1225 
v
->
no_ˇchóbÀ
 = 0;

1226 
v
->
nŸ_found
 = 0;

1227 
v
->
d©a
 = 
s
.data;

1229  
NGX_OK
;

1230 
	}
}

1233 
ngx_öt_t


1234 
	$ngx_hâp_v¨übÀ_£rvî_p‹t
(
ngx_hâp_ªque°_t
 *
r
,

1235 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1237 
ngx_uöt_t
 
p‹t
;

1238 
sockaddr_ö
 *
sö
;

1239 #i‡(
NGX_HAVE_INET6
)

1240 
sockaddr_ö6
 *
sö6
;

1243 
v
->
Àn
 = 0;

1244 
v
->
vÆid
 = 1;

1245 
v
->
no_ˇchóbÀ
 = 0;

1246 
v
->
nŸ_found
 = 0;

1248 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
r
->
c⁄√˘i⁄
, 
NULL
, 0Ë!
NGX_OK
) {

1249  
NGX_ERROR
;

1252 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("65535") - 1);

1253 i‡(
v
->
d©a
 =
NULL
) {

1254  
NGX_ERROR
;

1257 
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
->
ß_Ámûy
) {

1259 #i‡(
NGX_HAVE_INET6
)

1260 
AF_INET6
:

1261 
sö6
 = (
sockaddr_ö6
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1262 
p‹t
 = 
	`¡ohs
(
sö6
->
sö6_p‹t
);

1267 
sö
 = (
sockaddr_ö
 *Ë
r
->
c⁄√˘i⁄
->
loˇl_sockaddr
;

1268 
p‹t
 = 
	`¡ohs
(
sö
->
sö_p‹t
);

1272 i‡(
p‹t
 > 0 &&Öort < 65536) {

1273 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%ui", 
p‹t
) - v->data;

1276  
NGX_OK
;

1277 
	}
}

1280 
ngx_öt_t


1281 
	$ngx_hâp_v¨übÀ_scheme
(
ngx_hâp_ªque°_t
 *
r
,

1282 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1284 #i‡(
NGX_HTTP_SSL
)

1286 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1287 
v
->
Àn
 = ("https") - 1;

1288 
v
->
vÆid
 = 1;

1289 
v
->
no_ˇchóbÀ
 = 0;

1290 
v
->
nŸ_found
 = 0;

1291 
v
->
d©a
 = (
u_ch¨
 *) "https";

1293  
NGX_OK
;

1298 
v
->
Àn
 = ("http") - 1;

1299 
v
->
vÆid
 = 1;

1300 
v
->
no_ˇchóbÀ
 = 0;

1301 
v
->
nŸ_found
 = 0;

1302 
v
->
d©a
 = (
u_ch¨
 *) "http";

1304  
NGX_OK
;

1305 
	}
}

1308 
ngx_öt_t


1309 
	$ngx_hâp_v¨übÀ_hâps
(
ngx_hâp_ªque°_t
 *
r
,

1310 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1312 #i‡(
NGX_HTTP_SSL
)

1314 i‡(
r
->
c⁄√˘i⁄
->
s¶
) {

1315 
v
->
Àn
 = ("on") - 1;

1316 
v
->
vÆid
 = 1;

1317 
v
->
no_ˇchóbÀ
 = 0;

1318 
v
->
nŸ_found
 = 0;

1319 
v
->
d©a
 = (
u_ch¨
 *) "on";

1321  
NGX_OK
;

1326 *
v
 = 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

1328  
NGX_OK
;

1329 
	}
}

1332 
ngx_öt_t


1333 
	$ngx_hâp_v¨übÀ_is_¨gs
(
ngx_hâp_ªque°_t
 *
r
,

1334 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1336 
v
->
vÆid
 = 1;

1337 
v
->
no_ˇchóbÀ
 = 0;

1338 
v
->
nŸ_found
 = 0;

1340 i‡(
r
->
¨gs
.
Àn
 == 0) {

1341 
v
->
Àn
 = 0;

1342 
v
->
d©a
 = 
NULL
;

1343  
NGX_OK
;

1346 
v
->
Àn
 = 1;

1347 
v
->
d©a
 = (
u_ch¨
 *) "?";

1349  
NGX_OK
;

1350 
	}
}

1353 
ngx_öt_t


1354 
	$ngx_hâp_v¨übÀ_documít_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1355 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1357 
ngx_°r_t
 
∑th
;

1358 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1360 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1362 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1363 
v
->
Àn
 = 
˛cf
->
roŸ
.len;

1364 
v
->
vÆid
 = 1;

1365 
v
->
no_ˇchóbÀ
 = 0;

1366 
v
->
nŸ_found
 = 0;

1367 
v
->
d©a
 = 
˛cf
->
roŸ
.data;

1370 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 0,

1371 
˛cf
->
roŸ_vÆues
->
ñts
)

1372 =
NULL
)

1374  
NGX_ERROR
;

1377 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1378  
NGX_ERROR
;

1381 
v
->
Àn
 = 
∑th
.len;

1382 
v
->
vÆid
 = 1;

1383 
v
->
no_ˇchóbÀ
 = 0;

1384 
v
->
nŸ_found
 = 0;

1385 
v
->
d©a
 = 
∑th
.data;

1388  
NGX_OK
;

1389 
	}
}

1392 
ngx_öt_t


1393 
	$ngx_hâp_v¨übÀ_ªÆ∑th_roŸ
(
ngx_hâp_ªque°_t
 *
r
,

1394 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1396 
u_ch¨
 *
ªÆ
;

1397 
size_t
 
Àn
;

1398 
ngx_°r_t
 
∑th
;

1399 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1400 #i‡(
NGX_HAVE_MAX_PATH
)

1401 
u_ch¨
 
buf„r
[
NGX_MAX_PATH
];

1404 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1406 i‡(
˛cf
->
roŸ_Àngths
 =
NULL
) {

1407 
∑th
 = 
˛cf
->
roŸ
;

1410 i‡(
	`ngx_hâp_s¸ùt_run
(
r
, &
∑th
, 
˛cf
->
roŸ_Àngths
->
ñts
, 1,

1411 
˛cf
->
roŸ_vÆues
->
ñts
)

1412 =
NULL
)

1414  
NGX_ERROR
;

1417 
∑th
.
d©a
[∑th.
Àn
 - 1] = '\0';

1419 i‡(
	`ngx_c⁄f_fuŒ_«me
((
ngx_cy˛e_t
 *Ë
ngx_cy˛e
, &
∑th
, 0Ë!
NGX_OK
) {

1420  
NGX_ERROR
;

1424 #i‡(
NGX_HAVE_MAX_PATH
)

1425 
ªÆ
 = 
buf„r
;

1427 
ªÆ
 = 
NULL
;

1430 
ªÆ
 = 
	`ngx_ªÆ∑th
(
∑th
.
d©a
,Ñeal);

1432 i‡(
ªÆ
 =
NULL
) {

1433 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
r
->
c⁄√˘i⁄
->
log
, 
ngx_î∫o
,

1434 
ngx_ªÆ∑th_n
 " \"%s\" faûed", 
∑th
.
d©a
);

1435  
NGX_ERROR
;

1438 
Àn
 = 
	`ngx_°æí
(
ªÆ
);

1440 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1441 i‡(
v
->
d©a
 =
NULL
) {

1442 #i‡!(
NGX_HAVE_MAX_PATH
)

1443 
	`ngx_‰ì
(
ªÆ
);

1445  
NGX_ERROR
;

1448 
v
->
Àn
 =Üen;

1449 
v
->
vÆid
 = 1;

1450 
v
->
no_ˇchóbÀ
 = 0;

1451 
v
->
nŸ_found
 = 0;

1453 
	`ngx_mem˝y
(
v
->
d©a
, 
ªÆ
, 
Àn
);

1455 #i‡!(
NGX_HAVE_MAX_PATH
)

1456 
	`ngx_‰ì
(
ªÆ
);

1459  
NGX_OK
;

1460 
	}
}

1463 
ngx_öt_t


1464 
	$ngx_hâp_v¨übÀ_ªque°_fûíame
(
ngx_hâp_ªque°_t
 *
r
,

1465 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1467 
size_t
 
roŸ
;

1468 
ngx_°r_t
 
∑th
;

1470 i‡(
	`ngx_hâp_m≠_uri_to_∑th
(
r
, &
∑th
, &
roŸ
, 0Ë=
NULL
) {

1471  
NGX_ERROR
;

1476 
v
->
Àn
 = 
∑th
.len - 1;

1477 
v
->
vÆid
 = 1;

1478 
v
->
no_ˇchóbÀ
 = 0;

1479 
v
->
nŸ_found
 = 0;

1480 
v
->
d©a
 = 
∑th
.data;

1482  
NGX_OK
;

1483 
	}
}

1486 
ngx_öt_t


1487 
	$ngx_hâp_v¨übÀ_£rvî_«me
(
ngx_hâp_ªque°_t
 *
r
,

1488 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1490 
ngx_hâp_c‹e_§v_c⁄f_t
 *
cscf
;

1492 
cscf
 = 
	`ngx_hâp_gë_moduÀ_§v_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1494 
v
->
Àn
 = 
cscf
->
£rvî_«me
.len;

1495 
v
->
vÆid
 = 1;

1496 
v
->
no_ˇchóbÀ
 = 0;

1497 
v
->
nŸ_found
 = 0;

1498 
v
->
d©a
 = 
cscf
->
£rvî_«me
.data;

1500  
NGX_OK
;

1501 
	}
}

1504 
ngx_öt_t


1505 
	$ngx_hâp_v¨übÀ_ªque°_mëhod
(
ngx_hâp_ªque°_t
 *
r
,

1506 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1508 i‡(
r
->
maö
->
mëhod_«me
.
d©a
) {

1509 
v
->
Àn
 = 
r
->
maö
->
mëhod_«me
.len;

1510 
v
->
vÆid
 = 1;

1511 
v
->
no_ˇchóbÀ
 = 0;

1512 
v
->
nŸ_found
 = 0;

1513 
v
->
d©a
 = 
r
->
maö
->
mëhod_«me
.data;

1516 
v
->
nŸ_found
 = 1;

1519  
NGX_OK
;

1520 
	}
}

1523 
ngx_öt_t


1524 
	$ngx_hâp_v¨übÀ_ªmŸe_u£r
(
ngx_hâp_ªque°_t
 *
r
,

1525 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1527 
ngx_öt_t
 
rc
;

1529 
rc
 = 
	`ngx_hâp_auth_basic_u£r
(
r
);

1531 i‡(
rc
 =
NGX_DECLINED
) {

1532 
v
->
nŸ_found
 = 1;

1533  
NGX_OK
;

1536 i‡(
rc
 =
NGX_ERROR
) {

1537  
NGX_ERROR
;

1540 
v
->
Àn
 = 
r
->
hódîs_ö
.
u£r
.len;

1541 
v
->
vÆid
 = 1;

1542 
v
->
no_ˇchóbÀ
 = 0;

1543 
v
->
nŸ_found
 = 0;

1544 
v
->
d©a
 = 
r
->
hódîs_ö
.
u£r
.data;

1546  
NGX_OK
;

1547 
	}
}

1550 
ngx_öt_t


1551 
	$ngx_hâp_v¨übÀ_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1552 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1554 
u_ch¨
 *
p
;

1556 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1557 i‡(
p
 =
NULL
) {

1558  
NGX_ERROR
;

1561 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
c⁄√˘i⁄
->
£¡
) -Ö;

1562 
v
->
vÆid
 = 1;

1563 
v
->
no_ˇchóbÀ
 = 0;

1564 
v
->
nŸ_found
 = 0;

1565 
v
->
d©a
 = 
p
;

1567  
NGX_OK
;

1568 
	}
}

1571 
ngx_öt_t


1572 
	$ngx_hâp_v¨übÀ_body_byãs_£¡
(
ngx_hâp_ªque°_t
 *
r
,

1573 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1575 
off_t
 
£¡
;

1576 
u_ch¨
 *
p
;

1578 
£¡
 = 
r
->
c⁄√˘i⁄
->£¡ -Ñ->
hódî_size
;

1580 i‡(
£¡
 < 0) {

1581 
£¡
 = 0;

1584 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1585 i‡(
p
 =
NULL
) {

1586  
NGX_ERROR
;

1589 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
£¡
) -Ö;

1590 
v
->
vÆid
 = 1;

1591 
v
->
no_ˇchóbÀ
 = 0;

1592 
v
->
nŸ_found
 = 0;

1593 
v
->
d©a
 = 
p
;

1595  
NGX_OK
;

1596 
	}
}

1599 
ngx_öt_t


1600 
	$ngx_hâp_v¨übÀ_pùe
(
ngx_hâp_ªque°_t
 *
r
,

1601 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1603 
v
->
d©a
 = (
u_ch¨
 *Ë(
r
->
pùñöe
 ? "p" : ".");

1604 
v
->
Àn
 = 1;

1605 
v
->
vÆid
 = 1;

1606 
v
->
no_ˇchóbÀ
 = 0;

1607 
v
->
nŸ_found
 = 0;

1609  
NGX_OK
;

1610 
	}
}

1613 
ngx_öt_t


1614 
	$ngx_hâp_v¨übÀ_°©us
(
ngx_hâp_ªque°_t
 *
r
,

1615 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1617 
ngx_uöt_t
 
°©us
;

1619 
v
->
d©a
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

1620 i‡(
v
->
d©a
 =
NULL
) {

1621  
NGX_ERROR
;

1624 i‡(
r
->
îr_°©us
) {

1625 
°©us
 = 
r
->
îr_°©us
;

1627 } i‡(
r
->
hódîs_out
.
°©us
) {

1628 
°©us
 = 
r
->
hódîs_out
.status;

1630 } i‡(
r
->
hâp_vîsi⁄
 =
NGX_HTTP_VERSION_9
) {

1631 
°©us
 = 9;

1634 
°©us
 = 0;

1637 
v
->
Àn
 = 
	`ngx_•rötf
(v->
d©a
, "%03ui", 
°©us
) - v->data;

1638 
v
->
vÆid
 = 1;

1639 
v
->
no_ˇchóbÀ
 = 0;

1640 
v
->
nŸ_found
 = 0;

1642  
NGX_OK
;

1643 
	}
}

1646 
ngx_öt_t


1647 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_ty≥
(
ngx_hâp_ªque°_t
 *
r
,

1648 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1650 i‡(
r
->
hódîs_out
.
c⁄ã¡_ty≥
.
Àn
) {

1651 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.len;

1652 
v
->
vÆid
 = 1;

1653 
v
->
no_ˇchóbÀ
 = 0;

1654 
v
->
nŸ_found
 = 0;

1655 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_ty≥
.data;

1658 
v
->
nŸ_found
 = 1;

1661  
NGX_OK
;

1662 
	}
}

1665 
ngx_öt_t


1666 
	$ngx_hâp_v¨übÀ_£¡_c⁄ã¡_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1667 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1669 
u_ch¨
 *
p
;

1671 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth
) {

1672 
v
->
Àn
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.len;

1673 
v
->
vÆid
 = 1;

1674 
v
->
no_ˇchóbÀ
 = 0;

1675 
v
->
nŸ_found
 = 0;

1676 
v
->
d©a
 = 
r
->
hódîs_out
.
c⁄ã¡_Àngth
->
vÆue
.data;

1678  
NGX_OK
;

1681 i‡(
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
 >= 0) {

1682 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1683 i‡(
p
 =
NULL
) {

1684  
NGX_ERROR
;

1687 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
hódîs_out
.
c⁄ã¡_Àngth_n
) -Ö;

1688 
v
->
vÆid
 = 1;

1689 
v
->
no_ˇchóbÀ
 = 0;

1690 
v
->
nŸ_found
 = 0;

1691 
v
->
d©a
 = 
p
;

1693  
NGX_OK
;

1696 
v
->
nŸ_found
 = 1;

1698  
NGX_OK
;

1699 
	}
}

1702 
ngx_öt_t


1703 
	$ngx_hâp_v¨übÀ_£¡_loˇti⁄
(
ngx_hâp_ªque°_t
 *
r
,

1704 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1706 
ngx_°r_t
 
«me
;

1708 i‡(
r
->
hódîs_out
.
loˇti⁄
) {

1709 
v
->
Àn
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.len;

1710 
v
->
vÆid
 = 1;

1711 
v
->
no_ˇchóbÀ
 = 0;

1712 
v
->
nŸ_found
 = 0;

1713 
v
->
d©a
 = 
r
->
hódîs_out
.
loˇti⁄
->
vÆue
.data;

1715  
NGX_OK
;

1718 
	`ngx_°r_£t
(&
«me
, "sent_http_location");

1720  
	`ngx_hâp_v¨übÀ_unknown_hódî
(
v
, &
«me
,

1721 &
r
->
hódîs_out
.
hódîs
.
∑π
,

1723 
	}
}

1726 
ngx_öt_t


1727 
	$ngx_hâp_v¨übÀ_£¡_œ°_modifõd
(
ngx_hâp_ªque°_t
 *
r
,

1728 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1730 
u_ch¨
 *
p
;

1732 i‡(
r
->
hódîs_out
.
œ°_modifõd
) {

1733 
v
->
Àn
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.len;

1734 
v
->
vÆid
 = 1;

1735 
v
->
no_ˇchóbÀ
 = 0;

1736 
v
->
nŸ_found
 = 0;

1737 
v
->
d©a
 = 
r
->
hódîs_out
.
œ°_modifõd
->
vÆue
.data;

1739  
NGX_OK
;

1742 i‡(
r
->
hódîs_out
.
œ°_modifõd_time
 >= 0) {

1743 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
,

1745 i‡(
p
 =
NULL
) {

1746  
NGX_ERROR
;

1749 
v
->
Àn
 = 
	`ngx_hâp_time
(
p
, 
r
->
hódîs_out
.
œ°_modifõd_time
) -Ö;

1750 
v
->
vÆid
 = 1;

1751 
v
->
no_ˇchóbÀ
 = 0;

1752 
v
->
nŸ_found
 = 0;

1753 
v
->
d©a
 = 
p
;

1755  
NGX_OK
;

1758 
v
->
nŸ_found
 = 1;

1760  
NGX_OK
;

1761 
	}
}

1764 
ngx_öt_t


1765 
	$ngx_hâp_v¨übÀ_£¡_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

1766 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1768 
size_t
 
Àn
;

1769 *
p
;

1771 i‡(
r
->
hódîs_out
.
°©us
 =
NGX_HTTP_SWITCHING_PROTOCOLS
) {

1772 
Àn
 = ("upgrade") - 1;

1773 
p
 = "upgrade";

1775 } i‡(
r
->
kì∑live
) {

1776 
Àn
 = ("keep-alive") - 1;

1777 
p
 = "keep-alive";

1780 
Àn
 = ("close") - 1;

1781 
p
 = "close";

1784 
v
->
Àn
 =Üen;

1785 
v
->
vÆid
 = 1;

1786 
v
->
no_ˇchóbÀ
 = 0;

1787 
v
->
nŸ_found
 = 0;

1788 
v
->
d©a
 = (
u_ch¨
 *Ë
p
;

1790  
NGX_OK
;

1791 
	}
}

1794 
ngx_öt_t


1795 
	$ngx_hâp_v¨übÀ_£¡_kìp_Æive
(
ngx_hâp_ªque°_t
 *
r
,

1796 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1798 
u_ch¨
 *
p
;

1799 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

1801 i‡(
r
->
kì∑live
) {

1802 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

1804 i‡(
˛cf
->
kì∑live_hódî
) {

1806 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, ("timeout="Ë- 1 + 
NGX_TIME_T_LEN
);

1807 i‡(
p
 =
NULL
) {

1808  
NGX_ERROR
;

1811 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "timeout=%T", 
˛cf
->
kì∑live_hódî
) -Ö;

1812 
v
->
vÆid
 = 1;

1813 
v
->
no_ˇchóbÀ
 = 0;

1814 
v
->
nŸ_found
 = 0;

1815 
v
->
d©a
 = 
p
;

1817  
NGX_OK
;

1821 
v
->
nŸ_found
 = 1;

1823  
NGX_OK
;

1824 
	}
}

1827 
ngx_öt_t


1828 
	$ngx_hâp_v¨übÀ_£¡_å™s„r_ícodög
(
ngx_hâp_ªque°_t
 *
r
,

1829 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1831 i‡(
r
->
chunked
) {

1832 
v
->
Àn
 = ("chunked") - 1;

1833 
v
->
vÆid
 = 1;

1834 
v
->
no_ˇchóbÀ
 = 0;

1835 
v
->
nŸ_found
 = 0;

1836 
v
->
d©a
 = (
u_ch¨
 *) "chunked";

1839 
v
->
nŸ_found
 = 1;

1842  
NGX_OK
;

1843 
	}
}

1846 
ngx_öt_t


1847 
	$ngx_hâp_v¨übÀ_ªque°_com∂ëi⁄
(
ngx_hâp_ªque°_t
 *
r
,

1848 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1850 i‡(
r
->
ªque°_com∂ëe
) {

1851 
v
->
Àn
 = 2;

1852 
v
->
vÆid
 = 1;

1853 
v
->
no_ˇchóbÀ
 = 0;

1854 
v
->
nŸ_found
 = 0;

1855 
v
->
d©a
 = (
u_ch¨
 *) "OK";

1857  
NGX_OK
;

1860 
v
->
Àn
 = 0;

1861 
v
->
vÆid
 = 1;

1862 
v
->
no_ˇchóbÀ
 = 0;

1863 
v
->
nŸ_found
 = 0;

1864 
v
->
d©a
 = (
u_ch¨
 *) "";

1866  
NGX_OK
;

1867 
	}
}

1870 
ngx_öt_t


1871 
	$ngx_hâp_v¨übÀ_ªque°_body
(
ngx_hâp_ªque°_t
 *
r
,

1872 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1874 
u_ch¨
 *
p
;

1875 
size_t
 
Àn
;

1876 
ngx_buf_t
 *
buf
;

1877 
ngx_chaö_t
 *
˛
;

1879 i‡(
r
->
ªque°_body
 =
NULL


1880 || 
r
->
ªque°_body
->
bufs
 =
NULL


1881 || 
r
->
ªque°_body
->
ãmp_fûe
)

1883 
v
->
nŸ_found
 = 1;

1885  
NGX_OK
;

1888 
˛
 = 
r
->
ªque°_body
->
bufs
;

1889 
buf
 = 
˛
->buf;

1891 i‡(
˛
->
√xt
 =
NULL
) {

1892 
v
->
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1893 
v
->
vÆid
 = 1;

1894 
v
->
no_ˇchóbÀ
 = 0;

1895 
v
->
nŸ_found
 = 0;

1896 
v
->
d©a
 = 
buf
->
pos
;

1898  
NGX_OK
;

1901 
Àn
 = 
buf
->
œ°
 - buf->
pos
;

1902 
˛
 = cl->
√xt
;

1904  ; 
˛
; c»˛->
√xt
) {

1905 
buf
 = 
˛
->buf;

1906 
Àn
 +
buf
->
œ°
 - buf->
pos
;

1909 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

1910 i‡(
p
 =
NULL
) {

1911  
NGX_ERROR
;

1914 
v
->
d©a
 = 
p
;

1915 
˛
 = 
r
->
ªque°_body
->
bufs
;

1917  ; 
˛
; c»˛->
√xt
) {

1918 
buf
 = 
˛
->buf;

1919 
p
 = 
	`ngx_˝ymem
’, 
buf
->
pos
, buf->
œ°
 - buf->pos);

1922 
v
->
Àn
 =Üen;

1923 
v
->
vÆid
 = 1;

1924 
v
->
no_ˇchóbÀ
 = 0;

1925 
v
->
nŸ_found
 = 0;

1927  
NGX_OK
;

1928 
	}
}

1931 
ngx_öt_t


1932 
	$ngx_hâp_v¨übÀ_ªque°_body_fûe
(
ngx_hâp_ªque°_t
 *
r
,

1933 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1935 i‡(
r
->
ªque°_body
 =
NULL
 ||Ñ->ªque°_body->
ãmp_fûe
 == NULL) {

1936 
v
->
nŸ_found
 = 1;

1938  
NGX_OK
;

1941 
v
->
Àn
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.len;

1942 
v
->
vÆid
 = 1;

1943 
v
->
no_ˇchóbÀ
 = 0;

1944 
v
->
nŸ_found
 = 0;

1945 
v
->
d©a
 = 
r
->
ªque°_body
->
ãmp_fûe
->
fûe
.
«me
.data;

1947  
NGX_OK
;

1948 
	}
}

1951 
ngx_öt_t


1952 
	$ngx_hâp_v¨übÀ_ªque°_Àngth
(
ngx_hâp_ªque°_t
 *
r
,

1953 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1955 
u_ch¨
 *
p
;

1957 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_OFF_T_LEN
);

1958 i‡(
p
 =
NULL
) {

1959  
NGX_ERROR
;

1962 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%O", 
r
->
ªque°_Àngth
) -Ö;

1963 
v
->
vÆid
 = 1;

1964 
v
->
no_ˇchóbÀ
 = 0;

1965 
v
->
nŸ_found
 = 0;

1966 
v
->
d©a
 = 
p
;

1968  
NGX_OK
;

1969 
	}
}

1972 
ngx_öt_t


1973 
	$ngx_hâp_v¨übÀ_ªque°_time
(
ngx_hâp_ªque°_t
 *
r
,

1974 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

1976 
u_ch¨
 *
p
;

1977 
ngx_time_t
 *
ç
;

1978 
ngx_m£c_öt_t
 
ms
;

1980 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

1981 i‡(
p
 =
NULL
) {

1982  
NGX_ERROR
;

1985 
ç
 = 
	`ngx_timeofday
();

1987 
ms
 = (
ngx_m£c_öt_t
)

1988 ((
ç
->
£c
 - 
r
->
°¨t_£c
Ë* 1000 + (ç->
m£c
 -Ñ->
°¨t_m£c
));

1989 
ms
 = 
	`ngx_max
(ms, 0);

1991 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ms
 / 1000, ms % 1000) -Ö;

1992 
v
->
vÆid
 = 1;

1993 
v
->
no_ˇchóbÀ
 = 0;

1994 
v
->
nŸ_found
 = 0;

1995 
v
->
d©a
 = 
p
;

1997  
NGX_OK
;

1998 
	}
}

2001 
ngx_öt_t


2002 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄
(
ngx_hâp_ªque°_t
 *
r
,

2003 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2005 
u_ch¨
 *
p
;

2007 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_ATOMIC_T_LEN
);

2008 i‡(
p
 =
NULL
) {

2009  
NGX_ERROR
;

2012 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%uA", 
r
->
c⁄√˘i⁄
->
numbî
) -Ö;

2013 
v
->
vÆid
 = 1;

2014 
v
->
no_ˇchóbÀ
 = 0;

2015 
v
->
nŸ_found
 = 0;

2016 
v
->
d©a
 = 
p
;

2018  
NGX_OK
;

2019 
	}
}

2022 
ngx_öt_t


2023 
	$ngx_hâp_v¨übÀ_c⁄√˘i⁄_ªque°s
(
ngx_hâp_ªque°_t
 *
r
,

2024 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2026 
u_ch¨
 *
p
;

2028 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT_T_LEN
);

2029 i‡(
p
 =
NULL
) {

2030  
NGX_ERROR
;

2033 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%ui", 
r
->
c⁄√˘i⁄
->
ªque°s
) -Ö;

2034 
v
->
vÆid
 = 1;

2035 
v
->
no_ˇchóbÀ
 = 0;

2036 
v
->
nŸ_found
 = 0;

2037 
v
->
d©a
 = 
p
;

2039  
NGX_OK
;

2040 
	}
}

2043 
ngx_öt_t


2044 
	$ngx_hâp_v¨übÀ_ngöx_vîsi⁄
(
ngx_hâp_ªque°_t
 *
r
,

2045 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2047 
v
->
Àn
 = (
NGINX_VERSION
) - 1;

2048 
v
->
vÆid
 = 1;

2049 
v
->
no_ˇchóbÀ
 = 0;

2050 
v
->
nŸ_found
 = 0;

2051 
v
->
d©a
 = (
u_ch¨
 *Ë
NGINX_VERSION
;

2053  
NGX_OK
;

2054 
	}
}

2057 
ngx_öt_t


2058 
	$ngx_hâp_v¨übÀ_ho°«me
(
ngx_hâp_ªque°_t
 *
r
,

2059 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2061 
v
->
Àn
 = 
ngx_cy˛e
->
ho°«me
.len;

2062 
v
->
vÆid
 = 1;

2063 
v
->
no_ˇchóbÀ
 = 0;

2064 
v
->
nŸ_found
 = 0;

2065 
v
->
d©a
 = 
ngx_cy˛e
->
ho°«me
.data;

2067  
NGX_OK
;

2068 
	}
}

2071 
ngx_öt_t


2072 
	$ngx_hâp_v¨übÀ_pid
(
ngx_hâp_ªque°_t
 *
r
,

2073 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2075 
u_ch¨
 *
p
;

2077 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_INT64_LEN
);

2078 i‡(
p
 =
NULL
) {

2079  
NGX_ERROR
;

2082 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%P", 
ngx_pid
) -Ö;

2083 
v
->
vÆid
 = 1;

2084 
v
->
no_ˇchóbÀ
 = 0;

2085 
v
->
nŸ_found
 = 0;

2086 
v
->
d©a
 = 
p
;

2088  
NGX_OK
;

2089 
	}
}

2092 
ngx_öt_t


2093 
	$ngx_hâp_v¨übÀ_m£c
(
ngx_hâp_ªque°_t
 *
r
,

2094 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2096 
u_ch¨
 *
p
;

2097 
ngx_time_t
 *
ç
;

2099 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
NGX_TIME_T_LEN
 + 4);

2100 i‡(
p
 =
NULL
) {

2101  
NGX_ERROR
;

2104 
ç
 = 
	`ngx_timeofday
();

2106 
v
->
Àn
 = 
	`ngx_•rötf
(
p
, "%T.%03M", 
ç
->
£c
,Åp->
m£c
) -Ö;

2107 
v
->
vÆid
 = 1;

2108 
v
->
no_ˇchóbÀ
 = 0;

2109 
v
->
nŸ_found
 = 0;

2110 
v
->
d©a
 = 
p
;

2112  
NGX_OK
;

2113 
	}
}

2116 
ngx_öt_t


2117 
	$ngx_hâp_v¨übÀ_time_iso8601
(
ngx_hâp_ªque°_t
 *
r
,

2118 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2120 
u_ch¨
 *
p
;

2122 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2123 i‡(
p
 =
NULL
) {

2124  
NGX_ERROR
;

2127 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_iso8601
.
d©a
,

2128 
ngx_ˇched_hâp_log_iso8601
.
Àn
);

2130 
v
->
Àn
 = 
ngx_ˇched_hâp_log_iso8601
.len;

2131 
v
->
vÆid
 = 1;

2132 
v
->
no_ˇchóbÀ
 = 0;

2133 
v
->
nŸ_found
 = 0;

2134 
v
->
d©a
 = 
p
;

2136  
NGX_OK
;

2137 
	}
}

2140 
ngx_öt_t


2141 
	$ngx_hâp_v¨übÀ_time_loˇl
(
ngx_hâp_ªque°_t
 *
r
,

2142 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
, 
uöçå_t
 
d©a
)

2144 
u_ch¨
 *
p
;

2146 
p
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
ngx_ˇched_hâp_log_time
.
Àn
);

2147 i‡(
p
 =
NULL
) {

2148  
NGX_ERROR
;

2151 
	`ngx_mem˝y
(
p
, 
ngx_ˇched_hâp_log_time
.
d©a
,Çgx_ˇched_hâp_log_time.
Àn
);

2153 
v
->
Àn
 = 
ngx_ˇched_hâp_log_time
.len;

2154 
v
->
vÆid
 = 1;

2155 
v
->
no_ˇchóbÀ
 = 0;

2156 
v
->
nŸ_found
 = 0;

2157 
v
->
d©a
 = 
p
;

2159  
NGX_OK
;

2160 
	}
}

2164 
	$ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
, 
ngx_°r_t
 *
m©ch
)

2166 *
vÆue
;

2167 
u_ch¨
 *
low
;

2168 
size_t
 
Àn
;

2169 
ngx_uöt_t
 
key
;

2171 
Àn
 = 
m©ch
->len;

2173 i‡(
Àn
) {

2174 
low
 = 
	`ngx_≤Æloc
(
r
->
poﬁ
, 
Àn
);

2175 i‡(
low
 =
NULL
) {

2176  
NULL
;

2180 
low
 = 
NULL
;

2183 
key
 = 
	`ngx_hash_°æow
(
low
, 
m©ch
->
d©a
, 
Àn
);

2185 
vÆue
 = 
	`ngx_hash_föd_comböed
(&
m≠
->
hash
, 
key
, 
low
, 
Àn
);

2186 i‡(
vÆue
) {

2187  
vÆue
;

2190 #i‡(
NGX_PCRE
)

2192 i‡(
Àn
 && 
m≠
->
ƒegex
) {

2193 
ngx_öt_t
 
n
;

2194 
ngx_uöt_t
 
i
;

2195 
ngx_hâp_m≠_ªgex_t
 *
ªg
;

2197 
ªg
 = 
m≠
->
ªgex
;

2199 
i
 = 0; i < 
m≠
->
ƒegex
; i++) {

2201 
n
 = 
	`ngx_hâp_ªgex_exec
(
r
, 
ªg
[
i
].
ªgex
, 
m©ch
);

2203 i‡(
n
 =
NGX_OK
) {

2204  
ªg
[
i
].
vÆue
;

2207 i‡(
n
 =
NGX_DECLINED
) {

2213  
NULL
;

2219  
NULL
;

2220 
	}
}

2223 #i‡(
NGX_PCRE
)

2225 
ngx_öt_t


2226 
	$ngx_hâp_v¨übÀ_nŸ_found
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

2227 
uöçå_t
 
d©a
)

2229 
v
->
nŸ_found
 = 1;

2230  
NGX_OK
;

2231 
	}
}

2234 
ngx_hâp_ªgex_t
 *

2235 
	$ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
, 
ngx_ªgex_compûe_t
 *
rc
)

2237 
u_ch¨
 *
p
;

2238 
size_t
 
size
;

2239 
ngx_°r_t
 
«me
;

2240 
ngx_uöt_t
 
i
, 
n
;

2241 
ngx_hâp_v¨übÀ_t
 *
v
;

2242 
ngx_hâp_ªgex_t
 *
ª
;

2243 
ngx_hâp_ªgex_v¨übÀ_t
 *
rv
;

2244 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2246 
rc
->
poﬁ
 = 
cf
->pool;

2248 i‡(
	`ngx_ªgex_compûe
(
rc
Ë!
NGX_OK
) {

2249 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0, "%V", &
rc
->
îr
);

2250  
NULL
;

2253 
ª
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_hâp_ªgex_t
));

2254 i‡(
ª
 =
NULL
) {

2255  
NULL
;

2258 
ª
->
ªgex
 = 
rc
->regex;

2259 
ª
->
nˇ±uªs
 = 
rc
->
ˇ±uªs
;

2261 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2262 
cmcf
->
nˇ±uªs
 = 
	`ngx_max
(cmcf->nˇ±uªs, 
ª
->ncaptures);

2264 
n
 = (
ngx_uöt_t
Ë
rc
->
«med_ˇ±uªs
;

2266 i‡(
n
 == 0) {

2267  
ª
;

2270 
rv
 = 
	`ngx_∑Œoc
(
rc
->
poﬁ
, 
n
 * (
ngx_hâp_ªgex_v¨übÀ_t
));

2271 i‡(
rv
 =
NULL
) {

2272  
NULL
;

2275 
ª
->
v¨übÀs
 = 
rv
;

2276 
ª
->
nv¨übÀs
 = 
n
;

2277 
ª
->
«me
 = 
rc
->
∑âîn
;

2279 
size
 = 
rc
->
«me_size
;

2280 
p
 = 
rc
->
«mes
;

2282 
i
 = 0; i < 
n
; i++) {

2283 
rv
[
i
].
ˇ±uª
 = 2 * ((
p
[0] << 8) +Ö[1]);

2285 
«me
.
d©a
 = &
p
[2];

2286 
«me
.
Àn
 = 
	`ngx_°æí
“ame.
d©a
);

2288 
v
 = 
	`ngx_hâp_add_v¨übÀ
(
cf
, &
«me
, 
NGX_HTTP_VAR_CHANGEABLE
);

2289 i‡(
v
 =
NULL
) {

2290  
NULL
;

2293 
rv
[
i
].
ödex
 = 
	`ngx_hâp_gë_v¨übÀ_ödex
(
cf
, &
«me
);

2294 i‡(
rv
[
i
].
ödex
 =
NGX_ERROR
) {

2295  
NULL
;

2298 
v
->
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_nŸ_found
;

2300 
p
 +
size
;

2303  
ª
;

2304 
	}
}

2307 
ngx_öt_t


2308 
	$ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
, 
ngx_°r_t
 *
s
)

2310 
ngx_öt_t
 
rc
, 
ödex
;

2311 
ngx_uöt_t
 
i
, 
n
, 
Àn
;

2312 
ngx_hâp_v¨übÀ_vÆue_t
 *
vv
;

2313 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2315 
cmcf
 = 
	`ngx_hâp_gë_moduÀ_maö_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

2317 i‡(
ª
->
nˇ±uªs
) {

2318 
Àn
 = 
cmcf
->
nˇ±uªs
;

2320 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2321 
r
->
ˇ±uªs
 = 
	`ngx_∑Œoc
‘->
poﬁ
, 
Àn
 * ());

2322 i‡(
r
->
ˇ±uªs
 =
NULL
) {

2323  
NGX_ERROR
;

2328 
Àn
 = 0;

2331 
rc
 = 
	`ngx_ªgex_exec
(
ª
->
ªgex
, 
s
, 
r
->
ˇ±uªs
, 
Àn
);

2333 i‡(
rc
 =
NGX_REGEX_NO_MATCHED
) {

2334  
NGX_DECLINED
;

2337 i‡(
rc
 < 0) {

2338 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2339 
ngx_ªgex_exec_n
 " failed: %i on \"%V\" using \"%V\"",

2340 
rc
, 
s
, &
ª
->
«me
);

2341  
NGX_ERROR
;

2344 
i
 = 0; i < 
ª
->
nv¨übÀs
; i++) {

2346 
n
 = 
ª
->
v¨übÀs
[
i
].
ˇ±uª
;

2347 
ödex
 = 
ª
->
v¨übÀs
[
i
].index;

2348 
vv
 = &
r
->
v¨übÀs
[
ödex
];

2350 
vv
->
Àn
 = 
r
->
ˇ±uªs
[
n
 + 1] -Ñ->captures[n];

2351 
vv
->
vÆid
 = 1;

2352 
vv
->
no_ˇchóbÀ
 = 0;

2353 
vv
->
nŸ_found
 = 0;

2354 
vv
->
d©a
 = &
s
->d©a[
r
->
ˇ±uªs
[
n
]];

2356 #i‡(
NGX_DEBUG
)

2358 
ngx_hâp_v¨übÀ_t
 *
v
;

2360 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2362 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
r
->
c⁄√˘i⁄
->
log
, 0,

2364 &
v
[
ödex
].
«me
, 
vv
->
Àn
, vv->
d©a
);

2369 
r
->
nˇ±uªs
 = 
rc
 * 2;

2370 
r
->
ˇ±uªs_d©a
 = 
s
->
d©a
;

2372  
NGX_OK
;

2373 
	}
}

2378 
ngx_öt_t


2379 
	$ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
)

2381 
ngx_öt_t
 
rc
;

2382 
ngx_hâp_v¨übÀ_t
 *
cv
, *
v
;

2383 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2385 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2387 
cmcf
->
v¨übÀs_keys
 = 
	`ngx_pˇŒoc
(
cf
->
ãmp_poﬁ
,

2388 (
ngx_hash_keys_¨øys_t
));

2389 i‡(
cmcf
->
v¨übÀs_keys
 =
NULL
) {

2390  
NGX_ERROR
;

2393 
cmcf
->
v¨übÀs_keys
->
poﬁ
 = 
cf
->pool;

2394 
cmcf
->
v¨übÀs_keys
->
ãmp_poﬁ
 = 
cf
->
poﬁ
;

2396 i‡(
	`ngx_hash_keys_¨øy_öô
(
cmcf
->
v¨übÀs_keys
, 
NGX_HASH_SMALL
)

2397 !
NGX_OK
)

2399  
NGX_ERROR
;

2402 
cv
 = 
ngx_hâp_c‹e_v¨übÀs
; cv->
«me
.
Àn
; cv++) {

2403 
v
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_hâp_v¨übÀ_t
));

2404 i‡(
v
 =
NULL
) {

2405  
NGX_ERROR
;

2408 *
v
 = *
cv
;

2410 
rc
 = 
	`ngx_hash_add_key
(
cmcf
->
v¨übÀs_keys
, &
v
->
«me
, v,

2411 
NGX_HASH_READONLY_KEY
);

2413 i‡(
rc
 =
NGX_OK
) {

2417 i‡(
rc
 =
NGX_BUSY
) {

2418 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

2419 "c⁄Êi˘ög v¨übÀÇamê\"%V\"", &
v
->
«me
);

2422  
NGX_ERROR
;

2425  
NGX_OK
;

2426 
	}
}

2429 
ngx_öt_t


2430 
	$ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
)

2432 
ngx_uöt_t
 
i
, 
n
;

2433 
ngx_hash_key_t
 *
key
;

2434 
ngx_hash_öô_t
 
hash
;

2435 
ngx_hâp_v¨übÀ_t
 *
v
, *
av
;

2436 
ngx_hâp_c‹e_maö_c⁄f_t
 *
cmcf
;

2440 
cmcf
 = 
	`ngx_hâp_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_hâp_c‹e_moduÀ
);

2442 
v
 = 
cmcf
->
v¨übÀs
.
ñts
;

2443 
key
 = 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
;

2445 
i
 = 0; i < 
cmcf
->
v¨übÀs
.
√…s
; i++) {

2447 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2449 
av
 = 
key
[
n
].
vÆue
;

2451 i‡(
av
->
gë_h™dÀr


2452 && 
v
[
i
].
«me
.
Àn
 =
key
[
n
].key.len

2453 && 
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, 
key
[
n
].key.d©a, v[i].«me.
Àn
)

2456 
v
[
i
].
gë_h™dÀr
 = 
av
->get_handler;

2457 
v
[
i
].
d©a
 = 
av
->data;

2459 
av
->
Êags
 |
NGX_HTTP_VAR_INDEXED
;

2460 
v
[
i
].
Êags
 = 
av
->flags;

2462 
av
->
ödex
 = 
i
;

2464 
√xt
;

2468 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "http_", 5) == 0) {

2469 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_ö
;

2470 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2475 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "sent_http_", 10) == 0) {

2476 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_unknown_hódî_out
;

2477 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2482 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "upstream_http_", 14) == 0) {

2483 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_up°ªam_hódî_v¨übÀ
;

2484 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2485 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2490 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "cookie_", 7) == 0) {

2491 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_cookõ
;

2492 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2497 i‡(
	`ngx_°∫cmp
(
v
[
i
].
«me
.
d©a
, "arg_", 4) == 0) {

2498 
v
[
i
].
gë_h™dÀr
 = 
ngx_hâp_v¨übÀ_¨gumít
;

2499 
v
[
i
].
d©a
 = (
uöçå_t
Ë&v[i].
«me
;

2500 
v
[
i
].
Êags
 = 
NGX_HTTP_VAR_NOCACHEABLE
;

2505 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

2506 "unknow¿\"%V\" v¨übÀ", &
v
[
i
].
«me
);

2508  
NGX_ERROR
;

2510 
√xt
:

2515 
n
 = 0;Ç < 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
;Ç++) {

2516 
av
 = 
key
[
n
].
vÆue
;

2518 i‡(
av
->
Êags
 & 
NGX_HTTP_VAR_NOHASH
) {

2519 
key
[
n
].key.
d©a
 = 
NULL
;

2524 
hash
.hash = &
cmcf
->
v¨übÀs_hash
;

2525 
hash
.
key
 = 
ngx_hash_key
;

2526 
hash
.
max_size
 = 
cmcf
->
v¨übÀs_hash_max_size
;

2527 
hash
.
buckë_size
 = 
cmcf
->
v¨übÀs_hash_buckë_size
;

2528 
hash
.
«me
 = "variables_hash";

2529 
hash
.
poﬁ
 = 
cf
->pool;

2530 
hash
.
ãmp_poﬁ
 = 
NULL
;

2532 i‡(
	`ngx_hash_öô
(&
hash
, 
cmcf
->
v¨übÀs_keys
->
keys
.
ñts
,

2533 
cmcf
->
v¨übÀs_keys
->
keys
.
√…s
)

2534 !
NGX_OK
)

2536  
NGX_ERROR
;

2539 
cmcf
->
v¨übÀs_keys
 = 
NULL
;

2541  
NGX_OK
;

2542 
	}
}

	@src/http/ngx_http_variables.h

8 #i‚de‡
_NGX_HTTP_VARIABLES_H_INCLUDED_


9 
	#_NGX_HTTP_VARIABLES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_hâp.h
>

17 
ngx_v¨übÀ_vÆue_t
 
	tngx_hâp_v¨übÀ_vÆue_t
;

19 
	#ngx_hâp_v¨übÀ
(
v
Ë{ (vË- 1, 1, 0, 0, 0, (
u_ch¨
 *Ëv }

	)

21 
ngx_hâp_v¨übÀ_s
 
	tngx_hâp_v¨übÀ_t
;

23 (*
	tngx_hâp_£t_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

24 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

25 
	$ngx_öt_t
 (*
	tngx_hâp_gë_v¨übÀ_±
Ë(
	tngx_hâp_ªque°_t
 *
	tr
,

26 
	tngx_hâp_v¨übÀ_vÆue_t
 *
	tv
, 
	tuöçå_t
 
	td©a
);

29 
	#NGX_HTTP_VAR_CHANGEABLE
 1

	)

30 
	#NGX_HTTP_VAR_NOCACHEABLE
 2

	)

31 
	#NGX_HTTP_VAR_INDEXED
 4

	)

32 
	#NGX_HTTP_VAR_NOHASH
 8

	)

35 
	sngx_hâp_v¨übÀ_s
 {

36 
ngx_°r_t
 
«me
;

37 
ngx_hâp_£t_v¨übÀ_±
 
£t_h™dÀr
;

38 
ngx_hâp_gë_v¨übÀ_±
 
gë_h™dÀr
;

39 
uöçå_t
 
d©a
;

40 
ngx_uöt_t
 
Êags
;

41 
ngx_uöt_t
 
ödex
;

45 
ngx_hâp_v¨übÀ_t
 *
	`ngx_hâp_add_v¨übÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
,

46 
ngx_uöt_t
 
Êags
);

47 
ngx_öt_t
 
	`ngx_hâp_gë_v¨übÀ_ödex
(
ngx_c⁄f_t
 *
cf
, 
ngx_°r_t
 *
«me
);

48 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_ödexed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

49 
ngx_uöt_t
 
ödex
);

50 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_Êushed_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

51 
ngx_uöt_t
 
ödex
);

53 
ngx_hâp_v¨übÀ_vÆue_t
 *
	`ngx_hâp_gë_v¨übÀ
(
ngx_hâp_ªque°_t
 *
r
,

54 
ngx_°r_t
 *
«me
, 
ngx_uöt_t
 
key
);

56 
ngx_öt_t
 
	`ngx_hâp_v¨übÀ_unknown_hódî
(
ngx_hâp_v¨übÀ_vÆue_t
 *
v
,

57 
ngx_°r_t
 *
v¨
, 
ngx_li°_∑π_t
 *
∑π
, 
size_t
 
¥efix
);

60 #i‡(
NGX_PCRE
)

63 
ngx_uöt_t
 
ˇ±uª
;

64 
ngx_öt_t
 
ödex
;

65 } 
	tngx_hâp_ªgex_v¨übÀ_t
;

69 
ngx_ªgex_t
 *
ªgex
;

70 
ngx_uöt_t
 
nˇ±uªs
;

71 
ngx_hâp_ªgex_v¨übÀ_t
 *
v¨übÀs
;

72 
ngx_uöt_t
 
nv¨übÀs
;

73 
ngx_°r_t
 
«me
;

74 } 
	tngx_hâp_ªgex_t
;

78 
ngx_hâp_ªgex_t
 *
ªgex
;

79 *
vÆue
;

80 } 
	tngx_hâp_m≠_ªgex_t
;

83 
ngx_hâp_ªgex_t
 *
	`ngx_hâp_ªgex_compûe
(
ngx_c⁄f_t
 *
cf
,

84 
ngx_ªgex_compûe_t
 *
rc
);

85 
ngx_öt_t
 
	`ngx_hâp_ªgex_exec
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_ªgex_t
 *
ª
,

86 
ngx_°r_t
 *
s
);

92 
ngx_hash_comböed_t
 
hash
;

93 #i‡(
NGX_PCRE
)

94 
ngx_hâp_m≠_ªgex_t
 *
ªgex
;

95 
ngx_uöt_t
 
ƒegex
;

97 } 
	tngx_hâp_m≠_t
;

100 *
	`ngx_hâp_m≠_föd
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_hâp_m≠_t
 *
m≠
,

101 
ngx_°r_t
 *
m©ch
);

104 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_add_c‹e_v¨s
(
ngx_c⁄f_t
 *
cf
);

105 
ngx_öt_t
 
	`ngx_hâp_v¨übÀs_öô_v¨s
(
ngx_c⁄f_t
 *
cf
);

108 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_nuŒ_vÆue
;

109 
ngx_hâp_v¨übÀ_vÆue_t
 
ngx_hâp_v¨übÀ_åue_vÆue
;

	@src/http/ngx_http_write_filter_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_hâp.h
>

13 
ngx_öt_t
 
ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
);

16 
ngx_hâp_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ_˘x
 = {

17 
NULL
,

18 
ngx_hâp_wrôe_fûãr_öô
,

20 
NULL
,

21 
NULL
,

23 
NULL
,

24 
NULL
,

26 
NULL
,

27 
NULL
,

31 
ngx_moduÀ_t
 
	gngx_hâp_wrôe_fûãr_moduÀ
 = {

32 
NGX_MODULE_V1
,

33 &
ngx_hâp_wrôe_fûãr_moduÀ_˘x
,

34 
NULL
,

35 
NGX_HTTP_MODULE
,

36 
NULL
,

37 
NULL
,

38 
NULL
,

39 
NULL
,

40 
NULL
,

41 
NULL
,

42 
NULL
,

43 
NGX_MODULE_V1_PADDING


47 
ngx_öt_t


48 
	$ngx_hâp_wrôe_fûãr
(
ngx_hâp_ªque°_t
 *
r
, 
ngx_chaö_t
 *
ö
)

50 
off_t
 
size
, 
£¡
, 
n£¡
, 
limô
;

51 
ngx_uöt_t
 
œ°
, 
Êush
;

52 
ngx_m£c_t
 
dñay
;

53 
ngx_chaö_t
 *
˛
, *
 
, **
Œ
, *
chaö
;

54 
ngx_c⁄√˘i⁄_t
 *
c
;

55 
ngx_hâp_c‹e_loc_c⁄f_t
 *
˛cf
;

57 
c
 = 
r
->
c⁄√˘i⁄
;

59 i‡(
c
->
îr‹
) {

60  
NGX_ERROR
;

63 
size
 = 0;

64 
Êush
 = 0;

65 
œ°
 = 0;

66 
Œ
 = &
r
->
out
;

70 
˛
 = 
r
->
out
; cl; c»˛->
√xt
) {

71 
Œ
 = &
˛
->
√xt
;

73 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

76 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

77 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

78 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

79 
˛
->
buf
->
fûe_pos
,

80 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

83 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

84 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

87 
˛
->
buf
->
ãmp‹¨y
,

88 
˛
->
buf
->
ªcy˛ed
,

89 
˛
->
buf
->
ö_fûe
,

90 
˛
->
buf
->
°¨t
,

91 
˛
->
buf
->
pos
,

92 
˛
->
buf
->
œ°
,

93 
˛
->
buf
->
fûe
,

94 
˛
->
buf
->
fûe_pos
,

95 
˛
->
buf
->
fûe_œ°
);

97 
	`ngx_debug_poöt
();

98  
NGX_ERROR
;

102 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

104 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

105 
Êush
 = 1;

108 i‡(
˛
->
buf
->
œ°_buf
) {

109 
œ°
 = 1;

115 
 
 = 
ö
;Ün;Ü¿ ->
√xt
) {

116 
˛
 = 
	`ngx_Æloc_chaö_lök
(
r
->
poﬁ
);

117 i‡(
˛
 =
NULL
) {

118  
NGX_ERROR
;

121 
˛
->
buf
 = 
 
->buf;

122 *
Œ
 = 
˛
;

123 
Œ
 = &
˛
->
√xt
;

125 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

128 
˛
->
buf
->
ãmp‹¨y
, cl->buf->
ö_fûe
,

129 
˛
->
buf
->
°¨t
, cl->buf->
pos
,

130 
˛
->
buf
->
œ°
 - cl->buf->
pos
,

131 
˛
->
buf
->
fûe_pos
,

132 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
);

135 i‡(
	`ngx_buf_size
(
˛
->
buf
Ë=0 && !
	`ngx_buf_•ecül
(cl->buf)) {

136 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

139 
˛
->
buf
->
ãmp‹¨y
,

140 
˛
->
buf
->
ªcy˛ed
,

141 
˛
->
buf
->
ö_fûe
,

142 
˛
->
buf
->
°¨t
,

143 
˛
->
buf
->
pos
,

144 
˛
->
buf
->
œ°
,

145 
˛
->
buf
->
fûe
,

146 
˛
->
buf
->
fûe_pos
,

147 
˛
->
buf
->
fûe_œ°
);

149 
	`ngx_debug_poöt
();

150  
NGX_ERROR
;

154 
size
 +
	`ngx_buf_size
(
˛
->
buf
);

156 i‡(
˛
->
buf
->
Êush
 || cl->buf->
ªcy˛ed
) {

157 
Êush
 = 1;

160 i‡(
˛
->
buf
->
œ°_buf
) {

161 
œ°
 = 1;

165 *
Œ
 = 
NULL
;

167 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

168 "hâ∞wrôêfûãr:Ü:%d f:%d s:%O", 
œ°
, 
Êush
, 
size
);

170 
˛cf
 = 
	`ngx_hâp_gë_moduÀ_loc_c⁄f
(
r
, 
ngx_hâp_c‹e_moduÀ
);

178 i‡(!
œ°
 && !
Êush
 && 
ö
 && 
size
 < (
off_t
Ë
˛cf
->
po°p⁄e_ouçut
) {

179  
NGX_OK
;

182 i‡(
c
->
wrôe
->
dñayed
) {

183 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

184  
NGX_AGAIN
;

187 i‡(
size
 =0 && !(
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
)) {

188 i‡(
œ°
 || 
Êush
) {

189 
˛
 = 
r
->
out
; cl; ) {

190 
 
 = 
˛
;

191 
˛
 = cl->
√xt
;

192 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

195 
r
->
out
 = 
NULL
;

196 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

198  
NGX_OK
;

201 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

204 
	`ngx_debug_poöt
();

206  
NGX_ERROR
;

209 i‡(
r
->
limô_øã
) {

210 
limô
 = (
off_t
Ë
r
->
limô_øã
 * (
	`ngx_time
(Ë-Ñ->
°¨t_£c
 + 1)

211 - (
c
->
£¡
 - 
˛cf
->
limô_øã_a·î
);

213 i‡(
limô
 <= 0) {

214 
c
->
wrôe
->
dñayed
 = 1;

215 
	`ngx_add_timî
(
c
->
wrôe
,

216 (
ngx_m£c_t
Ë(- 
limô
 * 1000 / 
r
->
limô_øã
 + 1));

218 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

220  
NGX_AGAIN
;

223 i‡(
˛cf
->
£ndfûe_max_chunk


224 && (
off_t
Ë
˛cf
->
£ndfûe_max_chunk
 < 
limô
)

226 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

230 
limô
 = 
˛cf
->
£ndfûe_max_chunk
;

233 
£¡
 = 
c
->sent;

235 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

236 "hâ∞wrôêfûã∏limô %O", 
limô
);

238 
chaö
 = 
c
->
	`£nd_chaö
(c, 
r
->
out
, 
limô
);

240 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

241 "hâ∞wrôêfûã∏%p", 
chaö
);

243 i‡(
chaö
 =
NGX_CHAIN_ERROR
) {

244 
c
->
îr‹
 = 1;

245  
NGX_ERROR
;

248 i‡(
r
->
limô_øã
) {

250 
n£¡
 = 
c
->
£¡
;

252 i‡(
˛cf
->
limô_øã_a·î
) {

254 
£¡
 -
˛cf
->
limô_øã_a·î
;

255 i‡(
£¡
 < 0) {

256 
£¡
 = 0;

259 
n£¡
 -
˛cf
->
limô_øã_a·î
;

260 i‡(
n£¡
 < 0) {

261 
n£¡
 = 0;

265 
dñay
 = (
ngx_m£c_t
Ë((
n£¡
 - 
£¡
Ë* 1000 / 
r
->
limô_øã
);

267 i‡(
dñay
 > 0) {

268 
limô
 = 0;

269 
c
->
wrôe
->
dñayed
 = 1;

270 
	`ngx_add_timî
(
c
->
wrôe
, 
dñay
);

274 i‡(
limô


275 && 
c
->
wrôe
->
ªady


276 && 
c
->
£¡
 - síà>
limô
 - (
off_t
Ë(2 * 
ngx_∑gesize
))

278 
c
->
wrôe
->
dñayed
 = 1;

279 
	`ngx_add_timî
(
c
->
wrôe
, 1);

282 
˛
 = 
r
->
out
; c»&& c»!
chaö
; ) {

283 
 
 = 
˛
;

284 
˛
 = cl->
√xt
;

285 
	`ngx_‰ì_chaö
(
r
->
poﬁ
, 
 
);

288 
r
->
out
 = 
chaö
;

290 i‡(
chaö
) {

291 
c
->
buf„ªd
 |
NGX_HTTP_WRITE_BUFFERED
;

292  
NGX_AGAIN
;

295 
c
->
buf„ªd
 &~
NGX_HTTP_WRITE_BUFFERED
;

297 i‡((
c
->
buf„ªd
 & 
NGX_LOWLEVEL_BUFFERED
Ë&& 
r
->
po°p⁄ed
 =
NULL
) {

298  
NGX_AGAIN
;

301  
NGX_OK
;

302 
	}
}

305 
ngx_öt_t


306 
	$ngx_hâp_wrôe_fûãr_öô
(
ngx_c⁄f_t
 *
cf
)

308 
ngx_hâp_t›_body_fûãr
 = 
ngx_hâp_wrôe_fûãr
;

310  
NGX_OK
;

311 
	}
}

	@src/mail/ngx_mail.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

15 
ngx_öt_t
 
ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

16 
ngx_maû_li°í_t
 *
li°í
);

17 *
ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
);

18 
ngx_öt_t
 
ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

19 
ngx_maû_c⁄f_addr_t
 *
addr
);

20 #i‡(
NGX_HAVE_INET6
)

21 
ngx_öt_t
 
ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

22 
ngx_maû_c⁄f_addr_t
 *
addr
);

24 
ngx_öt_t
 
ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
);

27 
ngx_uöt_t
 
	gngx_maû_max_moduÀ
;

30 
ngx_comm™d_t
 
	gngx_maû_comm™ds
[] = {

32 { 
ngx_°rög
("mail"),

33 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

34 
ngx_maû_block
,

37 
NULL
 },

39 { 
ngx_°rög
("imap"),

40 
NGX_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

41 
ngx_maû_block
,

44 
NULL
 },

46 
ngx_nuŒ_comm™d


50 
ngx_c‹e_moduÀ_t
 
	gngx_maû_moduÀ_˘x
 = {

51 
ngx_°rög
("mail"),

52 
NULL
,

53 
NULL


57 
ngx_moduÀ_t
 
	gngx_maû_moduÀ
 = {

58 
NGX_MODULE_V1
,

59 &
ngx_maû_moduÀ_˘x
,

60 
ngx_maû_comm™ds
,

61 
NGX_CORE_MODULE
,

62 
NULL
,

63 
NULL
,

64 
NULL
,

65 
NULL
,

66 
NULL
,

67 
NULL
,

68 
NULL
,

69 
NGX_MODULE_V1_PADDING


74 
	$ngx_maû_block
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

76 *
rv
;

77 
ngx_uöt_t
 
i
, 
m
, 
mi
, 
s
;

78 
ngx_c⁄f_t
 
pcf
;

79 
ngx_¨øy_t
 
p‹ts
;

80 
ngx_maû_li°í_t
 *
li°í
;

81 
ngx_maû_moduÀ_t
 *
moduÀ
;

82 
ngx_maû_c⁄f_˘x_t
 *
˘x
;

83 
ngx_maû_c‹e_§v_c⁄f_t
 **
cscÂ
;

84 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

86 i‡(
cmd
->
«me
.
d©a
[0] == 'i') {

87 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

94 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

95 i‡(
˘x
 =
NULL
) {

96  
NGX_CONF_ERROR
;

99 *(
ngx_maû_c⁄f_˘x_t
 **Ë
c⁄f
 = 
˘x
;

103 
ngx_maû_max_moduÀ
 = 0;

104 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

105 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

109 
ngx_moduÀs
[
m
]->
˘x_ödex
 = 
ngx_maû_max_moduÀ
++;

115 
˘x
->
maö_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

116 (*Ë* 
ngx_maû_max_moduÀ
);

117 i‡(
˘x
->
maö_c⁄f
 =
NULL
) {

118  
NGX_CONF_ERROR
;

127 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

128 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

129  
NGX_CONF_ERROR
;

138 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

139 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

143 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

144 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

146 i‡(
moduÀ
->
¸óã_maö_c⁄f
) {

147 
˘x
->
maö_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_maö_c⁄f
(
cf
);

148 i‡(
˘x
->
maö_c⁄f
[
mi
] =
NULL
) {

149  
NGX_CONF_ERROR
;

153 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

154 
˘x
->
§v_c⁄f
[
mi
] = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

155 i‡(
˘x
->
§v_c⁄f
[
mi
] =
NULL
) {

156  
NGX_CONF_ERROR
;

164 
pcf
 = *
cf
;

165 
cf
->
˘x
 = ctx;

167 
cf
->
moduÀ_ty≥
 = 
NGX_MAIL_MODULE
;

168 
cf
->
cmd_ty≥
 = 
NGX_MAIL_MAIN_CONF
;

169 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

171 i‡(
rv
 !
NGX_CONF_OK
) {

172 *
cf
 = 
pcf
;

173  
rv
;

179 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

180 
cscÂ
 = 
cmcf
->
£rvîs
.
ñts
;

182 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

183 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

187 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

188 
mi
 = 
ngx_moduÀs
[
m
]->
˘x_ödex
;

192 
cf
->
˘x
 = ctx;

194 i‡(
moduÀ
->
öô_maö_c⁄f
) {

195 
rv
 = 
moduÀ
->
	`öô_maö_c⁄f
(
cf
, 
˘x
->
maö_c⁄f
[
mi
]);

196 i‡(
rv
 !
NGX_CONF_OK
) {

197 *
cf
 = 
pcf
;

198  
rv
;

202 
s
 = 0; s < 
cmcf
->
£rvîs
.
√…s
; s++) {

206 
cf
->
˘x
 = 
cscÂ
[
s
]->ctx;

208 i‡(
moduÀ
->
mîge_§v_c⁄f
) {

209 
rv
 = 
moduÀ
->
	`mîge_§v_c⁄f
(
cf
,

210 
˘x
->
§v_c⁄f
[
mi
],

211 
cscÂ
[
s
]->
˘x
->
§v_c⁄f
[
mi
]);

212 i‡(
rv
 !
NGX_CONF_OK
) {

213 *
cf
 = 
pcf
;

214  
rv
;

220 *
cf
 = 
pcf
;

223 i‡(
	`ngx_¨øy_öô
(&
p‹ts
, 
cf
->
ãmp_poﬁ
, 4, (
ngx_maû_c⁄f_p‹t_t
))

224 !
NGX_OK
)

226  
NGX_CONF_ERROR
;

229 
li°í
 = 
cmcf
->li°í.
ñts
;

231 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

232 i‡(
	`ngx_maû_add_p‹ts
(
cf
, &
p‹ts
, &
li°í
[
i
]Ë!
NGX_OK
) {

233  
NGX_CONF_ERROR
;

237  
	`ngx_maû_›timize_£rvîs
(
cf
, &
p‹ts
);

238 
	}
}

241 
ngx_öt_t


242 
	$ngx_maû_add_p‹ts
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
,

243 
ngx_maû_li°í_t
 *
li°í
)

245 
ö_p‹t_t
 
p
;

246 
ngx_uöt_t
 
i
;

247 
sockaddr
 *
ß
;

248 
sockaddr_ö
 *
sö
;

249 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

250 
ngx_maû_c⁄f_addr_t
 *
addr
;

251 #i‡(
NGX_HAVE_INET6
)

252 
sockaddr_ö6
 *
sö6
;

255 
ß
 = (
sockaddr
 *Ë&
li°í
->sockaddr;

257 
ß
->
ß_Ámûy
) {

259 #i‡(
NGX_HAVE_INET6
)

260 
AF_INET6
:

261 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

262 
p
 = 
sö6
->
sö6_p‹t
;

266 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

267 
AF_UNIX
:

268 
p
 = 0;

273 
sö
 = (
sockaddr_ö
 *Ë
ß
;

274 
p
 = 
sö
->
sö_p‹t
;

278 
p‹t
 = 
p‹ts
->
ñts
;

279 
i
 = 0; i < 
p‹ts
->
√…s
; i++) {

280 i‡(
p
 =
p‹t
[
i
].p‹à&& 
ß
->
ß_Ámûy
 =p‹t[i].
Ámûy
) {

284 
p‹t
 = &p‹t[
i
];

285 
found
;

291 
p‹t
 = 
	`ngx_¨øy_push
(
p‹ts
);

292 i‡(
p‹t
 =
NULL
) {

293  
NGX_ERROR
;

296 
p‹t
->
Ámûy
 = 
ß
->
ß_Ámûy
;

297 
p‹t
->p‹à
p
;

299 i‡(
	`ngx_¨øy_öô
(&
p‹t
->
addrs
, 
cf
->
ãmp_poﬁ
, 2,

300 (
ngx_maû_c⁄f_addr_t
))

301 !
NGX_OK
)

303  
NGX_ERROR
;

306 
found
:

308 
addr
 = 
	`ngx_¨øy_push
(&
p‹t
->
addrs
);

309 i‡(
addr
 =
NULL
) {

310  
NGX_ERROR
;

313 
addr
->
sockaddr
 = (sockadd∏*Ë&
li°í
->sockaddr;

314 
addr
->
sockÀn
 = 
li°í
->socklen;

315 
addr
->
˘x
 = 
li°í
->ctx;

316 
addr
->
böd
 = 
li°í
->bind;

317 
addr
->
wûdˇrd
 = 
li°í
->wildcard;

318 
addr
->
so_kì∑live
 = 
li°í
->so_keepalive;

319 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

320 
addr
->
t˝_kìpidÀ
 = 
li°í
->tcp_keepidle;

321 
addr
->
t˝_kìpötvl
 = 
li°í
->tcp_keepintvl;

322 
addr
->
t˝_kìp˙t
 = 
li°í
->tcp_keepcnt;

324 #i‡(
NGX_MAIL_SSL
)

325 
addr
->
s¶
 = 
li°í
->ssl;

327 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

328 
addr
->
ùv6⁄ly
 = 
li°í
->ipv6only;

331  
NGX_OK
;

332 
	}
}

336 
	$ngx_maû_›timize_£rvîs
(
ngx_c⁄f_t
 *
cf
, 
ngx_¨øy_t
 *
p‹ts
)

338 
ngx_uöt_t
 
i
, 
p
, 
œ°
, 
böd_wûdˇrd
;

339 
ngx_li°íög_t
 *
ls
;

340 
ngx_maû_p‹t_t
 *
mp‹t
;

341 
ngx_maû_c⁄f_p‹t_t
 *
p‹t
;

342 
ngx_maû_c⁄f_addr_t
 *
addr
;

344 
p‹t
 = 
p‹ts
->
ñts
;

345 
p
 = 0;Ö < 
p‹ts
->
√…s
;Ö++) {

347 
	`ngx_s‹t
(
p‹t
[
p
].
addrs
.
ñts
, (
size_t
Ëp‹t[p].addrs.
√…s
,

348 (
ngx_maû_c⁄f_addr_t
), 
ngx_maû_cmp_c⁄f_addrs
);

350 
addr
 = 
p‹t
[
p
].
addrs
.
ñts
;

351 
œ°
 = 
p‹t
[
p
].
addrs
.
√…s
;

358 i‡(
addr
[
œ°
 - 1].
wûdˇrd
) {

359 
addr
[
œ°
 - 1].
böd
 = 1;

360 
böd_wûdˇrd
 = 1;

363 
böd_wûdˇrd
 = 0;

366 
i
 = 0;

368 
i
 < 
œ°
) {

370 i‡(
böd_wûdˇrd
 && !
addr
[
i
].
böd
) {

371 
i
++;

375 
ls
 = 
	`ngx_¸óã_li°íög
(
cf
, 
addr
[
i
].
sockaddr
,áddr[i].
sockÀn
);

376 i‡(
ls
 =
NULL
) {

377  
NGX_CONF_ERROR
;

380 
ls
->
addr_¡›
 = 1;

381 
ls
->
h™dÀr
 = 
ngx_maû_öô_c⁄√˘i⁄
;

382 
ls
->
poﬁ_size
 = 256;

385 
ls
->
logp
 = &
cf
->
cy˛e
->
√w_log
;

386 
ls
->
log
.
d©a
 = &ls->
addr_ãxt
;

387 
ls
->
log
.
h™dÀr
 = 
ngx_ac˚±_log_îr‹
;

389 
ls
->
kì∑live
 = 
addr
[
i
].
so_kì∑live
;

390 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

391 
ls
->
kìpidÀ
 = 
addr
[
i
].
t˝_kìpidÀ
;

392 
ls
->
kìpötvl
 = 
addr
[
i
].
t˝_kìpötvl
;

393 
ls
->
kìp˙t
 = 
addr
[
i
].
t˝_kìp˙t
;

396 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

397 
ls
->
ùv6⁄ly
 = 
addr
[
i
].ipv6only;

400 
mp‹t
 = 
	`ngx_∑Œoc
(
cf
->
poﬁ
, (
ngx_maû_p‹t_t
));

401 i‡(
mp‹t
 =
NULL
) {

402  
NGX_CONF_ERROR
;

405 
ls
->
£rvîs
 = 
mp‹t
;

407 i‡(
i
 =
œ°
 - 1) {

408 
mp‹t
->
«ddrs
 = 
œ°
;

411 
mp‹t
->
«ddrs
 = 1;

412 
i
 = 0;

415 
ls
->
sockaddr
->
ß_Ámûy
) {

416 #i‡(
NGX_HAVE_INET6
)

417 
AF_INET6
:

418 i‡(
	`ngx_maû_add_addrs6
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

419  
NGX_CONF_ERROR
;

424 i‡(
	`ngx_maû_add_addrs
(
cf
, 
mp‹t
, 
addr
Ë!
NGX_OK
) {

425  
NGX_CONF_ERROR
;

430 
addr
++;

431 
œ°
--;

435  
NGX_CONF_OK
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_add_addrs
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

441 
ngx_maû_c⁄f_addr_t
 *
addr
)

443 
u_ch¨
 *
p
;

444 
size_t
 
Àn
;

445 
ngx_uöt_t
 
i
;

446 
ngx_maû_ö_addr_t
 *
addrs
;

447 
sockaddr_ö
 *
sö
;

448 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

450 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

451 
mp‹t
->
«ddrs
 * (
ngx_maû_ö_addr_t
));

452 i‡(
mp‹t
->
addrs
 =
NULL
) {

453  
NGX_ERROR
;

456 
addrs
 = 
mp‹t
->addrs;

458 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

460 
sö
 = (
sockaddr_ö
 *Ë
addr
[
i
].
sockaddr
;

461 
addrs
[
i
].
addr
 = 
sö
->
sö_addr
.
s_addr
;

463 
addrs
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

464 #i‡(
NGX_MAIL_SSL
)

465 
addrs
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

468 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

470 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

471 i‡(
p
 =
NULL
) {

472  
NGX_ERROR
;

475 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

477 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

478 
addrs
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

481  
NGX_OK
;

482 
	}
}

485 #i‡(
NGX_HAVE_INET6
)

487 
ngx_öt_t


488 
	$ngx_maû_add_addrs6
(
ngx_c⁄f_t
 *
cf
, 
ngx_maû_p‹t_t
 *
mp‹t
,

489 
ngx_maû_c⁄f_addr_t
 *
addr
)

491 
u_ch¨
 *
p
;

492 
size_t
 
Àn
;

493 
ngx_uöt_t
 
i
;

494 
ngx_maû_ö6_addr_t
 *
addrs6
;

495 
sockaddr_ö6
 *
sö6
;

496 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

498 
mp‹t
->
addrs
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
,

499 
mp‹t
->
«ddrs
 * (
ngx_maû_ö6_addr_t
));

500 i‡(
mp‹t
->
addrs
 =
NULL
) {

501  
NGX_ERROR
;

504 
addrs6
 = 
mp‹t
->
addrs
;

506 
i
 = 0; i < 
mp‹t
->
«ddrs
; i++) {

508 
sö6
 = (
sockaddr_ö6
 *Ë
addr
[
i
].
sockaddr
;

509 
addrs6
[
i
].
addr6
 = 
sö6
->
sö6_addr
;

511 
addrs6
[
i
].
c⁄f
.
˘x
 = 
addr
[i].ctx;

512 #i‡(
NGX_MAIL_SSL
)

513 
addrs6
[
i
].
c⁄f
.
s¶
 = 
addr
[i].ssl;

516 
Àn
 = 
	`ngx_sock_¡›
(
addr
[
i
].
sockaddr
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

518 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

519 i‡(
p
 =
NULL
) {

520  
NGX_ERROR
;

523 
	`ngx_mem˝y
(
p
, 
buf
, 
Àn
);

525 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
Àn
 =Üen;

526 
addrs6
[
i
].
c⁄f
.
addr_ãxt
.
d©a
 = 
p
;

529  
NGX_OK
;

530 
	}
}

535 
ngx_öt_t


536 
	$ngx_maû_cmp_c⁄f_addrs
(c⁄° *
⁄e
, c⁄° *
two
)

538 
ngx_maû_c⁄f_addr_t
 *
fú°
, *
£c⁄d
;

540 
fú°
 = (
ngx_maû_c⁄f_addr_t
 *Ë
⁄e
;

541 
£c⁄d
 = (
ngx_maû_c⁄f_addr_t
 *Ë
two
;

543 i‡(
fú°
->
wûdˇrd
) {

548 i‡(
£c⁄d
->
wûdˇrd
) {

553 i‡(
fú°
->
böd
 && !
£c⁄d
->bind) {

558 i‡(!
fú°
->
böd
 && 
£c⁄d
->bind) {

566 
	}
}

	@src/mail/ngx_mail.h

8 #i‚de‡
_NGX_MAIL_H_INCLUDED_


9 
	#_NGX_MAIL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

15 
	~<ngx_evít_c⁄√˘.h
>

17 #i‡(
NGX_MAIL_SSL
)

18 
	~<ngx_maû_s¶_moduÀ.h
>

24 **
	mmaö_c⁄f
;

25 **
	m§v_c⁄f
;

26 } 
	tngx_maû_c⁄f_˘x_t
;

30 
u_ch¨
 
	msockaddr
[
NGX_SOCKADDRLEN
];

31 
sockÀn_t
 
	msockÀn
;

34 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

36 
	mböd
:1;

37 
	mwûdˇrd
:1;

38 #i‡(
NGX_MAIL_SSL
)

39 
	ms¶
:1;

41 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

42 
	mùv6⁄ly
:1;

44 
	mso_kì∑live
:2;

45 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

46 
	mt˝_kìpidÀ
;

47 
	mt˝_kìpötvl
;

48 
	mt˝_kìp˙t
;

50 } 
	tngx_maû_li°í_t
;

54 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

55 
ngx_°r_t
 
	maddr_ãxt
;

56 #i‡(
NGX_MAIL_SSL
)

57 
ngx_uöt_t
 
	ms¶
;

59 } 
	tngx_maû_addr_c⁄f_t
;

62 
ö_addr_t
 
	maddr
;

63 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

64 } 
	tngx_maû_ö_addr_t
;

67 #i‡(
NGX_HAVE_INET6
)

70 
ö6_addr
 
	maddr6
;

71 
ngx_maû_addr_c⁄f_t
 
	mc⁄f
;

72 } 
	tngx_maû_ö6_addr_t
;

79 *
	maddrs
;

80 
ngx_uöt_t
 
	m«ddrs
;

81 } 
	tngx_maû_p‹t_t
;

85 
	mÁmûy
;

86 
ö_p‹t_t
 
	mp‹t
;

87 
ngx_¨øy_t
 
	maddrs
;

88 } 
	tngx_maû_c⁄f_p‹t_t
;

92 
sockaddr
 *
	msockaddr
;

93 
sockÀn_t
 
	msockÀn
;

95 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

97 
	mböd
:1;

98 
	mwûdˇrd
:1;

99 #i‡(
NGX_MAIL_SSL
)

100 
	ms¶
:1;

102 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

103 
	mùv6⁄ly
:1;

105 
	mso_kì∑live
:2;

106 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

107 
	mt˝_kìpidÀ
;

108 
	mt˝_kìpötvl
;

109 
	mt˝_kìp˙t
;

111 } 
	tngx_maû_c⁄f_addr_t
;

115 
ngx_¨øy_t
 
	m£rvîs
;

116 
ngx_¨øy_t
 
	mli°í
;

117 } 
	tngx_maû_c‹e_maö_c⁄f_t
;

120 
	#NGX_MAIL_POP3_PROTOCOL
 0

	)

121 
	#NGX_MAIL_IMAP_PROTOCOL
 1

	)

122 
	#NGX_MAIL_SMTP_PROTOCOL
 2

	)

125 
ngx_maû_¥Ÿocﬁ_s
 
	tngx_maû_¥Ÿocﬁ_t
;

129 
ngx_maû_¥Ÿocﬁ_t
 *
	m¥Ÿocﬁ
;

131 
ngx_m£c_t
 
	mtimeout
;

132 
ngx_m£c_t
 
	mªsﬁvî_timeout
;

134 
ngx_Êag_t
 
	mso_kì∑live
;

136 
ngx_°r_t
 
	m£rvî_«me
;

138 
u_ch¨
 *
	mfûe_«me
;

139 
ngx_öt_t
 
	mlöe
;

141 
ngx_ªsﬁvî_t
 *
	mªsﬁvî
;

144 
ngx_maû_c⁄f_˘x_t
 *
	m˘x
;

145 } 
	tngx_maû_c‹e_§v_c⁄f_t
;

149 
	mngx_p›3_°¨t
 = 0,

150 
	mngx_p›3_u£r
,

151 
	mngx_p›3_∑sswd
,

152 
	mngx_p›3_auth_logö_u£∫ame
,

153 
	mngx_p›3_auth_logö_∑ssw‹d
,

154 
	mngx_p›3_auth_∂aö
,

155 
	mngx_p›3_auth_¸am_md5


156 } 
	tngx_p›3_°©e_e
;

160 
	mngx_im≠_°¨t
 = 0,

161 
	mngx_im≠_auth_logö_u£∫ame
,

162 
	mngx_im≠_auth_logö_∑ssw‹d
,

163 
	mngx_im≠_auth_∂aö
,

164 
	mngx_im≠_auth_¸am_md5
,

165 
	mngx_im≠_logö
,

166 
	mngx_im≠_u£r
,

167 
	mngx_im≠_∑sswd


168 } 
	tngx_im≠_°©e_e
;

172 
	mngx_smç_°¨t
 = 0,

173 
	mngx_smç_auth_logö_u£∫ame
,

174 
	mngx_smç_auth_logö_∑ssw‹d
,

175 
	mngx_smç_auth_∂aö
,

176 
	mngx_smç_auth_¸am_md5
,

177 
	mngx_smç_hño
,

178 
	mngx_smç_hño_x˛õ¡
,

179 
	mngx_smç_hño_‰om
,

180 
	mngx_smç_x˛õ¡
,

181 
	mngx_smç_x˛õ¡_‰om
,

182 
	mngx_smç_x˛õ¡_hño
,

183 
	mngx_smç_‰om
,

184 
	mngx_smç_to


185 } 
	tngx_smç_°©e_e
;

189 
ngx_≥î_c⁄√˘i⁄_t
 
	mup°ªam
;

190 
ngx_buf_t
 *
	mbuf„r
;

191 } 
	tngx_maû_¥oxy_˘x_t
;

195 
uöt32_t
 
	msig«tuª
;

197 
ngx_c⁄√˘i⁄_t
 *
	mc⁄√˘i⁄
;

199 
ngx_°r_t
 
	mout
;

200 
ngx_buf_t
 *
	mbuf„r
;

202 **
	m˘x
;

203 **
	mmaö_c⁄f
;

204 **
	m§v_c⁄f
;

206 
ngx_ªsﬁvî_˘x_t
 *
	mªsﬁvî_˘x
;

208 
ngx_maû_¥oxy_˘x_t
 *
	m¥oxy
;

210 
ngx_uöt_t
 
	mmaû_°©e
;

212 
	m¥Ÿocﬁ
:3;

213 
	mblocked
:1;

214 
	mquô
:1;

215 
	mquŸed
:1;

216 
	mback¶ash
:1;

217 
	mno_sync_lôîÆ
:1;

218 
	m°¨âls
:1;

219 
	mesmç
:1;

220 
	mauth_mëhod
:3;

221 
	mauth_waô
:1;

223 
ngx_°r_t
 
	mlogö
;

224 
ngx_°r_t
 
	m∑sswd
;

226 
ngx_°r_t
 
	mß…
;

227 
ngx_°r_t
 
	mèg
;

228 
ngx_°r_t
 
	mègged_löe
;

229 
ngx_°r_t
 
	mãxt
;

231 
ngx_°r_t
 *
	maddr_ãxt
;

232 
ngx_°r_t
 
	mho°
;

233 
ngx_°r_t
 
	msmç_hño
;

234 
ngx_°r_t
 
	msmç_‰om
;

235 
ngx_°r_t
 
	msmç_to
;

237 
ngx_uöt_t
 
	mcomm™d
;

238 
ngx_¨øy_t
 
	m¨gs
;

240 
ngx_uöt_t
 
	mlogö_©ãm±
;

244 
ngx_uöt_t
 
	m°©e
;

245 
u_ch¨
 *
	mcmd_°¨t
;

246 
u_ch¨
 *
	m¨g_°¨t
;

247 
u_ch¨
 *
	m¨g_íd
;

248 
ngx_uöt_t
 
	mlôîÆ_Àn
;

249 } 
	tngx_maû_£ssi⁄_t
;

253 
ngx_°r_t
 *
	m˛õ¡
;

254 
ngx_maû_£ssi⁄_t
 *
	m£ssi⁄
;

255 } 
	tngx_maû_log_˘x_t
;

258 
	#NGX_POP3_USER
 1

	)

259 
	#NGX_POP3_PASS
 2

	)

260 
	#NGX_POP3_CAPA
 3

	)

261 
	#NGX_POP3_QUIT
 4

	)

262 
	#NGX_POP3_NOOP
 5

	)

263 
	#NGX_POP3_STLS
 6

	)

264 
	#NGX_POP3_APOP
 7

	)

265 
	#NGX_POP3_AUTH
 8

	)

266 
	#NGX_POP3_STAT
 9

	)

267 
	#NGX_POP3_LIST
 10

	)

268 
	#NGX_POP3_RETR
 11

	)

269 
	#NGX_POP3_DELE
 12

	)

270 
	#NGX_POP3_RSET
 13

	)

271 
	#NGX_POP3_TOP
 14

	)

272 
	#NGX_POP3_UIDL
 15

	)

275 
	#NGX_IMAP_LOGIN
 1

	)

276 
	#NGX_IMAP_LOGOUT
 2

	)

277 
	#NGX_IMAP_CAPABILITY
 3

	)

278 
	#NGX_IMAP_NOOP
 4

	)

279 
	#NGX_IMAP_STARTTLS
 5

	)

281 
	#NGX_IMAP_NEXT
 6

	)

283 
	#NGX_IMAP_AUTHENTICATE
 7

	)

286 
	#NGX_SMTP_HELO
 1

	)

287 
	#NGX_SMTP_EHLO
 2

	)

288 
	#NGX_SMTP_AUTH
 3

	)

289 
	#NGX_SMTP_QUIT
 4

	)

290 
	#NGX_SMTP_NOOP
 5

	)

291 
	#NGX_SMTP_MAIL
 6

	)

292 
	#NGX_SMTP_RSET
 7

	)

293 
	#NGX_SMTP_RCPT
 8

	)

294 
	#NGX_SMTP_DATA
 9

	)

295 
	#NGX_SMTP_VRFY
 10

	)

296 
	#NGX_SMTP_EXPN
 11

	)

297 
	#NGX_SMTP_HELP
 12

	)

298 
	#NGX_SMTP_STARTTLS
 13

	)

301 
	#NGX_MAIL_AUTH_PLAIN
 0

	)

302 
	#NGX_MAIL_AUTH_LOGIN
 1

	)

303 
	#NGX_MAIL_AUTH_LOGIN_USERNAME
 2

	)

304 
	#NGX_MAIL_AUTH_APOP
 3

	)

305 
	#NGX_MAIL_AUTH_CRAM_MD5
 4

	)

306 
	#NGX_MAIL_AUTH_NONE
 5

	)

309 
	#NGX_MAIL_AUTH_PLAIN_ENABLED
 0x0002

	)

310 
	#NGX_MAIL_AUTH_LOGIN_ENABLED
 0x0004

	)

311 
	#NGX_MAIL_AUTH_APOP_ENABLED
 0x0008

	)

312 
	#NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 0x0010

	)

313 
	#NGX_MAIL_AUTH_NONE_ENABLED
 0x0020

	)

316 
	#NGX_MAIL_PARSE_INVALID_COMMAND
 20

	)

319 (*
	tngx_maû_öô_£ssi⁄_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

320 
	tngx_c⁄√˘i⁄_t
 *
	tc
);

321 (*
	tngx_maû_öô_¥Ÿocﬁ_±
)(
	tngx_evít_t
 *
	tªv
);

322 (*
	tngx_maû_auth_°©e_±
)(
	tngx_evít_t
 *
	tªv
);

323 
	$ngx_öt_t
 (*
	tngx_maû_∑r£_comm™d_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
);

326 
	sngx_maû_¥Ÿocﬁ_s
 {

327 
ngx_°r_t
 
«me
;

328 
ö_p‹t_t
 
p‹t
[4];

329 
ngx_uöt_t
 
ty≥
;

331 
ngx_maû_öô_£ssi⁄_±
 
öô_£ssi⁄
;

332 
ngx_maû_öô_¥Ÿocﬁ_±
 
öô_¥Ÿocﬁ
;

333 
ngx_maû_∑r£_comm™d_±
 
∑r£_comm™d
;

334 
ngx_maû_auth_°©e_±
 
auth_°©e
;

336 
ngx_°r_t
 
öã∫Æ_£rvî_îr‹
;

341 
ngx_maû_¥Ÿocﬁ_t
 *
¥Ÿocﬁ
;

343 *(*
¸óã_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

344 *(*
öô_maö_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
c⁄f
);

346 *(*
¸óã_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
);

347 *(*
mîge_§v_c⁄f
)(
ngx_c⁄f_t
 *
cf
, *
¥ev
,

348 *
c⁄f
);

349 } 
	tngx_maû_moduÀ_t
;

352 
	#NGX_MAIL_MODULE
 0x4C49414D

	)

354 
	#NGX_MAIL_MAIN_CONF
 0x02000000

	)

355 
	#NGX_MAIL_SRV_CONF
 0x04000000

	)

358 
	#NGX_MAIL_MAIN_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
maö_c⁄f
)

	)

359 
	#NGX_MAIL_SRV_CONF_OFFSET
 
	`off£tof
(
ngx_maû_c⁄f_˘x_t
, 
§v_c⁄f
)

	)

362 
	#ngx_maû_gë_moduÀ_˘x
(
s
, 
moduÀ
Ë(s)->
˘x
[moduÀ.
˘x_ödex
]

	)

363 
	#ngx_maû_£t_˘x
(
s
, 
c
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = c;

	)

364 
	#ngx_maû_dñëe_˘x
(
s
, 
moduÀ
Ës->
˘x
[moduÀ.
˘x_ödex
] = 
NULL
;

	)

367 
	#ngx_maû_gë_moduÀ_maö_c⁄f
(
s
, 
moduÀ
) \

368 (
s
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

369 
	#ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
moduÀ
Ë(s)->
§v_c⁄f
[moduÀ.
˘x_ödex
]

	)

371 
	#ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
moduÀ
) \

372 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
maö_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

373 
	#ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
moduÀ
) \

374 ((
ngx_maû_c⁄f_˘x_t
 *Ë
cf
->
˘x
)->
§v_c⁄f
[
moduÀ
.
˘x_ödex
]

	)

377 #i‡(
NGX_MAIL_SSL
)

378 
	`ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
);

379 
ngx_öt_t
 
	`ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

383 
	`ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

385 
ngx_öt_t
 
	`ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

386 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
);

387 
ngx_öt_t
 
	`ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

388 
ngx_uöt_t
 
n
);

389 
ngx_öt_t
 
	`ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
,

390 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
);

391 
ngx_öt_t
 
	`ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
,

392 
ngx_c⁄√˘i⁄_t
 *
c
);

393 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
,

394 
ngx_c⁄√˘i⁄_t
 *
c
, *
¥efix
, 
size_t
 
Àn
);

395 
ngx_öt_t
 
	`ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

396 
ngx_öt_t
 
	`ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

398 
	`ngx_maû_£nd
(
ngx_evít_t
 *
wev
);

399 
ngx_öt_t
 
	`ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

400 
	`ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

401 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

402 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

403 
u_ch¨
 *
	`ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, u_ch¨ *
buf
, 
size_t
 
Àn
);

406 *
	`ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

410 
	`ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
);

411 
	`ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
);

415 
ngx_uöt_t
 
ngx_maû_max_moduÀ
;

416 
ngx_moduÀ_t
 
ngx_maû_c‹e_moduÀ
;

	@src/mail/ngx_mail_auth_http_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_addr_t
 *
	m≥î
;

18 
ngx_m£c_t
 
	mtimeout
;

20 
ngx_°r_t
 
	mho°_hódî
;

21 
ngx_°r_t
 
	muri
;

22 
ngx_°r_t
 
	mhódî
;

24 
ngx_¨øy_t
 *
	mhódîs
;

26 
u_ch¨
 *
	mfûe
;

27 
ngx_uöt_t
 
	mlöe
;

28 } 
	tngx_maû_auth_hâp_c⁄f_t
;

31 
ngx_maû_auth_hâp_˘x_s
 
	tngx_maû_auth_hâp_˘x_t
;

33 (*
	tngx_maû_auth_hâp_h™dÀr_±
)(
	tngx_maû_£ssi⁄_t
 *
	ts
,

34 
	tngx_maû_auth_hâp_˘x_t
 *
	t˘x
);

36 
	sngx_maû_auth_hâp_˘x_s
 {

37 
ngx_buf_t
 *
ªque°
;

38 
ngx_buf_t
 *
ª•⁄£
;

39 
ngx_≥î_c⁄√˘i⁄_t
 
≥î
;

41 
ngx_maû_auth_hâp_h™dÀr_±
 
h™dÀr
;

43 
ngx_uöt_t
 
°©e
;

45 
u_ch¨
 *
hódî_«me_°¨t
;

46 
u_ch¨
 *
hódî_«me_íd
;

47 
u_ch¨
 *
hódî_°¨t
;

48 
u_ch¨
 *
hódî_íd
;

50 
ngx_°r_t
 
addr
;

51 
ngx_°r_t
 
p‹t
;

52 
ngx_°r_t
 
îr
;

53 
ngx_°r_t
 
îrmsg
;

54 
ngx_°r_t
 
îrcode
;

56 
time_t
 
¶ìp
;

58 
ngx_poﬁ_t
 *
poﬁ
;

62 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
);

63 
	`ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
);

64 
	`ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

65 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

66 
	`ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

67 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

68 
	`ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
);

69 
ngx_öt_t
 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

70 
ngx_maû_auth_hâp_˘x_t
 *
˘x
);

71 
	`ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
);

72 
	`ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

73 
ngx_buf_t
 *
	`ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
,

74 
ngx_poﬁ_t
 *
poﬁ
, 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
);

75 
ngx_öt_t
 
	`ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,

76 
ngx_°r_t
 *
esˇ≥d
);

78 *
	`ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

79 *
	`ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

80 *
chûd
);

81 *
	`ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
);

82 *
	`ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

83 *
c⁄f
);

86 
ngx_comm™d_t
 
ngx_maû_auth_hâp_comm™ds
[] = {

88 { 
	`ngx_°rög
("auth_http"),

89 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

90 
ngx_maû_auth_hâp
,

91 
NGX_MAIL_SRV_CONF_OFFSET
,

93 
NULL
 },

95 { 
	`ngx_°rög
("auth_http_timeout"),

96 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

97 
ngx_c⁄f_£t_m£c_¶Ÿ
,

98 
NGX_MAIL_SRV_CONF_OFFSET
,

99 
	`off£tof
(
ngx_maû_auth_hâp_c⁄f_t
, 
timeout
),

100 
NULL
 },

102 { 
	`ngx_°rög
("auth_http_header"),

103 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE2
,

104 
ngx_maû_auth_hâp_hódî
,

105 
NGX_MAIL_SRV_CONF_OFFSET
,

107 
NULL
 },

109 
ngx_nuŒ_comm™d


110 
	}
};

113 
ngx_maû_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ_˘x
 = {

114 
NULL
,

116 
NULL
,

117 
NULL
,

119 
ngx_maû_auth_hâp_¸óã_c⁄f
,

120 
ngx_maû_auth_hâp_mîge_c⁄f


124 
ngx_moduÀ_t
 
	gngx_maû_auth_hâp_moduÀ
 = {

125 
NGX_MODULE_V1
,

126 &
ngx_maû_auth_hâp_moduÀ_˘x
,

127 
ngx_maû_auth_hâp_comm™ds
,

128 
NGX_MAIL_MODULE
,

129 
NULL
,

130 
NULL
,

131 
NULL
,

132 
NULL
,

133 
NULL
,

134 
NULL
,

135 
NULL
,

136 
NGX_MODULE_V1_PADDING


140 
ngx_°r_t
 
	gngx_maû_auth_hâp_mëhod
[] = {

141 
ngx_°rög
("plain"),

142 
ngx_°rög
("plain"),

143 
ngx_°rög
("plain"),

144 
ngx_°rög
("apop"),

145 
ngx_°rög
("cram-md5"),

146 
ngx_°rög
("none")

149 
ngx_°r_t
 
	gngx_maû_smç_îrcode
 = 
ngx_°rög
("535 5.7.0");

153 
	$ngx_maû_auth_hâp_öô
(
ngx_maû_£ssi⁄_t
 *
s
)

155 
ngx_öt_t
 
rc
;

156 
ngx_poﬁ_t
 *
poﬁ
;

157 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

158 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

160 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "in httpáuth state";

162 
poﬁ
 = 
	`ngx_¸óã_poﬁ
(2048, 
s
->
c⁄√˘i⁄
->
log
);

163 i‡(
poﬁ
 =
NULL
) {

164 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

168 
˘x
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_maû_auth_hâp_˘x_t
));

169 i‡(
˘x
 =
NULL
) {

170 
	`ngx_de°roy_poﬁ
(
poﬁ
);

171 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

175 
˘x
->
poﬁ
 =Öool;

177 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

179 
˘x
->
ªque°
 = 
	`ngx_maû_auth_hâp_¸óã_ªque°
(
s
, 
poﬁ
, 
ahcf
);

180 i‡(
˘x
->
ªque°
 =
NULL
) {

181 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

182 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

186 
	`ngx_maû_£t_˘x
(
s
, 
˘x
, 
ngx_maû_auth_hâp_moduÀ
);

188 
˘x
->
≥î
.
sockaddr
 = 
ahcf
->peer->sockaddr;

189 
˘x
->
≥î
.
sockÀn
 = 
ahcf
->peer->socklen;

190 
˘x
->
≥î
.
«me
 = &
ahcf
->peer->name;

191 
˘x
->
≥î
.
gë
 = 
ngx_evít_gë_≥î
;

192 
˘x
->
≥î
.
log
 = 
s
->
c⁄√˘i⁄
->log;

193 
˘x
->
≥î
.
log_îr‹
 = 
NGX_ERROR_ERR
;

195 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
˘x
->
≥î
);

197 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

198 i‡(
˘x
->
≥î
.
c⁄√˘i⁄
) {

199 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

202 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

203 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

207 
˘x
->
≥î
.
c⁄√˘i⁄
->
d©a
 = 
s
;

208 
˘x
->
≥î
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

210 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_block_ªad
;

211 
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_hâp_ªad_h™dÀr
;

212 
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_auth_hâp_wrôe_h™dÀr
;

214 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_ign‹e_°©us_löe
;

216 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
ªad
, 
ahcf
->
timeout
);

217 
	`ngx_add_timî
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
, 
ahcf
->
timeout
);

219 i‡(
rc
 =
NGX_OK
) {

220 
	`ngx_maû_auth_hâp_wrôe_h™dÀr
(
˘x
->
≥î
.
c⁄√˘i⁄
->
wrôe
);

223 
	}
}

227 
	$ngx_maû_auth_hâp_wrôe_h™dÀr
(
ngx_evít_t
 *
wev
)

229 
ssize_t
 
n
, 
size
;

230 
ngx_c⁄√˘i⁄_t
 *
c
;

231 
ngx_maû_£ssi⁄_t
 *
s
;

232 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

233 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

235 
c
 = 
wev
->
d©a
;

236 
s
 = 
c
->
d©a
;

238 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

240 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0,

243 i‡(
wev
->
timedout
) {

244 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
wev
->
log
, 
NGX_ETIMEDOUT
,

245 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

246 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

247 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

248 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

252 
size
 = 
˘x
->
ªque°
->
œ°
 - ctx->ªque°->
pos
;

254 
n
 = 
	`ngx_£nd
(
c
, 
˘x
->
ªque°
->
pos
, 
size
);

256 i‡(
n
 =
NGX_ERROR
) {

257 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

258 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

259 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

263 i‡(
n
 > 0) {

264 
˘x
->
ªque°
->
pos
 +
n
;

266 i‡(
n
 =
size
) {

267 
wev
->
h™dÀr
 = 
ngx_maû_auth_hâp_dummy_h™dÀr
;

269 i‡(
wev
->
timî_£t
) {

270 
	`ngx_dñ_timî
(
wev
);

273 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

274 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

275 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

276 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

283 i‡(!
wev
->
timî_£t
) {

284 
ahcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

285 
	`ngx_add_timî
(
wev
, 
ahcf
->
timeout
);

287 
	}
}

291 
	$ngx_maû_auth_hâp_ªad_h™dÀr
(
ngx_evít_t
 *
ªv
)

293 
ssize_t
 
n
, 
size
;

294 
ngx_c⁄√˘i⁄_t
 *
c
;

295 
ngx_maû_£ssi⁄_t
 *
s
;

296 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

298 
c
 = 
ªv
->
d©a
;

299 
s
 = 
c
->
d©a
;

301 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

304 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

306 i‡(
ªv
->
timedout
) {

307 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
ªv
->
log
, 
NGX_ETIMEDOUT
,

308 "auth hâ∞£rvî %VÅimed out", 
˘x
->
≥î
.
«me
);

309 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

310 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

311 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

315 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

316 
˘x
->
ª•⁄£
 = 
	`ngx_¸óã_ãmp_buf
(˘x->
poﬁ
, 1024);

317 i‡(
˘x
->
ª•⁄£
 =
NULL
) {

318 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

319 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

320 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

325 
size
 = 
˘x
->
ª•⁄£
->
íd
 - ctx->ª•⁄£->
œ°
;

327 
n
 = 
	`ngx_ªcv
(
c
, 
˘x
->
ª•⁄£
->
pos
, 
size
);

329 i‡(
n
 > 0) {

330 
˘x
->
ª•⁄£
->
œ°
 +
n
;

332 
˘x
->
	`h™dÀr
(
s
, ctx);

336 i‡(
n
 =
NGX_AGAIN
) {

340 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

341 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

342 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

343 
	}
}

347 
	$ngx_maû_auth_hâp_ign‹e_°©us_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

348 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

350 
u_ch¨
 *
p
, 
ch
;

352 
sw_°¨t
 = 0,

353 
sw_H
,

354 
sw_HT
,

355 
sw_HTT
,

356 
sw_HTTP
,

357 
sw_skù
,

358 
sw_Æmo°_d⁄e


359 } 
°©e
;

361 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

364 
°©e
 = 
˘x
->state;

366 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

367 
ch
 = *
p
;

369 
°©e
) {

372 
sw_°¨t
:

373 i‡(
ch
 == 'H') {

374 
°©e
 = 
sw_H
;

377 
√xt
;

379 
sw_H
:

380 i‡(
ch
 == 'T') {

381 
°©e
 = 
sw_HT
;

384 
√xt
;

386 
sw_HT
:

387 i‡(
ch
 == 'T') {

388 
°©e
 = 
sw_HTT
;

391 
√xt
;

393 
sw_HTT
:

394 i‡(
ch
 == 'P') {

395 
°©e
 = 
sw_HTTP
;

398 
√xt
;

400 
sw_HTTP
:

401 i‡(
ch
 == '/') {

402 
°©e
 = 
sw_skù
;

405 
√xt
;

408 
sw_skù
:

409 
ch
) {

410 
CR
:

411 
°©e
 = 
sw_Æmo°_d⁄e
;

414 
LF
:

415 
d⁄e
;

420 
sw_Æmo°_d⁄e
:

421 i‡(
ch
 =
LF
) {

422 
d⁄e
;

425 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

427 
˘x
->
≥î
.
«me
);

428 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

429 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

430 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

435 
˘x
->
ª•⁄£
->
pos
 = 
p
;

436 
˘x
->
°©e
 = state;

440 
√xt
:

442 
p
 = 
˘x
->
ª•⁄£
->
°¨t
 - 1;

444 
d⁄e
:

446 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

447 
˘x
->
°©e
 = 0;

448 
˘x
->
h™dÀr
 = 
ngx_maû_auth_hâp_¥o˚ss_hódîs
;

449 
˘x
->
	`h™dÀr
(
s
, ctx);

450 
	}
}

454 
	$ngx_maû_auth_hâp_¥o˚ss_hódîs
(
ngx_maû_£ssi⁄_t
 *
s
,

455 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

457 
u_ch¨
 *
p
;

458 
time_t
 
timî
;

459 
size_t
 
Àn
, 
size
;

460 
ngx_öt_t
 
rc
, 
p‹t
, 
n
;

461 
ngx_addr_t
 *
≥î
;

462 
sockaddr_ö
 *
sö
;

463 #i‡(
NGX_HAVE_INET6
)

464 
sockaddr_ö6
 *
sö6
;

467 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

471 
rc
 = 
	`ngx_maû_auth_hâp_∑r£_hódî_löe
(
s
, 
˘x
);

473 i‡(
rc
 =
NGX_OK
) {

475 #i‡(
NGX_DEBUG
)

477 
ngx_°r_t
 
key
, 
vÆue
;

479 
key
.
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

480 
key
.
d©a
 = 
˘x
->
hódî_«me_°¨t
;

481 
vÆue
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

482 
vÆue
.
d©a
 = 
˘x
->
hódî_°¨t
;

484 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

486 &
key
, &
vÆue
);

490 
Àn
 = 
˘x
->
hódî_«me_íd
 - ctx->
hódî_«me_°¨t
;

492 i‡(
Àn
 == ("Auth-Status") - 1

493 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

494 (
u_ch¨
 *) "Auth-Status",

498 
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

500 i‡(
Àn
 == 2

501 && 
˘x
->
hódî_°¨t
[0] == 'O'

502 && 
˘x
->
hódî_°¨t
[1] == 'K')

507 i‡(
Àn
 == 4

508 && 
˘x
->
hódî_°¨t
[0] == 'W'

509 && 
˘x
->
hódî_°¨t
[1] == 'A'

510 && 
˘x
->
hódî_°¨t
[2] == 'I'

511 && 
˘x
->
hódî_°¨t
[3] == 'T')

513 
s
->
auth_waô
 = 1;

517 
˘x
->
îrmsg
.
Àn
 =Üen;

518 
˘x
->
îrmsg
.
d©a
 = ctx->
hódî_°¨t
;

520 
s
->
¥Ÿocﬁ
) {

522 
NGX_MAIL_POP3_PROTOCOL
:

523 
size
 = ("-ERR "Ë- 1 + 
Àn
 + (
CRLF
) - 1;

526 
NGX_MAIL_IMAP_PROTOCOL
:

527 
size
 = 
s
->
èg
.
Àn
 + ("NO ") - 1 +Üen

528 + (
CRLF
) - 1;

532 
˘x
->
îr
 = ctx->
îrmsg
;

536 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
size
);

537 i‡(
p
 =
NULL
) {

538 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

539 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

540 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

544 
˘x
->
îr
.
d©a
 = 
p
;

546 
s
->
¥Ÿocﬁ
) {

548 
NGX_MAIL_POP3_PROTOCOL
:

549 *
p
++ = '-'; *p++ = 'E'; *p++ = 'R'; *p++ = 'R'; *p++ = ' ';

552 
NGX_MAIL_IMAP_PROTOCOL
:

553 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

554 *
p
++ = 'N'; *p++ = 'O'; *p++ = ' ';

561 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
hódî_°¨t
, 
Àn
);

562 *
p
++ = 
CR
; *p++ = 
LF
;

564 
˘x
->
îr
.
Àn
 = 
p
 - ctx->îr.
d©a
;

569 i‡(
Àn
 == ("Auth-Server") - 1

570 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

571 (
u_ch¨
 *) "Auth-Server",

575 
˘x
->
addr
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

576 
˘x
->
addr
.
d©a
 = ctx->
hódî_°¨t
;

581 i‡(
Àn
 == ("Auth-Port") - 1

582 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

583 (
u_ch¨
 *) "Auth-Port",

587 
˘x
->
p‹t
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

588 
˘x
->
p‹t
.
d©a
 = ctx->
hódî_°¨t
;

593 i‡(
Àn
 == ("Auth-User") - 1

594 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

595 (
u_ch¨
 *) "Auth-User",

599 
s
->
logö
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

601 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
, s->logö.
Àn
);

602 i‡(
s
->
logö
.
d©a
 =
NULL
) {

603 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

604 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

605 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

609 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
˘x
->
hódî_°¨t
, s->logö.
Àn
);

614 i‡(
Àn
 == ("Auth-Pass") - 1

615 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

616 (
u_ch¨
 *) "Auth-Pass",

620 
s
->
∑sswd
.
Àn
 = 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
;

622 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(s->
c⁄√˘i⁄
->
poﬁ
,

623 
s
->
∑sswd
.
Àn
);

624 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

625 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

626 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

627 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

631 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
˘x
->
hódî_°¨t
, s->∑sswd.
Àn
);

636 i‡(
Àn
 == ("Auth-Wait") - 1

637 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

638 (
u_ch¨
 *) "Auth-Wait",

642 
n
 = 
	`ngx_©oi
(
˘x
->
hódî_°¨t
,

643 
˘x
->
hódî_íd
 - ctx->
hódî_°¨t
);

645 i‡(
n
 !
NGX_ERROR
) {

646 
˘x
->
¶ìp
 = 
n
;

652 i‡(
Àn
 == ("Auth-Error-Code") - 1

653 && 
	`ngx_°∫ˇ£cmp
(
˘x
->
hódî_«me_°¨t
,

654 (
u_ch¨
 *) "Auth-Error-Code",

658 
˘x
->
îrcode
.
Àn
 = ctx->
hódî_íd
 - ctx->
hódî_°¨t
;

660 
˘x
->
îrcode
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
,

661 
˘x
->
îrcode
.
Àn
);

662 i‡(
˘x
->
îrcode
.
d©a
 =
NULL
) {

663 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

664 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

665 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

669 
	`ngx_mem˝y
(
˘x
->
îrcode
.
d©a
, ctx->
hódî_°¨t
,

670 
˘x
->
îrcode
.
Àn
);

680 i‡(
rc
 =
NGX_DONE
) {

681 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

684 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

686 i‡(
˘x
->
îr
.
Àn
) {

688 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

689 "˛õ¡Üogö faûed: \"%V\"", &
˘x
->
îrmsg
);

691 i‡(
s
->
¥Ÿocﬁ
 =
NGX_MAIL_SMTP_PROTOCOL
) {

693 i‡(
˘x
->
îrcode
.
Àn
 == 0) {

694 
˘x
->
îrcode
 = 
ngx_maû_smç_îrcode
;

697 
˘x
->
îr
.
Àn
 = ctx->
îrcode
.À¿+ ctx->
îrmsg
.len

698 + (" " 
CRLF
) - 1;

700 
p
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
˘x
->
îr
.
Àn
);

701 i‡(
p
 =
NULL
) {

702 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

703 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

704 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

708 
˘x
->
îr
.
d©a
 = 
p
;

710 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrcode
.
d©a
, ctx->îrcode.
Àn
);

711 *
p
++ = ' ';

712 
p
 = 
	`ngx_˝ymem
’, 
˘x
->
îrmsg
.
d©a
, ctx->îrmsg.
Àn
);

713 *
p
++ = 
CR
; *∞
LF
;

716 
s
->
out
 = 
˘x
->
îr
;

717 
timî
 = 
˘x
->
¶ìp
;

719 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

721 i‡(
timî
 == 0) {

722 
s
->
quô
 = 1;

723 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

727 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

729 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

734 i‡(
s
->
auth_waô
) {

735 
timî
 = 
˘x
->
¶ìp
;

737 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

739 i‡(
timî
 == 0) {

740 
	`ngx_maû_auth_hâp_öô
(
s
);

744 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, (
ngx_m£c_t
Ë(
timî
 * 1000));

746 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_auth_¶ìp_h™dÀr
;

751 i‡(
˘x
->
addr
.
Àn
 =0 || ctx->
p‹t
.len == 0) {

752 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

754 
˘x
->
≥î
.
«me
);

755 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

756 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

760 i‡(
s
->
∑sswd
.
d©a
 =
NULL


761 && 
s
->
¥Ÿocﬁ
 !
NGX_MAIL_SMTP_PROTOCOL
)

763 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

765 
˘x
->
≥î
.
«me
);

766 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

767 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

771 
≥î
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_addr_t
));

772 i‡(
≥î
 =
NULL
) {

773 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

774 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

778 
rc
 = 
	`ngx_∑r£_addr
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
≥î
,

779 
˘x
->
addr
.
d©a
, ctx->addr.
Àn
);

781 
rc
) {

782 
NGX_OK
:

785 
NGX_DECLINED
:

786 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

789 
˘x
->
≥î
.
«me
, &˘x->
addr
);

793 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

794 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

798 
p‹t
 = 
	`ngx_©oi
(
˘x
->p‹t.
d©a
, ctx->p‹t.
Àn
);

799 i‡(
p‹t
 =
NGX_ERROR
 ||Öort < 1 ||Öort > 65535) {

800 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

803 
˘x
->
≥î
.
«me
, &˘x->
p‹t
);

804 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

805 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

809 
≥î
->
sockaddr
->
ß_Ámûy
) {

811 #i‡(
NGX_HAVE_INET6
)

812 
AF_INET6
:

813 
sö6
 = (
sockaddr_ö6
 *Ë
≥î
->
sockaddr
;

814 
sö6
->
sö6_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

819 
sö
 = (
sockaddr_ö
 *Ë
≥î
->
sockaddr
;

820 
sö
->
sö_p‹t
 = 
	`ht⁄s
((
ö_p‹t_t
Ë
p‹t
);

824 
Àn
 = 
˘x
->
addr
.À¿+ 1 + ctx->
p‹t
.len;

826 
≥î
->
«me
.
Àn
 =Üen;

828 
≥î
->
«me
.
d©a
 = 
	`ngx_≤Æloc
(
s
->
c⁄√˘i⁄
->
poﬁ
, 
Àn
);

829 i‡(
≥î
->
«me
.
d©a
 =
NULL
) {

830 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

831 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

835 
Àn
 = 
˘x
->
addr
.len;

837 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
, 
˘x
->
addr
.d©a, 
Àn
);

839 
≥î
->
«me
.
d©a
[
Àn
++] = ':';

841 
	`ngx_mem˝y
(
≥î
->
«me
.
d©a
 + 
Àn
, 
˘x
->
p‹t
.data, ctx->port.len);

843 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

844 
	`ngx_maû_¥oxy_öô
(
s
, 
≥î
);

849 i‡(
rc
 =
NGX_AGAIN
 ) {

855 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

857 
˘x
->
≥î
.
«me
);

858 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

859 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

860 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

864 
	}
}

868 
	$ngx_maû_auth_¶ìp_h™dÀr
(
ngx_evít_t
 *
ªv
)

870 
ngx_c⁄√˘i⁄_t
 *
c
;

871 
ngx_maû_£ssi⁄_t
 *
s
;

872 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

874 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailáuth sleep handler");

876 
c
 = 
ªv
->
d©a
;

877 
s
 = 
c
->
d©a
;

879 i‡(
ªv
->
timedout
) {

881 
ªv
->
timedout
 = 0;

883 i‡(
s
->
auth_waô
) {

884 
s
->
auth_waô
 = 0;

885 
	`ngx_maû_auth_hâp_öô
(
s
);

889 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

891 
ªv
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
auth_°©e
;

893 
s
->
maû_°©e
 = 0;

894 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_PLAIN
;

896 
c
->
log
->
a˘i⁄
 = "ináuth state";

898 
	`ngx_maû_£nd
(
c
->
wrôe
);

900 i‡(
c
->
de°royed
) {

904 
	`ngx_add_timî
(
ªv
, 
cscf
->
timeout
);

906 i‡(
ªv
->
ªady
) {

907 
ªv
->
	`h™dÀr
(rev);

911 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

912 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

918 i‡(
ªv
->
a˘ive
) {

919 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

920 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

923 
	}
}

926 
ngx_öt_t


927 
	$ngx_maû_auth_hâp_∑r£_hódî_löe
(
ngx_maû_£ssi⁄_t
 *
s
,

928 
ngx_maû_auth_hâp_˘x_t
 *
˘x
)

930 
u_ch¨
 
c
, 
ch
, *
p
;

932 
sw_°¨t
 = 0,

933 
sw_«me
,

934 
sw_•a˚_bef‹e_vÆue
,

935 
sw_vÆue
,

936 
sw_•a˚_a·î_vÆue
,

937 
sw_Æmo°_d⁄e
,

938 
sw_hódî_Æmo°_d⁄e


939 } 
°©e
;

941 
°©e
 = 
˘x
->state;

943 
p
 = 
˘x
->
ª•⁄£
->
pos
;Ö < ctx->ª•⁄£->
œ°
;Ö++) {

944 
ch
 = *
p
;

946 
°©e
) {

949 
sw_°¨t
:

951 
ch
) {

952 
CR
:

953 
˘x
->
hódî_íd
 = 
p
;

954 
°©e
 = 
sw_hódî_Æmo°_d⁄e
;

956 
LF
:

957 
˘x
->
hódî_íd
 = 
p
;

958 
hódî_d⁄e
;

960 
°©e
 = 
sw_«me
;

961 
˘x
->
hódî_«me_°¨t
 = 
p
;

963 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

964 i‡(
c
 >= 'a' && c <= 'z') {

968 i‡(
ch
 >= '0' && ch <= '9') {

972  
NGX_ERROR
;

977 
sw_«me
:

978 
c
 = (
u_ch¨
Ë(
ch
 | 0x20);

979 i‡(
c
 >= 'a' && c <= 'z') {

983 i‡(
ch
 == ':') {

984 
˘x
->
hódî_«me_íd
 = 
p
;

985 
°©e
 = 
sw_•a˚_bef‹e_vÆue
;

989 i‡(
ch
 == '-') {

993 i‡(
ch
 >= '0' && ch <= '9') {

997 i‡(
ch
 =
CR
) {

998 
˘x
->
hódî_«me_íd
 = 
p
;

999 
˘x
->
hódî_°¨t
 = 
p
;

1000 
˘x
->
hódî_íd
 = 
p
;

1001 
°©e
 = 
sw_Æmo°_d⁄e
;

1005 i‡(
ch
 =
LF
) {

1006 
˘x
->
hódî_«me_íd
 = 
p
;

1007 
˘x
->
hódî_°¨t
 = 
p
;

1008 
˘x
->
hódî_íd
 = 
p
;

1009 
d⁄e
;

1012  
NGX_ERROR
;

1015 
sw_•a˚_bef‹e_vÆue
:

1016 
ch
) {

1019 
CR
:

1020 
˘x
->
hódî_°¨t
 = 
p
;

1021 
˘x
->
hódî_íd
 = 
p
;

1022 
°©e
 = 
sw_Æmo°_d⁄e
;

1024 
LF
:

1025 
˘x
->
hódî_°¨t
 = 
p
;

1026 
˘x
->
hódî_íd
 = 
p
;

1027 
d⁄e
;

1029 
˘x
->
hódî_°¨t
 = 
p
;

1030 
°©e
 = 
sw_vÆue
;

1036 
sw_vÆue
:

1037 
ch
) {

1039 
˘x
->
hódî_íd
 = 
p
;

1040 
°©e
 = 
sw_•a˚_a·î_vÆue
;

1042 
CR
:

1043 
˘x
->
hódî_íd
 = 
p
;

1044 
°©e
 = 
sw_Æmo°_d⁄e
;

1046 
LF
:

1047 
˘x
->
hódî_íd
 = 
p
;

1048 
d⁄e
;

1053 
sw_•a˚_a·î_vÆue
:

1054 
ch
) {

1057 
CR
:

1058 
°©e
 = 
sw_Æmo°_d⁄e
;

1060 
LF
:

1061 
d⁄e
;

1063 
°©e
 = 
sw_vÆue
;

1069 
sw_Æmo°_d⁄e
:

1070 
ch
) {

1071 
LF
:

1072 
d⁄e
;

1074  
NGX_ERROR
;

1078 
sw_hódî_Æmo°_d⁄e
:

1079 
ch
) {

1080 
LF
:

1081 
hódî_d⁄e
;

1083  
NGX_ERROR
;

1088 
˘x
->
ª•⁄£
->
pos
 = 
p
;

1089 
˘x
->
°©e
 = state;

1091  
NGX_AGAIN
;

1093 
d⁄e
:

1095 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1096 
˘x
->
°©e
 = 
sw_°¨t
;

1098  
NGX_OK
;

1100 
hódî_d⁄e
:

1102 
˘x
->
ª•⁄£
->
pos
 = 
p
 + 1;

1103 
˘x
->
°©e
 = 
sw_°¨t
;

1105  
NGX_DONE
;

1106 
	}
}

1110 
	$ngx_maû_auth_hâp_block_ªad
(
ngx_evít_t
 *
ªv
)

1112 
ngx_c⁄√˘i⁄_t
 *
c
;

1113 
ngx_maû_£ssi⁄_t
 *
s
;

1114 
ngx_maû_auth_hâp_˘x_t
 *
˘x
;

1116 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

1119 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

1120 
c
 = 
ªv
->
d©a
;

1121 
s
 = 
c
->
d©a
;

1123 
˘x
 = 
	`ngx_maû_gë_moduÀ_˘x
(
s
, 
ngx_maû_auth_hâp_moduÀ
);

1125 
	`ngx_˛o£_c⁄√˘i⁄
(
˘x
->
≥î
.
c⁄√˘i⁄
);

1126 
	`ngx_de°roy_poﬁ
(
˘x
->
poﬁ
);

1127 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1129 
	}
}

1133 
	$ngx_maû_auth_hâp_dummy_h™dÀr
(
ngx_evít_t
 *
ev
)

1135 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

1137 
	}
}

1140 
ngx_buf_t
 *

1141 
	$ngx_maû_auth_hâp_¸óã_ªque°
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_poﬁ_t
 *
poﬁ
,

1142 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
)

1144 
size_t
 
Àn
;

1145 
ngx_buf_t
 *
b
;

1146 
ngx_°r_t
 
logö
, 
∑sswd
;

1147 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

1149 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
logö
, &logöË!
NGX_OK
) {

1150  
NULL
;

1153 i‡(
	`ngx_maû_auth_hâp_esˇ≥
(
poﬁ
, &
s
->
∑sswd
, &∑sswdË!
NGX_OK
) {

1154  
NULL
;

1157 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

1159 
Àn
 = ("GET "Ë- 1 + 
ahcf
->
uri
.À¿+ (" HTTP/1.0" 
CRLF
) - 1

1160 + ("Ho°: "Ë- 1 + 
ahcf
->
ho°_hódî
.
Àn
 + (
CRLF
) - 1

1162 + 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn


1163 + (
CRLF
) - 1

1164 + ("Auth-U£r: "Ë- 1 + 
logö
.
Àn
 + (
CRLF
) - 1

1165 + ("Auth-Pass: "Ë- 1 + 
∑sswd
.
Àn
 + (
CRLF
) - 1

1166 + ("Auth-SÆt: "Ë- 1 + 
s
->
ß…
.
Àn


1167 + ("Auth-PrŸocﬁ: "Ë- 1 + 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn


1168 + (
CRLF
) - 1

1169 + ("Auth-Logö-Aâem±: "Ë- 1 + 
NGX_INT_T_LEN


1170 + (
CRLF
) - 1

1171 + ("Clõ¡-IP: "Ë- 1 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn


1172 + (
CRLF
) - 1

1173 + ("Clõ¡-Ho°: "Ë- 1 + 
s
->
ho°
.
Àn
 + (
CRLF
) - 1

1174 + ("Auth-SMTP-Hño: "Ë- 1 + 
s
->
smç_hño
.
Àn


1175 + ("Auth-SMTP-From: "Ë- 1 + 
s
->
smç_‰om
.
Àn


1176 + ("Auth-SMTP-To: "Ë- 1 + 
s
->
smç_to
.
Àn


1177 + 
ahcf
->
hódî
.
Àn


1178 + (
CRLF
) - 1;

1180 
b
 = 
	`ngx_¸óã_ãmp_buf
(
poﬁ
, 
Àn
);

1181 i‡(
b
 =
NULL
) {

1182  
NULL
;

1185 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "GET ", ("GET ") - 1);

1186 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
uri
.
d©a
,áhcf->uri.
Àn
);

1187 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, " HTTP/1.0" 
CRLF
,

1188 (" HTTP/1.0" 
CRLF
) - 1);

1190 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Host: ", ("Host: ") - 1);

1191 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
ho°_hódî
.
d©a
,

1192 
ahcf
->
ho°_hódî
.
Àn
);

1193 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1195 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Method: ",

1197 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last,

1198 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
d©a
,

1199 
ngx_maû_auth_hâp_mëhod
[
s
->
auth_mëhod
].
Àn
);

1200 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1202 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-User: ", ("Auth-User: ") - 1);

1203 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
logö
.
d©a
,Üogö.
Àn
);

1204 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1206 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Pass: ", ("Auth-Pass: ") - 1);

1207 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
∑sswd
.
d©a
,Öasswd.
Àn
);

1208 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1210 i‡(
s
->
auth_mëhod
 !
NGX_MAIL_AUTH_PLAIN
 && s->
ß…
.
Àn
) {

1211 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Salt: ", ("Auth-Salt: ") - 1);

1212 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

1214 
s
->
∑sswd
.
d©a
 = 
NULL
;

1217 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-Protocol: ",

1219 
b
->
œ°
 = 
	`ngx_˝ymem
(b->œ°, 
cscf
->
¥Ÿocﬁ
->
«me
.
d©a
,

1220 
cscf
->
¥Ÿocﬁ
->
«me
.
Àn
);

1221 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1223 
b
->
œ°
 = 
	`ngx_•rötf
(b->œ°, "Auth-Logö-Aâem±: %ui" 
CRLF
,

1224 
s
->
logö_©ãm±
);

1226 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-IP: ", ("Client-IP: ") - 1);

1227 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
d©a
,

1228 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
);

1229 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1231 i‡(
s
->
ho°
.
Àn
) {

1232 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Client-Host: ",

1234 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
ho°
.
d©a
, s->ho°.
Àn
);

1235 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1238 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

1242 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-Helo: ",

1244 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_hño
.
d©a
, s->smç_hño.
Àn
);

1245 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1247 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-From: ",

1249 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_‰om
.
d©a
, s->smç_‰om.
Àn
);

1250 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1252 
b
->
œ°
 = 
	`ngx_˝ymem
(b->last, "Auth-SMTP-To: ",

1254 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
s
->
smç_to
.
d©a
, s->smç_to.
Àn
);

1255 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1259 i‡(
ahcf
->
hódî
.
Àn
) {

1260 
b
->
œ°
 = 
	`ngx_c›y
(b->œ°, 
ahcf
->
hódî
.
d©a
,áhcf->hódî.
Àn
);

1264 *
b
->
œ°
++ = 
CR
; *b->œ°++ = 
LF
;

1266 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

1268 
ngx_°r_t
 
l
;

1270 
l
.
Àn
 = 
b
->
œ°
 - b->
pos
;

1271 
l
.
d©a
 = 
b
->
pos
;

1272 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1273 "maûáuth hâ∞hódî:\n\"%V\"", &
l
);

1277  
b
;

1278 
	}
}

1281 
ngx_öt_t


1282 
	$ngx_maû_auth_hâp_esˇ≥
(
ngx_poﬁ_t
 *
poﬁ
, 
ngx_°r_t
 *
ãxt
,Çgx_°r_à*
esˇ≥d
)

1284 
u_ch¨
 *
p
;

1285 
uöçå_t
 
n
;

1287 
n
 = 
	`ngx_esˇ≥_uri
(
NULL
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1289 i‡(
n
 == 0) {

1290 *
esˇ≥d
 = *
ãxt
;

1291  
NGX_OK
;

1294 
esˇ≥d
->
Àn
 = 
ãxt
->À¿+ 
n
 * 2;

1296 
p
 = 
	`ngx_≤Æloc
(
poﬁ
, 
esˇ≥d
->
Àn
);

1297 i‡(
p
 =
NULL
) {

1298  
NGX_ERROR
;

1301 (Ë
	`ngx_esˇ≥_uri
(
p
, 
ãxt
->
d©a
,Åext->
Àn
, 
NGX_ESCAPE_MAIL_AUTH
);

1303 
esˇ≥d
->
d©a
 = 
p
;

1305  
NGX_OK
;

1306 
	}
}

1310 
	$ngx_maû_auth_hâp_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1312 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
;

1314 
ahcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_auth_hâp_c⁄f_t
));

1315 i‡(
ahcf
 =
NULL
) {

1316  
NULL
;

1319 
ahcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1321 
ahcf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

1322 
ahcf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

1324  
ahcf
;

1325 
	}
}

1329 
	$ngx_maû_auth_hâp_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1331 
ngx_maû_auth_hâp_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1332 
ngx_maû_auth_hâp_c⁄f_t
 *
c⁄f
 = 
chûd
;

1334 
u_ch¨
 *
p
;

1335 
size_t
 
Àn
;

1336 
ngx_uöt_t
 
i
;

1337 
ngx_èbÀ_ñt_t
 *
hódî
;

1339 i‡(
c⁄f
->
≥î
 =
NULL
) {

1340 
c⁄f
->
≥î
 = 
¥ev
->peer;

1341 
c⁄f
->
ho°_hódî
 = 
¥ev
->host_header;

1342 
c⁄f
->
uri
 = 
¥ev
->uri;

1344 i‡(
c⁄f
->
≥î
 =
NULL
) {

1345 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

1347 
c⁄f
->
fûe
, c⁄f->
löe
);

1349  
NGX_CONF_ERROR
;

1353 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

1355 i‡(
c⁄f
->
hódîs
 =
NULL
) {

1356 
c⁄f
->
hódîs
 = 
¥ev
->headers;

1357 
c⁄f
->
hódî
 = 
¥ev
->header;

1360 i‡(
c⁄f
->
hódîs
 && c⁄f->
hódî
.
Àn
 == 0) {

1361 
Àn
 = 0;

1362 
hódî
 = 
c⁄f
->
hódîs
->
ñts
;

1363 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1364 
Àn
 +
hódî
[
i
].
key
.À¿+ 2 + hódî[i].
vÆue
.len + 2;

1367 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
Àn
);

1368 i‡(
p
 =
NULL
) {

1369  
NGX_CONF_ERROR
;

1372 
c⁄f
->
hódî
.
Àn
 =Üen;

1373 
c⁄f
->
hódî
.
d©a
 = 
p
;

1375 
i
 = 0; i < 
c⁄f
->
hódîs
->
√…s
; i++) {

1376 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
key
.
d©a
, hódî[i].key.
Àn
);

1377 *
p
++ = ':'; *p++ = ' ';

1378 
p
 = 
	`ngx_˝ymem
’, 
hódî
[
i
].
vÆue
.
d©a
, hódî[i].vÆue.
Àn
);

1379 *
p
++ = 
CR
; *p++ = 
LF
;

1383  
NGX_CONF_OK
;

1384 
	}
}

1388 
	$ngx_maû_auth_hâp
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1390 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1392 
ngx_°r_t
 *
vÆue
;

1393 
ngx_uæ_t
 
u
;

1395 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1397 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

1399 
u
.
uæ
 = 
vÆue
[1];

1400 
u
.
deÁu…_p‹t
 = 80;

1401 
u
.
uri_∑π
 = 1;

1403 i‡(
	`ngx_°∫cmp
(
u
.
uæ
.
d©a
, "http://", 7) == 0) {

1404 
u
.
uæ
.
Àn
 -= 7;

1405 
u
.
uæ
.
d©a
 += 7;

1408 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

1409 i‡(
u
.
îr
) {

1410 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

1411 "%†öáuth_hâ∞\"%V\"", 
u
.
îr
, &u.
uæ
);

1414  
NGX_CONF_ERROR
;

1417 
ahcf
->
≥î
 = 
u
.
addrs
;

1419 i‡(
u
.
Ámûy
 !
AF_UNIX
) {

1420 
ahcf
->
ho°_hódî
 = 
u
.
ho°
;

1423 
	`ngx_°r_£t
(&
ahcf
->
ho°_hódî
, "localhost");

1426 
ahcf
->
uri
 = 
u
.uri;

1428 i‡(
ahcf
->
uri
.
Àn
 == 0) {

1429 
	`ngx_°r_£t
(&
ahcf
->
uri
, "/");

1432  
NGX_CONF_OK
;

1433 
	}
}

1437 
	$ngx_maû_auth_hâp_hódî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

1439 
ngx_maû_auth_hâp_c⁄f_t
 *
ahcf
 = 
c⁄f
;

1441 
ngx_°r_t
 *
vÆue
;

1442 
ngx_èbÀ_ñt_t
 *
hódî
;

1444 i‡(
ahcf
->
hódîs
 =
NULL
) {

1445 
ahcf
->
hódîs
 = 
	`ngx_¨øy_¸óã
(
cf
->
poﬁ
, 1, (
ngx_èbÀ_ñt_t
));

1446 i‡(
ahcf
->
hódîs
 =
NULL
) {

1447  
NGX_CONF_ERROR
;

1451 
hódî
 = 
	`ngx_¨øy_push
(
ahcf
->
hódîs
);

1452 i‡(
hódî
 =
NULL
) {

1453  
NGX_CONF_ERROR
;

1456 
vÆue
 = 
cf
->
¨gs
->
ñts
;

1458 
hódî
->
key
 = 
vÆue
[1];

1459 
hódî
->
vÆue
 = value[2];

1461  
NGX_CONF_OK
;

1462 
	}
}

	@src/mail/ngx_mail_core_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 *
ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
);

15 *
ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

18 *
ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

19 *
c⁄f
);

20 *
ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_dïªˇãd_t
 
	gngx_c⁄f_dïªˇãd_so_kì∑live
 = {

29 
ngx_c⁄f_dïªˇãd
, "so_keepalive",

34 
ngx_comm™d_t
 
	gngx_maû_c‹e_comm™ds
[] = {

36 { 
ngx_°rög
("server"),

37 
NGX_MAIL_MAIN_CONF
|
NGX_CONF_BLOCK
|
NGX_CONF_NOARGS
,

38 
ngx_maû_c‹e_£rvî
,

41 
NULL
 },

43 { 
ngx_°rög
("listen"),

44 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

45 
ngx_maû_c‹e_li°í
,

46 
NGX_MAIL_SRV_CONF_OFFSET
,

48 
NULL
 },

50 { 
ngx_°rög
("protocol"),

51 
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

52 
ngx_maû_c‹e_¥Ÿocﬁ
,

53 
NGX_MAIL_SRV_CONF_OFFSET
,

55 
NULL
 },

57 { 
ngx_°rög
("so_keepalive"),

58 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

59 
ngx_c⁄f_£t_Êag_¶Ÿ
,

60 
NGX_MAIL_SRV_CONF_OFFSET
,

61 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
so_kì∑live
),

62 &
ngx_c⁄f_dïªˇãd_so_kì∑live
 },

64 { 
ngx_°rög
("timeout"),

65 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

66 
ngx_c⁄f_£t_m£c_¶Ÿ
,

67 
NGX_MAIL_SRV_CONF_OFFSET
,

68 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
timeout
),

69 
NULL
 },

71 { 
ngx_°rög
("server_name"),

72 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

73 
ngx_c⁄f_£t_°r_¶Ÿ
,

74 
NGX_MAIL_SRV_CONF_OFFSET
,

75 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
£rvî_«me
),

76 
NULL
 },

78 { 
ngx_°rög
("resolver"),

79 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

80 
ngx_maû_c‹e_ªsﬁvî
,

81 
NGX_MAIL_SRV_CONF_OFFSET
,

83 
NULL
 },

85 { 
ngx_°rög
("resolver_timeout"),

86 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

87 
ngx_c⁄f_£t_m£c_¶Ÿ
,

88 
NGX_MAIL_SRV_CONF_OFFSET
,

89 
off£tof
(
ngx_maû_c‹e_§v_c⁄f_t
, 
ªsﬁvî_timeout
),

90 
NULL
 },

92 
ngx_nuŒ_comm™d


96 
ngx_maû_moduÀ_t
 
	gngx_maû_c‹e_moduÀ_˘x
 = {

97 
NULL
,

99 
ngx_maû_c‹e_¸óã_maö_c⁄f
,

100 
NULL
,

102 
ngx_maû_c‹e_¸óã_§v_c⁄f
,

103 
ngx_maû_c‹e_mîge_§v_c⁄f


107 
ngx_moduÀ_t
 
	gngx_maû_c‹e_moduÀ
 = {

108 
NGX_MODULE_V1
,

109 &
ngx_maû_c‹e_moduÀ_˘x
,

110 
ngx_maû_c‹e_comm™ds
,

111 
NGX_MAIL_MODULE
,

112 
NULL
,

113 
NULL
,

114 
NULL
,

115 
NULL
,

116 
NULL
,

117 
NULL
,

118 
NULL
,

119 
NGX_MODULE_V1_PADDING


124 
	$ngx_maû_c‹e_¸óã_maö_c⁄f
(
ngx_c⁄f_t
 *
cf
)

126 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

128 
cmcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_maö_c⁄f_t
));

129 i‡(
cmcf
 =
NULL
) {

130  
NULL
;

133 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
£rvîs
, 
cf
->
poﬁ
, 4,

134 (
ngx_maû_c‹e_§v_c⁄f_t
 *))

135 !
NGX_OK
)

137  
NULL
;

140 i‡(
	`ngx_¨øy_öô
(&
cmcf
->
li°í
, 
cf
->
poﬁ
, 4, (
ngx_maû_li°í_t
))

141 !
NGX_OK
)

143  
NULL
;

146  
cmcf
;

147 
	}
}

151 
	$ngx_maû_c‹e_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

153 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

155 
cscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c‹e_§v_c⁄f_t
));

156 i‡(
cscf
 =
NULL
) {

157  
NULL
;

166 
cscf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

167 
cscf
->
ªsﬁvî_timeout
 = 
NGX_CONF_UNSET_MSEC
;

168 
cscf
->
so_kì∑live
 = 
NGX_CONF_UNSET
;

170 
cscf
->
ªsﬁvî
 = 
NGX_CONF_UNSET_PTR
;

172 
cscf
->
fûe_«me
 = 
cf
->
c⁄f_fûe
->
fûe
.
«me
.
d©a
;

173 
cscf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

175  
cscf
;

176 
	}
}

180 
	$ngx_maû_c‹e_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

182 
ngx_maû_c‹e_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

183 
ngx_maû_c‹e_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

185 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 60000);

186 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
ªsﬁvî_timeout
, 
¥ev
->resolver_timeout,

189 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
so_kì∑live
, 
¥ev
->so_keepalive, 0);

192 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
£rvî_«me
, 
¥ev
->server_name, "");

194 i‡(
c⁄f
->
£rvî_«me
.
Àn
 == 0) {

195 
c⁄f
->
£rvî_«me
 = 
cf
->
cy˛e
->
ho°«me
;

198 i‡(
c⁄f
->
¥Ÿocﬁ
 =
NULL
) {

199 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

201 
c⁄f
->
fûe_«me
, c⁄f->
löe
);

202  
NGX_CONF_ERROR
;

205 
	`ngx_c⁄f_mîge_±r_vÆue
(
c⁄f
->
ªsﬁvî
, 
¥ev
->ªsﬁvî, 
NULL
);

207  
NGX_CONF_OK
;

208 
	}
}

212 
	$ngx_maû_c‹e_£rvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

214 *
rv
;

215 *
mc⁄f
;

216 
ngx_uöt_t
 
m
;

217 
ngx_c⁄f_t
 
pcf
;

218 
ngx_maû_moduÀ_t
 *
moduÀ
;

219 
ngx_maû_c⁄f_˘x_t
 *
˘x
, *
maû_˘x
;

220 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
, **
cscÂ
;

221 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

223 
˘x
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_c⁄f_˘x_t
));

224 i‡(
˘x
 =
NULL
) {

225  
NGX_CONF_ERROR
;

228 
maû_˘x
 = 
cf
->
˘x
;

229 
˘x
->
maö_c⁄f
 = 
maû_˘x
->main_conf;

233 
˘x
->
§v_c⁄f
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

234 i‡(
˘x
->
§v_c⁄f
 =
NULL
) {

235  
NGX_CONF_ERROR
;

238 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

239 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

243 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

245 i‡(
moduÀ
->
¸óã_§v_c⁄f
) {

246 
mc⁄f
 = 
moduÀ
->
	`¸óã_§v_c⁄f
(
cf
);

247 i‡(
mc⁄f
 =
NULL
) {

248  
NGX_CONF_ERROR
;

251 
˘x
->
§v_c⁄f
[
ngx_moduÀs
[
m
]->
˘x_ödex
] = 
mc⁄f
;

257 
cscf
 = 
˘x
->
§v_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

258 
cscf
->
˘x
 = ctx;

260 
cmcf
 = 
˘x
->
maö_c⁄f
[
ngx_maû_c‹e_moduÀ
.
˘x_ödex
];

262 
cscÂ
 = 
	`ngx_¨øy_push
(&
cmcf
->
£rvîs
);

263 i‡(
cscÂ
 =
NULL
) {

264  
NGX_CONF_ERROR
;

267 *
cscÂ
 = 
cscf
;

272 
pcf
 = *
cf
;

273 
cf
->
˘x
 = ctx;

274 
cf
->
cmd_ty≥
 = 
NGX_MAIL_SRV_CONF
;

276 
rv
 = 
	`ngx_c⁄f_∑r£
(
cf
, 
NULL
);

278 *
cf
 = 
pcf
;

280  
rv
;

281 
	}
}

285 
	$ngx_maû_c‹e_li°í
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

287 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

289 
size_t
 
Àn
, 
off
;

290 
ö_p‹t_t
 
p‹t
;

291 
ngx_°r_t
 *
vÆue
;

292 
ngx_uæ_t
 
u
;

293 
ngx_uöt_t
 
i
, 
m
;

294 
sockaddr
 *
ß
;

295 
ngx_maû_li°í_t
 *
ls
;

296 
ngx_maû_moduÀ_t
 *
moduÀ
;

297 
sockaddr_ö
 *
sö
;

298 
ngx_maû_c‹e_maö_c⁄f_t
 *
cmcf
;

299 #i‡(
NGX_HAVE_INET6
)

300 
sockaddr_ö6
 *
sö6
;

303 
vÆue
 = 
cf
->
¨gs
->
ñts
;

305 
	`ngx_memzîo
(&
u
, (
ngx_uæ_t
));

307 
u
.
uæ
 = 
vÆue
[1];

308 
u
.
li°í
 = 1;

310 i‡(
	`ngx_∑r£_uæ
(
cf
->
poﬁ
, &
u
Ë!
NGX_OK
) {

311 i‡(
u
.
îr
) {

312 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

314 
u
.
îr
, &u.
uæ
);

317  
NGX_CONF_ERROR
;

320 
cmcf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_maö_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

322 
ls
 = 
cmcf
->
li°í
.
ñts
;

324 
i
 = 0; i < 
cmcf
->
li°í
.
√…s
; i++) {

326 
ß
 = (
sockaddr
 *Ë
ls
[
i
].sockaddr;

328 i‡(
ß
->
ß_Ámûy
 !
u
.
Ámûy
) {

332 
ß
->
ß_Ámûy
) {

334 #i‡(
NGX_HAVE_INET6
)

335 
AF_INET6
:

336 
off
 = 
	`off£tof
(
sockaddr_ö6
, 
sö6_addr
);

337 
Àn
 = 16;

338 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

339 
p‹t
 = 
sö6
->
sö6_p‹t
;

343 #i‡(
NGX_HAVE_UNIX_DOMAIN
)

344 
AF_UNIX
:

345 
off
 = 
	`off£tof
(
sockaddr_un
, 
sun_∑th
);

346 
Àn
 = (((
sockaddr_un
 *Ë
ß
)->
sun_∑th
);

347 
p‹t
 = 0;

352 
off
 = 
	`off£tof
(
sockaddr_ö
, 
sö_addr
);

353 
Àn
 = 4;

354 
sö
 = (
sockaddr_ö
 *Ë
ß
;

355 
p‹t
 = 
sö
->
sö_p‹t
;

359 i‡(
	`ngx_memcmp
(
ls
[
i
].
sockaddr
 + 
off
, 
u
.sockadd∏+ off, 
Àn
) != 0) {

363 i‡(
p‹t
 !
u
.port) {

367 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

368 "du∂iˇã \"%V\"áddªs†™dÖ‹à∑ú", &
u
.
uæ
);

369  
NGX_CONF_ERROR
;

372 
ls
 = 
	`ngx_¨øy_push
(&
cmcf
->
li°í
);

373 i‡(
ls
 =
NULL
) {

374  
NGX_CONF_ERROR
;

377 
	`ngx_memzîo
(
ls
, (
ngx_maû_li°í_t
));

379 
	`ngx_mem˝y
(
ls
->
sockaddr
, 
u
.sockaddr, u.
sockÀn
);

381 
ls
->
sockÀn
 = 
u
.socklen;

382 
ls
->
wûdˇrd
 = 
u
.wildcard;

383 
ls
->
˘x
 = 
cf
->ctx;

385 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

386 
ls
->
ùv6⁄ly
 = 1;

389 i‡(
cscf
->
¥Ÿocﬁ
 =
NULL
) {

390 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

391 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

395 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

397 i‡(
moduÀ
->
¥Ÿocﬁ
 =
NULL
) {

401 
i
 = 0; 
moduÀ
->
¥Ÿocﬁ
->
p‹t
[i]; i++) {

402 i‡(
moduÀ
->
¥Ÿocﬁ
->
p‹t
[
i
] =
u
.port) {

403 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

410 
i
 = 2; i < 
cf
->
¨gs
->
√…s
; i++) {

412 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "bind") == 0) {

413 
ls
->
böd
 = 1;

417 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "ipv6only=o", 10) == 0) {

418 #i‡(
NGX_HAVE_INET6
 && 
deföed
 
IPV6_V6ONLY
)

419 
sockaddr
 *
ß
;

420 
u_ch¨
 
buf
[
NGX_SOCKADDR_STRLEN
];

422 
ß
 = (
sockaddr
 *Ë
ls
->sockaddr;

424 i‡(
ß
->
ß_Ámûy
 =
AF_INET6
) {

426 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "n") == 0) {

427 
ls
->
ùv6⁄ly
 = 1;

429 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[10], "ff") == 0) {

430 
ls
->
ùv6⁄ly
 = 0;

433 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

435 &
vÆue
[
i
].
d©a
[9]);

436  
NGX_CONF_ERROR
;

439 
ls
->
böd
 = 1;

442 
Àn
 = 
	`ngx_sock_¡›
(
ß
, 
buf
, 
NGX_SOCKADDR_STRLEN
, 1);

444 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

446 "⁄ádd∏\"%*s\", ign‹ed", 
Àn
, 
buf
);

451 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

454  
NGX_CONF_ERROR
;

458 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "ssl") == 0) {

459 #i‡(
NGX_MAIL_SSL
)

460 
ls
->
s¶
 = 1;

463 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

466  
NGX_CONF_ERROR
;

470 i‡(
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "so_keepalive=", 13) == 0) {

472 i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "on") == 0) {

473 
ls
->
so_kì∑live
 = 1;

475 } i‡(
	`ngx_°rcmp
(&
vÆue
[
i
].
d©a
[13], "off") == 0) {

476 
ls
->
so_kì∑live
 = 2;

480 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

481 
u_ch¨
 *
p
, *
íd
;

482 
ngx_°r_t
 
s
;

484 
íd
 = 
vÆue
[
i
].
d©a
 + vÆue[i].
Àn
;

485 
s
.
d©a
 = 
vÆue
[
i
].data + 13;

487 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

488 i‡(
p
 =
NULL
) {

489 
p
 = 
íd
;

492 i‡(
p
 > 
s
.
d©a
) {

493 
s
.
Àn
 = 
p
 - s.
d©a
;

495 
ls
->
t˝_kìpidÀ
 = 
	`ngx_∑r£_time
(&
s
, 1);

496 i‡(
ls
->
t˝_kìpidÀ
 =(
time_t
Ë
NGX_ERROR
) {

497 
övÆid_so_kì∑live
;

501 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

503 
p
 = 
	`ngx_°æchr
(
s
.
d©a
, 
íd
, ':');

504 i‡(
p
 =
NULL
) {

505 
p
 = 
íd
;

508 i‡(
p
 > 
s
.
d©a
) {

509 
s
.
Àn
 = 
p
 - s.
d©a
;

511 
ls
->
t˝_kìpötvl
 = 
	`ngx_∑r£_time
(&
s
, 1);

512 i‡(
ls
->
t˝_kìpötvl
 =(
time_t
Ë
NGX_ERROR
) {

513 
övÆid_so_kì∑live
;

517 
s
.
d©a
 = (
p
 < 
íd
) ? (p + 1) :Énd;

519 i‡(
s
.
d©a
 < 
íd
) {

520 
s
.
Àn
 = 
íd
 - s.
d©a
;

522 
ls
->
t˝_kìp˙t
 = 
	`ngx_©oi
(
s
.
d©a
, s.
Àn
);

523 i‡(
ls
->
t˝_kìp˙t
 =
NGX_ERROR
) {

524 
övÆid_so_kì∑live
;

528 i‡(
ls
->
t˝_kìpidÀ
 =0 &&Üs->
t˝_kìpötvl
 == 0

529 && 
ls
->
t˝_kìp˙t
 == 0)

531 
övÆid_so_kì∑live
;

534 
ls
->
so_kì∑live
 = 1;

538 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

541  
NGX_CONF_ERROR
;

546 
ls
->
böd
 = 1;

550 #i‡(
NGX_HAVE_KEEPALIVE_TUNABLE
)

551 
övÆid_so_kì∑live
:

553 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

555 &
vÆue
[
i
].
d©a
[13]);

556  
NGX_CONF_ERROR
;

560 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

561 "thêövÆid \"%V\"Ö¨amëî", &
vÆue
[
i
]);

562  
NGX_CONF_ERROR
;

565  
NGX_CONF_OK
;

566 
	}
}

570 
	$ngx_maû_c‹e_¥Ÿocﬁ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

572 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

574 
ngx_°r_t
 *
vÆue
;

575 
ngx_uöt_t
 
m
;

576 
ngx_maû_moduÀ_t
 *
moduÀ
;

578 
vÆue
 = 
cf
->
¨gs
->
ñts
;

580 
m
 = 0; 
ngx_moduÀs
[m]; m++) {

581 i‡(
ngx_moduÀs
[
m
]->
ty≥
 !
NGX_MAIL_MODULE
) {

585 
moduÀ
 = 
ngx_moduÀs
[
m
]->
˘x
;

587 i‡(
moduÀ
->
¥Ÿocﬁ


588 && 
	`ngx_°rcmp
(
moduÀ
->
¥Ÿocﬁ
->
«me
.
d©a
, 
vÆue
[1].data) == 0)

590 
cscf
->
¥Ÿocﬁ
 = 
moduÀ
->protocol;

592  
NGX_CONF_OK
;

596 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

597 "unknow¿¥Ÿocﬁ \"%V\"", &
vÆue
[1]);

598  
NGX_CONF_ERROR
;

599 
	}
}

603 
	$ngx_maû_c‹e_ªsﬁvî
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

605 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
 = 
c⁄f
;

607 
ngx_°r_t
 *
vÆue
;

609 
vÆue
 = 
cf
->
¨gs
->
ñts
;

611 i‡(
cscf
->
ªsﬁvî
 !
NGX_CONF_UNSET_PTR
) {

615 i‡(
	`ngx_°rcmp
(
vÆue
[1].
d©a
, "off") == 0) {

616 
cscf
->
ªsﬁvî
 = 
NULL
;

617  
NGX_CONF_OK
;

620 
cscf
->
ªsﬁvî
 = 
	`ngx_ªsﬁvî_¸óã
(
cf
, &
vÆue
[1], cf->
¨gs
->
√…s
 - 1);

621 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

622  
NGX_CONF_ERROR
;

625  
NGX_CONF_OK
;

626 
	}
}

630 
	$ngx_maû_ˇ∑bûôõs
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

632 *
p
 = 
c⁄f
;

634 
ngx_°r_t
 *
c
, *
vÆue
;

635 
ngx_uöt_t
 
i
;

636 
ngx_¨øy_t
 *
a
;

638 
a
 = (
ngx_¨øy_t
 *Ë(
p
 + 
cmd
->
off£t
);

640 
vÆue
 = 
cf
->
¨gs
->
ñts
;

642 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

643 
c
 = 
	`ngx_¨øy_push
(
a
);

644 i‡(
c
 =
NULL
) {

645  
NGX_CONF_ERROR
;

648 *
c
 = 
vÆue
[
i
];

651  
NGX_CONF_OK
;

652 
	}
}

	@src/mail/ngx_mail_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

14 
ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
);

16 #i‡(
NGX_MAIL_SSL
)

17 
ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
);

18 
ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
);

23 
	$ngx_maû_öô_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

25 
ngx_uöt_t
 
i
;

26 
ngx_maû_p‹t_t
 *
p‹t
;

27 
sockaddr
 *
ß
;

28 
sockaddr_ö
 *
sö
;

29 
ngx_maû_log_˘x_t
 *
˘x
;

30 
ngx_maû_ö_addr_t
 *
addr
;

31 
ngx_maû_£ssi⁄_t
 *
s
;

32 
ngx_maû_addr_c⁄f_t
 *
addr_c⁄f
;

33 #i‡(
NGX_HAVE_INET6
)

34 
sockaddr_ö6
 *
sö6
;

35 
ngx_maû_ö6_addr_t
 *
addr6
;

41 
p‹t
 = 
c
->
li°íög
->
£rvîs
;

43 i‡(
p‹t
->
«ddrs
 > 1) {

53 i‡(
	`ngx_c⁄√˘i⁄_loˇl_sockaddr
(
c
, 
NULL
, 0Ë!
NGX_OK
) {

54 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

58 
ß
 = 
c
->
loˇl_sockaddr
;

60 
ß
->
ß_Ámûy
) {

62 #i‡(
NGX_HAVE_INET6
)

63 
AF_INET6
:

64 
sö6
 = (
sockaddr_ö6
 *Ë
ß
;

66 
addr6
 = 
p‹t
->
addrs
;

70 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

71 i‡(
	`ngx_memcmp
(&
addr6
[
i
].addr6, &
sö6
->
sö6_addr
, 16) == 0) {

76 
addr_c⁄f
 = &
addr6
[
i
].
c⁄f
;

82 
sö
 = (
sockaddr_ö
 *Ë
ß
;

84 
addr
 = 
p‹t
->
addrs
;

88 
i
 = 0; i < 
p‹t
->
«ddrs
 - 1; i++) {

89 i‡(
addr
[
i
].add∏=
sö
->
sö_addr
.
s_addr
) {

94 
addr_c⁄f
 = &
addr
[
i
].
c⁄f
;

100 
c
->
loˇl_sockaddr
->
ß_Ámûy
) {

102 #i‡(
NGX_HAVE_INET6
)

103 
AF_INET6
:

104 
addr6
 = 
p‹t
->
addrs
;

105 
addr_c⁄f
 = &
addr6
[0].
c⁄f
;

110 
addr
 = 
p‹t
->
addrs
;

111 
addr_c⁄f
 = &
addr
[0].
c⁄f
;

116 
s
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (
ngx_maû_£ssi⁄_t
));

117 i‡(
s
 =
NULL
) {

118 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

122 
s
->
maö_c⁄f
 = 
addr_c⁄f
->
˘x
->main_conf;

123 
s
->
§v_c⁄f
 = 
addr_c⁄f
->
˘x
->srv_conf;

125 
s
->
addr_ãxt
 = &
addr_c⁄f
->addr_text;

127 
c
->
d©a
 = 
s
;

128 
s
->
c⁄√˘i⁄
 = 
c
;

130 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "*%ui client %V connectedÅo %V",

131 
c
->
numbî
, &c->
addr_ãxt
, 
s
->addr_text);

133 
˘x
 = 
	`ngx_∑Œoc
(
c
->
poﬁ
, (
ngx_maû_log_˘x_t
));

134 i‡(
˘x
 =
NULL
) {

135 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

139 
˘x
->
˛õ¡
 = &
c
->
addr_ãxt
;

140 
˘x
->
£ssi⁄
 = 
s
;

142 
c
->
log
->
c⁄√˘i⁄
 = c->
numbî
;

143 
c
->
log
->
h™dÀr
 = 
ngx_maû_log_îr‹
;

144 
c
->
log
->
d©a
 = 
˘x
;

145 
c
->
log
->
a˘i⁄
 = "sending client greetingÜine";

147 
c
->
log_îr‹
 = 
NGX_ERROR_INFO
;

149 #i‡(
NGX_MAIL_SSL
)

151 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

153 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

155 i‡(
s¶cf
->
íabÀ
) {

156 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

158 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

162 i‡(
addr_c⁄f
->
s¶
) {

164 
c
->
log
->
a˘i⁄
 = "SSL handshaking";

166 i‡(
s¶cf
->
s¶
.
˘x
 =
NULL
) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

170 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

174 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

181 
	`ngx_maû_öô_£ssi⁄
(
c
);

182 
	}
}

185 #i‡(
NGX_MAIL_SSL
)

188 
	$ngx_maû_°¨âls_h™dÀr
(
ngx_evít_t
 *
ªv
)

190 
ngx_c⁄√˘i⁄_t
 *
c
;

191 
ngx_maû_£ssi⁄_t
 *
s
;

192 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

194 
c
 = 
ªv
->
d©a
;

195 
s
 = 
c
->
d©a
;

196 
s
->
°¨âls
 = 1;

198 
c
->
log
->
a˘i⁄
 = "in starttls state";

200 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

202 
	`ngx_maû_s¶_öô_c⁄√˘i⁄
(&
s¶cf
->
s¶
, 
c
);

203 
	}
}

207 
	$ngx_maû_s¶_öô_c⁄√˘i⁄
(
ngx_s¶_t
 *
s¶
, 
ngx_c⁄√˘i⁄_t
 *
c
)

209 
ngx_maû_£ssi⁄_t
 *
s
;

210 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

212 i‡(
	`ngx_s¶_¸óã_c⁄√˘i⁄
(
s¶
, 
c
, 0Ë=
NGX_ERROR
) {

213 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

217 i‡(
	`ngx_s¶_h™dshake
(
c
Ë=
NGX_AGAIN
) {

219 
s
 = 
c
->
d©a
;

221 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

223 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

225 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_s¶_h™dshake_h™dÀr
;

230 
	`ngx_maû_s¶_h™dshake_h™dÀr
(
c
);

231 
	}
}

235 
	$ngx_maû_s¶_h™dshake_h™dÀr
(
ngx_c⁄√˘i⁄_t
 *
c
)

237 
ngx_maû_£ssi⁄_t
 *
s
;

238 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

240 i‡(
c
->
s¶
->
h™dshaked
) {

242 
s
 = 
c
->
d©a
;

244 i‡(
s
->
°¨âls
) {

245 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

247 
c
->
ªad
->
h™dÀr
 = 
cscf
->
¥Ÿocﬁ
->
öô_¥Ÿocﬁ
;

248 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

250 
cscf
->
¥Ÿocﬁ
->
	`öô_¥Ÿocﬁ
(
c
->
ªad
);

255 
c
->
ªad
->
ªady
 = 0;

257 
	`ngx_maû_öô_£ssi⁄
(
c
);

261 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

262 
	}
}

268 
	$ngx_maû_öô_£ssi⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

270 
ngx_maû_£ssi⁄_t
 *
s
;

271 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

273 
s
 = 
c
->
d©a
;

275 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

277 
s
->
¥Ÿocﬁ
 = 
cscf
->¥Ÿocﬁ->
ty≥
;

279 
s
->
˘x
 = 
	`ngx_pˇŒoc
(
c
->
poﬁ
, (*Ë* 
ngx_maû_max_moduÀ
);

280 i‡(
s
->
˘x
 =
NULL
) {

281 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

285 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_£nd
;

287 
cscf
->
¥Ÿocﬁ
->
	`öô_£ssi⁄
(
s
, 
c
);

288 
	}
}

291 
ngx_öt_t


292 
	$ngx_maû_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

293 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
)

295 
s
->
ß…
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

296 (" <18446744073709551616.@>" 
CRLF
) - 1

297 + 
NGX_TIME_T_LEN


298 + 
cscf
->
£rvî_«me
.
Àn
);

299 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

300  
NGX_ERROR
;

303 
s
->
ß…
.
Àn
 = 
	`ngx_•rötf
(s->ß….
d©a
, "<%ul.%T@%V>" 
CRLF
,

304 
	`ngx_øndom
(), 
	`ngx_time
(), &
cscf
->
£rvî_«me
)

305 - 
s
->
ß…
.
d©a
;

307  
NGX_OK
;

308 
	}
}

311 #i‡(
NGX_MAIL_SSL
)

313 
ngx_öt_t


314 
	$ngx_maû_°¨âls_⁄ly
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

316 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

318 i‡(
c
->
s¶
) {

322 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

324 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

329 
	}
}

334 
ngx_öt_t


335 
	$ngx_maû_auth_∂aö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_uöt_t
 
n
)

337 
u_ch¨
 *
p
, *
œ°
;

338 
ngx_°r_t
 *
¨g
, 
∂aö
;

340 
¨g
 = 
s
->
¨gs
.
ñts
;

342 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

343 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

344 "maûáuthÖœö: \"%V\"", &
¨g
[
n
]);

347 
∂aö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

348 i‡(
∂aö
.
d©a
 =
NULL
) {

349  
NGX_ERROR
;

352 i‡(
	`ngx_decode_ba£64
(&
∂aö
, &
¨g
[
n
]Ë!
NGX_OK
) {

353 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

355  
NGX_MAIL_PARSE_INVALID_COMMAND
;

358 
p
 = 
∂aö
.
d©a
;

359 
œ°
 = 
p
 + 
∂aö
.
Àn
;

361 
p
 < 
œ°
 && *p++) { }

363 i‡(
p
 =
œ°
) {

364 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

366  
NGX_MAIL_PARSE_INVALID_COMMAND
;

369 
s
->
logö
.
d©a
 = 
p
;

371 
p
 < 
œ°
 && *p) {Ö++; }

373 i‡(
p
 =
œ°
) {

374 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

376  
NGX_MAIL_PARSE_INVALID_COMMAND
;

379 
s
->
logö
.
Àn
 = 
p
++ - s->logö.
d©a
;

381 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

382 
s
->
∑sswd
.
d©a
 = 
p
;

384 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

385 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

386 "maûáuthÖœö: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

389  
NGX_DONE
;

390 
	}
}

393 
ngx_öt_t


394 
	$ngx_maû_auth_logö_u£∫ame
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

395 
ngx_uöt_t
 
n
)

397 
ngx_°r_t
 *
¨g
;

399 
¨g
 = 
s
->
¨gs
.
ñts
;

401 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

402 "maûáuthÜogö u£∫ame: \"%V\"", &
¨g
[
n
]);

404 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[
n
].
Àn
));

405 i‡(
s
->
logö
.
d©a
 =
NULL
) {

406  
NGX_ERROR
;

409 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[
n
]Ë!
NGX_OK
) {

410 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

412  
NGX_MAIL_PARSE_INVALID_COMMAND
;

415 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

416 "maûáuthÜogö u£∫ame: \"%V\"", &
s
->
logö
);

418  
NGX_OK
;

419 
	}
}

422 
ngx_öt_t


423 
	$ngx_maû_auth_logö_∑ssw‹d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

425 
ngx_°r_t
 *
¨g
;

427 
¨g
 = 
s
->
¨gs
.
ñts
;

429 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

430 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "maûáuthÜogöÖassw‹d: \"%V\"", &
¨g
[0]);

434 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,

435 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

436 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

437  
NGX_ERROR
;

440 i‡(
	`ngx_decode_ba£64
(&
s
->
∑sswd
, &
¨g
[0]Ë!
NGX_OK
) {

441 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

443  
NGX_MAIL_PARSE_INVALID_COMMAND
;

446 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

447 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

448 "maûáuthÜogöÖassw‹d: \"%V\"", &
s
->
∑sswd
);

451  
NGX_DONE
;

452 
	}
}

455 
ngx_öt_t


456 
	$ngx_maû_auth_¸am_md5_ß…
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

457 *
¥efix
, 
size_t
 
Àn
)

459 
u_ch¨
 *
p
;

460 
ngx_°r_t
 
ß…
;

461 
ngx_uöt_t
 
n
;

463 
p
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
Àn
 + 
	`ngx_ba£64_ícoded_Àngth
(
s
->
ß…
.len) + 2);

464 i‡(
p
 =
NULL
) {

465  
NGX_ERROR
;

468 
ß…
.
d©a
 = 
	`ngx_˝ymem
(
p
, 
¥efix
, 
Àn
);

469 
s
->
ß…
.
Àn
 -= 2;

471 
	`ngx_ícode_ba£64
(&
ß…
, &
s
->salt);

473 
s
->
ß…
.
Àn
 += 2;

474 
n
 = 
Àn
 + 
ß…
.len;

475 
p
[
n
++] = 
CR
;Ö[n++] = 
LF
;

477 
s
->
out
.
Àn
 = 
n
;

478 
s
->
out
.
d©a
 = 
p
;

480  
NGX_OK
;

481 
	}
}

484 
ngx_öt_t


485 
	$ngx_maû_auth_¸am_md5
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

487 
u_ch¨
 *
p
, *
œ°
;

488 
ngx_°r_t
 *
¨g
;

490 
¨g
 = 
s
->
¨gs
.
ñts
;

492 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

493 "maûáuth cøm-md5: \"%V\"", &
¨g
[0]);

495 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
	`ngx_ba£64_decoded_Àngth
(
¨g
[0].
Àn
));

496 i‡(
s
->
logö
.
d©a
 =
NULL
) {

497  
NGX_ERROR
;

500 i‡(
	`ngx_decode_ba£64
(&
s
->
logö
, &
¨g
[0]Ë!
NGX_OK
) {

501 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

503  
NGX_MAIL_PARSE_INVALID_COMMAND
;

506 
p
 = 
s
->
logö
.
d©a
;

507 
œ°
 = 
p
 + 
s
->
logö
.
Àn
;

509 
p
 < 
œ°
) {

510 i‡(*
p
++ == ' ') {

511 
s
->
logö
.
Àn
 = 
p
 - s->logö.
d©a
 - 1;

512 
s
->
∑sswd
.
Àn
 = 
œ°
 - 
p
;

513 
s
->
∑sswd
.
d©a
 = 
p
;

518 i‡(
s
->
∑sswd
.
Àn
 != 32) {

519 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

521  
NGX_MAIL_PARSE_INVALID_COMMAND
;

524 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

525 "maûáuth cøm-md5: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

527 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_CRAM_MD5
;

529  
NGX_DONE
;

530 
	}
}

534 
	$ngx_maû_£nd
(
ngx_evít_t
 *
wev
)

536 
ngx_öt_t
 
n
;

537 
ngx_c⁄√˘i⁄_t
 *
c
;

538 
ngx_maû_£ssi⁄_t
 *
s
;

539 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

541 
c
 = 
wev
->
d©a
;

542 
s
 = 
c
->
d©a
;

544 i‡(
wev
->
timedout
) {

545 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

546 
c
->
timedout
 = 1;

547 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

551 i‡(
s
->
out
.
Àn
 == 0) {

552 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

553 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

559 
n
 = 
c
->
	`£nd
(c, 
s
->
out
.
d©a
, s->out.
Àn
);

561 i‡(
n
 > 0) {

562 
s
->
out
.
Àn
 -
n
;

564 i‡(
wev
->
timî_£t
) {

565 
	`ngx_dñ_timî
(
wev
);

568 i‡(
s
->
quô
) {

569 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

573 i‡(
s
->
blocked
) {

574 
c
->
ªad
->
	`h™dÀr
(c->read);

580 i‡(
n
 =
NGX_ERROR
) {

581 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

587 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

589 
	`ngx_add_timî
(
c
->
wrôe
, 
cscf
->
timeout
);

591 i‡(
	`ngx_h™dÀ_wrôe_evít
(
c
->
wrôe
, 0Ë!
NGX_OK
) {

592 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

595 
	}
}

598 
ngx_öt_t


599 
	$ngx_maû_ªad_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

601 
ssize_t
 
n
;

602 
ngx_öt_t
 
rc
;

603 
ngx_°r_t
 
l
;

604 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

606 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

608 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

609 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

610  
NGX_ERROR
;

613 i‡(
n
 > 0) {

614 
s
->
buf„r
->
œ°
 +
n
;

617 i‡(
n
 =
NGX_AGAIN
) {

618 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

619 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

620  
NGX_ERROR
;

623  
NGX_AGAIN
;

626 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

628 
rc
 = 
cscf
->
¥Ÿocﬁ
->
	`∑r£_comm™d
(
s
);

630 i‡(
rc
 =
NGX_AGAIN
) {

632 i‡(
s
->
buf„r
->
œ°
 < s->buf„r->
íd
) {

633  
rc
;

636 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

637 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

639 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0,

640 "˛õ¡ síàtoÿl⁄g comm™d \"%V\"", &
l
);

642 
s
->
quô
 = 1;

644  
NGX_MAIL_PARSE_INVALID_COMMAND
;

647 i‡(
rc
 =
NGX_IMAP_NEXT
 ||Ñ¯=
NGX_MAIL_PARSE_INVALID_COMMAND
) {

648  
rc
;

651 i‡(
rc
 =
NGX_ERROR
) {

652 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

653  
NGX_ERROR
;

656  
NGX_OK
;

657 
	}
}

661 
	$ngx_maû_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

663 
s
->
¨gs
.
√…s
 = 0;

664 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

665 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

666 
s
->
°©e
 = 0;

668 i‡(
c
->
ªad
->
timî_£t
) {

669 
	`ngx_dñ_timî
(
c
->
ªad
);

672 
s
->
logö_©ãm±
++;

674 
	`ngx_maû_auth_hâp_öô
(
s
);

675 
	}
}

679 
	$ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

681 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

683 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

685 
s
->
out
 = 
cscf
->
¥Ÿocﬁ
->
öã∫Æ_£rvî_îr‹
;

686 
s
->
quô
 = 1;

688 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

689 
	}
}

693 
	$ngx_maû_˛o£_c⁄√˘i⁄
(
ngx_c⁄√˘i⁄_t
 *
c
)

695 
ngx_poﬁ_t
 *
poﬁ
;

697 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

698 "˛o£ maû c⁄√˘i⁄: %d", 
c
->
fd
);

700 #i‡(
NGX_MAIL_SSL
)

702 i‡(
c
->
s¶
) {

703 i‡(
	`ngx_s¶_shutdown
(
c
Ë=
NGX_AGAIN
) {

704 
c
->
s¶
->
h™dÀr
 = 
ngx_maû_˛o£_c⁄√˘i⁄
;

711 #i‡(
NGX_STAT_STUB
)

712 (Ë
	`ngx_©omic_„tch_add
(
ngx_°©_a˘ive
, -1);

715 
c
->
de°royed
 = 1;

717 
poﬁ
 = 
c
->pool;

719 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

721 
	`ngx_de°roy_poﬁ
(
poﬁ
);

722 
	}
}

725 
u_ch¨
 *

726 
	$ngx_maû_log_îr‹
(
ngx_log_t
 *
log
, 
u_ch¨
 *
buf
, 
size_t
 
Àn
)

728 
u_ch¨
 *
p
;

729 
ngx_maû_£ssi⁄_t
 *
s
;

730 
ngx_maû_log_˘x_t
 *
˘x
;

732 i‡(
log
->
a˘i⁄
) {

733 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, " whûê%s", 
log
->
a˘i⁄
);

734 
Àn
 -
p
 - 
buf
;

735 
buf
 = 
p
;

738 
˘x
 = 
log
->
d©a
;

740 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", clõ¡: %V", 
˘x
->
˛õ¡
);

741 
Àn
 -
p
 - 
buf
;

742 
buf
 = 
p
;

744 
s
 = 
˘x
->
£ssi⁄
;

746 i‡(
s
 =
NULL
) {

747  
p
;

750 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, "%s, server: %V",

751 
s
->
°¨âls
 ? " using starttls" : "",

752 
s
->
addr_ãxt
);

753 
Àn
 -
p
 - 
buf
;

754 
buf
 = 
p
;

756 i‡(
s
->
logö
.
Àn
 == 0) {

757  
p
;

760 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ",Üogö: \"%V\"", &
s
->
logö
);

761 
Àn
 -
p
 - 
buf
;

762 
buf
 = 
p
;

764 i‡(
s
->
¥oxy
 =
NULL
) {

765  
p
;

768 
p
 = 
	`ngx_¢¥ötf
(
buf
, 
Àn
, ", up°ªam: %V", 
s
->
¥oxy
->
up°ªam
.
«me
);

770  
p
;

771 
	}
}

	@src/mail/ngx_mail_imap_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
,

16 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
,

18 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_öt_t
 
ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
,

20 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

22 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
u_ch¨
 
	gim≠_gªëög
[] = "* OK IMAP4Ñódy" 
CRLF
;

26 
u_ch¨
 
	gim≠_°¨
[] = "* ";

27 
u_ch¨
 
	gim≠_ok
[] = "OK com∂ëed" 
CRLF
;

28 
u_ch¨
 
	gim≠_√xt
[] = "+ OK" 
CRLF
;

29 
u_ch¨
 
	gim≠_∂aö_√xt
[] = "+ " 
CRLF
;

30 
u_ch¨
 
	gim≠_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

31 
u_ch¨
 
	gim≠_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

32 
u_ch¨
 
	gim≠_bye
[] = "* BYE" 
CRLF
;

33 
u_ch¨
 
	gim≠_övÆid_comm™d
[] = "BAD invÆid comm™d" 
CRLF
;

37 
	$ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

39 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

41 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

43 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_gªëög
);

45 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_öô_¥Ÿocﬁ
;

47 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

49 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

50 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

53 
	`ngx_maû_£nd
(
c
->
wrôe
);

54 
	}
}

58 
	$ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

60 
ngx_c⁄√˘i⁄_t
 *
c
;

61 
ngx_maû_£ssi⁄_t
 *
s
;

62 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

64 
c
 = 
ªv
->
d©a
;

66 
c
->
log
->
a˘i⁄
 = "ináuth state";

68 i‡(
ªv
->
timedout
) {

69 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

70 
c
->
timedout
 = 1;

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

75 
s
 = 
c
->
d©a
;

77 i‡(
s
->
buf„r
 =
NULL
) {

78 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

79 =
NGX_ERROR
)

81 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

85 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

87 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
iscf
->
˛õ¡_buf„r_size
);

88 i‡(
s
->
buf„r
 =
NULL
) {

89 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

94 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

95 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_im≠_auth_°©e
;

97 
	`ngx_maû_im≠_auth_°©e
(
ªv
);

98 
	}
}

102 
	$ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
)

104 
u_ch¨
 *
p
, *
d°
, *
§c
, *
íd
;

105 
ngx_°r_t
 *
¨g
;

106 
ngx_öt_t
 
rc
;

107 
ngx_uöt_t
 
èg
, 
i
;

108 
ngx_c⁄√˘i⁄_t
 *
c
;

109 
ngx_maû_£ssi⁄_t
 *
s
;

111 
c
 = 
ªv
->
d©a
;

112 
s
 = 
c
->
d©a
;

114 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth state");

116 i‡(
ªv
->
timedout
) {

117 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

118 
c
->
timedout
 = 1;

119 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

123 i‡(
s
->
out
.
Àn
) {

124 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imap send handler busy");

125 
s
->
blocked
 = 1;

129 
s
->
blocked
 = 0;

131 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

133 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

137 
èg
 = 1;

138 
s
->
ãxt
.
Àn
 = 0;

139 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_ok
);

141 i‡(
rc
 =
NGX_OK
) {

143 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "imapáuth command: %i",

144 
s
->
comm™d
);

146 i‡(
s
->
back¶ash
) {

148 
¨g
 = 
s
->
¨gs
.
ñts
;

150 
i
 = 0; i < 
s
->
¨gs
.
√…s
; i++) {

151 
d°
 = 
¨g
[
i
].
d©a
;

152 
íd
 = 
d°
 + 
¨g
[
i
].
Àn
;

154 
§c
 = 
d°
; sr¯< 
íd
; dst++) {

155 *
d°
 = *
§c
;

156 i‡(*
§c
++ == '\\') {

157 *
d°
 = *
§c
++;

161 
¨g
[
i
].
Àn
 = 
d°
 -árg[i].
d©a
;

164 
s
->
back¶ash
 = 0;

167 
s
->
maû_°©e
) {

169 
ngx_im≠_°¨t
:

171 
s
->
comm™d
) {

173 
NGX_IMAP_LOGIN
:

174 
rc
 = 
	`ngx_maû_im≠_logö
(
s
, 
c
);

177 
NGX_IMAP_AUTHENTICATE
:

178 
rc
 = 
	`ngx_maû_im≠_authítiˇã
(
s
, 
c
);

179 
èg
 = (
rc
 !
NGX_OK
);

182 
NGX_IMAP_CAPABILITY
:

183 
rc
 = 
	`ngx_maû_im≠_ˇ∑bûôy
(
s
, 
c
);

186 
NGX_IMAP_LOGOUT
:

187 
s
->
quô
 = 1;

188 
	`ngx_°r_£t
(&
s
->
ãxt
, 
im≠_bye
);

191 
NGX_IMAP_NOOP
:

194 
NGX_IMAP_STARTTLS
:

195 
rc
 = 
	`ngx_maû_im≠_°¨âls
(
s
, 
c
);

199 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

205 
ngx_im≠_auth_logö_u£∫ame
:

206 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

208 
èg
 = 0;

209 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

210 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

214 
ngx_im≠_auth_logö_∑ssw‹d
:

215 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

218 
ngx_im≠_auth_∂aö
:

219 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

222 
ngx_im≠_auth_¸am_md5
:

223 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

227 } i‡(
rc
 =
NGX_IMAP_NEXT
) {

228 
èg
 = 0;

229 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_√xt
);

232 
rc
) {

234 
NGX_DONE
:

235 
	`ngx_maû_auth
(
s
, 
c
);

238 
NGX_ERROR
:

239 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

242 
NGX_MAIL_PARSE_INVALID_COMMAND
:

243 
s
->
°©e
 = 0;

244 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_övÆid_comm™d
);

245 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

249 i‡(
èg
) {

250 i‡(
s
->
èg
.
Àn
 == 0) {

251 
	`ngx_°r_£t
(&
s
->
èg
, 
im≠_°¨
);

254 i‡(
s
->
ègged_löe
.
Àn
 < s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len) {

255 
s
->
ègged_löe
.
Àn
 = s->
èg
.À¿+ s->
ãxt
.À¿+ s->
out
.len;

256 
s
->
ègged_löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->ègged_löe.
Àn
);

257 i‡(
s
->
ègged_löe
.
d©a
 =
NULL
) {

258 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

263 
p
 = 
s
->
ègged_löe
.
d©a
;

265 i‡(
s
->
ãxt
.
Àn
) {

266 
p
 = 
	`ngx_˝ymem
’, 
s
->
ãxt
.
d©a
, s->ãxt.
Àn
);

269 
p
 = 
	`ngx_˝ymem
’, 
s
->
èg
.
d©a
, s->èg.
Àn
);

270 
	`ngx_mem˝y
(
p
, 
s
->
out
.
d©a
, s->out.
Àn
);

272 
s
->
out
.
Àn
 = s->
ãxt
.À¿+ s->
èg
.len + s->out.len;

273 
s
->
out
.
d©a
 = s->
ègged_löe
.data;

276 i‡(
rc
 !
NGX_IMAP_NEXT
) {

277 
s
->
¨gs
.
√…s
 = 0;

279 i‡(
s
->
°©e
) {

281 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
 + s->
èg
.
Àn
;

282 
s
->
buf„r
->
pos
 = s->
¨g_°¨t
;

283 
s
->
buf„r
->
œ°
 = s->
¨g_°¨t
;

286 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

287 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

288 
s
->
èg
.
Àn
 = 0;

292 
	`ngx_maû_£nd
(
c
->
wrôe
);

293 
	}
}

296 
ngx_öt_t


297 
	$ngx_maû_im≠_logö
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

299 
ngx_°r_t
 *
¨g
;

301 #i‡(
NGX_MAIL_SSL
)

302 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

303  
NGX_MAIL_PARSE_INVALID_COMMAND
;

307 
¨g
 = 
s
->
¨gs
.
ñts
;

309 i‡(
s
->
¨gs
.
√…s
 !2 || 
¨g
[0].
Àn
 == 0) {

310  
NGX_MAIL_PARSE_INVALID_COMMAND
;

313 
s
->
logö
.
Àn
 = 
¨g
[0].len;

314 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

315 i‡(
s
->
logö
.
d©a
 =
NULL
) {

316  
NGX_ERROR
;

319 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

321 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

332 &
s
->
logö
, &s->
∑sswd
);

334 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

335 "im≠Üogö:\"%V\"", &
s
->
logö
);

338  
NGX_DONE
;

339 
	}
}

342 
ngx_öt_t


343 
	$ngx_maû_im≠_authítiˇã
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

345 
ngx_öt_t
 
rc
;

346 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

347 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

349 #i‡(
NGX_MAIL_SSL
)

350 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

351  
NGX_MAIL_PARSE_INVALID_COMMAND
;

355 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

357 
rc
) {

359 
NGX_MAIL_AUTH_LOGIN
:

361 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_u£∫ame
);

362 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_u£∫ame
;

364  
NGX_OK
;

366 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

368 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∑ssw‹d
);

369 
s
->
maû_°©e
 = 
ngx_im≠_auth_logö_∑ssw‹d
;

371  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

373 
NGX_MAIL_AUTH_PLAIN
:

375 
	`ngx_°r_£t
(&
s
->
out
, 
im≠_∂aö_√xt
);

376 
s
->
maû_°©e
 = 
ngx_im≠_auth_∂aö
;

378  
NGX_OK
;

380 
NGX_MAIL_AUTH_CRAM_MD5
:

382 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

384 i‡(!(
iscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

385  
NGX_MAIL_PARSE_INVALID_COMMAND
;

388 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

389 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

391 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

392  
NGX_ERROR
;

396 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

397 
s
->
maû_°©e
 = 
ngx_im≠_auth_¸am_md5
;

398  
NGX_OK
;

401  
NGX_ERROR
;

404  
rc
;

405 
	}
}

408 
ngx_öt_t


409 
	$ngx_maû_im≠_ˇ∑bûôy
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

411 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

413 
iscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_im≠_moduÀ
);

415 #i‡(
NGX_MAIL_SSL
)

417 i‡(
c
->
s¶
 =
NULL
) {

418 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

420 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

422 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

423 
s
->
ãxt
 = 
iscf
->
°¨âls_ˇ∑bûôy
;

424  
NGX_OK
;

427 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

428 
s
->
ãxt
 = 
iscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

429  
NGX_OK
;

434 
s
->
ãxt
 = 
iscf
->
ˇ∑bûôy
;

436  
NGX_OK
;

437 
	}
}

440 
ngx_öt_t


441 
	$ngx_maû_im≠_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

443 #i‡(
NGX_MAIL_SSL
)

444 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

446 i‡(
c
->
s¶
 =
NULL
) {

447 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

448 i‡(
s¶cf
->
°¨âls
) {

449 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

450  
NGX_OK
;

456  
NGX_MAIL_PARSE_INVALID_COMMAND
;

457 
	}
}

	@src/mail/ngx_mail_imap_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_im≠_moduÀ.h
>

15 *
ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_im≠_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("IMAP4"),

22 
ngx_°rög
("IMAP4rev1"),

23 
ngx_°rög
("UIDPLUS"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_im≠_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_im≠_auth_mëhods_«mes
[] = {

37 
ngx_°rög
("AUTH=PLAIN"),

38 
ngx_°rög
("AUTH=LOGIN"),

39 
ngx_nuŒ_°rög
,

40 
ngx_°rög
("AUTH=CRAM-MD5"),

41 
ngx_nuŒ_°rög


45 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_im≠_¥Ÿocﬁ
 = {

46 
ngx_°rög
("imap"),

48 
NGX_MAIL_IMAP_PROTOCOL
,

50 
ngx_maû_im≠_öô_£ssi⁄
,

51 
ngx_maû_im≠_öô_¥Ÿocﬁ
,

52 
ngx_maû_im≠_∑r£_comm™d
,

53 
ngx_maû_im≠_auth_°©e
,

55 
ngx_°rög
("* BAD i¡î«»£rvîÉº‹" 
CRLF
)

59 
ngx_comm™d_t
 
	gngx_maû_im≠_comm™ds
[] = {

61 { 
ngx_°rög
("imap_client_buffer"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_size_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

66 
NULL
 },

68 { 
ngx_°rög
("imap_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("imap_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_im≠_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_im≠_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_im≠_moduÀ_˘x
 = {

87 &
ngx_maû_im≠_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_im≠_¸óã_§v_c⁄f
,

93 
ngx_maû_im≠_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_im≠_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_im≠_moduÀ_˘x
,

100 
ngx_maû_im≠_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_im≠_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_im≠_§v_c⁄f_t
 *
iscf
;

118 
iscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_im≠_§v_c⁄f_t
));

119 i‡(
iscf
 =
NULL
) {

120  
NULL
;

123 
iscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

125 i‡(
	`ngx_¨øy_öô
(&
iscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

126 !
NGX_OK
)

128  
NULL
;

131  
iscf
;

132 
	}
}

136 
	$ngx_maû_im≠_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

138 
ngx_maû_im≠_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

139 
ngx_maû_im≠_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

141 
u_ch¨
 *
p
, *
auth
;

142 
size_t
 
size
;

143 
ngx_°r_t
 *
c
, *
d
;

144 
ngx_uöt_t
 
i
, 
m
;

146 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

147 
¥ev
->
˛õ¡_buf„r_size
,

148 (
size_t
Ë
ngx_∑gesize
);

150 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

151 
¥ev
->
auth_mëhods
,

152 (
NGX_CONF_BITMASK_SET


153 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

156 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

157 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

160 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

162 
d
 = 
ngx_maû_im≠_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

163 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

164 i‡(
c
 =
NULL
) {

165  
NGX_CONF_ERROR
;

168 *
c
 = *
d
;

172 
size
 = ("* CAPABILITY" 
CRLF
) - 1;

174 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

175 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

176 
size
 +1 + 
c
[
i
].
Àn
;

179 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

180 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

181 
m
 <<1, 
i
++)

183 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

184 
size
 +1 + 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
;

188 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

189 i‡(
p
 =
NULL
) {

190  
NGX_CONF_ERROR
;

193 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

194 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

196 
p
 = 
	`ngx_˝ymem
(p, "* CAPABILITY", ("* CAPABILITY") - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 *
p
++ = ' ';

200 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

203 
auth
 = 
p
;

205 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

206 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

207 
m
 <<1, 
i
++)

209 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

210 *
p
++ = ' ';

211 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
d©a
,

212 
ngx_maû_im≠_auth_mëhods_«mes
[
i
].
Àn
);

216 *
p
++ = 
CR
; *∞
LF
;

219 
size
 += (" STARTTLS") - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

229 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

230 
c⁄f
->
ˇ∑bûôy
.
Àn
 - ((
CRLF
) - 1));

231 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS", (" STARTTLS") - 1);

232 *
p
++ = 
CR
; *∞
LF
;

235 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
Ë+ (
CRLF
) - 1

238 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

239 i‡(
p
 =
NULL
) {

240  
NGX_CONF_ERROR
;

243 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

244 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

246 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

247 
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
);

248 
p
 = 
	`ngx_˝ymem
(p, " STARTTLS LOGINDISABLED",

250 *
p
++ = 
CR
; *∞
LF
;

252  
NGX_CONF_OK
;

253 
	}
}

	@src/mail/ngx_mail_imap_module.h

8 #i‚de‡
_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_IMAP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
size_t
 
	m˛õ¡_buf„r_size
;

20 
ngx_°r_t
 
	mˇ∑bûôy
;

21 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

22 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

24 
ngx_uöt_t
 
	mauth_mëhods
;

26 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

27 } 
	tngx_maû_im≠_§v_c⁄f_t
;

30 
ngx_maû_im≠_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_maû_im≠_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

32 
ngx_maû_im≠_auth_°©e
(
ngx_evít_t
 *
ªv
);

33 
ngx_öt_t
 
ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

36 
ngx_moduÀ_t
 
ngx_maû_im≠_moduÀ
;

	@src/mail/ngx_mail_parse.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

13 
	~<ngx_maû_im≠_moduÀ.h
>

14 
	~<ngx_maû_smç_moduÀ.h
>

17 
ngx_öt_t


18 
	$ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

20 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

21 
ngx_°r_t
 *
¨g
;

23 
sw_°¨t
 = 0,

24 
sw_•a˚s_bef‹e_¨gumít
,

25 
sw_¨gumít
,

26 
sw_Æmo°_d⁄e


27 } 
°©e
;

29 
°©e
 = 
s
->state;

31 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

32 
ch
 = *
p
;

34 
°©e
) {

37 
sw_°¨t
:

38 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

39 
c
 = 
s
->
buf„r
->
°¨t
;

41 i‡(
p
 - 
c
 == 4) {

43 
c0
 = 
	`ngx_touµî
(
c
[0]);

44 
c1
 = 
	`ngx_touµî
(
c
[1]);

45 
c2
 = 
	`ngx_touµî
(
c
[2]);

46 
c3
 = 
	`ngx_touµî
(
c
[3]);

48 i‡(
c0
 ='U' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'R')

50 
s
->
comm™d
 = 
NGX_POP3_USER
;

52 } i‡(
c0
 ='P' && 
c1
 ='A' && 
c2
 ='S' && 
c3
 == 'S')

54 
s
->
comm™d
 = 
NGX_POP3_PASS
;

56 } i‡(
c0
 ='A' && 
c1
 ='P' && 
c2
 ='O' && 
c3
 == 'P')

58 
s
->
comm™d
 = 
NGX_POP3_APOP
;

60 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

62 
s
->
comm™d
 = 
NGX_POP3_QUIT
;

64 } i‡(
c0
 ='C' && 
c1
 ='A' && 
c2
 ='P' && 
c3
 == 'A')

66 
s
->
comm™d
 = 
NGX_POP3_CAPA
;

68 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

70 
s
->
comm™d
 = 
NGX_POP3_AUTH
;

72 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

74 
s
->
comm™d
 = 
NGX_POP3_NOOP
;

75 #i‡(
NGX_MAIL_SSL
)

76 } i‡(
c0
 ='S' && 
c1
 ='T' && 
c2
 ='L' && 
c3
 == 'S')

78 
s
->
comm™d
 = 
NGX_POP3_STLS
;

81 
övÆid
;

85 
övÆid
;

88 
ch
) {

90 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

92 
CR
:

93 
°©e
 = 
sw_Æmo°_d⁄e
;

95 
LF
:

96 
d⁄e
;

101 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

102 
övÆid
;

107 
sw_•a˚s_bef‹e_¨gumít
:

108 
ch
) {

111 
CR
:

112 
°©e
 = 
sw_Æmo°_d⁄e
;

113 
s
->
¨g_íd
 = 
p
;

115 
LF
:

116 
s
->
¨g_íd
 = 
p
;

117 
d⁄e
;

119 i‡(
s
->
¨gs
.
√…s
 <= 2) {

120 
°©e
 = 
sw_¨gumít
;

121 
s
->
¨g_°¨t
 = 
p
;

124 
övÆid
;

128 
sw_¨gumít
:

129 
ch
) {

138 i‡(
s
->
comm™d
 =
NGX_POP3_USER


139 || 
s
->
comm™d
 =
NGX_POP3_PASS
)

146 
CR
:

147 
LF
:

148 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

149 i‡(
¨g
 =
NULL
) {

150  
NGX_ERROR
;

152 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

153 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

154 
s
->
¨g_°¨t
 = 
NULL
;

156 
ch
) {

158 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

160 
CR
:

161 
°©e
 = 
sw_Æmo°_d⁄e
;

163 
LF
:

164 
d⁄e
;

173 
sw_Æmo°_d⁄e
:

174 
ch
) {

175 
LF
:

176 
d⁄e
;

178 
övÆid
;

183 
s
->
buf„r
->
pos
 = 
p
;

184 
s
->
°©e
 = state;

186  
NGX_AGAIN
;

188 
d⁄e
:

190 
s
->
buf„r
->
pos
 = 
p
 + 1;

192 i‡(
s
->
¨g_°¨t
) {

193 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

194 i‡(
¨g
 =
NULL
) {

195  
NGX_ERROR
;

197 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

198 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

199 
s
->
¨g_°¨t
 = 
NULL
;

202 
s
->
°©e
 = (s->
comm™d
 !
NGX_POP3_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

204  
NGX_OK
;

206 
övÆid
:

208 
s
->
°©e
 = 
sw_°¨t
;

209 
s
->
¨g_°¨t
 = 
NULL
;

211  
NGX_MAIL_PARSE_INVALID_COMMAND
;

212 
	}
}

215 
ngx_öt_t


216 
	$ngx_maû_im≠_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

218 
u_ch¨
 
ch
, *
p
, *
c
;

219 
ngx_°r_t
 *
¨g
;

221 
sw_°¨t
 = 0,

222 
sw_•a˚s_bef‹e_comm™d
,

223 
sw_comm™d
,

224 
sw_•a˚s_bef‹e_¨gumít
,

225 
sw_¨gumít
,

226 
sw_back¶ash
,

227 
sw_lôîÆ
,

228 
sw_no_sync_lôîÆ_¨gumít
,

229 
sw_°¨t_lôîÆ_¨gumít
,

230 
sw_lôîÆ_¨gumít
,

231 
sw_íd_lôîÆ_¨gumít
,

232 
sw_Æmo°_d⁄e


233 } 
°©e
;

235 
°©e
 = 
s
->state;

237 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

238 
ch
 = *
p
;

240 
°©e
) {

243 
sw_°¨t
:

244 
ch
) {

246 
s
->
èg
.
Àn
 = 
p
 - s->
buf„r
->
°¨t
 + 1;

247 
s
->
èg
.
d©a
 = s->
buf„r
->
°¨t
;

248 
°©e
 = 
sw_•a˚s_bef‹e_comm™d
;

250 
CR
:

251 
s
->
°©e
 = 
sw_°¨t
;

252  
NGX_MAIL_PARSE_INVALID_COMMAND
;

253 
LF
:

254 
s
->
°©e
 = 
sw_°¨t
;

255  
NGX_MAIL_PARSE_INVALID_COMMAND
;

259 
sw_•a˚s_bef‹e_comm™d
:

260 
ch
) {

263 
CR
:

264 
s
->
°©e
 = 
sw_°¨t
;

265  
NGX_MAIL_PARSE_INVALID_COMMAND
;

266 
LF
:

267 
s
->
°©e
 = 
sw_°¨t
;

268  
NGX_MAIL_PARSE_INVALID_COMMAND
;

270 
s
->
cmd_°¨t
 = 
p
;

271 
°©e
 = 
sw_comm™d
;

276 
sw_comm™d
:

277 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

279 
c
 = 
s
->
cmd_°¨t
;

281 
p
 - 
c
) {

284 i‡((
c
[0] == 'N' || c[0] == 'n')

285 && (
c
[1] == 'O'|| c[1] == 'o')

286 && (
c
[2] == 'O'|| c[2] == 'o')

287 && (
c
[3] == 'P'|| c[3] == 'p'))

289 
s
->
comm™d
 = 
NGX_IMAP_NOOP
;

292 
övÆid
;

297 i‡((
c
[0] == 'L'|| c[0] == 'l')

298 && (
c
[1] == 'O'|| c[1] == 'o')

299 && (
c
[2] == 'G'|| c[2] == 'g')

300 && (
c
[3] == 'I'|| c[3] == 'i')

301 && (
c
[4] == 'N'|| c[4] == 'n'))

303 
s
->
comm™d
 = 
NGX_IMAP_LOGIN
;

306 
övÆid
;

311 i‡((
c
[0] == 'L'|| c[0] == 'l')

312 && (
c
[1] == 'O'|| c[1] == 'o')

313 && (
c
[2] == 'G'|| c[2] == 'g')

314 && (
c
[3] == 'O'|| c[3] == 'o')

315 && (
c
[4] == 'U'|| c[4] == 'u')

316 && (
c
[5] == 'T'|| c[5] == 't'))

318 
s
->
comm™d
 = 
NGX_IMAP_LOGOUT
;

321 
övÆid
;

325 #i‡(
NGX_MAIL_SSL
)

327 i‡((
c
[0] == 'S'|| c[0] == 's')

328 && (
c
[1] == 'T'|| c[1] == 't')

329 && (
c
[2] == 'A'|| c[2] == 'a')

330 && (
c
[3] == 'R'|| c[3] == 'r')

331 && (
c
[4] == 'T'|| c[4] == 't')

332 && (
c
[5] == 'T'|| c[5] == 't')

333 && (
c
[6] == 'L'|| c[6] == 'l')

334 && (
c
[7] == 'S'|| c[7] == 's'))

336 
s
->
comm™d
 = 
NGX_IMAP_STARTTLS
;

339 
övÆid
;

345 i‡((
c
[0] == 'C'|| c[0] == 'c')

346 && (
c
[1] == 'A'|| c[1] == 'a')

347 && (
c
[2] == 'P'|| c[2] == 'p')

348 && (
c
[3] == 'A'|| c[3] == 'a')

349 && (
c
[4] == 'B'|| c[4] == 'b')

350 && (
c
[5] == 'I'|| c[5] == 'i')

351 && (
c
[6] == 'L'|| c[6] == 'l')

352 && (
c
[7] == 'I'|| c[7] == 'i')

353 && (
c
[8] == 'T'|| c[8] == 't')

354 && (
c
[9] == 'Y'|| c[9] == 'y'))

356 
s
->
comm™d
 = 
NGX_IMAP_CAPABILITY
;

359 
övÆid
;

364 i‡((
c
[0] == 'A'|| c[0] == 'a')

365 && (
c
[1] == 'U'|| c[1] == 'u')

366 && (
c
[2] == 'T'|| c[2] == 't')

367 && (
c
[3] == 'H'|| c[3] == 'h')

368 && (
c
[4] == 'E'|| c[4] == 'e')

369 && (
c
[5] == 'N'|| c[5] == 'n')

370 && (
c
[6] == 'T'|| c[6] == 't')

371 && (
c
[7] == 'I'|| c[7] == 'i')

372 && (
c
[8] == 'C'|| c[8] == 'c')

373 && (
c
[9] == 'A'|| c[9] == 'a')

374 && (
c
[10] == 'T'|| c[10] == 't')

375 && (
c
[11] == 'E'|| c[11] == 'e'))

377 
s
->
comm™d
 = 
NGX_IMAP_AUTHENTICATE
;

380 
övÆid
;

385 
övÆid
;

388 
ch
) {

390 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

392 
CR
:

393 
°©e
 = 
sw_Æmo°_d⁄e
;

395 
LF
:

396 
d⁄e
;

401 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

402 
övÆid
;

407 
sw_•a˚s_bef‹e_¨gumít
:

408 
ch
) {

411 
CR
:

412 
°©e
 = 
sw_Æmo°_d⁄e
;

413 
s
->
¨g_íd
 = 
p
;

415 
LF
:

416 
s
->
¨g_íd
 = 
p
;

417 
d⁄e
;

419 i‡(
s
->
¨gs
.
√…s
 <= 2) {

420 
s
->
quŸed
 = 1;

421 
s
->
¨g_°¨t
 = 
p
 + 1;

422 
°©e
 = 
sw_¨gumít
;

425 
övÆid
;

427 i‡(
s
->
¨gs
.
√…s
 <= 2) {

428 
°©e
 = 
sw_lôîÆ
;

431 
övÆid
;

433 i‡(
s
->
¨gs
.
√…s
 <= 2) {

434 
s
->
¨g_°¨t
 = 
p
;

435 
°©e
 = 
sw_¨gumít
;

438 
övÆid
;

442 
sw_¨gumít
:

443 i‡(
ch
 =' ' && 
s
->
quŸed
) {

447 
ch
) {

449 i‡(!
s
->
quŸed
) {

452 
s
->
quŸed
 = 0;

455 
CR
:

456 
LF
:

457 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

458 i‡(
¨g
 =
NULL
) {

459  
NGX_ERROR
;

461 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

462 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

463 
s
->
¨g_°¨t
 = 
NULL
;

465 
ch
) {

468 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

470 
CR
:

471 
°©e
 = 
sw_Æmo°_d⁄e
;

473 
LF
:

474 
d⁄e
;

478 i‡(
s
->
quŸed
) {

479 
s
->
back¶ash
 = 1;

480 
°©e
 = 
sw_back¶ash
;

486 
sw_back¶ash
:

487 
ch
) {

488 
CR
:

489 
LF
:

490 
övÆid
;

492 
°©e
 = 
sw_¨gumít
;

496 
sw_lôîÆ
:

497 i‡(
ch
 >= '0' && ch <= '9') {

498 
s
->
lôîÆ_Àn
 = s->lôîÆ_À¿* 10 + (
ch
 - '0');

501 i‡(
ch
 == '}') {

502 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

505 i‡(
ch
 == '+') {

506 
°©e
 = 
sw_no_sync_lôîÆ_¨gumít
;

509 
övÆid
;

511 
sw_no_sync_lôîÆ_¨gumít
:

512 i‡(
ch
 == '}') {

513 
s
->
no_sync_lôîÆ
 = 1;

514 
°©e
 = 
sw_°¨t_lôîÆ_¨gumít
;

517 
övÆid
;

519 
sw_°¨t_lôîÆ_¨gumít
:

520 
ch
) {

521 
CR
:

523 
LF
:

524 
s
->
buf„r
->
pos
 = 
p
 + 1;

525 
s
->
¨g_°¨t
 = 
p
 + 1;

526 i‡(
s
->
no_sync_lôîÆ
 == 0) {

527 
s
->
°©e
 = 
sw_lôîÆ_¨gumít
;

528  
NGX_IMAP_NEXT
;

530 
°©e
 = 
sw_lôîÆ_¨gumít
;

531 
s
->
no_sync_lôîÆ
 = 0;

534 
övÆid
;

538 
sw_lôîÆ_¨gumít
:

539 i‡(
s
->
lôîÆ_Àn
 && --s->literal_len) {

543 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

544 i‡(
¨g
 =
NULL
) {

545  
NGX_ERROR
;

547 
¨g
->
Àn
 = 
p
 + 1 - 
s
->
¨g_°¨t
;

548 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

549 
s
->
¨g_°¨t
 = 
NULL
;

550 
°©e
 = 
sw_íd_lôîÆ_¨gumít
;

554 
sw_íd_lôîÆ_¨gumít
:

555 
ch
) {

557 i‡(
s
->
¨gs
.
√…s
 <= 2) {

558 
°©e
 = 
sw_lôîÆ
;

561 
övÆid
;

562 
CR
:

563 
°©e
 = 
sw_Æmo°_d⁄e
;

565 
LF
:

566 
d⁄e
;

568 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

573 
sw_Æmo°_d⁄e
:

574 
ch
) {

575 
LF
:

576 
d⁄e
;

578 
övÆid
;

583 
s
->
buf„r
->
pos
 = 
p
;

584 
s
->
°©e
 = state;

586  
NGX_AGAIN
;

588 
d⁄e
:

590 
s
->
buf„r
->
pos
 = 
p
 + 1;

592 i‡(
s
->
¨g_°¨t
) {

593 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

594 i‡(
¨g
 =
NULL
) {

595  
NGX_ERROR
;

597 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

598 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

600 
s
->
¨g_°¨t
 = 
NULL
;

601 
s
->
cmd_°¨t
 = 
NULL
;

602 
s
->
quŸed
 = 0;

603 
s
->
no_sync_lôîÆ
 = 0;

604 
s
->
lôîÆ_Àn
 = 0;

607 
s
->
°©e
 = (s->
comm™d
 !
NGX_IMAP_AUTHENTICATE
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

609  
NGX_OK
;

611 
övÆid
:

613 
s
->
°©e
 = 
sw_°¨t
;

614 
s
->
quŸed
 = 0;

615 
s
->
no_sync_lôîÆ
 = 0;

616 
s
->
lôîÆ_Àn
 = 0;

618  
NGX_MAIL_PARSE_INVALID_COMMAND
;

619 
	}
}

622 
ngx_öt_t


623 
	$ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
)

625 
u_ch¨
 
ch
, *
p
, *
c
, 
c0
, 
c1
, 
c2
, 
c3
;

626 
ngx_°r_t
 *
¨g
;

628 
sw_°¨t
 = 0,

629 
sw_•a˚s_bef‹e_¨gumít
,

630 
sw_¨gumít
,

631 
sw_Æmo°_d⁄e


632 } 
°©e
;

634 
°©e
 = 
s
->state;

636 
p
 = 
s
->
buf„r
->
pos
;Ö < s->buf„r->
œ°
;Ö++) {

637 
ch
 = *
p
;

639 
°©e
) {

642 
sw_°¨t
:

643 i‡(
ch
 =' ' || ch =
CR
 || ch =
LF
) {

644 
c
 = 
s
->
buf„r
->
°¨t
;

646 i‡(
p
 - 
c
 == 4) {

648 
c0
 = 
	`ngx_touµî
(
c
[0]);

649 
c1
 = 
	`ngx_touµî
(
c
[1]);

650 
c2
 = 
	`ngx_touµî
(
c
[2]);

651 
c3
 = 
	`ngx_touµî
(
c
[3]);

653 i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'O')

655 
s
->
comm™d
 = 
NGX_SMTP_HELO
;

657 } i‡(
c0
 ='E' && 
c1
 ='H' && 
c2
 ='L' && 
c3
 == 'O')

659 
s
->
comm™d
 = 
NGX_SMTP_EHLO
;

661 } i‡(
c0
 ='Q' && 
c1
 ='U' && 
c2
 ='I' && 
c3
 == 'T')

663 
s
->
comm™d
 = 
NGX_SMTP_QUIT
;

665 } i‡(
c0
 ='A' && 
c1
 ='U' && 
c2
 ='T' && 
c3
 == 'H')

667 
s
->
comm™d
 = 
NGX_SMTP_AUTH
;

669 } i‡(
c0
 ='N' && 
c1
 ='O' && 
c2
 ='O' && 
c3
 == 'P')

671 
s
->
comm™d
 = 
NGX_SMTP_NOOP
;

673 } i‡(
c0
 ='M' && 
c1
 ='A' && 
c2
 ='I' && 
c3
 == 'L')

675 
s
->
comm™d
 = 
NGX_SMTP_MAIL
;

677 } i‡(
c0
 ='R' && 
c1
 ='S' && 
c2
 ='E' && 
c3
 == 'T')

679 
s
->
comm™d
 = 
NGX_SMTP_RSET
;

681 } i‡(
c0
 ='R' && 
c1
 ='C' && 
c2
 ='P' && 
c3
 == 'T')

683 
s
->
comm™d
 = 
NGX_SMTP_RCPT
;

685 } i‡(
c0
 ='V' && 
c1
 ='R' && 
c2
 ='F' && 
c3
 == 'Y')

687 
s
->
comm™d
 = 
NGX_SMTP_VRFY
;

689 } i‡(
c0
 ='E' && 
c1
 ='X' && 
c2
 ='P' && 
c3
 == 'N')

691 
s
->
comm™d
 = 
NGX_SMTP_EXPN
;

693 } i‡(
c0
 ='H' && 
c1
 ='E' && 
c2
 ='L' && 
c3
 == 'P')

695 
s
->
comm™d
 = 
NGX_SMTP_HELP
;

698 
övÆid
;

700 #i‡(
NGX_MAIL_SSL
)

701 } i‡(
p
 - 
c
 == 8) {

703 i‡((
c
[0] == 'S'|| c[0] == 's')

704 && (
c
[1] == 'T'|| c[1] == 't')

705 && (
c
[2] == 'A'|| c[2] == 'a')

706 && (
c
[3] == 'R'|| c[3] == 'r')

707 && (
c
[4] == 'T'|| c[4] == 't')

708 && (
c
[5] == 'T'|| c[5] == 't')

709 && (
c
[6] == 'L'|| c[6] == 'l')

710 && (
c
[7] == 'S'|| c[7] == 's'))

712 
s
->
comm™d
 = 
NGX_SMTP_STARTTLS
;

715 
övÆid
;

719 
övÆid
;

722 
ch
) {

724 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

726 
CR
:

727 
°©e
 = 
sw_Æmo°_d⁄e
;

729 
LF
:

730 
d⁄e
;

735 i‡((
ch
 < 'A' || ch > 'Z') && (ch < 'a' || ch > 'z')) {

736 
övÆid
;

741 
sw_•a˚s_bef‹e_¨gumít
:

742 
ch
) {

745 
CR
:

746 
°©e
 = 
sw_Æmo°_d⁄e
;

747 
s
->
¨g_íd
 = 
p
;

749 
LF
:

750 
s
->
¨g_íd
 = 
p
;

751 
d⁄e
;

753 i‡(
s
->
¨gs
.
√…s
 <= 10) {

754 
°©e
 = 
sw_¨gumít
;

755 
s
->
¨g_°¨t
 = 
p
;

758 
övÆid
;

762 
sw_¨gumít
:

763 
ch
) {

765 
CR
:

766 
LF
:

767 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

768 i‡(
¨g
 =
NULL
) {

769  
NGX_ERROR
;

771 
¨g
->
Àn
 = 
p
 - 
s
->
¨g_°¨t
;

772 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

773 
s
->
¨g_°¨t
 = 
NULL
;

775 
ch
) {

777 
°©e
 = 
sw_•a˚s_bef‹e_¨gumít
;

779 
CR
:

780 
°©e
 = 
sw_Æmo°_d⁄e
;

782 
LF
:

783 
d⁄e
;

792 
sw_Æmo°_d⁄e
:

793 
ch
) {

794 
LF
:

795 
d⁄e
;

797 
övÆid
;

802 
s
->
buf„r
->
pos
 = 
p
;

803 
s
->
°©e
 = state;

805  
NGX_AGAIN
;

807 
d⁄e
:

809 
s
->
buf„r
->
pos
 = 
p
 + 1;

811 i‡(
s
->
¨g_°¨t
) {

812 
¨g
 = 
	`ngx_¨øy_push
(&
s
->
¨gs
);

813 i‡(
¨g
 =
NULL
) {

814  
NGX_ERROR
;

816 
¨g
->
Àn
 = 
s
->
¨g_íd
 - s->
¨g_°¨t
;

817 
¨g
->
d©a
 = 
s
->
¨g_°¨t
;

818 
s
->
¨g_°¨t
 = 
NULL
;

821 
s
->
°©e
 = (s->
comm™d
 !
NGX_SMTP_AUTH
Ë? 
sw_°¨t
 : 
sw_¨gumít
;

823  
NGX_OK
;

825 
övÆid
:

827 
s
->
°©e
 = 
sw_°¨t
;

828 
s
->
¨g_°¨t
 = 
NULL
;

830  
NGX_MAIL_PARSE_INVALID_COMMAND
;

831 
	}
}

834 
ngx_öt_t


835 
	$ngx_maû_auth_∑r£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

837 
ngx_°r_t
 *
¨g
;

839 #i‡(
NGX_MAIL_SSL
)

840 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

841  
NGX_MAIL_PARSE_INVALID_COMMAND
;

845 
¨g
 = 
s
->
¨gs
.
ñts
;

847 i‡(
¨g
[0].
Àn
 == 5) {

849 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "LOGIN", 5) == 0) {

851 i‡(
s
->
¨gs
.
√…s
 == 1) {

852  
NGX_MAIL_AUTH_LOGIN
;

855 i‡(
s
->
¨gs
.
√…s
 == 2) {

856  
NGX_MAIL_AUTH_LOGIN_USERNAME
;

859  
NGX_MAIL_PARSE_INVALID_COMMAND
;

862 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "PLAIN", 5) == 0) {

864 i‡(
s
->
¨gs
.
√…s
 == 1) {

865  
NGX_MAIL_AUTH_PLAIN
;

868 i‡(
s
->
¨gs
.
√…s
 == 2) {

869  
	`ngx_maû_auth_∂aö
(
s
, 
c
, 1);

873  
NGX_MAIL_PARSE_INVALID_COMMAND
;

876 i‡(
¨g
[0].
Àn
 == 8) {

878 i‡(
s
->
¨gs
.
√…s
 != 1) {

879  
NGX_MAIL_PARSE_INVALID_COMMAND
;

882 i‡(
	`ngx_°∫ˇ£cmp
(
¨g
[0].
d©a
, (
u_ch¨
 *) "CRAM-MD5", 8) == 0) {

883  
NGX_MAIL_AUTH_CRAM_MD5
;

887  
NGX_MAIL_PARSE_INVALID_COMMAND
;

888 
	}
}

	@src/mail/ngx_mail_pop3_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 
ngx_öt_t
 
ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

16 
ngx_öt_t
 
ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

17 
ngx_öt_t
 
ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

18 
ngx_öt_t
 
°ls
);

19 
ngx_öt_t
 
ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

20 
ngx_öt_t
 
ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

21 
ngx_öt_t
 
ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
u_ch¨
 
	gp›3_gªëög
[] = "+OK POP3Ñódy" 
CRLF
;

25 
u_ch¨
 
	gp›3_ok
[] = "+OK" 
CRLF
;

26 
u_ch¨
 
	gp›3_√xt
[] = "+ " 
CRLF
;

27 
u_ch¨
 
	gp›3_u£∫ame
[] = "+ VXNlcm5hbWU6" 
CRLF
;

28 
u_ch¨
 
	gp›3_∑ssw‹d
[] = "+ UGFzc3dvcmQ6" 
CRLF
;

29 
u_ch¨
 
	gp›3_övÆid_comm™d
[] = "-ERR invÆid comm™d" 
CRLF
;

33 
	$ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

35 
u_ch¨
 *
p
;

36 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

37 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

39 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

40 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

42 i‡(
pscf
->
auth_mëhods


43 & (
NGX_MAIL_AUTH_APOP_ENABLED
|
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
))

45 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

46 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

50 
s
->
out
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, (
p›3_gªëög
Ë+ s->
ß…
.
Àn
);

51 i‡(
s
->
out
.
d©a
 =
NULL
) {

52 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

56 
p
 = 
	`ngx_˝ymem
(
s
->
out
.
d©a
, 
p›3_gªëög
, (pop3_greeting) - 3);

57 *
p
++ = ' ';

58 
p
 = 
	`ngx_˝ymem
’, 
s
->
ß…
.
d©a
, s->ß….
Àn
);

60 
s
->
out
.
Àn
 = 
p
 - s->out.
d©a
;

63 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_gªëög
);

66 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_öô_¥Ÿocﬁ
;

68 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

70 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

71 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

74 
	`ngx_maû_£nd
(
c
->
wrôe
);

75 
	}
}

79 
	$ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

81 
ngx_c⁄√˘i⁄_t
 *
c
;

82 
ngx_maû_£ssi⁄_t
 *
s
;

84 
c
 = 
ªv
->
d©a
;

86 
c
->
log
->
a˘i⁄
 = "ináuth state";

88 i‡(
ªv
->
timedout
) {

89 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

90 
c
->
timedout
 = 1;

91 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

95 
s
 = 
c
->
d©a
;

97 i‡(
s
->
buf„r
 =
NULL
) {

98 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
))

99 =
NGX_ERROR
)

101 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

105 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 128);

106 i‡(
s
->
buf„r
 =
NULL
) {

107 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

112 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

113 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_p›3_auth_°©e
;

115 
	`ngx_maû_p›3_auth_°©e
(
ªv
);

116 
	}
}

120 
	$ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
)

122 
ngx_öt_t
 
rc
;

123 
ngx_c⁄√˘i⁄_t
 *
c
;

124 
ngx_maû_£ssi⁄_t
 *
s
;

126 
c
 = 
ªv
->
d©a
;

127 
s
 = 
c
->
d©a
;

129 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3áuth state");

131 i‡(
ªv
->
timedout
) {

132 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

133 
c
->
timedout
 = 1;

134 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

138 i‡(
s
->
out
.
Àn
) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "pop3 send handler busy");

140 
s
->
blocked
 = 1;

144 
s
->
blocked
 = 0;

146 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

148 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

152 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_ok
);

154 i‡(
rc
 =
NGX_OK
) {

155 
s
->
maû_°©e
) {

157 
ngx_p›3_°¨t
:

159 
s
->
comm™d
) {

161 
NGX_POP3_USER
:

162 
rc
 = 
	`ngx_maû_p›3_u£r
(
s
, 
c
);

165 
NGX_POP3_CAPA
:

166 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 1);

169 
NGX_POP3_APOP
:

170 
rc
 = 
	`ngx_maû_p›3_≠›
(
s
, 
c
);

173 
NGX_POP3_AUTH
:

174 
rc
 = 
	`ngx_maû_p›3_auth
(
s
, 
c
);

177 
NGX_POP3_QUIT
:

178 
s
->
quô
 = 1;

181 
NGX_POP3_NOOP
:

184 
NGX_POP3_STLS
:

185 
rc
 = 
	`ngx_maû_p›3_°ls
(
s
, 
c
);

189 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

195 
ngx_p›3_u£r
:

197 
s
->
comm™d
) {

199 
NGX_POP3_PASS
:

200 
rc
 = 
	`ngx_maû_p›3_∑ss
(
s
, 
c
);

203 
NGX_POP3_CAPA
:

204 
rc
 = 
	`ngx_maû_p›3_ˇ∑
(
s
, 
c
, 0);

207 
NGX_POP3_QUIT
:

208 
s
->
quô
 = 1;

211 
NGX_POP3_NOOP
:

215 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

222 
ngx_p›3_∑sswd
:

225 
ngx_p›3_auth_logö_u£∫ame
:

226 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

228 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

229 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

232 
ngx_p›3_auth_logö_∑ssw‹d
:

233 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

236 
ngx_p›3_auth_∂aö
:

237 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

240 
ngx_p›3_auth_¸am_md5
:

241 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

246 
rc
) {

248 
NGX_DONE
:

249 
	`ngx_maû_auth
(
s
, 
c
);

252 
NGX_ERROR
:

253 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

256 
NGX_MAIL_PARSE_INVALID_COMMAND
:

257 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

258 
s
->
°©e
 = 0;

260 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_övÆid_comm™d
);

264 
NGX_OK
:

266 
s
->
¨gs
.
√…s
 = 0;

267 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

268 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

270 i‡(
s
->
°©e
) {

271 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

274 
	`ngx_maû_£nd
(
c
->
wrôe
);

276 
	}
}

278 
ngx_öt_t


279 
	$ngx_maû_p›3_u£r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

281 
ngx_°r_t
 *
¨g
;

283 #i‡(
NGX_MAIL_SSL
)

284 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

285  
NGX_MAIL_PARSE_INVALID_COMMAND
;

289 i‡(
s
->
¨gs
.
√…s
 != 1) {

290  
NGX_MAIL_PARSE_INVALID_COMMAND
;

293 
¨g
 = 
s
->
¨gs
.
ñts
;

294 
s
->
logö
.
Àn
 = 
¨g
[0].len;

295 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

296 i‡(
s
->
logö
.
d©a
 =
NULL
) {

297  
NGX_ERROR
;

300 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

302 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

303 "p›3Üogö: \"%V\"", &
s
->
logö
);

305 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

307  
NGX_OK
;

308 
	}
}

311 
ngx_öt_t


312 
	$ngx_maû_p›3_∑ss
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

314 
ngx_°r_t
 *
¨g
;

316 i‡(
s
->
¨gs
.
√…s
 != 1) {

317  
NGX_MAIL_PARSE_INVALID_COMMAND
;

320 
¨g
 = 
s
->
¨gs
.
ñts
;

321 
s
->
∑sswd
.
Àn
 = 
¨g
[0].len;

322 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

323 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

324  
NGX_ERROR
;

327 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[0].d©a, s->∑sswd.
Àn
);

329 #i‡(
NGX_DEBUG_MAIL_PASSWD
)

330 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

331 "p›3Öasswd: \"%V\"", &
s
->
∑sswd
);

334  
NGX_DONE
;

335 
	}
}

338 
ngx_öt_t


339 
	$ngx_maû_p›3_ˇ∑
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_öt_t
 
°ls
)

341 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

343 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

345 #i‡(
NGX_MAIL_SSL
)

347 i‡(
°ls
 && 
c
->
s¶
 =
NULL
) {

348 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

350 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

352 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

353 
s
->
out
 = 
pscf
->
°¨âls_ˇ∑bûôy
;

354  
NGX_OK
;

357 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

358 
s
->
out
 = 
pscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

359  
NGX_OK
;

365 
s
->
out
 = 
pscf
->
ˇ∑bûôy
;

366  
NGX_OK
;

367 
	}
}

370 
ngx_öt_t


371 
	$ngx_maû_p›3_°ls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

373 #i‡(
NGX_MAIL_SSL
)

374 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

376 i‡(
c
->
s¶
 =
NULL
) {

377 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

378 i‡(
s¶cf
->
°¨âls
) {

379 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

380  
NGX_OK
;

386  
NGX_MAIL_PARSE_INVALID_COMMAND
;

387 
	}
}

390 
ngx_öt_t


391 
	$ngx_maû_p›3_≠›
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

393 
ngx_°r_t
 *
¨g
;

394 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

396 #i‡(
NGX_MAIL_SSL
)

397 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

398  
NGX_MAIL_PARSE_INVALID_COMMAND
;

402 i‡(
s
->
¨gs
.
√…s
 != 2) {

403  
NGX_MAIL_PARSE_INVALID_COMMAND
;

406 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

408 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_APOP_ENABLED
)) {

409  
NGX_MAIL_PARSE_INVALID_COMMAND
;

412 
¨g
 = 
s
->
¨gs
.
ñts
;

414 
s
->
logö
.
Àn
 = 
¨g
[0].len;

415 
s
->
logö
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->logö.
Àn
);

416 i‡(
s
->
logö
.
d©a
 =
NULL
) {

417  
NGX_ERROR
;

420 
	`ngx_mem˝y
(
s
->
logö
.
d©a
, 
¨g
[0].d©a, s->logö.
Àn
);

422 
s
->
∑sswd
.
Àn
 = 
¨g
[1].len;

423 
s
->
∑sswd
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, s->∑sswd.
Àn
);

424 i‡(
s
->
∑sswd
.
d©a
 =
NULL
) {

425  
NGX_ERROR
;

428 
	`ngx_mem˝y
(
s
->
∑sswd
.
d©a
, 
¨g
[1].d©a, s->∑sswd.
Àn
);

430 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

431 "p›3áp›: \"%V\" \"%V\"", &
s
->
logö
, &s->
∑sswd
);

433 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_APOP
;

435  
NGX_DONE
;

436 
	}
}

439 
ngx_öt_t


440 
	$ngx_maû_p›3_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

442 
ngx_öt_t
 
rc
;

443 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

445 #i‡(
NGX_MAIL_SSL
)

446 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

447  
NGX_MAIL_PARSE_INVALID_COMMAND
;

451 
pscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_p›3_moduÀ
);

453 i‡(
s
->
¨gs
.
√…s
 == 0) {

454 
s
->
out
 = 
pscf
->
auth_ˇ∑bûôy
;

455 
s
->
°©e
 = 0;

457  
NGX_OK
;

460 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

462 
rc
) {

464 
NGX_MAIL_AUTH_LOGIN
:

466 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_u£∫ame
);

467 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_u£∫ame
;

469  
NGX_OK
;

471 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

473 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_∑ssw‹d
);

474 
s
->
maû_°©e
 = 
ngx_p›3_auth_logö_∑ssw‹d
;

476  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

478 
NGX_MAIL_AUTH_PLAIN
:

480 
	`ngx_°r_£t
(&
s
->
out
, 
p›3_√xt
);

481 
s
->
maû_°©e
 = 
ngx_p›3_auth_∂aö
;

483  
NGX_OK
;

485 
NGX_MAIL_AUTH_CRAM_MD5
:

487 i‡(!(
pscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

488  
NGX_MAIL_PARSE_INVALID_COMMAND
;

491 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "+ ", 2Ë=
NGX_OK
) {

492 
s
->
maû_°©e
 = 
ngx_p›3_auth_¸am_md5
;

493  
NGX_OK
;

496  
NGX_ERROR
;

499  
rc
;

500 
	}
}

	@src/mail/ngx_mail_pop3_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_p›3_moduÀ.h
>

15 *
ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_°r_t
 
	gngx_maû_p›3_deÁu…_ˇ∑bûôõs
[] = {

21 
ngx_°rög
("TOP"),

22 
ngx_°rög
("USER"),

23 
ngx_°rög
("UIDL"),

24 
ngx_nuŒ_°rög


28 
ngx_c⁄f_bômask_t
 
	gngx_maû_p›3_auth_mëhods
[] = {

29 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

30 { 
ngx_°rög
("≠›"), 
NGX_MAIL_AUTH_APOP_ENABLED
 },

31 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

32 { 
ngx_nuŒ_°rög
, 0 }

36 
ngx_°r_t
 
	gngx_maû_p›3_auth_∂aö_ˇ∑bûôy
 =

37 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


38 "LOGIN" 
CRLF


39 "PLAIN" 
CRLF


40 "." 
CRLF
);

43 
ngx_°r_t
 
	gngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
 =

44 
ngx_°rög
("+OK mëhod†suµ‹ãd:" 
CRLF


45 "LOGIN" 
CRLF


46 "PLAIN" 
CRLF


47 "CRAM-MD5" 
CRLF


48 "." 
CRLF
);

51 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_p›3_¥Ÿocﬁ
 = {

52 
ngx_°rög
("pop3"),

54 
NGX_MAIL_POP3_PROTOCOL
,

56 
ngx_maû_p›3_öô_£ssi⁄
,

57 
ngx_maû_p›3_öô_¥Ÿocﬁ
,

58 
ngx_maû_p›3_∑r£_comm™d
,

59 
ngx_maû_p›3_auth_°©e
,

61 
ngx_°rög
("-ERR i¡î«»£rvîÉº‹" 
CRLF
)

65 
ngx_comm™d_t
 
	gngx_maû_p›3_comm™ds
[] = {

67 { 
ngx_°rög
("pop3_capabilities"),

68 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

69 
ngx_maû_ˇ∑bûôõs
,

70 
NGX_MAIL_SRV_CONF_OFFSET
,

71 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
ˇ∑bûôõs
),

72 
NULL
 },

74 { 
ngx_°rög
("pop3_auth"),

75 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

76 
ngx_c⁄f_£t_bômask_¶Ÿ
,

77 
NGX_MAIL_SRV_CONF_OFFSET
,

78 
off£tof
(
ngx_maû_p›3_§v_c⁄f_t
, 
auth_mëhods
),

79 &
ngx_maû_p›3_auth_mëhods
 },

81 
ngx_nuŒ_comm™d


85 
ngx_maû_moduÀ_t
 
	gngx_maû_p›3_moduÀ_˘x
 = {

86 &
ngx_maû_p›3_¥Ÿocﬁ
,

88 
NULL
,

89 
NULL
,

91 
ngx_maû_p›3_¸óã_§v_c⁄f
,

92 
ngx_maû_p›3_mîge_§v_c⁄f


96 
ngx_moduÀ_t
 
	gngx_maû_p›3_moduÀ
 = {

97 
NGX_MODULE_V1
,

98 &
ngx_maû_p›3_moduÀ_˘x
,

99 
ngx_maû_p›3_comm™ds
,

100 
NGX_MAIL_MODULE
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NGX_MODULE_V1_PADDING


113 
	$ngx_maû_p›3_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

115 
ngx_maû_p›3_§v_c⁄f_t
 *
pscf
;

117 
pscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_p›3_§v_c⁄f_t
));

118 i‡(
pscf
 =
NULL
) {

119  
NULL
;

122 i‡(
	`ngx_¨øy_öô
(&
pscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

123 !
NGX_OK
)

125  
NULL
;

128  
pscf
;

129 
	}
}

133 
	$ngx_maû_p›3_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

135 
ngx_maû_p›3_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

136 
ngx_maû_p›3_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

138 
u_ch¨
 *
p
;

139 
size_t
 
size
, 
°ls_⁄ly_size
;

140 
ngx_°r_t
 *
c
, *
d
;

141 
ngx_uöt_t
 
i
;

143 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

144 
¥ev
->
auth_mëhods
,

145 (
NGX_CONF_BITMASK_SET


146 |
NGX_MAIL_AUTH_PLAIN_ENABLED
));

148 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

149 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

152 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

154 
d
 = 
ngx_maû_p›3_deÁu…_ˇ∑bûôõs
; d->
Àn
; d++) {

155 
c
 = 
	`ngx_¨øy_push
(&
c⁄f
->
ˇ∑bûôõs
);

156 i‡(
c
 =
NULL
) {

157  
NGX_CONF_ERROR
;

160 *
c
 = *
d
;

164 
size
 = ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1

165 + ("." 
CRLF
) - 1;

167 
°ls_⁄ly_size
 = 
size
 + ("STLS" 
CRLF
) - 1;

169 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

170 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

171 
size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

173 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

177 
°ls_⁄ly_size
 +
c
[
i
].
Àn
 + (
CRLF
) - 1;

180 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

181 
size
 +("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1;

184 
size
 +("SASL LOGIN PLAIN" 
CRLF
) - 1;

187 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

188 i‡(
p
 =
NULL
) {

189  
NGX_CONF_ERROR
;

192 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

193 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

195 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

196 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

198 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

199 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

200 *
p
++ = 
CR
; *p++ = 
LF
;

203 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

204 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN CRAM-MD5" 
CRLF
,

205 ("SASL LOGIN PLAIN CRAM-MD5" 
CRLF
) - 1);

208 
p
 = 
	`ngx_˝ymem
’, "SASL LOGIN PLAIN" 
CRLF
,

209 ("SASL LOGIN PLAIN" 
CRLF
) - 1);

212 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

215 
size
 +("STLS" 
CRLF
) - 1;

217 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

218 i‡(
p
 =
NULL
) {

219  
NGX_CONF_ERROR
;

222 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

223 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

225 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
,

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 - (("." 
CRLF
) - 1));

228 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

229 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

232 i‡(
c⁄f
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
) {

233 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_¸am_md5_ˇ∑bûôy
;

236 
c⁄f
->
auth_ˇ∑bûôy
 = 
ngx_maû_p›3_auth_∂aö_ˇ∑bûôy
;

240 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
°ls_⁄ly_size
);

241 i‡(
p
 =
NULL
) {

242  
NGX_CONF_ERROR
;

245 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
°ls_⁄ly_size
;

246 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

248 
p
 = 
	`ngx_˝ymem
’, "+OK C≠abûôyÜi° fﬁlows" 
CRLF
,

249 ("+OK C≠abûôyÜi° fﬁlows" 
CRLF
) - 1);

251 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

252 i‡(
	`ngx_°rˇ£cmp
(
c
[
i
].
d©a
, (
u_ch¨
 *) "USER") == 0) {

256 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

257 *
p
++ = 
CR
; *p++ = 
LF
;

260 
p
 = 
	`ngx_˝ymem
’, "STLS" 
CRLF
, ("STLS" CRLF) - 1);

261 *
p
++ = '.'; *p++ = 
CR
; *∞
LF
;

263  
NGX_CONF_OK
;

264 
	}
}

	@src/mail/ngx_mail_pop3_module.h

8 #i‚de‡
_NGX_MAIL_POP3_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_POP3_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

18 
ngx_°r_t
 
	mˇ∑bûôy
;

19 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

20 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

21 
ngx_°r_t
 
	mauth_ˇ∑bûôy
;

23 
ngx_uöt_t
 
	mauth_mëhods
;

25 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

26 } 
	tngx_maû_p›3_§v_c⁄f_t
;

29 
ngx_maû_p›3_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

30 
ngx_maû_p›3_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

31 
ngx_maû_p›3_auth_°©e
(
ngx_evít_t
 *
ªv
);

32 
ngx_öt_t
 
ngx_maû_p›3_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

35 
ngx_moduÀ_t
 
ngx_maû_p›3_moduÀ
;

	@src/mail/ngx_mail_proxy_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_evít_c⁄√˘.h
>

12 
	~<ngx_maû.h
>

16 
ngx_Êag_t
 
	míabÀ
;

17 
ngx_Êag_t
 
	m∑ss_îr‹_mesßge
;

18 
ngx_Êag_t
 
	mx˛õ¡
;

19 
size_t
 
	mbuf„r_size
;

20 
ngx_m£c_t
 
	mtimeout
;

21 } 
	tngx_maû_¥oxy_c⁄f_t
;

24 
ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
);

25 
ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
);

26 
ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
);

27 
ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
);

28 
ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
ev
);

29 
ngx_öt_t
 
ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
,

30 
ngx_uöt_t
 
°©e
);

31 
ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

33 
ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
);

34 
ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
);

35 *
ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

36 *
ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

37 *
chûd
);

40 
ngx_comm™d_t
 
	gngx_maû_¥oxy_comm™ds
[] = {

42 { 
ngx_°rög
("proxy"),

43 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

44 
ngx_c⁄f_£t_Êag_¶Ÿ
,

45 
NGX_MAIL_SRV_CONF_OFFSET
,

46 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
íabÀ
),

47 
NULL
 },

49 { 
ngx_°rög
("proxy_buffer"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

51 
ngx_c⁄f_£t_size_¶Ÿ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
buf„r_size
),

54 
NULL
 },

56 { 
ngx_°rög
("proxy_timeout"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_c⁄f_£t_m£c_¶Ÿ
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
timeout
),

61 
NULL
 },

63 { 
ngx_°rög
("proxy_pass_error_message"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

65 
ngx_c⁄f_£t_Êag_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
∑ss_îr‹_mesßge
),

68 
NULL
 },

70 { 
ngx_°rög
("xclient"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

72 
ngx_c⁄f_£t_Êag_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_¥oxy_c⁄f_t
, 
x˛õ¡
),

75 
NULL
 },

77 
ngx_nuŒ_comm™d


81 
ngx_maû_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ_˘x
 = {

82 
NULL
,

84 
NULL
,

85 
NULL
,

87 
ngx_maû_¥oxy_¸óã_c⁄f
,

88 
ngx_maû_¥oxy_mîge_c⁄f


92 
ngx_moduÀ_t
 
	gngx_maû_¥oxy_moduÀ
 = {

93 
NGX_MODULE_V1
,

94 &
ngx_maû_¥oxy_moduÀ_˘x
,

95 
ngx_maû_¥oxy_comm™ds
,

96 
NGX_MAIL_MODULE
,

97 
NULL
,

98 
NULL
,

99 
NULL
,

100 
NULL
,

101 
NULL
,

102 
NULL
,

103 
NULL
,

104 
NGX_MODULE_V1_PADDING


108 
u_ch¨
 
	gsmç_auth_ok
[] = "235 2.0.0 OK" 
CRLF
;

112 
	$ngx_maû_¥oxy_öô
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_addr_t
 *
≥î
)

114 
kì∑live
;

115 
ngx_öt_t
 
rc
;

116 
ngx_maû_¥oxy_˘x_t
 *
p
;

117 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

118 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

120 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "connectingÅo upstream";

122 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

124 i‡(
cscf
->
so_kì∑live
) {

125 
kì∑live
 = 1;

127 i‡(
	`£tsock›t
(
s
->
c⁄√˘i⁄
->
fd
, 
SOL_SOCKET
, 
SO_KEEPALIVE
,

128 (c⁄° *Ë&
kì∑live
, ())

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
s
->
c⁄√˘i⁄
->
log
, 
ngx_sockë_î∫o
,

136 
p
 = 
	`ngx_pˇŒoc
(
s
->
c⁄√˘i⁄
->
poﬁ
, (
ngx_maû_¥oxy_˘x_t
));

137 i‡(
p
 =
NULL
) {

138 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

142 
s
->
¥oxy
 = 
p
;

144 
p
->
up°ªam
.
sockaddr
 = 
≥î
->sockaddr;

145 
p
->
up°ªam
.
sockÀn
 = 
≥î
->socklen;

146 
p
->
up°ªam
.
«me
 = &
≥î
->name;

147 
p
->
up°ªam
.
gë
 = 
ngx_evít_gë_≥î
;

148 
p
->
up°ªam
.
log
 = 
s
->
c⁄√˘i⁄
->log;

149 
p
->
up°ªam
.
log_îr‹
 = 
NGX_ERROR_ERR
;

151 
rc
 = 
	`ngx_evít_c⁄√˘_≥î
(&
p
->
up°ªam
);

153 i‡(
rc
 =
NGX_ERROR
 ||Ñ¯=
NGX_BUSY
 ||Ñ¯=
NGX_DECLINED
) {

154 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

158 
	`ngx_add_timî
(
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
, 
cscf
->
timeout
);

160 
p
->
up°ªam
.
c⁄√˘i⁄
->
d©a
 = 
s
;

161 
p
->
up°ªam
.
c⁄√˘i⁄
->
poﬁ
 = 
s
->connection->pool;

163 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_block_ªad
;

164 
p
->
up°ªam
.
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_dummy_h™dÀr
;

166 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

168 
s
->
¥oxy
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(s->
c⁄√˘i⁄
->
poﬁ
,

169 
pcf
->
buf„r_size
);

170 i‡(
s
->
¥oxy
->
buf„r
 =
NULL
) {

171 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

175 
s
->
out
.
Àn
 = 0;

177 
s
->
¥Ÿocﬁ
) {

179 
NGX_MAIL_POP3_PROTOCOL
:

180 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_p›3_h™dÀr
;

181 
s
->
maû_°©e
 = 
ngx_p›3_°¨t
;

184 
NGX_MAIL_IMAP_PROTOCOL
:

185 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_im≠_h™dÀr
;

186 
s
->
maû_°©e
 = 
ngx_im≠_°¨t
;

190 
p
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_smç_h™dÀr
;

191 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

194 
	}
}

198 
	$ngx_maû_¥oxy_block_ªad
(
ngx_evít_t
 *
ªv
)

200 
ngx_c⁄√˘i⁄_t
 *
c
;

201 
ngx_maû_£ssi⁄_t
 *
s
;

203 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy blockÑead");

205 i‡(
	`ngx_h™dÀ_ªad_evít
(
ªv
, 0Ë!
NGX_OK
) {

206 
c
 = 
ªv
->
d©a
;

207 
s
 = 
c
->
d©a
;

209 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

211 
	}
}

215 
	$ngx_maû_¥oxy_p›3_h™dÀr
(
ngx_evít_t
 *
ªv
)

217 
u_ch¨
 *
p
;

218 
ngx_öt_t
 
rc
;

219 
ngx_°r_t
 
löe
;

220 
ngx_c⁄√˘i⁄_t
 *
c
;

221 
ngx_maû_£ssi⁄_t
 *
s
;

222 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

224 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

227 
c
 = 
ªv
->
d©a
;

228 
s
 = 
c
->
d©a
;

230 i‡(
ªv
->
timedout
) {

231 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

233 
c
->
timedout
 = 1;

234 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

238 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, 0);

240 i‡(
rc
 =
NGX_AGAIN
) {

244 i‡(
rc
 =
NGX_ERROR
) {

245 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

249 
s
->
maû_°©e
) {

251 
ngx_p›3_°¨t
:

252 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

254 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

256 
löe
.
Àn
 = ("USER "Ë- 1 + 
s
->
logö
.len + 2;

257 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

258 i‡(
löe
.
d©a
 =
NULL
) {

259 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

263 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "USER ", ("USER ") - 1);

264 
p
 = 
	`ngx_˝ymem
’, 
s
->
logö
.
d©a
, s->logö.
Àn
);

265 *
p
++ = 
CR
; *∞
LF
;

267 
s
->
maû_°©e
 = 
ngx_p›3_u£r
;

270 
ngx_p›3_u£r
:

271 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÖass");

273 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

275 
löe
.
Àn
 = ("PASS "Ë- 1 + 
s
->
∑sswd
.len + 2;

276 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

277 i‡(
löe
.
d©a
 =
NULL
) {

278 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

282 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, "PASS ", ("PASS ") - 1);

283 
p
 = 
	`ngx_˝ymem
’, 
s
->
∑sswd
.
d©a
, s->∑sswd.
Àn
);

284 *
p
++ = 
CR
; *∞
LF
;

286 
s
->
maû_°©e
 = 
ngx_p›3_∑sswd
;

289 
ngx_p›3_∑sswd
:

290 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

291 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

292 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

293 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

295 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

296 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

297 
	`ngx_dñ_timî
(
c
->
ªad
);

299 
c
->
log
->
a˘i⁄
 = 
NULL
;

300 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

302 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

307 #i‡(
NGX_SUPPRESS_WARN
)

308 
	`ngx_°r_nuŒ
(&
löe
);

313 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

318 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

322 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

323 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

324 
	}
}

328 
	$ngx_maû_¥oxy_im≠_h™dÀr
(
ngx_evít_t
 *
ªv
)

330 
u_ch¨
 *
p
;

331 
ngx_öt_t
 
rc
;

332 
ngx_°r_t
 
löe
;

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

335 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

337 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

340 
c
 = 
ªv
->
d©a
;

341 
s
 = 
c
->
d©a
;

343 i‡(
ªv
->
timedout
) {

344 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

346 
c
->
timedout
 = 1;

347 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

351 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

353 i‡(
rc
 =
NGX_AGAIN
) {

357 i‡(
rc
 =
NGX_ERROR
) {

358 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

362 
s
->
maû_°©e
) {

364 
ngx_im≠_°¨t
:

365 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

368 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending LOGIN commandÅo upstream";

370 
löe
.
Àn
 = 
s
->
èg
.len + ("LOGIN ") - 1

371 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

372 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

373 i‡(
löe
.
d©a
 =
NULL
) {

374 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

378 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%VLOGIN {%uz}" 
CRLF
,

379 &
s
->
èg
, s->
logö
.
Àn
)

380 - 
löe
.
d©a
;

382 
s
->
maû_°©e
 = 
ngx_im≠_logö
;

385 
ngx_im≠_logö
:

386 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy send user");

388 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending userÇameÅo upstream";

390 
löe
.
Àn
 = 
s
->
logö
.À¿+ 1 + 1 + 
NGX_SIZE_T_LEN
 + 1 + 2;

391 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

392 i‡(
löe
.
d©a
 =
NULL
) {

393 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

397 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
, "%V {%uz}" 
CRLF
,

398 &
s
->
logö
, s->
∑sswd
.
Àn
)

399 - 
löe
.
d©a
;

401 
s
->
maû_°©e
 = 
ngx_im≠_u£r
;

404 
ngx_im≠_u£r
:

405 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

408 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sendingÖasswordÅo upstream";

410 
löe
.
Àn
 = 
s
->
∑sswd
.len + 2;

411 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

412 i‡(
löe
.
d©a
 =
NULL
) {

413 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

417 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
∑sswd
.d©a, s->∑sswd.
Àn
);

418 *
p
++ = 
CR
; *∞
LF
;

420 
s
->
maû_°©e
 = 
ngx_im≠_∑sswd
;

423 
ngx_im≠_∑sswd
:

424 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

425 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

426 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

427 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

429 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

430 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

431 
	`ngx_dñ_timî
(
c
->
ªad
);

433 
c
->
log
->
a˘i⁄
 = 
NULL
;

434 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

436 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

441 #i‡(
NGX_SUPPRESS_WARN
)

442 
	`ngx_°r_nuŒ
(&
löe
);

447 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

452 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

456 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

457 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

458 
	}
}

462 
	$ngx_maû_¥oxy_smç_h™dÀr
(
ngx_evít_t
 *
ªv
)

464 
u_ch¨
 *
p
;

465 
ngx_öt_t
 
rc
;

466 
ngx_°r_t
 
löe
;

467 
ngx_buf_t
 *
b
;

468 
ngx_c⁄√˘i⁄_t
 *
c
;

469 
ngx_maû_£ssi⁄_t
 *
s
;

470 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

471 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

473 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

476 
c
 = 
ªv
->
d©a
;

477 
s
 = 
c
->
d©a
;

479 i‡(
ªv
->
timedout
) {

480 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

482 
c
->
timedout
 = 1;

483 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

487 
rc
 = 
	`ngx_maû_¥oxy_ªad_ª•⁄£
(
s
, s->
maû_°©e
);

489 i‡(
rc
 =
NGX_AGAIN
) {

493 i‡(
rc
 =
NGX_ERROR
) {

494 
	`ngx_maû_¥oxy_up°ªam_îr‹
(
s
);

498 
s
->
maû_°©e
) {

500 
ngx_smç_°¨t
:

501 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0, "mailÖroxy sendÉhlo");

503 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending HELO/EHLOÅo upstream";

505 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

507 
löe
.
Àn
 = ("HELO "Ë- 1 + 
cscf
->
£rvî_«me
.len + 2;

508 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

509 i‡(
löe
.
d©a
 =
NULL
) {

510 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

514 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

516 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
,

517 ((
s
->
esmç
 || 
pcf
->
x˛õ¡
) ? "EHLO " : "HELO "),

520 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

521 *
p
++ = 
CR
; *∞
LF
;

523 i‡(
pcf
->
x˛õ¡
) {

524 
s
->
maû_°©e
 = 
ngx_smç_hño_x˛õ¡
;

526 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

527 
s
->
maû_°©e
 = 
ngx_smç_hño_‰om
;

530 
s
->
maû_°©e
 = 
ngx_smç_hño
;

535 
ngx_smç_hño_x˛õ¡
:

536 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

539 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending XCLIENTÅo upstream";

541 
löe
.
Àn
 = ("XCLIENT ADDR= LOGIN= NAME="

542 
CRLF
) - 1

543 + 
s
->
c⁄√˘i⁄
->
addr_ãxt
.
Àn
 + s->
logö
.À¿+ s->
ho°
.len;

545 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

546 i‡(
löe
.
d©a
 =
NULL
) {

547 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

551 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

552 "XCLIENT ADDR=%V%s%V NAME=%V" 
CRLF
,

553 &
s
->
c⁄√˘i⁄
->
addr_ãxt
,

554 (
s
->
logö
.
Àn
 ? " LOGIN=" : ""), &s->logö, &s->
ho°
)

555 - 
löe
.
d©a
;

557 i‡(
s
->
smç_hño
.
Àn
) {

558 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_hño
;

560 } i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

561 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡_‰om
;

564 
s
->
maû_°©e
 = 
ngx_smç_x˛õ¡
;

569 
ngx_smç_x˛õ¡_hño
:

570 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

573 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending client HELO/EHLOÅo upstream";

575 
löe
.
Àn
 = ("HELO " 
CRLF
Ë- 1 + 
s
->
smç_hño
.len;

577 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

578 i‡(
löe
.
d©a
 =
NULL
) {

579 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

583 
löe
.
Àn
 = 
	`ngx_•rötf
÷öe.
d©a
,

584 ((
s
->
esmç
Ë? "EHLO %V" 
CRLF
 : "HELO %V" CRLF),

585 &
s
->
smç_hño
)

586 - 
löe
.
d©a
;

588 
s
->
maû_°©e
 = (s->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) ?

589 
ngx_smç_hño_‰om
 : 
ngx_smç_hño
;

593 
ngx_smç_hño_‰om
:

594 
ngx_smç_x˛õ¡_‰om
:

595 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

598 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending MAIL FROMÅo upstream";

600 
löe
.
Àn
 = 
s
->
smç_‰om
.À¿+ (
CRLF
) - 1;

601 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

602 i‡(
löe
.
d©a
 =
NULL
) {

603 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

607 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_‰om
.d©a, s->smç_‰om.
Àn
);

608 *
p
++ = 
CR
; *∞
LF
;

610 
s
->
maû_°©e
 = 
ngx_smç_‰om
;

614 
ngx_smç_‰om
:

615 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
ªv
->
log
, 0,

618 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "sending RCPT TOÅo upstream";

620 
löe
.
Àn
 = 
s
->
smç_to
.À¿+ (
CRLF
) - 1;

621 
löe
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
,Üöe.
Àn
);

622 i‡(
löe
.
d©a
 =
NULL
) {

623 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

627 
p
 = 
	`ngx_˝ymem
(
löe
.
d©a
, 
s
->
smç_to
.d©a, s->smç_to.
Àn
);

628 *
p
++ = 
CR
; *∞
LF
;

630 
s
->
maû_°©e
 = 
ngx_smç_to
;

634 
ngx_smç_hño
:

635 
ngx_smç_x˛õ¡
:

636 
ngx_smç_to
:

638 
b
 = 
s
->
¥oxy
->
buf„r
;

640 i‡(
s
->
auth_mëhod
 =
NGX_MAIL_AUTH_NONE
) {

641 
b
->
pos
 = b->
°¨t
;

644 
	`ngx_mem˝y
(
b
->
°¨t
, 
smç_auth_ok
, (smtp_auth_ok) - 1);

645 
b
->
œ°
 = b->
°¨t
 + (
smç_auth_ok
) - 1;

648 
s
->
c⁄√˘i⁄
->
ªad
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

649 
s
->
c⁄√˘i⁄
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

650 
ªv
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

651 
c
->
wrôe
->
h™dÀr
 = 
ngx_maû_¥oxy_h™dÀr
;

653 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

654 
	`ngx_add_timî
(
s
->
c⁄√˘i⁄
->
ªad
, 
pcf
->
timeout
);

655 
	`ngx_dñ_timî
(
c
->
ªad
);

657 
c
->
log
->
a˘i⁄
 = 
NULL
;

658 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "clientÜogged in");

660 
	`ngx_maû_¥oxy_h™dÀr
(
s
->
c⁄√˘i⁄
->
wrôe
);

665 #i‡(
NGX_SUPPRESS_WARN
)

666 
	`ngx_°r_nuŒ
(&
löe
);

671 i‡(
c
->
	`£nd
(c, 
löe
.
d©a
,Üöe.
Àn
Ë< (
ssize_t
)Üine.len) {

676 
	`ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
s
);

680 
s
->
¥oxy
->
buf„r
->
pos
 = s->¥oxy->buf„r->
°¨t
;

681 
s
->
¥oxy
->
buf„r
->
œ°
 = s->¥oxy->buf„r->
°¨t
;

682 
	}
}

686 
	$ngx_maû_¥oxy_dummy_h™dÀr
(
ngx_evít_t
 *
wev
)

688 
ngx_c⁄√˘i⁄_t
 *
c
;

689 
ngx_maû_£ssi⁄_t
 *
s
;

691 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
wev
->
log
, 0, "mailÖroxy dummy handler");

693 i‡(
	`ngx_h™dÀ_wrôe_evít
(
wev
, 0Ë!
NGX_OK
) {

694 
c
 = 
wev
->
d©a
;

695 
s
 = 
c
->
d©a
;

697 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

699 
	}
}

702 
ngx_öt_t


703 
	$ngx_maû_¥oxy_ªad_ª•⁄£
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_uöt_t
 
°©e
)

705 
u_ch¨
 *
p
;

706 
ssize_t
 
n
;

707 
ngx_buf_t
 *
b
;

708 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

710 
s
->
c⁄√˘i⁄
->
log
->
a˘i⁄
 = "readingÑesponse from upstream";

712 
b
 = 
s
->
¥oxy
->
buf„r
;

714 
n
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
	`ªcv
(s->proxy->upstream.connection,

715 
b
->
œ°
, b->
íd
 - b->last);

717 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

718  
NGX_ERROR
;

721 i‡(
n
 =
NGX_AGAIN
) {

722  
NGX_AGAIN
;

725 
b
->
œ°
 +
n
;

727 i‡(
b
->
œ°
 - b->
pos
 < 4) {

728  
NGX_AGAIN
;

731 i‡(*(
b
->
œ°
 - 2Ë!
CR
 || *(b->œ° - 1Ë!
LF
) {

732 i‡(
b
->
œ°
 =b->
íd
) {

733 *(
b
->
œ°
 - 1) = '\0';

734 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

736 
b
->
pos
);

737  
NGX_ERROR
;

740  
NGX_AGAIN
;

743 
p
 = 
b
->
pos
;

745 
s
->
¥Ÿocﬁ
) {

747 
NGX_MAIL_POP3_PROTOCOL
:

748 i‡(
p
[0] == '+' &&Ö[1] == 'O' &&Ö[2] == 'K') {

749  
NGX_OK
;

753 
NGX_MAIL_IMAP_PROTOCOL
:

754 
°©e
) {

756 
ngx_im≠_°¨t
:

757 i‡(
p
[0] == '*' &&Ö[1] == ' ' &&Ö[2] == 'O' &&Ö[3] == 'K') {

758  
NGX_OK
;

762 
ngx_im≠_logö
:

763 
ngx_im≠_u£r
:

764 i‡(
p
[0] == '+') {

765  
NGX_OK
;

769 
ngx_im≠_∑sswd
:

770 i‡(
	`ngx_°∫cmp
(
p
, 
s
->
èg
.
d©a
, s->èg.
Àn
) == 0) {

771 
p
 +
s
->
èg
.
Àn
;

772 i‡(
p
[0] == 'O' &&Ö[1] == 'K') {

773  
NGX_OK
;

782 
°©e
) {

784 
ngx_smç_°¨t
:

785 i‡(
p
[0] == '2' &&Ö[1] == '2' &&Ö[2] == '0') {

786  
NGX_OK
;

790 
ngx_smç_hño
:

791 
ngx_smç_hño_x˛õ¡
:

792 
ngx_smç_hño_‰om
:

793 
ngx_smç_‰om
:

794 i‡(
p
[0] == '2' &&Ö[1] == '5' &&Ö[2] == '0') {

795  
NGX_OK
;

799 
ngx_smç_x˛õ¡
:

800 
ngx_smç_x˛õ¡_‰om
:

801 
ngx_smç_x˛õ¡_hño
:

802 i‡(
p
[0] == '2' && (p[1] == '2' ||Ö[1] == '5') &&Ö[2] == '0') {

803  
NGX_OK
;

807 
ngx_smç_to
:

808  
NGX_OK
;

814 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

816 i‡(
pcf
->
∑ss_îr‹_mesßge
 == 0) {

817 *(
b
->
œ°
 - 2) = '\0';

818 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
s
->
c⁄√˘i⁄
->
log
, 0,

819 "up°ªam síàövÆidÑe•⁄£: \"%s\"", 
p
);

820  
NGX_ERROR
;

823 
s
->
out
.
Àn
 = 
b
->
œ°
 - 
p
 - 2;

824 
s
->
out
.
d©a
 = 
p
;

826 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
s
->
c⁄√˘i⁄
->
log
, 0,

827 "up°ªam síàövÆidÑe•⁄£: \"%V\"", &
s
->
out
);

829 
s
->
out
.
Àn
 = 
b
->
œ°
 - b->
pos
;

830 
s
->
out
.
d©a
 = 
b
->
pos
;

832  
NGX_ERROR
;

833 
	}
}

837 
	$ngx_maû_¥oxy_h™dÀr
(
ngx_evít_t
 *
ev
)

839 *
a˘i⁄
, *
ªcv_a˘i⁄
, *
£nd_a˘i⁄
;

840 
size_t
 
size
;

841 
ssize_t
 
n
;

842 
ngx_buf_t
 *
b
;

843 
ngx_uöt_t
 
do_wrôe
;

844 
ngx_c⁄√˘i⁄_t
 *
c
, *
§c
, *
d°
;

845 
ngx_maû_£ssi⁄_t
 *
s
;

846 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

848 
c
 = 
ev
->
d©a
;

849 
s
 = 
c
->
d©a
;

851 i‡(
ev
->
timedout
) {

852 
c
->
log
->
a˘i⁄
 = "proxying";

854 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

855 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

857 
c
->
timedout
 = 1;

860 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
,

864 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

868 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

869 i‡(
ev
->
wrôe
) {

870 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

871 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

872 
§c
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

873 
d°
 = 
c
;

874 
b
 = 
s
->
¥oxy
->
buf„r
;

877 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

878 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

879 
§c
 = 
c
;

880 
d°
 = 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
;

881 
b
 = 
s
->
buf„r
;

885 i‡(
ev
->
wrôe
) {

886 
ªcv_a˘i⁄
 = "proxyingándÑeading from client";

887 
£nd_a˘i⁄
 = "proxyingánd sendingÅo upstream";

888 
§c
 = 
s
->
c⁄√˘i⁄
;

889 
d°
 = 
c
;

890 
b
 = 
s
->
buf„r
;

893 
ªcv_a˘i⁄
 = "proxyingándÑeading from upstream";

894 
£nd_a˘i⁄
 = "proxyingánd sendingÅo client";

895 
§c
 = 
c
;

896 
d°
 = 
s
->
c⁄√˘i⁄
;

897 
b
 = 
s
->
¥oxy
->
buf„r
;

901 
do_wrôe
 = 
ev
->
wrôe
 ? 1 : 0;

903 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_MAIL
, 
ev
->
log
, 0,

905 
do_wrôe
, 
§c
->
fd
, 
d°
->fd);

909 i‡(
do_wrôe
) {

911 
size
 = 
b
->
œ°
 - b->
pos
;

913 i‡(
size
 && 
d°
->
wrôe
->
ªady
) {

914 
c
->
log
->
a˘i⁄
 = 
£nd_a˘i⁄
;

916 
n
 = 
d°
->
	`£nd
(d°, 
b
->
pos
, 
size
);

918 i‡(
n
 =
NGX_ERROR
) {

919 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

923 i‡(
n
 > 0) {

924 
b
->
pos
 +
n
;

926 i‡(
b
->
pos
 =b->
œ°
) {

927 
b
->
pos
 = b->
°¨t
;

928 
b
->
œ°
 = b->
°¨t
;

934 
size
 = 
b
->
íd
 - b->
œ°
;

936 i‡(
size
 && 
§c
->
ªad
->
ªady
) {

937 
c
->
log
->
a˘i⁄
 = 
ªcv_a˘i⁄
;

939 
n
 = 
§c
->
	`ªcv
(§c, 
b
->
œ°
, 
size
);

941 i‡(
n
 =
NGX_AGAIN
 ||Ç == 0) {

945 i‡(
n
 > 0) {

946 
do_wrôe
 = 1;

947 
b
->
œ°
 +
n
;

952 i‡(
n
 =
NGX_ERROR
) {

953 
§c
->
ªad
->
eof
 = 1;

960 
c
->
log
->
a˘i⁄
 = "proxying";

962 i‡((
s
->
c⁄√˘i⁄
->
ªad
->
eof
 && s->
buf„r
->
pos
 =s->buf„r->
œ°
)

963 || (
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof


964 && 
s
->
¥oxy
->
buf„r
->
pos
 =s->¥oxy->buf„r->
œ°
)

965 || (
s
->
c⁄√˘i⁄
->
ªad
->
eof


966 && 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
ªad
->
eof
))

968 
a˘i⁄
 = 
c
->
log
->action;

969 
c
->
log
->
a˘i⁄
 = 
NULL
;

970 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, "proxied session done");

971 
c
->
log
->
a˘i⁄
 =áction;

973 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

977 i‡(
	`ngx_h™dÀ_wrôe_evít
(
d°
->
wrôe
, 0Ë!
NGX_OK
) {

978 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

982 i‡(
	`ngx_h™dÀ_ªad_evít
(
d°
->
ªad
, 0Ë!
NGX_OK
) {

983 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

987 i‡(
	`ngx_h™dÀ_wrôe_evít
(
§c
->
wrôe
, 0Ë!
NGX_OK
) {

988 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

992 i‡(
	`ngx_h™dÀ_ªad_evít
(
§c
->
ªad
, 0Ë!
NGX_OK
) {

993 
	`ngx_maû_¥oxy_˛o£_£ssi⁄
(
s
);

997 i‡(
c
 =
s
->
c⁄√˘i⁄
) {

998 
pcf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_¥oxy_moduÀ
);

999 
	`ngx_add_timî
(
c
->
ªad
, 
pcf
->
timeout
);

1001 
	}
}

1005 
	$ngx_maû_¥oxy_up°ªam_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1007 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1008 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1010 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1012 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1015 i‡(
s
->
out
.
Àn
 == 0) {

1016 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1020 
s
->
quô
 = 1;

1021 
	`ngx_maû_£nd
(
s
->
c⁄√˘i⁄
->
wrôe
);

1022 
	}
}

1026 
	$ngx_maû_¥oxy_öã∫Æ_£rvî_îr‹
(
ngx_maû_£ssi⁄_t
 *
s
)

1028 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1029 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1031 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1033 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1036 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

1037 
	}
}

1041 
	$ngx_maû_¥oxy_˛o£_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
)

1043 i‡(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
) {

1044 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
s
->
c⁄√˘i⁄
->
log
, 0,

1046 
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
->
fd
);

1048 
	`ngx_˛o£_c⁄√˘i⁄
(
s
->
¥oxy
->
up°ªam
.
c⁄√˘i⁄
);

1051 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
s
->
c⁄√˘i⁄
);

1052 
	}
}

1056 
	$ngx_maû_¥oxy_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

1058 
ngx_maû_¥oxy_c⁄f_t
 *
pcf
;

1060 
pcf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_¥oxy_c⁄f_t
));

1061 i‡(
pcf
 =
NULL
) {

1062  
NULL
;

1065 
pcf
->
íabÀ
 = 
NGX_CONF_UNSET
;

1066 
pcf
->
∑ss_îr‹_mesßge
 = 
NGX_CONF_UNSET
;

1067 
pcf
->
x˛õ¡
 = 
NGX_CONF_UNSET
;

1068 
pcf
->
buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

1069 
pcf
->
timeout
 = 
NGX_CONF_UNSET_MSEC
;

1071  
pcf
;

1072 
	}
}

1076 
	$ngx_maû_¥oxy_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

1078 
ngx_maû_¥oxy_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

1079 
ngx_maû_¥oxy_c⁄f_t
 *
c⁄f
 = 
chûd
;

1081 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

1082 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
∑ss_îr‹_mesßge
, 
¥ev
->pass_error_message, 0);

1083 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
x˛õ¡
, 
¥ev
->xclient, 1);

1084 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
buf„r_size
, 
¥ev
->buffer_size,

1085 (
size_t
Ë
ngx_∑gesize
);

1086 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
timeout
, 
¥ev
->timeout, 24 * 60 * 60000);

1088  
NGX_CONF_OK
;

1089 
	}
}

	@src/mail/ngx_mail_smtp_handler.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

16 
ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
);

17 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
);

18 
ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

19 
ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
);

20 
ngx_öt_t
 
ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
,

21 
ngx_c⁄√˘i⁄_t
 *
c
);

23 
ngx_öt_t
 
ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

24 
ngx_öt_t
 
ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

25 
ngx_öt_t
 
ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

26 
ngx_öt_t
 
ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
,

27 
ngx_c⁄√˘i⁄_t
 *
c
);

28 
ngx_öt_t
 
ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

29 
ngx_öt_t
 
ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

31 
ngx_öt_t
 
ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

32 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

33 
ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
,

34 
ngx_c⁄√˘i⁄_t
 *
c
, *
îr
);

37 
u_ch¨
 
	gsmç_ok
[] = "250 2.0.0 OK" 
CRLF
;

38 
u_ch¨
 
	gsmç_bye
[] = "221 2.0.0 Bye" 
CRLF
;

39 
u_ch¨
 
	gsmç_°¨âls
[] = "220 2.0.0 Sèπ TLS" 
CRLF
;

40 
u_ch¨
 
	gsmç_√xt
[] = "334 " 
CRLF
;

41 
u_ch¨
 
	gsmç_u£∫ame
[] = "334 VXNlcm5hbWU6" 
CRLF
;

42 
u_ch¨
 
	gsmç_∑ssw‹d
[] = "334 UGFzc3dvcmQ6" 
CRLF
;

43 
u_ch¨
 
	gsmç_övÆid_comm™d
[] = "500 5.5.1 InvÆid comm™d" 
CRLF
;

44 
u_ch¨
 
	gsmç_övÆid_pùñöög
[] =

45 "503 5.5.0 Im¥›î u£ o‡SMTP comm™dÖùñöög" 
CRLF
;

46 
u_ch¨
 
	gsmç_övÆid_¨gumít
[] = "501 5.5.4 InvÆidárgumít" 
CRLF
;

47 
u_ch¨
 
	gsmç_auth_ªquúed
[] = "530 5.7.1 Authítiˇti⁄Ñequúed" 
CRLF
;

48 
u_ch¨
 
	gsmç_bad_£quí˚
[] = "503 5.5.1 Bad sequí˚ o‡comm™ds" 
CRLF
;

51 
ngx_°r_t
 
	gsmç_u«vaûabÀ
 = 
ngx_°rög
("[UNAVAILABLE]");

52 
ngx_°r_t
 
	gsmç_ãmpu«vaû
 = 
ngx_°rög
("[TEMPUNAVAIL]");

56 
	$ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

58 
sockaddr_ö
 *
sö
;

59 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

60 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

62 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

64 i‡(
cscf
->
ªsﬁvî
 =
NULL
) {

65 
s
->
ho°
 = 
smç_u«vaûabÀ
;

66 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

70 i‡(
c
->
sockaddr
->
ß_Ámûy
 !
AF_INET
) {

71 
s
->
ho°
 = 
smç_ãmpu«vaû
;

72 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

76 
c
->
log
->
a˘i⁄
 = "inÑesolving clientáddress";

78 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

79 i‡(
˘x
 =
NULL
) {

80 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

86 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

88 
˘x
->
addr
 = 
sö
->
sö_addr
.
s_addr
;

89 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_addr_h™dÀr
;

90 
˘x
->
d©a
 = 
s
;

91 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

93 i‡(
	`ngx_ªsﬁve_addr
(
˘x
Ë!
NGX_OK
) {

94 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

96 
	}
}

100 
	$ngx_maû_smç_ªsﬁve_addr_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

102 
ngx_c⁄√˘i⁄_t
 *
c
;

103 
ngx_maû_£ssi⁄_t
 *
s
;

105 
s
 = 
˘x
->
d©a
;

106 
c
 = 
s
->
c⁄√˘i⁄
;

108 i‡(
˘x
->
°©e
) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

111 &
c
->
addr_ãxt
, 
˘x
->
°©e
,

112 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

114 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

115 
s
->
ho°
 = 
smç_u«vaûabÀ
;

118 
s
->
ho°
 = 
smç_ãmpu«vaû
;

121 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

123 
	`ngx_maû_smç_gªëög
(
s
, s->
c⁄√˘i⁄
);

128 
c
->
log
->
a˘i⁄
 = "inÑesolving client hostname";

130 
s
->
ho°
.
d©a
 = 
	`ngx_p°rdup
(
c
->
poﬁ
, &
˘x
->
«me
);

131 i‡(
s
->
ho°
.
d©a
 =
NULL
) {

132 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

133 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

137 
s
->
ho°
.
Àn
 = 
˘x
->
«me
.len;

139 
	`ngx_ªsﬁve_addr_d⁄e
(
˘x
);

141 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

142 "addªs†ªsﬁved: %V", &
s
->
ho°
);

144 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me
;

146 
	`ngx_po°_evít
(
c
->
ªad
, &
ngx_po°ed_evíts
);

147 
	}
}

151 
	$ngx_maû_smç_ªsﬁve_«me
(
ngx_evít_t
 *
ªv
)

153 
ngx_c⁄√˘i⁄_t
 *
c
;

154 
ngx_maû_£ssi⁄_t
 *
s
;

155 
ngx_ªsﬁvî_˘x_t
 *
˘x
;

156 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

158 
c
 = 
ªv
->
d©a
;

159 
s
 = 
c
->
d©a
;

161 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

163 
˘x
 = 
	`ngx_ªsﬁve_°¨t
(
cscf
->
ªsﬁvî
, 
NULL
);

164 i‡(
˘x
 =
NULL
) {

165 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

169 
˘x
->
«me
 = 
s
->
ho°
;

170 
˘x
->
ty≥
 = 
NGX_RESOLVE_A
;

171 
˘x
->
h™dÀr
 = 
ngx_maû_smç_ªsﬁve_«me_h™dÀr
;

172 
˘x
->
d©a
 = 
s
;

173 
˘x
->
timeout
 = 
cscf
->
ªsﬁvî_timeout
;

175 i‡(
	`ngx_ªsﬁve_«me
(
˘x
Ë!
NGX_OK
) {

176 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

178 
	}
}

182 
	$ngx_maû_smç_ªsﬁve_«me_h™dÀr
(
ngx_ªsﬁvî_˘x_t
 *
˘x
)

184 
ö_addr_t
 
addr
;

185 
ngx_uöt_t
 
i
;

186 
ngx_c⁄√˘i⁄_t
 *
c
;

187 
sockaddr_ö
 *
sö
;

188 
ngx_maû_£ssi⁄_t
 *
s
;

190 
s
 = 
˘x
->
d©a
;

191 
c
 = 
s
->
c⁄√˘i⁄
;

193 i‡(
˘x
->
°©e
) {

194 
	`ngx_log_îr‹
(
NGX_LOG_ERR
, 
c
->
log
, 0,

196 &
˘x
->
«me
, ctx->
°©e
,

197 
	`ngx_ªsﬁvî_°ªº‹
(
˘x
->
°©e
));

199 i‡(
˘x
->
°©e
 =
NGX_RESOLVE_NXDOMAIN
) {

200 
s
->
ho°
 = 
smç_u«vaûabÀ
;

203 
s
->
ho°
 = 
smç_ãmpu«vaû
;

210 
sö
 = (
sockaddr_ö
 *Ë
c
->
sockaddr
;

212 
i
 = 0; i < 
˘x
->
«ddrs
; i++) {

214 
addr
 = 
˘x
->
addrs
[
i
];

216 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

218 (
	`¡ohl
(
addr
) >> 24) & 0xff,

219 (
	`¡ohl
(
addr
) >> 16) & 0xff,

220 (
	`¡ohl
(
addr
) >> 8) & 0xff,

221 
	`¡ohl
(
addr
) & 0xff);

223 i‡(
addr
 =
sö
->
sö_addr
.
s_addr
) {

224 
found
;

228 
s
->
ho°
 = 
smç_u«vaûabÀ
;

231 
found
:

233 
	`ngx_ªsﬁve_«me_d⁄e
(
˘x
);

235 
	`ngx_maû_smç_gªëög
(
s
, 
c
);

236 
	}
}

240 
	$ngx_maû_smç_gªëög
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

242 
ngx_m£c_t
 
timeout
;

243 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

244 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

246 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

247 "smç gªëög f‹ \"%V\"", &
s
->
ho°
);

249 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

250 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

252 
timeout
 = 
sscf
->
gªëög_dñay
 ? sscf->gªëög_dñay : 
cscf
->timeout;

253 
	`ngx_add_timî
(
c
->
ªad
, 
timeout
);

255 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

256 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

259 i‡(
sscf
->
gªëög_dñay
) {

260 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_övÆid_pùñöög
;

264 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

266 
s
->
out
 = 
sscf
->
gªëög
;

268 
	`ngx_maû_£nd
(
c
->
wrôe
);

269 
	}
}

273 
	$ngx_maû_smç_övÆid_pùñöög
(
ngx_evít_t
 *
ªv
)

275 
ngx_c⁄√˘i⁄_t
 *
c
;

276 
ngx_maû_£ssi⁄_t
 *
s
;

277 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

278 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

280 
c
 = 
ªv
->
d©a
;

281 
s
 = 
c
->
d©a
;

283 
c
->
log
->
a˘i⁄
 = "in delayÖipelining state";

285 i‡(
ªv
->
timedout
) {

287 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "delay greeting");

289 
ªv
->
timedout
 = 0;

291 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

293 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_öô_¥Ÿocﬁ
;

295 
	`ngx_add_timî
(
c
->
ªad
, 
cscf
->
timeout
);

297 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

298 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

302 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

304 
s
->
out
 = 
sscf
->
gªëög
;

308 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "invalidÖipelining");

310 i‡(
s
->
buf„r
 =
NULL
) {

311 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

316 i‡(
	`ngx_maû_smç_disˇrd_comm™d
(
s
, 
c
,

318 !
NGX_OK
)

323 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_pùñöög
);

326 
	`ngx_maû_£nd
(
c
->
wrôe
);

327 
	}
}

331 
	$ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
)

333 
ngx_c⁄√˘i⁄_t
 *
c
;

334 
ngx_maû_£ssi⁄_t
 *
s
;

336 
c
 = 
ªv
->
d©a
;

338 
c
->
log
->
a˘i⁄
 = "ináuth state";

340 i‡(
ªv
->
timedout
) {

341 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

342 
c
->
timedout
 = 1;

343 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

347 
s
 = 
c
->
d©a
;

349 i‡(
s
->
buf„r
 =
NULL
) {

350 i‡(
	`ngx_maû_smç_¸óã_buf„r
(
s
, 
c
Ë!
NGX_OK
) {

355 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

356 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_smç_auth_°©e
;

358 
	`ngx_maû_smç_auth_°©e
(
ªv
);

359 
	}
}

362 
ngx_öt_t


363 
	$ngx_maû_smç_¸óã_buf„r
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

365 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

367 i‡(
	`ngx_¨øy_öô
(&
s
->
¨gs
, 
c
->
poﬁ
, 2, (
ngx_°r_t
)Ë=
NGX_ERROR
) {

368 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

369  
NGX_ERROR
;

372 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

374 
s
->
buf„r
 = 
	`ngx_¸óã_ãmp_buf
(
c
->
poﬁ
, 
sscf
->
˛õ¡_buf„r_size
);

375 i‡(
s
->
buf„r
 =
NULL
) {

376 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

377  
NGX_ERROR
;

380  
NGX_OK
;

381 
	}
}

385 
	$ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
)

387 
ngx_öt_t
 
rc
;

388 
ngx_c⁄√˘i⁄_t
 *
c
;

389 
ngx_maû_£ssi⁄_t
 *
s
;

391 
c
 = 
ªv
->
d©a
;

392 
s
 = 
c
->
d©a
;

394 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtpáuth state");

396 i‡(
ªv
->
timedout
) {

397 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
NGX_ETIMEDOUT
, "clientÅimed out");

398 
c
->
timedout
 = 1;

399 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

403 i‡(
s
->
out
.
Àn
) {

404 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0, "smtp send handler busy");

405 
s
->
blocked
 = 1;

409 
s
->
blocked
 = 0;

411 
rc
 = 
	`ngx_maû_ªad_comm™d
(
s
, 
c
);

413 i‡(
rc
 =
NGX_AGAIN
 ||Ñ¯=
NGX_ERROR
) {

417 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

419 i‡(
rc
 =
NGX_OK
) {

420 
s
->
maû_°©e
) {

422 
ngx_smç_°¨t
:

424 
s
->
comm™d
) {

426 
NGX_SMTP_HELO
:

427 
NGX_SMTP_EHLO
:

428 
rc
 = 
	`ngx_maû_smç_hño
(
s
, 
c
);

431 
NGX_SMTP_AUTH
:

432 
rc
 = 
	`ngx_maû_smç_auth
(
s
, 
c
);

435 
NGX_SMTP_QUIT
:

436 
s
->
quô
 = 1;

437 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bye
);

440 
NGX_SMTP_MAIL
:

441 
rc
 = 
	`ngx_maû_smç_maû
(
s
, 
c
);

444 
NGX_SMTP_RCPT
:

445 
rc
 = 
	`ngx_maû_smç_r˝t
(
s
, 
c
);

448 
NGX_SMTP_RSET
:

449 
rc
 = 
	`ngx_maû_smç_r£t
(
s
, 
c
);

452 
NGX_SMTP_NOOP
:

455 
NGX_SMTP_STARTTLS
:

456 
rc
 = 
	`ngx_maû_smç_°¨âls
(
s
, 
c
);

457 
	`ngx_°r_£t
(&
s
->
out
, 
smç_°¨âls
);

461 
rc
 = 
NGX_MAIL_PARSE_INVALID_COMMAND
;

467 
ngx_smç_auth_logö_u£∫ame
:

468 
rc
 = 
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 0);

470 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

471 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

474 
ngx_smç_auth_logö_∑ssw‹d
:

475 
rc
 = 
	`ngx_maû_auth_logö_∑ssw‹d
(
s
, 
c
);

478 
ngx_smç_auth_∂aö
:

479 
rc
 = 
	`ngx_maû_auth_∂aö
(
s
, 
c
, 0);

482 
ngx_smç_auth_¸am_md5
:

483 
rc
 = 
	`ngx_maû_auth_¸am_md5
(
s
, 
c
);

488 
rc
) {

490 
NGX_DONE
:

491 
	`ngx_maû_auth
(
s
, 
c
);

494 
NGX_ERROR
:

495 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

498 
NGX_MAIL_PARSE_INVALID_COMMAND
:

499 
s
->
maû_°©e
 = 
ngx_smç_°¨t
;

500 
s
->
°©e
 = 0;

501 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_comm™d
);

505 
NGX_OK
:

506 
s
->
¨gs
.
√…s
 = 0;

507 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

508 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

510 i‡(
s
->
°©e
) {

511 
s
->
¨g_°¨t
 = s->
buf„r
->
°¨t
;

514 
	`ngx_maû_£nd
(
c
->
wrôe
);

516 
	}
}

519 
ngx_öt_t


520 
	$ngx_maû_smç_hño
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

522 
ngx_°r_t
 *
¨g
;

523 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

525 i‡(
s
->
¨gs
.
√…s
 != 1) {

526 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

527 
s
->
°©e
 = 0;

528  
NGX_OK
;

531 
¨g
 = 
s
->
¨gs
.
ñts
;

533 
s
->
smç_hño
.
Àn
 = 
¨g
[0].len;

535 
s
->
smç_hño
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
¨g
[0].
Àn
);

536 i‡(
s
->
smç_hño
.
d©a
 =
NULL
) {

537  
NGX_ERROR
;

540 
	`ngx_mem˝y
(
s
->
smç_hño
.
d©a
, 
¨g
[0].d©a,árg[0].
Àn
);

542 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

543 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

545 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

547 i‡(
s
->
comm™d
 =
NGX_SMTP_HELO
) {

548 
s
->
out
 = 
sscf
->
£rvî_«me
;

551 
s
->
esmç
 = 1;

553 #i‡(
NGX_MAIL_SSL
)

555 i‡(
c
->
s¶
 =
NULL
) {

556 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

558 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

560 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ON
) {

561 
s
->
out
 = 
sscf
->
°¨âls_ˇ∑bûôy
;

562  
NGX_OK
;

565 i‡(
s¶cf
->
°¨âls
 =
NGX_MAIL_STARTTLS_ONLY
) {

566 
s
->
out
 = 
sscf
->
°¨âls_⁄ly_ˇ∑bûôy
;

567  
NGX_OK
;

572 
s
->
out
 = 
sscf
->
ˇ∑bûôy
;

575  
NGX_OK
;

576 
	}
}

579 
ngx_öt_t


580 
	$ngx_maû_smç_auth
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

582 
ngx_öt_t
 
rc
;

583 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

584 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

586 #i‡(
NGX_MAIL_SSL
)

587 i‡(
	`ngx_maû_°¨âls_⁄ly
(
s
, 
c
)) {

588  
NGX_MAIL_PARSE_INVALID_COMMAND
;

592 i‡(
s
->
¨gs
.
√…s
 == 0) {

593 
	`ngx_°r_£t
(&
s
->
out
, 
smç_övÆid_¨gumít
);

594 
s
->
°©e
 = 0;

595  
NGX_OK
;

598 
rc
 = 
	`ngx_maû_auth_∑r£
(
s
, 
c
);

600 
rc
) {

602 
NGX_MAIL_AUTH_LOGIN
:

604 
	`ngx_°r_£t
(&
s
->
out
, 
smç_u£∫ame
);

605 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_u£∫ame
;

607  
NGX_OK
;

609 
NGX_MAIL_AUTH_LOGIN_USERNAME
:

611 
	`ngx_°r_£t
(&
s
->
out
, 
smç_∑ssw‹d
);

612 
s
->
maû_°©e
 = 
ngx_smç_auth_logö_∑ssw‹d
;

614  
	`ngx_maû_auth_logö_u£∫ame
(
s
, 
c
, 1);

616 
NGX_MAIL_AUTH_PLAIN
:

618 
	`ngx_°r_£t
(&
s
->
out
, 
smç_√xt
);

619 
s
->
maû_°©e
 = 
ngx_smç_auth_∂aö
;

621  
NGX_OK
;

623 
NGX_MAIL_AUTH_CRAM_MD5
:

625 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

627 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
)) {

628  
NGX_MAIL_PARSE_INVALID_COMMAND
;

631 i‡(
s
->
ß…
.
d©a
 =
NULL
) {

632 
cscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_c‹e_moduÀ
);

634 i‡(
	`ngx_maû_ß…
(
s
, 
c
, 
cscf
Ë!
NGX_OK
) {

635  
NGX_ERROR
;

639 i‡(
	`ngx_maû_auth_¸am_md5_ß…
(
s
, 
c
, "334 ", 4Ë=
NGX_OK
) {

640 
s
->
maû_°©e
 = 
ngx_smç_auth_¸am_md5
;

641  
NGX_OK
;

644  
NGX_ERROR
;

647  
rc
;

648 
	}
}

651 
ngx_öt_t


652 
	$ngx_maû_smç_maû
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

654 
u_ch¨
 
ch
;

655 
ngx_°r_t
 
l
;

656 
ngx_uöt_t
 
i
;

657 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

659 
sscf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_smç_moduÀ
);

661 i‡(!(
sscf
->
auth_mëhods
 & 
NGX_MAIL_AUTH_NONE_ENABLED
)) {

662 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, "client wasÑejected: \"%V\"");

663 
	`ngx_°r_£t
(&
s
->
out
, 
smç_auth_ªquúed
);

664  
NGX_OK
;

669 i‡(
s
->
smç_‰om
.
Àn
) {

670 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

671  
NGX_OK
;

674 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

675 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

677 
i
 = 0; i < 
l
.
Àn
; i++) {

678 
ch
 = 
l
.
d©a
[
i
];

680 i‡(
ch
 !
CR
 && ch !
LF
) {

684 
l
.
d©a
[
i
] = ' ';

687 
i
) {

688 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

692 
i
--;

695 
l
.
Àn
 = 
i
;

697 
s
->
smç_‰om
.
Àn
 = 
l
.len;

699 
s
->
smç_‰om
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

700 i‡(
s
->
smç_‰om
.
d©a
 =
NULL
) {

701  
NGX_ERROR
;

704 
	`ngx_mem˝y
(
s
->
smç_‰om
.
d©a
, 
l
.d©a,Ü.
Àn
);

706 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

707 "smç maû from:\"%V\"", &
s
->
smç_‰om
);

709 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

711  
NGX_OK
;

712 
	}
}

715 
ngx_öt_t


716 
	$ngx_maû_smç_r˝t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

718 
u_ch¨
 
ch
;

719 
ngx_°r_t
 
l
;

720 
ngx_uöt_t
 
i
;

722 i‡(
s
->
smç_‰om
.
Àn
 == 0) {

723 
	`ngx_°r_£t
(&
s
->
out
, 
smç_bad_£quí˚
);

724  
NGX_OK
;

727 
l
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

728 
l
.
d©a
 = 
s
->
buf„r
->
°¨t
;

730 
i
 = 0; i < 
l
.
Àn
; i++) {

731 
ch
 = 
l
.
d©a
[
i
];

733 i‡(
ch
 !
CR
 && ch !
LF
) {

737 
l
.
d©a
[
i
] = ' ';

740 
i
) {

741 i‡(
l
.
d©a
[
i
 - 1] != ' ') {

745 
i
--;

748 
l
.
Àn
 = 
i
;

750 
s
->
smç_to
.
Àn
 = 
l
.len;

752 
s
->
smç_to
.
d©a
 = 
	`ngx_≤Æloc
(
c
->
poﬁ
, 
l
.
Àn
);

753 i‡(
s
->
smç_to
.
d©a
 =
NULL
) {

754  
NGX_ERROR
;

757 
	`ngx_mem˝y
(
s
->
smç_to
.
d©a
, 
l
.d©a,Ü.
Àn
);

759 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MAIL
, 
c
->
log
, 0,

760 "smçÑ˝àto:\"%V\"", &
s
->
smç_to
);

762 
s
->
auth_mëhod
 = 
NGX_MAIL_AUTH_NONE
;

764  
NGX_DONE
;

765 
	}
}

768 
ngx_öt_t


769 
	$ngx_maû_smç_r£t
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

771 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

772 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

773 
	`ngx_°r_£t
(&
s
->
out
, 
smç_ok
);

775  
NGX_OK
;

776 
	}
}

779 
ngx_öt_t


780 
	$ngx_maû_smç_°¨âls
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
)

782 #i‡(
NGX_MAIL_SSL
)

783 
ngx_maû_s¶_c⁄f_t
 *
s¶cf
;

785 i‡(
c
->
s¶
 =
NULL
) {

786 
s¶cf
 = 
	`ngx_maû_gë_moduÀ_§v_c⁄f
(
s
, 
ngx_maû_s¶_moduÀ
);

787 i‡(
s¶cf
->
°¨âls
) {

794 
	`ngx_°r_nuŒ
(&
s
->
smç_hño
);

795 
	`ngx_°r_nuŒ
(&
s
->
smç_‰om
);

796 
	`ngx_°r_nuŒ
(&
s
->
smç_to
);

798 
c
->
ªad
->
h™dÀr
 = 
ngx_maû_°¨âls_h™dÀr
;

799  
NGX_OK
;

805  
NGX_MAIL_PARSE_INVALID_COMMAND
;

806 
	}
}

809 
ngx_öt_t


810 
	$ngx_maû_smç_disˇrd_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

811 *
îr
)

813 
ssize_t
 
n
;

815 
n
 = 
c
->
	`ªcv
(c, 
s
->
buf„r
->
œ°
, s->buf„r->
íd
 - s->buffer->last);

817 i‡(
n
 =
NGX_ERROR
 ||Ç == 0) {

818 
	`ngx_maû_˛o£_c⁄√˘i⁄
(
c
);

819  
NGX_ERROR
;

822 i‡(
n
 > 0) {

823 
s
->
buf„r
->
œ°
 +
n
;

826 i‡(
n
 =
NGX_AGAIN
) {

827 i‡(
	`ngx_h™dÀ_ªad_evít
(
c
->
ªad
, 0Ë!
NGX_OK
) {

828 
	`ngx_maû_£ssi⁄_öã∫Æ_£rvî_îr‹
(
s
);

829  
NGX_ERROR
;

832  
NGX_AGAIN
;

835 
	`ngx_maû_smç_log_ªje˘ed_comm™d
(
s
, 
c
, 
îr
);

837 
s
->
buf„r
->
pos
 = s->buf„r->
°¨t
;

838 
s
->
buf„r
->
œ°
 = s->buf„r->
°¨t
;

840  
NGX_OK
;

841 
	}
}

845 
	$ngx_maû_smç_log_ªje˘ed_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
,

846 *
îr
)

848 
u_ch¨
 
ch
;

849 
ngx_°r_t
 
cmd
;

850 
ngx_uöt_t
 
i
;

852 i‡(
c
->
log
->
log_Àvñ
 < 
NGX_LOG_INFO
) {

856 
cmd
.
Àn
 = 
s
->
buf„r
->
œ°
 - s->buf„r->
°¨t
;

857 
cmd
.
d©a
 = 
s
->
buf„r
->
°¨t
;

859 
i
 = 0; i < 
cmd
.
Àn
; i++) {

860 
ch
 = 
cmd
.
d©a
[
i
];

862 i‡(
ch
 !
CR
 && ch !
LF
) {

866 
cmd
.
d©a
[
i
] = '_';

869 
cmd
.
Àn
 = 
i
;

871 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 0, 
îr
, &
cmd
);

872 
	}
}

	@src/mail/ngx_mail_smtp_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_maû.h
>

12 
	~<ngx_maû_smç_moduÀ.h
>

15 *
ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
);

16 *
ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
,

17 *
chûd
);

20 
ngx_c⁄f_bômask_t
 
	gngx_maû_smç_auth_mëhods
[] = {

21 { 
ngx_°rög
("∂aö"), 
NGX_MAIL_AUTH_PLAIN_ENABLED
 },

22 { 
ngx_°rög
("logö"), 
NGX_MAIL_AUTH_LOGIN_ENABLED
 },

23 { 
ngx_°rög
("¸am-md5"), 
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
 },

24 { 
ngx_°rög
("n⁄e"), 
NGX_MAIL_AUTH_NONE_ENABLED
 },

25 { 
ngx_nuŒ_°rög
, 0 }

29 
ngx_°r_t
 
	gngx_maû_smç_auth_mëhods_«mes
[] = {

30 
ngx_°rög
("PLAIN"),

31 
ngx_°rög
("LOGIN"),

32 
ngx_nuŒ_°rög
,

33 
ngx_°rög
("CRAM-MD5"),

34 
ngx_nuŒ_°rög


38 
ngx_maû_¥Ÿocﬁ_t
 
	gngx_maû_smç_¥Ÿocﬁ
 = {

39 
ngx_°rög
("smtp"),

41 
NGX_MAIL_SMTP_PROTOCOL
,

43 
ngx_maû_smç_öô_£ssi⁄
,

44 
ngx_maû_smç_öô_¥Ÿocﬁ
,

45 
ngx_maû_smç_∑r£_comm™d
,

46 
ngx_maû_smç_auth_°©e
,

48 
ngx_°rög
("451 4.3.2 I¡î«»£rvîÉº‹" 
CRLF
)

52 
ngx_comm™d_t
 
	gngx_maû_smç_comm™ds
[] = {

54 { 
ngx_°rög
("smtp_client_buffer"),

55 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

56 
ngx_c⁄f_£t_size_¶Ÿ
,

57 
NGX_MAIL_SRV_CONF_OFFSET
,

58 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
˛õ¡_buf„r_size
),

59 
NULL
 },

61 { 
ngx_°rög
("smtp_greeting_delay"),

62 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

63 
ngx_c⁄f_£t_m£c_¶Ÿ
,

64 
NGX_MAIL_SRV_CONF_OFFSET
,

65 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
gªëög_dñay
),

66 
NULL
 },

68 { 
ngx_°rög
("smtp_capabilities"),

69 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

70 
ngx_maû_ˇ∑bûôõs
,

71 
NGX_MAIL_SRV_CONF_OFFSET
,

72 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
ˇ∑bûôõs
),

73 
NULL
 },

75 { 
ngx_°rög
("smtp_auth"),

76 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

77 
ngx_c⁄f_£t_bômask_¶Ÿ
,

78 
NGX_MAIL_SRV_CONF_OFFSET
,

79 
off£tof
(
ngx_maû_smç_§v_c⁄f_t
, 
auth_mëhods
),

80 &
ngx_maû_smç_auth_mëhods
 },

82 
ngx_nuŒ_comm™d


86 
ngx_maû_moduÀ_t
 
	gngx_maû_smç_moduÀ_˘x
 = {

87 &
ngx_maû_smç_¥Ÿocﬁ
,

89 
NULL
,

90 
NULL
,

92 
ngx_maû_smç_¸óã_§v_c⁄f
,

93 
ngx_maû_smç_mîge_§v_c⁄f


97 
ngx_moduÀ_t
 
	gngx_maû_smç_moduÀ
 = {

98 
NGX_MODULE_V1
,

99 &
ngx_maû_smç_moduÀ_˘x
,

100 
ngx_maû_smç_comm™ds
,

101 
NGX_MAIL_MODULE
,

102 
NULL
,

103 
NULL
,

104 
NULL
,

105 
NULL
,

106 
NULL
,

107 
NULL
,

108 
NULL
,

109 
NGX_MODULE_V1_PADDING


114 
	$ngx_maû_smç_¸óã_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
)

116 
ngx_maû_smç_§v_c⁄f_t
 *
sscf
;

118 
sscf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_smç_§v_c⁄f_t
));

119 i‡(
sscf
 =
NULL
) {

120  
NULL
;

123 
sscf
->
˛õ¡_buf„r_size
 = 
NGX_CONF_UNSET_SIZE
;

124 
sscf
->
gªëög_dñay
 = 
NGX_CONF_UNSET_MSEC
;

126 i‡(
	`ngx_¨øy_öô
(&
sscf
->
ˇ∑bûôõs
, 
cf
->
poﬁ
, 4, (
ngx_°r_t
))

127 !
NGX_OK
)

129  
NULL
;

132  
sscf
;

133 
	}
}

137 
	$ngx_maû_smç_mîge_§v_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

139 
ngx_maû_smç_§v_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

140 
ngx_maû_smç_§v_c⁄f_t
 *
c⁄f
 = 
chûd
;

142 
u_ch¨
 *
p
, *
auth
, *
œ°
;

143 
size_t
 
size
;

144 
ngx_°r_t
 *
c
;

145 
ngx_uöt_t
 
i
, 
m
, 
auth_íabÀd
;

146 
ngx_maû_c‹e_§v_c⁄f_t
 *
cscf
;

148 
	`ngx_c⁄f_mîge_size_vÆue
(
c⁄f
->
˛õ¡_buf„r_size
,

149 
¥ev
->
˛õ¡_buf„r_size
,

150 (
size_t
Ë
ngx_∑gesize
);

152 
	`ngx_c⁄f_mîge_m£c_vÆue
(
c⁄f
->
gªëög_dñay
,

153 
¥ev
->
gªëög_dñay
, 0);

155 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
auth_mëhods
,

156 
¥ev
->
auth_mëhods
,

157 (
NGX_CONF_BITMASK_SET


158 |
NGX_MAIL_AUTH_PLAIN_ENABLED


159 |
NGX_MAIL_AUTH_LOGIN_ENABLED
));

162 
cscf
 = 
	`ngx_maû_c⁄f_gë_moduÀ_§v_c⁄f
(
cf
, 
ngx_maû_c‹e_moduÀ
);

164 
size
 = ("220 ESMTPÑódy" 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

166 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

167 i‡(
p
 =
NULL
) {

168  
NGX_CONF_ERROR
;

171 
c⁄f
->
gªëög
.
Àn
 = 
size
;

172 
c⁄f
->
gªëög
.
d©a
 = 
p
;

174 *
p
++ = '2'; *p++ = '2'; *p++ = '0'; *p++ = ' ';

175 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

176 
	`ngx_mem˝y
(
p
, " ESMTPÑódy" 
CRLF
, (" ESMTPÑeady" CRLF) - 1);

179 
size
 = ("250 " 
CRLF
Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
;

181 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

182 i‡(
p
 =
NULL
) {

183  
NGX_CONF_ERROR
;

186 
c⁄f
->
£rvî_«me
.
Àn
 = 
size
;

187 
c⁄f
->
£rvî_«me
.
d©a
 = 
p
;

189 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

190 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

191 *
p
++ = 
CR
; *∞
LF
;

194 i‡(
c⁄f
->
ˇ∑bûôõs
.
√…s
 == 0) {

195 
c⁄f
->
ˇ∑bûôõs
 = 
¥ev
->capabilities;

198 
size
 = ("250-"Ë- 1 + 
cscf
->
£rvî_«me
.
Àn
 + (
CRLF
) - 1;

200 
c
 = 
c⁄f
->
ˇ∑bûôõs
.
ñts
;

201 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

202 
size
 +("250 "Ë- 1 + 
c
[
i
].
Àn
 + (
CRLF
) - 1;

205 
auth_íabÀd
 = 0;

207 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

208 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

209 
m
 <<1, 
i
++)

211 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

212 
size
 +1 + 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
;

213 
auth_íabÀd
 = 1;

217 i‡(
auth_íabÀd
) {

218 
size
 +("250 AUTH"Ë- 1 + (
CRLF
) - 1;

221 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

222 i‡(
p
 =
NULL
) {

223  
NGX_CONF_ERROR
;

226 
c⁄f
->
ˇ∑bûôy
.
Àn
 = 
size
;

227 
c⁄f
->
ˇ∑bûôy
.
d©a
 = 
p
;

229 
œ°
 = 
p
;

231 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

232 
p
 = 
	`ngx_˝ymem
’, 
cscf
->
£rvî_«me
.
d©a
, cscf->£rvî_«me.
Àn
);

233 *
p
++ = 
CR
; *p++ = 
LF
;

235 
i
 = 0; i < 
c⁄f
->
ˇ∑bûôõs
.
√…s
; i++) {

236 
œ°
 = 
p
;

237 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = '-';

238 
p
 = 
	`ngx_˝ymem
’, 
c
[
i
].
d©a
, c[i].
Àn
);

239 *
p
++ = 
CR
; *p++ = 
LF
;

242 
auth
 = 
p
;

244 i‡(
auth_íabÀd
) {

245 
œ°
 = 
p
;

247 *
p
++ = '2'; *p++ = '5'; *p++ = '0'; *p++ = ' ';

248 *
p
++ = 'A'; *p++ = 'U'; *p++ = 'T'; *p++ = 'H';

250 
m
 = 
NGX_MAIL_AUTH_PLAIN_ENABLED
, 
i
 = 0;

251 
m
 <
NGX_MAIL_AUTH_CRAM_MD5_ENABLED
;

252 
m
 <<1, 
i
++)

254 i‡(
m
 & 
c⁄f
->
auth_mëhods
) {

255 *
p
++ = ' ';

256 
p
 = 
	`ngx_˝ymem
’, 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
d©a
,

257 
ngx_maû_smç_auth_mëhods_«mes
[
i
].
Àn
);

261 *
p
++ = 
CR
; *∞
LF
;

264 
œ°
[3] = ' ';

267 
size
 +("250 STARTTLS" 
CRLF
) - 1;

269 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

270 i‡(
p
 =
NULL
) {

271  
NGX_CONF_ERROR
;

274 
c⁄f
->
°¨âls_ˇ∑bûôy
.
Àn
 = 
size
;

275 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a
 = 
p
;

277 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, c⁄f->ˇ∑bûôy.
Àn
);

279 
p
 = 
	`ngx_˝ymem
’, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

280 *
p
++ = 
CR
; *∞
LF
;

282 
p
 = 
c⁄f
->
°¨âls_ˇ∑bûôy
.
d©a


283 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

284 *
p
 = '-';

286 
size
 = (
auth
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
)

287 + ("250 STARTTLS" 
CRLF
) - 1;

289 
p
 = 
	`ngx_≤Æloc
(
cf
->
poﬁ
, 
size
);

290 i‡(
p
 =
NULL
) {

291  
NGX_CONF_ERROR
;

294 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
Àn
 = 
size
;

295 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a
 = 
p
;

297 
p
 = 
	`ngx_˝ymem
’, 
c⁄f
->
ˇ∑bûôy
.
d©a
, 
auth
 - conf->capability.data);

299 
	`ngx_mem˝y
(
p
, "250 STARTTLS" 
CRLF
, ("250 STARTTLS" CRLF) - 1);

301 i‡(
œ°
 < 
auth
) {

302 
p
 = 
c⁄f
->
°¨âls_⁄ly_ˇ∑bûôy
.
d©a


303 + (
œ°
 - 
c⁄f
->
ˇ∑bûôy
.
d©a
) + 3;

304 *
p
 = '-';

307  
NGX_CONF_OK
;

308 
	}
}

	@src/mail/ngx_mail_smtp_module.h

8 #i‚de‡
_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


9 
	#_NGX_MAIL_SMTP_MODULE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

15 
	~<ngx_maû_smç_moduÀ.h
>

19 
ngx_m£c_t
 
	mgªëög_dñay
;

21 
size_t
 
	m˛õ¡_buf„r_size
;

23 
ngx_°r_t
 
	mˇ∑bûôy
;

24 
ngx_°r_t
 
	m°¨âls_ˇ∑bûôy
;

25 
ngx_°r_t
 
	m°¨âls_⁄ly_ˇ∑bûôy
;

27 
ngx_°r_t
 
	m£rvî_«me
;

28 
ngx_°r_t
 
	mgªëög
;

30 
ngx_uöt_t
 
	mauth_mëhods
;

32 
ngx_¨øy_t
 
	mˇ∑bûôõs
;

33 } 
	tngx_maû_smç_§v_c⁄f_t
;

36 
ngx_maû_smç_öô_£ssi⁄
(
ngx_maû_£ssi⁄_t
 *
s
, 
ngx_c⁄√˘i⁄_t
 *
c
);

37 
ngx_maû_smç_öô_¥Ÿocﬁ
(
ngx_evít_t
 *
ªv
);

38 
ngx_maû_smç_auth_°©e
(
ngx_evít_t
 *
ªv
);

39 
ngx_öt_t
 
ngx_maû_smç_∑r£_comm™d
(
ngx_maû_£ssi⁄_t
 *
s
);

42 
ngx_moduÀ_t
 
ngx_maû_smç_moduÀ
;

	@src/mail/ngx_mail_ssl_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_maû.h
>

13 
	#NGX_DEFAULT_CIPHERS
 "HIGH:!aNULL:!MD5"

	)

14 
	#NGX_DEFAULT_ECDH_CURVE
 "¥ime256v1"

	)

17 *
ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
);

18 *
ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
);

20 *
ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

21 *
c⁄f
);

22 *
ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

23 *
c⁄f
);

24 *
ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
,

25 *
c⁄f
);

28 
ngx_c⁄f_íum_t
 
	gngx_hâp_°¨âls_°©e
[] = {

29 { 
ngx_°rög
("off"), 
NGX_MAIL_STARTTLS_OFF
 },

30 { 
ngx_°rög
("⁄"), 
NGX_MAIL_STARTTLS_ON
 },

31 { 
ngx_°rög
("⁄ly"), 
NGX_MAIL_STARTTLS_ONLY
 },

32 { 
ngx_nuŒ_°rög
, 0 }

37 
ngx_c⁄f_bômask_t
 
	gngx_maû_s¶_¥Ÿocﬁs
[] = {

38 { 
ngx_°rög
("SSLv2"), 
NGX_SSL_SSLv2
 },

39 { 
ngx_°rög
("SSLv3"), 
NGX_SSL_SSLv3
 },

40 { 
ngx_°rög
("TLSv1"), 
NGX_SSL_TLSv1
 },

41 { 
ngx_°rög
("TLSv1.1"), 
NGX_SSL_TLSv1_1
 },

42 { 
ngx_°rög
("TLSv1.2"), 
NGX_SSL_TLSv1_2
 },

43 { 
ngx_nuŒ_°rög
, 0 }

47 
ngx_comm™d_t
 
	gngx_maû_s¶_comm™ds
[] = {

49 { 
ngx_°rög
("ssl"),

50 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

51 
ngx_maû_s¶_íabÀ
,

52 
NGX_MAIL_SRV_CONF_OFFSET
,

53 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
íabÀ
),

54 
NULL
 },

56 { 
ngx_°rög
("starttls"),

57 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

58 
ngx_maû_s¶_°¨âls
,

59 
NGX_MAIL_SRV_CONF_OFFSET
,

60 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
°¨âls
),

61 
ngx_hâp_°¨âls_°©e
 },

63 { 
ngx_°rög
("ssl_certificate"),

64 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

65 
ngx_c⁄f_£t_°r_¶Ÿ
,

66 
NGX_MAIL_SRV_CONF_OFFSET
,

67 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã
),

68 
NULL
 },

70 { 
ngx_°rög
("ssl_certificate_key"),

71 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

72 
ngx_c⁄f_£t_°r_¶Ÿ
,

73 
NGX_MAIL_SRV_CONF_OFFSET
,

74 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
˚πifiˇã_key
),

75 
NULL
 },

77 { 
ngx_°rög
("ssl_dhparam"),

78 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

79 
ngx_c⁄f_£t_°r_¶Ÿ
,

80 
NGX_MAIL_SRV_CONF_OFFSET
,

81 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
dh∑øm
),

82 
NULL
 },

84 { 
ngx_°rög
("ssl_ecdh_curve"),

85 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

86 
ngx_c⁄f_£t_°r_¶Ÿ
,

87 
NGX_MAIL_SRV_CONF_OFFSET
,

88 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
ecdh_curve
),

89 
NULL
 },

91 { 
ngx_°rög
("ssl_protocols"),

92 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_1MORE
,

93 
ngx_c⁄f_£t_bômask_¶Ÿ
,

94 
NGX_MAIL_SRV_CONF_OFFSET
,

95 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥Ÿocﬁs
),

96 &
ngx_maû_s¶_¥Ÿocﬁs
 },

98 { 
ngx_°rög
("ssl_ciphers"),

99 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

100 
ngx_c⁄f_£t_°r_¶Ÿ
,

101 
NGX_MAIL_SRV_CONF_OFFSET
,

102 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
cùhîs
),

103 
NULL
 },

105 { 
ngx_°rög
("ssl_prefer_server_ciphers"),

106 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_FLAG
,

107 
ngx_c⁄f_£t_Êag_¶Ÿ
,

108 
NGX_MAIL_SRV_CONF_OFFSET
,

109 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
¥e„r_£rvî_cùhîs
),

110 
NULL
 },

112 { 
ngx_°rög
("ssl_session_cache"),

113 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE12
,

114 
ngx_maû_s¶_£ssi⁄_ˇche
,

115 
NGX_MAIL_SRV_CONF_OFFSET
,

117 
NULL
 },

119 { 
ngx_°rög
("ssl_session_timeout"),

120 
NGX_MAIL_MAIN_CONF
|
NGX_MAIL_SRV_CONF
|
NGX_CONF_TAKE1
,

121 
ngx_c⁄f_£t_£c_¶Ÿ
,

122 
NGX_MAIL_SRV_CONF_OFFSET
,

123 
off£tof
(
ngx_maû_s¶_c⁄f_t
, 
£ssi⁄_timeout
),

124 
NULL
 },

126 
ngx_nuŒ_comm™d


130 
ngx_maû_moduÀ_t
 
	gngx_maû_s¶_moduÀ_˘x
 = {

131 
NULL
,

133 
NULL
,

134 
NULL
,

136 
ngx_maû_s¶_¸óã_c⁄f
,

137 
ngx_maû_s¶_mîge_c⁄f


141 
ngx_moduÀ_t
 
	gngx_maû_s¶_moduÀ
 = {

142 
NGX_MODULE_V1
,

143 &
ngx_maû_s¶_moduÀ_˘x
,

144 
ngx_maû_s¶_comm™ds
,

145 
NGX_MAIL_MODULE
,

146 
NULL
,

147 
NULL
,

148 
NULL
,

149 
NULL
,

150 
NULL
,

151 
NULL
,

152 
NULL
,

153 
NGX_MODULE_V1_PADDING


157 
ngx_°r_t
 
	gngx_maû_s¶_£ss_id_˘x
 = 
ngx_°rög
("MAIL");

161 
	$ngx_maû_s¶_¸óã_c⁄f
(
ngx_c⁄f_t
 *
cf
)

163 
ngx_maû_s¶_c⁄f_t
 *
scf
;

165 
scf
 = 
	`ngx_pˇŒoc
(
cf
->
poﬁ
, (
ngx_maû_s¶_c⁄f_t
));

166 i‡(
scf
 =
NULL
) {

167  
NULL
;

182 
scf
->
íabÀ
 = 
NGX_CONF_UNSET
;

183 
scf
->
°¨âls
 = 
NGX_CONF_UNSET_UINT
;

184 
scf
->
¥e„r_£rvî_cùhîs
 = 
NGX_CONF_UNSET
;

185 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_CONF_UNSET
;

186 
scf
->
£ssi⁄_timeout
 = 
NGX_CONF_UNSET
;

188  
scf
;

189 
	}
}

193 
	$ngx_maû_s¶_mîge_c⁄f
(
ngx_c⁄f_t
 *
cf
, *
∑ª¡
, *
chûd
)

195 
ngx_maû_s¶_c⁄f_t
 *
¥ev
 = 
∑ª¡
;

196 
ngx_maû_s¶_c⁄f_t
 *
c⁄f
 = 
chûd
;

198 *
mode
;

199 
ngx_poﬁ_˛ónup_t
 *
˛n
;

201 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
íabÀ
, 
¥ev
->enable, 0);

202 
	`ngx_c⁄f_mîge_uöt_vÆue
(
c⁄f
->
°¨âls
, 
¥ev
->starttls,

203 
NGX_MAIL_STARTTLS_OFF
);

205 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
£ssi⁄_timeout
,

206 
¥ev
->
£ssi⁄_timeout
, 300);

208 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
¥e„r_£rvî_cùhîs
,

209 
¥ev
->
¥e„r_£rvî_cùhîs
, 0);

211 
	`ngx_c⁄f_mîge_bômask_vÆue
(
c⁄f
->
¥Ÿocﬁs
, 
¥ev
->protocols,

212 (
NGX_CONF_BITMASK_SET
|
NGX_SSL_SSLv3
|
NGX_SSL_TLSv1


213 |
NGX_SSL_TLSv1_1
|
NGX_SSL_TLSv1_2
));

215 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã
, 
¥ev
->certificate, "");

216 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
˚πifiˇã_key
, 
¥ev
->certificate_key, "");

218 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
dh∑øm
, 
¥ev
->dhparam, "");

220 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
ecdh_curve
, 
¥ev
->ecdh_curve,

221 
NGX_DEFAULT_ECDH_CURVE
);

223 
	`ngx_c⁄f_mîge_°r_vÆue
(
c⁄f
->
cùhîs
, 
¥ev
->cùhîs, 
NGX_DEFAULT_CIPHERS
);

226 
c⁄f
->
s¶
.
log
 = 
cf
->log;

228 i‡(
c⁄f
->
íabÀ
) {

229 
mode
 = "ssl";

231 } i‡(
c⁄f
->
°¨âls
 !
NGX_MAIL_STARTTLS_OFF
) {

232 
mode
 = "starttls";

235 
mode
 = "";

238 i‡(*
mode
) {

240 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

241 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

244 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

245  
NGX_CONF_ERROR
;

248 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

249 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

252 
mode
, 
c⁄f
->
fûe
, c⁄f->
löe
);

253  
NGX_CONF_ERROR
;

258 i‡(
c⁄f
->
˚πifiˇã
.
Àn
 == 0) {

259  
NGX_CONF_OK
;

262 i‡(
c⁄f
->
˚πifiˇã_key
.
Àn
 == 0) {

263 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

266 &
c⁄f
->
˚πifiˇã
);

267  
NGX_CONF_ERROR
;

271 i‡(
	`ngx_s¶_¸óã
(&
c⁄f
->
s¶
, c⁄f->
¥Ÿocﬁs
, 
NULL
Ë!
NGX_OK
) {

272  
NGX_CONF_ERROR
;

275 
˛n
 = 
	`ngx_poﬁ_˛ónup_add
(
cf
->
poﬁ
, 0);

276 i‡(
˛n
 =
NULL
) {

277  
NGX_CONF_ERROR
;

280 
˛n
->
h™dÀr
 = 
ngx_s¶_˛ónup_˘x
;

281 
˛n
->
d©a
 = &
c⁄f
->
s¶
;

283 i‡(
	`ngx_s¶_˚πifiˇã
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
˚πifiˇã
,

284 &
c⁄f
->
˚πifiˇã_key
)

285 !
NGX_OK
)

287  
NGX_CONF_ERROR
;

290 i‡(
c⁄f
->
cùhîs
.
Àn
) {

291 i‡(
	`SSL_CTX_£t_cùhî_li°
(
c⁄f
->
s¶
.
˘x
,

292 (c⁄° *Ë
c⁄f
->
cùhîs
.
d©a
)

295 
	`ngx_s¶_îr‹
(
NGX_LOG_EMERG
, 
cf
->
log
, 0,

297 &
c⁄f
->
cùhîs
);

301 i‡(
c⁄f
->
¥e„r_£rvî_cùhîs
) {

302 
	`SSL_CTX_£t_›ti⁄s
(
c⁄f
->
s¶
.
˘x
, 
SSL_OP_CIPHER_SERVER_PREFERENCE
);

305 
	`SSL_CTX_£t_tmp_rß_ˇŒback
(
c⁄f
->
s¶
.
˘x
, 
ngx_s¶_rß512_key_ˇŒback
);

307 i‡(
	`ngx_s¶_dh∑øm
(
cf
, &
c⁄f
->
s¶
, &c⁄f->
dh∑øm
Ë!
NGX_OK
) {

308  
NGX_CONF_ERROR
;

311 
	`ngx_c⁄f_mîge_vÆue
(
c⁄f
->
buûtö_£ssi⁄_ˇche
,

312 
¥ev
->
buûtö_£ssi⁄_ˇche
, 
NGX_SSL_NONE_SCACHE
);

314 i‡(
c⁄f
->
shm_z⁄e
 =
NULL
) {

315 
c⁄f
->
shm_z⁄e
 = 
¥ev
->shm_zone;

318 i‡(
	`ngx_s¶_£ssi⁄_ˇche
(&
c⁄f
->
s¶
, &
ngx_maû_s¶_£ss_id_˘x
,

319 
c⁄f
->
buûtö_£ssi⁄_ˇche
,

320 
c⁄f
->
shm_z⁄e
, c⁄f->
£ssi⁄_timeout
)

321 !
NGX_OK
)

323  
NGX_CONF_ERROR
;

326  
NGX_CONF_OK
;

327 
	}
}

331 
	$ngx_maû_s¶_íabÀ
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

333 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

335 *
rv
;

337 
rv
 = 
	`ngx_c⁄f_£t_Êag_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

339 i‡(
rv
 !
NGX_CONF_OK
) {

340  
rv
;

343 i‡(
scf
->
íabÀ
 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

344 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

346  
NGX_CONF_ERROR
;

349 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

350 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

352  
NGX_CONF_OK
;

353 
	}
}

357 
	$ngx_maû_s¶_°¨âls
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

359 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

361 *
rv
;

363 
rv
 = 
	`ngx_c⁄f_£t_íum_¶Ÿ
(
cf
, 
cmd
, 
c⁄f
);

365 i‡(
rv
 !
NGX_CONF_OK
) {

366  
rv
;

369 i‡(
scf
->
íabÀ
 =1 && (
ngx_öt_t
Ëscf->
°¨âls
 > 
NGX_MAIL_STARTTLS_OFF
) {

370 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_WARN
, 
cf
, 0,

372  
NGX_CONF_ERROR
;

375 
scf
->
fûe
 = 
cf
->
c⁄f_fûe
->fûe.
«me
.
d©a
;

376 
scf
->
löe
 = 
cf
->
c⁄f_fûe
->line;

378  
NGX_CONF_OK
;

379 
	}
}

383 
	$ngx_maû_s¶_£ssi⁄_ˇche
(
ngx_c⁄f_t
 *
cf
, 
ngx_comm™d_t
 *
cmd
, *
c⁄f
)

385 
ngx_maû_s¶_c⁄f_t
 *
scf
 = 
c⁄f
;

387 
size_t
 
Àn
;

388 
ngx_°r_t
 *
vÆue
, 
«me
, 
size
;

389 
ngx_öt_t
 
n
;

390 
ngx_uöt_t
 
i
, 
j
;

392 
vÆue
 = 
cf
->
¨gs
->
ñts
;

394 
i
 = 1; i < 
cf
->
¨gs
->
√…s
; i++) {

396 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "off") == 0) {

397 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_SCACHE
;

401 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "none") == 0) {

402 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NONE_SCACHE
;

406 i‡(
	`ngx_°rcmp
(
vÆue
[
i
].
d©a
, "builtin") == 0) {

407 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_DFLT_BUILTIN_SCACHE
;

411 i‡(
vÆue
[
i
].
Àn
 > ("builtin:") - 1

412 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "builtin:", ("builtin:") - 1)

415 
n
 = 
	`ngx_©oi
(
vÆue
[
i
].
d©a
 + ("builtin:") - 1,

416 
vÆue
[
i
].
Àn
 - (("builtin:") - 1));

418 i‡(
n
 =
NGX_ERROR
) {

419 
övÆid
;

422 
scf
->
buûtö_£ssi⁄_ˇche
 = 
n
;

427 i‡(
vÆue
[
i
].
Àn
 > ("shared:") - 1

428 && 
	`ngx_°∫cmp
(
vÆue
[
i
].
d©a
, "shared:", ("shared:") - 1)

431 
Àn
 = 0;

433 
j
 = ("sh¨ed:"Ë- 1; j < 
vÆue
[
i
].
Àn
; j++) {

434 i‡(
vÆue
[
i
].
d©a
[
j
] == ':') {

438 
Àn
++;

441 i‡(
Àn
 == 0) {

442 
övÆid
;

445 
«me
.
Àn
 =Üen;

446 
«me
.
d©a
 = 
vÆue
[
i
].data + ("shared:") - 1;

448 
size
.
Àn
 = 
vÆue
[
i
].À¿- 
j
 - 1;

449 
size
.
d©a
 = 
«me
.d©®+ 
Àn
 + 1;

451 
n
 = 
	`ngx_∑r£_size
(&
size
);

453 i‡(
n
 =
NGX_ERROR
) {

454 
övÆid
;

457 i‡(
n
 < (
ngx_öt_t
Ë(8 * 
ngx_∑gesize
)) {

458 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

460 &
vÆue
[
i
]);

462  
NGX_CONF_ERROR
;

465 
scf
->
shm_z⁄e
 = 
	`ngx_sh¨ed_mem‹y_add
(
cf
, &
«me
, 
n
,

466 &
ngx_maû_s¶_moduÀ
);

467 i‡(
scf
->
shm_z⁄e
 =
NULL
) {

468  
NGX_CONF_ERROR
;

471 
scf
->
shm_z⁄e
->
öô
 = 
ngx_s¶_£ssi⁄_ˇche_öô
;

476 
övÆid
;

479 i‡(
scf
->
shm_z⁄e
 && scf->
buûtö_£ssi⁄_ˇche
 =
NGX_CONF_UNSET
) {

480 
scf
->
buûtö_£ssi⁄_ˇche
 = 
NGX_SSL_NO_BUILTIN_SCACHE
;

483  
NGX_CONF_OK
;

485 
övÆid
:

487 
	`ngx_c⁄f_log_îr‹
(
NGX_LOG_EMERG
, 
cf
, 0,

488 "övÆid sessi⁄ cachê\"%V\"", &
vÆue
[
i
]);

490  
NGX_CONF_ERROR
;

491 
	}
}

	@src/mail/ngx_mail_ssl_module.h

8 #i‚de‡
_NGX_MAIL_SSL_H_INCLUDED_


9 
	#_NGX_MAIL_SSL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_maû.h
>

17 
	#NGX_MAIL_STARTTLS_OFF
 0

	)

18 
	#NGX_MAIL_STARTTLS_ON
 1

	)

19 
	#NGX_MAIL_STARTTLS_ONLY
 2

	)

23 
ngx_Êag_t
 
	míabÀ
;

24 
ngx_Êag_t
 
	m¥e„r_£rvî_cùhîs
;

26 
ngx_s¶_t
 
	ms¶
;

28 
ngx_uöt_t
 
	m°¨âls
;

29 
ngx_uöt_t
 
	m¥Ÿocﬁs
;

31 
ssize_t
 
	mbuûtö_£ssi⁄_ˇche
;

33 
time_t
 
	m£ssi⁄_timeout
;

35 
ngx_°r_t
 
	m˚πifiˇã
;

36 
ngx_°r_t
 
	m˚πifiˇã_key
;

37 
ngx_°r_t
 
	mdh∑øm
;

38 
ngx_°r_t
 
	mecdh_curve
;

40 
ngx_°r_t
 
	mcùhîs
;

42 
ngx_shm_z⁄e_t
 *
	mshm_z⁄e
;

44 
u_ch¨
 *
	mfûe
;

45 
ngx_uöt_t
 
	mlöe
;

46 } 
	tngx_maû_s¶_c⁄f_t
;

49 
ngx_moduÀ_t
 
ngx_maû_s¶_moduÀ
;

	@src/misc/ngx_cpp_test_module.cpp

5 
	~<ngx_c⁄fig.h
>

6 
	~<ngx_c‹e.h
>

7 
	~<ngx_evít.h
>

8 
	~<ngx_evít_c⁄√˘.h
>

9 
	~<ngx_evít_pùe.h
>

11 
	~<ngx_hâp.h
>

13 
	~<ngx_maû.h
>

14 
	~<ngx_maû_p›3_moduÀ.h
>

15 
	~<ngx_maû_im≠_moduÀ.h
>

16 
	~<ngx_maû_smç_moduÀ.h
>

23 
ngx_˝p_ã°_h™dÀr
(*
d©a
);

26 
	$ngx_˝p_ã°_h™dÀr
(*
d©a
)

29 
	}
}

	@src/misc/ngx_google_perftools_module.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

16 
ProfûîSèπ
(
u_ch¨
* 
‚ame
);

17 
ProfûîSt›
();

18 
ProfûîRegi°îThªad
();

21 *
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_öt_t
 
ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
);

26 
ngx_°r_t
 
	m¥ofûes
;

27 } 
	tngx_googÀ_≥r·oﬁs_c⁄f_t
;

30 
ngx_comm™d_t
 
	gngx_googÀ_≥r·oﬁs_comm™ds
[] = {

32 { 
ngx_°rög
("google_perftools_profiles"),

33 
NGX_MAIN_CONF
|
NGX_DIRECT_CONF
|
NGX_CONF_TAKE1
,

34 
ngx_c⁄f_£t_°r_¶Ÿ
,

36 
off£tof
(
ngx_googÀ_≥r·oﬁs_c⁄f_t
, 
¥ofûes
),

37 
NULL
 },

39 
ngx_nuŒ_comm™d


43 
ngx_c‹e_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ_˘x
 = {

44 
ngx_°rög
("google_perftools"),

45 
ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
,

46 
NULL


50 
ngx_moduÀ_t
 
	gngx_googÀ_≥r·oﬁs_moduÀ
 = {

51 
NGX_MODULE_V1
,

52 &
ngx_googÀ_≥r·oﬁs_moduÀ_˘x
,

53 
ngx_googÀ_≥r·oﬁs_comm™ds
,

54 
NGX_CORE_MODULE
,

55 
NULL
,

56 
NULL
,

57 
ngx_googÀ_≥r·oﬁs_w‹kî
,

58 
NULL
,

59 
NULL
,

60 
NULL
,

61 
NULL
,

62 
NGX_MODULE_V1_PADDING


67 
	$ngx_googÀ_≥r·oﬁs_¸óã_c⁄f
(
ngx_cy˛e_t
 *
cy˛e
)

69 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

71 
g±cf
 = 
	`ngx_pˇŒoc
(
cy˛e
->
poﬁ
, (
ngx_googÀ_≥r·oﬁs_c⁄f_t
));

72 i‡(
g±cf
 =
NULL
) {

73  
NULL
;

82  
g±cf
;

83 
	}
}

86 
ngx_öt_t


87 
	$ngx_googÀ_≥r·oﬁs_w‹kî
(
ngx_cy˛e_t
 *
cy˛e
)

89 
u_ch¨
 *
¥ofûe
;

90 
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *
g±cf
;

92 
g±cf
 = (
ngx_googÀ_≥r·oﬁs_c⁄f_t
 *)

93 
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_googÀ_≥r·oﬁs_moduÀ
);

95 i‡(
g±cf
->
¥ofûes
.
Àn
 == 0) {

96  
NGX_OK
;

99 
¥ofûe
 = 
	`ngx_Æloc
(
g±cf
->
¥ofûes
.
Àn
 + 
NGX_INT_T_LEN
 + 2, 
cy˛e
->
log
);

100 i‡(
¥ofûe
 =
NULL
) {

101  
NGX_OK
;

104 i‡(
	`gëív
("CPUPROFILE")) {

106 
	`ProfûîSt›
();

109 
	`ngx_•rötf
(
¥ofûe
, "%V.%d%Z", &
g±cf
->
¥ofûes
, 
ngx_pid
);

111 i‡(
	`ProfûîSèπ
(
¥ofûe
)) {

113 
	`ProfûîRegi°îThªad
();

116 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
cy˛e
->
log
, 
ngx_î∫o
,

117 "ProfûîSèπ(%sËÁûed", 
¥ofûe
);

120 
	`ngx_‰ì
(
¥ofûe
);

122  
NGX_OK
;

123 
	}
}

	@src/os/unix/ngx_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(!
ªv
->
ªady
) {

25 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0, "secondáioÖost");

26  
NGX_AGAIN
;

29 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

30 "ªv->com∂ëe: %d", 
ªv
->
com∂ëe
);

31 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

32 "aiÿsize: %d", 
size
);

34 i‡(!
ªv
->
com∂ëe
) {

35 
	`ngx_memzîo
(&
ªv
->
aiocb
, (aiocb));

37 
ªv
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

38 
ªv
->
aiocb
.
aio_buf
 = 
buf
;

39 
ªv
->
aiocb
.
aio_nbyãs
 = 
size
;

41 #i‡(
NGX_HAVE_KQUEUE
)

42 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

43 
ªv
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

44 
ªv
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 =Ñev;

47 i‡(
	`aio_ªad
(&
ªv
->
aiocb
) == -1) {

48 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ªv
->
log
, 
ngx_î∫o
,

50 
ªv
->
îr‹
 = 1;

51  
NGX_ERROR
;

54 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "aio_ªad: #%d OK", 
c
->
fd
);

57 
ªv
->
a˘ive
 = 1;

58 
ªv
->
ªady
 = 0;

61 
ªv
->
com∂ëe
 = 0;

63 
n
 = 
	`aio_îr‹
(&
ªv
->
aiocb
);

64 i‡(
n
 == -1) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
, "aio_error() failed");

66 
ªv
->
îr‹
 = 1;

67  
NGX_ERROR
;

70 i‡(
n
 != 0) {

71 i‡(
n
 =
NGX_EINPROGRESS
) {

72 i‡(
ªv
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
n
,

75 
ªv
->
ªady
 = 0;

77  
NGX_AGAIN
;

80 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
c
->
log
, 
n
, "aio_read() failed");

81 
ªv
->
îr‹
 = 1;

82 
ªv
->
ªady
 = 0;

83  
NGX_ERROR
;

86 
n
 = 
	`aio_ªtu∫
(&
ªv
->
aiocb
);

87 i‡(
n
 == -1) {

88 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
ngx_î∫o
,

91 
ªv
->
îr‹
 = 1;

92 
ªv
->
ªady
 = 0;

93  
NGX_ERROR
;

96 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
ªv
->
log
, 0,

97 "aio_ªad: #%d %d", 
c
->
fd
, 
n
);

99 i‡(
n
 == 0) {

100 
ªv
->
eof
 = 1;

101 
ªv
->
ªady
 = 0;

103 
ªv
->
ªady
 = 1;

106 
ªv
->
a˘ive
 = 0;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_read_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
)

16 
n
;

17 
u_ch¨
 *
buf
, *
¥ev
;

18 
size_t
 
size
;

19 
ssize_t
 
tŸÆ
;

21 i‡(
c
->
ªad
->
≥ndög_eof
) {

22 
c
->
ªad
->
ªady
 = 0;

26 
tŸÆ
 = 0;

28 
˛
) {

32 i‡(!
c
->
ªad
->
ªady
) {

33  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

36 
buf
 = 
˛
->buf->
œ°
;

37 
¥ev
 = 
˛
->
buf
->
œ°
;

38 
size
 = 0;

42 
˛
 && 
¥ev
 =˛->
buf
->
œ°
) {

43 
size
 +
˛
->
buf
->
íd
 - cl->buf->
œ°
;

44 
¥ev
 = 
˛
->
buf
->
íd
;

45 
˛
 = cl->
√xt
;

48 
n
 = 
	`ngx_aio_ªad
(
c
, 
buf
, 
size
);

50 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_ªad: %d", 
n
);

52 i‡(
n
 =
NGX_AGAIN
) {

53  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

56 i‡(
n
 =
NGX_ERROR
) {

57  
NGX_ERROR
;

60 i‡(
n
 == 0) {

61 
c
->
ªad
->
≥ndög_eof
 = 1;

62 i‡(
tŸÆ
) {

63 
c
->
ªad
->
eof
 = 0;

64 
c
->
ªad
->
ªady
 = 1;

66  
tŸÆ
;

69 i‡(
n
 > 0) {

70 
tŸÆ
 +
n
;

73 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

74 "aio_ªadÅŸÆ: %d", 
tŸÆ
);

77  
tŸÆ
 ?ÅŸÆ : 
NGX_AGAIN
;

78 
	}
}

	@src/os/unix/ngx_aio_write.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_kqueue
;

16 
ssize_t


17 
	$ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

19 
n
;

20 
ngx_evít_t
 *
wev
;

22 
wev
 = 
c
->
wrôe
;

24 i‡(!
wev
->
ªady
) {

25  
NGX_AGAIN
;

28 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0,

29 "aio: wev->com∂ëe: %d", 
wev
->
com∂ëe
);

31 i‡(!
wev
->
com∂ëe
) {

32 
	`ngx_memzîo
(&
wev
->
aiocb
, (aiocb));

34 
wev
->
aiocb
.
aio_fûdes
 = 
c
->
fd
;

35 
wev
->
aiocb
.
aio_buf
 = 
buf
;

36 
wev
->
aiocb
.
aio_nbyãs
 = 
size
;

38 #i‡(
NGX_HAVE_KQUEUE
)

39 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

40 
wev
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

41 
wev
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = wev;

44 i‡(
	`aio_wrôe
(&
wev
->
aiocb
) == -1) {

45 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
,

47  
NGX_ERROR
;

50 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_write: OK");

52 
wev
->
a˘ive
 = 1;

53 
wev
->
ªady
 = 0;

56 
wev
->
com∂ëe
 = 0;

58 
n
 = 
	`aio_îr‹
(&
wev
->
aiocb
);

59 i‡(
n
 == -1) {

60 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
ngx_î∫o
, "aio_error() failed");

61 
wev
->
îr‹
 = 1;

62  
NGX_ERROR
;

65 i‡(
n
 != 0) {

66 i‡(
n
 =
NGX_EINPROGRESS
) {

67 i‡(
wev
->
ªady
) {

68 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
n
,

70 
wev
->
ªady
 = 0;

72  
NGX_AGAIN
;

75 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_write() failed");

76 
wev
->
îr‹
 = 1;

77 
wev
->
ªady
 = 0;

80 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

81 i‡(
n
 == -1) {

82 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

86 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
wev
->
log
, 
n
, "aio_return() %d",Ç);

89  
NGX_ERROR
;

92 
n
 = 
	`aio_ªtu∫
(&
wev
->
aiocb
);

93 i‡(
n
 == -1) {

94 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
wev
->
log
, 
ngx_î∫o
,

97 
wev
->
îr‹
 = 1;

98 
wev
->
ªady
 = 0;

99  
NGX_ERROR
;

103 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
wev
->
log
, 0, "aio_wrôe: %d", 
n
);

105 
wev
->
a˘ive
 = 0;

106 
wev
->
ªady
 = 1;

108  
n
;

109 
	}
}

	@src/os/unix/ngx_aio_write_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_chaö_t
 *

14 
	$ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

16 
u_ch¨
 *
buf
, *
¥ev
;

17 
off_t
 
£nd
, 
£¡
;

18 
size_t
 
Àn
;

19 
ssize_t
 
n
, 
size
;

20 
ngx_chaö_t
 *
˛
;

24 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

25 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

28 
£nd
 = 0;

29 
£¡
 = 0;

30 
˛
 = 
ö
;

32 
˛
) {

34 i‡(
˛
->
buf
->
pos
 =˛->buf->
œ°
) {

35 
˛
 = cl->
√xt
;

41 i‡(!
c
->
wrôe
->
ªady
) {

42  
˛
;

45 
buf
 = 
˛
->buf->
pos
;

46 
¥ev
 = 
buf
;

47 
Àn
 = 0;

51 
˛
 && 
¥ev
 =˛->
buf
->
pos
 && 
£nd
 < 
limô
) {

52 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

56 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

58 i‡(
£nd
 + 
size
 > 
limô
) {

59 
size
 = 
limô
 - 
£nd
;

62 
Àn
 +
size
;

63 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

64 
£nd
 +
size
;

65 
˛
 = cl->
√xt
;

68 
n
 = 
	`ngx_aio_wrôe
(
c
, 
buf
, 
Àn
);

70 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "aio_wrôe: %z", 
n
);

72 i‡(
n
 =
NGX_ERROR
) {

73  
NGX_CHAIN_ERROR
;

76 i‡(
n
 > 0) {

77 
£¡
 +
n
;

78 
c
->
£¡
 +
n
;

81 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

82 "aio_wrôê£¡: %O", 
c
->
£¡
);

84 
˛
 = 
ö
; cl; c»˛->
√xt
) {

86 i‡(
£¡
 >
˛
->
buf
->
œ°
 - cl->buf->
pos
) {

87 
£¡
 -
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

93 
˛
->
buf
->
pos
 +
£¡
;

99  
˛
;

100 
	}
}

	@src/os/unix/ngx_alloc.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	gngx_∑gesize
;

13 
ngx_uöt_t
 
	gngx_∑gesize_shi·
;

14 
ngx_uöt_t
 
	gngx_ˇchñöe_size
;

18 
	$ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

20 *
p
;

22 
p
 = 
	`mÆloc
(
size
);

23 i‡(
p
 =
NULL
) {

24 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

25 "mÆloc(%uzËÁûed", 
size
);

28 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0, "mÆloc: %p:%uz", 
p
, 
size
);

30  
p
;

31 
	}
}

35 
	$ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
)

37 *
p
;

39 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

41 i‡(
p
) {

42 
	`ngx_memzîo
(
p
, 
size
);

45  
p
;

46 
	}
}

49 #i‡(
NGX_HAVE_POSIX_MEMALIGN
)

52 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

54 *
p
;

55 
îr
;

57 
îr
 = 
	`posix_memÆign
(&
p
, 
Æignmít
, 
size
);

59 i‡(
îr
) {

60 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
îr
,

61 "posix_memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

62 
p
 = 
NULL
;

65 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

66 "posix_memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

68  
p
;

69 
	}
}

71 #ñi‡(
NGX_HAVE_MEMALIGN
)

74 
	$ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
)

76 *
p
;

78 
p
 = 
	`memÆign
(
Æignmít
, 
size
);

79 i‡(
p
 =
NULL
) {

80 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

81 "memÆign(%uz, %uzËÁûed", 
Æignmít
, 
size
);

84 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_ALLOC
, 
log
, 0,

85 "memÆign: %p:%uz @%uz", 
p
, 
size
, 
Æignmít
);

87  
p
;

88 
	}
}

	@src/os/unix/ngx_alloc.h

8 #i‚de‡
_NGX_ALLOC_H_INCLUDED_


9 
	#_NGX_ALLOC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 *
ngx_Æloc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

17 *
ngx_ˇŒoc
(
size_t
 
size
, 
ngx_log_t
 *
log
);

19 
	#ngx_‰ì
 
‰ì


	)

29 #i‡(
NGX_HAVE_POSIX_MEMALIGN
 || 
NGX_HAVE_MEMALIGN
)

31 *
ngx_memÆign
(
size_t
 
Æignmít
, size_à
size
, 
ngx_log_t
 *
log
);

35 
	#ngx_memÆign
(
Æignmít
, 
size
, 
log
Ë
	`ngx_Æloc
(size,Üog)

	)

40 
ngx_uöt_t
 
ngx_∑gesize
;

41 
ngx_uöt_t
 
ngx_∑gesize_shi·
;

42 
ngx_uöt_t
 
ngx_ˇchñöe_size
;

	@src/os/unix/ngx_atomic.h

8 #i‚de‡
_NGX_ATOMIC_H_INCLUDED_


9 
	#_NGX_ATOMIC_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 #i‡(
NGX_HAVE_LIBATOMIC
)

18 
	#AO_REQUIRE_CAS


	)

19 
	~<©omic_›s.h
>

21 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

23 
	tngx_©omic_öt_t
;

24 
AO_t
 
	tngx_©omic_uöt_t
;

25 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

27 #i‡(
NGX_PTR_SIZE
 == 8)

28 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

30 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

33 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

34 
	`AO_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
√w
)

	)

35 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

36 
	`AO_„tch_™d_add
(
vÆue
, 
add
)

	)

37 
	#ngx_mem‹y_b¨rõr
(Ë
	`AO_n›
()

	)

38 
	#ngx_˝u_∑u£
()

	)

41 #ñi‡(
NGX_DARWIN_ATOMIC
)

48 
	~<libkîn/OSAtomic.h
>

52 #unde‡
boﬁ


56 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

58 #i‡(
NGX_PTR_SIZE
 == 8)

60 
öt64_t
 
	tngx_©omic_öt_t
;

61 
uöt64_t
 
	tngx_©omic_uöt_t
;

62 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

64 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

65 
	`OSAtomicCom∑ªAndSw≠64B¨rõr
(
ﬁd
, 
√w
, (
öt64_t
 *Ë
lock
)

	)

67 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

68 (
	`OSAtomicAdd64
(
add
, (
öt64_t
 *Ë
vÆue
Ë-ádd)

	)

72 
öt32_t
 
	tngx_©omic_öt_t
;

73 
uöt32_t
 
	tngx_©omic_uöt_t
;

74 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

76 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
√w
) \

77 
	`OSAtomicCom∑ªAndSw≠32B¨rõr
(
ﬁd
, 
√w
, (
öt32_t
 *Ë
lock
)

	)

79 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

80 (
	`OSAtomicAdd32
(
add
, (
öt32_t
 *Ë
vÆue
Ë-ádd)

	)

84 
	#ngx_mem‹y_b¨rõr
(Ë
	`OSMem‹yB¨rõr
()

	)

86 
	#ngx_˝u_∑u£
()

	)

88 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

91 #ñi‡(
NGX_HAVE_GCC_ATOMIC
)

95 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

97 
	tngx_©omic_öt_t
;

98 
	tngx_©omic_uöt_t
;

100 #i‡(
NGX_PTR_SIZE
 == 8)

101 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

103 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

106 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

109 
	#ngx_©omic_cmp_£t
(
lock
, 
ﬁd
, 
£t
) \

110 
	`__sync_boﬁ_com∑ª_™d_sw≠
(
lock
, 
ﬁd
, 
£t
)

	)

112 
	#ngx_©omic_„tch_add
(
vÆue
, 
add
) \

113 
	`__sync_„tch_™d_add
(
vÆue
, 
add
)

	)

115 
	#ngx_mem‹y_b¨rõr
(Ë
	`__sync_synchr⁄ize
()

	)

117 #i‡–
__i386__
 || 
__i386
 || 
__amd64__
 || 
__amd64
 )

118 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

120 
	#ngx_˝u_∑u£
()

	)

124 #ñi‡–
__i386__
 || 
__i386
 )

126 
öt32_t
 
	tngx_©omic_öt_t
;

127 
uöt32_t
 
	tngx_©omic_uöt_t
;

128 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

129 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

132 #i‡–
__SUNPRO_C
 )

134 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

136 
ngx_©omic_uöt_t


137 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

138 
ngx_©omic_uöt_t
 
£t
);

140 
ngx_©omic_öt_t


141 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

149 
ngx_˝u_∑u£
();

153 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

158 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

160 
	~"ngx_gcc_©omic_x86.h
"

165 #ñi‡–
__amd64__
 || 
__amd64
 )

167 
öt64_t
 
	tngx_©omic_öt_t
;

168 
uöt64_t
 
	tngx_©omic_uöt_t
;

169 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

170 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

173 #i‡–
__SUNPRO_C
 )

175 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

177 
ngx_©omic_uöt_t


178 
ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

179 
ngx_©omic_uöt_t
 
£t
);

181 
ngx_©omic_öt_t


182 
ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
);

190 
ngx_˝u_∑u£
();

194 
	#ngx_mem‹y_b¨rõr
(Ë
	`__asm
 (".vﬁ©ûe"); __asm (".n⁄vﬁ©ûe")

	)

199 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

201 
	~"ngx_gcc_©omic_amd64.h
"

206 #ñi‡–
__•¨c__
 || 
__•¨c
 || 
__•¨cv9
 )

208 #i‡(
NGX_PTR_SIZE
 == 8)

210 
öt64_t
 
	tngx_©omic_öt_t
;

211 
uöt64_t
 
	tngx_©omic_uöt_t
;

212 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

216 
öt32_t
 
	tngx_©omic_öt_t
;

217 
uöt32_t
 
	tngx_©omic_uöt_t
;

218 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

222 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

225 #i‡–
__SUNPRO_C
 )

227 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

229 
	~"ngx_su≈ro_©omic_•¨c64.h
"

234 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

236 
	~"ngx_gcc_©omic_•¨c64.h
"

241 #ñi‡–
__powîpc__
 || 
__POWERPC__
 )

243 
	#NGX_HAVE_ATOMIC_OPS
 1

	)

245 #i‡(
NGX_PTR_SIZE
 == 8)

247 
öt64_t
 
	tngx_©omic_öt_t
;

248 
uöt64_t
 
	tngx_©omic_uöt_t
;

249 
	#NGX_ATOMIC_T_LEN
 (("-9223372036854775808"Ë- 1)

	)

253 
öt32_t
 
	tngx_©omic_öt_t
;

254 
uöt32_t
 
	tngx_©omic_uöt_t
;

255 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

259 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

262 
	~"ngx_gcc_©omic_µc.h
"

267 #i‡!(
NGX_HAVE_ATOMIC_OPS
)

269 
	#NGX_HAVE_ATOMIC_OPS
 0

	)

271 
öt32_t
 
	tngx_©omic_öt_t
;

272 
uöt32_t
 
	tngx_©omic_uöt_t
;

273 vﬁ©ûê
	tngx_©omic_uöt_t
 
	tngx_©omic_t
;

274 
	#NGX_ATOMIC_T_LEN
 (("-2147483648"Ë- 1)

	)

277 
ngx_ölöe
 
ngx_©omic_uöt_t


278 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

279 
ngx_©omic_uöt_t
 
£t
)

281 i‡(*
lock
 =
ﬁd
) {

282 *
lock
 = 
£t
;

287 
	}
}

290 
ngx_ölöe
 
ngx_©omic_öt_t


291 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

293 
ngx_©omic_öt_t
 
ﬁd
;

295 
ﬁd
 = *
vÆue
;

296 *
vÆue
 +
add
;

298  
ﬁd
;

299 
	}
}

301 
	#ngx_mem‹y_b¨rõr
()

	)

302 
	#ngx_˝u_∑u£
()

	)

307 
ngx_•ölock
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_öt_t
 
vÆue
, 
ngx_uöt_t
 
•ö
);

309 
	#ngx_åylock
(
lock
Ë(*÷ockË=0 && 
	`ngx_©omic_cmp_£t
÷ock, 0, 1))

	)

310 
	#ngx_u∆ock
(
lock
Ë*÷ockË0

	)

	@src/os/unix/ngx_channel.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_ch™√l.h
>

13 
ngx_öt_t


14 
	$ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

15 
ngx_log_t
 *
log
)

17 
ssize_t
 
n
;

18 
ngx_îr_t
 
îr
;

19 
iovec
 
iov
[1];

20 
msghdr
 
msg
;

22 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

25 
cmsghdr
 
cm
;

26 
•a˚
[
	`CMSG_SPACE
(())];

27 } 
cmsg
;

29 i‡(
ch
->
fd
 == -1) {

30 
msg
.
msg_c⁄åﬁ
 = 
NULL
;

31 
msg
.
msg_c⁄åﬁÀn
 = 0;

34 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

35 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

37 
cmsg
.
cm
.
cmsg_Àn
 = 
	`CMSG_LEN
(());

38 
cmsg
.
cm
.
cmsg_Àvñ
 = 
SOL_SOCKET
;

39 
cmsg
.
cm
.
cmsg_ty≥
 = 
SCM_RIGHTS
;

51 
	`ngx_mem˝y
(
	`CMSG_DATA
(&
cmsg
.
cm
), &
ch
->
fd
, ());

54 
msg
.
msg_Êags
 = 0;

58 i‡(
ch
->
fd
 == -1) {

59 
msg
.
msg_ac¸ights
 = 
NULL
;

60 
msg
.
msg_ac¸ight¶í
 = 0;

63 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
ch
->
fd
;

64 
msg
.
msg_ac¸ight¶í
 = ();

69 
iov
[0].
iov_ba£
 = (*Ë
ch
;

70 
iov
[0].
iov_Àn
 = 
size
;

72 
msg
.
msg_«me
 = 
NULL
;

73 
msg
.
msg_«mñí
 = 0;

74 
msg
.
msg_iov
 = 
iov
;

75 
msg
.
msg_iovÀn
 = 1;

77 
n
 = 
	`£ndmsg
(
s
, &
msg
, 0);

79 i‡(
n
 == -1) {

80 
îr
 = 
ngx_î∫o
;

81 i‡(
îr
 =
NGX_EAGAIN
) {

82  
NGX_AGAIN
;

85 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "sendmsg() failed");

86  
NGX_ERROR
;

89  
NGX_OK
;

90 
	}
}

93 
ngx_öt_t


94 
	$ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
, 
ngx_log_t
 *
log
)

96 
ssize_t
 
n
;

97 
ngx_îr_t
 
îr
;

98 
iovec
 
iov
[1];

99 
msghdr
 
msg
;

101 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

103 
cmsghdr
 
cm
;

104 
•a˚
[
	`CMSG_SPACE
(())];

105 } 
cmsg
;

107 
fd
;

110 
iov
[0].
iov_ba£
 = (*Ë
ch
;

111 
iov
[0].
iov_Àn
 = 
size
;

113 
msg
.
msg_«me
 = 
NULL
;

114 
msg
.
msg_«mñí
 = 0;

115 
msg
.
msg_iov
 = 
iov
;

116 
msg
.
msg_iovÀn
 = 1;

118 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

119 
msg
.
msg_c⁄åﬁ
 = (
ˇddr_t
Ë&
cmsg
;

120 
msg
.
msg_c⁄åﬁÀn
 = (
cmsg
);

122 
msg
.
msg_ac¸ights
 = (
ˇddr_t
Ë&
fd
;

123 
msg
.
msg_ac¸ight¶í
 = ();

126 
n
 = 
	`ªcvmsg
(
s
, &
msg
, 0);

128 i‡(
n
 == -1) {

129 
îr
 = 
ngx_î∫o
;

130 i‡(
îr
 =
NGX_EAGAIN
) {

131  
NGX_AGAIN
;

134 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "recvmsg() failed");

135  
NGX_ERROR
;

138 i‡(
n
 == 0) {

139 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "recvmsg()Ñeturned zero");

140  
NGX_ERROR
;

143 i‡((
size_t
Ë
n
 < (
ngx_ch™√l_t
)) {

144 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

145 "ªcvmsg(Ëªtu∫edÇŸÉnough d©a: %uz", 
n
);

146  
NGX_ERROR
;

149 #i‡(
NGX_HAVE_MSGHDR_MSG_CONTROL
)

151 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

153 i‡(
cmsg
.
cm
.
cmsg_Àn
 < (
sockÀn_t
Ë
	`CMSG_LEN
(())) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

156  
NGX_ERROR
;

159 i‡(
cmsg
.
cm
.
cmsg_Àvñ
 !
SOL_SOCKET
 || cmsg.cm.
cmsg_ty≥
 !
SCM_RIGHTS
)

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

164 
cmsg
.
cm
.
cmsg_Àvñ
, cmsg.cm.
cmsg_ty≥
);

165  
NGX_ERROR
;

170 
	`ngx_mem˝y
(&
ch
->
fd
, 
	`CMSG_DATA
(&
cmsg
.
cm
), ());

173 i‡(
msg
.
msg_Êags
 & (
MSG_TRUNC
|
MSG_CTRUNC
)) {

174 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

180 i‡(
ch
->
comm™d
 =
NGX_CMD_OPEN_CHANNEL
) {

181 i‡(
msg
.
msg_ac¸ight¶í
 != ()) {

182 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

184  
NGX_ERROR
;

187 
ch
->
fd
 = fd;

192  
n
;

193 
	}
}

196 
ngx_öt_t


197 
	$ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
, 
ngx_öt_t
 
evít
,

198 
ngx_evít_h™dÀr_±
 
h™dÀr
)

200 
ngx_evít_t
 *
ev
, *
ªv
, *
wev
;

201 
ngx_c⁄√˘i⁄_t
 *
c
;

203 
c
 = 
	`ngx_gë_c⁄√˘i⁄
(
fd
, 
cy˛e
->
log
);

205 i‡(
c
 =
NULL
) {

206  
NGX_ERROR
;

209 
c
->
poﬁ
 = 
cy˛e
->pool;

211 
ªv
 = 
c
->
ªad
;

212 
wev
 = 
c
->
wrôe
;

214 
ªv
->
log
 = 
cy˛e
->log;

215 
wev
->
log
 = 
cy˛e
->log;

217 #i‡(
NGX_THREADS
)

218 
ªv
->
lock
 = &
c
->lock;

219 
wev
->
lock
 = &
c
->lock;

220 
ªv
->
own_lock
 = &
c
->
lock
;

221 
wev
->
own_lock
 = &
c
->
lock
;

224 
ªv
->
ch™√l
 = 1;

225 
wev
->
ch™√l
 = 1;

227 
ev
 = (
evít
 =
NGX_READ_EVENT
Ë? 
ªv
 : 
wev
;

229 
ev
->
h™dÀr
 = handler;

231 i‡(
ngx_add_c⁄n
 && (
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) == 0) {

232 i‡(
	`ngx_add_c⁄n
(
c
Ë=
NGX_ERROR
) {

233 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

234  
NGX_ERROR
;

238 i‡(
	`ngx_add_evít
(
ev
, 
evít
, 0Ë=
NGX_ERROR
) {

239 
	`ngx_‰ì_c⁄√˘i⁄
(
c
);

240  
NGX_ERROR
;

244  
NGX_OK
;

245 
	}
}

249 
	$ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
)

251 i‡(
	`˛o£
(
fd
[0]) == -1) {

252 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

255 i‡(
	`˛o£
(
fd
[1]) == -1) {

256 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "close() channel failed");

258 
	}
}

	@src/os/unix/ngx_channel.h

8 #i‚de‡
_NGX_CHANNEL_H_INCLUDED_


9 
	#_NGX_CHANNEL_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

14 
	~<ngx_evít.h
>

18 
ngx_uöt_t
 
	mcomm™d
;

19 
ngx_pid_t
 
	mpid
;

20 
ngx_öt_t
 
	m¶Ÿ
;

21 
ngx_fd_t
 
	mfd
;

22 } 
	tngx_ch™√l_t
;

25 
ngx_öt_t
 
ngx_wrôe_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

26 
ngx_log_t
 *
log
);

27 
ngx_öt_t
 
ngx_ªad_ch™√l
(
ngx_sockë_t
 
s
, 
ngx_ch™√l_t
 *
ch
, 
size_t
 
size
,

28 
ngx_log_t
 *
log
);

29 
ngx_öt_t
 
ngx_add_ch™√l_evít
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_fd_t
 
fd
,

30 
ngx_öt_t
 
evít
, 
ngx_evít_h™dÀr_±
 
h™dÀr
);

31 
ngx_˛o£_ch™√l
(
ngx_fd_t
 *
fd
, 
ngx_log_t
 *
log
);

	@src/os/unix/ngx_daemon.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_öt_t


13 
	$ngx_d´m⁄
(
ngx_log_t
 *
log
)

15 
fd
;

17 
	`f‹k
()) {

19 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "fork() failed");

20  
NGX_ERROR
;

26 
	`exô
(0);

29 
ngx_pid
 = 
	`ngx_gëpid
();

31 i‡(
	`£tsid
() == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "setsid() failed");

33  
NGX_ERROR
;

36 
	`umask
(0);

38 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
);

39 i‡(
fd
 == -1) {

40 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

42  
NGX_ERROR
;

45 i‡(
	`dup2
(
fd
, 
STDIN_FILENO
) == -1) {

46 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDIN) failed");

47  
NGX_ERROR
;

50 i‡(
	`dup2
(
fd
, 
STDOUT_FILENO
) == -1) {

51 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDOUT) failed");

52  
NGX_ERROR
;

56 i‡(
	`dup2
(
fd
, 
STDERR_FILENO
) == -1) {

57 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "dup2(STDERR) failed");

58  
NGX_ERROR
;

62 i‡(
fd
 > 
STDERR_FILENO
) {

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "close() failed");

65  
NGX_ERROR
;

69  
NGX_OK
;

70 
	}
}

	@src/os/unix/ngx_darwin.h

8 #i‚de‡
_NGX_DARWIN_H_INCLUDED_


9 
	#_NGX_DARWIN_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_d¨wö_kîn_o§ñd©e
;

17 
ngx_d¨wö_hw_n˝u
;

18 
u_l⁄g
 
ngx_d¨wö_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_darwin_config.h

8 #i‚de‡
_NGX_DARWIN_CONFIG_H_INCLUDED_


9 
	#_NGX_DARWIN_CONFIG_H_INCLUDED_


	)

12 
	#MAC_OS_X_VERSION_MIN_REQUIRED
 
MAC_OS_X_VERSION_10_0


	)

15 
	~<sys/ty≥s.h
>

16 
	~<sys/time.h
>

17 
	~<uni°d.h
>

18 
	~<öây≥s.h
>

19 
	~<°d¨g.h
>

20 
	~<°ddef.h
>

21 
	~<°dio.h
>

22 
	~<°dlib.h
>

23 
	~<î∫o.h
>

24 
	~<°rög.h
>

25 
	~<sig«l.h
>

26 
	~<pwd.h
>

27 
	~<gΩ.h
>

28 
	~<dúít.h
>

29 
	~<glob.h
>

30 
	~<sys/mou¡.h
>

32 
	~<sys/fûio.h
>

33 
	~<sys/io˘l.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<sys/sys˘l.h
>

51 
	~<xloˇÀ.h
>

54 #i‚de‡
IOV_MAX


55 
	#IOV_MAX
 64

	)

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_POLL
)

68 
	~<pﬁl.h
>

72 #i‡(
NGX_HAVE_KQUEUE
)

73 
	~<sys/evít.h
>

77 
	#NGX_LISTEN_BACKLOG
 -1

	)

80 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


81 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

85 #i‚de‡
NGX_HAVE_CASELESS_FILESYSTEM


86 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

90 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

91 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

94 **
ívú⁄
;

	@src/os/unix/ngx_darwin_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_d¨wö_kîn_o°y≥
[16];

13 
	gngx_d¨wö_kîn_o§ñó£
[128];

14 
	gngx_d¨wö_hw_n˝u
;

15 
	gngx_d¨wö_kîn_ùc_somaxc⁄n
;

16 
u_l⁄g
 
	gngx_d¨wö_√t_öë_t˝_£nd•a˚
;

18 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

21 
ngx_os_io_t
 
	gngx_d¨wö_io
 = {

22 
ngx_unix_ªcv
,

23 
ngx_ªadv_chaö
,

24 
ngx_udp_unix_ªcv
,

25 
ngx_unix_£nd
,

26 #i‡(
NGX_HAVE_SENDFILE
)

27 
ngx_d¨wö_£ndfûe_chaö
,

28 
NGX_IO_SENDFILE


30 
ngx_wrôev_chaö
,

37 *
	m«me
;

38 *
	mvÆue
;

39 
size_t
 
	msize
;

40 
ngx_uöt_t
 
	mexi°s
;

41 } 
	tsys˘l_t
;

44 
sys˘l_t
 
	gsys˘ls
[] = {

46 &
ngx_d¨wö_hw_n˝u
,

47 (
ngx_d¨wö_hw_n˝u
), 0 },

50 &
ngx_d¨wö_√t_öë_t˝_£nd•a˚
,

51 (
ngx_d¨wö_√t_öë_t˝_£nd•a˚
), 0 },

54 &
ngx_d¨wö_kîn_ùc_somaxc⁄n
,

55 (
ngx_d¨wö_kîn_ùc_somaxc⁄n
), 0 },

57 { 
NULL
, NULL, 0, 0 }

62 
	$ngx_debug_öô
()

64 #i‡(
NGX_DEBUG_MALLOC
)

75 
	`£ãnv
("MallocScribble", "1", 0);

77 
ngx_debug_mÆloc
 = 1;

81 i‡(
	`gëív
("MallocScribble")) {

82 
ngx_debug_mÆloc
 = 1;

86 
	}
}

89 
ngx_öt_t


90 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

92 
size_t
 
size
;

93 
ngx_îr_t
 
îr
;

94 
ngx_uöt_t
 
i
;

96 
size
 = (
ngx_d¨wö_kîn_o°y≥
);

97 i‡(
	`sys˘lby«me
("kîn.o°y≥", 
ngx_d¨wö_kîn_o°y≥
, &
size
, 
NULL
, 0)

100 
îr
 = 
ngx_î∫o
;

102 i‡(
îr
 !
NGX_ENOENT
) {

104 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

107 i‡(
îr
 !
NGX_ENOMEM
) {

108  
NGX_ERROR
;

111 
ngx_d¨wö_kîn_o°y≥
[
size
 - 1] = '\0';

115 
size
 = (
ngx_d¨wö_kîn_o§ñó£
);

116 i‡(
	`sys˘lby«me
("kîn.o§ñó£", 
ngx_d¨wö_kîn_o§ñó£
, &
size
,

117 
NULL
, 0)

120 
îr
 = 
ngx_î∫o
;

122 i‡(
îr
 !
NGX_ENOENT
) {

124 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

127 i‡(
îr
 !
NGX_ENOMEM
) {

128  
NGX_ERROR
;

131 
ngx_d¨wö_kîn_o§ñó£
[
size
 - 1] = '\0';

135 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

136 
size
 = 
sys˘ls
[
i
].size;

138 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

141 
sys˘ls
[
i
].
exi°s
 = 1;

145 
îr
 = 
ngx_î∫o
;

147 i‡(
îr
 =
NGX_ENOENT
) {

151 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

152 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

153  
NGX_ERROR
;

156 
ngx_n˝u
 = 
ngx_d¨wö_hw_n˝u
;

158 i‡(
ngx_d¨wö_kîn_ùc_somaxc⁄n
 > 32767) {

159 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

161  
NGX_ERROR
;

164 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

166 
ngx_os_io
 = 
ngx_d¨wö_io
;

168  
NGX_OK
;

169 
	}
}

173 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

175 
u_l⁄g
 
vÆue
;

176 
ngx_uöt_t
 
i
;

178 i‡(
ngx_d¨wö_kîn_o°y≥
[0]) {

179 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

180 
ngx_d¨wö_kîn_o°y≥
, 
ngx_d¨wö_kîn_o§ñó£
);

183 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

184 i‡(
sys˘ls
[
i
].
exi°s
) {

185 i‡(
sys˘ls
[
i
].
size
 == ()) {

186 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

189 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

192 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

193 
sys˘ls
[
i
].
«me
, 
vÆue
);

196 
	}
}

	@src/os/unix/ngx_darwin_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

32 
	#NGX_TRAILERS
 64

	)

34 
	#NGX_HEADERS
 
IOV_MAX


	)

35 
	#NGX_TRAILERS
 
IOV_MAX


	)

39 
ngx_chaö_t
 *

40 
	$ngx_d¨wö_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

42 
rc
;

43 
u_ch¨
 *
¥ev
;

44 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

45 
off_t
 
hódî_size
, 
fûe_size
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_îr_t
 
îr
;

48 
ngx_buf_t
 *
fûe
;

49 
ngx_¨øy_t
 
hódî
, 
åaûî
;

50 
ngx_evít_t
 *
wev
;

51 
ngx_chaö_t
 *
˛
;

52 
sf_hdå
 
hdå
;

53 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

55 
wev
 = 
c
->
wrôe
;

57 i‡(!
wev
->
ªady
) {

58  
ö
;

61 #i‡(
NGX_HAVE_KQUEUE
)

63 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

64 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

66 
wev
->
îr‹
 = 1;

67  
NGX_CHAIN_ERROR
;

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

78 
£nd
 = 0;

80 
hódî
.
ñts
 = 
hódîs
;

81 
hódî
.
size
 = (
iovec
);

82 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

83 
hódî
.
poﬁ
 = 
c
->pool;

85 
åaûî
.
ñts
 = 
åaûîs
;

86 
åaûî
.
size
 = (
iovec
);

87 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

88 
åaûî
.
poﬁ
 = 
c
->pool;

91 
fûe
 = 
NULL
;

92 
fûe_size
 = 0;

93 
hódî_size
 = 0;

94 
eöå
 = 0;

95 
com∂ëe
 = 0;

96 
¥ev_£nd
 = 
£nd
;

98 
hódî
.
√…s
 = 0;

99 
åaûî
.
√…s
 = 0;

103 
¥ev
 = 
NULL
;

104 
iov
 = 
NULL
;

106 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

108 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

112 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

116 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

118 i‡(
£nd
 + 
size
 > 
limô
) {

119 
size
 = 
limô
 - 
£nd
;

122 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

123 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

126 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

130 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

131 i‡(
iov
 =
NULL
) {

132  
NGX_CHAIN_ERROR
;

135 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

136 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

139 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

140 
hódî_size
 +
size
;

141 
£nd
 +
size
;

145 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

146 
fûe
 = 
˛
->
buf
;

151 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

153 i‡(
£nd
 + 
size
 > 
limô
) {

154 
size
 = 
limô
 - 
£nd
;

156 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

157 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

159 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

160 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

164 
fûe_size
 +
size
;

165 
£nd
 +
size
;

166 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

167 
˛
 = cl->
√xt
;

169 } 
˛


170 && 
˛
->
buf
->
ö_fûe


171 && 
£nd
 < 
limô


172 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

173 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

176 i‡(
fûe
 && 
hódî
.
√…s
 == 0) {

180 
¥ev
 = 
NULL
;

181 
iov
 = 
NULL
;

183 
˛
 && 
£nd
 < 
limô
) {

185 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

186 
˛
 = cl->
√xt
;

190 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

194 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

196 i‡(
£nd
 + 
size
 > 
limô
) {

197 
size
 = 
limô
 - 
£nd
;

200 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

201 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

204 i‡(
åaûî
.
√…s
 >
IOV_MAX
) {

208 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

209 i‡(
iov
 =
NULL
) {

210  
NGX_CHAIN_ERROR
;

213 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

214 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

217 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

218 
£nd
 +
size
;

219 
˛
 = cl->
√xt
;

223 i‡(
fûe
) {

230 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

231 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

232 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

233 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

235 
£¡
 = 
hódî_size
 + 
fûe_size
;

237 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

239 
fûe
->
fûe_pos
, 
£¡
, 
hódî_size
);

241 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

242 &
£¡
, &
hdå
, 0);

244 i‡(
rc
 == -1) {

245 
îr
 = 
ngx_î∫o
;

247 
îr
) {

248 
NGX_EAGAIN
:

251 
NGX_EINTR
:

252 
eöå
 = 1;

256 
wev
->
îr‹
 = 1;

257 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

258  
NGX_CHAIN_ERROR
;

261 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

262 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

265 i‡(
rc
 =0 && 
£¡
 == 0) {

273 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

275 
fûe
->fûe->
«me
.
d©a
);

277  
NGX_CHAIN_ERROR
;

280 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

282 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

285 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

287 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

288 "wrôev: %d o‡%uz", 
rc
, 
£nd
);

290 i‡(
rc
 == -1) {

291 
îr
 = 
ngx_î∫o
;

293 
îr
) {

294 
NGX_EAGAIN
:

297 
NGX_EINTR
:

298 
eöå
 = 1;

302 
wev
->
îr‹
 = 1;

303 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

304  
NGX_CHAIN_ERROR
;

307 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

311 
£¡
 = 
rc
 > 0 ?Ñc : 0;

314 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

315 
com∂ëe
 = 1;

318 
c
->
£¡
 += sent;

320 
˛
 = 
ö
; cl; c»˛->
√xt
) {

322 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

326 i‡(
£¡
 == 0) {

330 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

332 i‡(
£¡
 >
size
) {

333 
£¡
 -
size
;

335 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

336 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

339 i‡(
˛
->
buf
->
ö_fûe
) {

340 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

346 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

347 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

350 i‡(
˛
->
buf
->
ö_fûe
) {

351 
˛
->
buf
->
fûe_pos
 +
£¡
;

357 i‡(
eöå
) {

361 i‡(!
com∂ëe
) {

362 
wev
->
ªady
 = 0;

363  
˛
;

366 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

367  
˛
;

370 
ö
 = 
˛
;

372 
	}
}

	@src/os/unix/ngx_errno.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

28 
ngx_°r_t
 *
	gngx_sys_îæi°
;

29 
ngx_°r_t
 
	gngx_unknown_îr‹
 = 
ngx_°rög
("UnknownÉrror");

32 
u_ch¨
 *

33 
	$ngx_°ªº‹
(
ngx_îr_t
 
îr
, 
u_ch¨
 *
îr°r
, 
size_t
 
size
)

35 
ngx_°r_t
 *
msg
;

37 
msg
 = ((
ngx_uöt_t
Ë
îr
 < 
NGX_SYS_NERR
Ë? &
ngx_sys_îæi°
[err]:

38 &
ngx_unknown_îr‹
;

39 
size
 = 
	`ngx_mö
(size, 
msg
->
Àn
);

41  
	`ngx_˝ymem
(
îr°r
, 
msg
->
d©a
, 
size
);

42 
	}
}

45 
ngx_öt_t


46 
	$ngx_°ªº‹_öô
()

48 *
msg
;

49 
u_ch¨
 *
p
;

50 
size_t
 
Àn
;

51 
ngx_îr_t
 
îr
;

58 
Àn
 = 
NGX_SYS_NERR
 * (
ngx_°r_t
);

60 
ngx_sys_îæi°
 = 
	`mÆloc
(
Àn
);

61 i‡(
ngx_sys_îæi°
 =
NULL
) {

62 
Áûed
;

65 
îr
 = 0;Éº < 
NGX_SYS_NERR
;Érr++) {

66 
msg
 = 
	`°ªº‹
(
îr
);

67 
Àn
 = 
	`ngx_°æí
(
msg
);

69 
p
 = 
	`mÆloc
(
Àn
);

70 i‡(
p
 =
NULL
) {

71 
Áûed
;

74 
	`ngx_mem˝y
(
p
, 
msg
, 
Àn
);

75 
ngx_sys_îæi°
[
îr
].
Àn
 =Üen;

76 
ngx_sys_îæi°
[
îr
].
d©a
 = 
p
;

79  
NGX_OK
;

81 
Áûed
:

83 
îr
 = 
î∫o
;

84 
	`ngx_log_°dîr
(0, "mÆloc(%uzËÁûed (%d: %s)", 
Àn
, 
îr
, 
	`°ªº‹
(err));

86  
NGX_ERROR
;

87 
	}
}

	@src/os/unix/ngx_errno.h

8 #i‚de‡
_NGX_ERRNO_H_INCLUDED_


9 
	#_NGX_ERRNO_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_îr_t
;

18 
	#NGX_EPERM
 
EPERM


	)

19 
	#NGX_ENOENT
 
ENOENT


	)

20 
	#NGX_ENOPATH
 
ENOENT


	)

21 
	#NGX_ESRCH
 
ESRCH


	)

22 
	#NGX_EINTR
 
EINTR


	)

23 
	#NGX_ECHILD
 
ECHILD


	)

24 
	#NGX_ENOMEM
 
ENOMEM


	)

25 
	#NGX_EACCES
 
EACCES


	)

26 
	#NGX_EBUSY
 
EBUSY


	)

27 
	#NGX_EEXIST
 
EEXIST


	)

28 
	#NGX_EXDEV
 
EXDEV


	)

29 
	#NGX_ENOTDIR
 
ENOTDIR


	)

30 
	#NGX_EISDIR
 
EISDIR


	)

31 
	#NGX_EINVAL
 
EINVAL


	)

32 
	#NGX_ENFILE
 
ENFILE


	)

33 
	#NGX_EMFILE
 
EMFILE


	)

34 
	#NGX_ENOSPC
 
ENOSPC


	)

35 
	#NGX_EPIPE
 
EPIPE


	)

36 
	#NGX_EINPROGRESS
 
EINPROGRESS


	)

37 
	#NGX_EADDRINUSE
 
EADDRINUSE


	)

38 
	#NGX_ECONNABORTED
 
ECONNABORTED


	)

39 
	#NGX_ECONNRESET
 
ECONNRESET


	)

40 
	#NGX_ENOTCONN
 
ENOTCONN


	)

41 
	#NGX_ETIMEDOUT
 
ETIMEDOUT


	)

42 
	#NGX_ECONNREFUSED
 
ECONNREFUSED


	)

43 
	#NGX_ENAMETOOLONG
 
ENAMETOOLONG


	)

44 
	#NGX_ENETDOWN
 
ENETDOWN


	)

45 
	#NGX_ENETUNREACH
 
ENETUNREACH


	)

46 
	#NGX_EHOSTDOWN
 
EHOSTDOWN


	)

47 
	#NGX_EHOSTUNREACH
 
EHOSTUNREACH


	)

48 
	#NGX_ENOSYS
 
ENOSYS


	)

49 
	#NGX_ECANCELED
 
ECANCELED


	)

50 
	#NGX_EILSEQ
 
EILSEQ


	)

51 
	#NGX_ENOMOREFILES
 0

	)

53 #i‡(
NGX_HAVE_OPENAT
)

54 
	#NGX_EMLINK
 
EMLINK


	)

55 
	#NGX_ELOOP
 
ELOOP


	)

58 #i‡(
__hpux__
)

59 
	#NGX_EAGAIN
 
EWOULDBLOCK


	)

61 
	#NGX_EAGAIN
 
EAGAIN


	)

65 
	#ngx_î∫o
 
î∫o


	)

66 
	#ngx_sockë_î∫o
 
î∫o


	)

67 
	#ngx_£t_î∫o
(
îr
Ë
î∫o
 = 
	)
err

68 
	#ngx_£t_sockë_î∫o
(
îr
Ë
î∫o
 = 
	)
err

71 
u_ch¨
 *
ngx_°ªº‹
(
ngx_îr_t
 
îr
, u_ch¨ *
îr°r
, 
size_t
 
size
);

72 
ngx_öt_t
 
ngx_°ªº‹_öô
();

	@src/os/unix/ngx_file_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

31 
ngx_kqueue
;

34 
ssize_t
 
ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
,

35 
ngx_evít_t
 *
ev
);

36 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

39 
ssize_t


40 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

41 
ngx_poﬁ_t
 *
poﬁ
)

43 
n
;

44 
ngx_evít_t
 *
ev
;

45 
ngx_evít_aio_t
 *
aio
;

47 i‡(!
ngx_fûe_aio
) {

48  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

51 
aio
 = 
fûe
->aio;

53 i‡(
aio
 =
NULL
) {

54 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

55 i‡(
aio
 =
NULL
) {

56  
NGX_ERROR
;

59 
aio
->
fûe
 = file;

60 
aio
->
fd
 = 
fûe
->fd;

61 
aio
->
evít
.
d©a
 =áio;

62 
aio
->
evít
.
ªady
 = 1;

63 
aio
->
evít
.
log
 = 
fûe
->log;

64 #i‡(
NGX_HAVE_AIO_SENDFILE
)

65 
aio
->
œ°_off£t
 = -1;

67 
fûe
->
aio
 =áio;

70 
ev
 = &
aio
->
evít
;

72 i‡(!
ev
->
ªady
) {

73 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

74 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

75  
NGX_AGAIN
;

78 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

80 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

82 i‡(
ev
->
com∂ëe
) {

83 
ev
->
com∂ëe
 = 0;

84 
	`ngx_£t_î∫o
(
aio
->
îr
);

86 i‡(
aio
->
îr
 == 0) {

87  
aio
->
nbyãs
;

90 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

91 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

93  
NGX_ERROR
;

96 
	`ngx_memzîo
(&
aio
->
aiocb
, (aiocb));

98 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

99 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

100 
aio
->
aiocb
.
aio_buf
 = 
buf
;

101 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

102 #i‡(
NGX_HAVE_KQUEUE
)

103 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify_kqueue
 = 
ngx_kqueue
;

104 
aio
->
aiocb
.
aio_sigevít
.
sigev_nŸify
 = 
SIGEV_KEVENT
;

105 
aio
->
aiocb
.
aio_sigevít
.
sigev_vÆue
.
sigvÆ_±r
 = 
ev
;

107 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

109 
n
 = 
	`aio_ªad
(&
aio
->
aiocb
);

111 i‡(
n
 == -1) {

112 
n
 = 
ngx_î∫o
;

114 i‡(
n
 =
NGX_EAGAIN
) {

115  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

118 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
n
,

119 "aio_ªad(\"%V\"ËÁûed", &
fûe
->
«me
);

121 i‡(
n
 =
NGX_ENOSYS
) {

122 
ngx_fûe_aio
 = 0;

123  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

126  
NGX_ERROR
;

129 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

130 "aio_ªad: fd:%d %d", 
fûe
->
fd
, 
n
);

132 
ev
->
a˘ive
 = 1;

133 
ev
->
ªady
 = 0;

134 
ev
->
com∂ëe
 = 0;

136  
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
);

137 
	}
}

140 
ssize_t


141 
	$ngx_fûe_aio_ªsu…
(
ngx_fûe_t
 *
fûe
, 
ngx_evít_aio_t
 *
aio
, 
ngx_evít_t
 *
ev
)

143 
n
;

144 
ngx_îr_t
 
îr
;

146 
n
 = 
	`aio_îr‹
(&
aio
->
aiocb
);

148 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

149 "aio_îr‹: fd:%d %d", 
fûe
->
fd
, 
n
);

151 i‡(
n
 == -1) {

152 
îr
 = 
ngx_î∫o
;

153 
aio
->
îr
 =Érr;

155 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
îr
,

156 "aio_îr‹(\"%V\"ËÁûed", &
fûe
->
«me
);

157  
NGX_ERROR
;

160 i‡(
n
 =
NGX_EINPROGRESS
) {

161 i‡(
ev
->
ªady
) {

162 
ev
->
ªady
 = 0;

163 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 
n
,

165 &
fûe
->
«me
);

168  
NGX_AGAIN
;

171 
n
 = 
	`aio_ªtu∫
(&
aio
->
aiocb
);

173 i‡(
n
 == -1) {

174 
îr
 = 
ngx_î∫o
;

175 
aio
->
îr
 =Érr;

176 
ev
->
ªady
 = 1;

178 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

179 "aio_ªtu∫(\"%V\"ËÁûed", &
fûe
->
«me
);

180  
NGX_ERROR
;

183 
aio
->
îr
 = 0;

184 
aio
->
nbyãs
 = 
n
;

185 
ev
->
ªady
 = 1;

186 
ev
->
a˘ive
 = 0;

188 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

189 "aio_ªtu∫: fd:%d %d", 
fûe
->
fd
, 
n
);

191  
n
;

192 
	}
}

196 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

198 
ngx_evít_aio_t
 *
aio
;

200 
aio
 = 
ev
->
d©a
;

202 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

203 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

205 i‡(
	`ngx_fûe_aio_ªsu…
(
aio
->
fûe
,áio, 
ev
Ë!
NGX_AGAIN
) {

206 
aio
->
	`h™dÀr
(
ev
);

208 
	}
}

	@src/os/unix/ngx_files.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_FILE_AIO
)

14 
ngx_uöt_t
 
	gngx_fûe_aio
 = 1;

19 
ssize_t


20 
	$ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

22 
ssize_t
 
n
;

24 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

25 "ªad: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

27 #i‡(
NGX_HAVE_PREAD
)

29 
n
 = 
	`¥ód
(
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

31 i‡(
n
 == -1) {

32 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

33 "¥ód(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

34  
NGX_ERROR
;

39 i‡(
fûe
->
sys_off£t
 !
off£t
) {

40 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

41 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

42 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

43  
NGX_ERROR
;

46 
fûe
->
sys_off£t
 = 
off£t
;

49 
n
 = 
	`ªad
(
fûe
->
fd
, 
buf
, 
size
);

51 i‡(
n
 == -1) {

52 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

53 "ªad(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

54  
NGX_ERROR
;

57 
fûe
->
sys_off£t
 +
n
;

61 
fûe
->
off£t
 +
n
;

63  
n
;

64 
	}
}

67 
ssize_t


68 
	$ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
)

70 
ssize_t
 
n
, 
wrôãn
;

72 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

73 "wrôe: %d, %p, %uz, %O", 
fûe
->
fd
, 
buf
, 
size
, 
off£t
);

75 
wrôãn
 = 0;

77 #i‡(
NGX_HAVE_PWRITE
)

80 
n
 = 
	`pwrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
, 
off£t
);

82 i‡(
n
 == -1) {

83 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

84 "pwrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

85  
NGX_ERROR
;

88 
fûe
->
off£t
 +
n
;

89 
wrôãn
 +
n
;

91 i‡((
size_t
Ë
n
 =
size
) {

92  
wrôãn
;

95 
off£t
 +
n
;

96 
size
 -
n
;

101 i‡(
fûe
->
sys_off£t
 !
off£t
) {

102 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

103 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

104 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

105  
NGX_ERROR
;

108 
fûe
->
sys_off£t
 = 
off£t
;

112 
n
 = 
	`wrôe
(
fûe
->
fd
, 
buf
 + 
wrôãn
, 
size
);

114 i‡(
n
 == -1) {

115 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

116 "wrôe(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

117  
NGX_ERROR
;

120 
fûe
->
off£t
 +
n
;

121 
wrôãn
 +
n
;

123 i‡((
size_t
Ë
n
 =
size
) {

124  
wrôãn
;

127 
size
 -
n
;

130 
	}
}

133 
ngx_fd_t


134 
	$ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,Çgx_uöt_à
ac˚ss
)

136 
ngx_fd_t
 
fd
;

138 
fd
 = 
	`›í
((c⁄° *Ë
«me
, 
O_CREAT
|
O_EXCL
|
O_RDWR
,

139 
ac˚ss
 ?áccess : 0600);

141 i‡(
fd
 !-1 && !
≥rsi°ít
) {

142 (Ë
	`u∆ök
((c⁄° *Ë
«me
);

145  
fd
;

146 
	}
}

149 
	#NGX_IOVS
 8

	)

151 
ssize_t


152 
	$ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˛
, 
off_t
 
off£t
,

153 
ngx_poﬁ_t
 *
poﬁ
)

155 
u_ch¨
 *
¥ev
;

156 
size_t
 
size
;

157 
ssize_t
 
tŸÆ
, 
n
;

158 
ngx_¨øy_t
 
vec
;

159 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

163 i‡(
˛
->
√xt
 =
NULL
) {

164  
	`ngx_wrôe_fûe
(
fûe
, 
˛
->
buf
->
pos
,

165 (
size_t
Ë(
˛
->
buf
->
œ°
 - cl->buf->
pos
),

166 
off£t
);

169 
tŸÆ
 = 0;

171 
vec
.
ñts
 = 
iovs
;

172 
vec
.
size
 = (
iovec
);

173 
vec
.
«Œoc
 = 
NGX_IOVS
;

174 
vec
.
poﬁ
 =Öool;

177 
¥ev
 = 
NULL
;

178 
iov
 = 
NULL
;

179 
size
 = 0;

181 
vec
.
√…s
 = 0;

185 
˛
 && 
vec
.
√…s
 < 
IOV_MAX
) {

186 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

187 
iov
->
iov_Àn
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

190 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

191 i‡(
iov
 =
NULL
) {

192  
NGX_ERROR
;

195 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

196 
iov
->
iov_Àn
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

199 
size
 +
˛
->
buf
->
œ°
 - cl->buf->
pos
;

200 
¥ev
 = 
˛
->
buf
->
œ°
;

201 
˛
 = cl->
√xt
;

206 i‡(
vec
.
√…s
 == 1) {

207 
iov
 = 
vec
.
ñts
;

209 
n
 = 
	`ngx_wrôe_fûe
(
fûe
, (
u_ch¨
 *Ë
iov
[0].
iov_ba£
,

210 
iov
[0].
iov_Àn
, 
off£t
);

212 i‡(
n
 =
NGX_ERROR
) {

213  
n
;

216  
tŸÆ
 + 
n
;

219 i‡(
fûe
->
sys_off£t
 !
off£t
) {

220 i‡(
	`l£ek
(
fûe
->
fd
, 
off£t
, 
SEEK_SET
) == -1) {

221 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

222 "l£ek(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

223  
NGX_ERROR
;

226 
fûe
->
sys_off£t
 = 
off£t
;

229 
n
 = 
	`wrôev
(
fûe
->
fd
, 
vec
.
ñts
, vec.
√…s
);

231 i‡(
n
 == -1) {

232 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

233 "wrôev(Ë\"%s\" faûed", 
fûe
->
«me
.
d©a
);

234  
NGX_ERROR
;

237 i‡((
size_t
Ë
n
 !
size
) {

238 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 0,

240 
fûe
->
«me
.
d©a
, 
n
, 
size
);

241  
NGX_ERROR
;

244 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

245 "wrôev: %d, %z", 
fûe
->
fd
, 
n
);

247 
fûe
->
sys_off£t
 +
n
;

248 
fûe
->
off£t
 +
n
;

249 
off£t
 +
n
;

250 
tŸÆ
 +
n
;

252 } 
˛
);

254  
tŸÆ
;

255 
	}
}

258 
ngx_öt_t


259 
	$ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
)

261 
timevÆ
 
tv
[2];

263 
tv
[0].
tv_£c
 = 
	`ngx_time
();

264 
tv
[0].
tv_u£c
 = 0;

265 
tv
[1].
tv_£c
 = 
s
;

266 
tv
[1].
tv_u£c
 = 0;

268 i‡(
	`utimes
((*Ë
«me
, 
tv
) != -1) {

269  
NGX_OK
;

272  
NGX_ERROR
;

273 
	}
}

276 
ngx_öt_t


277 
	$ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

279 
fm
->
fd
 = 
	`ngx_›í_fûe
(fm->
«me
, 
NGX_FILE_RDWR
, 
NGX_FILE_TRUNCATE
,

280 
NGX_FILE_DEFAULT_ACCESS
);

281 i‡(
fm
->
fd
 =
NGX_INVALID_FILE
) {

282 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

283 
ngx_›í_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

284  
NGX_ERROR
;

287 i‡(
	`·runˇã
(
fm
->
fd
, fm->
size
) == -1) {

288 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

289 "·runˇã(Ë\"%s\" faûed", 
fm
->
«me
);

290 
Áûed
;

293 
fm
->
addr
 = 
	`mm≠
(
NULL
, fm->
size
, 
PROT_READ
|
PROT_WRITE
, 
MAP_SHARED
,

294 
fm
->
fd
, 0);

295 i‡(
fm
->
addr
 !
MAP_FAILED
) {

296  
NGX_OK
;

299 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

300 "mm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

302 
Áûed
:

304 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

305 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

306 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

309  
NGX_ERROR
;

310 
	}
}

314 
	$ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
)

316 i‡(
	`munm≠
(
fm
->
addr
, fm->
size
) == -1) {

317 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fm
->
log
, 
ngx_î∫o
,

318 "munm≠(%uzË\"%s\" faûed", 
fm
->
size
, fm->
«me
);

321 i‡(
	`ngx_˛o£_fûe
(
fm
->
fd
Ë=
NGX_FILE_ERROR
) {

322 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fm
->
log
, 
ngx_î∫o
,

323 
ngx_˛o£_fûe_n
 " \"%s\" faûed", 
fm
->
«me
);

325 
	}
}

328 
ngx_öt_t


329 
	$ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
)

331 
dú
->dú = 
	`›ídú
((c⁄° *Ë
«me
->
d©a
);

333 i‡(
dú
->dú =
NULL
) {

334  
NGX_ERROR
;

337 
dú
->
vÆid_öfo
 = 0;

339  
NGX_OK
;

340 
	}
}

343 
ngx_öt_t


344 
	$ngx_ªad_dú
(
ngx_dú_t
 *
dú
)

346 
dú
->
de
 = 
	`ªaddú
(dir->dir);

348 i‡(
dú
->
de
) {

349 #i‡(
NGX_HAVE_D_TYPE
)

350 
dú
->
ty≥
 = dú->
de
->
d_ty≥
;

352 
dú
->
ty≥
 = 0;

354  
NGX_OK
;

357  
NGX_ERROR
;

358 
	}
}

361 
ngx_öt_t


362 
	$ngx_›í_glob
(
ngx_glob_t
 *
gl
)

364 
n
;

366 
n
 = 
	`glob
((*Ë
gl
->
∑âîn
, 0, 
NULL
, &gl->
pglob
);

368 i‡(
n
 == 0) {

369  
NGX_OK
;

372 #ifde‡
GLOB_NOMATCH


374 i‡(
n
 =
GLOB_NOMATCH
 && 
gl
->
ã°
) {

375  
NGX_OK
;

380  
NGX_ERROR
;

381 
	}
}

384 
ngx_öt_t


385 
	$ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
)

387 
size_t
 
cou¡
;

389 #ifde‡
GLOB_NOMATCH


390 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_∑thc
;

392 
cou¡
 = (
size_t
Ë
gl
->
pglob
.
gl_m©chc
;

395 i‡(
gl
->
n
 < 
cou¡
) {

397 
«me
->
Àn
 = (
size_t
Ë
	`ngx_°æí
(
gl
->
pglob
.
gl_∑thv
[gl->
n
]);

398 
«me
->
d©a
 = (
u_ch¨
 *Ë
gl
->
pglob
.
gl_∑thv
[gl->
n
];

399 
gl
->
n
++;

401  
NGX_OK
;

404  
NGX_DONE
;

405 
	}
}

409 
	$ngx_˛o£_glob
(
ngx_glob_t
 *
gl
)

411 
	`glob‰ì
(&
gl
->
pglob
);

412 
	}
}

415 
ngx_îr_t


416 
	$ngx_åylock_fd
(
ngx_fd_t
 
fd
)

418 
Êock
 
Ê
;

420 
	`ngx_memzîo
(&
Ê
, (
Êock
));

421 
Ê
.
l_ty≥
 = 
F_WRLCK
;

422 
Ê
.
l_whí˚
 = 
SEEK_SET
;

424 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

425  
ngx_î∫o
;

429 
	}
}

432 
ngx_îr_t


433 
	$ngx_lock_fd
(
ngx_fd_t
 
fd
)

435 
Êock
 
Ê
;

437 
	`ngx_memzîo
(&
Ê
, (
Êock
));

438 
Ê
.
l_ty≥
 = 
F_WRLCK
;

439 
Ê
.
l_whí˚
 = 
SEEK_SET
;

441 i‡(
	`f˙é
(
fd
, 
F_SETLKW
, &
Ê
) == -1) {

442  
ngx_î∫o
;

446 
	}
}

449 
ngx_îr_t


450 
	$ngx_u∆ock_fd
(
ngx_fd_t
 
fd
)

452 
Êock
 
Ê
;

454 
	`ngx_memzîo
(&
Ê
, (
Êock
));

455 
Ê
.
l_ty≥
 = 
F_UNLCK
;

456 
Ê
.
l_whí˚
 = 
SEEK_SET
;

458 i‡(
	`f˙é
(
fd
, 
F_SETLK
, &
Ê
) == -1) {

459  
ngx_î∫o
;

463 
	}
}

466 #i‡(
NGX_HAVE_POSIX_FADVISE
Ë&& !(
NGX_HAVE_F_READAHEAD
)

468 
ngx_öt_t


469 
	$ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
)

471 
îr
;

473 
îr
 = 
	`posix_Ádvi£
(
fd
, 0, 0, 
POSIX_FADV_SEQUENTIAL
);

475 i‡(
îr
 == 0) {

479 
	`ngx_£t_î∫o
(
îr
);

480  
NGX_FILE_ERROR
;

481 
	}
}

486 #i‡(
NGX_HAVE_O_DIRECT
)

488 
ngx_öt_t


489 
	$ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
)

491 
Êags
;

493 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

495 i‡(
Êags
 == -1) {

496  
NGX_FILE_ERROR
;

499  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 | 
O_DIRECT
);

500 
	}
}

503 
ngx_öt_t


504 
	$ngx_dúe˘io_off
(
ngx_fd_t
 
fd
)

506 
Êags
;

508 
Êags
 = 
	`f˙é
(
fd
, 
F_GETFL
);

510 i‡(
Êags
 == -1) {

511  
NGX_FILE_ERROR
;

514  
	`f˙é
(
fd
, 
F_SETFL
, 
Êags
 & ~
O_DIRECT
);

515 
	}
}

520 #i‡(
NGX_HAVE_STATFS
)

522 
size_t


523 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

525 
°©fs
 
fs
;

527 i‡(
	`°©fs
((*Ë
«me
, &
fs
) == -1) {

531 i‡((
fs
.
f_bsize
 % 512) != 0) {

535  (
size_t
Ë
fs
.
f_bsize
;

536 
	}
}

538 #ñi‡(
NGX_HAVE_STATVFS
)

540 
size_t


541 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

543 
°©vfs
 
fs
;

545 i‡(
	`°©vfs
((*Ë
«me
, &
fs
) == -1) {

549 i‡((
fs
.
f_‰size
 % 512) != 0) {

553  (
size_t
Ë
fs
.
f_‰size
;

554 
	}
}

558 
size_t


559 
	$ngx_fs_bsize
(
u_ch¨
 *
«me
)

562 
	}
}

	@src/os/unix/ngx_files.h

8 #i‚de‡
_NGX_FILES_H_INCLUDED_


9 
	#_NGX_FILES_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	tngx_fd_t
;

17 
°©
 
	tngx_fûe_öfo_t
;

18 
öo_t
 
	tngx_fûe_uniq_t
;

22 
u_ch¨
 *
	m«me
;

23 
size_t
 
	msize
;

24 *
	maddr
;

25 
ngx_fd_t
 
	mfd
;

26 
ngx_log_t
 *
	mlog
;

27 } 
	tngx_fûe_m≠pög_t
;

31 
DIR
 *
	mdú
;

32 
dúít
 *
	mde
;

33 
°©
 
	möfo
;

35 
	mty≥
:8;

36 
	mvÆid_öfo
:1;

37 } 
	tngx_dú_t
;

41 
size_t
 
	mn
;

42 
glob_t
 
	mpglob
;

43 
u_ch¨
 *
	m∑âîn
;

44 
ngx_log_t
 *
	mlog
;

45 
ngx_uöt_t
 
	mã°
;

46 } 
	tngx_glob_t
;

49 
	#NGX_INVALID_FILE
 -1

	)

50 
	#NGX_FILE_ERROR
 -1

	)

54 #ifde‡
__CYGWIN__


56 
	#NGX_HAVE_CASELESS_FILESYSTEM
 1

	)

58 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

59 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
|
O_BINARY
, 
ac˚ss
)

	)

63 
	#ngx_›í_fûe
(
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

64 
	`›í
((c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

68 
	#ngx_›í_fûe_n
 "›í()"

	)

70 
	#NGX_FILE_RDONLY
 
O_RDONLY


	)

71 
	#NGX_FILE_WRONLY
 
O_WRONLY


	)

72 
	#NGX_FILE_RDWR
 
O_RDWR


	)

73 
	#NGX_FILE_CREATE_OR_OPEN
 
O_CREAT


	)

74 
	#NGX_FILE_OPEN
 0

	)

75 
	#NGX_FILE_TRUNCATE
 
O_CREAT
|
O_TRUNC


	)

76 
	#NGX_FILE_APPEND
 
O_WRONLY
|
O_APPEND


	)

77 
	#NGX_FILE_NONBLOCK
 
O_NONBLOCK


	)

79 #i‡(
NGX_HAVE_OPENAT
)

80 
	#NGX_FILE_NOFOLLOW
 
O_NOFOLLOW


	)

82 #i‡
deföed
(
O_DIRECTORY
)

83 
	#NGX_FILE_DIRECTORY
 
O_DIRECTORY


	)

85 
	#NGX_FILE_DIRECTORY
 0

	)

88 #i‡
deföed
(
O_SEARCH
)

89 
	#NGX_FILE_SEARCH
 
O_SEARCH
|
NGX_FILE_DIRECTORY


	)

91 #ñi‡
deföed
(
O_EXEC
)

92 
	#NGX_FILE_SEARCH
 
O_EXEC
|
NGX_FILE_DIRECTORY


	)

95 
	#NGX_FILE_SEARCH
 
O_RDONLY
|
NGX_FILE_DIRECTORY


	)

100 
	#NGX_FILE_DEFAULT_ACCESS
 0644

	)

101 
	#NGX_FILE_OWNER_ACCESS
 0600

	)

104 
	#ngx_˛o£_fûe
 
˛o£


	)

105 
	#ngx_˛o£_fûe_n
 "˛o£()"

	)

108 
	#ngx_dñëe_fûe
(
«me
Ë
	`u∆ök
((c⁄° *Ë«me)

	)

109 
	#ngx_dñëe_fûe_n
 "u∆ök()"

	)

112 
ngx_fd_t
 
ngx_›í_ãmpfûe
(
u_ch¨
 *
«me
, 
ngx_uöt_t
 
≥rsi°ít
,

113 
ngx_uöt_t
 
ac˚ss
);

114 
	#ngx_›í_ãmpfûe_n
 "›í()"

	)

117 
ssize_t
 
ngx_ªad_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
);

118 #i‡(
NGX_HAVE_PREAD
)

119 
	#ngx_ªad_fûe_n
 "¥ód()"

	)

121 
	#ngx_ªad_fûe_n
 "ªad()"

	)

124 
ssize_t
 
ngx_wrôe_fûe
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

125 
off_t
 
off£t
);

127 
ssize_t
 
ngx_wrôe_chaö_to_fûe
(
ngx_fûe_t
 *
fûe
, 
ngx_chaö_t
 *
˚
,

128 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

131 
	#ngx_ªad_fd
 
ªad


	)

132 
	#ngx_ªad_fd_n
 "ªad()"

	)

139 
ngx_ölöe
 
ssize_t


140 
	$ngx_wrôe_fd
(
ngx_fd_t
 
fd
, *
buf
, 
size_t
 
n
)

142  
	`wrôe
(
fd
, 
buf
, 
n
);

143 
	}
}

145 
	#ngx_wrôe_fd_n
 "wrôe()"

	)

148 
	#ngx_wrôe_c⁄sﬁe
 
ngx_wrôe_fd


	)

151 
	#ngx_löe„ed
(
p
Ë*p++ = 
LF
;

	)

152 
	#NGX_LINEFEED_SIZE
 1

	)

153 
	#NGX_LINEFEED
 "\x0a"

	)

156 
	#ngx_ª«me_fûe
(
o
, 
n
Ë
	`ª«me
((c⁄° *Ëo, (c⁄° *Ën)

	)

157 
	#ngx_ª«me_fûe_n
 "ª«me()"

	)

160 
	#ngx_ch™ge_fûe_ac˚ss
(
n
, 
a
Ë
	`chmod
((c⁄° *Ën,á)

	)

161 
	#ngx_ch™ge_fûe_ac˚ss_n
 "chmod()"

	)

164 
ngx_öt_t
 
ngx_£t_fûe_time
(
u_ch¨
 *
«me
, 
ngx_fd_t
 
fd
, 
time_t
 
s
);

165 
	#ngx_£t_fûe_time_n
 "utimes()"

	)

168 
	#ngx_fûe_öfo
(
fûe
, 
sb
Ë
	`°©
((c⁄° *Ëfûe, sb)

	)

169 
	#ngx_fûe_öfo_n
 "°©()"

	)

171 
	#ngx_fd_öfo
(
fd
, 
sb
Ë
	`f°©
(fd, sb)

	)

172 
	#ngx_fd_öfo_n
 "f°©()"

	)

174 
	#ngx_lök_öfo
(
fûe
, 
sb
Ë
	`l°©
((c⁄° *Ëfûe, sb)

	)

175 
	#ngx_lök_öfo_n
 "l°©()"

	)

177 
	#ngx_is_dú
(
sb
Ë(
	`S_ISDIR
((sb)->
°_mode
))

	)

178 
	#ngx_is_fûe
(
sb
Ë(
	`S_ISREG
((sb)->
°_mode
))

	)

179 
	#ngx_is_lök
(
sb
Ë(
	`S_ISLNK
((sb)->
°_mode
))

	)

180 
	#ngx_is_exec
(
sb
Ë(((sb)->
°_mode
 & 
S_IXUSR
Ë=S_IXUSR)

	)

181 
	#ngx_fûe_ac˚ss
(
sb
Ë((sb)->
°_mode
 & 0777)

	)

182 
	#ngx_fûe_size
(
sb
Ë(sb)->
°_size


	)

183 
	#ngx_fûe_fs_size
(
sb
Ë
	`ngx_max
((sb)->
°_size
, (sb)->
°_blocks
 * 512)

	)

184 
	#ngx_fûe_mtime
(
sb
Ë(sb)->
°_mtime


	)

185 
	#ngx_fûe_uniq
(
sb
Ë(sb)->
°_öo


	)

188 
ngx_öt_t
 
ngx_¸óã_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

189 
ngx_˛o£_fûe_m≠pög
(
ngx_fûe_m≠pög_t
 *
fm
);

192 #i‡(
NGX_HAVE_CASELESS_FILESYSTEM
)

194 
	#ngx_fûíame_cmp
(
s1
, 
s2
, 
n
Ë
	`°∫ˇ£cmp
((*Ës1, (*Ës2,Ç)

	)

198 
	#ngx_fûíame_cmp
 
ngx_memcmp


	)

203 
	#ngx_ªÆ∑th
(
p
, 
r
Ë(
u_ch¨
 *Ë
	`ªÆ∑th
((*Ëp, (*Ër)

	)

204 
	#ngx_ªÆ∑th_n
 "ªÆ∑th()"

	)

205 
	#ngx_gëcwd
(
buf
, 
size
Ë(
	`gëcwd
((*Ëbuf, sizeË!
NULL
)

	)

206 
	#ngx_gëcwd_n
 "gëcwd()"

	)

207 
	#ngx_∑th_£∑øt‹
(
c
Ë((cË='/')

	)

210 #i‡
deföed
(
PATH_MAX
)

212 
	#NGX_HAVE_MAX_PATH
 1

	)

213 
	#NGX_MAX_PATH
 
PATH_MAX


	)

217 
	#NGX_MAX_PATH
 4096

	)

222 
	#NGX_DIR_MASK_LEN
 0

	)

225 
ngx_öt_t
 
ngx_›í_dú
(
ngx_°r_t
 *
«me
, 
ngx_dú_t
 *
dú
);

226 
	#ngx_›í_dú_n
 "›ídú()"

	)

229 
	#ngx_˛o£_dú
(
d
Ë
	`˛o£dú
((d)->
dú
)

	)

230 
	#ngx_˛o£_dú_n
 "˛o£dú()"

	)

233 
ngx_öt_t
 
ngx_ªad_dú
(
ngx_dú_t
 *
dú
);

234 
	#ngx_ªad_dú_n
 "ªaddú()"

	)

237 
	#ngx_¸óã_dú
(
«me
, 
ac˚ss
Ë
	`mkdú
((c⁄° *Ë«me,ác˚ss)

	)

238 
	#ngx_¸óã_dú_n
 "mkdú()"

	)

241 
	#ngx_dñëe_dú
(
«me
Ë
	`rmdú
((c⁄° *Ë«me)

	)

242 
	#ngx_dñëe_dú_n
 "rmdú()"

	)

245 
	#ngx_dú_ac˚ss
(
a
Ë◊ | (®& 0444Ë>> 2)

	)

248 
	#ngx_de_«me
(
dú
Ë((
u_ch¨
 *Ë(dú)->
de
->
d_«me
)

	)

249 #i‡(
NGX_HAVE_D_NAMLEN
)

250 
	#ngx_de_«mñí
(
dú
Ë(dú)->
de
->
d_«mÀn


	)

252 
	#ngx_de_«mñí
(
dú
Ë
	`ngx_°æí
((dú)->
de
->
d_«me
)

	)

255 
ngx_ölöe
 
ngx_öt_t


256 
	$ngx_de_öfo
(
u_ch¨
 *
«me
, 
ngx_dú_t
 *
dú
)

258 
dú
->
ty≥
 = 0;

259  
	`°©
((c⁄° *Ë
«me
, &
dú
->
öfo
);

260 
	}
}

262 
	#ngx_de_öfo_n
 "°©()"

	)

263 
	#ngx_de_lök_öfo
(
«me
, 
dú
Ë
	`l°©
((c⁄° *Ë«me, &(dú)->
öfo
)

	)

264 
	#ngx_de_lök_öfo_n
 "l°©()"

	)

266 #i‡(
NGX_HAVE_D_TYPE
)

273 
	#ngx_de_is_dú
(
dú
) \

274 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_DIR
Ë: (
	`S_ISDIR
((dú)->
öfo
.
°_mode
)))

	)

275 
	#ngx_de_is_fûe
(
dú
) \

276 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_REG
Ë: (
	`S_ISREG
((dú)->
öfo
.
°_mode
)))

	)

277 
	#ngx_de_is_lök
(
dú
) \

278 (((
dú
)->
ty≥
Ë? ((dú)->ty≥ =
DT_LNK
Ë: (
	`S_ISLNK
((dú)->
öfo
.
°_mode
)))

	)

282 
	#ngx_de_is_dú
(
dú
Ë(
	`S_ISDIR
((dú)->
öfo
.
°_mode
))

	)

283 
	#ngx_de_is_fûe
(
dú
Ë(
	`S_ISREG
((dú)->
öfo
.
°_mode
))

	)

284 
	#ngx_de_is_lök
(
dú
Ë(
	`S_ISLNK
((dú)->
öfo
.
°_mode
))

	)

288 
	#ngx_de_ac˚ss
(
dú
Ë(((dú)->
öfo
.
°_mode
Ë& 0777)

	)

289 
	#ngx_de_size
(
dú
Ë(dú)->
öfo
.
°_size


	)

290 
	#ngx_de_fs_size
(
dú
) \

291 
	`ngx_max
((
dú
)->
öfo
.
°_size
, (dú)->öfo.
°_blocks
 * 512)

	)

292 
	#ngx_de_mtime
(
dú
Ë(dú)->
öfo
.
°_mtime


	)

295 
ngx_öt_t
 
ngx_›í_glob
(
ngx_glob_t
 *
gl
);

296 
	#ngx_›í_glob_n
 "glob()"

	)

297 
ngx_öt_t
 
ngx_ªad_glob
(
ngx_glob_t
 *
gl
, 
ngx_°r_t
 *
«me
);

298 
ngx_˛o£_glob
(
ngx_glob_t
 *
gl
);

301 
ngx_îr_t
 
ngx_åylock_fd
(
ngx_fd_t
 
fd
);

302 
ngx_îr_t
 
ngx_lock_fd
(
ngx_fd_t
 
fd
);

303 
ngx_îr_t
 
ngx_u∆ock_fd
(
ngx_fd_t
 
fd
);

305 
	#ngx_åylock_fd_n
 "f˙é(F_SETLK, F_WRLCK)"

	)

306 
	#ngx_lock_fd_n
 "f˙é(F_SETLKW, F_WRLCK)"

	)

307 
	#ngx_u∆ock_fd_n
 "f˙é(F_SETLK, F_UNLCK)"

	)

310 #i‡(
NGX_HAVE_F_READAHEAD
)

312 
	#NGX_HAVE_READ_AHEAD
 1

	)

314 
	#ngx_ªad_ahód
(
fd
, 
n
Ë
	`f˙é
(fd, 
F_READAHEAD
, (Ën)

	)

315 
	#ngx_ªad_ahód_n
 "f˙é(fd, F_READAHEAD)"

	)

317 #ñi‡(
NGX_HAVE_POSIX_FADVISE
)

319 
	#NGX_HAVE_READ_AHEAD
 1

	)

321 
ngx_öt_t
 
ngx_ªad_ahód
(
ngx_fd_t
 
fd
, 
size_t
 
n
);

322 
	#ngx_ªad_ahód_n
 "posix_Ádvi£(POSIX_FADV_SEQUENTIAL)"

	)

326 
	#ngx_ªad_ahód
(
fd
, 
n
Ë0

	)

327 
	#ngx_ªad_ahód_n
 "ngx_ªad_ahód_n"

	)

332 #i‡(
NGX_HAVE_O_DIRECT
)

334 
ngx_öt_t
 
ngx_dúe˘io_⁄
(
ngx_fd_t
 
fd
);

335 
	#ngx_dúe˘io_⁄_n
 "f˙é(O_DIRECT)"

	)

337 
ngx_öt_t
 
ngx_dúe˘io_off
(
ngx_fd_t
 
fd
);

338 
	#ngx_dúe˘io_off_n
 "f˙é(!O_DIRECT)"

	)

340 #ñi‡(
NGX_HAVE_F_NOCACHE
)

342 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`f˙é
(fd, 
F_NOCACHE
, 1)

	)

343 
	#ngx_dúe˘io_⁄_n
 "f˙é(F_NOCACHE, 1)"

	)

345 #ñi‡(
NGX_HAVE_DIRECTIO
)

347 
	#ngx_dúe˘io_⁄
(
fd
Ë
	`dúe˘io
(fd, 
DIRECTIO_ON
)

	)

348 
	#ngx_dúe˘io_⁄_n
 "dúe˘io(DIRECTIO_ON)"

	)

352 
	#ngx_dúe˘io_⁄
(
fd
Ë0

	)

353 
	#ngx_dúe˘io_⁄_n
 "ngx_dúe˘io_⁄_n"

	)

357 
size_t
 
ngx_fs_bsize
(
u_ch¨
 *
«me
);

360 #i‡(
NGX_HAVE_OPENAT
)

362 
	#ngx_›í©_fûe
(
fd
, 
«me
, 
mode
, 
¸óã
, 
ac˚ss
) \

363 
	`›í©
(
fd
, (c⁄° *Ë
«me
, 
mode
|
¸óã
, 
ac˚ss
)

	)

365 
	#ngx_›í©_fûe_n
 "›í©()"

	)

367 
	#ngx_fûe_©_öfo
(
fd
, 
«me
, 
sb
, 
Êag
) \

368 
	`f°©©
(
fd
, (c⁄° *Ë
«me
, 
sb
, 
Êag
)

	)

370 
	#ngx_fûe_©_öfo_n
 "f°©©()"

	)

372 
	#NGX_AT_FDCWD
 (
ngx_fd_t
Ë
AT_FDCWD


	)

377 
	#ngx_°dîr
 
STDERR_FILENO


	)

378 
	#ngx_£t_°dîr
(
fd
Ë
	`dup2
(fd, 
STDERR_FILENO
)

	)

379 
	#ngx_£t_°dîr_n
 "dup2(STDERR_FILENO)"

	)

382 #i‡(
NGX_HAVE_FILE_AIO
)

384 
ssize_t
 
ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
,

385 
off_t
 
off£t
, 
ngx_poﬁ_t
 *
poﬁ
);

387 
ngx_uöt_t
 
ngx_fûe_aio
;

	@src/os/unix/ngx_freebsd.h

8 #i‚de‡
_NGX_FREEBSD_H_INCLUDED_


9 
	#_NGX_FREEBSD_H_INCLUDED_


	)

12 
ngx_debug_öô
();

13 
ngx_chaö_t
 *
ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

14 
off_t
 
limô
);

16 
ngx_‰ìbsd_kîn_o§ñd©e
;

17 
ngx_‰ìbsd_hw_n˝u
;

18 
u_l⁄g
 
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

20 
ngx_uöt_t
 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
;

21 
ngx_uöt_t
 
ngx_‰ìbsd_u£_t˝_n›ush
;

22 
ngx_uöt_t
 
ngx_debug_mÆloc
;

	@src/os/unix/ngx_freebsd_config.h

8 #i‚de‡
_NGX_FREEBSD_CONFIG_H_INCLUDED_


9 
	#_NGX_FREEBSD_CONFIG_H_INCLUDED_


	)

12 
	~<sys/ty≥s.h
>

13 
	~<sys/time.h
>

14 
	~<uni°d.h
>

15 
	~<°d¨g.h
>

16 
	~<°ddef.h
>

17 
	~<°dio.h
>

18 
	~<°dlib.h
>

19 
	~<î∫o.h
>

20 
	~<°rög.h
>

21 
	~<sig«l.h
>

22 
	~<pwd.h
>

23 
	~<gΩ.h
>

24 
	~<dúít.h
>

25 
	~<glob.h
>

26 
	~<time.h
>

27 
	~<sys/∑øm.h
>

28 
	~<sys/mou¡.h
>

30 
	~<sys/fûio.h
>

31 
	~<sys/uio.h
>

32 
	~<sys/°©.h
>

33 
	~<f˙é.h
>

35 
	~<sys/waô.h
>

36 
	~<sys/mm™.h
>

37 
	~<sys/ªsour˚.h
>

38 
	~<sched.h
>

40 
	~<sys/sockë.h
>

41 
	~<√töë/ö.h
>

42 
	~<√töë/t˝.h
>

43 
	~<¨∑/öë.h
>

44 
	~<√tdb.h
>

45 
	~<sys/un.h
>

47 
	~<libutû.h
>

48 
	~<o§ñd©e.h
>

49 
	~<sys/sys˘l.h
>

52 #i‡
__FªeBSD_vîsi⁄
 < 400017

58 #unde‡
CMSG_SPACE


59 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

61 #unde‡
CMSG_LEN


62 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

64 #unde‡
CMSG_DATA


65 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

70 
	~<ngx_auto_c⁄fig.h
>

73 #i‡(
NGX_HAVE_POSIX_SEM
)

74 
	~<£m≠h‹e.h
>

78 #i‡(
NGX_HAVE_POLL
)

79 
	~<pﬁl.h
>

83 #i‡(
NGX_HAVE_KQUEUE
)

84 
	~<sys/evít.h
>

88 #i‡(
NGX_HAVE_FILE_AIO
 || 
NGX_HAVE_AIO
)

89 
	~<aio.h
>

90 
aiocb
 
	tngx_aiocb_t
;

94 
	#NGX_LISTEN_BACKLOG
 -1

	)

97 #i‡(
__FªeBSD_vîsi⁄
 < 430000 || __FreeBSD_version < 500012)

99 
pid_t
 
rf‹k_thªad
(
Êags
, *
°ack
, (*
func
)(*
¨g
), *arg);

103 #i‚de‡
IOV_MAX


104 
	#IOV_MAX
 1024

	)

108 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


109 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

113 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

114 
	#NGX_HAVE_DEBUG_MALLOC
 1

	)

117 **
ívú⁄
;

118 *
mÆloc_›ti⁄s
;

	@src/os/unix/ngx_freebsd_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

13 
	gngx_‰ìbsd_kîn_o°y≥
[16];

14 
	gngx_‰ìbsd_kîn_o§ñó£
[128];

15 
	gngx_‰ìbsd_kîn_o§ñd©e
;

16 
	gngx_‰ìbsd_hw_n˝u
;

17 
	gngx_‰ìbsd_kîn_ùc_somaxc⁄n
;

18 
u_l⁄g
 
	gngx_‰ìbsd_√t_öë_t˝_£nd•a˚
;

21 
	gngx_‰ìbsd_machdï_h…_logiˇl_˝us
;

24 
ngx_uöt_t
 
	gngx_‰ìbsd_£ndfûe_nbyãs_bug
;

25 
ngx_uöt_t
 
	gngx_‰ìbsd_u£_t˝_n›ush
;

27 
ngx_uöt_t
 
	gngx_debug_mÆloc
;

30 
ngx_os_io_t
 
	gngx_‰ìbsd_io
 = {

31 
ngx_unix_ªcv
,

32 
ngx_ªadv_chaö
,

33 
ngx_udp_unix_ªcv
,

34 
ngx_unix_£nd
,

35 #i‡(
NGX_HAVE_SENDFILE
)

36 
ngx_‰ìbsd_£ndfûe_chaö
,

37 
NGX_IO_SENDFILE


39 
ngx_wrôev_chaö
,

46 *
	m«me
;

47 *
	mvÆue
;

48 
size_t
 
	msize
;

49 
ngx_uöt_t
 
	mexi°s
;

50 } 
	tsys˘l_t
;

53 
sys˘l_t
 
	gsys˘ls
[] = {

55 &
ngx_‰ìbsd_hw_n˝u
,

56 (
ngx_‰ìbsd_hw_n˝u
), 0 },

59 &
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
,

60 (
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
), 0 },

63 &
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
,

64 (
ngx_‰ìbsd_√t_öë_t˝_£nd•a˚
), 0 },

67 &
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
,

68 (
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
), 0 },

70 { 
NULL
, NULL, 0, 0 }

75 
	$ngx_debug_öô
()

77 #i‡(
NGX_DEBUG_MALLOC
)

79 #i‡
__FªeBSD_vîsi⁄
 >= 500014 && __FreeBSD_version < 1000011

80 
_mÆloc_›ti⁄s
 = "J";

81 #ñi‡
__FªeBSD_vîsi⁄
 < 500014

82 
mÆloc_›ti⁄s
 = "J";

85 
ngx_debug_mÆloc
 = 1;

88 *
mo
;

90 
mo
 = 
	`gëív
("MALLOC_OPTIONS");

92 i‡(
mo
 && 
	`ngx_°rchr
(mo, 'J')) {

93 
ngx_debug_mÆloc
 = 1;

96 
	}
}

99 
ngx_öt_t


100 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

102 
vîsi⁄
;

103 
size_t
 
size
;

104 
ngx_îr_t
 
îr
;

105 
ngx_uöt_t
 
i
;

107 
size
 = (
ngx_‰ìbsd_kîn_o°y≥
);

108 i‡(
	`sys˘lby«me
("kern.ostype",

109 
ngx_‰ìbsd_kîn_o°y≥
, &
size
, 
NULL
, 0) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

113 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

114  
NGX_ERROR
;

117 
ngx_‰ìbsd_kîn_o°y≥
[
size
 - 1] = '\0';

120 
size
 = (
ngx_‰ìbsd_kîn_o§ñó£
);

121 i‡(
	`sys˘lby«me
("kern.osrelease",

122 
ngx_‰ìbsd_kîn_o§ñó£
, &
size
, 
NULL
, 0) == -1) {

123 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

126 i‡(
ngx_î∫o
 !
NGX_ENOMEM
) {

127  
NGX_ERROR
;

130 
ngx_‰ìbsd_kîn_o§ñó£
[
size
 - 1] = '\0';

134 
size
 = ();

135 i‡(
	`sys˘lby«me
("kern.osreldate",

136 &
ngx_‰ìbsd_kîn_o§ñd©e
, &
size
, 
NULL
, 0) == -1) {

137 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

139  
NGX_ERROR
;

142 
vîsi⁄
 = 
ngx_‰ìbsd_kîn_o§ñd©e
;

145 #i‡(
NGX_HAVE_SENDFILE
)

163 #i‡(
__FªeBSD__
 =4 && 
__FªeBSD_vîsi⁄
 >= 460102) \

164 || 
__FªeBSD_vîsi⁄
 == 460002 || __FreeBSD_version >= 500039

168 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 0;

174 
ngx_‰ìbsd_£ndfûe_nbyãs_bug
 = 1;

181 i‡((
vîsi⁄
 < 500000 && version >= 440003) || version >= 500017) {

182 
ngx_‰ìbsd_u£_t˝_n›ush
 = 1;

186 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

187 
size
 = 
sys˘ls
[
i
].size;

189 i‡(
	`sys˘lby«me
(
sys˘ls
[
i
].
«me
, sys˘ls[i].
vÆue
, &
size
, 
NULL
, 0)

192 
sys˘ls
[
i
].
exi°s
 = 1;

196 
îr
 = 
ngx_î∫o
;

198 i‡(
îr
 =
NGX_ENOENT
) {

202 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

203 "sys˘lby«me(%sËÁûed", 
sys˘ls
[
i
].
«me
);

204  
NGX_ERROR
;

207 i‡(
ngx_‰ìbsd_machdï_h…_logiˇl_˝us
) {

208 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
 / 2;

211 
ngx_n˝u
 = 
ngx_‰ìbsd_hw_n˝u
;

214 i‡(
vîsi⁄
 < 600008 && 
ngx_‰ìbsd_kîn_ùc_somaxc⁄n
 > 32767) {

215 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

217  
NGX_ERROR
;

220 
ngx_t˝_nodñay_™d_t˝_n›ush
 = 1;

222 
ngx_os_io
 = 
ngx_‰ìbsd_io
;

224  
NGX_OK
;

225 
	}
}

229 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

231 
u_l⁄g
 
vÆue
;

232 
ngx_uöt_t
 
i
;

234 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

235 
ngx_‰ìbsd_kîn_o°y≥
, 
ngx_‰ìbsd_kîn_o§ñó£
);

237 #ifde‡
__Døg⁄Fly_vîsi⁄


238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

240 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__Døg⁄Fly_vîsi⁄
);

242 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

244 
ngx_‰ìbsd_kîn_o§ñd©e
, 
__FªeBSD_vîsi⁄
);

247 
i
 = 0; 
sys˘ls
[i].
«me
; i++) {

248 i‡(
sys˘ls
[
i
].
exi°s
) {

249 i‡(
sys˘ls
[
i
].
size
 == ()) {

250 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

253 
vÆue
 = *(*Ë
sys˘ls
[
i
].value;

256 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "%s: %l",

257 
sys˘ls
[
i
].
«me
, 
vÆue
);

260 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

35 *
	gngx_‰ìbsd_kîn_u§°ack
;

36 
size_t
 
	gngx_thªad_°ack_size
;

39 
size_t
 
	grz_size
;

40 
size_t
 
	gußbÀ_°ack_size
;

41 *
	gœ°_°ack
;

43 
ngx_uöt_t
 
	g¡hªads
;

44 
ngx_uöt_t
 
	gmax_thªads
;

46 
ngx_uöt_t
 
	gnkeys
;

47 
ngx_tid_t
 *
	gtids
;

48 **
	gngx_és
;

52 
	gî∫o0
;

53 *
	gî∫os
;

56 
	$__îr‹
()

58 
tid
;

60 
tid
 = 
	`ngx_gëtid
();

62  
tid
 ? &
î∫os
[tid - 1] : &
î∫o0
;

63 
	}
}

75 
__i°hªaded
;

78 
	$_•ölock
(
ngx_©omic_t
 *
lock
)

80 
ngx_öt_t
 
åõs
;

82 
åõs
 = 0;

86 i‡(*
lock
) {

87 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

91 
	`sched_yõld
();

92 
åõs
 = 0;

95 i‡(
	`ngx_©omic_cmp_£t
(
lock
, 0, 1)) {

100 
	}
}

111 #i‚de‡
_•öu∆ock


114 
	$_•öu∆ock
(
ngx_©omic_t
 *
lock
)

116 *
lock
 = 0;

117 
	}
}

122 
ngx_îr_t


123 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

124 *
¨g
, 
ngx_log_t
 *
log
)

126 
ngx_pid_t
 
id
;

127 
ngx_îr_t
 
îr
;

128 *
°ack
, *
°ack_t›
;

130 i‡(
¡hªads
 >
max_thªads
) {

131 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

132 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

133  
NGX_ERROR
;

136 
œ°_°ack
 -
ngx_thªad_°ack_size
;

138 
°ack
 = 
	`mm≠
(
œ°_°ack
, 
ußbÀ_°ack_size
, 
PROT_READ
|
PROT_WRITE
,

139 
MAP_STACK
, -1, 0);

141 i‡(
°ack
 =
MAP_FAILED
) {

142 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

144 
œ°_°ack
, 
ußbÀ_°ack_size
);

145  
NGX_ERROR
;

148 i‡(
°ack
 !
œ°_°ack
) {

149 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 0,

150 "°ack %∞addªs†wa†ch™gedÅÿ%p", 
œ°_°ack
, 
°ack
);

151  
NGX_ERROR
;

154 
°ack_t›
 = 
°ack
 + 
ußbÀ_°ack_size
;

156 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

157 "thªad sèck: %p-%p", 
°ack
, 
°ack_t›
);

159 
	`ngx_£t_î∫o
(0);

161 
id
 = 
	`rf‹k_thªad
(
RFPROC
|
RFTHREAD
|
RFMEM
, 
°ack_t›
,

162 (
ngx_rf‹k_thªad_func_±
Ë
func
, 
¨g
);

164 
îr
 = 
ngx_î∫o
;

166 i‡(
id
 == -1) {

167 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "rfork() failed");

170 *
tid
 = 
id
;

171 
¡hªads
 = (
ngx_‰ìbsd_kîn_u§°ack
 - 
°ack_t›
)

172 / 
ngx_thªad_°ack_size
;

173 
tids
[
¡hªads
] = 
id
;

175 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0, "rf‹k(ÎdÅhªad: %P", 
id
);

178  
îr
;

179 
	}
}

182 
ngx_öt_t


183 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

185 *
ªd_z⁄e
, *
z⁄e
;

186 
size_t
 
Àn
;

187 
ngx_öt_t
 
i
;

188 
siga˘i⁄
 
ß
;

190 
max_thªads
 = 
n
 + 1;

192 
i
 = 0; i < 
n
; i++) {

193 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

194 
ß
.
ß_h™dÀr
 = 
SIG_IGN
;

195 
	`sigem±y£t
(&
ß
.
ß_mask
);

196 i‡(
	`siga˘i⁄
(
NGX_CV_SIGNAL
, &
ß
, 
NULL
) == -1) {

197 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

198 "siga˘i⁄(%d, SIG_IGNËÁûed", 
NGX_CV_SIGNAL
);

199  
NGX_ERROR
;

203 
Àn
 = (
ngx_‰ìbsd_kîn_u§°ack
);

204 i‡(
	`sys˘lby«me
("kîn.u§°ack", &
ngx_‰ìbsd_kîn_u§°ack
, &
Àn
,

205 
NULL
, 0) == -1)

207 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

209  
NGX_ERROR
;

213 
rz_size
 = 
ngx_∑gesize
;

214 
ªd_z⁄e
 = 
ngx_‰ìbsd_kîn_u§°ack
 - (
size
 + 
rz_size
);

216 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

218 
ngx_‰ìbsd_kîn_u§°ack
, 
ªd_z⁄e
);

220 
z⁄e
 = 
	`mm≠
(
ªd_z⁄e
, 
rz_size
, 
PROT_NONE
, 
MAP_ANON
, -1, 0);

221 i‡(
z⁄e
 =
MAP_FAILED
) {

222 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

224 
ªd_z⁄e
, 
rz_size
);

225  
NGX_ERROR
;

228 i‡(
z⁄e
 !
ªd_z⁄e
) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

230 "ªd z⁄ê%∞addªs†wa†ch™gedÅÿ%p", 
ªd_z⁄e
, 
z⁄e
);

231  
NGX_ERROR
;

236 
î∫os
 = 
	`ngx_ˇŒoc
(
n
 * (), 
cy˛e
->
log
);

237 i‡(
î∫os
 =
NULL
) {

238  
NGX_ERROR
;

243 
tids
 = 
	`ngx_ˇŒoc
((
n
 + 1Ë* (
ngx_tid_t
), 
cy˛e
->
log
);

244 i‡(
tids
 =
NULL
) {

245  
NGX_ERROR
;

248 
tids
[0] = 
ngx_pid
;

252 
ngx_és
 = 
	`ngx_ˇŒoc
(
NGX_THREAD_KEYS_MAX
 * (
n
 + 1) * (*),

253 
cy˛e
->
log
);

254 i‡(
ngx_és
 =
NULL
) {

255  
NGX_ERROR
;

258 
¡hªads
 = 1;

260 
œ°_°ack
 = 
z⁄e
 + 
rz_size
;

261 
ußbÀ_°ack_size
 = 
size
;

262 
ngx_thªad_°ack_size
 = 
size
 + 
rz_size
;

265 
__i°hªaded
 = 1;

267 
ngx_thªaded
 = 1;

269  
NGX_OK
;

270 
	}
}

273 
ngx_tid_t


274 
	$ngx_thªad_£lf
()

276 
ngx_öt_t
 
tid
;

278 
tid
 = 
	`ngx_gëtid
();

280 i‡(
tids
 =
NULL
) {

281  
ngx_pid
;

284  
tids
[
tid
];

285 
	}
}

288 
ngx_îr_t


289 
	$ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
)

291 i‡(
nkeys
 >
NGX_THREAD_KEYS_MAX
) {

292  
NGX_ENOMEM
;

295 *
key
 = 
nkeys
++;

298 
	}
}

301 
ngx_îr_t


302 
	$ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
)

304 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

305  
NGX_EINVAL
;

308 
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()] = 
vÆue
;

310 
	}
}

313 
ngx_muãx_t
 *

314 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

316 
ngx_muãx_t
 *
m
;

317 
£mun
 
›
;

319 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

320 i‡(
m
 =
NULL
) {

321  
NULL
;

324 
m
->
lock
 = 0;

325 
m
->
log
 =Üog;

327 i‡(
Êags
 & 
NGX_MUTEX_LIGHT
) {

328 
m
->
£mid
 = -1;

329  
m
;

332 
m
->
£mid
 = 
	`£mgë
(
IPC_PRIVATE
, 1, 
SEM_R
|
SEM_A
);

333 i‡(
m
->
£mid
 == -1) {

334 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semget() failed");

335  
NULL
;

338 
›
.
vÆ
 = 0;

340 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
SETVAL
, 
›
) == -1) {

341 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "semctl(SETVAL) failed");

343 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

344 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

348  
NULL
;

351  
m
;

352 
	}
}

356 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

358 i‡(
	`£m˘l
(
m
->
£mid
, 0, 
IPC_RMID
) == -1) {

359 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

363 
	`ngx_‰ì
((*Ë
m
);

364 
	}
}

367 
ngx_öt_t


368 
	$ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
, 
ngx_öt_t
 
åy
)

370 
uöt32_t
 
lock
, 
ﬁd
;

371 
ngx_uöt_t
 
åõs
;

372 
£mbuf
 
›
;

374 i‡(!
ngx_thªaded
) {

375  
NGX_OK
;

378 #i‡(
NGX_DEBUG
)

379 i‡(
åy
) {

380 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

381 "åyÜock muãx %∞lock:%XD", 
m
, m->
lock
);

383 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

384 "lock muãx %∞lock:%XD", 
m
, m->
lock
);

388 
ﬁd
 = 
m
->
lock
;

389 
åõs
 = 0;

392 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

394 i‡(
åy
) {

395  
NGX_AGAIN
;

398 i‡(
ngx_n˝u
 > 1 && 
åõs
++ < 1000) {

402 
ﬁd
 = 
m
->
lock
;

406 i‡(
m
->
£mid
 == -1) {

407 
	`sched_yõld
();

409 
åõs
 = 0;

410 
ﬁd
 = 
m
->
lock
;

414 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

415 "muãx %∞lock:%XD", 
m
, m->
lock
);

422 
lock
 = 
ﬁd
 + 1;

424 i‡((
lock
 & ~
NGX_MUTEX_LOCK_BUSY
Ë> 
¡hªads
) {

425 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

428 
lock
 & ~
NGX_MUTEX_LOCK_BUSY
, 
m
, 
¡hªads
);

429 
	`ngx_ab‹t
();

432 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

434 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

435 "waô muãx %∞lock:%XD", 
m
, m->
lock
);

444 
›
.
£m_num
 = 0;

445 
›
.
£m_›
 = -1;

446 
›
.
£m_Êg
 = 0;

448 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

449 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

450 "£m›(ËÁûed whûêwaôög o¿muãx %p", 
m
);

451 
	`ngx_ab‹t
();

454 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

455 "muãx waked u∞%∞lock:%XD", 
m
, m->
lock
);

457 
åõs
 = 0;

458 
ﬁd
 = 
m
->
lock
;

462 
ﬁd
 = 
m
->
lock
;

465 
lock
 = 
ﬁd
 | 
NGX_MUTEX_LOCK_BUSY
;

467 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

474 
ﬁd
 = 
m
->
lock
;

477 i‡(
åõs
++ > 1000) {

479 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

480 "muãx %∞i†c⁄ã°ed", 
m
);

484 
	`sched_yõld
();

486 
åõs
 = 0;

487 
ﬁd
 = 
m
->
lock
;

491 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

492 "muãx %∞i†locked,Üock:%XD", 
m
, m->
lock
);

494  
NGX_OK
;

495 
	}
}

499 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

501 
uöt32_t
 
lock
, 
ﬁd
;

502 
£mbuf
 
›
;

504 i‡(!
ngx_thªaded
) {

508 
ﬁd
 = 
m
->
lock
;

510 i‡(!(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
)) {

511 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 0,

512 "åyögÅÿu∆ockÅhê‰ì muãx %p", 
m
);

513 
	`ngx_ab‹t
();

519 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

520 "u∆ock muãx %∞lock:%XD", 
m
, 
ﬁd
);

524 
lock
 = 
ﬁd
 & ~
NGX_MUTEX_LOCK_BUSY
;

526 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

530 
ﬁd
 = 
m
->
lock
;

533 i‡(
m
->
£mid
 == -1) {

534 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

535 "muãx %∞i†u∆ocked", 
m
);

542 
ﬁd
 = 
m
->
lock
;

545 i‡(
ﬁd
 & 
NGX_MUTEX_LOCK_BUSY
) {

552 i‡(
ﬁd
 == 0) {

558 
lock
 = 
ﬁd
 - 1;

560 i‡(
	`ngx_©omic_cmp_£t
(&
m
->
lock
, 
ﬁd
,Üock)) {

564 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

565 "wakêu∞muãx %p", 
m
);

567 
›
.
£m_num
 = 0;

568 
›
.
£m_›
 = 1;

569 
›
.
£m_Êg
 = 0;

571 i‡(
	`£m›
(
m
->
£mid
, &
›
, 1) == -1) {

572 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
ngx_î∫o
,

573 "£m›(ËÁûed whûêwakög u∞⁄ muãx %p", 
m
);

574 
	`ngx_ab‹t
();

580 
ﬁd
 = 
m
->
lock
;

583 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0,

584 "muãx %∞i†u∆ocked", 
m
);

587 
	}
}

590 
ngx_c⁄d_t
 *

591 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

593 
ngx_c⁄d_t
 *
cv
;

595 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

596 i‡(
cv
 =
NULL
) {

597  
NULL
;

600 
cv
->
signo
 = 
NGX_CV_SIGNAL
;

601 
cv
->
tid
 = -1;

602 
cv
->
log
 =Üog;

603 
cv
->
kq
 = -1;

605  
cv
;

606 
	}
}

610 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

612 i‡(
	`˛o£
(
cv
->
kq
) == -1) {

613 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
,

617 
	`ngx_‰ì
(
cv
);

618 
	}
}

621 
ngx_öt_t


622 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

624 
n
;

625 
ngx_îr_t
 
îr
;

626 
kevít
 
kev
;

627 
time•ec
 
ts
;

629 i‡(
cv
->
kq
 == -1) {

639 
cv
->
kq
 = 
	`kqueue
();

640 i‡(
cv
->
kq
 == -1) {

641 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kqueue() failed");

642  
NGX_ERROR
;

645 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

646 "cv kq:%d signo:%d", 
cv
->
kq
, cv->
signo
);

648 
kev
.
idít
 = 
cv
->
signo
;

649 
kev
.
fûãr
 = 
EVFILT_SIGNAL
;

650 
kev
.
Êags
 = 
EV_ADD
;

651 
kev
.
fÊags
 = 0;

652 
kev
.
d©a
 = 0;

653 
kev
.
ud©a
 = 
NULL
;

655 
ts
.
tv_£c
 = 0;

656 
ts
.
tv_n£c
 = 0;

658 i‡(
	`kevít
(
cv
->
kq
, &
kev
, 1, 
NULL
, 0, &
ts
) == -1) {

659 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
ngx_î∫o
, "kevent() failed");

660  
NGX_ERROR
;

663 
cv
->
tid
 = 
	`ngx_thªad_£lf
();

666 
	`ngx_muãx_u∆ock
(
m
);

668 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

669 "cv %∞waô, kq:%d, signo:%d", 
cv
, cv->
kq
, cv->
signo
);

672 
n
 = 
	`kevít
(
cv
->
kq
, 
NULL
, 0, &
kev
, 1, NULL);

674 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

675 "cv %∞kevít: %d", 
cv
, 
n
);

677 i‡(
n
 == -1) {

678 
îr
 = 
ngx_î∫o
;

679 
	`ngx_log_îr‹
((
îr
 =
NGX_EINTR
Ë? 
NGX_LOG_INFO
 : 
NGX_LOG_ALERT
,

680 
cv
->
log
, 
ngx_î∫o
,

682 
cv
);

684 i‡(
îr
 =
NGX_EINTR
) {

688  
NGX_ERROR
;

691 i‡(
n
 == 0) {

692 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

695 
cv
);

699 i‡(
kev
.
fûãr
 !
EVFILT_SIGNAL
) {

700 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

703 
kev
.
fûãr
, 
cv
);

707 i‡(
kev
.
idít
 !(
uöçå_t
Ë
cv
->
signo
) {

708 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 0,

711 
kev
.
idít
, 
cv
);

718 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

720 
	`ngx_muãx_lock
(
m
);

722  
NGX_OK
;

723 
	}
}

726 
ngx_öt_t


727 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

729 
ngx_îr_t
 
îr
;

731 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0,

733 
cv
, cv->
tid
, cv->
signo
);

735 i‡(
cv
->
tid
 == -1) {

736  
NGX_OK
;

739 i‡(
	`kûl
(
cv
->
tid
, cv->
signo
) == -1) {

741 
îr
 = 
ngx_î∫o
;

743 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

744 "kûl(ËÁûed whûêsig«lög c⁄dôi⁄ v¨übÀ %p", 
cv
);

746 i‡(
îr
 =
NGX_ESRCH
) {

747 
cv
->
tid
 = -1;

750  
NGX_ERROR
;

753 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

755  
NGX_OK
;

756 
	}
}

	@src/os/unix/ngx_freebsd_rfork_thread.h

8 #i‚de‡
_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


9 
	#_NGX_FREEBSD_RFORK_THREAD_H_INCLUDED_


	)

12 
	~<sys/ùc.h
>

13 
	~<sys/£m.h
>

14 
	~<sched.h
>

16 
pid_t
 
	tngx_tid_t
;

18 
	#ngx_log_pid
 
	`ngx_thªad_£lf
()

	)

19 
	#ngx_log_tid
 0

	)

21 
	#NGX_TID_T_FMT
 "%P"

	)

24 
	#NGX_MUTEX_LIGHT
 1

	)

26 
	#NGX_MUTEX_LOCK_BUSY
 0x80000000

	)

29 
ngx_©omic_t
 
	mlock
;

30 
ngx_log_t
 *
	mlog
;

31 
	m£mid
;

32 } 
	tngx_muãx_t
;

35 
	#NGX_CV_SIGNAL
 64

	)

38 
	msigno
;

39 
	mkq
;

40 
ngx_tid_t
 
	mtid
;

41 
ngx_log_t
 *
	mlog
;

42 } 
	tngx_c⁄d_t
;

45 
	#ngx_thªad_sigmask
(
how
, 
£t
, 
o£t
) \

46 (
	`sig¥ocmask
(
how
, 
£t
, 
o£t
Ë=-1Ë? 
ngx_î∫o
 : 0

	)

48 
	#ngx_thªad_sigmask_n
 "sig¥ocmask()"

	)

50 
	#ngx_thªad_joö
(
t
, 
p
)

	)

52 
	#ngx_£âhπôÀ
(
n
Ë
	`£çro˘ôÀ
“)

	)

55 *
ngx_‰ìbsd_kîn_u§°ack
;

56 
size_t
 
ngx_thªad_°ack_size
;

59 
ngx_ölöe
 
ngx_öt_t


60 
	$ngx_gëtid
()

62 *
•
;

64 i‡(
ngx_thªad_°ack_size
 == 0) {

68 #i‡–
__i386__
 )

70 
__asm__
 vﬁ©ûê("mov %%e•, %0" : "=q" (
•
));

72 #ñi‡–
__amd64__
 )

74 
__asm__
 vﬁ©ûê("mov %%r•, %0" : "=q" (
•
));

82  (
ngx_‰ìbsd_kîn_u§°ack
 - 
•
Ë/ 
ngx_thªad_°ack_size
;

83 
	}
}

86 
ngx_tid_t
 
ngx_thªad_£lf
();

89 
ngx_uöt_t
 
	tngx_és_key_t
;

91 
	#NGX_THREAD_KEYS_MAX
 16

	)

93 **
ngx_és
;

95 
ngx_îr_t
 
ngx_thªad_key_¸óã
(
ngx_és_key_t
 *
key
);

96 
	#ngx_thªad_key_¸óã_n
 "thêé†key cª©i⁄"

	)

98 
ngx_îr_t
 
ngx_thªad_£t_és
(
ngx_és_key_t
 
key
, *
vÆue
);

99 
	#ngx_thªad_£t_és_n
 "thêé†key sëtög"

	)

103 
	$ngx_thªad_gë_és
(
ngx_és_key_t
 
key
)

105 i‡(
key
 >
NGX_THREAD_KEYS_MAX
) {

106  
NULL
;

109  
ngx_és
[
key
 * 
NGX_THREAD_KEYS_MAX
 + 
	`ngx_gëtid
()];

110 
	}
}

113 
	#ngx_muãx_åylock
(
m
Ë
	`ngx_muãx_dﬁock
(m, 1)

	)

114 
	#ngx_muãx_lock
(
m
Ë(Ë
	`ngx_muãx_dﬁock
(m, 0)

	)

115 
ngx_öt_t
 
ngx_muãx_dﬁock
(
ngx_muãx_t
 *
m
,Çgx_öt_à
åy
);

116 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

119 (*
	tngx_rf‹k_thªad_func_±
)(*
	t¨g
);

	@src/os/unix/ngx_freebsd_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

32 #i‡(
IOV_MAX
 > 64)

33 
	#NGX_HEADERS
 64

	)

34 
	#NGX_TRAILERS
 64

	)

36 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
	#NGX_TRAILERS
 
IOV_MAX


	)

41 
ngx_chaö_t
 *

42 
	$ngx_‰ìbsd_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

44 
rc
, 
Êags
;

45 
u_ch¨
 *
¥ev
;

46 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

47 
size_t
 
hódî_size
, 
fûe_size
;

48 
ngx_uöt_t
 
eöå
, 
ógaö
, 
com∂ëe
;

49 
ngx_îr_t
 
îr
;

50 
ngx_buf_t
 *
fûe
;

51 
ngx_¨øy_t
 
hódî
, 
åaûî
;

52 
ngx_evít_t
 *
wev
;

53 
ngx_chaö_t
 *
˛
;

54 
sf_hdå
 
hdå
;

55 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
], 
åaûîs
[
NGX_TRAILERS
];

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

63 #i‡(
NGX_HAVE_KQUEUE
)

65 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

66 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

68 
wev
->
îr‹
 = 1;

69  
NGX_CHAIN_ERROR
;

76 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

77 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

80 
£nd
 = 0;

81 
ógaö
 = 0;

82 
Êags
 = 0;

84 
hódî
.
ñts
 = 
hódîs
;

85 
hódî
.
size
 = (
iovec
);

86 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

87 
hódî
.
poﬁ
 = 
c
->pool;

89 
åaûî
.
ñts
 = 
åaûîs
;

90 
åaûî
.
size
 = (
iovec
);

91 
åaûî
.
«Œoc
 = 
NGX_TRAILERS
;

92 
åaûî
.
poﬁ
 = 
c
->pool;

95 
fûe
 = 
NULL
;

96 
fûe_size
 = 0;

97 
hódî_size
 = 0;

98 
eöå
 = 0;

99 
com∂ëe
 = 0;

100 
¥ev_£nd
 = 
£nd
;

102 
hódî
.
√…s
 = 0;

103 
åaûî
.
√…s
 = 0;

107 
¥ev
 = 
NULL
;

108 
iov
 = 
NULL
;

110 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

112 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

116 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

120 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

122 i‡(
£nd
 + 
size
 > 
limô
) {

123 
size
 = 
limô
 - 
£nd
;

126 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

127 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

130 i‡(
hódî
.
√…s
 >
IOV_MAX
){

134 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

135 i‡(
iov
 =
NULL
) {

136  
NGX_CHAIN_ERROR
;

139 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

140 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

143 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

144 
hódî_size
 +(
size_t
Ë
size
;

145 
£nd
 +
size
;

149 i‡(
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

150 
fûe
 = 
˛
->
buf
;

155 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

157 i‡(
£nd
 + 
size
 > 
limô
) {

158 
size
 = 
limô
 - 
£nd
;

160 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

161 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

163 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

164 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

168 
fûe_size
 +(
size_t
Ë
size
;

169 
£nd
 +
size
;

170 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

171 
˛
 = cl->
√xt
;

173 } 
˛


174 && 
˛
->
buf
->
ö_fûe


175 && 
£nd
 < 
limô


176 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

177 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

181 i‡(
fûe
) {

185 
¥ev
 = 
NULL
;

186 
iov
 = 
NULL
;

188 
˛
 && 
£nd
 < 
limô
) {

190 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

191 
˛
 = cl->
√xt
;

195 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

199 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

201 i‡(
£nd
 + 
size
 > 
limô
) {

202 
size
 = 
limô
 - 
£nd
;

205 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

206 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

209 i‡(
åaûî
.
√…s
 >
IOV_MAX
){

213 
iov
 = 
	`ngx_¨øy_push
(&
åaûî
);

214 i‡(
iov
 =
NULL
) {

215  
NGX_CHAIN_ERROR
;

218 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

219 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

222 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

223 
£nd
 +
size
;

224 
˛
 = cl->
√xt
;

228 i‡(
fûe
) {

230 i‡(
ngx_‰ìbsd_u£_t˝_n›ush


231 && 
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET
)

233 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

234 
îr
 = 
ngx_î∫o
;

241 i‡(
îr
 !
NGX_EINTR
) {

242 
wev
->
îr‹
 = 1;

243 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

244 
ngx_t˝_n›ush_n
 " failed");

245  
NGX_CHAIN_ERROR
;

249 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

251 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

261 
hdå
.
hódîs
 = 
hódî
.
√…s
 ? (
iovec
 *Ëhódî.
ñts
: 
NULL
;

262 
hdå
.
hdr_˙t
 = 
hódî
.
√…s
;

263 
hdå
.
åaûîs
 = 
åaûî
.
√…s
 ? (
iovec
 *Ëåaûî.
ñts
: 
NULL
;

264 
hdå
.
ål_˙t
 = 
åaûî
.
√…s
;

271 i‡(!
ngx_‰ìbsd_£ndfûe_nbyãs_bug
) {

272 
hódî_size
 = 0;

275 
£¡
 = 0;

277 #i‡(
NGX_HAVE_AIO_SENDFILE
)

278 
Êags
 = 
c
->
aio_£ndfûe
 ? 
SF_NODISKIO
 : 0;

281 
rc
 = 
	`£ndfûe
(
fûe
->fûe->
fd
, 
c
->fd, fûe->
fûe_pos
,

282 
fûe_size
 + 
hódî_size
, &
hdå
, &
£¡
, 
Êags
);

284 i‡(
rc
 == -1) {

285 
îr
 = 
ngx_î∫o
;

287 
îr
) {

288 
NGX_EAGAIN
:

289 
ógaö
 = 1;

292 
NGX_EINTR
:

293 
eöå
 = 1;

296 #i‡(
NGX_HAVE_AIO_SENDFILE
)

297 
NGX_EBUSY
:

298 
c
->
busy_£ndfûe
 = 
fûe
;

303 
wev
->
îr‹
 = 1;

304 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

305  
NGX_CHAIN_ERROR
;

308 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

309 "£ndfûe(Ë£¡ o∆y %O byãs", 
£¡
);

316 } i‡(
rc
 >0 && 
£¡
 == 0) {

324 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

326 
fûe
->fûe->
«me
.
d©a
, fûe->
fûe_pos
);

328  
NGX_CHAIN_ERROR
;

331 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

333 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
 + 
hódî_size
);

336 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

338 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

339 "wrôev: %d o‡%uz", 
rc
, 
hódî_size
);

341 i‡(
rc
 == -1) {

342 
îr
 = 
ngx_î∫o
;

344 
îr
) {

345 
NGX_EAGAIN
:

348 
NGX_EINTR
:

349 
eöå
 = 1;

353 
wev
->
îr‹
 = 1;

354 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

355  
NGX_CHAIN_ERROR
;

358 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

362 
£¡
 = 
rc
 > 0 ?Ñc : 0;

365 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

366 
com∂ëe
 = 1;

369 
c
->
£¡
 += sent;

371 
˛
 = 
ö
; cl; c»˛->
√xt
) {

373 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

377 i‡(
£¡
 == 0) {

381 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

383 i‡(
£¡
 >
size
) {

384 
£¡
 -
size
;

386 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

387 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

390 i‡(
˛
->
buf
->
ö_fûe
) {

391 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

397 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

398 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

401 i‡(
˛
->
buf
->
ö_fûe
) {

402 
˛
->
buf
->
fûe_pos
 +
£¡
;

408 #i‡(
NGX_HAVE_AIO_SENDFILE
)

409 i‡(
c
->
busy_£ndfûe
) {

410  
˛
;

414 i‡(
ógaö
) {

423 
wev
->
ªady
 = 0;

424  
˛
;

427 i‡(
eöå
) {

431 i‡(!
com∂ëe
) {

432 
wev
->
ªady
 = 0;

433  
˛
;

436 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

437  
˛
;

440 
ö
 = 
˛
;

442 
	}
}

	@src/os/unix/ngx_gcc_atomic_amd64.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

36 
ngx_ölöe
 
ngx_©omic_uöt_t


37 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

38 
ngx_©omic_uöt_t
 
£t
)

40 
u_ch¨
 
ªs
;

42 
__asm__
 volatile (

44 
NGX_SMP_LOCK


48 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

50  
ªs
;

51 
	}
}

66 
ngx_ölöe
 
ngx_©omic_öt_t


67 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

69 
__asm__
 volatile (

71 
NGX_SMP_LOCK


74 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

76  
add
;

77 
	}
}

80 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 ("∑u£")

	)

	@src/os/unix/ngx_gcc_atomic_ppc.h

26 #i‡(
NGX_PTR_SIZE
 == 8)

28 
ngx_ölöe
 
ngx_©omic_uöt_t


29 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

30 
ngx_©omic_uöt_t
 
£t
)

32 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

34 
__asm__
 volatile (

50 : "=&b" (
ªs
), "=&b" (
ãmp
)

51 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

54  
ªs
;

55 
	}
}

58 
ngx_ölöe
 
ngx_©omic_öt_t


59 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

61 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

63 
__asm__
 volatile (

74 : "=&b" (
ªs
), "=&b" (
ãmp
)

75 : "b" (
vÆue
), "b" (
add
)

78  
ªs
;

79 
	}
}

82 #i‡(
NGX_SMP
)

83 
	#ngx_mem‹y_b¨rõr
() \

84 
__asm__
 vﬁ©ûê("isyn¯ \¿Üwsyn¯ \n" ::: "mem‹y")

	)

86 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

91 
ngx_ölöe
 
ngx_©omic_uöt_t


92 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

93 
ngx_©omic_uöt_t
 
£t
)

95 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

97 
__asm__
 volatile (

113 : "=&b" (
ªs
), "=&b" (
ãmp
)

114 : "b" (
lock
), "b" (
ﬁd
), "b" (
£t
)

117  
ªs
;

118 
	}
}

121 
ngx_ölöe
 
ngx_©omic_öt_t


122 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

124 
ngx_©omic_uöt_t
 
ªs
, 
ãmp
;

126 
__asm__
 volatile (

137 : "=&b" (
ªs
), "=&b" (
ãmp
)

138 : "b" (
vÆue
), "b" (
add
)

141  
ªs
;

142 
	}
}

145 #i‡(
NGX_SMP
)

146 
	#ngx_mem‹y_b¨rõr
() \

147 
__asm__
 vﬁ©ûê("isyn¯ \¿Éõiÿ \n" ::: "mem‹y")

	)

149 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

155 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_sparc64.h

26 #i‡(
NGX_PTR_SIZE
 == 4)

27 
	#NGX_CASA
 "ˇß"

	)

29 
	#NGX_CASA
 "ˇsxa"

	)

33 
ngx_ölöe
 
ngx_©omic_uöt_t


34 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

35 
ngx_©omic_uöt_t
 
£t
)

37 
__asm__
 volatile (

39 
NGX_CASA
 " [%1] 0x80, %2, %0"

41 : "+r" (
£t
Ë: "r" (
lock
), "r" (
ﬁd
) : "memory");

43  (
£t
 =
ﬁd
);

44 
	}
}

47 
ngx_ölöe
 
ngx_©omic_öt_t


48 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

50 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

52 
ﬁd
 = *
vÆue
;

56 
ªs
 = 
ﬁd
 + 
add
;

58 
__asm__
 volatile (

60 
NGX_CASA
 " [%1] 0x80, %2, %0"

62 : "+r" (
ªs
Ë: "r" (
vÆue
), "r" (
ﬁd
) : "memory");

64 i‡(
ªs
 =
ﬁd
) {

65  
ªs
;

68 
ﬁd
 = 
ªs
;

70 
	}
}

73 #i‡(
NGX_SMP
)

74 
	#ngx_mem‹y_b¨rõr
() \

75 
__asm__
 volatile ( \

77 ::: "mem‹y")

	)

79 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

82 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_gcc_atomic_x86.h

8 #i‡(
NGX_SMP
)

9 
	#NGX_SMP_LOCK
 "lock;"

	)

11 
	#NGX_SMP_LOCK


	)

37 
ngx_ölöe
 
ngx_©omic_uöt_t


38 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

39 
ngx_©omic_uöt_t
 
£t
)

41 
u_ch¨
 
ªs
;

43 
__asm__
 volatile (

45 
NGX_SMP_LOCK


49 : "˜" (
ªs
Ë: "m" (*
lock
), "a" (
ﬁd
), "r" (
£t
) : "cc", "memory");

51  
ªs
;

52 
	}
}

68 #i‡!(–
__GNUC__
 =2 && 
__GNUC_MINOR__
 <7 ) || ( 
__INTEL_COMPILER
 >= 800 ))

79 
ngx_ölöe
 
ngx_©omic_öt_t


80 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

82 
__asm__
 volatile (

84 
NGX_SMP_LOCK


87 : "+r" (
add
Ë: "m" (*
vÆue
) : "cc", "memory");

89  
add
;

90 
	}
}

101 
ngx_ölöe
 
ngx_©omic_öt_t


102 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

104 
ngx_©omic_uöt_t
 
ﬁd
;

106 
__asm__
 volatile (

108 
NGX_SMP_LOCK


111 : "˜" (
ﬁd
Ë: "m" (*
vÆue
), "a" (
add
) : "cc", "memory");

113  
ﬁd
;

114 
	}
}

124 
	#ngx_mem‹y_b¨rõr
(Ë
__asm__
 vﬁ©ûê("" ::: "mem‹y")

	)

127 
	#ngx_˝u_∑u£
(Ë
	`__asm__
 (".byã 0xf3, 0x90")

	)

	@src/os/unix/ngx_linux.h

8 #i‚de‡
_NGX_LINUX_H_INCLUDED_


9 
	#_NGX_LINUX_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

15 
ngx_löux_πsig_max
;

	@src/os/unix/ngx_linux_aio_read.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ngx_evítfd
;

14 
aio_c⁄ãxt_t
 
ngx_aio_˘x
;

17 
ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
);

21 
	$io_submô
(
aio_c⁄ãxt_t
 
˘x
, 
n
, 
iocb
 **
∑iocb
)

23  
	`sysˇŒ
(
SYS_io_submô
, 
˘x
, 
n
, 
∑iocb
);

24 
	}
}

27 
ssize_t


28 
	$ngx_fûe_aio_ªad
(
ngx_fûe_t
 *
fûe
, 
u_ch¨
 *
buf
, 
size_t
 
size
, 
off_t
 
off£t
,

29 
ngx_poﬁ_t
 *
poﬁ
)

31 
ngx_îr_t
 
îr
;

32 
iocb
 *
piocb
[1];

33 
ngx_evít_t
 *
ev
;

34 
ngx_evít_aio_t
 *
aio
;

36 i‡(!
ngx_fûe_aio
) {

37  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

40 
aio
 = 
fûe
->aio;

42 i‡(
aio
 =
NULL
) {

43 
aio
 = 
	`ngx_pˇŒoc
(
poﬁ
, (
ngx_evít_aio_t
));

44 i‡(
aio
 =
NULL
) {

45  
NGX_ERROR
;

48 
aio
->
fûe
 = file;

49 
aio
->
fd
 = 
fûe
->fd;

50 
aio
->
evít
.
d©a
 =áio;

51 
aio
->
evít
.
ªady
 = 1;

52 
aio
->
evít
.
log
 = 
fûe
->log;

53 
fûe
->
aio
 =áio;

56 
ev
 = &
aio
->
evít
;

58 i‡(!
ev
->
ªady
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
fûe
->
log
, 0,

60 "£c⁄dáiÿpo° f‹ \"%V\"", &
fûe
->
«me
);

61  
NGX_AGAIN
;

64 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
fûe
->
log
, 0,

66 
ev
->
com∂ëe
, 
off£t
, 
size
, &
fûe
->
«me
);

68 i‡(
ev
->
com∂ëe
) {

69 
ev
->
a˘ive
 = 0;

70 
ev
->
com∂ëe
 = 0;

72 i‡(
aio
->
ªs
 >= 0) {

73 
	`ngx_£t_î∫o
(0);

74  
aio
->
ªs
;

77 
	`ngx_£t_î∫o
(-
aio
->
ªs
);

79 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
ngx_î∫o
,

80 "aiÿªad \"%s\" faûed", 
fûe
->
«me
.
d©a
);

82  
NGX_ERROR
;

85 
	`ngx_memzîo
(&
aio
->
aiocb
, (
iocb
));

87 
aio
->
aiocb
.
aio_d©a
 = (
uöt64_t
Ë(
uöçå_t
Ë
ev
;

88 
aio
->
aiocb
.
aio_lio_›code
 = 
IOCB_CMD_PREAD
;

89 
aio
->
aiocb
.
aio_fûdes
 = 
fûe
->
fd
;

90 
aio
->
aiocb
.
aio_buf
 = (
uöt64_t
Ë(
uöçå_t
Ë
buf
;

91 
aio
->
aiocb
.
aio_nbyãs
 = 
size
;

92 
aio
->
aiocb
.
aio_off£t
 = 
off£t
;

93 
aio
->
aiocb
.
aio_Êags
 = 
IOCB_FLAG_RESFD
;

94 
aio
->
aiocb
.
aio_ªsfd
 = 
ngx_evítfd
;

96 
ev
->
h™dÀr
 = 
ngx_fûe_aio_evít_h™dÀr
;

98 
piocb
[0] = &
aio
->
aiocb
;

100 i‡(
	`io_submô
(
ngx_aio_˘x
, 1, 
piocb
) == 1) {

101 
ev
->
a˘ive
 = 1;

102 
ev
->
ªady
 = 0;

103 
ev
->
com∂ëe
 = 0;

105  
NGX_AGAIN
;

108 
îr
 = 
ngx_î∫o
;

110 i‡(
îr
 =
NGX_EAGAIN
) {

111  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

114 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
fûe
->
log
, 
îr
,

115 "io_submô(\"%V\"ËÁûed", &
fûe
->
«me
);

117 i‡(
îr
 =
NGX_ENOSYS
) {

118 
ngx_fûe_aio
 = 0;

119  
	`ngx_ªad_fûe
(
fûe
, 
buf
, 
size
, 
off£t
);

122  
NGX_ERROR
;

123 
	}
}

127 
	$ngx_fûe_aio_evít_h™dÀr
(
ngx_evít_t
 *
ev
)

129 
ngx_evít_aio_t
 *
aio
;

131 
aio
 = 
ev
->
d©a
;

133 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

134 "aiÿevíàh™dÀ∏fd:%d %V", 
aio
->
fd
, &aio->
fûe
->
«me
);

136 
aio
->
	`h™dÀr
(
ev
);

137 
	}
}

	@src/os/unix/ngx_linux_config.h

8 #i‚de‡
_NGX_LINUX_CONFIG_H_INCLUDED_


9 
	#_NGX_LINUX_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_GNU_SOURCE


13 
	#_GNU_SOURCE


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<sys/vfs.h
>

34 
	~<sys/uio.h
>

35 
	~<sys/°©.h
>

36 
	~<f˙é.h
>

38 
	~<sys/waô.h
>

39 
	~<sys/mm™.h
>

40 
	~<sys/ªsour˚.h
>

41 
	~<sched.h
>

43 
	~<sys/sockë.h
>

44 
	~<√töë/ö.h
>

45 
	~<√töë/t˝.h
>

46 
	~<¨∑/öë.h
>

47 
	~<√tdb.h
>

48 
	~<sys/un.h
>

50 
	~<time.h
>

51 
	~<mÆloc.h
>

52 
	~<limôs.h
>

53 
	~<sys/io˘l.h
>

54 
	~<sys/sys˘l.h
>

55 
	~<¸y±.h
>

56 
	~<sys/ut¢ame.h
>

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_SYS_PRCTL_H
)

68 
	~<sys/¥˘l.h
>

72 #i‡(
NGX_HAVE_SENDFILE64
)

73 
	~<sys/£ndfûe.h
>

75 
ssize_t
 
£ndfûe
(
s
, 
fd
, 
öt32_t
 *
off£t
, 
size_t
 
size
);

76 
	#NGX_SENDFILE_LIMIT
 0x80000000

	)

80 #i‡(
NGX_HAVE_POLL
 || 
NGX_HAVE_RTSIG
)

81 
	~<pﬁl.h
>

85 #i‡(
NGX_HAVE_EPOLL
)

86 
	~<sys/ïﬁl.h
>

90 #i‡(
NGX_HAVE_FILE_AIO
)

91 
	~<sys/sysˇŒ.h
>

92 
	~<löux/aio_abi.h
>

93 
iocb
 
	tngx_aiocb_t
;

97 
	#NGX_LISTEN_BACKLOG
 511

	)

100 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


102 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

106 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


107 
	#NGX_HAVE_INHERITED_NONBLOCK
 0

	)

111 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

112 
	#ngx_debug_öô
()

	)

115 **
ívú⁄
;

	@src/os/unix/ngx_linux_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
u_ch¨
 
	gngx_löux_kîn_o°y≥
[50];

13 
u_ch¨
 
	gngx_löux_kîn_o§ñó£
[50];

15 
	gngx_löux_πsig_max
;

18 
ngx_os_io_t
 
	gngx_löux_io
 = {

19 
ngx_unix_ªcv
,

20 
ngx_ªadv_chaö
,

21 
ngx_udp_unix_ªcv
,

22 
ngx_unix_£nd
,

23 #i‡(
NGX_HAVE_SENDFILE
)

24 
ngx_löux_£ndfûe_chaö
,

25 
NGX_IO_SENDFILE


27 
ngx_wrôev_chaö
,

33 
ngx_öt_t


34 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

36 
ut¢ame
 
u
;

38 i‡(
	`u«me
(&
u
) == -1) {

39 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
, "uname() failed");

40  
NGX_ERROR
;

43 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o°y≥
, (
u_ch¨
 *Ë
u
.
sy¢ame
,

44 (
ngx_löux_kîn_o°y≥
));

46 (Ë
	`ngx_˝y°∫
(
ngx_löux_kîn_o§ñó£
, (
u_ch¨
 *Ë
u
.
ªÀa£
,

47 (
ngx_löux_kîn_o§ñó£
));

49 #i‡(
NGX_HAVE_RTSIG
)

51 
«me
[2];

52 
size_t
 
Àn
;

53 
ngx_îr_t
 
îr
;

55 
«me
[0] = 
CTL_KERN
;

56 
«me
[1] = 
KERN_RTSIGMAX
;

57 
Àn
 = (
ngx_löux_πsig_max
);

59 i‡(
	`sys˘l
(
«me
, 2, &
ngx_löux_πsig_max
, &
Àn
, 
NULL
, 0) == -1) {

60 
îr
 = 
ngx_î∫o
;

62 i‡(
îr
 !
NGX_ENOTDIR
 &&Éº !
NGX_ENOSYS
) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
,

66  
NGX_ERROR
;

69 
ngx_löux_πsig_max
 = 0;

75 
ngx_os_io
 = 
ngx_löux_io
;

77  
NGX_OK
;

78 
	}
}

82 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

84 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

85 
ngx_löux_kîn_o°y≥
, 
ngx_löux_kîn_o§ñó£
);

87 #i‡(
NGX_HAVE_RTSIG
)

88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "sysctl(KERN_RTSIGMAX): %d",

89 
ngx_löux_πsig_max
);

91 
	}
}

	@src/os/unix/ngx_linux_sendfile_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

27 
	#NGX_SENDFILE_LIMIT
 2147483647L

	)

30 #i‡(
IOV_MAX
 > 64)

31 
	#NGX_HEADERS
 64

	)

33 
	#NGX_HEADERS
 
IOV_MAX


	)

37 
ngx_chaö_t
 *

38 
	$ngx_löux_£ndfûe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

40 
rc
, 
t˝_nodñay
;

41 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
£¡
, 
Âªv
;

42 
u_ch¨
 *
¥ev
;

43 
size_t
 
fûe_size
;

44 
ngx_îr_t
 
îr
;

45 
ngx_buf_t
 *
fûe
;

46 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

47 
ngx_¨øy_t
 
hódî
;

48 
ngx_evít_t
 *
wev
;

49 
ngx_chaö_t
 *
˛
;

50 
iovec
 *
iov
, 
hódîs
[
NGX_HEADERS
];

51 #i‡(
NGX_HAVE_SENDFILE64
)

52 
off_t
 
off£t
;

54 
öt32_t
 
off£t
;

57 
wev
 = 
c
->
wrôe
;

59 i‡(!
wev
->
ªady
) {

60  
ö
;

66 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
)) {

67 
limô
 = 
NGX_SENDFILE_LIMIT
 - 
ngx_∑gesize
;

71 
£nd
 = 0;

73 
hódî
.
ñts
 = 
hódîs
;

74 
hódî
.
size
 = (
iovec
);

75 
hódî
.
«Œoc
 = 
NGX_HEADERS
;

76 
hódî
.
poﬁ
 = 
c
->pool;

79 
fûe
 = 
NULL
;

80 
fûe_size
 = 0;

81 
eöå
 = 0;

82 
com∂ëe
 = 0;

83 
¥ev_£nd
 = 
£nd
;

85 
hódî
.
√…s
 = 0;

87 
¥ev
 = 
NULL
;

88 
iov
 = 
NULL
;

92 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

94 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

99 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
Ë&& !˛->buf->
ö_fûe
) {

100 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

103 
˛
->
buf
->
ãmp‹¨y
,

104 
˛
->
buf
->
ªcy˛ed
,

105 
˛
->
buf
->
ö_fûe
,

106 
˛
->
buf
->
°¨t
,

107 
˛
->
buf
->
pos
,

108 
˛
->
buf
->
œ°
,

109 
˛
->
buf
->
fûe
,

110 
˛
->
buf
->
fûe_pos
,

111 
˛
->
buf
->
fûe_œ°
);

113 
	`ngx_debug_poöt
();

115  
NGX_CHAIN_ERROR
;

119 i‡(!
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

123 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

125 i‡(
£nd
 + 
size
 > 
limô
) {

126 
size
 = 
limô
 - 
£nd
;

129 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

130 
iov
->
iov_Àn
 +(
size_t
Ë
size
;

133 i‡(
hódî
.
√…s
 >
IOV_MAX
) {

137 
iov
 = 
	`ngx_¨øy_push
(&
hódî
);

138 i‡(
iov
 =
NULL
) {

139  
NGX_CHAIN_ERROR
;

142 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

143 
iov
->
iov_Àn
 = (
size_t
Ë
size
;

146 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

147 
£nd
 +
size
;

152 i‡(
c
->
t˝_n›ush
 =
NGX_TCP_NOPUSH_UNSET


153 && 
hódî
.
√…s
 != 0

154 && 
˛


155 && 
˛
->
buf
->
ö_fûe
)

159 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_SET
) {

161 
t˝_nodñay
 = 0;

163 i‡(
	`£tsock›t
(
c
->
fd
, 
IPPROTO_TCP
, 
TCP_NODELAY
,

164 (c⁄° *Ë&
t˝_nodñay
, ()) == -1)

166 
îr
 = 
ngx_î∫o
;

174 i‡(
îr
 !
NGX_EINTR
) {

175 
wev
->
îr‹
 = 1;

176 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

178  
NGX_CHAIN_ERROR
;

182 
c
->
t˝_nodñay
 = 
NGX_TCP_NODELAY_UNSET
;

184 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_HTTP
, 
c
->
log
, 0,

189 i‡(
c
->
t˝_nodñay
 =
NGX_TCP_NODELAY_UNSET
) {

191 i‡(
	`ngx_t˝_n›ush
(
c
->
fd
Ë=
NGX_ERROR
) {

192 
îr
 = 
ngx_î∫o
;

199 i‡(
îr
 !
NGX_EINTR
) {

200 
wev
->
îr‹
 = 1;

201 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
,

202 
ngx_t˝_n›ush_n
 " failed");

203  
NGX_CHAIN_ERROR
;

207 
c
->
t˝_n›ush
 = 
NGX_TCP_NOPUSH_SET
;

209 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

217 i‡(
hódî
.
√…s
 =0 && 
˛
 && cl->
buf
->
ö_fûe
 && 
£nd
 < 
limô
) {

218 
fûe
 = 
˛
->
buf
;

223 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

225 i‡(
£nd
 + 
size
 > 
limô
) {

226 
size
 = 
limô
 - 
£nd
;

228 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

229 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

231 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

232 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

236 
fûe_size
 +(
size_t
Ë
size
;

237 
£nd
 +
size
;

238 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

239 
˛
 = cl->
√xt
;

241 } 
˛


242 && 
˛
->
buf
->
ö_fûe


243 && 
£nd
 < 
limô


244 && 
fûe
->fûe->
fd
 =
˛
->
buf
->file->fd

245 && 
Âªv
 =
˛
->
buf
->
fûe_pos
);

248 i‡(
fûe
) {

250 i‡(
fûe_size
 == 0) {

251 
	`ngx_debug_poöt
();

252  
NGX_CHAIN_ERROR
;

255 #i‡(
NGX_HAVE_SENDFILE64
)

256 
off£t
 = 
fûe
->
fûe_pos
;

258 
off£t
 = (
öt32_t
Ë
fûe
->
fûe_pos
;

261 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

262 "£ndfûe: @%O %uz", 
fûe
->
fûe_pos
, 
fûe_size
);

264 
rc
 = 
	`£ndfûe
(
c
->
fd
, 
fûe
->fûe->fd, &
off£t
, 
fûe_size
);

266 i‡(
rc
 == -1) {

267 
îr
 = 
ngx_î∫o
;

269 
îr
) {

270 
NGX_EAGAIN
:

273 
NGX_EINTR
:

274 
eöå
 = 1;

278 
wev
->
îr‹
 = 1;

279 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfile() failed");

280  
NGX_CHAIN_ERROR
;

283 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

287 
£¡
 = 
rc
 > 0 ?Ñc : 0;

289 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

291 
rc
, 
fûe
->
fûe_pos
, 
£¡
, 
fûe_size
);

294 
rc
 = 
	`wrôev
(
c
->
fd
, 
hódî
.
ñts
, hódî.
√…s
);

296 i‡(
rc
 == -1) {

297 
îr
 = 
ngx_î∫o
;

299 
îr
) {

300 
NGX_EAGAIN
:

303 
NGX_EINTR
:

304 
eöå
 = 1;

308 
wev
->
îr‹
 = 1;

309 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

310  
NGX_CHAIN_ERROR
;

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

317 
£¡
 = 
rc
 > 0 ?Ñc : 0;

319 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %O", 
£¡
);

322 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

323 
com∂ëe
 = 1;

326 
c
->
£¡
 += sent;

328 
˛
 = 
ö
; cl; c»˛->
√xt
) {

330 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

334 i‡(
£¡
 == 0) {

338 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

340 i‡(
£¡
 >
size
) {

341 
£¡
 -
size
;

343 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

344 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

347 i‡(
˛
->
buf
->
ö_fûe
) {

348 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

354 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

355 
˛
->
buf
->
pos
 +(
size_t
Ë
£¡
;

358 i‡(
˛
->
buf
->
ö_fûe
) {

359 
˛
->
buf
->
fûe_pos
 +
£¡
;

365 i‡(
eöå
) {

369 i‡(!
com∂ëe
) {

370 
wev
->
ªady
 = 0;

371  
˛
;

374 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

375  
˛
;

378 
ö
 = 
˛
;

380 
	}
}

	@src/os/unix/ngx_os.h

8 #i‚de‡
_NGX_OS_H_INCLUDED_


9 
	#_NGX_OS_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_IO_SENDFILE
 1

	)

19 
	$ssize_t
 (*
	tngx_ªcv_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

20 
	$ssize_t
 (*
	tngx_ªcv_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
);

21 
	$ssize_t
 (*
	tngx_£nd_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tu_ch¨
 *
	tbuf
, 
	tsize_t
 
	tsize
);

22 
ngx_chaö_t
 *(*
	tngx_£nd_chaö_±
)(
	tngx_c⁄√˘i⁄_t
 *
	tc
, 
	tngx_chaö_t
 *
	tö
,

23 
	toff_t
 
	tlimô
);

26 
ngx_ªcv_±
 
ªcv
;

27 
ngx_ªcv_chaö_±
 
ªcv_chaö
;

28 
ngx_ªcv_±
 
udp_ªcv
;

29 
ngx_£nd_±
 
£nd
;

30 
ngx_£nd_chaö_±
 
£nd_chaö
;

31 
ngx_uöt_t
 
Êags
;

32 } 
	tngx_os_io_t
;

35 
ngx_öt_t
 
	`ngx_os_öô
(
ngx_log_t
 *
log
);

36 
	`ngx_os_°©us
(
ngx_log_t
 *
log
);

37 
ngx_öt_t
 
	`ngx_os_•ecific_öô
(
ngx_log_t
 *
log
);

38 
	`ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
);

39 
ngx_öt_t
 
	`ngx_d´m⁄
(
ngx_log_t
 *
log
);

40 
ngx_öt_t
 
	`ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
sig
,Çgx_öt_à
pid
);

43 
ssize_t
 
	`ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

44 
ssize_t
 
	`ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
íåy
);

45 
ssize_t
 
	`ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

46 
ssize_t
 
	`ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

47 
ngx_chaö_t
 *
	`ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

48 
off_t
 
limô
);

50 #i‡(
NGX_HAVE_AIO
)

51 
ssize_t
 
	`ngx_aio_ªad
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

52 
ssize_t
 
	`ngx_aio_ªad_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
˛
);

53 
ssize_t
 
	`ngx_aio_wrôe
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
);

54 
ngx_chaö_t
 *
	`ngx_aio_wrôe_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

55 
off_t
 
limô
);

59 
ngx_os_io_t
 
ngx_os_io
;

60 
ngx_öt_t
 
ngx_n˝u
;

61 
ngx_öt_t
 
ngx_max_sockës
;

62 
ngx_uöt_t
 
ngx_öhîôed_n⁄blockög
;

63 
ngx_uöt_t
 
ngx_t˝_nodñay_™d_t˝_n›ush
;

66 #i‡(
NGX_FREEBSD
)

67 
	~<ngx_‰ìbsd.h
>

70 #ñi‡(
NGX_LINUX
)

71 
	~<ngx_löux.h
>

74 #ñi‡(
NGX_SOLARIS
)

75 
	~<ngx_sﬁ¨is.h
>

78 #ñi‡(
NGX_DARWIN
)

79 
	~<ngx_d¨wö.h
>

	@src/os/unix/ngx_posix_config.h

8 #i‚de‡
_NGX_POSIX_CONFIG_H_INCLUDED_


9 
	#_NGX_POSIX_CONFIG_H_INCLUDED_


	)

12 #i‡(
NGX_HPUX
)

13 
	#_XOPEN_SOURCE


	)

14 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

15 
	#_HPUX_ALT_XOPEN_SOCKET_API


	)

19 #i‡(
NGX_TRU64
)

20 
	#_REENTRANT


	)

24 #ifde‡
__CYGWIN__


25 
	#timez⁄ev¨


	)

26 
	#NGX_BROKEN_SCM_RIGHTS
 1

	)

30 
	~<sys/ty≥s.h
>

31 
	~<sys/time.h
>

32 #i‡(
NGX_HAVE_UNISTD_H
)

33 
	~<uni°d.h
>

35 #i‡(
NGX_HAVE_INTTYPES_H
)

36 
	~<öây≥s.h
>

38 
	~<°d¨g.h
>

39 
	~<°ddef.h
>

40 
	~<°dio.h
>

41 
	~<°dlib.h
>

42 
	~<î∫o.h
>

43 
	~<°rög.h
>

44 
	~<sig«l.h
>

45 
	~<pwd.h
>

46 
	~<gΩ.h
>

47 
	~<dúít.h
>

48 
	~<glob.h
>

49 
	~<time.h
>

50 #i‡(
NGX_HAVE_SYS_PARAM_H
)

51 
	~<sys/∑øm.h
>

53 #i‡(
NGX_HAVE_SYS_MOUNT_H
)

54 
	~<sys/mou¡.h
>

56 #i‡(
NGX_HAVE_SYS_STATVFS_H
)

57 
	~<sys/°©vfs.h
>

60 #i‡(
NGX_HAVE_SYS_FILIO_H
)

61 
	~<sys/fûio.h
>

63 
	~<sys/io˘l.h
>

65 
	~<sys/uio.h
>

66 
	~<sys/°©.h
>

67 
	~<f˙é.h
>

69 
	~<sys/waô.h
>

70 
	~<sys/mm™.h
>

71 
	~<sys/ªsour˚.h
>

72 
	~<sched.h
>

74 
	~<sys/sockë.h
>

75 
	~<√töë/ö.h
>

76 
	~<√töë/t˝.h
>

77 
	~<¨∑/öë.h
>

78 
	~<√tdb.h
>

79 
	~<sys/un.h
>

81 #i‡(
NGX_HAVE_LIMITS_H
)

82 
	~<limôs.h
>

85 #ifde‡
__CYGWIN__


86 
	~<mÆloc.h
>

89 #i‡(
NGX_HAVE_CRYPT_H
)

90 
	~<¸y±.h
>

94 #i‚de‡
IOV_MAX


95 
	#IOV_MAX
 16

	)

99 
	~<ngx_auto_c⁄fig.h
>

102 #i‡(
NGX_HAVE_POSIX_SEM
)

103 
	~<£m≠h‹e.h
>

107 #i‡(
NGX_HAVE_POLL
)

108 
	~<pﬁl.h
>

112 #i‡(
NGX_HAVE_KQUEUE
)

113 
	~<sys/evít.h
>

117 #i‡(
NGX_HAVE_DEVPOLL
)

118 
	~<sys/io˘l.h
>

119 
	~<sys/devpﬁl.h
>

123 #i‡(
NGX_HAVE_FILE_AIO
)

124 
	~<aio.h
>

125 
aiocb
 
	tngx_aiocb_t
;

129 
	#NGX_LISTEN_BACKLOG
 511

	)

131 
	#ngx_debug_öô
()

	)

134 #i‡(
__FªeBSD__
Ë&& (
__FªeBSD_vîsi⁄
 < 400017)

136 
	~<sys/∑øm.h
>

142 #unde‡
CMSG_SPACE


143 
	#CMSG_SPACE
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ ALIGN÷))

	)

145 #unde‡
CMSG_LEN


146 
	#CMSG_LEN
(
l
Ë(
	`ALIGN
((
cmsghdr
)Ë+ (l))

	)

148 #unde‡
CMSG_DATA


149 
	#CMSG_DATA
(
cmsg
Ë((
u_ch¨
 *)(cmsgË+ 
	`ALIGN
((
cmsghdr
)))

	)

154 **
ívú⁄
;

	@src/os/unix/ngx_posix_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngöx.h
>

13 
ngx_öt_t
 
	gngx_n˝u
;

14 
ngx_öt_t
 
	gngx_max_sockës
;

15 
ngx_uöt_t
 
	gngx_öhîôed_n⁄blockög
;

16 
ngx_uöt_t
 
	gngx_t˝_nodñay_™d_t˝_n›ush
;

19 
æimô
 
	gæmt
;

22 
ngx_os_io_t
 
	gngx_os_io
 = {

23 
ngx_unix_ªcv
,

24 
ngx_ªadv_chaö
,

25 
ngx_udp_unix_ªcv
,

26 
ngx_unix_£nd
,

27 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_öô
(
ngx_log_t
 *
log
)

35 
ngx_uöt_t
 
n
;

37 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

38 i‡(
	`ngx_os_•ecific_öô
(
log
Ë!
NGX_OK
) {

39  
NGX_ERROR
;

43 
	`ngx_öô_£çro˘ôÀ
(
log
);

45 
ngx_∑gesize
 = 
	`gë∑gesize
();

46 
ngx_ˇchñöe_size
 = 
NGX_CPU_CACHE_LINE
;

48 
n
 = 
ngx_∑gesize
;Ç >>1; 
ngx_∑gesize_shi·
++) { }

50 #i‡(
NGX_HAVE_SC_NPROCESSORS_ONLN
)

51 i‡(
ngx_n˝u
 == 0) {

52 
ngx_n˝u
 = 
	`sysc⁄f
(
_SC_NPROCESSORS_ONLN
);

56 i‡(
ngx_n˝u
 < 1) {

57 
ngx_n˝u
 = 1;

60 
	`ngx_˝uöfo
();

62 i‡(
	`gëæimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

63 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
î∫o
,

65  
NGX_ERROR
;

68 
ngx_max_sockës
 = (
ngx_öt_t
Ë
æmt
.
æim_cur
;

70 #i‡(
NGX_HAVE_INHERITED_NONBLOCK
 || 
NGX_HAVE_ACCEPT4
)

71 
ngx_öhîôed_n⁄blockög
 = 1;

73 
ngx_öhîôed_n⁄blockög
 = 0;

76 
	`§™dom
(
	`ngx_time
());

78  
NGX_OK
;

79 
	}
}

83 
	$ngx_os_°©us
(
ngx_log_t
 *
log
)

85 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, 
NGINX_VER
);

87 #ifde‡
NGX_COMPILER


88 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "buûàby " 
NGX_COMPILER
);

91 #i‡(
NGX_HAVE_OS_SPECIFIC_INIT
)

92 
	`ngx_os_•ecific_°©us
(
log
);

95 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

97 
æmt
.
æim_cur
,Ñlmt.
æim_max
);

98 
	}
}

103 
ngx_öt_t


104 
	$ngx_posix_po°_c⁄f_öô
(
ngx_log_t
 *
log
)

106 
ngx_fd_t
 
µ
[2];

108 i‡(
	`pùe
(
µ
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
, "pipe() failed");

110  
NGX_ERROR
;

113 i‡(
	`dup2
(
µ
[1], 
STDERR_FILENO
) == -1) {

114 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "dup2(STDERR) failed");

115  
NGX_ERROR
;

118 i‡(
µ
[1] > 
STDERR_FILENO
) {

119 i‡(
	`˛o£
(
µ
[1]) == -1) {

120 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
î∫o
, "close() failed");

121  
NGX_ERROR
;

125  
NGX_OK
;

126 
	}
}

	@src/os/unix/ngx_process.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

15 
	msigno
;

16 *
	msig«me
;

17 *
	m«me
;

18 (*
	mh™dÀr
)(
	msigno
);

19 } 
	tngx_sig«l_t
;

23 
ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

24 
ngx_sig«l_h™dÀr
(
signo
);

25 
ngx_¥o˚ss_gë_°©us
();

26 
ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
);

29 
	gngx_¨gc
;

30 **
	gngx_¨gv
;

31 **
	gngx_os_¨gv
;

33 
ngx_öt_t
 
	gngx_¥o˚ss_¶Ÿ
;

34 
ngx_sockë_t
 
	gngx_ch™√l
;

35 
ngx_öt_t
 
	gngx_œ°_¥o˚ss
;

36 
ngx_¥o˚ss_t
 
	gngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

39 
ngx_sig«l_t
 
	gsig«ls
[] = {

40 { 
ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

41 "SIG" 
ngx_vÆue
(
NGX_RECONFIGURE_SIGNAL
),

43 
ngx_sig«l_h™dÀr
 },

45 { 
ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
),

46 "SIG" 
ngx_vÆue
(
NGX_REOPEN_SIGNAL
),

48 
ngx_sig«l_h™dÀr
 },

50 { 
ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
),

51 "SIG" 
ngx_vÆue
(
NGX_NOACCEPT_SIGNAL
),

53 
ngx_sig«l_h™dÀr
 },

55 { 
ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
),

56 "SIG" 
ngx_vÆue
(
NGX_TERMINATE_SIGNAL
),

58 
ngx_sig«l_h™dÀr
 },

60 { 
ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

61 "SIG" 
ngx_vÆue
(
NGX_SHUTDOWN_SIGNAL
),

63 
ngx_sig«l_h™dÀr
 },

65 { 
ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

66 "SIG" 
ngx_vÆue
(
NGX_CHANGEBIN_SIGNAL
),

68 
ngx_sig«l_h™dÀr
 },

70 { 
SIGALRM
, "SIGALRM", "", 
ngx_sig«l_h™dÀr
 },

72 { 
SIGINT
, "SIGINT", "", 
ngx_sig«l_h™dÀr
 },

74 { 
SIGIO
, "SIGIO", "", 
ngx_sig«l_h™dÀr
 },

76 { 
SIGCHLD
, "SIGCHLD", "", 
ngx_sig«l_h™dÀr
 },

78 { 
SIGSYS
, "SIGSYS, SIG_IGN", "", 
SIG_IGN
 },

80 { 
SIGPIPE
, "SIGPIPE, SIG_IGN", "", 
SIG_IGN
 },

82 { 0, 
NULL
, "", NULL }

86 
ngx_pid_t


87 
	$ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
,

88 *
«me
, 
ngx_öt_t
 
ª•awn
)

90 
u_l⁄g
 
⁄
;

91 
ngx_pid_t
 
pid
;

92 
ngx_öt_t
 
s
;

94 i‡(
ª•awn
 >= 0) {

95 
s
 = 
ª•awn
;

98 
s
 = 0; s < 
ngx_œ°_¥o˚ss
; s++) {

99 i‡(
ngx_¥o˚s£s
[
s
].
pid
 == -1) {

104 i‡(
s
 =
NGX_MAX_PROCESSES
) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

107 
NGX_MAX_PROCESSES
);

108  
NGX_INVALID_PID
;

113 i‡(
ª•awn
 !
NGX_PROCESS_DETACHED
) {

117 i‡(
	`sockë∑ú
(
AF_UNIX
, 
SOCK_STREAM
, 0, 
ngx_¥o˚s£s
[
s
].
ch™√l
) == -1)

119 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

120 "sockë∑ú(ËÁûed whûê•awnög \"%s\"", 
«me
);

121  
NGX_INVALID_PID
;

124 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

126 
ngx_¥o˚s£s
[
s
].
ch™√l
[0],

127 
ngx_¥o˚s£s
[
s
].
ch™√l
[1]);

129 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0]) == -1) {

130 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

131 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

132 
«me
);

133 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

134  
NGX_INVALID_PID
;

137 i‡(
	`ngx_n⁄blockög
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1]) == -1) {

138 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

139 
ngx_n⁄blockög_n
 " failed while spawning \"%s\"",

140 
«me
);

141 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

142  
NGX_INVALID_PID
;

145 
⁄
 = 1;

146 i‡(
	`io˘l
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
FIOASYNC
, &
⁄
) == -1) {

147 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

148 "io˘l(FIOASYNCËÁûed whûê•awnög \"%s\"", 
«me
);

149 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

150  
NGX_INVALID_PID
;

153 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETOWN
, 
ngx_pid
) == -1) {

154 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

155 "f˙é(F_SETOWNËÁûed whûê•awnög \"%s\"", 
«me
);

156 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

157  
NGX_INVALID_PID
;

160 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[0], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

161 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

163 
«me
);

164 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

165  
NGX_INVALID_PID
;

168 i‡(
	`f˙é
(
ngx_¥o˚s£s
[
s
].
ch™√l
[1], 
F_SETFD
, 
FD_CLOEXEC
) == -1) {

169 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

171 
«me
);

172 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

173  
NGX_INVALID_PID
;

176 
ngx_ch™√l
 = 
ngx_¥o˚s£s
[
s
].
ch™√l
[1];

179 
ngx_¥o˚s£s
[
s
].
ch™√l
[0] = -1;

180 
ngx_¥o˚s£s
[
s
].
ch™√l
[1] = -1;

183 
ngx_¥o˚ss_¶Ÿ
 = 
s
;

186 
pid
 = 
	`f‹k
();

188 
pid
) {

191 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

192 "f‹k(ËÁûed whûê•awnög \"%s\"", 
«me
);

193 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
s
].
ch™√l
, 
cy˛e
->
log
);

194  
NGX_INVALID_PID
;

197 
ngx_pid
 = 
	`ngx_gëpid
();

198 
	`¥oc
(
cy˛e
, 
d©a
);

205 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "°¨à%†%P", 
«me
, 
pid
);

207 
ngx_¥o˚s£s
[
s
].
pid
 =Öid;

208 
ngx_¥o˚s£s
[
s
].
exôed
 = 0;

210 i‡(
ª•awn
 >= 0) {

211  
pid
;

214 
ngx_¥o˚s£s
[
s
].
¥oc
 =Öroc;

215 
ngx_¥o˚s£s
[
s
].
d©a
 = data;

216 
ngx_¥o˚s£s
[
s
].
«me
 =Çame;

217 
ngx_¥o˚s£s
[
s
].
exôög
 = 0;

219 
ª•awn
) {

221 
NGX_PROCESS_NORESPAWN
:

222 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

223 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

224 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

227 
NGX_PROCESS_JUST_SPAWN
:

228 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

229 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

230 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

233 
NGX_PROCESS_RESPAWN
:

234 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

235 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

236 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

239 
NGX_PROCESS_JUST_RESPAWN
:

240 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 1;

241 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 1;

242 
ngx_¥o˚s£s
[
s
].
dëached
 = 0;

245 
NGX_PROCESS_DETACHED
:

246 
ngx_¥o˚s£s
[
s
].
ª•awn
 = 0;

247 
ngx_¥o˚s£s
[
s
].
ju°_•awn
 = 0;

248 
ngx_¥o˚s£s
[
s
].
dëached
 = 1;

252 i‡(
s
 =
ngx_œ°_¥o˚ss
) {

253 
ngx_œ°_¥o˚ss
++;

256  
pid
;

257 
	}
}

260 
ngx_pid_t


261 
	$ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
)

263  
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_execuã_¥oc
, 
˘x
, ctx->
«me
,

264 
NGX_PROCESS_DETACHED
);

265 
	}
}

269 
	$ngx_execuã_¥oc
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

271 
ngx_exec_˘x_t
 *
˘x
 = 
d©a
;

273 i‡(
	`execve
(
˘x
->
∑th
, ctx->
¨gv
, ctx->
ívp
) == -1) {

274 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

276 
˘x
->
«me
, ctx->
∑th
);

279 
	`exô
(1);

280 
	}
}

283 
ngx_öt_t


284 
	$ngx_öô_sig«ls
(
ngx_log_t
 *
log
)

286 
ngx_sig«l_t
 *
sig
;

287 
siga˘i⁄
 
ß
;

289 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

290 
	`ngx_memzîo
(&
ß
, (
siga˘i⁄
));

291 
ß
.
ß_h™dÀr
 = 
sig
->
h™dÀr
;

292 
	`sigem±y£t
(&
ß
.
ß_mask
);

293 i‡(
	`siga˘i⁄
(
sig
->
signo
, &
ß
, 
NULL
) == -1) {

294 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
log
, 
ngx_î∫o
,

295 "siga˘i⁄(%sËÁûed", 
sig
->
sig«me
);

296  
NGX_ERROR
;

300  
NGX_OK
;

301 
	}
}

305 
	$ngx_sig«l_h™dÀr
(
signo
)

307 *
a˘i⁄
;

308 
ngx_öt_t
 
ign‹e
;

309 
ngx_îr_t
 
îr
;

310 
ngx_sig«l_t
 *
sig
;

312 
ign‹e
 = 0;

314 
îr
 = 
ngx_î∫o
;

316 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

317 i‡(
sig
->
signo
 == signo) {

322 
	`ngx_time_sigß„_upd©e
();

324 
a˘i⁄
 = "";

326 
ngx_¥o˚ss
) {

328 
NGX_PROCESS_MASTER
:

329 
NGX_PROCESS_SINGLE
:

330 
signo
) {

332 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

333 
ngx_quô
 = 1;

334 
a˘i⁄
 = ", shutting down";

337 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

338 
SIGINT
:

339 
ngx_ãrmö©e
 = 1;

340 
a˘i⁄
 = ",Éxiting";

343 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

344 i‡(
ngx_d´m⁄ized
) {

345 
ngx_nﬂc˚±
 = 1;

346 
a˘i⁄
 = ", stopáccepting connections";

350 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

351 
ngx_ªc⁄figuª
 = 1;

352 
a˘i⁄
 = ",Ñeconfiguring";

355 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

356 
ngx_ª›í
 = 1;

357 
a˘i⁄
 = ",ÑeopeningÜogs";

360 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

361 i‡(
	`gëµid
(Ë> 1 || 
ngx_√w_bö¨y
 > 0) {

370 
a˘i⁄
 = ", ignoring";

371 
ign‹e
 = 1;

375 
ngx_ch™ge_bö¨y
 = 1;

376 
a˘i⁄
 = ", changing binary";

379 
SIGALRM
:

380 
ngx_sigÆrm
 = 1;

383 
SIGIO
:

384 
ngx_sigio
 = 1;

387 
SIGCHLD
:

388 
ngx_ª≠
 = 1;

394 
NGX_PROCESS_WORKER
:

395 
NGX_PROCESS_HELPER
:

396 
signo
) {

398 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
):

399 i‡(!
ngx_d´m⁄ized
) {

402 
ngx_debug_quô
 = 1;

403 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

404 
ngx_quô
 = 1;

405 
a˘i⁄
 = ", shutting down";

408 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

409 
SIGINT
:

410 
ngx_ãrmö©e
 = 1;

411 
a˘i⁄
 = ",Éxiting";

414 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

415 
ngx_ª›í
 = 1;

416 
a˘i⁄
 = ",ÑeopeningÜogs";

419 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
):

420 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
):

421 
SIGIO
:

422 
a˘i⁄
 = ", ignoring";

429 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

430 "sig«»%d (%sËª˚ived%s", 
signo
, 
sig
->
sig«me
, 
a˘i⁄
);

432 i‡(
ign‹e
) {

433 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
ngx_cy˛e
->
log
, 0,

439 i‡(
signo
 =
SIGCHLD
) {

440 
	`ngx_¥o˚ss_gë_°©us
();

443 
	`ngx_£t_î∫o
(
îr
);

444 
	}
}

448 
	$ngx_¥o˚ss_gë_°©us
()

450 
°©us
;

451 *
¥o˚ss
;

452 
ngx_pid_t
 
pid
;

453 
ngx_îr_t
 
îr
;

454 
ngx_öt_t
 
i
;

455 
ngx_uöt_t
 
⁄e
;

457 
⁄e
 = 0;

460 
pid
 = 
	`waôpid
(-1, &
°©us
, 
WNOHANG
);

462 i‡(
pid
 == 0) {

466 i‡(
pid
 == -1) {

467 
îr
 = 
ngx_î∫o
;

469 i‡(
îr
 =
NGX_EINTR
) {

473 i‡(
îr
 =
NGX_ECHILD
 && 
⁄e
) {

486 i‡(
îr
 =
NGX_ECHILD
) {

487 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
ngx_cy˛e
->
log
, 
îr
,

492 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 
îr
,

498 
⁄e
 = 1;

499 
¥o˚ss
 = "unknownÖrocess";

501 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

502 i‡(
ngx_¥o˚s£s
[
i
].
pid
 ==Öid) {

503 
ngx_¥o˚s£s
[
i
].
°©us
 = status;

504 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

505 
¥o˚ss
 = 
ngx_¥o˚s£s
[
i
].
«me
;

510 i‡(
	`WTERMSIG
(
°©us
)) {

511 #ifde‡
WCOREDUMP


512 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

514 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
),

515 
	`WCOREDUMP
(
°©us
) ? " (core dumped)" : "");

517 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

519 
¥o˚ss
, 
pid
, 
	`WTERMSIG
(
°©us
));

523 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0,

525 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

528 i‡(
	`WEXITSTATUS
(
°©us
Ë=2 && 
ngx_¥o˚s£s
[
i
].
ª•awn
) {

529 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

532 
¥o˚ss
, 
pid
, 
	`WEXITSTATUS
(
°©us
));

533 
ngx_¥o˚s£s
[
i
].
ª•awn
 = 0;

536 
	`ngx_u∆ock_muãxes
(
pid
);

538 
	}
}

542 
	$ngx_u∆ock_muãxes
(
ngx_pid_t
 
pid
)

544 
ngx_uöt_t
 
i
;

545 
ngx_shm_z⁄e_t
 *
shm_z⁄e
;

546 
ngx_li°_∑π_t
 *
∑π
;

547 
ngx_¶ab_poﬁ_t
 *
•
;

554 i‡(
ngx_ac˚±_muãx_±r
) {

555 (Ë
	`ngx_shmtx_f‹˚_u∆ock
(&
ngx_ac˚±_muãx
, 
pid
);

563 
∑π
 = (
ngx_li°_∑π_t
 *Ë&
ngx_cy˛e
->
sh¨ed_mem‹y
.part;

564 
shm_z⁄e
 = 
∑π
->
ñts
;

566 
i
 = 0; ; i++) {

568 i‡(
i
 >
∑π
->
√…s
) {

569 i‡(
∑π
->
√xt
 =
NULL
) {

572 
∑π
 =Ö¨t->
√xt
;

573 
shm_z⁄e
 = 
∑π
->
ñts
;

574 
i
 = 0;

577 
•
 = (
ngx_¶ab_poﬁ_t
 *Ë
shm_z⁄e
[
i
].
shm
.
addr
;

579 i‡(
	`ngx_shmtx_f‹˚_u∆ock
(&
•
->
muãx
, 
pid
)) {

580 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ngx_cy˛e
->
log
, 0,

582 &
shm_z⁄e
[
i
].
shm
.
«me
, 
pid
);

585 
	}
}

589 
	$ngx_debug_poöt
()

591 
ngx_c‹e_c⁄f_t
 *
ccf
;

593 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
ngx_cy˛e
->
c⁄f_˘x
,

594 
ngx_c‹e_moduÀ
);

596 
ccf
->
debug_poöts
) {

598 
NGX_DEBUG_POINTS_STOP
:

599 
	`øi£
(
SIGSTOP
);

602 
NGX_DEBUG_POINTS_ABORT
:

603 
	`ngx_ab‹t
();

605 
	}
}

608 
ngx_öt_t


609 
	$ngx_os_sig«l_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
, *
«me
, 
ngx_öt_t
 
pid
)

611 
ngx_sig«l_t
 *
sig
;

613 
sig
 = 
sig«ls
; sig->
signo
 != 0; sig++) {

614 i‡(
	`ngx_°rcmp
(
«me
, 
sig
->name) == 0) {

615 i‡(
	`kûl
(
pid
, 
sig
->
signo
) != -1) {

619 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

620 "kûl(%P, %dËÁûed", 
pid
, 
sig
->
signo
);

625 
	}
}

	@src/os/unix/ngx_process.h

8 #i‚de‡
_NGX_PROCESS_H_INCLUDED_


9 
	#_NGX_PROCESS_H_INCLUDED_


	)

12 
	~<ngx_£èfföôy.h
>

13 
	~<ngx_£çro˘ôÀ.h
>

16 
pid_t
 
	tngx_pid_t
;

18 
	#NGX_INVALID_PID
 -1

	)

20 (*
	tngx_•awn_¥oc_±
Ë(
	tngx_cy˛e_t
 *
	tcy˛e
, *
	td©a
);

23 
ngx_pid_t
 
pid
;

24 
°©us
;

25 
ngx_sockë_t
 
ch™√l
[2];

27 
ngx_•awn_¥oc_±
 
¥oc
;

28 *
d©a
;

29 *
«me
;

31 
ª•awn
:1;

32 
ju°_•awn
:1;

33 
dëached
:1;

34 
exôög
:1;

35 
exôed
:1;

36 } 
	tngx_¥o˚ss_t
;

40 *
∑th
;

41 *
«me
;

42 *c⁄° *
¨gv
;

43 *c⁄° *
ívp
;

44 } 
	tngx_exec_˘x_t
;

47 
	#NGX_MAX_PROCESSES
 1024

	)

49 
	#NGX_PROCESS_NORESPAWN
 -1

	)

50 
	#NGX_PROCESS_JUST_SPAWN
 -2

	)

51 
	#NGX_PROCESS_RESPAWN
 -3

	)

52 
	#NGX_PROCESS_JUST_RESPAWN
 -4

	)

53 
	#NGX_PROCESS_DETACHED
 -5

	)

56 
	#ngx_gëpid
 
gëpid


	)

58 #i‚de‡
ngx_log_pid


59 
	#ngx_log_pid
 
ngx_pid


	)

63 
ngx_pid_t
 
	`ngx_•awn_¥o˚ss
(
ngx_cy˛e_t
 *
cy˛e
,

64 
ngx_•awn_¥oc_±
 
¥oc
, *
d©a
, *
«me
, 
ngx_öt_t
 
ª•awn
);

65 
ngx_pid_t
 
	`ngx_execuã
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_exec_˘x_t
 *
˘x
);

66 
ngx_öt_t
 
	`ngx_öô_sig«ls
(
ngx_log_t
 *
log
);

67 
	`ngx_debug_poöt
();

70 #i‡(
NGX_HAVE_SCHED_YIELD
)

71 
	#ngx_sched_yõld
(Ë
	`sched_yõld
()

	)

73 
	#ngx_sched_yõld
(Ë
	`u¶ìp
(1)

	)

77 
ngx_¨gc
;

78 **
ngx_¨gv
;

79 **
ngx_os_¨gv
;

81 
ngx_pid_t
 
ngx_pid
;

82 
ngx_sockë_t
 
ngx_ch™√l
;

83 
ngx_öt_t
 
ngx_¥o˚ss_¶Ÿ
;

84 
ngx_öt_t
 
ngx_œ°_¥o˚ss
;

85 
ngx_¥o˚ss_t
 
ngx_¥o˚s£s
[
NGX_MAX_PROCESSES
];

	@src/os/unix/ngx_process_cycle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

11 
	~<ngx_ch™√l.h
>

14 
ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,

15 
ngx_öt_t
 
ty≥
);

16 
ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
,

17 
ngx_uöt_t
 
ª•awn
);

18 
ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
);

19 
ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
);

20 
ngx_uöt_t
 
ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
);

21 
ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

22 
ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

23 
ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
);

24 
ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
);

25 
ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
);

26 #i‡(
NGX_THREADS
)

27 
ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
);

28 
ngx_thªad_vÆue_t
 
ngx_w‹kî_thªad_cy˛e
(*
d©a
);

30 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
);

31 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

32 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
);

35 
ngx_uöt_t
 
	gngx_¥o˚ss
;

36 
ngx_pid_t
 
	gngx_pid
;

37 
ngx_uöt_t
 
	gngx_thªaded
;

39 
sig_©omic_t
 
	gngx_ª≠
;

40 
sig_©omic_t
 
	gngx_sigio
;

41 
sig_©omic_t
 
	gngx_sigÆrm
;

42 
sig_©omic_t
 
	gngx_ãrmö©e
;

43 
sig_©omic_t
 
	gngx_quô
;

44 
sig_©omic_t
 
	gngx_debug_quô
;

45 
ngx_uöt_t
 
	gngx_exôög
;

46 
sig_©omic_t
 
	gngx_ªc⁄figuª
;

47 
sig_©omic_t
 
	gngx_ª›í
;

49 
sig_©omic_t
 
	gngx_ch™ge_bö¨y
;

50 
ngx_pid_t
 
	gngx_√w_bö¨y
;

51 
ngx_uöt_t
 
	gngx_öhîôed
;

52 
ngx_uöt_t
 
	gngx_d´m⁄ized
;

54 
sig_©omic_t
 
	gngx_nﬂc˚±
;

55 
ngx_uöt_t
 
	gngx_nﬂc˚±ög
;

56 
ngx_uöt_t
 
	gngx_ª°¨t
;

59 #i‡(
NGX_THREADS
)

60 vﬁ©ûê
ngx_thªad_t
 
	gngx_thªads
[
NGX_MAX_THREADS
];

61 
ngx_öt_t
 
	gngx_thªads_n
;

65 
u_ch¨
 
	gma°î_¥o˚ss
[] = "masterÖrocess";

68 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_m™agî_˘x
 = {

69 
ngx_ˇche_m™agî_¥o˚ss_h™dÀr
, "cache managerÖrocess", 0

72 
ngx_ˇche_m™agî_˘x_t
 
	gngx_ˇche_lﬂdî_˘x
 = {

73 
ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
, "cacheÜoaderÖrocess", 60000

77 
ngx_cy˛e_t
 
	gngx_exô_cy˛e
;

78 
ngx_log_t
 
	gngx_exô_log
;

79 
ngx_›í_fûe_t
 
	gngx_exô_log_fûe
;

83 
	$ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

85 *
tôÀ
;

86 
u_ch¨
 *
p
;

87 
size_t
 
size
;

88 
ngx_öt_t
 
i
;

89 
ngx_uöt_t
 
n
, 
sigio
;

90 
sig£t_t
 
£t
;

91 
ôimîvÆ
 
ôv
;

92 
ngx_uöt_t
 
live
;

93 
ngx_m£c_t
 
dñay
;

94 
ngx_li°íög_t
 *
ls
;

95 
ngx_c‹e_c⁄f_t
 *
ccf
;

97 
	`sigem±y£t
(&
£t
);

98 
	`sigadd£t
(&
£t
, 
SIGCHLD
);

99 
	`sigadd£t
(&
£t
, 
SIGALRM
);

100 
	`sigadd£t
(&
£t
, 
SIGIO
);

101 
	`sigadd£t
(&
£t
, 
SIGINT
);

102 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

103 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

104 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_NOACCEPT_SIGNAL
));

105 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

106 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

107 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

109 i‡(
	`sig¥ocmask
(
SIG_BLOCK
, &
£t
, 
NULL
) == -1) {

110 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

114 
	`sigem±y£t
(&
£t
);

117 
size
 = (
ma°î_¥o˚ss
);

119 
i
 = 0; i < 
ngx_¨gc
; i++) {

120 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

123 
tôÀ
 = 
	`ngx_≤Æloc
(
cy˛e
->
poﬁ
, 
size
);

125 
p
 = 
	`ngx_˝ymem
(
tôÀ
, 
ma°î_¥o˚ss
, (master_process) - 1);

126 
i
 = 0; i < 
ngx_¨gc
; i++) {

127 *
p
++ = ' ';

128 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
], 
size
);

131 
	`ngx_£çro˘ôÀ
(
tôÀ
);

134 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

136 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

137 
NGX_PROCESS_RESPAWN
);

138 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

140 
ngx_√w_bö¨y
 = 0;

141 
dñay
 = 0;

142 
sigio
 = 0;

143 
live
 = 1;

146 i‡(
dñay
) {

147 i‡(
ngx_sigÆrm
) {

148 
sigio
 = 0;

149 
dñay
 *= 2;

150 
ngx_sigÆrm
 = 0;

153 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

154 "ãrmö©i⁄ cy˛e: %d", 
dñay
);

156 
ôv
.
ô_öãrvÆ
.
tv_£c
 = 0;

157 
ôv
.
ô_öãrvÆ
.
tv_u£c
 = 0;

158 
ôv
.
ô_vÆue
.
tv_£c
 = 
dñay
 / 1000;

159 
ôv
.
ô_vÆue
.
tv_u£c
 = (
dñay
 % 1000 ) * 1000;

161 i‡(
	`£tôimî
(
ITIMER_REAL
, &
ôv
, 
NULL
) == -1) {

162 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

167 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "sigsuspend");

169 
	`sigsu•íd
(&
£t
);

171 
	`ngx_time_upd©e
();

173 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

174 "wakêup, sigiÿ%i", 
sigio
);

176 i‡(
ngx_ª≠
) {

177 
ngx_ª≠
 = 0;

178 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "reap children");

180 
live
 = 
	`ngx_ª≠_chûdªn
(
cy˛e
);

183 i‡(!
live
 && (
ngx_ãrmö©e
 || 
ngx_quô
)) {

184 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

187 i‡(
ngx_ãrmö©e
) {

188 i‡(
dñay
 == 0) {

189 
dñay
 = 50;

192 i‡(
sigio
) {

193 
sigio
--;

197 
sigio
 = 
ccf
->
w‹kî_¥o˚s£s
 + 2 ;

199 i‡(
dñay
 > 1000) {

200 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
, 
SIGKILL
);

202 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

203 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
));

209 i‡(
ngx_quô
) {

210 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

211 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

213 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

214 
n
 = 0;Ç < 
cy˛e
->
li°íög
.
√…s
;Ç++) {

215 i‡(
	`ngx_˛o£_sockë
(
ls
[
n
].
fd
) == -1) {

216 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_sockë_î∫o
,

217 
ngx_˛o£_sockë_n
 " %V failed",

218 &
ls
[
n
].
addr_ãxt
);

221 
cy˛e
->
li°íög
.
√…s
 = 0;

226 i‡(
ngx_ªc⁄figuª
) {

227 
ngx_ªc⁄figuª
 = 0;

229 i‡(
ngx_√w_bö¨y
) {

230 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

231 
NGX_PROCESS_RESPAWN
);

232 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

233 
ngx_nﬂc˚±ög
 = 0;

238 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

240 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

241 i‡(
cy˛e
 =
NULL
) {

242 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

246 
ngx_cy˛e
 = 
cy˛e
;

247 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

248 
ngx_c‹e_moduÀ
);

249 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

250 
NGX_PROCESS_JUST_RESPAWN
);

251 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 1);

254 
	`ngx_m¶ìp
(100);

256 
live
 = 1;

257 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

258 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

261 i‡(
ngx_ª°¨t
) {

262 
ngx_ª°¨t
 = 0;

263 
	`ngx_°¨t_w‹kî_¥o˚s£s
(
cy˛e
, 
ccf
->
w‹kî_¥o˚s£s
,

264 
NGX_PROCESS_RESPAWN
);

265 
	`ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
cy˛e
, 0);

266 
live
 = 1;

269 i‡(
ngx_ª›í
) {

270 
ngx_ª›í
 = 0;

271 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

272 
	`ngx_ª›í_fûes
(
cy˛e
, 
ccf
->
u£r
);

273 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

274 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

277 i‡(
ngx_ch™ge_bö¨y
) {

278 
ngx_ch™ge_bö¨y
 = 0;

279 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "changing binary");

280 
ngx_√w_bö¨y
 = 
	`ngx_exec_√w_bö¨y
(
cy˛e
, 
ngx_¨gv
);

283 i‡(
ngx_nﬂc˚±
) {

284 
ngx_nﬂc˚±
 = 0;

285 
ngx_nﬂc˚±ög
 = 1;

286 
	`ngx_sig«l_w‹kî_¥o˚s£s
(
cy˛e
,

287 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
));

290 
	}
}

294 
	$ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
)

296 
ngx_uöt_t
 
i
;

298 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

300 
	`exô
(2);

303 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

304 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

305 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

307 
	`exô
(2);

313 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

315 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

317 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

319 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

320 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

321 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

325 
	`ngx_ma°î_¥o˚ss_exô
(
cy˛e
);

328 i‡(
ngx_ªc⁄figuª
) {

329 
ngx_ªc⁄figuª
 = 0;

330 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reconfiguring");

332 
cy˛e
 = 
	`ngx_öô_cy˛e
(cycle);

333 i‡(
cy˛e
 =
NULL
) {

334 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

338 
ngx_cy˛e
 = 
cy˛e
;

341 i‡(
ngx_ª›í
) {

342 
ngx_ª›í
 = 0;

343 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

344 
	`ngx_ª›í_fûes
(
cy˛e
, (
ngx_uid_t
) -1);

347 
	}
}

351 
	$ngx_°¨t_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
n
,Çgx_öt_à
ty≥
)

353 
ngx_öt_t
 
i
;

354 
ngx_ch™√l_t
 
ch
;

356 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "start workerÖrocesses");

358 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

360 
i
 = 0; i < 
n
; i++) {

362 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_w‹kî_¥o˚ss_cy˛e
,

363 (*Ë(
öçå_t
Ë
i
, "w‹kîÖro˚ss", 
ty≥
);

365 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

366 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

367 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

369 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

371 
	}
}

375 
	$ngx_°¨t_ˇche_m™agî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_uöt_t
 
ª•awn
)

377 
ngx_uöt_t
 
i
, 
m™agî
, 
lﬂdî
;

378 
ngx_∑th_t
 **
∑th
;

379 
ngx_ch™√l_t
 
ch
;

381 
m™agî
 = 0;

382 
lﬂdî
 = 0;

384 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

385 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

387 i‡(
∑th
[
i
]->
m™agî
) {

388 
m™agî
 = 1;

391 i‡(
∑th
[
i
]->
lﬂdî
) {

392 
lﬂdî
 = 1;

396 i‡(
m™agî
 == 0) {

400 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

401 &
ngx_ˇche_m™agî_˘x
, "cache managerÖrocess",

402 
ª•awn
 ? 
NGX_PROCESS_JUST_RESPAWN
 : 
NGX_PROCESS_RESPAWN
);

404 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

405 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

406 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

407 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

409 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

411 i‡(
lﬂdî
 == 0) {

415 
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_ˇche_m™agî_¥o˚ss_cy˛e
,

416 &
ngx_ˇche_lﬂdî_˘x
, "cacheÜoaderÖrocess",

417 
ª•awn
 ? 
NGX_PROCESS_JUST_SPAWN
 : 
NGX_PROCESS_NORESPAWN
);

419 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

420 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

421 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

422 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

424 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

425 
	}
}

429 
	$ngx_∑ss_›í_ch™√l
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_ch™√l_t
 *
ch
)

431 
ngx_öt_t
 
i
;

433 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

435 i‡(
i
 =
ngx_¥o˚ss_¶Ÿ


436 || 
ngx_¥o˚s£s
[
i
].
pid
 == -1

437 || 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] == -1)

442 
	`ngx_log_debug6
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

444 
ch
->
¶Ÿ
, ch->
pid
, ch->
fd
,

445 
i
, 
ngx_¥o˚s£s
[i].
pid
,

446 
ngx_¥o˚s£s
[
i
].
ch™√l
[0]);

450 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

451 
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

453 
	}
}

457 
	$ngx_sig«l_w‹kî_¥o˚s£s
(
ngx_cy˛e_t
 *
cy˛e
, 
signo
)

459 
ngx_öt_t
 
i
;

460 
ngx_îr_t
 
îr
;

461 
ngx_ch™√l_t
 
ch
;

463 #i‡(
NGX_BROKEN_SCM_RIGHTS
)

465 
ch
.
comm™d
 = 0;

469 
signo
) {

471 
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
):

472 
ch
.
comm™d
 = 
NGX_CMD_QUIT
;

475 
	`ngx_sig«l_vÆue
(
NGX_TERMINATE_SIGNAL
):

476 
ch
.
comm™d
 = 
NGX_CMD_TERMINATE
;

479 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
):

480 
ch
.
comm™d
 = 
NGX_CMD_REOPEN
;

484 
ch
.
comm™d
 = 0;

489 
ch
.
fd
 = -1;

492 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

494 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

496 
i
,

497 
ngx_¥o˚s£s
[
i
].
pid
,

498 
ngx_¥o˚s£s
[
i
].
exôög
,

499 
ngx_¥o˚s£s
[
i
].
exôed
,

500 
ngx_¥o˚s£s
[
i
].
dëached
,

501 
ngx_¥o˚s£s
[
i
].
ª•awn
,

502 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

504 i‡(
ngx_¥o˚s£s
[
i
].
dëached
 ||Çgx_¥o˚s£s[i].
pid
 == -1) {

508 i‡(
ngx_¥o˚s£s
[
i
].
ju°_•awn
) {

509 
ngx_¥o˚s£s
[
i
].
ju°_•awn
 = 0;

513 i‡(
ngx_¥o˚s£s
[
i
].
exôög


514 && 
signo
 =
	`ngx_sig«l_vÆue
(
NGX_SHUTDOWN_SIGNAL
))

519 i‡(
ch
.
comm™d
) {

520 i‡(
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
[0],

521 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
)

522 =
NGX_OK
)

524 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

525 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

532 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

533 "kû»(%P, %d)" , 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

535 i‡(
	`kûl
(
ngx_¥o˚s£s
[
i
].
pid
, 
signo
) == -1) {

536 
îr
 = 
ngx_î∫o
;

537 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

538 "kûl(%P, %dËÁûed", 
ngx_¥o˚s£s
[
i
].
pid
, 
signo
);

540 i‡(
îr
 =
NGX_ESRCH
) {

541 
ngx_¥o˚s£s
[
i
].
exôed
 = 1;

542 
ngx_¥o˚s£s
[
i
].
exôög
 = 0;

543 
ngx_ª≠
 = 1;

549 i‡(
signo
 !
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
)) {

550 
ngx_¥o˚s£s
[
i
].
exôög
 = 1;

553 
	}
}

556 
ngx_uöt_t


557 
	$ngx_ª≠_chûdªn
(
ngx_cy˛e_t
 *
cy˛e
)

559 
ngx_öt_t
 
i
, 
n
;

560 
ngx_uöt_t
 
live
;

561 
ngx_ch™√l_t
 
ch
;

562 
ngx_c‹e_c⁄f_t
 *
ccf
;

564 
ch
.
comm™d
 = 
NGX_CMD_CLOSE_CHANNEL
;

565 
ch
.
fd
 = -1;

567 
live
 = 0;

568 
i
 = 0; i < 
ngx_œ°_¥o˚ss
; i++) {

570 
	`ngx_log_debug7
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0,

572 
i
,

573 
ngx_¥o˚s£s
[
i
].
pid
,

574 
ngx_¥o˚s£s
[
i
].
exôög
,

575 
ngx_¥o˚s£s
[
i
].
exôed
,

576 
ngx_¥o˚s£s
[
i
].
dëached
,

577 
ngx_¥o˚s£s
[
i
].
ª•awn
,

578 
ngx_¥o˚s£s
[
i
].
ju°_•awn
);

580 i‡(
ngx_¥o˚s£s
[
i
].
pid
 == -1) {

584 i‡(
ngx_¥o˚s£s
[
i
].
exôed
) {

586 i‡(!
ngx_¥o˚s£s
[
i
].
dëached
) {

587 
	`ngx_˛o£_ch™√l
(
ngx_¥o˚s£s
[
i
].
ch™√l
, 
cy˛e
->
log
);

589 
ngx_¥o˚s£s
[
i
].
ch™√l
[0] = -1;

590 
ngx_¥o˚s£s
[
i
].
ch™√l
[1] = -1;

592 
ch
.
pid
 = 
ngx_¥o˚s£s
[
i
].pid;

593 
ch
.
¶Ÿ
 = 
i
;

595 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

596 i‡(
ngx_¥o˚s£s
[
n
].
exôed


597 || 
ngx_¥o˚s£s
[
n
].
pid
 == -1

598 || 
ngx_¥o˚s£s
[
n
].
ch™√l
[0] == -1)

603 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

605 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[
n
].pid);

609 
	`ngx_wrôe_ch™√l
(
ngx_¥o˚s£s
[
n
].
ch™√l
[0],

610 &
ch
, (
ngx_ch™√l_t
), 
cy˛e
->
log
);

614 i‡(
ngx_¥o˚s£s
[
i
].
ª•awn


615 && !
ngx_¥o˚s£s
[
i
].
exôög


616 && !
ngx_ãrmö©e


617 && !
ngx_quô
)

619 i‡(
	`ngx_•awn_¥o˚ss
(
cy˛e
, 
ngx_¥o˚s£s
[
i
].
¥oc
,

620 
ngx_¥o˚s£s
[
i
].
d©a
,

621 
ngx_¥o˚s£s
[
i
].
«me
, i)

622 =
NGX_INVALID_PID
)

624 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

626 
ngx_¥o˚s£s
[
i
].
«me
);

631 
ch
.
comm™d
 = 
NGX_CMD_OPEN_CHANNEL
;

632 
ch
.
pid
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].pid;

633 
ch
.
¶Ÿ
 = 
ngx_¥o˚ss_¶Ÿ
;

634 
ch
.
fd
 = 
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0];

636 
	`ngx_∑ss_›í_ch™√l
(
cy˛e
, &
ch
);

638 
live
 = 1;

643 i‡(
ngx_¥o˚s£s
[
i
].
pid
 =
ngx_√w_bö¨y
) {

645 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
,

646 
ngx_c‹e_moduÀ
);

648 i‡(
	`ngx_ª«me_fûe
((*Ë
ccf
->
ﬁdpid
.
d©a
,

649 (*Ë
ccf
->
pid
.
d©a
)

650 =
NGX_FILE_ERROR
)

652 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

653 
ngx_ª«me_fûe_n
 " %s backÅo %s failed "

655 
ccf
->
ﬁdpid
.
d©a
, ccf->
pid
.d©a, 
ngx_¨gv
[0]);

658 
ngx_√w_bö¨y
 = 0;

659 i‡(
ngx_nﬂc˚±ög
) {

660 
ngx_ª°¨t
 = 1;

661 
ngx_nﬂc˚±ög
 = 0;

665 i‡(
i
 =
ngx_œ°_¥o˚ss
 - 1) {

666 
ngx_œ°_¥o˚ss
--;

669 
ngx_¥o˚s£s
[
i
].
pid
 = -1;

672 } i‡(
ngx_¥o˚s£s
[
i
].
exôög
 || !ngx_¥o˚s£s[i].
dëached
) {

673 
live
 = 1;

677  
live
;

678 
	}
}

682 
	$ngx_ma°î_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

684 
ngx_uöt_t
 
i
;

686 
	`ngx_dñëe_pidfûe
(
cy˛e
);

688 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exit");

690 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

691 i‡(
ngx_moduÀs
[
i
]->
exô_ma°î
) {

692 
ngx_moduÀs
[
i
]->
	`exô_ma°î
(
cy˛e
);

696 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

705 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

707 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

708 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

710 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

711 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

712 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

713 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

715 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

717 
	`exô
(0);

718 
	}
}

722 
	$ngx_w‹kî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

724 
ngx_öt_t
 
w‹kî
 = (
öçå_t
Ë
d©a
;

726 
ngx_uöt_t
 
i
;

727 
ngx_c⁄√˘i⁄_t
 *
c
;

729 
ngx_¥o˚ss
 = 
NGX_PROCESS_WORKER
;

731 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, 
w‹kî
);

733 
	`ngx_£çro˘ôÀ
("workerÖrocess");

735 #i‡(
NGX_THREADS
)

737 
ngx_öt_t
 
n
;

738 
ngx_îr_t
 
îr
;

739 
ngx_c‹e_c⁄f_t
 *
ccf
;

741 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

743 i‡(
ngx_thªads_n
) {

744 i‡(
	`ngx_öô_thªads
(
ngx_thªads_n
, 
ccf
->
thªad_°ack_size
, 
cy˛e
)

745 =
NGX_ERROR
)

748 
	`exô
(2);

751 
îr
 = 
	`ngx_thªad_key_¸óã
(&
ngx_c‹e_és_key
);

752 i‡(
îr
 != 0) {

753 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

754 
ngx_thªad_key_¸óã_n
 " failed");

756 
	`exô
(2);

759 
n
 = 0;Ç < 
ngx_thªads_n
;Ç++) {

761 
ngx_thªads
[
n
].
cv
 = 
	`ngx_c⁄d_öô
(
cy˛e
->
log
);

763 i‡(
ngx_thªads
[
n
].
cv
 =
NULL
) {

765 
	`exô
(2);

768 i‡(
	`ngx_¸óã_thªad
((
ngx_tid_t
 *Ë&
ngx_thªads
[
n
].
tid
,

769 
ngx_w‹kî_thªad_cy˛e
,

770 (*Ë&
ngx_thªads
[
n
], 
cy˛e
->
log
)

774 
	`exô
(2);

783 i‡(
ngx_exôög
) {

785 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

787 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

791 i‡(
c
[
i
].
fd
 !-1 && c[i].
idÀ
) {

792 
c
[
i
].
˛o£
 = 1;

793 
c
[
i
].
ªad
->
	`h™dÀr
(c[i].read);

797 i‡(
ngx_evít_timî_rbåì
.
roŸ
 =ngx_evít_timî_rbåì.
£¡öñ
)

799 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

801 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

805 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
cy˛e
->
log
, 0, "worker cycle");

807 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

809 i‡(
ngx_ãrmö©e
) {

810 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

812 
	`ngx_w‹kî_¥o˚ss_exô
(
cy˛e
);

815 i‡(
ngx_quô
) {

816 
ngx_quô
 = 0;

817 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0,

819 
	`ngx_£çro˘ôÀ
("workerÖrocess is shutting down");

821 i‡(!
ngx_exôög
) {

822 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

823 
ngx_exôög
 = 1;

827 i‡(
ngx_ª›í
) {

828 
ngx_ª›í
 = 0;

829 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

830 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

833 
	}
}

837 
	$ngx_w‹kî_¥o˚ss_öô
(
ngx_cy˛e_t
 *
cy˛e
, 
ngx_öt_t
 
w‹kî
)

839 
sig£t_t
 
£t
;

840 
uöt64_t
 
˝u_afföôy
;

841 
ngx_öt_t
 
n
;

842 
ngx_uöt_t
 
i
;

843 
æimô
 
æmt
;

844 
ngx_c‹e_c⁄f_t
 *
ccf
;

845 
ngx_li°íög_t
 *
ls
;

847 i‡(
	`ngx_£t_ívú⁄mít
(
cy˛e
, 
NULL
) == NULL) {

849 
	`exô
(2);

852 
ccf
 = (
ngx_c‹e_c⁄f_t
 *Ë
	`ngx_gë_c⁄f
(
cy˛e
->
c⁄f_˘x
, 
ngx_c‹e_moduÀ
);

854 i‡(
w‹kî
 >0 && 
ccf
->
¥i‹ôy
 != 0) {

855 i‡(
	`£çri‹ôy
(
PRIO_PROCESS
, 0, 
ccf
->
¥i‹ôy
) == -1) {

856 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

857 "£çri‹ôy(%dËÁûed", 
ccf
->
¥i‹ôy
);

861 i‡(
ccf
->
æimô_nofûe
 !
NGX_CONF_UNSET
) {

862 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

863 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_nofûe
;

865 i‡(
	`£ålimô
(
RLIMIT_NOFILE
, &
æmt
) == -1) {

866 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

868 
ccf
->
æimô_nofûe
);

872 i‡(
ccf
->
æimô_c‹e
 !
NGX_CONF_UNSET
) {

873 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

874 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_c‹e
;

876 i‡(
	`£ålimô
(
RLIMIT_CORE
, &
æmt
) == -1) {

877 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

879 
ccf
->
æimô_c‹e
);

883 #ifde‡
RLIMIT_SIGPENDING


884 i‡(
ccf
->
æimô_sig≥ndög
 !
NGX_CONF_UNSET
) {

885 
æmt
.
æim_cur
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

886 
æmt
.
æim_max
 = (
æim_t
Ë
ccf
->
æimô_sig≥ndög
;

888 i‡(
	`£ålimô
(
RLIMIT_SIGPENDING
, &
æmt
) == -1) {

889 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

891 
ccf
->
æimô_sig≥ndög
);

896 i‡(
	`gëeuid
() == 0) {

897 i‡(
	`£tgid
(
ccf
->
group
) == -1) {

898 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

899 "£tgid(%dËÁûed", 
ccf
->
group
);

901 
	`exô
(2);

904 i‡(
	`öôgroups
(
ccf
->
u£∫ame
, ccf->
group
) == -1) {

905 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

907 
ccf
->
u£∫ame
, ccf->
group
);

910 i‡(
	`£tuid
(
ccf
->
u£r
) == -1) {

911 
	`ngx_log_îr‹
(
NGX_LOG_EMERG
, 
cy˛e
->
log
, 
ngx_î∫o
,

912 "£tuid(%dËÁûed", 
ccf
->
u£r
);

914 
	`exô
(2);

918 i‡(
w‹kî
 >= 0) {

919 
˝u_afföôy
 = 
	`ngx_gë_˝u_afföôy
(
w‹kî
);

921 i‡(
˝u_afföôy
) {

922 
	`ngx_£èfföôy
(
˝u_afföôy
, 
cy˛e
->
log
);

926 #i‡(
NGX_HAVE_PR_SET_DUMPABLE
)

930 i‡(
	`¥˘l
(
PR_SET_DUMPABLE
, 1, 0, 0, 0) == -1) {

931 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

937 i‡(
ccf
->
w‹kög_dúe˘‹y
.
Àn
) {

938 i‡(
	`chdú
((*Ë
ccf
->
w‹kög_dúe˘‹y
.
d©a
) == -1) {

939 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

940 "chdú(\"%s\"ËÁûed", 
ccf
->
w‹kög_dúe˘‹y
.
d©a
);

942 
	`exô
(2);

946 
	`sigem±y£t
(&
£t
);

948 i‡(
	`sig¥ocmask
(
SIG_SETMASK
, &
£t
, 
NULL
) == -1) {

949 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

957 
ls
 = 
cy˛e
->
li°íög
.
ñts
;

958 
i
 = 0; i < 
cy˛e
->
li°íög
.
√…s
; i++) {

959 
ls
[
i
].
¥evious
 = 
NULL
;

962 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

963 i‡(
ngx_moduÀs
[
i
]->
öô_¥o˚ss
) {

964 i‡(
ngx_moduÀs
[
i
]->
	`öô_¥o˚ss
(
cy˛e
Ë=
NGX_ERROR
) {

966 
	`exô
(2);

971 
n
 = 0;Ç < 
ngx_œ°_¥o˚ss
;Ç++) {

973 i‡(
ngx_¥o˚s£s
[
n
].
pid
 == -1) {

977 i‡(
n
 =
ngx_¥o˚ss_¶Ÿ
) {

981 i‡(
ngx_¥o˚s£s
[
n
].
ch™√l
[1] == -1) {

985 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
n
].
ch™√l
[1]) == -1) {

986 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

991 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ngx_¥o˚ss_¶Ÿ
].
ch™√l
[0]) == -1) {

992 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
ngx_î∫o
,

997 
ngx_œ°_¥o˚ss
 = 0;

1000 i‡(
	`ngx_add_ch™√l_evít
(
cy˛e
, 
ngx_ch™√l
, 
NGX_READ_EVENT
,

1001 
ngx_ch™√l_h™dÀr
)

1002 =
NGX_ERROR
)

1005 
	`exô
(2);

1007 
	}
}

1011 
	$ngx_w‹kî_¥o˚ss_exô
(
ngx_cy˛e_t
 *
cy˛e
)

1013 
ngx_uöt_t
 
i
;

1014 
ngx_c⁄√˘i⁄_t
 *
c
;

1016 #i‡(
NGX_THREADS
)

1017 
ngx_ãrmö©e
 = 1;

1019 
	`ngx_wakeup_w‹kî_thªads
(
cy˛e
);

1022 
i
 = 0; 
ngx_moduÀs
[i]; i++) {

1023 i‡(
ngx_moduÀs
[
i
]->
exô_¥o˚ss
) {

1024 
ngx_moduÀs
[
i
]->
	`exô_¥o˚ss
(
cy˛e
);

1028 i‡(
ngx_exôög
) {

1029 
c
 = 
cy˛e
->
c⁄√˘i⁄s
;

1030 
i
 = 0; i < 
cy˛e
->
c⁄√˘i⁄_n
; i++) {

1031 i‡(
c
[
i
].
fd
 != -1

1032 && 
c
[
i
].
ªad


1033 && !
c
[
i
].
ªad
->
ac˚±


1034 && !
c
[
i
].
ªad
->
ch™√l


1035 && !
c
[
i
].
ªad
->
ªsﬁvî
)

1037 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0,

1039 
c
[
i
].
fd
, i);

1040 
ngx_debug_quô
 = 1;

1044 i‡(
ngx_debug_quô
) {

1045 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 0, "aborting");

1046 
	`ngx_debug_poöt
();

1057 
ngx_exô_log_fûe
.
fd
 = 
ngx_cy˛e
->
log
->
fûe
->fd;

1059 
ngx_exô_log
 = *
ngx_cy˛e
->
log
;

1060 
ngx_exô_log
.
fûe
 = &
ngx_exô_log_fûe
;

1062 
ngx_exô_cy˛e
.
log
 = &
ngx_exô_log
;

1063 
ngx_exô_cy˛e
.
fûes
 = 
ngx_cy˛e
->files;

1064 
ngx_exô_cy˛e
.
fûes_n
 = 
ngx_cy˛e
->files_n;

1065 
ngx_cy˛e
 = &
ngx_exô_cy˛e
;

1067 
	`ngx_de°roy_poﬁ
(
cy˛e
->
poﬁ
);

1069 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
ngx_cy˛e
->
log
, 0, "exit");

1071 
	`exô
(0);

1072 
	}
}

1076 
	$ngx_ch™√l_h™dÀr
(
ngx_evít_t
 *
ev
)

1078 
ngx_öt_t
 
n
;

1079 
ngx_ch™√l_t
 
ch
;

1080 
ngx_c⁄√˘i⁄_t
 *
c
;

1082 i‡(
ev
->
timedout
) {

1083 
ev
->
timedout
 = 0;

1087 
c
 = 
ev
->
d©a
;

1089 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "channel handler");

1093 
n
 = 
	`ngx_ªad_ch™√l
(
c
->
fd
, &
ch
, (
ngx_ch™√l_t
), 
ev
->
log
);

1095 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0, "ch™√l: %i", 
n
);

1097 i‡(
n
 =
NGX_ERROR
) {

1099 i‡(
ngx_evít_Êags
 & 
NGX_USE_EPOLL_EVENT
) {

1100 
	`ngx_dñ_c⁄n
(
c
, 0);

1103 
	`ngx_˛o£_c⁄√˘i⁄
(
c
);

1107 i‡(
ngx_evít_Êags
 & 
NGX_USE_EVENTPORT_EVENT
) {

1108 i‡(
	`ngx_add_evít
(
ev
, 
NGX_READ_EVENT
, 0Ë=
NGX_ERROR
) {

1113 i‡(
n
 =
NGX_AGAIN
) {

1117 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1118 "ch™√»comm™d: %d", 
ch
.
comm™d
);

1120 
ch
.
comm™d
) {

1122 
NGX_CMD_QUIT
:

1123 
ngx_quô
 = 1;

1126 
NGX_CMD_TERMINATE
:

1127 
ngx_ãrmö©e
 = 1;

1130 
NGX_CMD_REOPEN
:

1131 
ngx_ª›í
 = 1;

1134 
NGX_CMD_OPEN_CHANNEL
:

1136 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1138 
ch
.
¶Ÿ
, ch.
pid
, ch.
fd
);

1140 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
pid
 = ch.pid;

1141 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = ch.
fd
;

1144 
NGX_CMD_CLOSE_CHANNEL
:

1146 
	`ngx_log_debug4
(
NGX_LOG_DEBUG_CORE
, 
ev
->
log
, 0,

1148 
ch
.
¶Ÿ
, ch.
pid
, 
ngx_¥o˚s£s
[ch.slot].pid,

1149 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]);

1151 i‡(
	`˛o£
(
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0]) == -1) {

1152 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
ev
->
log
, 
ngx_î∫o
,

1156 
ngx_¥o˚s£s
[
ch
.
¶Ÿ
].
ch™√l
[0] = -1;

1160 
	}
}

1163 #i‡(
NGX_THREADS
)

1166 
	$ngx_wakeup_w‹kî_thªads
(
ngx_cy˛e_t
 *
cy˛e
)

1168 
ngx_öt_t
 
i
;

1169 
ngx_uöt_t
 
live
;

1173 
live
 = 0;

1175 
i
 = 0; i < 
ngx_thªads_n
; i++) {

1176 i‡(
ngx_thªads
[
i
].
°©e
 < 
NGX_THREAD_EXIT
) {

1177 i‡(
	`ngx_c⁄d_sig«l
(
ngx_thªads
[
i
].
cv
Ë=
NGX_ERROR
) {

1178 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1181 
live
 = 1;

1185 i‡(
ngx_thªads
[
i
].
°©e
 =
NGX_THREAD_EXIT
) {

1186 
	`ngx_thªad_joö
(
ngx_thªads
[
i
].
tid
, 
NULL
);

1187 
ngx_thªads
[
i
].
°©e
 = 
NGX_THREAD_DONE
;

1191 i‡(
live
 == 0) {

1192 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1196 
	`ngx_d⁄e_evíts
(
cy˛e
);

1197 
	`ngx_muãx_de°roy
(
ngx_evít_timî_muãx
);

1198 
	`ngx_muãx_de°roy
(
ngx_po°ed_evíts_muãx
);

1203 
	`ngx_sched_yõld
();

1205 
	}
}

1208 
ngx_thªad_vÆue_t


1209 
	$ngx_w‹kî_thªad_cy˛e
(*
d©a
)

1211 
ngx_thªad_t
 *
thr
 = 
d©a
;

1213 
sig£t_t
 
£t
;

1214 
ngx_îr_t
 
îr
;

1215 
ngx_c‹e_és_t
 *
és
;

1216 
ngx_cy˛e_t
 *
cy˛e
;

1218 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1220 
	`sigem±y£t
(&
£t
);

1221 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_RECONFIGURE_SIGNAL
));

1222 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_REOPEN_SIGNAL
));

1223 
	`sigadd£t
(&
£t
, 
	`ngx_sig«l_vÆue
(
NGX_CHANGEBIN_SIGNAL
));

1225 
îr
 = 
	`ngx_thªad_sigmask
(
SIG_BLOCK
, &
£t
, 
NULL
);

1226 i‡(
îr
) {

1227 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1228 
ngx_thªad_sigmask_n
 " failed");

1229  (
ngx_thªad_vÆue_t
) 1;

1232 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1233 "thªad " 
NGX_TID_T_FMT
 " sèπed", 
	`ngx_thªad_£lf
());

1235 
	`ngx_£âhπôÀ
("workerÅhread");

1237 
és
 = 
	`ngx_ˇŒoc
((
ngx_c‹e_és_t
), 
cy˛e
->
log
);

1238 i‡(
és
 =
NULL
) {

1239  (
ngx_thªad_vÆue_t
) 1;

1242 
îr
 = 
	`ngx_thªad_£t_és
(
ngx_c‹e_és_key
, 
és
);

1243 i‡(
îr
 != 0) {

1244 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

1245 
ngx_thªad_£t_és_n
 " failed");

1246  (
ngx_thªad_vÆue_t
) 1;

1249 
	`ngx_muãx_lock
(
ngx_po°ed_evíts_muãx
);

1252 
thr
->
°©e
 = 
NGX_THREAD_FREE
;

1254 i‡(
	`ngx_c⁄d_waô
(
thr
->
cv
, 
ngx_po°ed_evíts_muãx
Ë=
NGX_ERROR
) {

1255  (
ngx_thªad_vÆue_t
) 1;

1258 i‡(
ngx_ãrmö©e
) {

1259 
thr
->
°©e
 = 
NGX_THREAD_EXIT
;

1261 
	`ngx_muãx_u∆ock
(
ngx_po°ed_evíts_muãx
);

1263 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cy˛e
->
log
, 0,

1264 "thªad " 
NGX_TID_T_FMT
 " is done",

1265 
	`ngx_thªad_£lf
());

1267  (
ngx_thªad_vÆue_t
) 0;

1270 
thr
->
°©e
 = 
NGX_THREAD_BUSY
;

1272 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1273  (
ngx_thªad_vÆue_t
) 1;

1276 i‡(
	`ngx_evít_thªad_¥o˚ss_po°ed
(
cy˛e
Ë=
NGX_ERROR
) {

1277  (
ngx_thªad_vÆue_t
) 1;

1280 i‡(
ngx_¥o˚ss_ch™ges
) {

1281 i‡(
	`ngx_¥o˚ss_ch™ges
(
cy˛e
, 1Ë=
NGX_ERROR
) {

1282  (
ngx_thªad_vÆue_t
) 1;

1286 
	}
}

1292 
	$ngx_ˇche_m™agî_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
, *
d©a
)

1294 
ngx_ˇche_m™agî_˘x_t
 *
˘x
 = 
d©a
;

1296 *
idít
[4];

1297 
ngx_evít_t
 
ev
;

1303 
ngx_¥o˚ss
 = 
NGX_PROCESS_HELPER
;

1305 
	`ngx_˛o£_li°íög_sockës
(
cy˛e
);

1308 
cy˛e
->
c⁄√˘i⁄_n
 = 512;

1310 
	`ngx_w‹kî_¥o˚ss_öô
(
cy˛e
, -1);

1312 
	`ngx_memzîo
(&
ev
, (
ngx_evít_t
));

1313 
ev
.
h™dÀr
 = 
˘x
->handler;

1314 
ev
.
d©a
 = 
idít
;

1315 
ev
.
log
 = 
cy˛e
->log;

1316 
idít
[3] = (*) -1;

1318 
ngx_u£_ac˚±_muãx
 = 0;

1320 
	`ngx_£çro˘ôÀ
(
˘x
->
«me
);

1322 
	`ngx_add_timî
(&
ev
, 
˘x
->
dñay
);

1326 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1327 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "exiting");

1328 
	`exô
(0);

1331 i‡(
ngx_ª›í
) {

1332 
ngx_ª›í
 = 0;

1333 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
cy˛e
->
log
, 0, "reopeningÜogs");

1334 
	`ngx_ª›í_fûes
(
cy˛e
, -1);

1337 
	`ngx_¥o˚ss_evíts_™d_timîs
(
cy˛e
);

1339 
	}
}

1343 
	$ngx_ˇche_m™agî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1345 
time_t
 
√xt
, 
n
;

1346 
ngx_uöt_t
 
i
;

1347 
ngx_∑th_t
 **
∑th
;

1349 
√xt
 = 60 * 60;

1351 
∑th
 = 
ngx_cy˛e
->
∑ths
.
ñts
;

1352 
i
 = 0; i < 
ngx_cy˛e
->
∑ths
.
√…s
; i++) {

1354 i‡(
∑th
[
i
]->
m™agî
) {

1355 
n
 = 
∑th
[
i
]->
	`m™agî
’©h[i]->
d©a
);

1357 
√xt
 = (
n
 <=Çext) ?Ç :Çext;

1359 
	`ngx_time_upd©e
();

1363 i‡(
√xt
 == 0) {

1364 
√xt
 = 1;

1367 
	`ngx_add_timî
(
ev
, 
√xt
 * 1000);

1368 
	}
}

1372 
	$ngx_ˇche_lﬂdî_¥o˚ss_h™dÀr
(
ngx_evít_t
 *
ev
)

1374 
ngx_uöt_t
 
i
;

1375 
ngx_∑th_t
 **
∑th
;

1376 
ngx_cy˛e_t
 *
cy˛e
;

1378 
cy˛e
 = (
ngx_cy˛e_t
 *Ë
ngx_cy˛e
;

1380 
∑th
 = 
cy˛e
->
∑ths
.
ñts
;

1381 
i
 = 0; i < 
cy˛e
->
∑ths
.
√…s
; i++) {

1383 i‡(
ngx_ãrmö©e
 || 
ngx_quô
) {

1387 i‡(
∑th
[
i
]->
lﬂdî
) {

1388 
∑th
[
i
]->
	`lﬂdî
’©h[i]->
d©a
);

1389 
	`ngx_time_upd©e
();

1393 
	`exô
(0);

1394 
	}
}

	@src/os/unix/ngx_process_cycle.h

8 #i‚de‡
_NGX_PROCESS_CYCLE_H_INCLUDED_


9 
	#_NGX_PROCESS_CYCLE_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
	#NGX_CMD_OPEN_CHANNEL
 1

	)

17 
	#NGX_CMD_CLOSE_CHANNEL
 2

	)

18 
	#NGX_CMD_QUIT
 3

	)

19 
	#NGX_CMD_TERMINATE
 4

	)

20 
	#NGX_CMD_REOPEN
 5

	)

23 
	#NGX_PROCESS_SINGLE
 0

	)

24 
	#NGX_PROCESS_MASTER
 1

	)

25 
	#NGX_PROCESS_SIGNALLER
 2

	)

26 
	#NGX_PROCESS_WORKER
 3

	)

27 
	#NGX_PROCESS_HELPER
 4

	)

31 
ngx_evít_h™dÀr_±
 
	mh™dÀr
;

32 *
	m«me
;

33 
ngx_m£c_t
 
	mdñay
;

34 } 
	tngx_ˇche_m™agî_˘x_t
;

37 
ngx_ma°î_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

38 
ngx_sögÀ_¥o˚ss_cy˛e
(
ngx_cy˛e_t
 *
cy˛e
);

41 
ngx_uöt_t
 
ngx_¥o˚ss
;

42 
ngx_pid_t
 
ngx_pid
;

43 
ngx_pid_t
 
ngx_√w_bö¨y
;

44 
ngx_uöt_t
 
ngx_öhîôed
;

45 
ngx_uöt_t
 
ngx_d´m⁄ized
;

46 
ngx_uöt_t
 
ngx_thªaded
;

47 
ngx_uöt_t
 
ngx_exôög
;

49 
sig_©omic_t
 
ngx_ª≠
;

50 
sig_©omic_t
 
ngx_sigio
;

51 
sig_©omic_t
 
ngx_sigÆrm
;

52 
sig_©omic_t
 
ngx_quô
;

53 
sig_©omic_t
 
ngx_debug_quô
;

54 
sig_©omic_t
 
ngx_ãrmö©e
;

55 
sig_©omic_t
 
ngx_nﬂc˚±
;

56 
sig_©omic_t
 
ngx_ªc⁄figuª
;

57 
sig_©omic_t
 
ngx_ª›í
;

58 
sig_©omic_t
 
ngx_ch™ge_bö¨y
;

	@src/os/unix/ngx_pthread_thread.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
ngx_uöt_t
 
	g¡hªads
;

13 
ngx_uöt_t
 
	gmax_thªads
;

16 
±hªad_©å_t
 
	gthr_©å
;

19 
ngx_îr_t


20 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
, 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
),

21 *
¨g
, 
ngx_log_t
 *
log
)

23 
îr
;

25 i‡(
¡hªads
 >
max_thªads
) {

26 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
log
, 0,

27 "nÿm‹êth™ %uòthªad†ˇ¿bê¸óãd", 
max_thªads
);

28  
NGX_ERROR
;

31 
îr
 = 
	`±hªad_¸óã
(
tid
, &
thr_©å
, 
func
, 
¨g
);

33 i‡(
îr
 != 0) {

34 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
îr
, "pthread_create() failed");

35  
îr
;

38 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
log
, 0,

39 "thªad i†¸óãd: " 
NGX_TID_T_FMT
, *
tid
);

41 
¡hªads
++;

43  
îr
;

44 
	}
}

47 
ngx_öt_t


48 
	$ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
)

50 
îr
;

52 
max_thªads
 = 
n
;

54 
îr
 = 
	`±hªad_©å_öô
(&
thr_©å
);

56 i‡(
îr
 != 0) {

57 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

59  
NGX_ERROR
;

62 
îr
 = 
	`±hªad_©å_£t°acksize
(&
thr_©å
, 
size
);

64 i‡(
îr
 != 0) {

65 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cy˛e
->
log
, 
îr
,

67  
NGX_ERROR
;

70 
ngx_thªaded
 = 1;

72  
NGX_OK
;

73 
	}
}

76 
ngx_muãx_t
 *

77 
	$ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
)

79 
îr
;

80 
ngx_muãx_t
 *
m
;

82 
m
 = 
	`ngx_Æloc
((
ngx_muãx_t
), 
log
);

83 i‡(
m
 =
NULL
) {

84  
NULL
;

87 
m
->
log
 =Üog;

89 
îr
 = 
	`±hªad_muãx_öô
(&
m
->
muãx
, 
NULL
);

91 i‡(
îr
 != 0) {

92 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

94  
NULL
;

97  
m
;

98 
	}
}

102 
	$ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
)

104 
îr
;

106 
îr
 = 
	`±hªad_muãx_de°roy
(&
m
->
muãx
);

108 i‡(
îr
 != 0) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

110 "±hªad_muãx_de°roy(%pËÁûed", 
m
);

113 
	`ngx_‰ì
(
m
);

114 
	}
}

118 
	$ngx_muãx_lock
(
ngx_muãx_t
 *
m
)

120 
îr
;

122 i‡(!
ngx_thªaded
) {

126 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "lock mutex %p", m);

128 
îr
 = 
	`±hªad_muãx_lock
(&
m
->
muãx
);

130 i‡(
îr
 != 0) {

131 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

132 "±hªad_muãx_lock(%pËÁûed", 
m
);

133 
	`ngx_ab‹t
();

136 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

139 
	}
}

142 
ngx_öt_t


143 
	$ngx_muãx_åylock
(
ngx_muãx_t
 *
m
)

145 
îr
;

147 i‡(!
ngx_thªaded
) {

148  
NGX_OK
;

151 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "tryÜock mutex %p", m);

153 
îr
 = 
	`±hªad_muãx_åylock
(&
m
->
muãx
);

155 i‡(
îr
 =
NGX_EBUSY
) {

156  
NGX_AGAIN
;

159 i‡(
îr
 != 0) {

160 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

161 "±hªad_muãx_åylock(%pËÁûed", 
m
);

162 
	`ngx_ab‹t
();

165 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

167  
NGX_OK
;

168 
	}
}

172 
	$ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
)

174 
îr
;

176 i‡(!
ngx_thªaded
) {

180 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "unlock mutex %p", m);

182 
îr
 = 
	`±hªad_muãx_u∆ock
(&
m
->
muãx
);

184 i‡(
îr
 != 0) {

185 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
m
->
log
, 
îr
,

186 "±hªad_muãx_u∆ock(%pËÁûed", 
m
);

187 
	`ngx_ab‹t
();

190 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p is unlocked", m);

193 
	}
}

196 
ngx_c⁄d_t
 *

197 
	$ngx_c⁄d_öô
(
ngx_log_t
 *
log
)

199 
îr
;

200 
ngx_c⁄d_t
 *
cv
;

202 
cv
 = 
	`ngx_Æloc
((
ngx_c⁄d_t
), 
log
);

203 i‡(
cv
 =
NULL
) {

204  
NULL
;

207 
cv
->
log
 =Üog;

209 
îr
 = 
	`±hªad_c⁄d_öô
(&
cv
->
c⁄d
, 
NULL
);

211 i‡(
îr
 != 0) {

212 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

214  
NULL
;

217  
cv
;

218 
	}
}

222 
	$ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
)

224 
îr
;

226 
îr
 = 
	`±hªad_c⁄d_de°roy
(&
cv
->
c⁄d
);

228 i‡(
îr
 != 0) {

229 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

230 "±hªad_c⁄d_de°roy(%pËÁûed", 
cv
);

233 
	`ngx_‰ì
(
cv
);

234 
	}
}

237 
ngx_öt_t


238 
	$ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
)

240 
îr
;

242 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p wait", cv);

244 
îr
 = 
	`±hªad_c⁄d_waô
(&
cv
->
c⁄d
, &
m
->
muãx
);

246 i‡(
îr
 != 0) {

247 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

248 "±hªad_c⁄d_waô(%pËÁûed", 
cv
);

249  
NGX_ERROR
;

252 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is waked up", cv);

254 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_MUTEX
, 
m
->
log
, 0, "mutex %p isÜocked", m);

256  
NGX_OK
;

257 
	}
}

260 
ngx_öt_t


261 
	$ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
)

263 
îr
;

265 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %pÅo signal", cv);

267 
îr
 = 
	`±hªad_c⁄d_sig«l
(&
cv
->
c⁄d
);

269 i‡(
îr
 != 0) {

270 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
cv
->
log
, 
îr
,

271 "±hªad_c⁄d_sig«l(%pËÁûed", 
cv
);

272  
NGX_ERROR
;

275 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
cv
->
log
, 0, "cv %p is signaled", cv);

277  
NGX_OK
;

278 
	}
}

	@src/os/unix/ngx_readv_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
	#NGX_IOVS
 16

	)

16 #i‡(
NGX_HAVE_KQUEUE
)

18 
ssize_t


19 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

21 
u_ch¨
 *
¥ev
;

22 
ssize_t
 
n
, 
size
;

23 
ngx_îr_t
 
îr
;

24 
ngx_¨øy_t
 
vec
;

25 
ngx_evít_t
 *
ªv
;

26 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

28 
ªv
 = 
c
->
ªad
;

30 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

31 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

33 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

35 i‡(
ªv
->
avaûabÀ
 == 0) {

36 i‡(
ªv
->
≥ndög_eof
) {

37 
ªv
->
ªady
 = 0;

38 
ªv
->
eof
 = 1;

40 
	`ngx_log_îr‹
(
NGX_LOG_INFO
, 
c
->
log
, 
ªv
->
kq_î∫o
,

43 i‡(
ªv
->
kq_î∫o
) {

44 
ªv
->
îr‹
 = 1;

45 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

46  
NGX_ERROR
;

52  
NGX_AGAIN
;

57 
¥ev
 = 
NULL
;

58 
iov
 = 
NULL
;

59 
size
 = 0;

61 
vec
.
ñts
 = 
iovs
;

62 
vec
.
√…s
 = 0;

63 
vec
.
size
 = (
iovec
);

64 
vec
.
«Œoc
 = 
NGX_IOVS
;

65 
vec
.
poﬁ
 = 
c
->pool;

69 
chaö
) {

70 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

71 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

74 i‡(
vec
.
√…s
 >
IOV_MAX
) {

78 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

79 i‡(
iov
 =
NULL
) {

80  
NGX_ERROR
;

83 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

84 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

87 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

88 
¥ev
 = 
chaö
->
buf
->
íd
;

89 
chaö
 = chaö->
√xt
;

92 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

93 "ªadv: %d,Üa°:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

95 
ªv
 = 
c
->
ªad
;

98 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

100 i‡(
n
 >= 0) {

101 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

102 
ªv
->
avaûabÀ
 -
n
;

109 i‡(
ªv
->
avaûabÀ
 <= 0) {

110 i‡(!
ªv
->
≥ndög_eof
) {

111 
ªv
->
ªady
 = 0;

114 i‡(
ªv
->
avaûabÀ
 < 0) {

115 
ªv
->
avaûabÀ
 = 0;

119 i‡(
n
 == 0) {

127 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 0,

129 "%dávaûabÀ byãs", 
ªv
->
avaûabÀ
);

132 
ªv
->
eof
 = 1;

133 
ªv
->
avaûabÀ
 = 0;

136  
n
;

139 i‡(
n
 < 
size
) {

140 
ªv
->
ªady
 = 0;

143 i‡(
n
 == 0) {

144 
ªv
->
eof
 = 1;

147  
n
;

150 
îr
 = 
ngx_sockë_î∫o
;

152 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

153 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

155 
n
 = 
NGX_AGAIN
;

158 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

162 } 
îr
 =
NGX_EINTR
);

164 
ªv
->
ªady
 = 0;

166 i‡(
n
 =
NGX_ERROR
) {

167 
c
->
ªad
->
îr‹
 = 1;

170  
n
;

171 
	}
}

175 
ssize_t


176 
	$ngx_ªadv_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
chaö
)

178 
u_ch¨
 *
¥ev
;

179 
ssize_t
 
n
, 
size
;

180 
ngx_îr_t
 
îr
;

181 
ngx_¨øy_t
 
vec
;

182 
ngx_evít_t
 *
ªv
;

183 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

185 
¥ev
 = 
NULL
;

186 
iov
 = 
NULL
;

187 
size
 = 0;

189 
vec
.
ñts
 = 
iovs
;

190 
vec
.
√…s
 = 0;

191 
vec
.
size
 = (
iovec
);

192 
vec
.
«Œoc
 = 
NGX_IOVS
;

193 
vec
.
poﬁ
 = 
c
->pool;

197 
chaö
) {

198 i‡(
¥ev
 =
chaö
->
buf
->
œ°
) {

199 
iov
->
iov_Àn
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

202 i‡(
vec
.
√…s
 >
IOV_MAX
) {

206 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

207 i‡(
iov
 =
NULL
) {

208  
NGX_ERROR
;

211 
iov
->
iov_ba£
 = (*Ë
chaö
->
buf
->
œ°
;

212 
iov
->
iov_Àn
 = 
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

215 
size
 +
chaö
->
buf
->
íd
 - chaö->buf->
œ°
;

216 
¥ev
 = 
chaö
->
buf
->
íd
;

217 
chaö
 = chaö->
√xt
;

220 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

221 "ªadv: %d:%d", 
vec
.
√…s
, 
iov
->
iov_Àn
);

223 
ªv
 = 
c
->
ªad
;

226 
n
 = 
	`ªadv
(
c
->
fd
, (
iovec
 *Ë
vec
.
ñts
, vec.
√…s
);

228 i‡(
n
 == 0) {

229 
ªv
->
ªady
 = 0;

230 
ªv
->
eof
 = 1;

232  
n
;

234 } i‡(
n
 > 0) {

236 i‡(
n
 < 
size
 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
)) {

237 
ªv
->
ªady
 = 0;

240  
n
;

243 
îr
 = 
ngx_sockë_î∫o
;

245 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

246 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

248 
n
 = 
NGX_AGAIN
;

251 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "readv() failed");

255 } 
îr
 =
NGX_EINTR
);

257 
ªv
->
ªady
 = 0;

259 i‡(
n
 =
NGX_ERROR
) {

260 
c
->
ªad
->
îr‹
 = 1;

263  
n
;

264 
	}
}

	@src/os/unix/ngx_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

24 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

25 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

27 
ªv
->
≥ndög_eof
,Ñev->
avaûabÀ
,Ñev->
kq_î∫o
);

29 i‡(
ªv
->
avaûabÀ
 == 0) {

30 i‡(
ªv
->
≥ndög_eof
) {

31 
ªv
->
ªady
 = 0;

32 
ªv
->
eof
 = 1;

34 i‡(
ªv
->
kq_î∫o
) {

35 
ªv
->
îr‹
 = 1;

36 
	`ngx_£t_sockë_î∫o
(
ªv
->
kq_î∫o
);

38  
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
ªv
->
kq_î∫o
,

45 
ªv
->
ªady
 = 0;

46  
NGX_AGAIN
;

52 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

54 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

55 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

57 i‡(
n
 >= 0) {

58 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

59 
ªv
->
avaûabÀ
 -
n
;

66 i‡(
ªv
->
avaûabÀ
 <= 0) {

67 i‡(!
ªv
->
≥ndög_eof
) {

68 
ªv
->
ªady
 = 0;

71 i‡(
ªv
->
avaûabÀ
 < 0) {

72 
ªv
->
avaûabÀ
 = 0;

76 i‡(
n
 == 0) {

83 
ªv
->
eof
 = 1;

84 
ªv
->
avaûabÀ
 = 0;

87  
n
;

90 i‡((
size_t
Ë
n
 < 
size
) {

91 
ªv
->
ªady
 = 0;

94 i‡(
n
 == 0) {

95 
ªv
->
eof
 = 1;

98  
n
;

101 
îr
 = 
ngx_sockë_î∫o
;

103 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

104 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

106 
n
 = 
NGX_AGAIN
;

109 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

113 } 
îr
 =
NGX_EINTR
);

115 
ªv
->
ªady
 = 0;

117 i‡(
n
 =
NGX_ERROR
) {

118 
ªv
->
îr‹
 = 1;

121  
n
;

122 
	}
}

126 
ssize_t


127 
	$ngx_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

129 
ssize_t
 
n
;

130 
ngx_îr_t
 
îr
;

131 
ngx_evít_t
 *
ªv
;

133 
ªv
 = 
c
->
ªad
;

136 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

138 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

139 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

141 i‡(
n
 == 0) {

142 
ªv
->
ªady
 = 0;

143 
ªv
->
eof
 = 1;

144  
n
;

146 } i‡(
n
 > 0) {

148 i‡((
size_t
Ë
n
 < 
size


149 && !(
ngx_evít_Êags
 & 
NGX_USE_GREEDY_EVENT
))

151 
ªv
->
ªady
 = 0;

154  
n
;

157 
îr
 = 
ngx_sockë_î∫o
;

159 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

160 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

162 
n
 = 
NGX_AGAIN
;

165 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

169 } 
îr
 =
NGX_EINTR
);

171 
ªv
->
ªady
 = 0;

173 i‡(
n
 =
NGX_ERROR
) {

174 
ªv
->
îr‹
 = 1;

177  
n
;

178 
	}
}

	@src/os/unix/ngx_send.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 
ssize_t


14 
	$ngx_unix_£nd
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

16 
ssize_t
 
n
;

17 
ngx_îr_t
 
îr
;

18 
ngx_evít_t
 *
wev
;

20 
wev
 = 
c
->
wrôe
;

22 #i‡(
NGX_HAVE_KQUEUE
)

24 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

25 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

27 
wev
->
îr‹
 = 1;

28  
NGX_ERROR
;

34 
n
 = 
	`£nd
(
c
->
fd
, 
buf
, 
size
, 0);

36 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

37 "£nd: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

39 i‡(
n
 > 0) {

40 i‡(
n
 < (
ssize_t
Ë
size
) {

41 
wev
->
ªady
 = 0;

44 
c
->
£¡
 +
n
;

46  
n
;

49 
îr
 = 
ngx_sockë_î∫o
;

51 i‡(
n
 == 0) {

52 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
c
->
log
, 
îr
, "send()Ñeturned zero");

53 
wev
->
ªady
 = 0;

54  
n
;

57 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

58 
wev
->
ªady
 = 0;

60 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

63 i‡(
îr
 =
NGX_EAGAIN
) {

64  
NGX_AGAIN
;

68 
wev
->
îr‹
 = 1;

69 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "send() failed");

70  
NGX_ERROR
;

73 
	}
}

	@src/os/unix/ngx_setaffinity.c

7 
	~<ngx_c⁄fig.h
>

8 
	~<ngx_c‹e.h
>

11 #i‡(
NGX_HAVE_CPUSET_SETAFFINITY
)

13 
	~<sys/˝u£t.h
>

16 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

18 
˝u£t_t
 
mask
;

19 
ngx_uöt_t
 
i
;

21 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

22 "˝u£t_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

24 
	`CPU_ZERO
(&
mask
);

25 
i
 = 0;

27 i‡(
˝u_afföôy
 & 1) {

28 
	`CPU_SET
(
i
, &
mask
);

30 
i
++;

31 
˝u_afföôy
 >>= 1;

32 } 
˝u_afföôy
);

34 i‡(
	`˝u£t_£èfföôy
(
CPU_LEVEL_WHICH
, 
CPU_WHICH_PID
, -1,

35 (
˝u£t_t
), &
mask
) == -1)

37 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40 
	}
}

42 #ñi‡(
NGX_HAVE_SCHED_SETAFFINITY
)

45 
	$ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
)

47 
˝u_£t_t
 
mask
;

48 
ngx_uöt_t
 
i
;

50 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0,

51 "sched_£èfföôy(0x%08Xl)", 
˝u_afföôy
);

53 
	`CPU_ZERO
(&
mask
);

54 
i
 = 0;

56 i‡(
˝u_afföôy
 & 1) {

57 
	`CPU_SET
(
i
, &
mask
);

59 
i
++;

60 
˝u_afföôy
 >>= 1;

61 } 
˝u_afföôy
);

63 i‡(
	`sched_£èfföôy
(0, (
˝u_£t_t
), &
mask
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

67 
	}
}

	@src/os/unix/ngx_setaffinity.h

6 #i‚de‡
_NGX_SETAFFINITY_H_INCLUDED_


7 
	#_NGX_SETAFFINITY_H_INCLUDED_


	)

10 #i‡(
NGX_HAVE_SCHED_SETAFFINITY
 || 
NGX_HAVE_CPUSET_SETAFFINITY
)

12 
	#NGX_HAVE_CPU_AFFINITY
 1

	)

14 
ngx_£èfföôy
(
uöt64_t
 
˝u_afföôy
, 
ngx_log_t
 *
log
);

18 
	#ngx_£èfföôy
(
˝u_afföôy
, 
log
)

	)

	@src/os/unix/ngx_setproctitle.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_SETPROCTITLE_USES_ENV
)

30 **
ívú⁄
;

32 *
	gngx_os_¨gv_œ°
;

34 
ngx_öt_t


35 
	$ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
)

37 
u_ch¨
 *
p
;

38 
size_t
 
size
;

39 
ngx_uöt_t
 
i
;

41 
size
 = 0;

43 
i
 = 0; 
ívú⁄
[i]; i++) {

44 
size
 +
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

47 
p
 = 
	`ngx_Æloc
(
size
, 
log
);

48 i‡(
p
 =
NULL
) {

49  
NGX_ERROR
;

52 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[0];

54 
i
 = 0; 
ngx_os_¨gv
[i]; i++) {

55 i‡(
ngx_os_¨gv_œ°
 =
ngx_os_¨gv
[
i
]) {

56 
ngx_os_¨gv_œ°
 = 
ngx_os_¨gv
[
i
] + 
	`ngx_°æí
(ngx_os_argv[i]) + 1;

60 
i
 = 0; 
ívú⁄
[i]; i++) {

61 i‡(
ngx_os_¨gv_œ°
 =
ívú⁄
[
i
]) {

63 
size
 = 
	`ngx_°æí
(
ívú⁄
[
i
]) + 1;

64 
ngx_os_¨gv_œ°
 = 
ívú⁄
[
i
] + 
size
;

66 
	`ngx_˝y°∫
(
p
, (
u_ch¨
 *Ë
ívú⁄
[
i
], 
size
);

67 
ívú⁄
[
i
] = (*Ë
p
;

68 
p
 +
size
;

72 
ngx_os_¨gv_œ°
--;

74  
NGX_OK
;

75 
	}
}

79 
	$ngx_£çro˘ôÀ
(*
tôÀ
)

81 
u_ch¨
 *
p
;

83 #i‡(
NGX_SOLARIS
)

85 
ngx_öt_t
 
i
;

86 
size_t
 
size
;

90 
ngx_os_¨gv
[1] = 
NULL
;

92 
p
 = 
	`ngx_˝y°∫
((
u_ch¨
 *Ë
ngx_os_¨gv
[0], (u_char *) "nginx: ",

93 
ngx_os_¨gv_œ°
 - 
ngx_os_¨gv
[0]);

95 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
tôÀ
, 
ngx_os_¨gv_œ°
 - (*)Ö);

97 #i‡(
NGX_SOLARIS
)

99 
size
 = 0;

101 
i
 = 0; i < 
ngx_¨gc
; i++) {

102 
size
 +
	`ngx_°æí
(
ngx_¨gv
[
i
]) + 1;

105 i‡(
size
 > (
size_t
Ë((*Ë
p
 - 
ngx_os_¨gv
[0])) {

112 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" (", 
ngx_os_¨gv_œ°
 - (*)Ö);

114 
i
 = 0; i < 
ngx_¨gc
; i++) {

115 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë
ngx_¨gv
[
i
],

116 
ngx_os_¨gv_œ°
 - (*Ë
p
);

117 
p
 = 
	`ngx_˝y°∫
’, (
u_ch¨
 *Ë" ", 
ngx_os_¨gv_œ°
 - (*)Ö);

120 i‡(*(
p
 - 1) == ' ') {

121 *(
p
 - 1) = ')';

127 i‡(
ngx_os_¨gv_œ°
 - (*Ë
p
) {

128 
	`ngx_mem£t
(
p
, 
NGX_SETPROCTITLE_PAD
, 
ngx_os_¨gv_œ°
 - (*)Ö);

131 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
ngx_cy˛e
->
log
, 0,

132 "£çro˘ôÀ: \"%s\"", 
ngx_os_¨gv
[0]);

133 
	}
}

	@src/os/unix/ngx_setproctitle.h

8 #i‚de‡
_NGX_SETPROCTITLE_H_INCLUDED_


9 
	#_NGX_SETPROCTITLE_H_INCLUDED_


	)

12 #i‡(
NGX_HAVE_SETPROCTITLE
)

16 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

17 
	#ngx_£çro˘ôÀ
(
tôÀ
Ë
	`£çro˘ôÀ
("%s",ÅôÀ)

	)

22 #i‡!
deföed
 
NGX_SETPROCTITLE_USES_ENV


24 #i‡(
NGX_SOLARIS
)

26 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

27 
	#NGX_SETPROCTITLE_PAD
 ' '

	)

29 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

30 
ngx_£çro˘ôÀ
(*
tôÀ
);

32 #ñi‡(
NGX_LINUX
Ë|| (
NGX_DARWIN
)

34 
	#NGX_SETPROCTITLE_USES_ENV
 1

	)

35 
	#NGX_SETPROCTITLE_PAD
 '\0'

	)

37 
ngx_öt_t
 
ngx_öô_£çro˘ôÀ
(
ngx_log_t
 *
log
);

38 
ngx_£çro˘ôÀ
(*
tôÀ
);

42 
	#ngx_öô_£çro˘ôÀ
(
log
)

	)

43 
	#ngx_£çro˘ôÀ
(
tôÀ
)

	)

	@src/os/unix/ngx_shmem.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 #i‡(
NGX_HAVE_MAP_ANON
)

14 
ngx_öt_t


15 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

17 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
,

18 
PROT_READ
|
PROT_WRITE
,

19 
MAP_ANON
|
MAP_SHARED
, -1, 0);

21 i‡(
shm
->
addr
 =
MAP_FAILED
) {

22 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

23 "mm≠(MAP_ANON|MAP_SHARED, %uzËÁûed", 
shm
->
size
);

24  
NGX_ERROR
;

27  
NGX_OK
;

28 
	}
}

32 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

34 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

35 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

36 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

38 
	}
}

40 #ñi‡(
NGX_HAVE_MAP_DEVZERO
)

42 
ngx_öt_t


43 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

45 
ngx_fd_t
 
fd
;

47 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
);

49 i‡(
fd
 == -1) {

50 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

52  
NGX_ERROR
;

55 
shm
->
addr
 = (
u_ch¨
 *Ë
	`mm≠
(
NULL
, shm->
size
, 
PROT_READ
|
PROT_WRITE
,

56 
MAP_SHARED
, 
fd
, 0);

58 i‡(
shm
->
addr
 =
MAP_FAILED
) {

59 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

60 "mm≠(/dev/zîo, MAP_SHARED, %uzËÁûed", 
shm
->
size
);

63 i‡(
	`˛o£
(
fd
) == -1) {

64 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

68  (
shm
->
addr
 =
MAP_FAILED
Ë? 
NGX_ERROR
 : 
NGX_OK
;

69 
	}
}

73 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

75 i‡(
	`munm≠
((*Ë
shm
->
addr
, shm->
size
) == -1) {

76 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

77 "munm≠(%p, %uzËÁûed", 
shm
->
addr
, shm->
size
);

79 
	}
}

81 #ñi‡(
NGX_HAVE_SYSVSHM
)

83 
	~<sys/ùc.h
>

84 
	~<sys/shm.h
>

87 
ngx_öt_t


88 
	$ngx_shm_Æloc
(
ngx_shm_t
 *
shm
)

90 
id
;

92 
id
 = 
	`shmgë
(
IPC_PRIVATE
, 
shm
->
size
, (
SHM_R
|
SHM_W
|
IPC_CREAT
));

94 i‡(
id
 == -1) {

95 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

96 "shmgë(%uzËÁûed", 
shm
->
size
);

97  
NGX_ERROR
;

100 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_CORE
, 
shm
->
log
, 0, "shmgë id: %d", 
id
);

102 
shm
->
addr
 = 
	`shm©
(
id
, 
NULL
, 0);

104 i‡(
shm
->
addr
 == (*) -1) {

105 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
, "shmat() failed");

108 i‡(
	`shm˘l
(
id
, 
IPC_RMID
, 
NULL
) == -1) {

109 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

113  (
shm
->
addr
 =(*Ë-1Ë? 
NGX_ERROR
 : 
NGX_OK
;

114 
	}
}

118 
	$ngx_shm_‰ì
(
ngx_shm_t
 *
shm
)

120 i‡(
	`shmdt
(
shm
->
addr
) == -1) {

121 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
shm
->
log
, 
ngx_î∫o
,

122 "shmdt(%pËÁûed", 
shm
->
addr
);

124 
	}
}

	@src/os/unix/ngx_shmem.h

8 #i‚de‡
_NGX_SHMEM_H_INCLUDED_


9 
	#_NGX_SHMEM_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

17 
u_ch¨
 *
	maddr
;

18 
size_t
 
	msize
;

19 
ngx_°r_t
 
	m«me
;

20 
ngx_log_t
 *
	mlog
;

21 
ngx_uöt_t
 
	mexi°s
;

22 } 
	tngx_shm_t
;

25 
ngx_öt_t
 
ngx_shm_Æloc
(
ngx_shm_t
 *
shm
);

26 
ngx_shm_‰ì
(
ngx_shm_t
 *
shm
);

	@src/os/unix/ngx_socket.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

24 #i‡(
NGX_HAVE_FIONBIO
)

27 
	$ngx_n⁄blockög
(
ngx_sockë_t
 
s
)

29 
nb
;

31 
nb
 = 1;

33  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

34 
	}
}

38 
	$ngx_blockög
(
ngx_sockë_t
 
s
)

40 
nb
;

42 
nb
 = 0;

44  
	`io˘l
(
s
, 
FIONBIO
, &
nb
);

45 
	}
}

50 #i‡(
NGX_FREEBSD
)

53 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

55 
t˝_n›ush
;

57 
t˝_n›ush
 = 1;

59  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

60 (c⁄° *Ë&
t˝_n›ush
, ());

61 
	}
}

65 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

67 
t˝_n›ush
;

69 
t˝_n›ush
 = 0;

71  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_NOPUSH
,

72 (c⁄° *Ë&
t˝_n›ush
, ());

73 
	}
}

75 #ñi‡(
NGX_LINUX
)

79 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

81 
c‹k
;

83 
c‹k
 = 1;

85  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

86 (c⁄° *Ë&
c‹k
, ());

87 
	}
}

91 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

93 
c‹k
;

95 
c‹k
 = 0;

97  
	`£tsock›t
(
s
, 
IPPROTO_TCP
, 
TCP_CORK
,

98 (c⁄° *Ë&
c‹k
, ());

99 
	}
}

104 
	$ngx_t˝_n›ush
(
ngx_sockë_t
 
s
)

107 
	}
}

111 
	$ngx_t˝_push
(
ngx_sockë_t
 
s
)

114 
	}
}

	@src/os/unix/ngx_socket.h

8 #i‚de‡
_NGX_SOCKET_H_INCLUDED_


9 
	#_NGX_SOCKET_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

15 
	#NGX_WRITE_SHUTDOWN
 
SHUT_WR


	)

17 
	tngx_sockë_t
;

19 
	#ngx_sockë
 
sockë


	)

20 
	#ngx_sockë_n
 "sockë()"

	)

23 #i‡(
NGX_HAVE_FIONBIO
)

25 
ngx_n⁄blockög
(
ngx_sockë_t
 
s
);

26 
ngx_blockög
(
ngx_sockë_t
 
s
);

28 
	#ngx_n⁄blockög_n
 "io˘l(FIONBIO)"

	)

29 
	#ngx_blockög_n
 "io˘l(!FIONBIO)"

	)

33 
	#ngx_n⁄blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë| 
O_NONBLOCK
)

	)

34 
	#ngx_n⁄blockög_n
 "f˙é(O_NONBLOCK)"

	)

36 
	#ngx_blockög
(
s
Ë
	`f˙é
(s, 
F_SETFL
, f˙é(s, 
F_GETFL
Ë& ~
O_NONBLOCK
)

	)

37 
	#ngx_blockög_n
 "f˙é(!O_NONBLOCK)"

	)

41 
ngx_t˝_n›ush
(
ngx_sockë_t
 
s
);

42 
ngx_t˝_push
(
ngx_sockë_t
 
s
);

44 #i‡(
NGX_LINUX
)

46 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_CORK)"

	)

47 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_CORK)"

	)

51 
	#ngx_t˝_n›ush_n
 "£tsock›t(TCP_NOPUSH)"

	)

52 
	#ngx_t˝_push_n
 "£tsock›t(!TCP_NOPUSH)"

	)

57 
	#ngx_shutdown_sockë
 
shutdown


	)

58 
	#ngx_shutdown_sockë_n
 "shutdown()"

	)

60 
	#ngx_˛o£_sockë
 
˛o£


	)

61 
	#ngx_˛o£_sockë_n
 "˛o£(Ësockë"

	)

	@src/os/unix/ngx_solaris.h

8 #i‚de‡
_NGX_SOLARIS_H_INCLUDED_


9 
	#_NGX_SOLARIS_H_INCLUDED_


	)

12 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

13 
off_t
 
limô
);

	@src/os/unix/ngx_solaris_config.h

8 #i‚de‡
_NGX_SOLARIS_CONFIG_H_INCLUDED_


9 
	#_NGX_SOLARIS_CONFIG_H_INCLUDED_


	)

12 #i‚de‡
_REENTRANT


13 
	#_REENTRANT


	)

16 
	#_FILE_OFFSET_BITS
 64

	)

18 
	~<sys/ty≥s.h
>

19 
	~<sys/time.h
>

20 
	~<uni°d.h
>

21 
	~<°d¨g.h
>

22 
	~<°ddef.h
>

23 
	~<°dio.h
>

24 
	~<°dlib.h
>

25 
	~<î∫o.h
>

26 
	~<°rög.h
>

27 
	~<sig«l.h
>

28 
	~<pwd.h
>

29 
	~<gΩ.h
>

30 
	~<dúít.h
>

31 
	~<glob.h
>

32 
	~<time.h
>

33 
	~<sys/°©vfs.h
>

35 
	~<sys/fûio.h
>

36 
	~<sys/uio.h
>

37 
	~<sys/°©.h
>

38 
	~<f˙é.h
>

40 
	~<sys/waô.h
>

41 
	~<sys/mm™.h
>

42 
	~<sys/ªsour˚.h
>

43 
	~<sched.h
>

45 
	~<sys/sockë.h
>

46 
	~<√töë/ö.h
>

47 
	~<√töë/t˝.h
>

48 
	~<¨∑/öë.h
>

49 
	~<√tdb.h
>

50 
	~<sys/un.h
>

52 
	~<sys/sy°emöfo.h
>

53 
	~<limôs.h
>

54 
	~<öây≥s.h
>

55 
	~<¸y±.h
>

57 
	#NGX_ALIGNMENT
 
_MAX_ALIGNMENT


	)

59 
	~<ngx_auto_c⁄fig.h
>

62 #i‡(
NGX_HAVE_POSIX_SEM
)

63 
	~<£m≠h‹e.h
>

67 #i‡(
NGX_HAVE_POLL
)

68 
	~<pﬁl.h
>

72 #i‡(
NGX_HAVE_DEVPOLL
)

73 
	~<sys/io˘l.h
>

74 
	~<sys/devpﬁl.h
>

78 #i‡(
NGX_HAVE_EVENTPORT
)

79 
	~<p‹t.h
>

83 #i‡(
NGX_HAVE_SENDFILE
)

84 
	~<sys/£ndfûe.h
>

88 
	#NGX_LISTEN_BACKLOG
 511

	)

91 #i‚de‡
NGX_HAVE_INHERITED_NONBLOCK


92 
	#NGX_HAVE_INHERITED_NONBLOCK
 1

	)

96 #i‚de‡
NGX_HAVE_SO_SNDLOWAT


98 
	#NGX_HAVE_SO_SNDLOWAT
 0

	)

102 
	#NGX_HAVE_OS_SPECIFIC_INIT
 1

	)

103 
	#ngx_debug_öô
()

	)

106 **
ívú⁄
;

	@src/os/unix/ngx_solaris_init.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

12 
	gngx_sﬁ¨is_sy¢ame
[20];

13 
	gngx_sﬁ¨is_ªÀa£
[10];

14 
	gngx_sﬁ¨is_vîsi⁄
[50];

17 
ngx_os_io_t
 
	gngx_sﬁ¨is_io
 = {

18 
ngx_unix_ªcv
,

19 
ngx_ªadv_chaö
,

20 
ngx_udp_unix_ªcv
,

21 
ngx_unix_£nd
,

22 #i‡(
NGX_HAVE_SENDFILE
)

23 
ngx_sﬁ¨is_£ndfûev_chaö
,

24 
NGX_IO_SENDFILE


26 
ngx_wrôev_chaö
,

32 
ngx_öt_t


33 
	$ngx_os_•ecific_öô
(
ngx_log_t
 *
log
)

35 i‡(
	`sysöfo
(
SI_SYSNAME
, 
ngx_sﬁ¨is_sy¢ame
, (ngx_solaris_sysname))

38 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

40  
NGX_ERROR
;

43 i‡(
	`sysöfo
(
SI_RELEASE
, 
ngx_sﬁ¨is_ªÀa£
, (ngx_solaris_release))

46 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

48  
NGX_ERROR
;

51 i‡(
	`sysöfo
(
SI_VERSION
, 
ngx_sﬁ¨is_vîsi⁄
, (ngx_solaris_version))

54 
	`ngx_log_îr‹
(
NGX_LOG_ALERT
, 
log
, 
ngx_î∫o
,

56  
NGX_ERROR
;

60 
ngx_os_io
 = 
ngx_sﬁ¨is_io
;

62  
NGX_OK
;

63 
	}
}

67 
	$ngx_os_•ecific_°©us
(
ngx_log_t
 *
log
)

70 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "OS: %s %s",

71 
ngx_sﬁ¨is_sy¢ame
, 
ngx_sﬁ¨is_ªÀa£
);

73 
	`ngx_log_îr‹
(
NGX_LOG_NOTICE
, 
log
, 0, "version: %s",

74 
ngx_sﬁ¨is_vîsi⁄
);

75 
	}
}

	@src/os/unix/ngx_solaris_sendfilev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_TEST_BUILD_SOLARIS_SENDFILEV
)

17 
	s£ndfûevec
 {

18 
	msfv_fd
;

19 
u_öt
 
	msfv_Êag
;

20 
off_t
 
	msfv_off
;

21 
size_t
 
	msfv_Àn
;

22 } 
	t£ndfûevec_t
;

24 
	#SFV_FD_SELF
 -2

	)

26 
ssize_t
 
	$£ndfûev
(
fd
, c⁄° 
£ndfûevec
 *
vec
,

27 
sfv˙t
, 
size_t
 *
x„ºed
)

30 
	}
}

32 
ngx_chaö_t
 *
ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
,Çgx_chaö_à*
ö
,

33 
off_t
 
limô
);

38 #i‡(
IOV_MAX
 > 64)

39 
	#NGX_SENDFILEVECS
 64

	)

41 
	#NGX_SENDFILEVECS
 
IOV_MAX


	)

46 
ngx_chaö_t
 *

47 
	$ngx_sﬁ¨is_£ndfûev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

49 
fd
;

50 
u_ch¨
 *
¥ev
;

51 
off_t
 
size
, 
£nd
, 
¥ev_£nd
, 
Æig√d
, 
Âªv
;

52 
size_t
 
£¡
;

53 
ssize_t
 
n
;

54 
ngx_öt_t
 
eöå
, 
com∂ëe
;

55 
ngx_îr_t
 
îr
;

56 
£ndfûevec_t
 *
sfv
, 
sfvs
[
NGX_SENDFILEVECS
];

57 
ngx_¨øy_t
 
vec
;

58 
ngx_evít_t
 *
wev
;

59 
ngx_chaö_t
 *
˛
;

61 
wev
 = 
c
->
wrôe
;

63 i‡(!
wev
->
ªady
) {

64  
ö
;

67 i‡(!
c
->
£ndfûe
) {

68  
	`ngx_wrôev_chaö
(
c
, 
ö
, 
limô
);

74 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

75 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

79 
£nd
 = 0;

81 
vec
.
ñts
 = 
sfvs
;

82 
vec
.
size
 = (
£ndfûevec_t
);

83 
vec
.
«Œoc
 = 
NGX_SENDFILEVECS
;

84 
vec
.
poﬁ
 = 
c
->pool;

87 
fd
 = 
SFV_FD_SELF
;

88 
¥ev
 = 
NULL
;

89 
Âªv
 = 0;

90 
sfv
 = 
NULL
;

91 
eöå
 = 0;

92 
com∂ëe
 = 0;

93 
£¡
 = 0;

94 
¥ev_£nd
 = 
£nd
;

96 
vec
.
√…s
 = 0;

100 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

102 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

106 i‡(
	`ngx_buf_ö_mem‹y_⁄ly
(
˛
->
buf
)) {

107 
fd
 = 
SFV_FD_SELF
;

109 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

111 i‡(
£nd
 + 
size
 > 
limô
) {

112 
size
 = 
limô
 - 
£nd
;

115 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

116 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

119 i‡(
vec
.
√…s
 >
IOV_MAX
) {

123 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

124 i‡(
sfv
 =
NULL
) {

125  
NGX_CHAIN_ERROR
;

128 
sfv
->
sfv_fd
 = 
SFV_FD_SELF
;

129 
sfv
->
sfv_Êag
 = 0;

130 
sfv
->
sfv_off
 = (
off_t
Ë(
uöçå_t
Ë
˛
->
buf
->
pos
;

131 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

134 
¥ev
 = 
˛
->
buf
->
pos
 + (
size_t
Ë
size
;

135 
£nd
 +
size
;

138 
¥ev
 = 
NULL
;

140 
size
 = 
˛
->
buf
->
fûe_œ°
 - cl->buf->
fûe_pos
;

142 i‡(
£nd
 + 
size
 > 
limô
) {

143 
size
 = 
limô
 - 
£nd
;

145 
Æig√d
 = (
˛
->
buf
->
fûe_pos
 + 
size
 + 
ngx_∑gesize
 - 1)

146 & ~((
off_t
Ë
ngx_∑gesize
 - 1);

148 i‡(
Æig√d
 <
˛
->
buf
->
fûe_œ°
) {

149 
size
 = 
Æig√d
 - 
˛
->
buf
->
fûe_pos
;

153 i‡(
fd
 =
˛
->
buf
->
fûe
->fd && 
Âªv
 =˛->buf->
fûe_pos
) {

154 
sfv
->
sfv_Àn
 +(
size_t
Ë
size
;

157 i‡(
vec
.
√…s
 >
IOV_MAX
) {

161 
sfv
 = 
	`ngx_¨øy_push
(&
vec
);

162 i‡(
sfv
 =
NULL
) {

163  
NGX_CHAIN_ERROR
;

166 
fd
 = 
˛
->
buf
->
fûe
->fd;

167 
sfv
->
sfv_fd
 = 
fd
;

168 
sfv
->
sfv_Êag
 = 0;

169 
sfv
->
sfv_off
 = 
˛
->
buf
->
fûe_pos
;

170 
sfv
->
sfv_Àn
 = (
size_t
Ë
size
;

173 
Âªv
 = 
˛
->
buf
->
fûe_pos
 + 
size
;

174 
£nd
 +
size
;

178 
n
 = 
	`£ndfûev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
, &
£¡
);

180 i‡(
n
 == -1) {

181 
îr
 = 
ngx_î∫o
;

183 
îr
) {

184 
NGX_EAGAIN
:

187 
NGX_EINTR
:

188 
eöå
 = 1;

192 
wev
->
îr‹
 = 1;

193 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "sendfilev() failed");

194  
NGX_CHAIN_ERROR
;

197 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

198 "£ndfûev(Ë£¡ o∆y %uz byãs", 
£¡
);

201 
	`ngx_log_debug2
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

202 "£ndfûev: %z %z", 
n
, 
£¡
);

204 i‡(
£nd
 - 
¥ev_£nd
 =(
off_t
Ë
£¡
) {

205 
com∂ëe
 = 1;

208 
c
->
£¡
 += sent;

210 
˛
 = 
ö
; cl; c»˛->
√xt
) {

212 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

216 i‡(
£¡
 == 0) {

220 
size
 = 
	`ngx_buf_size
(
˛
->
buf
);

222 i‡((
off_t
Ë
£¡
 >
size
) {

223 
£¡
 = (
size_t
Ë((
off_t
Ë£¡ - 
size
);

225 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

226 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

229 i‡(
˛
->
buf
->
ö_fûe
) {

230 
˛
->
buf
->
fûe_pos
 = cl->buf->
fûe_œ°
;

236 i‡(
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

237 
˛
->
buf
->
pos
 +
£¡
;

240 i‡(
˛
->
buf
->
ö_fûe
) {

241 
˛
->
buf
->
fûe_pos
 +
£¡
;

247 i‡(
eöå
) {

251 i‡(!
com∂ëe
) {

252 
wev
->
ªady
 = 0;

253  
˛
;

256 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

257  
˛
;

260 
ö
 = 
˛
;

262 
	}
}

	@src/os/unix/ngx_sunpro_atomic_sparc64.h

8 #i‡(
NGX_PTR_SIZE
 == 4)

9 
	#NGX_CASA
 
ngx_ˇß


	)

11 
	#NGX_CASA
 
ngx_ˇsxa


	)

15 
ngx_©omic_uöt_t


16 
ngx_ˇß
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

18 
ngx_©omic_uöt_t


19 
ngx_ˇsxa
(
ngx_©omic_uöt_t
 
£t
,Çgx_©omic_uöt_à
ﬁd
, 
ngx_©omic_t
 *
lock
);

24 
ngx_ölöe
 
ngx_©omic_uöt_t


25 
	$ngx_©omic_cmp_£t
(
ngx_©omic_t
 *
lock
, 
ngx_©omic_uöt_t
 
ﬁd
,

26 
ngx_©omic_uöt_t
 
£t
)

28 
£t
 = 
	`NGX_CASA
(£t, 
ﬁd
, 
lock
);

30  (
£t
 =
ﬁd
);

31 
	}
}

34 
ngx_ölöe
 
ngx_©omic_öt_t


35 
	$ngx_©omic_„tch_add
(
ngx_©omic_t
 *
vÆue
, 
ngx_©omic_öt_t
 
add
)

37 
ngx_©omic_uöt_t
 
ﬁd
, 
ªs
;

39 
ﬁd
 = *
vÆue
;

43 
ªs
 = 
ﬁd
 + 
add
;

45 
ªs
 = 
	`NGX_CASA
‘es, 
ﬁd
, 
vÆue
);

47 i‡(
ªs
 =
ﬁd
) {

48  
ªs
;

51 
ﬁd
 = 
ªs
;

53 
	}
}

56 
	#ngx_mem‹y_b¨rõr
() \

57 
	`__asm
 (".volatile"); \

58 
	`__asm
 ("membar #LoadLoad | #LoadStore | #StoreStore | #StoreLoad"); \

59 
	`__asm
 (".n⁄vﬁ©ûe")

	)

61 
	#ngx_˝u_∑u£
()

	)

	@src/os/unix/ngx_thread.h

8 #i‚de‡
_NGX_THREAD_H_INCLUDED_


9 
	#_NGX_THREAD_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

15 #i‡(
NGX_THREADS
)

17 
	#NGX_MAX_THREADS
 128

	)

19 #i‡(
NGX_USE_RFORK
)

20 
	~<ngx_‰ìbsd_rf‹k_thªad.h
>

25 
	~<±hªad.h
>

27 
±hªad_t
 
	tngx_tid_t
;

29 
	#ngx_thªad_£lf
(Ë
	`±hªad_£lf
()

	)

30 
	#ngx_log_tid
 (Ë
	`ngx_thªad_£lf
()

	)

32 #i‡(
NGX_FREEBSD
Ë&& !(
NGX_LINUXTHREADS
)

33 
	#NGX_TID_T_FMT
 "%p"

	)

35 
	#NGX_TID_T_FMT
 "%d"

	)

39 
±hªad_key_t
 
	tngx_és_key_t
;

41 
	#ngx_thªad_key_¸óã
(
key
Ë
	`±hªad_key_¸óã
(key, 
NULL
)

	)

42 
	#ngx_thªad_key_¸óã_n
 "±hªad_key_¸óã()"

	)

43 
	#ngx_thªad_£t_és
 
±hªad_£t•ecific


	)

44 
	#ngx_thªad_£t_és_n
 "±hªad_£t•ecific()"

	)

45 
	#ngx_thªad_gë_és
 
±hªad_gë•ecific


	)

48 
	#NGX_MUTEX_LIGHT
 0

	)

51 
±hªad_muãx_t
 
	mmuãx
;

52 
ngx_log_t
 *
	mlog
;

53 } 
	tngx_muãx_t
;

56 
±hªad_c⁄d_t
 
	mc⁄d
;

57 
ngx_log_t
 *
	mlog
;

58 } 
	tngx_c⁄d_t
;

60 
	#ngx_thªad_sigmask
 
±hªad_sigmask


	)

61 
	#ngx_thªad_sigmask_n
 "±hªad_sigmask()"

	)

63 
	#ngx_thªad_joö
(
t
, 
p
Ë
	`±hªad_joö
—,Ö)

	)

65 
	#ngx_£âhπôÀ
(
n
)

	)

69 
ngx_öt_t
 
ngx_muãx_åylock
(
ngx_muãx_t
 *
m
);

70 
ngx_muãx_lock
(
ngx_muãx_t
 *
m
);

71 
ngx_muãx_u∆ock
(
ngx_muãx_t
 *
m
);

76 
	#ngx_thªad_vﬁ©ûe
 vﬁ©ûe

	)

80 
ngx_tid_t
 
	mtid
;

81 
ngx_c⁄d_t
 *
	mcv
;

82 
ngx_uöt_t
 
	m°©e
;

83 } 
	tngx_thªad_t
;

85 
	#NGX_THREAD_FREE
 1

	)

86 
	#NGX_THREAD_BUSY
 2

	)

87 
	#NGX_THREAD_EXIT
 3

	)

88 
	#NGX_THREAD_DONE
 4

	)

90 
ngx_öt_t
 
ngx_thªads_n
;

91 vﬁ©ûê
ngx_thªad_t
 
ngx_thªads
[
NGX_MAX_THREADS
];

94 * 
	tngx_thªad_vÆue_t
;

96 
ngx_öt_t
 
ngx_öô_thªads
(
n
, 
size_t
 
size
, 
ngx_cy˛e_t
 *
cy˛e
);

97 
ngx_îr_t
 
ngx_¸óã_thªad
(
ngx_tid_t
 *
tid
,

98 
	$ngx_thªad_vÆue_t
 (*
func
)(*
¨g
), *¨g, 
ngx_log_t
 *
log
);

100 
ngx_muãx_t
 *
	`ngx_muãx_öô
(
ngx_log_t
 *
log
, 
ngx_uöt_t
 
Êags
);

101 
	`ngx_muãx_de°roy
(
ngx_muãx_t
 *
m
);

104 
ngx_c⁄d_t
 *
	`ngx_c⁄d_öô
(
ngx_log_t
 *
log
);

105 
	`ngx_c⁄d_de°roy
(
ngx_c⁄d_t
 *
cv
);

106 
ngx_öt_t
 
	`ngx_c⁄d_waô
(
ngx_c⁄d_t
 *
cv
, 
ngx_muãx_t
 *
m
);

107 
ngx_öt_t
 
	`ngx_c⁄d_sig«l
(
ngx_c⁄d_t
 *
cv
);

112 
	#ngx_thªad_vﬁ©ûe


	)

114 
	#ngx_log_tid
 0

	)

115 
	#NGX_TID_T_FMT
 "%d"

	)

117 
	#ngx_muãx_åylock
(
m
Ë
NGX_OK


	)

118 
	#ngx_muãx_lock
(
m
)

	)

119 
	#ngx_muãx_u∆ock
(
m
)

	)

121 
	#ngx_c⁄d_sig«l
(
cv
)

	)

123 
	#ngx_thªad_maö
(Ë1

	)

	@src/os/unix/ngx_time.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

25 
	$ngx_timez⁄e_upd©e
()

27 #i‡(
NGX_FREEBSD
)

29 i‡(
	`gëív
("TZ")) {

33 
	`puãnv
("TZ=UTC");

35 
	`tz£t
();

37 
	`un£ãnv
("TZ");

39 
	`tz£t
();

41 #ñi‡(
NGX_LINUX
)

42 
time_t
 
s
;

43 
tm
 *
t
;

44 
buf
[4];

46 
s
 = 
	`time
(0);

48 
t
 = 
	`loˇ…ime
(&
s
);

50 
	`°r·ime
(
buf
, 4, "%H", 
t
);

53 
	}
}

57 
	$ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
)

59 #i‡(
NGX_HAVE_LOCALTIME_R
)

60 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

63 
ngx_tm_t
 *
t
;

65 
t
 = 
	`loˇ…ime
(&
s
);

66 *
tm
 = *
t
;

70 
tm
->
ngx_tm_m⁄
++;

71 
tm
->
ngx_tm_yór
 += 1900;

72 
	}
}

76 
	$ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm)

78 #i‡(
NGX_HAVE_LOCALTIME_R
)

79 (Ë
	`loˇ…ime_r
(&
s
, 
tm
);

82 
tm
 *
t
;

84 
t
 = 
	`loˇ…ime
(&
s
);

85 *
tm
 = *
t
;

88 
	}
}

92 
	$ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm)

94 #i‡(
NGX_HAVE_LOCALTIME_R
)

95 (Ë
	`gmtime_r
(&
s
, 
tm
);

98 
tm
 *
t
;

100 
t
 = 
	`gmtime
(&
s
);

101 *
tm
 = *
t
;

104 
	}
}

	@src/os/unix/ngx_time.h

8 #i‚de‡
_NGX_TIME_H_INCLUDED_


9 
	#_NGX_TIME_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
ngx_rbåì_key_t
 
	tngx_m£c_t
;

17 
ngx_rbåì_key_öt_t
 
	tngx_m£c_öt_t
;

19 
tm
 
	tngx_tm_t
;

21 
	#ngx_tm_£c
 
tm_£c


	)

22 
	#ngx_tm_mö
 
tm_mö


	)

23 
	#ngx_tm_hour
 
tm_hour


	)

24 
	#ngx_tm_mday
 
tm_mday


	)

25 
	#ngx_tm_m⁄
 
tm_m⁄


	)

26 
	#ngx_tm_yór
 
tm_yór


	)

27 
	#ngx_tm_wday
 
tm_wday


	)

28 
	#ngx_tm_isd°
 
tm_isd°


	)

30 
	#ngx_tm_£c_t
 

	)

31 
	#ngx_tm_mö_t
 

	)

32 
	#ngx_tm_hour_t
 

	)

33 
	#ngx_tm_mday_t
 

	)

34 
	#ngx_tm_m⁄_t
 

	)

35 
	#ngx_tm_yór_t
 

	)

36 
	#ngx_tm_wday_t
 

	)

39 #i‡(
NGX_HAVE_GMTOFF
)

40 
	#ngx_tm_gmtoff
 
tm_gmtoff


	)

41 
	#ngx_tm_z⁄e
 
tm_z⁄e


	)

45 #i‡(
NGX_SOLARIS
)

47 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
Ætz⁄e
 : 
timez⁄e
Ë/ 60)

	)

51 
	#ngx_timez⁄e
(
isd°
Ë(- (isd° ? 
timez⁄e
 + 3600 :Åimez⁄eË/ 60)

	)

56 
ngx_timez⁄e_upd©e
();

57 
ngx_loˇ…ime
(
time_t
 
s
, 
ngx_tm_t
 *
tm
);

58 
ngx_libc_loˇ…ime
(
time_t
 
s
, 
tm
 *tm);

59 
ngx_libc_gmtime
(
time_t
 
s
, 
tm
 *tm);

61 
	#ngx_gëtimeofday
(
ç
Ë(Ë
	`gëtimeofday
—p, 
NULL
);

	)

62 
	#ngx_m¶ìp
(
ms
Ë(Ë
	`u¶ìp
(m†* 1000)

	)

63 
	#ngx_¶ìp
(
s
Ë(Ë
	`¶ìp
(s)

	)

	@src/os/unix/ngx_udp_recv.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
NGX_HAVE_KQUEUE
)

15 
ssize_t


16 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

18 
ssize_t
 
n
;

19 
ngx_îr_t
 
îr
;

20 
ngx_evít_t
 *
ªv
;

22 
ªv
 = 
c
->
ªad
;

25 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

27 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

28 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

30 i‡(
n
 >= 0) {

31 i‡(
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
) {

32 
ªv
->
avaûabÀ
 -
n
;

39 i‡(
ªv
->
avaûabÀ
 <= 0) {

40 
ªv
->
ªady
 = 0;

41 
ªv
->
avaûabÀ
 = 0;

45  
n
;

48 
îr
 = 
ngx_sockë_î∫o
;

50 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

51 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

53 
n
 = 
NGX_AGAIN
;

56 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

60 } 
îr
 =
NGX_EINTR
);

62 
ªv
->
ªady
 = 0;

64 i‡(
n
 =
NGX_ERROR
) {

65 
ªv
->
îr‹
 = 1;

68  
n
;

69 
	}
}

73 
ssize_t


74 
	$ngx_udp_unix_ªcv
(
ngx_c⁄√˘i⁄_t
 *
c
, 
u_ch¨
 *
buf
, 
size_t
 
size
)

76 
ssize_t
 
n
;

77 
ngx_îr_t
 
îr
;

78 
ngx_evít_t
 *
ªv
;

80 
ªv
 = 
c
->
ªad
;

83 
n
 = 
	`ªcv
(
c
->
fd
, 
buf
, 
size
, 0);

85 
	`ngx_log_debug3
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0,

86 "ªcv: fd:%d %d o‡%d", 
c
->
fd
, 
n
, 
size
);

88 i‡(
n
 >= 0) {

89  
n
;

92 
îr
 = 
ngx_sockë_î∫o
;

94 i‡(
îr
 =
NGX_EAGAIN
 ||Éº =
NGX_EINTR
) {

95 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

97 
n
 = 
NGX_AGAIN
;

100 
n
 = 
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "recv() failed");

104 } 
îr
 =
NGX_EINTR
);

106 
ªv
->
ªady
 = 0;

108 i‡(
n
 =
NGX_ERROR
) {

109 
ªv
->
îr‹
 = 1;

112  
n
;

113 
	}
}

	@src/os/unix/ngx_user.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

22 #i‡(
NGX_CRYPT
)

24 #i‡(
NGX_HAVE_GNU_CRYPT_R
)

26 
ngx_öt_t


27 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

29 *
vÆue
;

30 
size_t
 
Àn
;

31 
¸y±_d©a
 
cd
;

33 
cd
.
öôülized
 = 0;

35 
cd
.
cuºít_ß…
[0] = ~
ß…
[0];

37 
vÆue
 = 
	`¸y±_r
((*Ë
key
, (*Ë
ß…
, &
cd
);

39 i‡(
vÆue
) {

40 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

42 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

43 i‡(*
í¸y±ed
 =
NULL
) {

44  
NGX_ERROR
;

47 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

48  
NGX_OK
;

51 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
ngx_î∫o
, "crypt_r() failed");

53  
NGX_ERROR
;

54 
	}
}

58 
ngx_öt_t


59 
	$ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
, u_ch¨ **
í¸y±ed
)

61 *
vÆue
;

62 
size_t
 
Àn
;

63 
ngx_îr_t
 
îr
;

65 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

69 i‡(
	`ngx_muãx_åylock
(
ngx_¸y±_muãx
Ë!
NGX_OK
) {

70  
NGX_AGAIN
;

75 
vÆue
 = 
	`¸y±
((*Ë
key
, (*Ë
ß…
);

77 i‡(
vÆue
) {

78 
Àn
 = 
	`ngx_°æí
(
vÆue
) + 1;

80 *
í¸y±ed
 = 
	`ngx_≤Æloc
(
poﬁ
, 
Àn
);

81 i‡(*
í¸y±ed
 =
NULL
) {

82 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

83 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

85  
NGX_ERROR
;

88 
	`ngx_mem˝y
(*
í¸y±ed
, 
vÆue
, 
Àn
);

89 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

90 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

92  
NGX_OK
;

95 
îr
 = 
ngx_î∫o
;

97 #i‡(
NGX_THREADS
 && 
NGX_NONREENTRANT_CRYPT
)

98 
	`ngx_muãx_u∆ock
(
ngx_¸y±_muãx
);

101 
	`ngx_log_îr‹
(
NGX_LOG_CRIT
, 
poﬁ
->
log
, 
îr
, "crypt() failed");

103  
NGX_ERROR
;

104 
	}
}

	@src/os/unix/ngx_user.h

8 #i‚de‡
_NGX_USER_H_INCLUDED_


9 
	#_NGX_USER_H_INCLUDED_


	)

12 
	~<ngx_c⁄fig.h
>

13 
	~<ngx_c‹e.h
>

16 
uid_t
 
	tngx_uid_t
;

17 
gid_t
 
	tngx_gid_t
;

20 
ngx_öt_t
 
ngx_libc_¸y±
(
ngx_poﬁ_t
 *
poﬁ
, 
u_ch¨
 *
key
, u_ch¨ *
ß…
,

21 
u_ch¨
 **
í¸y±ed
);

	@src/os/unix/ngx_writev_chain.c

8 
	~<ngx_c⁄fig.h
>

9 
	~<ngx_c‹e.h
>

10 
	~<ngx_evít.h
>

13 #i‡(
IOV_MAX
 > 64)

14 
	#NGX_IOVS
 64

	)

16 
	#NGX_IOVS
 
IOV_MAX


	)

20 
ngx_chaö_t
 *

21 
	$ngx_wrôev_chaö
(
ngx_c⁄√˘i⁄_t
 *
c
, 
ngx_chaö_t
 *
ö
, 
off_t
 
limô
)

23 
u_ch¨
 *
¥ev
;

24 
ssize_t
 
n
, 
size
, 
£¡
;

25 
off_t
 
£nd
, 
¥ev_£nd
;

26 
ngx_uöt_t
 
eöå
, 
com∂ëe
;

27 
ngx_îr_t
 
îr
;

28 
ngx_¨øy_t
 
vec
;

29 
ngx_chaö_t
 *
˛
;

30 
ngx_evít_t
 *
wev
;

31 
iovec
 *
iov
, 
iovs
[
NGX_IOVS
];

33 
wev
 = 
c
->
wrôe
;

35 i‡(!
wev
->
ªady
) {

36  
ö
;

39 #i‡(
NGX_HAVE_KQUEUE
)

41 i‡((
ngx_evít_Êags
 & 
NGX_USE_KQUEUE_EVENT
Ë&& 
wev
->
≥ndög_eof
) {

42 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
wev
->
kq_î∫o
,

44 
wev
->
îr‹
 = 1;

45  
NGX_CHAIN_ERROR
;

52 i‡(
limô
 =0 ||Üimô > (
off_t
Ë(
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
)) {

53 
limô
 = 
NGX_MAX_SIZE_T_VALUE
 - 
ngx_∑gesize
;

56 
£nd
 = 0;

58 
vec
.
ñts
 = 
iovs
;

59 
vec
.
size
 = (
iovec
);

60 
vec
.
«Œoc
 = 
NGX_IOVS
;

61 
vec
.
poﬁ
 = 
c
->pool;

64 
¥ev
 = 
NULL
;

65 
iov
 = 
NULL
;

66 
eöå
 = 0;

67 
com∂ëe
 = 0;

68 
¥ev_£nd
 = 
£nd
;

70 
vec
.
√…s
 = 0;

74 
˛
 = 
ö
; c»&& 
£nd
 < 
limô
; c»˛->
√xt
) {

76 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

81 i‡(!
	`ngx_buf_ö_mem‹y
(
˛
->
buf
)) {

82 
	`ngx_debug_poöt
();

86 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

88 i‡(
£nd
 + 
size
 > 
limô
) {

89 
size
 = (
ssize_t
Ë(
limô
 - 
£nd
);

92 i‡(
¥ev
 =
˛
->
buf
->
pos
) {

93 
iov
->
iov_Àn
 +
size
;

96 i‡(
vec
.
√…s
 >
IOV_MAX
) {

100 
iov
 = 
	`ngx_¨øy_push
(&
vec
);

101 i‡(
iov
 =
NULL
) {

102  
NGX_CHAIN_ERROR
;

105 
iov
->
iov_ba£
 = (*Ë
˛
->
buf
->
pos
;

106 
iov
->
iov_Àn
 = 
size
;

109 
¥ev
 = 
˛
->
buf
->
pos
 + 
size
;

110 
£nd
 +
size
;

113 
n
 = 
	`wrôev
(
c
->
fd
, 
vec
.
ñts
, vec.
√…s
);

115 i‡(
n
 == -1) {

116 
îr
 = 
ngx_î∫o
;

118 
îr
) {

119 
NGX_EAGAIN
:

122 
NGX_EINTR
:

123 
eöå
 = 1;

127 
wev
->
îr‹
 = 1;

128 (Ë
	`ngx_c⁄√˘i⁄_îr‹
(
c
, 
îr
, "writev() failed");

129  
NGX_CHAIN_ERROR
;

132 
	`ngx_log_debug0
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 
îr
,

136 
£¡
 = 
n
 > 0 ?Ç : 0;

138 
	`ngx_log_debug1
(
NGX_LOG_DEBUG_EVENT
, 
c
->
log
, 0, "wrôev: %z", 
£¡
);

140 i‡(
£nd
 - 
¥ev_£nd
 =
£¡
) {

141 
com∂ëe
 = 1;

144 
c
->
£¡
 += sent;

146 
˛
 = 
ö
; cl; c»˛->
√xt
) {

148 i‡(
	`ngx_buf_•ecül
(
˛
->
buf
)) {

152 i‡(
£¡
 == 0) {

156 
size
 = 
˛
->
buf
->
œ°
 - cl->buf->
pos
;

158 i‡(
£¡
 >
size
) {

159 
£¡
 -
size
;

160 
˛
->
buf
->
pos
 = cl->buf->
œ°
;

165 
˛
->
buf
->
pos
 +
£¡
;

170 i‡(
eöå
) {

174 i‡(!
com∂ëe
) {

175 
wev
->
ªady
 = 0;

176  
˛
;

179 i‡(
£nd
 >
limô
 || 
˛
 =
NULL
) {

180  
˛
;

183 
ö
 = 
˛
;

185 
	}
}

	@/usr/include/aio.h

23 #i‚de‡
_AIO_H


24 
	#_AIO_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<f˙é.h
>

28 
	~<sig«l.h
>

29 
	~<time.h
>

30 
	~<sys/ty≥s.h
>

32 
__BEGIN_DECLS


35 
	saiocb


37 
	maio_fûdes
;

38 
	maio_lio_›code
;

39 
	maio_ªq¥io
;

40 vﬁ©ûê*
	maio_buf
;

41 
size_t
 
	maio_nbyãs
;

42 
sigevít
 
	maio_sigevít
;

45 
aiocb
 *
	m__√xt_¥io
;

46 
	m__abs_¥io
;

47 
	m__pﬁicy
;

48 
	m__îr‹_code
;

49 
__ssize_t
 
	m__ªtu∫_vÆue
;

51 #i‚de‡
__USE_FILE_OFFSET64


52 
__off_t
 
	maio_off£t
;

53 
	m__∑d
[ (
__off64_t
Ë-  (
__off_t
)];

55 
__off64_t
 
	maio_off£t
;

57 
	m__unu£d
[32];

62 #ifde‡
__USE_LARGEFILE64


63 
	saiocb64


65 
	maio_fûdes
;

66 
	maio_lio_›code
;

67 
	maio_ªq¥io
;

68 vﬁ©ûê*
	maio_buf
;

69 
size_t
 
	maio_nbyãs
;

70 
sigevít
 
	maio_sigevít
;

73 
aiocb
 *
	m__√xt_¥io
;

74 
	m__abs_¥io
;

75 
	m__pﬁicy
;

76 
	m__îr‹_code
;

77 
__ssize_t
 
	m__ªtu∫_vÆue
;

79 
__off64_t
 
	maio_off£t
;

80 
	m__unu£d
[32];

85 #ifde‡
__USE_GNU


88 
	saioöô


90 
	maio_thªads
;

91 
	maio_num
;

92 
	maio_locks
;

93 
	maio_u£dba
;

94 
	maio_debug
;

95 
	maio_numu£rs
;

96 
	maio_idÀ_time
;

98 
	maio_ª£rved
;

106 
	mAIO_CANCELED
,

107 
	#AIO_CANCELED
 
AIO_CANCELED


	)

108 
	mAIO_NOTCANCELED
,

109 
	#AIO_NOTCANCELED
 
AIO_NOTCANCELED


	)

110 
	mAIO_ALLDONE


111 
	#AIO_ALLDONE
 
AIO_ALLDONE


	)

118 
	mLIO_READ
,

119 
	#LIO_READ
 
LIO_READ


	)

120 
	mLIO_WRITE
,

121 
	#LIO_WRITE
 
LIO_WRITE


	)

122 
	mLIO_NOP


123 
	#LIO_NOP
 
LIO_NOP


	)

130 
	mLIO_WAIT
,

131 
	#LIO_WAIT
 
LIO_WAIT


	)

132 
	mLIO_NOWAIT


133 
	#LIO_NOWAIT
 
LIO_NOWAIT


	)

138 #ifde‡
__USE_GNU


139 
	$aio_öô
 (
__c⁄°
 
aioöô
 *
__öô
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

143 #i‚de‡
__USE_FILE_OFFSET64


145 
	$aio_ªad
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

147 
	$aio_wrôe
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

150 
	$lio_li°io
 (
__mode
,

151 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

152 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

153 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
	$aio_îr‹
 (
__c⁄°
 
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

158 
__ssize_t
 
	$aio_ªtu∫
 (
aiocb
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

162 
	$aio_ˇn˚l
 (
__fûdes
, 
aiocb
 *
__aiocbp
Ë
__THROW
;

169 
	$aio_su•íd
 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

170 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

171 
	`__n⁄nuŒ
 ((1));

175 
	$aio_fsync
 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
)

176 
__THROW
 
	`__n⁄nuŒ
 ((2));

178 #ifde‡
__REDIRECT_NTH


179 
	`__REDIRECT_NTH
 (
aio_ªad
, (
aiocb
 *
__aiocbp
), 
aio_ªad64
)

180 
	`__n⁄nuŒ
 ((1));

181 
	`__REDIRECT_NTH
 (
aio_wrôe
, (
aiocb
 *
__aiocbp
), 
aio_wrôe64
)

182 
	`__n⁄nuŒ
 ((1));

184 
	`__REDIRECT_NTH
 (
lio_li°io
,

185 (
__mode
,

186 
aiocb
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

187 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
),

188 
lio_li°io64
Ë
	`__n⁄nuŒ
 ((2));

190 
	`__REDIRECT_NTH
 (
aio_îr‹
, (
__c⁄°
 
aiocb
 *
__aiocbp
),

191 
aio_îr‹64
Ë
	`__n⁄nuŒ
 ((1));

192 
__ssize_t
 
	`__REDIRECT_NTH
 (
aio_ªtu∫
, (
aiocb
 *
__aiocbp
),

193 
aio_ªtu∫64
Ë
	`__n⁄nuŒ
 ((1));

195 
	`__REDIRECT_NTH
 (
aio_ˇn˚l
,

196 (
__fûdes
, 
aiocb
 *
__aiocbp
),

197 
aio_ˇn˚l64
);

199 
	`__REDIRECT_NTH
 (
aio_su•íd
,

200 (
__c⁄°
 
aiocb
 *__c⁄° 
__li°
[], 
__√¡
,

201 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
),

202 
aio_su•íd64
Ë
	`__n⁄nuŒ
 ((1));

204 
	`__REDIRECT_NTH
 (
aio_fsync
,

205 (
__›î©i⁄
, 
aiocb
 *
__aiocbp
),

206 
aio_fsync64
Ë
	`__n⁄nuŒ
 ((2));

209 
	#aio_ªad
 
aio_ªad64


	)

210 
	#aio_wrôe
 
aio_wrôe64


	)

211 
	#lio_li°io
 
lio_li°io64


	)

212 
	#aio_îr‹
 
aio_îr‹64


	)

213 
	#aio_ªtu∫
 
aio_ªtu∫64


	)

214 
	#aio_ˇn˚l
 
aio_ˇn˚l64


	)

215 
	#aio_su•íd
 
aio_su•íd64


	)

216 
	#aio_fsync
 
aio_fsync64


	)

220 #ifde‡
__USE_LARGEFILE64


221 
	$aio_ªad64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 
	$aio_wrôe64
 (
aiocb64
 *
__aiocbp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

224 
	$lio_li°io64
 (
__mode
,

225 
aiocb64
 *
__c⁄°
 
__li°
[
__ª°ri˘_¨r
],

226 
__√¡
, 
sigevít
 *
__ª°ri˘
 
__sig
)

227 
__THROW
 
	`__n⁄nuŒ
 ((2));

229 
	$aio_îr‹64
 (
__c⁄°
 
aiocb64
 *
__aiocbp
)

230 
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
__ssize_t
 
	$aio_ªtu∫64
 (
aiocb64
 *
__aiocbp
)

232 
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$aio_ˇn˚l64
 (
__fûdes
, 
aiocb64
 *
__aiocbp
Ë
__THROW
;

236 
	$aio_su•íd64
 (
__c⁄°
 
aiocb64
 *__c⁄° 
__li°
[], 
__√¡
,

237 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

238 
__THROW
 
	`__n⁄nuŒ
 ((1));

240 
	$aio_fsync64
 (
__›î©i⁄
, 
aiocb64
 *
__aiocbp
)

241 
__THROW
 
	`__n⁄nuŒ
 ((2));

244 
__END_DECLS


	@/usr/include/arpa/inet.h

19 #i‚de‡
_ARPA_INET_H


20 
	#_ARPA_INET_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<√töë/ö.h
>

26 #i‚de‡
__sockÀn_t_deföed


27 
__sockÀn_t
 
	tsockÀn_t
;

28 
	#__sockÀn_t_deföed


	)

31 
__BEGIN_DECLS


35 
ö_addr_t
 
	$öë_addr
 (
__c⁄°
 *
__˝
Ë
__THROW
;

38 
ö_addr_t
 
	$öë_ aof
 (
ö_addr
 
__ö
Ë
__THROW
;

42 
ö_addr
 
	$öë_makóddr
 (
ö_addr_t
 
__√t
, in_addr_à
__ho°
)

43 
__THROW
;

46 
ö_addr_t
 
	$öë_√tof
 (
ö_addr
 
__ö
Ë
__THROW
;

50 
ö_addr_t
 
	$öë_√tw‹k
 (
__c⁄°
 *
__˝
Ë
__THROW
;

54 *
	$öë_¡ﬂ
 (
ö_addr
 
__ö
Ë
__THROW
;

59 
	$öë_±⁄
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

60 *
__ª°ri˘
 
__buf
Ë
__THROW
;

65 
__c⁄°
 *
	$öë_¡›
 (
__af
, 
__c⁄°
 *
__ª°ri˘
 
__˝
,

66 *
__ª°ri˘
 
__buf
, 
sockÀn_t
 
__Àn
)

67 
__THROW
;

71 #ifde‡
__USE_MISC


74 
	$öë_©⁄
 (
__c⁄°
 *
__˝
, 
ö_addr
 *
__öp
Ë
__THROW
;

78 *
	$öë_√è
 (
ö_addr_t
 
__√t
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

83 *
	$öë_√t_¡›
 (
__af
, 
__c⁄°
 *
__˝
, 
__bôs
,

84 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

89 
	$öë_√t_±⁄
 (
__af
, 
__c⁄°
 *
__˝
,

90 *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

95 
	$öë_nßp_addr
 (
__c⁄°
 *
__˝
,

96 *
__buf
, 
__Àn
Ë
__THROW
;

100 *
	$öë_nßp_¡ﬂ
 (
__Àn
, 
__c⁄°
 *
__˝
,

101 *
__buf
Ë
__THROW
;

104 
__END_DECLS


	@/usr/include/crypt.h

25 #i‚de‡
_CRYPT_H


26 
	#_CRYPT_H
 1

	)

28 
	~<„©uªs.h
>

30 
__BEGIN_DECLS


33 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

34 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

37 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

41 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

43 #ifde‡
__USE_GNU


46 
	s¸y±_d©a


48 
keysched
[16 * 8];

49 
sb0
[32768];

50 
sb1
[32768];

51 
sb2
[32768];

52 
sb3
[32768];

54 
¸y±_3_buf
[14];

55 
cuºít_ß…
[2];

56 
cuºít_ß…bôs
;

57 
dúe˘i⁄
, 
öôülized
;

60 *
	$¸y±_r
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
,

61 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

62 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

64 
	$£tkey_r
 (
__c⁄°
 *
__key
,

65 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

66 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

68 
	$í¸y±_r
 (*
__libc_block
, 
__edÊag
,

69 
¸y±_d©a
 * 
__ª°ri˘
 
__d©a
)

70 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

73 
__END_DECLS


	@/usr/include/dirent.h

24 #i‚def 
_DIRENT_H


25 
	#_DIRENT_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 #ifde‡
__USE_XOPEN


34 #i‚de‡
__öo_t_deföed


35 #i‚de‡
__USE_FILE_OFFSET64


36 
__öo_t
 
	töo_t
;

38 
__öo64_t
 
	töo_t
;

40 
	#__öo_t_deföed


	)

42 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


43 
__öo64_t
 
	töo64_t
;

44 
	#__öo64_t_deföed


	)

63 
	~<bôs/dúít.h
>

65 #i‡(
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
Ë&& !deföed 
d_fûío


66 
	#d_öo
 
d_fûío


	)

83 #ifde‡
_DIRENT_HAVE_D_NAMLEN


84 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

85 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

87 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

88 #ifde‡
_DIRENT_HAVE_D_RECLEN


89 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

91 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name : \

92 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

97 #ifde‡
__USE_BSD


101 
	mDT_UNKNOWN
 = 0,

102 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

103 
	mDT_FIFO
 = 1,

104 
	#DT_FIFO
 
DT_FIFO


	)

105 
	mDT_CHR
 = 2,

106 
	#DT_CHR
 
DT_CHR


	)

107 
	mDT_DIR
 = 4,

108 
	#DT_DIR
 
DT_DIR


	)

109 
	mDT_BLK
 = 6,

110 
	#DT_BLK
 
DT_BLK


	)

111 
	mDT_REG
 = 8,

112 
	#DT_REG
 
DT_REG


	)

113 
	mDT_LNK
 = 10,

114 
	#DT_LNK
 
DT_LNK


	)

115 
	mDT_SOCK
 = 12,

116 
	#DT_SOCK
 
DT_SOCK


	)

117 
	mDT_WHT
 = 14

118 
	#DT_WHT
 
DT_WHT


	)

122 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

123 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

129 
__dú°ªam
 
	tDIR
;

136 
DIR
 *
	$›ídú
 (
__c⁄°
 *
__«me
Ë
	`__n⁄nuŒ
 ((1));

138 #ifde‡
__USE_XOPEN2K8


143 
DIR
 *
	`fd›ídú
 (
__fd
);

151 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

163 #i‚de‡
__USE_FILE_OFFSET64


164 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

166 #ifde‡
__REDIRECT


167 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

168 
	`__n⁄nuŒ
 ((1));

170 
	#ªaddú
 
ªaddú64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


184 #i‚de‡
__USE_FILE_OFFSET64


185 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

186 
dúít
 *
__ª°ri˘
 
__íåy
,

187 
dúít
 **
__ª°ri˘
 
__ªsu…
)

188 
	`__n⁄nuŒ
 ((1, 2, 3));

190 #ifde‡
__REDIRECT


191 
	`__REDIRECT
 (
ªaddú_r
,

192 (
DIR
 *
__ª°ri˘
 
__dúp
,

193 
dúít
 *
__ª°ri˘
 
__íåy
,

194 
dúít
 **
__ª°ri˘
 
__ªsu…
),

195 
ªaddú64_r
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

197 
	#ªaddú_r
 
ªaddú64_r


	)

201 #ifde‡
__USE_LARGEFILE64


202 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

203 
dúít64
 *
__ª°ri˘
 
__íåy
,

204 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

205 
	`__n⁄nuŒ
 ((1, 2, 3));

210 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


213 
	~<bôs/ty≥s.h
>

216 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

219 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

222 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN2K8


225 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

227 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


228 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

231 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


232 #i‚de‡
MAXNAMLEN


234 
	~<bôs/posix1_lim.h
>

237 #ifde‡
NAME_MAX


238 
	#MAXNAMLEN
 
NAME_MAX


	)

240 
	#MAXNAMLEN
 255

	)

245 
	#__√ed_size_t


	)

246 
	~<°ddef.h
>

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`sˇndú
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

257 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

258 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

259 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

260 
__c⁄°
 
dúít
 **))

261 
	`__n⁄nuŒ
 ((1, 2));

263 #ifde‡
__REDIRECT


264 
	`__REDIRECT
 (
sˇndú
,

265 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

266 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

267 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

268 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

269 
__c⁄°
 
dúít
 **)),

270 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

272 
	#sˇndú
 
sˇndú64


	)

276 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


279 
	`sˇndú64
 (
__c⁄°
 *
__ª°ri˘
 
__dú
,

280 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

281 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

282 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

283 
__c⁄°
 
dúít64
 **))

284 
	`__n⁄nuŒ
 ((1, 2));

287 #ifde‡
__USE_GNU


293 #i‚de‡
__USE_FILE_OFFSET64


294 
	`sˇndú©
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

295 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

296 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

297 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

298 
__c⁄°
 
dúít
 **))

299 
	`__n⁄nuŒ
 ((2, 3));

301 #ifde‡
__REDIRECT


302 
	`__REDIRECT
 (
sˇndú©
,

303 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

304 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

305 (*
__£À˘‹
Ë(
__c⁄°
 
dúít
 *),

306 (*
__cmp
Ë(
__c⁄°
 
dúít
 **,

307 
__c⁄°
 
dúít
 **)),

308 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

310 
	#sˇndú©
 
sˇndú©64


	)

316 
	`sˇndú©64
 (
__dfd
, 
__c⁄°
 *
__ª°ri˘
 
__dú
,

317 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

318 (*
__£À˘‹
Ë(
__c⁄°
 
dúít64
 *),

319 (*
__cmp
Ë(
__c⁄°
 
dúít64
 **,

320 
__c⁄°
 
dúít64
 **))

321 
	`__n⁄nuŒ
 ((2, 3));

325 #i‚de‡
__USE_FILE_OFFSET64


326 
	$Æphas‹t
 (
__c⁄°
 
dúít
 **
__e1
,

327 
__c⁄°
 
dúít
 **
__e2
)

328 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

330 #ifde‡
__REDIRECT


331 
	`__REDIRECT_NTH
 (
Æphas‹t
,

332 (
__c⁄°
 
dúít
 **
__e1
,

333 
__c⁄°
 
dúít
 **
__e2
),

334 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

336 
	#Æphas‹t
 
Æphas‹t64


	)

340 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


341 
	$Æphas‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

342 
__c⁄°
 
dúít64
 **
__e2
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC


353 #i‚de‡
__USE_FILE_OFFSET64


354 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

355 
size_t
 
__nbyãs
,

356 
__off_t
 *
__ª°ri˘
 
__ba£p
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

359 #ifde‡
__REDIRECT


360 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

361 (
__fd
, *
__ª°ri˘
 
__buf
,

362 
size_t
 
__nbyãs
,

363 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

364 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

366 
	#gëdúíåõs
 
gëdúíåõs64


	)

370 #ifde‡
__USE_LARGEFILE64


371 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

372 
size_t
 
__nbyãs
,

373 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

374 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

378 #ifde‡
__USE_GNU


380 #i‚de‡
__USE_FILE_OFFSET64


381 
	$vîsi⁄s‹t
 (
__c⁄°
 
dúít
 **
__e1
,

382 
__c⁄°
 
dúít
 **
__e2
)

383 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__REDIRECT


386 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

387 (
__c⁄°
 
dúít
 **
__e1
,

388 
__c⁄°
 
dúít
 **
__e2
),

389 
vîsi⁄s‹t64
)

390 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

392 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

396 #ifde‡
__USE_LARGEFILE64


397 
	$vîsi⁄s‹t64
 (
__c⁄°
 
dúít64
 **
__e1
,

398 
__c⁄°
 
dúít64
 **
__e2
)

399 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

403 
__END_DECLS


	@/usr/include/errno.h

23 #i‚def 
_ERRNO_H


27 #i‚def 
__√ed_Em©h


28 
	#_ERRNO_H
 1

	)

29 
	~<„©uªs.h
>

32 
	g__BEGIN_DECLS


36 
	~<bôs/î∫o.h
>

37 #unde‡
__√ed_Em©h


39 #ifdef 
_ERRNO_H


46 #i‚def 
î∫o


47 
î∫o
;

50 #ifde‡
__USE_GNU


55 *
¥ogøm_övoˇti⁄_«me
, *
¥ogøm_övoˇti⁄_sh‹t_«me
;

59 
	g__END_DECLS


67 #i‡
deföed
 
__USE_GNU
 || deföed 
__√ed_îr‹_t


68 #i‚de‡
__îr‹_t_deföed


69 
	tîr‹_t
;

70 
	#__îr‹_t_deföed
 1

	)

72 #unde‡
__√ed_îr‹_t


	@/usr/include/fcntl.h

24 #i‚def 
_FCNTL_H


25 
	#_FCNTL_H
 1

	)

27 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 
	~<bôs/f˙é.h
>

37 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


38 
	~<bôs/ty≥s.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

41 
	~<bôs/°©.h
>

43 
	#S_IFMT
 
__S_IFMT


	)

44 
	#S_IFDIR
 
__S_IFDIR


	)

45 
	#S_IFCHR
 
__S_IFCHR


	)

46 
	#S_IFBLK
 
__S_IFBLK


	)

47 
	#S_IFREG
 
__S_IFREG


	)

48 #ifde‡
__S_IFIFO


49 
	#S_IFIFO
 
__S_IFIFO


	)

51 #ifde‡
__S_IFLNK


52 
	#S_IFLNK
 
__S_IFLNK


	)

54 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


55 
	#S_IFSOCK
 
__S_IFSOCK


	)

60 
	#S_ISUID
 
__S_ISUID


	)

61 
	#S_ISGID
 
__S_ISGID


	)

63 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


65 
	#S_ISVTX
 
__S_ISVTX


	)

68 
	#S_IRUSR
 
__S_IREAD


	)

69 
	#S_IWUSR
 
__S_IWRITE


	)

70 
	#S_IXUSR
 
__S_IEXEC


	)

72 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

74 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

75 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

76 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

78 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

80 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

81 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

82 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

84 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

87 #ifdef 
__USE_MISC


88 #i‚de‡
R_OK


91 
	#R_OK
 4

	)

92 
	#W_OK
 2

	)

93 
	#X_OK
 1

	)

94 
	#F_OK
 0

	)

99 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


100 
	#SEEK_SET
 0

	)

101 
	#SEEK_CUR
 1

	)

102 
	#SEEK_END
 2

	)

110 
f˙é
 (
__fd
, 
__cmd
, ...);

118 #i‚de‡
__USE_FILE_OFFSET64


119 
	$›í
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

121 #ifde‡
__REDIRECT


122 
	`__REDIRECT
 (
›í
, (
__c⁄°
 *
__fûe
, 
__oÊag
, ...), 
›í64
)

123 
	`__n⁄nuŒ
 ((1));

125 
	#›í
 
›í64


	)

128 #ifde‡
__USE_LARGEFILE64


129 
	$›í64
 (
__c⁄°
 *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

132 #ifde‡
__USE_ATFILE


142 #i‚de‡
__USE_FILE_OFFSET64


143 
	$›í©
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

144 
	`__n⁄nuŒ
 ((2));

146 #ifde‡
__REDIRECT


147 
	`__REDIRECT
 (
›í©
, (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
,

148 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

150 
	#›í©
 
›í©64


	)

153 #ifde‡
__USE_LARGEFILE64


154 
	$›í©64
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__oÊag
, ...)

155 
	`__n⁄nuŒ
 ((2));

164 #i‚de‡
__USE_FILE_OFFSET64


165 
	$¸ót
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

167 #ifde‡
__REDIRECT


168 
	`__REDIRECT
 (
¸ót
, (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
),

169 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

171 
	#¸ót
 
¸ót64


	)

174 #ifde‡
__USE_LARGEFILE64


175 
	$¸ót64
 (
__c⁄°
 *
__fûe
, 
__mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

178 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

179 && !
deföed
 
__USE_POSIX
))

188 
	#F_ULOCK
 0

	)

189 
	#F_LOCK
 1

	)

190 
	#F_TLOCK
 2

	)

191 
	#F_TEST
 3

	)

193 #i‚de‡
__USE_FILE_OFFSET64


194 
	`lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
);

196 #ifde‡
__REDIRECT


197 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

199 
	#lockf
 
lockf64


	)

202 #ifde‡
__USE_LARGEFILE64


203 
	`lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
);

207 #ifde‡
__USE_XOPEN2K


210 #i‚de‡
__USE_FILE_OFFSET64


211 
	$posix_Ádvi£
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
,

212 
__advi£
Ë
__THROW
;

214 #ifde‡
__REDIRECT_NTH


215 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

216 
__off64_t
 
__Àn
, 
__advi£
),

217 
posix_Ádvi£64
);

219 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

222 #ifde‡
__USE_LARGEFILE64


223 
	$posix_Ádvi£64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
,

224 
__advi£
Ë
__THROW
;

232 #i‚de‡
__USE_FILE_OFFSET64


233 
	`posix_ÁŒoˇã
 (
__fd
, 
__off_t
 
__off£t
, __off_à
__Àn
);

235 #ifde‡
__REDIRECT


236 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

237 
__off64_t
 
__Àn
),

238 
posix_ÁŒoˇã64
);

240 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

243 #ifde‡
__USE_LARGEFILE64


244 
	`posix_ÁŒoˇã64
 (
__fd
, 
__off64_t
 
__off£t
, __off64_à
__Àn
);

250 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe
 \

251 && 
deföed
 
__va_¨g_∑ck_Àn


252 
	~<bôs/f˙é2.h
>

255 
__END_DECLS


	@/usr/include/glob.h

20 #i‚def 
_GLOB_H


21 
	#_GLOB_H
 1

	)

23 
	~<sys/cdefs.h
>

25 
	g__BEGIN_DECLS


28 #i‚de‡
__size_t


29 
__SIZE_TYPE__
 
	t__size_t
;

30 #i‡
deföed
 
__USE_XOPEN
 || 
__USE_XOPEN2K8


31 
__SIZE_TYPE__
 
	tsize_t
;

36 #unde‡
__size_t


37 
	#__size_t
 
size_t


	)

41 
	#GLOB_ERR
 (1 << 0)

	)

42 
	#GLOB_MARK
 (1 << 1)

	)

43 
	#GLOB_NOSORT
 (1 << 2)

	)

44 
	#GLOB_DOOFFS
 (1 << 3)

	)

45 
	#GLOB_NOCHECK
 (1 << 4)

	)

46 
	#GLOB_APPEND
 (1 << 5)

	)

47 
	#GLOB_NOESCAPE
 (1 << 6)

	)

48 
	#GLOB_PERIOD
 (1 << 7)

	)

50 #i‡!
deföed
 
__USE_POSIX2
 || deföed 
__USE_BSD
 || deföed 
__USE_GNU


51 
	#GLOB_MAGCHAR
 (1 << 8)

	)

52 
	#GLOB_ALTDIRFUNC
 (1 << 9)

	)

53 
	#GLOB_BRACE
 (1 << 10)

	)

54 
	#GLOB_NOMAGIC
 (1 << 11)

	)

55 
	#GLOB_TILDE
 (1 << 12)

	)

56 
	#GLOB_ONLYDIR
 (1 << 13)

	)

57 
	#GLOB_TILDE_CHECK
 (1 << 14)

	)

59 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

60 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

61 
GLOB_PERIOD
|
GLOB_ALTDIRFUNC
|
GLOB_BRACE
| \

62 
GLOB_NOMAGIC
|
GLOB_TILDE
|
GLOB_ONLYDIR
|
GLOB_TILDE_CHECK
)

	)

64 
	#__GLOB_FLAGS
 (
GLOB_ERR
|
GLOB_MARK
|
GLOB_NOSORT
|
GLOB_DOOFFS
| \

65 
GLOB_NOESCAPE
|
GLOB_NOCHECK
|
GLOB_APPEND
| \

66 
GLOB_PERIOD
)

	)

70 
	#GLOB_NOSPACE
 1

	)

71 
	#GLOB_ABORTED
 2

	)

72 
	#GLOB_NOMATCH
 3

	)

73 
	#GLOB_NOSYS
 4

	)

74 #ifde‡
__USE_GNU


77 
	#GLOB_ABEND
 
GLOB_ABORTED


	)

81 #ifde‡
__USE_GNU


82 
	g°©
;

86 
__size_t
 
	mgl_∑thc
;

87 **
	mgl_∑thv
;

88 
__size_t
 
	mgl_offs
;

89 
	mgl_Êags
;

93 (*
	mgl_˛o£dú
) (*);

94 #ifde‡
__USE_GNU


95 
	mdúít
 *(*
	mgl_ªaddú
) (*);

97 *(*
	mgl_ªaddú
) (*);

99 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

100 #ifde‡
__USE_GNU


101 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

102 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©
 *__restrict);

104 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

105 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

107 } 
	tglob_t
;

109 #ifde‡
__USE_LARGEFILE64


110 #ifde‡
__USE_GNU


111 
	g°©64
;

115 
__size_t
 
	mgl_∑thc
;

116 **
	mgl_∑thv
;

117 
__size_t
 
	mgl_offs
;

118 
	mgl_Êags
;

122 (*
	mgl_˛o£dú
) (*);

123 #ifde‡
__USE_GNU


124 
	mdúít64
 *(*
	mgl_ªaddú
) (*);

126 *(*
	mgl_ªaddú
) (*);

128 *(*
	mgl_›ídú
Ë(
__c⁄°
 *);

129 #ifde‡
__USE_GNU


130 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

131 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, 
°©64
 *__restrict);

133 (*
	mgl_l°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

134 (*
	mgl_°©
Ë(
__c⁄°
 *
	m__ª°ri˘
, *__restrict);

136 } 
	tglob64_t
;

147 #i‡!
deföed
 
__USE_FILE_OFFSET64


148 
glob
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

149 (*
__îrfunc
Ë(
__c⁄°
 *, ),

150 
glob_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

153 
	$glob‰ì
 (
glob_t
 *
__pglob
Ë
__THROW
;

155 
	`__REDIRECT_NTH
 (
glob
, (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
,

156 
__Êags
,

157 (*
__îrfunc
Ë(
__c⁄°
 *, ),

158 
glob_t
 *
__ª°ri˘
 
__pglob
), 
glob64
);

160 
	`__REDIRECT_NTH
 (
glob‰ì
, (
glob_t
 *
__pglob
), 
glob‰ì64
);

163 #ifde‡
__USE_LARGEFILE64


164 
	`glob64
 (
__c⁄°
 *
__ª°ri˘
 
__∑âîn
, 
__Êags
,

165 (*
__îrfunc
Ë(
__c⁄°
 *, ),

166 
glob64_t
 *
__ª°ri˘
 
__pglob
Ë
__THROW
;

168 
	$glob‰ì64
 (
glob64_t
 *
__pglob
Ë
__THROW
;

172 #ifde‡
__USE_GNU


178 
	$glob_∑âîn_p
 (
__c⁄°
 *
__∑âîn
, 
__quŸe
Ë
__THROW
;

181 
__END_DECLS


	@/usr/include/grp.h

24 #i‚def 
_GRP_H


25 
	#_GRP_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

33 
	#__√ed_size_t


	)

34 
	~<°ddef.h
>

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K
Ë&& !deföed 
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

44 
	sgroup


46 *
	mgr_«me
;

47 *
	mgr_∑sswd
;

48 
__gid_t
 
	mgr_gid
;

49 **
	mgr_mem
;

53 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


54 
	#__√ed_FILE


	)

55 
	~<°dio.h
>

59 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


64 
£tgª¡
 ();

67 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

68 || 
deföed
 
__USE_XOPEN2K8


73 
ídgª¡
 ();

79 
group
 *
gëgª¡
 ();

82 #ifdef 
__USE_SVID


89 
group
 *
fgëgª¡
 (
FILE
 *
__°ªam
);

92 #ifde‡
__USE_GNU


99 
putgª¡
 (
__c⁄°
 
group
 *
__ª°ri˘
 
__p
,

100 
FILE
 *
__ª°ri˘
 
__f
);

107 
group
 *
gëgrgid
 (
__gid_t
 
__gid
);

113 
group
 *
gëg∫am
 (
__c⁄°
 *
__«me
);

115 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


117 #ifde‡
__USE_MISC


120 
	#NSS_BUFLEN_GROUP
 1024

	)

136 #ifde‡
__USE_GNU


137 
gëgª¡_r
 (
group
 *
__ª°ri˘
 
__ªsu…buf
,

138 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

139 
group
 **
__ª°ri˘
 
__ªsu…
);

146 
gëgrgid_r
 (
__gid_t
 
__gid
, 
group
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
group
 **
__ª°ri˘
 
__ªsu…
);

154 
gëg∫am_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

155 
group
 *
__ª°ri˘
 
__ªsu…buf
,

156 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

157 
group
 **
__ª°ri˘
 
__ªsu…
);

159 #ifdef 
__USE_SVID


167 
fgëgª¡_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

168 
group
 *
__ª°ri˘
 
__ªsu…buf
,

169 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

170 
group
 **
__ª°ri˘
 
__ªsu…
);

176 #ifdef 
__USE_BSD


178 
	#__√ed_size_t


	)

179 
	~<°ddef.h
>

182 
	$£tgroups
 (
size_t
 
__n
, 
__c⁄°
 
__gid_t
 *
__groups
Ë
__THROW
;

192 
	`gëgrou∂i°
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
,

193 
__gid_t
 *
__groups
, *
__ngroups
);

203 
	`öôgroups
 (
__c⁄°
 *
__u£r
, 
__gid_t
 
__group
);

207 
__END_DECLS


	@/usr/include/inttypes.h

23 #i‚de‡
_INTTYPES_H


24 
	#_INTTYPES_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<°döt.h
>

31 #i‚de‡
____gwch¨_t_deföed


32 #ifde‡
__˝lu•lus


33 
	#__gwch¨_t
 
wch¨_t


	)

34 #ñi‡
deföed
 
__WCHAR_TYPE__


35 
__WCHAR_TYPE__
 
	t__gwch¨_t
;

37 
	#__√ed_wch¨_t


	)

38 
	~<°ddef.h
>

39 
wch¨_t
 
	t__gwch¨_t
;

41 
	#____gwch¨_t_deföed
 1

	)

47 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_FORMAT_MACROS


49 #i‡
__WORDSIZE
 == 64

50 
	#__PRI64_PREFIX
 "l"

	)

51 
	#__PRIPTR_PREFIX
 "l"

	)

53 
	#__PRI64_PREFIX
 "Œ"

	)

54 
	#__PRIPTR_PREFIX


	)

60 
	#PRId8
 "d"

	)

61 
	#PRId16
 "d"

	)

62 
	#PRId32
 "d"

	)

63 
	#PRId64
 
__PRI64_PREFIX
 "d"

	)

65 
	#PRIdLEAST8
 "d"

	)

66 
	#PRIdLEAST16
 "d"

	)

67 
	#PRIdLEAST32
 "d"

	)

68 
	#PRIdLEAST64
 
__PRI64_PREFIX
 "d"

	)

70 
	#PRIdFAST8
 "d"

	)

71 
	#PRIdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

72 
	#PRIdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

73 
	#PRIdFAST64
 
__PRI64_PREFIX
 "d"

	)

76 
	#PRIi8
 "i"

	)

77 
	#PRIi16
 "i"

	)

78 
	#PRIi32
 "i"

	)

79 
	#PRIi64
 
__PRI64_PREFIX
 "i"

	)

81 
	#PRIiLEAST8
 "i"

	)

82 
	#PRIiLEAST16
 "i"

	)

83 
	#PRIiLEAST32
 "i"

	)

84 
	#PRIiLEAST64
 
__PRI64_PREFIX
 "i"

	)

86 
	#PRIiFAST8
 "i"

	)

87 
	#PRIiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

88 
	#PRIiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

89 
	#PRIiFAST64
 
__PRI64_PREFIX
 "i"

	)

92 
	#PRIo8
 "o"

	)

93 
	#PRIo16
 "o"

	)

94 
	#PRIo32
 "o"

	)

95 
	#PRIo64
 
__PRI64_PREFIX
 "o"

	)

97 
	#PRIoLEAST8
 "o"

	)

98 
	#PRIoLEAST16
 "o"

	)

99 
	#PRIoLEAST32
 "o"

	)

100 
	#PRIoLEAST64
 
__PRI64_PREFIX
 "o"

	)

102 
	#PRIoFAST8
 "o"

	)

103 
	#PRIoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

104 
	#PRIoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

105 
	#PRIoFAST64
 
__PRI64_PREFIX
 "o"

	)

108 
	#PRIu8
 "u"

	)

109 
	#PRIu16
 "u"

	)

110 
	#PRIu32
 "u"

	)

111 
	#PRIu64
 
__PRI64_PREFIX
 "u"

	)

113 
	#PRIuLEAST8
 "u"

	)

114 
	#PRIuLEAST16
 "u"

	)

115 
	#PRIuLEAST32
 "u"

	)

116 
	#PRIuLEAST64
 
__PRI64_PREFIX
 "u"

	)

118 
	#PRIuFAST8
 "u"

	)

119 
	#PRIuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

120 
	#PRIuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

121 
	#PRIuFAST64
 
__PRI64_PREFIX
 "u"

	)

124 
	#PRIx8
 "x"

	)

125 
	#PRIx16
 "x"

	)

126 
	#PRIx32
 "x"

	)

127 
	#PRIx64
 
__PRI64_PREFIX
 "x"

	)

129 
	#PRIxLEAST8
 "x"

	)

130 
	#PRIxLEAST16
 "x"

	)

131 
	#PRIxLEAST32
 "x"

	)

132 
	#PRIxLEAST64
 
__PRI64_PREFIX
 "x"

	)

134 
	#PRIxFAST8
 "x"

	)

135 
	#PRIxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

136 
	#PRIxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

137 
	#PRIxFAST64
 
__PRI64_PREFIX
 "x"

	)

140 
	#PRIX8
 "X"

	)

141 
	#PRIX16
 "X"

	)

142 
	#PRIX32
 "X"

	)

143 
	#PRIX64
 
__PRI64_PREFIX
 "X"

	)

145 
	#PRIXLEAST8
 "X"

	)

146 
	#PRIXLEAST16
 "X"

	)

147 
	#PRIXLEAST32
 "X"

	)

148 
	#PRIXLEAST64
 
__PRI64_PREFIX
 "X"

	)

150 
	#PRIXFAST8
 "X"

	)

151 
	#PRIXFAST16
 
__PRIPTR_PREFIX
 "X"

	)

152 
	#PRIXFAST32
 
__PRIPTR_PREFIX
 "X"

	)

153 
	#PRIXFAST64
 
__PRI64_PREFIX
 "X"

	)

157 
	#PRIdMAX
 
__PRI64_PREFIX
 "d"

	)

158 
	#PRIiMAX
 
__PRI64_PREFIX
 "i"

	)

159 
	#PRIoMAX
 
__PRI64_PREFIX
 "o"

	)

160 
	#PRIuMAX
 
__PRI64_PREFIX
 "u"

	)

161 
	#PRIxMAX
 
__PRI64_PREFIX
 "x"

	)

162 
	#PRIXMAX
 
__PRI64_PREFIX
 "X"

	)

166 
	#PRIdPTR
 
__PRIPTR_PREFIX
 "d"

	)

167 
	#PRIiPTR
 
__PRIPTR_PREFIX
 "i"

	)

168 
	#PRIoPTR
 
__PRIPTR_PREFIX
 "o"

	)

169 
	#PRIuPTR
 
__PRIPTR_PREFIX
 "u"

	)

170 
	#PRIxPTR
 
__PRIPTR_PREFIX
 "x"

	)

171 
	#PRIXPTR
 
__PRIPTR_PREFIX
 "X"

	)

177 
	#SCNd8
 "hhd"

	)

178 
	#SCNd16
 "hd"

	)

179 
	#SCNd32
 "d"

	)

180 
	#SCNd64
 
__PRI64_PREFIX
 "d"

	)

182 
	#SCNdLEAST8
 "hhd"

	)

183 
	#SCNdLEAST16
 "hd"

	)

184 
	#SCNdLEAST32
 "d"

	)

185 
	#SCNdLEAST64
 
__PRI64_PREFIX
 "d"

	)

187 
	#SCNdFAST8
 "hhd"

	)

188 
	#SCNdFAST16
 
__PRIPTR_PREFIX
 "d"

	)

189 
	#SCNdFAST32
 
__PRIPTR_PREFIX
 "d"

	)

190 
	#SCNdFAST64
 
__PRI64_PREFIX
 "d"

	)

193 
	#SCNi8
 "hhi"

	)

194 
	#SCNi16
 "hi"

	)

195 
	#SCNi32
 "i"

	)

196 
	#SCNi64
 
__PRI64_PREFIX
 "i"

	)

198 
	#SCNiLEAST8
 "hhi"

	)

199 
	#SCNiLEAST16
 "hi"

	)

200 
	#SCNiLEAST32
 "i"

	)

201 
	#SCNiLEAST64
 
__PRI64_PREFIX
 "i"

	)

203 
	#SCNiFAST8
 "hhi"

	)

204 
	#SCNiFAST16
 
__PRIPTR_PREFIX
 "i"

	)

205 
	#SCNiFAST32
 
__PRIPTR_PREFIX
 "i"

	)

206 
	#SCNiFAST64
 
__PRI64_PREFIX
 "i"

	)

209 
	#SCNu8
 "hhu"

	)

210 
	#SCNu16
 "hu"

	)

211 
	#SCNu32
 "u"

	)

212 
	#SCNu64
 
__PRI64_PREFIX
 "u"

	)

214 
	#SCNuLEAST8
 "hhu"

	)

215 
	#SCNuLEAST16
 "hu"

	)

216 
	#SCNuLEAST32
 "u"

	)

217 
	#SCNuLEAST64
 
__PRI64_PREFIX
 "u"

	)

219 
	#SCNuFAST8
 "hhu"

	)

220 
	#SCNuFAST16
 
__PRIPTR_PREFIX
 "u"

	)

221 
	#SCNuFAST32
 
__PRIPTR_PREFIX
 "u"

	)

222 
	#SCNuFAST64
 
__PRI64_PREFIX
 "u"

	)

225 
	#SCNo8
 "hho"

	)

226 
	#SCNo16
 "ho"

	)

227 
	#SCNo32
 "o"

	)

228 
	#SCNo64
 
__PRI64_PREFIX
 "o"

	)

230 
	#SCNoLEAST8
 "hho"

	)

231 
	#SCNoLEAST16
 "ho"

	)

232 
	#SCNoLEAST32
 "o"

	)

233 
	#SCNoLEAST64
 
__PRI64_PREFIX
 "o"

	)

235 
	#SCNoFAST8
 "hho"

	)

236 
	#SCNoFAST16
 
__PRIPTR_PREFIX
 "o"

	)

237 
	#SCNoFAST32
 
__PRIPTR_PREFIX
 "o"

	)

238 
	#SCNoFAST64
 
__PRI64_PREFIX
 "o"

	)

241 
	#SCNx8
 "hhx"

	)

242 
	#SCNx16
 "hx"

	)

243 
	#SCNx32
 "x"

	)

244 
	#SCNx64
 
__PRI64_PREFIX
 "x"

	)

246 
	#SCNxLEAST8
 "hhx"

	)

247 
	#SCNxLEAST16
 "hx"

	)

248 
	#SCNxLEAST32
 "x"

	)

249 
	#SCNxLEAST64
 
__PRI64_PREFIX
 "x"

	)

251 
	#SCNxFAST8
 "hhx"

	)

252 
	#SCNxFAST16
 
__PRIPTR_PREFIX
 "x"

	)

253 
	#SCNxFAST32
 
__PRIPTR_PREFIX
 "x"

	)

254 
	#SCNxFAST64
 
__PRI64_PREFIX
 "x"

	)

258 
	#SCNdMAX
 
__PRI64_PREFIX
 "d"

	)

259 
	#SCNiMAX
 
__PRI64_PREFIX
 "i"

	)

260 
	#SCNoMAX
 
__PRI64_PREFIX
 "o"

	)

261 
	#SCNuMAX
 
__PRI64_PREFIX
 "u"

	)

262 
	#SCNxMAX
 
__PRI64_PREFIX
 "x"

	)

265 
	#SCNdPTR
 
__PRIPTR_PREFIX
 "d"

	)

266 
	#SCNiPTR
 
__PRIPTR_PREFIX
 "i"

	)

267 
	#SCNoPTR
 
__PRIPTR_PREFIX
 "o"

	)

268 
	#SCNuPTR
 
__PRIPTR_PREFIX
 "u"

	)

269 
	#SCNxPTR
 
__PRIPTR_PREFIX
 "x"

	)

274 
	g__BEGIN_DECLS


276 #i‡
__WORDSIZE
 == 64

281 
	mquŸ
;

282 
	mªm
;

283 } 
	timaxdiv_t
;

290 
	mquŸ
;

291 
	mªm
;

292 } 
	timaxdiv_t
;

298 
ötmax_t
 
	$imaxabs
 (
ötmax_t
 
__n
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

301 
imaxdiv_t
 
	$imaxdiv
 (
ötmax_t
 
__numî
, i¡max_à
__díom
)

302 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

305 
ötmax_t
 
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

306 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

309 
uötmax_t
 
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

310 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

313 
ötmax_t
 
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

314 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

315 
__THROW
;

318 
uötmax_t
 
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
__≈å
,

319 
__gwch¨_t
 ** 
__ª°ri˘
 
__íd±r
, 
__ba£
)

320 
__THROW
;

322 #ifde‡
__USE_EXTERN_INLINES


324 #i‡
__WORDSIZE
 == 64

326 
	$__°πﬁ_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

327 **
__ª°ri˘
 
__íd±r
,

328 
__ba£
, 
__group
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

331 
__exã∫_ölöe
 
ötmax_t


332 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

333 
ba£
))

335  
	`__°πﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

336 
	}
}

338 
	$__°πoul_öã∫Æ
 (
__c⁄°
 *

339 
__ª°ri˘
 
__≈å
,

340 ** 
__ª°ri˘
 
__íd±r
,

341 
__ba£
, 
__group
)

342 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

344 
__exã∫_ölöe
 
uötmax_t


345 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

346 
ba£
))

348  
	`__°πoul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

349 
	}
}

351 
	$__wc°ﬁ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 * 
__ª°ri˘
 
__≈å
,

352 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

353 
__ba£
, 
__group
)

354 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

356 
__exã∫_ölöe
 
ötmax_t


357 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

358 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

360  
	`__wc°ﬁ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

361 
	}
}

363 
	$__wc°oul_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

364 
__ª°ri˘
 
__≈å
,

365 
__gwch¨_t
 **

366 
__ª°ri˘
 
__íd±r
,

367 
__ba£
, 
__group
)

368 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

370 
__exã∫_ölöe
 
uötmax_t


371 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

372 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

374  
	`__wc°oul_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

375 
	}
}

379 
__exãnsi⁄__


380 
	$__°πﬁl_öã∫Æ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

381 **
__ª°ri˘
 
__íd±r
,

382 
__ba£
, 
__group
)

383 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

385 
__exã∫_ölöe
 
ötmax_t


386 
	`__NTH
 (
	$°πoimax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

387 
ba£
))

389  
	`__°πﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

390 
	}
}

392 
__exãnsi⁄__


393 
	$__°πouŒ_öã∫Æ
 (
__c⁄°
 *

394 
__ª°ri˘
 
__≈å
,

396 
__ª°ri˘
 
__íd±r
,

397 
__ba£
,

398 
__group
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

401 
__exã∫_ölöe
 
uötmax_t


402 
	`__NTH
 (
	$°πoumax
 (
__c⁄°
 *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
,

403 
ba£
))

405  
	`__°πouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

406 
	}
}

408 
__exãnsi⁄__


409 
	$__wc°ﬁl_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

410 
__ª°ri˘
 
__≈å
,

411 
__gwch¨_t
 **
__ª°ri˘
 
__íd±r
,

412 
__ba£
, 
__group
)

413 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

415 
__exã∫_ölöe
 
ötmax_t


416 
	`__NTH
 (
	$wc°oimax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

417 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

419  
	`__wc°ﬁl_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

420 
	}
}

423 
__exãnsi⁄__


424 
	$__wc°ouŒ_öã∫Æ
 (
__c⁄°
 
__gwch¨_t
 *

425 
__ª°ri˘
 
__≈å
,

426 
__gwch¨_t
 **

427 
__ª°ri˘
 
__íd±r
,

428 
__ba£
,

429 
__group
)

430 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

432 
__exã∫_ölöe
 
uötmax_t


433 
	`__NTH
 (
	$wc°oumax
 (
__c⁄°
 
__gwch¨_t
 *
__ª°ri˘
 
≈å
,

434 
__gwch¨_t
 **
__ª°ri˘
 
íd±r
, 
ba£
))

436  
	`__wc°ouŒ_öã∫Æ
 (
≈å
, 
íd±r
, 
ba£
, 0);

437 
	}
}

442 
	g__END_DECLS


	@/usr/include/limits.h

24 #i‚de‡
_LIBC_LIMITS_H_


25 
	#_LIBC_LIMITS_H_
 1

	)

27 
	~<„©uªs.h
>

33 
	#MB_LEN_MAX
 16

	)

38 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

43 #i‚de‡
_LIMITS_H


44 
	#_LIMITS_H
 1

	)

46 
	~<bôs/w‹dsize.h
>

55 
	#CHAR_BIT
 8

	)

58 
	#SCHAR_MIN
 (-128)

	)

59 
	#SCHAR_MAX
 127

	)

62 
	#UCHAR_MAX
 255

	)

65 #ifde‡
__CHAR_UNSIGNED__


66 
	#CHAR_MIN
 0

	)

67 
	#CHAR_MAX
 
UCHAR_MAX


	)

69 
	#CHAR_MIN
 
SCHAR_MIN


	)

70 
	#CHAR_MAX
 
SCHAR_MAX


	)

74 
	#SHRT_MIN
 (-32768)

	)

75 
	#SHRT_MAX
 32767

	)

78 
	#USHRT_MAX
 65535

	)

81 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

82 
	#INT_MAX
 2147483647

	)

85 
	#UINT_MAX
 4294967295U

	)

88 #i‡
__WORDSIZE
 == 64

89 
	#LONG_MAX
 9223372036854775807L

	)

91 
	#LONG_MAX
 2147483647L

	)

93 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

96 #i‡
__WORDSIZE
 == 64

97 
	#ULONG_MAX
 18446744073709551615UL

	)

99 
	#ULONG_MAX
 4294967295UL

	)

102 #ifde‡
__USE_ISOC99


105 
	#LLONG_MAX
 9223372036854775807LL

	)

106 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

109 
	#ULLONG_MAX
 18446744073709551615ULL

	)

123 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


125 #ö˛ude_√xà<
limôs
.
h
>

131 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


132 #i‚de‡
LLONG_MIN


133 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

135 #i‚de‡
LLONG_MAX


136 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

138 #i‚de‡
ULLONG_MAX


139 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

143 #ifdef 
__USE_POSIX


145 
	~<bôs/posix1_lim.h
>

148 #ifdef 
__USE_POSIX2


149 
	~<bôs/posix2_lim.h
>

152 #ifdef 
__USE_XOPEN


153 
	~<bôs/x›í_lim.h
>

	@/usr/include/linux/aio_abi.h

27 #i‚de‡
__LINUX__AIO_ABI_H


28 
	#__LINUX__AIO_ABI_H


	)

30 
	~<löux/ty≥s.h
>

31 
	~<asm/byã‹dî.h
>

33 
	taio_c⁄ãxt_t
;

36 
	mIOCB_CMD_PREAD
 = 0,

37 
	mIOCB_CMD_PWRITE
 = 1,

38 
	mIOCB_CMD_FSYNC
 = 2,

39 
	mIOCB_CMD_FDSYNC
 = 3,

44 
	mIOCB_CMD_NOOP
 = 6,

45 
	mIOCB_CMD_PREADV
 = 7,

46 
	mIOCB_CMD_PWRITEV
 = 8,

55 
	#IOCB_FLAG_RESFD
 (1 << 0)

	)

58 
	sio_evít
 {

59 
__u64
 
	md©a
;

60 
__u64
 
	mobj
;

61 
__s64
 
	mªs
;

62 
__s64
 
	mªs2
;

65 #i‡
deföed
(
__LITTLE_ENDIAN
)

66 
	#PADDED
(
x
,
y
Ëx, 
	)
y

67 #ñi‡
deföed
(
__BIG_ENDIAN
)

68 
	#PADDED
(
x
,
y
Ëy, 
	)
x

70 #îr‹ 
edô
 
your
 
odd
 
byã‹dî
.

79 
	siocb
 {

81 
__u64
 
	maio_d©a
;

82 
__u32
 
PADDED
(
aio_key
, 
aio_ª£rved1
);

86 
__u16
 
	maio_lio_›code
;

87 
__s16
 
	maio_ªq¥io
;

88 
__u32
 
	maio_fûdes
;

90 
__u64
 
	maio_buf
;

91 
__u64
 
	maio_nbyãs
;

92 
__s64
 
	maio_off£t
;

95 
__u64
 
	maio_ª£rved2
;

98 
__u32
 
	maio_Êags
;

104 
__u32
 
	maio_ªsfd
;

107 #unde‡
IFBIG


108 #unde‡
IFLITTLE


	@/usr/include/malloc.h

21 #i‚de‡
_MALLOC_H


22 
	#_MALLOC_H
 1

	)

24 
	~<„©uªs.h
>

25 
	~<°ddef.h
>

26 
	~<°dio.h
>

27 
	#__mÆloc_±r_t
 *

	)

30 
	#__mÆloc_size_t
 
size_t


	)

31 
	#__mÆloc_±rdiff_t
 
±rdiff_t


	)

33 #ifde‡
__GNUC__


35 
	#__MALLOC_P
(
¨gs
Ë¨g†
__THROW


	)

38 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

40 #ifde‡
_LIBC


41 
	#__MALLOC_HOOK_VOLATILE


	)

42 
	#__MALLOC_DEPRECATED


	)

44 
	#__MALLOC_HOOK_VOLATILE
 
__vﬁ©ûe


	)

45 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

50 
	#__MALLOC_P
(
¨gs
Ë
	)
args

51 
	#__MALLOC_PMT
(
¨gs
Ë
	)
args

52 
	#__MALLOC_HOOK_VOLATILE


	)

53 
	#__MALLOC_DEPRECATED
 
__©åibuã_dïªˇãd__


	)

58 
__BEGIN_DECLS


61 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

64 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

65 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

72 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

73 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

76 
	$‰ì
 (*
__±r
Ë
__THROW
;

79 
	$c‰ì
 (*
__±r
Ë
__THROW
;

82 *
	$memÆign
 (
size_t
 
__Æignmít
, size_à
__size
)

83 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

86 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

90 * 
	$pvÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

94 *(*
__m‹ec‹e
Ë(
±rdiff_t
 
__size
);

97 *
	$__deÁu…_m‹ec‹e
 (
±rdiff_t
 
__size
)

98 
__THROW
 
__©åibuã_mÆloc__
;

102 
	smÆlöfo


104 
¨ía
;

105 
‹dblks
;

106 
smblks
;

107 
hblks
;

108 
hblkhd
;

109 
usmblks
;

110 
fsmblks
;

111 
u‹dblks
;

112 
f‹dblks
;

113 
kìpco°
;

117 
mÆlöfo
 
	$mÆlöfo
 (Ë
__THROW
;

120 #i‚de‡
M_MXFAST


121 
	#M_MXFAST
 1

	)

123 #i‚de‡
M_NLBLKS


124 
	#M_NLBLKS
 2

	)

126 #i‚de‡
M_GRAIN


127 
	#M_GRAIN
 3

	)

129 #i‚de‡
M_KEEP


130 
	#M_KEEP
 4

	)

134 
	#M_TRIM_THRESHOLD
 -1

	)

135 
	#M_TOP_PAD
 -2

	)

136 
	#M_MMAP_THRESHOLD
 -3

	)

137 
	#M_MMAP_MAX
 -4

	)

138 
	#M_CHECK_ACTION
 -5

	)

139 
	#M_PERTURB
 -6

	)

140 
	#M_ARENA_TEST
 -7

	)

141 
	#M_ARENA_MAX
 -8

	)

144 
	$mÆl›t
 (
__∑øm
, 
__vÆ
Ë
__THROW
;

148 
	$mÆloc_åim
 (
size_t
 
__∑d
Ë
__THROW
;

152 
size_t
 
	$mÆloc_ußbÀ_size
 (*
__±r
Ë
__THROW
;

155 
	$mÆloc_°©s
 (Ë
__THROW
;

158 
	$mÆloc_öfo
 (
__›ti⁄s
, 
FILE
 *
__Â
Ë
__THROW
;

161 *
	$mÆloc_gë_°©e
 (Ë
__THROW
;

165 
	$mÆloc_£t_°©e
 (*
__±r
Ë
__THROW
;

170 (*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_öôülize_hook
) ()

171 
__MALLOC_DEPRECATED
;

173 (*
__MALLOC_HOOK_VOLATILE
 
__‰ì_hook
Ë(*
__±r
,

174 
__c⁄°
 
__mÆloc_±r_t
)

175 
__MALLOC_DEPRECATED
;

176 *(*
__MALLOC_HOOK_VOLATILE
 
__mÆloc_hook
Ë(
size_t
 
__size
,

177 
__c⁄°
 
__mÆloc_±r_t
)

178 
__MALLOC_DEPRECATED
;

179 *(*
__MALLOC_HOOK_VOLATILE
 
__ªÆloc_hook
Ë(*
__±r
,

180 
size_t
 
__size
,

181 
__c⁄°
 
__mÆloc_±r_t
)

182 
__MALLOC_DEPRECATED
;

183 *(*
__MALLOC_HOOK_VOLATILE
 
__memÆign_hook
Ë(
size_t
 
__Æignmít
,

184 
size_t
 
__size
,

185 
__c⁄°
 
__mÆloc_±r_t
)

186 
__MALLOC_DEPRECATED
;

187 (*
__MALLOC_HOOK_VOLATILE
 
__a·î_m‹ec‹e_hook
) ();

190 
	$__mÆloc_check_öô
 (Ë
__THROW
 
__MALLOC_DEPRECATED
;

193 
__END_DECLS


	@/usr/include/netdb.h

23 #i‚def 
_NETDB_H


24 
	#_NETDB_H
 1

	)

26 
	~<„©uªs.h
>

28 
	~<√töë/ö.h
>

29 
	~<°döt.h
>

30 #ifde‡
__USE_MISC


33 
	~<Ωc/√tdb.h
>

36 #ifde‡
__USE_GNU


37 
	#__√ed_sigevít_t


	)

38 
	~<bôs/sigöfo.h
>

39 
	#__√ed_time•ec


	)

40 
	~<time.h
>

43 
	~<bôs/√tdb.h
>

46 
	#_PATH_HEQUIV
 "/ëc/ho°s.equiv"

	)

47 
	#_PATH_HOSTS
 "/ëc/ho°s"

	)

48 
	#_PATH_NETWORKS
 "/ëc/√tw‹ks"

	)

49 
	#_PATH_NSSWITCH_CONF
 "/ëc/nsswôch.c⁄f"

	)

50 
	#_PATH_PROTOCOLS
 "/ëc/¥Ÿocﬁs"

	)

51 
	#_PATH_SERVICES
 "/ëc/£rvi˚s"

	)

54 
	g__BEGIN_DECLS


56 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


59 
	#h_î∫o
 (*
	`__h_î∫o_loˇti⁄
 ())

	)

62 *
	$__h_î∫o_loˇti⁄
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

66 
	#HOST_NOT_FOUND
 1

	)

67 
	#TRY_AGAIN
 2

	)

69 
	#NO_RECOVERY
 3

	)

71 
	#NO_DATA
 4

	)

74 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


75 
	#NETDB_INTERNAL
 -1

	)

76 
	#NETDB_SUCCESS
 0

	)

77 
	#NO_ADDRESS
 
NO_DATA


	)

80 #ifde‡
__USE_XOPEN2K


82 
	#IPPORT_RESERVED
 1024

	)

85 #ifde‡
__USE_GNU


87 
	#SCOPE_DELIMITER
 '%'

	)

90 #ifde‡
__USE_MISC


93 
	$hîr‹
 (
__c⁄°
 *
__°r
Ë
__THROW
;

96 
__c⁄°
 *
	$h°ªº‹
 (
__îr_num
Ë
__THROW
;

101 
	sho°ít


103 *
h_«me
;

104 **
h_Æü£s
;

105 
h_addπy≥
;

106 
h_Àngth
;

107 **
h_addr_li°
;

108 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


109 
	#h_addr
 
h_addr_li°
[0]

	)

118 
	`£tho°ít
 (
__°ay_›í
);

124 
	`ídho°ít
 ();

131 
ho°ít
 *
	`gëho°ít
 ();

138 
ho°ít
 *
	`gëho°byaddr
 (
__c⁄°
 *
__addr
, 
__sockÀn_t
 
__Àn
,

139 
__ty≥
);

145 
ho°ít
 *
	`gëho°by«me
 (
__c⁄°
 *
__«me
);

147 #ifde‡
__USE_MISC


156 
ho°ít
 *
	`gëho°by«me2
 (
__c⁄°
 *
__«me
, 
__af
);

168 
	`gëho°ít_r
 (
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

169 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

170 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

171 *
__ª°ri˘
 
__h_î∫›
);

173 
	`gëho°byaddr_r
 (
__c⁄°
 *
__ª°ri˘
 
__addr
, 
__sockÀn_t
 
__Àn
,

174 
__ty≥
,

175 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

176 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

177 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

178 *
__ª°ri˘
 
__h_î∫›
);

180 
	`gëho°by«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

181 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

182 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

183 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

184 *
__ª°ri˘
 
__h_î∫›
);

186 
	`gëho°by«me2_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
, 
__af
,

187 
ho°ít
 *
__ª°ri˘
 
__ªsu…_buf
,

188 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

189 
ho°ít
 **
__ª°ri˘
 
__ªsu…
,

190 *
__ª°ri˘
 
__h_î∫›
);

199 
	`£äëít
 (
__°ay_›í
);

205 
	`íd√ã¡
 ();

212 
√ã¡
 *
	`gë√ã¡
 ();

219 
√ã¡
 *
	`gë√tbyaddr
 (
uöt32_t
 
__√t
, 
__ty≥
);

225 
√ã¡
 *
	`gë√tby«me
 (
__c⁄°
 *
__«me
);

227 #ifdef 
__USE_MISC


238 
	`gë√ã¡_r
 (
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

239 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

240 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

241 *
__ª°ri˘
 
__h_î∫›
);

243 
	`gë√tbyaddr_r
 (
uöt32_t
 
__√t
, 
__ty≥
,

244 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

245 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

246 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

247 *
__ª°ri˘
 
__h_î∫›
);

249 
	`gë√tby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

250 
√ã¡
 *
__ª°ri˘
 
__ªsu…_buf
,

251 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

252 
√ã¡
 **
__ª°ri˘
 
__ªsu…
,

253 *
__ª°ri˘
 
__h_î∫›
);

258 
	s£rvít


260 *
s_«me
;

261 **
s_Æü£s
;

262 
s_p‹t
;

263 *
s_¥Ÿo
;

271 
	`£t£rvít
 (
__°ay_›í
);

277 
	`íd£rvít
 ();

284 
£rvít
 *
	`gë£rvít
 ();

291 
£rvít
 *
	`gë£rvby«me
 (
__c⁄°
 *
__«me
,

292 
__c⁄°
 *
__¥Ÿo
);

299 
£rvít
 *
	`gë£rvbyp‹t
 (
__p‹t
, 
__c⁄°
 *
__¥Ÿo
);

302 #ifdef 
__USE_MISC


310 
	`gë£rvít_r
 (
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

311 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

312 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

314 
	`gë£rvby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

315 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

316 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

317 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

318 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

320 
	`gë£rvbyp‹t_r
 (
__p‹t
, 
__c⁄°
 *
__ª°ri˘
 
__¥Ÿo
,

321 
£rvít
 *
__ª°ri˘
 
__ªsu…_buf
,

322 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

323 
£rvít
 **
__ª°ri˘
 
__ªsu…
);

328 
	s¥Ÿ€¡


330 *
p_«me
;

331 **
p_Æü£s
;

332 
p_¥Ÿo
;

340 
	`£çrŸ€¡
 (
__°ay_›í
);

346 
	`íd¥Ÿ€¡
 ();

353 
¥Ÿ€¡
 *
	`gë¥Ÿ€¡
 ();

359 
¥Ÿ€¡
 *
	`gë¥Ÿoby«me
 (
__c⁄°
 *
__«me
);

365 
¥Ÿ€¡
 *
	`gë¥Ÿobynumbî
 (
__¥Ÿo
);

368 #ifdef 
__USE_MISC


376 
	`gë¥Ÿ€¡_r
 (
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

377 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

378 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

380 
	`gë¥Ÿoby«me_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

381 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

382 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

383 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

385 
	`gë¥Ÿobynumbî_r
 (
__¥Ÿo
,

386 
¥Ÿ€¡
 *
__ª°ri˘
 
__ªsu…_buf
,

387 *
__ª°ri˘
 
__buf
, 
size_t
 
__buÊí
,

388 
¥Ÿ€¡
 **
__ª°ri˘
 
__ªsu…
);

397 
	`£äëgª¡
 (
__c⁄°
 *
__√tgroup
);

405 
	`íd√tgª¡
 ();

414 
	`gë√tgª¡
 (**
__ª°ri˘
 
__ho°p
,

415 **
__ª°ri˘
 
__u£Ω
,

416 **
__ª°ri˘
 
__domaöp
);

425 
	`ö√tgr
 (
__c⁄°
 *
__√tgroup
, __c⁄° *
__ho°
,

426 
__c⁄°
 *
__u£r
, __c⁄° *
__domaö
);

434 
	`gë√tgª¡_r
 (**
__ª°ri˘
 
__ho°p
,

435 **
__ª°ri˘
 
__u£Ω
,

436 **
__ª°ri˘
 
__domaöp
,

437 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
);

441 #ifde‡
__USE_BSD


453 
	`rcmd
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

454 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

455 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

456 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

465 
	`rcmd_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

466 
__c⁄°
 *
__ª°ri˘
 
__locu£r
,

467 
__c⁄°
 *
__ª°ri˘
 
__ªmu£r
,

468 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

469 
ß_Ámûy_t
 
__af
);

481 
	`ªxec
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

482 
__c⁄°
 *
__ª°ri˘
 
__«me
,

483 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

484 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
);

493 
	`ªxec_af
 (**
__ª°ri˘
 
__aho°
, 
__Ω‹t
,

494 
__c⁄°
 *
__ª°ri˘
 
__«me
,

495 
__c⁄°
 *
__ª°ri˘
 
__∑ss
,

496 
__c⁄°
 *
__ª°ri˘
 
__cmd
, *__ª°ri˘ 
__fd2p
,

497 
ß_Ámûy_t
 
__af
);

507 
	`ru£rok
 (
__c⁄°
 *
__rho°
, 
__su£r
,

508 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

517 
	`ru£rok_af
 (
__c⁄°
 *
__rho°
, 
__su£r
,

518 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

519 
ß_Ámûy_t
 
__af
);

530 
	`úu£rok
 (
uöt32_t
 
__øddr
, 
__su£r
,

531 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
);

541 
	`úu£rok_af
 (
__c⁄°
 *
__øddr
, 
__su£r
,

542 
__c⁄°
 *
__ªmu£r
, __c⁄° *
__locu£r
,

543 
ß_Ámûy_t
 
__af
);

553 
	`ºesvp‹t
 (*
__Æp‹t
);

562 
	`ºesvp‹t_af
 (*
__Æp‹t
, 
ß_Ámûy_t
 
__af
);

567 #ifdef 
__USE_POSIX


569 
	saddröfo


571 
ai_Êags
;

572 
ai_Ámûy
;

573 
ai_sockty≥
;

574 
ai_¥Ÿocﬁ
;

575 
sockÀn_t
 
ai_addæí
;

576 
sockaddr
 *
ai_addr
;

577 *
ai_ˇn⁄«me
;

578 
addröfo
 *
ai_√xt
;

581 #ifde‡
__USE_GNU


583 
	sgaicb


585 c⁄° *
¨_«me
;

586 c⁄° *
¨_£rvi˚
;

587 c⁄° 
addröfo
 *
¨_ªque°
;

588 
addröfo
 *
¨_ªsu…
;

590 
__ªtu∫
;

591 
__unu£d
[5];

595 
	#GAI_WAIT
 0

	)

596 
	#GAI_NOWAIT
 1

	)

600 
	#AI_PASSIVE
 0x0001

	)

601 
	#AI_CANONNAME
 0x0002

	)

602 
	#AI_NUMERICHOST
 0x0004

	)

603 
	#AI_V4MAPPED
 0x0008

	)

604 
	#AI_ALL
 0x0010

	)

605 
	#AI_ADDRCONFIG
 0x0020

	)

607 #ifde‡
__USE_GNU


608 
	#AI_IDN
 0x0040

	)

611 
	#AI_CANONIDN
 0x0080

	)

612 
	#AI_IDN_ALLOW_UNASSIGNED
 0x0100

	)

614 
	#AI_IDN_USE_STD3_ASCII_RULES
 0x0200

	)

617 
	#AI_NUMERICSERV
 0x0400

	)

620 
	#EAI_BADFLAGS
 -1

	)

621 
	#EAI_NONAME
 -2

	)

622 
	#EAI_AGAIN
 -3

	)

623 
	#EAI_FAIL
 -4

	)

624 
	#EAI_FAMILY
 -6

	)

625 
	#EAI_SOCKTYPE
 -7

	)

626 
	#EAI_SERVICE
 -8

	)

627 
	#EAI_MEMORY
 -10

	)

628 
	#EAI_SYSTEM
 -11

	)

629 
	#EAI_OVERFLOW
 -12

	)

630 #ifde‡
__USE_GNU


631 
	#EAI_NODATA
 -5

	)

632 
	#EAI_ADDRFAMILY
 -9

	)

633 
	#EAI_INPROGRESS
 -100

	)

634 
	#EAI_CANCELED
 -101

	)

635 
	#EAI_NOTCANCELED
 -102

	)

636 
	#EAI_ALLDONE
 -103

	)

637 
	#EAI_INTR
 -104

	)

638 
	#EAI_IDN_ENCODE
 -105

	)

641 #ifde‡
__USE_MISC


642 
	#NI_MAXHOST
 1025

	)

643 
	#NI_MAXSERV
 32

	)

646 
	#NI_NUMERICHOST
 1

	)

647 
	#NI_NUMERICSERV
 2

	)

648 
	#NI_NOFQDN
 4

	)

649 
	#NI_NAMEREQD
 8

	)

650 
	#NI_DGRAM
 16

	)

651 #ifde‡
__USE_GNU


652 
	#NI_IDN
 32

	)

653 
	#NI_IDN_ALLOW_UNASSIGNED
 64

	)

655 
	#NI_IDN_USE_STD3_ASCII_RULES
 128

	)

664 
	`gëaddröfo
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

665 
__c⁄°
 *
__ª°ri˘
 
__£rvi˚
,

666 
__c⁄°
 
addröfo
 *
__ª°ri˘
 
__ªq
,

667 
addröfo
 **
__ª°ri˘
 
__∑i
);

670 
	$‰ìaddröfo
 (
addröfo
 *
__ai
Ë
__THROW
;

673 
__c⁄°
 *
	$gai_°ªº‹
 (
__ecode
Ë
__THROW
;

679 
	`gë«meöfo
 (
__c⁄°
 
sockaddr
 *
__ª°ri˘
 
__ß
,

680 
sockÀn_t
 
__ßÀn
, *
__ª°ri˘
 
__ho°
,

681 
sockÀn_t
 
__ho°Àn
, *
__ª°ri˘
 
__£rv
,

682 
sockÀn_t
 
__£rvÀn
, 
__Êags
);

685 #ifde‡
__USE_GNU


694 
	`gëaddröfo_a
 (
__mode
, 
gaicb
 *
__li°
[
__ª°ri˘_¨r
],

695 
__ít
, 
sigevít
 *
__ª°ri˘
 
__sig
);

705 
	`gai_su•íd
 (
__c⁄°
 
gaicb
 *__c⁄° 
__li°
[], 
__ít
,

706 
__c⁄°
 
time•ec
 *
__timeout
);

709 
	$gai_îr‹
 (
gaicb
 *
__ªq
Ë
__THROW
;

712 
	$gai_ˇn˚l
 (
gaicb
 *
__gaicbp
Ë
__THROW
;

715 
__END_DECLS


	@/usr/include/netinet/in.h

20 #i‚def 
_NETINET_IN_H


21 
	#_NETINET_IN_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<°döt.h
>

25 
	~<sys/sockë.h
>

26 
	~<bôs/ty≥s.h
>

29 
__BEGIN_DECLS


34 
	mIPPROTO_IP
 = 0,

35 
	#IPPROTO_IP
 
IPPROTO_IP


	)

36 
	mIPPROTO_HOPOPTS
 = 0,

37 
	#IPPROTO_HOPOPTS
 
IPPROTO_HOPOPTS


	)

38 
	mIPPROTO_ICMP
 = 1,

39 
	#IPPROTO_ICMP
 
IPPROTO_ICMP


	)

40 
	mIPPROTO_IGMP
 = 2,

41 
	#IPPROTO_IGMP
 
IPPROTO_IGMP


	)

42 
	mIPPROTO_IPIP
 = 4,

43 
	#IPPROTO_IPIP
 
IPPROTO_IPIP


	)

44 
	mIPPROTO_TCP
 = 6,

45 
	#IPPROTO_TCP
 
IPPROTO_TCP


	)

46 
	mIPPROTO_EGP
 = 8,

47 
	#IPPROTO_EGP
 
IPPROTO_EGP


	)

48 
	mIPPROTO_PUP
 = 12,

49 
	#IPPROTO_PUP
 
IPPROTO_PUP


	)

50 
	mIPPROTO_UDP
 = 17,

51 
	#IPPROTO_UDP
 
IPPROTO_UDP


	)

52 
	mIPPROTO_IDP
 = 22,

53 
	#IPPROTO_IDP
 
IPPROTO_IDP


	)

54 
	mIPPROTO_TP
 = 29,

55 
	#IPPROTO_TP
 
IPPROTO_TP


	)

56 
	mIPPROTO_DCCP
 = 33,

57 
	#IPPROTO_DCCP
 
IPPROTO_DCCP


	)

58 
	mIPPROTO_IPV6
 = 41,

59 
	#IPPROTO_IPV6
 
IPPROTO_IPV6


	)

60 
	mIPPROTO_ROUTING
 = 43,

61 
	#IPPROTO_ROUTING
 
IPPROTO_ROUTING


	)

62 
	mIPPROTO_FRAGMENT
 = 44,

63 
	#IPPROTO_FRAGMENT
 
IPPROTO_FRAGMENT


	)

64 
	mIPPROTO_RSVP
 = 46,

65 
	#IPPROTO_RSVP
 
IPPROTO_RSVP


	)

66 
	mIPPROTO_GRE
 = 47,

67 
	#IPPROTO_GRE
 
IPPROTO_GRE


	)

68 
	mIPPROTO_ESP
 = 50,

69 
	#IPPROTO_ESP
 
IPPROTO_ESP


	)

70 
	mIPPROTO_AH
 = 51,

71 
	#IPPROTO_AH
 
IPPROTO_AH


	)

72 
	mIPPROTO_ICMPV6
 = 58,

73 
	#IPPROTO_ICMPV6
 
IPPROTO_ICMPV6


	)

74 
	mIPPROTO_NONE
 = 59,

75 
	#IPPROTO_NONE
 
IPPROTO_NONE


	)

76 
	mIPPROTO_DSTOPTS
 = 60,

77 
	#IPPROTO_DSTOPTS
 
IPPROTO_DSTOPTS


	)

78 
	mIPPROTO_MTP
 = 92,

79 
	#IPPROTO_MTP
 
IPPROTO_MTP


	)

80 
	mIPPROTO_ENCAP
 = 98,

81 
	#IPPROTO_ENCAP
 
IPPROTO_ENCAP


	)

82 
	mIPPROTO_PIM
 = 103,

83 
	#IPPROTO_PIM
 
IPPROTO_PIM


	)

84 
	mIPPROTO_COMP
 = 108,

85 
	#IPPROTO_COMP
 
IPPROTO_COMP


	)

86 
	mIPPROTO_SCTP
 = 132,

87 
	#IPPROTO_SCTP
 
IPPROTO_SCTP


	)

88 
	mIPPROTO_UDPLITE
 = 136,

89 
	#IPPROTO_UDPLITE
 
IPPROTO_UDPLITE


	)

90 
	mIPPROTO_RAW
 = 255,

91 
	#IPPROTO_RAW
 
IPPROTO_RAW


	)

92 
	mIPPROTO_MAX


97 
uöt16_t
 
	tö_p‹t_t
;

102 
	mIPPORT_ECHO
 = 7,

103 
	mIPPORT_DISCARD
 = 9,

104 
	mIPPORT_SYSTAT
 = 11,

105 
	mIPPORT_DAYTIME
 = 13,

106 
	mIPPORT_NETSTAT
 = 15,

107 
	mIPPORT_FTP
 = 21,

108 
	mIPPORT_TELNET
 = 23,

109 
	mIPPORT_SMTP
 = 25,

110 
	mIPPORT_TIMESERVER
 = 37,

111 
	mIPPORT_NAMESERVER
 = 42,

112 
	mIPPORT_WHOIS
 = 43,

113 
	mIPPORT_MTP
 = 57,

115 
	mIPPORT_TFTP
 = 69,

116 
	mIPPORT_RJE
 = 77,

117 
	mIPPORT_FINGER
 = 79,

118 
	mIPPORT_TTYLINK
 = 87,

119 
	mIPPORT_SUPDUP
 = 95,

122 
	mIPPORT_EXECSERVER
 = 512,

123 
	mIPPORT_LOGINSERVER
 = 513,

124 
	mIPPORT_CMDSERVER
 = 514,

125 
	mIPPORT_EFSSERVER
 = 520,

128 
	mIPPORT_BIFFUDP
 = 512,

129 
	mIPPORT_WHOSERVER
 = 513,

130 
	mIPPORT_ROUTESERVER
 = 520,

133 
	mIPPORT_RESERVED
 = 1024,

136 
	mIPPORT_USERRESERVED
 = 5000

141 
uöt32_t
 
	tö_addr_t
;

142 
	sö_addr


144 
ö_addr_t
 
	ms_addr
;

153 
	#IN_CLASSA
(
a
Ë((((
ö_addr_t
)◊)Ë& 0x80000000Ë=0)

	)

154 
	#IN_CLASSA_NET
 0xff000000

	)

155 
	#IN_CLASSA_NSHIFT
 24

	)

156 
	#IN_CLASSA_HOST
 (0xfffffff‡& ~
IN_CLASSA_NET
)

	)

157 
	#IN_CLASSA_MAX
 128

	)

159 
	#IN_CLASSB
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xc0000000Ë=0x80000000)

	)

160 
	#IN_CLASSB_NET
 0xffff0000

	)

161 
	#IN_CLASSB_NSHIFT
 16

	)

162 
	#IN_CLASSB_HOST
 (0xfffffff‡& ~
IN_CLASSB_NET
)

	)

163 
	#IN_CLASSB_MAX
 65536

	)

165 
	#IN_CLASSC
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xc0000000)

	)

166 
	#IN_CLASSC_NET
 0xffffff00

	)

167 
	#IN_CLASSC_NSHIFT
 8

	)

168 
	#IN_CLASSC_HOST
 (0xfffffff‡& ~
IN_CLASSC_NET
)

	)

170 
	#IN_CLASSD
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xe0000000)

	)

171 
	#IN_MULTICAST
(
a
Ë
	`IN_CLASSD
◊)

	)

173 
	#IN_EXPERIMENTAL
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xe0000000Ë=0xe0000000)

	)

174 
	#IN_BADCLASS
(
a
Ë((((
ö_addr_t
)◊)Ë& 0xf0000000Ë=0xf0000000)

	)

177 
	#INADDR_ANY
 ((
ö_addr_t
Ë0x00000000)

	)

179 
	#INADDR_BROADCAST
 ((
ö_addr_t
Ë0xffffffff)

	)

181 
	#INADDR_NONE
 ((
ö_addr_t
Ë0xffffffff)

	)

184 
	#IN_LOOPBACKNET
 127

	)

186 #i‚de‡
INADDR_LOOPBACK


187 
	#INADDR_LOOPBACK
 ((
ö_addr_t
Ë0x7f000001Ë

	)

191 
	#INADDR_UNSPEC_GROUP
 ((
ö_addr_t
Ë0xe0000000Ë

	)

192 
	#INADDR_ALLHOSTS_GROUP
 ((
ö_addr_t
Ë0xe0000001Ë

	)

193 
	#INADDR_ALLRTRS_GROUP
 ((
ö_addr_t
Ë0xe0000002Ë

	)

194 
	#INADDR_MAX_LOCAL_GROUP
 ((
ö_addr_t
Ë0xe00000ffË

	)

198 
	sö6_addr


202 
uöt8_t
 
	m__u6_addr8
[16];

203 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


204 
uöt16_t
 
	m__u6_addr16
[8];

205 
uöt32_t
 
	m__u6_addr32
[4];

207 } 
	m__ö6_u
;

208 
	#s6_addr
 
__ö6_u
.
__u6_addr8


	)

209 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


210 
	#s6_addr16
 
__ö6_u
.
__u6_addr16


	)

211 
	#s6_addr32
 
__ö6_u
.
__u6_addr32


	)

215 c⁄° 
ö6_addr
 
ö6addr_™y
;

216 c⁄° 
ö6_addr
 
ö6addr_lo›back
;

217 
	#IN6ADDR_ANY_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } } }

	)

218 
	#IN6ADDR_LOOPBACK_INIT
 { { { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1 } } }

	)

220 
	#INET_ADDRSTRLEN
 16

	)

221 
	#INET6_ADDRSTRLEN
 46

	)

225 
	ssockaddr_ö


227 
__SOCKADDR_COMMON
 (
sö_
);

228 
ö_p‹t_t
 
	msö_p‹t
;

229 
ö_addr
 
	msö_addr
;

232 
	msö_zîo
[ (
sockaddr
) -

233 
__SOCKADDR_COMMON_SIZE
 -

234  (
ö_p‹t_t
) -

235  (
ö_addr
)];

239 
	ssockaddr_ö6


241 
__SOCKADDR_COMMON
 (
sö6_
);

242 
ö_p‹t_t
 
	msö6_p‹t
;

243 
uöt32_t
 
	msö6_Êowöfo
;

244 
ö6_addr
 
	msö6_addr
;

245 
uöt32_t
 
	msö6_sc›e_id
;

249 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


251 
	sù_mªq


254 
ö_addr
 
	mimr_mu…üddr
;

257 
ö_addr
 
	mimr_öãrÁ˚
;

260 
	sù_mªq_sour˚


263 
ö_addr
 
	mimr_mu…üddr
;

266 
ö_addr
 
	mimr_öãrÁ˚
;

269 
ö_addr
 
	mimr_sour˚addr
;

275 
	sùv6_mªq


278 
ö6_addr
 
	mùv6mr_mu…üddr
;

281 
	mùv6mr_öãrÁ˚
;

285 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


287 
	sgroup_ªq


290 
uöt32_t
 
	mgr_öãrÁ˚
;

293 
sockaddr_°‹age
 
	mgr_group
;

296 
	sgroup_sour˚_ªq


299 
uöt32_t
 
	mg§_öãrÁ˚
;

302 
sockaddr_°‹age
 
	mg§_group
;

305 
sockaddr_°‹age
 
	mg§_sour˚
;

310 
	sù_msfûãr


313 
ö_addr
 
	mimsf_mu…üddr
;

316 
ö_addr
 
	mimsf_öãrÁ˚
;

319 
uöt32_t
 
	mimsf_fmode
;

322 
uöt32_t
 
	mimsf_num§c
;

324 
ö_addr
 
	mimsf_¶i°
[1];

327 
	#IP_MSFILTER_SIZE
(
num§c
Ë( (
ù_msfûãr
) \

328 -  (
ö_addr
) \

329 + (
num§c
Ë*  (
ö_addr
))

	)

331 
	sgroup_fûãr


334 
uöt32_t
 
	mgf_öãrÁ˚
;

337 
sockaddr_°‹age
 
	mgf_group
;

340 
uöt32_t
 
	mgf_fmode
;

343 
uöt32_t
 
	mgf_num§c
;

345 
sockaddr_°‹age
 
	mgf_¶i°
[1];

348 
	#GROUP_FILTER_SIZE
(
num§c
Ë( (
group_fûãr
) \

349 -  (
sockaddr_°‹age
) \

350 + ((
num§c
) \

351 *  (
sockaddr_°‹age
)))

	)

356 
	~<bôs/ö.h
>

365 
uöt32_t
 
	$¡ohl
 (
uöt32_t
 
__√é⁄g
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

366 
uöt16_t
 
	$¡ohs
 (
uöt16_t
 
__√tsh‹t
)

367 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

368 
uöt32_t
 
	$ht⁄l
 (
uöt32_t
 
__ho°l⁄g
)

369 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

370 
uöt16_t
 
	$ht⁄s
 (
uöt16_t
 
__ho°sh‹t
)

371 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

373 
	~<ídün.h
>

376 
	~<bôs/byãsw≠.h
>

378 #ifde‡
__OPTIMIZE__


382 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


385 
	#¡ohl
(
x
Ë(x)

	)

386 
	#¡ohs
(
x
Ë(x)

	)

387 
	#ht⁄l
(
x
Ë(x)

	)

388 
	#ht⁄s
(
x
Ë(x)

	)

390 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


391 
	#¡ohl
(
x
Ë
	`__bsw≠_32
 (x)

	)

392 
	#¡ohs
(
x
Ë
	`__bsw≠_16
 (x)

	)

393 
	#ht⁄l
(
x
Ë
	`__bsw≠_32
 (x)

	)

394 
	#ht⁄s
(
x
Ë
	`__bsw≠_16
 (x)

	)

399 #ifde‡
__GNUC__


400 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

401 (
__exãnsi⁄__
 \

402 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

403 
__a
->
s6_addr32
[0] == 0 \

404 && 
__a
->
s6_addr32
[1] == 0 \

405 && 
__a
->
s6_addr32
[2] == 0 \

406 && 
__a
->
s6_addr32
[3] =0; 
	}
}))

	)

408 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

409 (
__exãnsi⁄__
 \

410 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

411 
__a
->
s6_addr32
[0] == 0 \

412 && 
__a
->
s6_addr32
[1] == 0 \

413 && 
__a
->
s6_addr32
[2] == 0 \

414 && 
__a
->
s6_addr32
[3] =
	`ht⁄l
 (1); }))

	)

416 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

417 (
__exãnsi⁄__
 \

418 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

419 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„800000); }))

	)

421 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

422 (
__exãnsi⁄__
 \

423 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

424 (
__a
->
s6_addr32
[0] & 
	`ht⁄l
 (0xffc00000)Ë=ht⁄»(0x„c00000); }))

	)

426 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

427 (
__exãnsi⁄__
 \

428 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

429 
__a
->
s6_addr32
[0] == 0 \

430 && 
__a
->
s6_addr32
[1] == 0 \

431 && 
__a
->
s6_addr32
[2] =
	`ht⁄l
 (0xffff); }))

	)

433 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

434 (
__exãnsi⁄__
 \

435 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

436 
__a
->
s6_addr32
[0] == 0 \

437 && 
__a
->
s6_addr32
[1] == 0 \

438 && 
__a
->
s6_addr32
[2] == 0 \

439 && 
	`¡ohl
 (
__a
->
s6_addr32
[3]Ë> 1; }))

	)

441 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

442 (
__exãnsi⁄__
 \

443 ({ 
__c⁄°
 
ö6_addr
 *
__a
 = (__c⁄° ö6_add∏*Ë(
a
); \

444 
__c⁄°
 
ö6_addr
 *
__b
 = (__c⁄° ö6_add∏*Ë(
b
); \

445 
__a
->
s6_addr32
[0] =
__b
->s6_addr32[0] \

446 && 
__a
->
s6_addr32
[1] =
__b
->s6_addr32[1] \

447 && 
__a
->
s6_addr32
[2] =
__b
->s6_addr32[2] \

448 && 
__a
->
s6_addr32
[3] =
__b
->s6_addr32[3]; }))

	)

450 
	#IN6_IS_ADDR_UNSPECIFIED
(
a
) \

451 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

452 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

453 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

454 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =0)

	)

456 
	#IN6_IS_ADDR_LOOPBACK
(
a
) \

457 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0 \

458 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0 \

459 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0 \

460 && ((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =
	`ht⁄l
 (1))

	)

462 
	#IN6_IS_ADDR_LINKLOCAL
(
a
) \

463 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

464 =
	`ht⁄l
 (0x„800000))

	)

466 
	#IN6_IS_ADDR_SITELOCAL
(
a
) \

467 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] & 
	`ht⁄l
 (0xffc00000)) \

468 =
	`ht⁄l
 (0x„c00000))

	)

470 
	#IN6_IS_ADDR_V4MAPPED
(
a
) \

471 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

472 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

473 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =
	`ht⁄l
 (0xffff)))

	)

475 
	#IN6_IS_ADDR_V4COMPAT
(
a
) \

476 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] == 0) \

477 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] == 0) \

478 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] == 0) \

479 && (
	`¡ohl
 (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3]Ë> 1))

	)

481 
	#IN6_ARE_ADDR_EQUAL
(
a
,
b
) \

482 ((((
__c⁄°
 
uöt32_t
 *Ë(
a
))[0] =((__c⁄° uöt32_à*Ë(
b
))[0]) \

483 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[1] =((__c⁄° uöt32_à*Ë(
b
))[1]) \

484 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[2] =((__c⁄° uöt32_à*Ë(
b
))[2]) \

485 && (((
__c⁄°
 
uöt32_t
 *Ë(
a
))[3] =((__c⁄° uöt32_à*Ë(
b
))[3]))

	)

488 
	#IN6_IS_ADDR_MULTICAST
(
a
Ë(((
__c⁄°
 
uöt8_t
 *Ë◊))[0] =0xff)

	)

490 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_GNU


492 
	$bödªsvp‹t
 (
__sockfd
, 
sockaddr_ö
 *
__sock_ö
Ë
__THROW
;

495 
	$bödªsvp‹t6
 (
__sockfd
, 
sockaddr_ö6
 *
__sock_ö
)

496 
__THROW
;

500 
	#IN6_IS_ADDR_MC_NODELOCAL
(
a
) \

501 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

502 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x1))

	)

504 
	#IN6_IS_ADDR_MC_LINKLOCAL
(
a
) \

505 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

506 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x2))

	)

508 
	#IN6_IS_ADDR_MC_SITELOCAL
(
a
) \

509 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

510 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x5))

	)

512 
	#IN6_IS_ADDR_MC_ORGLOCAL
(
a
) \

513 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

514 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0x8))

	)

516 
	#IN6_IS_ADDR_MC_GLOBAL
(
a
) \

517 (
	`IN6_IS_ADDR_MULTICAST
(
a
) \

518 && ((((
__c⁄°
 
uöt8_t
 *Ë(
a
))[1] & 0xfË=0xe))

	)

521 #ifde‡
__USE_GNU


523 
	sö6_pktöfo


525 
ö6_addr
 
ùi6_addr
;

526 
ùi6_ifödex
;

530 
	sù6_mtuöfo


532 
sockaddr_ö6
 
ù6m_addr
;

533 
uöt32_t
 
ù6m_mtu
;

538 
	$öë6_›ti⁄_•a˚
 (
__nbyãs
)

539 
__THROW
 
__©åibuã_dïªˇãd__
;

540 
	$öë6_›ti⁄_öô
 (*
__bp
, 
cmsghdr
 **
__cmsgp
,

541 
__ty≥
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

542 
	$öë6_›ti⁄_≠≥nd
 (
cmsghdr
 *
__cmsg
,

543 
__c⁄°
 
uöt8_t
 *
__ty≥p
, 
__mu…x
,

544 
__∂usy
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

545 
uöt8_t
 *
	$öë6_›ti⁄_Æloc
 (
cmsghdr
 *
__cmsg
, 
__d©Æí
,

546 
__mu…x
, 
__∂usy
)

547 
__THROW
 
__©åibuã_dïªˇãd__
;

548 
	$öë6_›ti⁄_√xt
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

549 
uöt8_t
 **
__çåp
)

550 
__THROW
 
__©åibuã_dïªˇãd__
;

551 
	$öë6_›ti⁄_föd
 (
__c⁄°
 
cmsghdr
 *
__cmsg
,

552 
uöt8_t
 **
__çåp
, 
__ty≥
)

553 
__THROW
 
__©åibuã_dïªˇãd__
;

557 
	$öë6_›t_öô
 (*
__extbuf
, 
sockÀn_t
 
__exéí
Ë
__THROW
;

558 
	$öë6_›t_≠≥nd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

559 
uöt8_t
 
__ty≥
, 
sockÀn_t
 
__Àn
, uöt8_à
__Æign
,

560 **
__d©abuÂ
Ë
__THROW
;

561 
	$öë6_›t_föish
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
)

562 
__THROW
;

563 
	$öë6_›t_£t_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

564 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

565 
	$öë6_›t_√xt
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

566 
uöt8_t
 *
__ty≥p
, 
sockÀn_t
 *
__À≈
,

567 **
__d©abuÂ
Ë
__THROW
;

568 
	$öë6_›t_föd
 (*
__extbuf
, 
sockÀn_t
 
__exéí
, 
__off£t
,

569 
uöt8_t
 
__ty≥
, 
sockÀn_t
 *
__À≈
,

570 **
__d©abuÂ
Ë
__THROW
;

571 
	$öë6_›t_gë_vÆ
 (*
__d©abuf
, 
__off£t
, *
__vÆ
,

572 
sockÀn_t
 
__vÆÀn
Ë
__THROW
;

576 
sockÀn_t
 
	$öë6_πh_•a˚
 (
__ty≥
, 
__£gmíts
Ë
__THROW
;

577 *
	$öë6_πh_öô
 (*
__bp
, 
sockÀn_t
 
__bp_Àn
, 
__ty≥
,

578 
__£gmíts
Ë
__THROW
;

579 
	$öë6_πh_add
 (*
__bp
, 
__c⁄°
 
ö6_addr
 *
__addr
Ë
__THROW
;

580 
	$öë6_πh_ªvî£
 (
__c⁄°
 *
__ö
, *
__out
Ë
__THROW
;

581 
	$öë6_πh_£gmíts
 (
__c⁄°
 *
__bp
Ë
__THROW
;

582 
ö6_addr
 *
	$öë6_πh_gëaddr
 (
__c⁄°
 *
__bp
, 
__ödex
)

583 
__THROW
;

589 
	$gëùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

590 
ö_addr
 
__group
, 
uöt32_t
 *
__fmode
,

591 
uöt32_t
 *
__num§c
, 
ö_addr
 *
__¶i°
)

592 
__THROW
;

595 
	$£tùv4sour˚fûãr
 (
__s
, 
ö_addr
 
__öãrÁ˚_addr
,

596 
ö_addr
 
__group
, 
uöt32_t
 
__fmode
,

597 
uöt32_t
 
__num§c
,

598 
__c⁄°
 
ö_addr
 *
__¶i°
)

599 
__THROW
;

603 
	$gësour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

604 
__c⁄°
 
sockaddr
 *
__group
,

605 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 *
__fmode
,

606 
uöt32_t
 *
__num§c
,

607 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

610 
	$£tsour˚fûãr
 (
__s
, 
uöt32_t
 
__öãrÁ˚_addr
,

611 
__c⁄°
 
sockaddr
 *
__group
,

612 
sockÀn_t
 
__grou∂í
, 
uöt32_t
 
__fmode
,

613 
uöt32_t
 
__num§c
,

614 
__c⁄°
 
sockaddr_°‹age
 *
__¶i°
Ë
__THROW
;

617 
__END_DECLS


	@/usr/include/netinet/tcp.h

32 #i‚de‡
_NETINET_TCP_H


33 
	#_NETINET_TCP_H
 1

	)

35 
	~<„©uªs.h
>

40 
	#TCP_NODELAY
 1

	)

41 
	#TCP_MAXSEG
 2

	)

42 
	#TCP_CORK
 3

	)

43 
	#TCP_KEEPIDLE
 4

	)

44 
	#TCP_KEEPINTVL
 5

	)

45 
	#TCP_KEEPCNT
 6

	)

46 
	#TCP_SYNCNT
 7

	)

47 
	#TCP_LINGER2
 8

	)

48 
	#TCP_DEFER_ACCEPT
 9

	)

49 
	#TCP_WINDOW_CLAMP
 10

	)

50 
	#TCP_INFO
 11

	)

51 
	#TCP_QUICKACK
 12

	)

52 
	#TCP_CONGESTION
 13

	)

53 
	#TCP_MD5SIG
 14

	)

55 #ifde‡
__USE_MISC


56 
	~<sys/ty≥s.h
>

57 
	~<sys/sockë.h
>

59 #ifde‡
__FAVOR_BSD


60 
u_öt32_t
 
	tt˝_£q
;

65 
	st˝hdr


67 
u_öt16_t
 
	mth_•‹t
;

68 
u_öt16_t
 
	mth_dp‹t
;

69 
t˝_£q
 
	mth_£q
;

70 
t˝_£q
 
	mth_ack
;

71 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


72 
u_öt8_t
 
	mth_x2
:4;

73 
u_öt8_t
 
	mth_off
:4;

75 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


76 
u_öt8_t
 
	mth_off
:4;

77 
u_öt8_t
 
	mth_x2
:4;

79 
u_öt8_t
 
	mth_Êags
;

80 
	#TH_FIN
 0x01

	)

81 
	#TH_SYN
 0x02

	)

82 
	#TH_RST
 0x04

	)

83 
	#TH_PUSH
 0x08

	)

84 
	#TH_ACK
 0x10

	)

85 
	#TH_URG
 0x20

	)

86 
u_öt16_t
 
	mth_wö
;

87 
u_öt16_t
 
	mth_sum
;

88 
u_öt16_t
 
	mth_uΩ
;

92 
	st˝hdr


94 
u_öt16_t
 
	msour˚
;

95 
u_öt16_t
 
	mde°
;

96 
u_öt32_t
 
	m£q
;

97 
u_öt32_t
 
	mack_£q
;

98 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


99 
u_öt16_t
 
	mªs1
:4;

100 
u_öt16_t
 
	mdoff
:4;

101 
u_öt16_t
 
	mfö
:1;

102 
u_öt16_t
 
	msyn
:1;

103 
u_öt16_t
 
	mr°
:1;

104 
u_öt16_t
 
	mpsh
:1;

105 
u_öt16_t
 
	mack
:1;

106 
u_öt16_t
 
	murg
:1;

107 
u_öt16_t
 
	mªs2
:2;

108 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


109 
u_öt16_t
 
	mdoff
:4;

110 
u_öt16_t
 
	mªs1
:4;

111 
u_öt16_t
 
	mªs2
:2;

112 
u_öt16_t
 
	murg
:1;

113 
u_öt16_t
 
	mack
:1;

114 
u_öt16_t
 
	mpsh
:1;

115 
u_öt16_t
 
	mr°
:1;

116 
u_öt16_t
 
	msyn
:1;

117 
u_öt16_t
 
	mfö
:1;

121 
u_öt16_t
 
	mwödow
;

122 
u_öt16_t
 
	mcheck
;

123 
u_öt16_t
 
	murg_±r
;

129 
	mTCP_ESTABLISHED
 = 1,

130 
	mTCP_SYN_SENT
,

131 
	mTCP_SYN_RECV
,

132 
	mTCP_FIN_WAIT1
,

133 
	mTCP_FIN_WAIT2
,

134 
	mTCP_TIME_WAIT
,

135 
	mTCP_CLOSE
,

136 
	mTCP_CLOSE_WAIT
,

137 
	mTCP_LAST_ACK
,

138 
	mTCP_LISTEN
,

139 
	mTCP_CLOSING


142 
	#TCPOPT_EOL
 0

	)

143 
	#TCPOPT_NOP
 1

	)

144 
	#TCPOPT_MAXSEG
 2

	)

145 
	#TCPOLEN_MAXSEG
 4

	)

146 
	#TCPOPT_WINDOW
 3

	)

147 
	#TCPOLEN_WINDOW
 3

	)

148 
	#TCPOPT_SACK_PERMITTED
 4

	)

149 
	#TCPOLEN_SACK_PERMITTED
 2

	)

150 
	#TCPOPT_SACK
 5

	)

151 
	#TCPOPT_TIMESTAMP
 8

	)

152 
	#TCPOLEN_TIMESTAMP
 10

	)

153 
	#TCPOLEN_TSTAMP_APPA
 (
TCPOLEN_TIMESTAMP
+2Ë

	)

155 
	#TCPOPT_TSTAMP_HDR
 \

156 (
TCPOPT_NOP
<<24|TCPOPT_NOP<<16|
TCPOPT_TIMESTAMP
<<8|
TCPOLEN_TIMESTAMP
)

	)

164 
	#TCP_MSS
 512

	)

166 
	#TCP_MAXWIN
 65535

	)

168 
	#TCP_MAX_WINSHIFT
 14

	)

170 
	#SOL_TCP
 6

	)

173 
	#TCPI_OPT_TIMESTAMPS
 1

	)

174 
	#TCPI_OPT_SACK
 2

	)

175 
	#TCPI_OPT_WSCALE
 4

	)

176 
	#TCPI_OPT_ECN
 8

	)

179 
	et˝_ˇ_°©e


181 
	mTCP_CA_O≥n
 = 0,

182 
	mTCP_CA_Dis‹dî
 = 1,

183 
	mTCP_CA_CWR
 = 2,

184 
	mTCP_CA_Recovîy
 = 3,

185 
	mTCP_CA_Loss
 = 4

188 
	st˝_öfo


190 
u_öt8_t
 
	mt˝i_°©e
;

191 
u_öt8_t
 
	mt˝i_ˇ_°©e
;

192 
u_öt8_t
 
	mt˝i_ªå™smôs
;

193 
u_öt8_t
 
	mt˝i_¥obes
;

194 
u_öt8_t
 
	mt˝i_backoff
;

195 
u_öt8_t
 
	mt˝i_›ti⁄s
;

196 
u_öt8_t
 
	mt˝i_¢d_wsˇÀ
 : 4, 
	mt˝i_rcv_wsˇÀ
 : 4;

198 
u_öt32_t
 
	mt˝i_πo
;

199 
u_öt32_t
 
	mt˝i_©o
;

200 
u_öt32_t
 
	mt˝i_¢d_mss
;

201 
u_öt32_t
 
	mt˝i_rcv_mss
;

203 
u_öt32_t
 
	mt˝i_u«cked
;

204 
u_öt32_t
 
	mt˝i_ßcked
;

205 
u_öt32_t
 
	mt˝i_lo°
;

206 
u_öt32_t
 
	mt˝i_ªå™s
;

207 
u_öt32_t
 
	mt˝i_Áckës
;

210 
u_öt32_t
 
	mt˝i_œ°_d©a_£¡
;

211 
u_öt32_t
 
	mt˝i_œ°_ack_£¡
;

212 
u_öt32_t
 
	mt˝i_œ°_d©a_ªcv
;

213 
u_öt32_t
 
	mt˝i_œ°_ack_ªcv
;

216 
u_öt32_t
 
	mt˝i_pmtu
;

217 
u_öt32_t
 
	mt˝i_rcv_s°hªsh
;

218 
u_öt32_t
 
	mt˝i_πt
;

219 
u_öt32_t
 
	mt˝i_πtv¨
;

220 
u_öt32_t
 
	mt˝i_¢d_s°hªsh
;

221 
u_öt32_t
 
	mt˝i_¢d_cwnd
;

222 
u_öt32_t
 
	mt˝i_advmss
;

223 
u_öt32_t
 
	mt˝i_ª‹dîög
;

225 
u_öt32_t
 
	mt˝i_rcv_πt
;

226 
u_öt32_t
 
	mt˝i_rcv_•a˚
;

228 
u_öt32_t
 
	mt˝i_tŸÆ_ªå™s
;

233 
	#TCP_MD5SIG_MAXKEYLEN
 80

	)

235 
	st˝_md5sig


237 
sockaddr_°‹age
 
	mt˝m_addr
;

238 
u_öt16_t
 
	m__t˝m_∑d1
;

239 
u_öt16_t
 
	mt˝m_keyÀn
;

240 
u_öt32_t
 
	m__t˝m_∑d2
;

241 
u_öt8_t
 
	mt˝m_key
[
TCP_MD5SIG_MAXKEYLEN
];

	@/usr/include/openssl/conf.h

59 #i‚de‡ 
HEADER_CONF_H


60 
	#HEADER_CONF_H


	)

62 
	~<›ís¶/bio.h
>

63 
	~<›ís¶/lhash.h
>

64 
	~<›ís¶/°ack.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/os¶_typ.h
>

70 #ifde‡ 
__˝lu•lus


76 *
£˘i⁄
;

77 *
«me
;

78 *
vÆue
;

79 } 
	tCONF_VALUE
;

81 
DECLARE_STACK_OF
(
CONF_VALUE
)

82 
DECLARE_LHASH_OF
(
CONF_VALUE
);

84 
c⁄f_°
;

85 
c⁄f_mëhod_°
;

86 
c⁄f_mëhod_°
 
	tCONF_METHOD
;

88 
	sc⁄f_mëhod_°


90 c⁄° *
«me
;

91 
CONF
 *(*
¸óã
)(
CONF_METHOD
 *
mëh
);

92 (*
öô
)(
CONF
 *
c⁄f
);

93 (*
de°roy
)(
CONF
 *
c⁄f
);

94 (*
de°roy_d©a
)(
CONF
 *
c⁄f
);

95 (*
lﬂd_bio
)(
CONF
 *
c⁄f
, 
BIO
 *
bp
, *
ñöe
);

96 (*
dump
)(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
bp
);

97 (*
is_numbî
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

98 (*
to_öt
)(c⁄° 
CONF
 *
c⁄f
, 
c
);

99 (*
lﬂd
)(
CONF
 *
c⁄f
, c⁄° *
«me
, *
ñöe
);

104 
c⁄f_imoduÀ_°
 
	tCONF_IMODULE
;

105 
c⁄f_moduÀ_°
 
	tCONF_MODULE
;

107 
DECLARE_STACK_OF
(
CONF_MODULE
)

108 
DECLARE_STACK_OF
(
CONF_IMODULE
)

111 
	tc⁄f_öô_func
(
	tCONF_IMODULE
 *
	tmd
, c⁄° 
	tCONF
 *
	t˙f
);

112 
	tc⁄f_föish_func
(
	tCONF_IMODULE
 *
	tmd
);

114 
	#CONF_MFLAGS_IGNORE_ERRORS
 0x1

	)

115 
	#CONF_MFLAGS_IGNORE_RETURN_CODES
 0x2

	)

116 
	#CONF_MFLAGS_SILENT
 0x4

	)

117 
	#CONF_MFLAGS_NO_DSO
 0x8

	)

118 
	#CONF_MFLAGS_IGNORE_MISSING_FILE
 0x10

	)

119 
	#CONF_MFLAGS_DEFAULT_SECTION
 0x20

	)

121 
CONF_£t_deÁu…_mëhod
(
CONF_METHOD
 *
mëh
);

122 
CONF_£t_nc⁄f
(
CONF
 *
c⁄f
,
LHASH_OF
(
CONF_VALUE
Ë*
hash
);

123 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd
(LHASH_OF(CONF_VALUEË*
c⁄f
,c⁄° *
fûe
,

124 *
ñöe
);

125 #i‚de‡
OPENSSL_NO_FP_API


126 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_Â
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
FILE
 *
Â
,

127 *
ñöe
);

129 
LHASH_OF
(
CONF_VALUE
Ë*
CONF_lﬂd_bio
(LHASH_OF(CONF_VALUEË*
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

130 
STACK_OF
(
CONF_VALUE
Ë*
CONF_gë_£˘i⁄
(
LHASH_OF
(CONF_VALUEË*
c⁄f
,

131 c⁄° *
£˘i⁄
);

132 *
CONF_gë_°rög
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

133 c⁄° *
«me
);

134 
CONF_gë_numbî
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
,c⁄° *
group
,

135 c⁄° *
«me
);

136 
CONF_‰ì
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
);

137 
CONF_dump_Â
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
FILE
 *
out
);

138 
CONF_dump_bio
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
BIO
 *
out
);

140 
OPENSSL_c⁄fig
(c⁄° *
c⁄fig_«me
);

141 
OPENSSL_no_c⁄fig
();

146 
	sc⁄f_°


148 
CONF_METHOD
 *
mëh
;

149 *
mëh_d©a
;

150 
LHASH_OF
(
CONF_VALUE
Ë*
d©a
;

153 
CONF
 *
NCONF_√w
(
CONF_METHOD
 *
mëh
);

154 
CONF_METHOD
 *
NCONF_deÁu…
();

155 
CONF_METHOD
 *
NCONF_WIN32
();

157 
CONF_METHOD
 *
NCONF_XML
();

159 
NCONF_‰ì
(
CONF
 *
c⁄f
);

160 
NCONF_‰ì_d©a
(
CONF
 *
c⁄f
);

162 
NCONF_lﬂd
(
CONF
 *
c⁄f
,c⁄° *
fûe
,*
ñöe
);

163 #i‚de‡
OPENSSL_NO_FP_API


164 
NCONF_lﬂd_Â
(
CONF
 *
c⁄f
, 
FILE
 *
Â
,*
ñöe
);

166 
NCONF_lﬂd_bio
(
CONF
 *
c⁄f
, 
BIO
 *
bp
,*
ñöe
);

167 
STACK_OF
(
CONF_VALUE
Ë*
NCONF_gë_£˘i⁄
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
£˘i⁄
);

168 *
NCONF_gë_°rög
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
);

169 
NCONF_gë_numbî_e
(c⁄° 
CONF
 *
c⁄f
,c⁄° *
group
,c⁄° *
«me
,

170 *
ªsu…
);

171 
NCONF_dump_Â
(c⁄° 
CONF
 *
c⁄f
, 
FILE
 *
out
);

172 
NCONF_dump_bio
(c⁄° 
CONF
 *
c⁄f
, 
BIO
 *
out
);

176 
NCONF_gë_numbî
(
CONF
 *
c⁄f
,*
group
,*
«me
);

178 
	#NCONF_gë_numbî
(
c
,
g
,
n
,
r
Ë
	`NCONF_gë_numbî_e
(c,g,n,r)

	)

183 
CONF_moduÀs_lﬂd
(c⁄° 
CONF
 *
˙f
, c⁄° *
≠≤ame
,

184 
Êags
);

185 
CONF_moduÀs_lﬂd_fûe
(c⁄° *
fûíame
, c⁄° *
≠≤ame
,

186 
Êags
);

187 
CONF_moduÀs_u∆ﬂd
(
Æl
);

188 
CONF_moduÀs_föish
();

189 
CONF_moduÀs_‰ì
();

190 
CONF_moduÀ_add
(c⁄° *
«me
, 
c⁄f_öô_func
 *
ifunc
,

191 
c⁄f_föish_func
 *
ffunc
);

193 c⁄° *
CONF_imoduÀ_gë_«me
(c⁄° 
CONF_IMODULE
 *
md
);

194 c⁄° *
CONF_imoduÀ_gë_vÆue
(c⁄° 
CONF_IMODULE
 *
md
);

195 *
CONF_imoduÀ_gë_u§_d©a
(c⁄° 
CONF_IMODULE
 *
md
);

196 
CONF_imoduÀ_£t_u§_d©a
(
CONF_IMODULE
 *
md
, *
u§_d©a
);

197 
CONF_MODULE
 *
CONF_imoduÀ_gë_moduÀ
(c⁄° 
CONF_IMODULE
 *
md
);

198 
CONF_imoduÀ_gë_Êags
(c⁄° 
CONF_IMODULE
 *
md
);

199 
CONF_imoduÀ_£t_Êags
(
CONF_IMODULE
 *
md
, 
Êags
);

200 *
CONF_moduÀ_gë_u§_d©a
(
CONF_MODULE
 *
pmod
);

201 
CONF_moduÀ_£t_u§_d©a
(
CONF_MODULE
 *
pmod
, *
u§_d©a
);

203 *
CONF_gë1_deÁu…_c⁄fig_fûe
();

205 
CONF_∑r£_li°
(c⁄° *
li°
, 
£p
, 
no•c
,

206 (*
li°_cb
)(c⁄° *
ñem
, 
Àn
, *
u§
), *
¨g
);

208 
OPENSSL_lﬂd_buûtö_moduÀs
();

214 
ERR_lﬂd_CONF_°rögs
();

219 
	#CONF_F_CONF_DUMP_FP
 104

	)

220 
	#CONF_F_CONF_LOAD
 100

	)

221 
	#CONF_F_CONF_LOAD_BIO
 102

	)

222 
	#CONF_F_CONF_LOAD_FP
 103

	)

223 
	#CONF_F_CONF_MODULES_LOAD
 116

	)

224 
	#CONF_F_CONF_PARSE_LIST
 119

	)

225 
	#CONF_F_DEF_LOAD
 120

	)

226 
	#CONF_F_DEF_LOAD_BIO
 121

	)

227 
	#CONF_F_MODULE_INIT
 115

	)

228 
	#CONF_F_MODULE_LOAD_DSO
 117

	)

229 
	#CONF_F_MODULE_RUN
 118

	)

230 
	#CONF_F_NCONF_DUMP_BIO
 105

	)

231 
	#CONF_F_NCONF_DUMP_FP
 106

	)

232 
	#CONF_F_NCONF_GET_NUMBER
 107

	)

233 
	#CONF_F_NCONF_GET_NUMBER_E
 112

	)

234 
	#CONF_F_NCONF_GET_SECTION
 108

	)

235 
	#CONF_F_NCONF_GET_STRING
 109

	)

236 
	#CONF_F_NCONF_LOAD
 113

	)

237 
	#CONF_F_NCONF_LOAD_BIO
 110

	)

238 
	#CONF_F_NCONF_LOAD_FP
 114

	)

239 
	#CONF_F_NCONF_NEW
 111

	)

240 
	#CONF_F_STR_COPY
 101

	)

243 
	#CONF_R_ERROR_LOADING_DSO
 110

	)

244 
	#CONF_R_LIST_CANNOT_BE_NULL
 115

	)

245 
	#CONF_R_MISSING_CLOSE_SQUARE_BRACKET
 100

	)

246 
	#CONF_R_MISSING_EQUAL_SIGN
 101

	)

247 
	#CONF_R_MISSING_FINISH_FUNCTION
 111

	)

248 
	#CONF_R_MISSING_INIT_FUNCTION
 112

	)

249 
	#CONF_R_MODULE_INITIALIZATION_ERROR
 109

	)

250 
	#CONF_R_NO_CLOSE_BRACE
 102

	)

251 
	#CONF_R_NO_CONF
 105

	)

252 
	#CONF_R_NO_CONF_OR_ENVIRONMENT_VARIABLE
 106

	)

253 
	#CONF_R_NO_SECTION
 107

	)

254 
	#CONF_R_NO_SUCH_FILE
 114

	)

255 
	#CONF_R_NO_VALUE
 108

	)

256 
	#CONF_R_UNABLE_TO_CREATE_NEW_SECTION
 103

	)

257 
	#CONF_R_UNKNOWN_MODULE_NAME
 113

	)

258 
	#CONF_R_VARIABLE_HAS_NO_VALUE
 104

	)

260 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/engine.h

64 #i‚de‡
HEADER_ENGINE_H


65 
	#HEADER_ENGINE_H


	)

67 
	~<›ís¶/›ís¶c⁄f.h
>

69 #ifde‡
OPENSSL_NO_ENGINE


70 #îr‹ 
ENGINE
 
is
 
dißbÀd
.

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

75 #i‚de‡
OPENSSL_NO_RSA


76 
	~<›ís¶/rß.h
>

78 #i‚de‡
OPENSSL_NO_DSA


79 
	~<›ís¶/dß.h
>

81 #i‚de‡
OPENSSL_NO_DH


82 
	~<›ís¶/dh.h
>

84 #i‚de‡
OPENSSL_NO_ECDH


85 
	~<›ís¶/ecdh.h
>

87 #i‚de‡
OPENSSL_NO_ECDSA


88 
	~<›ís¶/ecdß.h
>

90 
	~<›ís¶/ønd.h
>

91 
	~<›ís¶/ui.h
>

92 
	~<›ís¶/îr.h
>

95 
	~<›ís¶/os¶_typ.h
>

96 
	~<›ís¶/symhacks.h
>

98 
	~<›ís¶/x509.h
>

100 #ifde‡ 
__˝lu•lus


106 
	#ENGINE_METHOD_RSA
 ()0x0001

	)

107 
	#ENGINE_METHOD_DSA
 ()0x0002

	)

108 
	#ENGINE_METHOD_DH
 ()0x0004

	)

109 
	#ENGINE_METHOD_RAND
 ()0x0008

	)

110 
	#ENGINE_METHOD_ECDH
 ()0x0010

	)

111 
	#ENGINE_METHOD_ECDSA
 ()0x0020

	)

112 
	#ENGINE_METHOD_CIPHERS
 ()0x0040

	)

113 
	#ENGINE_METHOD_DIGESTS
 ()0x0080

	)

114 
	#ENGINE_METHOD_STORE
 ()0x0100

	)

115 
	#ENGINE_METHOD_PKEY_METHS
 ()0x0200

	)

116 
	#ENGINE_METHOD_PKEY_ASN1_METHS
 ()0x0400

	)

118 
	#ENGINE_METHOD_ALL
 ()0xFFFF

	)

119 
	#ENGINE_METHOD_NONE
 ()0x0000

	)

125 
	#ENGINE_TABLE_FLAG_NOINIT
 ()0x0001

	)

133 
	#ENGINE_FLAGS_MANUAL_CMD_CTRL
 ()0x0002

	)

142 
	#ENGINE_FLAGS_BY_ID_COPY
 ()0x0004

	)

149 
	#ENGINE_FLAGS_NO_REGISTER_ALL
 ()0x0008

	)

162 
	#ENGINE_CMD_FLAG_NUMERIC
 ()0x0001

	)

165 
	#ENGINE_CMD_FLAG_STRING
 ()0x0002

	)

168 
	#ENGINE_CMD_FLAG_NO_INPUT
 ()0x0004

	)

172 
	#ENGINE_CMD_FLAG_INTERNAL
 ()0x0008

	)

187 
	#ENGINE_CTRL_SET_LOGSTREAM
 1

	)

188 
	#ENGINE_CTRL_SET_PASSWORD_CALLBACK
 2

	)

189 
	#ENGINE_CTRL_HUP
 3

	)

191 
	#ENGINE_CTRL_SET_USER_INTERFACE
 4

	)

192 
	#ENGINE_CTRL_SET_CALLBACK_DATA
 5

	)

196 
	#ENGINE_CTRL_LOAD_CONFIGURATION
 6

	)

199 
	#ENGINE_CTRL_LOAD_SECTION
 7

	)

220 
	#ENGINE_CTRL_HAS_CTRL_FUNCTION
 10

	)

223 
	#ENGINE_CTRL_GET_FIRST_CMD_TYPE
 11

	)

226 
	#ENGINE_CTRL_GET_NEXT_CMD_TYPE
 12

	)

229 
	#ENGINE_CTRL_GET_CMD_FROM_NAME
 13

	)

236 
	#ENGINE_CTRL_GET_NAME_LEN_FROM_CMD
 14

	)

237 
	#ENGINE_CTRL_GET_NAME_FROM_CMD
 15

	)

239 
	#ENGINE_CTRL_GET_DESC_LEN_FROM_CMD
 16

	)

240 
	#ENGINE_CTRL_GET_DESC_FROM_CMD
 17

	)

244 
	#ENGINE_CTRL_GET_CMD_FLAGS
 18

	)

248 
	#ENGINE_CMD_BASE
 200

	)

257 
	#ENGINE_CTRL_CHIL_SET_FORKCHECK
 100

	)

262 
	#ENGINE_CTRL_CHIL_NO_LOCKING
 101

	)

274 
	sENGINE_CMD_DEFN_°


276 
cmd_num
;

277 c⁄° *
cmd_«me
;

278 c⁄° *
cmd_desc
;

279 
cmd_Êags
;

280 } 
	tENGINE_CMD_DEFN
;

283 (*
ENGINE_GEN_FUNC_PTR
)();

285 (*
ENGINE_GEN_INT_FUNC_PTR
)(
	tENGINE
 *);

287 (*
ENGINE_CTRL_FUNC_PTR
)(
	tENGINE
 *, , , *, (*
	tf
)());

289 
EVP_PKEY
 * (*
	tENGINE_LOAD_KEY_PTR
)(
	tENGINE
 *, const *,

290 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

291 (*
ENGINE_SSL_CLIENT_CERT_PTR
)(
	tENGINE
 *, 
	tSSL
 *
	ts¶
,

292 
	tSTACK_OF
(
	tX509_NAME
Ë*
	tˇ_dn
, 
	tX509
 **
	tp˚π
, 
	tEVP_PKEY
 **
	tpkey
,

293 
	tSTACK_OF
(
	tX509
Ë**
	tpŸhî
, 
	tUI_METHOD
 *
	tui_mëhod
, *
	tˇŒback_d©a
);

306 (*
ENGINE_CIPHERS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_CIPHER
 **, const **, );

307 (*
ENGINE_DIGESTS_PTR
)(
	tENGINE
 *, c⁄° 
	tEVP_MD
 **, const **, );

308 (*
ENGINE_PKEY_METHS_PTR
)(
	tENGINE
 *, 
	tEVP_PKEY_METHOD
 **, const **, );

309 (*
ENGINE_PKEY_ASN1_METHS_PTR
)(
	tENGINE
 *, 
	tEVP_PKEY_ASN1_METHOD
 **, const **, );

321 
ENGINE
 *
ENGINE_gë_fú°
();

322 
ENGINE
 *
ENGINE_gë_œ°
();

324 
ENGINE
 *
ENGINE_gë_√xt
(ENGINE *
e
);

325 
ENGINE
 *
ENGINE_gë_¥ev
(ENGINE *
e
);

327 
ENGINE_add
(
ENGINE
 *
e
);

329 
ENGINE_ªmove
(
ENGINE
 *
e
);

331 
ENGINE
 *
ENGINE_by_id
(c⁄° *
id
);

333 
ENGINE_lﬂd_›ís¶
();

334 
ENGINE_lﬂd_dy«mic
();

335 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


336 
ENGINE_lﬂd_4758cˇ
();

337 
ENGINE_lﬂd_´p
();

338 
ENGINE_lﬂd_©Æœ
();

339 
ENGINE_lﬂd_chû
();

340 
ENGINE_lﬂd_cswi·
();

341 
ENGINE_lﬂd_nur⁄
();

342 
ENGINE_lﬂd_suªw¨e
();

343 
ENGINE_lﬂd_ub£c
();

344 
ENGINE_lﬂd_∑dlock
();

345 
ENGINE_lﬂd_ˇpi
();

346 #i‚de‡
OPENSSL_NO_GMP


347 
ENGINE_lﬂd_gmp
();

349 #i‚de‡
OPENSSL_NO_GOST


350 
ENGINE_lﬂd_go°
();

353 
ENGINE_lﬂd_¸y±odev
();

354 
ENGINE_lﬂd_rßx
();

355 
ENGINE_lﬂd_rdønd
();

356 
ENGINE_lﬂd_buûtö_ígöes
();

360 
ENGINE_gë_èbÀ_Êags
();

361 
ENGINE_£t_èbÀ_Êags
(
Êags
);

371 
ENGINE_ªgi°î_RSA
(
ENGINE
 *
e
);

372 
ENGINE_uƒegi°î_RSA
(
ENGINE
 *
e
);

373 
ENGINE_ªgi°î_Æl_RSA
();

375 
ENGINE_ªgi°î_DSA
(
ENGINE
 *
e
);

376 
ENGINE_uƒegi°î_DSA
(
ENGINE
 *
e
);

377 
ENGINE_ªgi°î_Æl_DSA
();

379 
ENGINE_ªgi°î_ECDH
(
ENGINE
 *
e
);

380 
ENGINE_uƒegi°î_ECDH
(
ENGINE
 *
e
);

381 
ENGINE_ªgi°î_Æl_ECDH
();

383 
ENGINE_ªgi°î_ECDSA
(
ENGINE
 *
e
);

384 
ENGINE_uƒegi°î_ECDSA
(
ENGINE
 *
e
);

385 
ENGINE_ªgi°î_Æl_ECDSA
();

387 
ENGINE_ªgi°î_DH
(
ENGINE
 *
e
);

388 
ENGINE_uƒegi°î_DH
(
ENGINE
 *
e
);

389 
ENGINE_ªgi°î_Æl_DH
();

391 
ENGINE_ªgi°î_RAND
(
ENGINE
 *
e
);

392 
ENGINE_uƒegi°î_RAND
(
ENGINE
 *
e
);

393 
ENGINE_ªgi°î_Æl_RAND
();

395 
ENGINE_ªgi°î_STORE
(
ENGINE
 *
e
);

396 
ENGINE_uƒegi°î_STORE
(
ENGINE
 *
e
);

397 
ENGINE_ªgi°î_Æl_STORE
();

399 
ENGINE_ªgi°î_cùhîs
(
ENGINE
 *
e
);

400 
ENGINE_uƒegi°î_cùhîs
(
ENGINE
 *
e
);

401 
ENGINE_ªgi°î_Æl_cùhîs
();

403 
ENGINE_ªgi°î_dige°s
(
ENGINE
 *
e
);

404 
ENGINE_uƒegi°î_dige°s
(
ENGINE
 *
e
);

405 
ENGINE_ªgi°î_Æl_dige°s
();

407 
ENGINE_ªgi°î_pkey_mëhs
(
ENGINE
 *
e
);

408 
ENGINE_uƒegi°î_pkey_mëhs
(
ENGINE
 *
e
);

409 
ENGINE_ªgi°î_Æl_pkey_mëhs
();

411 
ENGINE_ªgi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

412 
ENGINE_uƒegi°î_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

413 
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
();

419 
ENGINE_ªgi°î_com∂ëe
(
ENGINE
 *
e
);

420 
ENGINE_ªgi°î_Æl_com∂ëe
();

429 
ENGINE_˘æ
(
ENGINE
 *
e
, 
cmd
, 
i
, *
p
, (*
f
)());

435 
ENGINE_cmd_is_execuèbÀ
(
ENGINE
 *
e
, 
cmd
);

441 
ENGINE_˘æ_cmd
(
ENGINE
 *
e
, c⁄° *
cmd_«me
,

442 
i
, *
p
, (*
f
)(), 
cmd_›ti⁄Æ
);

463 
ENGINE_˘æ_cmd_°rög
(
ENGINE
 *
e
, c⁄° *
cmd_«me
, c⁄° *
¨g
,

464 
cmd_›ti⁄Æ
);

472 
ENGINE
 *
ENGINE_√w
();

473 
ENGINE_‰ì
(
ENGINE
 *
e
);

474 
ENGINE_up_ªf
(
ENGINE
 *
e
);

475 
ENGINE_£t_id
(
ENGINE
 *
e
, c⁄° *
id
);

476 
ENGINE_£t_«me
(
ENGINE
 *
e
, c⁄° *
«me
);

477 
ENGINE_£t_RSA
(
ENGINE
 *
e
, c⁄° 
RSA_METHOD
 *
rß_mëh
);

478 
ENGINE_£t_DSA
(
ENGINE
 *
e
, c⁄° 
DSA_METHOD
 *
dß_mëh
);

479 
ENGINE_£t_ECDH
(
ENGINE
 *
e
, c⁄° 
ECDH_METHOD
 *
ecdh_mëh
);

480 
ENGINE_£t_ECDSA
(
ENGINE
 *
e
, c⁄° 
ECDSA_METHOD
 *
ecdß_mëh
);

481 
ENGINE_£t_DH
(
ENGINE
 *
e
, c⁄° 
DH_METHOD
 *
dh_mëh
);

482 
ENGINE_£t_RAND
(
ENGINE
 *
e
, c⁄° 
RAND_METHOD
 *
ønd_mëh
);

483 
ENGINE_£t_STORE
(
ENGINE
 *
e
, c⁄° 
STORE_METHOD
 *
°‹e_mëh
);

484 
ENGINE_£t_de°roy_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
de°roy_f
);

485 
ENGINE_£t_öô_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
öô_f
);

486 
ENGINE_£t_föish_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_GEN_INT_FUNC_PTR
 
föish_f
);

487 
ENGINE_£t_˘æ_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_CTRL_FUNC_PTR
 
˘æ_f
);

488 
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂd¥iv_f
);

489 
ENGINE_£t_lﬂd_pubkey_fun˘i⁄
(
ENGINE
 *
e
, 
ENGINE_LOAD_KEY_PTR
 
lﬂdpub_f
);

490 
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
(
ENGINE
 *
e
,

491 
ENGINE_SSL_CLIENT_CERT_PTR
 
lﬂds¶_f
);

492 
ENGINE_£t_cùhîs
(
ENGINE
 *
e
, 
ENGINE_CIPHERS_PTR
 
f
);

493 
ENGINE_£t_dige°s
(
ENGINE
 *
e
, 
ENGINE_DIGESTS_PTR
 
f
);

494 
ENGINE_£t_pkey_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_METHS_PTR
 
f
);

495 
ENGINE_£t_pkey_a¢1_mëhs
(
ENGINE
 *
e
, 
ENGINE_PKEY_ASN1_METHS_PTR
 
f
);

496 
ENGINE_£t_Êags
(
ENGINE
 *
e
, 
Êags
);

497 
ENGINE_£t_cmd_de‚s
(
ENGINE
 *
e
, c⁄° 
ENGINE_CMD_DEFN
 *
de‚s
);

499 
ENGINE_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

500 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

501 
ENGINE_£t_ex_d©a
(
ENGINE
 *
e
, 
idx
, *
¨g
);

502 *
ENGINE_gë_ex_d©a
(c⁄° 
ENGINE
 *
e
, 
idx
);

508 
ENGINE_˛ónup
();

514 c⁄° *
ENGINE_gë_id
(c⁄° 
ENGINE
 *
e
);

515 c⁄° *
ENGINE_gë_«me
(c⁄° 
ENGINE
 *
e
);

516 c⁄° 
RSA_METHOD
 *
ENGINE_gë_RSA
(c⁄° 
ENGINE
 *
e
);

517 c⁄° 
DSA_METHOD
 *
ENGINE_gë_DSA
(c⁄° 
ENGINE
 *
e
);

518 c⁄° 
ECDH_METHOD
 *
ENGINE_gë_ECDH
(c⁄° 
ENGINE
 *
e
);

519 c⁄° 
ECDSA_METHOD
 *
ENGINE_gë_ECDSA
(c⁄° 
ENGINE
 *
e
);

520 c⁄° 
DH_METHOD
 *
ENGINE_gë_DH
(c⁄° 
ENGINE
 *
e
);

521 c⁄° 
RAND_METHOD
 *
ENGINE_gë_RAND
(c⁄° 
ENGINE
 *
e
);

522 c⁄° 
STORE_METHOD
 *
ENGINE_gë_STORE
(c⁄° 
ENGINE
 *
e
);

523 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_de°roy_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

524 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_öô_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

525 
ENGINE_GEN_INT_FUNC_PTR
 
ENGINE_gë_föish_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

526 
ENGINE_CTRL_FUNC_PTR
 
ENGINE_gë_˘æ_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

527 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

528 
ENGINE_LOAD_KEY_PTR
 
ENGINE_gë_lﬂd_pubkey_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

529 
ENGINE_SSL_CLIENT_CERT_PTR
 
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
(c⁄° 
ENGINE
 *
e
);

530 
ENGINE_CIPHERS_PTR
 
ENGINE_gë_cùhîs
(c⁄° 
ENGINE
 *
e
);

531 
ENGINE_DIGESTS_PTR
 
ENGINE_gë_dige°s
(c⁄° 
ENGINE
 *
e
);

532 
ENGINE_PKEY_METHS_PTR
 
ENGINE_gë_pkey_mëhs
(c⁄° 
ENGINE
 *
e
);

533 
ENGINE_PKEY_ASN1_METHS_PTR
 
ENGINE_gë_pkey_a¢1_mëhs
(c⁄° 
ENGINE
 *
e
);

534 c⁄° 
EVP_CIPHER
 *
ENGINE_gë_cùhî
(
ENGINE
 *
e
, 
nid
);

535 c⁄° 
EVP_MD
 *
ENGINE_gë_dige°
(
ENGINE
 *
e
, 
nid
);

536 c⁄° 
EVP_PKEY_METHOD
 *
ENGINE_gë_pkey_mëh
(
ENGINE
 *
e
, 
nid
);

537 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh
(
ENGINE
 *
e
, 
nid
);

538 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_gë_pkey_a¢1_mëh_°r
(
ENGINE
 *
e
,

539 c⁄° *
°r
, 
Àn
);

540 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
ENGINE_pkey_a¢1_föd_°r
(
ENGINE
 **
≥
,

541 c⁄° *
°r
, 
Àn
);

542 c⁄° 
ENGINE_CMD_DEFN
 *
ENGINE_gë_cmd_de‚s
(c⁄° 
ENGINE
 *
e
);

543 
ENGINE_gë_Êags
(c⁄° 
ENGINE
 *
e
);

560 
ENGINE_öô
(
ENGINE
 *
e
);

564 
ENGINE_föish
(
ENGINE
 *
e
);

569 
EVP_PKEY
 *
ENGINE_lﬂd_¥iv©e_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

570 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

571 
EVP_PKEY
 *
ENGINE_lﬂd_public_key
(
ENGINE
 *
e
, c⁄° *
key_id
,

572 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

573 
ENGINE_lﬂd_s¶_˛õ¡_˚π
(
ENGINE
 *
e
, 
SSL
 *
s
,

574 
STACK_OF
(
X509_NAME
Ë*
ˇ_dn
, 
X509
 **
p˚π
, 
EVP_PKEY
 **
µkey
,

575 
STACK_OF
(
X509
Ë**
pŸhî
,

576 
UI_METHOD
 *
ui_mëhod
, *
ˇŒback_d©a
);

582 
ENGINE
 *
ENGINE_gë_deÁu…_RSA
();

584 
ENGINE
 *
ENGINE_gë_deÁu…_DSA
();

585 
ENGINE
 *
ENGINE_gë_deÁu…_ECDH
();

586 
ENGINE
 *
ENGINE_gë_deÁu…_ECDSA
();

587 
ENGINE
 *
ENGINE_gë_deÁu…_DH
();

588 
ENGINE
 *
ENGINE_gë_deÁu…_RAND
();

591 
ENGINE
 *
ENGINE_gë_cùhî_ígöe
(
nid
);

592 
ENGINE
 *
ENGINE_gë_dige°_ígöe
(
nid
);

593 
ENGINE
 *
ENGINE_gë_pkey_mëh_ígöe
(
nid
);

594 
ENGINE
 *
ENGINE_gë_pkey_a¢1_mëh_ígöe
(
nid
);

600 
ENGINE_£t_deÁu…_RSA
(
ENGINE
 *
e
);

601 
ENGINE_£t_deÁu…_°rög
(
ENGINE
 *
e
, c⁄° *
def_li°
);

603 
ENGINE_£t_deÁu…_DSA
(
ENGINE
 *
e
);

604 
ENGINE_£t_deÁu…_ECDH
(
ENGINE
 *
e
);

605 
ENGINE_£t_deÁu…_ECDSA
(
ENGINE
 *
e
);

606 
ENGINE_£t_deÁu…_DH
(
ENGINE
 *
e
);

607 
ENGINE_£t_deÁu…_RAND
(
ENGINE
 *
e
);

608 
ENGINE_£t_deÁu…_cùhîs
(
ENGINE
 *
e
);

609 
ENGINE_£t_deÁu…_dige°s
(
ENGINE
 *
e
);

610 
ENGINE_£t_deÁu…_pkey_mëhs
(
ENGINE
 *
e
);

611 
ENGINE_£t_deÁu…_pkey_a¢1_mëhs
(
ENGINE
 *
e
);

618 
ENGINE_£t_deÁu…
(
ENGINE
 *
e
, 
Êags
);

620 
ENGINE_add_c⁄f_moduÀ
();

630 
	#OSSL_DYNAMIC_VERSION
 ()0x00020000

	)

633 
	#OSSL_DYNAMIC_OLDEST
 ()0x00020000

	)

644 *(*
	tdyn_MEM_mÆloc_cb
)(
	tsize_t
);

645 *(*
	tdyn_MEM_ªÆloc_cb
)(*, 
	tsize_t
);

646 (*
dyn_MEM_‰ì_cb
)(*);

647 
	s°_dy«mic_MEM_‚s
 {

648 
dyn_MEM_mÆloc_cb
 
mÆloc_cb
;

649 
dyn_MEM_ªÆloc_cb
 
ªÆloc_cb
;

650 
dyn_MEM_‰ì_cb
 
‰ì_cb
;

651 } 
	tdy«mic_MEM_‚s
;

654 (*
dyn_lock_lockög_cb
)(,,const *,);

655 (*
dyn_lock_add_lock_cb
)(*,,,const *,);

656 
CRYPTO_dy∆ock_vÆue
 *(*
	tdyn_dy∆ock_¸óã_cb
)(

658 (*
dyn_dy∆ock_lock_cb
)(,
	tCRYPTO_dy∆ock_vÆue
 *,

660 (*
dyn_dy∆ock_de°roy_cb
)(
	tCRYPTO_dy∆ock_vÆue
 *,

662 
	s°_dy«mic_LOCK_‚s
 {

663 
dyn_lock_lockög_cb
 
lock_lockög_cb
;

664 
dyn_lock_add_lock_cb
 
lock_add_lock_cb
;

665 
dyn_dy∆ock_¸óã_cb
 
dy∆ock_¸óã_cb
;

666 
dyn_dy∆ock_lock_cb
 
dy∆ock_lock_cb
;

667 
dyn_dy∆ock_de°roy_cb
 
dy∆ock_de°roy_cb
;

668 } 
	tdy«mic_LOCK_‚s
;

670 
	s°_dy«mic_‚s
 {

671 *
°©ic_°©e
;

672 c⁄° 
ERR_FNS
 *
îr_‚s
;

673 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
ex_d©a_‚s
;

674 
dy«mic_MEM_‚s
 
mem_‚s
;

675 
dy«mic_LOCK_‚s
 
lock_‚s
;

676 } 
	tdy«mic_‚s
;

687 (*
	tdy«mic_v_check_‚
)(
	tos¶_vîsi⁄
);

688 
	#IMPLEMENT_DYNAMIC_CHECK_FN
() \

689 
OPENSSL_EXPORT
 
	`v_check
(
v
); \

690 
OPENSSL_EXPORT
 
	`v_check
(
v
) { \

691 if(
v
 >
OSSL_DYNAMIC_OLDEST
Ë 
OSSL_DYNAMIC_VERSION
; \

692  0; }

	)

709 (*
dy«mic_böd_ígöe
)(
	tENGINE
 *
	te
, c⁄° *
	tid
,

710 c⁄° 
	tdy«mic_‚s
 *
	t‚s
);

711 
	#IMPLEMENT_DYNAMIC_BIND_FN
(
‚
) \

712 
OPENSSL_EXPORT
 \

713 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
); \

714 
OPENSSL_EXPORT
 \

715 
	`böd_ígöe
(
ENGINE
 *
e
, c⁄° *
id
, c⁄° 
dy«mic_‚s
 *
‚s
) { \

716 if(
	`ENGINE_gë_°©ic_°©e
(Ë=
‚s
->
°©ic_°©e
Ë
skù_cbs
; \

717 if(!
	`CRYPTO_£t_mem_fun˘i⁄s
(
‚s
->
mem_‚s
.
mÆloc_cb
, \

718 
‚s
->
mem_‚s
.
ªÆloc_cb
, fns->mem_‚s.
‰ì_cb
)) \

720 
	`CRYPTO_£t_lockög_ˇŒback
(
‚s
->
lock_‚s
.
lock_lockög_cb
); \

721 
	`CRYPTO_£t_add_lock_ˇŒback
(
‚s
->
lock_‚s
.
lock_add_lock_cb
); \

722 
	`CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_¸óã_cb
); \

723 
	`CRYPTO_£t_dy∆ock_lock_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_lock_cb
); \

724 
	`CRYPTO_£t_dy∆ock_de°roy_ˇŒback
(
‚s
->
lock_‚s
.
dy∆ock_de°roy_cb
); \

725 if(!
	`CRYPTO_£t_ex_d©a_im∂emíèti⁄
(
‚s
->
ex_d©a_‚s
)) \

727 if(!
	`ERR_£t_im∂emíèti⁄
(
‚s
->
îr_‚s
))  0; \

728 
skù_cbs
: \

729 if(!
	`‚
(
e
,
id
))  0; \

730  1; }

	)

741 *
ENGINE_gë_°©ic_°©e
();

743 #i‡
deföed
(
__O≥nBSD__
Ë|| deföed(
__FªeBSD__
Ë|| deföed(
HAVE_CRYPTODEV
)

744 
ENGINE_£tup_bsd_¸y±odev
();

751 
ERR_lﬂd_ENGINE_°rögs
();

756 
	#ENGINE_F_DYNAMIC_CTRL
 180

	)

757 
	#ENGINE_F_DYNAMIC_GET_DATA_CTX
 181

	)

758 
	#ENGINE_F_DYNAMIC_LOAD
 182

	)

759 
	#ENGINE_F_DYNAMIC_SET_DATA_CTX
 183

	)

760 
	#ENGINE_F_ENGINE_ADD
 105

	)

761 
	#ENGINE_F_ENGINE_BY_ID
 106

	)

762 
	#ENGINE_F_ENGINE_CMD_IS_EXECUTABLE
 170

	)

763 
	#ENGINE_F_ENGINE_CTRL
 142

	)

764 
	#ENGINE_F_ENGINE_CTRL_CMD
 178

	)

765 
	#ENGINE_F_ENGINE_CTRL_CMD_STRING
 171

	)

766 
	#ENGINE_F_ENGINE_FINISH
 107

	)

767 
	#ENGINE_F_ENGINE_FREE_UTIL
 108

	)

768 
	#ENGINE_F_ENGINE_GET_CIPHER
 185

	)

769 
	#ENGINE_F_ENGINE_GET_DEFAULT_TYPE
 177

	)

770 
	#ENGINE_F_ENGINE_GET_DIGEST
 186

	)

771 
	#ENGINE_F_ENGINE_GET_NEXT
 115

	)

772 
	#ENGINE_F_ENGINE_GET_PKEY_ASN1_METH
 193

	)

773 
	#ENGINE_F_ENGINE_GET_PKEY_METH
 192

	)

774 
	#ENGINE_F_ENGINE_GET_PREV
 116

	)

775 
	#ENGINE_F_ENGINE_INIT
 119

	)

776 
	#ENGINE_F_ENGINE_LIST_ADD
 120

	)

777 
	#ENGINE_F_ENGINE_LIST_REMOVE
 121

	)

778 
	#ENGINE_F_ENGINE_LOAD_PRIVATE_KEY
 150

	)

779 
	#ENGINE_F_ENGINE_LOAD_PUBLIC_KEY
 151

	)

780 
	#ENGINE_F_ENGINE_LOAD_SSL_CLIENT_CERT
 194

	)

781 
	#ENGINE_F_ENGINE_NEW
 122

	)

782 
	#ENGINE_F_ENGINE_REMOVE
 123

	)

783 
	#ENGINE_F_ENGINE_SET_DEFAULT_STRING
 189

	)

784 
	#ENGINE_F_ENGINE_SET_DEFAULT_TYPE
 126

	)

785 
	#ENGINE_F_ENGINE_SET_ID
 129

	)

786 
	#ENGINE_F_ENGINE_SET_NAME
 130

	)

787 
	#ENGINE_F_ENGINE_TABLE_REGISTER
 184

	)

788 
	#ENGINE_F_ENGINE_UNLOAD_KEY
 152

	)

789 
	#ENGINE_F_ENGINE_UNLOCKED_FINISH
 191

	)

790 
	#ENGINE_F_ENGINE_UP_REF
 190

	)

791 
	#ENGINE_F_INT_CTRL_HELPER
 172

	)

792 
	#ENGINE_F_INT_ENGINE_CONFIGURE
 188

	)

793 
	#ENGINE_F_INT_ENGINE_MODULE_INIT
 187

	)

794 
	#ENGINE_F_LOG_MESSAGE
 141

	)

797 
	#ENGINE_R_ALREADY_LOADED
 100

	)

798 
	#ENGINE_R_ARGUMENT_IS_NOT_A_NUMBER
 133

	)

799 
	#ENGINE_R_CMD_NOT_EXECUTABLE
 134

	)

800 
	#ENGINE_R_COMMAND_TAKES_INPUT
 135

	)

801 
	#ENGINE_R_COMMAND_TAKES_NO_INPUT
 136

	)

802 
	#ENGINE_R_CONFLICTING_ENGINE_ID
 103

	)

803 
	#ENGINE_R_CTRL_COMMAND_NOT_IMPLEMENTED
 119

	)

804 
	#ENGINE_R_DH_NOT_IMPLEMENTED
 139

	)

805 
	#ENGINE_R_DSA_NOT_IMPLEMENTED
 140

	)

806 
	#ENGINE_R_DSO_FAILURE
 104

	)

807 
	#ENGINE_R_DSO_NOT_FOUND
 132

	)

808 
	#ENGINE_R_ENGINES_SECTION_ERROR
 148

	)

809 
	#ENGINE_R_ENGINE_CONFIGURATION_ERROR
 102

	)

810 
	#ENGINE_R_ENGINE_IS_NOT_IN_LIST
 105

	)

811 
	#ENGINE_R_ENGINE_SECTION_ERROR
 149

	)

812 
	#ENGINE_R_FAILED_LOADING_PRIVATE_KEY
 128

	)

813 
	#ENGINE_R_FAILED_LOADING_PUBLIC_KEY
 129

	)

814 
	#ENGINE_R_FINISH_FAILED
 106

	)

815 
	#ENGINE_R_GET_HANDLE_FAILED
 107

	)

816 
	#ENGINE_R_ID_OR_NAME_MISSING
 108

	)

817 
	#ENGINE_R_INIT_FAILED
 109

	)

818 
	#ENGINE_R_INTERNAL_LIST_ERROR
 110

	)

819 
	#ENGINE_R_INVALID_ARGUMENT
 143

	)

820 
	#ENGINE_R_INVALID_CMD_NAME
 137

	)

821 
	#ENGINE_R_INVALID_CMD_NUMBER
 138

	)

822 
	#ENGINE_R_INVALID_INIT_VALUE
 151

	)

823 
	#ENGINE_R_INVALID_STRING
 150

	)

824 
	#ENGINE_R_NOT_INITIALISED
 117

	)

825 
	#ENGINE_R_NOT_LOADED
 112

	)

826 
	#ENGINE_R_NO_CONTROL_FUNCTION
 120

	)

827 
	#ENGINE_R_NO_INDEX
 144

	)

828 
	#ENGINE_R_NO_LOAD_FUNCTION
 125

	)

829 
	#ENGINE_R_NO_REFERENCE
 130

	)

830 
	#ENGINE_R_NO_SUCH_ENGINE
 116

	)

831 
	#ENGINE_R_NO_UNLOAD_FUNCTION
 126

	)

832 
	#ENGINE_R_PROVIDE_PARAMETERS
 113

	)

833 
	#ENGINE_R_RSA_NOT_IMPLEMENTED
 141

	)

834 
	#ENGINE_R_UNIMPLEMENTED_CIPHER
 146

	)

835 
	#ENGINE_R_UNIMPLEMENTED_DIGEST
 147

	)

836 
	#ENGINE_R_UNIMPLEMENTED_PUBLIC_KEY_METHOD
 101

	)

837 
	#ENGINE_R_VERSION_INCOMPATIBILITY
 145

	)

839 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/err.h

112 #i‚de‡
HEADER_ERR_H


113 
	#HEADER_ERR_H


	)

115 
	~<›ís¶/e_os2.h
>

117 #i‚de‡
OPENSSL_NO_FP_API


118 
	~<°dio.h
>

119 
	~<°dlib.h
>

122 
	~<›ís¶/os¶_typ.h
>

123 #i‚de‡
OPENSSL_NO_BIO


124 
	~<›ís¶/bio.h
>

126 #i‚de‡
OPENSSL_NO_LHASH


127 
	~<›ís¶/lhash.h
>

130 #ifdef 
__˝lu•lus


134 #i‚de‡
OPENSSL_NO_ERR


135 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,d,e)

	)

137 
	#ERR_PUT_îr‹
(
a
,
b
,
c
,
d
,
e
Ë
	`ERR_put_îr‹
◊,b,c,
NULL
,0)

	)

140 
	~<î∫o.h
>

142 
	#ERR_TXT_MALLOCED
 0x01

	)

143 
	#ERR_TXT_STRING
 0x02

	)

145 
	#ERR_FLAG_MARK
 0x01

	)

147 
	#ERR_NUM_ERRORS
 16

	)

148 
	sîr_°©e_°


150 
CRYPTO_THREADID
 
tid
;

151 
îr_Êags
[
ERR_NUM_ERRORS
];

152 
îr_buf„r
[
ERR_NUM_ERRORS
];

153 *
îr_d©a
[
ERR_NUM_ERRORS
];

154 
îr_d©a_Êags
[
ERR_NUM_ERRORS
];

155 c⁄° *
îr_fûe
[
ERR_NUM_ERRORS
];

156 
îr_löe
[
ERR_NUM_ERRORS
];

157 
t›
,
bŸtom
;

158 } 
	tERR_STATE
;

161 
	#ERR_LIB_NONE
 1

	)

162 
	#ERR_LIB_SYS
 2

	)

163 
	#ERR_LIB_BN
 3

	)

164 
	#ERR_LIB_RSA
 4

	)

165 
	#ERR_LIB_DH
 5

	)

166 
	#ERR_LIB_EVP
 6

	)

167 
	#ERR_LIB_BUF
 7

	)

168 
	#ERR_LIB_OBJ
 8

	)

169 
	#ERR_LIB_PEM
 9

	)

170 
	#ERR_LIB_DSA
 10

	)

171 
	#ERR_LIB_X509
 11

	)

173 
	#ERR_LIB_ASN1
 13

	)

174 
	#ERR_LIB_CONF
 14

	)

175 
	#ERR_LIB_CRYPTO
 15

	)

176 
	#ERR_LIB_EC
 16

	)

177 
	#ERR_LIB_SSL
 20

	)

183 
	#ERR_LIB_BIO
 32

	)

184 
	#ERR_LIB_PKCS7
 33

	)

185 
	#ERR_LIB_X509V3
 34

	)

186 
	#ERR_LIB_PKCS12
 35

	)

187 
	#ERR_LIB_RAND
 36

	)

188 
	#ERR_LIB_DSO
 37

	)

189 
	#ERR_LIB_ENGINE
 38

	)

190 
	#ERR_LIB_OCSP
 39

	)

191 
	#ERR_LIB_UI
 40

	)

192 
	#ERR_LIB_COMP
 41

	)

193 
	#ERR_LIB_ECDSA
 42

	)

194 
	#ERR_LIB_ECDH
 43

	)

195 
	#ERR_LIB_STORE
 44

	)

196 
	#ERR_LIB_FIPS
 45

	)

197 
	#ERR_LIB_CMS
 46

	)

198 
	#ERR_LIB_TS
 47

	)

199 
	#ERR_LIB_HMAC
 48

	)

200 
	#ERR_LIB_JPAKE
 49

	)

202 
	#ERR_LIB_USER
 128

	)

204 
	#SYSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SYS
,(f),‘),
__FILE__
,
__LINE__
)

	)

205 
	#BNîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BN
,(f),‘),
__FILE__
,
__LINE__
)

	)

206 
	#RSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

207 
	#DHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DH
,(f),‘),
__FILE__
,
__LINE__
)

	)

208 
	#EVPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EVP
,(f),‘),
__FILE__
,
__LINE__
)

	)

209 
	#BUFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BUF
,(f),‘),
__FILE__
,
__LINE__
)

	)

210 
	#OBJîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OBJ
,(f),‘),
__FILE__
,
__LINE__
)

	)

211 
	#PEMîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PEM
,(f),‘),
__FILE__
,
__LINE__
)

	)

212 
	#DSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

213 
	#X509îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509
,(f),‘),
__FILE__
,
__LINE__
)

	)

214 
	#ASN1îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ASN1
,(f),‘),
__FILE__
,
__LINE__
)

	)

215 
	#CONFîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CONF
,(f),‘),
__FILE__
,
__LINE__
)

	)

216 
	#CRYPTOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CRYPTO
,(f),‘),
__FILE__
,
__LINE__
)

	)

217 
	#ECîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_EC
,(f),‘),
__FILE__
,
__LINE__
)

	)

218 
	#SSLîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_SSL
,(f),‘),
__FILE__
,
__LINE__
)

	)

219 
	#BIOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_BIO
,(f),‘),
__FILE__
,
__LINE__
)

	)

220 
	#PKCS7îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS7
,(f),‘),
__FILE__
,
__LINE__
)

	)

221 
	#X509V3îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_X509V3
,(f),‘),
__FILE__
,
__LINE__
)

	)

222 
	#PKCS12îr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_PKCS12
,(f),‘),
__FILE__
,
__LINE__
)

	)

223 
	#RANDîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_RAND
,(f),‘),
__FILE__
,
__LINE__
)

	)

224 
	#DSOîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_DSO
,(f),‘),
__FILE__
,
__LINE__
)

	)

225 
	#ENGINEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ENGINE
,(f),‘),
__FILE__
,
__LINE__
)

	)

226 
	#OCSPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_OCSP
,(f),‘),
__FILE__
,
__LINE__
)

	)

227 
	#UIîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_UI
,(f),‘),
__FILE__
,
__LINE__
)

	)

228 
	#COMPîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_COMP
,(f),‘),
__FILE__
,
__LINE__
)

	)

229 
	#ECDSAîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDSA
,(f),‘),
__FILE__
,
__LINE__
)

	)

230 
	#ECDHîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_ECDH
,(f),‘),
__FILE__
,
__LINE__
)

	)

231 
	#STOREîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_STORE
,(f),‘),
__FILE__
,
__LINE__
)

	)

232 
	#FIPSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_FIPS
,(f),‘),
__FILE__
,
__LINE__
)

	)

233 
	#CMSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_CMS
,(f),‘),
__FILE__
,
__LINE__
)

	)

234 
	#TSîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_TS
,(f),‘),
__FILE__
,
__LINE__
)

	)

235 
	#HMACîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_HMAC
,(f),‘),
__FILE__
,
__LINE__
)

	)

236 
	#JPAKEîr
(
f
,
r
Ë
	`ERR_PUT_îr‹
(
ERR_LIB_JPAKE
,(f),‘),
__FILE__
,
__LINE__
)

	)

240 
	#ERR_PACK
(
l
,
f
,
r
) ((((()l)&0xffL)*0x1000000)| \

241 (((()
f
)&0xfffL)*0x1000)| \

242 (((()
r
)&0xfffL)))

	)

243 
	#ERR_GET_LIB
(
l
Ë()((((Ó)>>24L)&0xffL)

	)

244 
	#ERR_GET_FUNC
(
l
Ë()((((Ó)>>12L)&0xfffL)

	)

245 
	#ERR_GET_REASON
(
l
Ë()(÷)&0xfffL)

	)

246 
	#ERR_FATAL_ERROR
(
l
Ë()(÷)&
ERR_R_FATAL
)

	)

250 
	#SYS_F_FOPEN
 1

	)

251 
	#SYS_F_CONNECT
 2

	)

252 
	#SYS_F_GETSERVBYNAME
 3

	)

253 
	#SYS_F_SOCKET
 4

	)

254 
	#SYS_F_IOCTLSOCKET
 5

	)

255 
	#SYS_F_BIND
 6

	)

256 
	#SYS_F_LISTEN
 7

	)

257 
	#SYS_F_ACCEPT
 8

	)

258 
	#SYS_F_WSASTARTUP
 9

	)

259 
	#SYS_F_OPENDIR
 10

	)

260 
	#SYS_F_FREAD
 11

	)

264 
	#ERR_R_SYS_LIB
 
ERR_LIB_SYS


	)

265 
	#ERR_R_BN_LIB
 
ERR_LIB_BN


	)

266 
	#ERR_R_RSA_LIB
 
ERR_LIB_RSA


	)

267 
	#ERR_R_DH_LIB
 
ERR_LIB_DH


	)

268 
	#ERR_R_EVP_LIB
 
ERR_LIB_EVP


	)

269 
	#ERR_R_BUF_LIB
 
ERR_LIB_BUF


	)

270 
	#ERR_R_OBJ_LIB
 
ERR_LIB_OBJ


	)

271 
	#ERR_R_PEM_LIB
 
ERR_LIB_PEM


	)

272 
	#ERR_R_DSA_LIB
 
ERR_LIB_DSA


	)

273 
	#ERR_R_X509_LIB
 
ERR_LIB_X509


	)

274 
	#ERR_R_ASN1_LIB
 
ERR_LIB_ASN1


	)

275 
	#ERR_R_CONF_LIB
 
ERR_LIB_CONF


	)

276 
	#ERR_R_CRYPTO_LIB
 
ERR_LIB_CRYPTO


	)

277 
	#ERR_R_EC_LIB
 
ERR_LIB_EC


	)

278 
	#ERR_R_SSL_LIB
 
ERR_LIB_SSL


	)

279 
	#ERR_R_BIO_LIB
 
ERR_LIB_BIO


	)

280 
	#ERR_R_PKCS7_LIB
 
ERR_LIB_PKCS7


	)

281 
	#ERR_R_X509V3_LIB
 
ERR_LIB_X509V3


	)

282 
	#ERR_R_PKCS12_LIB
 
ERR_LIB_PKCS12


	)

283 
	#ERR_R_RAND_LIB
 
ERR_LIB_RAND


	)

284 
	#ERR_R_DSO_LIB
 
ERR_LIB_DSO


	)

285 
	#ERR_R_ENGINE_LIB
 
ERR_LIB_ENGINE


	)

286 
	#ERR_R_OCSP_LIB
 
ERR_LIB_OCSP


	)

287 
	#ERR_R_UI_LIB
 
ERR_LIB_UI


	)

288 
	#ERR_R_COMP_LIB
 
ERR_LIB_COMP


	)

289 
	#ERR_R_ECDSA_LIB
 
ERR_LIB_ECDSA


	)

290 
	#ERR_R_ECDH_LIB
 
ERR_LIB_ECDH


	)

291 
	#ERR_R_STORE_LIB
 
ERR_LIB_STORE


	)

292 
	#ERR_R_TS_LIB
 
ERR_LIB_TS


	)

294 
	#ERR_R_NESTED_ASN1_ERROR
 58

	)

295 
	#ERR_R_BAD_ASN1_OBJECT_HEADER
 59

	)

296 
	#ERR_R_BAD_GET_ASN1_OBJECT_CALL
 60

	)

297 
	#ERR_R_EXPECTING_AN_ASN1_SEQUENCE
 61

	)

298 
	#ERR_R_ASN1_LENGTH_MISMATCH
 62

	)

299 
	#ERR_R_MISSING_ASN1_EOS
 63

	)

302 
	#ERR_R_FATAL
 64

	)

303 
	#ERR_R_MALLOC_FAILURE
 (1|
ERR_R_FATAL
)

	)

304 
	#ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED
 (2|
ERR_R_FATAL
)

	)

305 
	#ERR_R_PASSED_NULL_PARAMETER
 (3|
ERR_R_FATAL
)

	)

306 
	#ERR_R_INTERNAL_ERROR
 (4|
ERR_R_FATAL
)

	)

307 
	#ERR_R_DISABLED
 (5|
ERR_R_FATAL
)

	)

313 
	sERR_°rög_d©a_°


315 
îr‹
;

316 c⁄° *
°rög
;

317 } 
	tERR_STRING_DATA
;

319 
ERR_put_îr‹
(
lib
, 
func
,
ªas⁄
,c⁄° *
fûe
,
löe
);

320 
ERR_£t_îr‹_d©a
(*
d©a
,
Êags
);

322 
ERR_gë_îr‹
();

323 
ERR_gë_îr‹_löe
(c⁄° **
fûe
,*
löe
);

324 
ERR_gë_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

325 c⁄° **
d©a
, *
Êags
);

326 
ERR_≥ek_îr‹
();

327 
ERR_≥ek_îr‹_löe
(c⁄° **
fûe
,*
löe
);

328 
ERR_≥ek_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

329 c⁄° **
d©a
,*
Êags
);

330 
ERR_≥ek_œ°_îr‹
();

331 
ERR_≥ek_œ°_îr‹_löe
(c⁄° **
fûe
,*
löe
);

332 
ERR_≥ek_œ°_îr‹_löe_d©a
(c⁄° **
fûe
,*
löe
,

333 c⁄° **
d©a
,*
Êags
);

334 
ERR_˛ór_îr‹
();

335 *
ERR_îr‹_°rög
(
e
,*
buf
);

336 
ERR_îr‹_°rög_n
(
e
, *
buf
, 
size_t
 
Àn
);

337 c⁄° *
ERR_lib_îr‹_°rög
(
e
);

338 c⁄° *
ERR_func_îr‹_°rög
(
e
);

339 c⁄° *
ERR_ªas⁄_îr‹_°rög
(
e
);

340 
ERR_¥öt_îr‹s_cb
((*
cb
)(c⁄° *
°r
, 
size_t
 
Àn
, *
u
),

341 *
u
);

342 #i‚de‡
OPENSSL_NO_FP_API


343 
ERR_¥öt_îr‹s_Â
(
FILE
 *
Â
);

345 #i‚de‡
OPENSSL_NO_BIO


346 
ERR_¥öt_îr‹s
(
BIO
 *
bp
);

348 
ERR_add_îr‹_d©a
(
num
, ...);

349 
ERR_add_îr‹_vd©a
(
num
, 
va_li°
 
¨gs
);

350 
ERR_lﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

351 
ERR_u∆ﬂd_°rögs
(
lib
,
ERR_STRING_DATA
 
°r
[]);

352 
ERR_lﬂd_ERR_°rögs
();

353 
ERR_lﬂd_¸y±o_°rögs
();

354 
ERR_‰ì_°rögs
();

356 
ERR_ªmove_thªad_°©e
(c⁄° 
CRYPTO_THREADID
 *
tid
);

357 #i‚de‡
OPENSSL_NO_DEPRECATED


358 
ERR_ªmove_°©e
(
pid
);

360 
ERR_STATE
 *
ERR_gë_°©e
();

362 #i‚de‡
OPENSSL_NO_LHASH


363 
LHASH_OF
(
ERR_STRING_DATA
Ë*
ERR_gë_°rög_èbÀ
();

364 
LHASH_OF
(
ERR_STATE
Ë*
ERR_gë_îr_°©e_èbÀ
();

365 
ERR_ªÀa£_îr_°©e_èbÀ
(
LHASH_OF
(
ERR_STATE
Ë**
hash
);

368 
ERR_gë_√xt_îr‹_libøry
();

370 
ERR_£t_m¨k
();

371 
ERR_p›_to_m¨k
();

377 c⁄° 
ERR_FNS
 *
ERR_gë_im∂emíèti⁄
();

380 
ERR_£t_im∂emíèti⁄
(c⁄° 
ERR_FNS
 *
‚s
);

382 #ifdef 
__˝lu•lus


	@/usr/include/openssl/evp.h

59 #i‚de‡
HEADER_ENVELOPE_H


60 
	#HEADER_ENVELOPE_H


	)

62 #ifde‡
OPENSSL_ALGORITHM_DEFINES


63 
	~<›ís¶/›ís¶c⁄f.h
>

65 
	#OPENSSL_ALGORITHM_DEFINES


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

67 #unde‡
OPENSSL_ALGORITHM_DEFINES


70 
	~<›ís¶/os¶_typ.h
>

72 
	~<›ís¶/symhacks.h
>

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

85 
	#EVP_MAX_MD_SIZE
 64

	)

86 
	#EVP_MAX_KEY_LENGTH
 64

	)

87 
	#EVP_MAX_IV_LENGTH
 16

	)

88 
	#EVP_MAX_BLOCK_LENGTH
 32

	)

90 
	#PKCS5_SALT_LEN
 8

	)

92 
	#PKCS5_DEFAULT_ITER
 2048

	)

94 
	~<›ís¶/obje˘s.h
>

96 
	#EVP_PK_RSA
 0x0001

	)

97 
	#EVP_PK_DSA
 0x0002

	)

98 
	#EVP_PK_DH
 0x0004

	)

99 
	#EVP_PK_EC
 0x0008

	)

100 
	#EVP_PKT_SIGN
 0x0010

	)

101 
	#EVP_PKT_ENC
 0x0020

	)

102 
	#EVP_PKT_EXCH
 0x0040

	)

103 
	#EVP_PKS_RSA
 0x0100

	)

104 
	#EVP_PKS_DSA
 0x0200

	)

105 
	#EVP_PKS_EC
 0x0400

	)

106 
	#EVP_PKT_EXP
 0x1000

	)

108 
	#EVP_PKEY_NONE
 
NID_undef


	)

109 
	#EVP_PKEY_RSA
 
NID_rßEn¸y±i⁄


	)

110 
	#EVP_PKEY_RSA2
 
NID_rß


	)

111 
	#EVP_PKEY_DSA
 
NID_dß


	)

112 
	#EVP_PKEY_DSA1
 
NID_dß_2


	)

113 
	#EVP_PKEY_DSA2
 
NID_dßWôhSHA


	)

114 
	#EVP_PKEY_DSA3
 
NID_dßWôhSHA1


	)

115 
	#EVP_PKEY_DSA4
 
NID_dßWôhSHA1_2


	)

116 
	#EVP_PKEY_DH
 
NID_dhKeyAgªemít


	)

117 
	#EVP_PKEY_EC
 
NID_X9_62_id_ecPublicKey


	)

118 
	#EVP_PKEY_HMAC
 
NID_hmac


	)

119 
	#EVP_PKEY_CMAC
 
NID_cmac


	)

121 #ifdef 
__˝lu•lus


128 
	sevp_pkey_°


130 
ty≥
;

131 
ßve_ty≥
;

132 
ª„ªn˚s
;

133 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
;

134 
ENGINE
 *
ígöe
;

136 *
±r
;

137 #i‚de‡
OPENSSL_NO_RSA


138 
rß_°
 *
rß
;

140 #i‚de‡
OPENSSL_NO_DSA


141 
dß_°
 *
dß
;

143 #i‚de‡
OPENSSL_NO_DH


144 
dh_°
 *
dh
;

146 #i‚de‡
OPENSSL_NO_EC


147 
ec_key_°
 *
ec
;

149 } 
pkey
;

150 
ßve_∑ømëîs
;

151 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

154 
	#EVP_PKEY_MO_SIGN
 0x0001

	)

155 
	#EVP_PKEY_MO_VERIFY
 0x0002

	)

156 
	#EVP_PKEY_MO_ENCRYPT
 0x0004

	)

157 
	#EVP_PKEY_MO_DECRYPT
 0x0008

	)

159 #i‚de‡
EVP_MD


160 
	sív_md_°


162 
ty≥
;

163 
pkey_ty≥
;

164 
md_size
;

165 
Êags
;

166 (*
öô
)(
EVP_MD_CTX
 *
˘x
);

167 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

168 (*
föÆ
)(
EVP_MD_CTX
 *
˘x
,*
md
);

169 (*
c›y
)(
EVP_MD_CTX
 *
to
,c⁄° EVP_MD_CTX *
‰om
);

170 (*
˛ónup
)(
EVP_MD_CTX
 *
˘x
);

173 (*
sign
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

174 *
sigªt
, *
sigÀn
, *
key
);

175 (*
vîify
)(
ty≥
, c⁄° *
m
, 
m_Àngth
,

176 c⁄° *
sigbuf
, 
sigÀn
,

177 *
key
);

178 
ªquúed_pkey_ty≥
[5];

179 
block_size
;

180 
˘x_size
;

182 (*
md_˘æ
)(
EVP_MD_CTX
 *
˘x
, 
cmd
, 
p1
, *
p2
);

185 
	tevp_sign_mëhod
(
	tty≥
,c⁄° *
	tm
,

186 
	tm_Àngth
,*
	tsigªt
,

187 *
	tsigÀn
, *
	tkey
);

188 
	tevp_vîify_mëhod
(
	tty≥
,c⁄° *
	tm
,

189 
	tm_Àngth
,c⁄° *
	tsigbuf
,

190 
	tsigÀn
, *
	tkey
);

192 
	#EVP_MD_FLAG_ONESHOT
 0x0001

	)

195 
	#EVP_MD_FLAG_PKEY_DIGEST
 0x0002

	)

202 
	#EVP_MD_FLAG_PKEY_METHOD_SIGNATURE
 0x0004

	)

206 
	#EVP_MD_FLAG_DIGALGID_MASK
 0x0018

	)

210 
	#EVP_MD_FLAG_DIGALGID_NULL
 0x0000

	)

214 
	#EVP_MD_FLAG_DIGALGID_ABSENT
 0x0008

	)

218 
	#EVP_MD_FLAG_DIGALGID_CUSTOM
 0x0018

	)

220 
	#EVP_MD_FLAG_FIPS
 0x0400

	)

224 
	#EVP_MD_CTRL_DIGALGID
 0x1

	)

225 
	#EVP_MD_CTRL_MICALG
 0x2

	)

229 
	#EVP_MD_CTRL_ALG_CTRL
 0x1000

	)

231 
	#EVP_PKEY_NULL_mëhod
 
NULL
,NULL,{0,0,0,0}

	)

233 #i‚de‡
OPENSSL_NO_DSA


234 
	#EVP_PKEY_DSA_mëhod
 (
evp_sign_mëhod
 *)
DSA_sign
, \

235 (
evp_vîify_mëhod
 *)
DSA_vîify
, \

236 {
EVP_PKEY_DSA
,
EVP_PKEY_DSA2
,
EVP_PKEY_DSA3
, \

237 
EVP_PKEY_DSA4
,0}

	)

239 
	#EVP_PKEY_DSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

242 #i‚de‡
OPENSSL_NO_ECDSA


243 
	#EVP_PKEY_ECDSA_mëhod
 (
evp_sign_mëhod
 *)
ECDSA_sign
, \

244 (
evp_vîify_mëhod
 *)
ECDSA_vîify
, \

245 {
EVP_PKEY_EC
,0,0,0}

	)

247 
	#EVP_PKEY_ECDSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

250 #i‚de‡
OPENSSL_NO_RSA


251 
	#EVP_PKEY_RSA_mëhod
 (
evp_sign_mëhod
 *)
RSA_sign
, \

252 (
evp_vîify_mëhod
 *)
RSA_vîify
, \

253 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

254 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 \

255 (
evp_sign_mëhod
 *)
RSA_sign_ASN1_OCTET_STRING
, \

256 (
evp_vîify_mëhod
 *)
RSA_vîify_ASN1_OCTET_STRING
, \

257 {
EVP_PKEY_RSA
,
EVP_PKEY_RSA2
,0,0}

	)

259 
	#EVP_PKEY_RSA_mëhod
 
EVP_PKEY_NULL_mëhod


	)

260 
	#EVP_PKEY_RSA_ASN1_OCTET_STRING_mëhod
 
EVP_PKEY_NULL_mëhod


	)

265 
	sív_md_˘x_°


267 c⁄° 
EVP_MD
 *
dige°
;

268 
ENGINE
 *
ígöe
;

269 
Êags
;

270 *
md_d©a
;

272 
EVP_PKEY_CTX
 *
p˘x
;

274 (*
upd©e
)(
EVP_MD_CTX
 *
˘x
,c⁄° *
d©a
,
size_t
 
cou¡
);

279 
	#EVP_MD_CTX_FLAG_ONESHOT
 0x0001

	)

281 
	#EVP_MD_CTX_FLAG_CLEANED
 0x0002

	)

283 
	#EVP_MD_CTX_FLAG_REUSE
 0x0004

	)

289 
	#EVP_MD_CTX_FLAG_NON_FIPS_ALLOW
 0x0008

	)

296 
	#EVP_MD_CTX_FLAG_PAD_MASK
 0xF0

	)

297 
	#EVP_MD_CTX_FLAG_PAD_PKCS1
 0x00

	)

298 
	#EVP_MD_CTX_FLAG_PAD_X931
 0x10

	)

299 
	#EVP_MD_CTX_FLAG_PAD_PSS
 0x20

	)

301 
	#EVP_MD_CTX_FLAG_NO_INIT
 0x0100

	)

303 
	sevp_cùhî_°


305 
nid
;

306 
block_size
;

307 
key_Àn
;

308 
iv_Àn
;

309 
Êags
;

310 (*
öô
)(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
key
,

311 c⁄° *
iv
, 
íc
);

312 (*
do_cùhî
)(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

313 c⁄° *
ö
, 
size_t
 
öl
);

314 (*
˛ónup
)(
EVP_CIPHER_CTX
 *);

315 
˘x_size
;

316 (*
£t_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

317 (*
gë_a¢1_∑ømëîs
)(
EVP_CIPHER_CTX
 *, 
ASN1_TYPE
 *);

318 (*
˘æ
)(
EVP_CIPHER_CTX
 *, 
ty≥
, 
¨g
, *
±r
);

319 *
≠p_d©a
;

326 
	#EVP_CIPH_STREAM_CIPHER
 0x0

	)

327 
	#EVP_CIPH_ECB_MODE
 0x1

	)

328 
	#EVP_CIPH_CBC_MODE
 0x2

	)

329 
	#EVP_CIPH_CFB_MODE
 0x3

	)

330 
	#EVP_CIPH_OFB_MODE
 0x4

	)

331 
	#EVP_CIPH_CTR_MODE
 0x5

	)

332 
	#EVP_CIPH_GCM_MODE
 0x6

	)

333 
	#EVP_CIPH_CCM_MODE
 0x7

	)

334 
	#EVP_CIPH_XTS_MODE
 0x10001

	)

335 
	#EVP_CIPH_MODE
 0xF0007

	)

337 
	#EVP_CIPH_VARIABLE_LENGTH
 0x8

	)

339 
	#EVP_CIPH_CUSTOM_IV
 0x10

	)

341 
	#EVP_CIPH_ALWAYS_CALL_INIT
 0x20

	)

343 
	#EVP_CIPH_CTRL_INIT
 0x40

	)

345 
	#EVP_CIPH_CUSTOM_KEY_LENGTH
 0x80

	)

347 
	#EVP_CIPH_NO_PADDING
 0x100

	)

349 
	#EVP_CIPH_RAND_KEY
 0x200

	)

351 
	#EVP_CIPH_CUSTOM_COPY
 0x400

	)

353 
	#EVP_CIPH_FLAG_DEFAULT_ASN1
 0x1000

	)

355 
	#EVP_CIPH_FLAG_LENGTH_BITS
 0x2000

	)

357 
	#EVP_CIPH_FLAG_FIPS
 0x4000

	)

359 
	#EVP_CIPH_FLAG_NON_FIPS_ALLOW
 0x8000

	)

363 
	#EVP_CIPH_FLAG_CUSTOM_CIPHER
 0x100000

	)

364 
	#EVP_CIPH_FLAG_AEAD_CIPHER
 0x200000

	)

368 
	#EVP_CTRL_INIT
 0x0

	)

369 
	#EVP_CTRL_SET_KEY_LENGTH
 0x1

	)

370 
	#EVP_CTRL_GET_RC2_KEY_BITS
 0x2

	)

371 
	#EVP_CTRL_SET_RC2_KEY_BITS
 0x3

	)

372 
	#EVP_CTRL_GET_RC5_ROUNDS
 0x4

	)

373 
	#EVP_CTRL_SET_RC5_ROUNDS
 0x5

	)

374 
	#EVP_CTRL_RAND_KEY
 0x6

	)

375 
	#EVP_CTRL_PBE_PRF_NID
 0x7

	)

376 
	#EVP_CTRL_COPY
 0x8

	)

377 
	#EVP_CTRL_GCM_SET_IVLEN
 0x9

	)

378 
	#EVP_CTRL_GCM_GET_TAG
 0x10

	)

379 
	#EVP_CTRL_GCM_SET_TAG
 0x11

	)

380 
	#EVP_CTRL_GCM_SET_IV_FIXED
 0x12

	)

381 
	#EVP_CTRL_GCM_IV_GEN
 0x13

	)

382 
	#EVP_CTRL_CCM_SET_IVLEN
 
EVP_CTRL_GCM_SET_IVLEN


	)

383 
	#EVP_CTRL_CCM_GET_TAG
 
EVP_CTRL_GCM_GET_TAG


	)

384 
	#EVP_CTRL_CCM_SET_TAG
 
EVP_CTRL_GCM_SET_TAG


	)

385 
	#EVP_CTRL_CCM_SET_L
 0x14

	)

386 
	#EVP_CTRL_CCM_SET_MSGLEN
 0x15

	)

391 
	#EVP_CTRL_AEAD_TLS1_AAD
 0x16

	)

393 
	#EVP_CTRL_AEAD_SET_MAC_KEY
 0x17

	)

395 
	#EVP_CTRL_GCM_SET_IV_INV
 0x18

	)

399 
	#EVP_GCM_TLS_FIXED_IV_LEN
 4

	)

401 
	#EVP_GCM_TLS_EXPLICIT_IV_LEN
 8

	)

403 
	#EVP_GCM_TLS_TAG_LEN
 16

	)

406 
	sevp_cùhî_öfo_°


408 c⁄° 
EVP_CIPHER
 *
cùhî
;

409 
iv
[
EVP_MAX_IV_LENGTH
];

410 } 
	tEVP_CIPHER_INFO
;

412 
	sevp_cùhî_˘x_°


414 c⁄° 
EVP_CIPHER
 *
cùhî
;

415 
ENGINE
 *
ígöe
;

416 
í¸y±
;

417 
buf_Àn
;

419 
oiv
[
EVP_MAX_IV_LENGTH
];

420 
iv
[
EVP_MAX_IV_LENGTH
];

421 
buf
[
EVP_MAX_BLOCK_LENGTH
];

422 
num
;

424 *
≠p_d©a
;

425 
key_Àn
;

426 
Êags
;

427 *
cùhî_d©a
;

428 
föÆ_u£d
;

429 
block_mask
;

430 
föÆ
[
EVP_MAX_BLOCK_LENGTH
];

433 
	sevp_Encode_Ctx_°


435 
num
;

436 
Àngth
;

441 
íc_d©a
[80];

442 
löe_num
;

443 
ex≥˘_∆
;

444 } 
	tEVP_ENCODE_CTX
;

447 (
EVP_PBE_KEYGEN
)(
	tEVP_CIPHER_CTX
 *
	t˘x
, c⁄° *
	t∑ss
, 
	t∑s¶í
,

448 
	tASN1_TYPE
 *
	t∑øm
, c⁄° 
	tEVP_CIPHER
 *
	tcùhî
,

449 c⁄° 
	tEVP_MD
 *
	tmd
, 
	tí_de
);

451 #i‚de‡
OPENSSL_NO_RSA


452 
	#EVP_PKEY_assign_RSA
(
pkey
,
rß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_RSA
,\

453 (*)(
rß
))

	)

456 #i‚de‡
OPENSSL_NO_DSA


457 
	#EVP_PKEY_assign_DSA
(
pkey
,
dß
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DSA
,\

458 (*)(
dß
))

	)

461 #i‚de‡
OPENSSL_NO_DH


462 
	#EVP_PKEY_assign_DH
(
pkey
,
dh
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_DH
,\

463 (*)(
dh
))

	)

466 #i‚de‡
OPENSSL_NO_EC


467 
	#EVP_PKEY_assign_EC_KEY
(
pkey
,
eckey
Ë
	`EVP_PKEY_assign
(’key),
EVP_PKEY_EC
,\

468 (*)(
eckey
))

	)

472 
	#EVP_gë_dige°bynid
(
a
Ë
	`EVP_gë_dige°by«me
(
	`OBJ_nid2¢
◊))

	)

473 
	#EVP_gë_dige°byobj
(
a
Ë
	`EVP_gë_dige°bynid
(
	`OBJ_obj2nid
◊))

	)

474 
	#EVP_gë_cùhîbynid
(
a
Ë
	`EVP_gë_cùhîby«me
(
	`OBJ_nid2¢
◊))

	)

475 
	#EVP_gë_cùhîbyobj
(
a
Ë
	`EVP_gë_cùhîbynid
(
	`OBJ_obj2nid
◊))

	)

477 
EVP_MD_ty≥
(c⁄° 
EVP_MD
 *
md
);

478 
	#EVP_MD_nid
(
e
Ë
	`EVP_MD_ty≥
”)

	)

479 
	#EVP_MD_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_MD_nid
”))

	)

480 
EVP_MD_pkey_ty≥
(c⁄° 
EVP_MD
 *
md
);

481 
EVP_MD_size
(c⁄° 
EVP_MD
 *
md
);

482 
EVP_MD_block_size
(c⁄° 
EVP_MD
 *
md
);

483 
EVP_MD_Êags
(c⁄° 
EVP_MD
 *
md
);

485 c⁄° 
EVP_MD
 *
EVP_MD_CTX_md
(c⁄° 
EVP_MD_CTX
 *
˘x
);

486 
	#EVP_MD_CTX_size
(
e
Ë
	`EVP_MD_size
(
	`EVP_MD_CTX_md
”))

	)

487 
	#EVP_MD_CTX_block_size
(
e
Ë
	`EVP_MD_block_size
(
	`EVP_MD_CTX_md
”))

	)

488 
	#EVP_MD_CTX_ty≥
(
e
Ë
	`EVP_MD_ty≥
(
	`EVP_MD_CTX_md
”))

	)

490 
EVP_CIPHER_nid
(c⁄° 
EVP_CIPHER
 *
cùhî
);

491 
	#EVP_CIPHER_«me
(
e
Ë
	`OBJ_nid2¢
(
	`EVP_CIPHER_nid
”))

	)

492 
EVP_CIPHER_block_size
(c⁄° 
EVP_CIPHER
 *
cùhî
);

493 
EVP_CIPHER_key_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

494 
EVP_CIPHER_iv_Àngth
(c⁄° 
EVP_CIPHER
 *
cùhî
);

495 
EVP_CIPHER_Êags
(c⁄° 
EVP_CIPHER
 *
cùhî
);

496 
	#EVP_CIPHER_mode
(
e
Ë(
	`EVP_CIPHER_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

498 c⁄° 
EVP_CIPHER
 * 
EVP_CIPHER_CTX_cùhî
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

499 
EVP_CIPHER_CTX_nid
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

500 
EVP_CIPHER_CTX_block_size
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

501 
EVP_CIPHER_CTX_key_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

502 
EVP_CIPHER_CTX_iv_Àngth
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

503 
EVP_CIPHER_CTX_c›y
(
EVP_CIPHER_CTX
 *
out
, c⁄° EVP_CIPHER_CTX *
ö
);

504 * 
EVP_CIPHER_CTX_gë_≠p_d©a
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

505 
EVP_CIPHER_CTX_£t_≠p_d©a
(
EVP_CIPHER_CTX
 *
˘x
, *
d©a
);

506 
	#EVP_CIPHER_CTX_ty≥
(
c
Ë
	`EVP_CIPHER_ty≥
(
	`EVP_CIPHER_CTX_cùhî
(c))

	)

507 
EVP_CIPHER_CTX_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
);

508 
	#EVP_CIPHER_CTX_mode
(
e
Ë(
	`EVP_CIPHER_CTX_Êags
”Ë& 
EVP_CIPH_MODE
)

	)

510 
	#EVP_ENCODE_LENGTH
(
l
Ë((÷+2)/3*4)+÷/48+1)*2+80)

	)

511 
	#EVP_DECODE_LENGTH
(
l
Ë(÷+3)/4*3+80)

	)

513 
	#EVP_SignInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

514 
	#EVP_SignInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

515 
	#EVP_SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

516 
	#EVP_VîifyInô_ex
(
a
,
b
,
c
Ë
	`EVP_Dige°Inô_ex
◊,b,c)

	)

517 
	#EVP_VîifyInô
(
a
,
b
Ë
	`EVP_Dige°Inô
◊,b)

	)

518 
	#EVP_VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

519 
	#EVP_O≥nUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_De¸y±Upd©e
◊,b,c,d,e)

	)

520 
	#EVP_SólUpd©e
(
a
,
b
,
c
,
d
,
e
Ë
	`EVP_En¸y±Upd©e
◊,b,c,d,e)

	)

521 
	#EVP_Dige°SignUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

522 
	#EVP_Dige°VîifyUpd©e
(
a
,
b
,
c
Ë
	`EVP_Dige°Upd©e
◊,b,c)

	)

524 #ifde‡
CONST_STRICT


525 
BIO_£t_md
(
BIO
 *,c⁄° 
EVP_MD
 *
md
);

527 
	#BIO_£t_md
(
b
,
md
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD
,0,(*)md)

	)

529 
	#BIO_gë_md
(
b
,
mdp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD
,0,(*)mdp)

	)

530 
	#BIO_gë_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_GET_MD_CTX
,0,(*)md˝)

	)

531 
	#BIO_£t_md_˘x
(
b
,
md˝
Ë
	`BIO_˘æ
(b,
BIO_C_SET_MD_CTX
,0,(*)md˝)

	)

532 
	#BIO_gë_cùhî_°©us
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_STATUS
,0,
NULL
)

	)

533 
	#BIO_gë_cùhî_˘x
(
b
,
c_µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_CIPHER_CTX
,0,(*)c_µ)

	)

535 
EVP_Cùhî
(
EVP_CIPHER_CTX
 *
c
,

536 *
out
,

537 c⁄° *
ö
,

538 
öl
);

540 
	#EVP_add_cùhî_Æüs
(
n
,
Æüs
) \

541 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

542 
	#EVP_add_dige°_Æüs
(
n
,
Æüs
) \

543 
	`OBJ_NAME_add
((
Æüs
),
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
,(
n
))

	)

544 
	#EVP_dñëe_cùhî_Æüs
(
Æüs
) \

545 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_CIPHER_METH
|
OBJ_NAME_ALIAS
);

	)

546 
	#EVP_dñëe_dige°_Æüs
(
Æüs
) \

547 
	`OBJ_NAME_ªmove
(
Æüs
,
OBJ_NAME_TYPE_MD_METH
|
OBJ_NAME_ALIAS
);

	)

549 
EVP_MD_CTX_öô
(
EVP_MD_CTX
 *
˘x
);

550 
EVP_MD_CTX_˛ónup
(
EVP_MD_CTX
 *
˘x
);

551 
EVP_MD_CTX
 *
EVP_MD_CTX_¸óã
();

552 
EVP_MD_CTX_de°roy
(
EVP_MD_CTX
 *
˘x
);

553 
EVP_MD_CTX_c›y_ex
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

554 
EVP_MD_CTX_£t_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

555 
EVP_MD_CTX_˛ór_Êags
(
EVP_MD_CTX
 *
˘x
, 
Êags
);

556 
EVP_MD_CTX_ã°_Êags
(c⁄° 
EVP_MD_CTX
 *
˘x
,
Êags
);

557 
EVP_Dige°Inô_ex
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

558 
EVP_Dige°Upd©e
(
EVP_MD_CTX
 *
˘x
,c⁄° *
d
,

559 
size_t
 
˙t
);

560 
EVP_Dige°FöÆ_ex
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

561 
EVP_Dige°
(c⁄° *
d©a
, 
size_t
 
cou¡
,

562 *
md
, *
size
, c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
im∂
);

564 
EVP_MD_CTX_c›y
(
EVP_MD_CTX
 *
out
,c⁄° EVP_MD_CTX *
ö
);

565 
EVP_Dige°Inô
(
EVP_MD_CTX
 *
˘x
, c⁄° 
EVP_MD
 *
ty≥
);

566 
EVP_Dige°FöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
);

568 
EVP_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

569 
EVP_ªad_pw_°rög_mö
(*
buf
,
möÀn
,
maxÀn
,c⁄° *
¥om±
,
vîify
);

570 
EVP_£t_pw_¥om±
(c⁄° *
¥om±
);

571 * 
EVP_gë_pw_¥om±
();

573 
EVP_ByãsToKey
(c⁄° 
EVP_CIPHER
 *
ty≥
,c⁄° 
EVP_MD
 *
md
,

574 c⁄° *
ß…
, c⁄° *
d©a
,

575 
d©Æ
, 
cou¡
, *
key
,*
iv
);

577 
EVP_CIPHER_CTX_£t_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

578 
EVP_CIPHER_CTX_˛ór_Êags
(
EVP_CIPHER_CTX
 *
˘x
, 
Êags
);

579 
EVP_CIPHER_CTX_ã°_Êags
(c⁄° 
EVP_CIPHER_CTX
 *
˘x
,
Êags
);

581 
EVP_En¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

582 c⁄° *
key
, c⁄° *
iv
);

583 
EVP_En¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

584 c⁄° *
key
, c⁄° *
iv
);

585 
EVP_En¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

586 *
oué
, c⁄° *
ö
, 
öl
);

587 
EVP_En¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

588 
EVP_En¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

590 
EVP_De¸y±Inô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

591 c⁄° *
key
, c⁄° *
iv
);

592 
EVP_De¸y±Inô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

593 c⁄° *
key
, c⁄° *
iv
);

594 
EVP_De¸y±Upd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

595 *
oué
, c⁄° *
ö
, 
öl
);

596 
EVP_De¸y±FöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

597 
EVP_De¸y±FöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

599 
EVP_CùhîInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
,

600 c⁄° *
key
,c⁄° *
iv
,

601 
íc
);

602 
EVP_CùhîInô_ex
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
cùhî
, 
ENGINE
 *
im∂
,

603 c⁄° *
key
,c⁄° *
iv
,

604 
íc
);

605 
EVP_CùhîUpd©e
(
EVP_CIPHER_CTX
 *
˘x
, *
out
,

606 *
oué
, c⁄° *
ö
, 
öl
);

607 
EVP_CùhîFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

608 
EVP_CùhîFöÆ_ex
(
EVP_CIPHER_CTX
 *
˘x
, *
outm
, *
oué
);

610 
EVP_SignFöÆ
(
EVP_MD_CTX
 *
˘x
,*
md
,*
s
,

611 
EVP_PKEY
 *
pkey
);

613 
EVP_VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,c⁄° *
sigbuf
,

614 
sigÀn
,
EVP_PKEY
 *
pkey
);

616 
EVP_Dige°SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

617 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

618 
EVP_Dige°SignFöÆ
(
EVP_MD_CTX
 *
˘x
,

619 *
sigªt
, 
size_t
 *
sigÀn
);

621 
EVP_Dige°VîifyInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_PKEY_CTX
 **
p˘x
,

622 c⁄° 
EVP_MD
 *
ty≥
, 
ENGINE
 *
e
, 
EVP_PKEY
 *
pkey
);

623 
EVP_Dige°VîifyFöÆ
(
EVP_MD_CTX
 *
˘x
,

624 *
sig
, 
size_t
 
sigÀn
);

626 
EVP_O≥nInô
(
EVP_CIPHER_CTX
 *
˘x
,c⁄° 
EVP_CIPHER
 *
ty≥
,

627 c⁄° *
ek
, 
ekl
, c⁄° *
iv
,

628 
EVP_PKEY
 *
¥iv
);

629 
EVP_O≥nFöÆ
(
EVP_CIPHER_CTX
 *
˘x
, *
out
, *
oué
);

631 
EVP_SólInô
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° 
EVP_CIPHER
 *
ty≥
,

632 **
ek
, *
ekl
, *
iv
,

633 
EVP_PKEY
 **
pubk
, 
≈ubk
);

634 
EVP_SólFöÆ
(
EVP_CIPHER_CTX
 *
˘x
,*
out
,*
oué
);

636 
EVP_EncodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

637 
EVP_EncodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

638 c⁄° *
ö
,
öl
);

639 
EVP_EncodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
);

640 
EVP_EncodeBlock
(*
t
, c⁄° *
f
, 
n
);

642 
EVP_DecodeInô
(
EVP_ENCODE_CTX
 *
˘x
);

643 
EVP_DecodeUpd©e
(
EVP_ENCODE_CTX
 *
˘x
,*
out
,*
oué
,

644 c⁄° *
ö
, 
öl
);

645 
EVP_DecodeFöÆ
(
EVP_ENCODE_CTX
 *
˘x
, 

646 *
out
, *
oué
);

647 
EVP_DecodeBlock
(*
t
, c⁄° *
f
, 
n
);

649 
EVP_CIPHER_CTX_öô
(
EVP_CIPHER_CTX
 *
a
);

650 
EVP_CIPHER_CTX_˛ónup
(
EVP_CIPHER_CTX
 *
a
);

651 
EVP_CIPHER_CTX
 *
EVP_CIPHER_CTX_√w
();

652 
EVP_CIPHER_CTX_‰ì
(
EVP_CIPHER_CTX
 *
a
);

653 
EVP_CIPHER_CTX_£t_key_Àngth
(
EVP_CIPHER_CTX
 *
x
, 
keyÀn
);

654 
EVP_CIPHER_CTX_£t_∑ddög
(
EVP_CIPHER_CTX
 *
c
, 
∑d
);

655 
EVP_CIPHER_CTX_˘æ
(
EVP_CIPHER_CTX
 *
˘x
, 
ty≥
, 
¨g
, *
±r
);

656 
EVP_CIPHER_CTX_ønd_key
(
EVP_CIPHER_CTX
 *
˘x
, *
key
);

658 #i‚de‡
OPENSSL_NO_BIO


659 
BIO_METHOD
 *
BIO_f_md
();

660 
BIO_METHOD
 *
BIO_f_ba£64
();

661 
BIO_METHOD
 *
BIO_f_cùhî
();

662 
BIO_METHOD
 *
BIO_f_ªlübÀ
();

663 
BIO_£t_cùhî
(
BIO
 *
b
,c⁄° 
EVP_CIPHER
 *
c
,c⁄° *
k
,

664 c⁄° *
i
, 
íc
);

667 c⁄° 
EVP_MD
 *
EVP_md_nuŒ
();

668 #i‚de‡
OPENSSL_NO_MD2


669 c⁄° 
EVP_MD
 *
EVP_md2
();

671 #i‚de‡
OPENSSL_NO_MD4


672 c⁄° 
EVP_MD
 *
EVP_md4
();

674 #i‚de‡
OPENSSL_NO_MD5


675 c⁄° 
EVP_MD
 *
EVP_md5
();

677 #i‚de‡
OPENSSL_NO_SHA


678 c⁄° 
EVP_MD
 *
EVP_sha
();

679 c⁄° 
EVP_MD
 *
EVP_sha1
();

680 c⁄° 
EVP_MD
 *
EVP_dss
();

681 c⁄° 
EVP_MD
 *
EVP_dss1
();

682 c⁄° 
EVP_MD
 *
EVP_ecdß
();

684 #i‚de‡
OPENSSL_NO_SHA256


685 c⁄° 
EVP_MD
 *
EVP_sha224
();

686 c⁄° 
EVP_MD
 *
EVP_sha256
();

688 #i‚de‡
OPENSSL_NO_SHA512


689 c⁄° 
EVP_MD
 *
EVP_sha384
();

690 c⁄° 
EVP_MD
 *
EVP_sha512
();

692 #i‚de‡
OPENSSL_NO_MDC2


693 c⁄° 
EVP_MD
 *
EVP_mdc2
();

695 #i‚de‡
OPENSSL_NO_RIPEMD


696 c⁄° 
EVP_MD
 *
EVP_rùemd160
();

698 #i‚de‡
OPENSSL_NO_WHIRLPOOL


699 c⁄° 
EVP_MD
 *
EVP_whúÕoﬁ
();

701 c⁄° 
EVP_CIPHER
 *
EVP_íc_nuŒ
();

702 #i‚de‡
OPENSSL_NO_DES


703 c⁄° 
EVP_CIPHER
 *
EVP_des_ecb
();

704 c⁄° 
EVP_CIPHER
 *
EVP_des_ede
();

705 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3
();

706 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ecb
();

707 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ecb
();

708 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb64
();

709 
	#EVP_des_cfb
 
EVP_des_cfb64


	)

710 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb1
();

711 c⁄° 
EVP_CIPHER
 *
EVP_des_cfb8
();

712 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb64
();

713 
	#EVP_des_ede_cfb
 
EVP_des_ede_cfb64


	)

715 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb1
();

716 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cfb8
();

718 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb64
();

719 
	#EVP_des_ede3_cfb
 
EVP_des_ede3_cfb64


	)

720 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb1
();

721 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cfb8
();

722 c⁄° 
EVP_CIPHER
 *
EVP_des_ofb
();

723 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_ofb
();

724 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_ofb
();

725 c⁄° 
EVP_CIPHER
 *
EVP_des_cbc
();

726 c⁄° 
EVP_CIPHER
 *
EVP_des_ede_cbc
();

727 c⁄° 
EVP_CIPHER
 *
EVP_des_ede3_cbc
();

728 c⁄° 
EVP_CIPHER
 *
EVP_desx_cbc
();

732 #ifde‡
OPENSSL_OPENBSD_DEV_CRYPTO


733 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_des_ede3_cbc
();

734 c⁄° 
EVP_CIPHER
 *
EVP_dev_¸y±o_rc4
();

735 c⁄° 
EVP_MD
 *
EVP_dev_¸y±o_md5
();

739 #i‚de‡
OPENSSL_NO_RC4


740 c⁄° 
EVP_CIPHER
 *
EVP_rc4
();

741 c⁄° 
EVP_CIPHER
 *
EVP_rc4_40
();

742 #i‚de‡
OPENSSL_NO_MD5


743 c⁄° 
EVP_CIPHER
 *
EVP_rc4_hmac_md5
();

746 #i‚de‡
OPENSSL_NO_IDEA


747 c⁄° 
EVP_CIPHER
 *
EVP_idó_ecb
();

748 c⁄° 
EVP_CIPHER
 *
EVP_idó_cfb64
();

749 
	#EVP_idó_cfb
 
EVP_idó_cfb64


	)

750 c⁄° 
EVP_CIPHER
 *
EVP_idó_ofb
();

751 c⁄° 
EVP_CIPHER
 *
EVP_idó_cbc
();

753 #i‚de‡
OPENSSL_NO_RC2


754 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ecb
();

755 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cbc
();

756 c⁄° 
EVP_CIPHER
 *
EVP_rc2_40_cbc
();

757 c⁄° 
EVP_CIPHER
 *
EVP_rc2_64_cbc
();

758 c⁄° 
EVP_CIPHER
 *
EVP_rc2_cfb64
();

759 
	#EVP_rc2_cfb
 
EVP_rc2_cfb64


	)

760 c⁄° 
EVP_CIPHER
 *
EVP_rc2_ofb
();

762 #i‚de‡
OPENSSL_NO_BF


763 c⁄° 
EVP_CIPHER
 *
EVP_bf_ecb
();

764 c⁄° 
EVP_CIPHER
 *
EVP_bf_cbc
();

765 c⁄° 
EVP_CIPHER
 *
EVP_bf_cfb64
();

766 
	#EVP_bf_cfb
 
EVP_bf_cfb64


	)

767 c⁄° 
EVP_CIPHER
 *
EVP_bf_ofb
();

769 #i‚de‡
OPENSSL_NO_CAST


770 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ecb
();

771 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cbc
();

772 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_cfb64
();

773 
	#EVP_ˇ°5_cfb
 
EVP_ˇ°5_cfb64


	)

774 c⁄° 
EVP_CIPHER
 *
EVP_ˇ°5_ofb
();

776 #i‚de‡
OPENSSL_NO_RC5


777 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cbc
();

778 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ecb
();

779 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_cfb64
();

780 
	#EVP_rc5_32_12_16_cfb
 
EVP_rc5_32_12_16_cfb64


	)

781 c⁄° 
EVP_CIPHER
 *
EVP_rc5_32_12_16_ofb
();

783 #i‚de‡
OPENSSL_NO_AES


784 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ecb
();

785 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc
();

786 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb1
();

787 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb8
();

788 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cfb128
();

789 
	#EVP_´s_128_cfb
 
EVP_´s_128_cfb128


	)

790 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ofb
();

791 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_˘r
();

792 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_gcm
();

793 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_ccm
();

794 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_xts
();

795 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ecb
();

796 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cbc
();

797 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb1
();

798 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb8
();

799 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_cfb128
();

800 
	#EVP_´s_192_cfb
 
EVP_´s_192_cfb128


	)

801 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ofb
();

802 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_˘r
();

803 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_gcm
();

804 c⁄° 
EVP_CIPHER
 *
EVP_´s_192_ccm
();

805 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ecb
();

806 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc
();

807 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb1
();

808 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb8
();

809 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cfb128
();

810 
	#EVP_´s_256_cfb
 
EVP_´s_256_cfb128


	)

811 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ofb
();

812 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_˘r
();

813 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_gcm
();

814 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_ccm
();

815 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_xts
();

816 #i‡!
deföed
(
OPENSSL_NO_SHA
Ë&& !deföed(
OPENSSL_NO_SHA1
)

817 c⁄° 
EVP_CIPHER
 *
EVP_´s_128_cbc_hmac_sha1
();

818 c⁄° 
EVP_CIPHER
 *
EVP_´s_256_cbc_hmac_sha1
();

821 #i‚de‡
OPENSSL_NO_CAMELLIA


822 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ecb
();

823 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cbc
();

824 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb1
();

825 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb8
();

826 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_cfb128
();

827 
	#EVP_ˇmñlü_128_cfb
 
EVP_ˇmñlü_128_cfb128


	)

828 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_128_ofb
();

829 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ecb
();

830 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cbc
();

831 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb1
();

832 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb8
();

833 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_cfb128
();

834 
	#EVP_ˇmñlü_192_cfb
 
EVP_ˇmñlü_192_cfb128


	)

835 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_192_ofb
();

836 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ecb
();

837 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cbc
();

838 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb1
();

839 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb8
();

840 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_cfb128
();

841 
	#EVP_ˇmñlü_256_cfb
 
EVP_ˇmñlü_256_cfb128


	)

842 c⁄° 
EVP_CIPHER
 *
EVP_ˇmñlü_256_ofb
();

845 #i‚de‡
OPENSSL_NO_SEED


846 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ecb
();

847 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cbc
();

848 c⁄° 
EVP_CIPHER
 *
EVP_£ed_cfb128
();

849 
	#EVP_£ed_cfb
 
EVP_£ed_cfb128


	)

850 c⁄° 
EVP_CIPHER
 *
EVP_£ed_ofb
();

853 
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
();

854 
OPENSSL_add_Æl_Æg‹ôhms_c⁄f
();

856 #ifde‡
OPENSSL_LOAD_CONF


857 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

858 
	`OPENSSL_add_Æl_Æg‹ôhms_c⁄f
()

	)

860 
	#O≥nSSL_add_Æl_Æg‹ôhms
() \

861 
	`OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
()

	)

864 
O≥nSSL_add_Æl_cùhîs
();

865 
O≥nSSL_add_Æl_dige°s
();

866 
	#SSLóy_add_Æl_Æg‹ôhms
(Ë
	`O≥nSSL_add_Æl_Æg‹ôhms
()

	)

867 
	#SSLóy_add_Æl_cùhîs
(Ë
	`O≥nSSL_add_Æl_cùhîs
()

	)

868 
	#SSLóy_add_Æl_dige°s
(Ë
	`O≥nSSL_add_Æl_dige°s
()

	)

870 
EVP_add_cùhî
(c⁄° 
EVP_CIPHER
 *
cùhî
);

871 
EVP_add_dige°
(c⁄° 
EVP_MD
 *
dige°
);

873 c⁄° 
EVP_CIPHER
 *
EVP_gë_cùhîby«me
(c⁄° *
«me
);

874 c⁄° 
EVP_MD
 *
EVP_gë_dige°by«me
(c⁄° *
«me
);

875 
EVP_˛ónup
();

877 
EVP_CIPHER_do_Æl
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

878 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

879 
EVP_CIPHER_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_CIPHER
 *
cùh
,

880 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

882 
EVP_MD_do_Æl
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

883 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

884 
EVP_MD_do_Æl_s‹ãd
((*
‚
)(c⁄° 
EVP_MD
 *
cùh
,

885 c⁄° *
‰om
, c⁄° *
to
, *
x
), *
¨g
);

887 
EVP_PKEY_de¸y±_ﬁd
(*
dec_key
,

888 c⁄° *
íc_key
,
íc_key_Àn
,

889 
EVP_PKEY
 *
¥iv©e_key
);

890 
EVP_PKEY_í¸y±_ﬁd
(*
íc_key
,

891 c⁄° *
key
,
key_Àn
,

892 
EVP_PKEY
 *
pub_key
);

893 
EVP_PKEY_ty≥
(
ty≥
);

894 
EVP_PKEY_id
(c⁄° 
EVP_PKEY
 *
pkey
);

895 
EVP_PKEY_ba£_id
(c⁄° 
EVP_PKEY
 *
pkey
);

896 
EVP_PKEY_bôs
(
EVP_PKEY
 *
pkey
);

897 
EVP_PKEY_size
(
EVP_PKEY
 *
pkey
);

898 
EVP_PKEY_£t_ty≥
(
EVP_PKEY
 *
pkey
,
ty≥
);

899 
EVP_PKEY_£t_ty≥_°r
(
EVP_PKEY
 *
pkey
, c⁄° *
°r
, 
Àn
);

900 
EVP_PKEY_assign
(
EVP_PKEY
 *
pkey
,
ty≥
,*
key
);

901 * 
EVP_PKEY_gë0
(
EVP_PKEY
 *
pkey
);

903 #i‚de‡
OPENSSL_NO_RSA


904 
rß_°
;

905 
EVP_PKEY_£t1_RSA
(
EVP_PKEY
 *
pkey
,
rß_°
 *
key
);

906 
rß_°
 *
EVP_PKEY_gë1_RSA
(
EVP_PKEY
 *
pkey
);

908 #i‚de‡
OPENSSL_NO_DSA


909 
dß_°
;

910 
EVP_PKEY_£t1_DSA
(
EVP_PKEY
 *
pkey
,
dß_°
 *
key
);

911 
dß_°
 *
EVP_PKEY_gë1_DSA
(
EVP_PKEY
 *
pkey
);

913 #i‚de‡
OPENSSL_NO_DH


914 
dh_°
;

915 
EVP_PKEY_£t1_DH
(
EVP_PKEY
 *
pkey
,
dh_°
 *
key
);

916 
dh_°
 *
EVP_PKEY_gë1_DH
(
EVP_PKEY
 *
pkey
);

918 #i‚de‡
OPENSSL_NO_EC


919 
ec_key_°
;

920 
EVP_PKEY_£t1_EC_KEY
(
EVP_PKEY
 *
pkey
,
ec_key_°
 *
key
);

921 
ec_key_°
 *
EVP_PKEY_gë1_EC_KEY
(
EVP_PKEY
 *
pkey
);

924 
EVP_PKEY
 * 
EVP_PKEY_√w
();

925 
EVP_PKEY_‰ì
(
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
d2i_PublicKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

928 
Àngth
);

929 
i2d_PublicKey
(
EVP_PKEY
 *
a
, **
µ
);

931 
EVP_PKEY
 * 
d2i_Priv©eKey
(
ty≥
,EVP_PKEY **
a
, c⁄° **
µ
,

932 
Àngth
);

933 
EVP_PKEY
 * 
d2i_AutoPriv©eKey
(EVP_PKEY **
a
, c⁄° **
µ
,

934 
Àngth
);

935 
i2d_Priv©eKey
(
EVP_PKEY
 *
a
, **
µ
);

937 
EVP_PKEY_c›y_∑ømëîs
(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
);

938 
EVP_PKEY_missög_∑ømëîs
(c⁄° 
EVP_PKEY
 *
pkey
);

939 
EVP_PKEY_ßve_∑ømëîs
(
EVP_PKEY
 *
pkey
,
mode
);

940 
EVP_PKEY_cmp_∑ømëîs
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

942 
EVP_PKEY_cmp
(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
);

944 
EVP_PKEY_¥öt_public
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

945 
ödít
, 
ASN1_PCTX
 *
p˘x
);

946 
EVP_PKEY_¥öt_¥iv©e
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

947 
ödít
, 
ASN1_PCTX
 *
p˘x
);

948 
EVP_PKEY_¥öt_∑øms
(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
,

949 
ödít
, 
ASN1_PCTX
 *
p˘x
);

951 
EVP_PKEY_gë_deÁu…_dige°_nid
(
EVP_PKEY
 *
pkey
, *
≤id
);

953 
EVP_CIPHER_ty≥
(c⁄° 
EVP_CIPHER
 *
˘x
);

956 
EVP_CIPHER_∑øm_to_a¢1
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

957 
EVP_CIPHER_a¢1_to_∑øm
(
EVP_CIPHER_CTX
 *
c
, 
ASN1_TYPE
 *
ty≥
);

960 
EVP_CIPHER_£t_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

961 
EVP_CIPHER_gë_a¢1_iv
(
EVP_CIPHER_CTX
 *
c
,
ASN1_TYPE
 *
ty≥
);

964 
PKCS5_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

965 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

966 
í_de
);

967 
PKCS5_PBKDF2_HMAC_SHA1
(c⁄° *
∑ss
, 
∑s¶í
,

968 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

969 
keyÀn
, *
out
);

970 
PKCS5_PBKDF2_HMAC
(c⁄° *
∑ss
, 
∑s¶í
,

971 c⁄° *
ß…
, 
ß…Àn
, 
ôî
,

972 c⁄° 
EVP_MD
 *
dige°
,

973 
keyÀn
, *
out
);

974 
PKCS5_v2_PBE_keyivgí
(
EVP_CIPHER_CTX
 *
˘x
, c⁄° *
∑ss
, 
∑s¶í
,

975 
ASN1_TYPE
 *
∑øm
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

976 
í_de
);

978 
PKCS5_PBE_add
();

980 
EVP_PBE_CùhîInô
 (
ASN1_OBJECT
 *
pbe_obj
, c⁄° *
∑ss
, 
∑s¶í
,

981 
ASN1_TYPE
 *
∑øm
, 
EVP_CIPHER_CTX
 *
˘x
, 
í_de
);

986 
	#EVP_PBE_TYPE_OUTER
 0x0

	)

988 
	#EVP_PBE_TYPE_PRF
 0x1

	)

990 
EVP_PBE_Æg_add_ty≥
(
pbe_ty≥
, 
pbe_nid
, 
cùhî_nid
, 
md_nid
,

991 
EVP_PBE_KEYGEN
 *
keygí
);

992 
EVP_PBE_Æg_add
(
nid
, c⁄° 
EVP_CIPHER
 *
cùhî
, c⁄° 
EVP_MD
 *
md
,

993 
EVP_PBE_KEYGEN
 *
keygí
);

994 
EVP_PBE_föd
(
ty≥
, 
pbe_nid
,

995 *
p˙id
, *
pmnid
, 
EVP_PBE_KEYGEN
 **
pkeygí
);

996 
EVP_PBE_˛ónup
();

998 
	#ASN1_PKEY_ALIAS
 0x1

	)

999 
	#ASN1_PKEY_DYNAMIC
 0x2

	)

1000 
	#ASN1_PKEY_SIGPARAM_NULL
 0x4

	)

1002 
	#ASN1_PKEY_CTRL_PKCS7_SIGN
 0x1

	)

1003 
	#ASN1_PKEY_CTRL_PKCS7_ENCRYPT
 0x2

	)

1004 
	#ASN1_PKEY_CTRL_DEFAULT_MD_NID
 0x3

	)

1005 
	#ASN1_PKEY_CTRL_CMS_SIGN
 0x5

	)

1006 
	#ASN1_PKEY_CTRL_CMS_ENVELOPE
 0x7

	)

1008 
EVP_PKEY_a¢1_gë_cou¡
();

1009 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_gë0
(
idx
);

1010 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd
(
ENGINE
 **
≥
, 
ty≥
);

1011 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
EVP_PKEY_a¢1_föd_°r
(
ENGINE
 **
≥
,

1012 c⁄° *
°r
, 
Àn
);

1013 
EVP_PKEY_a¢1_add0
(c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1014 
EVP_PKEY_a¢1_add_Æüs
(
to
, 
‰om
);

1015 
EVP_PKEY_a¢1_gë0_öfo
(*
µkey_id
, *
pkey_ba£_id
, *
µkey_Êags
,

1016 c⁄° **
pöfo
, c⁄° **
µem_°r
,

1017 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1019 c⁄° 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_gë0_a¢1
(
EVP_PKEY
 *
pkey
);

1020 
EVP_PKEY_ASN1_METHOD
* 
EVP_PKEY_a¢1_√w
(
id
, 
Êags
,

1021 c⁄° *
≥m_°r
, c⁄° *
öfo
);

1022 
EVP_PKEY_a¢1_c›y
(
EVP_PKEY_ASN1_METHOD
 *
d°
,

1023 c⁄° 
EVP_PKEY_ASN1_METHOD
 *
§c
);

1024 
EVP_PKEY_a¢1_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
);

1025 
EVP_PKEY_a¢1_£t_public
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1026 (*
pub_decode
)(
EVP_PKEY
 *
pk
, 
X509_PUBKEY
 *
pub
),

1027 (*
pub_ícode
)(
X509_PUBKEY
 *
pub
, c⁄° 
EVP_PKEY
 *
pk
),

1028 (*
pub_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1029 (*
pub_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1030 
ASN1_PCTX
 *
p˘x
),

1031 (*
pkey_size
)(c⁄° 
EVP_PKEY
 *
pk
),

1032 (*
pkey_bôs
)(c⁄° 
EVP_PKEY
 *
pk
));

1033 
EVP_PKEY_a¢1_£t_¥iv©e
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1034 (*
¥iv_decode
)(
EVP_PKEY
 *
pk
, 
PKCS8_PRIV_KEY_INFO
 *
p8öf
),

1035 (*
¥iv_ícode
)(
PKCS8_PRIV_KEY_INFO
 *
p8
, c⁄° 
EVP_PKEY
 *
pk
),

1036 (*
¥iv_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1037 
ASN1_PCTX
 *
p˘x
));

1038 
EVP_PKEY_a¢1_£t_∑øm
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1039 (*
∑øm_decode
)(
EVP_PKEY
 *
pkey
,

1040 c⁄° **
pdî
, 
dîÀn
),

1041 (*
∑øm_ícode
)(c⁄° 
EVP_PKEY
 *
pkey
, **
pdî
),

1042 (*
∑øm_missög
)(c⁄° 
EVP_PKEY
 *
pk
),

1043 (*
∑øm_c›y
)(
EVP_PKEY
 *
to
, c⁄° EVP_PKEY *
‰om
),

1044 (*
∑øm_cmp
)(c⁄° 
EVP_PKEY
 *
a
, c⁄° EVP_PKEY *
b
),

1045 (*
∑øm_¥öt
)(
BIO
 *
out
, c⁄° 
EVP_PKEY
 *
pkey
, 
ödít
,

1046 
ASN1_PCTX
 *
p˘x
));

1048 
EVP_PKEY_a¢1_£t_‰ì
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1049 (*
pkey_‰ì
)(
EVP_PKEY
 *
pkey
));

1050 
EVP_PKEY_a¢1_£t_˘æ
(
EVP_PKEY_ASN1_METHOD
 *
amëh
,

1051 (*
pkey_˘æ
)(
EVP_PKEY
 *
pkey
, 
›
,

1052 
¨g1
, *
¨g2
));

1055 
	#EVP_PKEY_OP_UNDEFINED
 0

	)

1056 
	#EVP_PKEY_OP_PARAMGEN
 (1<<1)

	)

1057 
	#EVP_PKEY_OP_KEYGEN
 (1<<2)

	)

1058 
	#EVP_PKEY_OP_SIGN
 (1<<3)

	)

1059 
	#EVP_PKEY_OP_VERIFY
 (1<<4)

	)

1060 
	#EVP_PKEY_OP_VERIFYRECOVER
 (1<<5)

	)

1061 
	#EVP_PKEY_OP_SIGNCTX
 (1<<6)

	)

1062 
	#EVP_PKEY_OP_VERIFYCTX
 (1<<7)

	)

1063 
	#EVP_PKEY_OP_ENCRYPT
 (1<<8)

	)

1064 
	#EVP_PKEY_OP_DECRYPT
 (1<<9)

	)

1065 
	#EVP_PKEY_OP_DERIVE
 (1<<10)

	)

1067 
	#EVP_PKEY_OP_TYPE_SIG
 \

1068 (
EVP_PKEY_OP_SIGN
 | 
EVP_PKEY_OP_VERIFY
 | 
EVP_PKEY_OP_VERIFYRECOVER
 \

1069 | 
EVP_PKEY_OP_SIGNCTX
 | 
EVP_PKEY_OP_VERIFYCTX
)

	)

1071 
	#EVP_PKEY_OP_TYPE_CRYPT
 \

1072 (
EVP_PKEY_OP_ENCRYPT
 | 
EVP_PKEY_OP_DECRYPT
)

	)

1074 
	#EVP_PKEY_OP_TYPE_NOGEN
 \

1075 (
EVP_PKEY_OP_SIG
 | 
EVP_PKEY_OP_CRYPT
 | 
EVP_PKEY_OP_DERIVE
)

	)

1077 
	#EVP_PKEY_OP_TYPE_GEN
 \

1078 (
EVP_PKEY_OP_PARAMGEN
 | 
EVP_PKEY_OP_KEYGEN
)

	)

1080 
	#EVP_PKEY_CTX_£t_sig«tuª_md
(
˘x
, 
md
) \

1081 
	`EVP_PKEY_CTX_˘æ
(
˘x
, -1, 
EVP_PKEY_OP_TYPE_SIG
, \

1082 
EVP_PKEY_CTRL_MD
, 0, (*)
md
)

	)

1084 
	#EVP_PKEY_CTRL_MD
 1

	)

1085 
	#EVP_PKEY_CTRL_PEER_KEY
 2

	)

1087 
	#EVP_PKEY_CTRL_PKCS7_ENCRYPT
 3

	)

1088 
	#EVP_PKEY_CTRL_PKCS7_DECRYPT
 4

	)

1090 
	#EVP_PKEY_CTRL_PKCS7_SIGN
 5

	)

1092 
	#EVP_PKEY_CTRL_SET_MAC_KEY
 6

	)

1094 
	#EVP_PKEY_CTRL_DIGESTINIT
 7

	)

1097 
	#EVP_PKEY_CTRL_SET_IV
 8

	)

1099 
	#EVP_PKEY_CTRL_CMS_ENCRYPT
 9

	)

1100 
	#EVP_PKEY_CTRL_CMS_DECRYPT
 10

	)

1101 
	#EVP_PKEY_CTRL_CMS_SIGN
 11

	)

1103 
	#EVP_PKEY_CTRL_CIPHER
 12

	)

1105 
	#EVP_PKEY_ALG_CTRL
 0x1000

	)

1108 
	#EVP_PKEY_FLAG_AUTOARGLEN
 2

	)

1112 
	#EVP_PKEY_FLAG_SIGCTX_CUSTOM
 4

	)

1114 c⁄° 
EVP_PKEY_METHOD
 *
EVP_PKEY_mëh_föd
(
ty≥
);

1115 
EVP_PKEY_METHOD
* 
EVP_PKEY_mëh_√w
(
id
, 
Êags
);

1116 
EVP_PKEY_mëh_gë0_öfo
(*
µkey_id
, *
pÊags
,

1117 c⁄° 
EVP_PKEY_METHOD
 *
mëh
);

1118 
EVP_PKEY_mëh_c›y
(
EVP_PKEY_METHOD
 *
d°
, c⁄° EVP_PKEY_METHOD *
§c
);

1119 
EVP_PKEY_mëh_‰ì
(
EVP_PKEY_METHOD
 *
pmëh
);

1120 
EVP_PKEY_mëh_add0
(c⁄° 
EVP_PKEY_METHOD
 *
pmëh
);

1122 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w
(
EVP_PKEY
 *
pkey
, 
ENGINE
 *
e
);

1123 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_√w_id
(
id
, 
ENGINE
 *
e
);

1124 
EVP_PKEY_CTX
 *
EVP_PKEY_CTX_dup
(EVP_PKEY_CTX *
˘x
);

1125 
EVP_PKEY_CTX_‰ì
(
EVP_PKEY_CTX
 *
˘x
);

1127 
EVP_PKEY_CTX_˘æ
(
EVP_PKEY_CTX
 *
˘x
, 
keyty≥
, 
›ty≥
,

1128 
cmd
, 
p1
, *
p2
);

1129 
EVP_PKEY_CTX_˘æ_°r
(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
ty≥
,

1130 c⁄° *
vÆue
);

1132 
EVP_PKEY_CTX_gë_›î©i⁄
(
EVP_PKEY_CTX
 *
˘x
);

1133 
EVP_PKEY_CTX_£t0_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, *
d©
, 
d©Àn
);

1135 
EVP_PKEY
 *
EVP_PKEY_√w_mac_key
(
ty≥
, 
ENGINE
 *
e
,

1136 c⁄° *
key
, 
keyÀn
);

1138 
EVP_PKEY_CTX_£t_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1139 *
EVP_PKEY_CTX_gë_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1140 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_pkey
(
EVP_PKEY_CTX
 *
˘x
);

1142 
EVP_PKEY
 *
EVP_PKEY_CTX_gë0_≥îkey
(
EVP_PKEY_CTX
 *
˘x
);

1144 
EVP_PKEY_CTX_£t_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
, *
d©a
);

1145 *
EVP_PKEY_CTX_gë_≠p_d©a
(
EVP_PKEY_CTX
 *
˘x
);

1147 
EVP_PKEY_sign_öô
(
EVP_PKEY_CTX
 *
˘x
);

1148 
EVP_PKEY_sign
(
EVP_PKEY_CTX
 *
˘x
,

1149 *
sig
, 
size_t
 *
sigÀn
,

1150 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1151 
EVP_PKEY_vîify_öô
(
EVP_PKEY_CTX
 *
˘x
);

1152 
EVP_PKEY_vîify
(
EVP_PKEY_CTX
 *
˘x
,

1153 c⁄° *
sig
, 
size_t
 
sigÀn
,

1154 c⁄° *
tbs
, 
size_t
 
tb¶í
);

1155 
EVP_PKEY_vîify_ªcovî_öô
(
EVP_PKEY_CTX
 *
˘x
);

1156 
EVP_PKEY_vîify_ªcovî
(
EVP_PKEY_CTX
 *
˘x
,

1157 *
rout
, 
size_t
 *
rouéí
,

1158 c⁄° *
sig
, 
size_t
 
sigÀn
);

1159 
EVP_PKEY_í¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1160 
EVP_PKEY_í¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1161 *
out
, 
size_t
 *
ouéí
,

1162 c⁄° *
ö
, 
size_t
 
öÀn
);

1163 
EVP_PKEY_de¸y±_öô
(
EVP_PKEY_CTX
 *
˘x
);

1164 
EVP_PKEY_de¸y±
(
EVP_PKEY_CTX
 *
˘x
,

1165 *
out
, 
size_t
 *
ouéí
,

1166 c⁄° *
ö
, 
size_t
 
öÀn
);

1168 
EVP_PKEY_dîive_öô
(
EVP_PKEY_CTX
 *
˘x
);

1169 
EVP_PKEY_dîive_£t_≥î
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
≥î
);

1170 
EVP_PKEY_dîive
(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
);

1172 
	tEVP_PKEY_gí_cb
(
	tEVP_PKEY_CTX
 *
	t˘x
);

1174 
EVP_PKEY_∑ømgí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1175 
EVP_PKEY_∑ømgí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1176 
EVP_PKEY_keygí_öô
(
EVP_PKEY_CTX
 *
˘x
);

1177 
EVP_PKEY_keygí
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 **
µkey
);

1179 
EVP_PKEY_CTX_£t_cb
(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY_gí_cb
 *
cb
);

1180 
EVP_PKEY_gí_cb
 *
EVP_PKEY_CTX_gë_cb
(
EVP_PKEY_CTX
 *
˘x
);

1182 
EVP_PKEY_CTX_gë_keygí_öfo
(
EVP_PKEY_CTX
 *
˘x
, 
idx
);

1184 
EVP_PKEY_mëh_£t_öô
(
EVP_PKEY_METHOD
 *
pmëh
,

1185 (*
öô
)(
EVP_PKEY_CTX
 *
˘x
));

1187 
EVP_PKEY_mëh_£t_c›y
(
EVP_PKEY_METHOD
 *
pmëh
,

1188 (*
c›y
)(
EVP_PKEY_CTX
 *
d°
, EVP_PKEY_CTX *
§c
));

1190 
EVP_PKEY_mëh_£t_˛ónup
(
EVP_PKEY_METHOD
 *
pmëh
,

1191 (*
˛ónup
)(
EVP_PKEY_CTX
 *
˘x
));

1193 
EVP_PKEY_mëh_£t_∑ømgí
(
EVP_PKEY_METHOD
 *
pmëh
,

1194 (*
∑ømgí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1195 (*
∑ømgí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1197 
EVP_PKEY_mëh_£t_keygí
(
EVP_PKEY_METHOD
 *
pmëh
,

1198 (*
keygí_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1199 (*
keygí
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
));

1201 
EVP_PKEY_mëh_£t_sign
(
EVP_PKEY_METHOD
 *
pmëh
,

1202 (*
sign_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1203 (*
sign
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1204 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1206 
EVP_PKEY_mëh_£t_vîify
(
EVP_PKEY_METHOD
 *
pmëh
,

1207 (*
vîify_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1208 (*
vîify
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
, 
size_t
 
sigÀn
,

1209 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1211 
EVP_PKEY_mëh_£t_vîify_ªcovî
(
EVP_PKEY_METHOD
 *
pmëh
,

1212 (*
vîify_ªcovî_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1213 (*
vîify_ªcovî
)(
EVP_PKEY_CTX
 *
˘x
,

1214 *
sig
, 
size_t
 *
sigÀn
,

1215 c⁄° *
tbs
, 
size_t
 
tb¶í
));

1217 
EVP_PKEY_mëh_£t_sign˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1218 (*
sign˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1219 (*
sign˘x
)(
EVP_PKEY_CTX
 *
˘x
, *
sig
, 
size_t
 *
sigÀn
,

1220 
EVP_MD_CTX
 *
m˘x
));

1222 
EVP_PKEY_mëh_£t_vîify˘x
(
EVP_PKEY_METHOD
 *
pmëh
,

1223 (*
vîify˘x_öô
)(
EVP_PKEY_CTX
 *
˘x
, 
EVP_MD_CTX
 *
m˘x
),

1224 (*
vîify˘x
)(
EVP_PKEY_CTX
 *
˘x
, c⁄° *
sig
,
sigÀn
,

1225 
EVP_MD_CTX
 *
m˘x
));

1227 
EVP_PKEY_mëh_£t_í¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1228 (*
í¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1229 (*
í¸y±‚
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1230 c⁄° *
ö
, 
size_t
 
öÀn
));

1232 
EVP_PKEY_mëh_£t_de¸y±
(
EVP_PKEY_METHOD
 *
pmëh
,

1233 (*
de¸y±_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1234 (*
de¸y±
)(
EVP_PKEY_CTX
 *
˘x
, *
out
, 
size_t
 *
ouéí
,

1235 c⁄° *
ö
, 
size_t
 
öÀn
));

1237 
EVP_PKEY_mëh_£t_dîive
(
EVP_PKEY_METHOD
 *
pmëh
,

1238 (*
dîive_öô
)(
EVP_PKEY_CTX
 *
˘x
),

1239 (*
dîive
)(
EVP_PKEY_CTX
 *
˘x
, *
key
, 
size_t
 *
keyÀn
));

1241 
EVP_PKEY_mëh_£t_˘æ
(
EVP_PKEY_METHOD
 *
pmëh
,

1242 (*
˘æ
)(
EVP_PKEY_CTX
 *
˘x
, 
ty≥
, 
p1
, *
p2
),

1243 (*
˘æ_°r
)(
EVP_PKEY_CTX
 *
˘x
,

1244 c⁄° *
ty≥
, c⁄° *
vÆue
));

1250 
ERR_lﬂd_EVP_°rögs
();

1255 
	#EVP_F_AESNI_INIT_KEY
 165

	)

1256 
	#EVP_F_AESNI_XTS_CIPHER
 176

	)

1257 
	#EVP_F_AES_INIT_KEY
 133

	)

1258 
	#EVP_F_AES_XTS
 172

	)

1259 
	#EVP_F_AES_XTS_CIPHER
 175

	)

1260 
	#EVP_F_CAMELLIA_INIT_KEY
 159

	)

1261 
	#EVP_F_CMAC_INIT
 173

	)

1262 
	#EVP_F_D2I_PKEY
 100

	)

1263 
	#EVP_F_DO_SIGVER_INIT
 161

	)

1264 
	#EVP_F_DSAPKEY2PKCS8
 134

	)

1265 
	#EVP_F_DSA_PKEY2PKCS8
 135

	)

1266 
	#EVP_F_ECDSA_PKEY2PKCS8
 129

	)

1267 
	#EVP_F_ECKEY_PKEY2PKCS8
 132

	)

1268 
	#EVP_F_EVP_CIPHERINIT_EX
 123

	)

1269 
	#EVP_F_EVP_CIPHER_CTX_COPY
 163

	)

1270 
	#EVP_F_EVP_CIPHER_CTX_CTRL
 124

	)

1271 
	#EVP_F_EVP_CIPHER_CTX_SET_KEY_LENGTH
 122

	)

1272 
	#EVP_F_EVP_DECRYPTFINAL_EX
 101

	)

1273 
	#EVP_F_EVP_DIGESTINIT_EX
 128

	)

1274 
	#EVP_F_EVP_ENCRYPTFINAL_EX
 127

	)

1275 
	#EVP_F_EVP_MD_CTX_COPY_EX
 110

	)

1276 
	#EVP_F_EVP_MD_SIZE
 162

	)

1277 
	#EVP_F_EVP_OPENINIT
 102

	)

1278 
	#EVP_F_EVP_PBE_ALG_ADD
 115

	)

1279 
	#EVP_F_EVP_PBE_ALG_ADD_TYPE
 160

	)

1280 
	#EVP_F_EVP_PBE_CIPHERINIT
 116

	)

1281 
	#EVP_F_EVP_PKCS82PKEY
 111

	)

1282 
	#EVP_F_EVP_PKCS82PKEY_BROKEN
 136

	)

1283 
	#EVP_F_EVP_PKEY2PKCS8_BROKEN
 113

	)

1284 
	#EVP_F_EVP_PKEY_COPY_PARAMETERS
 103

	)

1285 
	#EVP_F_EVP_PKEY_CTX_CTRL
 137

	)

1286 
	#EVP_F_EVP_PKEY_CTX_CTRL_STR
 150

	)

1287 
	#EVP_F_EVP_PKEY_CTX_DUP
 156

	)

1288 
	#EVP_F_EVP_PKEY_DECRYPT
 104

	)

1289 
	#EVP_F_EVP_PKEY_DECRYPT_INIT
 138

	)

1290 
	#EVP_F_EVP_PKEY_DECRYPT_OLD
 151

	)

1291 
	#EVP_F_EVP_PKEY_DERIVE
 153

	)

1292 
	#EVP_F_EVP_PKEY_DERIVE_INIT
 154

	)

1293 
	#EVP_F_EVP_PKEY_DERIVE_SET_PEER
 155

	)

1294 
	#EVP_F_EVP_PKEY_ENCRYPT
 105

	)

1295 
	#EVP_F_EVP_PKEY_ENCRYPT_INIT
 139

	)

1296 
	#EVP_F_EVP_PKEY_ENCRYPT_OLD
 152

	)

1297 
	#EVP_F_EVP_PKEY_GET1_DH
 119

	)

1298 
	#EVP_F_EVP_PKEY_GET1_DSA
 120

	)

1299 
	#EVP_F_EVP_PKEY_GET1_ECDSA
 130

	)

1300 
	#EVP_F_EVP_PKEY_GET1_EC_KEY
 131

	)

1301 
	#EVP_F_EVP_PKEY_GET1_RSA
 121

	)

1302 
	#EVP_F_EVP_PKEY_KEYGEN
 146

	)

1303 
	#EVP_F_EVP_PKEY_KEYGEN_INIT
 147

	)

1304 
	#EVP_F_EVP_PKEY_NEW
 106

	)

1305 
	#EVP_F_EVP_PKEY_PARAMGEN
 148

	)

1306 
	#EVP_F_EVP_PKEY_PARAMGEN_INIT
 149

	)

1307 
	#EVP_F_EVP_PKEY_SIGN
 140

	)

1308 
	#EVP_F_EVP_PKEY_SIGN_INIT
 141

	)

1309 
	#EVP_F_EVP_PKEY_VERIFY
 142

	)

1310 
	#EVP_F_EVP_PKEY_VERIFY_INIT
 143

	)

1311 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER
 144

	)

1312 
	#EVP_F_EVP_PKEY_VERIFY_RECOVER_INIT
 145

	)

1313 
	#EVP_F_EVP_RIJNDAEL
 126

	)

1314 
	#EVP_F_EVP_SIGNFINAL
 107

	)

1315 
	#EVP_F_EVP_VERIFYFINAL
 108

	)

1316 
	#EVP_F_FIPS_CIPHERINIT
 166

	)

1317 
	#EVP_F_FIPS_CIPHER_CTX_COPY
 170

	)

1318 
	#EVP_F_FIPS_CIPHER_CTX_CTRL
 167

	)

1319 
	#EVP_F_FIPS_CIPHER_CTX_SET_KEY_LENGTH
 171

	)

1320 
	#EVP_F_FIPS_DIGESTINIT
 168

	)

1321 
	#EVP_F_FIPS_MD_CTX_COPY
 169

	)

1322 
	#EVP_F_HMAC_INIT_EX
 174

	)

1323 
	#EVP_F_INT_CTX_NEW
 157

	)

1324 
	#EVP_F_PKCS5_PBE_KEYIVGEN
 117

	)

1325 
	#EVP_F_PKCS5_V2_PBE_KEYIVGEN
 118

	)

1326 
	#EVP_F_PKCS5_V2_PBKDF2_KEYIVGEN
 164

	)

1327 
	#EVP_F_PKCS8_SET_BROKEN
 112

	)

1328 
	#EVP_F_PKEY_SET_TYPE
 158

	)

1329 
	#EVP_F_RC2_MAGIC_TO_METH
 109

	)

1330 
	#EVP_F_RC5_CTRL
 125

	)

1333 
	#EVP_R_AES_IV_SETUP_FAILED
 162

	)

1334 
	#EVP_R_AES_KEY_SETUP_FAILED
 143

	)

1335 
	#EVP_R_ASN1_LIB
 140

	)

1336 
	#EVP_R_BAD_BLOCK_LENGTH
 136

	)

1337 
	#EVP_R_BAD_DECRYPT
 100

	)

1338 
	#EVP_R_BAD_KEY_LENGTH
 137

	)

1339 
	#EVP_R_BN_DECODE_ERROR
 112

	)

1340 
	#EVP_R_BN_PUBKEY_ERROR
 113

	)

1341 
	#EVP_R_BUFFER_TOO_SMALL
 155

	)

1342 
	#EVP_R_CAMELLIA_KEY_SETUP_FAILED
 157

	)

1343 
	#EVP_R_CIPHER_PARAMETER_ERROR
 122

	)

1344 
	#EVP_R_COMMAND_NOT_SUPPORTED
 147

	)

1345 
	#EVP_R_CTRL_NOT_IMPLEMENTED
 132

	)

1346 
	#EVP_R_CTRL_OPERATION_NOT_IMPLEMENTED
 133

	)

1347 
	#EVP_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH
 138

	)

1348 
	#EVP_R_DECODE_ERROR
 114

	)

1349 
	#EVP_R_DIFFERENT_KEY_TYPES
 101

	)

1350 
	#EVP_R_DIFFERENT_PARAMETERS
 153

	)

1351 
	#EVP_R_DISABLED_FOR_FIPS
 163

	)

1352 
	#EVP_R_ENCODE_ERROR
 115

	)

1353 
	#EVP_R_EVP_PBE_CIPHERINIT_ERROR
 119

	)

1354 
	#EVP_R_EXPECTING_AN_RSA_KEY
 127

	)

1355 
	#EVP_R_EXPECTING_A_DH_KEY
 128

	)

1356 
	#EVP_R_EXPECTING_A_DSA_KEY
 129

	)

1357 
	#EVP_R_EXPECTING_A_ECDSA_KEY
 141

	)

1358 
	#EVP_R_EXPECTING_A_EC_KEY
 142

	)

1359 
	#EVP_R_INITIALIZATION_ERROR
 134

	)

1360 
	#EVP_R_INPUT_NOT_INITIALIZED
 111

	)

1361 
	#EVP_R_INVALID_DIGEST
 152

	)

1362 
	#EVP_R_INVALID_KEY_LENGTH
 130

	)

1363 
	#EVP_R_INVALID_OPERATION
 148

	)

1364 
	#EVP_R_IV_TOO_LARGE
 102

	)

1365 
	#EVP_R_KEYGEN_FAILURE
 120

	)

1366 
	#EVP_R_MESSAGE_DIGEST_IS_NULL
 159

	)

1367 
	#EVP_R_METHOD_NOT_SUPPORTED
 144

	)

1368 
	#EVP_R_MISSING_PARAMETERS
 103

	)

1369 
	#EVP_R_NO_CIPHER_SET
 131

	)

1370 
	#EVP_R_NO_DEFAULT_DIGEST
 158

	)

1371 
	#EVP_R_NO_DIGEST_SET
 139

	)

1372 
	#EVP_R_NO_DSA_PARAMETERS
 116

	)

1373 
	#EVP_R_NO_KEY_SET
 154

	)

1374 
	#EVP_R_NO_OPERATION_SET
 149

	)

1375 
	#EVP_R_NO_SIGN_FUNCTION_CONFIGURED
 104

	)

1376 
	#EVP_R_NO_VERIFY_FUNCTION_CONFIGURED
 105

	)

1377 
	#EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 150

	)

1378 
	#EVP_R_OPERATON_NOT_INITIALIZED
 151

	)

1379 
	#EVP_R_PKCS8_UNKNOWN_BROKEN_TYPE
 117

	)

1380 
	#EVP_R_PRIVATE_KEY_DECODE_ERROR
 145

	)

1381 
	#EVP_R_PRIVATE_KEY_ENCODE_ERROR
 146

	)

1382 
	#EVP_R_PUBLIC_KEY_NOT_RSA
 106

	)

1383 
	#EVP_R_TOO_LARGE
 164

	)

1384 
	#EVP_R_UNKNOWN_CIPHER
 160

	)

1385 
	#EVP_R_UNKNOWN_DIGEST
 161

	)

1386 
	#EVP_R_UNKNOWN_PBE_ALGORITHM
 121

	)

1387 
	#EVP_R_UNSUPORTED_NUMBER_OF_ROUNDS
 135

	)

1388 
	#EVP_R_UNSUPPORTED_ALGORITHM
 156

	)

1389 
	#EVP_R_UNSUPPORTED_CIPHER
 107

	)

1390 
	#EVP_R_UNSUPPORTED_KEYLENGTH
 123

	)

1391 
	#EVP_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION
 124

	)

1392 
	#EVP_R_UNSUPPORTED_KEY_SIZE
 108

	)

1393 
	#EVP_R_UNSUPPORTED_PRF
 125

	)

1394 
	#EVP_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM
 118

	)

1395 
	#EVP_R_UNSUPPORTED_SALT_TYPE
 126

	)

1396 
	#EVP_R_WRONG_FINAL_BLOCK_LENGTH
 109

	)

1397 
	#EVP_R_WRONG_PUBLIC_KEY_TYPE
 110

	)

1399 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/md5.h

59 #i‚de‡
HEADER_MD5_H


60 
	#HEADER_MD5_H


	)

62 
	~<›ís¶/e_os2.h
>

63 
	~<°ddef.h
>

65 #ifde‡ 
__˝lu•lus


69 #ifde‡
OPENSSL_NO_MD5


70 #îr‹ 
MD5
 
is
 
dißbÀd
.

80 #i‡
deföed
(
__LP32__
)

81 
	#MD5_LONG
 

	)

82 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

83 
	#MD5_LONG
 

	)

84 
	#MD5_LONG_LOG2
 3

	)

93 
	#MD5_LONG
 

	)

96 
	#MD5_CBLOCK
 64

	)

97 
	#MD5_LBLOCK
 (
MD5_CBLOCK
/4)

	)

98 
	#MD5_DIGEST_LENGTH
 16

	)

100 
	sMD5°©e_°


102 
MD5_LONG
 
A
,
B
,
C
,
D
;

103 
MD5_LONG
 
Nl
,
Nh
;

104 
MD5_LONG
 
d©a
[
MD5_LBLOCK
];

105 
num
;

106 } 
	tMD5_CTX
;

108 #ifde‡
OPENSSL_FIPS


109 
¥iv©e_MD5_Inô
(
MD5_CTX
 *
c
);

111 
MD5_Inô
(
MD5_CTX
 *
c
);

112 
MD5_Upd©e
(
MD5_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

113 
MD5_FöÆ
(*
md
, 
MD5_CTX
 *
c
);

114 *
MD5
(c⁄° *
d
, 
size_t
 
n
, *
md
);

115 
MD5_Tønsf‹m
(
MD5_CTX
 *
c
, c⁄° *
b
);

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ocsp.h

64 #i‚de‡
HEADER_OCSP_H


65 
	#HEADER_OCSP_H


	)

67 
	~<›ís¶/os¶_typ.h
>

68 
	~<›ís¶/x509.h
>

69 
	~<›ís¶/x509v3.h
>

70 
	~<›ís¶/ß„°ack.h
>

72 #ifde‡ 
__˝lu•lus


78 
	#OCSP_DEFAULT_NONCE_LENGTH
 16

	)

80 
	#OCSP_NOCERTS
 0x1

	)

81 
	#OCSP_NOINTERN
 0x2

	)

82 
	#OCSP_NOSIGS
 0x4

	)

83 
	#OCSP_NOCHAIN
 0x8

	)

84 
	#OCSP_NOVERIFY
 0x10

	)

85 
	#OCSP_NOEXPLICIT
 0x20

	)

86 
	#OCSP_NOCASIGN
 0x40

	)

87 
	#OCSP_NODELEGATED
 0x80

	)

88 
	#OCSP_NOCHECKS
 0x100

	)

89 
	#OCSP_TRUSTOTHER
 0x200

	)

90 
	#OCSP_RESPID_KEY
 0x400

	)

91 
	#OCSP_NOTIME
 0x800

	)

99 
	soc•_˚π_id_°


101 
X509_ALGOR
 *
hashAlg‹ôhm
;

102 
ASN1_OCTET_STRING
 *
issuîNameHash
;

103 
ASN1_OCTET_STRING
 *
issuîKeyHash
;

104 
ASN1_INTEGER
 *
£rülNumbî
;

105 } 
	tOCSP_CERTID
;

107 
DECLARE_STACK_OF
(
OCSP_CERTID
)

113 
	soc•_⁄e_ªque°_°


115 
OCSP_CERTID
 *
ªqCît
;

116 
STACK_OF
(
X509_EXTENSION
Ë*
sögÀReque°Exãnsi⁄s
;

117 } 
	tOCSP_ONEREQ
;

119 
DECLARE_STACK_OF
(
OCSP_ONEREQ
)

120 
DECLARE_ASN1_SET_OF
(
OCSP_ONEREQ
)

129 
	soc•_ªq_öfo_°


131 
ASN1_INTEGER
 *
vîsi⁄
;

132 
GENERAL_NAME
 *
ªque°‹Name
;

133 
STACK_OF
(
OCSP_ONEREQ
Ë*
ªque°Li°
;

134 
STACK_OF
(
X509_EXTENSION
Ë*
ªque°Exãnsi⁄s
;

135 } 
	tOCSP_REQINFO
;

142 
	soc•_sig«tuª_°


144 
X509_ALGOR
 *
sig«tuªAlg‹ôhm
;

145 
ASN1_BIT_STRING
 *
sig«tuª
;

146 
STACK_OF
(
X509
Ë*
˚πs
;

147 } 
	tOCSP_SIGNATURE
;

153 
	soc•_ªque°_°


155 
OCSP_REQINFO
 *
tbsReque°
;

156 
OCSP_SIGNATURE
 *
›ti⁄ÆSig«tuª
;

157 } 
	tOCSP_REQUEST
;

169 
	#OCSP_RESPONSE_STATUS_SUCCESSFUL
 0

	)

170 
	#OCSP_RESPONSE_STATUS_MALFORMEDREQUEST
 1

	)

171 
	#OCSP_RESPONSE_STATUS_INTERNALERROR
 2

	)

172 
	#OCSP_RESPONSE_STATUS_TRYLATER
 3

	)

173 
	#OCSP_RESPONSE_STATUS_SIGREQUIRED
 5

	)

174 
	#OCSP_RESPONSE_STATUS_UNAUTHORIZED
 6

	)

180 
	soc•_ª•_byãs_°


182 
ASN1_OBJECT
 *
ª•⁄£Ty≥
;

183 
ASN1_OCTET_STRING
 *
ª•⁄£
;

184 } 
	tOCSP_RESPBYTES
;

190 
	soc•_ª•⁄£_°


192 
ASN1_ENUMERATED
 *
ª•⁄£Sètus
;

193 
OCSP_RESPBYTES
 *
ª•⁄£Byãs
;

200 
	#V_OCSP_RESPID_NAME
 0

	)

201 
	#V_OCSP_RESPID_KEY
 1

	)

202 
	soc•_ª•⁄dî_id_°


204 
ty≥
;

206 
X509_NAME
* 
byName
;

207 
ASN1_OCTET_STRING
 *
byKey
;

208 } 
vÆue
;

211 
DECLARE_STACK_OF
(
OCSP_RESPID
)

212 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

222 
	soc•_ªvoked_öfo_°


224 
ASN1_GENERALIZEDTIME
 *
ªvoˇti⁄Time
;

225 
ASN1_ENUMERATED
 *
ªvoˇti⁄Rós⁄
;

226 } 
	tOCSP_REVOKEDINFO
;

233 
	#V_OCSP_CERTSTATUS_GOOD
 0

	)

234 
	#V_OCSP_CERTSTATUS_REVOKED
 1

	)

235 
	#V_OCSP_CERTSTATUS_UNKNOWN
 2

	)

236 
	soc•_˚π_°©us_°


238 
ty≥
;

240 
ASN1_NULL
 *
good
;

241 
OCSP_REVOKEDINFO
 *
ªvoked
;

242 
ASN1_NULL
 *
unknown
;

243 } 
vÆue
;

244 } 
	tOCSP_CERTSTATUS
;

253 
	soc•_sögÀ_ª•⁄£_°


255 
OCSP_CERTID
 *
˚πId
;

256 
OCSP_CERTSTATUS
 *
˚πSètus
;

257 
ASN1_GENERALIZEDTIME
 *
thisUpd©e
;

258 
ASN1_GENERALIZEDTIME
 *
√xtUpd©e
;

259 
STACK_OF
(
X509_EXTENSION
Ë*
sögÀExãnsi⁄s
;

260 } 
	tOCSP_SINGLERESP
;

262 
DECLARE_STACK_OF
(
OCSP_SINGLERESP
)

263 
DECLARE_ASN1_SET_OF
(
OCSP_SINGLERESP
)

272 
	soc•_ª•⁄£_d©a_°


274 
ASN1_INTEGER
 *
vîsi⁄
;

275 
OCSP_RESPID
 *
ª•⁄dîId
;

276 
ASN1_GENERALIZEDTIME
 *
¥odu˚dAt
;

277 
STACK_OF
(
OCSP_SINGLERESP
Ë*
ª•⁄£s
;

278 
STACK_OF
(
X509_EXTENSION
Ë*
ª•⁄£Exãnsi⁄s
;

279 } 
	tOCSP_RESPDATA
;

303 
	soc•_basic_ª•⁄£_°


305 
OCSP_RESPDATA
 *
tbsRe•⁄£D©a
;

306 
X509_ALGOR
 *
sig«tuªAlg‹ôhm
;

307 
ASN1_BIT_STRING
 *
sig«tuª
;

308 
STACK_OF
(
X509
Ë*
˚πs
;

309 } 
	tOCSP_BASICRESP
;

322 
	#OCSP_REVOKED_STATUS_NOSTATUS
 -1

	)

323 
	#OCSP_REVOKED_STATUS_UNSPECIFIED
 0

	)

324 
	#OCSP_REVOKED_STATUS_KEYCOMPROMISE
 1

	)

325 
	#OCSP_REVOKED_STATUS_CACOMPROMISE
 2

	)

326 
	#OCSP_REVOKED_STATUS_AFFILIATIONCHANGED
 3

	)

327 
	#OCSP_REVOKED_STATUS_SUPERSEDED
 4

	)

328 
	#OCSP_REVOKED_STATUS_CESSATIONOFOPERATION
 5

	)

329 
	#OCSP_REVOKED_STATUS_CERTIFICATEHOLD
 6

	)

330 
	#OCSP_REVOKED_STATUS_REMOVEFROMCRL
 8

	)

337 
	soc•_¸l_id_°


339 
ASN1_IA5STRING
 *
¸lUæ
;

340 
ASN1_INTEGER
 *
¸lNum
;

341 
ASN1_GENERALIZEDTIME
 *
¸lTime
;

342 } 
	tOCSP_CRLID
;

348 
	soc•_£rvi˚_loˇt‹_°


350 
X509_NAME
* 
issuî
;

351 
STACK_OF
(
ACCESS_DESCRIPTION
Ë*
loˇt‹
;

352 } 
	tOCSP_SERVICELOC
;

354 
	#PEM_STRING_OCSP_REQUEST
 "OCSP REQUEST"

	)

355 
	#PEM_STRING_OCSP_RESPONSE
 "OCSP RESPONSE"

	)

357 
	#d2i_OCSP_REQUEST_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_REQUEST
,
OCSP_REQUEST_√w
,
d2i_OCSP_REQUEST
,bp,p)

	)

359 
	#d2i_OCSP_RESPONSE_bio
(
bp
,
p
Ë
	`ASN1_d2i_bio_of
(
OCSP_RESPONSE
,
OCSP_RESPONSE_√w
,
d2i_OCSP_RESPONSE
,bp,p)

	)

361 
	#PEM_ªad_bio_OCSP_REQUEST
(
bp
,
x
,
cb
Ë(
OCSP_REQUEST
 *)
	`PEM_ASN1_ªad_bio
( \

362 (*(*)())
d2i_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,
bp
,(**)
x
,
cb
,
NULL
)

	)

364 
	#PEM_ªad_bio_OCSP_RESPONSE
(
bp
,
x
,
cb
)(
OCSP_RESPONSE
 *)
	`PEM_ASN1_ªad_bio
(\

365 (*(*)())
d2i_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,
bp
,(**)
x
,
cb
,
NULL
)

	)

367 
	#PEM_wrôe_bio_OCSP_REQUEST
(
bp
,
o
) \

368 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_REQUEST
,
PEM_STRING_OCSP_REQUEST
,\

369 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

371 
	#PEM_wrôe_bio_OCSP_RESPONSE
(
bp
,
o
) \

372 
	`PEM_ASN1_wrôe_bio
(((*)())
i2d_OCSP_RESPONSE
,
PEM_STRING_OCSP_RESPONSE
,\

373 
bp
,(*)
o
, 
NULL
,NULL,0,NULL,NULL)

	)

375 
	#i2d_OCSP_RESPONSE_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_RESPONSE
,
i2d_OCSP_RESPONSE
,bp,o)

	)

377 
	#i2d_OCSP_REQUEST_bio
(
bp
,
o
Ë
	`ASN1_i2d_bio_of
(
OCSP_REQUEST
,
i2d_OCSP_REQUEST
,bp,o)

	)

379 
	#OCSP_REQUEST_sign
(
o
,
pkey
,
md
) \

380 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

381 
o
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,
NULL
,\

382 
o
->
›ti⁄ÆSig«tuª
->
sig«tuª
,o->
tbsReque°
,
pkey
,
md
)

	)

384 
	#OCSP_BASICRESP_sign
(
o
,
pkey
,
md
,
d
) \

385 
	`ASN1_ôem_sign
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),
o
->
sig«tuªAlg‹ôhm
,
NULL
,\

386 
o
->
sig«tuª
,o->
tbsRe•⁄£D©a
,
pkey
,
md
)

	)

388 
	#OCSP_REQUEST_vîify
(
a
,
r
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_REQINFO
),\

389 
a
->
›ti⁄ÆSig«tuª
->
sig«tuªAlg‹ôhm
,\

390 
a
->
›ti⁄ÆSig«tuª
->
sig«tuª
,a->
tbsReque°
,
r
)

	)

392 
	#OCSP_BASICRESP_vîify
(
a
,
r
,
d
Ë
	`ASN1_ôem_vîify
(
	`ASN1_ITEM_Ωå
(
OCSP_RESPDATA
),\

393 
a
->
sig«tuªAlg‹ôhm
,a->
sig«tuª
,a->
tbsRe•⁄£D©a
,
r
)

	)

395 
	#ASN1_BIT_STRING_dige°
(
d©a
,
ty≥
,
md
,
Àn
) \

396 
	`ASN1_ôem_dige°
(
	`ASN1_ITEM_Ωå
(
ASN1_BIT_STRING
),
ty≥
,
d©a
,
md
,
Àn
)

	)

398 
	#OCSP_CERTSTATUS_dup
(
cs
)\

399 (
OCSP_CERTSTATUS
*)
	`ASN1_dup
(((*)())
i2d_OCSP_CERTSTATUS
,\

400 (*(*)())
d2i_OCSP_CERTSTATUS
,(*)(
cs
))

	)

402 
OCSP_CERTID
 *
OCSP_CERTID_dup
(OCSP_CERTID *
id
);

404 
OCSP_RESPONSE
 *
OCSP_£ndªq_bio
(
BIO
 *
b
, *
∑th
, 
OCSP_REQUEST
 *
ªq
);

405 
OCSP_REQ_CTX
 *
OCSP_£ndªq_√w
(
BIO
 *
io
, *
∑th
, 
OCSP_REQUEST
 *
ªq
,

406 
maxlöe
);

407 
OCSP_£ndªq_nbio
(
OCSP_RESPONSE
 **
¥e•
, 
OCSP_REQ_CTX
 *
r˘x
);

408 
OCSP_REQ_CTX_‰ì
(
OCSP_REQ_CTX
 *
r˘x
);

409 
OCSP_REQ_CTX_£t1_ªq
(
OCSP_REQ_CTX
 *
r˘x
, 
OCSP_REQUEST
 *
ªq
);

410 
OCSP_REQ_CTX_add1_hódî
(
OCSP_REQ_CTX
 *
r˘x
,

411 c⁄° *
«me
, c⁄° *
vÆue
);

413 
OCSP_CERTID
 *
OCSP_˚π_to_id
(c⁄° 
EVP_MD
 *
dg°
, 
X509
 *
subje˘
, X509 *
issuî
);

415 
OCSP_CERTID
 *
OCSP_˚π_id_√w
(c⁄° 
EVP_MD
 *
dg°
,

416 
X509_NAME
 *
issuîName
,

417 
ASN1_BIT_STRING
* 
issuîKey
,

418 
ASN1_INTEGER
 *
£rülNumbî
);

420 
OCSP_ONEREQ
 *
OCSP_ªque°_add0_id
(
OCSP_REQUEST
 *
ªq
, 
OCSP_CERTID
 *
cid
);

422 
OCSP_ªque°_add1_n⁄˚
(
OCSP_REQUEST
 *
ªq
, *
vÆ
, 
Àn
);

423 
OCSP_basic_add1_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, *
vÆ
, 
Àn
);

424 
OCSP_check_n⁄˚
(
OCSP_REQUEST
 *
ªq
, 
OCSP_BASICRESP
 *
bs
);

425 
OCSP_c›y_n⁄˚
(
OCSP_BASICRESP
 *
ª•
, 
OCSP_REQUEST
 *
ªq
);

427 
OCSP_ªque°_£t1_«me
(
OCSP_REQUEST
 *
ªq
, 
X509_NAME
 *
nm
);

428 
OCSP_ªque°_add1_˚π
(
OCSP_REQUEST
 *
ªq
, 
X509
 *
˚π
);

430 
OCSP_ªque°_sign
(
OCSP_REQUEST
 *
ªq
,

431 
X509
 *
sig√r
,

432 
EVP_PKEY
 *
key
,

433 c⁄° 
EVP_MD
 *
dg°
,

434 
STACK_OF
(
X509
Ë*
˚πs
,

435 
Êags
);

437 
OCSP_ª•⁄£_°©us
(
OCSP_RESPONSE
 *
ª•
);

438 
OCSP_BASICRESP
 *
OCSP_ª•⁄£_gë1_basic
(
OCSP_RESPONSE
 *
ª•
);

440 
OCSP_ª•_cou¡
(
OCSP_BASICRESP
 *
bs
);

441 
OCSP_SINGLERESP
 *
OCSP_ª•_gë0
(
OCSP_BASICRESP
 *
bs
, 
idx
);

442 
OCSP_ª•_föd
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, 
œ°
);

443 
OCSP_sögÀ_gë0_°©us
(
OCSP_SINGLERESP
 *
sögÀ
, *
ªas⁄
,

444 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

445 
ASN1_GENERALIZEDTIME
 **
thisupd
,

446 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

447 
OCSP_ª•_föd_°©us
(
OCSP_BASICRESP
 *
bs
, 
OCSP_CERTID
 *
id
, *
°©us
,

448 *
ªas⁄
,

449 
ASN1_GENERALIZEDTIME
 **
ªvtime
,

450 
ASN1_GENERALIZEDTIME
 **
thisupd
,

451 
ASN1_GENERALIZEDTIME
 **
√xtupd
);

452 
OCSP_check_vÆidôy
(
ASN1_GENERALIZEDTIME
 *
thisupd
,

453 
ASN1_GENERALIZEDTIME
 *
√xtupd
,

454 
£c
, 
max£c
);

456 
OCSP_ªque°_vîify
(
OCSP_REQUEST
 *
ªq
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
, 
Êags
);

458 
OCSP_∑r£_uæ
(*
uæ
, **
pho°
, **
µ‹t
, **
µ©h
, *
ps¶
);

460 
OCSP_id_issuî_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

461 
OCSP_id_cmp
(
OCSP_CERTID
 *
a
, OCSP_CERTID *
b
);

463 
OCSP_ªque°_⁄îeq_cou¡
(
OCSP_REQUEST
 *
ªq
);

464 
OCSP_ONEREQ
 *
OCSP_ªque°_⁄îeq_gë0
(
OCSP_REQUEST
 *
ªq
, 
i
);

465 
OCSP_CERTID
 *
OCSP_⁄îeq_gë0_id
(
OCSP_ONEREQ
 *
⁄e
);

466 
OCSP_id_gë0_öfo
(
ASN1_OCTET_STRING
 **
piNameHash
, 
ASN1_OBJECT
 **
pmd
,

467 
ASN1_OCTET_STRING
 **
pikeyHash
,

468 
ASN1_INTEGER
 **
p£rül
, 
OCSP_CERTID
 *
cid
);

469 
OCSP_ªque°_is_sig√d
(
OCSP_REQUEST
 *
ªq
);

470 
OCSP_RESPONSE
 *
OCSP_ª•⁄£_¸óã
(
°©us
, 
OCSP_BASICRESP
 *
bs
);

471 
OCSP_SINGLERESP
 *
OCSP_basic_add1_°©us
(
OCSP_BASICRESP
 *
r•
,

472 
OCSP_CERTID
 *
cid
,

473 
°©us
, 
ªas⁄
,

474 
ASN1_TIME
 *
ªvtime
,

475 
ASN1_TIME
 *
thisupd
, ASN1_TIME *
√xtupd
);

476 
OCSP_basic_add1_˚π
(
OCSP_BASICRESP
 *
ª•
, 
X509
 *
˚π
);

477 
OCSP_basic_sign
(
OCSP_BASICRESP
 *
br•
,

478 
X509
 *
sig√r
, 
EVP_PKEY
 *
key
, c⁄° 
EVP_MD
 *
dg°
,

479 
STACK_OF
(
X509
Ë*
˚πs
, 
Êags
);

481 
X509_EXTENSION
 *
OCSP_¸lID_√w
(*
uæ
, *
n
, *
tim
);

483 
X509_EXTENSION
 *
OCSP_ac˚±_ª•⁄£s_√w
(**
oids
);

485 
X509_EXTENSION
 *
OCSP_¨chive_cutoff_√w
(* 
tim
);

487 
X509_EXTENSION
 *
OCSP_uæ_sv˛oc_√w
(
X509_NAME
* 
issuî
, **
uæs
);

489 
OCSP_REQUEST_gë_ext_cou¡
(
OCSP_REQUEST
 *
x
);

490 
OCSP_REQUEST_gë_ext_by_NID
(
OCSP_REQUEST
 *
x
, 
nid
, 
œ°pos
);

491 
OCSP_REQUEST_gë_ext_by_OBJ
(
OCSP_REQUEST
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

492 
OCSP_REQUEST_gë_ext_by_¸ôiˇl
(
OCSP_REQUEST
 *
x
, 
¸ô
, 
œ°pos
);

493 
X509_EXTENSION
 *
OCSP_REQUEST_gë_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

494 
X509_EXTENSION
 *
OCSP_REQUEST_dñëe_ext
(
OCSP_REQUEST
 *
x
, 
loc
);

495 *
OCSP_REQUEST_gë1_ext_d2i
(
OCSP_REQUEST
 *
x
, 
nid
, *
¸ô
, *
idx
);

496 
OCSP_REQUEST_add1_ext_i2d
(
OCSP_REQUEST
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

497 
Êags
);

498 
OCSP_REQUEST_add_ext
(
OCSP_REQUEST
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

500 
OCSP_ONEREQ_gë_ext_cou¡
(
OCSP_ONEREQ
 *
x
);

501 
OCSP_ONEREQ_gë_ext_by_NID
(
OCSP_ONEREQ
 *
x
, 
nid
, 
œ°pos
);

502 
OCSP_ONEREQ_gë_ext_by_OBJ
(
OCSP_ONEREQ
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

503 
OCSP_ONEREQ_gë_ext_by_¸ôiˇl
(
OCSP_ONEREQ
 *
x
, 
¸ô
, 
œ°pos
);

504 
X509_EXTENSION
 *
OCSP_ONEREQ_gë_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

505 
X509_EXTENSION
 *
OCSP_ONEREQ_dñëe_ext
(
OCSP_ONEREQ
 *
x
, 
loc
);

506 *
OCSP_ONEREQ_gë1_ext_d2i
(
OCSP_ONEREQ
 *
x
, 
nid
, *
¸ô
, *
idx
);

507 
OCSP_ONEREQ_add1_ext_i2d
(
OCSP_ONEREQ
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

508 
Êags
);

509 
OCSP_ONEREQ_add_ext
(
OCSP_ONEREQ
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

511 
OCSP_BASICRESP_gë_ext_cou¡
(
OCSP_BASICRESP
 *
x
);

512 
OCSP_BASICRESP_gë_ext_by_NID
(
OCSP_BASICRESP
 *
x
, 
nid
, 
œ°pos
);

513 
OCSP_BASICRESP_gë_ext_by_OBJ
(
OCSP_BASICRESP
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

514 
OCSP_BASICRESP_gë_ext_by_¸ôiˇl
(
OCSP_BASICRESP
 *
x
, 
¸ô
, 
œ°pos
);

515 
X509_EXTENSION
 *
OCSP_BASICRESP_gë_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

516 
X509_EXTENSION
 *
OCSP_BASICRESP_dñëe_ext
(
OCSP_BASICRESP
 *
x
, 
loc
);

517 *
OCSP_BASICRESP_gë1_ext_d2i
(
OCSP_BASICRESP
 *
x
, 
nid
, *
¸ô
, *
idx
);

518 
OCSP_BASICRESP_add1_ext_i2d
(
OCSP_BASICRESP
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

519 
Êags
);

520 
OCSP_BASICRESP_add_ext
(
OCSP_BASICRESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

522 
OCSP_SINGLERESP_gë_ext_cou¡
(
OCSP_SINGLERESP
 *
x
);

523 
OCSP_SINGLERESP_gë_ext_by_NID
(
OCSP_SINGLERESP
 *
x
, 
nid
, 
œ°pos
);

524 
OCSP_SINGLERESP_gë_ext_by_OBJ
(
OCSP_SINGLERESP
 *
x
, 
ASN1_OBJECT
 *
obj
, 
œ°pos
);

525 
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
(
OCSP_SINGLERESP
 *
x
, 
¸ô
, 
œ°pos
);

526 
X509_EXTENSION
 *
OCSP_SINGLERESP_gë_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

527 
X509_EXTENSION
 *
OCSP_SINGLERESP_dñëe_ext
(
OCSP_SINGLERESP
 *
x
, 
loc
);

528 *
OCSP_SINGLERESP_gë1_ext_d2i
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
¸ô
, *
idx
);

529 
OCSP_SINGLERESP_add1_ext_i2d
(
OCSP_SINGLERESP
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

530 
Êags
);

531 
OCSP_SINGLERESP_add_ext
(
OCSP_SINGLERESP
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

533 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SINGLERESP
)

534 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTSTATUS
)

535 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REVOKEDINFO
)

536 
DECLARE_ASN1_FUNCTIONS
(
OCSP_BASICRESP
)

537 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPDATA
)

538 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPID
)

539 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPONSE
)

540 
DECLARE_ASN1_FUNCTIONS
(
OCSP_RESPBYTES
)

541 
DECLARE_ASN1_FUNCTIONS
(
OCSP_ONEREQ
)

542 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CERTID
)

543 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQUEST
)

544 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SIGNATURE
)

545 
DECLARE_ASN1_FUNCTIONS
(
OCSP_REQINFO
)

546 
DECLARE_ASN1_FUNCTIONS
(
OCSP_CRLID
)

547 
DECLARE_ASN1_FUNCTIONS
(
OCSP_SERVICELOC
)

549 c⁄° *
OCSP_ª•⁄£_°©us_°r
(
s
);

550 c⁄° *
OCSP_˚π_°©us_°r
(
s
);

551 c⁄° *
OCSP_¸l_ªas⁄_°r
(
s
);

553 
OCSP_REQUEST_¥öt
(
BIO
 *
bp
, 
OCSP_REQUEST
* 
a
, 
Êags
);

554 
OCSP_RESPONSE_¥öt
(
BIO
 *
bp
, 
OCSP_RESPONSE
* 
o
, 
Êags
);

556 
OCSP_basic_vîify
(
OCSP_BASICRESP
 *
bs
, 
STACK_OF
(
X509
Ë*
˚πs
,

557 
X509_STORE
 *
°
, 
Êags
);

563 
ERR_lﬂd_OCSP_°rögs
();

568 
	#OCSP_F_ASN1_STRING_ENCODE
 100

	)

569 
	#OCSP_F_D2I_OCSP_NONCE
 102

	)

570 
	#OCSP_F_OCSP_BASIC_ADD1_STATUS
 103

	)

571 
	#OCSP_F_OCSP_BASIC_SIGN
 104

	)

572 
	#OCSP_F_OCSP_BASIC_VERIFY
 105

	)

573 
	#OCSP_F_OCSP_CERT_ID_NEW
 101

	)

574 
	#OCSP_F_OCSP_CHECK_DELEGATED
 106

	)

575 
	#OCSP_F_OCSP_CHECK_IDS
 107

	)

576 
	#OCSP_F_OCSP_CHECK_ISSUER
 108

	)

577 
	#OCSP_F_OCSP_CHECK_VALIDITY
 115

	)

578 
	#OCSP_F_OCSP_MATCH_ISSUERID
 109

	)

579 
	#OCSP_F_OCSP_PARSE_URL
 114

	)

580 
	#OCSP_F_OCSP_REQUEST_SIGN
 110

	)

581 
	#OCSP_F_OCSP_REQUEST_VERIFY
 116

	)

582 
	#OCSP_F_OCSP_RESPONSE_GET1_BASIC
 111

	)

583 
	#OCSP_F_OCSP_SENDREQ_BIO
 112

	)

584 
	#OCSP_F_OCSP_SENDREQ_NBIO
 117

	)

585 
	#OCSP_F_PARSE_HTTP_LINE1
 118

	)

586 
	#OCSP_F_REQUEST_VERIFY
 113

	)

589 
	#OCSP_R_BAD_DATA
 100

	)

590 
	#OCSP_R_CERTIFICATE_VERIFY_ERROR
 101

	)

591 
	#OCSP_R_DIGEST_ERR
 102

	)

592 
	#OCSP_R_ERROR_IN_NEXTUPDATE_FIELD
 122

	)

593 
	#OCSP_R_ERROR_IN_THISUPDATE_FIELD
 123

	)

594 
	#OCSP_R_ERROR_PARSING_URL
 121

	)

595 
	#OCSP_R_MISSING_OCSPSIGNING_USAGE
 103

	)

596 
	#OCSP_R_NEXTUPDATE_BEFORE_THISUPDATE
 124

	)

597 
	#OCSP_R_NOT_BASIC_RESPONSE
 104

	)

598 
	#OCSP_R_NO_CERTIFICATES_IN_CHAIN
 105

	)

599 
	#OCSP_R_NO_CONTENT
 106

	)

600 
	#OCSP_R_NO_PUBLIC_KEY
 107

	)

601 
	#OCSP_R_NO_RESPONSE_DATA
 108

	)

602 
	#OCSP_R_NO_REVOKED_TIME
 109

	)

603 
	#OCSP_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 110

	)

604 
	#OCSP_R_REQUEST_NOT_SIGNED
 128

	)

605 
	#OCSP_R_RESPONSE_CONTAINS_NO_REVOCATION_DATA
 111

	)

606 
	#OCSP_R_ROOT_CA_NOT_TRUSTED
 112

	)

607 
	#OCSP_R_SERVER_READ_ERROR
 113

	)

608 
	#OCSP_R_SERVER_RESPONSE_ERROR
 114

	)

609 
	#OCSP_R_SERVER_RESPONSE_PARSE_ERROR
 115

	)

610 
	#OCSP_R_SERVER_WRITE_ERROR
 116

	)

611 
	#OCSP_R_SIGNATURE_FAILURE
 117

	)

612 
	#OCSP_R_SIGNER_CERTIFICATE_NOT_FOUND
 118

	)

613 
	#OCSP_R_STATUS_EXPIRED
 125

	)

614 
	#OCSP_R_STATUS_NOT_YET_VALID
 126

	)

615 
	#OCSP_R_STATUS_TOO_OLD
 127

	)

616 
	#OCSP_R_UNKNOWN_MESSAGE_DIGEST
 119

	)

617 
	#OCSP_R_UNKNOWN_NID
 120

	)

618 
	#OCSP_R_UNSUPPORTED_REQUESTORNAME_TYPE
 129

	)

620 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/sha.h

59 #i‚de‡
HEADER_SHA_H


60 
	#HEADER_SHA_H


	)

62 
	~<°ddef.h
>

63 
	~<›ís¶/e_os2.h
>

64 
	~<°ddef.h
>

66 #ifde‡ 
__˝lu•lus


70 #i‡
deföed
(
OPENSSL_NO_SHA
Ë|| (deföed(
OPENSSL_NO_SHA0
Ë&& deföed(
OPENSSL_NO_SHA1
))

71 #îr‹ 
SHA
 
is
 
dißbÀd
.

74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_SHA_SIZE_T
 
size_t


	)

85 #i‡
deföed
(
__LP32__
)

86 
	#SHA_LONG
 

	)

87 #ñi‡
deföed
(
OPENSSL_SYS_CRAY
Ë|| deföed(
__ILP64__
)

88 
	#SHA_LONG
 

	)

89 
	#SHA_LONG_LOG2
 3

	)

91 
	#SHA_LONG
 

	)

94 
	#SHA_LBLOCK
 16

	)

95 
	#SHA_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

98 
	#SHA_LAST_BLOCK
 (
SHA_CBLOCK
-8)

	)

99 
	#SHA_DIGEST_LENGTH
 20

	)

101 
	sSHA°©e_°


103 
SHA_LONG
 
h0
,
h1
,
h2
,
h3
,
h4
;

104 
SHA_LONG
 
Nl
,
Nh
;

105 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

106 
num
;

107 } 
	tSHA_CTX
;

109 #i‚de‡
OPENSSL_NO_SHA0


110 #ifde‡
OPENSSL_FIPS


111 
¥iv©e_SHA_Inô
(
SHA_CTX
 *
c
);

113 
SHA_Inô
(
SHA_CTX
 *
c
);

114 
SHA_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

115 
SHA_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

116 *
SHA
(c⁄° *
d
, 
size_t
 
n
, *
md
);

117 
SHA_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

119 #i‚de‡
OPENSSL_NO_SHA1


120 #ifde‡
OPENSSL_FIPS


121 
¥iv©e_SHA1_Inô
(
SHA_CTX
 *
c
);

123 
SHA1_Inô
(
SHA_CTX
 *
c
);

124 
SHA1_Upd©e
(
SHA_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

125 
SHA1_FöÆ
(*
md
, 
SHA_CTX
 *
c
);

126 *
SHA1
(c⁄° *
d
, 
size_t
 
n
, *
md
);

127 
SHA1_Tønsf‹m
(
SHA_CTX
 *
c
, c⁄° *
d©a
);

130 
	#SHA256_CBLOCK
 (
SHA_LBLOCK
*4Ë

	)

133 
	#SHA224_DIGEST_LENGTH
 28

	)

134 
	#SHA256_DIGEST_LENGTH
 32

	)

136 
	sSHA256°©e_°


138 
SHA_LONG
 
h
[8];

139 
SHA_LONG
 
Nl
,
Nh
;

140 
SHA_LONG
 
d©a
[
SHA_LBLOCK
];

141 
num
,
md_Àn
;

142 } 
	tSHA256_CTX
;

144 #i‚de‡
OPENSSL_NO_SHA256


145 #ifde‡
OPENSSL_FIPS


146 
¥iv©e_SHA224_Inô
(
SHA256_CTX
 *
c
);

147 
¥iv©e_SHA256_Inô
(
SHA256_CTX
 *
c
);

149 
SHA224_Inô
(
SHA256_CTX
 *
c
);

150 
SHA224_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

151 
SHA224_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

152 *
SHA224
(c⁄° *
d
, 
size_t
 
n
,*
md
);

153 
SHA256_Inô
(
SHA256_CTX
 *
c
);

154 
SHA256_Upd©e
(
SHA256_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

155 
SHA256_FöÆ
(*
md
, 
SHA256_CTX
 *
c
);

156 *
SHA256
(c⁄° *
d
, 
size_t
 
n
,*
md
);

157 
SHA256_Tønsf‹m
(
SHA256_CTX
 *
c
, c⁄° *
d©a
);

160 
	#SHA384_DIGEST_LENGTH
 48

	)

161 
	#SHA512_DIGEST_LENGTH
 64

	)

163 #i‚de‡
OPENSSL_NO_SHA512


169 
	#SHA512_CBLOCK
 (
SHA_LBLOCK
*8Ë

	)

172 #i‡(
deföed
(
_WIN32
Ë|| deföed(
_WIN64
)Ë&& !deföed(
__MINGW32__
)

173 
	#SHA_LONG64
 
__öt64


	)

174 
	#U64
(
C
ËC##
UI64


	)

175 #ñi‡
deföed
(
__¨ch64__
)

176 
	#SHA_LONG64
 

	)

177 
	#U64
(
C
ËC##
UL


	)

179 
	#SHA_LONG64
 

	)

180 
	#U64
(
C
ËC##
ULL


	)

183 
	sSHA512°©e_°


185 
SHA_LONG64
 
h
[8];

186 
SHA_LONG64
 
Nl
,
Nh
;

188 
SHA_LONG64
 
d
[
SHA_LBLOCK
];

189 
p
[
SHA512_CBLOCK
];

190 } 
u
;

191 
num
,
md_Àn
;

192 } 
	tSHA512_CTX
;

195 #i‚de‡
OPENSSL_NO_SHA512


196 #ifde‡
OPENSSL_FIPS


197 
¥iv©e_SHA384_Inô
(
SHA512_CTX
 *
c
);

198 
¥iv©e_SHA512_Inô
(
SHA512_CTX
 *
c
);

200 
SHA384_Inô
(
SHA512_CTX
 *
c
);

201 
SHA384_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

202 
SHA384_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

203 *
SHA384
(c⁄° *
d
, 
size_t
 
n
,*
md
);

204 
SHA512_Inô
(
SHA512_CTX
 *
c
);

205 
SHA512_Upd©e
(
SHA512_CTX
 *
c
, c⁄° *
d©a
, 
size_t
 
Àn
);

206 
SHA512_FöÆ
(*
md
, 
SHA512_CTX
 *
c
);

207 *
SHA512
(c⁄° *
d
, 
size_t
 
n
,*
md
);

208 
SHA512_Tønsf‹m
(
SHA512_CTX
 *
c
, c⁄° *
d©a
);

211 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl.h

143 #i‚de‡
HEADER_SSL_H


144 
	#HEADER_SSL_H


	)

146 
	~<›ís¶/e_os2.h
>

148 #i‚de‡
OPENSSL_NO_COMP


149 
	~<›ís¶/comp.h
>

151 #i‚de‡
OPENSSL_NO_BIO


152 
	~<›ís¶/bio.h
>

154 #i‚de‡
OPENSSL_NO_DEPRECATED


155 #i‚de‡
OPENSSL_NO_X509


156 
	~<›ís¶/x509.h
>

158 
	~<›ís¶/¸y±o.h
>

159 
	~<›ís¶/lhash.h
>

160 
	~<›ís¶/buf„r.h
>

162 
	~<›ís¶/≥m.h
>

163 
	~<›ís¶/hmac.h
>

165 
	~<›ís¶/ks¶.h
>

166 
	~<›ís¶/ß„°ack.h
>

167 
	~<›ís¶/symhacks.h
>

169 #ifde‡ 
__˝lu•lus


177 
	#SSL_SESSION_ASN1_VERSION
 0x0001

	)

180 
	#SSL_TXT_NULL_WITH_MD5
 
SSL2_TXT_NULL_WITH_MD5


	)

181 
	#SSL_TXT_RC4_128_WITH_MD5
 
SSL2_TXT_RC4_128_WITH_MD5


	)

182 
	#SSL_TXT_RC4_128_EXPORT40_WITH_MD5
 
SSL2_TXT_RC4_128_EXPORT40_WITH_MD5


	)

183 
	#SSL_TXT_RC2_128_CBC_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_WITH_MD5


	)

184 
	#SSL_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 
SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5


	)

185 
	#SSL_TXT_IDEA_128_CBC_WITH_MD5
 
SSL2_TXT_IDEA_128_CBC_WITH_MD5


	)

186 
	#SSL_TXT_DES_64_CBC_WITH_MD5
 
SSL2_TXT_DES_64_CBC_WITH_MD5


	)

187 
	#SSL_TXT_DES_64_CBC_WITH_SHA
 
SSL2_TXT_DES_64_CBC_WITH_SHA


	)

188 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_MD5
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5


	)

189 
	#SSL_TXT_DES_192_EDE3_CBC_WITH_SHA
 
SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA


	)

193 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

194 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

195 
	#SSL_TXT_KRB5_RC4_128_SHA
 
SSL3_TXT_KRB5_RC4_128_SHA


	)

196 
	#SSL_TXT_KRB5_IDEA_128_CBC_SHA
 
SSL3_TXT_KRB5_IDEA_128_CBC_SHA


	)

197 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

198 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

199 
	#SSL_TXT_KRB5_RC4_128_MD5
 
SSL3_TXT_KRB5_RC4_128_MD5


	)

200 
	#SSL_TXT_KRB5_IDEA_128_CBC_MD5
 
SSL3_TXT_KRB5_IDEA_128_CBC_MD5


	)

202 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

203 
	#SSL_TXT_KRB5_RC2_40_CBC_SHA
 
SSL3_TXT_KRB5_RC2_40_CBC_SHA


	)

204 
	#SSL_TXT_KRB5_RC4_40_SHA
 
SSL3_TXT_KRB5_RC4_40_SHA


	)

205 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

206 
	#SSL_TXT_KRB5_RC2_40_CBC_MD5
 
SSL3_TXT_KRB5_RC2_40_CBC_MD5


	)

207 
	#SSL_TXT_KRB5_RC4_40_MD5
 
SSL3_TXT_KRB5_RC4_40_MD5


	)

209 
	#SSL_TXT_KRB5_DES_40_CBC_SHA
 
SSL3_TXT_KRB5_DES_40_CBC_SHA


	)

210 
	#SSL_TXT_KRB5_DES_40_CBC_MD5
 
SSL3_TXT_KRB5_DES_40_CBC_MD5


	)

211 
	#SSL_TXT_KRB5_DES_64_CBC_SHA
 
SSL3_TXT_KRB5_DES_64_CBC_SHA


	)

212 
	#SSL_TXT_KRB5_DES_64_CBC_MD5
 
SSL3_TXT_KRB5_DES_64_CBC_MD5


	)

213 
	#SSL_TXT_KRB5_DES_192_CBC3_SHA
 
SSL3_TXT_KRB5_DES_192_CBC3_SHA


	)

214 
	#SSL_TXT_KRB5_DES_192_CBC3_MD5
 
SSL3_TXT_KRB5_DES_192_CBC3_MD5


	)

215 
	#SSL_MAX_KRB5_PRINCIPAL_LENGTH
 256

	)

217 
	#SSL_MAX_SSL_SESSION_ID_LENGTH
 32

	)

218 
	#SSL_MAX_SID_CTX_LENGTH
 32

	)

220 
	#SSL_MIN_RSA_MODULUS_LENGTH_IN_BYTES
 (512/8)

	)

221 
	#SSL_MAX_KEY_ARG_LENGTH
 8

	)

222 
	#SSL_MAX_MASTER_KEY_LENGTH
 48

	)

227 
	#SSL_TXT_EXP40
 "EXPORT40"

	)

228 
	#SSL_TXT_EXP56
 "EXPORT56"

	)

229 
	#SSL_TXT_LOW
 "LOW"

	)

230 
	#SSL_TXT_MEDIUM
 "MEDIUM"

	)

231 
	#SSL_TXT_HIGH
 "HIGH"

	)

232 
	#SSL_TXT_FIPS
 "FIPS"

	)

234 
	#SSL_TXT_kFZA
 "kFZA"

	)

235 
	#SSL_TXT_aFZA
 "aFZA"

	)

236 
	#SSL_TXT_eFZA
 "eFZA"

	)

237 
	#SSL_TXT_FZA
 "FZA"

	)

239 
	#SSL_TXT_aNULL
 "aNULL"

	)

240 
	#SSL_TXT_eNULL
 "eNULL"

	)

241 
	#SSL_TXT_NULL
 "NULL"

	)

243 
	#SSL_TXT_kRSA
 "kRSA"

	)

244 
	#SSL_TXT_kDHr
 "kDHr"

	)

245 
	#SSL_TXT_kDHd
 "kDHd"

	)

246 
	#SSL_TXT_kDH
 "kDH"

	)

247 
	#SSL_TXT_kEDH
 "kEDH"

	)

248 
	#SSL_TXT_kKRB5
 "kKRB5"

	)

249 
	#SSL_TXT_kECDHr
 "kECDHr"

	)

250 
	#SSL_TXT_kECDHe
 "kECDHe"

	)

251 
	#SSL_TXT_kECDH
 "kECDH"

	)

252 
	#SSL_TXT_kEECDH
 "kEECDH"

	)

253 
	#SSL_TXT_kPSK
 "kPSK"

	)

254 
	#SSL_TXT_kGOST
 "kGOST"

	)

255 
	#SSL_TXT_kSRP
 "kSRP"

	)

257 
	#SSL_TXT_aRSA
 "aRSA"

	)

258 
	#SSL_TXT_aDSS
 "aDSS"

	)

259 
	#SSL_TXT_aDH
 "aDH"

	)

260 
	#SSL_TXT_aECDH
 "aECDH"

	)

261 
	#SSL_TXT_aKRB5
 "aKRB5"

	)

262 
	#SSL_TXT_aECDSA
 "aECDSA"

	)

263 
	#SSL_TXT_aPSK
 "aPSK"

	)

264 
	#SSL_TXT_aGOST94
 "aGOST94"

	)

265 
	#SSL_TXT_aGOST01
 "aGOST01"

	)

266 
	#SSL_TXT_aGOST
 "aGOST"

	)

267 
	#SSL_TXT_aSRP
 "aSRP"

	)

269 
	#SSL_TXT_DSS
 "DSS"

	)

270 
	#SSL_TXT_DH
 "DH"

	)

271 
	#SSL_TXT_EDH
 "EDH"

	)

272 
	#SSL_TXT_ADH
 "ADH"

	)

273 
	#SSL_TXT_RSA
 "RSA"

	)

274 
	#SSL_TXT_ECDH
 "ECDH"

	)

275 
	#SSL_TXT_EECDH
 "EECDH"

	)

276 
	#SSL_TXT_AECDH
 "AECDH"

	)

277 
	#SSL_TXT_ECDSA
 "ECDSA"

	)

278 
	#SSL_TXT_KRB5
 "KRB5"

	)

279 
	#SSL_TXT_PSK
 "PSK"

	)

280 
	#SSL_TXT_SRP
 "SRP"

	)

282 
	#SSL_TXT_DES
 "DES"

	)

283 
	#SSL_TXT_3DES
 "3DES"

	)

284 
	#SSL_TXT_RC4
 "RC4"

	)

285 
	#SSL_TXT_RC2
 "RC2"

	)

286 
	#SSL_TXT_IDEA
 "IDEA"

	)

287 
	#SSL_TXT_SEED
 "SEED"

	)

288 
	#SSL_TXT_AES128
 "AES128"

	)

289 
	#SSL_TXT_AES256
 "AES256"

	)

290 
	#SSL_TXT_AES
 "AES"

	)

291 
	#SSL_TXT_AES_GCM
 "AESGCM"

	)

292 
	#SSL_TXT_CAMELLIA128
 "CAMELLIA128"

	)

293 
	#SSL_TXT_CAMELLIA256
 "CAMELLIA256"

	)

294 
	#SSL_TXT_CAMELLIA
 "CAMELLIA"

	)

296 
	#SSL_TXT_MD5
 "MD5"

	)

297 
	#SSL_TXT_SHA1
 "SHA1"

	)

298 
	#SSL_TXT_SHA
 "SHA"

	)

299 
	#SSL_TXT_GOST94
 "GOST94"

	)

300 
	#SSL_TXT_GOST89MAC
 "GOST89MAC"

	)

301 
	#SSL_TXT_SHA256
 "SHA256"

	)

302 
	#SSL_TXT_SHA384
 "SHA384"

	)

304 
	#SSL_TXT_SSLV2
 "SSLv2"

	)

305 
	#SSL_TXT_SSLV3
 "SSLv3"

	)

306 
	#SSL_TXT_TLSV1
 "TLSv1"

	)

307 
	#SSL_TXT_TLSV1_1
 "TLSv1.1"

	)

308 
	#SSL_TXT_TLSV1_2
 "TLSv1.2"

	)

310 
	#SSL_TXT_EXP
 "EXP"

	)

311 
	#SSL_TXT_EXPORT
 "EXPORT"

	)

313 
	#SSL_TXT_ALL
 "ALL"

	)

329 
	#SSL_TXT_CMPALL
 "COMPLEMENTOFALL"

	)

330 
	#SSL_TXT_CMPDEF
 "COMPLEMENTOFDEFAULT"

	)

335 
	#SSL_DEFAULT_CIPHER_LIST
 "ALL:!EXPORT:!aNULL:!eNULL:!SSLv2"

	)

344 
	#SSL_SENT_SHUTDOWN
 1

	)

345 
	#SSL_RECEIVED_SHUTDOWN
 2

	)

347 #ifde‡
__˝lu•lus


351 #ifde‡ 
__˝lu•lus


355 #i‡(
deföed
(
OPENSSL_NO_RSA
Ë|| deföed(
OPENSSL_NO_MD5
)Ë&& !deföed(
OPENSSL_NO_SSL2
)

356 
	#OPENSSL_NO_SSL2


	)

359 
	#SSL_FILETYPE_ASN1
 
X509_FILETYPE_ASN1


	)

360 
	#SSL_FILETYPE_PEM
 
X509_FILETYPE_PEM


	)

365 
s¶_°
 *
	ts¶_¸ock_°
;

366 
és_£ssi⁄_tickë_ext_°
 
	tTLS_SESSION_TICKET_EXT
;

367 
s¶_mëhod_°
 
	tSSL_METHOD
;

368 
s¶_cùhî_°
 
	tSSL_CIPHER
;

369 
s¶_£ssi⁄_°
 
	tSSL_SESSION
;

371 
DECLARE_STACK_OF
(
SSL_CIPHER
)

374 
	s§ç_¥Ÿe˘i⁄_¥ofûe_°


376 c⁄° *
«me
;

377 
id
;

378 } 
	tSRTP_PROTECTION_PROFILE
;

380 
DECLARE_STACK_OF
(
SRTP_PROTECTION_PROFILE
)

382 (*
és_£ssi⁄_tickë_ext_cb_‚
)(
	tSSL
 *
	ts
, c⁄° *
	td©a
, 
	tÀn
, *
	t¨g
);

383 (*
és_£ssi⁄_£¸ë_cb_‚
)(
	tSSL
 *
	ts
, *
	t£¸ë
, *
	t£¸ë_Àn
, 
	tSTACK_OF
(
	tSSL_CIPHER
Ë*
	t≥î_cùhîs
, SSL_CIPHER **
	tcùhî
, *
	t¨g
);

386 #i‚de‡
OPENSSL_NO_SSL_INTERN


389 
	ss¶_cùhî_°


391 
vÆid
;

392 c⁄° *
«me
;

393 
id
;

396 
Æg‹ôhm_mkey
;

397 
Æg‹ôhm_auth
;

398 
Æg‹ôhm_íc
;

399 
Æg‹ôhm_mac
;

400 
Æg‹ôhm_s¶
;

402 
Ægo_°ªngth
;

403 
Æg‹ôhm2
;

404 
°ªngth_bôs
;

405 
Æg_bôs
;

410 
	ss¶_mëhod_°


412 
vîsi⁄
;

413 (*
s¶_√w
)(
SSL
 *
s
);

414 (*
s¶_˛ór
)(
SSL
 *
s
);

415 (*
s¶_‰ì
)(
SSL
 *
s
);

416 (*
s¶_ac˚±
)(
SSL
 *
s
);

417 (*
s¶_c⁄√˘
)(
SSL
 *
s
);

418 (*
s¶_ªad
)(
SSL
 *
s
,*
buf
,
Àn
);

419 (*
s¶_≥ek
)(
SSL
 *
s
,*
buf
,
Àn
);

420 (*
s¶_wrôe
)(
SSL
 *
s
,c⁄° *
buf
,
Àn
);

421 (*
s¶_shutdown
)(
SSL
 *
s
);

422 (*
s¶_ª√gŸüã
)(
SSL
 *
s
);

423 (*
s¶_ª√gŸüã_check
)(
SSL
 *
s
);

424 (*
s¶_gë_mesßge
)(
SSL
 *
s
, 
°1
, 
°n
, 
mt
, 

425 
max
, *
ok
);

426 (*
s¶_ªad_byãs
)(
SSL
 *
s
, 
ty≥
, *
buf
, 
Àn
,

427 
≥ek
);

428 (*
s¶_wrôe_byãs
)(
SSL
 *
s
, 
ty≥
, c⁄° *
buf_
, 
Àn
);

429 (*
s¶_di•©ch_Æît
)(
SSL
 *
s
);

430 (*
s¶_˘æ
)(
SSL
 *
s
,
cmd
,
œrg
,*
∑rg
);

431 (*
s¶_˘x_˘æ
)(
SSL_CTX
 *
˘x
,
cmd
,
œrg
,*
∑rg
);

432 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî_by_ch¨
)(c⁄° *
±r
);

433 (*
put_cùhî_by_ch¨
)(c⁄° 
SSL_CIPHER
 *
cùhî
,*
±r
);

434 (*
s¶_≥ndög
)(c⁄° 
SSL
 *
s
);

435 (*
num_cùhîs
)();

436 c⁄° 
SSL_CIPHER
 *(*
gë_cùhî
)(
ncùhî
);

437 c⁄° 
s¶_mëhod_°
 *(*
gë_s¶_mëhod
)(
vîsi⁄
);

438 (*
gë_timeout
)();

439 
s¶3_íc_mëhod
 *
s¶3_íc
;

440 (*
s¶_vîsi⁄
)();

441 (*
s¶_ˇŒback_˘æ
)(
SSL
 *
s
, 
cb_id
, (*
Â
)());

442 (*
s¶_˘x_ˇŒback_˘æ
)(
SSL_CTX
 *
s
, 
cb_id
, (*
Â
)());

470 
	ss¶_£ssi⁄_°


472 
s¶_vîsi⁄
;

476 
key_¨g_Àngth
;

477 
key_¨g
[
SSL_MAX_KEY_ARG_LENGTH
];

478 
ma°î_key_Àngth
;

479 
ma°î_key
[
SSL_MAX_MASTER_KEY_LENGTH
];

481 
£ssi⁄_id_Àngth
;

482 
£ssi⁄_id
[
SSL_MAX_SSL_SESSION_ID_LENGTH
];

486 
sid_˘x_Àngth
;

487 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

489 #i‚de‡
OPENSSL_NO_KRB5


490 
krb5_˛õ¡_¥öc_Àn
;

491 
krb5_˛õ¡_¥öc
[
SSL_MAX_KRB5_PRINCIPAL_LENGTH
];

493 #i‚de‡
OPENSSL_NO_PSK


494 *
psk_idítôy_höt
;

495 *
psk_idítôy
;

497 
nŸ_ªsumabÀ
;

500 
£ss_˚π_°
 *
£ss_˚π
;

506 
X509
 *
≥î
;

509 
vîify_ªsu…
;

511 
ª„ªn˚s
;

512 
timeout
;

513 
time
;

515 
com¥ess_mëh
;

517 c⁄° 
SSL_CIPHER
 *
cùhî
;

518 
cùhî_id
;

522 
STACK_OF
(
SSL_CIPHER
Ë*
cùhîs
;

524 
CRYPTO_EX_DATA
 
ex_d©a
;

528 
s¶_£ssi⁄_°
 *
¥ev
,*
√xt
;

529 #i‚de‡
OPENSSL_NO_TLSEXT


530 *
é£xt_ho°«me
;

531 #i‚de‡
OPENSSL_NO_EC


532 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

533 *
é£xt_e˝oötf‹m©li°
;

534 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

535 *
é£xt_ñlùticcurvñi°
;

538 *
é£xt_tick
;

539 
size_t
 
é£xt_tickÀn
;

540 
é£xt_tick_li„time_höt
;

542 #i‚de‡
OPENSSL_NO_SRP


543 *
§p_u£∫ame
;

549 
	#SSL_OP_MICROSOFT_SESS_ID_BUG
 0x00000001L

	)

550 
	#SSL_OP_NETSCAPE_CHALLENGE_BUG
 0x00000002L

	)

552 
	#SSL_OP_LEGACY_SERVER_CONNECT
 0x00000004L

	)

553 
	#SSL_OP_NETSCAPE_REUSE_CIPHER_CHANGE_BUG
 0x00000008L

	)

554 
	#SSL_OP_SSLREF2_REUSE_CERT_TYPE_BUG
 0x00000010L

	)

555 
	#SSL_OP_MICROSOFT_BIG_SSLV3_BUFFER
 0x00000020L

	)

556 
	#SSL_OP_MSIE_SSLV2_RSA_PADDING
 0x00000040L

	)

557 
	#SSL_OP_SSLEAY_080_CLIENT_DH_BUG
 0x00000080L

	)

558 
	#SSL_OP_TLS_D5_BUG
 0x00000100L

	)

559 
	#SSL_OP_TLS_BLOCK_PADDING_BUG
 0x00000200L

	)

566 
	#SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS
 0x00000800L

	)

570 
	#SSL_OP_ALL
 0x80000BFFL

	)

573 
	#SSL_OP_NO_QUERY_MTU
 0x00001000L

	)

575 
	#SSL_OP_COOKIE_EXCHANGE
 0x00002000L

	)

577 
	#SSL_OP_NO_TICKET
 0x00004000L

	)

579 
	#SSL_OP_CISCO_ANYCONNECT
 0x00008000L

	)

582 
	#SSL_OP_NO_SESSION_RESUMPTION_ON_RENEGOTIATION
 0x00010000L

	)

584 
	#SSL_OP_NO_COMPRESSION
 0x00020000L

	)

586 
	#SSL_OP_ALLOW_UNSAFE_LEGACY_RENEGOTIATION
 0x00040000L

	)

588 
	#SSL_OP_SINGLE_ECDH_USE
 0x00080000L

	)

590 
	#SSL_OP_SINGLE_DH_USE
 0x00100000L

	)

592 
	#SSL_OP_EPHEMERAL_RSA
 0x0

	)

595 
	#SSL_OP_CIPHER_SERVER_PREFERENCE
 0x00400000L

	)

600 
	#SSL_OP_TLS_ROLLBACK_BUG
 0x00800000L

	)

602 
	#SSL_OP_NO_SSLv2
 0x01000000L

	)

603 
	#SSL_OP_NO_SSLv3
 0x02000000L

	)

604 
	#SSL_OP_NO_TLSv1
 0x04000000L

	)

605 
	#SSL_OP_NO_TLSv1_2
 0x08000000L

	)

606 
	#SSL_OP_NO_TLSv1_1
 0x10000000L

	)

613 
	#SSL_OP_PKCS1_CHECK_1
 0x0

	)

614 
	#SSL_OP_PKCS1_CHECK_2
 0x0

	)

616 
	#SSL_OP_NETSCAPE_CA_DN_BUG
 0x20000000L

	)

617 
	#SSL_OP_NETSCAPE_DEMO_CIPHER_CHANGE_BUG
 0x40000000L

	)

622 
	#SSL_OP_CRYPTOPRO_TLSEXT_BUG
 0x80000000L

	)

626 
	#SSL_MODE_ENABLE_PARTIAL_WRITE
 0x00000001L

	)

631 
	#SSL_MODE_ACCEPT_MOVING_WRITE_BUFFER
 0x00000002L

	)

634 
	#SSL_MODE_AUTO_RETRY
 0x00000004L

	)

636 
	#SSL_MODE_NO_AUTO_CHAIN
 0x00000008L

	)

640 
	#SSL_MODE_RELEASE_BUFFERS
 0x00000010L

	)

645 
	#SSL_MODE_SEND_FALLBACK_SCSV
 0x00000080L

	)

650 
	#SSL_CTX_£t_›ti⁄s
(
˘x
,
›
) \

651 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

652 
	#SSL_CTX_˛ór_›ti⁄s
(
˘x
,
›
) \

653 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

654 
	#SSL_CTX_gë_›ti⁄s
(
˘x
) \

655 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

656 
	#SSL_£t_›ti⁄s
(
s¶
,
›
) \

657 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,(
›
),
NULL
)

	)

658 
	#SSL_˛ór_›ti⁄s
(
s¶
,
›
) \

659 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_OPTIONS
,(
›
),
NULL
)

	)

660 
	#SSL_gë_›ti⁄s
(
s¶
) \

661 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_OPTIONS
,0,
NULL
)

	)

663 
	#SSL_CTX_£t_mode
(
˘x
,
›
) \

664 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

665 
	#SSL_CTX_˛ór_mode
(
˘x
,
›
) \

666 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

667 
	#SSL_CTX_gë_mode
(
˘x
) \

668 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_MODE
,0,
NULL
)

	)

669 
	#SSL_˛ór_mode
(
s¶
,
›
) \

670 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_MODE
,(
›
),
NULL
)

	)

671 
	#SSL_£t_mode
(
s¶
,
›
) \

672 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,(
›
),
NULL
)

	)

673 
	#SSL_gë_mode
(
s¶
) \

674 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_MODE
,0,
NULL
)

	)

675 
	#SSL_£t_mtu
(
s¶
, 
mtu
) \

676 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_MTU
,(
mtu
),
NULL
)

	)

678 
	#SSL_gë_£cuª_ª√gŸüti⁄_suµ‹t
(
s¶
) \

679 
	`SSL_˘æ
((
s¶
), 
SSL_CTRL_GET_RI_SUPPORT
, 0, 
NULL
)

	)

681 #i‚de‡
OPENSSL_NO_HEARTBEATS


682 
	#SSL_hóπbót
(
s¶
) \

683 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
,0,
NULL
)

	)

686 
SSL_CTX_£t_msg_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
));

687 
SSL_£t_msg_ˇŒback
(
SSL
 *
s¶
, (*
cb
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, SSL *s¶, *
¨g
));

688 
	#SSL_CTX_£t_msg_ˇŒback_¨g
(
˘x
, 
¨g
Ë
	`SSL_CTX_˘æ
((˘x), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

689 
	#SSL_£t_msg_ˇŒback_¨g
(
s¶
, 
¨g
Ë
	`SSL_˘æ
((s¶), 
SSL_CTRL_SET_MSG_CALLBACK_ARG
, 0, (¨g))

	)

691 #i‚de‡
OPENSSL_NO_SRP


693 #i‚de‡
OPENSSL_NO_SSL_INTERN


695 
	s§p_˘x_°


698 *
SRP_cb_¨g
;

700 (*
TLS_ext_§p_u£∫ame_ˇŒback
)(
SSL
 *, *, *);

702 (*
SRP_vîify_∑øm_ˇŒback
)(
SSL
 *, *);

704 *(*
SRP_give_§p_˛õ¡_pwd_ˇŒback
)(
SSL
 *, *);

706 *
logö
;

707 
BIGNUM
 *
N
,*
g
,*
s
,*
B
,*
A
;

708 
BIGNUM
 *
a
,*
b
,*
v
;

709 *
öfo
;

710 
°ªngth
;

712 
§p_Mask
;

713 } 
	tSRP_CTX
;

718 
SSL_SRP_CTX_öô
(
SSL
 *
s
);

719 
SSL_CTX_SRP_CTX_öô
(
SSL_CTX
 *
˘x
);

720 
SSL_SRP_CTX_‰ì
(
SSL
 *
˘x
);

721 
SSL_CTX_SRP_CTX_‰ì
(
SSL_CTX
 *
˘x
);

722 
SSL_§p_£rvî_∑øm_wôh_u£∫ame
(
SSL
 *
s
, *
ad
);

723 
SRP_gíî©e_£rvî_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

724 
SRP_CÆc_A_∑øm
(
SSL
 *
s
);

725 
SRP_gíî©e_˛õ¡_ma°î_£¸ë
(
SSL
 *
s
,*
ma°î_key
);

729 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë&& !deföed(
OPENSSL_SYS_WIN32
)

730 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*30

	)

732 
	#SSL_MAX_CERT_LIST_DEFAULT
 1024*100

	)

735 
	#SSL_SESSION_CACHE_MAX_SIZE_DEFAULT
 (1024*20)

	)

750 (*
GEN_SESSION_CB
)(c⁄° 
	tSSL
 *
	ts¶
, *
	tid
,

751 *
	tid_Àn
);

753 
s¶_comp_°
 
	tSSL_COMP
;

755 #i‚de‡
OPENSSL_NO_SSL_INTERN


757 
	ss¶_comp_°


759 
id
;

760 c⁄° *
«me
;

761 #i‚de‡
OPENSSL_NO_COMP


762 
COMP_METHOD
 *
mëhod
;

764 *
mëhod
;

768 
DECLARE_STACK_OF
(
SSL_COMP
)

769 
DECLARE_LHASH_OF
(
SSL_SESSION
);

771 
	ss¶_˘x_°


773 c⁄° 
SSL_METHOD
 *
mëhod
;

775 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

777 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

779 
x509_°‹e_°
 *
˚π_°‹e
;

780 
LHASH_OF
(
SSL_SESSION
Ë*
£ssi⁄s
;

783 
£ssi⁄_ˇche_size
;

784 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_hód
;

785 
s¶_£ssi⁄_°
 *
£ssi⁄_ˇche_èû
;

792 
£ssi⁄_ˇche_mode
;

797 
£ssi⁄_timeout
;

807 (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
);

808 (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *
˘x
,
SSL_SESSION
 *
£ss
);

809 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
,

810 *
d©a
,
Àn
,*
c›y
);

814 
£ss_c⁄√˘
;

815 
£ss_c⁄√˘_ª√gŸüã
;

816 
£ss_c⁄√˘_good
;

817 
£ss_ac˚±
;

818 
£ss_ac˚±_ª√gŸüã
;

819 
£ss_ac˚±_good
;

820 
£ss_miss
;

821 
£ss_timeout
;

822 
£ss_ˇche_fuŒ
;

823 
£ss_hô
;

824 
£ss_cb_hô
;

830 } 
°©s
;

832 
ª„ªn˚s
;

835 (*
≠p_vîify_ˇŒback
)(
X509_STORE_CTX
 *, *);

836 *
≠p_vîify_¨g
;

841 
≥m_∑ssw‹d_cb
 *
deÁu…_∑sswd_ˇŒback
;

844 *
deÁu…_∑sswd_ˇŒback_u£rd©a
;

847 (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

850 (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

851 *
cookõ_Àn
);

854 (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
,

855 
cookõ_Àn
);

857 
CRYPTO_EX_DATA
 
ex_d©a
;

859 c⁄° 
EVP_MD
 *
rß_md5
;

860 c⁄° 
EVP_MD
 *
md5
;

861 c⁄° 
EVP_MD
 *
sha1
;

863 
STACK_OF
(
X509
Ë*
exåa_˚πs
;

864 
STACK_OF
(
SSL_COMP
Ë*
comp_mëhods
;

869 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

872 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

877 
›ti⁄s
;

878 
mode
;

879 
max_˚π_li°
;

881 
˚π_°
 *
˚π
;

882 
ªad_ahód
;

885 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

886 *
msg_ˇŒback_¨g
;

888 
vîify_mode
;

889 
sid_˘x_Àngth
;

890 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

891 (*
deÁu…_vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

894 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

896 
X509_VERIFY_PARAM
 *
∑øm
;

899 
puΩo£
;

900 
åu°
;

903 
quõt_shutdown
;

909 
max_£nd_‰agmít
;

911 #i‚de‡
OPENSSL_ENGINE


914 
ENGINE
 *
˛õ¡_˚π_ígöe
;

917 #i‚de‡
OPENSSL_NO_TLSEXT


919 (*
é£xt_£rvî«me_ˇŒback
)(
SSL
*, *, *);

920 *
é£xt_£rvî«me_¨g
;

922 
é£xt_tick_key_«me
[16];

923 
é£xt_tick_hmac_key
[16];

924 
é£xt_tick_´s_key
[16];

926 (*
é£xt_tickë_key_cb
)(
SSL
 *
s¶
,

927 *
«me
, *
iv
,

928 
EVP_CIPHER_CTX
 *
e˘x
,

929 
HMAC_CTX
 *
h˘x
, 
íc
);

933 (*
é£xt_°©us_cb
)(
SSL
 *
s¶
, *
¨g
);

934 *
é£xt_°©us_¨g
;

936 (*
é£xt_›aque_¥f_öput_ˇŒback
)(
SSL
 *, *
≥îöput
, 
size_t
 
Àn
, *
¨g
);

937 *
é£xt_›aque_¥f_öput_ˇŒback_¨g
;

940 #i‚de‡
OPENSSL_NO_PSK


941 *
psk_idítôy_höt
;

942 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

943 
max_idítôy_Àn
, *
psk
,

944 
max_psk_Àn
);

945 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

946 *
psk
, 
max_psk_Àn
);

949 #i‚de‡
OPENSSL_NO_BUF_FREELISTS


950 
	#SSL_MAX_BUF_FREELIST_LEN_DEFAULT
 32

	)

951 
‰ìli°_max_Àn
;

952 
s¶3_buf_‰ìli°_°
 *
wbuf_‰ìli°
;

953 
s¶3_buf_‰ìli°_°
 *
rbuf_‰ìli°
;

955 #i‚de‡
OPENSSL_NO_SRP


956 
SRP_CTX
 
§p_˘x
;

959 #i‚de‡
OPENSSL_NO_TLSEXT


960 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


966 (*
√xt_¥Ÿos_advîti£d_cb
)(
SSL
 *
s
, c⁄° **
buf
,

967 *
Àn
, *
¨g
);

968 *
√xt_¥Ÿos_advîti£d_cb_¨g
;

971 (*
√xt_¥Ÿo_£À˘_cb
)(
SSL
 *
s
, **
out
,

972 *
ouéí
,

973 c⁄° *
ö
,

974 
öÀn
,

975 *
¨g
);

976 *
√xt_¥Ÿo_£À˘_cb_¨g
;

979 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

985 
	#SSL_SESS_CACHE_OFF
 0x0000

	)

986 
	#SSL_SESS_CACHE_CLIENT
 0x0001

	)

987 
	#SSL_SESS_CACHE_SERVER
 0x0002

	)

988 
	#SSL_SESS_CACHE_BOTH
 (
SSL_SESS_CACHE_CLIENT
|
SSL_SESS_CACHE_SERVER
)

	)

989 
	#SSL_SESS_CACHE_NO_AUTO_CLEAR
 0x0080

	)

991 
	#SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
 0x0100

	)

992 
	#SSL_SESS_CACHE_NO_INTERNAL_STORE
 0x0200

	)

993 
	#SSL_SESS_CACHE_NO_INTERNAL
 \

994 (
SSL_SESS_CACHE_NO_INTERNAL_LOOKUP
|
SSL_SESS_CACHE_NO_INTERNAL_STORE
)

	)

996 
LHASH_OF
(
SSL_SESSION
Ë*
SSL_CTX_£ssi⁄s
(
SSL_CTX
 *
˘x
);

997 
	#SSL_CTX_£ss_numbî
(
˘x
) \

998 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_NUMBER
,0,
NULL
)

	)

999 
	#SSL_CTX_£ss_c⁄√˘
(
˘x
) \

1000 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT
,0,
NULL
)

	)

1001 
	#SSL_CTX_£ss_c⁄√˘_good
(
˘x
) \

1002 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_GOOD
,0,
NULL
)

	)

1003 
	#SSL_CTX_£ss_c⁄√˘_ª√gŸüã
(
˘x
) \

1004 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CONNECT_RENEGOTIATE
,0,
NULL
)

	)

1005 
	#SSL_CTX_£ss_ac˚±
(
˘x
) \

1006 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT
,0,
NULL
)

	)

1007 
	#SSL_CTX_£ss_ac˚±_ª√gŸüã
(
˘x
) \

1008 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
,0,
NULL
)

	)

1009 
	#SSL_CTX_£ss_ac˚±_good
(
˘x
) \

1010 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_ACCEPT_GOOD
,0,
NULL
)

	)

1011 
	#SSL_CTX_£ss_hôs
(
˘x
) \

1012 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_HIT
,0,
NULL
)

	)

1013 
	#SSL_CTX_£ss_cb_hôs
(
˘x
) \

1014 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CB_HIT
,0,
NULL
)

	)

1015 
	#SSL_CTX_£ss_mis£s
(
˘x
) \

1016 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_MISSES
,0,
NULL
)

	)

1017 
	#SSL_CTX_£ss_timeouts
(
˘x
) \

1018 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_TIMEOUTS
,0,
NULL
)

	)

1019 
	#SSL_CTX_£ss_ˇche_fuŒ
(
˘x
) \

1020 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SESS_CACHE_FULL
,0,
NULL
)

	)

1022 
SSL_CTX_£ss_£t_√w_cb
(
SSL_CTX
 *
˘x
, (*
√w_£ssi⁄_cb
)(
s¶_°
 *
s¶
,
SSL_SESSION
 *
£ss
));

1023 (*
SSL_CTX_£ss_gë_√w_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, 
SSL_SESSION
 *
£ss
);

1024 
SSL_CTX_£ss_£t_ªmove_cb
(
SSL_CTX
 *
˘x
, (*
ªmove_£ssi⁄_cb
)(
s¶_˘x_°
 *˘x,
SSL_SESSION
 *
£ss
));

1025 (*
SSL_CTX_£ss_gë_ªmove_cb
(
SSL_CTX
 *
˘x
))(
s¶_˘x_°
 *˘x, 
SSL_SESSION
 *
£ss
);

1026 
SSL_CTX_£ss_£t_gë_cb
(
SSL_CTX
 *
˘x
, 
SSL_SESSION
 *(*
gë_£ssi⁄_cb
)(
s¶_°
 *
s¶
, *
d©a
,
Àn
,*
c›y
));

1027 
SSL_SESSION
 *(*
SSL_CTX_£ss_gë_gë_cb
(
SSL_CTX
 *
˘x
))(
s¶_°
 *
s¶
, *
D©a
, 
Àn
, *
c›y
);

1028 
SSL_CTX_£t_öfo_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1029 (*
SSL_CTX_gë_öfo_ˇŒback
(
SSL_CTX
 *
˘x
))(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1030 
SSL_CTX_£t_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
, (*
˛õ¡_˚π_cb
)(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
));

1031 (*
SSL_CTX_gë_˛õ¡_˚π_cb
(
SSL_CTX
 *
˘x
))(
SSL
 *
s¶
, 
X509
 **
x509
, 
EVP_PKEY
 **
pkey
);

1032 #i‚de‡
OPENSSL_NO_ENGINE


1033 
SSL_CTX_£t_˛õ¡_˚π_ígöe
(
SSL_CTX
 *
˘x
, 
ENGINE
 *
e
);

1035 
SSL_CTX_£t_cookõ_gíî©e_cb
(
SSL_CTX
 *
˘x
, (*
≠p_gí_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, *
cookõ_Àn
));

1036 
SSL_CTX_£t_cookõ_vîify_cb
(
SSL_CTX
 *
˘x
, (*
≠p_vîify_cookõ_cb
)(
SSL
 *
s¶
, *
cookõ
, 
cookõ_Àn
));

1037 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1038 
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
(
SSL_CTX
 *
s
,

1039 (*
cb
Ë(
SSL
 *
s¶
,

1040 c⁄° **
out
,

1041 *
ouéí
,

1042 *
¨g
),

1043 *
¨g
);

1044 
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
(
SSL_CTX
 *
s
,

1045 (*
cb
Ë(
SSL
 *
s¶
,

1046 **
out
,

1047 *
ouéí
,

1048 c⁄° *
ö
,

1049 
öÀn
,

1050 *
¨g
),

1051 *
¨g
);

1053 
SSL_£À˘_√xt_¥Ÿo
(**
out
, *
ouéí
,

1054 c⁄° *
ö
, 
öÀn
,

1055 c⁄° *
˛õ¡
, 
˛õ¡_Àn
);

1056 
SSL_gë0_√xt_¥Ÿo_√gŸüãd
(c⁄° 
SSL
 *
s
,

1057 c⁄° **
d©a
, *
Àn
);

1059 
	#OPENSSL_NPN_UNSUPPORTED
 0

	)

1060 
	#OPENSSL_NPN_NEGOTIATED
 1

	)

1061 
	#OPENSSL_NPN_NO_OVERLAP
 2

	)

1064 #i‚de‡
OPENSSL_NO_PSK


1067 
	#PSK_MAX_IDENTITY_LEN
 128

	)

1068 
	#PSK_MAX_PSK_LEN
 256

	)

1069 
SSL_CTX_£t_psk_˛õ¡_ˇŒback
(
SSL_CTX
 *
˘x
,

1070 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1071 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1072 
max_psk_Àn
));

1073 
SSL_£t_psk_˛õ¡_ˇŒback
(
SSL
 *
s¶
,

1074 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
,

1075 *
idítôy
, 
max_idítôy_Àn
, *
psk
,

1076 
max_psk_Àn
));

1077 
SSL_CTX_£t_psk_£rvî_ˇŒback
(
SSL_CTX
 *
˘x
,

1078 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1079 *
psk
, 
max_psk_Àn
));

1080 
SSL_£t_psk_£rvî_ˇŒback
(
SSL
 *
s¶
,

1081 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1082 *
psk
, 
max_psk_Àn
));

1083 
SSL_CTX_u£_psk_idítôy_höt
(
SSL_CTX
 *
˘x
, c⁄° *
idítôy_höt
);

1084 
SSL_u£_psk_idítôy_höt
(
SSL
 *
s
, c⁄° *
idítôy_höt
);

1085 c⁄° *
SSL_gë_psk_idítôy_höt
(c⁄° 
SSL
 *
s
);

1086 c⁄° *
SSL_gë_psk_idítôy
(c⁄° 
SSL
 *
s
);

1089 
	#SSL_NOTHING
 1

	)

1090 
	#SSL_WRITING
 2

	)

1091 
	#SSL_READING
 3

	)

1092 
	#SSL_X509_LOOKUP
 4

	)

1095 
	#SSL_w™t_nŸhög
(
s
Ë(
	`SSL_w™t
(sË=
SSL_NOTHING
)

	)

1096 
	#SSL_w™t_ªad
(
s
Ë(
	`SSL_w™t
(sË=
SSL_READING
)

	)

1097 
	#SSL_w™t_wrôe
(
s
Ë(
	`SSL_w™t
(sË=
SSL_WRITING
)

	)

1098 
	#SSL_w™t_x509_lookup
(
s
Ë(
	`SSL_w™t
(sË=
SSL_X509_LOOKUP
)

	)

1100 
	#SSL_MAC_FLAG_READ_MAC_STREAM
 1

	)

1101 
	#SSL_MAC_FLAG_WRITE_MAC_STREAM
 2

	)

1103 #i‚de‡
OPENSSL_NO_SSL_INTERN


1105 
	ss¶_°


1110 
vîsi⁄
;

1111 
ty≥
;

1113 c⁄° 
SSL_METHOD
 *
mëhod
;

1119 #i‚de‡
OPENSSL_NO_BIO


1120 
BIO
 *
rbio
;

1121 
BIO
 *
wbio
;

1122 
BIO
 *
bbio
;

1125 *
rbio
;

1126 *
wbio
;

1127 *
bbio
;

1133 
rw°©e
;

1136 
ö_h™dshake
;

1137 (*
h™dshake_func
)(
SSL
 *);

1147 
£rvî
;

1149 
√w_£ssi⁄
;

1153 
quõt_shutdown
;

1154 
shutdown
;

1156 
°©e
;

1157 
r°©e
;

1159 
BUF_MEM
 *
öô_buf
;

1160 *
öô_msg
;

1161 
öô_num
;

1162 
öô_off
;

1165 *
∑ckë
;

1166 
∑ckë_Àngth
;

1168 
s¶2_°©e_°
 *
s2
;

1169 
s¶3_°©e_°
 *
s3
;

1170 
dés1_°©e_°
 *
d1
;

1172 
ªad_ahód
;

1176 (*
msg_ˇŒback
)(
wrôe_p
, 
vîsi⁄
, 
c⁄ã¡_ty≥
, c⁄° *
buf
, 
size_t
 
Àn
, 
SSL
 *
s¶
, *
¨g
);

1177 *
msg_ˇŒback_¨g
;

1179 
hô
;

1181 
X509_VERIFY_PARAM
 *
∑øm
;

1184 
puΩo£
;

1185 
åu°
;

1189 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°
;

1190 
STACK_OF
(
SSL_CIPHER
Ë*
cùhî_li°_by_id
;

1194 
mac_Êags
;

1195 
EVP_CIPHER_CTX
 *
íc_ªad_˘x
;

1196 
EVP_MD_CTX
 *
ªad_hash
;

1197 #i‚de‡
OPENSSL_NO_COMP


1198 
COMP_CTX
 *
ex∑nd
;

1200 *
ex∑nd
;

1203 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

1204 
EVP_MD_CTX
 *
wrôe_hash
;

1205 #i‚de‡
OPENSSL_NO_COMP


1206 
COMP_CTX
 *
com¥ess
;

1208 *
com¥ess
;

1215 
˚π_°
 *
˚π
;

1219 
sid_˘x_Àngth
;

1220 
sid_˘x
[
SSL_MAX_SID_CTX_LENGTH
];

1223 
SSL_SESSION
 *
£ssi⁄
;

1226 
GEN_SESSION_CB
 
gíî©e_£ssi⁄_id
;

1229 
vîify_mode
;

1231 (*
vîify_ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
);

1233 (*
öfo_ˇŒback
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
);

1235 
îr‹
;

1236 
îr‹_code
;

1238 #i‚de‡
OPENSSL_NO_KRB5


1239 
KSSL_CTX
 *
ks¶_˘x
;

1242 #i‚de‡
OPENSSL_NO_PSK


1243 (*
psk_˛õ¡_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
höt
, *
idítôy
,

1244 
max_idítôy_Àn
, *
psk
,

1245 
max_psk_Àn
);

1246 (*
psk_£rvî_ˇŒback
)(
SSL
 *
s¶
, c⁄° *
idítôy
,

1247 *
psk
, 
max_psk_Àn
);

1250 
SSL_CTX
 *
˘x
;

1253 
debug
;

1256 
vîify_ªsu…
;

1257 
CRYPTO_EX_DATA
 
ex_d©a
;

1260 
STACK_OF
(
X509_NAME
Ë*
˛õ¡_CA
;

1262 
ª„ªn˚s
;

1263 
›ti⁄s
;

1264 
mode
;

1265 
max_˚π_li°
;

1266 
fú°_∑ckë
;

1267 
˛õ¡_vîsi⁄
;

1269 
max_£nd_‰agmít
;

1270 #i‚de‡
OPENSSL_NO_TLSEXT


1272 (*
é£xt_debug_cb
)(
SSL
 *
s
, 
˛õ¡_£rvî
, 
ty≥
,

1273 *
d©a
, 
Àn
,

1274 *
¨g
);

1275 *
é£xt_debug_¨g
;

1276 *
é£xt_ho°«me
;

1277 
£rvî«me_d⁄e
;

1284 
é£xt_°©us_ty≥
;

1286 
é£xt_°©us_ex≥˘ed
;

1288 
STACK_OF
(
OCSP_RESPID
Ë*
é£xt_oc•_ids
;

1289 
X509_EXTENSIONS
 *
é£xt_oc•_exts
;

1291 *
é£xt_oc•_ª•
;

1292 
é£xt_oc•_ª•Àn
;

1295 
é£xt_tickë_ex≥˘ed
;

1296 #i‚de‡
OPENSSL_NO_EC


1297 
size_t
 
é£xt_e˝oötf‹m©li°_Àngth
;

1298 *
é£xt_e˝oötf‹m©li°
;

1299 
size_t
 
é£xt_ñlùticcurvñi°_Àngth
;

1300 *
é£xt_ñlùticcurvñi°
;

1304 *
é£xt_›aque_¥f_öput
;

1305 
size_t
 
é£xt_›aque_¥f_öput_Àn
;

1308 
TLS_SESSION_TICKET_EXT
 *
é£xt_£ssi⁄_tickë
;

1311 
és_£ssi⁄_tickë_ext_cb_‚
 
és_£ssi⁄_tickë_ext_cb
;

1312 *
és_£ssi⁄_tickë_ext_cb_¨g
;

1315 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
;

1316 *
és_£ssi⁄_£¸ë_cb_¨g
;

1318 
SSL_CTX
 * 
öôül_˘x
;

1320 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


1328 *
√xt_¥Ÿo_√gŸüãd
;

1329 
√xt_¥Ÿo_√gŸüãd_Àn
;

1332 
	#£ssi⁄_˘x
 
öôül_˘x


	)

1334 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
§ç_¥ofûes
;

1335 
SRTP_PROTECTION_PROFILE
 *
§ç_¥ofûe
;

1337 
é£xt_hóπbót
;

1342 
é£xt_hb_≥ndög
;

1343 
é£xt_hb_£q
;

1345 
	#£ssi⁄_˘x
 
˘x


	)

1348 
ª√gŸüã
;

1352 #i‚de‡
OPENSSL_NO_SRP


1353 
SRP_CTX
 
§p_˘x
;

1359 #ifde‡
__˝lu•lus


1363 
	~<›ís¶/s¶2.h
>

1364 
	~<›ís¶/s¶3.h
>

1365 
	~<›ís¶/és1.h
>

1366 
	~<›ís¶/dés1.h
>

1367 
	~<›ís¶/s¶23.h
>

1368 
	~<›ís¶/§ç.h
>

1370 #ifde‡ 
__˝lu•lus


1375 
	#SSL_£t_≠p_d©a
(
s
,
¨g
Ë(
	`SSL_£t_ex_d©a
(s,0,(*Ôrg))

	)

1376 
	#SSL_gë_≠p_d©a
(
s
Ë(
	`SSL_gë_ex_d©a
(s,0))

	)

1377 
	#SSL_SESSION_£t_≠p_d©a
(
s
,
a
Ë(
	`SSL_SESSION_£t_ex_d©a
(s,0,(*Ô))

	)

1378 
	#SSL_SESSION_gë_≠p_d©a
(
s
Ë(
	`SSL_SESSION_gë_ex_d©a
(s,0))

	)

1379 
	#SSL_CTX_gë_≠p_d©a
(
˘x
Ë(
	`SSL_CTX_gë_ex_d©a
(˘x,0))

	)

1380 
	#SSL_CTX_£t_≠p_d©a
(
˘x
,
¨g
Ë(
	`SSL_CTX_£t_ex_d©a
(˘x,0,(*Ôrg))

	)

1389 
	#SSL_ST_CONNECT
 0x1000

	)

1390 
	#SSL_ST_ACCEPT
 0x2000

	)

1391 
	#SSL_ST_MASK
 0x0FFF

	)

1392 
	#SSL_ST_INIT
 (
SSL_ST_CONNECT
|
SSL_ST_ACCEPT
)

	)

1393 
	#SSL_ST_BEFORE
 0x4000

	)

1394 
	#SSL_ST_OK
 0x03

	)

1395 
	#SSL_ST_RENEGOTIATE
 (0x04|
SSL_ST_INIT
)

	)

1397 
	#SSL_CB_LOOP
 0x01

	)

1398 
	#SSL_CB_EXIT
 0x02

	)

1399 
	#SSL_CB_READ
 0x04

	)

1400 
	#SSL_CB_WRITE
 0x08

	)

1401 
	#SSL_CB_ALERT
 0x4000

	)

1402 
	#SSL_CB_READ_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_READ
)

	)

1403 
	#SSL_CB_WRITE_ALERT
 (
SSL_CB_ALERT
|
SSL_CB_WRITE
)

	)

1404 
	#SSL_CB_ACCEPT_LOOP
 (
SSL_ST_ACCEPT
|
SSL_CB_LOOP
)

	)

1405 
	#SSL_CB_ACCEPT_EXIT
 (
SSL_ST_ACCEPT
|
SSL_CB_EXIT
)

	)

1406 
	#SSL_CB_CONNECT_LOOP
 (
SSL_ST_CONNECT
|
SSL_CB_LOOP
)

	)

1407 
	#SSL_CB_CONNECT_EXIT
 (
SSL_ST_CONNECT
|
SSL_CB_EXIT
)

	)

1408 
	#SSL_CB_HANDSHAKE_START
 0x10

	)

1409 
	#SSL_CB_HANDSHAKE_DONE
 0x20

	)

1412 
	#SSL_gë_°©e
(
a
Ë
	`SSL_°©e
◊)

	)

1413 
	#SSL_is_öô_föished
(
a
Ë(
	`SSL_°©e
◊Ë=
SSL_ST_OK
)

	)

1414 
	#SSL_ö_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_INIT
)

	)

1415 
	#SSL_ö_bef‹e
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_BEFORE
)

	)

1416 
	#SSL_ö_c⁄√˘_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_CONNECT
)

	)

1417 
	#SSL_ö_ac˚±_öô
(
a
Ë(
	`SSL_°©e
◊)&
SSL_ST_ACCEPT
)

	)

1421 
	#SSL_ST_READ_HEADER
 0xF0

	)

1422 
	#SSL_ST_READ_BODY
 0xF1

	)

1423 
	#SSL_ST_READ_DONE
 0xF2

	)

1429 
size_t
 
SSL_gë_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1430 
size_t
 
SSL_gë_≥î_föished
(c⁄° 
SSL
 *
s
, *
buf
, size_à
cou¡
);

1434 
	#SSL_VERIFY_NONE
 0x00

	)

1435 
	#SSL_VERIFY_PEER
 0x01

	)

1436 
	#SSL_VERIFY_FAIL_IF_NO_PEER_CERT
 0x02

	)

1437 
	#SSL_VERIFY_CLIENT_ONCE
 0x04

	)

1439 
	#O≥nSSL_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1440 
	#SSLóy_add_s¶_Æg‹ôhms
(Ë
	`SSL_libøry_öô
()

	)

1444 
	#SSL_CTX_£t_deÁu…_vîify
(
a
,
b
,
c
Ë
	`SSL_CTX_£t_vîify
◊,b,c)

	)

1445 
	#SSL_£t_¥ef_cùhî
(
c
,
n
Ë
	`SSL_£t_cùhî_li°
(c,n)

	)

1446 
	#SSL_add_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_add_£ssi⁄
(◊),(b))

	)

1447 
	#SSL_ªmove_£ssi⁄
(
a
,
b
Ë
	`SSL_CTX_ªmove_£ssi⁄
(◊),(b))

	)

1448 
	#SSL_Êush_£ssi⁄s
(
a
,
b
Ë
	`SSL_CTX_Êush_£ssi⁄s
(◊),(b))

	)

1451 
	#SSL_gë_cùhî
(
s
) \

1452 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1453 
	#SSL_gë_cùhî_bôs
(
s
,
≈
) \

1454 
	`SSL_CIPHER_gë_bôs
(
	`SSL_gë_cuºít_cùhî
(
s
),
≈
)

	)

1455 
	#SSL_gë_cùhî_vîsi⁄
(
s
) \

1456 
	`SSL_CIPHER_gë_vîsi⁄
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1457 
	#SSL_gë_cùhî_«me
(
s
) \

1458 
	`SSL_CIPHER_gë_«me
(
	`SSL_gë_cuºít_cùhî
(
s
))

	)

1459 
	#SSL_gë_time
(
a
Ë
	`SSL_SESSION_gë_time
◊)

	)

1460 
	#SSL_£t_time
(
a
,
b
Ë
	`SSL_SESSION_£t_time
(◊),(b))

	)

1461 
	#SSL_gë_timeout
(
a
Ë
	`SSL_SESSION_gë_timeout
◊)

	)

1462 
	#SSL_£t_timeout
(
a
,
b
Ë
	`SSL_SESSION_£t_timeout
(◊),(b))

	)

1464 
	#d2i_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_d2i_bio_of
(
SSL_SESSION
,
SSL_SESSION_√w
,
d2i_SSL_SESSION
,bp,s_id)

	)

1465 
	#i2d_SSL_SESSION_bio
(
bp
,
s_id
Ë
	`ASN1_i2d_bio_of
(
SSL_SESSION
,
i2d_SSL_SESSION
,bp,s_id)

	)

1467 
DECLARE_PEM_rw
(
SSL_SESSION
, SSL_SESSION)

1469 
	#SSL_AD_REASON_OFFSET
 1000

	)

1472 
	#SSL_AD_CLOSE_NOTIFY
 
SSL3_AD_CLOSE_NOTIFY


	)

1473 
	#SSL_AD_UNEXPECTED_MESSAGE
 
SSL3_AD_UNEXPECTED_MESSAGE


	)

1474 
	#SSL_AD_BAD_RECORD_MAC
 
SSL3_AD_BAD_RECORD_MAC


	)

1475 
	#SSL_AD_DECRYPTION_FAILED
 
TLS1_AD_DECRYPTION_FAILED


	)

1476 
	#SSL_AD_RECORD_OVERFLOW
 
TLS1_AD_RECORD_OVERFLOW


	)

1477 
	#SSL_AD_DECOMPRESSION_FAILURE
 
SSL3_AD_DECOMPRESSION_FAILURE


	)

1478 
	#SSL_AD_HANDSHAKE_FAILURE
 
SSL3_AD_HANDSHAKE_FAILURE


	)

1479 
	#SSL_AD_NO_CERTIFICATE
 
SSL3_AD_NO_CERTIFICATE


	)

1480 
	#SSL_AD_BAD_CERTIFICATE
 
SSL3_AD_BAD_CERTIFICATE


	)

1481 
	#SSL_AD_UNSUPPORTED_CERTIFICATE
 
SSL3_AD_UNSUPPORTED_CERTIFICATE


	)

1482 
	#SSL_AD_CERTIFICATE_REVOKED
 
SSL3_AD_CERTIFICATE_REVOKED


	)

1483 
	#SSL_AD_CERTIFICATE_EXPIRED
 
SSL3_AD_CERTIFICATE_EXPIRED


	)

1484 
	#SSL_AD_CERTIFICATE_UNKNOWN
 
SSL3_AD_CERTIFICATE_UNKNOWN


	)

1485 
	#SSL_AD_ILLEGAL_PARAMETER
 
SSL3_AD_ILLEGAL_PARAMETER


	)

1486 
	#SSL_AD_UNKNOWN_CA
 
TLS1_AD_UNKNOWN_CA


	)

1487 
	#SSL_AD_ACCESS_DENIED
 
TLS1_AD_ACCESS_DENIED


	)

1488 
	#SSL_AD_DECODE_ERROR
 
TLS1_AD_DECODE_ERROR


	)

1489 
	#SSL_AD_DECRYPT_ERROR
 
TLS1_AD_DECRYPT_ERROR


	)

1490 
	#SSL_AD_EXPORT_RESTRICTION
 
TLS1_AD_EXPORT_RESTRICTION


	)

1491 
	#SSL_AD_PROTOCOL_VERSION
 
TLS1_AD_PROTOCOL_VERSION


	)

1492 
	#SSL_AD_INSUFFICIENT_SECURITY
 
TLS1_AD_INSUFFICIENT_SECURITY


	)

1493 
	#SSL_AD_INTERNAL_ERROR
 
TLS1_AD_INTERNAL_ERROR


	)

1494 
	#SSL_AD_USER_CANCELLED
 
TLS1_AD_USER_CANCELLED


	)

1495 
	#SSL_AD_NO_RENEGOTIATION
 
TLS1_AD_NO_RENEGOTIATION


	)

1496 
	#SSL_AD_UNSUPPORTED_EXTENSION
 
TLS1_AD_UNSUPPORTED_EXTENSION


	)

1497 
	#SSL_AD_CERTIFICATE_UNOBTAINABLE
 
TLS1_AD_CERTIFICATE_UNOBTAINABLE


	)

1498 
	#SSL_AD_UNRECOGNIZED_NAME
 
TLS1_AD_UNRECOGNIZED_NAME


	)

1499 
	#SSL_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 
TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE


	)

1500 
	#SSL_AD_BAD_CERTIFICATE_HASH_VALUE
 
TLS1_AD_BAD_CERTIFICATE_HASH_VALUE


	)

1501 
	#SSL_AD_UNKNOWN_PSK_IDENTITY
 
TLS1_AD_UNKNOWN_PSK_IDENTITY


	)

1502 
	#SSL_AD_INAPPROPRIATE_FALLBACK
 
TLS1_AD_INAPPROPRIATE_FALLBACK


	)

1504 
	#SSL_ERROR_NONE
 0

	)

1505 
	#SSL_ERROR_SSL
 1

	)

1506 
	#SSL_ERROR_WANT_READ
 2

	)

1507 
	#SSL_ERROR_WANT_WRITE
 3

	)

1508 
	#SSL_ERROR_WANT_X509_LOOKUP
 4

	)

1509 
	#SSL_ERROR_SYSCALL
 5

	)

1510 
	#SSL_ERROR_ZERO_RETURN
 6

	)

1511 
	#SSL_ERROR_WANT_CONNECT
 7

	)

1512 
	#SSL_ERROR_WANT_ACCEPT
 8

	)

1514 
	#SSL_CTRL_NEED_TMP_RSA
 1

	)

1515 
	#SSL_CTRL_SET_TMP_RSA
 2

	)

1516 
	#SSL_CTRL_SET_TMP_DH
 3

	)

1517 
	#SSL_CTRL_SET_TMP_ECDH
 4

	)

1518 
	#SSL_CTRL_SET_TMP_RSA_CB
 5

	)

1519 
	#SSL_CTRL_SET_TMP_DH_CB
 6

	)

1520 
	#SSL_CTRL_SET_TMP_ECDH_CB
 7

	)

1522 
	#SSL_CTRL_GET_SESSION_REUSED
 8

	)

1523 
	#SSL_CTRL_GET_CLIENT_CERT_REQUEST
 9

	)

1524 
	#SSL_CTRL_GET_NUM_RENEGOTIATIONS
 10

	)

1525 
	#SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
 11

	)

1526 
	#SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
 12

	)

1527 
	#SSL_CTRL_GET_FLAGS
 13

	)

1528 
	#SSL_CTRL_EXTRA_CHAIN_CERT
 14

	)

1530 
	#SSL_CTRL_SET_MSG_CALLBACK
 15

	)

1531 
	#SSL_CTRL_SET_MSG_CALLBACK_ARG
 16

	)

1534 
	#SSL_CTRL_SET_MTU
 17

	)

1536 
	#SSL_CTRL_SESS_NUMBER
 20

	)

1537 
	#SSL_CTRL_SESS_CONNECT
 21

	)

1538 
	#SSL_CTRL_SESS_CONNECT_GOOD
 22

	)

1539 
	#SSL_CTRL_SESS_CONNECT_RENEGOTIATE
 23

	)

1540 
	#SSL_CTRL_SESS_ACCEPT
 24

	)

1541 
	#SSL_CTRL_SESS_ACCEPT_GOOD
 25

	)

1542 
	#SSL_CTRL_SESS_ACCEPT_RENEGOTIATE
 26

	)

1543 
	#SSL_CTRL_SESS_HIT
 27

	)

1544 
	#SSL_CTRL_SESS_CB_HIT
 28

	)

1545 
	#SSL_CTRL_SESS_MISSES
 29

	)

1546 
	#SSL_CTRL_SESS_TIMEOUTS
 30

	)

1547 
	#SSL_CTRL_SESS_CACHE_FULL
 31

	)

1548 
	#SSL_CTRL_OPTIONS
 32

	)

1549 
	#SSL_CTRL_MODE
 33

	)

1551 
	#SSL_CTRL_GET_READ_AHEAD
 40

	)

1552 
	#SSL_CTRL_SET_READ_AHEAD
 41

	)

1553 
	#SSL_CTRL_SET_SESS_CACHE_SIZE
 42

	)

1554 
	#SSL_CTRL_GET_SESS_CACHE_SIZE
 43

	)

1555 
	#SSL_CTRL_SET_SESS_CACHE_MODE
 44

	)

1556 
	#SSL_CTRL_GET_SESS_CACHE_MODE
 45

	)

1558 
	#SSL_CTRL_GET_MAX_CERT_LIST
 50

	)

1559 
	#SSL_CTRL_SET_MAX_CERT_LIST
 51

	)

1561 
	#SSL_CTRL_SET_MAX_SEND_FRAGMENT
 52

	)

1564 #i‚de‡
OPENSSL_NO_TLSEXT


1565 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
 53

	)

1566 
	#SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
 54

	)

1567 
	#SSL_CTRL_SET_TLSEXT_HOSTNAME
 55

	)

1568 
	#SSL_CTRL_SET_TLSEXT_DEBUG_CB
 56

	)

1569 
	#SSL_CTRL_SET_TLSEXT_DEBUG_ARG
 57

	)

1570 
	#SSL_CTRL_GET_TLSEXT_TICKET_KEYS
 58

	)

1571 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEYS
 59

	)

1572 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
 60

	)

1573 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
 61

	)

1574 
	#SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
 62

	)

1575 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
 63

	)

1576 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
 64

	)

1577 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
 65

	)

1578 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
 66

	)

1579 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
 67

	)

1580 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
 68

	)

1581 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
 69

	)

1582 
	#SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
 70

	)

1583 
	#SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
 71

	)

1585 
	#SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
 72

	)

1587 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME_CB
 75

	)

1588 
	#SSL_CTRL_SET_SRP_VERIFY_PARAM_CB
 76

	)

1589 
	#SSL_CTRL_SET_SRP_GIVE_CLIENT_PWD_CB
 77

	)

1591 
	#SSL_CTRL_SET_SRP_ARG
 78

	)

1592 
	#SSL_CTRL_SET_TLS_EXT_SRP_USERNAME
 79

	)

1593 
	#SSL_CTRL_SET_TLS_EXT_SRP_STRENGTH
 80

	)

1594 
	#SSL_CTRL_SET_TLS_EXT_SRP_PASSWORD
 81

	)

1595 #i‚de‡
OPENSSL_NO_HEARTBEATS


1596 
	#SSL_CTRL_TLS_EXT_SEND_HEARTBEAT
 85

	)

1597 
	#SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
 86

	)

1598 
	#SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
 87

	)

1602 
	#DTLS_CTRL_GET_TIMEOUT
 73

	)

1603 
	#DTLS_CTRL_HANDLE_TIMEOUT
 74

	)

1604 
	#DTLS_CTRL_LISTEN
 75

	)

1606 
	#SSL_CTRL_GET_RI_SUPPORT
 76

	)

1607 
	#SSL_CTRL_CLEAR_OPTIONS
 77

	)

1608 
	#SSL_CTRL_CLEAR_MODE
 78

	)

1610 
	#SSL_CTRL_GET_EXTRA_CHAIN_CERTS
 82

	)

1611 
	#SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
 83

	)

1613 
	#SSL_CTRL_CHECK_PROTO_VERSION
 119

	)

1615 
	#DTLSv1_gë_timeout
(
s¶
, 
¨g
) \

1616 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_GET_TIMEOUT
,0, (*)
¨g
)

	)

1617 
	#DTLSv1_h™dÀ_timeout
(
s¶
) \

1618 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_HANDLE_TIMEOUT
,0, 
NULL
)

	)

1619 
	#DTLSv1_li°í
(
s¶
, 
≥î
) \

1620 
	`SSL_˘æ
(
s¶
,
DTLS_CTRL_LISTEN
,0, (*)
≥î
)

	)

1622 
	#SSL_£ssi⁄_ªu£d
(
s¶
) \

1623 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_SESSION_REUSED
,0,
NULL
)

	)

1624 
	#SSL_num_ª√gŸüti⁄s
(
s¶
) \

1625 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1626 
	#SSL_˛ór_num_ª√gŸüti⁄s
(
s¶
) \

1627 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_CLEAR_NUM_RENEGOTIATIONS
,0,
NULL
)

	)

1628 
	#SSL_tŸÆ_ª√gŸüti⁄s
(
s¶
) \

1629 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TOTAL_RENEGOTIATIONS
,0,
NULL
)

	)

1631 
	#SSL_CTX_√ed_tmp_RSA
(
˘x
) \

1632 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1633 
	#SSL_CTX_£t_tmp_rß
(
˘x
,
rß
) \

1634 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1635 
	#SSL_CTX_£t_tmp_dh
(
˘x
,
dh
) \

1636 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1637 
	#SSL_CTX_£t_tmp_ecdh
(
˘x
,
ecdh
) \

1638 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1640 
	#SSL_√ed_tmp_RSA
(
s¶
) \

1641 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_NEED_TMP_RSA
,0,
NULL
)

	)

1642 
	#SSL_£t_tmp_rß
(
s¶
,
rß
) \

1643 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_RSA
,0,(*)
rß
)

	)

1644 
	#SSL_£t_tmp_dh
(
s¶
,
dh
) \

1645 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_DH
,0,(*)
dh
)

	)

1646 
	#SSL_£t_tmp_ecdh
(
s¶
,
ecdh
) \

1647 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TMP_ECDH
,0,(*)
ecdh
)

	)

1649 
	#SSL_CTX_add_exåa_chaö_˚π
(
˘x
,
x509
) \

1650 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_EXTRA_CHAIN_CERT
,0,(*)
x509
)

	)

1651 
	#SSL_CTX_gë_exåa_chaö_˚πs
(
˘x
,
px509
) \

1652 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_EXTRA_CHAIN_CERTS
,0,
px509
)

	)

1653 
	#SSL_CTX_˛ór_exåa_chaö_˚πs
(
˘x
) \

1654 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_CLEAR_EXTRA_CHAIN_CERTS
,0,
NULL
)

	)

1656 #i‚de‡
OPENSSL_NO_BIO


1657 
BIO_METHOD
 *
BIO_f_s¶
();

1658 
BIO
 *
BIO_√w_s¶
(
SSL_CTX
 *
˘x
,
˛õ¡
);

1659 
BIO
 *
BIO_√w_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1660 
BIO
 *
BIO_√w_buf„r_s¶_c⁄√˘
(
SSL_CTX
 *
˘x
);

1661 
BIO_s¶_c›y_£ssi⁄_id
(
BIO
 *
to
,BIO *
‰om
);

1662 
BIO_s¶_shutdown
(
BIO
 *
s¶_bio
);

1666 
SSL_CTX_£t_cùhî_li°
(
SSL_CTX
 *,c⁄° *
°r
);

1667 
SSL_CTX
 *
SSL_CTX_√w
(c⁄° 
SSL_METHOD
 *
mëh
);

1668 
SSL_CTX_‰ì
(
SSL_CTX
 *);

1669 
SSL_CTX_£t_timeout
(
SSL_CTX
 *
˘x
,
t
);

1670 
SSL_CTX_gë_timeout
(c⁄° 
SSL_CTX
 *
˘x
);

1671 
X509_STORE
 *
SSL_CTX_gë_˚π_°‹e
(c⁄° 
SSL_CTX
 *);

1672 
SSL_CTX_£t_˚π_°‹e
(
SSL_CTX
 *,
X509_STORE
 *);

1673 
SSL_w™t
(c⁄° 
SSL
 *
s
);

1674 
SSL_˛ór
(
SSL
 *
s
);

1676 
SSL_CTX_Êush_£ssi⁄s
(
SSL_CTX
 *
˘x
,
tm
);

1678 c⁄° 
SSL_CIPHER
 *
SSL_gë_cuºít_cùhî
(c⁄° 
SSL
 *
s
);

1679 
SSL_CIPHER_gë_bôs
(c⁄° 
SSL_CIPHER
 *
c
,*
Æg_bôs
);

1680 * 
SSL_CIPHER_gë_vîsi⁄
(c⁄° 
SSL_CIPHER
 *
c
);

1681 c⁄° * 
SSL_CIPHER_gë_«me
(c⁄° 
SSL_CIPHER
 *
c
);

1682 
SSL_CIPHER_gë_id
(c⁄° 
SSL_CIPHER
 *
c
);

1684 
SSL_gë_fd
(c⁄° 
SSL
 *
s
);

1685 
SSL_gë_rfd
(c⁄° 
SSL
 *
s
);

1686 
SSL_gë_wfd
(c⁄° 
SSL
 *
s
);

1687 c⁄° * 
SSL_gë_cùhî_li°
(c⁄° 
SSL
 *
s
,
n
);

1688 * 
SSL_gë_sh¨ed_cùhîs
(c⁄° 
SSL
 *
s
, *
buf
, 
Àn
);

1689 
SSL_gë_ªad_ahód
(c⁄° 
SSL
 * 
s
);

1690 
SSL_≥ndög
(c⁄° 
SSL
 *
s
);

1691 #i‚de‡
OPENSSL_NO_SOCK


1692 
SSL_£t_fd
(
SSL
 *
s
, 
fd
);

1693 
SSL_£t_rfd
(
SSL
 *
s
, 
fd
);

1694 
SSL_£t_wfd
(
SSL
 *
s
, 
fd
);

1696 #i‚de‡
OPENSSL_NO_BIO


1697 
SSL_£t_bio
(
SSL
 *
s
, 
BIO
 *
rbio
,BIO *
wbio
);

1698 
BIO
 * 
SSL_gë_rbio
(c⁄° 
SSL
 *
s
);

1699 
BIO
 * 
SSL_gë_wbio
(c⁄° 
SSL
 *
s
);

1701 
SSL_£t_cùhî_li°
(
SSL
 *
s
, c⁄° *
°r
);

1702 
SSL_£t_ªad_ahód
(
SSL
 *
s
, 
yes
);

1703 
SSL_gë_vîify_mode
(c⁄° 
SSL
 *
s
);

1704 
SSL_gë_vîify_dïth
(c⁄° 
SSL
 *
s
);

1705 (*
SSL_gë_vîify_ˇŒback
(c⁄° 
SSL
 *
s
))(,
X509_STORE_CTX
 *);

1706 
SSL_£t_vîify
(
SSL
 *
s
, 
mode
,

1707 (*
ˇŒback
)(
ok
,
X509_STORE_CTX
 *
˘x
));

1708 
SSL_£t_vîify_dïth
(
SSL
 *
s
, 
dïth
);

1709 #i‚de‡
OPENSSL_NO_RSA


1710 
SSL_u£_RSAPriv©eKey
(
SSL
 *
s¶
, 
RSA
 *
rß
);

1712 
SSL_u£_RSAPriv©eKey_ASN1
(
SSL
 *
s¶
, *
d
, 
Àn
);

1713 
SSL_u£_Priv©eKey
(
SSL
 *
s¶
, 
EVP_PKEY
 *
pkey
);

1714 
SSL_u£_Priv©eKey_ASN1
(
pk
,
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1715 
SSL_u£_˚πifiˇã
(
SSL
 *
s¶
, 
X509
 *
x
);

1716 
SSL_u£_˚πifiˇã_ASN1
(
SSL
 *
s¶
, c⁄° *
d
, 
Àn
);

1718 #i‚de‡
OPENSSL_NO_STDIO


1719 
SSL_u£_RSAPriv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1720 
SSL_u£_Priv©eKey_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1721 
SSL_u£_˚πifiˇã_fûe
(
SSL
 *
s¶
, c⁄° *
fûe
, 
ty≥
);

1722 
SSL_CTX_u£_RSAPriv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1723 
SSL_CTX_u£_Priv©eKey_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1724 
SSL_CTX_u£_˚πifiˇã_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

1725 
SSL_CTX_u£_˚πifiˇã_chaö_fûe
(
SSL_CTX
 *
˘x
, c⁄° *
fûe
);

1726 
STACK_OF
(
X509_NAME
Ë*
SSL_lﬂd_˛õ¡_CA_fûe
(c⁄° *
fûe
);

1727 
SSL_add_fûe_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1728 c⁄° *
fûe
);

1729 #i‚de‡
OPENSSL_SYS_VMS


1730 #i‚de‡
OPENSSL_SYS_MACINTOSH_CLASSIC


1731 
SSL_add_dú_˚π_subje˘s_to_°ack
(
STACK_OF
(
X509_NAME
Ë*
°ackCAs
,

1732 c⁄° *
dú
);

1738 
SSL_lﬂd_îr‹_°rögs
();

1739 c⁄° *
SSL_°©e_°rög
(c⁄° 
SSL
 *
s
);

1740 c⁄° *
SSL_r°©e_°rög
(c⁄° 
SSL
 *
s
);

1741 c⁄° *
SSL_°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1742 c⁄° *
SSL_r°©e_°rög_l⁄g
(c⁄° 
SSL
 *
s
);

1743 
SSL_SESSION_gë_time
(c⁄° 
SSL_SESSION
 *
s
);

1744 
SSL_SESSION_£t_time
(
SSL_SESSION
 *
s
, 
t
);

1745 
SSL_SESSION_gë_timeout
(c⁄° 
SSL_SESSION
 *
s
);

1746 
SSL_SESSION_£t_timeout
(
SSL_SESSION
 *
s
, 
t
);

1747 
SSL_c›y_£ssi⁄_id
(
SSL
 *
to
,c⁄° SSL *
‰om
);

1748 
X509
 *
SSL_SESSION_gë0_≥î
(
SSL_SESSION
 *
s
);

1749 
SSL_SESSION_£t1_id_c⁄ãxt
(
SSL_SESSION
 *
s
,c⁄° *
sid_˘x
,

1750 
sid_˘x_Àn
);

1752 
SSL_SESSION
 *
SSL_SESSION_√w
();

1753 c⁄° *
SSL_SESSION_gë_id
(c⁄° 
SSL_SESSION
 *
s
,

1754 *
Àn
);

1755 
SSL_SESSION_gë_com¥ess_id
(c⁄° 
SSL_SESSION
 *
s
);

1756 #i‚de‡
OPENSSL_NO_FP_API


1757 
SSL_SESSION_¥öt_Â
(
FILE
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1759 #i‚de‡
OPENSSL_NO_BIO


1760 
SSL_SESSION_¥öt
(
BIO
 *
Â
,c⁄° 
SSL_SESSION
 *
£s
);

1762 
SSL_SESSION_‰ì
(
SSL_SESSION
 *
£s
);

1763 
i2d_SSL_SESSION
(
SSL_SESSION
 *
ö
,**
µ
);

1764 
SSL_£t_£ssi⁄
(
SSL
 *
to
, 
SSL_SESSION
 *
£ssi⁄
);

1765 
SSL_CTX_add_£ssi⁄
(
SSL_CTX
 *
s
, 
SSL_SESSION
 *
c
);

1766 
SSL_CTX_ªmove_£ssi⁄
(
SSL_CTX
 *,
SSL_SESSION
 *
c
);

1767 
SSL_CTX_£t_gíî©e_£ssi⁄_id
(
SSL_CTX
 *, 
GEN_SESSION_CB
);

1768 
SSL_£t_gíî©e_£ssi⁄_id
(
SSL
 *, 
GEN_SESSION_CB
);

1769 
SSL_has_m©chög_£ssi⁄_id
(c⁄° 
SSL
 *
s¶
, c⁄° *
id
,

1770 
id_Àn
);

1771 
SSL_SESSION
 *
d2i_SSL_SESSION
(SSL_SESSION **
a
,c⁄° **
µ
,

1772 
Àngth
);

1774 #ifde‡
HEADER_X509_H


1775 
X509
 * 
SSL_gë_≥î_˚πifiˇã
(c⁄° 
SSL
 *
s
);

1778 
STACK_OF
(
X509
Ë*
SSL_gë_≥î_˚π_chaö
(c⁄° 
SSL
 *
s
);

1780 
SSL_CTX_gë_vîify_mode
(c⁄° 
SSL_CTX
 *
˘x
);

1781 
SSL_CTX_gë_vîify_dïth
(c⁄° 
SSL_CTX
 *
˘x
);

1782 (*
SSL_CTX_gë_vîify_ˇŒback
(c⁄° 
SSL_CTX
 *
˘x
))(,
X509_STORE_CTX
 *);

1783 
SSL_CTX_£t_vîify
(
SSL_CTX
 *
˘x
,
mode
,

1784 (*
ˇŒback
)(, 
X509_STORE_CTX
 *));

1785 
SSL_CTX_£t_vîify_dïth
(
SSL_CTX
 *
˘x
,
dïth
);

1786 
SSL_CTX_£t_˚π_vîify_ˇŒback
(
SSL_CTX
 *
˘x
, (*
cb
)(
X509_STORE_CTX
 *,*), *
¨g
);

1787 #i‚de‡
OPENSSL_NO_RSA


1788 
SSL_CTX_u£_RSAPriv©eKey
(
SSL_CTX
 *
˘x
, 
RSA
 *
rß
);

1790 
SSL_CTX_u£_RSAPriv©eKey_ASN1
(
SSL_CTX
 *
˘x
, c⁄° *
d
, 
Àn
);

1791 
SSL_CTX_u£_Priv©eKey
(
SSL_CTX
 *
˘x
, 
EVP_PKEY
 *
pkey
);

1792 
SSL_CTX_u£_Priv©eKey_ASN1
(
pk
,
SSL_CTX
 *
˘x
,

1793 c⁄° *
d
, 
Àn
);

1794 
SSL_CTX_u£_˚πifiˇã
(
SSL_CTX
 *
˘x
, 
X509
 *
x
);

1795 
SSL_CTX_u£_˚πifiˇã_ASN1
(
SSL_CTX
 *
˘x
, 
Àn
, c⁄° *
d
);

1797 
SSL_CTX_£t_deÁu…_∑sswd_cb
(
SSL_CTX
 *
˘x
, 
≥m_∑ssw‹d_cb
 *
cb
);

1798 
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
(
SSL_CTX
 *
˘x
, *
u
);

1800 
SSL_CTX_check_¥iv©e_key
(c⁄° 
SSL_CTX
 *
˘x
);

1801 
SSL_check_¥iv©e_key
(c⁄° 
SSL
 *
˘x
);

1803 
SSL_CTX_£t_£ssi⁄_id_c⁄ãxt
(
SSL_CTX
 *
˘x
,c⁄° *
sid_˘x
,

1804 
sid_˘x_Àn
);

1806 
SSL
 * 
SSL_√w
(
SSL_CTX
 *
˘x
);

1807 
SSL_£t_£ssi⁄_id_c⁄ãxt
(
SSL
 *
s¶
,c⁄° *
sid_˘x
,

1808 
sid_˘x_Àn
);

1810 
SSL_CTX_£t_puΩo£
(
SSL_CTX
 *
s
, 
puΩo£
);

1811 
SSL_£t_puΩo£
(
SSL
 *
s
, 
puΩo£
);

1812 
SSL_CTX_£t_åu°
(
SSL_CTX
 *
s
, 
åu°
);

1813 
SSL_£t_åu°
(
SSL
 *
s
, 
åu°
);

1815 
SSL_CTX_£t1_∑øm
(
SSL_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
vpm
);

1816 
SSL_£t1_∑øm
(
SSL
 *
s¶
, 
X509_VERIFY_PARAM
 *
vpm
);

1818 #i‚de‡
OPENSSL_NO_SRP


1819 
SSL_CTX_£t_§p_u£∫ame
(
SSL_CTX
 *
˘x
,*
«me
);

1820 
SSL_CTX_£t_§p_∑ssw‹d
(
SSL_CTX
 *
˘x
,*
∑ssw‹d
);

1821 
SSL_CTX_£t_§p_°ªngth
(
SSL_CTX
 *
˘x
, 
°ªngth
);

1822 
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
(
SSL_CTX
 *
˘x
,

1823 *(*
cb
)(
SSL
 *,*));

1824 
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
(
SSL_CTX
 *
˘x
,

1825 (*
cb
)(
SSL
 *,*));

1826 
SSL_CTX_£t_§p_u£∫ame_ˇŒback
(
SSL_CTX
 *
˘x
,

1827 (*
cb
)(
SSL
 *,*,*));

1828 
SSL_CTX_£t_§p_cb_¨g
(
SSL_CTX
 *
˘x
, *
¨g
);

1830 
SSL_£t_§p_£rvî_∑øm
(
SSL
 *
s
, c⁄° 
BIGNUM
 *
N
, c⁄° BIGNUM *
g
,

1831 
BIGNUM
 *
ß
, BIGNUM *
v
, *
öfo
);

1832 
SSL_£t_§p_£rvî_∑øm_pw
(
SSL
 *
s
, c⁄° *
u£r
, c⁄° *
∑ss
,

1833 c⁄° *
gΩ
);

1835 
BIGNUM
 *
SSL_gë_§p_g
(
SSL
 *
s
);

1836 
BIGNUM
 *
SSL_gë_§p_N
(
SSL
 *
s
);

1838 *
SSL_gë_§p_u£∫ame
(
SSL
 *
s
);

1839 *
SSL_gë_§p_u£röfo
(
SSL
 *
s
);

1842 
SSL_‰ì
(
SSL
 *
s¶
);

1843 
SSL_ac˚±
(
SSL
 *
s¶
);

1844 
SSL_c⁄√˘
(
SSL
 *
s¶
);

1845 
SSL_ªad
(
SSL
 *
s¶
,*
buf
,
num
);

1846 
SSL_≥ek
(
SSL
 *
s¶
,*
buf
,
num
);

1847 
SSL_wrôe
(
SSL
 *
s¶
,c⁄° *
buf
,
num
);

1848 
SSL_˘æ
(
SSL
 *
s¶
,
cmd
, 
œrg
, *
∑rg
);

1849 
SSL_ˇŒback_˘æ
(
SSL
 *, , (*)());

1850 
SSL_CTX_˘æ
(
SSL_CTX
 *
˘x
,
cmd
, 
œrg
, *
∑rg
);

1851 
SSL_CTX_ˇŒback_˘æ
(
SSL_CTX
 *, , (*)());

1853 
SSL_gë_îr‹
(c⁄° 
SSL
 *
s
,
ªt_code
);

1854 c⁄° *
SSL_gë_vîsi⁄
(c⁄° 
SSL
 *
s
);

1857 
SSL_CTX_£t_s¶_vîsi⁄
(
SSL_CTX
 *
˘x
, c⁄° 
SSL_METHOD
 *
mëh
);

1859 #i‚de‡
OPENSSL_NO_SSL2


1860 c⁄° 
SSL_METHOD
 *
SSLv2_mëhod
();

1861 c⁄° 
SSL_METHOD
 *
SSLv2_£rvî_mëhod
();

1862 c⁄° 
SSL_METHOD
 *
SSLv2_˛õ¡_mëhod
();

1865 c⁄° 
SSL_METHOD
 *
SSLv3_mëhod
();

1866 c⁄° 
SSL_METHOD
 *
SSLv3_£rvî_mëhod
();

1867 c⁄° 
SSL_METHOD
 *
SSLv3_˛õ¡_mëhod
();

1869 c⁄° 
SSL_METHOD
 *
SSLv23_mëhod
();

1870 c⁄° 
SSL_METHOD
 *
SSLv23_£rvî_mëhod
();

1871 c⁄° 
SSL_METHOD
 *
SSLv23_˛õ¡_mëhod
();

1873 c⁄° 
SSL_METHOD
 *
TLSv1_mëhod
();

1874 c⁄° 
SSL_METHOD
 *
TLSv1_£rvî_mëhod
();

1875 c⁄° 
SSL_METHOD
 *
TLSv1_˛õ¡_mëhod
();

1877 c⁄° 
SSL_METHOD
 *
TLSv1_1_mëhod
();

1878 c⁄° 
SSL_METHOD
 *
TLSv1_1_£rvî_mëhod
();

1879 c⁄° 
SSL_METHOD
 *
TLSv1_1_˛õ¡_mëhod
();

1881 c⁄° 
SSL_METHOD
 *
TLSv1_2_mëhod
();

1882 c⁄° 
SSL_METHOD
 *
TLSv1_2_£rvî_mëhod
();

1883 c⁄° 
SSL_METHOD
 *
TLSv1_2_˛õ¡_mëhod
();

1886 c⁄° 
SSL_METHOD
 *
DTLSv1_mëhod
();

1887 c⁄° 
SSL_METHOD
 *
DTLSv1_£rvî_mëhod
();

1888 c⁄° 
SSL_METHOD
 *
DTLSv1_˛õ¡_mëhod
();

1890 
STACK_OF
(
SSL_CIPHER
Ë*
SSL_gë_cùhîs
(c⁄° 
SSL
 *
s
);

1892 
SSL_do_h™dshake
(
SSL
 *
s
);

1893 
SSL_ª√gŸüã
(
SSL
 *
s
);

1894 
SSL_ª√gŸüã_abbªvüãd
(
SSL
 *
s
);

1895 
SSL_ª√gŸüã_≥ndög
(
SSL
 *
s
);

1896 
SSL_shutdown
(
SSL
 *
s
);

1898 c⁄° 
SSL_METHOD
 *
SSL_gë_s¶_mëhod
(
SSL
 *
s
);

1899 
SSL_£t_s¶_mëhod
(
SSL
 *
s
, c⁄° 
SSL_METHOD
 *
mëhod
);

1900 c⁄° *
SSL_Æît_ty≥_°rög_l⁄g
(
vÆue
);

1901 c⁄° *
SSL_Æît_ty≥_°rög
(
vÆue
);

1902 c⁄° *
SSL_Æît_desc_°rög_l⁄g
(
vÆue
);

1903 c⁄° *
SSL_Æît_desc_°rög
(
vÆue
);

1905 
SSL_£t_˛õ¡_CA_li°
(
SSL
 *
s
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1906 
SSL_CTX_£t_˛õ¡_CA_li°
(
SSL_CTX
 *
˘x
, 
STACK_OF
(
X509_NAME
Ë*
«me_li°
);

1907 
STACK_OF
(
X509_NAME
Ë*
SSL_gë_˛õ¡_CA_li°
(c⁄° 
SSL
 *
s
);

1908 
STACK_OF
(
X509_NAME
Ë*
SSL_CTX_gë_˛õ¡_CA_li°
(c⁄° 
SSL_CTX
 *
s
);

1909 
SSL_add_˛õ¡_CA
(
SSL
 *
s¶
,
X509
 *
x
);

1910 
SSL_CTX_add_˛õ¡_CA
(
SSL_CTX
 *
˘x
,
X509
 *
x
);

1912 
SSL_£t_c⁄√˘_°©e
(
SSL
 *
s
);

1913 
SSL_£t_ac˚±_°©e
(
SSL
 *
s
);

1915 
SSL_gë_deÁu…_timeout
(c⁄° 
SSL
 *
s
);

1917 
SSL_libøry_öô
();

1919 *
SSL_CIPHER_des¸ùti⁄
(c⁄° 
SSL_CIPHER
 *,*
buf
,
size
);

1920 
STACK_OF
(
X509_NAME
Ë*
SSL_dup_CA_li°
(STACK_OF(X509_NAMEË*
sk
);

1922 
SSL
 *
SSL_dup
(SSL *
s¶
);

1924 
X509
 *
SSL_gë_˚πifiˇã
(c⁄° 
SSL
 *
s¶
);

1925  
evp_pkey_°
 *
SSL_gë_¥iv©ekey
(
SSL
 *
s¶
);

1927 
SSL_CTX_£t_quõt_shutdown
(
SSL_CTX
 *
˘x
,
mode
);

1928 
SSL_CTX_gë_quõt_shutdown
(c⁄° 
SSL_CTX
 *
˘x
);

1929 
SSL_£t_quõt_shutdown
(
SSL
 *
s¶
,
mode
);

1930 
SSL_gë_quõt_shutdown
(c⁄° 
SSL
 *
s¶
);

1931 
SSL_£t_shutdown
(
SSL
 *
s¶
,
mode
);

1932 
SSL_gë_shutdown
(c⁄° 
SSL
 *
s¶
);

1933 
SSL_vîsi⁄
(c⁄° 
SSL
 *
s¶
);

1934 
SSL_CTX_£t_deÁu…_vîify_∑ths
(
SSL_CTX
 *
˘x
);

1935 
SSL_CTX_lﬂd_vîify_loˇti⁄s
(
SSL_CTX
 *
˘x
, c⁄° *
CAfûe
,

1936 c⁄° *
CA∑th
);

1937 
	#SSL_gë0_£ssi⁄
 
SSL_gë_£ssi⁄


	)

1938 
SSL_SESSION
 *
SSL_gë_£ssi⁄
(c⁄° 
SSL
 *
s¶
);

1939 
SSL_SESSION
 *
SSL_gë1_£ssi⁄
(
SSL
 *
s¶
);

1940 
SSL_CTX
 *
SSL_gë_SSL_CTX
(c⁄° 
SSL
 *
s¶
);

1941 
SSL_CTX
 *
SSL_£t_SSL_CTX
(
SSL
 *
s¶
, SSL_CTX* 
˘x
);

1942 
SSL_£t_öfo_ˇŒback
(
SSL
 *
s¶
,

1943 (*
cb
)(c⁄° 
SSL
 *
s¶
,
ty≥
,
vÆ
));

1944 (*
SSL_gë_öfo_ˇŒback
(c⁄° 
SSL
 *
s¶
))(c⁄° SSL *s¶,
ty≥
,
vÆ
);

1945 
SSL_°©e
(c⁄° 
SSL
 *
s¶
);

1946 
SSL_£t_°©e
(
SSL
 *
s¶
, 
°©e
);

1948 
SSL_£t_vîify_ªsu…
(
SSL
 *
s¶
,
v
);

1949 
SSL_gë_vîify_ªsu…
(c⁄° 
SSL
 *
s¶
);

1951 
SSL_£t_ex_d©a
(
SSL
 *
s¶
,
idx
,*
d©a
);

1952 *
SSL_gë_ex_d©a
(c⁄° 
SSL
 *
s¶
,
idx
);

1953 
SSL_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1954 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1956 
SSL_SESSION_£t_ex_d©a
(
SSL_SESSION
 *
ss
,
idx
,*
d©a
);

1957 *
SSL_SESSION_gë_ex_d©a
(c⁄° 
SSL_SESSION
 *
ss
,
idx
);

1958 
SSL_SESSION_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1959 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1961 
SSL_CTX_£t_ex_d©a
(
SSL_CTX
 *
s¶
,
idx
,*
d©a
);

1962 *
SSL_CTX_gë_ex_d©a
(c⁄° 
SSL_CTX
 *
s¶
,
idx
);

1963 
SSL_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

1964 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

1966 
SSL_gë_ex_d©a_X509_STORE_CTX_idx
();

1968 
	#SSL_CTX_£ss_£t_ˇche_size
(
˘x
,
t
) \

1969 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_SIZE
,
t
,
NULL
)

	)

1970 
	#SSL_CTX_£ss_gë_ˇche_size
(
˘x
) \

1971 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_SIZE
,0,
NULL
)

	)

1972 
	#SSL_CTX_£t_£ssi⁄_ˇche_mode
(
˘x
,
m
) \

1973 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_SESS_CACHE_MODE
,
m
,
NULL
)

	)

1974 
	#SSL_CTX_gë_£ssi⁄_ˇche_mode
(
˘x
) \

1975 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_SESS_CACHE_MODE
,0,
NULL
)

	)

1977 
	#SSL_CTX_gë_deÁu…_ªad_ahód
(
˘x
Ë
	`SSL_CTX_gë_ªad_ahód
(˘x)

	)

1978 
	#SSL_CTX_£t_deÁu…_ªad_ahód
(
˘x
,
m
Ë
	`SSL_CTX_£t_ªad_ahód
(˘x,m)

	)

1979 
	#SSL_CTX_gë_ªad_ahód
(
˘x
) \

1980 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_READ_AHEAD
,0,
NULL
)

	)

1981 
	#SSL_CTX_£t_ªad_ahód
(
˘x
,
m
) \

1982 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_READ_AHEAD
,
m
,
NULL
)

	)

1983 
	#SSL_CTX_gë_max_˚π_li°
(
˘x
) \

1984 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1985 
	#SSL_CTX_£t_max_˚π_li°
(
˘x
,
m
) \

1986 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1987 
	#SSL_gë_max_˚π_li°
(
s¶
) \

1988 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_MAX_CERT_LIST
,0,
NULL
)

	)

1989 
	#SSL_£t_max_˚π_li°
(
s¶
,
m
) \

1990 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_CERT_LIST
,
m
,
NULL
)

	)

1992 
	#SSL_CTX_£t_max_£nd_‰agmít
(
˘x
,
m
) \

1993 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1994 
	#SSL_£t_max_£nd_‰agmít
(
s¶
,
m
) \

1995 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_MAX_SEND_FRAGMENT
,
m
,
NULL
)

	)

1998 #i‚de‡
OPENSSL_NO_RSA


1999 
SSL_CTX_£t_tmp_rß_ˇŒback
(
SSL_CTX
 *
˘x
,

2000 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

2001 
keyÀngth
));

2003 
SSL_£t_tmp_rß_ˇŒback
(
SSL
 *
s¶
,

2004 
RSA
 *(*
cb
)(
SSL
 *
s¶
,
is_exp‹t
,

2005 
keyÀngth
));

2007 #i‚de‡
OPENSSL_NO_DH


2008 
SSL_CTX_£t_tmp_dh_ˇŒback
(
SSL_CTX
 *
˘x
,

2009 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2010 
keyÀngth
));

2011 
SSL_£t_tmp_dh_ˇŒback
(
SSL
 *
s¶
,

2012 
DH
 *(*
dh
)(
SSL
 *
s¶
,
is_exp‹t
,

2013 
keyÀngth
));

2015 #i‚de‡
OPENSSL_NO_ECDH


2016 
SSL_CTX_£t_tmp_ecdh_ˇŒback
(
SSL_CTX
 *
˘x
,

2017 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2018 
keyÀngth
));

2019 
SSL_£t_tmp_ecdh_ˇŒback
(
SSL
 *
s¶
,

2020 
EC_KEY
 *(*
ecdh
)(
SSL
 *
s¶
,
is_exp‹t
,

2021 
keyÀngth
));

2024 #i‚de‡
OPENSSL_NO_COMP


2025 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2026 c⁄° 
COMP_METHOD
 *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2027 c⁄° *
SSL_COMP_gë_«me
(c⁄° 
COMP_METHOD
 *
comp
);

2028 
STACK_OF
(
SSL_COMP
Ë*
SSL_COMP_gë_com¥essi⁄_mëhods
();

2029 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,
COMP_METHOD
 *
cm
);

2031 c⁄° *
SSL_gë_cuºít_com¥essi⁄
(
SSL
 *
s
);

2032 c⁄° *
SSL_gë_cuºít_ex∑nsi⁄
(
SSL
 *
s
);

2033 c⁄° *
SSL_COMP_gë_«me
(c⁄° *
comp
);

2034 *
SSL_COMP_gë_com¥essi⁄_mëhods
();

2035 
SSL_COMP_add_com¥essi⁄_mëhod
(
id
,*
cm
);

2039 
SSL_£t_£ssi⁄_tickë_ext
(
SSL
 *
s
, *
ext_d©a
, 
ext_Àn
);

2041 
SSL_£t_£ssi⁄_tickë_ext_cb
(
SSL
 *
s
, 
és_£ssi⁄_tickë_ext_cb_‚
 
cb
,

2042 *
¨g
);

2045 
SSL_£t_£ssi⁄_£¸ë_cb
(
SSL
 *
s
, 
és_£ssi⁄_£¸ë_cb_‚
 
és_£ssi⁄_£¸ë_cb
, *
¨g
);

2047 
SSL_£t_debug
(
SSL
 *
s
, 
debug
);

2048 
SSL_ˇche_hô
(
SSL
 *
s
);

2054 
ERR_lﬂd_SSL_°rögs
();

2059 
	#SSL_F_CLIENT_CERTIFICATE
 100

	)

2060 
	#SSL_F_CLIENT_FINISHED
 167

	)

2061 
	#SSL_F_CLIENT_HELLO
 101

	)

2062 
	#SSL_F_CLIENT_MASTER_KEY
 102

	)

2063 
	#SSL_F_D2I_SSL_SESSION
 103

	)

2064 
	#SSL_F_DO_DTLS1_WRITE
 245

	)

2065 
	#SSL_F_DO_SSL3_WRITE
 104

	)

2066 
	#SSL_F_DTLS1_ACCEPT
 246

	)

2067 
	#SSL_F_DTLS1_ADD_CERT_TO_BUF
 295

	)

2068 
	#SSL_F_DTLS1_BUFFER_RECORD
 247

	)

2069 
	#SSL_F_DTLS1_CLIENT_HELLO
 248

	)

2070 
	#SSL_F_DTLS1_CONNECT
 249

	)

2071 
	#SSL_F_DTLS1_ENC
 250

	)

2072 
	#SSL_F_DTLS1_GET_HELLO_VERIFY
 251

	)

2073 
	#SSL_F_DTLS1_GET_MESSAGE
 252

	)

2074 
	#SSL_F_DTLS1_GET_MESSAGE_FRAGMENT
 253

	)

2075 
	#SSL_F_DTLS1_GET_RECORD
 254

	)

2076 
	#SSL_F_DTLS1_HANDLE_TIMEOUT
 297

	)

2077 
	#SSL_F_DTLS1_HEARTBEAT
 305

	)

2078 
	#SSL_F_DTLS1_OUTPUT_CERT_CHAIN
 255

	)

2079 
	#SSL_F_DTLS1_PREPROCESS_FRAGMENT
 288

	)

2080 
	#SSL_F_DTLS1_PROCESS_OUT_OF_SEQ_MESSAGE
 256

	)

2081 
	#SSL_F_DTLS1_PROCESS_RECORD
 257

	)

2082 
	#SSL_F_DTLS1_READ_BYTES
 258

	)

2083 
	#SSL_F_DTLS1_READ_FAILED
 259

	)

2084 
	#SSL_F_DTLS1_SEND_CERTIFICATE_REQUEST
 260

	)

2085 
	#SSL_F_DTLS1_SEND_CLIENT_CERTIFICATE
 261

	)

2086 
	#SSL_F_DTLS1_SEND_CLIENT_KEY_EXCHANGE
 262

	)

2087 
	#SSL_F_DTLS1_SEND_CLIENT_VERIFY
 263

	)

2088 
	#SSL_F_DTLS1_SEND_HELLO_VERIFY_REQUEST
 264

	)

2089 
	#SSL_F_DTLS1_SEND_SERVER_CERTIFICATE
 265

	)

2090 
	#SSL_F_DTLS1_SEND_SERVER_HELLO
 266

	)

2091 
	#SSL_F_DTLS1_SEND_SERVER_KEY_EXCHANGE
 267

	)

2092 
	#SSL_F_DTLS1_WRITE_APP_DATA_BYTES
 268

	)

2093 
	#SSL_F_GET_CLIENT_FINISHED
 105

	)

2094 
	#SSL_F_GET_CLIENT_HELLO
 106

	)

2095 
	#SSL_F_GET_CLIENT_MASTER_KEY
 107

	)

2096 
	#SSL_F_GET_SERVER_FINISHED
 108

	)

2097 
	#SSL_F_GET_SERVER_HELLO
 109

	)

2098 
	#SSL_F_GET_SERVER_VERIFY
 110

	)

2099 
	#SSL_F_I2D_SSL_SESSION
 111

	)

2100 
	#SSL_F_READ_N
 112

	)

2101 
	#SSL_F_REQUEST_CERTIFICATE
 113

	)

2102 
	#SSL_F_SERVER_FINISH
 239

	)

2103 
	#SSL_F_SERVER_HELLO
 114

	)

2104 
	#SSL_F_SERVER_VERIFY
 240

	)

2105 
	#SSL_F_SSL23_ACCEPT
 115

	)

2106 
	#SSL_F_SSL23_CLIENT_HELLO
 116

	)

2107 
	#SSL_F_SSL23_CONNECT
 117

	)

2108 
	#SSL_F_SSL23_GET_CLIENT_HELLO
 118

	)

2109 
	#SSL_F_SSL23_GET_SERVER_HELLO
 119

	)

2110 
	#SSL_F_SSL23_PEEK
 237

	)

2111 
	#SSL_F_SSL23_READ
 120

	)

2112 
	#SSL_F_SSL23_WRITE
 121

	)

2113 
	#SSL_F_SSL2_ACCEPT
 122

	)

2114 
	#SSL_F_SSL2_CONNECT
 123

	)

2115 
	#SSL_F_SSL2_ENC_INIT
 124

	)

2116 
	#SSL_F_SSL2_GENERATE_KEY_MATERIAL
 241

	)

2117 
	#SSL_F_SSL2_PEEK
 234

	)

2118 
	#SSL_F_SSL2_READ
 125

	)

2119 
	#SSL_F_SSL2_READ_INTERNAL
 236

	)

2120 
	#SSL_F_SSL2_SET_CERTIFICATE
 126

	)

2121 
	#SSL_F_SSL2_WRITE
 127

	)

2122 
	#SSL_F_SSL3_ACCEPT
 128

	)

2123 
	#SSL_F_SSL3_ADD_CERT_TO_BUF
 296

	)

2124 
	#SSL_F_SSL3_CALLBACK_CTRL
 233

	)

2125 
	#SSL_F_SSL3_CHANGE_CIPHER_STATE
 129

	)

2126 
	#SSL_F_SSL3_CHECK_CERT_AND_ALGORITHM
 130

	)

2127 
	#SSL_F_SSL3_CHECK_CLIENT_HELLO
 304

	)

2128 
	#SSL_F_SSL3_CLIENT_HELLO
 131

	)

2129 
	#SSL_F_SSL3_CONNECT
 132

	)

2130 
	#SSL_F_SSL3_CTRL
 213

	)

2131 
	#SSL_F_SSL3_CTX_CTRL
 133

	)

2132 
	#SSL_F_SSL3_DIGEST_CACHED_RECORDS
 293

	)

2133 
	#SSL_F_SSL3_DO_CHANGE_CIPHER_SPEC
 292

	)

2134 
	#SSL_F_SSL3_ENC
 134

	)

2135 
	#SSL_F_SSL3_GENERATE_KEY_BLOCK
 238

	)

2136 
	#SSL_F_SSL3_GET_CERTIFICATE_REQUEST
 135

	)

2137 
	#SSL_F_SSL3_GET_CERT_STATUS
 289

	)

2138 
	#SSL_F_SSL3_GET_CERT_VERIFY
 136

	)

2139 
	#SSL_F_SSL3_GET_CLIENT_CERTIFICATE
 137

	)

2140 
	#SSL_F_SSL3_GET_CLIENT_HELLO
 138

	)

2141 
	#SSL_F_SSL3_GET_CLIENT_KEY_EXCHANGE
 139

	)

2142 
	#SSL_F_SSL3_GET_FINISHED
 140

	)

2143 
	#SSL_F_SSL3_GET_KEY_EXCHANGE
 141

	)

2144 
	#SSL_F_SSL3_GET_MESSAGE
 142

	)

2145 
	#SSL_F_SSL3_GET_NEW_SESSION_TICKET
 283

	)

2146 
	#SSL_F_SSL3_GET_NEXT_PROTO
 306

	)

2147 
	#SSL_F_SSL3_GET_RECORD
 143

	)

2148 
	#SSL_F_SSL3_GET_SERVER_CERTIFICATE
 144

	)

2149 
	#SSL_F_SSL3_GET_SERVER_DONE
 145

	)

2150 
	#SSL_F_SSL3_GET_SERVER_HELLO
 146

	)

2151 
	#SSL_F_SSL3_HANDSHAKE_MAC
 285

	)

2152 
	#SSL_F_SSL3_NEW_SESSION_TICKET
 287

	)

2153 
	#SSL_F_SSL3_OUTPUT_CERT_CHAIN
 147

	)

2154 
	#SSL_F_SSL3_PEEK
 235

	)

2155 
	#SSL_F_SSL3_READ_BYTES
 148

	)

2156 
	#SSL_F_SSL3_READ_N
 149

	)

2157 
	#SSL_F_SSL3_SEND_CERTIFICATE_REQUEST
 150

	)

2158 
	#SSL_F_SSL3_SEND_CLIENT_CERTIFICATE
 151

	)

2159 
	#SSL_F_SSL3_SEND_CLIENT_KEY_EXCHANGE
 152

	)

2160 
	#SSL_F_SSL3_SEND_CLIENT_VERIFY
 153

	)

2161 
	#SSL_F_SSL3_SEND_SERVER_CERTIFICATE
 154

	)

2162 
	#SSL_F_SSL3_SEND_SERVER_HELLO
 242

	)

2163 
	#SSL_F_SSL3_SEND_SERVER_KEY_EXCHANGE
 155

	)

2164 
	#SSL_F_SSL3_SETUP_KEY_BLOCK
 157

	)

2165 
	#SSL_F_SSL3_SETUP_READ_BUFFER
 156

	)

2166 
	#SSL_F_SSL3_SETUP_WRITE_BUFFER
 291

	)

2167 
	#SSL_F_SSL3_WRITE_BYTES
 158

	)

2168 
	#SSL_F_SSL3_WRITE_PENDING
 159

	)

2169 
	#SSL_F_SSL_ADD_CLIENTHELLO_RENEGOTIATE_EXT
 298

	)

2170 
	#SSL_F_SSL_ADD_CLIENTHELLO_TLSEXT
 277

	)

2171 
	#SSL_F_SSL_ADD_CLIENTHELLO_USE_SRTP_EXT
 307

	)

2172 
	#SSL_F_SSL_ADD_DIR_CERT_SUBJECTS_TO_STACK
 215

	)

2173 
	#SSL_F_SSL_ADD_FILE_CERT_SUBJECTS_TO_STACK
 216

	)

2174 
	#SSL_F_SSL_ADD_SERVERHELLO_RENEGOTIATE_EXT
 299

	)

2175 
	#SSL_F_SSL_ADD_SERVERHELLO_TLSEXT
 278

	)

2176 
	#SSL_F_SSL_ADD_SERVERHELLO_USE_SRTP_EXT
 308

	)

2177 
	#SSL_F_SSL_BAD_METHOD
 160

	)

2178 
	#SSL_F_SSL_BYTES_TO_CIPHER_LIST
 161

	)

2179 
	#SSL_F_SSL_CERT_DUP
 221

	)

2180 
	#SSL_F_SSL_CERT_INST
 222

	)

2181 
	#SSL_F_SSL_CERT_INSTANTIATE
 214

	)

2182 
	#SSL_F_SSL_CERT_NEW
 162

	)

2183 
	#SSL_F_SSL_CHECK_PRIVATE_KEY
 163

	)

2184 
	#SSL_F_SSL_CHECK_SERVERHELLO_TLSEXT
 280

	)

2185 
	#SSL_F_SSL_CHECK_SRVR_ECC_CERT_AND_ALG
 279

	)

2186 
	#SSL_F_SSL_CIPHER_PROCESS_RULESTR
 230

	)

2187 
	#SSL_F_SSL_CIPHER_STRENGTH_SORT
 231

	)

2188 
	#SSL_F_SSL_CLEAR
 164

	)

2189 
	#SSL_F_SSL_COMP_ADD_COMPRESSION_METHOD
 165

	)

2190 
	#SSL_F_SSL_CREATE_CIPHER_LIST
 166

	)

2191 
	#SSL_F_SSL_CTRL
 232

	)

2192 
	#SSL_F_SSL_CTX_CHECK_PRIVATE_KEY
 168

	)

2193 
	#SSL_F_SSL_CTX_MAKE_PROFILES
 309

	)

2194 
	#SSL_F_SSL_CTX_NEW
 169

	)

2195 
	#SSL_F_SSL_CTX_SET_CIPHER_LIST
 269

	)

2196 
	#SSL_F_SSL_CTX_SET_CLIENT_CERT_ENGINE
 290

	)

2197 
	#SSL_F_SSL_CTX_SET_PURPOSE
 226

	)

2198 
	#SSL_F_SSL_CTX_SET_SESSION_ID_CONTEXT
 219

	)

2199 
	#SSL_F_SSL_CTX_SET_SSL_VERSION
 170

	)

2200 
	#SSL_F_SSL_CTX_SET_TRUST
 229

	)

2201 
	#SSL_F_SSL_CTX_USE_CERTIFICATE
 171

	)

2202 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_ASN1
 172

	)

2203 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_CHAIN_FILE
 220

	)

2204 
	#SSL_F_SSL_CTX_USE_CERTIFICATE_FILE
 173

	)

2205 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY
 174

	)

2206 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_ASN1
 175

	)

2207 
	#SSL_F_SSL_CTX_USE_PRIVATEKEY_FILE
 176

	)

2208 
	#SSL_F_SSL_CTX_USE_PSK_IDENTITY_HINT
 272

	)

2209 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY
 177

	)

2210 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_ASN1
 178

	)

2211 
	#SSL_F_SSL_CTX_USE_RSAPRIVATEKEY_FILE
 179

	)

2212 
	#SSL_F_SSL_DO_HANDSHAKE
 180

	)

2213 
	#SSL_F_SSL_GET_NEW_SESSION
 181

	)

2214 
	#SSL_F_SSL_GET_PREV_SESSION
 217

	)

2215 
	#SSL_F_SSL_GET_SERVER_SEND_CERT
 182

	)

2216 
	#SSL_F_SSL_GET_SERVER_SEND_PKEY
 317

	)

2217 
	#SSL_F_SSL_GET_SIGN_PKEY
 183

	)

2218 
	#SSL_F_SSL_INIT_WBIO_BUFFER
 184

	)

2219 
	#SSL_F_SSL_LOAD_CLIENT_CA_FILE
 185

	)

2220 
	#SSL_F_SSL_NEW
 186

	)

2221 
	#SSL_F_SSL_PARSE_CLIENTHELLO_RENEGOTIATE_EXT
 300

	)

2222 
	#SSL_F_SSL_PARSE_CLIENTHELLO_TLSEXT
 302

	)

2223 
	#SSL_F_SSL_PARSE_CLIENTHELLO_USE_SRTP_EXT
 310

	)

2224 
	#SSL_F_SSL_PARSE_SERVERHELLO_RENEGOTIATE_EXT
 301

	)

2225 
	#SSL_F_SSL_PARSE_SERVERHELLO_TLSEXT
 303

	)

2226 
	#SSL_F_SSL_PARSE_SERVERHELLO_USE_SRTP_EXT
 311

	)

2227 
	#SSL_F_SSL_PEEK
 270

	)

2228 
	#SSL_F_SSL_PREPARE_CLIENTHELLO_TLSEXT
 281

	)

2229 
	#SSL_F_SSL_PREPARE_SERVERHELLO_TLSEXT
 282

	)

2230 
	#SSL_F_SSL_READ
 223

	)

2231 
	#SSL_F_SSL_RSA_PRIVATE_DECRYPT
 187

	)

2232 
	#SSL_F_SSL_RSA_PUBLIC_ENCRYPT
 188

	)

2233 
	#SSL_F_SSL_SESSION_DUP
 348

	)

2234 
	#SSL_F_SSL_SESSION_NEW
 189

	)

2235 
	#SSL_F_SSL_SESSION_PRINT_FP
 190

	)

2236 
	#SSL_F_SSL_SESSION_SET1_ID_CONTEXT
 312

	)

2237 
	#SSL_F_SSL_SESS_CERT_NEW
 225

	)

2238 
	#SSL_F_SSL_SET_CERT
 191

	)

2239 
	#SSL_F_SSL_SET_CIPHER_LIST
 271

	)

2240 
	#SSL_F_SSL_SET_FD
 192

	)

2241 
	#SSL_F_SSL_SET_PKEY
 193

	)

2242 
	#SSL_F_SSL_SET_PURPOSE
 227

	)

2243 
	#SSL_F_SSL_SET_RFD
 194

	)

2244 
	#SSL_F_SSL_SET_SESSION
 195

	)

2245 
	#SSL_F_SSL_SET_SESSION_ID_CONTEXT
 218

	)

2246 
	#SSL_F_SSL_SET_SESSION_TICKET_EXT
 294

	)

2247 
	#SSL_F_SSL_SET_TRUST
 228

	)

2248 
	#SSL_F_SSL_SET_WFD
 196

	)

2249 
	#SSL_F_SSL_SHUTDOWN
 224

	)

2250 
	#SSL_F_SSL_SRP_CTX_INIT
 313

	)

2251 
	#SSL_F_SSL_UNDEFINED_CONST_FUNCTION
 243

	)

2252 
	#SSL_F_SSL_UNDEFINED_FUNCTION
 197

	)

2253 
	#SSL_F_SSL_UNDEFINED_VOID_FUNCTION
 244

	)

2254 
	#SSL_F_SSL_USE_CERTIFICATE
 198

	)

2255 
	#SSL_F_SSL_USE_CERTIFICATE_ASN1
 199

	)

2256 
	#SSL_F_SSL_USE_CERTIFICATE_FILE
 200

	)

2257 
	#SSL_F_SSL_USE_PRIVATEKEY
 201

	)

2258 
	#SSL_F_SSL_USE_PRIVATEKEY_ASN1
 202

	)

2259 
	#SSL_F_SSL_USE_PRIVATEKEY_FILE
 203

	)

2260 
	#SSL_F_SSL_USE_PSK_IDENTITY_HINT
 273

	)

2261 
	#SSL_F_SSL_USE_RSAPRIVATEKEY
 204

	)

2262 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_ASN1
 205

	)

2263 
	#SSL_F_SSL_USE_RSAPRIVATEKEY_FILE
 206

	)

2264 
	#SSL_F_SSL_VERIFY_CERT_CHAIN
 207

	)

2265 
	#SSL_F_SSL_WRITE
 208

	)

2266 
	#SSL_F_TLS1_CERT_VERIFY_MAC
 286

	)

2267 
	#SSL_F_TLS1_CHANGE_CIPHER_STATE
 209

	)

2268 
	#SSL_F_TLS1_CHECK_SERVERHELLO_TLSEXT
 274

	)

2269 
	#SSL_F_TLS1_ENC
 210

	)

2270 
	#SSL_F_TLS1_EXPORT_KEYING_MATERIAL
 314

	)

2271 
	#SSL_F_TLS1_HEARTBEAT
 315

	)

2272 
	#SSL_F_TLS1_PREPARE_CLIENTHELLO_TLSEXT
 275

	)

2273 
	#SSL_F_TLS1_PREPARE_SERVERHELLO_TLSEXT
 276

	)

2274 
	#SSL_F_TLS1_PRF
 284

	)

2275 
	#SSL_F_TLS1_SETUP_KEY_BLOCK
 211

	)

2276 
	#SSL_F_WRITE_PENDING
 212

	)

2279 
	#SSL_R_APP_DATA_IN_HANDSHAKE
 100

	)

2280 
	#SSL_R_ATTEMPT_TO_REUSE_SESSION_IN_DIFFERENT_CONTEXT
 272

	)

2281 
	#SSL_R_BAD_ALERT_RECORD
 101

	)

2282 
	#SSL_R_BAD_AUTHENTICATION_TYPE
 102

	)

2283 
	#SSL_R_BAD_CHANGE_CIPHER_SPEC
 103

	)

2284 
	#SSL_R_BAD_CHECKSUM
 104

	)

2285 
	#SSL_R_BAD_DATA_RETURNED_BY_CALLBACK
 106

	)

2286 
	#SSL_R_BAD_DECOMPRESSION
 107

	)

2287 
	#SSL_R_BAD_DH_G_LENGTH
 108

	)

2288 
	#SSL_R_BAD_DH_PUB_KEY_LENGTH
 109

	)

2289 
	#SSL_R_BAD_DH_P_LENGTH
 110

	)

2290 
	#SSL_R_BAD_DIGEST_LENGTH
 111

	)

2291 
	#SSL_R_BAD_DSA_SIGNATURE
 112

	)

2292 
	#SSL_R_BAD_ECC_CERT
 304

	)

2293 
	#SSL_R_BAD_ECDSA_SIGNATURE
 305

	)

2294 
	#SSL_R_BAD_ECPOINT
 306

	)

2295 
	#SSL_R_BAD_HANDSHAKE_LENGTH
 332

	)

2296 
	#SSL_R_BAD_HELLO_REQUEST
 105

	)

2297 
	#SSL_R_BAD_LENGTH
 271

	)

2298 
	#SSL_R_BAD_MAC_DECODE
 113

	)

2299 
	#SSL_R_BAD_MAC_LENGTH
 333

	)

2300 
	#SSL_R_BAD_MESSAGE_TYPE
 114

	)

2301 
	#SSL_R_BAD_PACKET_LENGTH
 115

	)

2302 
	#SSL_R_BAD_PROTOCOL_VERSION_NUMBER
 116

	)

2303 
	#SSL_R_BAD_PSK_IDENTITY_HINT_LENGTH
 316

	)

2304 
	#SSL_R_BAD_RESPONSE_ARGUMENT
 117

	)

2305 
	#SSL_R_BAD_RSA_DECRYPT
 118

	)

2306 
	#SSL_R_BAD_RSA_ENCRYPT
 119

	)

2307 
	#SSL_R_BAD_RSA_E_LENGTH
 120

	)

2308 
	#SSL_R_BAD_RSA_MODULUS_LENGTH
 121

	)

2309 
	#SSL_R_BAD_RSA_SIGNATURE
 122

	)

2310 
	#SSL_R_BAD_SIGNATURE
 123

	)

2311 
	#SSL_R_BAD_SRP_A_LENGTH
 347

	)

2312 
	#SSL_R_BAD_SRP_B_LENGTH
 348

	)

2313 
	#SSL_R_BAD_SRP_G_LENGTH
 349

	)

2314 
	#SSL_R_BAD_SRP_N_LENGTH
 350

	)

2315 
	#SSL_R_BAD_SRP_S_LENGTH
 351

	)

2316 
	#SSL_R_BAD_SRTP_MKI_VALUE
 352

	)

2317 
	#SSL_R_BAD_SRTP_PROTECTION_PROFILE_LIST
 353

	)

2318 
	#SSL_R_BAD_SSL_FILETYPE
 124

	)

2319 
	#SSL_R_BAD_SSL_SESSION_ID_LENGTH
 125

	)

2320 
	#SSL_R_BAD_STATE
 126

	)

2321 
	#SSL_R_BAD_WRITE_RETRY
 127

	)

2322 
	#SSL_R_BIO_NOT_SET
 128

	)

2323 
	#SSL_R_BLOCK_CIPHER_PAD_IS_WRONG
 129

	)

2324 
	#SSL_R_BN_LIB
 130

	)

2325 
	#SSL_R_CA_DN_LENGTH_MISMATCH
 131

	)

2326 
	#SSL_R_CA_DN_TOO_LONG
 132

	)

2327 
	#SSL_R_CCS_RECEIVED_EARLY
 133

	)

2328 
	#SSL_R_CERTIFICATE_VERIFY_FAILED
 134

	)

2329 
	#SSL_R_CERT_LENGTH_MISMATCH
 135

	)

2330 
	#SSL_R_CHALLENGE_IS_DIFFERENT
 136

	)

2331 
	#SSL_R_CIPHER_CODE_WRONG_LENGTH
 137

	)

2332 
	#SSL_R_CIPHER_OR_HASH_UNAVAILABLE
 138

	)

2333 
	#SSL_R_CIPHER_TABLE_SRC_ERROR
 139

	)

2334 
	#SSL_R_CLIENTHELLO_TLSEXT
 226

	)

2335 
	#SSL_R_COMPRESSED_LENGTH_TOO_LONG
 140

	)

2336 
	#SSL_R_COMPRESSION_DISABLED
 343

	)

2337 
	#SSL_R_COMPRESSION_FAILURE
 141

	)

2338 
	#SSL_R_COMPRESSION_ID_NOT_WITHIN_PRIVATE_RANGE
 307

	)

2339 
	#SSL_R_COMPRESSION_LIBRARY_ERROR
 142

	)

2340 
	#SSL_R_CONNECTION_ID_IS_DIFFERENT
 143

	)

2341 
	#SSL_R_CONNECTION_TYPE_NOT_SET
 144

	)

2342 
	#SSL_R_COOKIE_MISMATCH
 308

	)

2343 
	#SSL_R_DATA_BETWEEN_CCS_AND_FINISHED
 145

	)

2344 
	#SSL_R_DATA_LENGTH_TOO_LONG
 146

	)

2345 
	#SSL_R_DECRYPTION_FAILED
 147

	)

2346 
	#SSL_R_DECRYPTION_FAILED_OR_BAD_RECORD_MAC
 281

	)

2347 
	#SSL_R_DH_KEY_TOO_SMALL
 372

	)

2348 
	#SSL_R_DH_PUBLIC_VALUE_LENGTH_IS_WRONG
 148

	)

2349 
	#SSL_R_DIGEST_CHECK_FAILED
 149

	)

2350 
	#SSL_R_DTLS_MESSAGE_TOO_BIG
 334

	)

2351 
	#SSL_R_DUPLICATE_COMPRESSION_ID
 309

	)

2352 
	#SSL_R_ECC_CERT_NOT_FOR_KEY_AGREEMENT
 317

	)

2353 
	#SSL_R_ECC_CERT_NOT_FOR_SIGNING
 318

	)

2354 
	#SSL_R_ECC_CERT_SHOULD_HAVE_RSA_SIGNATURE
 322

	)

2355 
	#SSL_R_ECC_CERT_SHOULD_HAVE_SHA1_SIGNATURE
 323

	)

2356 
	#SSL_R_ECGROUP_TOO_LARGE_FOR_CIPHER
 310

	)

2357 
	#SSL_R_EMPTY_SRTP_PROTECTION_PROFILE_LIST
 354

	)

2358 
	#SSL_R_ENCRYPTED_LENGTH_TOO_LONG
 150

	)

2359 
	#SSL_R_ERROR_GENERATING_TMP_RSA_KEY
 282

	)

2360 
	#SSL_R_ERROR_IN_RECEIVED_CIPHER_LIST
 151

	)

2361 
	#SSL_R_EXCESSIVE_MESSAGE_SIZE
 152

	)

2362 
	#SSL_R_EXTRA_DATA_IN_MESSAGE
 153

	)

2363 
	#SSL_R_GOT_A_FIN_BEFORE_A_CCS
 154

	)

2364 
	#SSL_R_GOT_NEXT_PROTO_BEFORE_A_CCS
 355

	)

2365 
	#SSL_R_GOT_NEXT_PROTO_WITHOUT_EXTENSION
 356

	)

2366 
	#SSL_R_HTTPS_PROXY_REQUEST
 155

	)

2367 
	#SSL_R_HTTP_REQUEST
 156

	)

2368 
	#SSL_R_ILLEGAL_PADDING
 283

	)

2369 
	#SSL_R_INAPPROPRIATE_FALLBACK
 373

	)

2370 
	#SSL_R_INCONSISTENT_COMPRESSION
 340

	)

2371 
	#SSL_R_INVALID_CHALLENGE_LENGTH
 158

	)

2372 
	#SSL_R_INVALID_COMMAND
 280

	)

2373 
	#SSL_R_INVALID_COMPRESSION_ALGORITHM
 341

	)

2374 
	#SSL_R_INVALID_PURPOSE
 278

	)

2375 
	#SSL_R_INVALID_SRP_USERNAME
 357

	)

2376 
	#SSL_R_INVALID_STATUS_RESPONSE
 328

	)

2377 
	#SSL_R_INVALID_TICKET_KEYS_LENGTH
 325

	)

2378 
	#SSL_R_INVALID_TRUST
 279

	)

2379 
	#SSL_R_KEY_ARG_TOO_LONG
 284

	)

2380 
	#SSL_R_KRB5
 285

	)

2381 
	#SSL_R_KRB5_C_CC_PRINC
 286

	)

2382 
	#SSL_R_KRB5_C_GET_CRED
 287

	)

2383 
	#SSL_R_KRB5_C_INIT
 288

	)

2384 
	#SSL_R_KRB5_C_MK_REQ
 289

	)

2385 
	#SSL_R_KRB5_S_BAD_TICKET
 290

	)

2386 
	#SSL_R_KRB5_S_INIT
 291

	)

2387 
	#SSL_R_KRB5_S_RD_REQ
 292

	)

2388 
	#SSL_R_KRB5_S_TKT_EXPIRED
 293

	)

2389 
	#SSL_R_KRB5_S_TKT_NYV
 294

	)

2390 
	#SSL_R_KRB5_S_TKT_SKEW
 295

	)

2391 
	#SSL_R_LENGTH_MISMATCH
 159

	)

2392 
	#SSL_R_LENGTH_TOO_SHORT
 160

	)

2393 
	#SSL_R_LIBRARY_BUG
 274

	)

2394 
	#SSL_R_LIBRARY_HAS_NO_CIPHERS
 161

	)

2395 
	#SSL_R_MESSAGE_TOO_LONG
 296

	)

2396 
	#SSL_R_MISSING_DH_DSA_CERT
 162

	)

2397 
	#SSL_R_MISSING_DH_KEY
 163

	)

2398 
	#SSL_R_MISSING_DH_RSA_CERT
 164

	)

2399 
	#SSL_R_MISSING_DSA_SIGNING_CERT
 165

	)

2400 
	#SSL_R_MISSING_EXPORT_TMP_DH_KEY
 166

	)

2401 
	#SSL_R_MISSING_EXPORT_TMP_RSA_KEY
 167

	)

2402 
	#SSL_R_MISSING_RSA_CERTIFICATE
 168

	)

2403 
	#SSL_R_MISSING_RSA_ENCRYPTING_CERT
 169

	)

2404 
	#SSL_R_MISSING_RSA_SIGNING_CERT
 170

	)

2405 
	#SSL_R_MISSING_SRP_PARAM
 358

	)

2406 
	#SSL_R_MISSING_TMP_DH_KEY
 171

	)

2407 
	#SSL_R_MISSING_TMP_ECDH_KEY
 311

	)

2408 
	#SSL_R_MISSING_TMP_RSA_KEY
 172

	)

2409 
	#SSL_R_MISSING_TMP_RSA_PKEY
 173

	)

2410 
	#SSL_R_MISSING_VERIFY_MESSAGE
 174

	)

2411 
	#SSL_R_MULTIPLE_SGC_RESTARTS
 346

	)

2412 
	#SSL_R_NON_SSLV2_INITIAL_PACKET
 175

	)

2413 
	#SSL_R_NO_CERTIFICATES_RETURNED
 176

	)

2414 
	#SSL_R_NO_CERTIFICATE_ASSIGNED
 177

	)

2415 
	#SSL_R_NO_CERTIFICATE_RETURNED
 178

	)

2416 
	#SSL_R_NO_CERTIFICATE_SET
 179

	)

2417 
	#SSL_R_NO_CERTIFICATE_SPECIFIED
 180

	)

2418 
	#SSL_R_NO_CIPHERS_AVAILABLE
 181

	)

2419 
	#SSL_R_NO_CIPHERS_PASSED
 182

	)

2420 
	#SSL_R_NO_CIPHERS_SPECIFIED
 183

	)

2421 
	#SSL_R_NO_CIPHER_LIST
 184

	)

2422 
	#SSL_R_NO_CIPHER_MATCH
 185

	)

2423 
	#SSL_R_NO_CLIENT_CERT_METHOD
 331

	)

2424 
	#SSL_R_NO_CLIENT_CERT_RECEIVED
 186

	)

2425 
	#SSL_R_NO_COMPRESSION_SPECIFIED
 187

	)

2426 
	#SSL_R_NO_GOST_CERTIFICATE_SENT_BY_PEER
 330

	)

2427 
	#SSL_R_NO_METHOD_SPECIFIED
 188

	)

2428 
	#SSL_R_NO_PRIVATEKEY
 189

	)

2429 
	#SSL_R_NO_PRIVATE_KEY_ASSIGNED
 190

	)

2430 
	#SSL_R_NO_PROTOCOLS_AVAILABLE
 191

	)

2431 
	#SSL_R_NO_PUBLICKEY
 192

	)

2432 
	#SSL_R_NO_RENEGOTIATION
 339

	)

2433 
	#SSL_R_NO_REQUIRED_DIGEST
 324

	)

2434 
	#SSL_R_NO_SHARED_CIPHER
 193

	)

2435 
	#SSL_R_NO_SRTP_PROFILES
 359

	)

2436 
	#SSL_R_NO_VERIFY_CALLBACK
 194

	)

2437 
	#SSL_R_NULL_SSL_CTX
 195

	)

2438 
	#SSL_R_NULL_SSL_METHOD_PASSED
 196

	)

2439 
	#SSL_R_OLD_SESSION_CIPHER_NOT_RETURNED
 197

	)

2440 
	#SSL_R_OLD_SESSION_COMPRESSION_ALGORITHM_NOT_RETURNED
 344

	)

2441 
	#SSL_R_ONLY_TLS_ALLOWED_IN_FIPS_MODE
 297

	)

2442 
	#SSL_R_OPAQUE_PRF_INPUT_TOO_LONG
 327

	)

2443 
	#SSL_R_PACKET_LENGTH_TOO_LONG
 198

	)

2444 
	#SSL_R_PARSE_TLSEXT
 227

	)

2445 
	#SSL_R_PATH_TOO_LONG
 270

	)

2446 
	#SSL_R_PEER_DID_NOT_RETURN_A_CERTIFICATE
 199

	)

2447 
	#SSL_R_PEER_ERROR
 200

	)

2448 
	#SSL_R_PEER_ERROR_CERTIFICATE
 201

	)

2449 
	#SSL_R_PEER_ERROR_NO_CERTIFICATE
 202

	)

2450 
	#SSL_R_PEER_ERROR_NO_CIPHER
 203

	)

2451 
	#SSL_R_PEER_ERROR_UNSUPPORTED_CERTIFICATE_TYPE
 204

	)

2452 
	#SSL_R_PRE_MAC_LENGTH_TOO_LONG
 205

	)

2453 
	#SSL_R_PROBLEMS_MAPPING_CIPHER_FUNCTIONS
 206

	)

2454 
	#SSL_R_PROTOCOL_IS_SHUTDOWN
 207

	)

2455 
	#SSL_R_PSK_IDENTITY_NOT_FOUND
 223

	)

2456 
	#SSL_R_PSK_NO_CLIENT_CB
 224

	)

2457 
	#SSL_R_PSK_NO_SERVER_CB
 225

	)

2458 
	#SSL_R_PUBLIC_KEY_ENCRYPT_ERROR
 208

	)

2459 
	#SSL_R_PUBLIC_KEY_IS_NOT_RSA
 209

	)

2460 
	#SSL_R_PUBLIC_KEY_NOT_RSA
 210

	)

2461 
	#SSL_R_READ_BIO_NOT_SET
 211

	)

2462 
	#SSL_R_READ_TIMEOUT_EXPIRED
 312

	)

2463 
	#SSL_R_READ_WRONG_PACKET_TYPE
 212

	)

2464 
	#SSL_R_RECORD_LENGTH_MISMATCH
 213

	)

2465 
	#SSL_R_RECORD_TOO_LARGE
 214

	)

2466 
	#SSL_R_RECORD_TOO_SMALL
 298

	)

2467 
	#SSL_R_RENEGOTIATE_EXT_TOO_LONG
 335

	)

2468 
	#SSL_R_RENEGOTIATION_ENCODING_ERR
 336

	)

2469 
	#SSL_R_RENEGOTIATION_MISMATCH
 337

	)

2470 
	#SSL_R_REQUIRED_CIPHER_MISSING
 215

	)

2471 
	#SSL_R_REQUIRED_COMPRESSSION_ALGORITHM_MISSING
 342

	)

2472 
	#SSL_R_REUSE_CERT_LENGTH_NOT_ZERO
 216

	)

2473 
	#SSL_R_REUSE_CERT_TYPE_NOT_ZERO
 217

	)

2474 
	#SSL_R_REUSE_CIPHER_LIST_NOT_ZERO
 218

	)

2475 
	#SSL_R_SCSV_RECEIVED_WHEN_RENEGOTIATING
 345

	)

2476 
	#SSL_R_SERVERHELLO_TLSEXT
 275

	)

2477 
	#SSL_R_SESSION_ID_CONTEXT_UNINITIALIZED
 277

	)

2478 
	#SSL_R_SHORT_READ
 219

	)

2479 
	#SSL_R_SIGNATURE_ALGORITHMS_ERROR
 360

	)

2480 
	#SSL_R_SIGNATURE_FOR_NON_SIGNING_CERTIFICATE
 220

	)

2481 
	#SSL_R_SRP_A_CALC
 361

	)

2482 
	#SSL_R_SRTP_COULD_NOT_ALLOCATE_PROFILES
 362

	)

2483 
	#SSL_R_SRTP_PROTECTION_PROFILE_LIST_TOO_LONG
 363

	)

2484 
	#SSL_R_SRTP_UNKNOWN_PROTECTION_PROFILE
 364

	)

2485 
	#SSL_R_SSL23_DOING_SESSION_ID_REUSE
 221

	)

2486 
	#SSL_R_SSL2_CONNECTION_ID_TOO_LONG
 299

	)

2487 
	#SSL_R_SSL3_EXT_INVALID_ECPOINTFORMAT
 321

	)

2488 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME
 319

	)

2489 
	#SSL_R_SSL3_EXT_INVALID_SERVERNAME_TYPE
 320

	)

2490 
	#SSL_R_SSL3_SESSION_ID_TOO_LONG
 300

	)

2491 
	#SSL_R_SSL3_SESSION_ID_TOO_SHORT
 222

	)

2492 
	#SSL_R_SSLV3_ALERT_BAD_CERTIFICATE
 1042

	)

2493 
	#SSL_R_SSLV3_ALERT_BAD_RECORD_MAC
 1020

	)

2494 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_EXPIRED
 1045

	)

2495 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_REVOKED
 1044

	)

2496 
	#SSL_R_SSLV3_ALERT_CERTIFICATE_UNKNOWN
 1046

	)

2497 
	#SSL_R_SSLV3_ALERT_DECOMPRESSION_FAILURE
 1030

	)

2498 
	#SSL_R_SSLV3_ALERT_HANDSHAKE_FAILURE
 1040

	)

2499 
	#SSL_R_SSLV3_ALERT_ILLEGAL_PARAMETER
 1047

	)

2500 
	#SSL_R_SSLV3_ALERT_NO_CERTIFICATE
 1041

	)

2501 
	#SSL_R_SSLV3_ALERT_UNEXPECTED_MESSAGE
 1010

	)

2502 
	#SSL_R_SSLV3_ALERT_UNSUPPORTED_CERTIFICATE
 1043

	)

2503 
	#SSL_R_SSL_CTX_HAS_NO_DEFAULT_SSL_VERSION
 228

	)

2504 
	#SSL_R_SSL_HANDSHAKE_FAILURE
 229

	)

2505 
	#SSL_R_SSL_LIBRARY_HAS_NO_CIPHERS
 230

	)

2506 
	#SSL_R_SSL_SESSION_ID_CALLBACK_FAILED
 301

	)

2507 
	#SSL_R_SSL_SESSION_ID_CONFLICT
 302

	)

2508 
	#SSL_R_SSL_SESSION_ID_CONTEXT_TOO_LONG
 273

	)

2509 
	#SSL_R_SSL_SESSION_ID_HAS_BAD_LENGTH
 303

	)

2510 
	#SSL_R_SSL_SESSION_ID_IS_DIFFERENT
 231

	)

2511 
	#SSL_R_TLSV1_ALERT_ACCESS_DENIED
 1049

	)

2512 
	#SSL_R_TLSV1_ALERT_DECODE_ERROR
 1050

	)

2513 
	#SSL_R_TLSV1_ALERT_DECRYPTION_FAILED
 1021

	)

2514 
	#SSL_R_TLSV1_ALERT_DECRYPT_ERROR
 1051

	)

2515 
	#SSL_R_TLSV1_ALERT_EXPORT_RESTRICTION
 1060

	)

2516 
	#SSL_R_TLSV1_ALERT_INAPPROPRIATE_FALLBACK
 1086

	)

2517 
	#SSL_R_TLSV1_ALERT_INSUFFICIENT_SECURITY
 1071

	)

2518 
	#SSL_R_TLSV1_ALERT_INTERNAL_ERROR
 1080

	)

2519 
	#SSL_R_TLSV1_ALERT_NO_RENEGOTIATION
 1100

	)

2520 
	#SSL_R_TLSV1_ALERT_PROTOCOL_VERSION
 1070

	)

2521 
	#SSL_R_TLSV1_ALERT_RECORD_OVERFLOW
 1022

	)

2522 
	#SSL_R_TLSV1_ALERT_UNKNOWN_CA
 1048

	)

2523 
	#SSL_R_TLSV1_ALERT_USER_CANCELLED
 1090

	)

2524 
	#SSL_R_TLSV1_BAD_CERTIFICATE_HASH_VALUE
 1114

	)

2525 
	#SSL_R_TLSV1_BAD_CERTIFICATE_STATUS_RESPONSE
 1113

	)

2526 
	#SSL_R_TLSV1_CERTIFICATE_UNOBTAINABLE
 1111

	)

2527 
	#SSL_R_TLSV1_UNRECOGNIZED_NAME
 1112

	)

2528 
	#SSL_R_TLSV1_UNSUPPORTED_EXTENSION
 1110

	)

2529 
	#SSL_R_TLS_CLIENT_CERT_REQ_WITH_ANON_CIPHER
 232

	)

2530 
	#SSL_R_TLS_HEARTBEAT_PEER_DOESNT_ACCEPT
 365

	)

2531 
	#SSL_R_TLS_HEARTBEAT_PENDING
 366

	)

2532 
	#SSL_R_TLS_ILLEGAL_EXPORTER_LABEL
 367

	)

2533 
	#SSL_R_TLS_INVALID_ECPOINTFORMAT_LIST
 157

	)

2534 
	#SSL_R_TLS_PEER_DID_NOT_RESPOND_WITH_CERTIFICATE_LIST
 233

	)

2535 
	#SSL_R_TLS_RSA_ENCRYPTED_VALUE_LENGTH_IS_WRONG
 234

	)

2536 
	#SSL_R_TRIED_TO_USE_UNSUPPORTED_CIPHER
 235

	)

2537 
	#SSL_R_UNABLE_TO_DECODE_DH_CERTS
 236

	)

2538 
	#SSL_R_UNABLE_TO_DECODE_ECDH_CERTS
 313

	)

2539 
	#SSL_R_UNABLE_TO_EXTRACT_PUBLIC_KEY
 237

	)

2540 
	#SSL_R_UNABLE_TO_FIND_DH_PARAMETERS
 238

	)

2541 
	#SSL_R_UNABLE_TO_FIND_ECDH_PARAMETERS
 314

	)

2542 
	#SSL_R_UNABLE_TO_FIND_PUBLIC_KEY_PARAMETERS
 239

	)

2543 
	#SSL_R_UNABLE_TO_FIND_SSL_METHOD
 240

	)

2544 
	#SSL_R_UNABLE_TO_LOAD_SSL2_MD5_ROUTINES
 241

	)

2545 
	#SSL_R_UNABLE_TO_LOAD_SSL3_MD5_ROUTINES
 242

	)

2546 
	#SSL_R_UNABLE_TO_LOAD_SSL3_SHA1_ROUTINES
 243

	)

2547 
	#SSL_R_UNEXPECTED_MESSAGE
 244

	)

2548 
	#SSL_R_UNEXPECTED_RECORD
 245

	)

2549 
	#SSL_R_UNINITIALIZED
 276

	)

2550 
	#SSL_R_UNKNOWN_ALERT_TYPE
 246

	)

2551 
	#SSL_R_UNKNOWN_CERTIFICATE_TYPE
 247

	)

2552 
	#SSL_R_UNKNOWN_CIPHER_RETURNED
 248

	)

2553 
	#SSL_R_UNKNOWN_CIPHER_TYPE
 249

	)

2554 
	#SSL_R_UNKNOWN_DIGEST
 368

	)

2555 
	#SSL_R_UNKNOWN_KEY_EXCHANGE_TYPE
 250

	)

2556 
	#SSL_R_UNKNOWN_PKEY_TYPE
 251

	)

2557 
	#SSL_R_UNKNOWN_PROTOCOL
 252

	)

2558 
	#SSL_R_UNKNOWN_REMOTE_ERROR_TYPE
 253

	)

2559 
	#SSL_R_UNKNOWN_SSL_VERSION
 254

	)

2560 
	#SSL_R_UNKNOWN_STATE
 255

	)

2561 
	#SSL_R_UNSAFE_LEGACY_RENEGOTIATION_DISABLED
 338

	)

2562 
	#SSL_R_UNSUPPORTED_CIPHER
 256

	)

2563 
	#SSL_R_UNSUPPORTED_COMPRESSION_ALGORITHM
 257

	)

2564 
	#SSL_R_UNSUPPORTED_DIGEST_TYPE
 326

	)

2565 
	#SSL_R_UNSUPPORTED_ELLIPTIC_CURVE
 315

	)

2566 
	#SSL_R_UNSUPPORTED_PROTOCOL
 258

	)

2567 
	#SSL_R_UNSUPPORTED_SSL_VERSION
 259

	)

2568 
	#SSL_R_UNSUPPORTED_STATUS_TYPE
 329

	)

2569 
	#SSL_R_USE_SRTP_NOT_NEGOTIATED
 369

	)

2570 
	#SSL_R_WRITE_BIO_NOT_SET
 260

	)

2571 
	#SSL_R_WRONG_CIPHER_RETURNED
 261

	)

2572 
	#SSL_R_WRONG_MESSAGE_TYPE
 262

	)

2573 
	#SSL_R_WRONG_NUMBER_OF_KEY_BITS
 263

	)

2574 
	#SSL_R_WRONG_SIGNATURE_LENGTH
 264

	)

2575 
	#SSL_R_WRONG_SIGNATURE_SIZE
 265

	)

2576 
	#SSL_R_WRONG_SIGNATURE_TYPE
 370

	)

2577 
	#SSL_R_WRONG_SSL_VERSION
 266

	)

2578 
	#SSL_R_WRONG_VERSION_NUMBER
 267

	)

2579 
	#SSL_R_X509_LIB
 268

	)

2580 
	#SSL_R_X509_VERIFICATION_SETUP_PROBLEMS
 269

	)

2582 #ifde‡ 
__˝lu•lus


	@/usr/include/pcre.h

39 #i‚de‡
_PCRE_H


40 
	#_PCRE_H


	)

44 
	#PCRE_MAJOR
 8

	)

45 
	#PCRE_MINOR
 12

	)

46 
	#PCRE_PRERELEASE


	)

47 
	#PCRE_DATE
 2011-01-15

	)

54 #i‡
deföed
(
_WIN32
Ë&& !deföed(
PCRE_STATIC
)

55 #i‚de‡
PCRE_EXP_DECL


56 
	#PCRE_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

58 #ifde‡
__˝lu•lus


59 #i‚de‡
PCRECPP_EXP_DECL


60 
	#PCRECPP_EXP_DECL
 
	`__de˛•ec
(
dŒimp‹t
)

	)

62 #i‚de‡
PCRECPP_EXP_DEFN


63 
	#PCRECPP_EXP_DEFN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

70 #i‚de‡
PCRE_EXP_DECL


71 #ifde‡
__˝lu•lus


72 
	#PCRE_EXP_DECL
 "C"

	)

74 
	#PCRE_EXP_DECL
 

	)

78 #ifde‡
__˝lu•lus


79 #i‚de‡
PCRECPP_EXP_DECL


80 
	#PCRECPP_EXP_DECL
 

	)

82 #i‚de‡
PCRECPP_EXP_DEFN


83 
	#PCRECPP_EXP_DEFN


	)

90 
	~<°dlib.h
>

94 #ifde‡
__˝lu•lus


103 
	#PCRE_CASELESS
 0x00000001

	)

104 
	#PCRE_MULTILINE
 0x00000002

	)

105 
	#PCRE_DOTALL
 0x00000004

	)

106 
	#PCRE_EXTENDED
 0x00000008

	)

107 
	#PCRE_ANCHORED
 0x00000010

	)

108 
	#PCRE_DOLLAR_ENDONLY
 0x00000020

	)

109 
	#PCRE_EXTRA
 0x00000040

	)

110 
	#PCRE_NOTBOL
 0x00000080

	)

111 
	#PCRE_NOTEOL
 0x00000100

	)

112 
	#PCRE_UNGREEDY
 0x00000200

	)

113 
	#PCRE_NOTEMPTY
 0x00000400

	)

114 
	#PCRE_UTF8
 0x00000800

	)

115 
	#PCRE_NO_AUTO_CAPTURE
 0x00001000

	)

116 
	#PCRE_NO_UTF8_CHECK
 0x00002000

	)

117 
	#PCRE_AUTO_CALLOUT
 0x00004000

	)

118 
	#PCRE_PARTIAL_SOFT
 0x00008000

	)

119 
	#PCRE_PARTIAL
 0x00008000

	)

120 
	#PCRE_DFA_SHORTEST
 0x00010000

	)

121 
	#PCRE_DFA_RESTART
 0x00020000

	)

122 
	#PCRE_FIRSTLINE
 0x00040000

	)

123 
	#PCRE_DUPNAMES
 0x00080000

	)

124 
	#PCRE_NEWLINE_CR
 0x00100000

	)

125 
	#PCRE_NEWLINE_LF
 0x00200000

	)

126 
	#PCRE_NEWLINE_CRLF
 0x00300000

	)

127 
	#PCRE_NEWLINE_ANY
 0x00400000

	)

128 
	#PCRE_NEWLINE_ANYCRLF
 0x00500000

	)

129 
	#PCRE_BSR_ANYCRLF
 0x00800000

	)

130 
	#PCRE_BSR_UNICODE
 0x01000000

	)

131 
	#PCRE_JAVASCRIPT_COMPAT
 0x02000000

	)

132 
	#PCRE_NO_START_OPTIMIZE
 0x04000000

	)

133 
	#PCRE_NO_START_OPTIMISE
 0x04000000

	)

134 
	#PCRE_PARTIAL_HARD
 0x08000000

	)

135 
	#PCRE_NOTEMPTY_ATSTART
 0x10000000

	)

136 
	#PCRE_UCP
 0x20000000

	)

140 
	#PCRE_ERROR_NOMATCH
 (-1)

	)

141 
	#PCRE_ERROR_NULL
 (-2)

	)

142 
	#PCRE_ERROR_BADOPTION
 (-3)

	)

143 
	#PCRE_ERROR_BADMAGIC
 (-4)

	)

144 
	#PCRE_ERROR_UNKNOWN_OPCODE
 (-5)

	)

145 
	#PCRE_ERROR_UNKNOWN_NODE
 (-5Ë

	)

146 
	#PCRE_ERROR_NOMEMORY
 (-6)

	)

147 
	#PCRE_ERROR_NOSUBSTRING
 (-7)

	)

148 
	#PCRE_ERROR_MATCHLIMIT
 (-8)

	)

149 
	#PCRE_ERROR_CALLOUT
 (-9Ë

	)

150 
	#PCRE_ERROR_BADUTF8
 (-10)

	)

151 
	#PCRE_ERROR_BADUTF8_OFFSET
 (-11)

	)

152 
	#PCRE_ERROR_PARTIAL
 (-12)

	)

153 
	#PCRE_ERROR_BADPARTIAL
 (-13)

	)

154 
	#PCRE_ERROR_INTERNAL
 (-14)

	)

155 
	#PCRE_ERROR_BADCOUNT
 (-15)

	)

156 
	#PCRE_ERROR_DFA_UITEM
 (-16)

	)

157 
	#PCRE_ERROR_DFA_UCOND
 (-17)

	)

158 
	#PCRE_ERROR_DFA_UMLIMIT
 (-18)

	)

159 
	#PCRE_ERROR_DFA_WSSIZE
 (-19)

	)

160 
	#PCRE_ERROR_DFA_RECURSE
 (-20)

	)

161 
	#PCRE_ERROR_RECURSIONLIMIT
 (-21)

	)

162 
	#PCRE_ERROR_NULLWSLIMIT
 (-22Ë

	)

163 
	#PCRE_ERROR_BADNEWLINE
 (-23)

	)

164 
	#PCRE_ERROR_BADOFFSET
 (-24)

	)

165 
	#PCRE_ERROR_SHORTUTF8
 (-25)

	)

169 
	#PCRE_INFO_OPTIONS
 0

	)

170 
	#PCRE_INFO_SIZE
 1

	)

171 
	#PCRE_INFO_CAPTURECOUNT
 2

	)

172 
	#PCRE_INFO_BACKREFMAX
 3

	)

173 
	#PCRE_INFO_FIRSTBYTE
 4

	)

174 
	#PCRE_INFO_FIRSTCHAR
 4

	)

175 
	#PCRE_INFO_FIRSTTABLE
 5

	)

176 
	#PCRE_INFO_LASTLITERAL
 6

	)

177 
	#PCRE_INFO_NAMEENTRYSIZE
 7

	)

178 
	#PCRE_INFO_NAMECOUNT
 8

	)

179 
	#PCRE_INFO_NAMETABLE
 9

	)

180 
	#PCRE_INFO_STUDYSIZE
 10

	)

181 
	#PCRE_INFO_DEFAULT_TABLES
 11

	)

182 
	#PCRE_INFO_OKPARTIAL
 12

	)

183 
	#PCRE_INFO_JCHANGED
 13

	)

184 
	#PCRE_INFO_HASCRORLF
 14

	)

185 
	#PCRE_INFO_MINLENGTH
 15

	)

190 
	#PCRE_CONFIG_UTF8
 0

	)

191 
	#PCRE_CONFIG_NEWLINE
 1

	)

192 
	#PCRE_CONFIG_LINK_SIZE
 2

	)

193 
	#PCRE_CONFIG_POSIX_MALLOC_THRESHOLD
 3

	)

194 
	#PCRE_CONFIG_MATCH_LIMIT
 4

	)

195 
	#PCRE_CONFIG_STACKRECURSE
 5

	)

196 
	#PCRE_CONFIG_UNICODE_PROPERTIES
 6

	)

197 
	#PCRE_CONFIG_MATCH_LIMIT_RECURSION
 7

	)

198 
	#PCRE_CONFIG_BSR
 8

	)

203 
	#PCRE_EXTRA_STUDY_DATA
 0x0001

	)

204 
	#PCRE_EXTRA_MATCH_LIMIT
 0x0002

	)

205 
	#PCRE_EXTRA_CALLOUT_DATA
 0x0004

	)

206 
	#PCRE_EXTRA_TABLES
 0x0008

	)

207 
	#PCRE_EXTRA_MATCH_LIMIT_RECURSION
 0x0010

	)

208 
	#PCRE_EXTRA_MARK
 0x0020

	)

212 
ªÆ_p¸e
;

213 
ªÆ_p¸e
 
	tp¸e
;

219 #i‚de‡
PCRE_SPTR


220 
	#PCRE_SPTR
 c⁄° *

	)

227 
	sp¸e_exåa
 {

228 
Êags
;

229 *
°udy_d©a
;

230 
m©ch_limô
;

231 *
ˇŒout_d©a
;

232 c⁄° *
èbÀs
;

233 
m©ch_limô_ªcursi⁄
;

234 **
m¨k
;

235 } 
	tp¸e_exåa
;

242 
	sp¸e_ˇŒout_block
 {

243 
vîsi⁄
;

245 
ˇŒout_numbî
;

246 *
off£t_ve˘‹
;

247 
PCRE_SPTR
 
subje˘
;

248 
subje˘_Àngth
;

249 
°¨t_m©ch
;

250 
cuºít_posôi⁄
;

251 
ˇ±uª_t›
;

252 
ˇ±uª_œ°
;

253 *
ˇŒout_d©a
;

255 
∑âîn_posôi⁄
;

256 
√xt_ôem_Àngth
;

258 } 
	tp¸e_ˇŒout_block
;

266 #i‚de‡
VPCOMPAT


267 
PCRE_EXP_DECL
 *(*
p¸e_mÆloc
)(
size_t
);

268 
PCRE_EXP_DECL
 (*
p¸e_‰ì
)(*);

269 
PCRE_EXP_DECL
 *(*
p¸e_°ack_mÆloc
)(
size_t
);

270 
PCRE_EXP_DECL
 (*
p¸e_°ack_‰ì
)(*);

271 
PCRE_EXP_DECL
 (*
p¸e_ˇŒout
)(
p¸e_ˇŒout_block
 *);

273 
PCRE_EXP_DECL
 *
p¸e_mÆloc
(
size_t
);

274 
PCRE_EXP_DECL
 
p¸e_‰ì
(*);

275 
PCRE_EXP_DECL
 *
p¸e_°ack_mÆloc
(
size_t
);

276 
PCRE_EXP_DECL
 
p¸e_°ack_‰ì
(*);

277 
PCRE_EXP_DECL
 
p¸e_ˇŒout
(
p¸e_ˇŒout_block
 *);

282 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe
(const *, , const **, *,

284 
PCRE_EXP_DECL
 
p¸e
 *
p¸e_compûe2
(const *, , *, const **,

286 
PCRE_EXP_DECL
 
p¸e_c⁄fig
(, *);

287 
PCRE_EXP_DECL
 
p¸e_c›y_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

289 
PCRE_EXP_DECL
 
p¸e_c›y_sub°rög
(const *, *, , , *,

291 
PCRE_EXP_DECL
 
p¸e_dÁ_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *,

293 
PCRE_EXP_DECL
 
p¸e_exec
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, 
PCRE_SPTR
,

295 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög
(const *);

296 
PCRE_EXP_DECL
 
p¸e_‰ì_sub°rög_li°
(const **);

297 
PCRE_EXP_DECL
 
p¸e_fuŒöfo
(c⁄° 
p¸e
 *, c⁄° 
p¸e_exåa
 *, ,

299 
PCRE_EXP_DECL
 
p¸e_gë_«med_sub°rög
(c⁄° 
p¸e
 *, const *,

301 
PCRE_EXP_DECL
 
p¸e_gë_°rögnumbî
(c⁄° 
p¸e
 *, const *);

302 
PCRE_EXP_DECL
 
p¸e_gë_°rögèbÀ_íåõs
(c⁄° 
p¸e
 *, const *,

304 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög
(const *, *, , ,

306 
PCRE_EXP_DECL
 
p¸e_gë_sub°rög_li°
(const *, *, ,

308 
PCRE_EXP_DECL
 
p¸e_öfo
(c⁄° 
p¸e
 *, *, *);

309 
PCRE_EXP_DECL
 c⁄° *
p¸e_makëabÀs
();

310 
PCRE_EXP_DECL
 
p¸e_ªfcou¡
(
p¸e
 *, );

311 
PCRE_EXP_DECL
 
p¸e_exåa
 *
p¸e_°udy
(c⁄° 
p¸e
 *, , const **);

312 
PCRE_EXP_DECL
 c⁄° *
p¸e_vîsi⁄
();

314 #ifde‡
__˝lu•lus


	@/usr/include/poll.h

1 
	~<sys/pﬁl.h
>

	@/usr/include/pthread.h

20 #i‚de‡
_PTHREAD_H


21 
	#_PTHREAD_H
 1

	)

23 
	~<„©uªs.h
>

24 
	~<ídün.h
>

25 
	~<sched.h
>

26 
	~<time.h
>

28 
	~<bôs/±hªadty≥s.h
>

29 
	~<bôs/£tjmp.h
>

30 
	~<bôs/w‹dsize.h
>

36 
	mPTHREAD_CREATE_JOINABLE
,

37 
	#PTHREAD_CREATE_JOINABLE
 
PTHREAD_CREATE_JOINABLE


	)

38 
	mPTHREAD_CREATE_DETACHED


39 
	#PTHREAD_CREATE_DETACHED
 
PTHREAD_CREATE_DETACHED


	)

46 
	mPTHREAD_MUTEX_TIMED_NP
,

47 
	mPTHREAD_MUTEX_RECURSIVE_NP
,

48 
	mPTHREAD_MUTEX_ERRORCHECK_NP
,

49 
	mPTHREAD_MUTEX_ADAPTIVE_NP


50 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


52 
	mPTHREAD_MUTEX_NORMAL
 = 
PTHREAD_MUTEX_TIMED_NP
,

53 
	mPTHREAD_MUTEX_RECURSIVE
 = 
PTHREAD_MUTEX_RECURSIVE_NP
,

54 
	mPTHREAD_MUTEX_ERRORCHECK
 = 
PTHREAD_MUTEX_ERRORCHECK_NP
,

55 
	mPTHREAD_MUTEX_DEFAULT
 = 
PTHREAD_MUTEX_NORMAL


57 #ifde‡
__USE_GNU


59 , 
	mPTHREAD_MUTEX_FAST_NP
 = 
PTHREAD_MUTEX_TIMED_NP


64 #ifde‡
__USE_XOPEN2K


68 
	mPTHREAD_MUTEX_STALLED
,

69 
	mPTHREAD_MUTEX_STALLED_NP
 = 
PTHREAD_MUTEX_STALLED
,

70 
	mPTHREAD_MUTEX_ROBUST
,

71 
	mPTHREAD_MUTEX_ROBUST_NP
 = 
PTHREAD_MUTEX_ROBUST


76 #ifde‡
__USE_UNIX98


80 
	mPTHREAD_PRIO_NONE
,

81 
	mPTHREAD_PRIO_INHERIT
,

82 
	mPTHREAD_PRIO_PROTECT


88 #i‡
__WORDSIZE
 == 64

89 
	#PTHREAD_MUTEX_INITIALIZER
 \

90 { { 0, 0, 0, 0, 0, 0, { 0, 0 } } }

	)

91 #ifde‡
__USE_GNU


92 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

93 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0, 0 } } }

	)

94 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

95 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0, 0 } } }

	)

96 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

97 { { 0, 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0, 0 } } }

	)

100 
	#PTHREAD_MUTEX_INITIALIZER
 \

101 { { 0, 0, 0, 0, 0, { 0 } } }

	)

102 #ifde‡
__USE_GNU


103 
	#PTHREAD_RECURSIVE_MUTEX_INITIALIZER_NP
 \

104 { { 0, 0, 0, 
PTHREAD_MUTEX_RECURSIVE_NP
, 0, { 0 } } }

	)

105 
	#PTHREAD_ERRORCHECK_MUTEX_INITIALIZER_NP
 \

106 { { 0, 0, 0, 
PTHREAD_MUTEX_ERRORCHECK_NP
, 0, { 0 } } }

	)

107 
	#PTHREAD_ADAPTIVE_MUTEX_INITIALIZER_NP
 \

108 { { 0, 0, 0, 
PTHREAD_MUTEX_ADAPTIVE_NP
, 0, { 0 } } }

	)

114 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


117 
	mPTHREAD_RWLOCK_PREFER_READER_NP
,

118 
	mPTHREAD_RWLOCK_PREFER_WRITER_NP
,

119 
	mPTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,

120 
	mPTHREAD_RWLOCK_DEFAULT_NP
 = 
PTHREAD_RWLOCK_PREFER_READER_NP


124 
	#PTHREAD_RWLOCK_INITIALIZER
 \

125 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 } }

	)

126 #ifde‡
__USE_GNU


127 #i‡
__WORDSIZE
 == 64

128 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

130 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
 } }

	)

132 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


133 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

134 { { 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
, \

135 0, 0, 0, 0 } }

	)

137 
	#PTHREAD_RWLOCK_WRITER_NONRECURSIVE_INITIALIZER_NP
 \

138 { { 0, 0, 0, 0, 0, 0, 0, 0, 0, 
PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP
,\

139 0 } }

	)

149 
	mPTHREAD_INHERIT_SCHED
,

150 
	#PTHREAD_INHERIT_SCHED
 
PTHREAD_INHERIT_SCHED


	)

151 
	mPTHREAD_EXPLICIT_SCHED


152 
	#PTHREAD_EXPLICIT_SCHED
 
PTHREAD_EXPLICIT_SCHED


	)

159 
	mPTHREAD_SCOPE_SYSTEM
,

160 
	#PTHREAD_SCOPE_SYSTEM
 
PTHREAD_SCOPE_SYSTEM


	)

161 
	mPTHREAD_SCOPE_PROCESS


162 
	#PTHREAD_SCOPE_PROCESS
 
PTHREAD_SCOPE_PROCESS


	)

169 
	mPTHREAD_PROCESS_PRIVATE
,

170 
	#PTHREAD_PROCESS_PRIVATE
 
PTHREAD_PROCESS_PRIVATE


	)

171 
	mPTHREAD_PROCESS_SHARED


172 
	#PTHREAD_PROCESS_SHARED
 
PTHREAD_PROCESS_SHARED


	)

178 
	#PTHREAD_COND_INITIALIZER
 { { 0, 0, 0, 0, 0, (*Ë0, 0, 0 } }

	)

182 
	s_±hªad_˛ónup_buf„r


184 (*
	m__routöe
) (*);

185 *
	m__¨g
;

186 
	m__ˇn˚…y≥
;

187 
_±hªad_˛ónup_buf„r
 *
	m__¥ev
;

193 
	mPTHREAD_CANCEL_ENABLE
,

194 
	#PTHREAD_CANCEL_ENABLE
 
PTHREAD_CANCEL_ENABLE


	)

195 
	mPTHREAD_CANCEL_DISABLE


196 
	#PTHREAD_CANCEL_DISABLE
 
PTHREAD_CANCEL_DISABLE


	)

200 
	mPTHREAD_CANCEL_DEFERRED
,

201 
	#PTHREAD_CANCEL_DEFERRED
 
PTHREAD_CANCEL_DEFERRED


	)

202 
	mPTHREAD_CANCEL_ASYNCHRONOUS


203 
	#PTHREAD_CANCEL_ASYNCHRONOUS
 
PTHREAD_CANCEL_ASYNCHRONOUS


	)

205 
	#PTHREAD_CANCELED
 ((*Ë-1)

	)

209 
	#PTHREAD_ONCE_INIT
 0

	)

212 #ifde‡
__USE_XOPEN2K


216 
	#PTHREAD_BARRIER_SERIAL_THREAD
 -1

	)

220 
__BEGIN_DECLS


225 
±hªad_¸óã
 (
±hªad_t
 *
__ª°ri˘
 
__√wthªad
,

226 
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

227 *(*
__°¨t_routöe
) (*),

228 *
__ª°ri˘
 
__¨g
Ë
__THROWNL
 
__n⁄nuŒ
 ((1, 3));

234 
	$±hªad_exô
 (*
__ªtvÆ
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

242 
	`±hªad_joö
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
);

244 #ifde‡
__USE_GNU


247 
	$±hªad_åyjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
Ë
__THROW
;

255 
	`±hªad_timedjoö_≈
 (
±hªad_t
 
__th
, **
__thªad_ªtu∫
,

256 
__c⁄°
 
time•ec
 *
__ab°ime
);

263 
	$±hªad_dëach
 (
±hªad_t
 
__th
Ë
__THROW
;

267 
±hªad_t
 
	$±hªad_£lf
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

270 
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
Ë
__THROW
;

278 
	$±hªad_©å_öô
 (
±hªad_©å_t
 *
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

281 
	$±hªad_©å_de°roy
 (
±hªad_©å_t
 *
__©å
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1));

285 
	$±hªad_©å_gëdëach°©e
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

286 *
__dëach°©e
)

287 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

290 
	$±hªad_©å_£tdëach°©e
 (
±hªad_©å_t
 *
__©å
,

291 
__dëach°©e
)

292 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$±hªad_©å_gëgu¨dsize
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

297 
size_t
 *
__gu¨dsize
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

301 
	$±hªad_©å_£tgu¨dsize
 (
±hªad_©å_t
 *
__©å
,

302 
size_t
 
__gu¨dsize
)

303 
__THROW
 
	`__n⁄nuŒ
 ((1));

307 
	$±hªad_©å_gësched∑øm
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


308 
__©å
,

309 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

310 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

313 
	$±hªad_©å_£tsched∑øm
 (
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

314 
__c⁄°
 
sched_∑øm
 *
__ª°ri˘


315 
__∑øm
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

318 
	$±hªad_©å_gëschedpﬁicy
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


319 
__©å
, *
__ª°ri˘
 
__pﬁicy
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

323 
	$±hªad_©å_£tschedpﬁicy
 (
±hªad_©å_t
 *
__©å
, 
__pﬁicy
)

324 
__THROW
 
	`__n⁄nuŒ
 ((1));

327 
	$±hªad_©å_gëöhîôsched
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


328 
__©å
, *
__ª°ri˘
 
__öhîô
)

329 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

332 
	$±hªad_©å_£töhîôsched
 (
±hªad_©å_t
 *
__©å
,

333 
__öhîô
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1));

338 
	$±hªad_©å_gësc›e
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

339 *
__ª°ri˘
 
__sc›e
)

340 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

343 
	$±hªad_©å_£tsc›e
 (
±hªad_©å_t
 *
__©å
, 
__sc›e
)

344 
__THROW
 
	`__n⁄nuŒ
 ((1));

347 
	$±hªad_©å_gë°ackaddr
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


348 
__©å
, **
__ª°ri˘
 
__°ackaddr
)

349 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__©åibuã_dïªˇãd__
;

355 
	$±hªad_©å_£t°ackaddr
 (
±hªad_©å_t
 *
__©å
,

356 *
__°ackaddr
)

357 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
;

360 
	$±hªad_©å_gë°acksize
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘


361 
__©å
, 
size_t
 *
__ª°ri˘
 
__°acksize
)

362 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

367 
	$±hªad_©å_£t°acksize
 (
±hªad_©å_t
 *
__©å
,

368 
size_t
 
__°acksize
)

369 
__THROW
 
	`__n⁄nuŒ
 ((1));

371 #ifde‡
__USE_XOPEN2K


373 
	$±hªad_©å_gë°ack
 (
__c⁄°
 
±hªad_©å_t
 *
__ª°ri˘
 
__©å
,

374 **
__ª°ri˘
 
__°ackaddr
,

375 
size_t
 *
__ª°ri˘
 
__°acksize
)

376 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

381 
	$±hªad_©å_£t°ack
 (
±hªad_©å_t
 *
__©å
, *
__°ackaddr
,

382 
size_t
 
__°acksize
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

385 #ifde‡
__USE_GNU


388 
	$±hªad_©å_£èfföôy_≈
 (
±hªad_©å_t
 *
__©å
,

389 
size_t
 
__˝u£tsize
,

390 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

391 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

395 
	$±hªad_©å_gëafföôy_≈
 (
__c⁄°
 
±hªad_©å_t
 *
__©å
,

396 
size_t
 
__˝u£tsize
,

397 
˝u_£t_t
 *
__˝u£t
)

398 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

404 
	$±hªad_gë©å_≈
 (
±hªad_t
 
__th
, 
±hªad_©å_t
 *
__©å
)

405 
__THROW
 
	`__n⁄nuŒ
 ((2));

413 
	$±hªad_£tsched∑øm
 (
±hªad_t
 
__èrgë_thªad
, 
__pﬁicy
,

414 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

415 
__THROW
 
	`__n⁄nuŒ
 ((3));

418 
	$±hªad_gësched∑øm
 (
±hªad_t
 
__èrgë_thªad
,

419 *
__ª°ri˘
 
__pﬁicy
,

420 
sched_∑øm
 *
__ª°ri˘
 
__∑øm
)

421 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

424 
	$±hªad_£tsched¥io
 (
±hªad_t
 
__èrgë_thªad
, 
__¥io
)

425 
__THROW
;

428 #ifde‡
__USE_GNU


430 
	$±hªad_gë«me_≈
 (
±hªad_t
 
__èrgë_thªad
, *
__buf
,

431 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

435 
	$±hªad_£äame_≈
 (
±hªad_t
 
__èrgë_thªad
, 
__c⁄°
 *
__«me
)

436 
__THROW
 
	`__n⁄nuŒ
 ((2));

440 #ifde‡
__USE_UNIX98


442 
	$±hªad_gëc⁄cuºícy
 (Ë
__THROW
;

445 
	$±hªad_£tc⁄cuºícy
 (
__Àvñ
Ë
__THROW
;

448 #ifde‡
__USE_GNU


453 
	$±hªad_yõld
 (Ë
__THROW
;

458 
	$±hªad_£èfföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

459 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
)

460 
__THROW
 
	`__n⁄nuŒ
 ((3));

463 
	$±hªad_gëafföôy_≈
 (
±hªad_t
 
__th
, 
size_t
 
__˝u£tsize
,

464 
˝u_£t_t
 *
__˝u£t
)

465 
__THROW
 
	`__n⁄nuŒ
 ((3));

478 
	`±hªad_⁄˚
 (
±hªad_⁄˚_t
 *
__⁄˚_c⁄åﬁ
,

479 (*
__öô_routöe
Ë()Ë
	`__n⁄nuŒ
 ((1, 2));

490 
	`±hªad_£tˇn˚l°©e
 (
__°©e
, *
__ﬁd°©e
);

494 
	`±hªad_£tˇn˚…y≥
 (
__ty≥
, *
__ﬁdty≥
);

497 
	`±hªad_ˇn˚l
 (
±hªad_t
 
__th
);

502 
	`±hªad_ã°ˇn˚l
 ();

511 
__jmp_buf
 
__ˇn˚l_jmp_buf
;

512 
__mask_was_ßved
;

513 } 
__ˇn˚l_jmp_buf
[1];

514 *
__∑d
[4];

515 } 
	t__±hªad_unwöd_buf_t
 
	t__©åibuã__
 ((
	t__Æig√d__
));

518 #i‚de‡
__˛ónup_f˘_©åibuã


519 
	#__˛ónup_f˘_©åibuã


	)

524 
	s__±hªad_˛ónup_‰ame


526 (*
__ˇn˚l_routöe
) (*);

527 *
__ˇn˚l_¨g
;

528 
__do_ô
;

529 
__ˇn˚l_ty≥
;

532 #i‡
deföed
 
__GNUC__
 && deföed 
__EXCEPTIONS


533 #ifde‡
__˝lu•lus


535 ˛as†
	c__±hªad_˛ónup_˛ass


537 (*
__ˇn˚l_routöe
) (*);

538 *
__ˇn˚l_¨g
;

539 
__do_ô
;

540 
__ˇn˚l_ty≥
;

542 
public
:

543 
	`__±hªad_˛ónup_˛ass
 ((*
__f˘
Ë(*), *
__¨g
)

544 : 
	`__ˇn˚l_routöe
 (
__f˘
), 
	`__ˇn˚l_¨g
 (
__¨g
), 
	$__do_ô
 (1) { }

545 ~
	$__±hªad_˛ónup_˛ass
 (Ë{ i‡(
__do_ô
Ë
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); 
	}
}

546 
	$__£tdoô
 (
__√wvÆ
Ë{ 
__do_ô
 = __√wvÆ; 
	}
}

547 
	$__de„r
 (Ë{ 
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
,

548 &
__ˇn˚l_ty≥
); 
	}
}

549 
	$__ª°‹e
 (Ëc⁄° { 
	`±hªad_£tˇn˚…y≥
 (
__ˇn˚l_ty≥
, 0); 
	}
}

559 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

561 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
)

	)

565 
	#±hªad_˛ónup_p›
(
execuã
) \

566 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

567 } 0)

	)

569 #ifde‡
__USE_GNU


573 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

575 
__±hªad_˛ónup_˛ass
 
	`__˛‰ame
 (
routöe
, 
¨g
); \

576 
__˛‰ame
.
	`__de„r
 ()

	)

581 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

582 
__˛‰ame
.
	`__ª°‹e
 (); \

583 
__˛‰ame
.
	`__£tdoô
 (
execuã
); \

584 } 0)

	)

591 
__exã∫_ölöe
 

592 
	$__±hªad_˛ónup_routöe
 (
__±hªad_˛ónup_‰ame
 *
__‰ame
)

594 i‡(
__‰ame
->
__do_ô
)

595 
__‰ame
->
	`__ˇn˚l_routöe
 (__‰ame->
__ˇn˚l_¨g
);

596 
	}
}

605 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

607 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

608 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

609 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

610 .
__do_ô
 = 1 };

	)

614 
	#±hªad_˛ónup_p›
(
execuã
) \

615 
__˛‰ame
.
__do_ô
 = (
execuã
); \

616 } 0)

	)

618 #ifde‡
__USE_GNU


622 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

624 
__±hªad_˛ónup_‰ame
 
__˛‰ame
 \

625 
	`__©åibuã__
 ((
	`__˛ónup__
 (
__±hªad_˛ónup_routöe
))) \

626 { .
__ˇn˚l_routöe
 = (
routöe
), .
__ˇn˚l_¨g
 = (
¨g
), \

627 .
__do_ô
 = 1 }; \

628 (Ë
	`±hªad_£tˇn˚…y≥
 (
PTHREAD_CANCEL_DEFERRED
, \

629 &
__˛‰ame
.
__ˇn˚l_ty≥
)

	)

634 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

635 (Ë
	`±hªad_£tˇn˚…y≥
 (
__˛‰ame
.
__ˇn˚l_ty≥
, 
NULL
); \

636 
__˛‰ame
.
__do_ô
 = (
execuã
); \

637 } 0)

	)

648 
	#±hªad_˛ónup_push
(
routöe
, 
¨g
) \

650 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

651 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

652 *
__ˇn˚l_¨g
 = (
¨g
); \

653 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

654 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

655 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

657 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

658 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

662 
	`__±hªad_ªgi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

663 dÿ{

	)

664 
__±hªad_ªgi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

665 
__˛ónup_f˘_©åibuã
;

669 
	#±hªad_˛ónup_p›
(
execuã
) \

672 
	`__±hªad_uƒegi°î_ˇn˚l
 (&
__ˇn˚l_buf
); \

673 i‡(
execuã
) \

674 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

675 } 0)

	)

676 
	$__±hªad_uƒegi°î_ˇn˚l
 (
__±hªad_unwöd_buf_t
 *
__buf
)

677 
__˛ónup_f˘_©åibuã
;

679 #ifde‡
__USE_GNU


683 
	#±hªad_˛ónup_push_de„r_≈
(
routöe
, 
¨g
) \

685 
__±hªad_unwöd_buf_t
 
__ˇn˚l_buf
; \

686 (*
__ˇn˚l_routöe
Ë(*Ë(
routöe
); \

687 *
__ˇn˚l_¨g
 = (
¨g
); \

688 
__nŸ_fú°_ˇŒ
 = 
	`__sig£tjmp
 ((
__jmp_buf_èg
 *) (*) \

689 
__ˇn˚l_buf
.
__ˇn˚l_jmp_buf
, 0); \

690 i‡(
	`__buûtö_ex≥˘
 (
__nŸ_fú°_ˇŒ
, 0)) \

692 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

693 
	`__±hªad_unwöd_√xt
 (&
__ˇn˚l_buf
); \

697 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (&
__ˇn˚l_buf
); \

698 dÿ{

	)

699 
	`__±hªad_ªgi°î_ˇn˚l_de„r
 (
__±hªad_unwöd_buf_t
 *
__buf
)

700 
__˛ónup_f˘_©åibuã
;

705 
	#±hªad_˛ónup_p›_ª°‹e_≈
(
execuã
) \

708 
	`__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (&
__ˇn˚l_buf
); \

709 i‡(
execuã
) \

710 
	`__ˇn˚l_routöe
 (
__ˇn˚l_¨g
); \

711 
	}
} 0)

	)

712 
	$__±hªad_uƒegi°î_ˇn˚l_ª°‹e
 (
__±hªad_unwöd_buf_t
 *
__buf
)

713 
__˛ónup_f˘_©åibuã
;

717 
	$__±hªad_unwöd_√xt
 (
__±hªad_unwöd_buf_t
 *
__buf
)

718 
__˛ónup_f˘_©åibuã
 
	`__©åibuã__
 ((
__n‹ëu∫__
))

719 #i‚de‡
SHARED


720 
	`__©åibuã__
 ((
__wók__
))

726 
__jmp_buf_èg
;

727 
	$__sig£tjmp
 (
__jmp_buf_èg
 *
__ív
, 
__ßvemask
Ë
__THROW
;

733 
	$±hªad_muãx_öô
 (
±hªad_muãx_t
 *
__muãx
,

734 
__c⁄°
 
±hªad_muãx©å_t
 *
__muãx©å
)

735 
__THROW
 
	`__n⁄nuŒ
 ((1));

738 
	$±hªad_muãx_de°roy
 (
±hªad_muãx_t
 *
__muãx
)

739 
__THROW
 
	`__n⁄nuŒ
 ((1));

742 
	$±hªad_muãx_åylock
 (
±hªad_muãx_t
 *
__muãx
)

743 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

746 
	$±hªad_muãx_lock
 (
±hªad_muãx_t
 *
__muãx
)

747 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

749 #ifde‡
__USE_XOPEN2K


751 
	$±hªad_muãx_timedlock
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

752 
__c⁄°
 
time•ec
 *
__ª°ri˘


753 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

757 
	$±hªad_muãx_u∆ock
 (
±hªad_muãx_t
 *
__muãx
)

758 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

762 
	$±hªad_muãx_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx_t
 *

763 
__ª°ri˘
 
__muãx
,

764 *
__ª°ri˘
 
__¥io˚ûög
)

765 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

769 
	$±hªad_muãx_£çrio˚ûög
 (
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

770 
__¥io˚ûög
,

771 *
__ª°ri˘
 
__ﬁd_˚ûög
)

772 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

775 #ifde‡
__USE_XOPEN2K8


777 
	$±hªad_muãx_c⁄si°ít
 (
±hªad_muãx_t
 *
__muãx
)

778 
__THROW
 
	`__n⁄nuŒ
 ((1));

779 #ifde‡
__USE_GNU


780 
	$±hªad_muãx_c⁄si°ít_≈
 (
±hªad_muãx_t
 *
__muãx
)

781 
__THROW
 
	`__n⁄nuŒ
 ((1));

790 
	$±hªad_muãx©å_öô
 (
±hªad_muãx©å_t
 *
__©å
)

791 
__THROW
 
	`__n⁄nuŒ
 ((1));

794 
	$±hªad_muãx©å_de°roy
 (
±hªad_muãx©å_t
 *
__©å
)

795 
__THROW
 
	`__n⁄nuŒ
 ((1));

798 
	$±hªad_muãx©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_muãx©å_t
 *

799 
__ª°ri˘
 
__©å
,

800 *
__ª°ri˘
 
__psh¨ed
)

801 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

804 
	$±hªad_muãx©å_£çsh¨ed
 (
±hªad_muãx©å_t
 *
__©å
,

805 
__psh¨ed
)

806 
__THROW
 
	`__n⁄nuŒ
 ((1));

808 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


810 
	$±hªad_muãx©å_gëty≥
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__ª°ri˘


811 
__©å
, *
__ª°ri˘
 
__köd
)

812 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

817 
	$±hªad_muãx©å_£ây≥
 (
±hªad_muãx©å_t
 *
__©å
, 
__köd
)

818 
__THROW
 
	`__n⁄nuŒ
 ((1));

822 
	$±hªad_muãx©å_gë¥Ÿocﬁ
 (
__c⁄°
 
±hªad_muãx©å_t
 *

823 
__ª°ri˘
 
__©å
,

824 *
__ª°ri˘
 
__¥Ÿocﬁ
)

825 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

829 
	$±hªad_muãx©å_£çrŸocﬁ
 (
±hªad_muãx©å_t
 *
__©å
,

830 
__¥Ÿocﬁ
)

831 
__THROW
 
	`__n⁄nuŒ
 ((1));

834 
	$±hªad_muãx©å_gë¥io˚ûög
 (
__c⁄°
 
±hªad_muãx©å_t
 *

835 
__ª°ri˘
 
__©å
,

836 *
__ª°ri˘
 
__¥io˚ûög
)

837 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

840 
	$±hªad_muãx©å_£çrio˚ûög
 (
±hªad_muãx©å_t
 *
__©å
,

841 
__¥io˚ûög
)

842 
__THROW
 
	`__n⁄nuŒ
 ((1));

844 #ifde‡
__USE_XOPEN2K


846 
	$±hªad_muãx©å_gërobu°
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

847 *
__robu°√ss
)

848 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

849 #ifde‡
__USE_GNU


850 
	$±hªad_muãx©å_gërobu°_≈
 (
__c⁄°
 
±hªad_muãx©å_t
 *
__©å
,

851 *
__robu°√ss
)

852 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

856 
	$±hªad_muãx©å_£åobu°
 (
±hªad_muãx©å_t
 *
__©å
,

857 
__robu°√ss
)

858 
__THROW
 
	`__n⁄nuŒ
 ((1));

859 #ifde‡
__USE_GNU


860 
	$±hªad_muãx©å_£åobu°_≈
 (
±hªad_muãx©å_t
 *
__©å
,

861 
__robu°√ss
)

862 
__THROW
 
	`__n⁄nuŒ
 ((1));

867 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


872 
	$±hªad_rwlock_öô
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

873 
__c⁄°
 
±hªad_rwlock©å_t
 *
__ª°ri˘


874 
__©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

877 
	$±hªad_rwlock_de°roy
 (
±hªad_rwlock_t
 *
__rwlock
)

878 
__THROW
 
	`__n⁄nuŒ
 ((1));

881 
	$±hªad_rwlock_rdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

882 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

885 
	$±hªad_rwlock_åyrdlock
 (
±hªad_rwlock_t
 *
__rwlock
)

886 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

888 #ifde‡
__USE_XOPEN2K


890 
	$±hªad_rwlock_timedrdlock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

891 
__c⁄°
 
time•ec
 *
__ª°ri˘


892 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

896 
	$±hªad_rwlock_wæock
 (
±hªad_rwlock_t
 *
__rwlock
)

897 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

900 
	$±hªad_rwlock_åywæock
 (
±hªad_rwlock_t
 *
__rwlock
)

901 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

903 #ifde‡
__USE_XOPEN2K


905 
	$±hªad_rwlock_timedwæock
 (
±hªad_rwlock_t
 *
__ª°ri˘
 
__rwlock
,

906 
__c⁄°
 
time•ec
 *
__ª°ri˘


907 
__ab°ime
Ë
__THROWNL
 
	`__n⁄nuŒ
 ((1, 2));

911 
	$±hªad_rwlock_u∆ock
 (
±hªad_rwlock_t
 *
__rwlock
)

912 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

918 
	$±hªad_rwlock©å_öô
 (
±hªad_rwlock©å_t
 *
__©å
)

919 
__THROW
 
	`__n⁄nuŒ
 ((1));

922 
	$±hªad_rwlock©å_de°roy
 (
±hªad_rwlock©å_t
 *
__©å
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1));

926 
	$±hªad_rwlock©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

927 
__ª°ri˘
 
__©å
,

928 *
__ª°ri˘
 
__psh¨ed
)

929 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

932 
	$±hªad_rwlock©å_£çsh¨ed
 (
±hªad_rwlock©å_t
 *
__©å
,

933 
__psh¨ed
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1));

937 
	$±hªad_rwlock©å_gëköd_≈
 (
__c⁄°
 
±hªad_rwlock©å_t
 *

938 
__ª°ri˘
 
__©å
,

939 *
__ª°ri˘
 
__¥ef
)

940 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

943 
	$±hªad_rwlock©å_£tköd_≈
 (
±hªad_rwlock©å_t
 *
__©å
,

944 
__¥ef
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

952 
	$±hªad_c⁄d_öô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

953 
__c⁄°
 
±hªad_c⁄d©å_t
 *
__ª°ri˘


954 
__c⁄d_©å
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

957 
	$±hªad_c⁄d_de°roy
 (
±hªad_c⁄d_t
 *
__c⁄d
)

958 
__THROW
 
	`__n⁄nuŒ
 ((1));

961 
	$±hªad_c⁄d_sig«l
 (
±hªad_c⁄d_t
 *
__c⁄d
)

962 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

965 
	$±hªad_c⁄d_brﬂdˇ°
 (
±hªad_c⁄d_t
 *
__c⁄d
)

966 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

973 
	$±hªad_c⁄d_waô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

974 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
)

975 
	`__n⁄nuŒ
 ((1, 2));

984 
	$±hªad_c⁄d_timedwaô
 (
±hªad_c⁄d_t
 *
__ª°ri˘
 
__c⁄d
,

985 
±hªad_muãx_t
 *
__ª°ri˘
 
__muãx
,

986 
__c⁄°
 
time•ec
 *
__ª°ri˘


987 
__ab°ime
Ë
	`__n⁄nuŒ
 ((1, 2, 3));

992 
	$±hªad_c⁄d©å_öô
 (
±hªad_c⁄d©å_t
 *
__©å
)

993 
__THROW
 
	`__n⁄nuŒ
 ((1));

996 
	$±hªad_c⁄d©å_de°roy
 (
±hªad_c⁄d©å_t
 *
__©å
)

997 
__THROW
 
	`__n⁄nuŒ
 ((1));

1000 
	$±hªad_c⁄d©å_gëpsh¨ed
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1001 
__ª°ri˘
 
__©å
,

1002 *
__ª°ri˘
 
__psh¨ed
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1006 
	$±hªad_c⁄d©å_£çsh¨ed
 (
±hªad_c⁄d©å_t
 *
__©å
,

1007 
__psh¨ed
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1009 #ifde‡
__USE_XOPEN2K


1011 
	$±hªad_c⁄d©å_gë˛ock
 (
__c⁄°
 
±hªad_c⁄d©å_t
 *

1012 
__ª°ri˘
 
__©å
,

1013 
__˛ockid_t
 *
__ª°ri˘
 
__˛ock_id
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1017 
	$±hªad_c⁄d©å_£t˛ock
 (
±hªad_c⁄d©å_t
 *
__©å
,

1018 
__˛ockid_t
 
__˛ock_id
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1));

1023 #ifde‡
__USE_XOPEN2K


1028 
	$±hªad_•ö_öô
 (
±hªad_•ölock_t
 *
__lock
, 
__psh¨ed
)

1029 
__THROW
 
	`__n⁄nuŒ
 ((1));

1032 
	$±hªad_•ö_de°roy
 (
±hªad_•ölock_t
 *
__lock
)

1033 
__THROW
 
	`__n⁄nuŒ
 ((1));

1036 
	$±hªad_•ö_lock
 (
±hªad_•ölock_t
 *
__lock
)

1037 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1040 
	$±hªad_•ö_åylock
 (
±hªad_•ölock_t
 *
__lock
)

1041 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1044 
	$±hªad_•ö_u∆ock
 (
±hªad_•ölock_t
 *
__lock
)

1045 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1052 
	$±hªad_b¨rõr_öô
 (
±hªad_b¨rõr_t
 *
__ª°ri˘
 
__b¨rõr
,

1053 
__c⁄°
 
±hªad_b¨rõøâr_t
 *
__ª°ri˘


1054 
__©å
, 
__cou¡
)

1055 
__THROW
 
	`__n⁄nuŒ
 ((1));

1058 
	$±hªad_b¨rõr_de°roy
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1059 
__THROW
 
	`__n⁄nuŒ
 ((1));

1062 
	$±hªad_b¨rõr_waô
 (
±hªad_b¨rõr_t
 *
__b¨rõr
)

1063 
__THROWNL
 
	`__n⁄nuŒ
 ((1));

1067 
	$±hªad_b¨rõøâr_öô
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1068 
__THROW
 
	`__n⁄nuŒ
 ((1));

1071 
	$±hªad_b¨rõøâr_de°roy
 (
±hªad_b¨rõøâr_t
 *
__©å
)

1072 
__THROW
 
	`__n⁄nuŒ
 ((1));

1075 
	$±hªad_b¨rõøâr_gëpsh¨ed
 (
__c⁄°
 
±hªad_b¨rõøâr_t
 *

1076 
__ª°ri˘
 
__©å
,

1077 *
__ª°ri˘
 
__psh¨ed
)

1078 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1081 
	$±hªad_b¨rõøâr_£çsh¨ed
 (
±hªad_b¨rõøâr_t
 *
__©å
,

1082 
__psh¨ed
)

1083 
__THROW
 
	`__n⁄nuŒ
 ((1));

1095 
	`±hªad_key_¸óã
 (
±hªad_key_t
 *
__key
,

1096 (*
__de°r_fun˘i⁄
) (*))

1097 
__THROW
 
	`__n⁄nuŒ
 ((1));

1100 
	$±hªad_key_dñëe
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1103 *
	$±hªad_gë•ecific
 (
±hªad_key_t
 
__key
Ë
__THROW
;

1106 
	$±hªad_£t•ecific
 (
±hªad_key_t
 
__key
,

1107 
__c⁄°
 *
__poöãr
Ë
__THROW
 ;

1110 #ifde‡
__USE_XOPEN2K


1112 
	$±hªad_gë˝u˛ockid
 (
±hªad_t
 
__thªad_id
,

1113 
__˛ockid_t
 *
__˛ock_id
)

1114 
__THROW
 
	`__n⁄nuŒ
 ((2));

1129 
	`±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1130 (*
__∑ª¡
) (),

1131 (*
__chûd
Ë()Ë
__THROW
;

1134 #ifde‡
__USE_EXTERN_INLINES


1136 
__exã∫_ölöe
 

1137 
	`__NTH
 (
	$±hªad_equÆ
 (
±hªad_t
 
__thªad1
,Öthªad_à
__thªad2
))

1139  
__thªad1
 =
__thªad2
;

1140 
	}
}

1143 
	g__END_DECLS


	@/usr/include/pwd.h

23 #i‚def 
_PWD_H


24 
	#_PWD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


30 
	~<bôs/ty≥s.h
>

32 
	#__√ed_size_t


	)

33 
	~<°ddef.h
>

35 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


38 #i‚de‡
__gid_t_deföed


39 
__gid_t
 
	tgid_t
;

40 
	#__gid_t_deföed


	)

43 #i‚de‡
__uid_t_deföed


44 
__uid_t
 
	tuid_t
;

45 
	#__uid_t_deföed


	)

50 
	s∑sswd


52 *
	mpw_«me
;

53 *
	mpw_∑sswd
;

54 
__uid_t
 
	mpw_uid
;

55 
__gid_t
 
	mpw_gid
;

56 *
	mpw_gecos
;

57 *
	mpw_dú
;

58 *
	mpw_shñl
;

62 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_GNU


63 
	#__√ed_FILE


	)

64 
	~<°dio.h
>

68 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


73 
£çwít
 ();

79 
ídpwít
 ();

85 
∑sswd
 *
gëpwít
 ();

88 #ifdef 
__USE_SVID


95 
∑sswd
 *
fgëpwít
 (
FILE
 *
__°ªam
);

103 
puçwít
 (
__c⁄°
 
∑sswd
 *
__ª°ri˘
 
__p
,

104 
FILE
 *
__ª°ri˘
 
__f
);

111 
∑sswd
 *
gëpwuid
 (
__uid_t
 
__uid
);

117 
∑sswd
 *
gëpw«m
 (
__c⁄°
 *
__«me
);

119 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


121 #ifde‡
__USE_MISC


124 
	#NSS_BUFLEN_PASSWD
 1024

	)

135 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


140 
gëpwít_r
 (
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

141 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

142 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

145 
gëpwuid_r
 (
__uid_t
 
__uid
,

146 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

147 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

148 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

150 
gëpw«m_r
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

151 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

152 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

153 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

156 #ifdef 
__USE_SVID


164 
fgëpwít_r
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

165 
∑sswd
 *
__ª°ri˘
 
__ªsu…buf
,

166 *
__ª°ri˘
 
__buf„r
, 
size_t
 
__buÊí
,

167 
∑sswd
 **
__ª°ri˘
 
__ªsu…
);

172 #ifde‡
__USE_GNU


181 
gëpw
 (
__uid_t
 
__uid
, *
__buf„r
);

184 
	g__END_DECLS


	@/usr/include/sched.h

21 #i‚def 
_SCHED_H


22 
	#_SCHED_H
 1

	)

24 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 
	#__√ed_size_t


	)

30 
	~<°ddef.h
>

32 
	#__√ed_time_t


	)

33 
	#__√ed_time•ec


	)

34 
	~<time.h
>

36 #i‚de‡
__pid_t_deföed


37 
__pid_t
 
	tpid_t
;

38 
	#__pid_t_deföed


	)

43 
	~<bôs/sched.h
>

45 
	#sched_¥i‹ôy
 
__sched_¥i‹ôy


	)

48 
__BEGIN_DECLS


51 
	$sched_£ç¨am
 (
__pid_t
 
__pid
, 
__c⁄°
 
sched_∑øm
 *
__∑øm
)

52 
__THROW
;

55 
	$sched_gë∑øm
 (
__pid_t
 
__pid
, 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

58 
	$sched_£tscheduÀr
 (
__pid_t
 
__pid
, 
__pﬁicy
,

59 
__c⁄°
 
sched_∑øm
 *
__∑øm
Ë
__THROW
;

62 
	$sched_gëscheduÀr
 (
__pid_t
 
__pid
Ë
__THROW
;

65 
	$sched_yõld
 (Ë
__THROW
;

68 
	$sched_gë_¥i‹ôy_max
 (
__Æg‹ôhm
Ë
__THROW
;

71 
	$sched_gë_¥i‹ôy_mö
 (
__Æg‹ôhm
Ë
__THROW
;

74 
	$sched_º_gë_öãrvÆ
 (
__pid_t
 
__pid
, 
time•ec
 *
__t
Ë
__THROW
;

77 #ifde‡
__USE_GNU


79 
	#CPU_SETSIZE
 
__CPU_SETSIZE


	)

80 
	#CPU_SET
(
˝u
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

81 
	#CPU_CLR
(
˝u
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u,  (
˝u_£t_t
), cpu£ç)

	)

82 
	#CPU_ISSET
(
˝u
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (˝u,  (
˝u_£t_t
), \

83 
˝u£ç
)

	)

84 
	#CPU_ZERO
(
˝u£ç
Ë
	`__CPU_ZERO_S
 ( (
˝u_£t_t
), cpu£ç)

	)

85 
	#CPU_COUNT
(
˝u£ç
Ë
	`__CPU_COUNT_S
 ( (
˝u_£t_t
), cpu£ç)

	)

87 
	#CPU_SET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_SET_S
 (˝u, sësize, cpu£ç)

	)

88 
	#CPU_CLR_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_CLR_S
 (˝u, sësize, cpu£ç)

	)

89 
	#CPU_ISSET_S
(
˝u
, 
£tsize
, 
˝u£ç
Ë
	`__CPU_ISSET_S
 (cpu, setsize, \

90 
˝u£ç
)

	)

91 
	#CPU_ZERO_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_ZERO_S
 (£tsize, cpu£ç)

	)

92 
	#CPU_COUNT_S
(
£tsize
, 
˝u£ç
Ë
	`__CPU_COUNT_S
 (£tsize, cpu£ç)

	)

94 
	#CPU_EQUAL
(
˝u£ç1
, 
˝u£ç2
) \

95 
	`__CPU_EQUAL_S
 ( (
˝u_£t_t
), 
˝u£ç1
, 
˝u£ç2
)

	)

96 
	#CPU_EQUAL_S
(
£tsize
, 
˝u£ç1
, 
˝u£ç2
) \

97 
	`__CPU_EQUAL_S
 (
£tsize
, 
˝u£ç1
, 
˝u£ç2
)

	)

99 
	#CPU_AND
(
de°£t
, 
§c£t1
, 
§c£t2
) \

100 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

101 
	#CPU_OR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

102 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

103 
	#CPU_XOR
(
de°£t
, 
§c£t1
, 
§c£t2
) \

104 
	`__CPU_OP_S
 ( (
˝u_£t_t
), 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

105 
	#CPU_AND_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

106 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, &)

	)

107 
	#CPU_OR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

108 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, |)

	)

109 
	#CPU_XOR_S
(
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
) \

110 
	`__CPU_OP_S
 (
£tsize
, 
de°£t
, 
§c£t1
, 
§c£t2
, ^)

	)

112 
	#CPU_ALLOC_SIZE
(
cou¡
Ë
	`__CPU_ALLOC_SIZE
 (cou¡)

	)

113 
	#CPU_ALLOC
(
cou¡
Ë
	`__CPU_ALLOC
 (cou¡)

	)

114 
	#CPU_FREE
(
˝u£t
Ë
	`__CPU_FREE
 (˝u£t)

	)

118 
	$sched_£èfföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

119 
__c⁄°
 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

122 
	$sched_gëafföôy
 (
__pid_t
 
__pid
, 
size_t
 
__˝u£tsize
,

123 
˝u_£t_t
 *
__˝u£t
Ë
__THROW
;

126 
__END_DECLS


	@/usr/include/semaphore.h

19 #i‚de‡
_SEMAPHORE_H


20 
	#_SEMAPHORE_H
 1

	)

22 
	~<„©uªs.h
>

23 
	~<sys/ty≥s.h
>

24 #ifde‡
__USE_XOPEN2K


25 
	#__√ed_time•ec


	)

26 
	~<time.h
>

30 
	~<bôs/£m≠h‹e.h
>

33 
__BEGIN_DECLS


37 
	$£m_öô
 (
£m_t
 *
__£m
, 
__psh¨ed
, 
__vÆue
)

38 
__THROW
;

40 
	$£m_de°roy
 (
£m_t
 *
__£m
Ë
__THROW
;

43 
£m_t
 *
	$£m_›í
 (
__c⁄°
 *
__«me
, 
__oÊag
, ...Ë
__THROW
;

46 
	$£m_˛o£
 (
£m_t
 *
__£m
Ë
__THROW
;

49 
	$£m_u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
;

55 
	`£m_waô
 (
£m_t
 *
__£m
);

57 #ifde‡
__USE_XOPEN2K


62 
	`£m_timedwaô
 (
£m_t
 *
__ª°ri˘
 
__£m
,

63 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__ab°ime
);

67 
	$£m_åywaô
 (
£m_t
 *
__£m
Ë
__THROWNL
;

70 
	$£m_po°
 (
£m_t
 *
__£m
Ë
__THROWNL
;

73 
	$£m_gëvÆue
 (
£m_t
 *
__ª°ri˘
 
__£m
, *__ª°ri˘ 
__svÆ
)

74 
__THROW
;

77 
__END_DECLS


	@/usr/include/signal.h

23 #i‚def 
_SIGNAL_H


25 #i‡!
deföed
 
__√ed_sig_©omic_t
 && !deföed 
__√ed_sig£t_t


26 
	#_SIGNAL_H


	)

29 
	~<„©uªs.h
>

31 
	g__BEGIN_DECLS


33 
	~<bôs/sig£t.h
>

37 #i‡
deföed
 
__√ed_sig_©omic_t
 || deföed 
_SIGNAL_H


38 #i‚de‡
__sig_©omic_t_deföed


39 
	#__sig_©omic_t_deföed


	)

40 
__BEGIN_NAMESPACE_STD


41 
__sig_©omic_t
 
	tsig_©omic_t
;

42 
	g__END_NAMESPACE_STD


44 #unde‡
__√ed_sig_©omic_t


47 #i‡
deföed
 
__√ed_sig£t_t
 || (deföed 
_SIGNAL_H
 && deföed 
__USE_POSIX
)

48 #i‚de‡
__sig£t_t_deföed


49 
	#__sig£t_t_deföed


	)

50 
__sig£t_t
 
	tsig£t_t
;

52 #unde‡
__√ed_sig£t_t


55 #ifde‡
_SIGNAL_H


57 
	~<bôs/ty≥s.h
>

58 
	~<bôs/signum.h
>

60 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__pid_t_deföed


62 
__pid_t
 
	tpid_t
;

63 
	#__pid_t_deföed


	)

65 #ifde‡
__USE_XOPEN


67 #i‚de‡
__uid_t_deföed


68 
__uid_t
 
	tuid_t
;

69 
	#__uid_t_deföed


	)

73 #ifde‡
__USE_POSIX199309


75 
	#__√ed_time•ec


	)

76 
	~<time.h
>

79 
	~<bôs/sigöfo.h
>

84 (*
	t__sigh™dÀr_t
) ();

89 
__sigh™dÀr_t
 
	$__sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

90 
__THROW
;

91 #ifde‡
__USE_GNU


92 
__sigh™dÀr_t
 
	$sysv_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

93 
__THROW
;

99 
__BEGIN_NAMESPACE_STD


100 #ifde‡
__USE_BSD


101 
__sigh™dÀr_t
 
	$sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

102 
__THROW
;

105 #ifde‡
__REDIRECT_NTH


106 
__sigh™dÀr_t
 
	`__REDIRECT_NTH
 (
sig«l
,

107 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
),

108 
__sysv_sig«l
);

110 
	#sig«l
 
__sysv_sig«l


	)

113 
__END_NAMESPACE_STD


115 #ifde‡
__USE_XOPEN


118 
__sigh™dÀr_t
 
	$bsd_sig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

119 
__THROW
;

125 #ifde‡
__USE_POSIX


126 
	$kûl
 (
__pid_t
 
__pid
, 
__sig
Ë
__THROW
;

129 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


133 
	$kûÕg
 (
__pid_t
 
__pgΩ
, 
__sig
Ë
__THROW
;

136 
__BEGIN_NAMESPACE_STD


138 
	$øi£
 (
__sig
Ë
__THROW
;

139 
__END_NAMESPACE_STD


141 #ifde‡
__USE_SVID


143 
__sigh™dÀr_t
 
	$ssig«l
 (
__sig
, 
__sigh™dÀr_t
 
__h™dÀr
)

144 
__THROW
;

145 
	$gsig«l
 (
__sig
Ë
__THROW
;

148 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN2K


150 
	`psig«l
 (
__sig
, 
__c⁄°
 *
__s
);

153 #ifde‡
__USE_XOPEN2K


155 
	`psigöfo
 (
__c⁄°
 
sigöfo_t
 *
__pöfo
, __c⁄° *
__s
);

168 
	`__sig∑u£
 (
__sig_‹_mask
, 
__is_sig
);

170 #ifde‡
__FAVOR_BSD


173 
	$sig∑u£
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

175 #ifde‡
__USE_XOPEN


176 #ifde‡
__GNUC__


177 
	$sig∑u£
 (
__sig
Ë
	`__asm__
 ("__xpg_sigpause");

180 
	#sig∑u£
(
sig
Ë
	`__sig∑u£
 ((sig), 1)

	)

186 #ifde‡
__USE_BSD


193 
	#sigmask
(
sig
Ë
	`__sigmask
(sig)

	)

196 
	$sigblock
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

199 
	$sig£tmask
 (
__mask
Ë
__THROW
 
__©åibuã_dïªˇãd__
;

202 
	$siggëmask
 (Ë
__THROW
 
__©åibuã_dïªˇãd__
;

206 #ifde‡
__USE_MISC


207 
	#NSIG
 
_NSIG


	)

210 #ifde‡
__USE_GNU


211 
__sigh™dÀr_t
 
	tsigh™dÀr_t
;

215 #ifde‡
__USE_BSD


216 
__sigh™dÀr_t
 
	tsig_t
;

219 #ifde‡
__USE_POSIX


222 
	$sigem±y£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

225 
	$sigfûl£t
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

228 
	$sigadd£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

231 
	$sigdñ£t
 (
sig£t_t
 *
__£t
, 
__signo
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

234 
	$sigismembî
 (
__c⁄°
 
sig£t_t
 *
__£t
, 
__signo
)

235 
__THROW
 
	`__n⁄nuŒ
 ((1));

237 #ifde‡
__USE_GNU


239 
	$sigi£m±y£t
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

242 
	$sig™d£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

243 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

246 
	$sig‹£t
 (
sig£t_t
 *
__£t
, 
__c⁄°
 sig£t_à*
__À·
,

247 
__c⁄°
 
sig£t_t
 *
__right
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3));

252 
	~<bôs/siga˘i⁄.h
>

255 
	$sig¥ocmask
 (
__how
, 
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

256 
sig£t_t
 *
__ª°ri˘
 
__o£t
Ë
__THROW
;

263 
	$sigsu•íd
 (
__c⁄°
 
sig£t_t
 *
__£t
Ë
	`__n⁄nuŒ
 ((1));

266 
	$siga˘i⁄
 (
__sig
, 
__c⁄°
 
siga˘i⁄
 *
__ª°ri˘
 
__a˘
,

267 
siga˘i⁄
 *
__ª°ri˘
 
__ﬂ˘
Ë
__THROW
;

270 
	$sig≥ndög
 (
sig£t_t
 *
__£t
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

277 
	$sigwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
, *__ª°ri˘ 
__sig
)

278 
	`__n⁄nuŒ
 ((1, 2));

280 #ifde‡
__USE_POSIX199309


285 
	$sigwaôöfo
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

286 
sigöfo_t
 *
__ª°ri˘
 
__öfo
Ë
	`__n⁄nuŒ
 ((1));

293 
	$sigtimedwaô
 (
__c⁄°
 
sig£t_t
 *
__ª°ri˘
 
__£t
,

294 
sigöfo_t
 *
__ª°ri˘
 
__öfo
,

295 
__c⁄°
 
time•ec
 *
__ª°ri˘
 
__timeout
)

296 
	`__n⁄nuŒ
 ((1));

300 
	$sigqueue
 (
__pid_t
 
__pid
, 
__sig
, 
__c⁄°
 
sigvÆ
 
__vÆ
)

301 
__THROW
;

306 #ifde‡
__USE_BSD


310 
__c⁄°
 *__c⁄° 
_sys_sigli°
[
_NSIG
];

311 
__c⁄°
 *__c⁄° 
sys_sigli°
[
_NSIG
];

314 
	ssigvec


316 
__sigh™dÀr_t
 
sv_h™dÀr
;

317 
sv_mask
;

319 
sv_Êags
;

320 
	#sv_⁄°ack
 
sv_Êags


	)

324 
	#SV_ONSTACK
 (1 << 0)

	)

325 
	#SV_INTERRUPT
 (1 << 1)

	)

326 
	#SV_RESETHAND
 (1 << 2)

	)

334 
	$sigvec
 (
__sig
, 
__c⁄°
 
sigvec
 *
__vec
,

335 
sigvec
 *
__ovec
Ë
__THROW
;

339 
	~<bôs/sigc⁄ãxt.h
>

342 
	$sigªtu∫
 (
sigc⁄ãxt
 *
__s˝
Ë
__THROW
;

347 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


348 
	#__√ed_size_t


	)

349 
	~<°ddef.h
>

354 
	$sigöãºu±
 (
__sig
, 
__öãºu±
Ë
__THROW
;

356 
	~<bôs/sig°ack.h
>

357 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


359 
	~<sys/uc⁄ãxt.h
>

365 
	$sig°ack
 (
sig°ack
 *
__ss
, sig°ack *
__oss
)

366 
__THROW
 
__©åibuã_dïªˇãd__
;

370 
	$sigÆt°ack
 (
__c⁄°
 
sigÆt°ack
 *
__ª°ri˘
 
__ss
,

371 
sigÆt°ack
 *
__ª°ri˘
 
__oss
Ë
__THROW
;

375 #ifde‡
__USE_XOPEN_EXTENDED


379 
	$sighﬁd
 (
__sig
Ë
__THROW
;

382 
	$sigªl£
 (
__sig
Ë
__THROW
;

385 
	$sigign‹e
 (
__sig
Ë
__THROW
;

388 
__sigh™dÀr_t
 
	$sig£t
 (
__sig
, 
__sigh™dÀr_t
 
__di•
Ë
__THROW
;

391 #i‡
deföed
 
__USE_POSIX199506
 || deföed 
__USE_UNIX98


394 
	~<bôs/±hªadty≥s.h
>

395 
	~<bôs/sigthªad.h
>

402 
	$__libc_cuºít_sigπmö
 (Ë
__THROW
;

404 
	$__libc_cuºít_sigπmax
 (Ë
__THROW
;

408 
__END_DECLS


	@/usr/include/stdio.h

24 #i‚de‡
_STDIO_H


26 #i‡!
deföed
 
__√ed_FILE
 && !deföed 
__√ed___FILE


27 
	#_STDIO_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

36 
	~<bôs/ty≥s.h
>

37 
	#__√ed_FILE


	)

38 
	#__√ed___FILE


	)

42 #i‡!
deföed
 
__FILE_deföed
 && deföed 
__√ed_FILE


45 
	g_IO_FILE
;

47 
__BEGIN_NAMESPACE_STD


49 
_IO_FILE
 
	tFILE
;

50 
	g__END_NAMESPACE_STD


51 #i‡
deföed
 
__USE_LARGEFILE64
 || deföed 
__USE_SVID
 || deföed 
__USE_POSIX
 \

52 || 
deföed
 
	g__USE_BSD
 || deföed 
	g__USE_ISOC99
 || deföed 
	g__USE_XOPEN
 \

53 || 
deföed
 
__USE_POSIX2


54 
	$__USING_NAMESPACE_STD
(
FILE
)

57 
	#__FILE_deföed
 1

	)

59 #unde‡
__√ed_FILE


62 #i‡!
deföed
 
____FILE_deföed
 && deföed 
__√ed___FILE


65 
_IO_FILE
 
	t__FILE
;

67 
	#____FILE_deföed
 1

	)

69 #unde‡
__√ed___FILE


72 #ifdef 
_STDIO_H


73 
	#_STDIO_USES_IOSTREAM


	)

75 
	~<libio.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 #ifde‡
__GNUC__


79 #i‚de‡
_VA_LIST_DEFINED


80 
_G_va_li°
 
	tva_li°
;

81 
	#_VA_LIST_DEFINED


	)

84 
	~<°d¨g.h
>

88 #ifde‡
__USE_XOPEN2K8


89 #i‚de‡
__off_t_deföed


90 #i‚de‡
__USE_FILE_OFFSET64


91 
__off_t
 
	toff_t
;

93 
__off64_t
 
	toff_t
;

95 
	#__off_t_deföed


	)

97 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


98 
__off64_t
 
	toff64_t
;

99 
	#__off64_t_deföed


	)

102 #i‚de‡
__ssize_t_deföed


103 
__ssize_t
 
	tssize_t
;

104 
	#__ssize_t_deföed


	)

109 
__BEGIN_NAMESPACE_STD


110 #i‚de‡
__USE_FILE_OFFSET64


111 
_G_Âos_t
 
	tÂos_t
;

113 
_G_Âos64_t
 
	tÂos_t
;

115 
__END_NAMESPACE_STD


116 #ifde‡
__USE_LARGEFILE64


117 
_G_Âos64_t
 
	tÂos64_t
;

121 
	#_IOFBF
 0

	)

122 
	#_IOLBF
 1

	)

123 
	#_IONBF
 2

	)

127 #i‚de‡
BUFSIZ


128 
	#BUFSIZ
 
_IO_BUFSIZ


	)

134 #i‚de‡
EOF


135 
	#EOF
 (-1)

	)

141 
	#SEEK_SET
 0

	)

142 
	#SEEK_CUR
 1

	)

143 
	#SEEK_END
 2

	)

144 #ifde‡
__USE_GNU


145 
	#SEEK_DATA
 3

	)

146 
	#SEEK_HOLE
 4

	)

150 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


152 
	#P_tmpdú
 "/tmp"

	)

165 
	~<bôs/°dio_lim.h
>

169 
_IO_FILE
 *
°dö
;

170 
_IO_FILE
 *
°dout
;

171 
_IO_FILE
 *
°dîr
;

173 
	#°dö
 
°dö


	)

174 
	#°dout
 
°dout


	)

175 
	#°dîr
 
°dîr


	)

177 
__BEGIN_NAMESPACE_STD


179 
	$ªmove
 (
__c⁄°
 *
__fûíame
Ë
__THROW
;

181 
	$ª«me
 (
__c⁄°
 *
__ﬁd
, __c⁄° *
__√w
Ë
__THROW
;

182 
__END_NAMESPACE_STD


184 #ifde‡
__USE_ATFILE


186 
	$ª«mót
 (
__ﬁdfd
, 
__c⁄°
 *
__ﬁd
, 
__√wfd
,

187 
__c⁄°
 *
__√w
Ë
__THROW
;

190 
__BEGIN_NAMESPACE_STD


195 #i‚de‡
__USE_FILE_OFFSET64


196 
FILE
 *
	$tmpfûe
 (Ë
__wur
;

198 #ifde‡
__REDIRECT


199 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
Ë
__wur
;

201 
	#tmpfûe
 
tmpfûe64


	)

205 #ifde‡
__USE_LARGEFILE64


206 
FILE
 *
	$tmpfûe64
 (Ë
__wur
;

210 *
	$tm≤am
 (*
__s
Ë
__THROW
 
__wur
;

211 
__END_NAMESPACE_STD


213 #ifde‡
__USE_MISC


216 *
	$tm≤am_r
 (*
__s
Ë
__THROW
 
__wur
;

220 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


228 *
	$ãm≤am
 (
__c⁄°
 *
__dú
, __c⁄° *
__pfx
)

229 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

233 
__BEGIN_NAMESPACE_STD


238 
	`f˛o£
 (
FILE
 *
__°ªam
);

243 
	`fÊush
 (
FILE
 *
__°ªam
);

244 
__END_NAMESPACE_STD


246 #ifde‡
__USE_MISC


253 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

256 #ifde‡
__USE_GNU


263 
	`f˛o£Æl
 ();

267 
__BEGIN_NAMESPACE_STD


268 #i‚de‡
__USE_FILE_OFFSET64


273 
FILE
 *
	$f›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

274 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

279 
FILE
 *
	$‰e›í
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

280 
__c⁄°
 *
__ª°ri˘
 
__modes
,

281 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

283 #ifde‡
__REDIRECT


284 
FILE
 *
	`__REDIRECT
 (
f›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

285 
__c⁄°
 *
__ª°ri˘
 
__modes
), 
f›í64
)

286 
__wur
;

287 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

288 
__c⁄°
 *
__ª°ri˘
 
__modes
,

289 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

290 
__wur
;

292 
	#f›í
 
f›í64


	)

293 
	#‰e›í
 
‰e›í64


	)

296 
__END_NAMESPACE_STD


297 #ifde‡
__USE_LARGEFILE64


298 
FILE
 *
	$f›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

299 
__c⁄°
 *
__ª°ri˘
 
__modes
Ë
__wur
;

300 
FILE
 *
	$‰e›í64
 (
__c⁄°
 *
__ª°ri˘
 
__fûíame
,

301 
__c⁄°
 *
__ª°ri˘
 
__modes
,

302 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

305 #ifdef 
__USE_POSIX


307 
FILE
 *
	$fd›í
 (
__fd
, 
__c⁄°
 *
__modes
Ë
__THROW
 
__wur
;

310 #ifdef 
__USE_GNU


313 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

314 
__c⁄°
 *
__ª°ri˘
 
__modes
,

315 
_IO_cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW
 
__wur
;

318 #ifde‡
__USE_XOPEN2K8


320 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, 
__c⁄°
 *
__modes
)

321 
__THROW
 
__wur
;

326 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
 
__wur
;

330 
__BEGIN_NAMESPACE_STD


333 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

337 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

338 
__modes
, 
size_t
 
__n
Ë
__THROW
;

339 
__END_NAMESPACE_STD


341 #ifdef 
__USE_BSD


344 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

345 
size_t
 
__size
Ë
__THROW
;

348 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

352 
__BEGIN_NAMESPACE_STD


357 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

358 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

363 
	`¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...);

365 
	$•rötf
 (*
__ª°ri˘
 
__s
,

366 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

372 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

373 
_G_va_li°
 
__¨g
);

378 
	`v¥ötf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
);

380 
	$v•rötf
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

381 
_G_va_li°
 
__¨g
Ë
__THROWNL
;

382 
__END_NAMESPACE_STD


384 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_ISOC99
 || deföed 
__USE_UNIX98


385 
__BEGIN_NAMESPACE_C99


387 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

388 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

389 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

391 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

392 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

393 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

394 
__END_NAMESPACE_C99


397 #ifde‡
__USE_GNU


400 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, 
__c⁄°
 *__ª°ri˘ 
__f
,

401 
_G_va_li°
 
__¨g
)

402 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

403 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

404 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

405 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

406 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

407 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

408 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

411 #ifde‡
__USE_XOPEN2K8


418 
	$vd¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
,

419 
_G_va_li°
 
__¨g
)

420 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

421 
	$d¥ötf
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__fmt
, ...)

422 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

426 
__BEGIN_NAMESPACE_STD


431 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

432 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

437 
	$sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

439 
	$ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

440 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

442 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

443 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

444 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

445 #ifde‡
__REDIRECT


449 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

450 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

451 
__isoc99_fsˇnf
Ë
__wur
;

452 
	`__REDIRECT
 (
sˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

453 
__isoc99_sˇnf
Ë
__wur
;

454 
	`__REDIRECT_NTH
 (
ssˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__s
,

455 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...),

456 
__isoc99_ssˇnf
);

458 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

459 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

460 
	$__isoc99_sˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

461 
	$__isoc99_ssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

462 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

463 
	#fsˇnf
 
__isoc99_fsˇnf


	)

464 
	#sˇnf
 
__isoc99_sˇnf


	)

465 
	#ssˇnf
 
__isoc99_ssˇnf


	)

469 
__END_NAMESPACE_STD


471 #ifdef 
__USE_ISOC99


472 
__BEGIN_NAMESPACE_C99


477 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__f‹m©
,

478 
_G_va_li°
 
__¨g
)

479 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

485 
	$vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

489 
	$vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

490 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
)

491 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

493 #i‡!
deföed
 
__USE_GNU
 \

494 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

495 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

496 #ifde‡
__REDIRECT


500 
	`__REDIRECT
 (
vfsˇnf
,

501 (
FILE
 *
__ª°ri˘
 
__s
,

502 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, 
_G_va_li°
 
__¨g
),

503 
__isoc99_vfsˇnf
)

504 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

505 
	`__REDIRECT
 (
vsˇnf
, (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

506 
_G_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

507 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

508 
	`__REDIRECT_NTH
 (
vssˇnf
,

509 (
__c⁄°
 *
__ª°ri˘
 
__s
,

510 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

511 
_G_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

512 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

514 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

515 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

516 
_G_va_li°
 
__¨g
Ë
__wur
;

517 
	$__isoc99_vsˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

518 
_G_va_li°
 
__¨g
Ë
__wur
;

519 
	$__isoc99_vssˇnf
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

520 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

521 
_G_va_li°
 
__¨g
Ë
__THROW
;

522 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

523 
	#vsˇnf
 
__isoc99_vsˇnf


	)

524 
	#vssˇnf
 
__isoc99_vssˇnf


	)

528 
__END_NAMESPACE_C99


532 
__BEGIN_NAMESPACE_STD


537 
	`fgëc
 (
FILE
 *
__°ªam
);

538 
	`gëc
 (
FILE
 *
__°ªam
);

544 
	`gëch¨
 ();

545 
__END_NAMESPACE_STD


549 
	#gëc
(
_Â
Ë
	`_IO_gëc
 (_Â)

	)

551 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


556 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

557 
	`gëch¨_u∆ocked
 ();

560 #ifde‡
__USE_MISC


567 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

571 
__BEGIN_NAMESPACE_STD


579 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

580 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

586 
	`putch¨
 (
__c
);

587 
__END_NAMESPACE_STD


591 
	#putc
(
_ch
, 
_Â
Ë
	`_IO_putc
 (_ch, _Â)

	)

593 #ifde‡
__USE_MISC


600 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

603 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


608 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

609 
	`putch¨_u∆ocked
 (
__c
);

613 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 \

614 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

616 
	`gëw
 (
FILE
 *
__°ªam
);

619 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

623 
__BEGIN_NAMESPACE_STD


628 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

629 
__wur
;

636 *
	$gës
 (*
__s
Ë
__wur
;

637 
__END_NAMESPACE_STD


639 #ifde‡
__USE_GNU


646 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

651 #ifdef 
__USE_XOPEN2K8


662 
_IO_ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

663 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

664 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

665 
_IO_ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

666 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

667 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

675 
_IO_ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

676 
size_t
 *
__ª°ri˘
 
__n
,

677 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
__BEGIN_NAMESPACE_STD


686 
	`Âuts
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

692 
	`puts
 (
__c⁄°
 *
__s
);

699 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

706 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

707 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

712 
size_t
 
	`fwrôe
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

713 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

714 
__END_NAMESPACE_STD


716 #ifde‡
__USE_GNU


723 
	`Âuts_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

724 
FILE
 *
__ª°ri˘
 
__°ªam
);

727 #ifde‡
__USE_MISC


734 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

735 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

736 
size_t
 
	`fwrôe_u∆ocked
 (
__c⁄°
 *
__ª°ri˘
 
__±r
, size_à
__size
,

737 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

741 
__BEGIN_NAMESPACE_STD


746 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

751 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

756 
	`ªwöd
 (
FILE
 *
__°ªam
);

757 
__END_NAMESPACE_STD


764 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


765 #i‚de‡
__USE_FILE_OFFSET64


770 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

775 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

777 #ifde‡
__REDIRECT


778 
	`__REDIRECT
 (
f£eko
,

779 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

780 
f£eko64
);

781 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

783 
	#f£eko
 
f£eko64


	)

784 
	#·ñlo
 
·ñlo64


	)

789 
__BEGIN_NAMESPACE_STD


790 #i‚de‡
__USE_FILE_OFFSET64


795 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

800 
	`f£ços
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
);

802 #ifde‡
__REDIRECT


803 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

804 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

805 
	`__REDIRECT
 (
f£ços
,

806 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos_t
 *
__pos
), 
f£ços64
);

808 
	#fgëpos
 
fgëpos64


	)

809 
	#f£ços
 
f£ços64


	)

812 
__END_NAMESPACE_STD


814 #ifde‡
__USE_LARGEFILE64


815 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

816 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

817 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

818 
	`f£ços64
 (
FILE
 *
__°ªam
, 
__c⁄°
 
Âos64_t
 *
__pos
);

821 
__BEGIN_NAMESPACE_STD


823 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

825 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

827 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

828 
__END_NAMESPACE_STD


830 #ifde‡
__USE_MISC


832 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

833 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

834 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

838 
__BEGIN_NAMESPACE_STD


843 
	`≥º‹
 (
__c⁄°
 *
__s
);

844 
__END_NAMESPACE_STD


850 
	~<bôs/sys_îæi°.h
>

853 #ifdef 
__USE_POSIX


855 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

858 #ifde‡
__USE_MISC


860 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

864 #i‡(
deföed
 
__USE_POSIX2
 || deföed 
__USE_SVID
 || deföed 
__USE_BSD
 || \

865 
deföed
 
__USE_MISC
)

870 
FILE
 *
	$p›í
 (
__c⁄°
 *
__comm™d
, __c⁄° *
__modes
Ë
__wur
;

876 
	`p˛o£
 (
FILE
 *
__°ªam
);

880 #ifdef 
__USE_POSIX


882 *
	$˘îmid
 (*
__s
Ë
__THROW
;

886 #ifde‡
__USE_XOPEN


888 *
	`cu£rid
 (*
__s
);

892 #ifdef 
__USE_GNU


893 
ob°ack
;

896 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

897 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
, ...)

898 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

899 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

900 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

901 
_G_va_li°
 
__¨gs
)

902 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

906 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


910 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

914 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

917 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

920 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


924 
	#__√ed_gë›t


	)

925 
	~<gë›t.h
>

930 #ifde‡
__USE_EXTERN_INLINES


931 
	~<bôs/°dio.h
>

933 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


934 
	~<bôs/°dio2.h
>

936 #ifde‡
__LDBL_COMPAT


937 
	~<bôs/°dio-ldbl.h
>

940 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	~<„©uªs.h
>

28 
	#__√ed_size_t


	)

29 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	g__BEGIN_DECLS


37 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


38 
	#_STDLIB_H
 1

	)

40 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


42 
	~<bôs/waôÊags.h
>

43 
	~<bôs/waô°©us.h
>

45 #ifde‡
__USE_BSD


50 #i‡
deföed
 
__GNUC__
 && !deföed 
__˝lu•lus


51 
	#__WAIT_INT
(
°©us
) \

52 (
	`__exãnsi⁄__
 (((uni⁄ { 
	`__ty≥of
(
°©us
Ë
__ö
; 
__i
; }) \

53 { .
__ö
 = (
°©us
Ë}).
__i
))

	)

55 
	#__WAIT_INT
(
°©us
Ë(*(*Ë&(°©us))

	)

63 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2 || deföed 
__˝lu•lus


64 
	#__WAIT_STATUS
 *

	)

65 
	#__WAIT_STATUS_DEFN
 *

	)

70 
waô
 *
	m__u±r
;

71 *
	m__ùå
;

72 } 
	t__WAIT_STATUS
 
	t__©åibuã__
 ((
	t__å™•¨ít_uni⁄__
));

73 
	#__WAIT_STATUS_DEFN
 *

	)

78 
	#__WAIT_INT
(
°©us
Ë(°©us)

	)

79 
	#__WAIT_STATUS
 *

	)

80 
	#__WAIT_STATUS_DEFN
 *

	)

85 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (
	`__WAIT_INT
 (°©us))

	)

86 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (
	`__WAIT_INT
 (°©us))

	)

87 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (
	`__WAIT_INT
 (°©us))

	)

88 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (
	`__WAIT_INT
 (°©us))

	)

89 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (
	`__WAIT_INT
 (°©us))

	)

90 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (
	`__WAIT_INT
 (°©us))

	)

91 #ifde‡
__WIFCONTINUED


92 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (
	`__WAIT_INT
 (°©us))

	)

96 
__BEGIN_NAMESPACE_STD


100 
	mquŸ
;

101 
	mªm
;

102 } 
	tdiv_t
;

105 #i‚de‡
__ldiv_t_deföed


108 
	mquŸ
;

109 
	mªm
;

110 } 
	tldiv_t
;

111 
	#__ldiv_t_deföed
 1

	)

113 
	g__END_NAMESPACE_STD


115 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


116 
__BEGIN_NAMESPACE_C99


118 
__exãnsi⁄__
 struct

120 
	mquŸ
;

121 
	mªm
;

122 } 
	tŒdiv_t
;

123 
	#__Œdiv_t_deföed
 1

	)

124 
	g__END_NAMESPACE_C99


129 
	#RAND_MAX
 2147483647

	)

134 
	#EXIT_FAILURE
 1

	)

135 
	#EXIT_SUCCESS
 0

	)

139 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

140 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

143 
__BEGIN_NAMESPACE_STD


145 
	$©of
 (
__c⁄°
 *
__≈å
)

146 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

148 
	$©oi
 (
__c⁄°
 *
__≈å
)

149 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

151 
	$©ﬁ
 (
__c⁄°
 *
__≈å
)

152 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

153 
__END_NAMESPACE_STD


155 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

156 
__BEGIN_NAMESPACE_C99


158 
__exãnsi⁄__
 
	$©ﬁl
 (
__c⁄°
 *
__≈å
)

159 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

160 
__END_NAMESPACE_C99


163 
__BEGIN_NAMESPACE_STD


165 
	$°πod
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

168 
__END_NAMESPACE_STD


170 #ifdef 
__USE_ISOC99


171 
__BEGIN_NAMESPACE_C99


173 
	$°πof
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

174 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

176 
	$°πﬁd
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

177 **
__ª°ri˘
 
__íd±r
)

178 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

179 
__END_NAMESPACE_C99


182 
__BEGIN_NAMESPACE_STD


184 
	$°πﬁ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

185 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

186 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

188 
	$°πoul
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

191 
__END_NAMESPACE_STD


193 #i‡
deföed
 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_BSD


195 
__exãnsi⁄__


196 
	$°πoq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

197 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

198 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

200 
__exãnsi⁄__


201 
	$°πouq
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

206 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GLIBC_HAVE_LONG_LONG
 && deföed 
__USE_MISC
)

207 
__BEGIN_NAMESPACE_C99


209 
__exãnsi⁄__


210 
	$°πﬁl
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

211 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

212 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

214 
__exãnsi⁄__


215 
	$°πouŒ
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

216 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

217 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

218 
__END_NAMESPACE_C99


222 #ifde‡
__USE_GNU


236 
	~<xloˇÀ.h
>

240 
	$°πﬁ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

241 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

242 
__loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

244 
	$°πoul_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

245 **
__ª°ri˘
 
__íd±r
,

246 
__ba£
, 
__loˇÀ_t
 
__loc
)

247 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

249 
__exãnsi⁄__


250 
	$°πﬁl_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

251 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

252 
__loˇÀ_t
 
__loc
)

253 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

255 
__exãnsi⁄__


256 
	$°πouŒ_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

257 **
__ª°ri˘
 
__íd±r
,

258 
__ba£
, 
__loˇÀ_t
 
__loc
)

259 
__THROW
 
	`__n⁄nuŒ
 ((1, 4)Ë
__wur
;

261 
	$°πod_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

262 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

263 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

265 
	$°πof_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

266 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

267 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

269 
	$°πﬁd_l
 (
__c⁄°
 *
__ª°ri˘
 
__≈å
,

270 **
__ª°ri˘
 
__íd±r
,

271 
__loˇÀ_t
 
__loc
)

272 
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

276 #ifde‡
__USE_EXTERN_INLINES


277 
__BEGIN_NAMESPACE_STD


278 
__exã∫_ölöe
 

279 
	`__NTH
 (
	$©of
 (
__c⁄°
 *
__≈å
))

281  
	`°πod
 (
__≈å
, (**Ë
NULL
);

282 
	}
}

283 
__exã∫_ölöe
 

284 
__NTH
 (
	$©oi
 (
__c⁄°
 *
__≈å
))

286  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

287 
	}
}

288 
__exã∫_ölöe
 

289 
__NTH
 (
	$©ﬁ
 (
__c⁄°
 *
__≈å
))

291  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

292 
	}
}

293 
	g__END_NAMESPACE_STD


295 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_ISOC99


296 
__BEGIN_NAMESPACE_C99


297 
__exãnsi⁄__
 
__exã∫_ölöe
 

298 
__NTH
 (
	$©ﬁl
 (
__c⁄°
 *
__≈å
))

300  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

301 
	}
}

302 
	g__END_NAMESPACE_C99


307 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED


311 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

314 
	$a64l
 (
__c⁄°
 *
__s
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

319 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_BSD


320 
	~<sys/ty≥s.h
>

327 
	$øndom
 (Ë
__THROW
;

330 
	$§™dom
 (
__£ed
Ë
__THROW
;

336 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

337 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

341 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

344 #ifde‡
__USE_MISC


349 
	søndom_d©a


351 
öt32_t
 *
Âå
;

352 
öt32_t
 *
Ωå
;

353 
öt32_t
 *
°©e
;

354 
ønd_ty≥
;

355 
ønd_deg
;

356 
ønd_£p
;

357 
öt32_t
 *
íd_±r
;

360 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

361 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

363 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2));

366 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

367 
size_t
 
__°©ñí
,

368 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

369 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

371 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

372 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

373 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

378 
__BEGIN_NAMESPACE_STD


380 
	$ønd
 (Ë
__THROW
;

382 
	$§™d
 (
__£ed
Ë
__THROW
;

383 
__END_NAMESPACE_STD


385 #ifde‡
__USE_POSIX


387 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

391 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


395 
	$dønd48
 (Ë
__THROW
;

396 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

399 
	$Ã™d48
 (Ë
__THROW
;

400 
	$ƒ™d48
 (
__xsubi
[3])

401 
__THROW
 
	`__n⁄nuŒ
 ((1));

404 
	$mønd48
 (Ë
__THROW
;

405 
	$jønd48
 (
__xsubi
[3])

406 
__THROW
 
	`__n⁄nuŒ
 ((1));

409 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

410 *
	$£ed48
 (
__£ed16v
[3])

411 
__THROW
 
	`__n⁄nuŒ
 ((1));

412 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

414 #ifde‡
__USE_MISC


418 
	sdønd48_d©a


420 
__x
[3];

421 
__ﬁd_x
[3];

422 
__c
;

423 
__öô
;

424 
__a
;

428 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

429 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

430 
	$î™d48_r
 (
__xsubi
[3],

431 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

432 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

435 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

436 *
__ª°ri˘
 
__ªsu…
)

437 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$ƒ™d48_r
 (
__xsubi
[3],

439 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

440 *
__ª°ri˘
 
__ªsu…
)

441 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

444 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

445 *
__ª°ri˘
 
__ªsu…
)

446 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

447 
	$jønd48_r
 (
__xsubi
[3],

448 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

449 *
__ª°ri˘
 
__ªsu…
)

450 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

453 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

454 
__THROW
 
	`__n⁄nuŒ
 ((2));

456 
	$£ed48_r
 (
__£ed16v
[3],

457 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$lc⁄g48_r
 (
__∑øm
[7],

460 
dønd48_d©a
 *
__buf„r
)

461 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

467 #i‚de‡
__mÆloc_™d_ˇŒoc_deföed


468 
	#__mÆloc_™d_ˇŒoc_deföed


	)

469 
__BEGIN_NAMESPACE_STD


471 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

473 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

474 
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

475 
__END_NAMESPACE_STD


478 #i‚de‡
__√ed_mÆloc_™d_ˇŒoc


479 
__BEGIN_NAMESPACE_STD


485 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

486 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
;

488 
	$‰ì
 (*
__±r
Ë
__THROW
;

489 
__END_NAMESPACE_STD


491 #ifdef 
__USE_MISC


493 
	$c‰ì
 (*
__±r
Ë
__THROW
;

496 #i‡
deföed
 
__USE_GNU
 || deföed 
__USE_BSD
 || deföed 
__USE_MISC


497 
	~<Æloˇ.h
>

500 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

501 || 
deföed
 
__USE_BSD


503 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__
 
__wur
;

506 #ifde‡
__USE_XOPEN2K


508 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

509 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

512 
__BEGIN_NAMESPACE_STD


514 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

518 
	`©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

520 #ifde‡
__USE_GNU


524 #ifde‡
__˝lu•lus


525 "C++" 
	`©_quick_exô
 ((*
__func
) ())

526 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

528 
	`©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

531 
__END_NAMESPACE_STD


533 #ifdef 
__USE_MISC


536 
	`⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

537 
__THROW
 
	`__n⁄nuŒ
 ((1));

540 
__BEGIN_NAMESPACE_STD


544 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

546 #ifde‡
__USE_GNU


552 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

554 
__END_NAMESPACE_STD


556 #ifde‡
__USE_ISOC99


557 
__BEGIN_NAMESPACE_C99


560 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

561 
__END_NAMESPACE_C99


565 
__BEGIN_NAMESPACE_STD


567 *
	$gëív
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

568 
__END_NAMESPACE_STD


572 *
	$__£cuª_gëív
 (
__c⁄°
 *
__«me
)

573 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

575 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


579 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

582 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


585 
	$£ãnv
 (
__c⁄°
 *
__«me
, __c⁄° *
__vÆue
, 
__ª∂a˚
)

586 
__THROW
 
	`__n⁄nuŒ
 ((2));

589 
	$un£ãnv
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

592 #ifdef 
__USE_MISC


596 
	$˛óªnv
 (Ë
__THROW
;

600 #i‡
deföed
 
__USE_MISC
 \

601 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
)

606 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

609 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 \

610 || 
deföed
 
__USE_XOPEN2K8


619 #i‚de‡
__USE_FILE_OFFSET64


620 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

622 #ifde‡
__REDIRECT


623 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

624 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

626 
	#mk°emp
 
mk°emp64


	)

629 #ifde‡
__USE_LARGEFILE64


630 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

634 #ifde‡
__USE_MISC


641 #i‚de‡
__USE_FILE_OFFSET64


642 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

644 #ifde‡
__REDIRECT


645 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

646 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

648 
	#mk°emps
 
mk°emps64


	)

651 #ifde‡
__USE_LARGEFILE64


652 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

653 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

657 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K8


663 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

666 #ifde‡
__USE_GNU


673 #i‚de‡
__USE_FILE_OFFSET64


674 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

676 #ifde‡
__REDIRECT


677 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

678 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

680 
	#mko°emp
 
mko°emp64


	)

683 #ifde‡
__USE_LARGEFILE64


684 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

693 #i‚de‡
__USE_FILE_OFFSET64


694 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

695 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

699 
__Êags
), 
mko°emps64
)

700 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

702 
	#mko°emps
 
mko°emps64


	)

705 #ifde‡
__USE_LARGEFILE64


706 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

707 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

712 
__BEGIN_NAMESPACE_STD


717 
	$sy°em
 (
__c⁄°
 *
__comm™d
Ë
__wur
;

718 
__END_NAMESPACE_STD


721 #ifdef 
__USE_GNU


724 *
	$ˇn⁄iˇlize_fûe_«me
 (
__c⁄°
 *
__«me
)

725 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

728 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


734 *
	$ªÆ∑th
 (
__c⁄°
 *
__ª°ri˘
 
__«me
,

735 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

740 #i‚de‡
__COMPAR_FN_T


741 
	#__COMPAR_FN_T


	)

742 (*
	t__com∑r_‚_t
Ë(
	t__c⁄°
 *, __const *);

744 #ifdef 
__USE_GNU


745 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

748 #ifde‡
__USE_GNU


749 (*
	t__com∑r_d_‚_t
Ë(
	t__c⁄°
 *, __const *, *);

752 
__BEGIN_NAMESPACE_STD


755 *
	$b£¨ch
 (
__c⁄°
 *
__key
, __c⁄° *
__ba£
,

756 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

757 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

761 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

762 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

763 #ifde‡
__USE_GNU


764 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

765 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

766 
	`__n⁄nuŒ
 ((1, 4));

771 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

772 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

773 
__END_NAMESPACE_STD


775 #ifde‡
__USE_ISOC99


776 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

777 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

781 
__BEGIN_NAMESPACE_STD


785 
div_t
 
	$div
 (
__numî
, 
__díom
)

786 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

787 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

788 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

789 
__END_NAMESPACE_STD


791 #ifde‡
__USE_ISOC99


792 
__BEGIN_NAMESPACE_C99


793 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

794 
__díom
)

795 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

796 
__END_NAMESPACE_C99


800 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

801 || 
deföed
 
__USE_SVID


808 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

809 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

814 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

815 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

820 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

821 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

824 #ifde‡
__USE_MISC


826 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

827 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

828 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

829 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

830 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

831 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

832 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

833 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

838 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

839 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

840 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

841 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

842 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

843 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

845 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

846 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

847 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

848 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

849 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

850 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

851 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

852 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

857 
__BEGIN_NAMESPACE_STD


860 
	$mbÀn
 (
__c⁄°
 *
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

863 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

864 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
 
__wur
;

867 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
 
__wur
;

871 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

872 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

874 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

875 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

876 
__THROW
;

877 
__END_NAMESPACE_STD


880 #ifde‡
__USE_SVID


885 
	$Ωm©ch
 (
__c⁄°
 *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

889 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


896 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

897 *
__c⁄°
 *
__ª°ri˘
 
__tokís
,

898 **
__ª°ri˘
 
__vÆuï
)

899 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

903 #ifde‡
__USE_XOPEN


905 
	$£tkey
 (
__c⁄°
 *
__key
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

911 #ifde‡
__USE_XOPEN2KXSI


913 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

916 #ifde‡
__USE_XOPEN


921 
	$gø¡±
 (
__fd
Ë
__THROW
;

925 
	$u∆ock±
 (
__fd
Ë
__THROW
;

930 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

933 #ifde‡
__USE_GNU


937 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

938 
__THROW
 
	`__n⁄nuŒ
 ((2));

941 
	`gë±
 ();

944 #ifde‡
__USE_BSD


948 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

949 
__THROW
 
	`__n⁄nuŒ
 ((1));

954 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


955 
	~<bôs/°dlib.h
>

957 #ifde‡
__LDBL_COMPAT


958 
	~<bôs/°dlib-ldbl.h
>

962 #unde‡
__√ed_mÆloc_™d_ˇŒoc


964 
__END_DECLS


	@/usr/include/string.h

24 #i‚def 
_STRING_H


25 
	#_STRING_H
 1

	)

27 
	~<„©uªs.h
>

29 
	g__BEGIN_DECLS


32 
	#__√ed_size_t


	)

33 
	#__√ed_NULL


	)

34 
	~<°ddef.h
>

37 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

42 
__BEGIN_NAMESPACE_STD


44 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
,

45 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

46 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

49 *
	$memmove
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
)

50 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

51 
__END_NAMESPACE_STD


56 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN


57 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

58 
__c
, 
size_t
 
__n
)

59 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

63 
__BEGIN_NAMESPACE_STD


65 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

68 
	$memcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

72 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


75 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

76 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

77 
__c⁄°
 *
	`memchr
 (__c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

78 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

80 #ifde‡
__OPTIMIZE__


81 
__exã∫_Æways_ölöe
 *

82 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


84  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

87 
__exã∫_Æways_ölöe
 
__c⁄°
 *

88 
	`memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


90  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

93 
	}
}

95 *
	$memchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

96 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

98 
__END_NAMESPACE_STD


100 #ifde‡
__USE_GNU


103 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


104 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

105 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

106 "C++" 
__c⁄°
 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

107 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

109 *
	$øwmemchr
 (
__c⁄°
 *
__s
, 
__c
)

110 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

116 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" 
__c⁄°
 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

118 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$memrchr
 (
__c⁄°
 *
__s
, 
__c
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

126 
__BEGIN_NAMESPACE_STD


128 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

131 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

132 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

133 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

136 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

139 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
,

140 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

143 
	$°rcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

144 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

146 
	$°∫cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

147 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

150 
	$°rcﬁl
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

151 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

153 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

154 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

155 
__THROW
 
	`__n⁄nuŒ
 ((2));

156 
__END_NAMESPACE_STD


158 #ifde‡
__USE_XOPEN2K8


162 
	~<xloˇÀ.h
>

165 
	$°rcﬁl_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
__loˇÀ_t
 
__l
)

166 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

168 
size_t
 
	$°rx‰m_l
 (*
__de°
, 
__c⁄°
 *
__§c
, 
size_t
 
__n
,

169 
__loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

172 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 \

173 || 
deföed
 
__USE_XOPEN2K8


175 *
	$°rdup
 (
__c⁄°
 *
__s
)

176 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

182 #i‡
deföed
 
__USE_XOPEN2K8


183 *
	$°∫dup
 (
__c⁄°
 *
__°rög
, 
size_t
 
__n
)

184 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

187 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


189 
	#°rdu∑
(
s
) \

190 (
__exãnsi⁄__
 \

192 
__c⁄°
 *
__ﬁd
 = (
s
); \

193 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

194 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

195 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

196 
	}
}))

	)

199 
	#°∫du∑
(
s
, 
n
) \

200 (
__exãnsi⁄__
 \

202 
__c⁄°
 *
__ﬁd
 = (
s
); \

203 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

204 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

205 
__√w
[
__Àn
] = '\0'; \

206 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

207 }))

	)

210 
	g__BEGIN_NAMESPACE_STD


212 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


215 *
°rchr
 (*
__s
, 
__c
)

216 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

217 
__c⁄°
 *
°rchr
 (__c⁄° *
__s
, 
__c
)

218 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

220 #ifde‡
__OPTIMIZE__


221 
__exã∫_Æways_ölöe
 *

222 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


224  
__buûtö_°rchr
 (
__s
, 
__c
);

227 
__exã∫_Æways_ölöe
 
__c⁄°
 *

228 
°rchr
 (
__c⁄°
 *
__s
, 
__c
Ë
	g__THROW


230  
__buûtö_°rchr
 (
__s
, 
__c
);

235 *
	$°rchr
 (
__c⁄°
 *
__s
, 
__c
)

236 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

239 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


242 *
	`°ºchr
 (*
__s
, 
__c
)

243 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

244 
__c⁄°
 *
	`°ºchr
 (__c⁄° *
__s
, 
__c
)

245 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

247 #ifde‡
__OPTIMIZE__


248 
__exã∫_Æways_ölöe
 *

249 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


251  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

254 
__exã∫_Æways_ölöe
 
__c⁄°
 *

255 
	`°ºchr
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


257  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

260 
	}
}

262 *
	$°ºchr
 (
__c⁄°
 *
__s
, 
__c
)

263 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

265 
__END_NAMESPACE_STD


267 #ifde‡
__USE_GNU


270 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


271 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

272 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

273 "C++" 
__c⁄°
 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

274 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

276 *
	$°rch∫ul
 (
__c⁄°
 *
__s
, 
__c
)

277 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

281 
__BEGIN_NAMESPACE_STD


284 
size_t
 
	$°rc•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ªje˘
)

285 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

288 
size_t
 
	$°r•n
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

289 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

291 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


294 *
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
)

295 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

296 
__c⁄°
 *
	`°Ωbrk
 (__c⁄° *
__s
, __c⁄° *
__ac˚±
)

297 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

299 #ifde‡
__OPTIMIZE__


300 
__exã∫_Æways_ölöe
 *

301 
	`°Ωbrk
 (*
__s
, 
__c⁄°
 *
__ac˚±
Ë
__THROW


303  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

306 
__exã∫_Æways_ölöe
 
__c⁄°
 *

307 
	`°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
Ë
__THROW


309  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

312 
	}
}

314 *
	$°Ωbrk
 (
__c⁄°
 *
__s
, __c⁄° *
__ac˚±
)

315 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

318 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


321 *
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

322 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

323 
__c⁄°
 *
	`°r°r
 (__c⁄° *
__hay°ack
,

324 
__c⁄°
 *
__√edÀ
)

325 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__OPTIMIZE__


328 
__exã∫_Æways_ölöe
 *

329 
	`°r°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
Ë
__THROW


331  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

334 
__exã∫_Æways_ölöe
 
__c⁄°
 *

335 
	`°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
Ë
__THROW


337  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

340 
	}
}

342 *
	$°r°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

343 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

348 *
	$°πok
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
)

349 
__THROW
 
	`__n⁄nuŒ
 ((2));

350 
__END_NAMESPACE_STD


354 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

355 
__c⁄°
 *
__ª°ri˘
 
__dñim
,

356 **
__ª°ri˘
 
__ßve_±r
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

358 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


359 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, 
__c⁄°
 *__ª°ri˘ 
__dñim
,

360 **
__ª°ri˘
 
__ßve_±r
)

361 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

364 #ifde‡
__USE_GNU


366 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


367 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, 
__c⁄°
 *
__√edÀ
)

368 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

369 "C++" 
__c⁄°
 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
,

370 
__c⁄°
 *
__√edÀ
)

371 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

373 *
	$°rˇ£°r
 (
__c⁄°
 *
__hay°ack
, __c⁄° *
__√edÀ
)

374 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

378 #ifde‡
__USE_GNU


382 *
	$memmem
 (
__c⁄°
 *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

383 
__c⁄°
 *
__√edÀ
, 
size_t
 
__√edÀÀn
)

384 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3));

388 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

389 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

390 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

391 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

392 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

393 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

397 
__BEGIN_NAMESPACE_STD


399 
size_t
 
	$°æí
 (
__c⁄°
 *
__s
)

400 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

401 
__END_NAMESPACE_STD


403 #ifdef 
__USE_XOPEN2K8


406 
size_t
 
	$°∫Àn
 (
__c⁄°
 *
__°rög
, 
size_t
 
__maxÀn
)

407 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

411 
__BEGIN_NAMESPACE_STD


413 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

414 
__END_NAMESPACE_STD


415 #i‡
deföed
 
__USE_XOPEN2K
 || deföed 
__USE_MISC


423 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


426 #ifde‡
__REDIRECT_NTH


427 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

428 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

429 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2));

431 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

432 
__THROW
 
	`__n⁄nuŒ
 ((2));

433 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

438 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

443 #ifde‡
__USE_XOPEN2K8


445 *
	$°ªº‹_l
 (
__î∫um
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

451 
	$__bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

453 #ifde‡
__USE_BSD


455 
	$bc›y
 (
__c⁄°
 *
__§c
, *
__de°
, 
size_t
 
__n
)

456 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

459 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

462 
	$bcmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

463 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

466 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


469 *
	`ödex
 (*
__s
, 
__c
)

470 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

471 
__c⁄°
 *
	`ödex
 (__c⁄° *
__s
, 
__c
)

472 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

474 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


475 
__exã∫_Æways_ölöe
 *

476 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


478  
	`__buûtö_ödex
 (
__s
, 
__c
);

481 
__exã∫_Æways_ölöe
 
__c⁄°
 *

482 
	`ödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


484  
	`__buûtö_ödex
 (
__s
, 
__c
);

487 
	}
}

489 *
	$ödex
 (
__c⁄°
 *
__s
, 
__c
)

490 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

494 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


497 *
	`rödex
 (*
__s
, 
__c
)

498 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

499 
__c⁄°
 *
	`rödex
 (__c⁄° *
__s
, 
__c
)

500 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

502 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__CORRECT_ISO_CPP_STRINGS_H_PROTO


503 
__exã∫_Æways_ölöe
 *

504 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


506  
	`__buûtö_rödex
 (
__s
, 
__c
);

509 
__exã∫_Æways_ölöe
 
__c⁄°
 *

510 
	`rödex
 (
__c⁄°
 *
__s
, 
__c
Ë
__THROW


512  
	`__buûtö_rödex
 (
__s
, 
__c
);

515 
	}
}

517 *
	$rödex
 (
__c⁄°
 *
__s
, 
__c
)

518 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

523 
	$ffs
 (
__i
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

527 #ifdef 
__USE_GNU


528 
	$ff¶
 (
__l
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

529 #ifde‡
__GNUC__


530 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

531 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

536 
	$°rˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

537 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

540 
	$°∫ˇ£cmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
, 
size_t
 
__n
)

541 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

544 #ifdef 
__USE_GNU


547 
	$°rˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

548 
__loˇÀ_t
 
__loc
)

549 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

551 
	$°∫ˇ£cmp_l
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
,

552 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
)

553 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

556 #ifdef 
__USE_BSD


559 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

560 
__c⁄°
 *
__ª°ri˘
 
__dñim
)

561 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

564 #ifdef 
__USE_XOPEN2K8


566 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

569 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

571 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, 
__c⁄°
 *__ª°ri˘ 
__§c
)

572 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

576 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

577 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

578 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

580 
__c⁄°
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

581 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

584 #ifdef 
__USE_GNU


586 
	$°rvîscmp
 (
__c⁄°
 *
__s1
, __c⁄° *
__s2
)

587 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

590 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

593 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

595 #i‚de‡
ba£«me


600 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


601 "C++" *
	$ba£«me
 (*
__fûíame
)

602 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

603 "C++" 
__c⁄°
 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
)

604 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

606 *
	$ba£«me
 (
__c⁄°
 *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

612 #i‡
deföed
 
__GNUC__
 && __GNUC__ >= 2

613 #i‡
deföed
 
__OPTIMIZE__
 && !deföed 
__OPTIMIZE_SIZE__
 \

614 && !
deföed
 
__NO_INLINE__
 && !deföed 
__˝lu•lus


634 
	~<bôs/°rög.h
>

637 
	~<bôs/°rög2.h
>

640 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


642 
	~<bôs/°rög3.h
>

646 
__END_DECLS


	@/usr/include/time.h

23 #i‚def 
_TIME_H


25 #i‡(! 
deföed
 
__√ed_time_t
 && !deföed 
__√ed_˛ock_t
 && \

26 ! 
deföed
 
	g__√ed_time•ec
)

27 
	#_TIME_H
 1

	)

28 
	~<„©uªs.h
>

30 
	g__BEGIN_DECLS


34 #ifdef 
_TIME_H


36 
	#__√ed_size_t


	)

37 
	#__√ed_NULL


	)

38 
	~<°ddef.h
>

42 
	~<bôs/time.h
>

45 #i‡!
deföed
 
__STRICT_ANSI__
 && !deföed 
__USE_XOPEN2K


46 #i‚de‡
CLK_TCK


47 
	#CLK_TCK
 
CLOCKS_PER_SEC


	)

53 #i‡!
deföed
 
__˛ock_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_˛ock_t
)

54 
	#__˛ock_t_deföed
 1

	)

56 
	~<bôs/ty≥s.h
>

58 
__BEGIN_NAMESPACE_STD


60 
__˛ock_t
 
	t˛ock_t
;

61 
	g__END_NAMESPACE_STD


62 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


63 
	$__USING_NAMESPACE_STD
(
˛ock_t
)

67 #unde‡
__√ed_˛ock_t


69 #i‡!
deföed
 
__time_t_deföed
 && (deföed 
_TIME_H
 || deföed 
__√ed_time_t
)

70 
	#__time_t_deföed
 1

	)

72 
	~<bôs/ty≥s.h
>

74 
__BEGIN_NAMESPACE_STD


76 
__time_t
 
	ttime_t
;

77 
__END_NAMESPACE_STD


78 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC
 || deföed 
__USE_SVID


79 
	$__USING_NAMESPACE_STD
(
time_t
)

83 #unde‡
__√ed_time_t


85 #i‡!
deföed
 
__˛ockid_t_deföed
 && \

86 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_˛ockid_t
)

87 
	#__˛ockid_t_deföed
 1

	)

89 
	~<bôs/ty≥s.h
>

92 
__˛ockid_t
 
	t˛ockid_t
;

95 #unde‡
__˛ockid_time_t


97 #i‡!
deföed
 
__timî_t_deföed
 && \

98 ((
deföed
 
_TIME_H
 && deföed 
__USE_POSIX199309
Ë|| deföed 
__√ed_timî_t
)

99 
	#__timî_t_deföed
 1

	)

101 
	~<bôs/ty≥s.h
>

104 
__timî_t
 
	ttimî_t
;

107 #unde‡
__√ed_timî_t


110 #i‡!
deföed
 
__time•ec_deföed
 && \

111 ((
deföed
 
_TIME_H
 && \

112 (
deföed
 
__USE_POSIX199309
 || deföed 
__USE_MISC
)) || \

113 
deföed
 
__√ed_time•ec
)

114 
	#__time•ec_deföed
 1

	)

116 
	~<bôs/ty≥s.h
>

120 
	stime•ec


122 
__time_t
 
tv_£c
;

123 
tv_n£c
;

127 #unde‡
__√ed_time•ec


130 #ifdef 
_TIME_H


131 
__BEGIN_NAMESPACE_STD


133 
	stm


135 
tm_£c
;

136 
tm_mö
;

137 
tm_hour
;

138 
tm_mday
;

139 
tm_m⁄
;

140 
tm_yór
;

141 
tm_wday
;

142 
tm_yday
;

143 
tm_isd°
;

145 #ifdef 
__USE_BSD


146 
tm_gmtoff
;

147 
__c⁄°
 *
tm_z⁄e
;

149 
__tm_gmtoff
;

150 
__c⁄°
 *
__tm_z⁄e
;

153 
__END_NAMESPACE_STD


154 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_POSIX
 || deföed 
__USE_MISC


155 
	$__USING_NAMESPACE_STD
(
tm
)

159 #ifde‡
__USE_POSIX199309


161 
	sôimî•ec


163 
time•ec
 
ô_öãrvÆ
;

164 
time•ec
 
ô_vÆue
;

168 
sigevít
;

172 #ifde‡
__USE_XOPEN2K


173 #i‚de‡
__pid_t_deföed


174 
__pid_t
 
	tpid_t
;

175 
	#__pid_t_deföed


	)

180 
__BEGIN_NAMESPACE_STD


183 
˛ock_t
 
	$˛ock
 (Ë
__THROW
;

186 
time_t
 
	$time
 (
time_t
 *
__timî
Ë
__THROW
;

189 
	$dif·ime
 (
time_t
 
__time1
,Åime_à
__time0
)

190 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

193 
time_t
 
	$mktime
 (
tm
 *
__ç
Ë
__THROW
;

199 
size_t
 
	$°r·ime
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

200 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

201 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

202 
__END_NAMESPACE_STD


204 #ifde‡
__USE_XOPEN


207 *
	$°Ωtime
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

208 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
)

209 
__THROW
;

212 #ifde‡
__USE_XOPEN2K8


215 
	~<xloˇÀ.h
>

217 
size_t
 
	$°r·ime_l
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

218 
__c⁄°
 *
__ª°ri˘
 
__f‹m©
,

219 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

220 
__loˇÀ_t
 
__loc
Ë
__THROW
;

223 #ifde‡
__USE_GNU


224 *
	$°Ωtime_l
 (
__c⁄°
 *
__ª°ri˘
 
__s
,

225 
__c⁄°
 *
__ª°ri˘
 
__fmt
, 
tm
 *
__ç
,

226 
__loˇÀ_t
 
__loc
Ë
__THROW
;

230 
__BEGIN_NAMESPACE_STD


233 
tm
 *
	$gmtime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

237 
tm
 *
	$loˇ…ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

238 
__END_NAMESPACE_STD


240 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


243 
tm
 *
	$gmtime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

244 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

248 
tm
 *
	$loˇ…ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

249 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

252 
__BEGIN_NAMESPACE_STD


255 *
	$as˘ime
 (
__c⁄°
 
tm
 *
__ç
Ë
__THROW
;

258 *
	$˘ime
 (
__c⁄°
 
time_t
 *
__timî
Ë
__THROW
;

259 
__END_NAMESPACE_STD


261 #i‡
deföed
 
__USE_POSIX
 || deföed 
__USE_MISC


266 *
	$as˘ime_r
 (
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

267 *
__ª°ri˘
 
__buf
Ë
__THROW
;

270 *
	$˘ime_r
 (
__c⁄°
 
time_t
 *
__ª°ri˘
 
__timî
,

271 *
__ª°ri˘
 
__buf
Ë
__THROW
;

276 *
__tz«me
[2];

277 
__daylight
;

278 
__timez⁄e
;

281 #ifdef 
__USE_POSIX


283 *
tz«me
[2];

287 
	$tz£t
 (Ë
__THROW
;

290 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_XOPEN


291 
daylight
;

292 
timez⁄e
;

295 #ifde‡
__USE_SVID


298 
	$°ime
 (
__c⁄°
 
time_t
 *
__whí
Ë
__THROW
;

304 
	#__i¶óp
(
yór
) \

305 ((
yór
Ë% 4 =0 && ((yórË% 100 !0 || (yórË% 400 =0))

	)

308 #ifde‡
__USE_MISC


313 
time_t
 
	$timegm
 (
tm
 *
__ç
Ë
__THROW
;

316 
time_t
 
	$timñoˇl
 (
tm
 *
__ç
Ë
__THROW
;

319 
	$dysize
 (
__yór
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

323 #ifde‡
__USE_POSIX199309


328 
	`«no¶ìp
 (
__c⁄°
 
time•ec
 *
__ªque°ed_time
,

329 
time•ec
 *
__ªmaöög
);

333 
	$˛ock_gëªs
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ªs
Ë
__THROW
;

336 
	$˛ock_gëtime
 (
˛ockid_t
 
__˛ock_id
, 
time•ec
 *
__ç
Ë
__THROW
;

339 
	$˛ock_£âime
 (
˛ockid_t
 
__˛ock_id
, 
__c⁄°
 
time•ec
 *
__ç
)

340 
__THROW
;

342 #ifde‡
__USE_XOPEN2K


347 
	`˛ock_«no¶ìp
 (
˛ockid_t
 
__˛ock_id
, 
__Êags
,

348 
__c⁄°
 
time•ec
 *
__ªq
,

349 
time•ec
 *
__ªm
);

352 
	$˛ock_gë˝u˛ockid
 (
pid_t
 
__pid
, 
˛ockid_t
 *
__˛ock_id
Ë
__THROW
;

357 
	$timî_¸óã
 (
˛ockid_t
 
__˛ock_id
,

358 
sigevít
 *
__ª°ri˘
 
__evp
,

359 
timî_t
 *
__ª°ri˘
 
__timîid
Ë
__THROW
;

362 
	$timî_dñëe
 (
timî_t
 
__timîid
Ë
__THROW
;

365 
	$timî_£âime
 (
timî_t
 
__timîid
, 
__Êags
,

366 
__c⁄°
 
ôimî•ec
 *
__ª°ri˘
 
__vÆue
,

367 
ôimî•ec
 *
__ª°ri˘
 
__ovÆue
Ë
__THROW
;

370 
	$timî_gëtime
 (
timî_t
 
__timîid
, 
ôimî•ec
 *
__vÆue
)

371 
__THROW
;

374 
	$timî_gëovîrun
 (
timî_t
 
__timîid
Ë
__THROW
;

378 #ifde‡
__USE_XOPEN_EXTENDED


390 
gëd©e_îr
;

399 
tm
 *
	`gëd©e
 (
__c⁄°
 *
__°rög
);

402 #ifde‡
__USE_GNU


413 
	`gëd©e_r
 (
__c⁄°
 *
__ª°ri˘
 
__°rög
,

414 
tm
 *
__ª°ri˘
 
__ªsbuÂ
);

417 
__END_DECLS


	@/usr/include/unistd.h

23 #i‚def 
_UNISTD_H


24 
	#_UNISTD_H
 1

	)

26 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


33 #ifde‡
__USE_XOPEN2K8


35 
	#_POSIX_VERSION
 200809L

	)

36 #ñi‡
deföed
 
__USE_XOPEN2K


38 
	#_POSIX_VERSION
 200112L

	)

39 #ñi‡
deföed
 
__USE_POSIX199506


41 
	#_POSIX_VERSION
 199506L

	)

42 #ñi‡
deföed
 
__USE_POSIX199309


44 
	#_POSIX_VERSION
 199309L

	)

47 
	#_POSIX_VERSION
 199009L

	)

53 #ifde‡
__USE_XOPEN2K8


54 
	#__POSIX2_THIS_VERSION
 200809L

	)

56 #ñi‡
deföed
 
__USE_XOPEN2K


58 
	#__POSIX2_THIS_VERSION
 200112L

	)

59 #ñi‡
deföed
 
__USE_POSIX199506


61 
	#__POSIX2_THIS_VERSION
 199506L

	)

64 
	#__POSIX2_THIS_VERSION
 199209L

	)

68 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

72 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

76 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

80 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

84 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

87 #ifde‡
__USE_XOPEN2K8


88 
	#_XOPEN_VERSION
 700

	)

89 #ñi‡
deföed
 
__USE_XOPEN2K


90 
	#_XOPEN_VERSION
 600

	)

91 #ñi‡
deföed
 
__USE_UNIX98


92 
	#_XOPEN_VERSION
 500

	)

94 
	#_XOPEN_VERSION
 4

	)

98 
	#_XOPEN_XCU_VERSION
 4

	)

101 
	#_XOPEN_XPG2
 1

	)

102 
	#_XOPEN_XPG3
 1

	)

103 
	#_XOPEN_XPG4
 1

	)

106 
	#_XOPEN_UNIX
 1

	)

109 
	#_XOPEN_CRYPT
 1

	)

113 
	#_XOPEN_ENH_I18N
 1

	)

116 
	#_XOPEN_LEGACY
 1

	)

203 
	~<bôs/posix_›t.h
>

206 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


207 
	~<bôs/ívú⁄míts.h
>

211 
	#STDIN_FILENO
 0

	)

212 
	#STDOUT_FILENO
 1

	)

213 
	#STDERR_FILENO
 2

	)

218 
	~<bôs/ty≥s.h
>

220 #i‚def 
__ssize_t_deföed


221 
__ssize_t
 
	tssize_t
;

222 
	#__ssize_t_deföed


	)

225 
	#__√ed_size_t


	)

226 
	#__√ed_NULL


	)

227 
	~<°ddef.h
>

229 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


232 #i‚de‡
__gid_t_deföed


233 
__gid_t
 
	tgid_t
;

234 
	#__gid_t_deföed


	)

237 #i‚de‡
__uid_t_deföed


238 
__uid_t
 
	tuid_t
;

239 
	#__uid_t_deföed


	)

242 #i‚de‡
__off_t_deföed


243 #i‚de‡
__USE_FILE_OFFSET64


244 
__off_t
 
	toff_t
;

246 
__off64_t
 
	toff_t
;

248 
	#__off_t_deföed


	)

250 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


251 
__off64_t
 
	toff64_t
;

252 
	#__off64_t_deföed


	)

255 #i‚de‡
__u£c⁄ds_t_deföed


256 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

257 
	#__u£c⁄ds_t_deföed


	)

260 #i‚de‡
__pid_t_deföed


261 
__pid_t
 
	tpid_t
;

262 
	#__pid_t_deföed


	)

266 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


267 #i‚de‡
__öçå_t_deföed


268 
__öçå_t
 
	töçå_t
;

269 
	#__öçå_t_deföed


	)

273 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN


274 #i‚de‡
__sockÀn_t_deföed


275 
__sockÀn_t
 
	tsockÀn_t
;

276 
	#__sockÀn_t_deföed


	)

282 
	#R_OK
 4

	)

283 
	#W_OK
 2

	)

284 
	#X_OK
 1

	)

285 
	#F_OK
 0

	)

288 
	$ac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

290 #ifde‡
__USE_GNU


293 
	$euidac˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1));

297 
	$óc˚ss
 (
__c⁄°
 *
__«me
, 
__ty≥
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1));

301 #ifde‡
__USE_ATFILE


305 
	$Ác˚sßt
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__ty≥
, 
__Êag
)

306 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

311 #i‚def 
_STDIO_H


312 
	#SEEK_SET
 0

	)

313 
	#SEEK_CUR
 1

	)

314 
	#SEEK_END
 2

	)

315 #ifde‡
__USE_GNU


316 
	#SEEK_DATA
 3

	)

317 
	#SEEK_HOLE
 4

	)

321 #i‡
deföed
 
__USE_BSD
 && !deföed 
L_SET


323 
	#L_SET
 
SEEK_SET


	)

324 
	#L_INCR
 
SEEK_CUR


	)

325 
	#L_XTND
 
SEEK_END


	)

334 #i‚de‡
__USE_FILE_OFFSET64


335 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

337 #ifde‡
__REDIRECT_NTH


338 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

339 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

340 
l£ek64
);

342 
	#l£ek
 
l£ek64


	)

345 #ifde‡
__USE_LARGEFILE64


346 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

347 
__THROW
;

354 
	`˛o£
 (
__fd
);

361 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur
;

367 
ssize_t
 
	$wrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
Ë
__wur
;

369 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


370 #i‚de‡
__USE_FILE_OFFSET64


377 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

378 
__off_t
 
__off£t
Ë
__wur
;

385 
ssize_t
 
	$pwrôe
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

386 
__off_t
 
__off£t
Ë
__wur
;

388 #ifde‡
__REDIRECT


389 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off64_t
 
__off£t
),

391 
¥ód64
Ë
__wur
;

392 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, 
__c⁄°
 *
__buf
,

393 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

394 
pwrôe64
Ë
__wur
;

396 
	#¥ód
 
¥ód64


	)

397 
	#pwrôe
 
pwrôe64


	)

401 #ifde‡
__USE_LARGEFILE64


405 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

406 
__off64_t
 
__off£t
Ë
__wur
;

409 
ssize_t
 
	$pwrôe64
 (
__fd
, 
__c⁄°
 *
__buf
, 
size_t
 
__n
,

410 
__off64_t
 
__off£t
Ë
__wur
;

418 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

420 #ifde‡
__USE_GNU


423 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

433 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

445 
	`¶ìp
 (
__£c⁄ds
);

447 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

448 || 
deföed
 
__USE_BSD


453 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

454 
__THROW
;

461 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

470 
	`∑u£
 ();

474 
	$chown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

475 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

477 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


479 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

484 
	$lchown
 (
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

485 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

489 #ifde‡
__USE_ATFILE


492 
	$fchow«t
 (
__fd
, 
__c⁄°
 *
__fûe
, 
__uid_t
 
__ow√r
,

493 
__gid_t
 
__group
, 
__Êag
)

494 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

498 
	$chdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

500 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


502 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

512 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

514 #ifdef 
__USE_GNU


518 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

521 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

522 || 
deföed
 
__USE_BSD


526 *
	$gëwd
 (*
__buf
)

527 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur
;

532 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

535 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

537 #ifde‡
__USE_GNU


540 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

544 **
__ívú⁄
;

545 #ifde‡
__USE_GNU


546 **
ívú⁄
;

552 
	$execve
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[],

553 *
__c⁄°
 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

555 #ifde‡
__USE_XOPEN2K8


558 
	$„xecve
 (
__fd
, *
__c⁄°
 
__¨gv
[], *__c⁄° 
__ívp
[])

559 
__THROW
 
	`__n⁄nuŒ
 ((2));

564 
	$execv
 (
__c⁄°
 *
__∑th
, *__c⁄° 
__¨gv
[])

565 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

569 
	$exe˛e
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

570 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

574 
	$exe˛
 (
__c⁄°
 *
__∑th
, __c⁄° *
__¨g
, ...)

575 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

579 
	$execvp
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[])

580 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

585 
	$exe˛p
 (
__c⁄°
 *
__fûe
, __c⁄° *
__¨g
, ...)

586 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

588 #ifde‡
__USE_GNU


591 
	$execv≥
 (
__c⁄°
 *
__fûe
, *__c⁄° 
__¨gv
[],

592 *
__c⁄°
 
__ívp
[])

593 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

597 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


599 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

604 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

610 
	~<bôs/c⁄‚ame.h
>

613 
	$∑thc⁄f
 (
__c⁄°
 *
__∑th
, 
__«me
)

614 
__THROW
 
	`__n⁄nuŒ
 ((1));

617 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

620 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

622 #ifdef 
__USE_POSIX2


624 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW
;

629 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

632 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

636 #i‚de‡
__FAVOR_BSD


637 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

639 #ifde‡
__REDIRECT_NTH


640 
__pid_t
 
	`__REDIRECT_NTH
 (
gëpgΩ
, (__pid_à
__pid
), 
__gëpgid
);

642 
	#gëpgΩ
 
__gëpgid


	)

647 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

648 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


649 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

656 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

658 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


669 #i‚de‡
__FAVOR_BSD


673 
	$£çgΩ
 (Ë
__THROW
;

678 #ifde‡
__REDIRECT_NTH


679 
	`__REDIRECT_NTH
 (
£çgΩ
, (
__pid_t
 
__pid
, __pid_à
__pgΩ
), 
£çgid
);

681 
	#£çgΩ
 
£çgid


	)

690 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

692 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

698 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

701 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

704 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

707 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

712 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur
;

714 #ifdef 
__USE_GNU


716 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

723 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
;

725 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


728 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
;

731 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


733 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
;

740 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
;

742 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


745 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
;

748 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN2K


750 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
;

753 #ifde‡
__USE_GNU


756 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

757 
__THROW
;

761 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

762 
__THROW
;

766 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

767 
__THROW
;

771 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

772 
__THROW
;

779 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

781 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

782 || 
deföed
 
__USE_BSD


787 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

793 *
	$ây«me
 (
__fd
Ë
__THROW
;

797 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

798 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

802 
	$ißây
 (
__fd
Ë
__THROW
;

804 #i‡
deföed
 
__USE_BSD
 \

805 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_UNIX98
)

808 
	$ây¶Ÿ
 (Ë
__THROW
;

813 
	$lök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

814 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

816 #ifde‡
__USE_ATFILE


819 
	$lök©
 (
__‰omfd
, 
__c⁄°
 *
__‰om
, 
__tofd
,

820 
__c⁄°
 *
__to
, 
__Êags
)

821 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

824 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


826 
	$symlök
 (
__c⁄°
 *
__‰om
, __c⁄° *
__to
)

827 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

832 
ssize_t
 
	$ªadlök
 (
__c⁄°
 *
__ª°ri˘
 
__∑th
,

833 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

834 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

837 #ifde‡
__USE_ATFILE


839 
	$symlök©
 (
__c⁄°
 *
__‰om
, 
__tofd
,

840 
__c⁄°
 *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

843 
ssize_t
 
	$ªadlök©
 (
__fd
, 
__c⁄°
 *
__ª°ri˘
 
__∑th
,

844 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

845 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur
;

849 
	$u∆ök
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

851 #ifde‡
__USE_ATFILE


853 
	$u∆ök©
 (
__fd
, 
__c⁄°
 *
__«me
, 
__Êag
)

854 
__THROW
 
	`__n⁄nuŒ
 ((2));

858 
	$rmdú
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

862 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

865 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

872 *
	`gëlogö
 ();

873 #i‡
deföed
 
__USE_REENTRANT
 || deföed 
__USE_POSIX199506


880 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1));

883 #ifdef 
__USE_BSD


885 
	$£éogö
 (
__c⁄°
 *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

889 #ifdef 
__USE_POSIX2


893 
	#__√ed_gë›t


	)

894 
	~<gë›t.h
>

898 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


902 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

906 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_UNIX98
)

909 
	$£tho°«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

910 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

914 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

920 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

921 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

922 
	$£tdomaö«me
 (
__c⁄°
 *
__«me
, 
size_t
 
__Àn
)

923 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

929 
	$vh™gup
 (Ë
__THROW
;

932 
	$ªvoke
 (
__c⁄°
 *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

940 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

941 
size_t
 
__off£t
, 
__sˇÀ
)

942 
__THROW
 
	`__n⁄nuŒ
 ((1));

948 
	$ac˘
 (
__c⁄°
 *
__«me
Ë
__THROW
;

952 *
	$gëu£rshñl
 (Ë
__THROW
;

953 
	$ídu£rshñl
 (Ë
__THROW
;

954 
	$£tu£rshñl
 (Ë
__THROW
;

960 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

964 #i‡
deföed
 
__USE_BSD
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

967 
	$chroŸ
 (
__c⁄°
 *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

971 *
	$gë∑ss
 (
__c⁄°
 *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

975 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


980 
	`fsync
 (
__fd
);

984 #ifde‡
__USE_GNU


987 
	$syncfs
 (
__fd
Ë
__THROW
;

991 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED


994 
	`gëho°id
 ();

997 
	$sync
 (Ë
__THROW
;

1000 #i‡
deföed
 
__USE_BSD
 || !deföed 
__USE_XOPEN2K


1003 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1008 
	$gëdèbÀsize
 (Ë
__THROW
;

1014 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1017 #i‚de‡
__USE_FILE_OFFSET64


1018 
	$åunˇã
 (
__c⁄°
 *
__fûe
, 
__off_t
 
__Àngth
)

1019 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1021 #ifde‡
__REDIRECT_NTH


1022 
	`__REDIRECT_NTH
 (
åunˇã
,

1023 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
),

1024 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1026 
	#åunˇã
 
åunˇã64


	)

1029 #ifde‡
__USE_LARGEFILE64


1030 
	$åunˇã64
 (
__c⁄°
 *
__fûe
, 
__off64_t
 
__Àngth
)

1031 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1036 #i‡
deföed
 
__USE_BSD
 || deföed 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1039 #i‚de‡
__USE_FILE_OFFSET64


1040 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1042 #ifde‡
__REDIRECT_NTH


1043 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1044 
·runˇã64
Ë
__wur
;

1046 
	#·runˇã
 
·runˇã64


	)

1049 #ifde‡
__USE_LARGEFILE64


1050 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1056 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1057 || 
deföed
 
__USE_MISC


1061 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1067 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1071 #ifde‡
__USE_MISC


1082 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1087 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1099 
	#F_ULOCK
 0

	)

1100 
	#F_LOCK
 1

	)

1101 
	#F_TLOCK
 2

	)

1102 
	#F_TEST
 3

	)

1104 #i‚de‡
__USE_FILE_OFFSET64


1105 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1107 #ifde‡
__REDIRECT


1108 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1109 
lockf64
Ë
__wur
;

1111 
	#lockf
 
lockf64


	)

1114 #ifde‡
__USE_LARGEFILE64


1115 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1120 #ifde‡
__USE_GNU


1125 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1126 (
__exãnsi⁄__
 \

1127 ({ 
__ªsu…
; \

1128 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1129 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1130 
__ªsu…
; 
	}
}))

	)

1133 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1136 
fd©async
 (
__fûdes
);

1142 #ifdef 
__USE_XOPEN


1144 *
	$¸y±
 (
__c⁄°
 *
__key
, __c⁄° *
__ß…
)

1145 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1149 
	$í¸y±
 (*
__libc_block
, 
__edÊag
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

1156 
	$swab
 (
__c⁄°
 *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1157 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


1165 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1170 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


1171 
	~<bôs/uni°d.h
>

1174 
__END_DECLS


	@/usr/include/xlocale.h

21 #i‚de‡
_XLOCALE_H


22 
	#_XLOCALE_H
 1

	)

28 
	s__loˇÀ_°ru˘


31 
__loˇÀ_d©a
 *
	m__loˇÀs
[13];

34 c⁄° *
	m__˘y≥_b
;

35 c⁄° *
	m__˘y≥_tﬁowî
;

36 c⁄° *
	m__˘y≥_touµî
;

39 c⁄° *
	m__«mes
[13];

40 } *
	t__loˇÀ_t
;

43 
__loˇÀ_t
 
	tloˇÀ_t
;

	@/usr/include/zlib.h

31 #i‚de‡
ZLIB_H


32 
	#ZLIB_H


	)

34 
	~"zc⁄f.h
"

36 #ifde‡
__˝lu•lus


40 
	#ZLIB_VERSION
 "1.2.3.4"

	)

41 
	#ZLIB_VERNUM
 0x1234

	)

42 
	#ZLIB_VER_MAJOR
 1

	)

43 
	#ZLIB_VER_MINOR
 2

	)

44 
	#ZLIB_VER_REVISION
 3

	)

80 
voidpf
 (*
	tÆloc_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, 
	tuI¡
 
	tôems
, uI¡ 
	tsize
));

81 (*
‰ì_func
Ë
	tOF
((
	tvoidpf
 
	t›aque
, voidp‡
	taddªss
));

83 
öã∫Æ_°©e
;

85 
	sz_°ªam_s
 {

86 
Byãf
 *
√xt_ö
;

87 
uI¡
 
avaû_ö
;

88 
uL⁄g
 
tŸÆ_ö
;

90 
Byãf
 *
√xt_out
;

91 
uI¡
 
avaû_out
;

92 
uL⁄g
 
tŸÆ_out
;

94 *
msg
;

95 
öã∫Æ_°©e
 
FAR
 *
°©e
;

97 
Æloc_func
 
zÆloc
;

98 
‰ì_func
 
z‰ì
;

99 
voidpf
 
›aque
;

101 
d©a_ty≥
;

102 
uL⁄g
 
adÀr
;

103 
uL⁄g
 
ª£rved
;

104 } 
	tz_°ªam
;

106 
z_°ªam
 
	tFAR
 *
	tz_°ªamp
;

112 
	sgz_hódî_s
 {

113 
ãxt
;

114 
uL⁄g
 
time
;

115 
xÊags
;

116 
os
;

117 
Byãf
 *
exåa
;

118 
uI¡
 
exåa_Àn
;

119 
uI¡
 
exåa_max
;

120 
Byãf
 *
«me
;

121 
uI¡
 
«me_max
;

122 
Byãf
 *
commít
;

123 
uI¡
 
comm_max
;

124 
h¸c
;

125 
d⁄e
;

127 } 
	tgz_hódî
;

129 
gz_hódî
 
	tFAR
 *
	tgz_hódîp
;

165 
	#Z_NO_FLUSH
 0

	)

166 
	#Z_PARTIAL_FLUSH
 1

	)

167 
	#Z_SYNC_FLUSH
 2

	)

168 
	#Z_FULL_FLUSH
 3

	)

169 
	#Z_FINISH
 4

	)

170 
	#Z_BLOCK
 5

	)

171 
	#Z_TREES
 6

	)

174 
	#Z_OK
 0

	)

175 
	#Z_STREAM_END
 1

	)

176 
	#Z_NEED_DICT
 2

	)

177 
	#Z_ERRNO
 (-1)

	)

178 
	#Z_STREAM_ERROR
 (-2)

	)

179 
	#Z_DATA_ERROR
 (-3)

	)

180 
	#Z_MEM_ERROR
 (-4)

	)

181 
	#Z_BUF_ERROR
 (-5)

	)

182 
	#Z_VERSION_ERROR
 (-6)

	)

187 
	#Z_NO_COMPRESSION
 0

	)

188 
	#Z_BEST_SPEED
 1

	)

189 
	#Z_BEST_COMPRESSION
 9

	)

190 
	#Z_DEFAULT_COMPRESSION
 (-1)

	)

193 
	#Z_FILTERED
 1

	)

194 
	#Z_HUFFMAN_ONLY
 2

	)

195 
	#Z_RLE
 3

	)

196 
	#Z_FIXED
 4

	)

197 
	#Z_DEFAULT_STRATEGY
 0

	)

200 
	#Z_BINARY
 0

	)

201 
	#Z_TEXT
 1

	)

202 
	#Z_ASCII
 
Z_TEXT


	)

203 
	#Z_UNKNOWN
 2

	)

206 
	#Z_DEFLATED
 8

	)

209 
	#Z_NULL
 0

	)

211 
	#zlib_vîsi⁄
 
	`zlibVîsi⁄
()

	)

216 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zlibVîsi⁄
 
OF
(());

246 
ZEXTERN
 
ZEXPORT
 
deÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

351 
ZEXTERN
 
ZEXPORT
 
deÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

390 
ZEXTERN
 
ZEXPORT
 
öÊ©e
 
OF
((
z_°ªamp
 
°rm
, 
Êush
));

498 
ZEXTERN
 
ZEXPORT
 
öÊ©eEnd
 
OF
((
z_°ªamp
 
°rm
));

574 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

575 c⁄° 
Byãf
 *
di˘i⁄¨y
,

576 
uI¡
 
di˘Lígth
));

613 
ZEXTERN
 
ZEXPORT
 
deÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

614 
z_°ªamp
 
sour˚
));

631 
ZEXTERN
 
ZEXPORT
 
deÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

642 
ZEXTERN
 
ZEXPORT
 
deÊ©eP¨ams
 
OF
((
z_°ªamp
 
°rm
,

643 
Àvñ
,

644 
°øãgy
));

663 
ZEXTERN
 
ZEXPORT
 
deÊ©eTu√
 
OF
((
z_°ªamp
 
°rm
,

664 
good_Àngth
,

665 
max_œzy
,

666 
ni˚_Àngth
,

667 
max_chaö
));

680 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
deÊ©eBound
 
OF
((
z_°ªamp
 
°rm
,

681 
uL⁄g
 
sour˚Lí
));

690 
ZEXTERN
 
ZEXPORT
 
deÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

691 
bôs
,

692 
vÆue
));

706 
ZEXTERN
 
ZEXPORT
 
deÊ©eSëHódî
 
OF
((
z_°ªamp
 
°rm
,

707 
gz_hódîp
 
hód
));

777 
ZEXTERN
 
ZEXPORT
 
öÊ©eSëDi˘i⁄¨y
 
OF
((
z_°ªamp
 
°rm
,

778 c⁄° 
Byãf
 *
di˘i⁄¨y
,

779 
uI¡
 
di˘Lígth
));

799 
ZEXTERN
 
ZEXPORT
 
öÊ©eSync
 
OF
((
z_°ªamp
 
°rm
));

814 
ZEXTERN
 
ZEXPORT
 
öÊ©eC›y
 
OF
((
z_°ªamp
 
de°
,

815 
z_°ªamp
 
sour˚
));

830 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t
 
OF
((
z_°ªamp
 
°rm
));

840 
ZEXTERN
 
ZEXPORT
 
öÊ©eRe£t2
 
OF
((
z_°ªamp
 
°rm
,

841 
wödowBôs
));

852 
ZEXTERN
 
ZEXPORT
 
öÊ©ePrime
 
OF
((
z_°ªamp
 
°rm
,

853 
bôs
,

854 
vÆue
));

873 
ZEXTERN
 
ZEXPORT
 
öÊ©eM¨k
 
OF
((
z_°ªamp
 
°rm
));

901 
ZEXTERN
 
ZEXPORT
 
öÊ©eGëHódî
 
OF
((
z_°ªamp
 
°rm
,

902 
gz_hódîp
 
hód
));

963 (*
ö_func
Ë
	tOF
((
	tFAR
 *, FAR * FAR *));

964 (*
out_func
Ë
	tOF
((
	tFAR
 *, FAR *, ));

966 
ZEXTERN
 
ZEXPORT
 
öÊ©eBack
 
OF
((
z_°ªamp
 
°rm
,

967 
ö_func
 
ö
, 
FAR
 *
ö_desc
,

968 
out_func
 
out
, 
FAR
 *
out_desc
));

1035 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackEnd
 
OF
((
z_°ªamp
 
°rm
));

1043 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
zlibCompûeFœgs
 
OF
(());

1095 
ZEXTERN
 
ZEXPORT
 
com¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1096 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1110 
ZEXTERN
 
ZEXPORT
 
com¥ess2
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1111 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
,

1112 
Àvñ
));

1126 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
com¥essBound
 
OF
((uL⁄g 
sour˚Lí
));

1133 
ZEXTERN
 
ZEXPORT
 
uncom¥ess
 
OF
((
Byãf
 *
de°
, 
uL⁄gf
 *
de°Lí
,

1134 c⁄° 
Byãf
 *
sour˚
, 
uL⁄g
 
sour˚Lí
));

1152 
voidp
 
	tgzFûe
;

1172 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gzd›í
 
OF
((
fd
, c⁄° *
mode
));

1185 
ZEXTERN
 
ZEXPORT
 
gz£ç¨ams
 
OF
((
gzFûe
 
fûe
, 
Àvñ
, 
°øãgy
));

1193 
ZEXTERN
 
ZEXPORT
 
gzªad
 
OF
((
gzFûe
 
fûe
, 
voidp
 
buf
, 
Àn
));

1201 
ZEXTERN
 
ZEXPORT
 
gzwrôe
 
OF
((
gzFûe
 
fûe
,

1202 
voidpc
 
buf
, 
Àn
));

1209 
ZEXTERN
 
ZEXPORTVA
 
gz¥ötf
 
OF
((
gzFûe
 
fûe
, c⁄° *
f‹m©
, ...));

1222 
ZEXTERN
 
ZEXPORT
 
gzputs
 
OF
((
gzFûe
 
fûe
, c⁄° *
s
));

1229 
ZEXTERN
 * 
ZEXPORT
 
gzgës
 
OF
((
gzFûe
 
fûe
, *
buf
, 
Àn
));

1238 
ZEXTERN
 
ZEXPORT
 
gzputc
 
OF
((
gzFûe
 
fûe
, 
c
));

1244 
ZEXTERN
 
ZEXPORT
 
gzgëc
 
OF
((
gzFûe
 
fûe
));

1250 
ZEXTERN
 
ZEXPORT
 
gzungëc
 
OF
((
c
, 
gzFûe
 
fûe
));

1260 
ZEXTERN
 
ZEXPORT
 
gzÊush
 
OF
((
gzFûe
 
fûe
, 
Êush
));

1289 
ZEXTERN
 
ZEXPORT
 
gzªwöd
 
OF
((
gzFûe
 
fûe
));

1306 
ZEXTERN
 
ZEXPORT
 
gzeof
 
OF
((
gzFûe
 
fûe
));

1312 
ZEXTERN
 
ZEXPORT
 
gzdúe˘
 
OF
((
gzFûe
 
fûe
));

1318 
ZEXTERN
 
ZEXPORT
 
gz˛o£
 
OF
((
gzFûe
 
fûe
));

1326 
ZEXTERN
 c⁄° * 
ZEXPORT
 
gzîr‹
 
OF
((
gzFûe
 
fûe
, *
î∫um
));

1338 
ZEXTERN
 
ZEXPORT
 
gz˛óªº
 
OF
((
gzFûe
 
fûe
));

1353 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32
 
OF
((uL⁄g 
adÀr
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1379 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32
 
OF
((uL⁄g 
¸c
, c⁄° 
Byãf
 *
buf
, 
uI¡
 
Àn
));

1411 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
,

1412 c⁄° *
vîsi⁄
, 
°ªam_size
));

1413 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô_
 
OF
((
z_°ªamp
 
°rm
,

1414 c⁄° *
vîsi⁄
, 
°ªam_size
));

1415 
ZEXTERN
 
ZEXPORT
 
deÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
Àvñ
, 
mëhod
,

1416 
wödowBôs
, 
memLevñ
,

1417 
°øãgy
, c⁄° *
vîsi⁄
,

1418 
°ªam_size
));

1419 
ZEXTERN
 
ZEXPORT
 
öÊ©eInô2_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1420 c⁄° *
vîsi⁄
, 
°ªam_size
));

1421 
ZEXTERN
 
ZEXPORT
 
öÊ©eBackInô_
 
OF
((
z_°ªamp
 
°rm
, 
wödowBôs
,

1422 
FAR
 *
wödow
,

1423 c⁄° *
vîsi⁄
,

1424 
°ªam_size
));

1425 
	#deÊ©eInô
(
°rm
, 
Àvñ
) \

1426 
	`deÊ©eInô_
((
°rm
), (
Àvñ
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1427 
	#öÊ©eInô
(
°rm
) \

1428 
	`öÊ©eInô_
((
°rm
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1429 
	#deÊ©eInô2
(
°rm
, 
Àvñ
, 
mëhod
, 
wödowBôs
, 
memLevñ
, 
°øãgy
) \

1430 
	`deÊ©eInô2_
((
°rm
),(
Àvñ
),(
mëhod
),(
wödowBôs
),(
memLevñ
),\

1431 (
°øãgy
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1432 
	#öÊ©eInô2
(
°rm
, 
wödowBôs
) \

1433 
	`öÊ©eInô2_
((
°rm
), (
wödowBôs
), 
ZLIB_VERSION
, (
z_°ªam
))

	)

1434 
	#öÊ©eBackInô
(
°rm
, 
wödowBôs
, 
wödow
) \

1435 
	`öÊ©eBackInô_
((
°rm
), (
wödowBôs
), (
wödow
), \

1436 
ZLIB_VERSION
, (
z_°ªam
))

	)

1438 #i‡
deföed
(
_LARGEFILE64_SOURCE
)

1439 
	#z_off64_t
 
off64_t


	)

1441 #i‡
_FILE_OFFSET_BITS
 == 64

1442 
	#z_off64_t
 
off_t


	)

1446 #i‡
deföed
(
_LARGEFILE64_SOURCE
Ë|| 
_FILE_OFFSET_BITS
 == 64

1447 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1448 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, z_off64_t, ));

1449 
ZEXTERN
 
z_off64_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1450 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1451 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
z_off64_t
));

1454 #i‡!
deföed
(
ZLIB_INTERNAL
Ë&& 
_FILE_OFFSET_BITS
 == 64

1455 
	#gz›í
 
gz›í64


	)

1456 
	#gz£ek
 
gz£ek64


	)

1457 
	#gzãŒ
 
gzãŒ64


	)

1458 
	#adÀr32_comböe
 
adÀr32_comböe64


	)

1459 
	#¸c32_comböe
 
¸c32_comböe64


	)

1460 #i‚de‡
_LARGEFILE64_SOURCE


1461 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í64
 
OF
((const *, const *));

1462 
ZEXTERN
 
off_t
 
ZEXPORT
 
gz£ek64
 
OF
((
gzFûe
, off_t, ));

1463 
ZEXTERN
 
off_t
 
ZEXPORT
 
gzãŒ64
 
OF
((
gzFûe
));

1464 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1465 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe64
 
OF
((uL⁄g, uL⁄g, 
off_t
));

1468 
ZEXTERN
 
gzFûe
 
ZEXPORT
 
gz›í
 
OF
((const *, const *));

1469 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gz£ek
 
OF
((
gzFûe
, z_off_t, ));

1470 
ZEXTERN
 
z_off_t
 
ZEXPORT
 
gzãŒ
 
OF
((
gzFûe
));

1471 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
adÀr32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1472 
ZEXTERN
 
uL⁄g
 
ZEXPORT
 
¸c32_comböe
 
OF
((uL⁄g, uL⁄g, 
z_off_t
));

1475 #i‡!
deföed
(
ZUTIL_H
Ë&& !deföed(
NO_DUMMY_DECL
)

1476 
	söã∫Æ_°©e
 {
dummy
;};

1479 
ZEXTERN
 c⁄° * 
ZEXPORT
 
zEº‹
 
OF
(());

1480 
ZEXTERN
 
ZEXPORT
 
öÊ©eSyncPoöt
 
OF
((
z_°ªamp
));

1481 
ZEXTERN
 c⁄° 
uL⁄gf
 * 
ZEXPORT
 
gë_¸c_èbÀ
 
OF
(());

1482 
ZEXTERN
 
ZEXPORT
 
öÊ©eUndîmöe
 
OF
((
z_°ªamp
, ));

1484 #ifde‡
__˝lu•lus


	@/usr/include/alloca.h

19 #i‚def 
_ALLOCA_H


20 
	#_ALLOCA_H
 1

	)

22 
	~<„©uªs.h
>

24 
	#__√ed_size_t


	)

25 
	~<°ddef.h
>

27 
	g__BEGIN_DECLS


30 #unde‡
Æloˇ


33 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

35 #ifdef 
__GNUC__


36 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

39 
__END_DECLS


	@/usr/include/endian.h

19 #i‚def 
_ENDIAN_H


20 
	#_ENDIAN_H
 1

	)

22 
	~<„©uªs.h
>

32 
	#__LITTLE_ENDIAN
 1234

	)

33 
	#__BIG_ENDIAN
 4321

	)

34 
	#__PDP_ENDIAN
 3412

	)

37 
	~<bôs/ídün.h
>

41 #i‚de‡
__FLOAT_WORD_ORDER


42 
	#__FLOAT_WORD_ORDER
 
__BYTE_ORDER


	)

45 #ifdef 
__USE_BSD


46 
	#LITTLE_ENDIAN
 
__LITTLE_ENDIAN


	)

47 
	#BIG_ENDIAN
 
__BIG_ENDIAN


	)

48 
	#PDP_ENDIAN
 
__PDP_ENDIAN


	)

49 
	#BYTE_ORDER
 
__BYTE_ORDER


	)

52 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


53 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËLO, 
	)
HI

54 #ñi‡
__BYTE_ORDER
 =
__BIG_ENDIAN


55 
	#__LONG_LONG_PAIR
(
HI
, 
LO
ËHI, 
	)
LO

59 #ifde‡
__USE_BSD


61 
	~<bôs/byãsw≠.h
>

63 #i‡
__BYTE_ORDER
 =
__LITTLE_ENDIAN


64 
	#htobe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

65 
	#htﬁe16
(
x
Ë(x)

	)

66 
	#be16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

67 
	#À16toh
(
x
Ë(x)

	)

69 
	#htobe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

70 
	#htﬁe32
(
x
Ë(x)

	)

71 
	#be32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

72 
	#À32toh
(
x
Ë(x)

	)

74 
	#htobe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

75 
	#htﬁe64
(
x
Ë(x)

	)

76 
	#be64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

77 
	#À64toh
(
x
Ë(x)

	)

79 
	#htobe16
(
x
Ë(x)

	)

80 
	#htﬁe16
(
x
Ë
	`__bsw≠_16
 (x)

	)

81 
	#be16toh
(
x
Ë(x)

	)

82 
	#À16toh
(
x
Ë
	`__bsw≠_16
 (x)

	)

84 
	#htobe32
(
x
Ë(x)

	)

85 
	#htﬁe32
(
x
Ë
	`__bsw≠_32
 (x)

	)

86 
	#be32toh
(
x
Ë(x)

	)

87 
	#À32toh
(
x
Ë
	`__bsw≠_32
 (x)

	)

89 
	#htobe64
(
x
Ë(x)

	)

90 
	#htﬁe64
(
x
Ë
	`__bsw≠_64
 (x)

	)

91 
	#be64toh
(
x
Ë(x)

	)

92 
	#À64toh
(
x
Ë
	`__bsw≠_64
 (x)

	)

	@/usr/include/features.h

20 #i‚def 
_FEATURES_H


21 
	#_FEATURES_H
 1

	)

98 #unde‡
__USE_ISOC99


99 #unde‡
__USE_ISOC95


100 #unde‡
__USE_POSIX


101 #unde‡
__USE_POSIX2


102 #unde‡
__USE_POSIX199309


103 #unde‡
__USE_POSIX199506


104 #unde‡
__USE_XOPEN


105 #unde‡
__USE_XOPEN_EXTENDED


106 #unde‡
__USE_UNIX98


107 #unde‡
__USE_XOPEN2K


108 #unde‡
__USE_XOPEN2KXSI


109 #unde‡
__USE_XOPEN2K8


110 #unde‡
__USE_XOPEN2K8XSI


111 #unde‡
__USE_LARGEFILE


112 #unde‡
__USE_LARGEFILE64


113 #unde‡
__USE_FILE_OFFSET64


114 #unde‡
__USE_BSD


115 #unde‡
__USE_SVID


116 #unde‡
__USE_MISC


117 #unde‡
__USE_ATFILE


118 #unde‡
__USE_GNU


119 #unde‡
__USE_REENTRANT


120 #unde‡
__USE_FORTIFY_LEVEL


121 #unde‡
__FAVOR_BSD


122 #unde‡
__KERNEL_STRICT_NAMES


126 #i‚de‡
_LOOSE_KERNEL_NAMES


127 
	#__KERNEL_STRICT_NAMES


	)

131 
	#__USE_ANSI
 1

	)

140 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


141 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

142 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

144 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

149 #i‡
deföed
 
_BSD_SOURCE
 && \

150 !(
deföed
 
	g_POSIX_SOURCE
 || deföed 
	g_POSIX_C_SOURCE
 || \

151 
deföed
 
	g_XOPEN_SOURCE
 || deföed 
	g_GNU_SOURCE
 || deföed 
	g_SVID_SOURCE
)

152 
	#__FAVOR_BSD
 1

	)

156 #ifde‡
_GNU_SOURCE


157 #unde‡
_ISOC95_SOURCE


158 
	#_ISOC95_SOURCE
 1

	)

159 #unde‡
_ISOC99_SOURCE


160 
	#_ISOC99_SOURCE
 1

	)

161 #unde‡
_POSIX_SOURCE


162 
	#_POSIX_SOURCE
 1

	)

163 #unde‡
_POSIX_C_SOURCE


164 
	#_POSIX_C_SOURCE
 200809L

	)

165 #unde‡
_XOPEN_SOURCE


166 
	#_XOPEN_SOURCE
 700

	)

167 #unde‡
_XOPEN_SOURCE_EXTENDED


168 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

169 #unde‡
_LARGEFILE64_SOURCE


170 
	#_LARGEFILE64_SOURCE
 1

	)

171 #unde‡
_BSD_SOURCE


172 
	#_BSD_SOURCE
 1

	)

173 #unde‡
_SVID_SOURCE


174 
	#_SVID_SOURCE
 1

	)

175 #unde‡
_ATFILE_SOURCE


176 
	#_ATFILE_SOURCE
 1

	)

181 #i‡(!
deföed
 
__STRICT_ANSI__
 && !deföed 
_ISOC99_SOURCE
 && \

182 !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 && \

183 !
deföed
 
	g_XOPEN_SOURCE
 && !deföed 
	g_BSD_SOURCE
 && !deföed 
	g_SVID_SOURCE
)

184 
	#_BSD_SOURCE
 1

	)

185 
	#_SVID_SOURCE
 1

	)

192 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

193 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

194 
	#__USE_ISOC99
 1

	)

198 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC9X_SOURCE
 \

199 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

200 
	#__USE_ISOC95
 1

	)

205 #i‡((!
deföed
 
__STRICT_ANSI__
 || (
_XOPEN_SOURCE
 - 0) >= 500) && \

206 !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

207 
	#_POSIX_SOURCE
 1

	)

208 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

209 
	#_POSIX_C_SOURCE
 2

	)

210 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

211 
	#_POSIX_C_SOURCE
 199506L

	)

212 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

213 
	#_POSIX_C_SOURCE
 200112L

	)

215 
	#_POSIX_C_SOURCE
 200809L

	)

217 
	#__USE_POSIX_IMPLICITLY
 1

	)

220 #i‡
deföed
 
_POSIX_SOURCE
 || 
_POSIX_C_SOURCE
 >1 || deföed 
_XOPEN_SOURCE


221 
	#__USE_POSIX
 1

	)

224 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


225 
	#__USE_POSIX2
 1

	)

228 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199309L

229 
	#__USE_POSIX199309
 1

	)

232 #i‡(
_POSIX_C_SOURCE
 - 0) >= 199506L

233 
	#__USE_POSIX199506
 1

	)

236 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200112L

237 
	#__USE_XOPEN2K
 1

	)

238 #unde‡
__USE_ISOC95


239 
	#__USE_ISOC95
 1

	)

240 #unde‡
__USE_ISOC99


241 
	#__USE_ISOC99
 1

	)

244 #i‡(
_POSIX_C_SOURCE
 - 0) >= 200809L

245 
	#__USE_XOPEN2K8
 1

	)

246 #unde‡
_ATFILE_SOURCE


247 
	#_ATFILE_SOURCE
 1

	)

250 #ifdef 
_XOPEN_SOURCE


251 
	#__USE_XOPEN
 1

	)

252 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

253 
	#__USE_XOPEN_EXTENDED
 1

	)

254 
	#__USE_UNIX98
 1

	)

255 #unde‡
_LARGEFILE_SOURCE


256 
	#_LARGEFILE_SOURCE
 1

	)

257 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

258 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

259 
	#__USE_XOPEN2K8
 1

	)

260 
	#__USE_XOPEN2K8XSI
 1

	)

262 
	#__USE_XOPEN2K
 1

	)

263 
	#__USE_XOPEN2KXSI
 1

	)

264 #unde‡
__USE_ISOC95


265 
	#__USE_ISOC95
 1

	)

266 #unde‡
__USE_ISOC99


267 
	#__USE_ISOC99
 1

	)

270 #ifde‡
_XOPEN_SOURCE_EXTENDED


271 
	#__USE_XOPEN_EXTENDED
 1

	)

276 #ifde‡
_LARGEFILE_SOURCE


277 
	#__USE_LARGEFILE
 1

	)

280 #ifde‡
_LARGEFILE64_SOURCE


281 
	#__USE_LARGEFILE64
 1

	)

284 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

285 
	#__USE_FILE_OFFSET64
 1

	)

288 #i‡
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE


289 
	#__USE_MISC
 1

	)

292 #ifdef 
_BSD_SOURCE


293 
	#__USE_BSD
 1

	)

296 #ifdef 
_SVID_SOURCE


297 
	#__USE_SVID
 1

	)

300 #ifdef 
_ATFILE_SOURCE


301 
	#__USE_ATFILE
 1

	)

304 #ifdef 
_GNU_SOURCE


305 
	#__USE_GNU
 1

	)

308 #i‡
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE


309 
	#__USE_REENTRANT
 1

	)

312 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0 \

313 && 
__GNUC_PREREQ
 (4, 1Ë&& 
deföed
 
	g__OPTIMIZE__
 && __OPTIMIZE__ > 0

314 #i‡
_FORTIFY_SOURCE
 > 1

315 
	#__USE_FORTIFY_LEVEL
 2

	)

317 
	#__USE_FORTIFY_LEVEL
 1

	)

320 
	#__USE_FORTIFY_LEVEL
 0

	)

324 
	~<bôs/¥edefs.h
>

327 
	#__STDC_ISO_10646__
 200009L

	)

335 #unde‡
__GNU_LIBRARY__


336 
	#__GNU_LIBRARY__
 6

	)

340 
	#__GLIBC__
 2

	)

341 
	#__GLIBC_MINOR__
 15

	)

343 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

344 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

347 #i‡
deföed
 
__GNUC__
 \

348 || (
deföed
 
	g__PGI
 && deföed 
	g__i386__
 ) \

349 || (
deföed
 
	g__INTEL_COMPILER
 && (deföed 
	g__i386__
 || deföed 
	g__ü64__
)) \

350 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L)

351 
	#__GLIBC_HAVE_LONG_LONG
 1

	)

355 #i‚de‡
__ASSEMBLER__


356 #i‚de‡
_SYS_CDEFS_H


357 
	~<sys/cdefs.h
>

362 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


363 
	#__USE_LARGEFILE
 1

	)

364 
	#__USE_LARGEFILE64
 1

	)

370 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

371 && !
deföed
 
	g__OPTIMIZE_SIZE__
 && !deföed 
	g__NO_INLINE__
 \

372 && 
deföed
 
	g__exã∫_ölöe


373 
	#__USE_EXTERN_INLINES
 1

	)

378 #i‡
__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

379 && (
deföed
 
	g_LIBC
 || !deföed 
	g__OPTIMIZE_SIZE__
Ë&& !deföed 
	g__NO_INLINE__
 \

380 && 
deföed
 
	g__exã∫_ölöe


381 
	#__USE_EXTERN_INLINES_IN_LIBC
 1

	)

389 
	~<gnu/°ubs.h
>

	@/usr/include/getopt.h

21 #i‚de‡
_GETOPT_H


23 #i‚de‡
__√ed_gë›t


24 
	#_GETOPT_H
 1

	)

34 #i‡!
deföed
 
__GNU_LIBRARY__


35 
	~<˘y≥.h
>

38 #i‚de‡
__THROW


39 #i‚de‡
__GNUC_PREREQ


40 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë(0)

	)

42 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,8)

43 
	#__THROW
 
	`throw
 ()

	)

45 
	#__THROW


	)

49 #ifdef 
__˝lu•lus


59 *
›èrg
;

73 
›töd
;

78 
›ãº
;

82 
›t›t
;

84 #i‚de‡
__√ed_gë›t


106 
	s›ti⁄


108 c⁄° *
	g«me
;

111 
	ghas_¨g
;

112 *
	gÊag
;

113 
	gvÆ
;

118 
	#no_¨gumít
 0

	)

119 
	#ªquúed_¨gumít
 1

	)

120 
	#›ti⁄Æ_¨gumít
 2

	)

148 #ifde‡
__GNU_LIBRARY__


152 
gë›t
 (
___¨gc
, *c⁄° *
___¨gv
, c⁄° *
__sh‹t›ts
)

153 
__THROW
;

155 #i‡
deföed
 
__√ed_gë›t
 && deföed 
__USE_POSIX2
 \

156 && !
deföed
 
	g__USE_POSIX_IMPLICITLY
 && !deföed 
	g__USE_GNU


160 #ifde‡
__REDIRECT


161 
__REDIRECT_NTH
 (
gë›t
, (
___¨gc
, *c⁄° *
___¨gv
,

162 c⁄° *
__sh‹t›ts
),

163 
__posix_gë›t
);

165 
__posix_gë›t
 (
___¨gc
, *c⁄° *
___¨gv
,

166 c⁄° *
__sh‹t›ts
Ë
__THROW
;

167 
	#gë›t
 
__posix_gë›t


	)

171 
gë›t
 ();

174 #i‚de‡
__√ed_gë›t


175 
gë›t_l⁄g
 (
___¨gc
, *c⁄° *
___¨gv
,

176 c⁄° *
__sh‹t›ts
,

177 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

178 
__THROW
;

179 
gë›t_l⁄g_⁄ly
 (
___¨gc
, *c⁄° *
___¨gv
,

180 c⁄° *
__sh‹t›ts
,

181 c⁄° 
›ti⁄
 *
__l⁄g›ts
, *
__l⁄göd
)

182 
__THROW
;

186 #ifdef 
__˝lu•lus


191 #unde‡
__√ed_gë›t


	@/usr/include/libio.h

29 #i‚de‡
_IO_STDIO_H


30 
	#_IO_STDIO_H


	)

32 
	~<_G_c⁄fig.h
>

34 
	#_IO_pos_t
 
_G_Âos_t


	)

35 
	#_IO_Âos_t
 
_G_Âos_t


	)

36 
	#_IO_Âos64_t
 
_G_Âos64_t


	)

37 
	#_IO_size_t
 
_G_size_t


	)

38 
	#_IO_ssize_t
 
_G_ssize_t


	)

39 
	#_IO_off_t
 
_G_off_t


	)

40 
	#_IO_off64_t
 
_G_off64_t


	)

41 
	#_IO_pid_t
 
_G_pid_t


	)

42 
	#_IO_uid_t
 
_G_uid_t


	)

43 
	#_IO_ic⁄v_t
 
_G_ic⁄v_t


	)

44 
	#_IO_HAVE_SYS_WAIT
 
_G_HAVE_SYS_WAIT


	)

45 
	#_IO_HAVE_ST_BLKSIZE
 
_G_HAVE_ST_BLKSIZE


	)

46 
	#_IO_BUFSIZ
 
_G_BUFSIZ


	)

47 
	#_IO_va_li°
 
_G_va_li°


	)

48 
	#_IO_wöt_t
 
_G_wöt_t


	)

50 #ifde‡
_G_NEED_STDARG_H


52 
	#__√ed___va_li°


	)

53 
	~<°d¨g.h
>

54 #ifde‡
__GNUC_VA_LIST


55 #unde‡
_IO_va_li°


56 
	#_IO_va_li°
 
__gnuc_va_li°


	)

60 #i‚de‡
__P


61 #i‡
_G_HAVE_SYS_CDEFS


62 
	~<sys/cdefs.h
>

64 #ifde‡
__STDC__


65 
	#__P
(
p
Ë
	)
p

66 
	#__PMT
(
p
Ë
	)
p

68 
	#__P
(
p
Ë()

	)

69 
	#__PMT
(
p
Ë()

	)

75 #i‚de‡
_PARAMS


76 
	#_PARAMS
(
¥Ÿos
Ë
	`__P
’rŸos)

	)

79 #i‚de‡
__STDC__


81 c⁄°

	)

84 
	#_IO_UNIFIED_JUMPTABLES
 1

	)

85 #i‚de‡
_G_HAVE_PRINTF_FP


86 
	#_IO_USE_DTOA
 1

	)

89 #i‚de‡
EOF


90 
	#EOF
 (-1)

	)

92 #i‚de‡
NULL


93 #i‡
deföed
 
__GNUG__
 && \

94 (
	g__GNUC__
 > 2 || (__GNUC__ =2 && 
__GNUC_MINOR__
 >= 8))

95 
	#NULL
 (
__nuŒ
)

	)

97 #i‡!
deföed
(
__˝lu•lus
)

98 
	#NULL
 ((*)0)

	)

100 
	#NULL
 (0)

	)

105 
	#_IOS_INPUT
 1

	)

106 
	#_IOS_OUTPUT
 2

	)

107 
	#_IOS_ATEND
 4

	)

108 
	#_IOS_APPEND
 8

	)

109 
	#_IOS_TRUNC
 16

	)

110 
	#_IOS_NOCREATE
 32

	)

111 
	#_IOS_NOREPLACE
 64

	)

112 
	#_IOS_BIN
 128

	)

120 
	#_IO_MAGIC
 0xFBAD0000

	)

121 
	#_OLD_STDIO_MAGIC
 0xFABC0000

	)

122 
	#_IO_MAGIC_MASK
 0xFFFF0000

	)

123 
	#_IO_USER_BUF
 1

	)

124 
	#_IO_UNBUFFERED
 2

	)

125 
	#_IO_NO_READS
 4

	)

126 
	#_IO_NO_WRITES
 8

	)

127 
	#_IO_EOF_SEEN
 0x10

	)

128 
	#_IO_ERR_SEEN
 0x20

	)

129 
	#_IO_DELETE_DONT_CLOSE
 0x40

	)

130 
	#_IO_LINKED
 0x80

	)

131 
	#_IO_IN_BACKUP
 0x100

	)

132 
	#_IO_LINE_BUF
 0x200

	)

133 
	#_IO_TIED_PUT_GET
 0x400

	)

134 
	#_IO_CURRENTLY_PUTTING
 0x800

	)

135 
	#_IO_IS_APPENDING
 0x1000

	)

136 
	#_IO_IS_FILEBUF
 0x2000

	)

137 
	#_IO_BAD_SEEN
 0x4000

	)

138 
	#_IO_USER_LOCK
 0x8000

	)

140 
	#_IO_FLAGS2_MMAP
 1

	)

141 
	#_IO_FLAGS2_NOTCANCEL
 2

	)

142 #ifde‡
_LIBC


143 
	#_IO_FLAGS2_FORTIFY
 4

	)

145 
	#_IO_FLAGS2_USER_WBUF
 8

	)

146 #ifde‡
_LIBC


147 
	#_IO_FLAGS2_SCANF_STD
 16

	)

148 
	#_IO_FLAGS2_NOCLOSE
 32

	)

149 
	#_IO_FLAGS2_CLOEXEC
 64

	)

153 
	#_IO_SKIPWS
 01

	)

154 
	#_IO_LEFT
 02

	)

155 
	#_IO_RIGHT
 04

	)

156 
	#_IO_INTERNAL
 010

	)

157 
	#_IO_DEC
 020

	)

158 
	#_IO_OCT
 040

	)

159 
	#_IO_HEX
 0100

	)

160 
	#_IO_SHOWBASE
 0200

	)

161 
	#_IO_SHOWPOINT
 0400

	)

162 
	#_IO_UPPERCASE
 01000

	)

163 
	#_IO_SHOWPOS
 02000

	)

164 
	#_IO_SCIENTIFIC
 04000

	)

165 
	#_IO_FIXED
 010000

	)

166 
	#_IO_UNITBUF
 020000

	)

167 
	#_IO_STDIO
 040000

	)

168 
	#_IO_DONT_CLOSE
 0100000

	)

169 
	#_IO_BOOLALPHA
 0200000

	)

172 
_IO_jump_t
; 
	g_IO_FILE
;

175 #ifde‡
_IO_MTSAFE_IO


176 #i‡
deföed
 
__GLIBC__
 && __GLIBC__ >= 2

177 
	~<bôs/°dio-lock.h
>

182 
	t_IO_lock_t
;

188 
	s_IO_m¨kî
 {

189 
_IO_m¨kî
 *
	m_√xt
;

190 
_IO_FILE
 *
	m_sbuf
;

194 
	m_pos
;

196 
£t_°ªampos
(
°ªampos
 
•
Ë{ 
	m_•os
 = sp; }

197 
£t_off£t
(
off£t
Ë{ 
	m_pos
 = off£t; 
	m_•os
 = (
°ªampos
)(-2); }

198 
	mpublic
:

199 
°ªamm¨kî
(
°ªambuf
 *
sb
);

200 ~
°ªamm¨kî
();

201 
ßvög
(Ë{  
	m_•os
 == -2; }

202 
dñè
(
°ªamm¨kî
&);

203 
dñè
();

208 
	e__codecvt_ªsu…


210 
	m__codecvt_ok
,

211 
	m__codecvt_∑πül
,

212 
	m__codecvt_îr‹
,

213 
	m__codecvt_noc⁄v


216 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


219 
	s_IO_codecvt


221 (*
	m__codecvt_de°r
Ë(
	m_IO_codecvt
 *);

222 
__codecvt_ªsu…
 (*
__codecvt_do_out
Ë(
	m_IO_codecvt
 *,

223 
	m__mb°©e_t
 *,

224 c⁄° 
	mwch¨_t
 *,

225 c⁄° 
	mwch¨_t
 *,

226 c⁄° 
	mwch¨_t
 **, *,

228 
__codecvt_ªsu…
 (*
__codecvt_do_unshi·
Ë(
	m_IO_codecvt
 *,

229 
	m__mb°©e_t
 *, *,

231 
__codecvt_ªsu…
 (*
__codecvt_do_ö
Ë(
	m_IO_codecvt
 *,

232 
	m__mb°©e_t
 *,

234 c⁄° **, 
	mwch¨_t
 *,

235 
	mwch¨_t
 *, wchar_t **);

236 (*
	m__codecvt_do_ícodög
Ë(
	m_IO_codecvt
 *);

237 (*
	m__codecvt_do_Æways_noc⁄v
Ë(
	m_IO_codecvt
 *);

238 (*
	m__codecvt_do_Àngth
Ë(
	m_IO_codecvt
 *, 
	m__mb°©e_t
 *,

239 c⁄° *, c⁄° *, 
	m_IO_size_t
);

240 (*
	m__codecvt_do_max_Àngth
Ë(
	m_IO_codecvt
 *);

242 
_IO_ic⁄v_t
 
	m__cd_ö
;

243 
_IO_ic⁄v_t
 
	m__cd_out
;

247 
	s_IO_wide_d©a


249 
wch¨_t
 *
	m_IO_ªad_±r
;

250 
wch¨_t
 *
	m_IO_ªad_íd
;

251 
wch¨_t
 *
	m_IO_ªad_ba£
;

252 
wch¨_t
 *
	m_IO_wrôe_ba£
;

253 
wch¨_t
 *
	m_IO_wrôe_±r
;

254 
wch¨_t
 *
	m_IO_wrôe_íd
;

255 
wch¨_t
 *
	m_IO_buf_ba£
;

256 
wch¨_t
 *
	m_IO_buf_íd
;

258 
wch¨_t
 *
	m_IO_ßve_ba£
;

259 
wch¨_t
 *
	m_IO_backup_ba£
;

261 
wch¨_t
 *
	m_IO_ßve_íd
;

263 
__mb°©e_t
 
	m_IO_°©e
;

264 
__mb°©e_t
 
	m_IO_œ°_°©e
;

265 
_IO_codecvt
 
	m_codecvt
;

267 
wch¨_t
 
	m_sh‹tbuf
[1];

269 c⁄° 
_IO_jump_t
 *
	m_wide_vèbÀ
;

273 
	s_IO_FILE
 {

274 
	m_Êags
;

275 
	#_IO_fûe_Êags
 
_Êags


	)

279 * 
	m_IO_ªad_±r
;

280 * 
	m_IO_ªad_íd
;

281 * 
	m_IO_ªad_ba£
;

282 * 
	m_IO_wrôe_ba£
;

283 * 
	m_IO_wrôe_±r
;

284 * 
	m_IO_wrôe_íd
;

285 * 
	m_IO_buf_ba£
;

286 * 
	m_IO_buf_íd
;

288 *
	m_IO_ßve_ba£
;

289 *
	m_IO_backup_ba£
;

290 *
	m_IO_ßve_íd
;

292 
_IO_m¨kî
 *
	m_m¨kîs
;

294 
_IO_FILE
 *
	m_chaö
;

296 
	m_fûío
;

298 
	m_blksize
;

300 
	m_Êags2
;

302 
_IO_off_t
 
	m_ﬁd_off£t
;

304 
	#__HAVE_COLUMN


	)

306 
	m_cur_cﬁumn
;

307 sig√d 
	m_vèbÀ_off£t
;

308 
	m_sh‹tbuf
[1];

312 
_IO_lock_t
 *
	m_lock
;

313 #ifde‡
_IO_USE_OLD_IO_FILE


316 
	s_IO_FILE_com∂ëe


318 
_IO_FILE
 
	m_fûe
;

320 #i‡
deföed
 
_G_IO_IO_FILE_VERSION
 && _G_IO_IO_FILE_VERSION == 0x20001

321 
_IO_off64_t
 
	m_off£t
;

322 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


324 
_IO_codecvt
 *
	m_codecvt
;

325 
_IO_wide_d©a
 *
	m_wide_d©a
;

326 
_IO_FILE
 *
	m_‰ìªs_li°
;

327 *
	m_‰ìªs_buf
;

328 
size_t
 
	m_‰ìªs_size
;

330 *
	m__∑d1
;

331 *
	m__∑d2
;

332 *
	m__∑d3
;

333 *
	m__∑d4
;

334 
size_t
 
	m__∑d5
;

336 
	m_mode
;

338 
	m_unu£d2
[15 *  (Ë- 4 *  (*Ë-  (
size_t
)];

342 #i‚de‡
__˝lu•lus


343 
_IO_FILE
 
	t_IO_FILE
;

346 
	g_IO_FILE_∂us
;

348 
_IO_FILE_∂us
 
_IO_2_1_°dö_
;

349 
_IO_FILE_∂us
 
_IO_2_1_°dout_
;

350 
_IO_FILE_∂us
 
_IO_2_1_°dîr_
;

351 #i‚de‡
_LIBC


352 
	#_IO_°dö
 ((
_IO_FILE
*)(&
_IO_2_1_°dö_
))

	)

353 
	#_IO_°dout
 ((
_IO_FILE
*)(&
_IO_2_1_°dout_
))

	)

354 
	#_IO_°dîr
 ((
_IO_FILE
*)(&
_IO_2_1_°dîr_
))

	)

356 
_IO_FILE
 *
_IO_°dö
 
©åibuã_hiddí
;

357 
_IO_FILE
 *
_IO_°dout
 
©åibuã_hiddí
;

358 
_IO_FILE
 *
_IO_°dîr
 
©åibuã_hiddí
;

366 
__ssize_t
 
	t__io_ªad_‚
 (*
	t__cookõ
, *
	t__buf
, 
	tsize_t
 
	t__nbyãs
);

374 
__ssize_t
 
	t__io_wrôe_‚
 (*
	t__cookõ
, 
	t__c⁄°
 *
	t__buf
,

375 
	tsize_t
 
	t__n
);

383 
	t__io_£ek_‚
 (*
	t__cookõ
, 
	t_IO_off64_t
 *
	t__pos
, 
	t__w
);

386 
	t__io_˛o£_‚
 (*
	t__cookõ
);

389 #ifde‡
_GNU_SOURCE


391 
__io_ªad_‚
 
	tcookõ_ªad_fun˘i⁄_t
;

392 
__io_wrôe_‚
 
	tcookõ_wrôe_fun˘i⁄_t
;

393 
__io_£ek_‚
 
	tcookõ_£ek_fun˘i⁄_t
;

394 
__io_˛o£_‚
 
	tcookõ_˛o£_fun˘i⁄_t
;

399 
__io_ªad_‚
 *
	mªad
;

400 
__io_wrôe_‚
 *
	mwrôe
;

401 
__io_£ek_‚
 *
	m£ek
;

402 
__io_˛o£_‚
 *
	m˛o£
;

403 } 
	t_IO_cookõ_io_fun˘i⁄s_t
;

404 
_IO_cookõ_io_fun˘i⁄s_t
 
	tcookõ_io_fun˘i⁄s_t
;

406 
	g_IO_cookõ_fûe
;

409 
_IO_cookõ_öô
 (
_IO_cookõ_fûe
 *
__cfûe
, 
__ªad_wrôe
,

410 *
__cookõ
, 
_IO_cookõ_io_fun˘i⁄s_t
 
__‚s
);

414 #ifde‡
__˝lu•lus


418 
__undîÊow
 (
_IO_FILE
 *);

419 
__uÊow
 (
_IO_FILE
 *);

420 
__ovîÊow
 (
_IO_FILE
 *, );

421 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


422 
_IO_wöt_t
 
__wundîÊow
 (
_IO_FILE
 *);

423 
_IO_wöt_t
 
__wuÊow
 (
_IO_FILE
 *);

424 
_IO_wöt_t
 
__wovîÊow
 (
_IO_FILE
 *, _IO_wint_t);

427 #i‡ 
__GNUC__
 >= 3

428 
	#_IO_BE
(
ex¥
, 
ªs
Ë
	`__buûtö_ex≥˘
 (”x¥),Ñes)

	)

430 
	#_IO_BE
(
ex¥
, 
ªs
Ë”x¥)

	)

433 
	#_IO_gëc_u∆ocked
(
_Â
) \

434 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

435 ? 
	`__uÊow
 (
_Â
Ë: *(*Ë(_Â)->
_IO_ªad_±r
++)

	)

436 
	#_IO_≥ekc_u∆ocked
(
_Â
) \

437 (
	`_IO_BE
 ((
_Â
)->
_IO_ªad_±r
 >(_Â)->
_IO_ªad_íd
, 0) \

438 && 
	`__undîÊow
 (
_Â
Ë=
EOF
 ? EOF \

439 : *(*Ë(
_Â
)->
_IO_ªad_±r
)

	)

440 
	#_IO_putc_u∆ocked
(
_ch
, 
_Â
) \

441 (
	`_IO_BE
 ((
_Â
)->
_IO_wrôe_±r
 >(_Â)->
_IO_wrôe_íd
, 0) \

442 ? 
	`__ovîÊow
 (
_Â
, (Ë(
_ch
)) \

443 : (Ë(*(
_Â
)->
_IO_wrôe_±r
++ = (
_ch
)))

	)

445 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


446 
	#_IO_gëwc_u∆ocked
(
_Â
) \

447 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

448 || ((
_Â
)->
_wide_d©a
->
_IO_ªad_±r
 \

449 >(
_Â
)->
_wide_d©a
->
_IO_ªad_íd
), 0) \

450 ? 
	`__wuÊow
 (
_Â
Ë: (
_IO_wöt_t
Ë*(_Â)->
_wide_d©a
->
_IO_ªad_±r
++)

	)

451 
	#_IO_putwc_u∆ocked
(
_wch
, 
_Â
) \

452 (
	`_IO_BE
 ((
_Â
)->
_wide_d©a
 =
NULL
 \

453 || ((
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
 \

454 >(
_Â
)->
_wide_d©a
->
_IO_wrôe_íd
), 0) \

455 ? 
	`__wovîÊow
 (
_Â
, 
_wch
) \

456 : (
_IO_wöt_t
Ë(*(
_Â
)->
_wide_d©a
->
_IO_wrôe_±r
++ = (
_wch
)))

	)

459 
	#_IO_„of_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_EOF_SEEN
Ë!0)

	)

460 
	#_IO_„º‹_u∆ocked
(
__Â
Ë(((__Â)->
_Êags
 & 
_IO_ERR_SEEN
Ë!0)

	)

462 
_IO_gëc
 (
_IO_FILE
 *
__Â
);

463 
_IO_putc
 (
__c
, 
_IO_FILE
 *
__Â
);

464 
_IO_„of
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

465 
_IO_„º‹
 (
_IO_FILE
 *
__Â
Ë
__THROW
;

467 
_IO_≥ekc_locked
 (
_IO_FILE
 *
__Â
);

470 
	#_IO_PENDING_OUTPUT_COUNT
(
_Â
) \

471 ((
_Â
)->
_IO_wrôe_±r
 - (_Â)->
_IO_wrôe_ba£
)

	)

473 
_IO_Êockfûe
 (
_IO_FILE
 *Ë
__THROW
;

474 
_IO_fu∆ockfûe
 (
_IO_FILE
 *Ë
__THROW
;

475 
_IO_·rylockfûe
 (
_IO_FILE
 *Ë
__THROW
;

477 #ifde‡
_IO_MTSAFE_IO


478 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_locked
 (_Â)

	)

479 
	#_IO_Êockfûe
(
_Â
) \

480 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_Êockfûe
 (_Â)

	)

481 
	#_IO_fu∆ockfûe
(
_Â
) \

482 i‡(((
_Â
)->
_Êags
 & 
_IO_USER_LOCK
Ë=0Ë
	`_IO_fu∆ockfûe
 (_Â)

	)

484 
	#_IO_≥ekc
(
_Â
Ë
	`_IO_≥ekc_u∆ocked
 (_Â)

	)

485 
	#_IO_Êockfûe
(
_Â
Ë

	)

486 
	#_IO_fu∆ockfûe
(
_Â
Ë

	)

487 
	#_IO_·rylockfûe
(
_Â
Ë

	)

488 
	#_IO_˛ónup_ªgi⁄_°¨t
(
_f˘
, 
_Â
Ë

	)

489 
	#_IO_˛ónup_ªgi⁄_íd
(
_Doô
Ë

	)

492 
_IO_vfsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, const * __restrict,

493 
_IO_va_li°
, *
__ª°ri˘
);

494 
_IO_vÂrötf
 (
_IO_FILE
 *
__ª°ri˘
, const *__restrict,

495 
_IO_va_li°
);

496 
_IO_ssize_t
 
_IO_∑dn
 (
_IO_FILE
 *, , _IO_ssize_t);

497 
_IO_size_t
 
_IO_sgën
 (
_IO_FILE
 *, *, _IO_size_t);

499 
_IO_off64_t
 
_IO_£ekoff
 (
_IO_FILE
 *, _IO_off64_t, , );

500 
_IO_off64_t
 
_IO_£ekpos
 (
_IO_FILE
 *, _IO_off64_t, );

502 
_IO_‰ì_backup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

504 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


505 
_IO_wöt_t
 
_IO_gëwc
 (
_IO_FILE
 *
__Â
);

506 
_IO_wöt_t
 
_IO_putwc
 (
wch¨_t
 
__wc
, 
_IO_FILE
 *
__Â
);

507 
_IO_fwide
 (
_IO_FILE
 *
__Â
, 
__mode
Ë
__THROW
;

508 #i‡
__GNUC__
 >= 2

511 #i‡
deföed
 
_LIBC
 && deföed 
SHARED


512 
	~<shlib-com∑t.h
>

513 #i‡
SHLIB_COMPAT
 (
libc
, 
GLIBC_2_0
, 
GLIBC_2_1
)

514 
	#_IO_fwide_maybe_öcom∑tibÀ
 \

515 (
	`__buûtö_ex≥˘
 (&
_IO_°dö_u£d
 =
NULL
, 0))

	)

516 c⁄° 
_IO_°dö_u£d
;

517 
wók_exã∫
 (
_IO_°dö_u£d
);

520 #i‚de‡
_IO_fwide_maybe_öcom∑tibÀ


521 
	#_IO_fwide_maybe_öcom∑tibÀ
 (0)

	)

525 
	#_IO_fwide
(
__Â
, 
__mode
) \

526 ({ 
__ªsu…
 = (
__mode
); \

527 i‡(
__ªsu…
 < 0 && ! 
_IO_fwide_maybe_öcom∑tibÀ
) \

529 i‡((
__Â
)->
_mode
 == 0) \

531 (
__Â
)->
_mode
 = -1; \

532 
__ªsu…
 = (
__Â
)->
_mode
; \

534 i‡(
	`__buûtö_c⁄°™t_p
 (
__mode
) && (__mode) == 0) \

535 
__ªsu…
 = 
_IO_fwide_maybe_öcom∑tibÀ
 ? -1 : (
__Â
)->
_mode
; \

537 
__ªsu…
 = 
	`_IO_fwide
 (
__Â
, __result); \

538 
__ªsu…
; })

	)

541 
_IO_vfwsˇnf
 (
_IO_FILE
 * 
__ª°ri˘
, c⁄° 
wch¨_t
 * __restrict,

542 
_IO_va_li°
, *
__ª°ri˘
);

543 
_IO_vfw¥ötf
 (
_IO_FILE
 *
__ª°ri˘
, c⁄° 
wch¨_t
 *__restrict,

544 
_IO_va_li°
);

545 
_IO_ssize_t
 
_IO_w∑dn
 (
_IO_FILE
 *, 
wöt_t
, _IO_ssize_t);

546 
_IO_‰ì_wbackup_¨ó
 (
_IO_FILE
 *Ë
__THROW
;

549 #ifde‡
__LDBL_COMPAT


550 
	~<bôs/libio-ldbl.h
>

553 #ifde‡
__˝lu•lus


	@/usr/include/linux/types.h

1 #i‚de‡
_LINUX_TYPES_H


2 
	#_LINUX_TYPES_H


	)

4 
	~<asm/ty≥s.h
>

6 #i‚de‡
__ASSEMBLY__


8 
	~<löux/posix_ty≥s.h
>

16 #ifde‡
__CHECKER__


17 
	#__bôwi£__
 
	`__©åibuã__
((
bôwi£
))

	)

19 
	#__bôwi£__


	)

21 #ifde‡
__CHECK_ENDIAN__


22 
	#__bôwi£
 
__bôwi£__


	)

24 
	#__bôwi£


	)

27 
__u16
 
	t__bôwi£
 
	t__À16
;

28 
__u16
 
	t__bôwi£
 
	t__be16
;

29 
__u32
 
	t__bôwi£
 
	t__À32
;

30 
__u32
 
	t__bôwi£
 
	t__be32
;

31 
__u64
 
	t__bôwi£
 
	t__À64
;

32 
__u64
 
	t__bôwi£
 
	t__be64
;

34 
__u16
 
	t__bôwi£
 
	t__sum16
;

35 
__u32
 
	t__bôwi£
 
	t__wsum
;

46 
	#__Æig√d_u64
 
__u64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

47 
	#__Æig√d_be64
 
__be64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

48 
	#__Æig√d_À64
 
__À64
 
	`__©åibuã__
((
	`Æig√d
(8)))

	)

	@/usr/include/openssl/bio.h

59 #i‚de‡
HEADER_BIO_H


60 
	#HEADER_BIO_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_FP_API


65 
	~<°dio.h
>

67 
	~<°d¨g.h
>

69 
	~<›ís¶/¸y±o.h
>

71 #i‚de‡
OPENSSL_NO_SCTP


72 #i‚de‡
OPENSSL_SYS_VMS


73 
	~<°döt.h
>

75 
	~<öây≥s.h
>

79 #ifde‡ 
__˝lu•lus


84 
	#BIO_TYPE_NONE
 0

	)

85 
	#BIO_TYPE_MEM
 (1|0x0400)

	)

86 
	#BIO_TYPE_FILE
 (2|0x0400)

	)

88 
	#BIO_TYPE_FD
 (4|0x0400|0x0100)

	)

89 
	#BIO_TYPE_SOCKET
 (5|0x0400|0x0100)

	)

90 
	#BIO_TYPE_NULL
 (6|0x0400)

	)

91 
	#BIO_TYPE_SSL
 (7|0x0200)

	)

92 
	#BIO_TYPE_MD
 (8|0x0200Ë

	)

93 
	#BIO_TYPE_BUFFER
 (9|0x0200Ë

	)

94 
	#BIO_TYPE_CIPHER
 (10|0x0200Ë

	)

95 
	#BIO_TYPE_BASE64
 (11|0x0200Ë

	)

96 
	#BIO_TYPE_CONNECT
 (12|0x0400|0x0100Ë

	)

97 
	#BIO_TYPE_ACCEPT
 (13|0x0400|0x0100Ë

	)

98 
	#BIO_TYPE_PROXY_CLIENT
 (14|0x0200Ë

	)

99 
	#BIO_TYPE_PROXY_SERVER
 (15|0x0200Ë

	)

100 
	#BIO_TYPE_NBIO_TEST
 (16|0x0200Ë

	)

101 
	#BIO_TYPE_NULL_FILTER
 (17|0x0200)

	)

102 
	#BIO_TYPE_BER
 (18|0x0200Ë

	)

103 
	#BIO_TYPE_BIO
 (19|0x0400Ë

	)

104 
	#BIO_TYPE_LINEBUFFER
 (20|0x0200Ë

	)

105 
	#BIO_TYPE_DGRAM
 (21|0x0400|0x0100)

	)

106 #i‚de‡
OPENSSL_NO_SCTP


107 
	#BIO_TYPE_DGRAM_SCTP
 (24|0x0400|0x0100)

	)

109 
	#BIO_TYPE_ASN1
 (22|0x0200Ë

	)

110 
	#BIO_TYPE_COMP
 (23|0x0200Ë

	)

112 
	#BIO_TYPE_DESCRIPTOR
 0x0100

	)

113 
	#BIO_TYPE_FILTER
 0x0200

	)

114 
	#BIO_TYPE_SOURCE_SINK
 0x0400

	)

118 
	#BIO_NOCLOSE
 0x00

	)

119 
	#BIO_CLOSE
 0x01

	)

123 
	#BIO_CTRL_RESET
 1

	)

124 
	#BIO_CTRL_EOF
 2

	)

125 
	#BIO_CTRL_INFO
 3

	)

126 
	#BIO_CTRL_SET
 4

	)

127 
	#BIO_CTRL_GET
 5

	)

128 
	#BIO_CTRL_PUSH
 6

	)

129 
	#BIO_CTRL_POP
 7

	)

130 
	#BIO_CTRL_GET_CLOSE
 8

	)

131 
	#BIO_CTRL_SET_CLOSE
 9

	)

132 
	#BIO_CTRL_PENDING
 10

	)

133 
	#BIO_CTRL_FLUSH
 11

	)

134 
	#BIO_CTRL_DUP
 12

	)

135 
	#BIO_CTRL_WPENDING
 13

	)

137 
	#BIO_CTRL_SET_CALLBACK
 14

	)

138 
	#BIO_CTRL_GET_CALLBACK
 15

	)

140 
	#BIO_CTRL_SET_FILENAME
 30

	)

143 
	#BIO_CTRL_DGRAM_CONNECT
 31

	)

144 
	#BIO_CTRL_DGRAM_SET_CONNECTED
 32

	)

147 
	#BIO_CTRL_DGRAM_SET_RECV_TIMEOUT
 33

	)

148 
	#BIO_CTRL_DGRAM_GET_RECV_TIMEOUT
 34

	)

149 
	#BIO_CTRL_DGRAM_SET_SEND_TIMEOUT
 35

	)

150 
	#BIO_CTRL_DGRAM_GET_SEND_TIMEOUT
 36

	)

152 
	#BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
 37

	)

153 
	#BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
 38

	)

156 
	#BIO_CTRL_DGRAM_MTU_DISCOVER
 39

	)

159 
	#BIO_CTRL_DGRAM_QUERY_MTU
 40

	)

160 
	#BIO_CTRL_DGRAM_GET_FALLBACK_MTU
 47

	)

161 
	#BIO_CTRL_DGRAM_GET_MTU
 41

	)

162 
	#BIO_CTRL_DGRAM_SET_MTU
 42

	)

167 
	#BIO_CTRL_DGRAM_MTU_EXCEEDED
 43

	)

172 
	#BIO_CTRL_DGRAM_GET_PEER
 46

	)

173 
	#BIO_CTRL_DGRAM_SET_PEER
 44

	)

175 
	#BIO_CTRL_DGRAM_SET_NEXT_TIMEOUT
 45

	)

178 #i‚de‡
OPENSSL_NO_SCTP


180 
	#BIO_CTRL_DGRAM_SCTP_SET_IN_HANDSHAKE
 50

	)

181 
	#BIO_CTRL_DGRAM_SCTP_ADD_AUTH_KEY
 51

	)

182 
	#BIO_CTRL_DGRAM_SCTP_NEXT_AUTH_KEY
 52

	)

183 
	#BIO_CTRL_DGRAM_SCTP_AUTH_CCS_RCVD
 53

	)

184 
	#BIO_CTRL_DGRAM_SCTP_GET_SNDINFO
 60

	)

185 
	#BIO_CTRL_DGRAM_SCTP_SET_SNDINFO
 61

	)

186 
	#BIO_CTRL_DGRAM_SCTP_GET_RCVINFO
 62

	)

187 
	#BIO_CTRL_DGRAM_SCTP_SET_RCVINFO
 63

	)

188 
	#BIO_CTRL_DGRAM_SCTP_GET_PRINFO
 64

	)

189 
	#BIO_CTRL_DGRAM_SCTP_SET_PRINFO
 65

	)

190 
	#BIO_CTRL_DGRAM_SCTP_SAVE_SHUTDOWN
 70

	)

194 
	#BIO_FP_READ
 0x02

	)

195 
	#BIO_FP_WRITE
 0x04

	)

196 
	#BIO_FP_APPEND
 0x08

	)

197 
	#BIO_FP_TEXT
 0x10

	)

199 
	#BIO_FLAGS_READ
 0x01

	)

200 
	#BIO_FLAGS_WRITE
 0x02

	)

201 
	#BIO_FLAGS_IO_SPECIAL
 0x04

	)

202 
	#BIO_FLAGS_RWS
 (
BIO_FLAGS_READ
|
BIO_FLAGS_WRITE
|
BIO_FLAGS_IO_SPECIAL
)

	)

203 
	#BIO_FLAGS_SHOULD_RETRY
 0x08

	)

204 #i‚def 
BIO_FLAGS_UPLINK


207 
	#BIO_FLAGS_UPLINK
 0

	)

211 
	#BIO_GHBN_CTRL_HITS
 1

	)

212 
	#BIO_GHBN_CTRL_MISSES
 2

	)

213 
	#BIO_GHBN_CTRL_CACHE_SIZE
 3

	)

214 
	#BIO_GHBN_CTRL_GET_ENTRY
 4

	)

215 
	#BIO_GHBN_CTRL_FLUSH
 5

	)

224 
	#BIO_FLAGS_BASE64_NO_NL
 0x100

	)

229 
	#BIO_FLAGS_MEM_RDONLY
 0x200

	)

231 
bio_°
 
	tBIO
;

233 
BIO_£t_Êags
(
BIO
 *
b
, 
Êags
);

234 
BIO_ã°_Êags
(c⁄° 
BIO
 *
b
, 
Êags
);

235 
BIO_˛ór_Êags
(
BIO
 *
b
, 
Êags
);

237 
	#BIO_gë_Êags
(
b
Ë
	`BIO_ã°_Êags
(b, ~(0x0))

	)

238 
	#BIO_£t_ªåy_•ecül
(
b
) \

239 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_IO_SPECIAL
|
BIO_FLAGS_SHOULD_RETRY
))

	)

240 
	#BIO_£t_ªåy_ªad
(
b
) \

241 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_READ
|
BIO_FLAGS_SHOULD_RETRY
))

	)

242 
	#BIO_£t_ªåy_wrôe
(
b
) \

243 
	`BIO_£t_Êags
(
b
, (
BIO_FLAGS_WRITE
|
BIO_FLAGS_SHOULD_RETRY
))

	)

246 
	#BIO_˛ór_ªåy_Êags
(
b
) \

247 
	`BIO_˛ór_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

248 
	#BIO_gë_ªåy_Êags
(
b
) \

249 
	`BIO_ã°_Êags
(
b
, (
BIO_FLAGS_RWS
|
BIO_FLAGS_SHOULD_RETRY
))

	)

252 
	#BIO_should_ªad
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_READ
)

	)

253 
	#BIO_should_wrôe
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_WRITE
)

	)

254 
	#BIO_should_io_•ecül
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_IO_SPECIAL
)

	)

255 
	#BIO_ªåy_ty≥
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_RWS
)

	)

256 
	#BIO_should_ªåy
(
a
Ë
	`BIO_ã°_Êags
◊, 
BIO_FLAGS_SHOULD_RETRY
)

	)

264 
	#BIO_RR_SSL_X509_LOOKUP
 0x01

	)

266 
	#BIO_RR_CONNECT
 0x02

	)

268 
	#BIO_RR_ACCEPT
 0x03

	)

271 
	#BIO_CB_FREE
 0x01

	)

272 
	#BIO_CB_READ
 0x02

	)

273 
	#BIO_CB_WRITE
 0x03

	)

274 
	#BIO_CB_PUTS
 0x04

	)

275 
	#BIO_CB_GETS
 0x05

	)

276 
	#BIO_CB_CTRL
 0x06

	)

280 
	#BIO_CB_RETURN
 0x80

	)

281 
	#BIO_CB_ªtu∫
(
a
Ë(◊)|
BIO_CB_RETURN
))

	)

282 
	#BIO_cb_¥e
(
a
Ë(!(◊)&
BIO_CB_RETURN
))

	)

283 
	#BIO_cb_po°
(
a
Ë(◊)&
BIO_CB_RETURN
)

	)

285 (*
BIO_gë_ˇŒback
(c⁄° 
BIO
 *
b
)Ë(
bio_°
 *,,const *,, ,);

286 
BIO_£t_ˇŒback
(
BIO
 *
b
,

287 (*
ˇŒback
)(
bio_°
 *,,const *,, ,));

288 *
BIO_gë_ˇŒback_¨g
(c⁄° 
BIO
 *
b
);

289 
BIO_£t_ˇŒback_¨g
(
BIO
 *
b
, *
¨g
);

291 c⁄° * 
BIO_mëhod_«me
(c⁄° 
BIO
 *
b
);

292 
BIO_mëhod_ty≥
(c⁄° 
BIO
 *
b
);

294 
	tbio_öfo_cb
(
	tbio_°
 *, , const *, , , );

296 
	sbio_mëhod_°


298 
ty≥
;

299 c⁄° *
«me
;

300 (*
bwrôe
)(
BIO
 *, const *, );

301 (*
bªad
)(
BIO
 *, *, );

302 (*
bputs
)(
BIO
 *, const *);

303 (*
bgës
)(
BIO
 *, *, );

304 (*
˘æ
)(
BIO
 *, , , *);

305 (*
¸óã
)(
BIO
 *);

306 (*
de°roy
)(
BIO
 *);

307 (*
ˇŒback_˘æ
)(
BIO
 *, , 
bio_öfo_cb
 *);

308 } 
	tBIO_METHOD
;

310 
	sbio_°


312 
BIO_METHOD
 *
mëhod
;

314 (*
ˇŒback
)(
bio_°
 *,,const *,, ,);

315 *
cb_¨g
;

317 
öô
;

318 
shutdown
;

319 
Êags
;

320 
ªåy_ªas⁄
;

321 
num
;

322 *
±r
;

323 
bio_°
 *
√xt_bio
;

324 
bio_°
 *
¥ev_bio
;

325 
ª„ªn˚s
;

326 
num_ªad
;

327 
num_wrôe
;

329 
CRYPTO_EX_DATA
 
ex_d©a
;

332 
DECLARE_STACK_OF
(
BIO
)

334 
	sbio_f_buf„r_˘x_°ru˘


346 
ibuf_size
;

347 
obuf_size
;

349 *
ibuf
;

350 
ibuf_Àn
;

351 
ibuf_off
;

353 *
obuf
;

354 
obuf_Àn
;

355 
obuf_off
;

356 } 
	tBIO_F_BUFFER_CTX
;

359 
	ta¢1_ps_func
(
	tBIO
 *
	tb
, **
	tpbuf
, *
	t∂í
, *
	t∑rg
);

361 #i‚de‡
OPENSSL_NO_SCTP


363 
	sbio_dgøm_s˘p_¢döfo


365 
uöt16_t
 
¢d_sid
;

366 
uöt16_t
 
¢d_Êags
;

367 
uöt32_t
 
¢d_µid
;

368 
uöt32_t
 
¢d_c⁄ãxt
;

371 
	sbio_dgøm_s˘p_rcvöfo


373 
uöt16_t
 
rcv_sid
;

374 
uöt16_t
 
rcv_s¢
;

375 
uöt16_t
 
rcv_Êags
;

376 
uöt32_t
 
rcv_µid
;

377 
uöt32_t
 
rcv_t¢
;

378 
uöt32_t
 
rcv_cumt¢
;

379 
uöt32_t
 
rcv_c⁄ãxt
;

382 
	sbio_dgøm_s˘p_¥öfo


384 
uöt16_t
 
¥_pﬁicy
;

385 
uöt32_t
 
¥_vÆue
;

390 
	#BIO_CONN_S_BEFORE
 1

	)

391 
	#BIO_CONN_S_GET_IP
 2

	)

392 
	#BIO_CONN_S_GET_PORT
 3

	)

393 
	#BIO_CONN_S_CREATE_SOCKET
 4

	)

394 
	#BIO_CONN_S_CONNECT
 5

	)

395 
	#BIO_CONN_S_OK
 6

	)

396 
	#BIO_CONN_S_BLOCKED_CONNECT
 7

	)

397 
	#BIO_CONN_S_NBIO
 8

	)

400 
	#BIO_C_SET_CONNECT
 100

	)

401 
	#BIO_C_DO_STATE_MACHINE
 101

	)

402 
	#BIO_C_SET_NBIO
 102

	)

403 
	#BIO_C_SET_PROXY_PARAM
 103

	)

404 
	#BIO_C_SET_FD
 104

	)

405 
	#BIO_C_GET_FD
 105

	)

406 
	#BIO_C_SET_FILE_PTR
 106

	)

407 
	#BIO_C_GET_FILE_PTR
 107

	)

408 
	#BIO_C_SET_FILENAME
 108

	)

409 
	#BIO_C_SET_SSL
 109

	)

410 
	#BIO_C_GET_SSL
 110

	)

411 
	#BIO_C_SET_MD
 111

	)

412 
	#BIO_C_GET_MD
 112

	)

413 
	#BIO_C_GET_CIPHER_STATUS
 113

	)

414 
	#BIO_C_SET_BUF_MEM
 114

	)

415 
	#BIO_C_GET_BUF_MEM_PTR
 115

	)

416 
	#BIO_C_GET_BUFF_NUM_LINES
 116

	)

417 
	#BIO_C_SET_BUFF_SIZE
 117

	)

418 
	#BIO_C_SET_ACCEPT
 118

	)

419 
	#BIO_C_SSL_MODE
 119

	)

420 
	#BIO_C_GET_MD_CTX
 120

	)

421 
	#BIO_C_GET_PROXY_PARAM
 121

	)

422 
	#BIO_C_SET_BUFF_READ_DATA
 122

	)

423 
	#BIO_C_GET_CONNECT
 123

	)

424 
	#BIO_C_GET_ACCEPT
 124

	)

425 
	#BIO_C_SET_SSL_RENEGOTIATE_BYTES
 125

	)

426 
	#BIO_C_GET_SSL_NUM_RENEGOTIATES
 126

	)

427 
	#BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
 127

	)

428 
	#BIO_C_FILE_SEEK
 128

	)

429 
	#BIO_C_GET_CIPHER_CTX
 129

	)

430 
	#BIO_C_SET_BUF_MEM_EOF_RETURN
 130

	)

431 
	#BIO_C_SET_BIND_MODE
 131

	)

432 
	#BIO_C_GET_BIND_MODE
 132

	)

433 
	#BIO_C_FILE_TELL
 133

	)

434 
	#BIO_C_GET_SOCKS
 134

	)

435 
	#BIO_C_SET_SOCKS
 135

	)

437 
	#BIO_C_SET_WRITE_BUF_SIZE
 136

	)

438 
	#BIO_C_GET_WRITE_BUF_SIZE
 137

	)

439 
	#BIO_C_MAKE_BIO_PAIR
 138

	)

440 
	#BIO_C_DESTROY_BIO_PAIR
 139

	)

441 
	#BIO_C_GET_WRITE_GUARANTEE
 140

	)

442 
	#BIO_C_GET_READ_REQUEST
 141

	)

443 
	#BIO_C_SHUTDOWN_WR
 142

	)

444 
	#BIO_C_NREAD0
 143

	)

445 
	#BIO_C_NREAD
 144

	)

446 
	#BIO_C_NWRITE0
 145

	)

447 
	#BIO_C_NWRITE
 146

	)

448 
	#BIO_C_RESET_READ_REQUEST
 147

	)

449 
	#BIO_C_SET_MD_CTX
 148

	)

451 
	#BIO_C_SET_PREFIX
 149

	)

452 
	#BIO_C_GET_PREFIX
 150

	)

453 
	#BIO_C_SET_SUFFIX
 151

	)

454 
	#BIO_C_GET_SUFFIX
 152

	)

456 
	#BIO_C_SET_EX_ARG
 153

	)

457 
	#BIO_C_GET_EX_ARG
 154

	)

459 
	#BIO_£t_≠p_d©a
(
s
,
¨g
Ë
	`BIO_£t_ex_d©a
(s,0,¨g)

	)

460 
	#BIO_gë_≠p_d©a
(
s
Ë
	`BIO_gë_ex_d©a
(s,0)

	)

463 
	#BIO_£t_c⁄n_ho°«me
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,0,(*Íame)

	)

464 
	#BIO_£t_c⁄n_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,1,(*Ì‹t)

	)

465 
	#BIO_£t_c⁄n_ù
(
b
,
ù
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,2,(*)ù)

	)

466 
	#BIO_£t_c⁄n_öt_p‹t
(
b
,
p‹t
Ë
	`BIO_˘æ
(b,
BIO_C_SET_CONNECT
,3,(*Ì‹t)

	)

467 
	#BIO_gë_c⁄n_ho°«me
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,0)

	)

468 
	#BIO_gë_c⁄n_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,1)

	)

469 
	#BIO_gë_c⁄n_ù
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_CONNECT
,2)

	)

470 
	#BIO_gë_c⁄n_öt_p‹t
(
b
Ë
	`BIO_öt_˘æ
(b,
BIO_C_GET_CONNECT
,3,0)

	)

473 
	#BIO_£t_nbio
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_NBIO
,“),
NULL
)

	)

476 
	#BIO_£t_ac˚±_p‹t
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,0,(*Íame)

	)

477 
	#BIO_gë_ac˚±_p‹t
(
b
Ë
	`BIO_±r_˘æ
(b,
BIO_C_GET_ACCEPT
,0)

	)

479 
	#BIO_£t_nbio_ac˚±
(
b
,
n
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,1,“)?(*)"a":
NULL
)

	)

480 
	#BIO_£t_ac˚±_bios
(
b
,
bio
Ë
	`BIO_˘æ
(b,
BIO_C_SET_ACCEPT
,2,(*)bio)

	)

482 
	#BIO_BIND_NORMAL
 0

	)

483 
	#BIO_BIND_REUSEADDR_IF_UNUSED
 1

	)

484 
	#BIO_BIND_REUSEADDR
 2

	)

485 
	#BIO_£t_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BIND_MODE
,mode,
NULL
)

	)

486 
	#BIO_gë_böd_mode
(
b
,
mode
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BIND_MODE
,0,
NULL
)

	)

488 
	#BIO_do_c⁄√˘
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

489 
	#BIO_do_ac˚±
(
b
Ë
	`BIO_do_h™dshake
(b)

	)

490 
	#BIO_do_h™dshake
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_DO_STATE_MACHINE
,0,
NULL
)

	)

493 
	#BIO_£t_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,0,(*)(uæ))

	)

494 
	#BIO_£t_¥oxõs
(
b
,
p
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,1,(*)’))

	)

496 
	#BIO_£t_fûãr_bio
(
b
,
s
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,2,(*)(s))

	)

498 
	#BIO_£t_¥oxy_cb
(
b
,
cb
Ë
	`BIO_ˇŒback_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,3,(*(*cb)()))

	)

499 
	#BIO_£t_¥oxy_hódî
(
b
,
sk
Ë
	`BIO_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,4,(*)sk)

	)

500 
	#BIO_£t_no_c⁄√˘_ªtu∫
(
b
,
boﬁ
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_PROXY_PARAM
,5,boﬁ)

	)

502 
	#BIO_gë_¥oxy_hódî
(
b
,
skp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,0,(*)skp)

	)

503 
	#BIO_gë_¥oxõs
(
b
,
pxy_p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,1,(*)’xy_p))

	)

504 
	#BIO_gë_uæ
(
b
,
uæ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,2,(*)(uæ))

	)

505 
	#BIO_gë_no_c⁄√˘_ªtu∫
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_PROXY_PARAM
,5,
NULL
)

	)

507 
	#BIO_£t_fd
(
b
,
fd
,
c
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_FD
,c,fd)

	)

508 
	#BIO_gë_fd
(
b
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FD
,0,(*)c)

	)

510 
	#BIO_£t_Â
(
b
,
Â
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILE_PTR
,c,(*)Â)

	)

511 
	#BIO_gë_Â
(
b
,
Âp
Ë
	`BIO_˘æ
(b,
BIO_C_GET_FILE_PTR
,0,(*)Âp)

	)

513 
	#BIO_£ek
(
b
,
ofs
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_SEEK
,ofs,
NULL
)

	)

514 
	#BIO_ãŒ
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_FILE_TELL
,0,
NULL
)

	)

518 #ifde‡
CONST_STRICT


522 
BIO_ªad_fûíame
(
BIO
 *
b
,c⁄° *
«me
);

524 
	#BIO_ªad_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

525 
BIO_CLOSE
|
BIO_FP_READ
,(*)
«me
)

	)

527 
	#BIO_wrôe_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

528 
BIO_CLOSE
|
BIO_FP_WRITE
,
«me
)

	)

529 
	#BIO_≠≥nd_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

530 
BIO_CLOSE
|
BIO_FP_APPEND
,
«me
)

	)

531 
	#BIO_rw_fûíame
(
b
,
«me
Ë
	`BIO_˘æ
(b,
BIO_C_SET_FILENAME
, \

532 
BIO_CLOSE
|
BIO_FP_READ
|
BIO_FP_WRITE
,
«me
)

	)

538 
	#BIO_£t_s¶
(
b
,
s¶
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_SSL
,c,(*)s¶)

	)

539 
	#BIO_gë_s¶
(
b
,
s¶p
Ë
	`BIO_˘æ
(b,
BIO_C_GET_SSL
,0,(*)s¶p)

	)

540 
	#BIO_£t_s¶_mode
(
b
,
˛õ¡
Ë
	`BIO_˘æ
(b,
BIO_C_SSL_MODE
,˛õ¡,
NULL
)

	)

541 
	#BIO_£t_s¶_ª√gŸüã_byãs
(
b
,
num
) \

542 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_BYTES
,
num
,
NULL
);

	)

543 
	#BIO_gë_num_ª√gŸüãs
(
b
) \

544 
	`BIO_˘æ
(
b
,
BIO_C_GET_SSL_NUM_RENEGOTIATES
,0,
NULL
);

	)

545 
	#BIO_£t_s¶_ª√gŸüã_timeout
(
b
,
£c⁄ds
) \

546 
	`BIO_˘æ
(
b
,
BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT
,
£c⁄ds
,
NULL
);

	)

551 
	#BIO_gë_mem_d©a
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_CTRL_INFO
,0,(*Ìp)

	)

552 
	#BIO_£t_mem_buf
(
b
,
bm
,
c
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUF_MEM
,c,(*)bm)

	)

553 
	#BIO_gë_mem_±r
(
b
,
µ
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUF_MEM_PTR
,0,(*Ìp)

	)

554 
	#BIO_£t_mem_eof_ªtu∫
(
b
,
v
) \

555 
	`BIO_˘æ
(
b
,
BIO_C_SET_BUF_MEM_EOF_RETURN
,
v
,
NULL
)

	)

558 
	#BIO_gë_buf„r_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_C_GET_BUFF_NUM_LINES
,0,
NULL
)

	)

559 
	#BIO_£t_buf„r_size
(
b
,
size
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,
NULL
)

	)

560 
	#BIO_£t_ªad_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,0)

	)

561 
	#BIO_£t_wrôe_buf„r_size
(
b
,
size
Ë
	`BIO_öt_˘æ
(b,
BIO_C_SET_BUFF_SIZE
,size,1)

	)

562 
	#BIO_£t_buf„r_ªad_d©a
(
b
,
buf
,
num
Ë
	`BIO_˘æ
(b,
BIO_C_SET_BUFF_READ_DATA
,num,buf)

	)

565 
	#BIO_dup_°©e
(
b
,
ªt
Ë
	`BIO_˘æ
(b,
BIO_CTRL_DUP
,0,(*)‘ë))

	)

567 
	#BIO_ª£t
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_RESET
,0,
NULL
)

	)

568 
	#BIO_eof
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_EOF
,0,
NULL
)

	)

569 
	#BIO_£t_˛o£
(
b
,
c
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_SET_CLOSE
,(c),
NULL
)

	)

570 
	#BIO_gë_˛o£
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CLOSE
,0,
NULL
)

	)

571 
	#BIO_≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_PENDING
,0,
NULL
)

	)

572 
	#BIO_w≥ndög
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_WPENDING
,0,
NULL
)

	)

574 
size_t
 
BIO_˘æ_≥ndög
(
BIO
 *
b
);

575 
size_t
 
BIO_˘æ_w≥ndög
(
BIO
 *
b
);

576 
	#BIO_Êush
(
b
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_FLUSH
,0,
NULL
)

	)

577 
	#BIO_gë_öfo_ˇŒback
(
b
,
cbp
Ë()
	`BIO_˘æ
(b,
BIO_CTRL_GET_CALLBACK
,0, \

578 
cbp
)

	)

579 
	#BIO_£t_öfo_ˇŒback
(
b
,
cb
Ë()
	`BIO_ˇŒback_˘æ
(b,
BIO_CTRL_SET_CALLBACK
,cb)

	)

582 
	#BIO_buf„r_gë_num_löes
(
b
Ë
	`BIO_˘æ
(b,
BIO_CTRL_GET
,0,
NULL
)

	)

585 
	#BIO_£t_wrôe_buf_size
(
b
,
size
Ë()
	`BIO_˘æ
(b,
BIO_C_SET_WRITE_BUF_SIZE
,size,
NULL
)

	)

586 
	#BIO_gë_wrôe_buf_size
(
b
,
size
Ë(
size_t
)
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_BUF_SIZE
,size,
NULL
)

	)

587 
	#BIO_make_bio_∑ú
(
b1
,
b2
Ë()
	`BIO_˘æ
(b1,
BIO_C_MAKE_BIO_PAIR
,0,b2)

	)

588 
	#BIO_de°roy_bio_∑ú
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_DESTROY_BIO_PAIR
,0,
NULL
)

	)

589 
	#BIO_shutdown_wr
(
b
Ë()
	`BIO_˘æ
(b, 
BIO_C_SHUTDOWN_WR
, 0, 
NULL
)

	)

591 
	#BIO_gë_wrôe_gu¨™ãe
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_WRITE_GUARANTEE
,0,
NULL
)

	)

592 
	#BIO_gë_ªad_ªque°
(
b
Ë()
	`BIO_˘æ
(b,
BIO_C_GET_READ_REQUEST
,0,
NULL
)

	)

593 
size_t
 
BIO_˘æ_gë_wrôe_gu¨™ãe
(
BIO
 *
b
);

594 
size_t
 
BIO_˘æ_gë_ªad_ªque°
(
BIO
 *
b
);

595 
BIO_˘æ_ª£t_ªad_ªque°
(
BIO
 *
b
);

598 
	#BIO_˘æ_dgøm_c⁄√˘
(
b
,
≥î
) \

599 ()
	`BIO_˘æ
(
b
,
BIO_CTRL_DGRAM_CONNECT
,0, (*)
≥î
)

	)

600 
	#BIO_˘æ_£t_c⁄√˘ed
(
b
, 
°©e
, 
≥î
) \

601 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_CONNECTED
, 
°©e
, (*)
≥î
)

	)

602 
	#BIO_dgøm_ªcv_timedout
(
b
) \

603 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_RECV_TIMER_EXP
, 0, 
NULL
)

	)

604 
	#BIO_dgøm_£nd_timedout
(
b
) \

605 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_SEND_TIMER_EXP
, 0, 
NULL
)

	)

606 
	#BIO_dgøm_gë_≥î
(
b
,
≥î
) \

607 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_GET_PEER
, 0, (*)
≥î
)

	)

608 
	#BIO_dgøm_£t_≥î
(
b
,
≥î
) \

609 ()
	`BIO_˘æ
(
b
, 
BIO_CTRL_DGRAM_SET_PEER
, 0, (*)
≥î
)

	)

614 
BIO_£t_ex_d©a
(
BIO
 *
bio
,
idx
,*
d©a
);

615 *
BIO_gë_ex_d©a
(
BIO
 *
bio
,
idx
);

616 
BIO_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

617 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

618 
BIO_numbî_ªad
(
BIO
 *
bio
);

619 
BIO_numbî_wrôãn
(
BIO
 *
bio
);

622 
BIO_a¢1_£t_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 *
¥efix
,

623 
a¢1_ps_func
 *
¥efix_‰ì
);

624 
BIO_a¢1_gë_¥efix
(
BIO
 *
b
, 
a¢1_ps_func
 **
µªfix
,

625 
a¢1_ps_func
 **
µªfix_‰ì
);

626 
BIO_a¢1_£t_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 *
suffix
,

627 
a¢1_ps_func
 *
suffix_‰ì
);

628 
BIO_a¢1_gë_suffix
(
BIO
 *
b
, 
a¢1_ps_func
 **
psuffix
,

629 
a¢1_ps_func
 **
psuffix_‰ì
);

631 #i‚de‡
OPENSSL_NO_FP_API


632 
BIO_METHOD
 *
BIO_s_fûe
();

633 
BIO
 *
BIO_√w_fûe
(c⁄° *
fûíame
, c⁄° *
mode
);

634 
BIO
 *
BIO_√w_Â
(
FILE
 *
°ªam
, 
˛o£_Êag
);

635 
	#BIO_s_fûe_öã∫Æ
 
BIO_s_fûe


	)

637 
BIO
 * 
BIO_√w
(
BIO_METHOD
 *
ty≥
);

638 
BIO_£t
(
BIO
 *
a
,
BIO_METHOD
 *
ty≥
);

639 
BIO_‰ì
(
BIO
 *
a
);

640 
BIO_v‰ì
(
BIO
 *
a
);

641 
BIO_ªad
(
BIO
 *
b
, *
d©a
, 
Àn
);

642 
BIO_gës
(
BIO
 *
bp
,*
buf
, 
size
);

643 
BIO_wrôe
(
BIO
 *
b
, c⁄° *
d©a
, 
Àn
);

644 
BIO_puts
(
BIO
 *
bp
,c⁄° *
buf
);

645 
BIO_ödít
(
BIO
 *
b
,
ödít
,
max
);

646 
BIO_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,*
∑rg
);

647 
BIO_ˇŒback_˘æ
(
BIO
 *
b
, 
cmd
, (*
Â
)(
bio_°
 *, , const *, , , ));

648 * 
BIO_±r_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
);

649 
BIO_öt_˘æ
(
BIO
 *
bp
,
cmd
,
œrg
,
ürg
);

650 
BIO
 * 
BIO_push
(BIO *
b
,BIO *
≠≥nd
);

651 
BIO
 * 
BIO_p›
(BIO *
b
);

652 
BIO_‰ì_Æl
(
BIO
 *
a
);

653 
BIO
 * 
BIO_föd_ty≥
(BIO *
b
,
bio_ty≥
);

654 
BIO
 * 
BIO_√xt
(BIO *
b
);

655 
BIO
 * 
BIO_gë_ªåy_BIO
(BIO *
bio
, *
ªas⁄
);

656 
BIO_gë_ªåy_ªas⁄
(
BIO
 *
bio
);

657 
BIO
 * 
BIO_dup_chaö
(BIO *
ö
);

659 
BIO_ƒód0
(
BIO
 *
bio
, **
buf
);

660 
BIO_ƒód
(
BIO
 *
bio
, **
buf
, 
num
);

661 
BIO_nwrôe0
(
BIO
 *
bio
, **
buf
);

662 
BIO_nwrôe
(
BIO
 *
bio
, **
buf
, 
num
);

664 
BIO_debug_ˇŒback
(
BIO
 *
bio
,
cmd
,c⁄° *
¨gp
,
¨gi
,

665 
¨gl
,
ªt
);

667 
BIO_METHOD
 *
BIO_s_mem
();

668 
BIO
 *
BIO_√w_mem_buf
(*
buf
, 
Àn
);

669 
BIO_METHOD
 *
BIO_s_sockë
();

670 
BIO_METHOD
 *
BIO_s_c⁄√˘
();

671 
BIO_METHOD
 *
BIO_s_ac˚±
();

672 
BIO_METHOD
 *
BIO_s_fd
();

673 #i‚de‡
OPENSSL_SYS_OS2


674 
BIO_METHOD
 *
BIO_s_log
();

676 
BIO_METHOD
 *
BIO_s_bio
();

677 
BIO_METHOD
 *
BIO_s_nuŒ
();

678 
BIO_METHOD
 *
BIO_f_nuŒ
();

679 
BIO_METHOD
 *
BIO_f_buf„r
();

680 #ifde‡
OPENSSL_SYS_VMS


681 
BIO_METHOD
 *
BIO_f_löebuf„r
();

683 
BIO_METHOD
 *
BIO_f_nbio_ã°
();

684 #i‚de‡
OPENSSL_NO_DGRAM


685 
BIO_METHOD
 *
BIO_s_d©agøm
();

686 #i‚de‡
OPENSSL_NO_SCTP


687 
BIO_METHOD
 *
BIO_s_d©agøm_s˘p
();

693 
BIO_sock_should_ªåy
(
i
);

694 
BIO_sock_n⁄_Áèl_îr‹
(
îr‹
);

695 
BIO_dgøm_n⁄_Áèl_îr‹
(
îr‹
);

697 
BIO_fd_should_ªåy
(
i
);

698 
BIO_fd_n⁄_Áèl_îr‹
(
îr‹
);

699 
BIO_dump_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

700 *
u
, c⁄° *
s
, 
Àn
);

701 
BIO_dump_ödít_cb
((*
cb
)(c⁄° *
d©a
, 
size_t
 
Àn
, *
u
),

702 *
u
, c⁄° *
s
, 
Àn
, 
ödít
);

703 
BIO_dump
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
);

704 
BIO_dump_ödít
(
BIO
 *
b
,c⁄° *
byãs
,
Àn
,
ödít
);

705 #i‚de‡
OPENSSL_NO_FP_API


706 
BIO_dump_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
);

707 
BIO_dump_ödít_Â
(
FILE
 *
Â
, c⁄° *
s
, 
Àn
, 
ödít
);

709 
ho°ít
 *
BIO_gëho°by«me
(c⁄° *
«me
);

718 
BIO_sock_îr‹
(
sock
);

719 
BIO_sockë_io˘l
(
fd
, 
ty≥
, *
¨g
);

720 
BIO_sockë_nbio
(
fd
,
mode
);

721 
BIO_gë_p‹t
(c⁄° *
°r
, *
p‹t_±r
);

722 
BIO_gë_ho°_ù
(c⁄° *
°r
, *
ù
);

723 
BIO_gë_ac˚±_sockë
(*
ho°_p‹t
,
mode
);

724 
BIO_ac˚±
(
sock
,**
ù_p‹t
);

725 
BIO_sock_öô
();

726 
BIO_sock_˛ónup
();

727 
BIO_£t_t˝_ndñay
(
sock
,
tu∫_⁄
);

729 
BIO
 *
BIO_√w_sockë
(
sock
, 
˛o£_Êag
);

730 
BIO
 *
BIO_√w_dgøm
(
fd
, 
˛o£_Êag
);

731 #i‚de‡
OPENSSL_NO_SCTP


732 
BIO
 *
BIO_√w_dgøm_s˘p
(
fd
, 
˛o£_Êag
);

733 
BIO_dgøm_is_s˘p
(
BIO
 *
bio
);

734 
BIO_dgøm_s˘p_nŸifiˇti⁄_cb
(
BIO
 *
b
,

735 (*
h™dÀ_nŸifiˇti⁄s
)(
BIO
 *
bio
, *
c⁄ãxt
, *
buf
),

736 *
c⁄ãxt
);

737 
BIO_dgøm_s˘p_waô_f‹_dry
(
BIO
 *
b
);

738 
BIO_dgøm_s˘p_msg_waôög
(
BIO
 *
b
);

740 
BIO
 *
BIO_√w_fd
(
fd
, 
˛o£_Êag
);

741 
BIO
 *
BIO_√w_c⁄√˘
(*
ho°_p‹t
);

742 
BIO
 *
BIO_√w_ac˚±
(*
ho°_p‹t
);

744 
BIO_√w_bio_∑ú
(
BIO
 **
bio1
, 
size_t
 
wrôebuf1
,

745 
BIO
 **
bio2
, 
size_t
 
wrôebuf2
);

751 
BIO_c›y_√xt_ªåy
(
BIO
 *
b
);

755 #ifde‡
__GNUC__


756 
	#__bio_h__©å__
 
__©åibuã__


	)

758 
	#__bio_h__©å__
(
x
)

	)

760 
BIO_¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, ...)

761 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,3)));

762 
BIO_v¥ötf
(
BIO
 *
bio
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

763 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,2,0)));

764 
BIO_¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, ...)

765 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,4)));

766 
BIO_v¢¥ötf
(*
buf
, 
size_t
 
n
, c⁄° *
f‹m©
, 
va_li°
 
¨gs
)

767 
__bio_h__©å__
((
__f‹m©__
(
__¥ötf__
,3,0)));

768 #unde‡
__bio_h__©å__


774 
ERR_lﬂd_BIO_°rögs
();

779 
	#BIO_F_ACPT_STATE
 100

	)

780 
	#BIO_F_BIO_ACCEPT
 101

	)

781 
	#BIO_F_BIO_BER_GET_HEADER
 102

	)

782 
	#BIO_F_BIO_CALLBACK_CTRL
 131

	)

783 
	#BIO_F_BIO_CTRL
 103

	)

784 
	#BIO_F_BIO_GETHOSTBYNAME
 120

	)

785 
	#BIO_F_BIO_GETS
 104

	)

786 
	#BIO_F_BIO_GET_ACCEPT_SOCKET
 105

	)

787 
	#BIO_F_BIO_GET_HOST_IP
 106

	)

788 
	#BIO_F_BIO_GET_PORT
 107

	)

789 
	#BIO_F_BIO_MAKE_PAIR
 121

	)

790 
	#BIO_F_BIO_NEW
 108

	)

791 
	#BIO_F_BIO_NEW_FILE
 109

	)

792 
	#BIO_F_BIO_NEW_MEM_BUF
 126

	)

793 
	#BIO_F_BIO_NREAD
 123

	)

794 
	#BIO_F_BIO_NREAD0
 124

	)

795 
	#BIO_F_BIO_NWRITE
 125

	)

796 
	#BIO_F_BIO_NWRITE0
 122

	)

797 
	#BIO_F_BIO_PUTS
 110

	)

798 
	#BIO_F_BIO_READ
 111

	)

799 
	#BIO_F_BIO_SOCK_INIT
 112

	)

800 
	#BIO_F_BIO_WRITE
 113

	)

801 
	#BIO_F_BUFFER_CTRL
 114

	)

802 
	#BIO_F_CONN_CTRL
 127

	)

803 
	#BIO_F_CONN_STATE
 115

	)

804 
	#BIO_F_DGRAM_SCTP_READ
 132

	)

805 
	#BIO_F_FILE_CTRL
 116

	)

806 
	#BIO_F_FILE_READ
 130

	)

807 
	#BIO_F_LINEBUFFER_CTRL
 129

	)

808 
	#BIO_F_MEM_READ
 128

	)

809 
	#BIO_F_MEM_WRITE
 117

	)

810 
	#BIO_F_SSL_NEW
 118

	)

811 
	#BIO_F_WSASTARTUP
 119

	)

814 
	#BIO_R_ACCEPT_ERROR
 100

	)

815 
	#BIO_R_BAD_FOPEN_MODE
 101

	)

816 
	#BIO_R_BAD_HOSTNAME_LOOKUP
 102

	)

817 
	#BIO_R_BROKEN_PIPE
 124

	)

818 
	#BIO_R_CONNECT_ERROR
 103

	)

819 
	#BIO_R_EOF_ON_MEMORY_BIO
 127

	)

820 
	#BIO_R_ERROR_SETTING_NBIO
 104

	)

821 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPTED_SOCKET
 105

	)

822 
	#BIO_R_ERROR_SETTING_NBIO_ON_ACCEPT_SOCKET
 106

	)

823 
	#BIO_R_GETHOSTBYNAME_ADDR_IS_NOT_AF_INET
 107

	)

824 
	#BIO_R_INVALID_ARGUMENT
 125

	)

825 
	#BIO_R_INVALID_IP_ADDRESS
 108

	)

826 
	#BIO_R_IN_USE
 123

	)

827 
	#BIO_R_KEEPALIVE
 109

	)

828 
	#BIO_R_NBIO_CONNECT_ERROR
 110

	)

829 
	#BIO_R_NO_ACCEPT_PORT_SPECIFIED
 111

	)

830 
	#BIO_R_NO_HOSTNAME_SPECIFIED
 112

	)

831 
	#BIO_R_NO_PORT_DEFINED
 113

	)

832 
	#BIO_R_NO_PORT_SPECIFIED
 114

	)

833 
	#BIO_R_NO_SUCH_FILE
 128

	)

834 
	#BIO_R_NULL_PARAMETER
 115

	)

835 
	#BIO_R_TAG_MISMATCH
 116

	)

836 
	#BIO_R_UNABLE_TO_BIND_SOCKET
 117

	)

837 
	#BIO_R_UNABLE_TO_CREATE_SOCKET
 118

	)

838 
	#BIO_R_UNABLE_TO_LISTEN_SOCKET
 119

	)

839 
	#BIO_R_UNINITIALIZED
 120

	)

840 
	#BIO_R_UNSUPPORTED_METHOD
 121

	)

841 
	#BIO_R_WRITE_TO_READ_ONLY_BIO
 126

	)

842 
	#BIO_R_WSASTARTUP
 122

	)

844 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/bn.h

125 #i‚de‡
HEADER_BN_H


126 
	#HEADER_BN_H


	)

128 
	~<›ís¶/e_os2.h
>

129 #i‚de‡
OPENSSL_NO_FP_API


130 
	~<°dio.h
>

132 
	~<›ís¶/os¶_typ.h
>

133 
	~<›ís¶/¸y±o.h
>

134 
	~<limôs.h
>

136 #ifde‡ 
__˝lu•lus


152 #i‚de‡
OPENSSL_SMALL_FOOTPRINT


153 
	#BN_MUL_COMBA


	)

154 
	#BN_SQR_COMBA


	)

155 
	#BN_RECURSION


	)

169 #i‡
deföed
(
OPENSSL_SYS_MSDOS
Ë|| deföed(
OPENSSL_SYS_WINDOWS
) || \

170 
deföed
(
OPENSSL_SYS_WIN32
Ë|| 
	$deföed
(
löux
)

171 #i‚de‡
BN_DIV2W


172 
	#BN_DIV2W


	)

179 #ifde‡
SIXTY_FOUR_BIT_LONG


180 
	#BN_ULLONG
 

	)

181 
	#BN_ULONG
 

	)

182 
	#BN_LONG
 

	)

183 
	#BN_BITS
 128

	)

184 
	#BN_BYTES
 8

	)

185 
	#BN_BITS2
 64

	)

186 
	#BN_BITS4
 32

	)

187 
	#BN_MASK
 (0xffffffffffffffffffffffffffffffffLL)

	)

188 
	#BN_MASK2
 (0xffffffffffffffffL)

	)

189 
	#BN_MASK2l
 (0xffffffffL)

	)

190 
	#BN_MASK2h
 (0xffffffff00000000L)

	)

191 
	#BN_MASK2h1
 (0xffffffff80000000L)

	)

192 
	#BN_TBIT
 (0x8000000000000000L)

	)

193 
	#BN_DEC_CONV
 (10000000000000000000UL)

	)

194 
	#BN_DEC_FMT1
 "%lu"

	)

195 
	#BN_DEC_FMT2
 "%019lu"

	)

196 
	#BN_DEC_NUM
 19

	)

197 
	#BN_HEX_FMT1
 "%lX"

	)

198 
	#BN_HEX_FMT2
 "%016lX"

	)

206 #ifde‡
SIXTY_FOUR_BIT


207 #unde‡
BN_LLONG


208 #unde‡
BN_ULLONG


209 
	#BN_ULONG
 

	)

210 
	#BN_LONG
 

	)

211 
	#BN_BITS
 128

	)

212 
	#BN_BYTES
 8

	)

213 
	#BN_BITS2
 64

	)

214 
	#BN_BITS4
 32

	)

215 
	#BN_MASK2
 (0xffffffffffffffffLL)

	)

216 
	#BN_MASK2l
 (0xffffffffL)

	)

217 
	#BN_MASK2h
 (0xffffffff00000000LL)

	)

218 
	#BN_MASK2h1
 (0xffffffff80000000LL)

	)

219 
	#BN_TBIT
 (0x8000000000000000LL)

	)

220 
	#BN_DEC_CONV
 (10000000000000000000ULL)

	)

221 
	#BN_DEC_FMT1
 "%Œu"

	)

222 
	#BN_DEC_FMT2
 "%019Œu"

	)

223 
	#BN_DEC_NUM
 19

	)

224 
	#BN_HEX_FMT1
 "%ŒX"

	)

225 
	#BN_HEX_FMT2
 "%016ŒX"

	)

228 #ifde‡
THIRTY_TWO_BIT


229 #ifde‡
BN_LLONG


230 #i‡
	`deföed
(
_WIN32
Ë&& !deföed(
__GNUC__
)

231 
	#BN_ULLONG
 
__öt64


	)

232 
	#BN_MASK
 (0xffffffffffffffff
I64
)

	)

234 
	#BN_ULLONG
 

	)

235 
	#BN_MASK
 (0xffffffffffffffffLL)

	)

238 
	#BN_ULONG
 

	)

239 
	#BN_LONG
 

	)

240 
	#BN_BITS
 64

	)

241 
	#BN_BYTES
 4

	)

242 
	#BN_BITS2
 32

	)

243 
	#BN_BITS4
 16

	)

244 
	#BN_MASK2
 (0xffffffffL)

	)

245 
	#BN_MASK2l
 (0xffff)

	)

246 
	#BN_MASK2h1
 (0xffff8000L)

	)

247 
	#BN_MASK2h
 (0xffff0000L)

	)

248 
	#BN_TBIT
 (0x80000000L)

	)

249 
	#BN_DEC_CONV
 (1000000000L)

	)

250 
	#BN_DEC_FMT1
 "%u"

	)

251 
	#BN_DEC_FMT2
 "%09u"

	)

252 
	#BN_DEC_NUM
 9

	)

253 
	#BN_HEX_FMT1
 "%X"

	)

254 
	#BN_HEX_FMT2
 "%08X"

	)

265 #i‡
	`deföed
(
OPENSSL_SYS_VMS
)

266 #i‡
__INITIAL_POINTER_SIZE
 == 64

267 
	#PTR_SIZE_INT
 

	)

269 
	#PTR_SIZE_INT
 

	)

272 
	#PTR_SIZE_INT
 
size_t


	)

275 
	#BN_DEFAULT_BITS
 1280

	)

277 
	#BN_FLG_MALLOCED
 0x01

	)

278 
	#BN_FLG_STATIC_DATA
 0x02

	)

279 
	#BN_FLG_CONSTTIME
 0x04

	)

285 #i‚de‡
OPENSSL_NO_DEPRECATED


286 
	#BN_FLG_EXP_CONSTTIME
 
BN_FLG_CONSTTIME


	)

291 #i‚de‡
OPENSSL_NO_DEPRECATED


292 
	#BN_FLG_FREE
 0x8000

	)

294 
	#BN_£t_Êags
(
b
,
n
Ë((b)->
Êags
|=“))

	)

295 
	#BN_gë_Êags
(
b
,
n
Ë((b)->
Êags
&“))

	)

299 
	#BN_wôh_Êags
(
de°
,
b
,
n
Ë((de°)->
d
=(b)->d, \

300 (
de°
)->
t›
=(
b
)->top, \

301 (
de°
)->
dmax
=(
b
)->dmax, \

302 (
de°
)->
√g
=(
b
)->neg, \

303 (
de°
)->
Êags
=(((de°)->Êag†& 
BN_FLG_MALLOCED
) \

304 | ((
b
)->
Êags
 & ~
BN_FLG_MALLOCED
) \

305 | 
BN_FLG_STATIC_DATA
 \

306 | (
n
)))

	)

310 
bignum_°
 
	tBIGNUM
;

312 
bignum_˘x
 
	tBN_CTX
;

313 
bn_blödög_°
 
	tBN_BLINDING
;

314 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

315 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

316 
bn_gícb_°
 
	tBN_GENCB
;

319 
	sbignum_°


321 
BN_ULONG
 *
d
;

322 
t›
;

324 
dmax
;

325 
√g
;

326 
Êags
;

330 
	sbn_m⁄t_˘x_°


332 
ri
;

333 
BIGNUM
 
RR
;

334 
BIGNUM
 
N
;

335 
BIGNUM
 
Ni
;

337 
BN_ULONG
 
n0
[2];

339 
Êags
;

345 
	sbn_ª˝_˘x_°


347 
BIGNUM
 
N
;

348 
BIGNUM
 
Nr
;

349 
num_bôs
;

350 
shi·
;

351 
Êags
;

355 
	sbn_gícb_°


357 
vî
;

358 *
¨g
;

362 (*
cb_1
)(, , *);

364 (*
cb_2
)(, , 
BN_GENCB
 *);

365 } 
cb
;

368 
	`BN_GENCB_ˇŒ
(
BN_GENCB
 *
cb
, 
a
, 
b
);

370 
	#BN_GENCB_£t_ﬁd
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

371 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

372 
tmp_gícb
->
vî
 = 1; \

373 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

374 
tmp_gícb
->
cb
.
cb_1
 = (
ˇŒback
); }

	)

376 
	#BN_GENCB_£t
(
gícb
, 
ˇŒback
, 
cb_¨g
) { \

377 
BN_GENCB
 *
tmp_gícb
 = (
gícb
); \

378 
tmp_gícb
->
vî
 = 2; \

379 
tmp_gícb
->
¨g
 = (
cb_¨g
); \

380 
tmp_gícb
->
cb
.
cb_2
 = (
ˇŒback
); }

	)

382 
	#BN_¥ime_checks
 0

	)

390 
	#BN_¥ime_checks_f‹_size
(
b
) ((b) >= 1300 ? 2 : \

391 (
b
) >= 850 ? 3 : \

392 (
b
) >= 650 ? 4 : \

393 (
b
) >= 550 ? 5 : \

394 (
b
) >= 450 ? 6 : \

395 (
b
) >= 400 ? 7 : \

396 (
b
) >= 350 ? 8 : \

397 (
b
) >= 300 ? 9 : \

398 (
b
) >= 250 ? 12 : \

399 (
b
) >= 200 ? 15 : \

400 (
b
) >= 150 ? 18 : \

401  27)

	)

403 
	#BN_num_byãs
(
a
Ë((
	`BN_num_bôs
◊)+7)/8)

	)

406 
	#BN_abs_is_w‹d
(
a
,
w
Ë(((◊)->
t›
 =1Ë&& (◊)->
d
[0] =(
BN_ULONG
)(w))) || \

407 (((
w
Ë=0Ë&& ((
a
)->
t›
 =0)))

	)

408 
	#BN_is_zîo
(
a
Ë(◊)->
t›
 =0)

	)

409 
	#BN_is_⁄e
(
a
Ë(
	`BN_abs_is_w‹d
(◊),1Ë&& !◊)->
√g
)

	)

410 
	#BN_is_w‹d
(
a
,
w
Ë(
	`BN_abs_is_w‹d
(◊),(w)Ë&& (!(wË|| !◊)->
√g
))

	)

411 
	#BN_is_odd
(
a
Ë((◊)->
t›
 > 0Ë&& (◊)->
d
[0] & 1))

	)

413 
	#BN_⁄e
(
a
Ë(
	`BN_£t_w‹d
(◊),1))

	)

414 
	#BN_zîo_ex
(
a
) \

416 
BIGNUM
 *
_tmp_bn
 = (
a
); \

417 
_tmp_bn
->
t›
 = 0; \

418 
_tmp_bn
->
√g
 = 0; \

419 } 0)

	)

420 #ifde‡
OPENSSL_NO_DEPRECATED


421 
	#BN_zîo
(
a
Ë
	`BN_zîo_ex
◊)

	)

423 
	#BN_zîo
(
a
Ë(
	`BN_£t_w‹d
(◊),0))

	)

426 c⁄° 
BIGNUM
 *
	`BN_vÆue_⁄e
();

427 * 
	`BN_›ti⁄s
();

428 
BN_CTX
 *
	`BN_CTX_√w
();

429 #i‚de‡
OPENSSL_NO_DEPRECATED


430 
	`BN_CTX_öô
(
BN_CTX
 *
c
);

432 
	`BN_CTX_‰ì
(
BN_CTX
 *
c
);

433 
	`BN_CTX_°¨t
(
BN_CTX
 *
˘x
);

434 
BIGNUM
 *
	`BN_CTX_gë
(
BN_CTX
 *
˘x
);

435 
	`BN_CTX_íd
(
BN_CTX
 *
˘x
);

436 
	`BN_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

437 
	`BN_p£udo_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

438 
	`BN_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

439 
	`BN_p£udo_ønd_ønge
(
BIGNUM
 *
∫d
, c⁄° BIGNUM *
ønge
);

440 
	`BN_num_bôs
(c⁄° 
BIGNUM
 *
a
);

441 
	`BN_num_bôs_w‹d
(
BN_ULONG
);

442 
BIGNUM
 *
	`BN_√w
();

443 
	`BN_öô
(
BIGNUM
 *);

444 
	`BN_˛ór_‰ì
(
BIGNUM
 *
a
);

445 
BIGNUM
 *
	`BN_c›y
(BIGNUM *
a
, c⁄° BIGNUM *
b
);

446 
	`BN_sw≠
(
BIGNUM
 *
a
, BIGNUM *
b
);

447 
BIGNUM
 *
	`BN_bö2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

448 
	`BN_bn2bö
(c⁄° 
BIGNUM
 *
a
, *
to
);

449 
BIGNUM
 *
	`BN_mpi2bn
(c⁄° *
s
,
Àn
,BIGNUM *
ªt
);

450 
	`BN_bn2mpi
(c⁄° 
BIGNUM
 *
a
, *
to
);

451 
	`BN_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

452 
	`BN_usub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

453 
	`BN_uadd
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

454 
	`BN_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

455 
	`BN_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

456 
	`BN_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,
BN_CTX
 *
˘x
);

461 
	`BN_£t_√g©ive
(
BIGNUM
 *
b
, 
n
);

466 
	#BN_is_√g©ive
(
a
Ë(◊)->
√g
 !0)

	)

468 
	`BN_div
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
,

469 
BN_CTX
 *
˘x
);

470 
	#BN_mod
(
ªm
,
m
,
d
,
˘x
Ë
	`BN_div
(
NULL
,‘em),(m),(d),(˘x))

	)

471 
	`BN_¬mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, c⁄° BIGNUM *
d
, 
BN_CTX
 *
˘x
);

472 
	`BN_mod_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

473 
	`BN_mod_add_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

474 
	`BN_mod_sub
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

475 
	`BN_mod_sub_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
m
);

476 
	`BN_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

477 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

478 
	`BN_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

479 
	`BN_mod_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

480 
	`BN_mod_lshi·1_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
m
);

481 
	`BN_mod_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

482 
	`BN_mod_lshi·_quick
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
, c⁄° BIGNUM *
m
);

484 
BN_ULONG
 
	`BN_mod_w‹d
(c⁄° 
BIGNUM
 *
a
, BN_ULONG 
w
);

485 
BN_ULONG
 
	`BN_div_w‹d
(
BIGNUM
 *
a
, BN_ULONG 
w
);

486 
	`BN_mul_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

487 
	`BN_add_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

488 
	`BN_sub_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

489 
	`BN_£t_w‹d
(
BIGNUM
 *
a
, 
BN_ULONG
 
w
);

490 
BN_ULONG
 
	`BN_gë_w‹d
(c⁄° 
BIGNUM
 *
a
);

492 
	`BN_cmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

493 
	`BN_‰ì
(
BIGNUM
 *
a
);

494 
	`BN_is_bô_£t
(c⁄° 
BIGNUM
 *
a
, 
n
);

495 
	`BN_lshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

496 
	`BN_lshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

497 
	`BN_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,
BN_CTX
 *
˘x
);

499 
	`BN_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

500 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

501 
	`BN_mod_exp_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

502 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

503 
	`BN_mod_exp_m⁄t_c⁄°time
(
BIGNUM
 *
º
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

504 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
ö_m⁄t
);

505 
	`BN_mod_exp_m⁄t_w‹d
(
BIGNUM
 *
r
, 
BN_ULONG
 
a
, c⁄° BIGNUM *
p
,

506 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
);

507 
	`BN_mod_exp2_m⁄t
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a1
, c⁄° BIGNUM *
p1
,

508 c⁄° 
BIGNUM
 *
a2
, c⁄° BIGNUM *
p2
,c⁄° BIGNUM *
m
,

509 
BN_CTX
 *
˘x
,
BN_MONT_CTX
 *
m_˘x
);

510 
	`BN_mod_exp_sim∂e
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

511 c⁄° 
BIGNUM
 *
m
,
BN_CTX
 *
˘x
);

513 
	`BN_mask_bôs
(
BIGNUM
 *
a
,
n
);

514 #i‚de‡
OPENSSL_NO_FP_API


515 
	`BN_¥öt_Â
(
FILE
 *
Â
, c⁄° 
BIGNUM
 *
a
);

517 #ifde‡
HEADER_BIO_H


518 
	`BN_¥öt
(
BIO
 *
Â
, c⁄° 
BIGNUM
 *
a
);

520 
	`BN_¥öt
(*
Â
, c⁄° 
BIGNUM
 *
a
);

522 
	`BN_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
m
, 
Àn
, 
BN_CTX
 *
˘x
);

523 
	`BN_rshi·
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, 
n
);

524 
	`BN_rshi·1
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
);

525 
	`BN_˛ór
(
BIGNUM
 *
a
);

526 
BIGNUM
 *
	`BN_dup
(c⁄° BIGNUM *
a
);

527 
	`BN_ucmp
(c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
b
);

528 
	`BN_£t_bô
(
BIGNUM
 *
a
, 
n
);

529 
	`BN_˛ór_bô
(
BIGNUM
 *
a
, 
n
);

530 * 
	`BN_bn2hex
(c⁄° 
BIGNUM
 *
a
);

531 * 
	`BN_bn2dec
(c⁄° 
BIGNUM
 *
a
);

532 
	`BN_hex2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

533 
	`BN_dec2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

534 
	`BN_asc2bn
(
BIGNUM
 **
a
, c⁄° *
°r
);

535 
	`BN_gcd
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

536 
	`BN_kr⁄eckî
(c⁄° 
BIGNUM
 *
a
,c⁄° BIGNUM *
b
,
BN_CTX
 *
˘x
);

537 
BIGNUM
 *
	`BN_mod_övî£
(BIGNUM *
ªt
,

538 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

539 
BIGNUM
 *
	`BN_mod_sqπ
(BIGNUM *
ªt
,

540 c⁄° 
BIGNUM
 *
a
, c⁄° BIGNUM *
n
,
BN_CTX
 *
˘x
);

542 
	`BN_c⁄°time_sw≠
(
BN_ULONG
 
sw≠
, 
BIGNUM
 *
a
, BIGNUM *
b
, 
nw‹ds
);

545 #i‚de‡
OPENSSL_NO_DEPRECATED


546 
BIGNUM
 *
	`BN_gíî©e_¥ime
(BIGNUM *
ªt
,
bôs
,
ß„
,

547 c⁄° 
BIGNUM
 *
add
, c⁄° BIGNUM *
ªm
,

548 (*
ˇŒback
)(,,*),*
cb_¨g
);

549 
	`BN_is_¥ime
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

550 (*
ˇŒback
)(,,*),

551 
BN_CTX
 *
˘x
,*
cb_¨g
);

552 
	`BN_is_¥ime_Á°ã°
(c⁄° 
BIGNUM
 *
p
,
nchecks
,

553 (*
ˇŒback
)(,,*),
BN_CTX
 *
˘x
,*
cb_¨g
,

554 
do_åül_divisi⁄
);

558 
	`BN_gíî©e_¥ime_ex
(
BIGNUM
 *
ªt
,
bôs
,
ß„
, c⁄° BIGNUM *
add
,

559 c⁄° 
BIGNUM
 *
ªm
, 
BN_GENCB
 *
cb
);

560 
	`BN_is_¥ime_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

561 
	`BN_is_¥ime_Á°ã°_ex
(c⁄° 
BIGNUM
 *
p
,
nchecks
, 
BN_CTX
 *
˘x
,

562 
do_åül_divisi⁄
, 
BN_GENCB
 *
cb
);

564 
	`BN_X931_gíî©e_Xpq
(
BIGNUM
 *
Xp
, BIGNUM *
Xq
, 
nbôs
, 
BN_CTX
 *
˘x
);

566 
	`BN_X931_dîive_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

567 c⁄° 
BIGNUM
 *
Xp
, c⁄° BIGNUM *
Xp1
, c⁄° BIGNUM *
Xp2
,

568 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
, 
BN_GENCB
 *
cb
);

569 
	`BN_X931_gíî©e_¥ime_ex
(
BIGNUM
 *
p
, BIGNUM *
p1
, BIGNUM *
p2
,

570 
BIGNUM
 *
Xp1
, BIGNUM *
Xp2
,

571 c⁄° 
BIGNUM
 *
Xp
,

572 c⁄° 
BIGNUM
 *
e
, 
BN_CTX
 *
˘x
,

573 
BN_GENCB
 *
cb
);

575 
BN_MONT_CTX
 *
	`BN_MONT_CTX_√w
();

576 
	`BN_MONT_CTX_öô
(
BN_MONT_CTX
 *
˘x
);

577 
	`BN_mod_mul_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,c⁄° BIGNUM *
b
,

578 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

579 
	#BN_to_m⁄tgomîy
(
r
,
a
,
m⁄t
,
˘x
Ë
	`BN_mod_mul_m⁄tgomîy
(\

580 (
r
),(
a
),&((
m⁄t
)->
RR
),(m⁄t),(
˘x
))

	)

581 
	`BN_‰om_m⁄tgomîy
(
BIGNUM
 *
r
,c⁄° BIGNUM *
a
,

582 
BN_MONT_CTX
 *
m⁄t
, 
BN_CTX
 *
˘x
);

583 
	`BN_MONT_CTX_‰ì
(
BN_MONT_CTX
 *
m⁄t
);

584 
	`BN_MONT_CTX_£t
(
BN_MONT_CTX
 *
m⁄t
,c⁄° 
BIGNUM
 *
mod
,
BN_CTX
 *
˘x
);

585 
BN_MONT_CTX
 *
	`BN_MONT_CTX_c›y
(BN_MONT_CTX *
to
,BN_MONT_CTX *
‰om
);

586 
BN_MONT_CTX
 *
	`BN_MONT_CTX_£t_locked
(BN_MONT_CTX **
pm⁄t
, 
lock
,

587 c⁄° 
BIGNUM
 *
mod
, 
BN_CTX
 *
˘x
);

590 
	#BN_BLINDING_NO_UPDATE
 0x00000001

	)

591 
	#BN_BLINDING_NO_RECREATE
 0x00000002

	)

593 
BN_BLINDING
 *
	`BN_BLINDING_√w
(c⁄° 
BIGNUM
 *
A
, c⁄° BIGNUM *
Ai
, BIGNUM *
mod
);

594 
	`BN_BLINDING_‰ì
(
BN_BLINDING
 *
b
);

595 
	`BN_BLINDING_upd©e
(
BN_BLINDING
 *
b
,
BN_CTX
 *
˘x
);

596 
	`BN_BLINDING_c⁄vît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

597 
	`BN_BLINDING_övît
(
BIGNUM
 *
n
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *
˘x
);

598 
	`BN_BLINDING_c⁄vît_ex
(
BIGNUM
 *
n
, BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

599 
	`BN_BLINDING_övît_ex
(
BIGNUM
 *
n
, c⁄° BIGNUM *
r
, 
BN_BLINDING
 *
b
, 
BN_CTX
 *);

600 #i‚de‡
OPENSSL_NO_DEPRECATED


601 
	`BN_BLINDING_gë_thªad_id
(c⁄° 
BN_BLINDING
 *);

602 
	`BN_BLINDING_£t_thªad_id
(
BN_BLINDING
 *, );

604 
CRYPTO_THREADID
 *
	`BN_BLINDING_thªad_id
(
BN_BLINDING
 *);

605 
	`BN_BLINDING_gë_Êags
(c⁄° 
BN_BLINDING
 *);

606 
	`BN_BLINDING_£t_Êags
(
BN_BLINDING
 *, );

607 
BN_BLINDING
 *
	`BN_BLINDING_¸óã_∑øm
(BN_BLINDING *
b
,

608 c⁄° 
BIGNUM
 *
e
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

609 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

610 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
, 
BN_MONT_CTX
 *
m_˘x
),

611 
BN_MONT_CTX
 *
m_˘x
);

613 #i‚de‡
OPENSSL_NO_DEPRECATED


614 
	`BN_£t_∑øms
(
mul
,
high
,
low
,
m⁄t
);

615 
	`BN_gë_∑øms
(
which
);

618 
	`BN_RECP_CTX_öô
(
BN_RECP_CTX
 *
ª˝
);

619 
BN_RECP_CTX
 *
	`BN_RECP_CTX_√w
();

620 
	`BN_RECP_CTX_‰ì
(
BN_RECP_CTX
 *
ª˝
);

621 
	`BN_RECP_CTX_£t
(
BN_RECP_CTX
 *
ª˝
,c⁄° 
BIGNUM
 *
rdiv
,
BN_CTX
 *
˘x
);

622 
	`BN_mod_mul_ªcùroˇl
(
BIGNUM
 *
r
, c⁄° BIGNUM *
x
, c⁄° BIGNUM *
y
,

623 
BN_RECP_CTX
 *
ª˝
,
BN_CTX
 *
˘x
);

624 
	`BN_mod_exp_ª˝
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

625 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
);

626 
	`BN_div_ª˝
(
BIGNUM
 *
dv
, BIGNUM *
ªm
, c⁄° BIGNUM *
m
,

627 
BN_RECP_CTX
 *
ª˝
, 
BN_CTX
 *
˘x
);

629 #i‚de‡
OPENSSL_NO_EC2M


640 
	`BN_GF2m_add
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
);

641 
	#BN_GF2m_sub
(
r
, 
a
, 
b
Ë
	`BN_GF2m_add
‘,á, b)

	)

642 
	`BN_GF2m_mod
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
);

643 
	`BN_GF2m_mod_mul
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

644 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

645 
	`BN_GF2m_mod_sqr
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

646 
BN_CTX
 *
˘x
);

647 
	`BN_GF2m_mod_öv
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° BIGNUM *
p
,

648 
BN_CTX
 *
˘x
);

649 
	`BN_GF2m_mod_div
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

650 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

651 
	`BN_GF2m_mod_exp
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

652 c⁄° 
BIGNUM
 *
p
, 
BN_CTX
 *
˘x
);

653 
	`BN_GF2m_mod_sqπ
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

654 
BN_CTX
 *
˘x
);

655 
	`BN_GF2m_mod_sﬁve_quad
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

656 
BN_CTX
 *
˘x
);

657 
	#BN_GF2m_cmp
(
a
, 
b
Ë
	`BN_ucmp
(◊), (b))

	)

663 
	`BN_GF2m_mod_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[]);

665 
	`BN_GF2m_mod_mul_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

666 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

667 
	`BN_GF2m_mod_sqr_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° 
p
[],

668 
BN_CTX
 *
˘x
);

669 
	`BN_GF2m_mod_öv_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
b
, c⁄° 
p
[],

670 
BN_CTX
 *
˘x
);

671 
	`BN_GF2m_mod_div_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

672 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

673 
	`BN_GF2m_mod_exp_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
,

674 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

675 
	`BN_GF2m_mod_sqπ_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

676 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

677 
	`BN_GF2m_mod_sﬁve_quad_¨r
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

678 c⁄° 
p
[], 
BN_CTX
 *
˘x
);

679 
	`BN_GF2m_pﬁy2¨r
(c⁄° 
BIGNUM
 *
a
, 
p
[], 
max
);

680 
	`BN_GF2m_¨r2pﬁy
(c⁄° 
p
[], 
BIGNUM
 *
a
);

686 
	`BN_ni°_mod_192
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

687 
	`BN_ni°_mod_224
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

688 
	`BN_ni°_mod_256
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

689 
	`BN_ni°_mod_384
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

690 
	`BN_ni°_mod_521
(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
, 
BN_CTX
 *
˘x
);

692 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_192
();

693 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_224
();

694 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_256
();

695 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_384
();

696 c⁄° 
BIGNUM
 *
	`BN_gë0_ni°_¥ime_521
();

700 
	#bn_ex∑nd
(
a
,
bôs
) \

702 
bôs
 > (
INT_MAX
 - 
BN_BITS2
 + 1) ? \

703 
NULL
 \

705 (((
bôs
+
BN_BITS2
-1)/BN_BITS2Ë<(
a
)->
dmax
) ? \

706 (
a
) \

708 
	`bn_ex∑nd2
((
a
),(
bôs
+
BN_BITS2
-1)/BN_BITS2) \

709 )

	)

711 
	#bn_wex∑nd
(
a
,
w‹ds
Ë(((w‹dsË<◊)->
dmax
)?◊):
	`bn_ex∑nd2
(◊),(w‹ds)))

	)

712 
BIGNUM
 *
	`bn_ex∑nd2
(BIGNUM *
a
, 
w‹ds
);

713 #i‚de‡
OPENSSL_NO_DEPRECATED


714 
BIGNUM
 *
	`bn_dup_ex∑nd
(c⁄° BIGNUM *
a
, 
w‹ds
);

745 #ifde‡
BN_DEBUG


748 
	~<as£π.h
>

750 #ifde‡
BN_DEBUG_RAND


752 #i‚de‡
RAND_p£udo_byãs


753 
	`RAND_p£udo_byãs
(*
buf
,
num
);

754 
	#BN_DEBUG_TRIX


	)

756 
	#bn_pﬁluã
(
a
) \

758 c⁄° 
BIGNUM
 *
_bnum1
 = (
a
); \

759 if(
_bnum1
->
t›
 < _bnum1->
dmax
) { \

760 
_tmp_ch¨
; \

764 
BN_ULONG
 *
_nŸ_c⁄°
; \

765 
	`mem˝y
(&
_nŸ_c⁄°
, &
_bnum1
->
d
, (
BN_ULONG
*)); \

766 
	`RAND_p£udo_byãs
(&
_tmp_ch¨
, 1); \

767 
	`mem£t
((*)(
_nŸ_c⁄°
 + 
_bnum1
->
t›
), 
_tmp_ch¨
, \

768 (
_bnum1
->
dmax
 - _bnum1->
t›
Ë* (
BN_ULONG
)); \

770 } 0)

	)

771 #ifde‡
BN_DEBUG_TRIX


772 #unde‡
RAND_p£udo_byãs


775 
	#bn_pﬁluã
(
a
)

	)

777 
	#bn_check_t›
(
a
) \

779 c⁄° 
BIGNUM
 *
_bnum2
 = (
a
); \

780 i‡(
_bnum2
 !
NULL
) { \

781 
	`as£π
((
_bnum2
->
t›
 == 0) || \

782 (
_bnum2
->
d
[_bnum2->
t›
 - 1] != 0)); \

783 
	`bn_pﬁluã
(
_bnum2
); \

785 } 0)

	)

787 
	#bn_fix_t›
(
a
Ë
	`bn_check_t›
◊)

	)

789 
	#bn_check_size
(
bn
, 
bôs
Ë
	`bn_wcheck_size
(bn, ((bôs+
BN_BITS2
-1))/BN_BITS2)

	)

790 
	#bn_wcheck_size
(
bn
, 
w‹ds
) \

792 c⁄° 
BIGNUM
 *
_bnum2
 = (
bn
); \

793 
	`as£π
(
w‹ds
 <(
_bnum2
)->
dmax
 && w‹d†>(_bnum2)->
t›
); \

794 } 0)

	)

798 
	#bn_pﬁluã
(
a
)

	)

799 
	#bn_check_t›
(
a
)

	)

800 
	#bn_fix_t›
(
a
Ë
	`bn_c‹ª˘_t›
◊)

	)

801 
	#bn_check_size
(
bn
, 
bôs
)

	)

802 
	#bn_wcheck_size
(
bn
, 
w‹ds
)

	)

806 
	#bn_c‹ª˘_t›
(
a
) \

808 
BN_ULONG
 *
·l
; \

809 
tmp_t›
 = (
a
)->
t›
; \

810 i‡(
tmp_t›
 > 0) \

812 
·l
&((
a
)->
d
[
tmp_t›
-1]);Åmp_top > 0;Åmp_top--) \

813 i‡(*(
·l
--)) ; \

814 (
a
)->
t›
 = 
tmp_t›
; \

816 
	`bn_pﬁluã
(
a
); \

817 }

	)

819 
BN_ULONG
 
	`bn_mul_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

820 
BN_ULONG
 
	`bn_mul_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, 
num
, BN_ULONG 
w
);

821 
	`bn_sqr_w‹ds
(
BN_ULONG
 *
Ω
, c⁄° BN_ULONG *
≠
, 
num
);

822 
BN_ULONG
 
	`bn_div_w‹ds
(BN_ULONG 
h
, BN_ULONG 
l
, BN_ULONG 
d
);

823 
BN_ULONG
 
	`bn_add_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

824 
BN_ULONG
 
	`bn_sub_w‹ds
(BN_ULONG *
Ω
, c⁄° BN_ULONG *
≠
, c⁄° BN_ULONG *
bp
,
num
);

827 
BIGNUM
 *
	`gë_rfc2409_¥ime_768
(BIGNUM *
bn
);

828 
BIGNUM
 *
	`gë_rfc2409_¥ime_1024
(BIGNUM *
bn
);

831 
BIGNUM
 *
	`gë_rfc3526_¥ime_1536
(BIGNUM *
bn
);

832 
BIGNUM
 *
	`gë_rfc3526_¥ime_2048
(BIGNUM *
bn
);

833 
BIGNUM
 *
	`gë_rfc3526_¥ime_3072
(BIGNUM *
bn
);

834 
BIGNUM
 *
	`gë_rfc3526_¥ime_4096
(BIGNUM *
bn
);

835 
BIGNUM
 *
	`gë_rfc3526_¥ime_6144
(BIGNUM *
bn
);

836 
BIGNUM
 *
	`gë_rfc3526_¥ime_8192
(BIGNUM *
bn
);

838 
	`BN_b¡e°_ønd
(
BIGNUM
 *
∫d
, 
bôs
, 
t›
,
bŸtom
);

844 
	`ERR_lﬂd_BN_°rögs
();

849 
	#BN_F_BNRAND
 127

	)

850 
	#BN_F_BN_BLINDING_CONVERT_EX
 100

	)

851 
	#BN_F_BN_BLINDING_CREATE_PARAM
 128

	)

852 
	#BN_F_BN_BLINDING_INVERT_EX
 101

	)

853 
	#BN_F_BN_BLINDING_NEW
 102

	)

854 
	#BN_F_BN_BLINDING_UPDATE
 103

	)

855 
	#BN_F_BN_BN2DEC
 104

	)

856 
	#BN_F_BN_BN2HEX
 105

	)

857 
	#BN_F_BN_CTX_GET
 116

	)

858 
	#BN_F_BN_CTX_NEW
 106

	)

859 
	#BN_F_BN_CTX_START
 129

	)

860 
	#BN_F_BN_DIV
 107

	)

861 
	#BN_F_BN_DIV_NO_BRANCH
 138

	)

862 
	#BN_F_BN_DIV_RECP
 130

	)

863 
	#BN_F_BN_EXP
 123

	)

864 
	#BN_F_BN_EXPAND2
 108

	)

865 
	#BN_F_BN_EXPAND_INTERNAL
 120

	)

866 
	#BN_F_BN_GF2M_MOD
 131

	)

867 
	#BN_F_BN_GF2M_MOD_EXP
 132

	)

868 
	#BN_F_BN_GF2M_MOD_MUL
 133

	)

869 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD
 134

	)

870 
	#BN_F_BN_GF2M_MOD_SOLVE_QUAD_ARR
 135

	)

871 
	#BN_F_BN_GF2M_MOD_SQR
 136

	)

872 
	#BN_F_BN_GF2M_MOD_SQRT
 137

	)

873 
	#BN_F_BN_MOD_EXP2_MONT
 118

	)

874 
	#BN_F_BN_MOD_EXP_MONT
 109

	)

875 
	#BN_F_BN_MOD_EXP_MONT_CONSTTIME
 124

	)

876 
	#BN_F_BN_MOD_EXP_MONT_WORD
 117

	)

877 
	#BN_F_BN_MOD_EXP_RECP
 125

	)

878 
	#BN_F_BN_MOD_EXP_SIMPLE
 126

	)

879 
	#BN_F_BN_MOD_INVERSE
 110

	)

880 
	#BN_F_BN_MOD_INVERSE_NO_BRANCH
 139

	)

881 
	#BN_F_BN_MOD_LSHIFT_QUICK
 119

	)

882 
	#BN_F_BN_MOD_MUL_RECIPROCAL
 111

	)

883 
	#BN_F_BN_MOD_SQRT
 121

	)

884 
	#BN_F_BN_MPI2BN
 112

	)

885 
	#BN_F_BN_NEW
 113

	)

886 
	#BN_F_BN_RAND
 114

	)

887 
	#BN_F_BN_RAND_RANGE
 122

	)

888 
	#BN_F_BN_USUB
 115

	)

891 
	#BN_R_ARG2_LT_ARG3
 100

	)

892 
	#BN_R_BAD_RECIPROCAL
 101

	)

893 
	#BN_R_BIGNUM_TOO_LONG
 114

	)

894 
	#BN_R_CALLED_WITH_EVEN_MODULUS
 102

	)

895 
	#BN_R_DIV_BY_ZERO
 103

	)

896 
	#BN_R_ENCODING_ERROR
 104

	)

897 
	#BN_R_EXPAND_ON_STATIC_BIGNUM_DATA
 105

	)

898 
	#BN_R_INPUT_NOT_REDUCED
 110

	)

899 
	#BN_R_INVALID_LENGTH
 106

	)

900 
	#BN_R_INVALID_RANGE
 115

	)

901 
	#BN_R_NOT_A_SQUARE
 111

	)

902 
	#BN_R_NOT_INITIALIZED
 107

	)

903 
	#BN_R_NO_INVERSE
 108

	)

904 
	#BN_R_NO_SOLUTION
 116

	)

905 
	#BN_R_P_IS_NOT_PRIME
 112

	)

906 
	#BN_R_TOO_MANY_ITERATIONS
 113

	)

907 
	#BN_R_TOO_MANY_TEMPORARY_VARIABLES
 109

	)

909 #ifde‡ 
__˝lu•lus


910 
	}
}

	@/usr/include/openssl/buffer.h

59 #i‚de‡
HEADER_BUFFER_H


60 
	#HEADER_BUFFER_H


	)

62 
	~<›ís¶/os¶_typ.h
>

64 #ifde‡ 
__˝lu•lus


68 
	~<°ddef.h
>

70 #i‡!
deföed
(
NO_SYS_TYPES_H
)

71 
	~<sys/ty≥s.h
>

77 
	sbuf_mem_°


79 
size_t
 
Àngth
;

80 *
d©a
;

81 
size_t
 
max
;

84 
BUF_MEM
 *
BUF_MEM_√w
();

85 
BUF_MEM_‰ì
(
BUF_MEM
 *
a
);

86 
BUF_MEM_grow
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

87 
BUF_MEM_grow_˛ón
(
BUF_MEM
 *
°r
, 
size_t
 
Àn
);

88 * 
BUF_°rdup
(c⁄° *
°r
);

89 * 
BUF_°∫dup
(c⁄° *
°r
, 
size_t
 
siz
);

90 * 
BUF_memdup
(c⁄° *
d©a
, 
size_t
 
siz
);

91 
BUF_ªvî£
(*
out
, *
ö
, 
size_t
 
siz
);

94 
size_t
 
BUF_°æ˝y
(*
d°
,c⁄° *
§c
,size_à
siz
);

95 
size_t
 
BUF_°æˇt
(*
d°
,c⁄° *
§c
,size_à
siz
);

102 
ERR_lﬂd_BUF_°rögs
();

107 
	#BUF_F_BUF_MEMDUP
 103

	)

108 
	#BUF_F_BUF_MEM_GROW
 100

	)

109 
	#BUF_F_BUF_MEM_GROW_CLEAN
 105

	)

110 
	#BUF_F_BUF_MEM_NEW
 101

	)

111 
	#BUF_F_BUF_STRDUP
 102

	)

112 
	#BUF_F_BUF_STRNDUP
 104

	)

116 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/comp.h

2 #i‚de‡
HEADER_COMP_H


3 
	#HEADER_COMP_H


	)

5 
	~<›ís¶/¸y±o.h
>

7 #ifde‡ 
__˝lu•lus


11 
comp_˘x_°
 
	tCOMP_CTX
;

13 
	scomp_mëhod_°


15 
ty≥
;

16 c⁄° *
«me
;

17 (*
öô
)(
COMP_CTX
 *
˘x
);

18 (*
föish
)(
COMP_CTX
 *
˘x
);

19 (*
com¥ess
)(
COMP_CTX
 *
˘x
,

20 *
out
, 
ﬁí
,

21 *
ö
, 
ûí
);

22 (*
ex∑nd
)(
COMP_CTX
 *
˘x
,

23 *
out
, 
ﬁí
,

24 *
ö
, 
ûí
);

26 (*
˘æ
)();

27 (*
ˇŒback_˘æ
)();

28 } 
	tCOMP_METHOD
;

30 
	scomp_˘x_°


32 
COMP_METHOD
 *
mëh
;

33 
com¥ess_ö
;

34 
com¥ess_out
;

35 
ex∑nd_ö
;

36 
ex∑nd_out
;

38 
CRYPTO_EX_DATA
 
ex_d©a
;

42 
COMP_CTX
 *
COMP_CTX_√w
(
COMP_METHOD
 *
mëh
);

43 
COMP_CTX_‰ì
(
COMP_CTX
 *
˘x
);

44 
COMP_com¥ess_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

45 *
ö
, 
ûí
);

46 
COMP_ex∑nd_block
(
COMP_CTX
 *
˘x
, *
out
, 
ﬁí
,

47 *
ö
, 
ûí
);

48 
COMP_METHOD
 *
COMP_æe
();

49 
COMP_METHOD
 *
COMP_zlib
();

50 
COMP_zlib_˛ónup
();

52 #ifde‡
HEADER_BIO_H


53 #ifde‡
ZLIB


54 
BIO_METHOD
 *
BIO_f_zlib
();

62 
ERR_lﬂd_COMP_°rögs
();

67 
	#COMP_F_BIO_ZLIB_FLUSH
 99

	)

68 
	#COMP_F_BIO_ZLIB_NEW
 100

	)

69 
	#COMP_F_BIO_ZLIB_READ
 101

	)

70 
	#COMP_F_BIO_ZLIB_WRITE
 102

	)

73 
	#COMP_R_ZLIB_DEFLATE_ERROR
 99

	)

74 
	#COMP_R_ZLIB_INFLATE_ERROR
 100

	)

75 
	#COMP_R_ZLIB_NOT_SUPPORTED
 101

	)

77 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/crypto.h

117 #i‚de‡
HEADER_CRYPTO_H


118 
	#HEADER_CRYPTO_H


	)

120 
	~<°dlib.h
>

122 
	~<›ís¶/e_os2.h
>

124 #i‚de‡
OPENSSL_NO_FP_API


125 
	~<°dio.h
>

128 
	~<›ís¶/°ack.h
>

129 
	~<›ís¶/ß„°ack.h
>

130 
	~<›ís¶/›ís¶v.h
>

131 
	~<›ís¶/os¶_typ.h
>

133 #ifde‡
CHARSET_EBCDIC


134 
	~<›ís¶/ebcdic.h
>

139 
	~<›ís¶/symhacks.h
>

141 #ifde‡ 
__˝lu•lus


148 
	#SSLEAY_VERSION_NUMBER
 
OPENSSL_VERSION_NUMBER


	)

149 
	#SSLEAY_VERSION
 0

	)

151 
	#SSLEAY_CFLAGS
 2

	)

152 
	#SSLEAY_BUILT_ON
 3

	)

153 
	#SSLEAY_PLATFORM
 4

	)

154 
	#SSLEAY_DIR
 5

	)

158 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

160 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

161 
	tidx
, 
	t¨gl
, *
	t¨gp
);

163 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

164 
	tidx
, 
	t¨gl
, *
	t¨gp
);

166 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

167 
	tidx
, 
	t¨gl
, *
	t¨gp
);

171 
	s›ís¶_ôem_°


173 
code
;

174 *
vÆue
;

175 
size_t
 
vÆue_size
;

176 
size_t
 *
vÆue_Àngth
;

177 } 
	tOPENSSL_ITEM
;

184 
	#CRYPTO_LOCK_ERR
 1

	)

185 
	#CRYPTO_LOCK_EX_DATA
 2

	)

186 
	#CRYPTO_LOCK_X509
 3

	)

187 
	#CRYPTO_LOCK_X509_INFO
 4

	)

188 
	#CRYPTO_LOCK_X509_PKEY
 5

	)

189 
	#CRYPTO_LOCK_X509_CRL
 6

	)

190 
	#CRYPTO_LOCK_X509_REQ
 7

	)

191 
	#CRYPTO_LOCK_DSA
 8

	)

192 
	#CRYPTO_LOCK_RSA
 9

	)

193 
	#CRYPTO_LOCK_EVP_PKEY
 10

	)

194 
	#CRYPTO_LOCK_X509_STORE
 11

	)

195 
	#CRYPTO_LOCK_SSL_CTX
 12

	)

196 
	#CRYPTO_LOCK_SSL_CERT
 13

	)

197 
	#CRYPTO_LOCK_SSL_SESSION
 14

	)

198 
	#CRYPTO_LOCK_SSL_SESS_CERT
 15

	)

199 
	#CRYPTO_LOCK_SSL
 16

	)

200 
	#CRYPTO_LOCK_SSL_METHOD
 17

	)

201 
	#CRYPTO_LOCK_RAND
 18

	)

202 
	#CRYPTO_LOCK_RAND2
 19

	)

203 
	#CRYPTO_LOCK_MALLOC
 20

	)

204 
	#CRYPTO_LOCK_BIO
 21

	)

205 
	#CRYPTO_LOCK_GETHOSTBYNAME
 22

	)

206 
	#CRYPTO_LOCK_GETSERVBYNAME
 23

	)

207 
	#CRYPTO_LOCK_READDIR
 24

	)

208 
	#CRYPTO_LOCK_RSA_BLINDING
 25

	)

209 
	#CRYPTO_LOCK_DH
 26

	)

210 
	#CRYPTO_LOCK_MALLOC2
 27

	)

211 
	#CRYPTO_LOCK_DSO
 28

	)

212 
	#CRYPTO_LOCK_DYNLOCK
 29

	)

213 
	#CRYPTO_LOCK_ENGINE
 30

	)

214 
	#CRYPTO_LOCK_UI
 31

	)

215 
	#CRYPTO_LOCK_ECDSA
 32

	)

216 
	#CRYPTO_LOCK_EC
 33

	)

217 
	#CRYPTO_LOCK_ECDH
 34

	)

218 
	#CRYPTO_LOCK_BN
 35

	)

219 
	#CRYPTO_LOCK_EC_PRE_COMP
 36

	)

220 
	#CRYPTO_LOCK_STORE
 37

	)

221 
	#CRYPTO_LOCK_COMP
 38

	)

222 
	#CRYPTO_LOCK_FIPS
 39

	)

223 
	#CRYPTO_LOCK_FIPS2
 40

	)

224 
	#CRYPTO_NUM_LOCKS
 41

	)

226 
	#CRYPTO_LOCK
 1

	)

227 
	#CRYPTO_UNLOCK
 2

	)

228 
	#CRYPTO_READ
 4

	)

229 
	#CRYPTO_WRITE
 8

	)

231 #i‚de‡
OPENSSL_NO_LOCKING


232 #i‚de‡
CRYPTO_w_lock


233 
	#CRYPTO_w_lock
(
ty≥
) \

234 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

235 
	#CRYPTO_w_u∆ock
(
ty≥
) \

236 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_WRITE
,
ty≥
,
__FILE__
,
__LINE__
)

	)

237 
	#CRYPTO_r_lock
(
ty≥
) \

238 
	`CRYPTO_lock
(
CRYPTO_LOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

239 
	#CRYPTO_r_u∆ock
(
ty≥
) \

240 
	`CRYPTO_lock
(
CRYPTO_UNLOCK
|
CRYPTO_READ
,
ty≥
,
__FILE__
,
__LINE__
)

	)

241 
	#CRYPTO_add
(
addr
,
amou¡
,
ty≥
) \

242 
	`CRYPTO_add_lock
(
addr
,
amou¡
,
ty≥
,
__FILE__
,
__LINE__
)

	)

245 
	#CRYPTO_w_lock
(
a
)

	)

246 
	#CRYPTO_w_u∆ock
(
a
)

	)

247 
	#CRYPTO_r_lock
(
a
)

	)

248 
	#CRYPTO_r_u∆ock
(
a
)

	)

249 
	#CRYPTO_add
(
a
,
b
,
c
Ë((*◊))+=(b))

	)

258 
ª„ªn˚s
;

259 
CRYPTO_dy∆ock_vÆue
 *
d©a
;

260 } 
	tCRYPTO_dy∆ock
;

266 
	#CRYPTO_MEM_CHECK_OFF
 0x0

	)

267 
	#CRYPTO_MEM_CHECK_ON
 0x1

	)

268 
	#CRYPTO_MEM_CHECK_ENABLE
 0x2

	)

269 
	#CRYPTO_MEM_CHECK_DISABLE
 0x3

	)

275 
	#V_CRYPTO_MDEBUG_TIME
 0x1

	)

277 
	#V_CRYPTO_MDEBUG_THREAD
 0x2

	)

279 
	#V_CRYPTO_MDEBUG_ALL
 (
V_CRYPTO_MDEBUG_TIME
 | 
V_CRYPTO_MDEBUG_THREAD
)

	)

283 
bio_°
 
	tBIO_dummy
;

285 
	s¸y±o_ex_d©a_°


287 
STACK_OF
(Ë*
sk
;

288 
dummy
;

290 
DECLARE_STACK_OF
()

295 
	s¸y±o_ex_d©a_func_°


297 
¨gl
;

298 *
¨gp
;

299 
CRYPTO_EX_√w
 *
√w_func
;

300 
CRYPTO_EX_‰ì
 *
‰ì_func
;

301 
CRYPTO_EX_dup
 *
dup_func
;

302 } 
	tCRYPTO_EX_DATA_FUNCS
;

304 
DECLARE_STACK_OF
(
CRYPTO_EX_DATA_FUNCS
)

310 
	#CRYPTO_EX_INDEX_BIO
 0

	)

311 
	#CRYPTO_EX_INDEX_SSL
 1

	)

312 
	#CRYPTO_EX_INDEX_SSL_CTX
 2

	)

313 
	#CRYPTO_EX_INDEX_SSL_SESSION
 3

	)

314 
	#CRYPTO_EX_INDEX_X509_STORE
 4

	)

315 
	#CRYPTO_EX_INDEX_X509_STORE_CTX
 5

	)

316 
	#CRYPTO_EX_INDEX_RSA
 6

	)

317 
	#CRYPTO_EX_INDEX_DSA
 7

	)

318 
	#CRYPTO_EX_INDEX_DH
 8

	)

319 
	#CRYPTO_EX_INDEX_ENGINE
 9

	)

320 
	#CRYPTO_EX_INDEX_X509
 10

	)

321 
	#CRYPTO_EX_INDEX_UI
 11

	)

322 
	#CRYPTO_EX_INDEX_ECDSA
 12

	)

323 
	#CRYPTO_EX_INDEX_ECDH
 13

	)

324 
	#CRYPTO_EX_INDEX_COMP
 14

	)

325 
	#CRYPTO_EX_INDEX_STORE
 15

	)

329 
	#CRYPTO_EX_INDEX_USER
 100

	)

336 
	#CRYPTO_mÆloc_öô
(Ë
	`CRYPTO_£t_mem_fun˘i⁄s
(\

337 
mÆloc
, 
ªÆloc
, 
‰ì
)

	)

339 #i‡
deföed
 
CRYPTO_MDEBUG_ALL
 || deföed 
CRYPTO_MDEBUG_TIME
 || deföed 
CRYPTO_MDEBUG_THREAD


340 #i‚de‡
CRYPTO_MDEBUG


341 
	#CRYPTO_MDEBUG


	)

347 
	#CRYPTO_mÆloc_debug_öô
() do {\

348 
	`CRYPTO_£t_mem_debug_fun˘i⁄s
(\

349 
CRYPTO_dbg_mÆloc
,\

350 
CRYPTO_dbg_ªÆloc
,\

351 
CRYPTO_dbg_‰ì
,\

352 
CRYPTO_dbg_£t_›ti⁄s
,\

353 
CRYPTO_dbg_gë_›ti⁄s
);\

354 } 0)

	)

356 
CRYPTO_mem_˘æ
(
mode
);

357 
CRYPTO_is_mem_check_⁄
();

360 
	#MemCheck_°¨t
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ON
)

	)

361 
	#MemCheck_°›
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_OFF
)

	)

364 
	#MemCheck_⁄
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_ENABLE
)

	)

365 
	#MemCheck_off
(Ë
	`CRYPTO_mem_˘æ
(
CRYPTO_MEM_CHECK_DISABLE
)

	)

366 
	#is_MemCheck_⁄
(Ë
	`CRYPTO_is_mem_check_⁄
()

	)

368 
	#OPENSSL_mÆloc
(
num
Ë
	`CRYPTO_mÆloc
((Íum,
__FILE__
,
__LINE__
)

	)

369 
	#OPENSSL_°rdup
(
°r
Ë
	`CRYPTO_°rdup
((°r),
__FILE__
,
__LINE__
)

	)

370 
	#OPENSSL_ªÆloc
(
addr
,
num
) \

371 
	`CRYPTO_ªÆloc
((*)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

372 
	#OPENSSL_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
) \

373 
	`CRYPTO_ªÆloc_˛ón
(
addr
,
ﬁd_num
,
num
,
__FILE__
,
__LINE__
)

	)

374 
	#OPENSSL_ªmÆloc
(
addr
,
num
) \

375 
	`CRYPTO_ªmÆloc
((**)
addr
,()
num
,
__FILE__
,
__LINE__
)

	)

376 
	#OPENSSL_‰ìFunc
 
CRYPTO_‰ì


	)

377 
	#OPENSSL_‰ì
(
addr
Ë
	`CRYPTO_‰ì
◊ddr)

	)

379 
	#OPENSSL_mÆloc_locked
(
num
) \

380 
	`CRYPTO_mÆloc_locked
(()
num
,
__FILE__
,
__LINE__
)

	)

381 
	#OPENSSL_‰ì_locked
(
addr
Ë
	`CRYPTO_‰ì_locked
◊ddr)

	)

384 c⁄° *
SSLóy_vîsi⁄
(
ty≥
);

385 
SSLóy
();

387 
OPENSSL_is£tugid
();

390 
°_CRYPTO_EX_DATA_IMPL
 
	tCRYPTO_EX_DATA_IMPL
;

392 c⁄° 
CRYPTO_EX_DATA_IMPL
 *
CRYPTO_gë_ex_d©a_im∂emíèti⁄
();

394 
CRYPTO_£t_ex_d©a_im∂emíèti⁄
(c⁄° 
CRYPTO_EX_DATA_IMPL
 *
i
);

396 
CRYPTO_ex_d©a_√w_˛ass
();

398 
CRYPTO_gë_ex_√w_ödex
(
˛ass_ödex
, 
¨gl
, *
¨gp
,

399 
CRYPTO_EX_√w
 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
,

400 
CRYPTO_EX_‰ì
 *
‰ì_func
);

403 
CRYPTO_√w_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

404 
CRYPTO_dup_ex_d©a
(
˛ass_ödex
, 
CRYPTO_EX_DATA
 *
to
,

405 
CRYPTO_EX_DATA
 *
‰om
);

406 
CRYPTO_‰ì_ex_d©a
(
˛ass_ödex
, *
obj
, 
CRYPTO_EX_DATA
 *
ad
);

409 
CRYPTO_£t_ex_d©a
(
CRYPTO_EX_DATA
 *
ad
, 
idx
, *
vÆ
);

410 *
CRYPTO_gë_ex_d©a
(c⁄° 
CRYPTO_EX_DATA
 *
ad
,
idx
);

413 
CRYPTO_˛ónup_Æl_ex_d©a
();

415 
CRYPTO_gë_√w_lockid
(*
«me
);

417 
CRYPTO_num_locks
();

418 
CRYPTO_lock
(
mode
, 
ty≥
,c⁄° *
fûe
,
löe
);

419 
CRYPTO_£t_lockög_ˇŒback
((*
func
)(
mode
,
ty≥
,

420 c⁄° *
fûe
,
löe
));

421 (*
CRYPTO_gë_lockög_ˇŒback
())(
mode
,
ty≥
,c⁄° *
fûe
,

422 
löe
);

423 
CRYPTO_£t_add_lock_ˇŒback
((*
func
)(*
num
,
mou¡
,
ty≥
,

424 c⁄° *
fûe
, 
löe
));

425 (*
CRYPTO_gë_add_lock_ˇŒback
())(*
num
,
mou¡
,
ty≥
,

426 c⁄° *
fûe
,
löe
);

429 
	s¸y±o_thªadid_°


431 *
±r
;

432 
vÆ
;

433 } 
	tCRYPTO_THREADID
;

435 
CRYPTO_THREADID_£t_numîic
(
CRYPTO_THREADID
 *
id
, 
vÆ
);

436 
CRYPTO_THREADID_£t_poöãr
(
CRYPTO_THREADID
 *
id
, *
±r
);

437 
CRYPTO_THREADID_£t_ˇŒback
((*
thªadid_func
)(
CRYPTO_THREADID
 *));

438 (*
CRYPTO_THREADID_gë_ˇŒback
())(
CRYPTO_THREADID
 *);

439 
CRYPTO_THREADID_cuºít
(
CRYPTO_THREADID
 *
id
);

440 
CRYPTO_THREADID_cmp
(c⁄° 
CRYPTO_THREADID
 *
a
, c⁄° CRYPTO_THREADID *
b
);

441 
CRYPTO_THREADID_˝y
(
CRYPTO_THREADID
 *
de°
, c⁄° CRYPTO_THREADID *
§c
);

442 
CRYPTO_THREADID_hash
(c⁄° 
CRYPTO_THREADID
 *
id
);

443 #i‚de‡
OPENSSL_NO_DEPRECATED


444 
CRYPTO_£t_id_ˇŒback
((*
func
)());

445 (*
CRYPTO_gë_id_ˇŒback
())();

446 
CRYPTO_thªad_id
();

449 c⁄° *
CRYPTO_gë_lock_«me
(
ty≥
);

450 
CRYPTO_add_lock
(*
poöãr
,
amou¡
,
ty≥
, c⁄° *
fûe
,

451 
löe
);

453 
CRYPTO_gë_√w_dy∆ockid
();

454 
CRYPTO_de°roy_dy∆ockid
(
i
);

455 
CRYPTO_dy∆ock_vÆue
 *
CRYPTO_gë_dy∆ock_vÆue
(
i
);

456 
CRYPTO_£t_dy∆ock_¸óã_ˇŒback
(
CRYPTO_dy∆ock_vÆue
 *(*
dyn_¸óã_fun˘i⁄
)(c⁄° *
fûe
, 
löe
));

457 
CRYPTO_£t_dy∆ock_lock_ˇŒback
((*
dyn_lock_fun˘i⁄
)(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

458 
CRYPTO_£t_dy∆ock_de°roy_ˇŒback
((*
dyn_de°roy_fun˘i⁄
)(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
, 
löe
));

459 
CRYPTO_dy∆ock_vÆue
 *(*
CRYPTO_gë_dy∆ock_¸óã_ˇŒback
())(c⁄° *
fûe
,
löe
);

460 (*
CRYPTO_gë_dy∆ock_lock_ˇŒback
())(
mode
, 
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

461 (*
CRYPTO_gë_dy∆ock_de°roy_ˇŒback
())(
CRYPTO_dy∆ock_vÆue
 *
l
, c⁄° *
fûe
,
löe
);

465 
CRYPTO_£t_mem_fun˘i⁄s
(*(*
m
)(
size_t
),*(*
r
)(*,size_t), (*
f
)(*));

466 
CRYPTO_£t_locked_mem_fun˘i⁄s
(*(*
m
)(
size_t
), (*
‰ì_func
)(*));

467 
CRYPTO_£t_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

468 *(*
r
)(*,
size_t
,const *,),

469 (*
f
)(*));

470 
CRYPTO_£t_locked_mem_ex_fun˘i⁄s
(*(*
m
)(
size_t
,const *,),

471 (*
‰ì_func
)(*));

472 
CRYPTO_£t_mem_debug_fun˘i⁄s
((*
m
)(*,,const *,,),

473 (*
r
)(*,*,,const *,,),

474 (*
f
)(*,),

475 (*
so
)(),

476 (*
go
)());

477 
CRYPTO_gë_mem_fun˘i⁄s
(*(**
m
)(
size_t
),*(**
r
)(*, size_t), (**
f
)(*));

478 
CRYPTO_gë_locked_mem_fun˘i⁄s
(*(**
m
)(
size_t
), (**
f
)(*));

479 
CRYPTO_gë_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

480 *(**
r
)(*, 
size_t
,const *,),

481 (**
f
)(*));

482 
CRYPTO_gë_locked_mem_ex_fun˘i⁄s
(*(**
m
)(
size_t
,const *,),

483 (**
f
)(*));

484 
CRYPTO_gë_mem_debug_fun˘i⁄s
((**
m
)(*,,const *,,),

485 (**
r
)(*,*,,const *,,),

486 (**
f
)(*,),

487 (**
so
)(),

488 (**
go
)());

490 *
CRYPTO_mÆloc_locked
(
num
, c⁄° *
fûe
, 
löe
);

491 
CRYPTO_‰ì_locked
(*);

492 *
CRYPTO_mÆloc
(
num
, c⁄° *
fûe
, 
löe
);

493 *
CRYPTO_°rdup
(c⁄° *
°r
, c⁄° *
fûe
, 
löe
);

494 
CRYPTO_‰ì
(*);

495 *
CRYPTO_ªÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

496 *
CRYPTO_ªÆloc_˛ón
(*
addr
,
ﬁd_num
,
num
,c⁄° *
fûe
,

497 
löe
);

498 *
CRYPTO_ªmÆloc
(*
addr
,
num
, c⁄° *
fûe
, 
löe
);

500 
OPENSSL_˛ón£
(*
±r
, 
size_t
 
Àn
);

502 
CRYPTO_£t_mem_debug_›ti⁄s
(
bôs
);

503 
CRYPTO_gë_mem_debug_›ti⁄s
();

505 
	#CRYPTO_push_öfo
(
öfo
) \

506 
	`CRYPTO_push_öfo_
(
öfo
, 
__FILE__
, 
__LINE__
);

	)

507 
CRYPTO_push_öfo_
(c⁄° *
öfo
, c⁄° *
fûe
, 
löe
);

508 
CRYPTO_p›_öfo
();

509 
CRYPTO_ªmove_Æl_öfo
();

519 
CRYPTO_dbg_mÆloc
(*
addr
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

520 
CRYPTO_dbg_ªÆloc
(*
addr1
,*
addr2
,
num
,c⁄° *
fûe
,
löe
,
bef‹e_p
);

521 
CRYPTO_dbg_‰ì
(*
addr
,
bef‹e_p
);

530 
CRYPTO_dbg_£t_›ti⁄s
(
bôs
);

531 
CRYPTO_dbg_gë_›ti⁄s
();

534 #i‚de‡
OPENSSL_NO_FP_API


535 
CRYPTO_mem_Àaks_Â
(
FILE
 *);

537 
CRYPTO_mem_Àaks
(
bio_°
 *
bio
);

539 *
	tCRYPTO_MEM_LEAK_CB
(, const *, , , *);

540 
CRYPTO_mem_Àaks_cb
(
CRYPTO_MEM_LEAK_CB
 *
cb
);

543 
O≥nSSLDõ
(c⁄° *
fûe
,
löe
,c⁄° *
as£πi⁄
);

544 
	#OPENSSL_as£π
(
e
Ë()(”Ë? 0 : (
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, #e),1))

	)

546 *
OPENSSL_ü32ˇp_loc
();

547 
	#OPENSSL_ü32ˇp
 (*(
	`OPENSSL_ü32ˇp_loc
()))

	)

548 
OPENSSL_is£rvi˚
();

550 
FIPS_mode
();

551 
FIPS_mode_£t
(
r
);

553 
OPENSSL_öô
();

555 
	#fùs_md_öô
(
Æg
Ë
	`fùs_md_öô_˘x
◊lg,álg)

	)

557 #ifde‡
OPENSSL_FIPS


558 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

559 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
) \

561 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

563  
¥iv©e_
##
Æg
##
	`_Inô
(
c
); \

565 
¥iv©e_
##
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

567 
	#fùs_cùhî_ab‹t
(
Æg
) \

568 i‡(
	`FIPS_mode
()Ë
	`O≥nSSLDõ
(
__FILE__
, 
__LINE__
, \

569 "LowÜevñ API cÆ»tÿcùhî " #Æg " f‹biddí i¿FIPS mode!")

	)

572 
	#fùs_md_öô_˘x
(
Æg
, 
cx
) \

573 
Æg
##
	`_Inô
(
cx
##
_CTX
 *
c
)

	)

574 
	#fùs_cùhî_ab‹t
(
Æg
Ë0)

	)

582 
CRYPTO_memcmp
(c⁄° *
a
, c⁄° *
b
, 
size_t
 
Àn
);

588 
ERR_lﬂd_CRYPTO_°rögs
();

593 
	#CRYPTO_F_CRYPTO_GET_EX_NEW_INDEX
 100

	)

594 
	#CRYPTO_F_CRYPTO_GET_NEW_DYNLOCKID
 103

	)

595 
	#CRYPTO_F_CRYPTO_GET_NEW_LOCKID
 101

	)

596 
	#CRYPTO_F_CRYPTO_SET_EX_DATA
 102

	)

597 
	#CRYPTO_F_DEF_ADD_INDEX
 104

	)

598 
	#CRYPTO_F_DEF_GET_CLASS
 105

	)

599 
	#CRYPTO_F_FIPS_MODE_SET
 109

	)

600 
	#CRYPTO_F_INT_DUP_EX_DATA
 106

	)

601 
	#CRYPTO_F_INT_FREE_EX_DATA
 107

	)

602 
	#CRYPTO_F_INT_NEW_EX_DATA
 108

	)

605 
	#CRYPTO_R_FIPS_MODE_NOT_SUPPORTED
 101

	)

606 
	#CRYPTO_R_NO_DYNLOCK_CREATE_CALLBACK
 100

	)

608 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dh.h

59 #i‚de‡
HEADER_DH_H


60 
	#HEADER_DH_H


	)

62 
	~<›ís¶/e_os2.h
>

64 #ifde‡
OPENSSL_NO_DH


65 #îr‹ 
DH
 
is
 
dißbÀd
.

68 #i‚de‡
OPENSSL_NO_BIO


69 
	~<›ís¶/bio.h
>

71 
	~<›ís¶/os¶_typ.h
>

72 #i‚de‡
OPENSSL_NO_DEPRECATED


73 
	~<›ís¶/bn.h
>

76 #i‚de‡
OPENSSL_DH_MAX_MODULUS_BITS


77 
	#OPENSSL_DH_MAX_MODULUS_BITS
 10000

	)

80 
	#DH_FLAG_CACHE_MONT_P
 0x01

	)

81 
	#DH_FLAG_NO_EXP_CONSTTIME
 0x02

	)

95 
	#DH_FLAG_FIPS_METHOD
 0x0400

	)

102 
	#DH_FLAG_NON_FIPS_ALLOW
 0x0400

	)

104 #ifde‡ 
__˝lu•lus


112 
	sdh_mëhod


114 c⁄° *
«me
;

116 (*
gíî©e_key
)(
DH
 *
dh
);

117 (*
compuã_key
)(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

118 (*
bn_mod_exp
)(c⁄° 
DH
 *
dh
, 
BIGNUM
 *
r
, c⁄° BIGNUM *
a
,

119 c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
,

120 
BN_MONT_CTX
 *
m_˘x
);

122 (*
öô
)(
DH
 *
dh
);

123 (*
föish
)(
DH
 *
dh
);

124 
Êags
;

125 *
≠p_d©a
;

127 (*
gíî©e_∑øms
)(
DH
 *
dh
, 
¥ime_Àn
, 
gíî©‹
, 
BN_GENCB
 *
cb
);

130 
	sdh_°


134 
∑d
;

135 
vîsi⁄
;

136 
BIGNUM
 *
p
;

137 
BIGNUM
 *
g
;

138 
Àngth
;

139 
BIGNUM
 *
pub_key
;

140 
BIGNUM
 *
¥iv_key
;

142 
Êags
;

143 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

145 
BIGNUM
 *
q
;

146 
BIGNUM
 *
j
;

147 *
£ed
;

148 
£edÀn
;

149 
BIGNUM
 *
cou¡î
;

151 
ª„ªn˚s
;

152 
CRYPTO_EX_DATA
 
ex_d©a
;

153 c⁄° 
DH_METHOD
 *
mëh
;

154 
ENGINE
 *
ígöe
;

157 
	#DH_GENERATOR_2
 2

	)

159 
	#DH_GENERATOR_5
 5

	)

162 
	#DH_CHECK_P_NOT_PRIME
 0x01

	)

163 
	#DH_CHECK_P_NOT_SAFE_PRIME
 0x02

	)

164 
	#DH_UNABLE_TO_CHECK_GENERATOR
 0x04

	)

165 
	#DH_NOT_SUITABLE_GENERATOR
 0x08

	)

168 
	#DH_CHECK_PUBKEY_TOO_SMALL
 0x01

	)

169 
	#DH_CHECK_PUBKEY_TOO_LARGE
 0x02

	)

173 
	#DH_CHECK_P_NOT_STRONG_PRIME
 
DH_CHECK_P_NOT_SAFE_PRIME


	)

175 
	#d2i_DH∑øms_Â
(
Â
,
x
Ë(
DH
 *)
	`ASN1_d2i_Â
((*(*)())
DH_√w
, \

176 (*(*)())
d2i_DH∑øms
,(
Â
),(**)(
x
))

	)

177 
	#i2d_DH∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DH∑øms
,(fp), \

178 (*)(
x
))

	)

179 
	#d2i_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DH
,
DH_√w
,
d2i_DH∑øms
,bp,x)

	)

180 
	#i2d_DH∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DH
,
i2d_DH∑øms
,bp,x)

	)

182 
DH
 *
DH∑øms_dup
(DH *);

184 c⁄° 
DH_METHOD
 *
DH_O≥nSSL
();

186 
DH_£t_deÁu…_mëhod
(c⁄° 
DH_METHOD
 *
mëh
);

187 c⁄° 
DH_METHOD
 *
DH_gë_deÁu…_mëhod
();

188 
DH_£t_mëhod
(
DH
 *
dh
, c⁄° 
DH_METHOD
 *
mëh
);

189 
DH
 *
DH_√w_mëhod
(
ENGINE
 *
ígöe
);

191 
DH
 * 
DH_√w
();

192 
DH_‰ì
(
DH
 *
dh
);

193 
DH_up_ªf
(
DH
 *
dh
);

194 
DH_size
(c⁄° 
DH
 *
dh
);

195 
DH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

196 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

197 
DH_£t_ex_d©a
(
DH
 *
d
, 
idx
, *
¨g
);

198 *
DH_gë_ex_d©a
(
DH
 *
d
, 
idx
);

201 #i‚de‡
OPENSSL_NO_DEPRECATED


202 
DH
 * 
DH_gíî©e_∑ømëîs
(
¥ime_Àn
,
gíî©‹
,

203 (*
ˇŒback
)(,,*),*
cb_¨g
);

207 
DH_gíî©e_∑ømëîs_ex
(
DH
 *
dh
, 
¥ime_Àn
,
gíî©‹
, 
BN_GENCB
 *
cb
);

209 
DH_check
(c⁄° 
DH
 *
dh
,*
codes
);

210 
DH_check_pub_key
(c⁄° 
DH
 *
dh
,c⁄° 
BIGNUM
 *
pub_key
, *
codes
);

211 
DH_gíî©e_key
(
DH
 *
dh
);

212 
DH_compuã_key
(*
key
,c⁄° 
BIGNUM
 *
pub_key
,
DH
 *
dh
);

213 
DH
 * 
d2i_DH∑øms
(DH **
a
,c⁄° **
µ
, 
Àngth
);

214 
i2d_DH∑øms
(c⁄° 
DH
 *
a
,**
µ
);

215 #i‚de‡
OPENSSL_NO_FP_API


216 
DH∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DH
 *
x
);

218 #i‚de‡
OPENSSL_NO_BIO


219 
DH∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DH
 *
x
);

221 
DH∑øms_¥öt
(*
bp
, c⁄° 
DH
 *
x
);

224 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_¥ime_Àn
(
˘x
, 
Àn
) \

225 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

226 
EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
, 
Àn
, 
NULL
)

	)

228 
	#EVP_PKEY_CTX_£t_dh_∑ømgí_gíî©‹
(
˘x
, 
gí
) \

229 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DH
, 
EVP_PKEY_OP_PARAMGEN
, \

230 
EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
, 
gí
, 
NULL
)

	)

232 
	#EVP_PKEY_CTRL_DH_PARAMGEN_PRIME_LEN
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

233 
	#EVP_PKEY_CTRL_DH_PARAMGEN_GENERATOR
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

240 
ERR_lﬂd_DH_°rögs
();

245 
	#DH_F_COMPUTE_KEY
 102

	)

246 
	#DH_F_DHPARAMS_PRINT_FP
 101

	)

247 
	#DH_F_DH_BUILTIN_GENPARAMS
 106

	)

248 
	#DH_F_DH_COMPUTE_KEY
 114

	)

249 
	#DH_F_DH_GENERATE_KEY
 115

	)

250 
	#DH_F_DH_GENERATE_PARAMETERS_EX
 116

	)

251 
	#DH_F_DH_NEW_METHOD
 105

	)

252 
	#DH_F_DH_PARAM_DECODE
 107

	)

253 
	#DH_F_DH_PRIV_DECODE
 110

	)

254 
	#DH_F_DH_PRIV_ENCODE
 111

	)

255 
	#DH_F_DH_PUB_DECODE
 108

	)

256 
	#DH_F_DH_PUB_ENCODE
 109

	)

257 
	#DH_F_DO_DH_PRINT
 100

	)

258 
	#DH_F_GENERATE_KEY
 103

	)

259 
	#DH_F_GENERATE_PARAMETERS
 104

	)

260 
	#DH_F_PKEY_DH_DERIVE
 112

	)

261 
	#DH_F_PKEY_DH_KEYGEN
 113

	)

264 
	#DH_R_BAD_GENERATOR
 101

	)

265 
	#DH_R_BN_DECODE_ERROR
 109

	)

266 
	#DH_R_BN_ERROR
 106

	)

267 
	#DH_R_DECODE_ERROR
 104

	)

268 
	#DH_R_INVALID_PUBKEY
 102

	)

269 
	#DH_R_KEYS_NOT_SET
 108

	)

270 
	#DH_R_KEY_SIZE_TOO_SMALL
 110

	)

271 
	#DH_R_MODULUS_TOO_LARGE
 103

	)

272 
	#DH_R_NON_FIPS_METHOD
 111

	)

273 
	#DH_R_NO_PARAMETERS_SET
 107

	)

274 
	#DH_R_NO_PRIVATE_VALUE
 100

	)

275 
	#DH_R_PARAMETER_ENCODING_ERROR
 105

	)

277 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dsa.h

65 #i‚de‡
HEADER_DSA_H


66 
	#HEADER_DSA_H


	)

68 
	~<›ís¶/e_os2.h
>

70 #ifde‡
OPENSSL_NO_DSA


71 #îr‹ 
DSA
 
is
 
dißbÀd
.

74 #i‚de‡
OPENSSL_NO_BIO


75 
	~<›ís¶/bio.h
>

77 
	~<›ís¶/¸y±o.h
>

78 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

82 #i‚de‡
OPENSSL_NO_DH


83 
	~<›ís¶/dh.h
>

87 #i‚de‡
OPENSSL_DSA_MAX_MODULUS_BITS


88 
	#OPENSSL_DSA_MAX_MODULUS_BITS
 10000

	)

91 
	#DSA_FLAG_CACHE_MONT_P
 0x01

	)

92 
	#DSA_FLAG_NO_EXP_CONSTTIME
 0x02

	)

106 
	#DSA_FLAG_FIPS_METHOD
 0x0400

	)

113 
	#DSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

115 #ifde‡ 
__˝lu•lus


123 
	sDSA_SIG_°


125 
BIGNUM
 *
r
;

126 
BIGNUM
 *
s
;

127 } 
	tDSA_SIG
;

129 
	sdß_mëhod


131 c⁄° *
«me
;

132 
DSA_SIG
 * (*
dß_do_sign
)(c⁄° *
dg°
, 
dÀn
, 
DSA
 *
dß
);

133 (*
dß_sign_£tup
)(
DSA
 *
dß
, 
BN_CTX
 *
˘x_ö
, 
BIGNUM
 **
kövp
,

134 
BIGNUM
 **
Ω
);

135 (*
dß_do_vîify
)(c⁄° *
dg°
, 
dg°_Àn
,

136 
DSA_SIG
 *
sig
, 
DSA
 *
dß
);

137 (*
dß_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
º
, BIGNUM *
a1
, BIGNUM *
p1
,

138 
BIGNUM
 *
a2
, BIGNUM *
p2
, BIGNUM *
m
, 
BN_CTX
 *
˘x
,

139 
BN_MONT_CTX
 *
ö_m⁄t
);

140 (*
bn_mod_exp
)(
DSA
 *
dß
, 
BIGNUM
 *
r
, BIGNUM *
a
, c⁄° BIGNUM *
p
,

141 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

142 
BN_MONT_CTX
 *
m_˘x
);

143 (*
öô
)(
DSA
 *
dß
);

144 (*
föish
)(
DSA
 *
dß
);

145 
Êags
;

146 *
≠p_d©a
;

148 (*
dß_∑ømgí
)(
DSA
 *
dß
, 
bôs
,

149 c⁄° *
£ed
, 
£ed_Àn
,

150 *
cou¡î_ªt
, *
h_ªt
,

151 
BN_GENCB
 *
cb
);

153 (*
dß_keygí
)(
DSA
 *
dß
);

156 
	sdß_°


160 
∑d
;

161 
vîsi⁄
;

162 
wrôe_∑øms
;

163 
BIGNUM
 *
p
;

164 
BIGNUM
 *
q
;

165 
BIGNUM
 *
g
;

167 
BIGNUM
 *
pub_key
;

168 
BIGNUM
 *
¥iv_key
;

170 
BIGNUM
 *
köv
;

171 
BIGNUM
 *
r
;

173 
Êags
;

175 
BN_MONT_CTX
 *
mëhod_m⁄t_p
;

176 
ª„ªn˚s
;

177 
CRYPTO_EX_DATA
 
ex_d©a
;

178 c⁄° 
DSA_METHOD
 *
mëh
;

180 
ENGINE
 *
ígöe
;

183 
	#d2i_DSA∑øms_Â
(
Â
,
x
Ë(
DSA
 *)
	`ASN1_d2i_Â
((*(*)())
DSA_√w
, \

184 (*(*)())
d2i_DSA∑øms
,(
Â
),(**)(
x
))

	)

185 
	#i2d_DSA∑øms_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_DSA∑øms
,(fp), \

186 (*)(
x
))

	)

187 
	#d2i_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
DSA
,
DSA_√w
,
d2i_DSA∑øms
,bp,x)

	)

188 
	#i2d_DSA∑øms_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
DSA
,
i2d_DSA∑øms
,bp,x)

	)

191 
DSA
 *
DSA∑øms_dup
(DSA *
x
);

192 
DSA_SIG
 * 
DSA_SIG_√w
();

193 
DSA_SIG_‰ì
(
DSA_SIG
 *
a
);

194 
i2d_DSA_SIG
(c⁄° 
DSA_SIG
 *
a
, **
µ
);

195 
DSA_SIG
 * 
d2i_DSA_SIG
(DSA_SIG **
v
, c⁄° **
µ
, 
Àngth
);

197 
DSA_SIG
 * 
DSA_do_sign
(c⁄° *
dg°
,
dÀn
,
DSA
 *
dß
);

198 
DSA_do_vîify
(c⁄° *
dg°
,
dg°_Àn
,

199 
DSA_SIG
 *
sig
,
DSA
 *
dß
);

201 c⁄° 
DSA_METHOD
 *
DSA_O≥nSSL
();

203 
DSA_£t_deÁu…_mëhod
(c⁄° 
DSA_METHOD
 *);

204 c⁄° 
DSA_METHOD
 *
DSA_gë_deÁu…_mëhod
();

205 
DSA_£t_mëhod
(
DSA
 *
dß
, c⁄° 
DSA_METHOD
 *);

207 
DSA
 * 
DSA_√w
();

208 
DSA
 * 
DSA_√w_mëhod
(
ENGINE
 *
ígöe
);

209 
DSA_‰ì
 (
DSA
 *
r
);

211 
DSA_up_ªf
(
DSA
 *
r
);

212 
DSA_size
(c⁄° 
DSA
 *);

214 
DSA_sign_£tup
–
DSA
 *
dß
,
BN_CTX
 *
˘x_ö
,
BIGNUM
 **
kövp
,BIGNUM **
Ω
);

215 
DSA_sign
(
ty≥
,c⁄° *
dg°
,
dÀn
,

216 *
sig
, *
sigÀn
, 
DSA
 *
dß
);

217 
DSA_vîify
(
ty≥
,c⁄° *
dg°
,
dg°_Àn
,

218 c⁄° *
sigbuf
, 
sigÀn
, 
DSA
 *
dß
);

219 
DSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

220 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

221 
DSA_£t_ex_d©a
(
DSA
 *
d
, 
idx
, *
¨g
);

222 *
DSA_gë_ex_d©a
(
DSA
 *
d
, 
idx
);

224 
DSA
 * 
d2i_DSAPublicKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

225 
DSA
 * 
d2i_DSAPriv©eKey
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

226 
DSA
 * 
d2i_DSA∑øms
(DSA **
a
, c⁄° **
µ
, 
Àngth
);

229 #i‚de‡
OPENSSL_NO_DEPRECATED


230 
DSA
 * 
DSA_gíî©e_∑ømëîs
(
bôs
,

231 *
£ed
,
£ed_Àn
,

232 *
cou¡î_ªt
, *
h_ªt
,

233 (*
ˇŒback
)(, , *),*
cb_¨g
);

237 
DSA_gíî©e_∑ømëîs_ex
(
DSA
 *
dß
, 
bôs
,

238 c⁄° *
£ed
,
£ed_Àn
,

239 *
cou¡î_ªt
, *
h_ªt
, 
BN_GENCB
 *
cb
);

241 
DSA_gíî©e_key
(
DSA
 *
a
);

242 
i2d_DSAPublicKey
(c⁄° 
DSA
 *
a
, **
µ
);

243 
i2d_DSAPriv©eKey
(c⁄° 
DSA
 *
a
, **
µ
);

244 
i2d_DSA∑øms
(c⁄° 
DSA
 *
a
,**
µ
);

246 #i‚de‡
OPENSSL_NO_BIO


247 
DSA∑øms_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
);

248 
DSA_¥öt
(
BIO
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

250 #i‚de‡
OPENSSL_NO_FP_API


251 
DSA∑øms_¥öt_Â
(
FILE
 *
Â
, c⁄° 
DSA
 *
x
);

252 
DSA_¥öt_Â
(
FILE
 *
bp
, c⁄° 
DSA
 *
x
, 
off
);

255 
	#DSS_¥ime_checks
 50

	)

258 
	#DSA_is_¥ime
(
n
, 
ˇŒback
, 
cb_¨g
) \

259 
	`BN_is_¥ime
(
n
, 
DSS_¥ime_checks
, 
ˇŒback
, 
NULL
, 
cb_¨g
)

	)

261 #i‚de‡
OPENSSL_NO_DH


264 
DH
 *
DSA_dup_DH
(c⁄° 
DSA
 *
r
);

267 
	#EVP_PKEY_CTX_£t_dß_∑ømgí_bôs
(
˘x
, 
nbôs
) \

268 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_DSA
, 
EVP_PKEY_OP_PARAMGEN
, \

269 
EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
, 
nbôs
, 
NULL
)

	)

271 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

272 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_Q_BITS
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

273 
	#EVP_PKEY_CTRL_DSA_PARAMGEN_MD
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

279 
ERR_lﬂd_DSA_°rögs
();

284 
	#DSA_F_D2I_DSA_SIG
 110

	)

285 
	#DSA_F_DO_DSA_PRINT
 104

	)

286 
	#DSA_F_DSAPARAMS_PRINT
 100

	)

287 
	#DSA_F_DSAPARAMS_PRINT_FP
 101

	)

288 
	#DSA_F_DSA_DO_SIGN
 112

	)

289 
	#DSA_F_DSA_DO_VERIFY
 113

	)

290 
	#DSA_F_DSA_GENERATE_KEY
 124

	)

291 
	#DSA_F_DSA_GENERATE_PARAMETERS_EX
 123

	)

292 
	#DSA_F_DSA_NEW_METHOD
 103

	)

293 
	#DSA_F_DSA_PARAM_DECODE
 119

	)

294 
	#DSA_F_DSA_PRINT_FP
 105

	)

295 
	#DSA_F_DSA_PRIV_DECODE
 115

	)

296 
	#DSA_F_DSA_PRIV_ENCODE
 116

	)

297 
	#DSA_F_DSA_PUB_DECODE
 117

	)

298 
	#DSA_F_DSA_PUB_ENCODE
 118

	)

299 
	#DSA_F_DSA_SIGN
 106

	)

300 
	#DSA_F_DSA_SIGN_SETUP
 107

	)

301 
	#DSA_F_DSA_SIG_NEW
 109

	)

302 
	#DSA_F_DSA_SIG_PRINT
 125

	)

303 
	#DSA_F_DSA_VERIFY
 108

	)

304 
	#DSA_F_I2D_DSA_SIG
 111

	)

305 
	#DSA_F_OLD_DSA_PRIV_DECODE
 122

	)

306 
	#DSA_F_PKEY_DSA_CTRL
 120

	)

307 
	#DSA_F_PKEY_DSA_KEYGEN
 121

	)

308 
	#DSA_F_SIG_CB
 114

	)

311 
	#DSA_R_BAD_Q_VALUE
 102

	)

312 
	#DSA_R_BN_DECODE_ERROR
 108

	)

313 
	#DSA_R_BN_ERROR
 109

	)

314 
	#DSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 100

	)

315 
	#DSA_R_DECODE_ERROR
 104

	)

316 
	#DSA_R_INVALID_DIGEST_TYPE
 106

	)

317 
	#DSA_R_MISSING_PARAMETERS
 101

	)

318 
	#DSA_R_MODULUS_TOO_LARGE
 103

	)

319 
	#DSA_R_NEED_NEW_SETUP_VALUES
 110

	)

320 
	#DSA_R_NON_FIPS_DSA_METHOD
 111

	)

321 
	#DSA_R_NO_PARAMETERS_SET
 107

	)

322 
	#DSA_R_PARAMETER_ENCODING_ERROR
 105

	)

324 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/dtls1.h

60 #i‚de‡
HEADER_DTLS1_H


61 
	#HEADER_DTLS1_H


	)

63 
	~<›ís¶/buf„r.h
>

64 
	~<›ís¶/pqueue.h
>

65 #ifde‡
OPENSSL_SYS_VMS


66 
	~<ªsour˚.h
>

67 
	~<sys/timeb.h
>

69 #ifde‡
OPENSSL_SYS_WIN32


71 
	~<wösock.h
>

72 #ñi‡
deföed
(
OPENSSL_SYS_NETWARE
Ë&& !deföed(
_WINSOCK2API_
)

73 
	~<sys/timevÆ.h
>

75 
	~<sys/time.h
>

78 #ifde‡ 
__˝lu•lus


82 
	#DTLS1_VERSION
 0xFEFF

	)

83 
	#DTLS_MAX_VERSION
 
DTLS1_VERSION


	)

85 
	#DTLS1_BAD_VER
 0x0100

	)

89 
	#DTLS1_AD_MISSING_HANDSHAKE_MESSAGE
 110

	)

93 
	#DTLS1_COOKIE_LENGTH
 256

	)

95 
	#DTLS1_RT_HEADER_LENGTH
 13

	)

97 
	#DTLS1_HM_HEADER_LENGTH
 12

	)

99 
	#DTLS1_HM_BAD_FRAGMENT
 -2

	)

100 
	#DTLS1_HM_FRAGMENT_RETRY
 -3

	)

102 
	#DTLS1_CCS_HEADER_LENGTH
 1

	)

104 #ifde‡
DTLS1_AD_MISSING_HANDSHAKE_MESSAGE


105 
	#DTLS1_AL_HEADER_LENGTH
 7

	)

107 
	#DTLS1_AL_HEADER_LENGTH
 2

	)

110 #i‚de‡
OPENSSL_NO_SSL_INTERN


112 #i‚de‡
OPENSSL_NO_SCTP


113 
	#DTLS1_SCTP_AUTH_LABEL
 "EXPORTER_DTLS_OVER_SCTP"

	)

116 
	sdés1_bôm≠_°


118 
m≠
;

120 
max_£q_num
[8];

123 } 
	tDTLS1_BITMAP
;

125 
	sdés1_ªå™smô_°©e


127 
EVP_CIPHER_CTX
 *
íc_wrôe_˘x
;

128 
EVP_MD_CTX
 *
wrôe_hash
;

129 #i‚de‡
OPENSSL_NO_COMP


130 
COMP_CTX
 *
com¥ess
;

132 *
com¥ess
;

134 
SSL_SESSION
 *
£ssi⁄
;

135 
ïoch
;

138 
	shm_hódî_°


140 
ty≥
;

141 
msg_Àn
;

142 
£q
;

143 
‰ag_off
;

144 
‰ag_Àn
;

145 
is_ccs
;

146 
dés1_ªå™smô_°©e
 
ßved_ªå™smô_°©e
;

149 
	sccs_hódî_°


151 
ty≥
;

152 
£q
;

155 
	sdés1_timeout_°


158 
ªad_timeouts
;

161 
wrôe_timeouts
;

164 
num_Æîts
;

167 
	sªc‹d_pqueue_°


169 
ïoch
;

170 
pqueue
 
q
;

171 } 
	tªc‹d_pqueue
;

173 
	shm_‰agmít_°


175 
hm_hódî_°
 
msg_hódî
;

176 *
‰agmít
;

177 *
ªas£mbly
;

178 } 
	thm_‰agmít
;

180 
	sdés1_°©e_°


182 
£nd_cookõ
;

183 
cookõ
[
DTLS1_COOKIE_LENGTH
];

184 
rcvd_cookõ
[
DTLS1_COOKIE_LENGTH
];

185 
cookõ_Àn
;

192 
r_ïoch
;

193 
w_ïoch
;

196 
DTLS1_BITMAP
 
bôm≠
;

199 
DTLS1_BITMAP
 
√xt_bôm≠
;

202 
h™dshake_wrôe_£q
;

203 
√xt_h™dshake_wrôe_£q
;

205 
h™dshake_ªad_£q
;

208 
œ°_wrôe_£quí˚
[8];

211 
ªc‹d_pqueue
 
u≈ro˚s£d_rcds
;

212 
ªc‹d_pqueue
 
¥o˚s£d_rcds
;

215 
pqueue
 
buf„ªd_mesßges
;

218 
pqueue
 
£¡_mesßges
;

225 
ªc‹d_pqueue
 
buf„ªd_≠p_d©a
;

228 
li°í
;

230 
mtu
;

232 
hm_hódî_°
 
w_msg_hdr
;

233 
hm_hódî_°
 
r_msg_hdr
;

235 
dés1_timeout_°
 
timeout
;

238 
timevÆ
 
√xt_timeout
;

241 
timeout_duøti⁄
;

245 
Æît_‰agmít
[
DTLS1_AL_HEADER_LENGTH
];

246 
Æît_‰agmít_Àn
;

247 
h™dshake_‰agmít
[
DTLS1_HM_HEADER_LENGTH
];

248 
h™dshake_‰agmít_Àn
;

250 
ªå™smôtög
;

251 
ch™ge_cùhî_•ec_ok
;

253 #i‚de‡
OPENSSL_NO_SCTP


255 
√xt_°©e
;

257 
shutdown_ª˚ived
;

260 } 
	tDTLS1_STATE
;

262 
	sdés1_ªc‹d_d©a_°


264 *
∑ckë
;

265 
∑ckë_Àngth
;

266 
SSL3_BUFFER
 
rbuf
;

267 
SSL3_RECORD
 
ºec
;

268 #i‚de‡
OPENSSL_NO_SCTP


269 
bio_dgøm_s˘p_rcvöfo
 
ªc‹döfo
;

271 } 
	tDTLS1_RECORD_DATA
;

276 
	#DTLS1_TMO_READ_COUNT
 2

	)

277 
	#DTLS1_TMO_WRITE_COUNT
 2

	)

279 
	#DTLS1_TMO_ALERT_COUNT
 12

	)

281 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/e_os2.h

56 
	~<›ís¶/›ís¶c⁄f.h
>

58 #i‚de‡
HEADER_E_OS2_H


59 
	#HEADER_E_OS2_H


	)

61 #ifde‡ 
__˝lu•lus


71 
	#OPENSSL_SYS_UNIX


	)

74 #i‡
deföed
(
__MWERKS__
Ë&& deföed(
macötosh
Ë|| deföed(
OPENSSL_SYSNAME_MAC
)

75 #unde‡
OPENSSL_SYS_UNIX


76 
	#OPENSSL_SYS_MACINTOSH_CLASSIC


	)

80 #i‡
deföed
(
NETWARE
Ë|| deföed(
OPENSSL_SYSNAME_NETWARE
)

81 #unde‡
OPENSSL_SYS_UNIX


82 
	#OPENSSL_SYS_NETWARE


	)

89 #i‡
deföed
(
OPENSSL_SYSNAME_MSDOS
)

90 #unde‡
OPENSSL_SYS_UNIX


91 
	#OPENSSL_SYS_MSDOS


	)

96 #i‡
deföed
(
OPENSSL_SYSNAME_UWIN
)

97 #unde‡
OPENSSL_SYS_UNIX


98 
	#OPENSSL_SYS_WIN32_UWIN


	)

100 #i‡
deföed
(
__CYGWIN32__
Ë|| deföed(
OPENSSL_SYSNAME_CYGWIN32
)

101 #unde‡
OPENSSL_SYS_UNIX


102 
	#OPENSSL_SYS_WIN32_CYGWIN


	)

104 #i‡
deföed
(
_WIN32
Ë|| deföed(
OPENSSL_SYSNAME_WIN32
)

105 #unde‡
OPENSSL_SYS_UNIX


106 
	#OPENSSL_SYS_WIN32


	)

108 #i‡
deföed
(
OPENSSL_SYSNAME_WINNT
)

109 #unde‡
OPENSSL_SYS_UNIX


110 
	#OPENSSL_SYS_WINNT


	)

112 #i‡
deföed
(
OPENSSL_SYSNAME_WINCE
)

113 #unde‡
OPENSSL_SYS_UNIX


114 
	#OPENSSL_SYS_WINCE


	)

120 #i‡
deföed
(
OPENSSL_SYS_WIN32
Ë|| deföed(
OPENSSL_SYS_WINNT
Ë|| deföed(
OPENSSL_SYS_WINCE
)

121 #unde‡
OPENSSL_SYS_UNIX


122 
	#OPENSSL_SYS_WINDOWS


	)

123 #i‚de‡
OPENSSL_SYS_MSDOS


124 
	#OPENSSL_SYS_MSDOS


	)

131 #ifde‡
OPENSSL_SYS_WINDOWS


132 #i‚de‡
OPENSSL_OPT_WINDLL


133 #i‡
deföed
(
_WINDLL
)

135 
	#OPENSSL_OPT_WINDLL


	)

141 #i‡
deföed
(
__VMS
Ë|| deföed(
VMS
Ë|| deföed(
OPENSSL_SYSNAME_VMS
)

142 #unde‡
OPENSSL_SYS_UNIX


143 
	#OPENSSL_SYS_VMS


	)

144 #i‡
deföed
(
__DECC
)

145 
	#OPENSSL_SYS_VMS_DECC


	)

146 #ñi‡
deföed
(
__DECCXX
)

147 
	#OPENSSL_SYS_VMS_DECC


	)

148 
	#OPENSSL_SYS_VMS_DECCXX


	)

150 
	#OPENSSL_SYS_VMS_NODECC


	)

155 #i‡
deföed
(
__EMX__
Ë|| deföed(
__OS2__
)

156 #unde‡
OPENSSL_SYS_UNIX


157 
	#OPENSSL_SYS_OS2


	)

161 #ifde‡
OPENSSL_SYS_UNIX


162 #i‡
deföed
(
löux
Ë|| deföed(
__löux__
Ë|| deföed(
OPENSSL_SYSNAME_LINUX
)

163 
	#OPENSSL_SYS_LINUX


	)

165 #ifde‡
OPENSSL_SYSNAME_MPE


166 
	#OPENSSL_SYS_MPE


	)

168 #ifde‡
OPENSSL_SYSNAME_SNI


169 
	#OPENSSL_SYS_SNI


	)

171 #ifde‡
OPENSSL_SYSNAME_ULTRASPARC


172 
	#OPENSSL_SYS_ULTRASPARC


	)

174 #ifde‡
OPENSSL_SYSNAME_NEWS4


175 
	#OPENSSL_SYS_NEWS4


	)

177 #ifde‡
OPENSSL_SYSNAME_MACOSX


178 
	#OPENSSL_SYS_MACOSX


	)

180 #ifde‡
OPENSSL_SYSNAME_MACOSX_RHAPSODY


181 
	#OPENSSL_SYS_MACOSX_RHAPSODY


	)

182 
	#OPENSSL_SYS_MACOSX


	)

184 #ifde‡
OPENSSL_SYSNAME_SUNOS


185 
	#OPENSSL_SYS_SUNOS


	)

187 #i‡
deföed
(
_CRAY
Ë|| deföed(
OPENSSL_SYSNAME_CRAY
)

188 
	#OPENSSL_SYS_CRAY


	)

190 #i‡
deföed
(
_AIX
Ë|| deföed(
OPENSSL_SYSNAME_AIX
)

191 
	#OPENSSL_SYS_AIX


	)

196 #i‡
deföed
(
__VOS__
Ë|| deföed(
OPENSSL_SYSNAME_VOS
)

197 
	#OPENSSL_SYS_VOS


	)

198 #ifde‡
__HPPA__


199 
	#OPENSSL_SYS_VOS_HPPA


	)

201 #ifde‡
__IA32__


202 
	#OPENSSL_SYS_VOS_IA32


	)

207 #ifde‡
OPENSSL_SYSNAME_VXWORKS


208 
	#OPENSSL_SYS_VXWORKS


	)

212 #i‡
deföed
(
__BEOS__
)

213 
	#OPENSSL_SYS_BEOS


	)

214 
	~<sys/sockë.h
>

215 #i‡
deföed
(
BONE_VERSION
)

216 
	#OPENSSL_SYS_BEOS_BONE


	)

218 
	#OPENSSL_SYS_BEOS_R5


	)

228 #ifde‡
OPENSSL_SYS_MSDOS


229 
	#OPENSSL_UNISTD_IO
 <
io
.
h
>

	)

230 
	#OPENSSL_DECLARE_EXIT
 
	`exô
();

	)

232 
	#OPENSSL_UNISTD_IO
 
OPENSSL_UNISTD


	)

233 
	#OPENSSL_DECLARE_EXIT


	)

255 #i‡
deföed
(
OPENSSL_SYS_VMS_NODECC
)

256 
	#OPENSSL_EXPORT
 
globÆªf


	)

257 
	#OPENSSL_IMPORT
 
globÆªf


	)

258 
	#OPENSSL_GLOBAL
 
globÆdef


	)

259 #ñi‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë&& deföed(
OPENSSL_OPT_WINDLL
)

260 
	#OPENSSL_EXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

261 
	#OPENSSL_IMPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

262 
	#OPENSSL_GLOBAL


	)

264 
	#OPENSSL_EXPORT
 

	)

265 
	#OPENSSL_IMPORT
 

	)

266 
	#OPENSSL_GLOBAL


	)

268 
	#OPENSSL_EXTERN
 
OPENSSL_IMPORT


	)

280 #ifde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


281 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
) \

282 
ty≥
 *
_shadow_
##
	`«me
() \

283 { 
ty≥
 
_hide_
##
«me
=
vÆue
;  &_hide_##«me; }

	)

284 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ëty≥ *
_shadow_
##
	`«me
()

	)

285 
	#OPENSSL_GLOBAL_REF
(
«me
Ë(*(
_shadow_
##
	`«me
()))

	)

287 
	#OPENSSL_IMPLEMENT_GLOBAL
(
ty≥
,
«me
,
vÆue
Ë
OPENSSL_GLOBAL
Åy≥ 
_shadow_
##«me=vÆue;

	)

288 
	#OPENSSL_DECLARE_GLOBAL
(
ty≥
,
«me
Ë
OPENSSL_EXPORT
Åy≥ 
_shadow_
##
	)
name

289 
	#OPENSSL_GLOBAL_REF
(
«me
Ë
_shadow_
##
	)
name

292 #i‡
deföed
(
OPENSSL_SYS_MACINTOSH_CLASSIC
Ë&& 
macötosh
==1 && !deföed(
MAC_OS_GUSI_SOURCE
)

293 
	#os¶_ssize_t
 

	)

296 #ifde‡
OPENSSL_SYS_MSDOS


297 
	#os¶_ssize_t
 

	)

300 #i‡
deföed
(
NeXT
Ë|| deföed(
OPENSSL_SYS_NEWS4
Ë|| deföed(
OPENSSL_SYS_SUNOS
)

301 
	#ssize_t
 

	)

304 #i‡
deföed
(
__u…rix
Ë&& !deföed(
ssize_t
)

305 
	#os¶_ssize_t
 

	)

308 #i‚de‡
os¶_ssize_t


309 
	#os¶_ssize_t
 
ssize_t


	)

312 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdh.h

69 #i‚de‡
HEADER_ECDH_H


70 
	#HEADER_ECDH_H


	)

72 
	~<›ís¶/›ís¶c⁄f.h
>

74 #ifde‡
OPENSSL_NO_ECDH


75 #îr‹ 
ECDH
 
is
 
dißbÀd
.

78 
	~<›ís¶/ec.h
>

79 
	~<›ís¶/os¶_typ.h
>

80 #i‚de‡
OPENSSL_NO_DEPRECATED


81 
	~<›ís¶/bn.h
>

84 #ifde‡
__˝lu•lus


88 c⁄° 
ECDH_METHOD
 *
ECDH_O≥nSSL
();

90 
ECDH_£t_deÁu…_mëhod
(c⁄° 
ECDH_METHOD
 *);

91 c⁄° 
ECDH_METHOD
 *
ECDH_gë_deÁu…_mëhod
();

92 
ECDH_£t_mëhod
(
EC_KEY
 *, c⁄° 
ECDH_METHOD
 *);

94 
ECDH_compuã_key
(*
out
, 
size_t
 
ouéí
, c⁄° 
EC_POINT
 *
pub_key
, 
EC_KEY
 *
ecdh
,

95 *(*
KDF
)(c⁄° *
ö
, 
size_t
 
öÀn
, *
out
, size_à*
ouéí
));

97 
ECDH_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


98 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

99 
ECDH_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

100 *
ECDH_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

107 
ERR_lﬂd_ECDH_°rögs
();

112 
	#ECDH_F_ECDH_CHECK
 102

	)

113 
	#ECDH_F_ECDH_COMPUTE_KEY
 100

	)

114 
	#ECDH_F_ECDH_DATA_NEW_METHOD
 101

	)

117 
	#ECDH_R_KDF_FAILED
 102

	)

118 
	#ECDH_R_NON_FIPS_METHOD
 103

	)

119 
	#ECDH_R_NO_PRIVATE_VALUE
 100

	)

120 
	#ECDH_R_POINT_ARITHMETIC_FAILURE
 101

	)

122 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ecdsa.h

59 #i‚de‡
HEADER_ECDSA_H


60 
	#HEADER_ECDSA_H


	)

62 
	~<›ís¶/›ís¶c⁄f.h
>

64 #ifde‡
OPENSSL_NO_ECDSA


65 #îr‹ 
ECDSA
 
is
 
dißbÀd
.

68 
	~<›ís¶/ec.h
>

69 
	~<›ís¶/os¶_typ.h
>

70 #i‚de‡
OPENSSL_NO_DEPRECATED


71 
	~<›ís¶/bn.h
>

74 #ifde‡
__˝lu•lus


78 
	sECDSA_SIG_°


80 
BIGNUM
 *
r
;

81 
BIGNUM
 *
s
;

82 } 
	tECDSA_SIG
;

87 
ECDSA_SIG
 *
ECDSA_SIG_√w
();

92 
ECDSA_SIG_‰ì
(
ECDSA_SIG
 *
sig
);

100 
i2d_ECDSA_SIG
(c⁄° 
ECDSA_SIG
 *
sig
, **
µ
);

109 
ECDSA_SIG
 *
d2i_ECDSA_SIG
(ECDSA_SIG **
sig
, c⁄° **
µ
, 
Àn
);

118 
ECDSA_SIG
 *
ECDSA_do_sign
(c⁄° *
dg°
,
dg°_Àn
,
EC_KEY
 *
eckey
);

130 
ECDSA_SIG
 *
ECDSA_do_sign_ex
(c⁄° *
dg°
, 
dg°Àn
,

131 c⁄° 
BIGNUM
 *
köv
, c⁄° BIGNUM *
Ω
, 
EC_KEY
 *
eckey
);

142 
ECDSA_do_vîify
(c⁄° *
dg°
, 
dg°_Àn
,

143 c⁄° 
ECDSA_SIG
 *
sig
, 
EC_KEY
* 
eckey
);

145 c⁄° 
ECDSA_METHOD
 *
ECDSA_O≥nSSL
();

150 
ECDSA_£t_deÁu…_mëhod
(c⁄° 
ECDSA_METHOD
 *
mëh
);

155 c⁄° 
ECDSA_METHOD
 *
ECDSA_gë_deÁu…_mëhod
();

162 
ECDSA_£t_mëhod
(
EC_KEY
 *
eckey
, c⁄° 
ECDSA_METHOD
 *
mëh
);

168 
ECDSA_size
(c⁄° 
EC_KEY
 *
eckey
);

177 
ECDSA_sign_£tup
(
EC_KEY
 *
eckey
, 
BN_CTX
 *
˘x
, 
BIGNUM
 **
köv
,

178 
BIGNUM
 **
Ω
);

190 
ECDSA_sign
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

191 *
sig
, *
sigÀn
, 
EC_KEY
 *
eckey
);

207 
ECDSA_sign_ex
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

208 *
sig
, *
sigÀn
, c⁄° 
BIGNUM
 *
köv
,

209 c⁄° 
BIGNUM
 *
Ω
, 
EC_KEY
 *
eckey
);

222 
ECDSA_vîify
(
ty≥
, c⁄° *
dg°
, 
dg°Àn
,

223 c⁄° *
sig
, 
sigÀn
, 
EC_KEY
 *
eckey
);

226 
ECDSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w


227 *
√w_func
, 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

228 
ECDSA_£t_ex_d©a
(
EC_KEY
 *
d
, 
idx
, *
¨g
);

229 *
ECDSA_gë_ex_d©a
(
EC_KEY
 *
d
, 
idx
);

236 
ERR_lﬂd_ECDSA_°rögs
();

241 
	#ECDSA_F_ECDSA_CHECK
 104

	)

242 
	#ECDSA_F_ECDSA_DATA_NEW_METHOD
 100

	)

243 
	#ECDSA_F_ECDSA_DO_SIGN
 101

	)

244 
	#ECDSA_F_ECDSA_DO_VERIFY
 102

	)

245 
	#ECDSA_F_ECDSA_SIGN_SETUP
 103

	)

248 
	#ECDSA_R_BAD_SIGNATURE
 100

	)

249 
	#ECDSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 101

	)

250 
	#ECDSA_R_ERR_EC_LIB
 102

	)

251 
	#ECDSA_R_MISSING_PARAMETERS
 103

	)

252 
	#ECDSA_R_NEED_NEW_SETUP_VALUES
 106

	)

253 
	#ECDSA_R_NON_FIPS_METHOD
 107

	)

254 
	#ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED
 104

	)

255 
	#ECDSA_R_SIGNATURE_MALLOC_FAILED
 105

	)

257 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/hmac.h

58 #i‚de‡
HEADER_HMAC_H


59 
	#HEADER_HMAC_H


	)

61 
	~<›ís¶/›ís¶c⁄f.h
>

63 #ifde‡
OPENSSL_NO_HMAC


64 #îr‹ 
HMAC
 
is
 
dißbÀd
.

67 
	~<›ís¶/evp.h
>

69 
	#HMAC_MAX_MD_CBLOCK
 128

	)

71 #ifde‡ 
__˝lu•lus


75 
	shmac_˘x_°


77 c⁄° 
EVP_MD
 *
md
;

78 
EVP_MD_CTX
 
md_˘x
;

79 
EVP_MD_CTX
 
i_˘x
;

80 
EVP_MD_CTX
 
o_˘x
;

81 
key_Àngth
;

82 
key
[
HMAC_MAX_MD_CBLOCK
];

83 } 
	tHMAC_CTX
;

85 
	#HMAC_size
(
e
Ë(
	`EVP_MD_size
(”)->
md
))

	)

88 
HMAC_CTX_öô
(
HMAC_CTX
 *
˘x
);

89 
HMAC_CTX_˛ónup
(
HMAC_CTX
 *
˘x
);

91 
	#HMAC_˛ónup
(
˘x
Ë
	`HMAC_CTX_˛ónup
(˘xË

	)

93 
HMAC_Inô
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

94 c⁄° 
EVP_MD
 *
md
);

95 
HMAC_Inô_ex
(
HMAC_CTX
 *
˘x
, c⁄° *
key
, 
Àn
,

96 c⁄° 
EVP_MD
 *
md
, 
ENGINE
 *
im∂
);

97 
HMAC_Upd©e
(
HMAC_CTX
 *
˘x
, c⁄° *
d©a
, 
size_t
 
Àn
);

98 
HMAC_FöÆ
(
HMAC_CTX
 *
˘x
, *
md
, *
Àn
);

99 *
HMAC
(c⁄° 
EVP_MD
 *
evp_md
, c⁄° *
key
, 
key_Àn
,

100 c⁄° *
d
, 
size_t
 
n
, *
md
,

101 *
md_Àn
);

102 
HMAC_CTX_c›y
(
HMAC_CTX
 *
d˘x
, HMAC_CTX *
s˘x
);

104 
HMAC_CTX_£t_Êags
(
HMAC_CTX
 *
˘x
, 
Êags
);

106 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/kssl.h

63 #i‚def 
KSSL_H


64 
	#KSSL_H


	)

66 
	~<›ís¶/›ís¶c⁄f.h
>

68 #i‚de‡
OPENSSL_NO_KRB5


70 
	~<°dio.h
>

71 
	~<˘y≥.h
>

72 
	~<krb5.h
>

74 #ifde‡ 
__˝lu•lus


82 #ifde‡
KRB5_HEIMDAL


83 
	tkrb5_o˘ë
;

84 
	#FAR


	)

87 #i‚de‡
FAR


88 
	#FAR


	)

99 #i‚def 
KRB5SVC


100 
	#KRB5SVC
 "ho°"

	)

103 #i‚def 
KRB5KEYTAB


104 
	#KRB5KEYTAB
 "/ëc/krb5.keyèb"

	)

107 #i‚de‡
KRB5SENDAUTH


108 
	#KRB5SENDAUTH
 1

	)

111 #i‚de‡
KRB5CHECKAUTH


112 
	#KRB5CHECKAUTH
 1

	)

115 #i‚de‡
KSSL_CLOCKSKEW


116 
	#KSSL_CLOCKSKEW
 300;

	)

119 
	#KSSL_ERR_MAX
 255

	)

120 
	sks¶_îr_°
 {

121 
	gªas⁄
;

122 
	gãxt
[
KSSL_ERR_MAX
+1];

123 } 
	tKSSL_ERR
;

130 
	sks¶_˘x_°


133 *
	g£rvi˚_«me
;

134 *
	g£rvi˚_ho°
;

135 *
	g˛õ¡_¥öc
;

136 *
	gkeyèb_fûe
;

137 *
	g¸ed_ˇche
;

138 
krb5_í˘y≥
 
	gí˘y≥
;

139 
	gÀngth
;

140 
krb5_o˘ë
 
FAR
 *
	gkey
;

141 } 
	tKSSL_CTX
;

143 
	#KSSL_CLIENT
 1

	)

144 
	#KSSL_SERVER
 2

	)

145 
	#KSSL_SERVICE
 3

	)

146 
	#KSSL_KEYTAB
 4

	)

148 
	#KSSL_CTX_OK
 0

	)

149 
	#KSSL_CTX_ERR
 1

	)

150 
	#KSSL_NOMEM
 2

	)

153 
krb5_îr‹_code
 
ks¶_˘x_£t°rög
(
KSSL_CTX
 *
ks¶_˘x
, 
which
, *
ãxt
);

154 
KSSL_CTX
 *
ks¶_˘x_√w
();

155 
KSSL_CTX
 *
ks¶_˘x_‰ì
(KSSL_CTX *
ks¶_˘x
);

156 
ks¶_˘x_show
(
KSSL_CTX
 *
ks¶_˘x
);

157 
krb5_îr‹_code
 
ks¶_˘x_£çröc
(
KSSL_CTX
 *
ks¶_˘x
, 
which
,

158 
krb5_d©a
 *
ªÆm
, krb5_d©®*
ítôy
, 
√¡ôõs
);

159 
krb5_îr‹_code
 
ks¶_cgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 **
íc_tkç
,

160 
krb5_d©a
 *
authíp
, 
KSSL_ERR
 *
ks¶_îr
);

161 
krb5_îr‹_code
 
ks¶_sgë_tkt
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
öd©a
,

162 
krb5_tickë_times
 *
âimes
, 
KSSL_ERR
 *
ks¶_îr
);

163 
krb5_îr‹_code
 
ks¶_˘x_£tkey
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_keyblock
 *
£ssi⁄
);

164 
ks¶_îr_£t
(
KSSL_ERR
 *
ks¶_îr
, 
ªas⁄
, *
ãxt
);

165 
ks¶_krb5_‰ì_d©a_c⁄ã¡s
(
krb5_c⁄ãxt
 
c⁄ãxt
, 
krb5_d©a
 *
d©a
);

166 
krb5_îr‹_code
 
ks¶_buûd_¥öcùÆ_2
(
krb5_c⁄ãxt
 
c⁄ãxt
,

167 
krb5_¥öcùÆ
 *
¥öc
, 
æí
, c⁄° *
ªÆm
,

168 
¶í
, c⁄° *
svc
, 
hÀn
, c⁄° *
ho°
);

169 
krb5_îr‹_code
 
ks¶_vÆid©e_times
(
krb5_time°amp
 
©ime
,

170 
krb5_tickë_times
 *
âimes
);

171 
krb5_îr‹_code
 
ks¶_check_authít
(
KSSL_CTX
 *
ks¶_˘x
, 
krb5_d©a
 *
authíç
,

172 
krb5_time°amp
 *
©imï
, 
KSSL_ERR
 *
ks¶_îr
);

173 *
ks¶_skù_c⁄found
(
krb5_í˘y≥
 
í˘y≥
, *
authn
);

175 
SSL_£t0_ks¶_˘x
(
SSL
 *
s
, 
KSSL_CTX
 *
k˘x
);

176 
KSSL_CTX
 * 
SSL_gë0_ks¶_˘x
(
SSL
 *
s
);

177 *
ks¶_˘x_gë0_˛õ¡_¥öc
(
KSSL_CTX
 *
k˘x
);

179 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/lhash.h

63 #i‚de‡
HEADER_LHASH_H


64 
	#HEADER_LHASH_H


	)

66 
	~<›ís¶/e_os2.h
>

67 #i‚de‡
OPENSSL_NO_FP_API


68 
	~<°dio.h
>

71 #i‚de‡
OPENSSL_NO_BIO


72 
	~<›ís¶/bio.h
>

75 #ifde‡ 
__˝lu•lus


79 
	slhash_node_°


81 *
d©a
;

82 
lhash_node_°
 *
√xt
;

83 #i‚de‡
OPENSSL_NO_HASH_COMP


84 
hash
;

86 } 
	tLHASH_NODE
;

88 (*
LHASH_COMP_FN_TYPE
)(const *, const *);

89 (*
	tLHASH_HASH_FN_TYPE
)(const *);

90 (*
LHASH_DOALL_FN_TYPE
)(*);

91 (*
LHASH_DOALL_ARG_FN_TYPE
)(*, *);

101 
	#DECLARE_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

102 
«me
##
	`_LHASH_HASH
(c⁄° *);

	)

103 
	#IMPLEMENT_LHASH_HASH_FN
(
«me
, 
o_ty≥
) \

104 
«me
##
	`_LHASH_HASH
(c⁄° *
¨g
) { \

105 c⁄° 
o_ty≥
 *
a
 = 
¨g
; \

106  
«me
##
	`_hash
(
a
); }

	)

107 
	#LHASH_HASH_FN
(
«me
Ë«me##
_LHASH_HASH


	)

110 
	#DECLARE_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

111 
«me
##
	`_LHASH_COMP
(c⁄° *, c⁄° *);

	)

112 
	#IMPLEMENT_LHASH_COMP_FN
(
«me
, 
o_ty≥
) \

113 
«me
##
	`_LHASH_COMP
(c⁄° *
¨g1
, c⁄° *
¨g2
) { \

114 c⁄° 
o_ty≥
 *
a
 = 
¨g1
; \

115 c⁄° 
o_ty≥
 *
b
 = 
¨g2
; \

116  
«me
##
	`_cmp
(
a
,
b
); }

	)

117 
	#LHASH_COMP_FN
(
«me
Ë«me##
_LHASH_COMP


	)

120 
	#DECLARE_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

121 
«me
##
	`_LHASH_DOALL
(*);

	)

122 
	#IMPLEMENT_LHASH_DOALL_FN
(
«me
, 
o_ty≥
) \

123 
«me
##
	`_LHASH_DOALL
(*
¨g
) { \

124 
o_ty≥
 *
a
 = 
¨g
; \

125 
«me
##
	`_dﬂŒ
(
a
); }

	)

126 
	#LHASH_DOALL_FN
(
«me
Ë«me##
_LHASH_DOALL


	)

129 
	#DECLARE_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

130 
«me
##
	`_LHASH_DOALL_ARG
(*, *);

	)

131 
	#IMPLEMENT_LHASH_DOALL_ARG_FN
(
«me
, 
o_ty≥
, 
a_ty≥
) \

132 
«me
##
	`_LHASH_DOALL_ARG
(*
¨g1
, *
¨g2
) { \

133 
o_ty≥
 *
a
 = 
¨g1
; \

134 
a_ty≥
 *
b
 = 
¨g2
; \

135 
«me
##
	`_dﬂŒ_¨g
(
a
, 
b
); }

	)

136 
	#LHASH_DOALL_ARG_FN
(
«me
Ë«me##
_LHASH_DOALL_ARG


	)

138 
	slhash_°


140 
LHASH_NODE
 **
b
;

141 
LHASH_COMP_FN_TYPE
 
comp
;

142 
LHASH_HASH_FN_TYPE
 
hash
;

143 
num_nodes
;

144 
num_Æloc_nodes
;

145 
p
;

146 
pmax
;

147 
up_lﬂd
;

148 
down_lﬂd
;

149 
num_ôems
;

151 
num_ex∑nds
;

152 
num_ex∑nd_ªÆlocs
;

153 
num_c⁄åa˘s
;

154 
num_c⁄åa˘_ªÆlocs
;

155 
num_hash_ˇŒs
;

156 
num_comp_ˇŒs
;

157 
num_ö£π
;

158 
num_ª∂a˚
;

159 
num_dñëe
;

160 
num_no_dñëe
;

161 
num_ªåõve
;

162 
num_ªåõve_miss
;

163 
num_hash_comps
;

165 
îr‹
;

166 } 
	t_LHASH
;

169 
	#LH_LOAD_MULT
 256

	)

173 
	#lh_îr‹
(
lh
Ë(÷h)->
îr‹
)

	)

175 
_LHASH
 *
lh_√w
(
LHASH_HASH_FN_TYPE
 
h
, 
LHASH_COMP_FN_TYPE
 
c
);

176 
lh_‰ì
(
_LHASH
 *
lh
);

177 *
lh_ö£π
(
_LHASH
 *
lh
, *
d©a
);

178 *
lh_dñëe
(
_LHASH
 *
lh
, c⁄° *
d©a
);

179 *
lh_ªåõve
(
_LHASH
 *
lh
, c⁄° *
d©a
);

180 
lh_dﬂŒ
(
_LHASH
 *
lh
, 
LHASH_DOALL_FN_TYPE
 
func
);

181 
lh_dﬂŒ_¨g
(
_LHASH
 *
lh
, 
LHASH_DOALL_ARG_FN_TYPE
 
func
, *
¨g
);

182 
lh_°rhash
(c⁄° *
c
);

183 
lh_num_ôems
(c⁄° 
_LHASH
 *
lh
);

185 #i‚de‡
OPENSSL_NO_FP_API


186 
lh_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

187 
lh_node_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

188 
lh_node_ußge_°©s
(c⁄° 
_LHASH
 *
lh
, 
FILE
 *
out
);

191 #i‚de‡
OPENSSL_NO_BIO


192 
lh_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

193 
lh_node_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

194 
lh_node_ußge_°©s_bio
(c⁄° 
_LHASH
 *
lh
, 
BIO
 *
out
);

199 
	#LHASH_OF
(
ty≥
Ë
lhash_°_
##
	)
type

201 
	#DECLARE_LHASH_OF
(
ty≥
Ë
	`LHASH_OF
—y≥Ë{ 
dummy
; }

	)

203 
	#CHECKED_LHASH_OF
(
ty≥
,
lh
) \

204 ((
_LHASH
 *)
	`CHECKED_PTR_OF
(
	`LHASH_OF
(
ty≥
),
lh
))

	)

207 
	#LHM_lh_√w
(
ty≥
, 
«me
) \

208 ((
	`LHASH_OF
(
ty≥
Ë*)
	`lh_√w
(
	`LHASH_HASH_FN
(
«me
), 
	`LHASH_COMP_FN
“ame)))

	)

209 
	#LHM_lh_îr‹
(
ty≥
, 
lh
) \

210 
	`lh_îr‹
(
	`CHECKED_LHASH_OF
(
ty≥
,
lh
))

	)

211 
	#LHM_lh_ö£π
(
ty≥
, 
lh
, 
ö°
) \

212 ((
ty≥
 *)
	`lh_ö£π
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

213 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

214 
	#LHM_lh_ªåõve
(
ty≥
, 
lh
, 
ö°
) \

215 ((
ty≥
 *)
	`lh_ªåõve
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

216 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

217 
	#LHM_lh_dñëe
(
ty≥
, 
lh
, 
ö°
) \

218 ((
ty≥
 *)
	`lh_dñëe
(
	`CHECKED_LHASH_OF
—y≥, 
lh
), \

219 
	`CHECKED_PTR_OF
(
ty≥
, 
ö°
)))

	)

220 
	#LHM_lh_dﬂŒ
(
ty≥
, 
lh
,
‚
Ë
	`lh_dﬂŒ
(
	`CHECKED_LHASH_OF
—y≥,Üh), fn)

	)

221 
	#LHM_lh_dﬂŒ_¨g
(
ty≥
, 
lh
, 
‚
, 
¨g_ty≥
, 
¨g
) \

222 
	`lh_dﬂŒ_¨g
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
‚
, 
	`CHECKED_PTR_OF
(
¨g_ty≥
, 
¨g
))

	)

223 
	#LHM_lh_num_ôems
(
ty≥
, 
lh
Ë
	`lh_num_ôems
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

224 
	#LHM_lh_down_lﬂd
(
ty≥
, 
lh
Ë(
	`CHECKED_LHASH_OF
—y≥,Üh)->
down_lﬂd
)

	)

225 
	#LHM_lh_node_°©s_bio
(
ty≥
, 
lh
, 
out
) \

226 
	`lh_node_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

227 
	#LHM_lh_node_ußge_°©s_bio
(
ty≥
, 
lh
, 
out
) \

228 
	`lh_node_ußge_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

229 
	#LHM_lh_°©s_bio
(
ty≥
, 
lh
, 
out
) \

230 
	`lh_°©s_bio
(
	`CHECKED_LHASH_OF
(
ty≥
, 
lh
), 
out
)

	)

231 
	#LHM_lh_‰ì
(
ty≥
, 
lh
Ë
	`lh_‰ì
(
	`CHECKED_LHASH_OF
—y≥,Üh))

	)

233 
DECLARE_LHASH_OF
(
OPENSSL_STRING
);

234 
DECLARE_LHASH_OF
(
OPENSSL_CSTRING
);

236 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/objects.h

59 #i‚de‡
HEADER_OBJECTS_H


60 
	#HEADER_OBJECTS_H


	)

62 
	#USE_OBJ_MAC


	)

64 #ifde‡
USE_OBJ_MAC


65 
	~<›ís¶/obj_mac.h
>

67 
	#SN_undef
 "UNDEF"

	)

68 
	#LN_undef
 "undeföed"

	)

69 
	#NID_undef
 0

	)

70 
	#OBJ_undef
 0L

	)

72 
	#SN_Alg‹ôhm
 "Alg‹ôhm"

	)

73 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

74 
	#NID_Æg‹ôhm
 38

	)

75 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

77 
	#LN_rßdsi
 "rßdsi"

	)

78 
	#NID_rßdsi
 1

	)

79 
	#OBJ_rßdsi
 1L,2L,840L,113549L

	)

81 
	#LN_pkcs
 "pkcs"

	)

82 
	#NID_pkcs
 2

	)

83 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

85 
	#SN_md2
 "MD2"

	)

86 
	#LN_md2
 "md2"

	)

87 
	#NID_md2
 3

	)

88 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

90 
	#SN_md5
 "MD5"

	)

91 
	#LN_md5
 "md5"

	)

92 
	#NID_md5
 4

	)

93 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

95 
	#SN_rc4
 "RC4"

	)

96 
	#LN_rc4
 "rc4"

	)

97 
	#NID_rc4
 5

	)

98 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

100 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

101 
	#NID_rßEn¸y±i⁄
 6

	)

102 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs
,1L,1L

	)

104 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

105 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

106 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

107 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,2L

	)

109 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

110 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

111 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

112 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,4L

	)

114 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

115 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

116 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

117 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs
,5L,1L

	)

119 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

120 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

121 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

122 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs
,5L,3L

	)

124 
	#LN_X500
 "X500"

	)

125 
	#NID_X500
 11

	)

126 
	#OBJ_X500
 2L,5L

	)

128 
	#LN_X509
 "X509"

	)

129 
	#NID_X509
 12

	)

130 
	#OBJ_X509
 
OBJ_X500
,4L

	)

132 
	#SN_comm⁄Name
 "CN"

	)

133 
	#LN_comm⁄Name
 "comm⁄Name"

	)

134 
	#NID_comm⁄Name
 13

	)

135 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

137 
	#SN_cou¡ryName
 "C"

	)

138 
	#LN_cou¡ryName
 "cou¡ryName"

	)

139 
	#NID_cou¡ryName
 14

	)

140 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

142 
	#SN_loˇlôyName
 "L"

	)

143 
	#LN_loˇlôyName
 "loˇlôyName"

	)

144 
	#NID_loˇlôyName
 15

	)

145 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

150 
	#SN_°©eOrProvö˚Name
 "ST"

	)

151 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

152 
	#NID_°©eOrProvö˚Name
 16

	)

153 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

155 
	#SN_‹g™iz©i⁄Name
 "O"

	)

156 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

157 
	#NID_‹g™iz©i⁄Name
 17

	)

158 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

160 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

161 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

162 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

163 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

165 
	#SN_rß
 "RSA"

	)

166 
	#LN_rß
 "rß"

	)

167 
	#NID_rß
 19

	)

168 
	#OBJ_rß
 
OBJ_X500
,8L,1L,1L

	)

170 
	#LN_pkcs7
 "pkcs7"

	)

171 
	#NID_pkcs7
 20

	)

172 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

174 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

175 
	#NID_pkcs7_d©a
 21

	)

176 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

178 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

179 
	#NID_pkcs7_sig√d
 22

	)

180 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

182 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

183 
	#NID_pkcs7_ívñ›ed
 23

	)

184 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

186 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

187 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

188 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

190 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

191 
	#NID_pkcs7_dige°
 25

	)

192 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

194 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

195 
	#NID_pkcs7_í¸y±ed
 26

	)

196 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

198 
	#LN_pkcs3
 "pkcs3"

	)

199 
	#NID_pkcs3
 27

	)

200 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

202 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

203 
	#NID_dhKeyAgªemít
 28

	)

204 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

206 
	#SN_des_ecb
 "DES-ECB"

	)

207 
	#LN_des_ecb
 "des-ecb"

	)

208 
	#NID_des_ecb
 29

	)

209 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

211 
	#SN_des_cfb64
 "DES-CFB"

	)

212 
	#LN_des_cfb64
 "des-cfb"

	)

213 
	#NID_des_cfb64
 30

	)

215 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

217 
	#SN_des_cbc
 "DES-CBC"

	)

218 
	#LN_des_cbc
 "des-cbc"

	)

219 
	#NID_des_cbc
 31

	)

221 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

223 
	#SN_des_ede
 "DES-EDE"

	)

224 
	#LN_des_ede
 "des-ede"

	)

225 
	#NID_des_ede
 32

	)

227 
	#OBJ_des_ede
 
OBJ_Æg‹ôhm
,17L

	)

229 
	#SN_des_ede3
 "DES-EDE3"

	)

230 
	#LN_des_ede3
 "des-ede3"

	)

231 
	#NID_des_ede3
 33

	)

233 
	#SN_idó_cbc
 "IDEA-CBC"

	)

234 
	#LN_idó_cbc
 "idó-cbc"

	)

235 
	#NID_idó_cbc
 34

	)

236 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

238 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

239 
	#LN_idó_cfb64
 "idó-cfb"

	)

240 
	#NID_idó_cfb64
 35

	)

242 
	#SN_idó_ecb
 "IDEA-ECB"

	)

243 
	#LN_idó_ecb
 "idó-ecb"

	)

244 
	#NID_idó_ecb
 36

	)

246 
	#SN_rc2_cbc
 "RC2-CBC"

	)

247 
	#LN_rc2_cbc
 "rc2-cbc"

	)

248 
	#NID_rc2_cbc
 37

	)

249 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

251 
	#SN_rc2_ecb
 "RC2-ECB"

	)

252 
	#LN_rc2_ecb
 "rc2-ecb"

	)

253 
	#NID_rc2_ecb
 38

	)

255 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

256 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

257 
	#NID_rc2_cfb64
 39

	)

259 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

260 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

261 
	#NID_rc2_ofb64
 40

	)

263 
	#SN_sha
 "SHA"

	)

264 
	#LN_sha
 "sha"

	)

265 
	#NID_sha
 41

	)

266 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

268 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

269 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

270 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

271 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

273 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

274 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

275 
	#NID_des_ede_cbc
 43

	)

277 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

278 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

279 
	#NID_des_ede3_cbc
 44

	)

280 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

282 
	#SN_des_ofb64
 "DES-OFB"

	)

283 
	#LN_des_ofb64
 "des-ofb"

	)

284 
	#NID_des_ofb64
 45

	)

285 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

288 
	#LN_idó_ofb64
 "idó-ofb"

	)

289 
	#NID_idó_ofb64
 46

	)

291 
	#LN_pkcs9
 "pkcs9"

	)

292 
	#NID_pkcs9
 47

	)

293 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

295 
	#SN_pkcs9_emaûAddªss
 "Emaû"

	)

296 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

297 
	#NID_pkcs9_emaûAddªss
 48

	)

298 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

300 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

301 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

302 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

304 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

305 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

306 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

308 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

309 
	#NID_pkcs9_mesßgeDige°
 51

	)

310 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

312 
	#LN_pkcs9_signögTime
 "signögTime"

	)

313 
	#NID_pkcs9_signögTime
 52

	)

314 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

316 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

317 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

318 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

320 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

321 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

322 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

324 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

325 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

326 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

328 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

329 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

330 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

332 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

333 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

334 
	#NID_√tsˇ≥
 57

	)

335 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

337 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

338 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

339 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

340 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

342 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

343 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

344 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

345 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

347 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

348 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

349 
	#NID_des_ede_cfb64
 60

	)

351 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

352 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

353 
	#NID_des_ede3_cfb64
 61

	)

355 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

356 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

357 
	#NID_des_ede_ofb64
 62

	)

359 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

360 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

361 
	#NID_des_ede3_ofb64
 63

	)

364 
	#SN_sha1
 "SHA1"

	)

365 
	#LN_sha1
 "sha1"

	)

366 
	#NID_sha1
 64

	)

367 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

371 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

372 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

373 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

374 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs
,1L,5L

	)

376 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

377 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

378 
	#NID_dßWôhSHA
 66

	)

379 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

381 
	#SN_dß_2
 "DSA-ﬁd"

	)

382 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

383 
	#NID_dß_2
 67

	)

384 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

387 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

388 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

389 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

390 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs
,5L,11L

	)

396 
	#LN_id_pbkdf2
 "PBKDF2"

	)

397 
	#NID_id_pbkdf2
 69

	)

398 
	#OBJ_id_pbkdf2
 
OBJ_pkcs
,5L,12L

	)

400 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

401 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

402 
	#NID_dßWôhSHA1_2
 70

	)

404 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

406 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

407 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

408 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

409 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

411 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

412 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

413 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

414 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

416 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

417 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

418 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

419 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

421 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

422 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

423 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

424 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

426 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

427 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

428 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

429 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

431 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

432 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

433 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

434 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

436 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

437 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

438 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

439 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

441 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

442 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

443 
	#NID_√tsˇ≥_commít
 78

	)

444 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

446 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

447 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

448 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

449 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

451 
	#SN_desx_cbc
 "DESX-CBC"

	)

452 
	#LN_desx_cbc
 "desx-cbc"

	)

453 
	#NID_desx_cbc
 80

	)

455 
	#SN_id_˚
 "id-˚"

	)

456 
	#NID_id_˚
 81

	)

457 
	#OBJ_id_˚
 2L,5L,29L

	)

459 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

460 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

461 
	#NID_subje˘_key_idítifõr
 82

	)

462 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

464 
	#SN_key_ußge
 "keyUßge"

	)

465 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

466 
	#NID_key_ußge
 83

	)

467 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

469 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

470 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

471 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

472 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

474 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

475 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

476 
	#NID_subje˘_Æt_«me
 85

	)

477 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

479 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

480 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

481 
	#NID_issuî_Æt_«me
 86

	)

482 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

484 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

485 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

486 
	#NID_basic_c⁄°øöts
 87

	)

487 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

489 
	#SN_¸l_numbî
 "¸lNumbî"

	)

490 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

491 
	#NID_¸l_numbî
 88

	)

492 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

494 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

495 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

496 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

497 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

499 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

500 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

501 
	#NID_auth‹ôy_key_idítifõr
 90

	)

502 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

504 
	#SN_bf_cbc
 "BF-CBC"

	)

505 
	#LN_bf_cbc
 "bf-cbc"

	)

506 
	#NID_bf_cbc
 91

	)

507 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

509 
	#SN_bf_ecb
 "BF-ECB"

	)

510 
	#LN_bf_ecb
 "bf-ecb"

	)

511 
	#NID_bf_ecb
 92

	)

513 
	#SN_bf_cfb64
 "BF-CFB"

	)

514 
	#LN_bf_cfb64
 "bf-cfb"

	)

515 
	#NID_bf_cfb64
 93

	)

517 
	#SN_bf_ofb64
 "BF-OFB"

	)

518 
	#LN_bf_ofb64
 "bf-ofb"

	)

519 
	#NID_bf_ofb64
 94

	)

521 
	#SN_mdc2
 "MDC2"

	)

522 
	#LN_mdc2
 "mdc2"

	)

523 
	#NID_mdc2
 95

	)

524 
	#OBJ_mdc2
 2L,5L,8L,3L,101L

	)

527 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

528 
	#LN_mdc2WôhRSA
 "mdc2wôhRSA"

	)

529 
	#NID_mdc2WôhRSA
 96

	)

530 
	#OBJ_mdc2WôhRSA
 2L,5L,8L,3L,100L

	)

532 
	#SN_rc4_40
 "RC4-40"

	)

533 
	#LN_rc4_40
 "rc4-40"

	)

534 
	#NID_rc4_40
 97

	)

536 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

537 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

538 
	#NID_rc2_40_cbc
 98

	)

540 
	#SN_givíName
 "G"

	)

541 
	#LN_givíName
 "givíName"

	)

542 
	#NID_givíName
 99

	)

543 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

545 
	#SN_su∫ame
 "S"

	)

546 
	#LN_su∫ame
 "su∫ame"

	)

547 
	#NID_su∫ame
 100

	)

548 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

550 
	#SN_öôüls
 "I"

	)

551 
	#LN_öôüls
 "öôüls"

	)

552 
	#NID_öôüls
 101

	)

553 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

555 
	#SN_uniqueIdítifõr
 "UID"

	)

556 
	#LN_uniqueIdítifõr
 "uniqueIdítifõr"

	)

557 
	#NID_uniqueIdítifõr
 102

	)

558 
	#OBJ_uniqueIdítifõr
 
OBJ_X509
,45L

	)

560 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

561 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

562 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

563 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

565 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

566 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

567 
	#NID_md5WôhRSA
 104

	)

568 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

570 
	#SN_£rülNumbî
 "SN"

	)

571 
	#LN_£rülNumbî
 "£rülNumbî"

	)

572 
	#NID_£rülNumbî
 105

	)

573 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

575 
	#SN_tôÀ
 "T"

	)

576 
	#LN_tôÀ
 "tôÀ"

	)

577 
	#NID_tôÀ
 106

	)

578 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

580 
	#SN_des¸ùti⁄
 "D"

	)

581 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

582 
	#NID_des¸ùti⁄
 107

	)

583 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

586 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

587 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

588 
	#NID_ˇ°5_cbc
 108

	)

589 
	#OBJ_ˇ°5_cbc
 1L,2L,840L,113533L,7L,66L,10L

	)

591 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

592 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

593 
	#NID_ˇ°5_ecb
 109

	)

595 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

596 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

597 
	#NID_ˇ°5_cfb64
 110

	)

599 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

600 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

601 
	#NID_ˇ°5_ofb64
 111

	)

603 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

604 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

605 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 1L,2L,840L,113533L,7L,66L,12L

	)

611 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

612 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

613 
	#NID_dßWôhSHA1
 113

	)

614 
	#OBJ_dßWôhSHA1
 1L,2L,840L,10040L,4L,3L

	)

616 
	#NID_md5_sha1
 114

	)

617 
	#SN_md5_sha1
 "MD5-SHA1"

	)

618 
	#LN_md5_sha1
 "md5-sha1"

	)

620 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

621 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

622 
	#NID_sha1WôhRSA
 115

	)

623 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

625 
	#SN_dß
 "DSA"

	)

626 
	#LN_dß
 "dßEn¸y±i⁄"

	)

627 
	#NID_dß
 116

	)

628 
	#OBJ_dß
 1L,2L,840L,10040L,4L,1L

	)

630 
	#SN_rùemd160
 "RIPEMD160"

	)

631 
	#LN_rùemd160
 "rùemd160"

	)

632 
	#NID_rùemd160
 117

	)

633 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

637 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

638 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

639 
	#NID_rùemd160WôhRSA
 119

	)

640 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

650 
	#SN_rc5_cbc
 "RC5-CBC"

	)

651 
	#LN_rc5_cbc
 "rc5-cbc"

	)

652 
	#NID_rc5_cbc
 120

	)

653 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

655 
	#SN_rc5_ecb
 "RC5-ECB"

	)

656 
	#LN_rc5_ecb
 "rc5-ecb"

	)

657 
	#NID_rc5_ecb
 121

	)

659 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

660 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

661 
	#NID_rc5_cfb64
 122

	)

663 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

664 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

665 
	#NID_rc5_ofb64
 123

	)

667 
	#SN_æe_com¥essi⁄
 "RLE"

	)

668 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

669 
	#NID_æe_com¥essi⁄
 124

	)

670 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

672 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

673 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

674 
	#NID_zlib_com¥essi⁄
 125

	)

675 
	#OBJ_zlib_com¥essi⁄
 1L,1L,1L,1L,666L,2L

	)

677 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

678 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

679 
	#NID_ext_key_ußge
 126

	)

680 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37

	)

682 
	#SN_id_pkix
 "PKIX"

	)

683 
	#NID_id_pkix
 127

	)

684 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

686 
	#SN_id_kp
 "id-kp"

	)

687 
	#NID_id_kp
 128

	)

688 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

692 
	#SN_£rvî_auth
 "£rvîAuth"

	)

693 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

694 
	#NID_£rvî_auth
 129

	)

695 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

697 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

698 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

699 
	#NID_˛õ¡_auth
 130

	)

700 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

702 
	#SN_code_sign
 "codeSignög"

	)

703 
	#LN_code_sign
 "CodêSignög"

	)

704 
	#NID_code_sign
 131

	)

705 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

707 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

708 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

709 
	#NID_emaû_¥Ÿe˘
 132

	)

710 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

712 
	#SN_time_°amp
 "timeSèmpög"

	)

713 
	#LN_time_°amp
 "TimêSèmpög"

	)

714 
	#NID_time_°amp
 133

	)

715 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

719 
	#SN_ms_code_öd
 "msCodeInd"

	)

720 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

721 
	#NID_ms_code_öd
 134

	)

722 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

724 
	#SN_ms_code_com
 "msCodeCom"

	)

725 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

726 
	#NID_ms_code_com
 135

	)

727 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

729 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

730 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

731 
	#NID_ms_˘l_sign
 136

	)

732 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

734 
	#SN_ms_sgc
 "msSGC"

	)

735 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

736 
	#NID_ms_sgc
 137

	)

737 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

739 
	#SN_ms_efs
 "msEFS"

	)

740 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

741 
	#NID_ms_efs
 138

	)

742 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

746 
	#SN_ns_sgc
 "nsSGC"

	)

747 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

748 
	#NID_ns_sgc
 139

	)

749 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

751 
	#SN_dñè_¸l
 "dñèCRL"

	)

752 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

753 
	#NID_dñè_¸l
 140

	)

754 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

756 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

757 
	#LN_¸l_ªas⁄
 "CRL Rós⁄ Code"

	)

758 
	#NID_¸l_ªas⁄
 141

	)

759 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

761 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

762 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

763 
	#NID_övÆidôy_d©e
 142

	)

764 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

766 
	#SN_sx√t
 "SXNëID"

	)

767 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

768 
	#NID_sx√t
 143

	)

769 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

773 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

774 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
, 1

	)

776 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

777 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

778 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

779 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
, 1L

	)

781 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

782 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

783 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

784 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
, 2L

	)

786 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

787 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

788 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

789 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 3L

	)

791 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

792 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

793 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

794 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
, 4L

	)

796 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

797 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

798 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

799 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 5L

	)

801 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

802 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

803 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

804 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
, 6L

	)

806 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
, 10L

	)

808 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
, 1L

	)

810 
	#LN_keyBag
 "keyBag"

	)

811 
	#NID_keyBag
 150

	)

812 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
, 1L

	)

814 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

815 
	#NID_pkcs8ShroudedKeyBag
 151

	)

816 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
, 2L

	)

818 
	#LN_˚πBag
 "˚πBag"

	)

819 
	#NID_˚πBag
 152

	)

820 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
, 3L

	)

822 
	#LN_¸lBag
 "¸lBag"

	)

823 
	#NID_¸lBag
 153

	)

824 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
, 4L

	)

826 
	#LN_£¸ëBag
 "£¸ëBag"

	)

827 
	#NID_£¸ëBag
 154

	)

828 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
, 5L

	)

830 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

831 
	#NID_ß„C⁄ã¡sBag
 155

	)

832 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
, 6L

	)

834 
	#LN_‰õndlyName
 "‰õndlyName"

	)

835 
	#NID_‰õndlyName
 156

	)

836 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
, 20L

	)

838 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

839 
	#NID_loˇlKeyID
 157

	)

840 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
, 21L

	)

842 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
, 22L

	)

844 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

845 
	#NID_x509Cîtifiˇã
 158

	)

846 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
, 1L

	)

848 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

849 
	#NID_sdsiCîtifiˇã
 159

	)

850 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
, 2L

	)

852 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
, 23L

	)

854 
	#LN_x509Cæ
 "x509Cæ"

	)

855 
	#NID_x509Cæ
 160

	)

856 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
, 1L

	)

860 
	#LN_pbes2
 "PBES2"

	)

861 
	#NID_pbes2
 161

	)

862 
	#OBJ_pbes2
 
OBJ_pkcs
,5L,13L

	)

864 
	#LN_pbmac1
 "PBMAC1"

	)

865 
	#NID_pbmac1
 162

	)

866 
	#OBJ_pbmac1
 
OBJ_pkcs
,5L,14L

	)

868 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

869 
	#NID_hmacWôhSHA1
 163

	)

870 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

874 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

875 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

876 
	#NID_id_qt_˝s
 164

	)

877 
	#OBJ_id_qt_˝s
 
OBJ_id_pkix
,2L,1L

	)

879 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

880 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

881 
	#NID_id_qt_unŸi˚
 165

	)

882 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_pkix
,2L,2L

	)

884 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

885 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

886 
	#NID_rc2_64_cbc
 166

	)

888 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

889 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

890 
	#NID_SMIMEC≠abûôõs
 167

	)

891 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

893 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

894 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

895 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

896 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs
,5L,4L

	)

898 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

899 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

900 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

901 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs
,5L,6L

	)

903 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

904 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

905 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

906 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs
,5L,10L

	)

910 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

911 
	#SN_ms_ext_ªq
 "msExtReq"

	)

912 
	#NID_ms_ext_ªq
 171

	)

913 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

915 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

916 
	#SN_ext_ªq
 "extReq"

	)

917 
	#NID_ext_ªq
 172

	)

918 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

920 
	#SN_«me
 "«me"

	)

921 
	#LN_«me
 "«me"

	)

922 
	#NID_«me
 173

	)

923 
	#OBJ_«me
 
OBJ_X509
,41L

	)

925 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

926 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

927 
	#NID_dnQuÆifõr
 174

	)

928 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

930 
	#SN_id_≥
 "id-≥"

	)

931 
	#NID_id_≥
 175

	)

932 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

934 
	#SN_id_ad
 "id-ad"

	)

935 
	#NID_id_ad
 176

	)

936 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

938 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

939 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

940 
	#NID_öfo_ac˚ss
 177

	)

941 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

943 
	#SN_ad_OCSP
 "OCSP"

	)

944 
	#LN_ad_OCSP
 "OCSP"

	)

945 
	#NID_ad_OCSP
 178

	)

946 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

948 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

949 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

950 
	#NID_ad_ˇ_issuîs
 179

	)

951 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

953 
	#SN_OCSP_sign
 "OCSPSignög"

	)

954 
	#LN_OCSP_sign
 "OCSP Signög"

	)

955 
	#NID_OCSP_sign
 180

	)

956 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

959 
	~<›ís¶/bio.h
>

960 
	~<›ís¶/a¢1.h
>

962 
	#OBJ_NAME_TYPE_UNDEF
 0x00

	)

963 
	#OBJ_NAME_TYPE_MD_METH
 0x01

	)

964 
	#OBJ_NAME_TYPE_CIPHER_METH
 0x02

	)

965 
	#OBJ_NAME_TYPE_PKEY_METH
 0x03

	)

966 
	#OBJ_NAME_TYPE_COMP_METH
 0x04

	)

967 
	#OBJ_NAME_TYPE_NUM
 0x05

	)

969 
	#OBJ_NAME_ALIAS
 0x8000

	)

971 
	#OBJ_BSEARCH_VALUE_ON_NOMATCH
 0x01

	)

972 
	#OBJ_BSEARCH_FIRST_VALUE_ON_MATCH
 0x02

	)

975 #ifde‡ 
__˝lu•lus


979 
	sobj_«me_°


981 
ty≥
;

982 
Æüs
;

983 c⁄° *
«me
;

984 c⁄° *
d©a
;

985 } 
	tOBJ_NAME
;

987 
	#OBJ_¸óã_™d_add_obje˘
(
a
,
b
,
c
Ë
	`OBJ_¸óã
◊,b,c)

	)

990 
OBJ_NAME_öô
();

991 
OBJ_NAME_√w_ödex
((*
hash_func
)(const *),

992 (*
cmp_func
)(const *, const *),

993 (*
‰ì_func
)(const *, , const *));

994 c⁄° *
OBJ_NAME_gë
(c⁄° *
«me
,
ty≥
);

995 
OBJ_NAME_add
(c⁄° *
«me
,
ty≥
,c⁄° *
d©a
);

996 
OBJ_NAME_ªmove
(c⁄° *
«me
,
ty≥
);

997 
OBJ_NAME_˛ónup
(
ty≥
);

998 
OBJ_NAME_do_Æl
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

999 *
¨g
);

1000 
OBJ_NAME_do_Æl_s‹ãd
(
ty≥
,(*
‚
)(c⁄° 
OBJ_NAME
 *,*
¨g
),

1001 *
¨g
);

1003 
ASN1_OBJECT
 * 
OBJ_dup
(c⁄° ASN1_OBJECT *
o
);

1004 
ASN1_OBJECT
 * 
OBJ_nid2obj
(
n
);

1005 c⁄° * 
OBJ_nid2 
(
n
);

1006 c⁄° * 
OBJ_nid2¢
(
n
);

1007 
OBJ_obj2nid
(c⁄° 
ASN1_OBJECT
 *
o
);

1008 
ASN1_OBJECT
 * 
OBJ_txt2obj
(c⁄° *
s
, 
no_«me
);

1009 
OBJ_obj2txt
(*
buf
, 
buf_Àn
, c⁄° 
ASN1_OBJECT
 *
a
, 
no_«me
);

1010 
OBJ_txt2nid
(c⁄° *
s
);

1011 
OBJ_ 2nid
(c⁄° *
s
);

1012 
OBJ_¢2nid
(c⁄° *
s
);

1013 
OBJ_cmp
(c⁄° 
ASN1_OBJECT
 *
a
,c⁄° ASN1_OBJECT *
b
);

1014 c⁄° * 
OBJ_b£¨ch_
(c⁄° *
key
,c⁄° *
ba£
,
num
,
size
,

1015 (*
cmp
)(const *, const *));

1016 c⁄° * 
OBJ_b£¨ch_ex_
(c⁄° *
key
,c⁄° *
ba£
,
num
,

1017 
size
,

1018 (*
cmp
)(const *, const *),

1019 
Êags
);

1021 
	#_DECLARE_OBJ_BSEARCH_CMP_FN
(
sc›e
, 
ty≥1
, 
ty≥2
, 
nm
) \

1022 
nm
##
	`_cmp_BSEARCH_CMP_FN
(const *, const *); \

1023 
nm
##
	`_cmp
(
ty≥1
 c⁄° *, 
ty≥2
 const *); \

1024 
sc›e
 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1026 
	#DECLARE_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
cmp
) \

1027 
	`_DECLARE_OBJ_BSEARCH_CMP_FN
(, 
ty≥1
, 
ty≥2
, 
cmp
)

	)

1028 
	#DECLARE_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1029 
ty≥2
 * 
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
)

	)

1058 
	#IMPLEMENT_OBJ_BSEARCH_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1059 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1061 
ty≥1
 c⁄° *
a
 = 
a_
; \

1062 
ty≥2
 c⁄° *
b
 = 
b_
; \

1063  
nm
##
	`_cmp
(
a
,
b
); \

1065 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1067  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1068 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1070 
	`dummy_¥ŸŸy≥
()

	)

1072 
	#IMPLEMENT_OBJ_BSEARCH_GLOBAL_CMP_FN
(
ty≥1
, 
ty≥2
, 
nm
) \

1073 
nm
##
	`_cmp_BSEARCH_CMP_FN
(c⁄° *
a_
, c⁄° *
b_
) \

1075 
ty≥1
 c⁄° *
a
 = 
a_
; \

1076 
ty≥2
 c⁄° *
b
 = 
b_
; \

1077  
nm
##
	`_cmp
(
a
,
b
); \

1079 
ty≥2
 *
OBJ_b£¨ch_
##
	`nm
(
ty≥1
 *
key
,Åy≥2 c⁄° *
ba£
, 
num
) \

1081  (
ty≥2
 *)
	`OBJ_b£¨ch_
(
key
, 
ba£
, 
num
, (type2), \

1082 
nm
##
_cmp_BSEARCH_CMP_FN
); \

1084 
	`dummy_¥ŸŸy≥
()

	)

1086 
	#OBJ_b£¨ch
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
) \

1087 ((
ty≥2
 *)
	`OBJ_b£¨ch_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1088 
num
,(
ty≥2
), \

1089 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1090 ()
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1091 
cmp
##
_BSEARCH_CMP_FN
)))

	)

1093 
	#OBJ_b£¨ch_ex
(
ty≥1
,
key
,
ty≥2
,
ba£
,
num
,
cmp
,
Êags
) \

1094 ((
ty≥2
 *)
	`OBJ_b£¨ch_ex_
(
	`CHECKED_PTR_OF
(
ty≥1
,
key
),CHECKED_PTR_OF—y≥2,
ba£
), \

1095 
num
,(
ty≥2
), \

1096 (()
	`CHECKED_PTR_OF
(
ty≥1
,
cmp
##
_ty≥_1
), \

1097 ()
ty≥_2
=
	`CHECKED_PTR_OF
(
ty≥2
,
cmp
##
_ty≥_2
), \

1098 
cmp
##
_BSEARCH_CMP_FN
)),
Êags
)

	)

1100 
OBJ_√w_nid
(
num
);

1101 
OBJ_add_obje˘
(c⁄° 
ASN1_OBJECT
 *
obj
);

1102 
OBJ_¸óã
(c⁄° *
oid
,c⁄° *
¢
,c⁄° *
 
);

1103 
OBJ_˛ónup
();

1104 
OBJ_¸óã_obje˘s
(
BIO
 *
ö
);

1106 
OBJ_föd_sigid_Ægs
(
signid
, *
pdig_nid
, *
µkey_nid
);

1107 
OBJ_föd_sigid_by_Ægs
(*
psignid
, 
dig_nid
, 
pkey_nid
);

1108 
OBJ_add_sigid
(
signid
, 
dig_id
, 
pkey_id
);

1109 
OBJ_sigid_‰ì
();

1111 
obj_˛ónup_de„r
;

1112 
check_de„r
(
nid
);

1118 
ERR_lﬂd_OBJ_°rögs
();

1123 
	#OBJ_F_OBJ_ADD_OBJECT
 105

	)

1124 
	#OBJ_F_OBJ_CREATE
 100

	)

1125 
	#OBJ_F_OBJ_DUP
 101

	)

1126 
	#OBJ_F_OBJ_NAME_NEW_INDEX
 106

	)

1127 
	#OBJ_F_OBJ_NID2LN
 102

	)

1128 
	#OBJ_F_OBJ_NID2OBJ
 103

	)

1129 
	#OBJ_F_OBJ_NID2SN
 104

	)

1132 
	#OBJ_R_MALLOC_FAILURE
 100

	)

1133 
	#OBJ_R_UNKNOWN_NID
 101

	)

1135 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/opensslconf.h

5 #i‚de‡
OPENSSL_DOING_MAKEDEPEND


8 #i‚de‡
OPENSSL_NO_GMP


9 
	#OPENSSL_NO_GMP


	)

11 #i‚de‡
OPENSSL_NO_IDEA


12 
	#OPENSSL_NO_IDEA


	)

14 #i‚de‡
OPENSSL_NO_JPAKE


15 
	#OPENSSL_NO_JPAKE


	)

17 #i‚de‡
OPENSSL_NO_KRB5


18 
	#OPENSSL_NO_KRB5


	)

20 #i‚de‡
OPENSSL_NO_MD2


21 
	#OPENSSL_NO_MD2


	)

23 #i‚de‡
OPENSSL_NO_MDC2


24 
	#OPENSSL_NO_MDC2


	)

26 #i‚de‡
OPENSSL_NO_RC5


27 
	#OPENSSL_NO_RC5


	)

29 #i‚de‡
OPENSSL_NO_RFC3779


30 
	#OPENSSL_NO_RFC3779


	)

32 #i‚de‡
OPENSSL_NO_SCTP


33 
	#OPENSSL_NO_SCTP


	)

35 #i‚de‡
OPENSSL_NO_SSL2


36 
	#OPENSSL_NO_SSL2


	)

38 #i‚de‡
OPENSSL_NO_STORE


39 
	#OPENSSL_NO_STORE


	)

44 #i‚de‡
OPENSSL_THREADS


45 
	#OPENSSL_THREADS


	)

47 #i‚de‡
OPENSSL_NO_STATIC_ENGINE


48 
	#OPENSSL_NO_STATIC_ENGINE


	)

55 #ifde‡
OPENSSL_ALGORITHM_DEFINES


56 #i‡
deföed
(
OPENSSL_NO_GMP
Ë&& !deföed(
NO_GMP
)

57 
	#NO_GMP


	)

59 #i‡
deföed
(
OPENSSL_NO_IDEA
Ë&& !deföed(
NO_IDEA
)

60 
	#NO_IDEA


	)

62 #i‡
deföed
(
OPENSSL_NO_JPAKE
Ë&& !deföed(
NO_JPAKE
)

63 
	#NO_JPAKE


	)

65 #i‡
deföed
(
OPENSSL_NO_KRB5
Ë&& !deföed(
NO_KRB5
)

66 
	#NO_KRB5


	)

68 #i‡
deföed
(
OPENSSL_NO_MD2
Ë&& !deföed(
NO_MD2
)

69 
	#NO_MD2


	)

71 #i‡
deföed
(
OPENSSL_NO_MDC2
Ë&& !deföed(
NO_MDC2
)

72 
	#NO_MDC2


	)

74 #i‡
deföed
(
OPENSSL_NO_RC5
Ë&& !deföed(
NO_RC5
)

75 
	#NO_RC5


	)

77 #i‡
deföed
(
OPENSSL_NO_RFC3779
Ë&& !deföed(
NO_RFC3779
)

78 
	#NO_RFC3779


	)

80 #i‡
deföed
(
OPENSSL_NO_SCTP
Ë&& !deföed(
NO_SCTP
)

81 
	#NO_SCTP


	)

83 #i‡
deföed
(
OPENSSL_NO_SSL2
Ë&& !deföed(
NO_SSL2
)

84 
	#NO_SSL2


	)

86 #i‡
deföed
(
OPENSSL_NO_STORE
Ë&& !deföed(
NO_STORE
)

87 
	#NO_STORE


	)

91 
	#OPENSSL_CPUID_OBJ


	)

96 #unde‡
I386_ONLY


98 #i‡!(
deföed
(
VMS
Ë|| deföed(
__VMS
))

99 #i‡
deföed
(
HEADER_CRYPTLIB_H
Ë&& !deföed(
OPENSSLDIR
)

100 
	#ENGINESDIR
 "/u§/lib/x86_64-löux-gnu/›ís¶-1.0.0/ígöes"

	)

101 
	#OPENSSLDIR
 "/u§/lib/s¶"

	)

105 #unde‡
OPENSSL_UNISTD


106 
	#OPENSSL_UNISTD
 <
uni°d
.
h
>

	)

108 #unde‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


110 #i‡
deföed
(
HEADER_IDEA_H
Ë&& !deföed(
IDEA_INT
)

111 
	#IDEA_INT
 

	)

114 #i‡
deföed
(
HEADER_MD2_H
Ë&& !deföed(
MD2_INT
)

115 
	#MD2_INT
 

	)

118 #i‡
deföed
(
HEADER_RC2_H
Ë&& !deföed(
RC2_INT
)

120 
	#RC2_INT
 

	)

123 #i‡
deföed
(
HEADER_RC4_H
)

124 #i‡!
deföed
(
RC4_INT
)

132 
	#RC4_INT
 

	)

134 #i‡!
deföed
(
RC4_CHUNK
)

139 
	#RC4_CHUNK
 

	)

143 #i‡(
deföed
(
HEADER_NEW_DES_H
Ë|| deföed(
HEADER_DES_H
)Ë&& !deföed(
DES_LONG
)

146 #i‚de‡
DES_LONG


147 
	#DES_LONG
 

	)

151 #i‡
deföed
(
HEADER_BN_H
Ë&& !deföed(
CONFIG_HEADER_BN_H
)

152 
	#CONFIG_HEADER_BN_H


	)

153 #unde‡
BN_LLONG


158 
	#SIXTY_FOUR_BIT_LONG


	)

159 #unde‡
SIXTY_FOUR_BIT


160 #unde‡
THIRTY_TWO_BIT


163 #i‡
deföed
(
HEADER_RC4_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_RC4_LOCL_H
)

164 
	#CONFIG_HEADER_RC4_LOCL_H


	)

167 #unde‡
RC4_INDEX


170 #i‡
deföed
(
HEADER_BF_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_BF_LOCL_H
)

171 
	#CONFIG_HEADER_BF_LOCL_H


	)

172 #unde‡
BF_PTR


175 #i‡
deföed
(
HEADER_DES_LOCL_H
Ë&& !deföed(
CONFIG_HEADER_DES_LOCL_H
)

176 
	#CONFIG_HEADER_DES_LOCL_H


	)

177 #i‚de‡
DES_DEFAULT_OPTIONS


180 #i‚de‡
DES_PTR


181 #unde‡
DES_PTR


187 #i‚de‡
DES_RISC1


188 #unde‡
DES_RISC1


191 #i‚de‡
DES_RISC2


192 #unde‡
DES_RISC2


195 #i‡
deföed
(
DES_RISC1
Ë&& deföed(
DES_RISC2
)

196 
YOU
 
SHOULD
 
NOT
 
HAVE
 
BOTH
 
DES_RISC1
 
AND
 
DES_RISC2
 
	gDEFINED
!!!!!

201 #i‚de‡
DES_UNROLL


202 
	#DES_UNROLL


	)

208 #i‡!
deföed
(
DES_PTR
Ë&& !deföed(
DES_RISC1
Ë&& !deföed(
DES_RISC2
Ë&& !deföed(
DES_UNROLL
)

215 #i‡
deföed
–
sun
 )

216 
	#DES_PTR


	)

217 
	#DES_RISC1


	)

218 
	#DES_UNROLL


	)

219 #ñi‡
deföed
–
__u…rix
 )

220 
	#DES_PTR


	)

221 
	#DES_RISC2


	)

222 
	#DES_UNROLL


	)

223 #ñi‡
deföed
–
__osf1__
 )

224 
	#DES_PTR


	)

225 
	#DES_RISC2


	)

226 #ñi‡
deföed
 ( 
_AIX
 )

228 #ñi‡
deföed
–
__hpux
 )

230 #ñi‡
deföed
–
__aux
 )

232 #ñi‡
deföed
–
__dgux
 )

233 
	#DES_UNROLL


	)

234 #ñi‡
deföed
–
__sgi
 )

235 
	#DES_PTR


	)

236 
	#DES_RISC2


	)

237 
	#DES_UNROLL


	)

238 #ñi‡
deföed
(
i386
Ë|| deföed(
__i386__
)

239 
	#DES_PTR


	)

240 
	#DES_RISC1


	)

241 
	#DES_UNROLL


	)

	@/usr/include/openssl/ossl_typ.h

55 #i‚de‡
HEADER_OPENSSL_TYPES_H


56 
	#HEADER_OPENSSL_TYPES_H


	)

58 
	~<›ís¶/e_os2.h
>

60 #ifde‡
NO_ASN1_TYPEDEFS


61 
	#ASN1_INTEGER
 
ASN1_STRING


	)

62 
	#ASN1_ENUMERATED
 
ASN1_STRING


	)

63 
	#ASN1_BIT_STRING
 
ASN1_STRING


	)

64 
	#ASN1_OCTET_STRING
 
ASN1_STRING


	)

65 
	#ASN1_PRINTABLESTRING
 
ASN1_STRING


	)

66 
	#ASN1_T61STRING
 
ASN1_STRING


	)

67 
	#ASN1_IA5STRING
 
ASN1_STRING


	)

68 
	#ASN1_UTCTIME
 
ASN1_STRING


	)

69 
	#ASN1_GENERALIZEDTIME
 
ASN1_STRING


	)

70 
	#ASN1_TIME
 
ASN1_STRING


	)

71 
	#ASN1_GENERALSTRING
 
ASN1_STRING


	)

72 
	#ASN1_UNIVERSALSTRING
 
ASN1_STRING


	)

73 
	#ASN1_BMPSTRING
 
ASN1_STRING


	)

74 
	#ASN1_VISIBLESTRING
 
ASN1_STRING


	)

75 
	#ASN1_UTF8STRING
 
ASN1_STRING


	)

76 
	#ASN1_BOOLEAN
 

	)

77 
	#ASN1_NULL
 

	)

79 
a¢1_°rög_°
 
	tASN1_INTEGER
;

80 
a¢1_°rög_°
 
	tASN1_ENUMERATED
;

81 
a¢1_°rög_°
 
	tASN1_BIT_STRING
;

82 
a¢1_°rög_°
 
	tASN1_OCTET_STRING
;

83 
a¢1_°rög_°
 
	tASN1_PRINTABLESTRING
;

84 
a¢1_°rög_°
 
	tASN1_T61STRING
;

85 
a¢1_°rög_°
 
	tASN1_IA5STRING
;

86 
a¢1_°rög_°
 
	tASN1_GENERALSTRING
;

87 
a¢1_°rög_°
 
	tASN1_UNIVERSALSTRING
;

88 
a¢1_°rög_°
 
	tASN1_BMPSTRING
;

89 
a¢1_°rög_°
 
	tASN1_UTCTIME
;

90 
a¢1_°rög_°
 
	tASN1_TIME
;

91 
a¢1_°rög_°
 
	tASN1_GENERALIZEDTIME
;

92 
a¢1_°rög_°
 
	tASN1_VISIBLESTRING
;

93 
a¢1_°rög_°
 
	tASN1_UTF8STRING
;

94 
a¢1_°rög_°
 
	tASN1_STRING
;

95 
	tASN1_BOOLEAN
;

96 
	tASN1_NULL
;

99 
ASN1_ITEM_°
 
	tASN1_ITEM
;

100 
a¢1_p˘x_°
 
	tASN1_PCTX
;

102 #ifde‡
OPENSSL_SYS_WIN32


103 #unde‡
X509_NAME


104 #unde‡
X509_EXTENSIONS


105 #unde‡
X509_CERT_PAIR


106 #unde‡
PKCS7_ISSUER_AND_SERIAL


107 #unde‡
OCSP_REQUEST


108 #unde‡
OCSP_RESPONSE


111 #ifde‡
BIGNUM


112 #unde‡
BIGNUM


114 
bignum_°
 
	tBIGNUM
;

115 
bignum_˘x
 
	tBN_CTX
;

116 
bn_blödög_°
 
	tBN_BLINDING
;

117 
bn_m⁄t_˘x_°
 
	tBN_MONT_CTX
;

118 
bn_ª˝_˘x_°
 
	tBN_RECP_CTX
;

119 
bn_gícb_°
 
	tBN_GENCB
;

121 
buf_mem_°
 
	tBUF_MEM
;

123 
evp_cùhî_°
 
	tEVP_CIPHER
;

124 
evp_cùhî_˘x_°
 
	tEVP_CIPHER_CTX
;

125 
ív_md_°
 
	tEVP_MD
;

126 
ív_md_˘x_°
 
	tEVP_MD_CTX
;

127 
evp_pkey_°
 
	tEVP_PKEY
;

129 
evp_pkey_a¢1_mëhod_°
 
	tEVP_PKEY_ASN1_METHOD
;

131 
evp_pkey_mëhod_°
 
	tEVP_PKEY_METHOD
;

132 
evp_pkey_˘x_°
 
	tEVP_PKEY_CTX
;

134 
dh_°
 
	tDH
;

135 
dh_mëhod
 
	tDH_METHOD
;

137 
dß_°
 
	tDSA
;

138 
dß_mëhod
 
	tDSA_METHOD
;

140 
rß_°
 
	tRSA
;

141 
rß_mëh_°
 
	tRSA_METHOD
;

143 
ønd_mëh_°
 
	tRAND_METHOD
;

145 
ecdh_mëhod
 
	tECDH_METHOD
;

146 
ecdß_mëhod
 
	tECDSA_METHOD
;

148 
x509_°
 
	tX509
;

149 
X509_Æg‹_°
 
	tX509_ALGOR
;

150 
X509_¸l_°
 
	tX509_CRL
;

151 
x509_¸l_mëhod_°
 
	tX509_CRL_METHOD
;

152 
x509_ªvoked_°
 
	tX509_REVOKED
;

153 
X509_«me_°
 
	tX509_NAME
;

154 
X509_pubkey_°
 
	tX509_PUBKEY
;

155 
x509_°‹e_°
 
	tX509_STORE
;

156 
x509_°‹e_˘x_°
 
	tX509_STORE_CTX
;

158 
pkcs8_¥iv_key_öfo_°
 
	tPKCS8_PRIV_KEY_INFO
;

160 
v3_ext_˘x
 
	tX509V3_CTX
;

161 
c⁄f_°
 
	tCONF
;

163 
°‹e_°
 
	tSTORE
;

164 
°‹e_mëhod_°
 
	tSTORE_METHOD
;

166 
ui_°
 
	tUI
;

167 
ui_mëhod_°
 
	tUI_METHOD
;

169 
°_ERR_FNS
 
	tERR_FNS
;

171 
ígöe_°
 
	tENGINE
;

172 
s¶_°
 
	tSSL
;

173 
s¶_˘x_°
 
	tSSL_CTX
;

175 
X509_POLICY_NODE_°
 
	tX509_POLICY_NODE
;

176 
X509_POLICY_LEVEL_°
 
	tX509_POLICY_LEVEL
;

177 
X509_POLICY_TREE_°
 
	tX509_POLICY_TREE
;

178 
X509_POLICY_CACHE_°
 
	tX509_POLICY_CACHE
;

180 
AUTHORITY_KEYID_°
 
	tAUTHORITY_KEYID
;

181 
DIST_POINT_°
 
	tDIST_POINT
;

182 
ISSUING_DIST_POINT_°
 
	tISSUING_DIST_POINT
;

183 
NAME_CONSTRAINTS_°
 
	tNAME_CONSTRAINTS
;

186 
	#DECLARE_PKCS12_STACK_OF
(
ty≥
Ë

	)

187 
	#IMPLEMENT_PKCS12_STACK_OF
(
ty≥
Ë

	)

189 
¸y±o_ex_d©a_°
 
	tCRYPTO_EX_DATA
;

191 
	tCRYPTO_EX_√w
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

192 
	tidx
, 
	t¨gl
, *
	t¨gp
);

193 
	tCRYPTO_EX_‰ì
(*
	t∑ª¡
, *
	t±r
, 
	tCRYPTO_EX_DATA
 *
	tad
,

194 
	tidx
, 
	t¨gl
, *
	t¨gp
);

195 
	tCRYPTO_EX_dup
(
	tCRYPTO_EX_DATA
 *
	tto
, CRYPTO_EX_DATA *
	t‰om
, *
	t‰om_d
,

196 
	tidx
, 
	t¨gl
, *
	t¨gp
);

198 
oc•_ªq_˘x_°
 
	tOCSP_REQ_CTX
;

199 
oc•_ª•⁄£_°
 
	tOCSP_RESPONSE
;

200 
oc•_ª•⁄dî_id_°
 
	tOCSP_RESPID
;

	@/usr/include/openssl/pem.h

59 #i‚de‡
HEADER_PEM_H


60 
	#HEADER_PEM_H


	)

62 
	~<›ís¶/e_os2.h
>

63 #i‚de‡
OPENSSL_NO_BIO


64 
	~<›ís¶/bio.h
>

66 #i‚de‡
OPENSSL_NO_STACK


67 
	~<›ís¶/°ack.h
>

69 
	~<›ís¶/evp.h
>

70 
	~<›ís¶/x509.h
>

71 
	~<›ís¶/≥m2.h
>

73 #ifde‡ 
__˝lu•lus


77 
	#PEM_BUFSIZE
 1024

	)

79 
	#PEM_OBJ_UNDEF
 0

	)

80 
	#PEM_OBJ_X509
 1

	)

81 
	#PEM_OBJ_X509_REQ
 2

	)

82 
	#PEM_OBJ_CRL
 3

	)

83 
	#PEM_OBJ_SSL_SESSION
 4

	)

84 
	#PEM_OBJ_PRIV_KEY
 10

	)

85 
	#PEM_OBJ_PRIV_RSA
 11

	)

86 
	#PEM_OBJ_PRIV_DSA
 12

	)

87 
	#PEM_OBJ_PRIV_DH
 13

	)

88 
	#PEM_OBJ_PUB_RSA
 14

	)

89 
	#PEM_OBJ_PUB_DSA
 15

	)

90 
	#PEM_OBJ_PUB_DH
 16

	)

91 
	#PEM_OBJ_DHPARAMS
 17

	)

92 
	#PEM_OBJ_DSAPARAMS
 18

	)

93 
	#PEM_OBJ_PRIV_RSA_PUBLIC
 19

	)

94 
	#PEM_OBJ_PRIV_ECDSA
 20

	)

95 
	#PEM_OBJ_PUB_ECDSA
 21

	)

96 
	#PEM_OBJ_ECPARAMETERS
 22

	)

98 
	#PEM_ERROR
 30

	)

99 
	#PEM_DEK_DES_CBC
 40

	)

100 
	#PEM_DEK_IDEA_CBC
 45

	)

101 
	#PEM_DEK_DES_EDE
 50

	)

102 
	#PEM_DEK_DES_ECB
 60

	)

103 
	#PEM_DEK_RSA
 70

	)

104 
	#PEM_DEK_RSA_MD2
 80

	)

105 
	#PEM_DEK_RSA_MD5
 90

	)

107 
	#PEM_MD_MD2
 
NID_md2


	)

108 
	#PEM_MD_MD5
 
NID_md5


	)

109 
	#PEM_MD_SHA
 
NID_sha


	)

110 
	#PEM_MD_MD2_RSA
 
NID_md2WôhRSAEn¸y±i⁄


	)

111 
	#PEM_MD_MD5_RSA
 
NID_md5WôhRSAEn¸y±i⁄


	)

112 
	#PEM_MD_SHA_RSA
 
NID_sha1WôhRSAEn¸y±i⁄


	)

114 
	#PEM_STRING_X509_OLD
 "X509 CERTIFICATE"

	)

115 
	#PEM_STRING_X509
 "CERTIFICATE"

	)

116 
	#PEM_STRING_X509_PAIR
 "CERTIFICATE PAIR"

	)

117 
	#PEM_STRING_X509_TRUSTED
 "TRUSTED CERTIFICATE"

	)

118 
	#PEM_STRING_X509_REQ_OLD
 "NEW CERTIFICATE REQUEST"

	)

119 
	#PEM_STRING_X509_REQ
 "CERTIFICATE REQUEST"

	)

120 
	#PEM_STRING_X509_CRL
 "X509 CRL"

	)

121 
	#PEM_STRING_EVP_PKEY
 "ANY PRIVATE KEY"

	)

122 
	#PEM_STRING_PUBLIC
 "PUBLIC KEY"

	)

123 
	#PEM_STRING_RSA
 "RSA PRIVATE KEY"

	)

124 
	#PEM_STRING_RSA_PUBLIC
 "RSA PUBLIC KEY"

	)

125 
	#PEM_STRING_DSA
 "DSA PRIVATE KEY"

	)

126 
	#PEM_STRING_DSA_PUBLIC
 "DSA PUBLIC KEY"

	)

127 
	#PEM_STRING_PKCS7
 "PKCS7"

	)

128 
	#PEM_STRING_PKCS7_SIGNED
 "PKCS #7 SIGNED DATA"

	)

129 
	#PEM_STRING_PKCS8
 "ENCRYPTED PRIVATE KEY"

	)

130 
	#PEM_STRING_PKCS8INF
 "PRIVATE KEY"

	)

131 
	#PEM_STRING_DHPARAMS
 "DH PARAMETERS"

	)

132 
	#PEM_STRING_SSL_SESSION
 "SSL SESSION PARAMETERS"

	)

133 
	#PEM_STRING_DSAPARAMS
 "DSA PARAMETERS"

	)

134 
	#PEM_STRING_ECDSA_PUBLIC
 "ECDSA PUBLIC KEY"

	)

135 
	#PEM_STRING_ECPARAMETERS
 "EC PARAMETERS"

	)

136 
	#PEM_STRING_ECPRIVATEKEY
 "EC PRIVATE KEY"

	)

137 
	#PEM_STRING_PARAMETERS
 "PARAMETERS"

	)

138 
	#PEM_STRING_CMS
 "CMS"

	)

142 
	sPEM_Encode_Sól_°


144 
EVP_ENCODE_CTX
 
ícode
;

145 
EVP_MD_CTX
 
md
;

146 
EVP_CIPHER_CTX
 
cùhî
;

147 } 
	tPEM_ENCODE_SEAL_CTX
;

150 
	#PEM_TYPE_ENCRYPTED
 10

	)

151 
	#PEM_TYPE_MIC_ONLY
 20

	)

152 
	#PEM_TYPE_MIC_CLEAR
 30

	)

153 
	#PEM_TYPE_CLEAR
 40

	)

155 
	s≥m_ªcù_°


157 *
«me
;

158 
X509_NAME
 *
dn
;

160 
cùhî
;

161 
key_íc
;

163 } 
	tPEM_USER
;

165 
	s≥m_˘x_°


167 
ty≥
;

170 
vîsi⁄
;

171 
mode
;

172 } 
¥oc_ty≥
;

174 *
domaö
;

177 
cùhî
;

180 } 
DEK_öfo
;

182 
PEM_USER
 *
‹igö©‹
;

184 
num_ªcùõ¡
;

185 
PEM_USER
 **
ªcùõ¡
;

189 
EVP_MD
 *
md
;

191 
md_íc
;

192 
md_Àn
;

193 *
md_d©a
;

195 
EVP_CIPHER
 *
dec
;

196 
key_Àn
;

197 *
key
;

202 
d©a_íc
;

203 
d©a_Àn
;

204 *
d©a
;

205 } 
	tPEM_CTX
;

212 #ifde‡
OPENSSL_NO_FP_API


214 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

215 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

216 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

217 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

218 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
Ë

	)

222 
	#IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

223 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

225  
	`PEM_ASN1_ªad
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
Â
,(**)
x
,
cb
,
u
); \

226 }

	)

228 
	#IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

229 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
) \

231  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
NULL
,NULL,0,NULL,NULL); \

232 }

	)

234 
	#IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

235 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
) \

237  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

238 }

	)

240 
	#IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

241 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

242 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

243 *
u
) \

245  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

246 }

	)

248 
	#IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

249 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

250 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, \

251 *
u
) \

253  
	`PEM_ASN1_wrôe
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
Â
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

254 }

	)

258 
	#IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

259 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
)\

261  
	`PEM_ASN1_ªad_bio
((
d2i_of_void
 *)
d2i_
##
a¢1
, 
°r
,
bp
,(**)
x
,
cb
,
u
); \

262 }

	)

264 
	#IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

265 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
) \

267  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
NULL
,NULL,0,NULL,NULL); \

268 }

	)

270 
	#IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

271 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
) \

273  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
NULL
,NULL,0,NULL,NULL); \

274 }

	)

276 
	#IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

277 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

278 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

280  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

281 }

	)

283 
	#IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

284 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

285 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
) \

287  
	`PEM_ASN1_wrôe_bio
((
i2d_of_void
 *)
i2d_
##
a¢1
,
°r
,
bp
,(*)
x
,
íc
,
k°r
,
kÀn
,
cb
,
u
); \

288 }

	)

290 
	#IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

291 
	`IMPLEMENT_PEM_wrôe_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

292 
	`IMPLEMENT_PEM_wrôe_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

294 
	#IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

295 
	`IMPLEMENT_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

296 
	`IMPLEMENT_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

298 
	#IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

299 
	`IMPLEMENT_PEM_wrôe_cb_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

300 
	`IMPLEMENT_PEM_wrôe_cb_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

302 
	#IMPLEMENT_PEM_wrôe_cb_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

303 
	`IMPLEMENT_PEM_wrôe_cb_bio_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

304 
	`IMPLEMENT_PEM_wrôe_cb_Â_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

306 
	#IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

307 
	`IMPLEMENT_PEM_ªad_bio
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

308 
	`IMPLEMENT_PEM_ªad_Â
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

310 
	#IMPLEMENT_PEM_rw
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

311 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

312 
	`IMPLEMENT_PEM_wrôe
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

314 
	#IMPLEMENT_PEM_rw_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

315 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

316 
	`IMPLEMENT_PEM_wrôe_c⁄°
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

318 
	#IMPLEMENT_PEM_rw_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

319 
	`IMPLEMENT_PEM_ªad
(
«me
, 
ty≥
, 
°r
, 
a¢1
) \

320 
	`IMPLEMENT_PEM_wrôe_cb
(
«me
, 
ty≥
, 
°r
, 
a¢1
)

	)

324 #i‡
deföed
(
OPENSSL_NO_FP_API
)

326 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
Ë

	)

327 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
Ë

	)

328 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
Ë

	)

332 
	#DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
) \

333 
ty≥
 *
PEM_ªad_
##
	`«me
(
FILE
 *
Â
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

335 
	#DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
) \

336 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
);

	)

338 
	#DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
) \

339 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, c⁄° 
ty≥
 *
x
);

	)

341 
	#DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
) \

342 
PEM_wrôe_
##
	`«me
(
FILE
 *
Â
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

343 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

347 #i‚de‡
OPENSSL_NO_BIO


348 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

349 
ty≥
 *
PEM_ªad_bio_
##
	`«me
(
BIO
 *
bp
,Åy≥ **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

351 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

352 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
);

	)

354 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

355 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, c⁄° 
ty≥
 *
x
);

	)

357 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

358 
PEM_wrôe_bio_
##
	`«me
(
BIO
 *
bp
, 
ty≥
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
, \

359 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

	)

363 
	#DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
Ë

	)

364 
	#DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
Ë

	)

365 
	#DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
Ë

	)

366 
	#DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
Ë

	)

370 
	#DECLARE_PEM_wrôe
(
«me
, 
ty≥
) \

371 
	`DECLARE_PEM_wrôe_bio
(
«me
, 
ty≥
) \

372 
	`DECLARE_PEM_wrôe_Â
(
«me
, 
ty≥
)

	)

374 
	#DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
) \

375 
	`DECLARE_PEM_wrôe_bio_c⁄°
(
«me
, 
ty≥
) \

376 
	`DECLARE_PEM_wrôe_Â_c⁄°
(
«me
, 
ty≥
)

	)

378 
	#DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
) \

379 
	`DECLARE_PEM_wrôe_cb_bio
(
«me
, 
ty≥
) \

380 
	`DECLARE_PEM_wrôe_cb_Â
(
«me
, 
ty≥
)

	)

382 
	#DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

383 
	`DECLARE_PEM_ªad_bio
(
«me
, 
ty≥
) \

384 
	`DECLARE_PEM_ªad_Â
(
«me
, 
ty≥
)

	)

386 
	#DECLARE_PEM_rw
(
«me
, 
ty≥
) \

387 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

388 
	`DECLARE_PEM_wrôe
(
«me
, 
ty≥
)

	)

390 
	#DECLARE_PEM_rw_c⁄°
(
«me
, 
ty≥
) \

391 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

392 
	`DECLARE_PEM_wrôe_c⁄°
(
«me
, 
ty≥
)

	)

394 
	#DECLARE_PEM_rw_cb
(
«me
, 
ty≥
) \

395 
	`DECLARE_PEM_ªad
(
«me
, 
ty≥
) \

396 
	`DECLARE_PEM_wrôe_cb
(
«me
, 
ty≥
)

	)

400 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
, *
	tu£rd©a
);

403 
	t≥m_∑ssw‹d_cb
(*
	tbuf
, 
	tsize
, 
	trwÊag
);

406 
PEM_gë_EVP_CIPHER_INFO
(*
hódî
, 
EVP_CIPHER_INFO
 *
cùhî
);

407 
PEM_do_hódî
 (
EVP_CIPHER_INFO
 *
cùhî
, *
d©a
,*
Àn
,

408 
≥m_∑ssw‹d_cb
 *
ˇŒback
,*
u
);

410 #i‚de‡
OPENSSL_NO_BIO


411 
PEM_ªad_bio
(
BIO
 *
bp
, **
«me
, **
hódî
,

412 **
d©a
,*
Àn
);

413 
PEM_wrôe_bio
(
BIO
 *
bp
,c⁄° *
«me
,*
hdr
,*
d©a
,

414 
Àn
);

415 
PEM_byãs_ªad_bio
(**
pd©a
, *
∂í
, **
≤m
, c⁄° *
«me
, 
BIO
 *
bp
,

416 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

417 * 
PEM_ASN1_ªad_bio
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
BIO
 *
bp
,

418 **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

419 
PEM_ASN1_wrôe_bio
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
BIO
 *
bp
, *
x
,

420 c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,
kÀn
,

421 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

423 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad_bio
(
BIO
 *
bp
, STACK_OF(X509_INFOË*
sk
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

424 
PEM_X509_INFO_wrôe_bio
(
BIO
 *
bp
,
X509_INFO
 *
xi
, 
EVP_CIPHER
 *
íc
,

425 *
k°r
, 
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

428 
PEM_ªad
(
FILE
 *
Â
, **
«me
, **
hódî
,

429 **
d©a
,*
Àn
);

430 
PEM_wrôe
(
FILE
 *
Â
,*
«me
,*
hdr
,*
d©a
,
Àn
);

431 * 
PEM_ASN1_ªad
(
d2i_of_void
 *
d2i
, c⁄° *
«me
, 
FILE
 *
Â
, **
x
,

432 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

433 
PEM_ASN1_wrôe
(
i2d_of_void
 *
i2d
,c⁄° *
«me
,
FILE
 *
Â
,

434 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,*
k°r
,

435 
kÀn
,
≥m_∑ssw‹d_cb
 *
ˇŒback
, *
u
);

436 
STACK_OF
(
X509_INFO
Ë* 
PEM_X509_INFO_ªad
(
FILE
 *
Â
, STACK_OF(X509_INFOË*
sk
,

437 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

439 
PEM_SólInô
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, 
EVP_CIPHER
 *
ty≥
,

440 
EVP_MD
 *
md_ty≥
, **
ek
, *
ekl
,

441 *
iv
, 
EVP_PKEY
 **
pubk
, 
≈ubk
);

442 
PEM_SólUpd©e
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
out
, *
oué
,

443 *
ö
, 
öl
);

444 
PEM_SólFöÆ
(
PEM_ENCODE_SEAL_CTX
 *
˘x
, *
sig
,*
sigl
,

445 *
out
, *
oué
, 
EVP_PKEY
 *
¥iv
);

447 
PEM_SignInô
(
EVP_MD_CTX
 *
˘x
, 
EVP_MD
 *
ty≥
);

448 
PEM_SignUpd©e
(
EVP_MD_CTX
 *
˘x
,*
d
,
˙t
);

449 
PEM_SignFöÆ
(
EVP_MD_CTX
 *
˘x
, *
sigªt
,

450 *
sigÀn
, 
EVP_PKEY
 *
pkey
);

452 
PEM_def_ˇŒback
(*
buf
, 
num
, 
w
, *
key
);

453 
PEM_¥oc_ty≥
(*
buf
, 
ty≥
);

454 
PEM_dek_öfo
(*
buf
, c⁄° *
ty≥
, 
Àn
, *
°r
);

457 
	~<›ís¶/symhacks.h
>

459 
DECLARE_PEM_rw
(
X509
, X509)

461 
DECLARE_PEM_rw
(
X509_AUX
, 
X509
)

463 
DECLARE_PEM_rw
(
X509_CERT_PAIR
, X509_CERT_PAIR)

465 
DECLARE_PEM_rw
(
X509_REQ
, X509_REQ)

466 
DECLARE_PEM_wrôe
(
X509_REQ_NEW
, 
X509_REQ
)

468 
DECLARE_PEM_rw
(
X509_CRL
, X509_CRL)

470 
DECLARE_PEM_rw
(
PKCS7
, PKCS7)

472 
DECLARE_PEM_rw
(
NETSCAPE_CERT_SEQUENCE
, NETSCAPE_CERT_SEQUENCE)

474 
DECLARE_PEM_rw
(
PKCS8
, 
X509_SIG
)

476 
DECLARE_PEM_rw
(
PKCS8_PRIV_KEY_INFO
, PKCS8_PRIV_KEY_INFO)

478 #i‚de‡
OPENSSL_NO_RSA


480 
DECLARE_PEM_rw_cb
(
RSAPriv©eKey
, 
RSA
)

482 
DECLARE_PEM_rw_c⁄°
(
RSAPublicKey
, 
RSA
)

483 
DECLARE_PEM_rw
(
RSA_PUBKEY
, 
RSA
)

487 #i‚de‡
OPENSSL_NO_DSA


489 
DECLARE_PEM_rw_cb
(
DSAPriv©eKey
, 
DSA
)

491 
DECLARE_PEM_rw
(
DSA_PUBKEY
, 
DSA
)

493 
DECLARE_PEM_rw_c⁄°
(
DSA∑øms
, 
DSA
)

497 #i‚de‡
OPENSSL_NO_EC


498 
DECLARE_PEM_rw_c⁄°
(
ECPKP¨amëîs
, 
EC_GROUP
)

499 
DECLARE_PEM_rw_cb
(
ECPriv©eKey
, 
EC_KEY
)

500 
DECLARE_PEM_rw
(
EC_PUBKEY
, 
EC_KEY
)

503 #i‚de‡
OPENSSL_NO_DH


505 
DECLARE_PEM_rw_c⁄°
(
DH∑øms
, 
DH
)

509 
DECLARE_PEM_rw_cb
(
Priv©eKey
, 
EVP_PKEY
)

511 
DECLARE_PEM_rw
(
PUBKEY
, 
EVP_PKEY
)

513 
PEM_wrôe_bio_PKCS8Priv©eKey_nid
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

514 *
k°r
, 
kÀn
,

515 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

516 
PEM_wrôe_bio_PKCS8Priv©eKey
(
BIO
 *, 
EVP_PKEY
 *, c⁄° 
EVP_CIPHER
 *,

517 *, , 
≥m_∑ssw‹d_cb
 *, *);

518 
i2d_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

519 *
k°r
, 
kÀn
,

520 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

521 
i2d_PKCS8Priv©eKey_nid_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
, 
nid
,

522 *
k°r
, 
kÀn
,

523 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

524 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

526 
i2d_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, c⁄° 
EVP_CIPHER
 *
íc
,

527 *
k°r
, 
kÀn
,

528 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

529 
i2d_PKCS8Priv©eKey_nid_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

530 *
k°r
, 
kÀn
,

531 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

532 
PEM_wrôe_PKCS8Priv©eKey_nid
(
FILE
 *
Â
, 
EVP_PKEY
 *
x
, 
nid
,

533 *
k°r
, 
kÀn
,

534 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

536 
EVP_PKEY
 *
d2i_PKCS8Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
x
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

538 
PEM_wrôe_PKCS8Priv©eKey
(
FILE
 *
Â
,
EVP_PKEY
 *
x
,c⁄° 
EVP_CIPHER
 *
íc
,

539 *
k°r
,
kÀn
, 
≥m_∑ssw‹d_cb
 *
cd
, *
u
);

541 
EVP_PKEY
 *
PEM_ªad_bio_P¨amëîs
(
BIO
 *
bp
, EVP_PKEY **
x
);

542 
PEM_wrôe_bio_P¨amëîs
(
BIO
 *
bp
, 
EVP_PKEY
 *
x
);

545 
EVP_PKEY
 *
b2i_Priv©eKey
(c⁄° **
ö
, 
Àngth
);

546 
EVP_PKEY
 *
b2i_PublicKey
(c⁄° **
ö
, 
Àngth
);

547 
EVP_PKEY
 *
b2i_Priv©eKey_bio
(
BIO
 *
ö
);

548 
EVP_PKEY
 *
b2i_PublicKey_bio
(
BIO
 *
ö
);

549 
i2b_Priv©eKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

550 
i2b_PublicKey_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
);

551 #i‚de‡
OPENSSL_NO_RC4


552 
EVP_PKEY
 *
b2i_PVK_bio
(
BIO
 *
ö
, 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

553 
i2b_PVK_bio
(
BIO
 *
out
, 
EVP_PKEY
 *
pk
, 
í˛evñ
,

554 
≥m_∑ssw‹d_cb
 *
cb
, *
u
);

562 
ERR_lﬂd_PEM_°rögs
();

567 
	#PEM_F_B2I_DSS
 127

	)

568 
	#PEM_F_B2I_PVK_BIO
 128

	)

569 
	#PEM_F_B2I_RSA
 129

	)

570 
	#PEM_F_CHECK_BITLEN_DSA
 130

	)

571 
	#PEM_F_CHECK_BITLEN_RSA
 131

	)

572 
	#PEM_F_D2I_PKCS8PRIVATEKEY_BIO
 120

	)

573 
	#PEM_F_D2I_PKCS8PRIVATEKEY_FP
 121

	)

574 
	#PEM_F_DO_B2I
 132

	)

575 
	#PEM_F_DO_B2I_BIO
 133

	)

576 
	#PEM_F_DO_BLOB_HEADER
 134

	)

577 
	#PEM_F_DO_PK8PKEY
 126

	)

578 
	#PEM_F_DO_PK8PKEY_FP
 125

	)

579 
	#PEM_F_DO_PVK_BODY
 135

	)

580 
	#PEM_F_DO_PVK_HEADER
 136

	)

581 
	#PEM_F_I2B_PVK
 137

	)

582 
	#PEM_F_I2B_PVK_BIO
 138

	)

583 
	#PEM_F_LOAD_IV
 101

	)

584 
	#PEM_F_PEM_ASN1_READ
 102

	)

585 
	#PEM_F_PEM_ASN1_READ_BIO
 103

	)

586 
	#PEM_F_PEM_ASN1_WRITE
 104

	)

587 
	#PEM_F_PEM_ASN1_WRITE_BIO
 105

	)

588 
	#PEM_F_PEM_DEF_CALLBACK
 100

	)

589 
	#PEM_F_PEM_DO_HEADER
 106

	)

590 
	#PEM_F_PEM_F_PEM_WRITE_PKCS8PRIVATEKEY
 118

	)

591 
	#PEM_F_PEM_GET_EVP_CIPHER_INFO
 107

	)

592 
	#PEM_F_PEM_PK8PKEY
 119

	)

593 
	#PEM_F_PEM_READ
 108

	)

594 
	#PEM_F_PEM_READ_BIO
 109

	)

595 
	#PEM_F_PEM_READ_BIO_PARAMETERS
 140

	)

596 
	#PEM_F_PEM_READ_BIO_PRIVATEKEY
 123

	)

597 
	#PEM_F_PEM_READ_PRIVATEKEY
 124

	)

598 
	#PEM_F_PEM_SEALFINAL
 110

	)

599 
	#PEM_F_PEM_SEALINIT
 111

	)

600 
	#PEM_F_PEM_SIGNFINAL
 112

	)

601 
	#PEM_F_PEM_WRITE
 113

	)

602 
	#PEM_F_PEM_WRITE_BIO
 114

	)

603 
	#PEM_F_PEM_WRITE_PRIVATEKEY
 139

	)

604 
	#PEM_F_PEM_X509_INFO_READ
 115

	)

605 
	#PEM_F_PEM_X509_INFO_READ_BIO
 116

	)

606 
	#PEM_F_PEM_X509_INFO_WRITE_BIO
 117

	)

609 
	#PEM_R_BAD_BASE64_DECODE
 100

	)

610 
	#PEM_R_BAD_DECRYPT
 101

	)

611 
	#PEM_R_BAD_END_LINE
 102

	)

612 
	#PEM_R_BAD_IV_CHARS
 103

	)

613 
	#PEM_R_BAD_MAGIC_NUMBER
 116

	)

614 
	#PEM_R_BAD_PASSWORD_READ
 104

	)

615 
	#PEM_R_BAD_VERSION_NUMBER
 117

	)

616 
	#PEM_R_BIO_WRITE_FAILURE
 118

	)

617 
	#PEM_R_CIPHER_IS_NULL
 127

	)

618 
	#PEM_R_ERROR_CONVERTING_PRIVATE_KEY
 115

	)

619 
	#PEM_R_EXPECTING_PRIVATE_KEY_BLOB
 119

	)

620 
	#PEM_R_EXPECTING_PUBLIC_KEY_BLOB
 120

	)

621 
	#PEM_R_INCONSISTENT_HEADER
 121

	)

622 
	#PEM_R_KEYBLOB_HEADER_PARSE_ERROR
 122

	)

623 
	#PEM_R_KEYBLOB_TOO_SHORT
 123

	)

624 
	#PEM_R_NOT_DEK_INFO
 105

	)

625 
	#PEM_R_NOT_ENCRYPTED
 106

	)

626 
	#PEM_R_NOT_PROC_TYPE
 107

	)

627 
	#PEM_R_NO_START_LINE
 108

	)

628 
	#PEM_R_PROBLEMS_GETTING_PASSWORD
 109

	)

629 
	#PEM_R_PUBLIC_KEY_NO_RSA
 110

	)

630 
	#PEM_R_PVK_DATA_TOO_SHORT
 124

	)

631 
	#PEM_R_PVK_TOO_SHORT
 125

	)

632 
	#PEM_R_READ_KEY
 111

	)

633 
	#PEM_R_SHORT_HEADER
 112

	)

634 
	#PEM_R_UNSUPPORTED_CIPHER
 113

	)

635 
	#PEM_R_UNSUPPORTED_ENCRYPTION
 114

	)

636 
	#PEM_R_UNSUPPORTED_KEY_COMPONENTS
 126

	)

638 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rand.h

59 #i‚de‡
HEADER_RAND_H


60 
	#HEADER_RAND_H


	)

62 
	~<°dlib.h
>

63 
	~<›ís¶/os¶_typ.h
>

64 
	~<›ís¶/e_os2.h
>

66 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
)

67 
	~<wödows.h
>

70 #ifde‡ 
__˝lu•lus


74 #i‡
deföed
(
OPENSSL_FIPS
)

75 
	#FIPS_RAND_SIZE_T
 
size_t


	)

81 
	sønd_mëh_°


83 (*
£ed
)(c⁄° *
buf
, 
num
);

84 (*
byãs
)(*
buf
, 
num
);

85 (*
˛ónup
)();

86 (*
add
)(c⁄° *
buf
, 
num
, 
íå›y
);

87 (*
p£ud‹™d
)(*
buf
, 
num
);

88 (*
°©us
)();

91 #ifde‡
BN_DEBUG


92 
ønd_¥edi˘abÀ
;

95 
RAND_£t_ønd_mëhod
(c⁄° 
RAND_METHOD
 *
mëh
);

96 c⁄° 
RAND_METHOD
 *
RAND_gë_ønd_mëhod
();

97 #i‚de‡
OPENSSL_NO_ENGINE


98 
RAND_£t_ønd_ígöe
(
ENGINE
 *
ígöe
);

100 
RAND_METHOD
 *
RAND_SSLóy
();

101 
RAND_˛ónup
();

102 
RAND_byãs
(*
buf
,
num
);

103 
RAND_p£udo_byãs
(*
buf
,
num
);

104 
RAND_£ed
(c⁄° *
buf
,
num
);

105 
RAND_add
(c⁄° *
buf
,
num
,
íå›y
);

106 
RAND_lﬂd_fûe
(c⁄° *
fûe
,
max_byãs
);

107 
RAND_wrôe_fûe
(c⁄° *
fûe
);

108 c⁄° *
RAND_fûe_«me
(*
fûe
,
size_t
 
num
);

109 
RAND_°©us
();

110 
RAND_quîy_egd_byãs
(c⁄° *
∑th
, *
buf
, 
byãs
);

111 
RAND_egd
(c⁄° *
∑th
);

112 
RAND_egd_byãs
(c⁄° *
∑th
,
byãs
);

113 
RAND_pﬁl
();

115 #i‡
deföed
(
OPENSSL_SYS_WINDOWS
Ë|| deföed(
OPENSSL_SYS_WIN32
)

117 
RAND_s¸ìn
();

118 
RAND_evít
(
UINT
, 
WPARAM
, 
LPARAM
);

122 #ifde‡
OPENSSL_FIPS


123 
RAND_£t_fùs_drbg_ty≥
(
ty≥
, 
Êags
);

124 
RAND_öô_fùs
();

131 
ERR_lﬂd_RAND_°rögs
();

136 
	#RAND_F_RAND_GET_RAND_METHOD
 101

	)

137 
	#RAND_F_RAND_INIT_FIPS
 102

	)

138 
	#RAND_F_SSLEAY_RAND_BYTES
 100

	)

141 
	#RAND_R_ERROR_INITIALISING_DRBG
 102

	)

142 
	#RAND_R_ERROR_INSTANTIATING_DRBG
 103

	)

143 
	#RAND_R_NO_FIPS_RANDOM_METHOD_SET
 101

	)

144 
	#RAND_R_PRNG_NOT_SEEDED
 100

	)

146 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/rsa.h

59 #i‚de‡
HEADER_RSA_H


60 
	#HEADER_RSA_H


	)

62 
	~<›ís¶/a¢1.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/¸y±o.h
>

68 
	~<›ís¶/os¶_typ.h
>

69 #i‚de‡
OPENSSL_NO_DEPRECATED


70 
	~<›ís¶/bn.h
>

73 #ifde‡
OPENSSL_NO_RSA


74 #îr‹ 
RSA
 
is
 
dißbÀd
.

77 #ifde‡ 
__˝lu•lus


85 
	srß_mëh_°


87 c⁄° *
«me
;

88 (*
rß_pub_íc
)(
Êí
,c⁄° *
‰om
,

89 *
to
,

90 
RSA
 *
rß
,
∑ddög
);

91 (*
rß_pub_dec
)(
Êí
,c⁄° *
‰om
,

92 *
to
,

93 
RSA
 *
rß
,
∑ddög
);

94 (*
rß_¥iv_íc
)(
Êí
,c⁄° *
‰om
,

95 *
to
,

96 
RSA
 *
rß
,
∑ddög
);

97 (*
rß_¥iv_dec
)(
Êí
,c⁄° *
‰om
,

98 *
to
,

99 
RSA
 *
rß
,
∑ddög
);

100 (*
rß_mod_exp
)(
BIGNUM
 *
r0
,c⁄° BIGNUM *
I
,
RSA
 *
rß
,
BN_CTX
 *
˘x
);

101 (*
bn_mod_exp
)(
BIGNUM
 *
r
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
p
,

102 c⁄° 
BIGNUM
 *
m
, 
BN_CTX
 *
˘x
,

103 
BN_MONT_CTX
 *
m_˘x
);

104 (*
öô
)(
RSA
 *
rß
);

105 (*
föish
)(
RSA
 *
rß
);

106 
Êags
;

107 *
≠p_d©a
;

115 (*
rß_sign
)(
ty≥
,

116 c⁄° *
m
, 
m_Àngth
,

117 *
sigªt
, *
sigÀn
, c⁄° 
RSA
 *
rß
);

118 (*
rß_vîify
)(
dty≥
,

119 c⁄° *
m
, 
m_Àngth
,

120 c⁄° *
sigbuf
, 
sigÀn
,

121 c⁄° 
RSA
 *
rß
);

126 (*
rß_keygí
)(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

129 
	srß_°


133 
∑d
;

134 
vîsi⁄
;

135 c⁄° 
RSA_METHOD
 *
mëh
;

137 
ENGINE
 *
ígöe
;

138 
BIGNUM
 *
n
;

139 
BIGNUM
 *
e
;

140 
BIGNUM
 *
d
;

141 
BIGNUM
 *
p
;

142 
BIGNUM
 *
q
;

143 
BIGNUM
 *
dmp1
;

144 
BIGNUM
 *
dmq1
;

145 
BIGNUM
 *
iqmp
;

147 
CRYPTO_EX_DATA
 
ex_d©a
;

148 
ª„ªn˚s
;

149 
Êags
;

152 
BN_MONT_CTX
 *
_mëhod_mod_n
;

153 
BN_MONT_CTX
 *
_mëhod_mod_p
;

154 
BN_MONT_CTX
 *
_mëhod_mod_q
;

158 *
bignum_d©a
;

159 
BN_BLINDING
 *
blödög
;

160 
BN_BLINDING
 *
mt_blödög
;

163 #i‚de‡
OPENSSL_RSA_MAX_MODULUS_BITS


164 
	#OPENSSL_RSA_MAX_MODULUS_BITS
 16384

	)

167 #i‚de‡
OPENSSL_RSA_SMALL_MODULUS_BITS


168 
	#OPENSSL_RSA_SMALL_MODULUS_BITS
 3072

	)

170 #i‚de‡
OPENSSL_RSA_MAX_PUBEXP_BITS


171 
	#OPENSSL_RSA_MAX_PUBEXP_BITS
 64

	)

174 
	#RSA_3
 0x3L

	)

175 
	#RSA_F4
 0x10001L

	)

177 
	#RSA_METHOD_FLAG_NO_CHECK
 0x0001

	)

179 
	#RSA_FLAG_CACHE_PUBLIC
 0x0002

	)

180 
	#RSA_FLAG_CACHE_PRIVATE
 0x0004

	)

181 
	#RSA_FLAG_BLINDING
 0x0008

	)

182 
	#RSA_FLAG_THREAD_SAFE
 0x0010

	)

188 
	#RSA_FLAG_EXT_PKEY
 0x0020

	)

192 
	#RSA_FLAG_SIGN_VER
 0x0040

	)

194 
	#RSA_FLAG_NO_BLINDING
 0x0080

	)

199 
	#RSA_FLAG_NO_CONSTTIME
 0x0100

	)

209 #i‚de‡
OPENSSL_NO_DEPRECATED


210 
	#RSA_FLAG_NO_EXP_CONSTTIME
 
RSA_FLAG_NO_CONSTTIME


	)

221 
	#EVP_PKEY_CTX_£t_rß_∑ddög
(
˘x
, 
∑d
) \

222 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, 
EVP_PKEY_CTRL_RSA_PADDING
, \

223 
∑d
, 
NULL
)

	)

225 
	#EVP_PKEY_CTX_gë_rß_∑ddög
(
˘x
, 
µad
) \

226 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, -1, \

227 
EVP_PKEY_CTRL_GET_RSA_PADDING
, 0, 
µad
)

	)

229 
	#EVP_PKEY_CTX_£t_rß_pss_ß…Àn
(
˘x
, 
Àn
) \

230 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

231 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

232 
EVP_PKEY_CTRL_RSA_PSS_SALTLEN
, \

233 
Àn
, 
NULL
)

	)

235 
	#EVP_PKEY_CTX_gë_rß_pss_ß…Àn
(
˘x
, 
∂í
) \

236 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, \

237 (
EVP_PKEY_OP_SIGN
|
EVP_PKEY_OP_VERIFY
), \

238 
EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
, \

239 0, 
∂í
)

	)

241 
	#EVP_PKEY_CTX_£t_rß_keygí_bôs
(
˘x
, 
bôs
) \

242 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

243 
EVP_PKEY_CTRL_RSA_KEYGEN_BITS
, 
bôs
, 
NULL
)

	)

245 
	#EVP_PKEY_CTX_£t_rß_keygí_pubexp
(
˘x
, 
pubexp
) \

246 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_KEYGEN
, \

247 
EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
, 0, 
pubexp
)

	)

249 
	#EVP_PKEY_CTX_£t_rß_mgf1_md
(
˘x
, 
md
) \

250 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

251 
EVP_PKEY_CTRL_RSA_MGF1_MD
, 0, (*)
md
)

	)

253 
	#EVP_PKEY_CTX_gë_rß_mgf1_md
(
˘x
, 
pmd
) \

254 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_RSA
, 
EVP_PKEY_OP_TYPE_SIG
, \

255 
EVP_PKEY_CTRL_GET_RSA_MGF1_MD
, 0, (*)
pmd
)

	)

257 
	#EVP_PKEY_CTRL_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

258 
	#EVP_PKEY_CTRL_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 2)

	)

260 
	#EVP_PKEY_CTRL_RSA_KEYGEN_BITS
 (
EVP_PKEY_ALG_CTRL
 + 3)

	)

261 
	#EVP_PKEY_CTRL_RSA_KEYGEN_PUBEXP
 (
EVP_PKEY_ALG_CTRL
 + 4)

	)

262 
	#EVP_PKEY_CTRL_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 5)

	)

264 
	#EVP_PKEY_CTRL_GET_RSA_PADDING
 (
EVP_PKEY_ALG_CTRL
 + 6)

	)

265 
	#EVP_PKEY_CTRL_GET_RSA_PSS_SALTLEN
 (
EVP_PKEY_ALG_CTRL
 + 7)

	)

266 
	#EVP_PKEY_CTRL_GET_RSA_MGF1_MD
 (
EVP_PKEY_ALG_CTRL
 + 8)

	)

268 
	#RSA_PKCS1_PADDING
 1

	)

269 
	#RSA_SSLV23_PADDING
 2

	)

270 
	#RSA_NO_PADDING
 3

	)

271 
	#RSA_PKCS1_OAEP_PADDING
 4

	)

272 
	#RSA_X931_PADDING
 5

	)

274 
	#RSA_PKCS1_PSS_PADDING
 6

	)

276 
	#RSA_PKCS1_PADDING_SIZE
 11

	)

278 
	#RSA_£t_≠p_d©a
(
s
,
¨g
Ë
	`RSA_£t_ex_d©a
(s,0,¨g)

	)

279 
	#RSA_gë_≠p_d©a
(
s
Ë
	`RSA_gë_ex_d©a
(s,0)

	)

281 
RSA
 * 
RSA_√w
();

282 
RSA
 * 
RSA_√w_mëhod
(
ENGINE
 *
ígöe
);

283 
RSA_size
(c⁄° 
RSA
 *);

286 #i‚de‡
OPENSSL_NO_DEPRECATED


287 
RSA
 * 
RSA_gíî©e_key
(
bôs
, 
e
,

288 (*
ˇŒback
)(,,*),*
cb_¨g
);

292 
RSA_gíî©e_key_ex
(
RSA
 *
rß
, 
bôs
, 
BIGNUM
 *
e
, 
BN_GENCB
 *
cb
);

294 
RSA_check_key
(c⁄° 
RSA
 *);

296 
RSA_public_í¸y±
(
Êí
, c⁄° *
‰om
,

297 *
to
, 
RSA
 *
rß
,
∑ddög
);

298 
RSA_¥iv©e_í¸y±
(
Êí
, c⁄° *
‰om
,

299 *
to
, 
RSA
 *
rß
,
∑ddög
);

300 
RSA_public_de¸y±
(
Êí
, c⁄° *
‰om
,

301 *
to
, 
RSA
 *
rß
,
∑ddög
);

302 
RSA_¥iv©e_de¸y±
(
Êí
, c⁄° *
‰om
,

303 *
to
, 
RSA
 *
rß
,
∑ddög
);

304 
RSA_‰ì
 (
RSA
 *
r
);

306 
RSA_up_ªf
(
RSA
 *
r
);

308 
RSA_Êags
(c⁄° 
RSA
 *
r
);

310 
RSA_£t_deÁu…_mëhod
(c⁄° 
RSA_METHOD
 *
mëh
);

311 c⁄° 
RSA_METHOD
 *
RSA_gë_deÁu…_mëhod
();

312 c⁄° 
RSA_METHOD
 *
RSA_gë_mëhod
(c⁄° 
RSA
 *
rß
);

313 
RSA_£t_mëhod
(
RSA
 *
rß
, c⁄° 
RSA_METHOD
 *
mëh
);

316 
RSA_mem‹y_lock
(
RSA
 *
r
);

319 c⁄° 
RSA_METHOD
 *
RSA_PKCS1_SSLóy
();

321 c⁄° 
RSA_METHOD
 *
RSA_nuŒ_mëhod
();

323 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPublicKey
)

324 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
RSA
, 
RSAPriv©eKey
)

326 
	srß_pss_∑øms_°


328 
X509_ALGOR
 *
hashAlg‹ôhm
;

329 
X509_ALGOR
 *
maskGíAlg‹ôhm
;

330 
ASN1_INTEGER
 *
ß…Lígth
;

331 
ASN1_INTEGER
 *
åaûîFõld
;

332 } 
	tRSA_PSS_PARAMS
;

334 
DECLARE_ASN1_FUNCTIONS
(
RSA_PSS_PARAMS
)

336 #i‚de‡
OPENSSL_NO_FP_API


337 
RSA_¥öt_Â
(
FILE
 *
Â
, c⁄° 
RSA
 *
r
,
off£t
);

340 #i‚de‡
OPENSSL_NO_BIO


341 
RSA_¥öt
(
BIO
 *
bp
, c⁄° 
RSA
 *
r
,
off£t
);

344 #i‚de‡
OPENSSL_NO_RC4


345 
i2d_RSA_NET
(c⁄° 
RSA
 *
a
, **
µ
,

346 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

347 
sgckey
);

348 
RSA
 *
d2i_RSA_NET
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

349 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
, 
vîify
),

350 
sgckey
);

352 
i2d_Nësˇ≥_RSA
(c⁄° 
RSA
 *
a
, **
µ
,

353 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

354 
vîify
));

355 
RSA
 *
d2i_Nësˇ≥_RSA
(RSA **
a
, c⁄° **
µ
, 
Àngth
,

356 (*
cb
)(*
buf
, 
Àn
, c⁄° *
¥om±
,

357 
vîify
));

362 
RSA_sign
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

363 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

364 
RSA_vîify
(
ty≥
, c⁄° *
m
, 
m_Àngth
,

365 c⁄° *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

369 
RSA_sign_ASN1_OCTET_STRING
(
ty≥
,

370 c⁄° *
m
, 
m_Àngth
,

371 *
sigªt
, *
sigÀn
, 
RSA
 *
rß
);

372 
RSA_vîify_ASN1_OCTET_STRING
(
ty≥
,

373 c⁄° *
m
, 
m_Àngth
,

374 *
sigbuf
, 
sigÀn
, 
RSA
 *
rß
);

376 
RSA_blödög_⁄
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

377 
RSA_blödög_off
(
RSA
 *
rß
);

378 
BN_BLINDING
 *
RSA_£tup_blödög
(
RSA
 *
rß
, 
BN_CTX
 *
˘x
);

380 
RSA_∑ddög_add_PKCS1_ty≥_1
(*
to
,
éí
,

381 c⁄° *
f
,
Ê
);

382 
RSA_∑ddög_check_PKCS1_ty≥_1
(*
to
,
éí
,

383 c⁄° *
f
,
Ê
,
rß_Àn
);

384 
RSA_∑ddög_add_PKCS1_ty≥_2
(*
to
,
éí
,

385 c⁄° *
f
,
Ê
);

386 
RSA_∑ddög_check_PKCS1_ty≥_2
(*
to
,
éí
,

387 c⁄° *
f
,
Ê
,
rß_Àn
);

388 
PKCS1_MGF1
(*
mask
, 
Àn
,

389 c⁄° *
£ed
, 
£edÀn
, c⁄° 
EVP_MD
 *
dg°
);

390 
RSA_∑ddög_add_PKCS1_OAEP
(*
to
,
éí
,

391 c⁄° *
f
,
Ê
,

392 c⁄° *
p
,
∂
);

393 
RSA_∑ddög_check_PKCS1_OAEP
(*
to
,
éí
,

394 c⁄° *
f
,
Ê
,
rß_Àn
,

395 c⁄° *
p
,
∂
);

396 
RSA_∑ddög_add_SSLv23
(*
to
,
éí
,

397 c⁄° *
f
,
Ê
);

398 
RSA_∑ddög_check_SSLv23
(*
to
,
éí
,

399 c⁄° *
f
,
Ê
,
rß_Àn
);

400 
RSA_∑ddög_add_n⁄e
(*
to
,
éí
,

401 c⁄° *
f
,
Ê
);

402 
RSA_∑ddög_check_n⁄e
(*
to
,
éí
,

403 c⁄° *
f
,
Ê
,
rß_Àn
);

404 
RSA_∑ddög_add_X931
(*
to
,
éí
,

405 c⁄° *
f
,
Ê
);

406 
RSA_∑ddög_check_X931
(*
to
,
éí
,

407 c⁄° *
f
,
Ê
,
rß_Àn
);

408 
RSA_X931_hash_id
(
nid
);

410 
RSA_vîify_PKCS1_PSS
(
RSA
 *
rß
, c⁄° *
mHash
,

411 c⁄° 
EVP_MD
 *
Hash
, c⁄° *
EM
, 
sLí
);

412 
RSA_∑ddög_add_PKCS1_PSS
(
RSA
 *
rß
, *
EM
,

413 c⁄° *
mHash
,

414 c⁄° 
EVP_MD
 *
Hash
, 
sLí
);

416 
RSA_vîify_PKCS1_PSS_mgf1
(
RSA
 *
rß
, c⁄° *
mHash
,

417 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
,

418 c⁄° *
EM
, 
sLí
);

420 
RSA_∑ddög_add_PKCS1_PSS_mgf1
(
RSA
 *
rß
, *
EM
,

421 c⁄° *
mHash
,

422 c⁄° 
EVP_MD
 *
Hash
, c⁄° EVP_MD *
mgf1Hash
, 
sLí
);

424 
RSA_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

425 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

426 
RSA_£t_ex_d©a
(
RSA
 *
r
,
idx
,*
¨g
);

427 *
RSA_gë_ex_d©a
(c⁄° 
RSA
 *
r
, 
idx
);

429 
RSA
 *
RSAPublicKey_dup
(RSA *
rß
);

430 
RSA
 *
RSAPriv©eKey_dup
(RSA *
rß
);

438 
	#RSA_FLAG_FIPS_METHOD
 0x0400

	)

445 
	#RSA_FLAG_NON_FIPS_ALLOW
 0x0400

	)

449 
	#RSA_FLAG_CHECKED
 0x0800

	)

455 
ERR_lﬂd_RSA_°rögs
();

460 
	#RSA_F_CHECK_PADDING_MD
 140

	)

461 
	#RSA_F_DO_RSA_PRINT
 146

	)

462 
	#RSA_F_INT_RSA_VERIFY
 145

	)

463 
	#RSA_F_MEMORY_LOCK
 100

	)

464 
	#RSA_F_OLD_RSA_PRIV_DECODE
 147

	)

465 
	#RSA_F_PKEY_RSA_CTRL
 143

	)

466 
	#RSA_F_PKEY_RSA_CTRL_STR
 144

	)

467 
	#RSA_F_PKEY_RSA_SIGN
 142

	)

468 
	#RSA_F_PKEY_RSA_VERIFY
 154

	)

469 
	#RSA_F_PKEY_RSA_VERIFYRECOVER
 141

	)

470 
	#RSA_F_RSA_BUILTIN_KEYGEN
 129

	)

471 
	#RSA_F_RSA_CHECK_KEY
 123

	)

472 
	#RSA_F_RSA_EAY_PRIVATE_DECRYPT
 101

	)

473 
	#RSA_F_RSA_EAY_PRIVATE_ENCRYPT
 102

	)

474 
	#RSA_F_RSA_EAY_PUBLIC_DECRYPT
 103

	)

475 
	#RSA_F_RSA_EAY_PUBLIC_ENCRYPT
 104

	)

476 
	#RSA_F_RSA_GENERATE_KEY
 105

	)

477 
	#RSA_F_RSA_GENERATE_KEY_EX
 155

	)

478 
	#RSA_F_RSA_ITEM_VERIFY
 156

	)

479 
	#RSA_F_RSA_MEMORY_LOCK
 130

	)

480 
	#RSA_F_RSA_NEW_METHOD
 106

	)

481 
	#RSA_F_RSA_NULL
 124

	)

482 
	#RSA_F_RSA_NULL_MOD_EXP
 131

	)

483 
	#RSA_F_RSA_NULL_PRIVATE_DECRYPT
 132

	)

484 
	#RSA_F_RSA_NULL_PRIVATE_ENCRYPT
 133

	)

485 
	#RSA_F_RSA_NULL_PUBLIC_DECRYPT
 134

	)

486 
	#RSA_F_RSA_NULL_PUBLIC_ENCRYPT
 135

	)

487 
	#RSA_F_RSA_PADDING_ADD_NONE
 107

	)

488 
	#RSA_F_RSA_PADDING_ADD_PKCS1_OAEP
 121

	)

489 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS
 125

	)

490 
	#RSA_F_RSA_PADDING_ADD_PKCS1_PSS_MGF1
 148

	)

491 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_1
 108

	)

492 
	#RSA_F_RSA_PADDING_ADD_PKCS1_TYPE_2
 109

	)

493 
	#RSA_F_RSA_PADDING_ADD_SSLV23
 110

	)

494 
	#RSA_F_RSA_PADDING_ADD_X931
 127

	)

495 
	#RSA_F_RSA_PADDING_CHECK_NONE
 111

	)

496 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_OAEP
 122

	)

497 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_1
 112

	)

498 
	#RSA_F_RSA_PADDING_CHECK_PKCS1_TYPE_2
 113

	)

499 
	#RSA_F_RSA_PADDING_CHECK_SSLV23
 114

	)

500 
	#RSA_F_RSA_PADDING_CHECK_X931
 128

	)

501 
	#RSA_F_RSA_PRINT
 115

	)

502 
	#RSA_F_RSA_PRINT_FP
 116

	)

503 
	#RSA_F_RSA_PRIVATE_DECRYPT
 150

	)

504 
	#RSA_F_RSA_PRIVATE_ENCRYPT
 151

	)

505 
	#RSA_F_RSA_PRIV_DECODE
 137

	)

506 
	#RSA_F_RSA_PRIV_ENCODE
 138

	)

507 
	#RSA_F_RSA_PUBLIC_DECRYPT
 152

	)

508 
	#RSA_F_RSA_PUBLIC_ENCRYPT
 153

	)

509 
	#RSA_F_RSA_PUB_DECODE
 139

	)

510 
	#RSA_F_RSA_SETUP_BLINDING
 136

	)

511 
	#RSA_F_RSA_SIGN
 117

	)

512 
	#RSA_F_RSA_SIGN_ASN1_OCTET_STRING
 118

	)

513 
	#RSA_F_RSA_VERIFY
 119

	)

514 
	#RSA_F_RSA_VERIFY_ASN1_OCTET_STRING
 120

	)

515 
	#RSA_F_RSA_VERIFY_PKCS1_PSS
 126

	)

516 
	#RSA_F_RSA_VERIFY_PKCS1_PSS_MGF1
 149

	)

519 
	#RSA_R_ALGORITHM_MISMATCH
 100

	)

520 
	#RSA_R_BAD_E_VALUE
 101

	)

521 
	#RSA_R_BAD_FIXED_HEADER_DECRYPT
 102

	)

522 
	#RSA_R_BAD_PAD_BYTE_COUNT
 103

	)

523 
	#RSA_R_BAD_SIGNATURE
 104

	)

524 
	#RSA_R_BLOCK_TYPE_IS_NOT_01
 106

	)

525 
	#RSA_R_BLOCK_TYPE_IS_NOT_02
 107

	)

526 
	#RSA_R_DATA_GREATER_THAN_MOD_LEN
 108

	)

527 
	#RSA_R_DATA_TOO_LARGE
 109

	)

528 
	#RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE
 110

	)

529 
	#RSA_R_DATA_TOO_LARGE_FOR_MODULUS
 132

	)

530 
	#RSA_R_DATA_TOO_SMALL
 111

	)

531 
	#RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE
 122

	)

532 
	#RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY
 112

	)

533 
	#RSA_R_DMP1_NOT_CONGRUENT_TO_D
 124

	)

534 
	#RSA_R_DMQ1_NOT_CONGRUENT_TO_D
 125

	)

535 
	#RSA_R_D_E_NOT_CONGRUENT_TO_1
 123

	)

536 
	#RSA_R_FIRST_OCTET_INVALID
 133

	)

537 
	#RSA_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE
 144

	)

538 
	#RSA_R_INVALID_DIGEST_LENGTH
 143

	)

539 
	#RSA_R_INVALID_HEADER
 137

	)

540 
	#RSA_R_INVALID_KEYBITS
 145

	)

541 
	#RSA_R_INVALID_MESSAGE_LENGTH
 131

	)

542 
	#RSA_R_INVALID_MGF1_MD
 156

	)

543 
	#RSA_R_INVALID_PADDING
 138

	)

544 
	#RSA_R_INVALID_PADDING_MODE
 141

	)

545 
	#RSA_R_INVALID_PSS_PARAMETERS
 149

	)

546 
	#RSA_R_INVALID_PSS_SALTLEN
 146

	)

547 
	#RSA_R_INVALID_SALT_LENGTH
 150

	)

548 
	#RSA_R_INVALID_TRAILER
 139

	)

549 
	#RSA_R_INVALID_X931_DIGEST
 142

	)

550 
	#RSA_R_IQMP_NOT_INVERSE_OF_Q
 126

	)

551 
	#RSA_R_KEY_SIZE_TOO_SMALL
 120

	)

552 
	#RSA_R_LAST_OCTET_INVALID
 134

	)

553 
	#RSA_R_MODULUS_TOO_LARGE
 105

	)

554 
	#RSA_R_NON_FIPS_RSA_METHOD
 157

	)

555 
	#RSA_R_NO_PUBLIC_EXPONENT
 140

	)

556 
	#RSA_R_NULL_BEFORE_BLOCK_MISSING
 113

	)

557 
	#RSA_R_N_DOES_NOT_EQUAL_P_Q
 127

	)

558 
	#RSA_R_OAEP_DECODING_ERROR
 121

	)

559 
	#RSA_R_OPERATION_NOT_ALLOWED_IN_FIPS_MODE
 158

	)

560 
	#RSA_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE
 148

	)

561 
	#RSA_R_PADDING_CHECK_FAILED
 114

	)

562 
	#RSA_R_P_NOT_PRIME
 128

	)

563 
	#RSA_R_Q_NOT_PRIME
 129

	)

564 
	#RSA_R_RSA_OPERATIONS_NOT_SUPPORTED
 130

	)

565 
	#RSA_R_SLEN_CHECK_FAILED
 136

	)

566 
	#RSA_R_SLEN_RECOVERY_FAILED
 135

	)

567 
	#RSA_R_SSLV3_ROLLBACK_ATTACK
 115

	)

568 
	#RSA_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 116

	)

569 
	#RSA_R_UNKNOWN_ALGORITHM_TYPE
 117

	)

570 
	#RSA_R_UNKNOWN_MASK_DIGEST
 151

	)

571 
	#RSA_R_UNKNOWN_PADDING_TYPE
 118

	)

572 
	#RSA_R_UNKNOWN_PSS_DIGEST
 152

	)

573 
	#RSA_R_UNSUPPORTED_MASK_ALGORITHM
 153

	)

574 
	#RSA_R_UNSUPPORTED_MASK_PARAMETER
 154

	)

575 
	#RSA_R_UNSUPPORTED_SIGNATURE_TYPE
 155

	)

576 
	#RSA_R_VALUE_MISSING
 147

	)

577 
	#RSA_R_WRONG_SIGNATURE_LENGTH
 119

	)

579 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/safestack.h

55 #i‚de‡
HEADER_SAFESTACK_H


56 
	#HEADER_SAFESTACK_H


	)

58 
	~<›ís¶/°ack.h
>

60 #i‚de‡
CHECKED_PTR_OF


61 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

62 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

70 
	#CHECKED_STACK_OF
(
ty≥
, 
p
) \

71 ((
_STACK
*Ë(1 ? 
p
 : (
	`STACK_OF
(
ty≥
)*)0))

	)

73 
	#CHECKED_SK_FREE_FUNC
(
ty≥
, 
p
) \

74 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
 *))0)))

	)

76 
	#CHECKED_SK_FREE_FUNC2
(
ty≥
, 
p
) \

77 (((*)(*)Ë((1 ? 
p
 : ((*)(
ty≥
))0)))

	)

79 
	#CHECKED_SK_CMP_FUNC
(
ty≥
, 
p
) \

81 ((1 ? 
p
 : ((*)(c⁄° 
ty≥
 * c⁄° *, c⁄°Åy≥ * c⁄° *))0)))

	)

83 
	#STACK_OF
(
ty≥
Ë
°ack_°_
##
	)
type

84 
	#PREDECLARE_STACK_OF
(
ty≥
Ë
	`STACK_OF
—y≥);

	)

86 
	#DECLARE_STACK_OF
(
ty≥
) \

87 
	`STACK_OF
(
ty≥
) \

89 
_STACK
 
°ack
; \

90 };

	)

91 
	#DECLARE_SPECIAL_STACK_OF
(
ty≥
, 
ty≥2
) \

92 
	`STACK_OF
(
ty≥
) \

94 
_STACK
 
°ack
; \

95 };

	)

97 
	#IMPLEMENT_STACK_OF
(
ty≥
Ë

	)

113 *
	tOPENSSL_STRING
;

115 c⁄° *
	tOPENSSL_CSTRING
;

125 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_STRING
, )

131 *
	tOPENSSL_BLOCK
;

132 
	$DECLARE_SPECIAL_STACK_OF
(
OPENSSL_BLOCK
, )

136 
	#SKM_sk_√w
(
ty≥
, 
cmp
) \

137 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

138 
	#SKM_sk_√w_nuŒ
(
ty≥
) \

139 ((
	`STACK_OF
(
ty≥
Ë*)
	`sk_√w_nuŒ
())

	)

140 
	#SKM_sk_‰ì
(
ty≥
, 
°
) \

141 
	`sk_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

142 
	#SKM_sk_num
(
ty≥
, 
°
) \

143 
	`sk_num
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

144 
	#SKM_sk_vÆue
(
ty≥
, 
°
,
i
) \

145 ((
ty≥
 *)
	`sk_vÆue
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
))

	)

146 
	#SKM_sk_£t
(
ty≥
, 
°
,
i
,
vÆ
) \

147 
	`sk_£t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
i
, 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

148 
	#SKM_sk_zîo
(
ty≥
, 
°
) \

149 
	`sk_zîo
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

150 
	#SKM_sk_push
(
ty≥
, 
°
, 
vÆ
) \

151 
	`sk_push
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

152 
	#SKM_sk_unshi·
(
ty≥
, 
°
, 
vÆ
) \

153 
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

154 
	#SKM_sk_föd
(
ty≥
, 
°
, 
vÆ
) \

155 
	`sk_föd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
))

	)

156 
	#SKM_sk_föd_ex
(
ty≥
, 
°
, 
vÆ
) \

157 
	`sk_föd_ex
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), \

158 
	`CHECKED_PTR_OF
(
ty≥
, 
vÆ
))

	)

159 
	#SKM_sk_dñëe
(
ty≥
, 
°
, 
i
) \

160 (
ty≥
 *)
	`sk_dñëe
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
i
)

	)

161 
	#SKM_sk_dñëe_±r
(
ty≥
, 
°
, 
±r
) \

162 (
ty≥
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
—y≥, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
±r
))

	)

163 
	#SKM_sk_ö£π
(
ty≥
, 
°
,
vÆ
, 
i
) \

164 
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_PTR_OF
—y≥, 
vÆ
), 
i
)

	)

165 
	#SKM_sk_£t_cmp_func
(
ty≥
, 
°
, 
cmp
) \

166 (((*)(c⁄° 
ty≥
 * const *,constÅype * const *)) \

167 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_CMP_FUNC
—y≥, 
cmp
)))

	)

168 
	#SKM_sk_dup
(
ty≥
, 
°
) \

169 (
	`STACK_OF
(
ty≥
Ë*)
	`sk_dup
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

170 
	#SKM_sk_p›_‰ì
(
ty≥
, 
°
, 
‰ì_func
) \

171 
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

172 
	#SKM_sk_shi·
(
ty≥
, 
°
) \

173 (
ty≥
 *)
	`sk_shi·
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

174 
	#SKM_sk_p›
(
ty≥
, 
°
) \

175 (
ty≥
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
—y≥, 
°
))

	)

176 
	#SKM_sk_s‹t
(
ty≥
, 
°
) \

177 
	`sk_s‹t
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

178 
	#SKM_sk_is_s‹ãd
(
ty≥
, 
°
) \

179 
	`sk_is_s‹ãd
(
	`CHECKED_STACK_OF
(
ty≥
, 
°
))

	)

181 
	#SKM_ASN1_SET_OF_d2i
(
ty≥
, 
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

182 (
	`STACK_OF
(
ty≥
Ë*)
	`d2i_ASN1_SET
( \

183 (
	`STACK_OF
(
OPENSSL_BLOCK
Ë**)
	`CHECKED_PTR_OF
(STACK_OF(
ty≥
)*, 
°
), \

184 
µ
, 
Àngth
, \

185 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

186 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

187 
ex_èg
, 
ex_˛ass
)

	)

189 
	#SKM_ASN1_SET_OF_i2d
(
ty≥
, 
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

190 
	`i2d_ASN1_SET
((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`CHECKED_STACK_OF
(
ty≥
, 
°
), 
µ
, \

191 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), \

192 
ex_èg
, 
ex_˛ass
, 
is_£t
)

	)

194 
	#SKM_ASN1_£q_∑ck
(
ty≥
, 
°
, 
i2d_func
, 
buf
, 
Àn
) \

195 
	`ASN1_£q_∑ck
(
	`CHECKED_PTR_OF
(
	`STACK_OF
(
ty≥
), 
°
), \

196 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d_func
), 
buf
, 
Àn
)

	)

198 
	#SKM_ASN1_£q_u≈ack
(
ty≥
, 
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

199 (
	`STACK_OF
(
ty≥
Ë*)
	`ASN1_£q_u≈ack
(
buf
, 
Àn
, 
	`CHECKED_D2I_OF
—y≥, 
d2i_func
), 
	`CHECKED_SK_FREE_FUNC
—y≥, 
‰ì_func
))

	)

201 
	#SKM_PKCS12_de¸y±_d2i
(
ty≥
, 
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

202 (
	`STACK_OF
(
ty≥
Ë*)
	`PKCS12_de¸y±_d2i
(
Æg‹
, \

203 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i_func
), \

204 
	`CHECKED_SK_FREE_FUNC
(
ty≥
, 
‰ì_func
), \

205 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
)

	)

208 
	#sk_ACCESS_DESCRIPTION_√w
(
cmp
Ë
	`SKM_sk_√w
(
ACCESS_DESCRIPTION
, (cmp))

	)

209 
	#sk_ACCESS_DESCRIPTION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ACCESS_DESCRIPTION
)

	)

210 
	#sk_ACCESS_DESCRIPTION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ACCESS_DESCRIPTION
, (°))

	)

211 
	#sk_ACCESS_DESCRIPTION_num
(
°
Ë
	`SKM_sk_num
(
ACCESS_DESCRIPTION
, (°))

	)

212 
	#sk_ACCESS_DESCRIPTION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ACCESS_DESCRIPTION
, (°), (i))

	)

213 
	#sk_ACCESS_DESCRIPTION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ACCESS_DESCRIPTION
, (°), (i), (vÆ))

	)

214 
	#sk_ACCESS_DESCRIPTION_zîo
(
°
Ë
	`SKM_sk_zîo
(
ACCESS_DESCRIPTION
, (°))

	)

215 
	#sk_ACCESS_DESCRIPTION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

216 
	#sk_ACCESS_DESCRIPTION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

217 
	#sk_ACCESS_DESCRIPTION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

218 
	#sk_ACCESS_DESCRIPTION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ACCESS_DESCRIPTION
, (°), (vÆ))

	)

219 
	#sk_ACCESS_DESCRIPTION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ACCESS_DESCRIPTION
, (°), (i))

	)

220 
	#sk_ACCESS_DESCRIPTION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ACCESS_DESCRIPTION
, (°), (±r))

	)

221 
	#sk_ACCESS_DESCRIPTION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ACCESS_DESCRIPTION
, (°), (vÆ), (i))

	)

222 
	#sk_ACCESS_DESCRIPTION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ACCESS_DESCRIPTION
, (°), (cmp))

	)

223 
	#sk_ACCESS_DESCRIPTION_dup
(
°
Ë
	`SKM_sk_dup
(
ACCESS_DESCRIPTION
, st)

	)

224 
	#sk_ACCESS_DESCRIPTION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ACCESS_DESCRIPTION
, (°), (‰ì_func))

	)

225 
	#sk_ACCESS_DESCRIPTION_shi·
(
°
Ë
	`SKM_sk_shi·
(
ACCESS_DESCRIPTION
, (°))

	)

226 
	#sk_ACCESS_DESCRIPTION_p›
(
°
Ë
	`SKM_sk_p›
(
ACCESS_DESCRIPTION
, (°))

	)

227 
	#sk_ACCESS_DESCRIPTION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ACCESS_DESCRIPTION
, (°))

	)

228 
	#sk_ACCESS_DESCRIPTION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ACCESS_DESCRIPTION
, (°))

	)

230 
	#sk_ASIdOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASIdOrR™ge
, (cmp))

	)

231 
	#sk_ASIdOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASIdOrR™ge
)

	)

232 
	#sk_ASIdOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASIdOrR™ge
, (°))

	)

233 
	#sk_ASIdOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
ASIdOrR™ge
, (°))

	)

234 
	#sk_ASIdOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASIdOrR™ge
, (°), (i))

	)

235 
	#sk_ASIdOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASIdOrR™ge
, (°), (i), (vÆ))

	)

236 
	#sk_ASIdOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASIdOrR™ge
, (°))

	)

237 
	#sk_ASIdOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASIdOrR™ge
, (°), (vÆ))

	)

238 
	#sk_ASIdOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASIdOrR™ge
, (°), (vÆ))

	)

239 
	#sk_ASIdOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASIdOrR™ge
, (°), (vÆ))

	)

240 
	#sk_ASIdOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASIdOrR™ge
, (°), (vÆ))

	)

241 
	#sk_ASIdOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASIdOrR™ge
, (°), (i))

	)

242 
	#sk_ASIdOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASIdOrR™ge
, (°), (±r))

	)

243 
	#sk_ASIdOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASIdOrR™ge
, (°), (vÆ), (i))

	)

244 
	#sk_ASIdOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASIdOrR™ge
, (°), (cmp))

	)

245 
	#sk_ASIdOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
ASIdOrR™ge
, st)

	)

246 
	#sk_ASIdOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASIdOrR™ge
, (°), (‰ì_func))

	)

247 
	#sk_ASIdOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASIdOrR™ge
, (°))

	)

248 
	#sk_ASIdOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
ASIdOrR™ge
, (°))

	)

249 
	#sk_ASIdOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASIdOrR™ge
, (°))

	)

250 
	#sk_ASIdOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASIdOrR™ge
, (°))

	)

252 
	#sk_ASN1_GENERALSTRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_GENERALSTRING
, (cmp))

	)

253 
	#sk_ASN1_GENERALSTRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_GENERALSTRING
)

	)

254 
	#sk_ASN1_GENERALSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_GENERALSTRING
, (°))

	)

255 
	#sk_ASN1_GENERALSTRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_GENERALSTRING
, (°))

	)

256 
	#sk_ASN1_GENERALSTRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_GENERALSTRING
, (°), (i))

	)

257 
	#sk_ASN1_GENERALSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_GENERALSTRING
, (°), (i), (vÆ))

	)

258 
	#sk_ASN1_GENERALSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_GENERALSTRING
, (°))

	)

259 
	#sk_ASN1_GENERALSTRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

260 
	#sk_ASN1_GENERALSTRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

261 
	#sk_ASN1_GENERALSTRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

262 
	#sk_ASN1_GENERALSTRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_GENERALSTRING
, (°), (vÆ))

	)

263 
	#sk_ASN1_GENERALSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_GENERALSTRING
, (°), (i))

	)

264 
	#sk_ASN1_GENERALSTRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_GENERALSTRING
, (°), (±r))

	)

265 
	#sk_ASN1_GENERALSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_GENERALSTRING
, (°), (vÆ), (i))

	)

266 
	#sk_ASN1_GENERALSTRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_GENERALSTRING
, (°), (cmp))

	)

267 
	#sk_ASN1_GENERALSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_GENERALSTRING
, st)

	)

268 
	#sk_ASN1_GENERALSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_GENERALSTRING
, (°), (‰ì_func))

	)

269 
	#sk_ASN1_GENERALSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_GENERALSTRING
, (°))

	)

270 
	#sk_ASN1_GENERALSTRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_GENERALSTRING
, (°))

	)

271 
	#sk_ASN1_GENERALSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_GENERALSTRING
, (°))

	)

272 
	#sk_ASN1_GENERALSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_GENERALSTRING
, (°))

	)

274 
	#sk_ASN1_INTEGER_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_INTEGER
, (cmp))

	)

275 
	#sk_ASN1_INTEGER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_INTEGER
)

	)

276 
	#sk_ASN1_INTEGER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_INTEGER
, (°))

	)

277 
	#sk_ASN1_INTEGER_num
(
°
Ë
	`SKM_sk_num
(
ASN1_INTEGER
, (°))

	)

278 
	#sk_ASN1_INTEGER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_INTEGER
, (°), (i))

	)

279 
	#sk_ASN1_INTEGER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_INTEGER
, (°), (i), (vÆ))

	)

280 
	#sk_ASN1_INTEGER_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_INTEGER
, (°))

	)

281 
	#sk_ASN1_INTEGER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_INTEGER
, (°), (vÆ))

	)

282 
	#sk_ASN1_INTEGER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_INTEGER
, (°), (vÆ))

	)

283 
	#sk_ASN1_INTEGER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_INTEGER
, (°), (vÆ))

	)

284 
	#sk_ASN1_INTEGER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_INTEGER
, (°), (vÆ))

	)

285 
	#sk_ASN1_INTEGER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_INTEGER
, (°), (i))

	)

286 
	#sk_ASN1_INTEGER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_INTEGER
, (°), (±r))

	)

287 
	#sk_ASN1_INTEGER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_INTEGER
, (°), (vÆ), (i))

	)

288 
	#sk_ASN1_INTEGER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_INTEGER
, (°), (cmp))

	)

289 
	#sk_ASN1_INTEGER_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_INTEGER
, st)

	)

290 
	#sk_ASN1_INTEGER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_INTEGER
, (°), (‰ì_func))

	)

291 
	#sk_ASN1_INTEGER_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_INTEGER
, (°))

	)

292 
	#sk_ASN1_INTEGER_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_INTEGER
, (°))

	)

293 
	#sk_ASN1_INTEGER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_INTEGER
, (°))

	)

294 
	#sk_ASN1_INTEGER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_INTEGER
, (°))

	)

296 
	#sk_ASN1_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_OBJECT
, (cmp))

	)

297 
	#sk_ASN1_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_OBJECT
)

	)

298 
	#sk_ASN1_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_OBJECT
, (°))

	)

299 
	#sk_ASN1_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
ASN1_OBJECT
, (°))

	)

300 
	#sk_ASN1_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_OBJECT
, (°), (i))

	)

301 
	#sk_ASN1_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_OBJECT
, (°), (i), (vÆ))

	)

302 
	#sk_ASN1_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_OBJECT
, (°))

	)

303 
	#sk_ASN1_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_OBJECT
, (°), (vÆ))

	)

304 
	#sk_ASN1_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_OBJECT
, (°), (vÆ))

	)

305 
	#sk_ASN1_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_OBJECT
, (°), (vÆ))

	)

306 
	#sk_ASN1_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_OBJECT
, (°), (vÆ))

	)

307 
	#sk_ASN1_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_OBJECT
, (°), (i))

	)

308 
	#sk_ASN1_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_OBJECT
, (°), (±r))

	)

309 
	#sk_ASN1_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_OBJECT
, (°), (vÆ), (i))

	)

310 
	#sk_ASN1_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_OBJECT
, (°), (cmp))

	)

311 
	#sk_ASN1_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_OBJECT
, st)

	)

312 
	#sk_ASN1_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_OBJECT
, (°), (‰ì_func))

	)

313 
	#sk_ASN1_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_OBJECT
, (°))

	)

314 
	#sk_ASN1_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_OBJECT
, (°))

	)

315 
	#sk_ASN1_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_OBJECT
, (°))

	)

316 
	#sk_ASN1_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_OBJECT
, (°))

	)

318 
	#sk_ASN1_STRING_TABLE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_STRING_TABLE
, (cmp))

	)

319 
	#sk_ASN1_STRING_TABLE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_STRING_TABLE
)

	)

320 
	#sk_ASN1_STRING_TABLE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_STRING_TABLE
, (°))

	)

321 
	#sk_ASN1_STRING_TABLE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_STRING_TABLE
, (°))

	)

322 
	#sk_ASN1_STRING_TABLE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_STRING_TABLE
, (°), (i))

	)

323 
	#sk_ASN1_STRING_TABLE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_STRING_TABLE
, (°), (i), (vÆ))

	)

324 
	#sk_ASN1_STRING_TABLE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_STRING_TABLE
, (°))

	)

325 
	#sk_ASN1_STRING_TABLE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

326 
	#sk_ASN1_STRING_TABLE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

327 
	#sk_ASN1_STRING_TABLE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

328 
	#sk_ASN1_STRING_TABLE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_STRING_TABLE
, (°), (vÆ))

	)

329 
	#sk_ASN1_STRING_TABLE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_STRING_TABLE
, (°), (i))

	)

330 
	#sk_ASN1_STRING_TABLE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_STRING_TABLE
, (°), (±r))

	)

331 
	#sk_ASN1_STRING_TABLE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_STRING_TABLE
, (°), (vÆ), (i))

	)

332 
	#sk_ASN1_STRING_TABLE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_STRING_TABLE
, (°), (cmp))

	)

333 
	#sk_ASN1_STRING_TABLE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_STRING_TABLE
, st)

	)

334 
	#sk_ASN1_STRING_TABLE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_STRING_TABLE
, (°), (‰ì_func))

	)

335 
	#sk_ASN1_STRING_TABLE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_STRING_TABLE
, (°))

	)

336 
	#sk_ASN1_STRING_TABLE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_STRING_TABLE
, (°))

	)

337 
	#sk_ASN1_STRING_TABLE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_STRING_TABLE
, (°))

	)

338 
	#sk_ASN1_STRING_TABLE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_STRING_TABLE
, (°))

	)

340 
	#sk_ASN1_TYPE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_TYPE
, (cmp))

	)

341 
	#sk_ASN1_TYPE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_TYPE
)

	)

342 
	#sk_ASN1_TYPE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_TYPE
, (°))

	)

343 
	#sk_ASN1_TYPE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_TYPE
, (°))

	)

344 
	#sk_ASN1_TYPE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_TYPE
, (°), (i))

	)

345 
	#sk_ASN1_TYPE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_TYPE
, (°), (i), (vÆ))

	)

346 
	#sk_ASN1_TYPE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_TYPE
, (°))

	)

347 
	#sk_ASN1_TYPE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_TYPE
, (°), (vÆ))

	)

348 
	#sk_ASN1_TYPE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_TYPE
, (°), (vÆ))

	)

349 
	#sk_ASN1_TYPE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_TYPE
, (°), (vÆ))

	)

350 
	#sk_ASN1_TYPE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_TYPE
, (°), (vÆ))

	)

351 
	#sk_ASN1_TYPE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_TYPE
, (°), (i))

	)

352 
	#sk_ASN1_TYPE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_TYPE
, (°), (±r))

	)

353 
	#sk_ASN1_TYPE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_TYPE
, (°), (vÆ), (i))

	)

354 
	#sk_ASN1_TYPE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_TYPE
, (°), (cmp))

	)

355 
	#sk_ASN1_TYPE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_TYPE
, st)

	)

356 
	#sk_ASN1_TYPE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_TYPE
, (°), (‰ì_func))

	)

357 
	#sk_ASN1_TYPE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_TYPE
, (°))

	)

358 
	#sk_ASN1_TYPE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_TYPE
, (°))

	)

359 
	#sk_ASN1_TYPE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_TYPE
, (°))

	)

360 
	#sk_ASN1_TYPE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_TYPE
, (°))

	)

362 
	#sk_ASN1_UTF8STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_UTF8STRING
, (cmp))

	)

363 
	#sk_ASN1_UTF8STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_UTF8STRING
)

	)

364 
	#sk_ASN1_UTF8STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_UTF8STRING
, (°))

	)

365 
	#sk_ASN1_UTF8STRING_num
(
°
Ë
	`SKM_sk_num
(
ASN1_UTF8STRING
, (°))

	)

366 
	#sk_ASN1_UTF8STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_UTF8STRING
, (°), (i))

	)

367 
	#sk_ASN1_UTF8STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_UTF8STRING
, (°), (i), (vÆ))

	)

368 
	#sk_ASN1_UTF8STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_UTF8STRING
, (°))

	)

369 
	#sk_ASN1_UTF8STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

370 
	#sk_ASN1_UTF8STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

371 
	#sk_ASN1_UTF8STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

372 
	#sk_ASN1_UTF8STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_UTF8STRING
, (°), (vÆ))

	)

373 
	#sk_ASN1_UTF8STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_UTF8STRING
, (°), (i))

	)

374 
	#sk_ASN1_UTF8STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_UTF8STRING
, (°), (±r))

	)

375 
	#sk_ASN1_UTF8STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_UTF8STRING
, (°), (vÆ), (i))

	)

376 
	#sk_ASN1_UTF8STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_UTF8STRING
, (°), (cmp))

	)

377 
	#sk_ASN1_UTF8STRING_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_UTF8STRING
, st)

	)

378 
	#sk_ASN1_UTF8STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_UTF8STRING
, (°), (‰ì_func))

	)

379 
	#sk_ASN1_UTF8STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_UTF8STRING
, (°))

	)

380 
	#sk_ASN1_UTF8STRING_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_UTF8STRING
, (°))

	)

381 
	#sk_ASN1_UTF8STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_UTF8STRING
, (°))

	)

382 
	#sk_ASN1_UTF8STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_UTF8STRING
, (°))

	)

384 
	#sk_ASN1_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ASN1_VALUE
, (cmp))

	)

385 
	#sk_ASN1_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ASN1_VALUE
)

	)

386 
	#sk_ASN1_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ASN1_VALUE
, (°))

	)

387 
	#sk_ASN1_VALUE_num
(
°
Ë
	`SKM_sk_num
(
ASN1_VALUE
, (°))

	)

388 
	#sk_ASN1_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ASN1_VALUE
, (°), (i))

	)

389 
	#sk_ASN1_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ASN1_VALUE
, (°), (i), (vÆ))

	)

390 
	#sk_ASN1_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ASN1_VALUE
, (°))

	)

391 
	#sk_ASN1_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ASN1_VALUE
, (°), (vÆ))

	)

392 
	#sk_ASN1_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ASN1_VALUE
, (°), (vÆ))

	)

393 
	#sk_ASN1_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ASN1_VALUE
, (°), (vÆ))

	)

394 
	#sk_ASN1_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ASN1_VALUE
, (°), (vÆ))

	)

395 
	#sk_ASN1_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ASN1_VALUE
, (°), (i))

	)

396 
	#sk_ASN1_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ASN1_VALUE
, (°), (±r))

	)

397 
	#sk_ASN1_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ASN1_VALUE
, (°), (vÆ), (i))

	)

398 
	#sk_ASN1_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ASN1_VALUE
, (°), (cmp))

	)

399 
	#sk_ASN1_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
ASN1_VALUE
, st)

	)

400 
	#sk_ASN1_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ASN1_VALUE
, (°), (‰ì_func))

	)

401 
	#sk_ASN1_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ASN1_VALUE
, (°))

	)

402 
	#sk_ASN1_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
ASN1_VALUE
, (°))

	)

403 
	#sk_ASN1_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ASN1_VALUE
, (°))

	)

404 
	#sk_ASN1_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ASN1_VALUE
, (°))

	)

406 
	#sk_BIO_√w
(
cmp
Ë
	`SKM_sk_√w
(
BIO
, (cmp))

	)

407 
	#sk_BIO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BIO
)

	)

408 
	#sk_BIO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BIO
, (°))

	)

409 
	#sk_BIO_num
(
°
Ë
	`SKM_sk_num
(
BIO
, (°))

	)

410 
	#sk_BIO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BIO
, (°), (i))

	)

411 
	#sk_BIO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BIO
, (°), (i), (vÆ))

	)

412 
	#sk_BIO_zîo
(
°
Ë
	`SKM_sk_zîo
(
BIO
, (°))

	)

413 
	#sk_BIO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BIO
, (°), (vÆ))

	)

414 
	#sk_BIO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BIO
, (°), (vÆ))

	)

415 
	#sk_BIO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BIO
, (°), (vÆ))

	)

416 
	#sk_BIO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BIO
, (°), (vÆ))

	)

417 
	#sk_BIO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BIO
, (°), (i))

	)

418 
	#sk_BIO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BIO
, (°), (±r))

	)

419 
	#sk_BIO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BIO
, (°), (vÆ), (i))

	)

420 
	#sk_BIO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BIO
, (°), (cmp))

	)

421 
	#sk_BIO_dup
(
°
Ë
	`SKM_sk_dup
(
BIO
, st)

	)

422 
	#sk_BIO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BIO
, (°), (‰ì_func))

	)

423 
	#sk_BIO_shi·
(
°
Ë
	`SKM_sk_shi·
(
BIO
, (°))

	)

424 
	#sk_BIO_p›
(
°
Ë
	`SKM_sk_p›
(
BIO
, (°))

	)

425 
	#sk_BIO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BIO
, (°))

	)

426 
	#sk_BIO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BIO
, (°))

	)

428 
	#sk_BY_DIR_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_ENTRY
, (cmp))

	)

429 
	#sk_BY_DIR_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_ENTRY
)

	)

430 
	#sk_BY_DIR_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_ENTRY
, (°))

	)

431 
	#sk_BY_DIR_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_ENTRY
, (°))

	)

432 
	#sk_BY_DIR_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_ENTRY
, (°), (i))

	)

433 
	#sk_BY_DIR_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_ENTRY
, (°), (i), (vÆ))

	)

434 
	#sk_BY_DIR_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_ENTRY
, (°))

	)

435 
	#sk_BY_DIR_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

436 
	#sk_BY_DIR_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

437 
	#sk_BY_DIR_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

438 
	#sk_BY_DIR_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_ENTRY
, (°), (vÆ))

	)

439 
	#sk_BY_DIR_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_ENTRY
, (°), (i))

	)

440 
	#sk_BY_DIR_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_ENTRY
, (°), (±r))

	)

441 
	#sk_BY_DIR_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_ENTRY
, (°), (vÆ), (i))

	)

442 
	#sk_BY_DIR_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_ENTRY
, (°), (cmp))

	)

443 
	#sk_BY_DIR_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_ENTRY
, st)

	)

444 
	#sk_BY_DIR_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_ENTRY
, (°), (‰ì_func))

	)

445 
	#sk_BY_DIR_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_ENTRY
, (°))

	)

446 
	#sk_BY_DIR_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_ENTRY
, (°))

	)

447 
	#sk_BY_DIR_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_ENTRY
, (°))

	)

448 
	#sk_BY_DIR_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_ENTRY
, (°))

	)

450 
	#sk_BY_DIR_HASH_√w
(
cmp
Ë
	`SKM_sk_√w
(
BY_DIR_HASH
, (cmp))

	)

451 
	#sk_BY_DIR_HASH_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
BY_DIR_HASH
)

	)

452 
	#sk_BY_DIR_HASH_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
BY_DIR_HASH
, (°))

	)

453 
	#sk_BY_DIR_HASH_num
(
°
Ë
	`SKM_sk_num
(
BY_DIR_HASH
, (°))

	)

454 
	#sk_BY_DIR_HASH_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
BY_DIR_HASH
, (°), (i))

	)

455 
	#sk_BY_DIR_HASH_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
BY_DIR_HASH
, (°), (i), (vÆ))

	)

456 
	#sk_BY_DIR_HASH_zîo
(
°
Ë
	`SKM_sk_zîo
(
BY_DIR_HASH
, (°))

	)

457 
	#sk_BY_DIR_HASH_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
BY_DIR_HASH
, (°), (vÆ))

	)

458 
	#sk_BY_DIR_HASH_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
BY_DIR_HASH
, (°), (vÆ))

	)

459 
	#sk_BY_DIR_HASH_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
BY_DIR_HASH
, (°), (vÆ))

	)

460 
	#sk_BY_DIR_HASH_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
BY_DIR_HASH
, (°), (vÆ))

	)

461 
	#sk_BY_DIR_HASH_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
BY_DIR_HASH
, (°), (i))

	)

462 
	#sk_BY_DIR_HASH_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
BY_DIR_HASH
, (°), (±r))

	)

463 
	#sk_BY_DIR_HASH_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
BY_DIR_HASH
, (°), (vÆ), (i))

	)

464 
	#sk_BY_DIR_HASH_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
BY_DIR_HASH
, (°), (cmp))

	)

465 
	#sk_BY_DIR_HASH_dup
(
°
Ë
	`SKM_sk_dup
(
BY_DIR_HASH
, st)

	)

466 
	#sk_BY_DIR_HASH_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
BY_DIR_HASH
, (°), (‰ì_func))

	)

467 
	#sk_BY_DIR_HASH_shi·
(
°
Ë
	`SKM_sk_shi·
(
BY_DIR_HASH
, (°))

	)

468 
	#sk_BY_DIR_HASH_p›
(
°
Ë
	`SKM_sk_p›
(
BY_DIR_HASH
, (°))

	)

469 
	#sk_BY_DIR_HASH_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
BY_DIR_HASH
, (°))

	)

470 
	#sk_BY_DIR_HASH_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
BY_DIR_HASH
, (°))

	)

472 
	#sk_CMS_CîtifiˇãChoi˚s_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_CîtifiˇãChoi˚s
, (cmp))

	)

473 
	#sk_CMS_CîtifiˇãChoi˚s_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_CîtifiˇãChoi˚s
)

	)

474 
	#sk_CMS_CîtifiˇãChoi˚s_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

475 
	#sk_CMS_CîtifiˇãChoi˚s_num
(
°
Ë
	`SKM_sk_num
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

476 
	#sk_CMS_CîtifiˇãChoi˚s_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

477 
	#sk_CMS_CîtifiˇãChoi˚s_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_CîtifiˇãChoi˚s
, (°), (i), (vÆ))

	)

478 
	#sk_CMS_CîtifiˇãChoi˚s_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

479 
	#sk_CMS_CîtifiˇãChoi˚s_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

480 
	#sk_CMS_CîtifiˇãChoi˚s_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

481 
	#sk_CMS_CîtifiˇãChoi˚s_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

482 
	#sk_CMS_CîtifiˇãChoi˚s_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ))

	)

483 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_CîtifiˇãChoi˚s
, (°), (i))

	)

484 
	#sk_CMS_CîtifiˇãChoi˚s_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_CîtifiˇãChoi˚s
, (°), (±r))

	)

485 
	#sk_CMS_CîtifiˇãChoi˚s_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_CîtifiˇãChoi˚s
, (°), (vÆ), (i))

	)

486 
	#sk_CMS_CîtifiˇãChoi˚s_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_CîtifiˇãChoi˚s
, (°), (cmp))

	)

487 
	#sk_CMS_CîtifiˇãChoi˚s_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_CîtifiˇãChoi˚s
, st)

	)

488 
	#sk_CMS_CîtifiˇãChoi˚s_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_CîtifiˇãChoi˚s
, (°), (‰ì_func))

	)

489 
	#sk_CMS_CîtifiˇãChoi˚s_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

490 
	#sk_CMS_CîtifiˇãChoi˚s_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

491 
	#sk_CMS_CîtifiˇãChoi˚s_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

492 
	#sk_CMS_CîtifiˇãChoi˚s_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_CîtifiˇãChoi˚s
, (°))

	)

494 
	#sk_CMS_Recùõ¡Info_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Recùõ¡Info
, (cmp))

	)

495 
	#sk_CMS_Recùõ¡Info_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Recùõ¡Info
)

	)

496 
	#sk_CMS_Recùõ¡Info_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Recùõ¡Info
, (°))

	)

497 
	#sk_CMS_Recùõ¡Info_num
(
°
Ë
	`SKM_sk_num
(
CMS_Recùõ¡Info
, (°))

	)

498 
	#sk_CMS_Recùõ¡Info_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Recùõ¡Info
, (°), (i))

	)

499 
	#sk_CMS_Recùõ¡Info_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Recùõ¡Info
, (°), (i), (vÆ))

	)

500 
	#sk_CMS_Recùõ¡Info_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Recùõ¡Info
, (°))

	)

501 
	#sk_CMS_Recùõ¡Info_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

502 
	#sk_CMS_Recùõ¡Info_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

503 
	#sk_CMS_Recùõ¡Info_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

504 
	#sk_CMS_Recùõ¡Info_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Recùõ¡Info
, (°), (vÆ))

	)

505 
	#sk_CMS_Recùõ¡Info_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Recùõ¡Info
, (°), (i))

	)

506 
	#sk_CMS_Recùõ¡Info_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Recùõ¡Info
, (°), (±r))

	)

507 
	#sk_CMS_Recùõ¡Info_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Recùõ¡Info
, (°), (vÆ), (i))

	)

508 
	#sk_CMS_Recùõ¡Info_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Recùõ¡Info
, (°), (cmp))

	)

509 
	#sk_CMS_Recùõ¡Info_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Recùõ¡Info
, st)

	)

510 
	#sk_CMS_Recùõ¡Info_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Recùõ¡Info
, (°), (‰ì_func))

	)

511 
	#sk_CMS_Recùõ¡Info_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Recùõ¡Info
, (°))

	)

512 
	#sk_CMS_Recùõ¡Info_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Recùõ¡Info
, (°))

	)

513 
	#sk_CMS_Recùõ¡Info_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Recùõ¡Info
, (°))

	)

514 
	#sk_CMS_Recùõ¡Info_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Recùõ¡Info
, (°))

	)

516 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Revoˇti⁄InfoChoi˚
, (cmp))

	)

517 
	#sk_CMS_Revoˇti⁄InfoChoi˚_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Revoˇti⁄InfoChoi˚
)

	)

518 
	#sk_CMS_Revoˇti⁄InfoChoi˚_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

519 
	#sk_CMS_Revoˇti⁄InfoChoi˚_num
(
°
Ë
	`SKM_sk_num
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

520 
	#sk_CMS_Revoˇti⁄InfoChoi˚_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

521 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i), (vÆ))

	)

522 
	#sk_CMS_Revoˇti⁄InfoChoi˚_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

523 
	#sk_CMS_Revoˇti⁄InfoChoi˚_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

524 
	#sk_CMS_Revoˇti⁄InfoChoi˚_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

525 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

526 
	#sk_CMS_Revoˇti⁄InfoChoi˚_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ))

	)

527 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (i))

	)

528 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (±r))

	)

529 
	#sk_CMS_Revoˇti⁄InfoChoi˚_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (vÆ), (i))

	)

530 
	#sk_CMS_Revoˇti⁄InfoChoi˚_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (cmp))

	)

531 
	#sk_CMS_Revoˇti⁄InfoChoi˚_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Revoˇti⁄InfoChoi˚
, st)

	)

532 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Revoˇti⁄InfoChoi˚
, (°), (‰ì_func))

	)

533 
	#sk_CMS_Revoˇti⁄InfoChoi˚_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

534 
	#sk_CMS_Revoˇti⁄InfoChoi˚_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

535 
	#sk_CMS_Revoˇti⁄InfoChoi˚_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

536 
	#sk_CMS_Revoˇti⁄InfoChoi˚_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Revoˇti⁄InfoChoi˚
, (°))

	)

538 
	#sk_CMS_Sig√rInfo_√w
(
cmp
Ë
	`SKM_sk_√w
(
CMS_Sig√rInfo
, (cmp))

	)

539 
	#sk_CMS_Sig√rInfo_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CMS_Sig√rInfo
)

	)

540 
	#sk_CMS_Sig√rInfo_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CMS_Sig√rInfo
, (°))

	)

541 
	#sk_CMS_Sig√rInfo_num
(
°
Ë
	`SKM_sk_num
(
CMS_Sig√rInfo
, (°))

	)

542 
	#sk_CMS_Sig√rInfo_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CMS_Sig√rInfo
, (°), (i))

	)

543 
	#sk_CMS_Sig√rInfo_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CMS_Sig√rInfo
, (°), (i), (vÆ))

	)

544 
	#sk_CMS_Sig√rInfo_zîo
(
°
Ë
	`SKM_sk_zîo
(
CMS_Sig√rInfo
, (°))

	)

545 
	#sk_CMS_Sig√rInfo_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

546 
	#sk_CMS_Sig√rInfo_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

547 
	#sk_CMS_Sig√rInfo_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

548 
	#sk_CMS_Sig√rInfo_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CMS_Sig√rInfo
, (°), (vÆ))

	)

549 
	#sk_CMS_Sig√rInfo_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CMS_Sig√rInfo
, (°), (i))

	)

550 
	#sk_CMS_Sig√rInfo_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CMS_Sig√rInfo
, (°), (±r))

	)

551 
	#sk_CMS_Sig√rInfo_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CMS_Sig√rInfo
, (°), (vÆ), (i))

	)

552 
	#sk_CMS_Sig√rInfo_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CMS_Sig√rInfo
, (°), (cmp))

	)

553 
	#sk_CMS_Sig√rInfo_dup
(
°
Ë
	`SKM_sk_dup
(
CMS_Sig√rInfo
, st)

	)

554 
	#sk_CMS_Sig√rInfo_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CMS_Sig√rInfo
, (°), (‰ì_func))

	)

555 
	#sk_CMS_Sig√rInfo_shi·
(
°
Ë
	`SKM_sk_shi·
(
CMS_Sig√rInfo
, (°))

	)

556 
	#sk_CMS_Sig√rInfo_p›
(
°
Ë
	`SKM_sk_p›
(
CMS_Sig√rInfo
, (°))

	)

557 
	#sk_CMS_Sig√rInfo_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CMS_Sig√rInfo
, (°))

	)

558 
	#sk_CMS_Sig√rInfo_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CMS_Sig√rInfo
, (°))

	)

560 
	#sk_CONF_IMODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_IMODULE
, (cmp))

	)

561 
	#sk_CONF_IMODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_IMODULE
)

	)

562 
	#sk_CONF_IMODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_IMODULE
, (°))

	)

563 
	#sk_CONF_IMODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_IMODULE
, (°))

	)

564 
	#sk_CONF_IMODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_IMODULE
, (°), (i))

	)

565 
	#sk_CONF_IMODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_IMODULE
, (°), (i), (vÆ))

	)

566 
	#sk_CONF_IMODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_IMODULE
, (°))

	)

567 
	#sk_CONF_IMODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_IMODULE
, (°), (vÆ))

	)

568 
	#sk_CONF_IMODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_IMODULE
, (°), (vÆ))

	)

569 
	#sk_CONF_IMODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_IMODULE
, (°), (vÆ))

	)

570 
	#sk_CONF_IMODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_IMODULE
, (°), (vÆ))

	)

571 
	#sk_CONF_IMODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_IMODULE
, (°), (i))

	)

572 
	#sk_CONF_IMODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_IMODULE
, (°), (±r))

	)

573 
	#sk_CONF_IMODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_IMODULE
, (°), (vÆ), (i))

	)

574 
	#sk_CONF_IMODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_IMODULE
, (°), (cmp))

	)

575 
	#sk_CONF_IMODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_IMODULE
, st)

	)

576 
	#sk_CONF_IMODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_IMODULE
, (°), (‰ì_func))

	)

577 
	#sk_CONF_IMODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_IMODULE
, (°))

	)

578 
	#sk_CONF_IMODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_IMODULE
, (°))

	)

579 
	#sk_CONF_IMODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_IMODULE
, (°))

	)

580 
	#sk_CONF_IMODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_IMODULE
, (°))

	)

582 
	#sk_CONF_MODULE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_MODULE
, (cmp))

	)

583 
	#sk_CONF_MODULE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_MODULE
)

	)

584 
	#sk_CONF_MODULE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_MODULE
, (°))

	)

585 
	#sk_CONF_MODULE_num
(
°
Ë
	`SKM_sk_num
(
CONF_MODULE
, (°))

	)

586 
	#sk_CONF_MODULE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_MODULE
, (°), (i))

	)

587 
	#sk_CONF_MODULE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_MODULE
, (°), (i), (vÆ))

	)

588 
	#sk_CONF_MODULE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_MODULE
, (°))

	)

589 
	#sk_CONF_MODULE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_MODULE
, (°), (vÆ))

	)

590 
	#sk_CONF_MODULE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_MODULE
, (°), (vÆ))

	)

591 
	#sk_CONF_MODULE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_MODULE
, (°), (vÆ))

	)

592 
	#sk_CONF_MODULE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_MODULE
, (°), (vÆ))

	)

593 
	#sk_CONF_MODULE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_MODULE
, (°), (i))

	)

594 
	#sk_CONF_MODULE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_MODULE
, (°), (±r))

	)

595 
	#sk_CONF_MODULE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_MODULE
, (°), (vÆ), (i))

	)

596 
	#sk_CONF_MODULE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_MODULE
, (°), (cmp))

	)

597 
	#sk_CONF_MODULE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_MODULE
, st)

	)

598 
	#sk_CONF_MODULE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_MODULE
, (°), (‰ì_func))

	)

599 
	#sk_CONF_MODULE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_MODULE
, (°))

	)

600 
	#sk_CONF_MODULE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_MODULE
, (°))

	)

601 
	#sk_CONF_MODULE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_MODULE
, (°))

	)

602 
	#sk_CONF_MODULE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_MODULE
, (°))

	)

604 
	#sk_CONF_VALUE_√w
(
cmp
Ë
	`SKM_sk_√w
(
CONF_VALUE
, (cmp))

	)

605 
	#sk_CONF_VALUE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CONF_VALUE
)

	)

606 
	#sk_CONF_VALUE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CONF_VALUE
, (°))

	)

607 
	#sk_CONF_VALUE_num
(
°
Ë
	`SKM_sk_num
(
CONF_VALUE
, (°))

	)

608 
	#sk_CONF_VALUE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CONF_VALUE
, (°), (i))

	)

609 
	#sk_CONF_VALUE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CONF_VALUE
, (°), (i), (vÆ))

	)

610 
	#sk_CONF_VALUE_zîo
(
°
Ë
	`SKM_sk_zîo
(
CONF_VALUE
, (°))

	)

611 
	#sk_CONF_VALUE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CONF_VALUE
, (°), (vÆ))

	)

612 
	#sk_CONF_VALUE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CONF_VALUE
, (°), (vÆ))

	)

613 
	#sk_CONF_VALUE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CONF_VALUE
, (°), (vÆ))

	)

614 
	#sk_CONF_VALUE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CONF_VALUE
, (°), (vÆ))

	)

615 
	#sk_CONF_VALUE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CONF_VALUE
, (°), (i))

	)

616 
	#sk_CONF_VALUE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CONF_VALUE
, (°), (±r))

	)

617 
	#sk_CONF_VALUE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CONF_VALUE
, (°), (vÆ), (i))

	)

618 
	#sk_CONF_VALUE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CONF_VALUE
, (°), (cmp))

	)

619 
	#sk_CONF_VALUE_dup
(
°
Ë
	`SKM_sk_dup
(
CONF_VALUE
, st)

	)

620 
	#sk_CONF_VALUE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CONF_VALUE
, (°), (‰ì_func))

	)

621 
	#sk_CONF_VALUE_shi·
(
°
Ë
	`SKM_sk_shi·
(
CONF_VALUE
, (°))

	)

622 
	#sk_CONF_VALUE_p›
(
°
Ë
	`SKM_sk_p›
(
CONF_VALUE
, (°))

	)

623 
	#sk_CONF_VALUE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CONF_VALUE
, (°))

	)

624 
	#sk_CONF_VALUE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CONF_VALUE
, (°))

	)

626 
	#sk_CRYPTO_EX_DATA_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_EX_DATA_FUNCS
, (cmp))

	)

627 
	#sk_CRYPTO_EX_DATA_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_EX_DATA_FUNCS
)

	)

628 
	#sk_CRYPTO_EX_DATA_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

629 
	#sk_CRYPTO_EX_DATA_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

630 
	#sk_CRYPTO_EX_DATA_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

631 
	#sk_CRYPTO_EX_DATA_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_EX_DATA_FUNCS
, (°), (i), (vÆ))

	)

632 
	#sk_CRYPTO_EX_DATA_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

633 
	#sk_CRYPTO_EX_DATA_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

634 
	#sk_CRYPTO_EX_DATA_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

635 
	#sk_CRYPTO_EX_DATA_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

636 
	#sk_CRYPTO_EX_DATA_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ))

	)

637 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_EX_DATA_FUNCS
, (°), (i))

	)

638 
	#sk_CRYPTO_EX_DATA_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_EX_DATA_FUNCS
, (°), (±r))

	)

639 
	#sk_CRYPTO_EX_DATA_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_EX_DATA_FUNCS
, (°), (vÆ), (i))

	)

640 
	#sk_CRYPTO_EX_DATA_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_EX_DATA_FUNCS
, (°), (cmp))

	)

641 
	#sk_CRYPTO_EX_DATA_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_EX_DATA_FUNCS
, st)

	)

642 
	#sk_CRYPTO_EX_DATA_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_EX_DATA_FUNCS
, (°), (‰ì_func))

	)

643 
	#sk_CRYPTO_EX_DATA_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

644 
	#sk_CRYPTO_EX_DATA_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

645 
	#sk_CRYPTO_EX_DATA_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

646 
	#sk_CRYPTO_EX_DATA_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_EX_DATA_FUNCS
, (°))

	)

648 
	#sk_CRYPTO_dy∆ock_√w
(
cmp
Ë
	`SKM_sk_√w
(
CRYPTO_dy∆ock
, (cmp))

	)

649 
	#sk_CRYPTO_dy∆ock_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
CRYPTO_dy∆ock
)

	)

650 
	#sk_CRYPTO_dy∆ock_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
CRYPTO_dy∆ock
, (°))

	)

651 
	#sk_CRYPTO_dy∆ock_num
(
°
Ë
	`SKM_sk_num
(
CRYPTO_dy∆ock
, (°))

	)

652 
	#sk_CRYPTO_dy∆ock_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
CRYPTO_dy∆ock
, (°), (i))

	)

653 
	#sk_CRYPTO_dy∆ock_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
CRYPTO_dy∆ock
, (°), (i), (vÆ))

	)

654 
	#sk_CRYPTO_dy∆ock_zîo
(
°
Ë
	`SKM_sk_zîo
(
CRYPTO_dy∆ock
, (°))

	)

655 
	#sk_CRYPTO_dy∆ock_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

656 
	#sk_CRYPTO_dy∆ock_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

657 
	#sk_CRYPTO_dy∆ock_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

658 
	#sk_CRYPTO_dy∆ock_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
CRYPTO_dy∆ock
, (°), (vÆ))

	)

659 
	#sk_CRYPTO_dy∆ock_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
CRYPTO_dy∆ock
, (°), (i))

	)

660 
	#sk_CRYPTO_dy∆ock_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
CRYPTO_dy∆ock
, (°), (±r))

	)

661 
	#sk_CRYPTO_dy∆ock_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
CRYPTO_dy∆ock
, (°), (vÆ), (i))

	)

662 
	#sk_CRYPTO_dy∆ock_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
CRYPTO_dy∆ock
, (°), (cmp))

	)

663 
	#sk_CRYPTO_dy∆ock_dup
(
°
Ë
	`SKM_sk_dup
(
CRYPTO_dy∆ock
, st)

	)

664 
	#sk_CRYPTO_dy∆ock_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
CRYPTO_dy∆ock
, (°), (‰ì_func))

	)

665 
	#sk_CRYPTO_dy∆ock_shi·
(
°
Ë
	`SKM_sk_shi·
(
CRYPTO_dy∆ock
, (°))

	)

666 
	#sk_CRYPTO_dy∆ock_p›
(
°
Ë
	`SKM_sk_p›
(
CRYPTO_dy∆ock
, (°))

	)

667 
	#sk_CRYPTO_dy∆ock_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
CRYPTO_dy∆ock
, (°))

	)

668 
	#sk_CRYPTO_dy∆ock_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
CRYPTO_dy∆ock
, (°))

	)

670 
	#sk_DIST_POINT_√w
(
cmp
Ë
	`SKM_sk_√w
(
DIST_POINT
, (cmp))

	)

671 
	#sk_DIST_POINT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
DIST_POINT
)

	)

672 
	#sk_DIST_POINT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
DIST_POINT
, (°))

	)

673 
	#sk_DIST_POINT_num
(
°
Ë
	`SKM_sk_num
(
DIST_POINT
, (°))

	)

674 
	#sk_DIST_POINT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
DIST_POINT
, (°), (i))

	)

675 
	#sk_DIST_POINT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
DIST_POINT
, (°), (i), (vÆ))

	)

676 
	#sk_DIST_POINT_zîo
(
°
Ë
	`SKM_sk_zîo
(
DIST_POINT
, (°))

	)

677 
	#sk_DIST_POINT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
DIST_POINT
, (°), (vÆ))

	)

678 
	#sk_DIST_POINT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
DIST_POINT
, (°), (vÆ))

	)

679 
	#sk_DIST_POINT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
DIST_POINT
, (°), (vÆ))

	)

680 
	#sk_DIST_POINT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
DIST_POINT
, (°), (vÆ))

	)

681 
	#sk_DIST_POINT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
DIST_POINT
, (°), (i))

	)

682 
	#sk_DIST_POINT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
DIST_POINT
, (°), (±r))

	)

683 
	#sk_DIST_POINT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
DIST_POINT
, (°), (vÆ), (i))

	)

684 
	#sk_DIST_POINT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
DIST_POINT
, (°), (cmp))

	)

685 
	#sk_DIST_POINT_dup
(
°
Ë
	`SKM_sk_dup
(
DIST_POINT
, st)

	)

686 
	#sk_DIST_POINT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
DIST_POINT
, (°), (‰ì_func))

	)

687 
	#sk_DIST_POINT_shi·
(
°
Ë
	`SKM_sk_shi·
(
DIST_POINT
, (°))

	)

688 
	#sk_DIST_POINT_p›
(
°
Ë
	`SKM_sk_p›
(
DIST_POINT
, (°))

	)

689 
	#sk_DIST_POINT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
DIST_POINT
, (°))

	)

690 
	#sk_DIST_POINT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
DIST_POINT
, (°))

	)

692 
	#sk_ENGINE_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE
, (cmp))

	)

693 
	#sk_ENGINE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE
)

	)

694 
	#sk_ENGINE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE
, (°))

	)

695 
	#sk_ENGINE_num
(
°
Ë
	`SKM_sk_num
(
ENGINE
, (°))

	)

696 
	#sk_ENGINE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE
, (°), (i))

	)

697 
	#sk_ENGINE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE
, (°), (i), (vÆ))

	)

698 
	#sk_ENGINE_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE
, (°))

	)

699 
	#sk_ENGINE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE
, (°), (vÆ))

	)

700 
	#sk_ENGINE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE
, (°), (vÆ))

	)

701 
	#sk_ENGINE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE
, (°), (vÆ))

	)

702 
	#sk_ENGINE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE
, (°), (vÆ))

	)

703 
	#sk_ENGINE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE
, (°), (i))

	)

704 
	#sk_ENGINE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE
, (°), (±r))

	)

705 
	#sk_ENGINE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE
, (°), (vÆ), (i))

	)

706 
	#sk_ENGINE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE
, (°), (cmp))

	)

707 
	#sk_ENGINE_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE
, st)

	)

708 
	#sk_ENGINE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE
, (°), (‰ì_func))

	)

709 
	#sk_ENGINE_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE
, (°))

	)

710 
	#sk_ENGINE_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE
, (°))

	)

711 
	#sk_ENGINE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE
, (°))

	)

712 
	#sk_ENGINE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE
, (°))

	)

714 
	#sk_ENGINE_CLEANUP_ITEM_√w
(
cmp
Ë
	`SKM_sk_√w
(
ENGINE_CLEANUP_ITEM
, (cmp))

	)

715 
	#sk_ENGINE_CLEANUP_ITEM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ENGINE_CLEANUP_ITEM
)

	)

716 
	#sk_ENGINE_CLEANUP_ITEM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ENGINE_CLEANUP_ITEM
, (°))

	)

717 
	#sk_ENGINE_CLEANUP_ITEM_num
(
°
Ë
	`SKM_sk_num
(
ENGINE_CLEANUP_ITEM
, (°))

	)

718 
	#sk_ENGINE_CLEANUP_ITEM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

719 
	#sk_ENGINE_CLEANUP_ITEM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ENGINE_CLEANUP_ITEM
, (°), (i), (vÆ))

	)

720 
	#sk_ENGINE_CLEANUP_ITEM_zîo
(
°
Ë
	`SKM_sk_zîo
(
ENGINE_CLEANUP_ITEM
, (°))

	)

721 
	#sk_ENGINE_CLEANUP_ITEM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

722 
	#sk_ENGINE_CLEANUP_ITEM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

723 
	#sk_ENGINE_CLEANUP_ITEM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

724 
	#sk_ENGINE_CLEANUP_ITEM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ))

	)

725 
	#sk_ENGINE_CLEANUP_ITEM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ENGINE_CLEANUP_ITEM
, (°), (i))

	)

726 
	#sk_ENGINE_CLEANUP_ITEM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ENGINE_CLEANUP_ITEM
, (°), (±r))

	)

727 
	#sk_ENGINE_CLEANUP_ITEM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ENGINE_CLEANUP_ITEM
, (°), (vÆ), (i))

	)

728 
	#sk_ENGINE_CLEANUP_ITEM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ENGINE_CLEANUP_ITEM
, (°), (cmp))

	)

729 
	#sk_ENGINE_CLEANUP_ITEM_dup
(
°
Ë
	`SKM_sk_dup
(
ENGINE_CLEANUP_ITEM
, st)

	)

730 
	#sk_ENGINE_CLEANUP_ITEM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ENGINE_CLEANUP_ITEM
, (°), (‰ì_func))

	)

731 
	#sk_ENGINE_CLEANUP_ITEM_shi·
(
°
Ë
	`SKM_sk_shi·
(
ENGINE_CLEANUP_ITEM
, (°))

	)

732 
	#sk_ENGINE_CLEANUP_ITEM_p›
(
°
Ë
	`SKM_sk_p›
(
ENGINE_CLEANUP_ITEM
, (°))

	)

733 
	#sk_ENGINE_CLEANUP_ITEM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ENGINE_CLEANUP_ITEM
, (°))

	)

734 
	#sk_ENGINE_CLEANUP_ITEM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ENGINE_CLEANUP_ITEM
, (°))

	)

736 
	#sk_ESS_CERT_ID_√w
(
cmp
Ë
	`SKM_sk_√w
(
ESS_CERT_ID
, (cmp))

	)

737 
	#sk_ESS_CERT_ID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
ESS_CERT_ID
)

	)

738 
	#sk_ESS_CERT_ID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
ESS_CERT_ID
, (°))

	)

739 
	#sk_ESS_CERT_ID_num
(
°
Ë
	`SKM_sk_num
(
ESS_CERT_ID
, (°))

	)

740 
	#sk_ESS_CERT_ID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
ESS_CERT_ID
, (°), (i))

	)

741 
	#sk_ESS_CERT_ID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
ESS_CERT_ID
, (°), (i), (vÆ))

	)

742 
	#sk_ESS_CERT_ID_zîo
(
°
Ë
	`SKM_sk_zîo
(
ESS_CERT_ID
, (°))

	)

743 
	#sk_ESS_CERT_ID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
ESS_CERT_ID
, (°), (vÆ))

	)

744 
	#sk_ESS_CERT_ID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
ESS_CERT_ID
, (°), (vÆ))

	)

745 
	#sk_ESS_CERT_ID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
ESS_CERT_ID
, (°), (vÆ))

	)

746 
	#sk_ESS_CERT_ID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
ESS_CERT_ID
, (°), (vÆ))

	)

747 
	#sk_ESS_CERT_ID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
ESS_CERT_ID
, (°), (i))

	)

748 
	#sk_ESS_CERT_ID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
ESS_CERT_ID
, (°), (±r))

	)

749 
	#sk_ESS_CERT_ID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
ESS_CERT_ID
, (°), (vÆ), (i))

	)

750 
	#sk_ESS_CERT_ID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
ESS_CERT_ID
, (°), (cmp))

	)

751 
	#sk_ESS_CERT_ID_dup
(
°
Ë
	`SKM_sk_dup
(
ESS_CERT_ID
, st)

	)

752 
	#sk_ESS_CERT_ID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
ESS_CERT_ID
, (°), (‰ì_func))

	)

753 
	#sk_ESS_CERT_ID_shi·
(
°
Ë
	`SKM_sk_shi·
(
ESS_CERT_ID
, (°))

	)

754 
	#sk_ESS_CERT_ID_p›
(
°
Ë
	`SKM_sk_p›
(
ESS_CERT_ID
, (°))

	)

755 
	#sk_ESS_CERT_ID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
ESS_CERT_ID
, (°))

	)

756 
	#sk_ESS_CERT_ID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
ESS_CERT_ID
, (°))

	)

758 
	#sk_EVP_MD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_MD
, (cmp))

	)

759 
	#sk_EVP_MD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_MD
)

	)

760 
	#sk_EVP_MD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_MD
, (°))

	)

761 
	#sk_EVP_MD_num
(
°
Ë
	`SKM_sk_num
(
EVP_MD
, (°))

	)

762 
	#sk_EVP_MD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_MD
, (°), (i))

	)

763 
	#sk_EVP_MD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_MD
, (°), (i), (vÆ))

	)

764 
	#sk_EVP_MD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_MD
, (°))

	)

765 
	#sk_EVP_MD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_MD
, (°), (vÆ))

	)

766 
	#sk_EVP_MD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_MD
, (°), (vÆ))

	)

767 
	#sk_EVP_MD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_MD
, (°), (vÆ))

	)

768 
	#sk_EVP_MD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_MD
, (°), (vÆ))

	)

769 
	#sk_EVP_MD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_MD
, (°), (i))

	)

770 
	#sk_EVP_MD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_MD
, (°), (±r))

	)

771 
	#sk_EVP_MD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_MD
, (°), (vÆ), (i))

	)

772 
	#sk_EVP_MD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_MD
, (°), (cmp))

	)

773 
	#sk_EVP_MD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_MD
, st)

	)

774 
	#sk_EVP_MD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_MD
, (°), (‰ì_func))

	)

775 
	#sk_EVP_MD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_MD
, (°))

	)

776 
	#sk_EVP_MD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_MD
, (°))

	)

777 
	#sk_EVP_MD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_MD
, (°))

	)

778 
	#sk_EVP_MD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_MD
, (°))

	)

780 
	#sk_EVP_PBE_CTL_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PBE_CTL
, (cmp))

	)

781 
	#sk_EVP_PBE_CTL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PBE_CTL
)

	)

782 
	#sk_EVP_PBE_CTL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PBE_CTL
, (°))

	)

783 
	#sk_EVP_PBE_CTL_num
(
°
Ë
	`SKM_sk_num
(
EVP_PBE_CTL
, (°))

	)

784 
	#sk_EVP_PBE_CTL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PBE_CTL
, (°), (i))

	)

785 
	#sk_EVP_PBE_CTL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PBE_CTL
, (°), (i), (vÆ))

	)

786 
	#sk_EVP_PBE_CTL_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PBE_CTL
, (°))

	)

787 
	#sk_EVP_PBE_CTL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PBE_CTL
, (°), (vÆ))

	)

788 
	#sk_EVP_PBE_CTL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PBE_CTL
, (°), (vÆ))

	)

789 
	#sk_EVP_PBE_CTL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PBE_CTL
, (°), (vÆ))

	)

790 
	#sk_EVP_PBE_CTL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PBE_CTL
, (°), (vÆ))

	)

791 
	#sk_EVP_PBE_CTL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PBE_CTL
, (°), (i))

	)

792 
	#sk_EVP_PBE_CTL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PBE_CTL
, (°), (±r))

	)

793 
	#sk_EVP_PBE_CTL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PBE_CTL
, (°), (vÆ), (i))

	)

794 
	#sk_EVP_PBE_CTL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PBE_CTL
, (°), (cmp))

	)

795 
	#sk_EVP_PBE_CTL_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PBE_CTL
, st)

	)

796 
	#sk_EVP_PBE_CTL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PBE_CTL
, (°), (‰ì_func))

	)

797 
	#sk_EVP_PBE_CTL_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PBE_CTL
, (°))

	)

798 
	#sk_EVP_PBE_CTL_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PBE_CTL
, (°))

	)

799 
	#sk_EVP_PBE_CTL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PBE_CTL
, (°))

	)

800 
	#sk_EVP_PBE_CTL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PBE_CTL
, (°))

	)

802 
	#sk_EVP_PKEY_ASN1_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_ASN1_METHOD
, (cmp))

	)

803 
	#sk_EVP_PKEY_ASN1_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_ASN1_METHOD
)

	)

804 
	#sk_EVP_PKEY_ASN1_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

805 
	#sk_EVP_PKEY_ASN1_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

806 
	#sk_EVP_PKEY_ASN1_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

807 
	#sk_EVP_PKEY_ASN1_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_ASN1_METHOD
, (°), (i), (vÆ))

	)

808 
	#sk_EVP_PKEY_ASN1_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

809 
	#sk_EVP_PKEY_ASN1_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

810 
	#sk_EVP_PKEY_ASN1_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

811 
	#sk_EVP_PKEY_ASN1_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

812 
	#sk_EVP_PKEY_ASN1_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ))

	)

813 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_ASN1_METHOD
, (°), (i))

	)

814 
	#sk_EVP_PKEY_ASN1_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_ASN1_METHOD
, (°), (±r))

	)

815 
	#sk_EVP_PKEY_ASN1_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_ASN1_METHOD
, (°), (vÆ), (i))

	)

816 
	#sk_EVP_PKEY_ASN1_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_ASN1_METHOD
, (°), (cmp))

	)

817 
	#sk_EVP_PKEY_ASN1_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_ASN1_METHOD
, st)

	)

818 
	#sk_EVP_PKEY_ASN1_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_ASN1_METHOD
, (°), (‰ì_func))

	)

819 
	#sk_EVP_PKEY_ASN1_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

820 
	#sk_EVP_PKEY_ASN1_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

821 
	#sk_EVP_PKEY_ASN1_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

822 
	#sk_EVP_PKEY_ASN1_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_ASN1_METHOD
, (°))

	)

824 
	#sk_EVP_PKEY_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
EVP_PKEY_METHOD
, (cmp))

	)

825 
	#sk_EVP_PKEY_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
EVP_PKEY_METHOD
)

	)

826 
	#sk_EVP_PKEY_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
EVP_PKEY_METHOD
, (°))

	)

827 
	#sk_EVP_PKEY_METHOD_num
(
°
Ë
	`SKM_sk_num
(
EVP_PKEY_METHOD
, (°))

	)

828 
	#sk_EVP_PKEY_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
EVP_PKEY_METHOD
, (°), (i))

	)

829 
	#sk_EVP_PKEY_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
EVP_PKEY_METHOD
, (°), (i), (vÆ))

	)

830 
	#sk_EVP_PKEY_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
EVP_PKEY_METHOD
, (°))

	)

831 
	#sk_EVP_PKEY_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

832 
	#sk_EVP_PKEY_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

833 
	#sk_EVP_PKEY_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

834 
	#sk_EVP_PKEY_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
EVP_PKEY_METHOD
, (°), (vÆ))

	)

835 
	#sk_EVP_PKEY_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
EVP_PKEY_METHOD
, (°), (i))

	)

836 
	#sk_EVP_PKEY_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
EVP_PKEY_METHOD
, (°), (±r))

	)

837 
	#sk_EVP_PKEY_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
EVP_PKEY_METHOD
, (°), (vÆ), (i))

	)

838 
	#sk_EVP_PKEY_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
EVP_PKEY_METHOD
, (°), (cmp))

	)

839 
	#sk_EVP_PKEY_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
EVP_PKEY_METHOD
, st)

	)

840 
	#sk_EVP_PKEY_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
EVP_PKEY_METHOD
, (°), (‰ì_func))

	)

841 
	#sk_EVP_PKEY_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
EVP_PKEY_METHOD
, (°))

	)

842 
	#sk_EVP_PKEY_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
EVP_PKEY_METHOD
, (°))

	)

843 
	#sk_EVP_PKEY_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
EVP_PKEY_METHOD
, (°))

	)

844 
	#sk_EVP_PKEY_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
EVP_PKEY_METHOD
, (°))

	)

846 
	#sk_GENERAL_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAME
, (cmp))

	)

847 
	#sk_GENERAL_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAME
)

	)

848 
	#sk_GENERAL_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAME
, (°))

	)

849 
	#sk_GENERAL_NAME_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAME
, (°))

	)

850 
	#sk_GENERAL_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAME
, (°), (i))

	)

851 
	#sk_GENERAL_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAME
, (°), (i), (vÆ))

	)

852 
	#sk_GENERAL_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAME
, (°))

	)

853 
	#sk_GENERAL_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAME
, (°), (vÆ))

	)

854 
	#sk_GENERAL_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAME
, (°), (vÆ))

	)

855 
	#sk_GENERAL_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAME
, (°), (vÆ))

	)

856 
	#sk_GENERAL_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAME
, (°), (vÆ))

	)

857 
	#sk_GENERAL_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAME
, (°), (i))

	)

858 
	#sk_GENERAL_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAME
, (°), (±r))

	)

859 
	#sk_GENERAL_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAME
, (°), (vÆ), (i))

	)

860 
	#sk_GENERAL_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAME
, (°), (cmp))

	)

861 
	#sk_GENERAL_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAME
, st)

	)

862 
	#sk_GENERAL_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAME
, (°), (‰ì_func))

	)

863 
	#sk_GENERAL_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAME
, (°))

	)

864 
	#sk_GENERAL_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAME
, (°))

	)

865 
	#sk_GENERAL_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAME
, (°))

	)

866 
	#sk_GENERAL_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAME
, (°))

	)

868 
	#sk_GENERAL_NAMES_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_NAMES
, (cmp))

	)

869 
	#sk_GENERAL_NAMES_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_NAMES
)

	)

870 
	#sk_GENERAL_NAMES_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_NAMES
, (°))

	)

871 
	#sk_GENERAL_NAMES_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_NAMES
, (°))

	)

872 
	#sk_GENERAL_NAMES_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_NAMES
, (°), (i))

	)

873 
	#sk_GENERAL_NAMES_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_NAMES
, (°), (i), (vÆ))

	)

874 
	#sk_GENERAL_NAMES_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_NAMES
, (°))

	)

875 
	#sk_GENERAL_NAMES_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_NAMES
, (°), (vÆ))

	)

876 
	#sk_GENERAL_NAMES_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_NAMES
, (°), (vÆ))

	)

877 
	#sk_GENERAL_NAMES_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_NAMES
, (°), (vÆ))

	)

878 
	#sk_GENERAL_NAMES_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_NAMES
, (°), (vÆ))

	)

879 
	#sk_GENERAL_NAMES_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_NAMES
, (°), (i))

	)

880 
	#sk_GENERAL_NAMES_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_NAMES
, (°), (±r))

	)

881 
	#sk_GENERAL_NAMES_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_NAMES
, (°), (vÆ), (i))

	)

882 
	#sk_GENERAL_NAMES_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_NAMES
, (°), (cmp))

	)

883 
	#sk_GENERAL_NAMES_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_NAMES
, st)

	)

884 
	#sk_GENERAL_NAMES_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_NAMES
, (°), (‰ì_func))

	)

885 
	#sk_GENERAL_NAMES_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_NAMES
, (°))

	)

886 
	#sk_GENERAL_NAMES_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_NAMES
, (°))

	)

887 
	#sk_GENERAL_NAMES_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_NAMES
, (°))

	)

888 
	#sk_GENERAL_NAMES_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_NAMES
, (°))

	)

890 
	#sk_GENERAL_SUBTREE_√w
(
cmp
Ë
	`SKM_sk_√w
(
GENERAL_SUBTREE
, (cmp))

	)

891 
	#sk_GENERAL_SUBTREE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
GENERAL_SUBTREE
)

	)

892 
	#sk_GENERAL_SUBTREE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
GENERAL_SUBTREE
, (°))

	)

893 
	#sk_GENERAL_SUBTREE_num
(
°
Ë
	`SKM_sk_num
(
GENERAL_SUBTREE
, (°))

	)

894 
	#sk_GENERAL_SUBTREE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
GENERAL_SUBTREE
, (°), (i))

	)

895 
	#sk_GENERAL_SUBTREE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
GENERAL_SUBTREE
, (°), (i), (vÆ))

	)

896 
	#sk_GENERAL_SUBTREE_zîo
(
°
Ë
	`SKM_sk_zîo
(
GENERAL_SUBTREE
, (°))

	)

897 
	#sk_GENERAL_SUBTREE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

898 
	#sk_GENERAL_SUBTREE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

899 
	#sk_GENERAL_SUBTREE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

900 
	#sk_GENERAL_SUBTREE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
GENERAL_SUBTREE
, (°), (vÆ))

	)

901 
	#sk_GENERAL_SUBTREE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
GENERAL_SUBTREE
, (°), (i))

	)

902 
	#sk_GENERAL_SUBTREE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
GENERAL_SUBTREE
, (°), (±r))

	)

903 
	#sk_GENERAL_SUBTREE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
GENERAL_SUBTREE
, (°), (vÆ), (i))

	)

904 
	#sk_GENERAL_SUBTREE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
GENERAL_SUBTREE
, (°), (cmp))

	)

905 
	#sk_GENERAL_SUBTREE_dup
(
°
Ë
	`SKM_sk_dup
(
GENERAL_SUBTREE
, st)

	)

906 
	#sk_GENERAL_SUBTREE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
GENERAL_SUBTREE
, (°), (‰ì_func))

	)

907 
	#sk_GENERAL_SUBTREE_shi·
(
°
Ë
	`SKM_sk_shi·
(
GENERAL_SUBTREE
, (°))

	)

908 
	#sk_GENERAL_SUBTREE_p›
(
°
Ë
	`SKM_sk_p›
(
GENERAL_SUBTREE
, (°))

	)

909 
	#sk_GENERAL_SUBTREE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
GENERAL_SUBTREE
, (°))

	)

910 
	#sk_GENERAL_SUBTREE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
GENERAL_SUBTREE
, (°))

	)

912 
	#sk_IPAddªssFamûy_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssFamûy
, (cmp))

	)

913 
	#sk_IPAddªssFamûy_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssFamûy
)

	)

914 
	#sk_IPAddªssFamûy_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssFamûy
, (°))

	)

915 
	#sk_IPAddªssFamûy_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssFamûy
, (°))

	)

916 
	#sk_IPAddªssFamûy_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssFamûy
, (°), (i))

	)

917 
	#sk_IPAddªssFamûy_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssFamûy
, (°), (i), (vÆ))

	)

918 
	#sk_IPAddªssFamûy_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssFamûy
, (°))

	)

919 
	#sk_IPAddªssFamûy_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssFamûy
, (°), (vÆ))

	)

920 
	#sk_IPAddªssFamûy_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssFamûy
, (°), (vÆ))

	)

921 
	#sk_IPAddªssFamûy_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssFamûy
, (°), (vÆ))

	)

922 
	#sk_IPAddªssFamûy_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssFamûy
, (°), (vÆ))

	)

923 
	#sk_IPAddªssFamûy_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssFamûy
, (°), (i))

	)

924 
	#sk_IPAddªssFamûy_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssFamûy
, (°), (±r))

	)

925 
	#sk_IPAddªssFamûy_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssFamûy
, (°), (vÆ), (i))

	)

926 
	#sk_IPAddªssFamûy_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssFamûy
, (°), (cmp))

	)

927 
	#sk_IPAddªssFamûy_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssFamûy
, st)

	)

928 
	#sk_IPAddªssFamûy_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssFamûy
, (°), (‰ì_func))

	)

929 
	#sk_IPAddªssFamûy_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssFamûy
, (°))

	)

930 
	#sk_IPAddªssFamûy_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssFamûy
, (°))

	)

931 
	#sk_IPAddªssFamûy_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssFamûy
, (°))

	)

932 
	#sk_IPAddªssFamûy_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssFamûy
, (°))

	)

934 
	#sk_IPAddªssOrR™ge_√w
(
cmp
Ë
	`SKM_sk_√w
(
IPAddªssOrR™ge
, (cmp))

	)

935 
	#sk_IPAddªssOrR™ge_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
IPAddªssOrR™ge
)

	)

936 
	#sk_IPAddªssOrR™ge_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
IPAddªssOrR™ge
, (°))

	)

937 
	#sk_IPAddªssOrR™ge_num
(
°
Ë
	`SKM_sk_num
(
IPAddªssOrR™ge
, (°))

	)

938 
	#sk_IPAddªssOrR™ge_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
IPAddªssOrR™ge
, (°), (i))

	)

939 
	#sk_IPAddªssOrR™ge_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
IPAddªssOrR™ge
, (°), (i), (vÆ))

	)

940 
	#sk_IPAddªssOrR™ge_zîo
(
°
Ë
	`SKM_sk_zîo
(
IPAddªssOrR™ge
, (°))

	)

941 
	#sk_IPAddªssOrR™ge_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

942 
	#sk_IPAddªssOrR™ge_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

943 
	#sk_IPAddªssOrR™ge_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

944 
	#sk_IPAddªssOrR™ge_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
IPAddªssOrR™ge
, (°), (vÆ))

	)

945 
	#sk_IPAddªssOrR™ge_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
IPAddªssOrR™ge
, (°), (i))

	)

946 
	#sk_IPAddªssOrR™ge_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
IPAddªssOrR™ge
, (°), (±r))

	)

947 
	#sk_IPAddªssOrR™ge_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
IPAddªssOrR™ge
, (°), (vÆ), (i))

	)

948 
	#sk_IPAddªssOrR™ge_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
IPAddªssOrR™ge
, (°), (cmp))

	)

949 
	#sk_IPAddªssOrR™ge_dup
(
°
Ë
	`SKM_sk_dup
(
IPAddªssOrR™ge
, st)

	)

950 
	#sk_IPAddªssOrR™ge_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
IPAddªssOrR™ge
, (°), (‰ì_func))

	)

951 
	#sk_IPAddªssOrR™ge_shi·
(
°
Ë
	`SKM_sk_shi·
(
IPAddªssOrR™ge
, (°))

	)

952 
	#sk_IPAddªssOrR™ge_p›
(
°
Ë
	`SKM_sk_p›
(
IPAddªssOrR™ge
, (°))

	)

953 
	#sk_IPAddªssOrR™ge_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
IPAddªssOrR™ge
, (°))

	)

954 
	#sk_IPAddªssOrR™ge_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
IPAddªssOrR™ge
, (°))

	)

956 
	#sk_KRB5_APREQBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_APREQBODY
, (cmp))

	)

957 
	#sk_KRB5_APREQBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_APREQBODY
)

	)

958 
	#sk_KRB5_APREQBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_APREQBODY
, (°))

	)

959 
	#sk_KRB5_APREQBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_APREQBODY
, (°))

	)

960 
	#sk_KRB5_APREQBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_APREQBODY
, (°), (i))

	)

961 
	#sk_KRB5_APREQBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_APREQBODY
, (°), (i), (vÆ))

	)

962 
	#sk_KRB5_APREQBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_APREQBODY
, (°))

	)

963 
	#sk_KRB5_APREQBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_APREQBODY
, (°), (vÆ))

	)

964 
	#sk_KRB5_APREQBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_APREQBODY
, (°), (vÆ))

	)

965 
	#sk_KRB5_APREQBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_APREQBODY
, (°), (vÆ))

	)

966 
	#sk_KRB5_APREQBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_APREQBODY
, (°), (vÆ))

	)

967 
	#sk_KRB5_APREQBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_APREQBODY
, (°), (i))

	)

968 
	#sk_KRB5_APREQBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_APREQBODY
, (°), (±r))

	)

969 
	#sk_KRB5_APREQBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_APREQBODY
, (°), (vÆ), (i))

	)

970 
	#sk_KRB5_APREQBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_APREQBODY
, (°), (cmp))

	)

971 
	#sk_KRB5_APREQBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_APREQBODY
, st)

	)

972 
	#sk_KRB5_APREQBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_APREQBODY
, (°), (‰ì_func))

	)

973 
	#sk_KRB5_APREQBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_APREQBODY
, (°))

	)

974 
	#sk_KRB5_APREQBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_APREQBODY
, (°))

	)

975 
	#sk_KRB5_APREQBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_APREQBODY
, (°))

	)

976 
	#sk_KRB5_APREQBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_APREQBODY
, (°))

	)

978 
	#sk_KRB5_AUTHDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHDATA
, (cmp))

	)

979 
	#sk_KRB5_AUTHDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHDATA
)

	)

980 
	#sk_KRB5_AUTHDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHDATA
, (°))

	)

981 
	#sk_KRB5_AUTHDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHDATA
, (°))

	)

982 
	#sk_KRB5_AUTHDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHDATA
, (°), (i))

	)

983 
	#sk_KRB5_AUTHDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHDATA
, (°), (i), (vÆ))

	)

984 
	#sk_KRB5_AUTHDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHDATA
, (°))

	)

985 
	#sk_KRB5_AUTHDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

986 
	#sk_KRB5_AUTHDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

987 
	#sk_KRB5_AUTHDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

988 
	#sk_KRB5_AUTHDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHDATA
, (°), (vÆ))

	)

989 
	#sk_KRB5_AUTHDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHDATA
, (°), (i))

	)

990 
	#sk_KRB5_AUTHDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHDATA
, (°), (±r))

	)

991 
	#sk_KRB5_AUTHDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHDATA
, (°), (vÆ), (i))

	)

992 
	#sk_KRB5_AUTHDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHDATA
, (°), (cmp))

	)

993 
	#sk_KRB5_AUTHDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHDATA
, st)

	)

994 
	#sk_KRB5_AUTHDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHDATA
, (°), (‰ì_func))

	)

995 
	#sk_KRB5_AUTHDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHDATA
, (°))

	)

996 
	#sk_KRB5_AUTHDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHDATA
, (°))

	)

997 
	#sk_KRB5_AUTHDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHDATA
, (°))

	)

998 
	#sk_KRB5_AUTHDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHDATA
, (°))

	)

1000 
	#sk_KRB5_AUTHENTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_AUTHENTBODY
, (cmp))

	)

1001 
	#sk_KRB5_AUTHENTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_AUTHENTBODY
)

	)

1002 
	#sk_KRB5_AUTHENTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_AUTHENTBODY
, (°))

	)

1003 
	#sk_KRB5_AUTHENTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_AUTHENTBODY
, (°))

	)

1004 
	#sk_KRB5_AUTHENTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1005 
	#sk_KRB5_AUTHENTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_AUTHENTBODY
, (°), (i), (vÆ))

	)

1006 
	#sk_KRB5_AUTHENTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_AUTHENTBODY
, (°))

	)

1007 
	#sk_KRB5_AUTHENTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1008 
	#sk_KRB5_AUTHENTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1009 
	#sk_KRB5_AUTHENTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1010 
	#sk_KRB5_AUTHENTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_AUTHENTBODY
, (°), (vÆ))

	)

1011 
	#sk_KRB5_AUTHENTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_AUTHENTBODY
, (°), (i))

	)

1012 
	#sk_KRB5_AUTHENTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_AUTHENTBODY
, (°), (±r))

	)

1013 
	#sk_KRB5_AUTHENTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_AUTHENTBODY
, (°), (vÆ), (i))

	)

1014 
	#sk_KRB5_AUTHENTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_AUTHENTBODY
, (°), (cmp))

	)

1015 
	#sk_KRB5_AUTHENTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_AUTHENTBODY
, st)

	)

1016 
	#sk_KRB5_AUTHENTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_AUTHENTBODY
, (°), (‰ì_func))

	)

1017 
	#sk_KRB5_AUTHENTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_AUTHENTBODY
, (°))

	)

1018 
	#sk_KRB5_AUTHENTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_AUTHENTBODY
, (°))

	)

1019 
	#sk_KRB5_AUTHENTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_AUTHENTBODY
, (°))

	)

1020 
	#sk_KRB5_AUTHENTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_AUTHENTBODY
, (°))

	)

1022 
	#sk_KRB5_CHECKSUM_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_CHECKSUM
, (cmp))

	)

1023 
	#sk_KRB5_CHECKSUM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_CHECKSUM
)

	)

1024 
	#sk_KRB5_CHECKSUM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_CHECKSUM
, (°))

	)

1025 
	#sk_KRB5_CHECKSUM_num
(
°
Ë
	`SKM_sk_num
(
KRB5_CHECKSUM
, (°))

	)

1026 
	#sk_KRB5_CHECKSUM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_CHECKSUM
, (°), (i))

	)

1027 
	#sk_KRB5_CHECKSUM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_CHECKSUM
, (°), (i), (vÆ))

	)

1028 
	#sk_KRB5_CHECKSUM_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_CHECKSUM
, (°))

	)

1029 
	#sk_KRB5_CHECKSUM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1030 
	#sk_KRB5_CHECKSUM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1031 
	#sk_KRB5_CHECKSUM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1032 
	#sk_KRB5_CHECKSUM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_CHECKSUM
, (°), (vÆ))

	)

1033 
	#sk_KRB5_CHECKSUM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_CHECKSUM
, (°), (i))

	)

1034 
	#sk_KRB5_CHECKSUM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_CHECKSUM
, (°), (±r))

	)

1035 
	#sk_KRB5_CHECKSUM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_CHECKSUM
, (°), (vÆ), (i))

	)

1036 
	#sk_KRB5_CHECKSUM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_CHECKSUM
, (°), (cmp))

	)

1037 
	#sk_KRB5_CHECKSUM_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_CHECKSUM
, st)

	)

1038 
	#sk_KRB5_CHECKSUM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_CHECKSUM
, (°), (‰ì_func))

	)

1039 
	#sk_KRB5_CHECKSUM_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_CHECKSUM
, (°))

	)

1040 
	#sk_KRB5_CHECKSUM_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_CHECKSUM
, (°))

	)

1041 
	#sk_KRB5_CHECKSUM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_CHECKSUM
, (°))

	)

1042 
	#sk_KRB5_CHECKSUM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_CHECKSUM
, (°))

	)

1044 
	#sk_KRB5_ENCDATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCDATA
, (cmp))

	)

1045 
	#sk_KRB5_ENCDATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCDATA
)

	)

1046 
	#sk_KRB5_ENCDATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCDATA
, (°))

	)

1047 
	#sk_KRB5_ENCDATA_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCDATA
, (°))

	)

1048 
	#sk_KRB5_ENCDATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCDATA
, (°), (i))

	)

1049 
	#sk_KRB5_ENCDATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCDATA
, (°), (i), (vÆ))

	)

1050 
	#sk_KRB5_ENCDATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCDATA
, (°))

	)

1051 
	#sk_KRB5_ENCDATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1052 
	#sk_KRB5_ENCDATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1053 
	#sk_KRB5_ENCDATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1054 
	#sk_KRB5_ENCDATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCDATA
, (°), (vÆ))

	)

1055 
	#sk_KRB5_ENCDATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCDATA
, (°), (i))

	)

1056 
	#sk_KRB5_ENCDATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCDATA
, (°), (±r))

	)

1057 
	#sk_KRB5_ENCDATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCDATA
, (°), (vÆ), (i))

	)

1058 
	#sk_KRB5_ENCDATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCDATA
, (°), (cmp))

	)

1059 
	#sk_KRB5_ENCDATA_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCDATA
, st)

	)

1060 
	#sk_KRB5_ENCDATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCDATA
, (°), (‰ì_func))

	)

1061 
	#sk_KRB5_ENCDATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCDATA
, (°))

	)

1062 
	#sk_KRB5_ENCDATA_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCDATA
, (°))

	)

1063 
	#sk_KRB5_ENCDATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCDATA
, (°))

	)

1064 
	#sk_KRB5_ENCDATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCDATA
, (°))

	)

1066 
	#sk_KRB5_ENCKEY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_ENCKEY
, (cmp))

	)

1067 
	#sk_KRB5_ENCKEY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_ENCKEY
)

	)

1068 
	#sk_KRB5_ENCKEY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_ENCKEY
, (°))

	)

1069 
	#sk_KRB5_ENCKEY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_ENCKEY
, (°))

	)

1070 
	#sk_KRB5_ENCKEY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_ENCKEY
, (°), (i))

	)

1071 
	#sk_KRB5_ENCKEY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_ENCKEY
, (°), (i), (vÆ))

	)

1072 
	#sk_KRB5_ENCKEY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_ENCKEY
, (°))

	)

1073 
	#sk_KRB5_ENCKEY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1074 
	#sk_KRB5_ENCKEY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1075 
	#sk_KRB5_ENCKEY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1076 
	#sk_KRB5_ENCKEY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_ENCKEY
, (°), (vÆ))

	)

1077 
	#sk_KRB5_ENCKEY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_ENCKEY
, (°), (i))

	)

1078 
	#sk_KRB5_ENCKEY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_ENCKEY
, (°), (±r))

	)

1079 
	#sk_KRB5_ENCKEY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_ENCKEY
, (°), (vÆ), (i))

	)

1080 
	#sk_KRB5_ENCKEY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_ENCKEY
, (°), (cmp))

	)

1081 
	#sk_KRB5_ENCKEY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_ENCKEY
, st)

	)

1082 
	#sk_KRB5_ENCKEY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_ENCKEY
, (°), (‰ì_func))

	)

1083 
	#sk_KRB5_ENCKEY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_ENCKEY
, (°))

	)

1084 
	#sk_KRB5_ENCKEY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_ENCKEY
, (°))

	)

1085 
	#sk_KRB5_ENCKEY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_ENCKEY
, (°))

	)

1086 
	#sk_KRB5_ENCKEY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_ENCKEY
, (°))

	)

1088 
	#sk_KRB5_PRINCNAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_PRINCNAME
, (cmp))

	)

1089 
	#sk_KRB5_PRINCNAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_PRINCNAME
)

	)

1090 
	#sk_KRB5_PRINCNAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_PRINCNAME
, (°))

	)

1091 
	#sk_KRB5_PRINCNAME_num
(
°
Ë
	`SKM_sk_num
(
KRB5_PRINCNAME
, (°))

	)

1092 
	#sk_KRB5_PRINCNAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_PRINCNAME
, (°), (i))

	)

1093 
	#sk_KRB5_PRINCNAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_PRINCNAME
, (°), (i), (vÆ))

	)

1094 
	#sk_KRB5_PRINCNAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_PRINCNAME
, (°))

	)

1095 
	#sk_KRB5_PRINCNAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1096 
	#sk_KRB5_PRINCNAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1097 
	#sk_KRB5_PRINCNAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1098 
	#sk_KRB5_PRINCNAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_PRINCNAME
, (°), (vÆ))

	)

1099 
	#sk_KRB5_PRINCNAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_PRINCNAME
, (°), (i))

	)

1100 
	#sk_KRB5_PRINCNAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_PRINCNAME
, (°), (±r))

	)

1101 
	#sk_KRB5_PRINCNAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_PRINCNAME
, (°), (vÆ), (i))

	)

1102 
	#sk_KRB5_PRINCNAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_PRINCNAME
, (°), (cmp))

	)

1103 
	#sk_KRB5_PRINCNAME_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_PRINCNAME
, st)

	)

1104 
	#sk_KRB5_PRINCNAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_PRINCNAME
, (°), (‰ì_func))

	)

1105 
	#sk_KRB5_PRINCNAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_PRINCNAME
, (°))

	)

1106 
	#sk_KRB5_PRINCNAME_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_PRINCNAME
, (°))

	)

1107 
	#sk_KRB5_PRINCNAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_PRINCNAME
, (°))

	)

1108 
	#sk_KRB5_PRINCNAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_PRINCNAME
, (°))

	)

1110 
	#sk_KRB5_TKTBODY_√w
(
cmp
Ë
	`SKM_sk_√w
(
KRB5_TKTBODY
, (cmp))

	)

1111 
	#sk_KRB5_TKTBODY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
KRB5_TKTBODY
)

	)

1112 
	#sk_KRB5_TKTBODY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
KRB5_TKTBODY
, (°))

	)

1113 
	#sk_KRB5_TKTBODY_num
(
°
Ë
	`SKM_sk_num
(
KRB5_TKTBODY
, (°))

	)

1114 
	#sk_KRB5_TKTBODY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
KRB5_TKTBODY
, (°), (i))

	)

1115 
	#sk_KRB5_TKTBODY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
KRB5_TKTBODY
, (°), (i), (vÆ))

	)

1116 
	#sk_KRB5_TKTBODY_zîo
(
°
Ë
	`SKM_sk_zîo
(
KRB5_TKTBODY
, (°))

	)

1117 
	#sk_KRB5_TKTBODY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1118 
	#sk_KRB5_TKTBODY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1119 
	#sk_KRB5_TKTBODY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1120 
	#sk_KRB5_TKTBODY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
KRB5_TKTBODY
, (°), (vÆ))

	)

1121 
	#sk_KRB5_TKTBODY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
KRB5_TKTBODY
, (°), (i))

	)

1122 
	#sk_KRB5_TKTBODY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
KRB5_TKTBODY
, (°), (±r))

	)

1123 
	#sk_KRB5_TKTBODY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
KRB5_TKTBODY
, (°), (vÆ), (i))

	)

1124 
	#sk_KRB5_TKTBODY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
KRB5_TKTBODY
, (°), (cmp))

	)

1125 
	#sk_KRB5_TKTBODY_dup
(
°
Ë
	`SKM_sk_dup
(
KRB5_TKTBODY
, st)

	)

1126 
	#sk_KRB5_TKTBODY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
KRB5_TKTBODY
, (°), (‰ì_func))

	)

1127 
	#sk_KRB5_TKTBODY_shi·
(
°
Ë
	`SKM_sk_shi·
(
KRB5_TKTBODY
, (°))

	)

1128 
	#sk_KRB5_TKTBODY_p›
(
°
Ë
	`SKM_sk_p›
(
KRB5_TKTBODY
, (°))

	)

1129 
	#sk_KRB5_TKTBODY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
KRB5_TKTBODY
, (°))

	)

1130 
	#sk_KRB5_TKTBODY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
KRB5_TKTBODY
, (°))

	)

1132 
	#sk_MEM_OBJECT_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
MEM_OBJECT_DATA
, (cmp))

	)

1133 
	#sk_MEM_OBJECT_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MEM_OBJECT_DATA
)

	)

1134 
	#sk_MEM_OBJECT_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MEM_OBJECT_DATA
, (°))

	)

1135 
	#sk_MEM_OBJECT_DATA_num
(
°
Ë
	`SKM_sk_num
(
MEM_OBJECT_DATA
, (°))

	)

1136 
	#sk_MEM_OBJECT_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MEM_OBJECT_DATA
, (°), (i))

	)

1137 
	#sk_MEM_OBJECT_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MEM_OBJECT_DATA
, (°), (i), (vÆ))

	)

1138 
	#sk_MEM_OBJECT_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
MEM_OBJECT_DATA
, (°))

	)

1139 
	#sk_MEM_OBJECT_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1140 
	#sk_MEM_OBJECT_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1141 
	#sk_MEM_OBJECT_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1142 
	#sk_MEM_OBJECT_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MEM_OBJECT_DATA
, (°), (vÆ))

	)

1143 
	#sk_MEM_OBJECT_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MEM_OBJECT_DATA
, (°), (i))

	)

1144 
	#sk_MEM_OBJECT_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MEM_OBJECT_DATA
, (°), (±r))

	)

1145 
	#sk_MEM_OBJECT_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MEM_OBJECT_DATA
, (°), (vÆ), (i))

	)

1146 
	#sk_MEM_OBJECT_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MEM_OBJECT_DATA
, (°), (cmp))

	)

1147 
	#sk_MEM_OBJECT_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
MEM_OBJECT_DATA
, st)

	)

1148 
	#sk_MEM_OBJECT_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MEM_OBJECT_DATA
, (°), (‰ì_func))

	)

1149 
	#sk_MEM_OBJECT_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
MEM_OBJECT_DATA
, (°))

	)

1150 
	#sk_MEM_OBJECT_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
MEM_OBJECT_DATA
, (°))

	)

1151 
	#sk_MEM_OBJECT_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MEM_OBJECT_DATA
, (°))

	)

1152 
	#sk_MEM_OBJECT_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MEM_OBJECT_DATA
, (°))

	)

1154 
	#sk_MIME_HEADER_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_HEADER
, (cmp))

	)

1155 
	#sk_MIME_HEADER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_HEADER
)

	)

1156 
	#sk_MIME_HEADER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_HEADER
, (°))

	)

1157 
	#sk_MIME_HEADER_num
(
°
Ë
	`SKM_sk_num
(
MIME_HEADER
, (°))

	)

1158 
	#sk_MIME_HEADER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_HEADER
, (°), (i))

	)

1159 
	#sk_MIME_HEADER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_HEADER
, (°), (i), (vÆ))

	)

1160 
	#sk_MIME_HEADER_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_HEADER
, (°))

	)

1161 
	#sk_MIME_HEADER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_HEADER
, (°), (vÆ))

	)

1162 
	#sk_MIME_HEADER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_HEADER
, (°), (vÆ))

	)

1163 
	#sk_MIME_HEADER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_HEADER
, (°), (vÆ))

	)

1164 
	#sk_MIME_HEADER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_HEADER
, (°), (vÆ))

	)

1165 
	#sk_MIME_HEADER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_HEADER
, (°), (i))

	)

1166 
	#sk_MIME_HEADER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_HEADER
, (°), (±r))

	)

1167 
	#sk_MIME_HEADER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_HEADER
, (°), (vÆ), (i))

	)

1168 
	#sk_MIME_HEADER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_HEADER
, (°), (cmp))

	)

1169 
	#sk_MIME_HEADER_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_HEADER
, st)

	)

1170 
	#sk_MIME_HEADER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_HEADER
, (°), (‰ì_func))

	)

1171 
	#sk_MIME_HEADER_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_HEADER
, (°))

	)

1172 
	#sk_MIME_HEADER_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_HEADER
, (°))

	)

1173 
	#sk_MIME_HEADER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_HEADER
, (°))

	)

1174 
	#sk_MIME_HEADER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_HEADER
, (°))

	)

1176 
	#sk_MIME_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
MIME_PARAM
, (cmp))

	)

1177 
	#sk_MIME_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
MIME_PARAM
)

	)

1178 
	#sk_MIME_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
MIME_PARAM
, (°))

	)

1179 
	#sk_MIME_PARAM_num
(
°
Ë
	`SKM_sk_num
(
MIME_PARAM
, (°))

	)

1180 
	#sk_MIME_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
MIME_PARAM
, (°), (i))

	)

1181 
	#sk_MIME_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
MIME_PARAM
, (°), (i), (vÆ))

	)

1182 
	#sk_MIME_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
MIME_PARAM
, (°))

	)

1183 
	#sk_MIME_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
MIME_PARAM
, (°), (vÆ))

	)

1184 
	#sk_MIME_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
MIME_PARAM
, (°), (vÆ))

	)

1185 
	#sk_MIME_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
MIME_PARAM
, (°), (vÆ))

	)

1186 
	#sk_MIME_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
MIME_PARAM
, (°), (vÆ))

	)

1187 
	#sk_MIME_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
MIME_PARAM
, (°), (i))

	)

1188 
	#sk_MIME_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
MIME_PARAM
, (°), (±r))

	)

1189 
	#sk_MIME_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
MIME_PARAM
, (°), (vÆ), (i))

	)

1190 
	#sk_MIME_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
MIME_PARAM
, (°), (cmp))

	)

1191 
	#sk_MIME_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
MIME_PARAM
, st)

	)

1192 
	#sk_MIME_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
MIME_PARAM
, (°), (‰ì_func))

	)

1193 
	#sk_MIME_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
MIME_PARAM
, (°))

	)

1194 
	#sk_MIME_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
MIME_PARAM
, (°))

	)

1195 
	#sk_MIME_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
MIME_PARAM
, (°))

	)

1196 
	#sk_MIME_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
MIME_PARAM
, (°))

	)

1198 
	#sk_NAME_FUNCS_√w
(
cmp
Ë
	`SKM_sk_√w
(
NAME_FUNCS
, (cmp))

	)

1199 
	#sk_NAME_FUNCS_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
NAME_FUNCS
)

	)

1200 
	#sk_NAME_FUNCS_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
NAME_FUNCS
, (°))

	)

1201 
	#sk_NAME_FUNCS_num
(
°
Ë
	`SKM_sk_num
(
NAME_FUNCS
, (°))

	)

1202 
	#sk_NAME_FUNCS_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
NAME_FUNCS
, (°), (i))

	)

1203 
	#sk_NAME_FUNCS_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
NAME_FUNCS
, (°), (i), (vÆ))

	)

1204 
	#sk_NAME_FUNCS_zîo
(
°
Ë
	`SKM_sk_zîo
(
NAME_FUNCS
, (°))

	)

1205 
	#sk_NAME_FUNCS_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
NAME_FUNCS
, (°), (vÆ))

	)

1206 
	#sk_NAME_FUNCS_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
NAME_FUNCS
, (°), (vÆ))

	)

1207 
	#sk_NAME_FUNCS_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
NAME_FUNCS
, (°), (vÆ))

	)

1208 
	#sk_NAME_FUNCS_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
NAME_FUNCS
, (°), (vÆ))

	)

1209 
	#sk_NAME_FUNCS_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
NAME_FUNCS
, (°), (i))

	)

1210 
	#sk_NAME_FUNCS_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
NAME_FUNCS
, (°), (±r))

	)

1211 
	#sk_NAME_FUNCS_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
NAME_FUNCS
, (°), (vÆ), (i))

	)

1212 
	#sk_NAME_FUNCS_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
NAME_FUNCS
, (°), (cmp))

	)

1213 
	#sk_NAME_FUNCS_dup
(
°
Ë
	`SKM_sk_dup
(
NAME_FUNCS
, st)

	)

1214 
	#sk_NAME_FUNCS_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
NAME_FUNCS
, (°), (‰ì_func))

	)

1215 
	#sk_NAME_FUNCS_shi·
(
°
Ë
	`SKM_sk_shi·
(
NAME_FUNCS
, (°))

	)

1216 
	#sk_NAME_FUNCS_p›
(
°
Ë
	`SKM_sk_p›
(
NAME_FUNCS
, (°))

	)

1217 
	#sk_NAME_FUNCS_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
NAME_FUNCS
, (°))

	)

1218 
	#sk_NAME_FUNCS_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
NAME_FUNCS
, (°))

	)

1220 
	#sk_OCSP_CERTID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_CERTID
, (cmp))

	)

1221 
	#sk_OCSP_CERTID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_CERTID
)

	)

1222 
	#sk_OCSP_CERTID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_CERTID
, (°))

	)

1223 
	#sk_OCSP_CERTID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_CERTID
, (°))

	)

1224 
	#sk_OCSP_CERTID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_CERTID
, (°), (i))

	)

1225 
	#sk_OCSP_CERTID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_CERTID
, (°), (i), (vÆ))

	)

1226 
	#sk_OCSP_CERTID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_CERTID
, (°))

	)

1227 
	#sk_OCSP_CERTID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_CERTID
, (°), (vÆ))

	)

1228 
	#sk_OCSP_CERTID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_CERTID
, (°), (vÆ))

	)

1229 
	#sk_OCSP_CERTID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_CERTID
, (°), (vÆ))

	)

1230 
	#sk_OCSP_CERTID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_CERTID
, (°), (vÆ))

	)

1231 
	#sk_OCSP_CERTID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_CERTID
, (°), (i))

	)

1232 
	#sk_OCSP_CERTID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_CERTID
, (°), (±r))

	)

1233 
	#sk_OCSP_CERTID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_CERTID
, (°), (vÆ), (i))

	)

1234 
	#sk_OCSP_CERTID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_CERTID
, (°), (cmp))

	)

1235 
	#sk_OCSP_CERTID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_CERTID
, st)

	)

1236 
	#sk_OCSP_CERTID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_CERTID
, (°), (‰ì_func))

	)

1237 
	#sk_OCSP_CERTID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_CERTID
, (°))

	)

1238 
	#sk_OCSP_CERTID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_CERTID
, (°))

	)

1239 
	#sk_OCSP_CERTID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_CERTID
, (°))

	)

1240 
	#sk_OCSP_CERTID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_CERTID
, (°))

	)

1242 
	#sk_OCSP_ONEREQ_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_ONEREQ
, (cmp))

	)

1243 
	#sk_OCSP_ONEREQ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_ONEREQ
)

	)

1244 
	#sk_OCSP_ONEREQ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_ONEREQ
, (°))

	)

1245 
	#sk_OCSP_ONEREQ_num
(
°
Ë
	`SKM_sk_num
(
OCSP_ONEREQ
, (°))

	)

1246 
	#sk_OCSP_ONEREQ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_ONEREQ
, (°), (i))

	)

1247 
	#sk_OCSP_ONEREQ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_ONEREQ
, (°), (i), (vÆ))

	)

1248 
	#sk_OCSP_ONEREQ_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_ONEREQ
, (°))

	)

1249 
	#sk_OCSP_ONEREQ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1250 
	#sk_OCSP_ONEREQ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1251 
	#sk_OCSP_ONEREQ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1252 
	#sk_OCSP_ONEREQ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_ONEREQ
, (°), (vÆ))

	)

1253 
	#sk_OCSP_ONEREQ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_ONEREQ
, (°), (i))

	)

1254 
	#sk_OCSP_ONEREQ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_ONEREQ
, (°), (±r))

	)

1255 
	#sk_OCSP_ONEREQ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_ONEREQ
, (°), (vÆ), (i))

	)

1256 
	#sk_OCSP_ONEREQ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_ONEREQ
, (°), (cmp))

	)

1257 
	#sk_OCSP_ONEREQ_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_ONEREQ
, st)

	)

1258 
	#sk_OCSP_ONEREQ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_ONEREQ
, (°), (‰ì_func))

	)

1259 
	#sk_OCSP_ONEREQ_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_ONEREQ
, (°))

	)

1260 
	#sk_OCSP_ONEREQ_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_ONEREQ
, (°))

	)

1261 
	#sk_OCSP_ONEREQ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_ONEREQ
, (°))

	)

1262 
	#sk_OCSP_ONEREQ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_ONEREQ
, (°))

	)

1264 
	#sk_OCSP_RESPID_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_RESPID
, (cmp))

	)

1265 
	#sk_OCSP_RESPID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_RESPID
)

	)

1266 
	#sk_OCSP_RESPID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_RESPID
, (°))

	)

1267 
	#sk_OCSP_RESPID_num
(
°
Ë
	`SKM_sk_num
(
OCSP_RESPID
, (°))

	)

1268 
	#sk_OCSP_RESPID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_RESPID
, (°), (i))

	)

1269 
	#sk_OCSP_RESPID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_RESPID
, (°), (i), (vÆ))

	)

1270 
	#sk_OCSP_RESPID_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_RESPID
, (°))

	)

1271 
	#sk_OCSP_RESPID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_RESPID
, (°), (vÆ))

	)

1272 
	#sk_OCSP_RESPID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_RESPID
, (°), (vÆ))

	)

1273 
	#sk_OCSP_RESPID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_RESPID
, (°), (vÆ))

	)

1274 
	#sk_OCSP_RESPID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_RESPID
, (°), (vÆ))

	)

1275 
	#sk_OCSP_RESPID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_RESPID
, (°), (i))

	)

1276 
	#sk_OCSP_RESPID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_RESPID
, (°), (±r))

	)

1277 
	#sk_OCSP_RESPID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_RESPID
, (°), (vÆ), (i))

	)

1278 
	#sk_OCSP_RESPID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_RESPID
, (°), (cmp))

	)

1279 
	#sk_OCSP_RESPID_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_RESPID
, st)

	)

1280 
	#sk_OCSP_RESPID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_RESPID
, (°), (‰ì_func))

	)

1281 
	#sk_OCSP_RESPID_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_RESPID
, (°))

	)

1282 
	#sk_OCSP_RESPID_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_RESPID
, (°))

	)

1283 
	#sk_OCSP_RESPID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_RESPID
, (°))

	)

1284 
	#sk_OCSP_RESPID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_RESPID
, (°))

	)

1286 
	#sk_OCSP_SINGLERESP_√w
(
cmp
Ë
	`SKM_sk_√w
(
OCSP_SINGLERESP
, (cmp))

	)

1287 
	#sk_OCSP_SINGLERESP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
OCSP_SINGLERESP
)

	)

1288 
	#sk_OCSP_SINGLERESP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OCSP_SINGLERESP
, (°))

	)

1289 
	#sk_OCSP_SINGLERESP_num
(
°
Ë
	`SKM_sk_num
(
OCSP_SINGLERESP
, (°))

	)

1290 
	#sk_OCSP_SINGLERESP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
OCSP_SINGLERESP
, (°), (i))

	)

1291 
	#sk_OCSP_SINGLERESP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
OCSP_SINGLERESP
, (°), (i), (vÆ))

	)

1292 
	#sk_OCSP_SINGLERESP_zîo
(
°
Ë
	`SKM_sk_zîo
(
OCSP_SINGLERESP
, (°))

	)

1293 
	#sk_OCSP_SINGLERESP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1294 
	#sk_OCSP_SINGLERESP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1295 
	#sk_OCSP_SINGLERESP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1296 
	#sk_OCSP_SINGLERESP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
OCSP_SINGLERESP
, (°), (vÆ))

	)

1297 
	#sk_OCSP_SINGLERESP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OCSP_SINGLERESP
, (°), (i))

	)

1298 
	#sk_OCSP_SINGLERESP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
OCSP_SINGLERESP
, (°), (±r))

	)

1299 
	#sk_OCSP_SINGLERESP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
OCSP_SINGLERESP
, (°), (vÆ), (i))

	)

1300 
	#sk_OCSP_SINGLERESP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
OCSP_SINGLERESP
, (°), (cmp))

	)

1301 
	#sk_OCSP_SINGLERESP_dup
(
°
Ë
	`SKM_sk_dup
(
OCSP_SINGLERESP
, st)

	)

1302 
	#sk_OCSP_SINGLERESP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
OCSP_SINGLERESP
, (°), (‰ì_func))

	)

1303 
	#sk_OCSP_SINGLERESP_shi·
(
°
Ë
	`SKM_sk_shi·
(
OCSP_SINGLERESP
, (°))

	)

1304 
	#sk_OCSP_SINGLERESP_p›
(
°
Ë
	`SKM_sk_p›
(
OCSP_SINGLERESP
, (°))

	)

1305 
	#sk_OCSP_SINGLERESP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OCSP_SINGLERESP
, (°))

	)

1306 
	#sk_OCSP_SINGLERESP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OCSP_SINGLERESP
, (°))

	)

1308 
	#sk_PKCS12_SAFEBAG_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS12_SAFEBAG
, (cmp))

	)

1309 
	#sk_PKCS12_SAFEBAG_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS12_SAFEBAG
)

	)

1310 
	#sk_PKCS12_SAFEBAG_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS12_SAFEBAG
, (°))

	)

1311 
	#sk_PKCS12_SAFEBAG_num
(
°
Ë
	`SKM_sk_num
(
PKCS12_SAFEBAG
, (°))

	)

1312 
	#sk_PKCS12_SAFEBAG_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS12_SAFEBAG
, (°), (i))

	)

1313 
	#sk_PKCS12_SAFEBAG_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS12_SAFEBAG
, (°), (i), (vÆ))

	)

1314 
	#sk_PKCS12_SAFEBAG_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS12_SAFEBAG
, (°))

	)

1315 
	#sk_PKCS12_SAFEBAG_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1316 
	#sk_PKCS12_SAFEBAG_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1317 
	#sk_PKCS12_SAFEBAG_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1318 
	#sk_PKCS12_SAFEBAG_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS12_SAFEBAG
, (°), (vÆ))

	)

1319 
	#sk_PKCS12_SAFEBAG_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS12_SAFEBAG
, (°), (i))

	)

1320 
	#sk_PKCS12_SAFEBAG_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS12_SAFEBAG
, (°), (±r))

	)

1321 
	#sk_PKCS12_SAFEBAG_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS12_SAFEBAG
, (°), (vÆ), (i))

	)

1322 
	#sk_PKCS12_SAFEBAG_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS12_SAFEBAG
, (°), (cmp))

	)

1323 
	#sk_PKCS12_SAFEBAG_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS12_SAFEBAG
, st)

	)

1324 
	#sk_PKCS12_SAFEBAG_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS12_SAFEBAG
, (°), (‰ì_func))

	)

1325 
	#sk_PKCS12_SAFEBAG_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS12_SAFEBAG
, (°))

	)

1326 
	#sk_PKCS12_SAFEBAG_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS12_SAFEBAG
, (°))

	)

1327 
	#sk_PKCS12_SAFEBAG_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS12_SAFEBAG
, (°))

	)

1328 
	#sk_PKCS12_SAFEBAG_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS12_SAFEBAG
, (°))

	)

1330 
	#sk_PKCS7_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7
, (cmp))

	)

1331 
	#sk_PKCS7_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7
)

	)

1332 
	#sk_PKCS7_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7
, (°))

	)

1333 
	#sk_PKCS7_num
(
°
Ë
	`SKM_sk_num
(
PKCS7
, (°))

	)

1334 
	#sk_PKCS7_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7
, (°), (i))

	)

1335 
	#sk_PKCS7_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7
, (°), (i), (vÆ))

	)

1336 
	#sk_PKCS7_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7
, (°))

	)

1337 
	#sk_PKCS7_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7
, (°), (vÆ))

	)

1338 
	#sk_PKCS7_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7
, (°), (vÆ))

	)

1339 
	#sk_PKCS7_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7
, (°), (vÆ))

	)

1340 
	#sk_PKCS7_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7
, (°), (vÆ))

	)

1341 
	#sk_PKCS7_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7
, (°), (i))

	)

1342 
	#sk_PKCS7_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7
, (°), (±r))

	)

1343 
	#sk_PKCS7_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7
, (°), (vÆ), (i))

	)

1344 
	#sk_PKCS7_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7
, (°), (cmp))

	)

1345 
	#sk_PKCS7_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7
, st)

	)

1346 
	#sk_PKCS7_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7
, (°), (‰ì_func))

	)

1347 
	#sk_PKCS7_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7
, (°))

	)

1348 
	#sk_PKCS7_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7
, (°))

	)

1349 
	#sk_PKCS7_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7
, (°))

	)

1350 
	#sk_PKCS7_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7
, (°))

	)

1352 
	#sk_PKCS7_RECIP_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_RECIP_INFO
, (cmp))

	)

1353 
	#sk_PKCS7_RECIP_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_RECIP_INFO
)

	)

1354 
	#sk_PKCS7_RECIP_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_RECIP_INFO
, (°))

	)

1355 
	#sk_PKCS7_RECIP_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_RECIP_INFO
, (°))

	)

1356 
	#sk_PKCS7_RECIP_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1357 
	#sk_PKCS7_RECIP_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_RECIP_INFO
, (°), (i), (vÆ))

	)

1358 
	#sk_PKCS7_RECIP_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_RECIP_INFO
, (°))

	)

1359 
	#sk_PKCS7_RECIP_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1360 
	#sk_PKCS7_RECIP_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1361 
	#sk_PKCS7_RECIP_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1362 
	#sk_PKCS7_RECIP_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_RECIP_INFO
, (°), (vÆ))

	)

1363 
	#sk_PKCS7_RECIP_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_RECIP_INFO
, (°), (i))

	)

1364 
	#sk_PKCS7_RECIP_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_RECIP_INFO
, (°), (±r))

	)

1365 
	#sk_PKCS7_RECIP_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_RECIP_INFO
, (°), (vÆ), (i))

	)

1366 
	#sk_PKCS7_RECIP_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_RECIP_INFO
, (°), (cmp))

	)

1367 
	#sk_PKCS7_RECIP_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_RECIP_INFO
, st)

	)

1368 
	#sk_PKCS7_RECIP_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_RECIP_INFO
, (°), (‰ì_func))

	)

1369 
	#sk_PKCS7_RECIP_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_RECIP_INFO
, (°))

	)

1370 
	#sk_PKCS7_RECIP_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_RECIP_INFO
, (°))

	)

1371 
	#sk_PKCS7_RECIP_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_RECIP_INFO
, (°))

	)

1372 
	#sk_PKCS7_RECIP_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_RECIP_INFO
, (°))

	)

1374 
	#sk_PKCS7_SIGNER_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
PKCS7_SIGNER_INFO
, (cmp))

	)

1375 
	#sk_PKCS7_SIGNER_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
PKCS7_SIGNER_INFO
)

	)

1376 
	#sk_PKCS7_SIGNER_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
PKCS7_SIGNER_INFO
, (°))

	)

1377 
	#sk_PKCS7_SIGNER_INFO_num
(
°
Ë
	`SKM_sk_num
(
PKCS7_SIGNER_INFO
, (°))

	)

1378 
	#sk_PKCS7_SIGNER_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1379 
	#sk_PKCS7_SIGNER_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
PKCS7_SIGNER_INFO
, (°), (i), (vÆ))

	)

1380 
	#sk_PKCS7_SIGNER_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
PKCS7_SIGNER_INFO
, (°))

	)

1381 
	#sk_PKCS7_SIGNER_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1382 
	#sk_PKCS7_SIGNER_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1383 
	#sk_PKCS7_SIGNER_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1384 
	#sk_PKCS7_SIGNER_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
PKCS7_SIGNER_INFO
, (°), (vÆ))

	)

1385 
	#sk_PKCS7_SIGNER_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
PKCS7_SIGNER_INFO
, (°), (i))

	)

1386 
	#sk_PKCS7_SIGNER_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
PKCS7_SIGNER_INFO
, (°), (±r))

	)

1387 
	#sk_PKCS7_SIGNER_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
PKCS7_SIGNER_INFO
, (°), (vÆ), (i))

	)

1388 
	#sk_PKCS7_SIGNER_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
PKCS7_SIGNER_INFO
, (°), (cmp))

	)

1389 
	#sk_PKCS7_SIGNER_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
PKCS7_SIGNER_INFO
, st)

	)

1390 
	#sk_PKCS7_SIGNER_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
PKCS7_SIGNER_INFO
, (°), (‰ì_func))

	)

1391 
	#sk_PKCS7_SIGNER_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
PKCS7_SIGNER_INFO
, (°))

	)

1392 
	#sk_PKCS7_SIGNER_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
PKCS7_SIGNER_INFO
, (°))

	)

1393 
	#sk_PKCS7_SIGNER_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
PKCS7_SIGNER_INFO
, (°))

	)

1394 
	#sk_PKCS7_SIGNER_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
PKCS7_SIGNER_INFO
, (°))

	)

1396 
	#sk_POLICYINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYINFO
, (cmp))

	)

1397 
	#sk_POLICYINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYINFO
)

	)

1398 
	#sk_POLICYINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYINFO
, (°))

	)

1399 
	#sk_POLICYINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYINFO
, (°))

	)

1400 
	#sk_POLICYINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYINFO
, (°), (i))

	)

1401 
	#sk_POLICYINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYINFO
, (°), (i), (vÆ))

	)

1402 
	#sk_POLICYINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYINFO
, (°))

	)

1403 
	#sk_POLICYINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYINFO
, (°), (vÆ))

	)

1404 
	#sk_POLICYINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYINFO
, (°), (vÆ))

	)

1405 
	#sk_POLICYINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYINFO
, (°), (vÆ))

	)

1406 
	#sk_POLICYINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYINFO
, (°), (vÆ))

	)

1407 
	#sk_POLICYINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYINFO
, (°), (i))

	)

1408 
	#sk_POLICYINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYINFO
, (°), (±r))

	)

1409 
	#sk_POLICYINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYINFO
, (°), (vÆ), (i))

	)

1410 
	#sk_POLICYINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYINFO
, (°), (cmp))

	)

1411 
	#sk_POLICYINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYINFO
, st)

	)

1412 
	#sk_POLICYINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYINFO
, (°), (‰ì_func))

	)

1413 
	#sk_POLICYINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYINFO
, (°))

	)

1414 
	#sk_POLICYINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYINFO
, (°))

	)

1415 
	#sk_POLICYINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYINFO
, (°))

	)

1416 
	#sk_POLICYINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYINFO
, (°))

	)

1418 
	#sk_POLICYQUALINFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICYQUALINFO
, (cmp))

	)

1419 
	#sk_POLICYQUALINFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICYQUALINFO
)

	)

1420 
	#sk_POLICYQUALINFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICYQUALINFO
, (°))

	)

1421 
	#sk_POLICYQUALINFO_num
(
°
Ë
	`SKM_sk_num
(
POLICYQUALINFO
, (°))

	)

1422 
	#sk_POLICYQUALINFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICYQUALINFO
, (°), (i))

	)

1423 
	#sk_POLICYQUALINFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICYQUALINFO
, (°), (i), (vÆ))

	)

1424 
	#sk_POLICYQUALINFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICYQUALINFO
, (°))

	)

1425 
	#sk_POLICYQUALINFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICYQUALINFO
, (°), (vÆ))

	)

1426 
	#sk_POLICYQUALINFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICYQUALINFO
, (°), (vÆ))

	)

1427 
	#sk_POLICYQUALINFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICYQUALINFO
, (°), (vÆ))

	)

1428 
	#sk_POLICYQUALINFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICYQUALINFO
, (°), (vÆ))

	)

1429 
	#sk_POLICYQUALINFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICYQUALINFO
, (°), (i))

	)

1430 
	#sk_POLICYQUALINFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICYQUALINFO
, (°), (±r))

	)

1431 
	#sk_POLICYQUALINFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICYQUALINFO
, (°), (vÆ), (i))

	)

1432 
	#sk_POLICYQUALINFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICYQUALINFO
, (°), (cmp))

	)

1433 
	#sk_POLICYQUALINFO_dup
(
°
Ë
	`SKM_sk_dup
(
POLICYQUALINFO
, st)

	)

1434 
	#sk_POLICYQUALINFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICYQUALINFO
, (°), (‰ì_func))

	)

1435 
	#sk_POLICYQUALINFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICYQUALINFO
, (°))

	)

1436 
	#sk_POLICYQUALINFO_p›
(
°
Ë
	`SKM_sk_p›
(
POLICYQUALINFO
, (°))

	)

1437 
	#sk_POLICYQUALINFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICYQUALINFO
, (°))

	)

1438 
	#sk_POLICYQUALINFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICYQUALINFO
, (°))

	)

1440 
	#sk_POLICY_MAPPING_√w
(
cmp
Ë
	`SKM_sk_√w
(
POLICY_MAPPING
, (cmp))

	)

1441 
	#sk_POLICY_MAPPING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
POLICY_MAPPING
)

	)

1442 
	#sk_POLICY_MAPPING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
POLICY_MAPPING
, (°))

	)

1443 
	#sk_POLICY_MAPPING_num
(
°
Ë
	`SKM_sk_num
(
POLICY_MAPPING
, (°))

	)

1444 
	#sk_POLICY_MAPPING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
POLICY_MAPPING
, (°), (i))

	)

1445 
	#sk_POLICY_MAPPING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
POLICY_MAPPING
, (°), (i), (vÆ))

	)

1446 
	#sk_POLICY_MAPPING_zîo
(
°
Ë
	`SKM_sk_zîo
(
POLICY_MAPPING
, (°))

	)

1447 
	#sk_POLICY_MAPPING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
POLICY_MAPPING
, (°), (vÆ))

	)

1448 
	#sk_POLICY_MAPPING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
POLICY_MAPPING
, (°), (vÆ))

	)

1449 
	#sk_POLICY_MAPPING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
POLICY_MAPPING
, (°), (vÆ))

	)

1450 
	#sk_POLICY_MAPPING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
POLICY_MAPPING
, (°), (vÆ))

	)

1451 
	#sk_POLICY_MAPPING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
POLICY_MAPPING
, (°), (i))

	)

1452 
	#sk_POLICY_MAPPING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
POLICY_MAPPING
, (°), (±r))

	)

1453 
	#sk_POLICY_MAPPING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
POLICY_MAPPING
, (°), (vÆ), (i))

	)

1454 
	#sk_POLICY_MAPPING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
POLICY_MAPPING
, (°), (cmp))

	)

1455 
	#sk_POLICY_MAPPING_dup
(
°
Ë
	`SKM_sk_dup
(
POLICY_MAPPING
, st)

	)

1456 
	#sk_POLICY_MAPPING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
POLICY_MAPPING
, (°), (‰ì_func))

	)

1457 
	#sk_POLICY_MAPPING_shi·
(
°
Ë
	`SKM_sk_shi·
(
POLICY_MAPPING
, (°))

	)

1458 
	#sk_POLICY_MAPPING_p›
(
°
Ë
	`SKM_sk_p›
(
POLICY_MAPPING
, (°))

	)

1459 
	#sk_POLICY_MAPPING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
POLICY_MAPPING
, (°))

	)

1460 
	#sk_POLICY_MAPPING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
POLICY_MAPPING
, (°))

	)

1462 
	#sk_SRP_gN_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN
, (cmp))

	)

1463 
	#sk_SRP_gN_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN
)

	)

1464 
	#sk_SRP_gN_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN
, (°))

	)

1465 
	#sk_SRP_gN_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN
, (°))

	)

1466 
	#sk_SRP_gN_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN
, (°), (i))

	)

1467 
	#sk_SRP_gN_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN
, (°), (i), (vÆ))

	)

1468 
	#sk_SRP_gN_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN
, (°))

	)

1469 
	#sk_SRP_gN_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN
, (°), (vÆ))

	)

1470 
	#sk_SRP_gN_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN
, (°), (vÆ))

	)

1471 
	#sk_SRP_gN_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN
, (°), (vÆ))

	)

1472 
	#sk_SRP_gN_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN
, (°), (vÆ))

	)

1473 
	#sk_SRP_gN_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN
, (°), (i))

	)

1474 
	#sk_SRP_gN_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN
, (°), (±r))

	)

1475 
	#sk_SRP_gN_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN
, (°), (vÆ), (i))

	)

1476 
	#sk_SRP_gN_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN
, (°), (cmp))

	)

1477 
	#sk_SRP_gN_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN
, st)

	)

1478 
	#sk_SRP_gN_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN
, (°), (‰ì_func))

	)

1479 
	#sk_SRP_gN_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN
, (°))

	)

1480 
	#sk_SRP_gN_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN
, (°))

	)

1481 
	#sk_SRP_gN_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN
, (°))

	)

1482 
	#sk_SRP_gN_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN
, (°))

	)

1484 
	#sk_SRP_gN_ˇche_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_gN_ˇche
, (cmp))

	)

1485 
	#sk_SRP_gN_ˇche_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_gN_ˇche
)

	)

1486 
	#sk_SRP_gN_ˇche_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_gN_ˇche
, (°))

	)

1487 
	#sk_SRP_gN_ˇche_num
(
°
Ë
	`SKM_sk_num
(
SRP_gN_ˇche
, (°))

	)

1488 
	#sk_SRP_gN_ˇche_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_gN_ˇche
, (°), (i))

	)

1489 
	#sk_SRP_gN_ˇche_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_gN_ˇche
, (°), (i), (vÆ))

	)

1490 
	#sk_SRP_gN_ˇche_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_gN_ˇche
, (°))

	)

1491 
	#sk_SRP_gN_ˇche_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1492 
	#sk_SRP_gN_ˇche_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1493 
	#sk_SRP_gN_ˇche_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1494 
	#sk_SRP_gN_ˇche_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_gN_ˇche
, (°), (vÆ))

	)

1495 
	#sk_SRP_gN_ˇche_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_gN_ˇche
, (°), (i))

	)

1496 
	#sk_SRP_gN_ˇche_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_gN_ˇche
, (°), (±r))

	)

1497 
	#sk_SRP_gN_ˇche_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_gN_ˇche
, (°), (vÆ), (i))

	)

1498 
	#sk_SRP_gN_ˇche_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_gN_ˇche
, (°), (cmp))

	)

1499 
	#sk_SRP_gN_ˇche_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_gN_ˇche
, st)

	)

1500 
	#sk_SRP_gN_ˇche_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_gN_ˇche
, (°), (‰ì_func))

	)

1501 
	#sk_SRP_gN_ˇche_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_gN_ˇche
, (°))

	)

1502 
	#sk_SRP_gN_ˇche_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_gN_ˇche
, (°))

	)

1503 
	#sk_SRP_gN_ˇche_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_gN_ˇche
, (°))

	)

1504 
	#sk_SRP_gN_ˇche_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_gN_ˇche
, (°))

	)

1506 
	#sk_SRP_u£r_pwd_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRP_u£r_pwd
, (cmp))

	)

1507 
	#sk_SRP_u£r_pwd_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRP_u£r_pwd
)

	)

1508 
	#sk_SRP_u£r_pwd_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRP_u£r_pwd
, (°))

	)

1509 
	#sk_SRP_u£r_pwd_num
(
°
Ë
	`SKM_sk_num
(
SRP_u£r_pwd
, (°))

	)

1510 
	#sk_SRP_u£r_pwd_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRP_u£r_pwd
, (°), (i))

	)

1511 
	#sk_SRP_u£r_pwd_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRP_u£r_pwd
, (°), (i), (vÆ))

	)

1512 
	#sk_SRP_u£r_pwd_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRP_u£r_pwd
, (°))

	)

1513 
	#sk_SRP_u£r_pwd_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1514 
	#sk_SRP_u£r_pwd_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1515 
	#sk_SRP_u£r_pwd_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1516 
	#sk_SRP_u£r_pwd_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRP_u£r_pwd
, (°), (vÆ))

	)

1517 
	#sk_SRP_u£r_pwd_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRP_u£r_pwd
, (°), (i))

	)

1518 
	#sk_SRP_u£r_pwd_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRP_u£r_pwd
, (°), (±r))

	)

1519 
	#sk_SRP_u£r_pwd_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRP_u£r_pwd
, (°), (vÆ), (i))

	)

1520 
	#sk_SRP_u£r_pwd_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRP_u£r_pwd
, (°), (cmp))

	)

1521 
	#sk_SRP_u£r_pwd_dup
(
°
Ë
	`SKM_sk_dup
(
SRP_u£r_pwd
, st)

	)

1522 
	#sk_SRP_u£r_pwd_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRP_u£r_pwd
, (°), (‰ì_func))

	)

1523 
	#sk_SRP_u£r_pwd_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRP_u£r_pwd
, (°))

	)

1524 
	#sk_SRP_u£r_pwd_p›
(
°
Ë
	`SKM_sk_p›
(
SRP_u£r_pwd
, (°))

	)

1525 
	#sk_SRP_u£r_pwd_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRP_u£r_pwd
, (°))

	)

1526 
	#sk_SRP_u£r_pwd_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRP_u£r_pwd
, (°))

	)

1528 
	#sk_SRTP_PROTECTION_PROFILE_√w
(
cmp
Ë
	`SKM_sk_√w
(
SRTP_PROTECTION_PROFILE
, (cmp))

	)

1529 
	#sk_SRTP_PROTECTION_PROFILE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SRTP_PROTECTION_PROFILE
)

	)

1530 
	#sk_SRTP_PROTECTION_PROFILE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1531 
	#sk_SRTP_PROTECTION_PROFILE_num
(
°
Ë
	`SKM_sk_num
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1532 
	#sk_SRTP_PROTECTION_PROFILE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1533 
	#sk_SRTP_PROTECTION_PROFILE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SRTP_PROTECTION_PROFILE
, (°), (i), (vÆ))

	)

1534 
	#sk_SRTP_PROTECTION_PROFILE_zîo
(
°
Ë
	`SKM_sk_zîo
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1535 
	#sk_SRTP_PROTECTION_PROFILE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1536 
	#sk_SRTP_PROTECTION_PROFILE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1537 
	#sk_SRTP_PROTECTION_PROFILE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1538 
	#sk_SRTP_PROTECTION_PROFILE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ))

	)

1539 
	#sk_SRTP_PROTECTION_PROFILE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SRTP_PROTECTION_PROFILE
, (°), (i))

	)

1540 
	#sk_SRTP_PROTECTION_PROFILE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SRTP_PROTECTION_PROFILE
, (°), (±r))

	)

1541 
	#sk_SRTP_PROTECTION_PROFILE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SRTP_PROTECTION_PROFILE
, (°), (vÆ), (i))

	)

1542 
	#sk_SRTP_PROTECTION_PROFILE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SRTP_PROTECTION_PROFILE
, (°), (cmp))

	)

1543 
	#sk_SRTP_PROTECTION_PROFILE_dup
(
°
Ë
	`SKM_sk_dup
(
SRTP_PROTECTION_PROFILE
, st)

	)

1544 
	#sk_SRTP_PROTECTION_PROFILE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SRTP_PROTECTION_PROFILE
, (°), (‰ì_func))

	)

1545 
	#sk_SRTP_PROTECTION_PROFILE_shi·
(
°
Ë
	`SKM_sk_shi·
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1546 
	#sk_SRTP_PROTECTION_PROFILE_p›
(
°
Ë
	`SKM_sk_p›
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1547 
	#sk_SRTP_PROTECTION_PROFILE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1548 
	#sk_SRTP_PROTECTION_PROFILE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SRTP_PROTECTION_PROFILE
, (°))

	)

1550 
	#sk_SSL_CIPHER_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_CIPHER
, (cmp))

	)

1551 
	#sk_SSL_CIPHER_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_CIPHER
)

	)

1552 
	#sk_SSL_CIPHER_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_CIPHER
, (°))

	)

1553 
	#sk_SSL_CIPHER_num
(
°
Ë
	`SKM_sk_num
(
SSL_CIPHER
, (°))

	)

1554 
	#sk_SSL_CIPHER_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_CIPHER
, (°), (i))

	)

1555 
	#sk_SSL_CIPHER_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_CIPHER
, (°), (i), (vÆ))

	)

1556 
	#sk_SSL_CIPHER_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_CIPHER
, (°))

	)

1557 
	#sk_SSL_CIPHER_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_CIPHER
, (°), (vÆ))

	)

1558 
	#sk_SSL_CIPHER_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_CIPHER
, (°), (vÆ))

	)

1559 
	#sk_SSL_CIPHER_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_CIPHER
, (°), (vÆ))

	)

1560 
	#sk_SSL_CIPHER_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_CIPHER
, (°), (vÆ))

	)

1561 
	#sk_SSL_CIPHER_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_CIPHER
, (°), (i))

	)

1562 
	#sk_SSL_CIPHER_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_CIPHER
, (°), (±r))

	)

1563 
	#sk_SSL_CIPHER_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_CIPHER
, (°), (vÆ), (i))

	)

1564 
	#sk_SSL_CIPHER_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_CIPHER
, (°), (cmp))

	)

1565 
	#sk_SSL_CIPHER_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_CIPHER
, st)

	)

1566 
	#sk_SSL_CIPHER_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_CIPHER
, (°), (‰ì_func))

	)

1567 
	#sk_SSL_CIPHER_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_CIPHER
, (°))

	)

1568 
	#sk_SSL_CIPHER_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_CIPHER
, (°))

	)

1569 
	#sk_SSL_CIPHER_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_CIPHER
, (°))

	)

1570 
	#sk_SSL_CIPHER_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_CIPHER
, (°))

	)

1572 
	#sk_SSL_COMP_√w
(
cmp
Ë
	`SKM_sk_√w
(
SSL_COMP
, (cmp))

	)

1573 
	#sk_SSL_COMP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SSL_COMP
)

	)

1574 
	#sk_SSL_COMP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SSL_COMP
, (°))

	)

1575 
	#sk_SSL_COMP_num
(
°
Ë
	`SKM_sk_num
(
SSL_COMP
, (°))

	)

1576 
	#sk_SSL_COMP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SSL_COMP
, (°), (i))

	)

1577 
	#sk_SSL_COMP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SSL_COMP
, (°), (i), (vÆ))

	)

1578 
	#sk_SSL_COMP_zîo
(
°
Ë
	`SKM_sk_zîo
(
SSL_COMP
, (°))

	)

1579 
	#sk_SSL_COMP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SSL_COMP
, (°), (vÆ))

	)

1580 
	#sk_SSL_COMP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SSL_COMP
, (°), (vÆ))

	)

1581 
	#sk_SSL_COMP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SSL_COMP
, (°), (vÆ))

	)

1582 
	#sk_SSL_COMP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SSL_COMP
, (°), (vÆ))

	)

1583 
	#sk_SSL_COMP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SSL_COMP
, (°), (i))

	)

1584 
	#sk_SSL_COMP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SSL_COMP
, (°), (±r))

	)

1585 
	#sk_SSL_COMP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SSL_COMP
, (°), (vÆ), (i))

	)

1586 
	#sk_SSL_COMP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SSL_COMP
, (°), (cmp))

	)

1587 
	#sk_SSL_COMP_dup
(
°
Ë
	`SKM_sk_dup
(
SSL_COMP
, st)

	)

1588 
	#sk_SSL_COMP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SSL_COMP
, (°), (‰ì_func))

	)

1589 
	#sk_SSL_COMP_shi·
(
°
Ë
	`SKM_sk_shi·
(
SSL_COMP
, (°))

	)

1590 
	#sk_SSL_COMP_p›
(
°
Ë
	`SKM_sk_p›
(
SSL_COMP
, (°))

	)

1591 
	#sk_SSL_COMP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SSL_COMP
, (°))

	)

1592 
	#sk_SSL_COMP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SSL_COMP
, (°))

	)

1594 
	#sk_STACK_OF_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
STACK_OF_X509_NAME_ENTRY
, (cmp))

	)

1595 
	#sk_STACK_OF_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STACK_OF_X509_NAME_ENTRY
)

	)

1596 
	#sk_STACK_OF_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1597 
	#sk_STACK_OF_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1598 
	#sk_STACK_OF_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1599 
	#sk_STACK_OF_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STACK_OF_X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1600 
	#sk_STACK_OF_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1601 
	#sk_STACK_OF_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1602 
	#sk_STACK_OF_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1603 
	#sk_STACK_OF_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1604 
	#sk_STACK_OF_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ))

	)

1605 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STACK_OF_X509_NAME_ENTRY
, (°), (i))

	)

1606 
	#sk_STACK_OF_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STACK_OF_X509_NAME_ENTRY
, (°), (±r))

	)

1607 
	#sk_STACK_OF_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STACK_OF_X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1608 
	#sk_STACK_OF_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STACK_OF_X509_NAME_ENTRY
, (°), (cmp))

	)

1609 
	#sk_STACK_OF_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
STACK_OF_X509_NAME_ENTRY
, st)

	)

1610 
	#sk_STACK_OF_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STACK_OF_X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1611 
	#sk_STACK_OF_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1612 
	#sk_STACK_OF_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1613 
	#sk_STACK_OF_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1614 
	#sk_STACK_OF_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STACK_OF_X509_NAME_ENTRY
, (°))

	)

1616 
	#sk_STORE_ATTR_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_ATTR_INFO
, (cmp))

	)

1617 
	#sk_STORE_ATTR_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_ATTR_INFO
)

	)

1618 
	#sk_STORE_ATTR_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_ATTR_INFO
, (°))

	)

1619 
	#sk_STORE_ATTR_INFO_num
(
°
Ë
	`SKM_sk_num
(
STORE_ATTR_INFO
, (°))

	)

1620 
	#sk_STORE_ATTR_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_ATTR_INFO
, (°), (i))

	)

1621 
	#sk_STORE_ATTR_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_ATTR_INFO
, (°), (i), (vÆ))

	)

1622 
	#sk_STORE_ATTR_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_ATTR_INFO
, (°))

	)

1623 
	#sk_STORE_ATTR_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1624 
	#sk_STORE_ATTR_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1625 
	#sk_STORE_ATTR_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1626 
	#sk_STORE_ATTR_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_ATTR_INFO
, (°), (vÆ))

	)

1627 
	#sk_STORE_ATTR_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_ATTR_INFO
, (°), (i))

	)

1628 
	#sk_STORE_ATTR_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_ATTR_INFO
, (°), (±r))

	)

1629 
	#sk_STORE_ATTR_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_ATTR_INFO
, (°), (vÆ), (i))

	)

1630 
	#sk_STORE_ATTR_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_ATTR_INFO
, (°), (cmp))

	)

1631 
	#sk_STORE_ATTR_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_ATTR_INFO
, st)

	)

1632 
	#sk_STORE_ATTR_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_ATTR_INFO
, (°), (‰ì_func))

	)

1633 
	#sk_STORE_ATTR_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_ATTR_INFO
, (°))

	)

1634 
	#sk_STORE_ATTR_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_ATTR_INFO
, (°))

	)

1635 
	#sk_STORE_ATTR_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_ATTR_INFO
, (°))

	)

1636 
	#sk_STORE_ATTR_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_ATTR_INFO
, (°))

	)

1638 
	#sk_STORE_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
STORE_OBJECT
, (cmp))

	)

1639 
	#sk_STORE_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
STORE_OBJECT
)

	)

1640 
	#sk_STORE_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
STORE_OBJECT
, (°))

	)

1641 
	#sk_STORE_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
STORE_OBJECT
, (°))

	)

1642 
	#sk_STORE_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
STORE_OBJECT
, (°), (i))

	)

1643 
	#sk_STORE_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
STORE_OBJECT
, (°), (i), (vÆ))

	)

1644 
	#sk_STORE_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
STORE_OBJECT
, (°))

	)

1645 
	#sk_STORE_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
STORE_OBJECT
, (°), (vÆ))

	)

1646 
	#sk_STORE_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
STORE_OBJECT
, (°), (vÆ))

	)

1647 
	#sk_STORE_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
STORE_OBJECT
, (°), (vÆ))

	)

1648 
	#sk_STORE_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
STORE_OBJECT
, (°), (vÆ))

	)

1649 
	#sk_STORE_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
STORE_OBJECT
, (°), (i))

	)

1650 
	#sk_STORE_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
STORE_OBJECT
, (°), (±r))

	)

1651 
	#sk_STORE_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
STORE_OBJECT
, (°), (vÆ), (i))

	)

1652 
	#sk_STORE_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
STORE_OBJECT
, (°), (cmp))

	)

1653 
	#sk_STORE_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
STORE_OBJECT
, st)

	)

1654 
	#sk_STORE_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
STORE_OBJECT
, (°), (‰ì_func))

	)

1655 
	#sk_STORE_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
STORE_OBJECT
, (°))

	)

1656 
	#sk_STORE_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
STORE_OBJECT
, (°))

	)

1657 
	#sk_STORE_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
STORE_OBJECT
, (°))

	)

1658 
	#sk_STORE_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
STORE_OBJECT
, (°))

	)

1660 
	#sk_SXNETID_√w
(
cmp
Ë
	`SKM_sk_√w
(
SXNETID
, (cmp))

	)

1661 
	#sk_SXNETID_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
SXNETID
)

	)

1662 
	#sk_SXNETID_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
SXNETID
, (°))

	)

1663 
	#sk_SXNETID_num
(
°
Ë
	`SKM_sk_num
(
SXNETID
, (°))

	)

1664 
	#sk_SXNETID_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
SXNETID
, (°), (i))

	)

1665 
	#sk_SXNETID_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
SXNETID
, (°), (i), (vÆ))

	)

1666 
	#sk_SXNETID_zîo
(
°
Ë
	`SKM_sk_zîo
(
SXNETID
, (°))

	)

1667 
	#sk_SXNETID_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
SXNETID
, (°), (vÆ))

	)

1668 
	#sk_SXNETID_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
SXNETID
, (°), (vÆ))

	)

1669 
	#sk_SXNETID_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
SXNETID
, (°), (vÆ))

	)

1670 
	#sk_SXNETID_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
SXNETID
, (°), (vÆ))

	)

1671 
	#sk_SXNETID_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
SXNETID
, (°), (i))

	)

1672 
	#sk_SXNETID_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
SXNETID
, (°), (±r))

	)

1673 
	#sk_SXNETID_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
SXNETID
, (°), (vÆ), (i))

	)

1674 
	#sk_SXNETID_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
SXNETID
, (°), (cmp))

	)

1675 
	#sk_SXNETID_dup
(
°
Ë
	`SKM_sk_dup
(
SXNETID
, st)

	)

1676 
	#sk_SXNETID_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
SXNETID
, (°), (‰ì_func))

	)

1677 
	#sk_SXNETID_shi·
(
°
Ë
	`SKM_sk_shi·
(
SXNETID
, (°))

	)

1678 
	#sk_SXNETID_p›
(
°
Ë
	`SKM_sk_p›
(
SXNETID
, (°))

	)

1679 
	#sk_SXNETID_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
SXNETID
, (°))

	)

1680 
	#sk_SXNETID_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
SXNETID
, (°))

	)

1682 
	#sk_UI_STRING_√w
(
cmp
Ë
	`SKM_sk_√w
(
UI_STRING
, (cmp))

	)

1683 
	#sk_UI_STRING_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
UI_STRING
)

	)

1684 
	#sk_UI_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
UI_STRING
, (°))

	)

1685 
	#sk_UI_STRING_num
(
°
Ë
	`SKM_sk_num
(
UI_STRING
, (°))

	)

1686 
	#sk_UI_STRING_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
UI_STRING
, (°), (i))

	)

1687 
	#sk_UI_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
UI_STRING
, (°), (i), (vÆ))

	)

1688 
	#sk_UI_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
UI_STRING
, (°))

	)

1689 
	#sk_UI_STRING_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
UI_STRING
, (°), (vÆ))

	)

1690 
	#sk_UI_STRING_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
UI_STRING
, (°), (vÆ))

	)

1691 
	#sk_UI_STRING_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
UI_STRING
, (°), (vÆ))

	)

1692 
	#sk_UI_STRING_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
UI_STRING
, (°), (vÆ))

	)

1693 
	#sk_UI_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
UI_STRING
, (°), (i))

	)

1694 
	#sk_UI_STRING_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
UI_STRING
, (°), (±r))

	)

1695 
	#sk_UI_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
UI_STRING
, (°), (vÆ), (i))

	)

1696 
	#sk_UI_STRING_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
UI_STRING
, (°), (cmp))

	)

1697 
	#sk_UI_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
UI_STRING
, st)

	)

1698 
	#sk_UI_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
UI_STRING
, (°), (‰ì_func))

	)

1699 
	#sk_UI_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
UI_STRING
, (°))

	)

1700 
	#sk_UI_STRING_p›
(
°
Ë
	`SKM_sk_p›
(
UI_STRING
, (°))

	)

1701 
	#sk_UI_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
UI_STRING
, (°))

	)

1702 
	#sk_UI_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
UI_STRING
, (°))

	)

1704 
	#sk_X509_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509
, (cmp))

	)

1705 
	#sk_X509_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509
)

	)

1706 
	#sk_X509_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509
, (°))

	)

1707 
	#sk_X509_num
(
°
Ë
	`SKM_sk_num
(
X509
, (°))

	)

1708 
	#sk_X509_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509
, (°), (i))

	)

1709 
	#sk_X509_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509
, (°), (i), (vÆ))

	)

1710 
	#sk_X509_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509
, (°))

	)

1711 
	#sk_X509_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509
, (°), (vÆ))

	)

1712 
	#sk_X509_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509
, (°), (vÆ))

	)

1713 
	#sk_X509_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509
, (°), (vÆ))

	)

1714 
	#sk_X509_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509
, (°), (vÆ))

	)

1715 
	#sk_X509_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509
, (°), (i))

	)

1716 
	#sk_X509_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509
, (°), (±r))

	)

1717 
	#sk_X509_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509
, (°), (vÆ), (i))

	)

1718 
	#sk_X509_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509
, (°), (cmp))

	)

1719 
	#sk_X509_dup
(
°
Ë
	`SKM_sk_dup
(
X509
, st)

	)

1720 
	#sk_X509_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509
, (°), (‰ì_func))

	)

1721 
	#sk_X509_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509
, (°))

	)

1722 
	#sk_X509_p›
(
°
Ë
	`SKM_sk_p›
(
X509
, (°))

	)

1723 
	#sk_X509_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509
, (°))

	)

1724 
	#sk_X509_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509
, (°))

	)

1726 
	#sk_X509V3_EXT_METHOD_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509V3_EXT_METHOD
, (cmp))

	)

1727 
	#sk_X509V3_EXT_METHOD_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509V3_EXT_METHOD
)

	)

1728 
	#sk_X509V3_EXT_METHOD_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509V3_EXT_METHOD
, (°))

	)

1729 
	#sk_X509V3_EXT_METHOD_num
(
°
Ë
	`SKM_sk_num
(
X509V3_EXT_METHOD
, (°))

	)

1730 
	#sk_X509V3_EXT_METHOD_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509V3_EXT_METHOD
, (°), (i))

	)

1731 
	#sk_X509V3_EXT_METHOD_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509V3_EXT_METHOD
, (°), (i), (vÆ))

	)

1732 
	#sk_X509V3_EXT_METHOD_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509V3_EXT_METHOD
, (°))

	)

1733 
	#sk_X509V3_EXT_METHOD_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1734 
	#sk_X509V3_EXT_METHOD_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1735 
	#sk_X509V3_EXT_METHOD_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1736 
	#sk_X509V3_EXT_METHOD_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509V3_EXT_METHOD
, (°), (vÆ))

	)

1737 
	#sk_X509V3_EXT_METHOD_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509V3_EXT_METHOD
, (°), (i))

	)

1738 
	#sk_X509V3_EXT_METHOD_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509V3_EXT_METHOD
, (°), (±r))

	)

1739 
	#sk_X509V3_EXT_METHOD_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509V3_EXT_METHOD
, (°), (vÆ), (i))

	)

1740 
	#sk_X509V3_EXT_METHOD_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509V3_EXT_METHOD
, (°), (cmp))

	)

1741 
	#sk_X509V3_EXT_METHOD_dup
(
°
Ë
	`SKM_sk_dup
(
X509V3_EXT_METHOD
, st)

	)

1742 
	#sk_X509V3_EXT_METHOD_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509V3_EXT_METHOD
, (°), (‰ì_func))

	)

1743 
	#sk_X509V3_EXT_METHOD_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509V3_EXT_METHOD
, (°))

	)

1744 
	#sk_X509V3_EXT_METHOD_p›
(
°
Ë
	`SKM_sk_p›
(
X509V3_EXT_METHOD
, (°))

	)

1745 
	#sk_X509V3_EXT_METHOD_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509V3_EXT_METHOD
, (°))

	)

1746 
	#sk_X509V3_EXT_METHOD_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509V3_EXT_METHOD
, (°))

	)

1748 
	#sk_X509_ALGOR_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ALGOR
, (cmp))

	)

1749 
	#sk_X509_ALGOR_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ALGOR
)

	)

1750 
	#sk_X509_ALGOR_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ALGOR
, (°))

	)

1751 
	#sk_X509_ALGOR_num
(
°
Ë
	`SKM_sk_num
(
X509_ALGOR
, (°))

	)

1752 
	#sk_X509_ALGOR_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ALGOR
, (°), (i))

	)

1753 
	#sk_X509_ALGOR_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ALGOR
, (°), (i), (vÆ))

	)

1754 
	#sk_X509_ALGOR_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ALGOR
, (°))

	)

1755 
	#sk_X509_ALGOR_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ALGOR
, (°), (vÆ))

	)

1756 
	#sk_X509_ALGOR_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ALGOR
, (°), (vÆ))

	)

1757 
	#sk_X509_ALGOR_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ALGOR
, (°), (vÆ))

	)

1758 
	#sk_X509_ALGOR_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ALGOR
, (°), (vÆ))

	)

1759 
	#sk_X509_ALGOR_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ALGOR
, (°), (i))

	)

1760 
	#sk_X509_ALGOR_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ALGOR
, (°), (±r))

	)

1761 
	#sk_X509_ALGOR_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ALGOR
, (°), (vÆ), (i))

	)

1762 
	#sk_X509_ALGOR_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ALGOR
, (°), (cmp))

	)

1763 
	#sk_X509_ALGOR_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ALGOR
, st)

	)

1764 
	#sk_X509_ALGOR_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ALGOR
, (°), (‰ì_func))

	)

1765 
	#sk_X509_ALGOR_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ALGOR
, (°))

	)

1766 
	#sk_X509_ALGOR_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ALGOR
, (°))

	)

1767 
	#sk_X509_ALGOR_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ALGOR
, (°))

	)

1768 
	#sk_X509_ALGOR_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ALGOR
, (°))

	)

1770 
	#sk_X509_ATTRIBUTE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_ATTRIBUTE
, (cmp))

	)

1771 
	#sk_X509_ATTRIBUTE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_ATTRIBUTE
)

	)

1772 
	#sk_X509_ATTRIBUTE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_ATTRIBUTE
, (°))

	)

1773 
	#sk_X509_ATTRIBUTE_num
(
°
Ë
	`SKM_sk_num
(
X509_ATTRIBUTE
, (°))

	)

1774 
	#sk_X509_ATTRIBUTE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_ATTRIBUTE
, (°), (i))

	)

1775 
	#sk_X509_ATTRIBUTE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_ATTRIBUTE
, (°), (i), (vÆ))

	)

1776 
	#sk_X509_ATTRIBUTE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_ATTRIBUTE
, (°))

	)

1777 
	#sk_X509_ATTRIBUTE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1778 
	#sk_X509_ATTRIBUTE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1779 
	#sk_X509_ATTRIBUTE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1780 
	#sk_X509_ATTRIBUTE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_ATTRIBUTE
, (°), (vÆ))

	)

1781 
	#sk_X509_ATTRIBUTE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_ATTRIBUTE
, (°), (i))

	)

1782 
	#sk_X509_ATTRIBUTE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_ATTRIBUTE
, (°), (±r))

	)

1783 
	#sk_X509_ATTRIBUTE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_ATTRIBUTE
, (°), (vÆ), (i))

	)

1784 
	#sk_X509_ATTRIBUTE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_ATTRIBUTE
, (°), (cmp))

	)

1785 
	#sk_X509_ATTRIBUTE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_ATTRIBUTE
, st)

	)

1786 
	#sk_X509_ATTRIBUTE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_ATTRIBUTE
, (°), (‰ì_func))

	)

1787 
	#sk_X509_ATTRIBUTE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_ATTRIBUTE
, (°))

	)

1788 
	#sk_X509_ATTRIBUTE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_ATTRIBUTE
, (°))

	)

1789 
	#sk_X509_ATTRIBUTE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_ATTRIBUTE
, (°))

	)

1790 
	#sk_X509_ATTRIBUTE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_ATTRIBUTE
, (°))

	)

1792 
	#sk_X509_CRL_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_CRL
, (cmp))

	)

1793 
	#sk_X509_CRL_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_CRL
)

	)

1794 
	#sk_X509_CRL_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_CRL
, (°))

	)

1795 
	#sk_X509_CRL_num
(
°
Ë
	`SKM_sk_num
(
X509_CRL
, (°))

	)

1796 
	#sk_X509_CRL_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_CRL
, (°), (i))

	)

1797 
	#sk_X509_CRL_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_CRL
, (°), (i), (vÆ))

	)

1798 
	#sk_X509_CRL_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_CRL
, (°))

	)

1799 
	#sk_X509_CRL_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_CRL
, (°), (vÆ))

	)

1800 
	#sk_X509_CRL_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_CRL
, (°), (vÆ))

	)

1801 
	#sk_X509_CRL_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_CRL
, (°), (vÆ))

	)

1802 
	#sk_X509_CRL_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_CRL
, (°), (vÆ))

	)

1803 
	#sk_X509_CRL_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_CRL
, (°), (i))

	)

1804 
	#sk_X509_CRL_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_CRL
, (°), (±r))

	)

1805 
	#sk_X509_CRL_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_CRL
, (°), (vÆ), (i))

	)

1806 
	#sk_X509_CRL_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_CRL
, (°), (cmp))

	)

1807 
	#sk_X509_CRL_dup
(
°
Ë
	`SKM_sk_dup
(
X509_CRL
, st)

	)

1808 
	#sk_X509_CRL_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_CRL
, (°), (‰ì_func))

	)

1809 
	#sk_X509_CRL_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_CRL
, (°))

	)

1810 
	#sk_X509_CRL_p›
(
°
Ë
	`SKM_sk_p›
(
X509_CRL
, (°))

	)

1811 
	#sk_X509_CRL_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_CRL
, (°))

	)

1812 
	#sk_X509_CRL_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_CRL
, (°))

	)

1814 
	#sk_X509_EXTENSION_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_EXTENSION
, (cmp))

	)

1815 
	#sk_X509_EXTENSION_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_EXTENSION
)

	)

1816 
	#sk_X509_EXTENSION_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_EXTENSION
, (°))

	)

1817 
	#sk_X509_EXTENSION_num
(
°
Ë
	`SKM_sk_num
(
X509_EXTENSION
, (°))

	)

1818 
	#sk_X509_EXTENSION_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_EXTENSION
, (°), (i))

	)

1819 
	#sk_X509_EXTENSION_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_EXTENSION
, (°), (i), (vÆ))

	)

1820 
	#sk_X509_EXTENSION_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_EXTENSION
, (°))

	)

1821 
	#sk_X509_EXTENSION_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_EXTENSION
, (°), (vÆ))

	)

1822 
	#sk_X509_EXTENSION_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_EXTENSION
, (°), (vÆ))

	)

1823 
	#sk_X509_EXTENSION_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_EXTENSION
, (°), (vÆ))

	)

1824 
	#sk_X509_EXTENSION_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_EXTENSION
, (°), (vÆ))

	)

1825 
	#sk_X509_EXTENSION_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_EXTENSION
, (°), (i))

	)

1826 
	#sk_X509_EXTENSION_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_EXTENSION
, (°), (±r))

	)

1827 
	#sk_X509_EXTENSION_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_EXTENSION
, (°), (vÆ), (i))

	)

1828 
	#sk_X509_EXTENSION_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_EXTENSION
, (°), (cmp))

	)

1829 
	#sk_X509_EXTENSION_dup
(
°
Ë
	`SKM_sk_dup
(
X509_EXTENSION
, st)

	)

1830 
	#sk_X509_EXTENSION_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_EXTENSION
, (°), (‰ì_func))

	)

1831 
	#sk_X509_EXTENSION_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_EXTENSION
, (°))

	)

1832 
	#sk_X509_EXTENSION_p›
(
°
Ë
	`SKM_sk_p›
(
X509_EXTENSION
, (°))

	)

1833 
	#sk_X509_EXTENSION_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_EXTENSION
, (°))

	)

1834 
	#sk_X509_EXTENSION_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_EXTENSION
, (°))

	)

1836 
	#sk_X509_INFO_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_INFO
, (cmp))

	)

1837 
	#sk_X509_INFO_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_INFO
)

	)

1838 
	#sk_X509_INFO_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_INFO
, (°))

	)

1839 
	#sk_X509_INFO_num
(
°
Ë
	`SKM_sk_num
(
X509_INFO
, (°))

	)

1840 
	#sk_X509_INFO_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_INFO
, (°), (i))

	)

1841 
	#sk_X509_INFO_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_INFO
, (°), (i), (vÆ))

	)

1842 
	#sk_X509_INFO_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_INFO
, (°))

	)

1843 
	#sk_X509_INFO_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_INFO
, (°), (vÆ))

	)

1844 
	#sk_X509_INFO_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_INFO
, (°), (vÆ))

	)

1845 
	#sk_X509_INFO_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_INFO
, (°), (vÆ))

	)

1846 
	#sk_X509_INFO_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_INFO
, (°), (vÆ))

	)

1847 
	#sk_X509_INFO_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_INFO
, (°), (i))

	)

1848 
	#sk_X509_INFO_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_INFO
, (°), (±r))

	)

1849 
	#sk_X509_INFO_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_INFO
, (°), (vÆ), (i))

	)

1850 
	#sk_X509_INFO_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_INFO
, (°), (cmp))

	)

1851 
	#sk_X509_INFO_dup
(
°
Ë
	`SKM_sk_dup
(
X509_INFO
, st)

	)

1852 
	#sk_X509_INFO_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_INFO
, (°), (‰ì_func))

	)

1853 
	#sk_X509_INFO_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_INFO
, (°))

	)

1854 
	#sk_X509_INFO_p›
(
°
Ë
	`SKM_sk_p›
(
X509_INFO
, (°))

	)

1855 
	#sk_X509_INFO_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_INFO
, (°))

	)

1856 
	#sk_X509_INFO_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_INFO
, (°))

	)

1858 
	#sk_X509_LOOKUP_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_LOOKUP
, (cmp))

	)

1859 
	#sk_X509_LOOKUP_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_LOOKUP
)

	)

1860 
	#sk_X509_LOOKUP_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_LOOKUP
, (°))

	)

1861 
	#sk_X509_LOOKUP_num
(
°
Ë
	`SKM_sk_num
(
X509_LOOKUP
, (°))

	)

1862 
	#sk_X509_LOOKUP_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_LOOKUP
, (°), (i))

	)

1863 
	#sk_X509_LOOKUP_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_LOOKUP
, (°), (i), (vÆ))

	)

1864 
	#sk_X509_LOOKUP_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_LOOKUP
, (°))

	)

1865 
	#sk_X509_LOOKUP_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_LOOKUP
, (°), (vÆ))

	)

1866 
	#sk_X509_LOOKUP_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_LOOKUP
, (°), (vÆ))

	)

1867 
	#sk_X509_LOOKUP_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_LOOKUP
, (°), (vÆ))

	)

1868 
	#sk_X509_LOOKUP_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_LOOKUP
, (°), (vÆ))

	)

1869 
	#sk_X509_LOOKUP_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_LOOKUP
, (°), (i))

	)

1870 
	#sk_X509_LOOKUP_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_LOOKUP
, (°), (±r))

	)

1871 
	#sk_X509_LOOKUP_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_LOOKUP
, (°), (vÆ), (i))

	)

1872 
	#sk_X509_LOOKUP_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_LOOKUP
, (°), (cmp))

	)

1873 
	#sk_X509_LOOKUP_dup
(
°
Ë
	`SKM_sk_dup
(
X509_LOOKUP
, st)

	)

1874 
	#sk_X509_LOOKUP_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_LOOKUP
, (°), (‰ì_func))

	)

1875 
	#sk_X509_LOOKUP_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_LOOKUP
, (°))

	)

1876 
	#sk_X509_LOOKUP_p›
(
°
Ë
	`SKM_sk_p›
(
X509_LOOKUP
, (°))

	)

1877 
	#sk_X509_LOOKUP_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_LOOKUP
, (°))

	)

1878 
	#sk_X509_LOOKUP_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_LOOKUP
, (°))

	)

1880 
	#sk_X509_NAME_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME
, (cmp))

	)

1881 
	#sk_X509_NAME_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME
)

	)

1882 
	#sk_X509_NAME_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME
, (°))

	)

1883 
	#sk_X509_NAME_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME
, (°))

	)

1884 
	#sk_X509_NAME_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME
, (°), (i))

	)

1885 
	#sk_X509_NAME_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME
, (°), (i), (vÆ))

	)

1886 
	#sk_X509_NAME_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME
, (°))

	)

1887 
	#sk_X509_NAME_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME
, (°), (vÆ))

	)

1888 
	#sk_X509_NAME_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME
, (°), (vÆ))

	)

1889 
	#sk_X509_NAME_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME
, (°), (vÆ))

	)

1890 
	#sk_X509_NAME_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME
, (°), (vÆ))

	)

1891 
	#sk_X509_NAME_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME
, (°), (i))

	)

1892 
	#sk_X509_NAME_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME
, (°), (±r))

	)

1893 
	#sk_X509_NAME_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME
, (°), (vÆ), (i))

	)

1894 
	#sk_X509_NAME_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME
, (°), (cmp))

	)

1895 
	#sk_X509_NAME_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME
, st)

	)

1896 
	#sk_X509_NAME_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME
, (°), (‰ì_func))

	)

1897 
	#sk_X509_NAME_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME
, (°))

	)

1898 
	#sk_X509_NAME_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME
, (°))

	)

1899 
	#sk_X509_NAME_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME
, (°))

	)

1900 
	#sk_X509_NAME_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME
, (°))

	)

1902 
	#sk_X509_NAME_ENTRY_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_NAME_ENTRY
, (cmp))

	)

1903 
	#sk_X509_NAME_ENTRY_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_NAME_ENTRY
)

	)

1904 
	#sk_X509_NAME_ENTRY_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_NAME_ENTRY
, (°))

	)

1905 
	#sk_X509_NAME_ENTRY_num
(
°
Ë
	`SKM_sk_num
(
X509_NAME_ENTRY
, (°))

	)

1906 
	#sk_X509_NAME_ENTRY_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_NAME_ENTRY
, (°), (i))

	)

1907 
	#sk_X509_NAME_ENTRY_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_NAME_ENTRY
, (°), (i), (vÆ))

	)

1908 
	#sk_X509_NAME_ENTRY_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_NAME_ENTRY
, (°))

	)

1909 
	#sk_X509_NAME_ENTRY_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1910 
	#sk_X509_NAME_ENTRY_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1911 
	#sk_X509_NAME_ENTRY_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1912 
	#sk_X509_NAME_ENTRY_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_NAME_ENTRY
, (°), (vÆ))

	)

1913 
	#sk_X509_NAME_ENTRY_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_NAME_ENTRY
, (°), (i))

	)

1914 
	#sk_X509_NAME_ENTRY_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_NAME_ENTRY
, (°), (±r))

	)

1915 
	#sk_X509_NAME_ENTRY_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_NAME_ENTRY
, (°), (vÆ), (i))

	)

1916 
	#sk_X509_NAME_ENTRY_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_NAME_ENTRY
, (°), (cmp))

	)

1917 
	#sk_X509_NAME_ENTRY_dup
(
°
Ë
	`SKM_sk_dup
(
X509_NAME_ENTRY
, st)

	)

1918 
	#sk_X509_NAME_ENTRY_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_NAME_ENTRY
, (°), (‰ì_func))

	)

1919 
	#sk_X509_NAME_ENTRY_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_NAME_ENTRY
, (°))

	)

1920 
	#sk_X509_NAME_ENTRY_p›
(
°
Ë
	`SKM_sk_p›
(
X509_NAME_ENTRY
, (°))

	)

1921 
	#sk_X509_NAME_ENTRY_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_NAME_ENTRY
, (°))

	)

1922 
	#sk_X509_NAME_ENTRY_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_NAME_ENTRY
, (°))

	)

1924 
	#sk_X509_OBJECT_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_OBJECT
, (cmp))

	)

1925 
	#sk_X509_OBJECT_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_OBJECT
)

	)

1926 
	#sk_X509_OBJECT_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_OBJECT
, (°))

	)

1927 
	#sk_X509_OBJECT_num
(
°
Ë
	`SKM_sk_num
(
X509_OBJECT
, (°))

	)

1928 
	#sk_X509_OBJECT_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_OBJECT
, (°), (i))

	)

1929 
	#sk_X509_OBJECT_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_OBJECT
, (°), (i), (vÆ))

	)

1930 
	#sk_X509_OBJECT_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_OBJECT
, (°))

	)

1931 
	#sk_X509_OBJECT_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_OBJECT
, (°), (vÆ))

	)

1932 
	#sk_X509_OBJECT_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_OBJECT
, (°), (vÆ))

	)

1933 
	#sk_X509_OBJECT_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_OBJECT
, (°), (vÆ))

	)

1934 
	#sk_X509_OBJECT_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_OBJECT
, (°), (vÆ))

	)

1935 
	#sk_X509_OBJECT_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_OBJECT
, (°), (i))

	)

1936 
	#sk_X509_OBJECT_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_OBJECT
, (°), (±r))

	)

1937 
	#sk_X509_OBJECT_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_OBJECT
, (°), (vÆ), (i))

	)

1938 
	#sk_X509_OBJECT_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_OBJECT
, (°), (cmp))

	)

1939 
	#sk_X509_OBJECT_dup
(
°
Ë
	`SKM_sk_dup
(
X509_OBJECT
, st)

	)

1940 
	#sk_X509_OBJECT_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_OBJECT
, (°), (‰ì_func))

	)

1941 
	#sk_X509_OBJECT_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_OBJECT
, (°))

	)

1942 
	#sk_X509_OBJECT_p›
(
°
Ë
	`SKM_sk_p›
(
X509_OBJECT
, (°))

	)

1943 
	#sk_X509_OBJECT_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_OBJECT
, (°))

	)

1944 
	#sk_X509_OBJECT_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_OBJECT
, (°))

	)

1946 
	#sk_X509_POLICY_DATA_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_DATA
, (cmp))

	)

1947 
	#sk_X509_POLICY_DATA_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_DATA
)

	)

1948 
	#sk_X509_POLICY_DATA_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_DATA
, (°))

	)

1949 
	#sk_X509_POLICY_DATA_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_DATA
, (°))

	)

1950 
	#sk_X509_POLICY_DATA_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_DATA
, (°), (i))

	)

1951 
	#sk_X509_POLICY_DATA_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_DATA
, (°), (i), (vÆ))

	)

1952 
	#sk_X509_POLICY_DATA_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_DATA
, (°))

	)

1953 
	#sk_X509_POLICY_DATA_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1954 
	#sk_X509_POLICY_DATA_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1955 
	#sk_X509_POLICY_DATA_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1956 
	#sk_X509_POLICY_DATA_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_DATA
, (°), (vÆ))

	)

1957 
	#sk_X509_POLICY_DATA_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_DATA
, (°), (i))

	)

1958 
	#sk_X509_POLICY_DATA_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_DATA
, (°), (±r))

	)

1959 
	#sk_X509_POLICY_DATA_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_DATA
, (°), (vÆ), (i))

	)

1960 
	#sk_X509_POLICY_DATA_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_DATA
, (°), (cmp))

	)

1961 
	#sk_X509_POLICY_DATA_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_DATA
, st)

	)

1962 
	#sk_X509_POLICY_DATA_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_DATA
, (°), (‰ì_func))

	)

1963 
	#sk_X509_POLICY_DATA_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_DATA
, (°))

	)

1964 
	#sk_X509_POLICY_DATA_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_DATA
, (°))

	)

1965 
	#sk_X509_POLICY_DATA_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_DATA
, (°))

	)

1966 
	#sk_X509_POLICY_DATA_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_DATA
, (°))

	)

1968 
	#sk_X509_POLICY_NODE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_POLICY_NODE
, (cmp))

	)

1969 
	#sk_X509_POLICY_NODE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_POLICY_NODE
)

	)

1970 
	#sk_X509_POLICY_NODE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_POLICY_NODE
, (°))

	)

1971 
	#sk_X509_POLICY_NODE_num
(
°
Ë
	`SKM_sk_num
(
X509_POLICY_NODE
, (°))

	)

1972 
	#sk_X509_POLICY_NODE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_POLICY_NODE
, (°), (i))

	)

1973 
	#sk_X509_POLICY_NODE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_POLICY_NODE
, (°), (i), (vÆ))

	)

1974 
	#sk_X509_POLICY_NODE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_POLICY_NODE
, (°))

	)

1975 
	#sk_X509_POLICY_NODE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1976 
	#sk_X509_POLICY_NODE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1977 
	#sk_X509_POLICY_NODE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1978 
	#sk_X509_POLICY_NODE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_POLICY_NODE
, (°), (vÆ))

	)

1979 
	#sk_X509_POLICY_NODE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_POLICY_NODE
, (°), (i))

	)

1980 
	#sk_X509_POLICY_NODE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_POLICY_NODE
, (°), (±r))

	)

1981 
	#sk_X509_POLICY_NODE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_POLICY_NODE
, (°), (vÆ), (i))

	)

1982 
	#sk_X509_POLICY_NODE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_POLICY_NODE
, (°), (cmp))

	)

1983 
	#sk_X509_POLICY_NODE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_POLICY_NODE
, st)

	)

1984 
	#sk_X509_POLICY_NODE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_POLICY_NODE
, (°), (‰ì_func))

	)

1985 
	#sk_X509_POLICY_NODE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_POLICY_NODE
, (°))

	)

1986 
	#sk_X509_POLICY_NODE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_POLICY_NODE
, (°))

	)

1987 
	#sk_X509_POLICY_NODE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_POLICY_NODE
, (°))

	)

1988 
	#sk_X509_POLICY_NODE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_POLICY_NODE
, (°))

	)

1990 
	#sk_X509_PURPOSE_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_PURPOSE
, (cmp))

	)

1991 
	#sk_X509_PURPOSE_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_PURPOSE
)

	)

1992 
	#sk_X509_PURPOSE_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_PURPOSE
, (°))

	)

1993 
	#sk_X509_PURPOSE_num
(
°
Ë
	`SKM_sk_num
(
X509_PURPOSE
, (°))

	)

1994 
	#sk_X509_PURPOSE_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_PURPOSE
, (°), (i))

	)

1995 
	#sk_X509_PURPOSE_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_PURPOSE
, (°), (i), (vÆ))

	)

1996 
	#sk_X509_PURPOSE_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_PURPOSE
, (°))

	)

1997 
	#sk_X509_PURPOSE_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_PURPOSE
, (°), (vÆ))

	)

1998 
	#sk_X509_PURPOSE_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_PURPOSE
, (°), (vÆ))

	)

1999 
	#sk_X509_PURPOSE_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_PURPOSE
, (°), (vÆ))

	)

2000 
	#sk_X509_PURPOSE_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_PURPOSE
, (°), (vÆ))

	)

2001 
	#sk_X509_PURPOSE_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_PURPOSE
, (°), (i))

	)

2002 
	#sk_X509_PURPOSE_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_PURPOSE
, (°), (±r))

	)

2003 
	#sk_X509_PURPOSE_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_PURPOSE
, (°), (vÆ), (i))

	)

2004 
	#sk_X509_PURPOSE_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_PURPOSE
, (°), (cmp))

	)

2005 
	#sk_X509_PURPOSE_dup
(
°
Ë
	`SKM_sk_dup
(
X509_PURPOSE
, st)

	)

2006 
	#sk_X509_PURPOSE_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_PURPOSE
, (°), (‰ì_func))

	)

2007 
	#sk_X509_PURPOSE_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_PURPOSE
, (°))

	)

2008 
	#sk_X509_PURPOSE_p›
(
°
Ë
	`SKM_sk_p›
(
X509_PURPOSE
, (°))

	)

2009 
	#sk_X509_PURPOSE_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_PURPOSE
, (°))

	)

2010 
	#sk_X509_PURPOSE_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_PURPOSE
, (°))

	)

2012 
	#sk_X509_REVOKED_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_REVOKED
, (cmp))

	)

2013 
	#sk_X509_REVOKED_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_REVOKED
)

	)

2014 
	#sk_X509_REVOKED_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_REVOKED
, (°))

	)

2015 
	#sk_X509_REVOKED_num
(
°
Ë
	`SKM_sk_num
(
X509_REVOKED
, (°))

	)

2016 
	#sk_X509_REVOKED_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_REVOKED
, (°), (i))

	)

2017 
	#sk_X509_REVOKED_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_REVOKED
, (°), (i), (vÆ))

	)

2018 
	#sk_X509_REVOKED_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_REVOKED
, (°))

	)

2019 
	#sk_X509_REVOKED_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_REVOKED
, (°), (vÆ))

	)

2020 
	#sk_X509_REVOKED_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_REVOKED
, (°), (vÆ))

	)

2021 
	#sk_X509_REVOKED_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_REVOKED
, (°), (vÆ))

	)

2022 
	#sk_X509_REVOKED_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_REVOKED
, (°), (vÆ))

	)

2023 
	#sk_X509_REVOKED_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_REVOKED
, (°), (i))

	)

2024 
	#sk_X509_REVOKED_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_REVOKED
, (°), (±r))

	)

2025 
	#sk_X509_REVOKED_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_REVOKED
, (°), (vÆ), (i))

	)

2026 
	#sk_X509_REVOKED_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_REVOKED
, (°), (cmp))

	)

2027 
	#sk_X509_REVOKED_dup
(
°
Ë
	`SKM_sk_dup
(
X509_REVOKED
, st)

	)

2028 
	#sk_X509_REVOKED_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_REVOKED
, (°), (‰ì_func))

	)

2029 
	#sk_X509_REVOKED_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_REVOKED
, (°))

	)

2030 
	#sk_X509_REVOKED_p›
(
°
Ë
	`SKM_sk_p›
(
X509_REVOKED
, (°))

	)

2031 
	#sk_X509_REVOKED_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_REVOKED
, (°))

	)

2032 
	#sk_X509_REVOKED_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_REVOKED
, (°))

	)

2034 
	#sk_X509_TRUST_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_TRUST
, (cmp))

	)

2035 
	#sk_X509_TRUST_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_TRUST
)

	)

2036 
	#sk_X509_TRUST_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_TRUST
, (°))

	)

2037 
	#sk_X509_TRUST_num
(
°
Ë
	`SKM_sk_num
(
X509_TRUST
, (°))

	)

2038 
	#sk_X509_TRUST_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_TRUST
, (°), (i))

	)

2039 
	#sk_X509_TRUST_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_TRUST
, (°), (i), (vÆ))

	)

2040 
	#sk_X509_TRUST_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_TRUST
, (°))

	)

2041 
	#sk_X509_TRUST_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_TRUST
, (°), (vÆ))

	)

2042 
	#sk_X509_TRUST_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_TRUST
, (°), (vÆ))

	)

2043 
	#sk_X509_TRUST_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_TRUST
, (°), (vÆ))

	)

2044 
	#sk_X509_TRUST_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_TRUST
, (°), (vÆ))

	)

2045 
	#sk_X509_TRUST_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_TRUST
, (°), (i))

	)

2046 
	#sk_X509_TRUST_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_TRUST
, (°), (±r))

	)

2047 
	#sk_X509_TRUST_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_TRUST
, (°), (vÆ), (i))

	)

2048 
	#sk_X509_TRUST_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_TRUST
, (°), (cmp))

	)

2049 
	#sk_X509_TRUST_dup
(
°
Ë
	`SKM_sk_dup
(
X509_TRUST
, st)

	)

2050 
	#sk_X509_TRUST_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_TRUST
, (°), (‰ì_func))

	)

2051 
	#sk_X509_TRUST_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_TRUST
, (°))

	)

2052 
	#sk_X509_TRUST_p›
(
°
Ë
	`SKM_sk_p›
(
X509_TRUST
, (°))

	)

2053 
	#sk_X509_TRUST_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_TRUST
, (°))

	)

2054 
	#sk_X509_TRUST_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_TRUST
, (°))

	)

2056 
	#sk_X509_VERIFY_PARAM_√w
(
cmp
Ë
	`SKM_sk_√w
(
X509_VERIFY_PARAM
, (cmp))

	)

2057 
	#sk_X509_VERIFY_PARAM_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
X509_VERIFY_PARAM
)

	)

2058 
	#sk_X509_VERIFY_PARAM_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
X509_VERIFY_PARAM
, (°))

	)

2059 
	#sk_X509_VERIFY_PARAM_num
(
°
Ë
	`SKM_sk_num
(
X509_VERIFY_PARAM
, (°))

	)

2060 
	#sk_X509_VERIFY_PARAM_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
X509_VERIFY_PARAM
, (°), (i))

	)

2061 
	#sk_X509_VERIFY_PARAM_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
X509_VERIFY_PARAM
, (°), (i), (vÆ))

	)

2062 
	#sk_X509_VERIFY_PARAM_zîo
(
°
Ë
	`SKM_sk_zîo
(
X509_VERIFY_PARAM
, (°))

	)

2063 
	#sk_X509_VERIFY_PARAM_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2064 
	#sk_X509_VERIFY_PARAM_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2065 
	#sk_X509_VERIFY_PARAM_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2066 
	#sk_X509_VERIFY_PARAM_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
X509_VERIFY_PARAM
, (°), (vÆ))

	)

2067 
	#sk_X509_VERIFY_PARAM_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
X509_VERIFY_PARAM
, (°), (i))

	)

2068 
	#sk_X509_VERIFY_PARAM_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
X509_VERIFY_PARAM
, (°), (±r))

	)

2069 
	#sk_X509_VERIFY_PARAM_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
X509_VERIFY_PARAM
, (°), (vÆ), (i))

	)

2070 
	#sk_X509_VERIFY_PARAM_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
X509_VERIFY_PARAM
, (°), (cmp))

	)

2071 
	#sk_X509_VERIFY_PARAM_dup
(
°
Ë
	`SKM_sk_dup
(
X509_VERIFY_PARAM
, st)

	)

2072 
	#sk_X509_VERIFY_PARAM_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
X509_VERIFY_PARAM
, (°), (‰ì_func))

	)

2073 
	#sk_X509_VERIFY_PARAM_shi·
(
°
Ë
	`SKM_sk_shi·
(
X509_VERIFY_PARAM
, (°))

	)

2074 
	#sk_X509_VERIFY_PARAM_p›
(
°
Ë
	`SKM_sk_p›
(
X509_VERIFY_PARAM
, (°))

	)

2075 
	#sk_X509_VERIFY_PARAM_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
X509_VERIFY_PARAM
, (°))

	)

2076 
	#sk_X509_VERIFY_PARAM_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
X509_VERIFY_PARAM
, (°))

	)

2078 
	#sk_nid_åùÀ_√w
(
cmp
Ë
	`SKM_sk_√w
(
nid_åùÀ
, (cmp))

	)

2079 
	#sk_nid_åùÀ_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
(
nid_åùÀ
)

	)

2080 
	#sk_nid_åùÀ_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
nid_åùÀ
, (°))

	)

2081 
	#sk_nid_åùÀ_num
(
°
Ë
	`SKM_sk_num
(
nid_åùÀ
, (°))

	)

2082 
	#sk_nid_åùÀ_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(
nid_åùÀ
, (°), (i))

	)

2083 
	#sk_nid_åùÀ_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(
nid_åùÀ
, (°), (i), (vÆ))

	)

2084 
	#sk_nid_åùÀ_zîo
(
°
Ë
	`SKM_sk_zîo
(
nid_åùÀ
, (°))

	)

2085 
	#sk_nid_åùÀ_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(
nid_åùÀ
, (°), (vÆ))

	)

2086 
	#sk_nid_åùÀ_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(
nid_åùÀ
, (°), (vÆ))

	)

2087 
	#sk_nid_åùÀ_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(
nid_åùÀ
, (°), (vÆ))

	)

2088 
	#sk_nid_åùÀ_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(
nid_åùÀ
, (°), (vÆ))

	)

2089 
	#sk_nid_åùÀ_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
nid_åùÀ
, (°), (i))

	)

2090 
	#sk_nid_åùÀ_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(
nid_åùÀ
, (°), (±r))

	)

2091 
	#sk_nid_åùÀ_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(
nid_åùÀ
, (°), (vÆ), (i))

	)

2092 
	#sk_nid_åùÀ_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(
nid_åùÀ
, (°), (cmp))

	)

2093 
	#sk_nid_åùÀ_dup
(
°
Ë
	`SKM_sk_dup
(
nid_åùÀ
, st)

	)

2094 
	#sk_nid_åùÀ_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(
nid_åùÀ
, (°), (‰ì_func))

	)

2095 
	#sk_nid_åùÀ_shi·
(
°
Ë
	`SKM_sk_shi·
(
nid_åùÀ
, (°))

	)

2096 
	#sk_nid_åùÀ_p›
(
°
Ë
	`SKM_sk_p›
(
nid_åùÀ
, (°))

	)

2097 
	#sk_nid_åùÀ_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
nid_åùÀ
, (°))

	)

2098 
	#sk_nid_åùÀ_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
nid_åùÀ
, (°))

	)

2100 
	#sk_void_√w
(
cmp
Ë
	`SKM_sk_√w
(, (cmp))

	)

2101 
	#sk_void_√w_nuŒ
(Ë
	`SKM_sk_√w_nuŒ
()

	)

2102 
	#sk_void_‰ì
(
°
Ë
	`SKM_sk_‰ì
(, (°))

	)

2103 
	#sk_void_num
(
°
Ë
	`SKM_sk_num
(, (°))

	)

2104 
	#sk_void_vÆue
(
°
, 
i
Ë
	`SKM_sk_vÆue
(, (°), (i))

	)

2105 
	#sk_void_£t
(
°
, 
i
, 
vÆ
Ë
	`SKM_sk_£t
(, (°), (i), (vÆ))

	)

2106 
	#sk_void_zîo
(
°
Ë
	`SKM_sk_zîo
(, (°))

	)

2107 
	#sk_void_push
(
°
, 
vÆ
Ë
	`SKM_sk_push
(, (°), (vÆ))

	)

2108 
	#sk_void_unshi·
(
°
, 
vÆ
Ë
	`SKM_sk_unshi·
(, (°), (vÆ))

	)

2109 
	#sk_void_föd
(
°
, 
vÆ
Ë
	`SKM_sk_föd
(, (°), (vÆ))

	)

2110 
	#sk_void_föd_ex
(
°
, 
vÆ
Ë
	`SKM_sk_föd_ex
(, (°), (vÆ))

	)

2111 
	#sk_void_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(, (°), (i))

	)

2112 
	#sk_void_dñëe_±r
(
°
, 
±r
Ë
	`SKM_sk_dñëe_±r
(, (°), (±r))

	)

2113 
	#sk_void_ö£π
(
°
, 
vÆ
, 
i
Ë
	`SKM_sk_ö£π
(, (°), (vÆ), (i))

	)

2114 
	#sk_void_£t_cmp_func
(
°
, 
cmp
Ë
	`SKM_sk_£t_cmp_func
(, (°), (cmp))

	)

2115 
	#sk_void_dup
(
°
Ë
	`SKM_sk_dup
(, st)

	)

2116 
	#sk_void_p›_‰ì
(
°
, 
‰ì_func
Ë
	`SKM_sk_p›_‰ì
(, (°), (‰ì_func))

	)

2117 
	#sk_void_shi·
(
°
Ë
	`SKM_sk_shi·
(, (°))

	)

2118 
	#sk_void_p›
(
°
Ë
	`SKM_sk_p›
(, (°))

	)

2119 
	#sk_void_s‹t
(
°
Ë
	`SKM_sk_s‹t
(, (°))

	)

2120 
	#sk_void_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(, (°))

	)

2122 
	#sk_OPENSSL_STRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2123 
	#sk_OPENSSL_STRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_STRING
Ë*)
	`sk_√w_nuŒ
())

	)

2124 
	#sk_OPENSSL_STRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2125 
	#sk_OPENSSL_STRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2126 
	#sk_OPENSSL_STRING_vÆue
(
°
, 
i
Ë((
OPENSSL_STRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), i))

	)

2127 
	#sk_OPENSSL_STRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_STRING
, st)

	)

2128 
	#sk_OPENSSL_STRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_STRING, fªe_func))

	)

2129 
	#sk_OPENSSL_STRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2130 
	#sk_OPENSSL_STRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_STRING
, st)

	)

2131 
	#sk_OPENSSL_STRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2132 
	#sk_OPENSSL_STRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_STRING
, (°))

	)

2133 
	#sk_OPENSSL_STRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2134 
	#sk_OPENSSL_STRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_STRING
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2135 
	#sk_OPENSSL_STRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_STRING
, (°), (i))

	)

2136 
	#sk_OPENSSL_STRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_STRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_STRING, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2137 
	#sk_OPENSSL_STRING_£t_cmp_func
(
°
, 
cmp
) \

2139 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2140 
	#sk_OPENSSL_STRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_STRING
, st)

	)

2141 
	#sk_OPENSSL_STRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_STRING
, (°))

	)

2142 
	#sk_OPENSSL_STRING_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_STRING
, st))

	)

2143 
	#sk_OPENSSL_STRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_STRING
, (°))

	)

2144 
	#sk_OPENSSL_STRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_STRING
, (°))

	)

2147 
	#sk_OPENSSL_BLOCK_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(, cmp)))

	)

2148 
	#sk_OPENSSL_BLOCK_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_BLOCK
Ë*)
	`sk_√w_nuŒ
())

	)

2149 
	#sk_OPENSSL_BLOCK_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2150 
	#sk_OPENSSL_BLOCK_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2151 
	#sk_OPENSSL_BLOCK_vÆue
(
°
, 
i
Ë((
OPENSSL_BLOCK
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), i))

	)

2152 
	#sk_OPENSSL_BLOCK_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_BLOCK
, st)

	)

2153 
	#sk_OPENSSL_BLOCK_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_BLOCK, fªe_func))

	)

2154 
	#sk_OPENSSL_BLOCK_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ), i)

	)

2155 
	#sk_OPENSSL_BLOCK_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_BLOCK
, st)

	)

2156 
	#sk_OPENSSL_BLOCK_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), i, 
	`CHECKED_PTR_OF
(, vÆ))

	)

2157 
	#sk_OPENSSL_BLOCK_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_BLOCK
, (°))

	)

2158 
	#sk_OPENSSL_BLOCK_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st), 
	`CHECKED_PTR_OF
(, vÆ))

	)

2159 
	#sk_OPENSSL_BLOCK_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_BLOCK
), st), CHECKED_CONST_PTR_OF(, vÆ))

	)

2160 
	#sk_OPENSSL_BLOCK_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_BLOCK
, (°), (i))

	)

2161 
	#sk_OPENSSL_BLOCK_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_BLOCK
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_BLOCK, st), 
	`CHECKED_PTR_OF
(,Öå))

	)

2162 
	#sk_OPENSSL_BLOCK_£t_cmp_func
(
°
, 
cmp
) \

2164 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(, 
cmp
)))

	)

2165 
	#sk_OPENSSL_BLOCK_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_BLOCK
, st)

	)

2166 
	#sk_OPENSSL_BLOCK_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_BLOCK
, (°))

	)

2167 
	#sk_OPENSSL_BLOCK_p›
(
°
Ë(*)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_BLOCK
, st))

	)

2168 
	#sk_OPENSSL_BLOCK_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_BLOCK
, (°))

	)

2169 
	#sk_OPENSSL_BLOCK_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_BLOCK
, (°))

	)

2172 
	#sk_OPENSSL_PSTRING_√w
(
cmp
Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w
(
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, cmp)))

	)

2173 
	#sk_OPENSSL_PSTRING_√w_nuŒ
(Ë((
	`STACK_OF
(
OPENSSL_PSTRING
Ë*)
	`sk_√w_nuŒ
())

	)

2174 
	#sk_OPENSSL_PSTRING_push
(
°
, 
vÆ
Ë
	`sk_push
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2175 
	#sk_OPENSSL_PSTRING_föd
(
°
, 
vÆ
Ë
	`sk_föd
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2176 
	#sk_OPENSSL_PSTRING_vÆue
(
°
, 
i
Ë((
OPENSSL_PSTRING
)
	`sk_vÆue
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), i))

	)

2177 
	#sk_OPENSSL_PSTRING_num
(
°
Ë
	`SKM_sk_num
(
OPENSSL_PSTRING
, st)

	)

2178 
	#sk_OPENSSL_PSTRING_p›_‰ì
(
°
, 
‰ì_func
Ë
	`sk_p›_‰ì
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_SK_FREE_FUNC2
(OPENSSL_PSTRING, fªe_func))

	)

2179 
	#sk_OPENSSL_PSTRING_ö£π
(
°
, 
vÆ
, 
i
Ë
	`sk_ö£π
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ), i)

	)

2180 
	#sk_OPENSSL_PSTRING_‰ì
(
°
Ë
	`SKM_sk_‰ì
(
OPENSSL_PSTRING
, st)

	)

2181 
	#sk_OPENSSL_PSTRING_£t
(
°
, 
i
, 
vÆ
Ë
	`sk_£t
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), i, 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2182 
	#sk_OPENSSL_PSTRING_zîo
(
°
Ë
	`SKM_sk_zîo
(
OPENSSL_PSTRING
, (°))

	)

2183 
	#sk_OPENSSL_PSTRING_unshi·
(
°
, 
vÆ
Ë
	`sk_unshi·
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
, vÆ))

	)

2184 
	#sk_OPENSSL_PSTRING_föd_ex
(
°
, 
vÆ
Ë
	`sk_föd_ex
((
_STACK
 *)
	`CHECKED_CONST_PTR_OF
(
	`STACK_OF
(
OPENSSL_PSTRING
), st), CHECKED_CONST_PTR_OF(
OPENSSL_STRING
, vÆ))

	)

2185 
	#sk_OPENSSL_PSTRING_dñëe
(
°
, 
i
Ë
	`SKM_sk_dñëe
(
OPENSSL_PSTRING
, (°), (i))

	)

2186 
	#sk_OPENSSL_PSTRING_dñëe_±r
(
°
, 
±r
Ë(
OPENSSL_PSTRING
 *)
	`sk_dñëe_±r
(
	`CHECKED_STACK_OF
(OPENSSL_PSTRING, st), 
	`CHECKED_PTR_OF
(
OPENSSL_STRING
,Öå))

	)

2187 
	#sk_OPENSSL_PSTRING_£t_cmp_func
(
°
, 
cmp
) \

2188 (((*)(c⁄° 
OPENSSL_STRING
 * const *,const OPENSSL_STRING * const *)) \

2189 
	`sk_£t_cmp_func
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, 
°
), 
	`CHECKED_SK_CMP_FUNC
(
OPENSSL_STRING
, 
cmp
)))

	)

2190 
	#sk_OPENSSL_PSTRING_dup
(
°
Ë
	`SKM_sk_dup
(
OPENSSL_PSTRING
, st)

	)

2191 
	#sk_OPENSSL_PSTRING_shi·
(
°
Ë
	`SKM_sk_shi·
(
OPENSSL_PSTRING
, (°))

	)

2192 
	#sk_OPENSSL_PSTRING_p›
(
°
Ë(
OPENSSL_STRING
 *)
	`sk_p›
(
	`CHECKED_STACK_OF
(
OPENSSL_PSTRING
, st))

	)

2193 
	#sk_OPENSSL_PSTRING_s‹t
(
°
Ë
	`SKM_sk_s‹t
(
OPENSSL_PSTRING
, (°))

	)

2194 
	#sk_OPENSSL_PSTRING_is_s‹ãd
(
°
Ë
	`SKM_sk_is_s‹ãd
(
OPENSSL_PSTRING
, (°))

	)

2197 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2198 
	`SKM_ASN1_SET_OF_d2i
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2199 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2200 
	`SKM_ASN1_SET_OF_i2d
(
ACCESS_DESCRIPTION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2201 
	#ASN1_£q_∑ck_ACCESS_DESCRIPTION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2202 
	`SKM_ASN1_£q_∑ck
(
ACCESS_DESCRIPTION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2203 
	#ASN1_£q_u≈ack_ACCESS_DESCRIPTION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2204 
	`SKM_ASN1_£q_u≈ack
(
ACCESS_DESCRIPTION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2206 
	#d2i_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2207 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_INTEGER
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2208 
	#i2d_ASN1_SET_OF_ASN1_INTEGER
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2209 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_INTEGER
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2210 
	#ASN1_£q_∑ck_ASN1_INTEGER
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2211 
	`SKM_ASN1_£q_∑ck
(
ASN1_INTEGER
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2212 
	#ASN1_£q_u≈ack_ASN1_INTEGER
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2213 
	`SKM_ASN1_£q_u≈ack
(
ASN1_INTEGER
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2215 
	#d2i_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2216 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_OBJECT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2217 
	#i2d_ASN1_SET_OF_ASN1_OBJECT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2218 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_OBJECT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2219 
	#ASN1_£q_∑ck_ASN1_OBJECT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2220 
	`SKM_ASN1_£q_∑ck
(
ASN1_OBJECT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2221 
	#ASN1_£q_u≈ack_ASN1_OBJECT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2222 
	`SKM_ASN1_£q_u≈ack
(
ASN1_OBJECT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2224 
	#d2i_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2225 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_TYPE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2226 
	#i2d_ASN1_SET_OF_ASN1_TYPE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2227 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_TYPE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2228 
	#ASN1_£q_∑ck_ASN1_TYPE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2229 
	`SKM_ASN1_£q_∑ck
(
ASN1_TYPE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2230 
	#ASN1_£q_u≈ack_ASN1_TYPE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2231 
	`SKM_ASN1_£q_u≈ack
(
ASN1_TYPE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2233 
	#d2i_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2234 
	`SKM_ASN1_SET_OF_d2i
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2235 
	#i2d_ASN1_SET_OF_ASN1_UTF8STRING
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2236 
	`SKM_ASN1_SET_OF_i2d
(
ASN1_UTF8STRING
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2237 
	#ASN1_£q_∑ck_ASN1_UTF8STRING
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2238 
	`SKM_ASN1_£q_∑ck
(
ASN1_UTF8STRING
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2239 
	#ASN1_£q_u≈ack_ASN1_UTF8STRING
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2240 
	`SKM_ASN1_£q_u≈ack
(
ASN1_UTF8STRING
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2242 
	#d2i_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2243 
	`SKM_ASN1_SET_OF_d2i
(
DIST_POINT
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2244 
	#i2d_ASN1_SET_OF_DIST_POINT
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2245 
	`SKM_ASN1_SET_OF_i2d
(
DIST_POINT
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2246 
	#ASN1_£q_∑ck_DIST_POINT
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2247 
	`SKM_ASN1_£q_∑ck
(
DIST_POINT
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2248 
	#ASN1_£q_u≈ack_DIST_POINT
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2249 
	`SKM_ASN1_£q_u≈ack
(
DIST_POINT
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2251 
	#d2i_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2252 
	`SKM_ASN1_SET_OF_d2i
(
ESS_CERT_ID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2253 
	#i2d_ASN1_SET_OF_ESS_CERT_ID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2254 
	`SKM_ASN1_SET_OF_i2d
(
ESS_CERT_ID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2255 
	#ASN1_£q_∑ck_ESS_CERT_ID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2256 
	`SKM_ASN1_£q_∑ck
(
ESS_CERT_ID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2257 
	#ASN1_£q_u≈ack_ESS_CERT_ID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2258 
	`SKM_ASN1_£q_u≈ack
(
ESS_CERT_ID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2260 
	#d2i_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2261 
	`SKM_ASN1_SET_OF_d2i
(
EVP_MD
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2262 
	#i2d_ASN1_SET_OF_EVP_MD
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2263 
	`SKM_ASN1_SET_OF_i2d
(
EVP_MD
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2264 
	#ASN1_£q_∑ck_EVP_MD
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2265 
	`SKM_ASN1_£q_∑ck
(
EVP_MD
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2266 
	#ASN1_£q_u≈ack_EVP_MD
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2267 
	`SKM_ASN1_£q_u≈ack
(
EVP_MD
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2269 
	#d2i_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2270 
	`SKM_ASN1_SET_OF_d2i
(
GENERAL_NAME
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2271 
	#i2d_ASN1_SET_OF_GENERAL_NAME
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2272 
	`SKM_ASN1_SET_OF_i2d
(
GENERAL_NAME
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2273 
	#ASN1_£q_∑ck_GENERAL_NAME
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2274 
	`SKM_ASN1_£q_∑ck
(
GENERAL_NAME
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2275 
	#ASN1_£q_u≈ack_GENERAL_NAME
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2276 
	`SKM_ASN1_£q_u≈ack
(
GENERAL_NAME
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2278 
	#d2i_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2279 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_ONEREQ
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2280 
	#i2d_ASN1_SET_OF_OCSP_ONEREQ
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2281 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_ONEREQ
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2282 
	#ASN1_£q_∑ck_OCSP_ONEREQ
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2283 
	`SKM_ASN1_£q_∑ck
(
OCSP_ONEREQ
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2284 
	#ASN1_£q_u≈ack_OCSP_ONEREQ
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2285 
	`SKM_ASN1_£q_u≈ack
(
OCSP_ONEREQ
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2287 
	#d2i_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2288 
	`SKM_ASN1_SET_OF_d2i
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2289 
	#i2d_ASN1_SET_OF_OCSP_SINGLERESP
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2290 
	`SKM_ASN1_SET_OF_i2d
(
OCSP_SINGLERESP
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2291 
	#ASN1_£q_∑ck_OCSP_SINGLERESP
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2292 
	`SKM_ASN1_£q_∑ck
(
OCSP_SINGLERESP
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2293 
	#ASN1_£q_u≈ack_OCSP_SINGLERESP
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2294 
	`SKM_ASN1_£q_u≈ack
(
OCSP_SINGLERESP
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2296 
	#d2i_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2297 
	`SKM_ASN1_SET_OF_d2i
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2298 
	#i2d_ASN1_SET_OF_PKCS12_SAFEBAG
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2299 
	`SKM_ASN1_SET_OF_i2d
(
PKCS12_SAFEBAG
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2300 
	#ASN1_£q_∑ck_PKCS12_SAFEBAG
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2301 
	`SKM_ASN1_£q_∑ck
(
PKCS12_SAFEBAG
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2302 
	#ASN1_£q_u≈ack_PKCS12_SAFEBAG
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2303 
	`SKM_ASN1_£q_u≈ack
(
PKCS12_SAFEBAG
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2305 
	#d2i_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2306 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2307 
	#i2d_ASN1_SET_OF_PKCS7
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2308 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2309 
	#ASN1_£q_∑ck_PKCS7
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2310 
	`SKM_ASN1_£q_∑ck
(
PKCS7
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2311 
	#ASN1_£q_u≈ack_PKCS7
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2312 
	`SKM_ASN1_£q_u≈ack
(
PKCS7
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2314 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2315 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2316 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2317 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_RECIP_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2318 
	#ASN1_£q_∑ck_PKCS7_RECIP_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2319 
	`SKM_ASN1_£q_∑ck
(
PKCS7_RECIP_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2320 
	#ASN1_£q_u≈ack_PKCS7_RECIP_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2321 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_RECIP_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2323 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2324 
	`SKM_ASN1_SET_OF_d2i
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2325 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2326 
	`SKM_ASN1_SET_OF_i2d
(
PKCS7_SIGNER_INFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2327 
	#ASN1_£q_∑ck_PKCS7_SIGNER_INFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2328 
	`SKM_ASN1_£q_∑ck
(
PKCS7_SIGNER_INFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2329 
	#ASN1_£q_u≈ack_PKCS7_SIGNER_INFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2330 
	`SKM_ASN1_£q_u≈ack
(
PKCS7_SIGNER_INFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2332 
	#d2i_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2333 
	`SKM_ASN1_SET_OF_d2i
(
POLICYINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2334 
	#i2d_ASN1_SET_OF_POLICYINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2335 
	`SKM_ASN1_SET_OF_i2d
(
POLICYINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2336 
	#ASN1_£q_∑ck_POLICYINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2337 
	`SKM_ASN1_£q_∑ck
(
POLICYINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2338 
	#ASN1_£q_u≈ack_POLICYINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2339 
	`SKM_ASN1_£q_u≈ack
(
POLICYINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2341 
	#d2i_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2342 
	`SKM_ASN1_SET_OF_d2i
(
POLICYQUALINFO
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2343 
	#i2d_ASN1_SET_OF_POLICYQUALINFO
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2344 
	`SKM_ASN1_SET_OF_i2d
(
POLICYQUALINFO
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2345 
	#ASN1_£q_∑ck_POLICYQUALINFO
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2346 
	`SKM_ASN1_£q_∑ck
(
POLICYQUALINFO
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2347 
	#ASN1_£q_u≈ack_POLICYQUALINFO
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2348 
	`SKM_ASN1_£q_u≈ack
(
POLICYQUALINFO
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2350 
	#d2i_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2351 
	`SKM_ASN1_SET_OF_d2i
(
SXNETID
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2352 
	#i2d_ASN1_SET_OF_SXNETID
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2353 
	`SKM_ASN1_SET_OF_i2d
(
SXNETID
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2354 
	#ASN1_£q_∑ck_SXNETID
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2355 
	`SKM_ASN1_£q_∑ck
(
SXNETID
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2356 
	#ASN1_£q_u≈ack_SXNETID
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2357 
	`SKM_ASN1_£q_u≈ack
(
SXNETID
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2359 
	#d2i_ASN1_SET_OF_X509
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2360 
	`SKM_ASN1_SET_OF_d2i
(
X509
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2361 
	#i2d_ASN1_SET_OF_X509
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2362 
	`SKM_ASN1_SET_OF_i2d
(
X509
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2363 
	#ASN1_£q_∑ck_X509
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2364 
	`SKM_ASN1_£q_∑ck
(
X509
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2365 
	#ASN1_£q_u≈ack_X509
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2366 
	`SKM_ASN1_£q_u≈ack
(
X509
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2368 
	#d2i_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2369 
	`SKM_ASN1_SET_OF_d2i
(
X509_ALGOR
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2370 
	#i2d_ASN1_SET_OF_X509_ALGOR
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2371 
	`SKM_ASN1_SET_OF_i2d
(
X509_ALGOR
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2372 
	#ASN1_£q_∑ck_X509_ALGOR
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2373 
	`SKM_ASN1_£q_∑ck
(
X509_ALGOR
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2374 
	#ASN1_£q_u≈ack_X509_ALGOR
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2375 
	`SKM_ASN1_£q_u≈ack
(
X509_ALGOR
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2377 
	#d2i_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2378 
	`SKM_ASN1_SET_OF_d2i
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2379 
	#i2d_ASN1_SET_OF_X509_ATTRIBUTE
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2380 
	`SKM_ASN1_SET_OF_i2d
(
X509_ATTRIBUTE
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2381 
	#ASN1_£q_∑ck_X509_ATTRIBUTE
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2382 
	`SKM_ASN1_£q_∑ck
(
X509_ATTRIBUTE
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2383 
	#ASN1_£q_u≈ack_X509_ATTRIBUTE
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2384 
	`SKM_ASN1_£q_u≈ack
(
X509_ATTRIBUTE
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2386 
	#d2i_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2387 
	`SKM_ASN1_SET_OF_d2i
(
X509_CRL
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2388 
	#i2d_ASN1_SET_OF_X509_CRL
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2389 
	`SKM_ASN1_SET_OF_i2d
(
X509_CRL
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2390 
	#ASN1_£q_∑ck_X509_CRL
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2391 
	`SKM_ASN1_£q_∑ck
(
X509_CRL
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2392 
	#ASN1_£q_u≈ack_X509_CRL
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2393 
	`SKM_ASN1_£q_u≈ack
(
X509_CRL
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2395 
	#d2i_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2396 
	`SKM_ASN1_SET_OF_d2i
(
X509_EXTENSION
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2397 
	#i2d_ASN1_SET_OF_X509_EXTENSION
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2398 
	`SKM_ASN1_SET_OF_i2d
(
X509_EXTENSION
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2399 
	#ASN1_£q_∑ck_X509_EXTENSION
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2400 
	`SKM_ASN1_£q_∑ck
(
X509_EXTENSION
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2401 
	#ASN1_£q_u≈ack_X509_EXTENSION
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2402 
	`SKM_ASN1_£q_u≈ack
(
X509_EXTENSION
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2404 
	#d2i_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2405 
	`SKM_ASN1_SET_OF_d2i
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2406 
	#i2d_ASN1_SET_OF_X509_NAME_ENTRY
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2407 
	`SKM_ASN1_SET_OF_i2d
(
X509_NAME_ENTRY
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2408 
	#ASN1_£q_∑ck_X509_NAME_ENTRY
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2409 
	`SKM_ASN1_£q_∑ck
(
X509_NAME_ENTRY
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2410 
	#ASN1_£q_u≈ack_X509_NAME_ENTRY
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2411 
	`SKM_ASN1_£q_u≈ack
(
X509_NAME_ENTRY
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2413 
	#d2i_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
Àngth
, 
d2i_func
, 
‰ì_func
, 
ex_èg
, 
ex_˛ass
) \

2414 
	`SKM_ASN1_SET_OF_d2i
(
X509_REVOKED
, (
°
), (
µ
), (
Àngth
), (
d2i_func
), (
‰ì_func
), (
ex_èg
), (
ex_˛ass
))

	)

2415 
	#i2d_ASN1_SET_OF_X509_REVOKED
(
°
, 
µ
, 
i2d_func
, 
ex_èg
, 
ex_˛ass
, 
is_£t
) \

2416 
	`SKM_ASN1_SET_OF_i2d
(
X509_REVOKED
, (
°
), (
µ
), (
i2d_func
), (
ex_èg
), (
ex_˛ass
), (
is_£t
))

	)

2417 
	#ASN1_£q_∑ck_X509_REVOKED
(
°
, 
i2d_func
, 
buf
, 
Àn
) \

2418 
	`SKM_ASN1_£q_∑ck
(
X509_REVOKED
, (
°
), (
i2d_func
), (
buf
), (
Àn
))

	)

2419 
	#ASN1_£q_u≈ack_X509_REVOKED
(
buf
, 
Àn
, 
d2i_func
, 
‰ì_func
) \

2420 
	`SKM_ASN1_£q_u≈ack
(
X509_REVOKED
, (
buf
), (
Àn
), (
d2i_func
), (
‰ì_func
))

	)

2422 
	#PKCS12_de¸y±_d2i_PKCS12_SAFEBAG
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2423 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS12_SAFEBAG
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2425 
	#PKCS12_de¸y±_d2i_PKCS7
(
Æg‹
, 
d2i_func
, 
‰ì_func
, 
∑ss
, 
∑s¶í
, 
o˘
, 
£q
) \

2426 
	`SKM_PKCS12_de¸y±_d2i
(
PKCS7
, (
Æg‹
), (
d2i_func
), (
‰ì_func
), (
∑ss
), (
∑s¶í
), (
o˘
), (
£q
))

	)

2428 
	#lh_ADDED_OBJ_√w
(Ë
	`LHM_lh_√w
(
ADDED_OBJ
,
added_obj
)

	)

2429 
	#lh_ADDED_OBJ_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ADDED_OBJ
,lh,ö°)

	)

2430 
	#lh_ADDED_OBJ_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ADDED_OBJ
,lh,ö°)

	)

2431 
	#lh_ADDED_OBJ_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ADDED_OBJ
,lh,ö°)

	)

2432 
	#lh_ADDED_OBJ_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ADDED_OBJ
,lh,‚)

	)

2433 
	#lh_ADDED_OBJ_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2434 
	`LHM_lh_dﬂŒ_¨g
(
ADDED_OBJ
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2435 
	#lh_ADDED_OBJ_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ADDED_OBJ
,lh)

	)

2436 
	#lh_ADDED_OBJ_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ADDED_OBJ
,lh)

	)

2437 
	#lh_ADDED_OBJ_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ADDED_OBJ
,lh)

	)

2438 
	#lh_ADDED_OBJ_node_°©s_bio
(
lh
,
out
) \

2439 
	`LHM_lh_node_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2440 
	#lh_ADDED_OBJ_node_ußge_°©s_bio
(
lh
,
out
) \

2441 
	`LHM_lh_node_ußge_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2442 
	#lh_ADDED_OBJ_°©s_bio
(
lh
,
out
) \

2443 
	`LHM_lh_°©s_bio
(
ADDED_OBJ
,
lh
,
out
)

	)

2444 
	#lh_ADDED_OBJ_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ADDED_OBJ
,lh)

	)

2446 
	#lh_APP_INFO_√w
(Ë
	`LHM_lh_√w
(
APP_INFO
,
≠p_öfo
)

	)

2447 
	#lh_APP_INFO_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
APP_INFO
,lh,ö°)

	)

2448 
	#lh_APP_INFO_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
APP_INFO
,lh,ö°)

	)

2449 
	#lh_APP_INFO_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
APP_INFO
,lh,ö°)

	)

2450 
	#lh_APP_INFO_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
APP_INFO
,lh,‚)

	)

2451 
	#lh_APP_INFO_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2452 
	`LHM_lh_dﬂŒ_¨g
(
APP_INFO
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2453 
	#lh_APP_INFO_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
APP_INFO
,lh)

	)

2454 
	#lh_APP_INFO_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
APP_INFO
,lh)

	)

2455 
	#lh_APP_INFO_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
APP_INFO
,lh)

	)

2456 
	#lh_APP_INFO_node_°©s_bio
(
lh
,
out
) \

2457 
	`LHM_lh_node_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2458 
	#lh_APP_INFO_node_ußge_°©s_bio
(
lh
,
out
) \

2459 
	`LHM_lh_node_ußge_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2460 
	#lh_APP_INFO_°©s_bio
(
lh
,
out
) \

2461 
	`LHM_lh_°©s_bio
(
APP_INFO
,
lh
,
out
)

	)

2462 
	#lh_APP_INFO_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
APP_INFO
,lh)

	)

2464 
	#lh_CONF_VALUE_√w
(Ë
	`LHM_lh_√w
(
CONF_VALUE
,
c⁄f_vÆue
)

	)

2465 
	#lh_CONF_VALUE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
CONF_VALUE
,lh,ö°)

	)

2466 
	#lh_CONF_VALUE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
CONF_VALUE
,lh,ö°)

	)

2467 
	#lh_CONF_VALUE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
CONF_VALUE
,lh,ö°)

	)

2468 
	#lh_CONF_VALUE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
CONF_VALUE
,lh,‚)

	)

2469 
	#lh_CONF_VALUE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2470 
	`LHM_lh_dﬂŒ_¨g
(
CONF_VALUE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2471 
	#lh_CONF_VALUE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
CONF_VALUE
,lh)

	)

2472 
	#lh_CONF_VALUE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
CONF_VALUE
,lh)

	)

2473 
	#lh_CONF_VALUE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
CONF_VALUE
,lh)

	)

2474 
	#lh_CONF_VALUE_node_°©s_bio
(
lh
,
out
) \

2475 
	`LHM_lh_node_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2476 
	#lh_CONF_VALUE_node_ußge_°©s_bio
(
lh
,
out
) \

2477 
	`LHM_lh_node_ußge_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2478 
	#lh_CONF_VALUE_°©s_bio
(
lh
,
out
) \

2479 
	`LHM_lh_°©s_bio
(
CONF_VALUE
,
lh
,
out
)

	)

2480 
	#lh_CONF_VALUE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
CONF_VALUE
,lh)

	)

2482 
	#lh_ENGINE_PILE_√w
(Ë
	`LHM_lh_√w
(
ENGINE_PILE
,
ígöe_pûe
)

	)

2483 
	#lh_ENGINE_PILE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ENGINE_PILE
,lh,ö°)

	)

2484 
	#lh_ENGINE_PILE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ENGINE_PILE
,lh,ö°)

	)

2485 
	#lh_ENGINE_PILE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ENGINE_PILE
,lh,ö°)

	)

2486 
	#lh_ENGINE_PILE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ENGINE_PILE
,lh,‚)

	)

2487 
	#lh_ENGINE_PILE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2488 
	`LHM_lh_dﬂŒ_¨g
(
ENGINE_PILE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2489 
	#lh_ENGINE_PILE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ENGINE_PILE
,lh)

	)

2490 
	#lh_ENGINE_PILE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ENGINE_PILE
,lh)

	)

2491 
	#lh_ENGINE_PILE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ENGINE_PILE
,lh)

	)

2492 
	#lh_ENGINE_PILE_node_°©s_bio
(
lh
,
out
) \

2493 
	`LHM_lh_node_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2494 
	#lh_ENGINE_PILE_node_ußge_°©s_bio
(
lh
,
out
) \

2495 
	`LHM_lh_node_ußge_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2496 
	#lh_ENGINE_PILE_°©s_bio
(
lh
,
out
) \

2497 
	`LHM_lh_°©s_bio
(
ENGINE_PILE
,
lh
,
out
)

	)

2498 
	#lh_ENGINE_PILE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ENGINE_PILE
,lh)

	)

2500 
	#lh_ERR_STATE_√w
(Ë
	`LHM_lh_√w
(
ERR_STATE
,
îr_°©e
)

	)

2501 
	#lh_ERR_STATE_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STATE
,lh,ö°)

	)

2502 
	#lh_ERR_STATE_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STATE
,lh,ö°)

	)

2503 
	#lh_ERR_STATE_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STATE
,lh,ö°)

	)

2504 
	#lh_ERR_STATE_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STATE
,lh,‚)

	)

2505 
	#lh_ERR_STATE_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2506 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STATE
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2507 
	#lh_ERR_STATE_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STATE
,lh)

	)

2508 
	#lh_ERR_STATE_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STATE
,lh)

	)

2509 
	#lh_ERR_STATE_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STATE
,lh)

	)

2510 
	#lh_ERR_STATE_node_°©s_bio
(
lh
,
out
) \

2511 
	`LHM_lh_node_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2512 
	#lh_ERR_STATE_node_ußge_°©s_bio
(
lh
,
out
) \

2513 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2514 
	#lh_ERR_STATE_°©s_bio
(
lh
,
out
) \

2515 
	`LHM_lh_°©s_bio
(
ERR_STATE
,
lh
,
out
)

	)

2516 
	#lh_ERR_STATE_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STATE
,lh)

	)

2518 
	#lh_ERR_STRING_DATA_√w
(Ë
	`LHM_lh_√w
(
ERR_STRING_DATA
,
îr_°rög_d©a
)

	)

2519 
	#lh_ERR_STRING_DATA_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
ERR_STRING_DATA
,lh,ö°)

	)

2520 
	#lh_ERR_STRING_DATA_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
ERR_STRING_DATA
,lh,ö°)

	)

2521 
	#lh_ERR_STRING_DATA_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
ERR_STRING_DATA
,lh,ö°)

	)

2522 
	#lh_ERR_STRING_DATA_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
ERR_STRING_DATA
,lh,‚)

	)

2523 
	#lh_ERR_STRING_DATA_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2524 
	`LHM_lh_dﬂŒ_¨g
(
ERR_STRING_DATA
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2525 
	#lh_ERR_STRING_DATA_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
ERR_STRING_DATA
,lh)

	)

2526 
	#lh_ERR_STRING_DATA_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
ERR_STRING_DATA
,lh)

	)

2527 
	#lh_ERR_STRING_DATA_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
ERR_STRING_DATA
,lh)

	)

2528 
	#lh_ERR_STRING_DATA_node_°©s_bio
(
lh
,
out
) \

2529 
	`LHM_lh_node_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2530 
	#lh_ERR_STRING_DATA_node_ußge_°©s_bio
(
lh
,
out
) \

2531 
	`LHM_lh_node_ußge_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2532 
	#lh_ERR_STRING_DATA_°©s_bio
(
lh
,
out
) \

2533 
	`LHM_lh_°©s_bio
(
ERR_STRING_DATA
,
lh
,
out
)

	)

2534 
	#lh_ERR_STRING_DATA_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
ERR_STRING_DATA
,lh)

	)

2536 
	#lh_EX_CLASS_ITEM_√w
(Ë
	`LHM_lh_√w
(
EX_CLASS_ITEM
,
ex_˛ass_ôem
)

	)

2537 
	#lh_EX_CLASS_ITEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
EX_CLASS_ITEM
,lh,ö°)

	)

2538 
	#lh_EX_CLASS_ITEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
EX_CLASS_ITEM
,lh,ö°)

	)

2539 
	#lh_EX_CLASS_ITEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
EX_CLASS_ITEM
,lh,ö°)

	)

2540 
	#lh_EX_CLASS_ITEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
EX_CLASS_ITEM
,lh,‚)

	)

2541 
	#lh_EX_CLASS_ITEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2542 
	`LHM_lh_dﬂŒ_¨g
(
EX_CLASS_ITEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2543 
	#lh_EX_CLASS_ITEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
EX_CLASS_ITEM
,lh)

	)

2544 
	#lh_EX_CLASS_ITEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
EX_CLASS_ITEM
,lh)

	)

2545 
	#lh_EX_CLASS_ITEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
EX_CLASS_ITEM
,lh)

	)

2546 
	#lh_EX_CLASS_ITEM_node_°©s_bio
(
lh
,
out
) \

2547 
	`LHM_lh_node_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2548 
	#lh_EX_CLASS_ITEM_node_ußge_°©s_bio
(
lh
,
out
) \

2549 
	`LHM_lh_node_ußge_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2550 
	#lh_EX_CLASS_ITEM_°©s_bio
(
lh
,
out
) \

2551 
	`LHM_lh_°©s_bio
(
EX_CLASS_ITEM
,
lh
,
out
)

	)

2552 
	#lh_EX_CLASS_ITEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
EX_CLASS_ITEM
,lh)

	)

2554 
	#lh_FUNCTION_√w
(Ë
	`LHM_lh_√w
(
FUNCTION
,
fun˘i⁄
)

	)

2555 
	#lh_FUNCTION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
FUNCTION
,lh,ö°)

	)

2556 
	#lh_FUNCTION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
FUNCTION
,lh,ö°)

	)

2557 
	#lh_FUNCTION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
FUNCTION
,lh,ö°)

	)

2558 
	#lh_FUNCTION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
FUNCTION
,lh,‚)

	)

2559 
	#lh_FUNCTION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2560 
	`LHM_lh_dﬂŒ_¨g
(
FUNCTION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2561 
	#lh_FUNCTION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
FUNCTION
,lh)

	)

2562 
	#lh_FUNCTION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
FUNCTION
,lh)

	)

2563 
	#lh_FUNCTION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
FUNCTION
,lh)

	)

2564 
	#lh_FUNCTION_node_°©s_bio
(
lh
,
out
) \

2565 
	`LHM_lh_node_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2566 
	#lh_FUNCTION_node_ußge_°©s_bio
(
lh
,
out
) \

2567 
	`LHM_lh_node_ußge_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2568 
	#lh_FUNCTION_°©s_bio
(
lh
,
out
) \

2569 
	`LHM_lh_°©s_bio
(
FUNCTION
,
lh
,
out
)

	)

2570 
	#lh_FUNCTION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
FUNCTION
,lh)

	)

2572 
	#lh_MEM_√w
(Ë
	`LHM_lh_√w
(
MEM
,
mem
)

	)

2573 
	#lh_MEM_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
MEM
,lh,ö°)

	)

2574 
	#lh_MEM_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
MEM
,lh,ö°)

	)

2575 
	#lh_MEM_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
MEM
,lh,ö°)

	)

2576 
	#lh_MEM_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
MEM
,lh,‚)

	)

2577 
	#lh_MEM_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2578 
	`LHM_lh_dﬂŒ_¨g
(
MEM
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2579 
	#lh_MEM_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
MEM
,lh)

	)

2580 
	#lh_MEM_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
MEM
,lh)

	)

2581 
	#lh_MEM_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
MEM
,lh)

	)

2582 
	#lh_MEM_node_°©s_bio
(
lh
,
out
) \

2583 
	`LHM_lh_node_°©s_bio
(
MEM
,
lh
,
out
)

	)

2584 
	#lh_MEM_node_ußge_°©s_bio
(
lh
,
out
) \

2585 
	`LHM_lh_node_ußge_°©s_bio
(
MEM
,
lh
,
out
)

	)

2586 
	#lh_MEM_°©s_bio
(
lh
,
out
) \

2587 
	`LHM_lh_°©s_bio
(
MEM
,
lh
,
out
)

	)

2588 
	#lh_MEM_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
MEM
,lh)

	)

2590 
	#lh_OBJ_NAME_√w
(Ë
	`LHM_lh_√w
(
OBJ_NAME
,
obj_«me
)

	)

2591 
	#lh_OBJ_NAME_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OBJ_NAME
,lh,ö°)

	)

2592 
	#lh_OBJ_NAME_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OBJ_NAME
,lh,ö°)

	)

2593 
	#lh_OBJ_NAME_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OBJ_NAME
,lh,ö°)

	)

2594 
	#lh_OBJ_NAME_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OBJ_NAME
,lh,‚)

	)

2595 
	#lh_OBJ_NAME_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2596 
	`LHM_lh_dﬂŒ_¨g
(
OBJ_NAME
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2597 
	#lh_OBJ_NAME_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OBJ_NAME
,lh)

	)

2598 
	#lh_OBJ_NAME_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OBJ_NAME
,lh)

	)

2599 
	#lh_OBJ_NAME_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OBJ_NAME
,lh)

	)

2600 
	#lh_OBJ_NAME_node_°©s_bio
(
lh
,
out
) \

2601 
	`LHM_lh_node_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2602 
	#lh_OBJ_NAME_node_ußge_°©s_bio
(
lh
,
out
) \

2603 
	`LHM_lh_node_ußge_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2604 
	#lh_OBJ_NAME_°©s_bio
(
lh
,
out
) \

2605 
	`LHM_lh_°©s_bio
(
OBJ_NAME
,
lh
,
out
)

	)

2606 
	#lh_OBJ_NAME_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OBJ_NAME
,lh)

	)

2608 
	#lh_OPENSSL_CSTRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_CSTRING
,
›ís¶_c°rög
)

	)

2609 
	#lh_OPENSSL_CSTRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_CSTRING
,lh,ö°)

	)

2610 
	#lh_OPENSSL_CSTRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_CSTRING
,lh,ö°)

	)

2611 
	#lh_OPENSSL_CSTRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_CSTRING
,lh,ö°)

	)

2612 
	#lh_OPENSSL_CSTRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_CSTRING
,lh,‚)

	)

2613 
	#lh_OPENSSL_CSTRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2614 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_CSTRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2615 
	#lh_OPENSSL_CSTRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_CSTRING
,lh)

	)

2616 
	#lh_OPENSSL_CSTRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_CSTRING
,lh)

	)

2617 
	#lh_OPENSSL_CSTRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_CSTRING
,lh)

	)

2618 
	#lh_OPENSSL_CSTRING_node_°©s_bio
(
lh
,
out
) \

2619 
	`LHM_lh_node_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2620 
	#lh_OPENSSL_CSTRING_node_ußge_°©s_bio
(
lh
,
out
) \

2621 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2622 
	#lh_OPENSSL_CSTRING_°©s_bio
(
lh
,
out
) \

2623 
	`LHM_lh_°©s_bio
(
OPENSSL_CSTRING
,
lh
,
out
)

	)

2624 
	#lh_OPENSSL_CSTRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_CSTRING
,lh)

	)

2626 
	#lh_OPENSSL_STRING_√w
(Ë
	`LHM_lh_√w
(
OPENSSL_STRING
,
›ís¶_°rög
)

	)

2627 
	#lh_OPENSSL_STRING_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
OPENSSL_STRING
,lh,ö°)

	)

2628 
	#lh_OPENSSL_STRING_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
OPENSSL_STRING
,lh,ö°)

	)

2629 
	#lh_OPENSSL_STRING_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
OPENSSL_STRING
,lh,ö°)

	)

2630 
	#lh_OPENSSL_STRING_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
OPENSSL_STRING
,lh,‚)

	)

2631 
	#lh_OPENSSL_STRING_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2632 
	`LHM_lh_dﬂŒ_¨g
(
OPENSSL_STRING
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2633 
	#lh_OPENSSL_STRING_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
OPENSSL_STRING
,lh)

	)

2634 
	#lh_OPENSSL_STRING_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
OPENSSL_STRING
,lh)

	)

2635 
	#lh_OPENSSL_STRING_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
OPENSSL_STRING
,lh)

	)

2636 
	#lh_OPENSSL_STRING_node_°©s_bio
(
lh
,
out
) \

2637 
	`LHM_lh_node_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2638 
	#lh_OPENSSL_STRING_node_ußge_°©s_bio
(
lh
,
out
) \

2639 
	`LHM_lh_node_ußge_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2640 
	#lh_OPENSSL_STRING_°©s_bio
(
lh
,
out
) \

2641 
	`LHM_lh_°©s_bio
(
OPENSSL_STRING
,
lh
,
out
)

	)

2642 
	#lh_OPENSSL_STRING_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
OPENSSL_STRING
,lh)

	)

2644 
	#lh_SSL_SESSION_√w
(Ë
	`LHM_lh_√w
(
SSL_SESSION
,
s¶_£ssi⁄
)

	)

2645 
	#lh_SSL_SESSION_ö£π
(
lh
,
ö°
Ë
	`LHM_lh_ö£π
(
SSL_SESSION
,lh,ö°)

	)

2646 
	#lh_SSL_SESSION_ªåõve
(
lh
,
ö°
Ë
	`LHM_lh_ªåõve
(
SSL_SESSION
,lh,ö°)

	)

2647 
	#lh_SSL_SESSION_dñëe
(
lh
,
ö°
Ë
	`LHM_lh_dñëe
(
SSL_SESSION
,lh,ö°)

	)

2648 
	#lh_SSL_SESSION_dﬂŒ
(
lh
,
‚
Ë
	`LHM_lh_dﬂŒ
(
SSL_SESSION
,lh,‚)

	)

2649 
	#lh_SSL_SESSION_dﬂŒ_¨g
(
lh
,
‚
,
¨g_ty≥
,
¨g
) \

2650 
	`LHM_lh_dﬂŒ_¨g
(
SSL_SESSION
,
lh
,
‚
,
¨g_ty≥
,
¨g
)

	)

2651 
	#lh_SSL_SESSION_îr‹
(
lh
Ë
	`LHM_lh_îr‹
(
SSL_SESSION
,lh)

	)

2652 
	#lh_SSL_SESSION_num_ôems
(
lh
Ë
	`LHM_lh_num_ôems
(
SSL_SESSION
,lh)

	)

2653 
	#lh_SSL_SESSION_down_lﬂd
(
lh
Ë
	`LHM_lh_down_lﬂd
(
SSL_SESSION
,lh)

	)

2654 
	#lh_SSL_SESSION_node_°©s_bio
(
lh
,
out
) \

2655 
	`LHM_lh_node_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2656 
	#lh_SSL_SESSION_node_ußge_°©s_bio
(
lh
,
out
) \

2657 
	`LHM_lh_node_ußge_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2658 
	#lh_SSL_SESSION_°©s_bio
(
lh
,
out
) \

2659 
	`LHM_lh_°©s_bio
(
SSL_SESSION
,
lh
,
out
)

	)

2660 
	#lh_SSL_SESSION_‰ì
(
lh
Ë
	`LHM_lh_‰ì
(
SSL_SESSION
,lh)

	)

	@/usr/include/openssl/srtp.h

118 #i‚de‡
HEADER_D1_SRTP_H


119 
	#HEADER_D1_SRTP_H


	)

121 #ifde‡ 
__˝lu•lus


126 
	#SRTP_AES128_CM_SHA1_80
 0x0001

	)

127 
	#SRTP_AES128_CM_SHA1_32
 0x0002

	)

128 
	#SRTP_AES128_F8_SHA1_80
 0x0003

	)

129 
	#SRTP_AES128_F8_SHA1_32
 0x0004

	)

130 
	#SRTP_NULL_SHA1_80
 0x0005

	)

131 
	#SRTP_NULL_SHA1_32
 0x0006

	)

133 #i‚de‡
OPENSSL_NO_SRTP


135 
SSL_CTX_£t_é£xt_u£_§ç
(
SSL_CTX
 *
˘x
, c⁄° *
¥ofûes
);

136 
SSL_£t_é£xt_u£_§ç
(
SSL
 *
˘x
, c⁄° *
¥ofûes
);

137 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

139 
STACK_OF
(
SRTP_PROTECTION_PROFILE
Ë*
SSL_gë_§ç_¥ofûes
(
SSL
 *
s¶
);

140 
SRTP_PROTECTION_PROFILE
 *
SSL_gë_£À˘ed_§ç_¥ofûe
(
SSL
 *
s
);

144 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl2.h

59 #i‚de‡
HEADER_SSL2_H


60 
	#HEADER_SSL2_H


	)

62 #ifde‡ 
__˝lu•lus


67 
	#SSL2_VERSION
 0x0002

	)

68 
	#SSL2_VERSION_MAJOR
 0x00

	)

69 
	#SSL2_VERSION_MINOR
 0x02

	)

74 
	#SSL2_MT_ERROR
 0

	)

75 
	#SSL2_MT_CLIENT_HELLO
 1

	)

76 
	#SSL2_MT_CLIENT_MASTER_KEY
 2

	)

77 
	#SSL2_MT_CLIENT_FINISHED
 3

	)

78 
	#SSL2_MT_SERVER_HELLO
 4

	)

79 
	#SSL2_MT_SERVER_VERIFY
 5

	)

80 
	#SSL2_MT_SERVER_FINISHED
 6

	)

81 
	#SSL2_MT_REQUEST_CERTIFICATE
 7

	)

82 
	#SSL2_MT_CLIENT_CERTIFICATE
 8

	)

85 
	#SSL2_PE_UNDEFINED_ERROR
 0x0000

	)

86 
	#SSL2_PE_NO_CIPHER
 0x0001

	)

87 
	#SSL2_PE_NO_CERTIFICATE
 0x0002

	)

88 
	#SSL2_PE_BAD_CERTIFICATE
 0x0004

	)

89 
	#SSL2_PE_UNSUPPORTED_CERTIFICATE_TYPE
 0x0006

	)

92 
	#SSL2_CK_NULL_WITH_MD5
 0x02000000

	)

93 
	#SSL2_CK_RC4_128_WITH_MD5
 0x02010080

	)

94 
	#SSL2_CK_RC4_128_EXPORT40_WITH_MD5
 0x02020080

	)

95 
	#SSL2_CK_RC2_128_CBC_WITH_MD5
 0x02030080

	)

96 
	#SSL2_CK_RC2_128_CBC_EXPORT40_WITH_MD5
 0x02040080

	)

97 
	#SSL2_CK_IDEA_128_CBC_WITH_MD5
 0x02050080

	)

98 
	#SSL2_CK_DES_64_CBC_WITH_MD5
 0x02060040

	)

99 
	#SSL2_CK_DES_64_CBC_WITH_SHA
 0x02060140

	)

100 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_MD5
 0x020700c0

	)

101 
	#SSL2_CK_DES_192_EDE3_CBC_WITH_SHA
 0x020701c0

	)

102 
	#SSL2_CK_RC4_64_WITH_MD5
 0x02080080

	)

104 
	#SSL2_CK_DES_64_CFB64_WITH_MD5_1
 0x02ff0800

	)

105 
	#SSL2_CK_NULL
 0x02ff0810

	)

107 
	#SSL2_TXT_DES_64_CFB64_WITH_MD5_1
 "DES-CFB-M1"

	)

108 
	#SSL2_TXT_NULL_WITH_MD5
 "NULL-MD5"

	)

109 
	#SSL2_TXT_RC4_128_WITH_MD5
 "RC4-MD5"

	)

110 
	#SSL2_TXT_RC4_128_EXPORT40_WITH_MD5
 "EXP-RC4-MD5"

	)

111 
	#SSL2_TXT_RC2_128_CBC_WITH_MD5
 "RC2-CBC-MD5"

	)

112 
	#SSL2_TXT_RC2_128_CBC_EXPORT40_WITH_MD5
 "EXP-RC2-CBC-MD5"

	)

113 
	#SSL2_TXT_IDEA_128_CBC_WITH_MD5
 "IDEA-CBC-MD5"

	)

114 
	#SSL2_TXT_DES_64_CBC_WITH_MD5
 "DES-CBC-MD5"

	)

115 
	#SSL2_TXT_DES_64_CBC_WITH_SHA
 "DES-CBC-SHA"

	)

116 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_MD5
 "DES-CBC3-MD5"

	)

117 
	#SSL2_TXT_DES_192_EDE3_CBC_WITH_SHA
 "DES-CBC3-SHA"

	)

118 
	#SSL2_TXT_RC4_64_WITH_MD5
 "RC4-64-MD5"

	)

120 
	#SSL2_TXT_NULL
 "NULL"

	)

123 
	#SSL2_CF_5_BYTE_ENC
 0x01

	)

124 
	#SSL2_CF_8_BYTE_ENC
 0x02

	)

127 
	#SSL2_CT_X509_CERTIFICATE
 0x01

	)

130 
	#SSL2_AT_MD5_WITH_RSA_ENCRYPTION
 0x01

	)

132 
	#SSL2_MAX_SSL_SESSION_ID_LENGTH
 32

	)

135 
	#SSL2_MAX_MASTER_KEY_LENGTH_IN_BITS
 256

	)

136 #ifde‡
OPENSSL_SYS_MPE


137 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 29998u

	)

139 
	#SSL2_MAX_RECORD_LENGTH_2_BYTE_HEADER
 32767u

	)

141 
	#SSL2_MAX_RECORD_LENGTH_3_BYTE_HEADER
 16383

	)

143 
	#SSL2_CHALLENGE_LENGTH
 16

	)

145 
	#SSL2_MIN_CHALLENGE_LENGTH
 16

	)

146 
	#SSL2_MAX_CHALLENGE_LENGTH
 32

	)

147 
	#SSL2_CONNECTION_ID_LENGTH
 16

	)

148 
	#SSL2_MAX_CONNECTION_ID_LENGTH
 16

	)

149 
	#SSL2_SSL_SESSION_ID_LENGTH
 16

	)

150 
	#SSL2_MAX_CERT_CHALLENGE_LENGTH
 32

	)

151 
	#SSL2_MIN_CERT_CHALLENGE_LENGTH
 16

	)

152 
	#SSL2_MAX_KEY_MATERIAL_LENGTH
 24

	)

154 #i‚de‡
HEADER_SSL_LOCL_H


155 
	#CERT
 

	)

158 #i‚de‡
OPENSSL_NO_SSL_INTERN


160 
	ss¶2_°©e_°


162 
thªe_byã_hódî
;

163 
˛ór_ãxt
;

164 
esˇ≥
;

165 
s¶2_rﬁlback
;

169 
wnum
;

170 
w≥nd_tŸ
;

171 c⁄° *
w≥nd_buf
;

173 
w≥nd_off
;

174 
w≥nd_Àn
;

175 
w≥nd_ªt
;

178 
rbuf_À·
;

179 
rbuf_offs
;

180 *
rbuf
;

181 *
wbuf
;

183 *
wrôe_±r
;

186 
∑ddög
;

187 
æígth
;

188 
ø˘_d©a_Àngth
;

189 
wÀngth
;

190 
wa˘_d©a_Àngth
;

191 *
ø˘_d©a
;

192 *
wa˘_d©a
;

193 *
mac_d©a
;

195 *
ªad_key
;

196 *
wrôe_key
;

199 
chÆÀnge_Àngth
;

200 
chÆÀnge
[
SSL2_MAX_CHALLENGE_LENGTH
];

201 
c⁄n_id_Àngth
;

202 
c⁄n_id
[
SSL2_MAX_CONNECTION_ID_LENGTH
];

203 
key_m©îül_Àngth
;

204 
key_m©îül
[
SSL2_MAX_KEY_MATERIAL_LENGTH
*2];

206 
ªad_£quí˚
;

207 
wrôe_£quí˚
;

210 
c⁄n_id_Àngth
;

211 
˚π_ty≥
;

212 
˚π_Àngth
;

213 
c¶
;

214 
˛ór
;

215 
íc
;

216 
c˛
[
SSL2_MAX_CERT_CHALLENGE_LENGTH
];

217 
cùhî_•ec_Àngth
;

218 
£ssi⁄_id_Àngth
;

219 
˛í
;

220 
æí
;

221 } 
tmp
;

222 } 
	tSSL2_STATE
;

228 
	#SSL2_ST_SEND_CLIENT_HELLO_A
 (0x10|
SSL_ST_CONNECT
)

	)

229 
	#SSL2_ST_SEND_CLIENT_HELLO_B
 (0x11|
SSL_ST_CONNECT
)

	)

230 
	#SSL2_ST_GET_SERVER_HELLO_A
 (0x20|
SSL_ST_CONNECT
)

	)

231 
	#SSL2_ST_GET_SERVER_HELLO_B
 (0x21|
SSL_ST_CONNECT
)

	)

232 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_CONNECT
)

	)

233 
	#SSL2_ST_SEND_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_CONNECT
)

	)

234 
	#SSL2_ST_SEND_CLIENT_FINISHED_A
 (0x40|
SSL_ST_CONNECT
)

	)

235 
	#SSL2_ST_SEND_CLIENT_FINISHED_B
 (0x41|
SSL_ST_CONNECT
)

	)

236 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_A
 (0x50|
SSL_ST_CONNECT
)

	)

237 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_B
 (0x51|
SSL_ST_CONNECT
)

	)

238 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_C
 (0x52|
SSL_ST_CONNECT
)

	)

239 
	#SSL2_ST_SEND_CLIENT_CERTIFICATE_D
 (0x53|
SSL_ST_CONNECT
)

	)

240 
	#SSL2_ST_GET_SERVER_VERIFY_A
 (0x60|
SSL_ST_CONNECT
)

	)

241 
	#SSL2_ST_GET_SERVER_VERIFY_B
 (0x61|
SSL_ST_CONNECT
)

	)

242 
	#SSL2_ST_GET_SERVER_FINISHED_A
 (0x70|
SSL_ST_CONNECT
)

	)

243 
	#SSL2_ST_GET_SERVER_FINISHED_B
 (0x71|
SSL_ST_CONNECT
)

	)

244 
	#SSL2_ST_CLIENT_START_ENCRYPTION
 (0x80|
SSL_ST_CONNECT
)

	)

245 
	#SSL2_ST_X509_GET_CLIENT_CERTIFICATE
 (0x90|
SSL_ST_CONNECT
)

	)

247 
	#SSL2_ST_GET_CLIENT_HELLO_A
 (0x10|
SSL_ST_ACCEPT
)

	)

248 
	#SSL2_ST_GET_CLIENT_HELLO_B
 (0x11|
SSL_ST_ACCEPT
)

	)

249 
	#SSL2_ST_GET_CLIENT_HELLO_C
 (0x12|
SSL_ST_ACCEPT
)

	)

250 
	#SSL2_ST_SEND_SERVER_HELLO_A
 (0x20|
SSL_ST_ACCEPT
)

	)

251 
	#SSL2_ST_SEND_SERVER_HELLO_B
 (0x21|
SSL_ST_ACCEPT
)

	)

252 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_A
 (0x30|
SSL_ST_ACCEPT
)

	)

253 
	#SSL2_ST_GET_CLIENT_MASTER_KEY_B
 (0x31|
SSL_ST_ACCEPT
)

	)

254 
	#SSL2_ST_SEND_SERVER_VERIFY_A
 (0x40|
SSL_ST_ACCEPT
)

	)

255 
	#SSL2_ST_SEND_SERVER_VERIFY_B
 (0x41|
SSL_ST_ACCEPT
)

	)

256 
	#SSL2_ST_SEND_SERVER_VERIFY_C
 (0x42|
SSL_ST_ACCEPT
)

	)

257 
	#SSL2_ST_GET_CLIENT_FINISHED_A
 (0x50|
SSL_ST_ACCEPT
)

	)

258 
	#SSL2_ST_GET_CLIENT_FINISHED_B
 (0x51|
SSL_ST_ACCEPT
)

	)

259 
	#SSL2_ST_SEND_SERVER_FINISHED_A
 (0x60|
SSL_ST_ACCEPT
)

	)

260 
	#SSL2_ST_SEND_SERVER_FINISHED_B
 (0x61|
SSL_ST_ACCEPT
)

	)

261 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_A
 (0x70|
SSL_ST_ACCEPT
)

	)

262 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_B
 (0x71|
SSL_ST_ACCEPT
)

	)

263 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_C
 (0x72|
SSL_ST_ACCEPT
)

	)

264 
	#SSL2_ST_SEND_REQUEST_CERTIFICATE_D
 (0x73|
SSL_ST_ACCEPT
)

	)

265 
	#SSL2_ST_SERVER_START_ENCRYPTION
 (0x80|
SSL_ST_ACCEPT
)

	)

266 
	#SSL2_ST_X509_GET_SERVER_CERTIFICATE
 (0x90|
SSL_ST_ACCEPT
)

	)

268 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl23.h

59 #i‚de‡
HEADER_SSL23_H


60 
	#HEADER_SSL23_H


	)

62 #ifde‡ 
__˝lu•lus


68 
	#SSL23_ST_CW_CLNT_HELLO_A
 (0x210|
SSL_ST_CONNECT
)

	)

69 
	#SSL23_ST_CW_CLNT_HELLO_B
 (0x211|
SSL_ST_CONNECT
)

	)

71 
	#SSL23_ST_CR_SRVR_HELLO_A
 (0x220|
SSL_ST_CONNECT
)

	)

72 
	#SSL23_ST_CR_SRVR_HELLO_B
 (0x221|
SSL_ST_CONNECT
)

	)

76 
	#SSL23_ST_SR_CLNT_HELLO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

77 
	#SSL23_ST_SR_CLNT_HELLO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

79 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ssl3.h

117 #i‚de‡
HEADER_SSL3_H


118 
	#HEADER_SSL3_H


	)

120 #i‚de‡
OPENSSL_NO_COMP


121 
	~<›ís¶/comp.h
>

123 
	~<›ís¶/buf„r.h
>

124 
	~<›ís¶/evp.h
>

125 
	~<›ís¶/s¶.h
>

127 #ifde‡ 
__˝lu•lus


133 
	#SSL3_CK_SCSV
 0x030000FF

	)

137 
	#SSL3_CK_FALLBACK_SCSV
 0x03005600

	)

139 
	#SSL3_CK_RSA_NULL_MD5
 0x03000001

	)

140 
	#SSL3_CK_RSA_NULL_SHA
 0x03000002

	)

141 
	#SSL3_CK_RSA_RC4_40_MD5
 0x03000003

	)

142 
	#SSL3_CK_RSA_RC4_128_MD5
 0x03000004

	)

143 
	#SSL3_CK_RSA_RC4_128_SHA
 0x03000005

	)

144 
	#SSL3_CK_RSA_RC2_40_MD5
 0x03000006

	)

145 
	#SSL3_CK_RSA_IDEA_128_SHA
 0x03000007

	)

146 
	#SSL3_CK_RSA_DES_40_CBC_SHA
 0x03000008

	)

147 
	#SSL3_CK_RSA_DES_64_CBC_SHA
 0x03000009

	)

148 
	#SSL3_CK_RSA_DES_192_CBC3_SHA
 0x0300000A

	)

150 
	#SSL3_CK_DH_DSS_DES_40_CBC_SHA
 0x0300000B

	)

151 
	#SSL3_CK_DH_DSS_DES_64_CBC_SHA
 0x0300000C

	)

152 
	#SSL3_CK_DH_DSS_DES_192_CBC3_SHA
 0x0300000D

	)

153 
	#SSL3_CK_DH_RSA_DES_40_CBC_SHA
 0x0300000E

	)

154 
	#SSL3_CK_DH_RSA_DES_64_CBC_SHA
 0x0300000F

	)

155 
	#SSL3_CK_DH_RSA_DES_192_CBC3_SHA
 0x03000010

	)

157 
	#SSL3_CK_EDH_DSS_DES_40_CBC_SHA
 0x03000011

	)

158 
	#SSL3_CK_EDH_DSS_DES_64_CBC_SHA
 0x03000012

	)

159 
	#SSL3_CK_EDH_DSS_DES_192_CBC3_SHA
 0x03000013

	)

160 
	#SSL3_CK_EDH_RSA_DES_40_CBC_SHA
 0x03000014

	)

161 
	#SSL3_CK_EDH_RSA_DES_64_CBC_SHA
 0x03000015

	)

162 
	#SSL3_CK_EDH_RSA_DES_192_CBC3_SHA
 0x03000016

	)

164 
	#SSL3_CK_ADH_RC4_40_MD5
 0x03000017

	)

165 
	#SSL3_CK_ADH_RC4_128_MD5
 0x03000018

	)

166 
	#SSL3_CK_ADH_DES_40_CBC_SHA
 0x03000019

	)

167 
	#SSL3_CK_ADH_DES_64_CBC_SHA
 0x0300001A

	)

168 
	#SSL3_CK_ADH_DES_192_CBC_SHA
 0x0300001B

	)

171 
	#SSL3_CK_FZA_DMS_NULL_SHA
 0x0300001C

	)

172 
	#SSL3_CK_FZA_DMS_FZA_SHA
 0x0300001D

	)

176 
	#SSL3_CK_FZA_DMS_RC4_SHA
 0x0300001E

	)

182 
	#SSL3_CK_KRB5_DES_64_CBC_SHA
 0x0300001E

	)

183 
	#SSL3_CK_KRB5_DES_192_CBC3_SHA
 0x0300001F

	)

184 
	#SSL3_CK_KRB5_RC4_128_SHA
 0x03000020

	)

185 
	#SSL3_CK_KRB5_IDEA_128_CBC_SHA
 0x03000021

	)

186 
	#SSL3_CK_KRB5_DES_64_CBC_MD5
 0x03000022

	)

187 
	#SSL3_CK_KRB5_DES_192_CBC3_MD5
 0x03000023

	)

188 
	#SSL3_CK_KRB5_RC4_128_MD5
 0x03000024

	)

189 
	#SSL3_CK_KRB5_IDEA_128_CBC_MD5
 0x03000025

	)

191 
	#SSL3_CK_KRB5_DES_40_CBC_SHA
 0x03000026

	)

192 
	#SSL3_CK_KRB5_RC2_40_CBC_SHA
 0x03000027

	)

193 
	#SSL3_CK_KRB5_RC4_40_SHA
 0x03000028

	)

194 
	#SSL3_CK_KRB5_DES_40_CBC_MD5
 0x03000029

	)

195 
	#SSL3_CK_KRB5_RC2_40_CBC_MD5
 0x0300002A

	)

196 
	#SSL3_CK_KRB5_RC4_40_MD5
 0x0300002B

	)

198 
	#SSL3_TXT_RSA_NULL_MD5
 "NULL-MD5"

	)

199 
	#SSL3_TXT_RSA_NULL_SHA
 "NULL-SHA"

	)

200 
	#SSL3_TXT_RSA_RC4_40_MD5
 "EXP-RC4-MD5"

	)

201 
	#SSL3_TXT_RSA_RC4_128_MD5
 "RC4-MD5"

	)

202 
	#SSL3_TXT_RSA_RC4_128_SHA
 "RC4-SHA"

	)

203 
	#SSL3_TXT_RSA_RC2_40_MD5
 "EXP-RC2-CBC-MD5"

	)

204 
	#SSL3_TXT_RSA_IDEA_128_SHA
 "IDEA-CBC-SHA"

	)

205 
	#SSL3_TXT_RSA_DES_40_CBC_SHA
 "EXP-DES-CBC-SHA"

	)

206 
	#SSL3_TXT_RSA_DES_64_CBC_SHA
 "DES-CBC-SHA"

	)

207 
	#SSL3_TXT_RSA_DES_192_CBC3_SHA
 "DES-CBC3-SHA"

	)

209 
	#SSL3_TXT_DH_DSS_DES_40_CBC_SHA
 "EXP-DH-DSS-DES-CBC-SHA"

	)

210 
	#SSL3_TXT_DH_DSS_DES_64_CBC_SHA
 "DH-DSS-DES-CBC-SHA"

	)

211 
	#SSL3_TXT_DH_DSS_DES_192_CBC3_SHA
 "DH-DSS-DES-CBC3-SHA"

	)

212 
	#SSL3_TXT_DH_RSA_DES_40_CBC_SHA
 "EXP-DH-RSA-DES-CBC-SHA"

	)

213 
	#SSL3_TXT_DH_RSA_DES_64_CBC_SHA
 "DH-RSA-DES-CBC-SHA"

	)

214 
	#SSL3_TXT_DH_RSA_DES_192_CBC3_SHA
 "DH-RSA-DES-CBC3-SHA"

	)

216 
	#SSL3_TXT_EDH_DSS_DES_40_CBC_SHA
 "EXP-EDH-DSS-DES-CBC-SHA"

	)

217 
	#SSL3_TXT_EDH_DSS_DES_64_CBC_SHA
 "EDH-DSS-DES-CBC-SHA"

	)

218 
	#SSL3_TXT_EDH_DSS_DES_192_CBC3_SHA
 "EDH-DSS-DES-CBC3-SHA"

	)

219 
	#SSL3_TXT_EDH_RSA_DES_40_CBC_SHA
 "EXP-EDH-RSA-DES-CBC-SHA"

	)

220 
	#SSL3_TXT_EDH_RSA_DES_64_CBC_SHA
 "EDH-RSA-DES-CBC-SHA"

	)

221 
	#SSL3_TXT_EDH_RSA_DES_192_CBC3_SHA
 "EDH-RSA-DES-CBC3-SHA"

	)

223 
	#SSL3_TXT_ADH_RC4_40_MD5
 "EXP-ADH-RC4-MD5"

	)

224 
	#SSL3_TXT_ADH_RC4_128_MD5
 "ADH-RC4-MD5"

	)

225 
	#SSL3_TXT_ADH_DES_40_CBC_SHA
 "EXP-ADH-DES-CBC-SHA"

	)

226 
	#SSL3_TXT_ADH_DES_64_CBC_SHA
 "ADH-DES-CBC-SHA"

	)

227 
	#SSL3_TXT_ADH_DES_192_CBC_SHA
 "ADH-DES-CBC3-SHA"

	)

230 
	#SSL3_TXT_FZA_DMS_NULL_SHA
 "FZA-NULL-SHA"

	)

231 
	#SSL3_TXT_FZA_DMS_FZA_SHA
 "FZA-FZA-CBC-SHA"

	)

232 
	#SSL3_TXT_FZA_DMS_RC4_SHA
 "FZA-RC4-SHA"

	)

235 
	#SSL3_TXT_KRB5_DES_64_CBC_SHA
 "KRB5-DES-CBC-SHA"

	)

236 
	#SSL3_TXT_KRB5_DES_192_CBC3_SHA
 "KRB5-DES-CBC3-SHA"

	)

237 
	#SSL3_TXT_KRB5_RC4_128_SHA
 "KRB5-RC4-SHA"

	)

238 
	#SSL3_TXT_KRB5_IDEA_128_CBC_SHA
 "KRB5-IDEA-CBC-SHA"

	)

239 
	#SSL3_TXT_KRB5_DES_64_CBC_MD5
 "KRB5-DES-CBC-MD5"

	)

240 
	#SSL3_TXT_KRB5_DES_192_CBC3_MD5
 "KRB5-DES-CBC3-MD5"

	)

241 
	#SSL3_TXT_KRB5_RC4_128_MD5
 "KRB5-RC4-MD5"

	)

242 
	#SSL3_TXT_KRB5_IDEA_128_CBC_MD5
 "KRB5-IDEA-CBC-MD5"

	)

244 
	#SSL3_TXT_KRB5_DES_40_CBC_SHA
 "EXP-KRB5-DES-CBC-SHA"

	)

245 
	#SSL3_TXT_KRB5_RC2_40_CBC_SHA
 "EXP-KRB5-RC2-CBC-SHA"

	)

246 
	#SSL3_TXT_KRB5_RC4_40_SHA
 "EXP-KRB5-RC4-SHA"

	)

247 
	#SSL3_TXT_KRB5_DES_40_CBC_MD5
 "EXP-KRB5-DES-CBC-MD5"

	)

248 
	#SSL3_TXT_KRB5_RC2_40_CBC_MD5
 "EXP-KRB5-RC2-CBC-MD5"

	)

249 
	#SSL3_TXT_KRB5_RC4_40_MD5
 "EXP-KRB5-RC4-MD5"

	)

251 
	#SSL3_SSL_SESSION_ID_LENGTH
 32

	)

252 
	#SSL3_MAX_SSL_SESSION_ID_LENGTH
 32

	)

254 
	#SSL3_MASTER_SECRET_SIZE
 48

	)

255 
	#SSL3_RANDOM_SIZE
 32

	)

256 
	#SSL3_SESSION_ID_SIZE
 32

	)

257 
	#SSL3_RT_HEADER_LENGTH
 5

	)

259 #i‚de‡
SSL3_ALIGN_PAYLOAD


266 
	#SSL3_ALIGN_PAYLOAD
 8

	)

268 #i‡(
SSL3_ALIGN_PAYLOAD
&(SSL3_ALIGN_PAYLOAD-1))!=0

270 #unde‡
SSL3_ALIGN_PAYLOAD


279 
	#SSL3_RT_MAX_MD_SIZE
 64

	)

284 
	#SSL_RT_MAX_CIPHER_BLOCK_SIZE
 16

	)

286 
	#SSL3_RT_MAX_EXTRA
 (16384)

	)

289 
	#SSL3_RT_MAX_PLAIN_LENGTH
 16384

	)

291 
	#SSL3_RT_MAX_COMPRESSED_OVERHEAD
 1024

	)

297 
	#SSL3_RT_MAX_ENCRYPTED_OVERHEAD
 (256 + 
SSL3_RT_MAX_MD_SIZE
)

	)

303 
	#SSL3_RT_SEND_MAX_ENCRYPTED_OVERHEAD
 \

304 (
SSL_RT_MAX_CIPHER_BLOCK_SIZE
 + 
SSL3_RT_MAX_MD_SIZE
)

	)

308 #ifde‡
OPENSSL_NO_COMP


309 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 
SSL3_RT_MAX_PLAIN_LENGTH


	)

311 
	#SSL3_RT_MAX_COMPRESSED_LENGTH
 \

312 (
SSL3_RT_MAX_PLAIN_LENGTH
+
SSL3_RT_MAX_COMPRESSED_OVERHEAD
)

	)

314 
	#SSL3_RT_MAX_ENCRYPTED_LENGTH
 \

315 (
SSL3_RT_MAX_ENCRYPTED_OVERHEAD
+
SSL3_RT_MAX_COMPRESSED_LENGTH
)

	)

316 
	#SSL3_RT_MAX_PACKET_SIZE
 \

317 (
SSL3_RT_MAX_ENCRYPTED_LENGTH
+
SSL3_RT_HEADER_LENGTH
)

	)

319 
	#SSL3_MD_CLIENT_FINISHED_CONST
 "\x43\x4C\x4E\x54"

	)

320 
	#SSL3_MD_SERVER_FINISHED_CONST
 "\x53\x52\x56\x52"

	)

322 
	#SSL3_VERSION
 0x0300

	)

323 
	#SSL3_VERSION_MAJOR
 0x03

	)

324 
	#SSL3_VERSION_MINOR
 0x00

	)

326 
	#SSL3_RT_CHANGE_CIPHER_SPEC
 20

	)

327 
	#SSL3_RT_ALERT
 21

	)

328 
	#SSL3_RT_HANDSHAKE
 22

	)

329 
	#SSL3_RT_APPLICATION_DATA
 23

	)

330 
	#TLS1_RT_HEARTBEAT
 24

	)

332 
	#SSL3_AL_WARNING
 1

	)

333 
	#SSL3_AL_FATAL
 2

	)

335 
	#SSL3_AD_CLOSE_NOTIFY
 0

	)

336 
	#SSL3_AD_UNEXPECTED_MESSAGE
 10

	)

337 
	#SSL3_AD_BAD_RECORD_MAC
 20

	)

338 
	#SSL3_AD_DECOMPRESSION_FAILURE
 30

	)

339 
	#SSL3_AD_HANDSHAKE_FAILURE
 40

	)

340 
	#SSL3_AD_NO_CERTIFICATE
 41

	)

341 
	#SSL3_AD_BAD_CERTIFICATE
 42

	)

342 
	#SSL3_AD_UNSUPPORTED_CERTIFICATE
 43

	)

343 
	#SSL3_AD_CERTIFICATE_REVOKED
 44

	)

344 
	#SSL3_AD_CERTIFICATE_EXPIRED
 45

	)

345 
	#SSL3_AD_CERTIFICATE_UNKNOWN
 46

	)

346 
	#SSL3_AD_ILLEGAL_PARAMETER
 47

	)

348 
	#TLS1_HB_REQUEST
 1

	)

349 
	#TLS1_HB_RESPONSE
 2

	)

351 #i‚de‡
OPENSSL_NO_SSL_INTERN


353 
	ss¶3_ªc‹d_°


355  
ty≥
;

356  
Àngth
;

357  
off
;

358  *
d©a
;

359  *
öput
;

360  *
comp
;

361  
ïoch
;

362  
£q_num
[8];

363 } 
	tSSL3_RECORD
;

365 
	ss¶3_buf„r_°


367 *
buf
;

369 
size_t
 
Àn
;

370 
off£t
;

371 
À·
;

372 } 
	tSSL3_BUFFER
;

376 
	#SSL3_CT_RSA_SIGN
 1

	)

377 
	#SSL3_CT_DSS_SIGN
 2

	)

378 
	#SSL3_CT_RSA_FIXED_DH
 3

	)

379 
	#SSL3_CT_DSS_FIXED_DH
 4

	)

380 
	#SSL3_CT_RSA_EPHEMERAL_DH
 5

	)

381 
	#SSL3_CT_DSS_EPHEMERAL_DH
 6

	)

382 
	#SSL3_CT_FORTEZZA_DMS
 20

	)

387 
	#SSL3_CT_NUMBER
 9

	)

390 
	#SSL3_FLAGS_NO_RENEGOTIATE_CIPHERS
 0x0001

	)

391 
	#SSL3_FLAGS_DELAY_CLIENT_FINISHED
 0x0002

	)

392 
	#SSL3_FLAGS_POP_BUFFER
 0x0004

	)

393 
	#TLS1_FLAGS_TLS_PADDING_BUG
 0x0008

	)

394 
	#TLS1_FLAGS_SKIP_CERT_VERIFY
 0x0010

	)

395 
	#TLS1_FLAGS_KEEP_HANDSHAKE
 0x0020

	)

396 
	#SSL3_FLAGS_CCS_OK
 0x0080

	)

407 
	#SSL3_FLAGS_SGC_RESTART_DONE
 0x0040

	)

409 #i‚de‡
OPENSSL_NO_SSL_INTERN


411 
	ss¶3_°©e_°


413 
Êags
;

414 
dñay_buf_p›_ªt
;

416 
ªad_£quí˚
[8];

417 
ªad_mac_£¸ë_size
;

418 
ªad_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

419 
wrôe_£quí˚
[8];

420 
wrôe_mac_£¸ë_size
;

421 
wrôe_mac_£¸ë
[
EVP_MAX_MD_SIZE
];

423 
£rvî_øndom
[
SSL3_RANDOM_SIZE
];

424 
˛õ¡_øndom
[
SSL3_RANDOM_SIZE
];

427 
√ed_em±y_‰agmíts
;

428 
em±y_‰agmít_d⁄e
;

431 
öô_exåa
;

433 
SSL3_BUFFER
 
rbuf
;

434 
SSL3_BUFFER
 
wbuf
;

436 
SSL3_RECORD
 
ºec
;

437 
SSL3_RECORD
 
wªc
;

441 
Æît_‰agmít
[2];

442 
Æît_‰agmít_Àn
;

443 
h™dshake_‰agmít
[4];

444 
h™dshake_‰agmít_Àn
;

447 
wnum
;

448 
w≥nd_tŸ
;

449 
w≥nd_ty≥
;

450 
w≥nd_ªt
;

451 c⁄° *
w≥nd_buf
;

454 
BIO
 *
h™dshake_buf„r
;

458 
EVP_MD_CTX
 **
h™dshake_dg°
;

461 
ch™ge_cùhî_•ec
;

463 
w¨n_Æît
;

464 
Áèl_Æît
;

467 
Æît_di•©ch
;

468 
£nd_Æît
[2];

472 
ª√gŸüã
;

473 
tŸÆ_ª√gŸüti⁄s
;

474 
num_ª√gŸüti⁄s
;

476 
ö_ªad_≠p_d©a
;

481 *
˛õ¡_›aque_¥f_öput
;

482 
size_t
 
˛õ¡_›aque_¥f_öput_Àn
;

483 *
£rvî_›aque_¥f_öput
;

484 
size_t
 
£rvî_›aque_¥f_öput_Àn
;

488 
˚π_vîify_md
[
EVP_MAX_MD_SIZE
*2];

491 
föish_md
[
EVP_MAX_MD_SIZE
*2];

492 
föish_md_Àn
;

493 
≥î_föish_md
[
EVP_MAX_MD_SIZE
*2];

494 
≥î_föish_md_Àn
;

496 
mesßge_size
;

497 
mesßge_ty≥
;

500 c⁄° 
SSL_CIPHER
 *
√w_cùhî
;

501 #i‚de‡
OPENSSL_NO_DH


502 
DH
 *
dh
;

505 #i‚de‡
OPENSSL_NO_ECDH


506 
EC_KEY
 *
ecdh
;

510 
√xt_°©e
;

512 
ªu£_mesßge
;

515 
˚π_ªq
;

516 
˘y≥_num
;

517 
˘y≥
[
SSL3_CT_NUMBER
];

518 
STACK_OF
(
X509_NAME
Ë*
ˇ_«mes
;

520 
u£_rß_tmp
;

522 
key_block_Àngth
;

523 *
key_block
;

525 c⁄° 
EVP_CIPHER
 *
√w_sym_íc
;

526 c⁄° 
EVP_MD
 *
√w_hash
;

527 
√w_mac_pkey_ty≥
;

528 
√w_mac_£¸ë_size
;

529 #i‚de‡
OPENSSL_NO_COMP


530 c⁄° 
SSL_COMP
 *
√w_com¥essi⁄
;

532 *
√w_com¥essi⁄
;

534 
˚π_ªque°
;

535 } 
tmp
;

538 
¥evious_˛õ¡_föished
[
EVP_MAX_MD_SIZE
];

539 
¥evious_˛õ¡_föished_Àn
;

540 
¥evious_£rvî_föished
[
EVP_MAX_MD_SIZE
];

541 
¥evious_£rvî_föished_Àn
;

542 
£nd_c⁄√˘i⁄_bödög
;

544 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


546 
√xt_¥Ÿo_√g_£í
;

548 } 
	tSSL3_STATE
;

555 
	#SSL3_ST_CW_FLUSH
 (0x100|
SSL_ST_CONNECT
)

	)

556 #i‚de‡
OPENSSL_NO_SCTP


557 
	#DTLS1_SCTP_ST_CW_WRITE_SOCK
 (0x310|
SSL_ST_CONNECT
)

	)

558 
	#DTLS1_SCTP_ST_CR_READ_SOCK
 (0x320|
SSL_ST_CONNECT
)

	)

561 
	#SSL3_ST_CW_CLNT_HELLO_A
 (0x110|
SSL_ST_CONNECT
)

	)

562 
	#SSL3_ST_CW_CLNT_HELLO_B
 (0x111|
SSL_ST_CONNECT
)

	)

564 
	#SSL3_ST_CR_SRVR_HELLO_A
 (0x120|
SSL_ST_CONNECT
)

	)

565 
	#SSL3_ST_CR_SRVR_HELLO_B
 (0x121|
SSL_ST_CONNECT
)

	)

566 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_A
 (0x126|
SSL_ST_CONNECT
)

	)

567 
	#DTLS1_ST_CR_HELLO_VERIFY_REQUEST_B
 (0x127|
SSL_ST_CONNECT
)

	)

568 
	#SSL3_ST_CR_CERT_A
 (0x130|
SSL_ST_CONNECT
)

	)

569 
	#SSL3_ST_CR_CERT_B
 (0x131|
SSL_ST_CONNECT
)

	)

570 
	#SSL3_ST_CR_KEY_EXCH_A
 (0x140|
SSL_ST_CONNECT
)

	)

571 
	#SSL3_ST_CR_KEY_EXCH_B
 (0x141|
SSL_ST_CONNECT
)

	)

572 
	#SSL3_ST_CR_CERT_REQ_A
 (0x150|
SSL_ST_CONNECT
)

	)

573 
	#SSL3_ST_CR_CERT_REQ_B
 (0x151|
SSL_ST_CONNECT
)

	)

574 
	#SSL3_ST_CR_SRVR_DONE_A
 (0x160|
SSL_ST_CONNECT
)

	)

575 
	#SSL3_ST_CR_SRVR_DONE_B
 (0x161|
SSL_ST_CONNECT
)

	)

577 
	#SSL3_ST_CW_CERT_A
 (0x170|
SSL_ST_CONNECT
)

	)

578 
	#SSL3_ST_CW_CERT_B
 (0x171|
SSL_ST_CONNECT
)

	)

579 
	#SSL3_ST_CW_CERT_C
 (0x172|
SSL_ST_CONNECT
)

	)

580 
	#SSL3_ST_CW_CERT_D
 (0x173|
SSL_ST_CONNECT
)

	)

581 
	#SSL3_ST_CW_KEY_EXCH_A
 (0x180|
SSL_ST_CONNECT
)

	)

582 
	#SSL3_ST_CW_KEY_EXCH_B
 (0x181|
SSL_ST_CONNECT
)

	)

583 
	#SSL3_ST_CW_CERT_VRFY_A
 (0x190|
SSL_ST_CONNECT
)

	)

584 
	#SSL3_ST_CW_CERT_VRFY_B
 (0x191|
SSL_ST_CONNECT
)

	)

585 
	#SSL3_ST_CW_CHANGE_A
 (0x1A0|
SSL_ST_CONNECT
)

	)

586 
	#SSL3_ST_CW_CHANGE_B
 (0x1A1|
SSL_ST_CONNECT
)

	)

587 
	#SSL3_ST_CW_NEXT_PROTO_A
 (0x200|
SSL_ST_CONNECT
)

	)

588 
	#SSL3_ST_CW_NEXT_PROTO_B
 (0x201|
SSL_ST_CONNECT
)

	)

589 
	#SSL3_ST_CW_FINISHED_A
 (0x1B0|
SSL_ST_CONNECT
)

	)

590 
	#SSL3_ST_CW_FINISHED_B
 (0x1B1|
SSL_ST_CONNECT
)

	)

592 
	#SSL3_ST_CR_CHANGE_A
 (0x1C0|
SSL_ST_CONNECT
)

	)

593 
	#SSL3_ST_CR_CHANGE_B
 (0x1C1|
SSL_ST_CONNECT
)

	)

594 
	#SSL3_ST_CR_FINISHED_A
 (0x1D0|
SSL_ST_CONNECT
)

	)

595 
	#SSL3_ST_CR_FINISHED_B
 (0x1D1|
SSL_ST_CONNECT
)

	)

596 
	#SSL3_ST_CR_SESSION_TICKET_A
 (0x1E0|
SSL_ST_CONNECT
)

	)

597 
	#SSL3_ST_CR_SESSION_TICKET_B
 (0x1E1|
SSL_ST_CONNECT
)

	)

598 
	#SSL3_ST_CR_CERT_STATUS_A
 (0x1F0|
SSL_ST_CONNECT
)

	)

599 
	#SSL3_ST_CR_CERT_STATUS_B
 (0x1F1|
SSL_ST_CONNECT
)

	)

603 
	#SSL3_ST_SW_FLUSH
 (0x100|
SSL_ST_ACCEPT
)

	)

604 #i‚de‡
OPENSSL_NO_SCTP


605 
	#DTLS1_SCTP_ST_SW_WRITE_SOCK
 (0x310|
SSL_ST_ACCEPT
)

	)

606 
	#DTLS1_SCTP_ST_SR_READ_SOCK
 (0x320|
SSL_ST_ACCEPT
)

	)

610 
	#SSL3_ST_SR_CLNT_HELLO_A
 (0x110|
SSL_ST_ACCEPT
)

	)

611 
	#SSL3_ST_SR_CLNT_HELLO_B
 (0x111|
SSL_ST_ACCEPT
)

	)

612 
	#SSL3_ST_SR_CLNT_HELLO_C
 (0x112|
SSL_ST_ACCEPT
)

	)

614 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_A
 (0x113|
SSL_ST_ACCEPT
)

	)

615 
	#DTLS1_ST_SW_HELLO_VERIFY_REQUEST_B
 (0x114|
SSL_ST_ACCEPT
)

	)

616 
	#SSL3_ST_SW_HELLO_REQ_A
 (0x120|
SSL_ST_ACCEPT
)

	)

617 
	#SSL3_ST_SW_HELLO_REQ_B
 (0x121|
SSL_ST_ACCEPT
)

	)

618 
	#SSL3_ST_SW_HELLO_REQ_C
 (0x122|
SSL_ST_ACCEPT
)

	)

619 
	#SSL3_ST_SW_SRVR_HELLO_A
 (0x130|
SSL_ST_ACCEPT
)

	)

620 
	#SSL3_ST_SW_SRVR_HELLO_B
 (0x131|
SSL_ST_ACCEPT
)

	)

621 
	#SSL3_ST_SW_CERT_A
 (0x140|
SSL_ST_ACCEPT
)

	)

622 
	#SSL3_ST_SW_CERT_B
 (0x141|
SSL_ST_ACCEPT
)

	)

623 
	#SSL3_ST_SW_KEY_EXCH_A
 (0x150|
SSL_ST_ACCEPT
)

	)

624 
	#SSL3_ST_SW_KEY_EXCH_B
 (0x151|
SSL_ST_ACCEPT
)

	)

625 
	#SSL3_ST_SW_CERT_REQ_A
 (0x160|
SSL_ST_ACCEPT
)

	)

626 
	#SSL3_ST_SW_CERT_REQ_B
 (0x161|
SSL_ST_ACCEPT
)

	)

627 
	#SSL3_ST_SW_SRVR_DONE_A
 (0x170|
SSL_ST_ACCEPT
)

	)

628 
	#SSL3_ST_SW_SRVR_DONE_B
 (0x171|
SSL_ST_ACCEPT
)

	)

630 
	#SSL3_ST_SR_CERT_A
 (0x180|
SSL_ST_ACCEPT
)

	)

631 
	#SSL3_ST_SR_CERT_B
 (0x181|
SSL_ST_ACCEPT
)

	)

632 
	#SSL3_ST_SR_KEY_EXCH_A
 (0x190|
SSL_ST_ACCEPT
)

	)

633 
	#SSL3_ST_SR_KEY_EXCH_B
 (0x191|
SSL_ST_ACCEPT
)

	)

634 
	#SSL3_ST_SR_CERT_VRFY_A
 (0x1A0|
SSL_ST_ACCEPT
)

	)

635 
	#SSL3_ST_SR_CERT_VRFY_B
 (0x1A1|
SSL_ST_ACCEPT
)

	)

636 
	#SSL3_ST_SR_CHANGE_A
 (0x1B0|
SSL_ST_ACCEPT
)

	)

637 
	#SSL3_ST_SR_CHANGE_B
 (0x1B1|
SSL_ST_ACCEPT
)

	)

638 
	#SSL3_ST_SR_NEXT_PROTO_A
 (0x210|
SSL_ST_ACCEPT
)

	)

639 
	#SSL3_ST_SR_NEXT_PROTO_B
 (0x211|
SSL_ST_ACCEPT
)

	)

640 
	#SSL3_ST_SR_FINISHED_A
 (0x1C0|
SSL_ST_ACCEPT
)

	)

641 
	#SSL3_ST_SR_FINISHED_B
 (0x1C1|
SSL_ST_ACCEPT
)

	)

643 
	#SSL3_ST_SW_CHANGE_A
 (0x1D0|
SSL_ST_ACCEPT
)

	)

644 
	#SSL3_ST_SW_CHANGE_B
 (0x1D1|
SSL_ST_ACCEPT
)

	)

645 
	#SSL3_ST_SW_FINISHED_A
 (0x1E0|
SSL_ST_ACCEPT
)

	)

646 
	#SSL3_ST_SW_FINISHED_B
 (0x1E1|
SSL_ST_ACCEPT
)

	)

647 
	#SSL3_ST_SW_SESSION_TICKET_A
 (0x1F0|
SSL_ST_ACCEPT
)

	)

648 
	#SSL3_ST_SW_SESSION_TICKET_B
 (0x1F1|
SSL_ST_ACCEPT
)

	)

649 
	#SSL3_ST_SW_CERT_STATUS_A
 (0x200|
SSL_ST_ACCEPT
)

	)

650 
	#SSL3_ST_SW_CERT_STATUS_B
 (0x201|
SSL_ST_ACCEPT
)

	)

652 
	#SSL3_MT_HELLO_REQUEST
 0

	)

653 
	#SSL3_MT_CLIENT_HELLO
 1

	)

654 
	#SSL3_MT_SERVER_HELLO
 2

	)

655 
	#SSL3_MT_NEWSESSION_TICKET
 4

	)

656 
	#SSL3_MT_CERTIFICATE
 11

	)

657 
	#SSL3_MT_SERVER_KEY_EXCHANGE
 12

	)

658 
	#SSL3_MT_CERTIFICATE_REQUEST
 13

	)

659 
	#SSL3_MT_SERVER_DONE
 14

	)

660 
	#SSL3_MT_CERTIFICATE_VERIFY
 15

	)

661 
	#SSL3_MT_CLIENT_KEY_EXCHANGE
 16

	)

662 
	#SSL3_MT_FINISHED
 20

	)

663 
	#SSL3_MT_CERTIFICATE_STATUS
 22

	)

664 
	#SSL3_MT_NEXT_PROTO
 67

	)

665 
	#DTLS1_MT_HELLO_VERIFY_REQUEST
 3

	)

668 
	#SSL3_MT_CCS
 1

	)

671 
	#SSL3_CC_READ
 0x01

	)

672 
	#SSL3_CC_WRITE
 0x02

	)

673 
	#SSL3_CC_CLIENT
 0x10

	)

674 
	#SSL3_CC_SERVER
 0x20

	)

675 
	#SSL3_CHANGE_CIPHER_CLIENT_WRITE
 (
SSL3_CC_CLIENT
|
SSL3_CC_WRITE
)

	)

676 
	#SSL3_CHANGE_CIPHER_SERVER_READ
 (
SSL3_CC_SERVER
|
SSL3_CC_READ
)

	)

677 
	#SSL3_CHANGE_CIPHER_CLIENT_READ
 (
SSL3_CC_CLIENT
|
SSL3_CC_READ
)

	)

678 
	#SSL3_CHANGE_CIPHER_SERVER_WRITE
 (
SSL3_CC_SERVER
|
SSL3_CC_WRITE
)

	)

680 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/stack.h

59 #i‚de‡
HEADER_STACK_H


60 
	#HEADER_STACK_H


	)

62 #ifde‡ 
__˝lu•lus


66 
	s°ack_°


68 
num
;

69 **
d©a
;

70 
s‹ãd
;

72 
num_Æloc
;

73 (*
comp
)(const *, const *);

74 } 
	t_STACK
;

76 
	#M_sk_num
(
sk
Ë((skË? (sk)->
num
:-1)

	)

77 
	#M_sk_vÆue
(
sk
,
n
Ë((skË? (sk)->
d©a
[n] : 
NULL
)

	)

79 
sk_num
(c⁄° 
_STACK
 *);

80 *
sk_vÆue
(c⁄° 
_STACK
 *, );

82 *
sk_£t
(
_STACK
 *, , *);

84 
_STACK
 *
sk_√w
((*
cmp
)(const *, const *));

85 
_STACK
 *
sk_√w_nuŒ
();

86 
sk_‰ì
(
_STACK
 *);

87 
sk_p›_‰ì
(
_STACK
 *
°
, (*
func
)(*));

88 
sk_ö£π
(
_STACK
 *
sk
, *
d©a
, 
whîe
);

89 *
sk_dñëe
(
_STACK
 *
°
, 
loc
);

90 *
sk_dñëe_±r
(
_STACK
 *
°
, *
p
);

91 
sk_föd
(
_STACK
 *
°
, *
d©a
);

92 
sk_föd_ex
(
_STACK
 *
°
, *
d©a
);

93 
sk_push
(
_STACK
 *
°
, *
d©a
);

94 
sk_unshi·
(
_STACK
 *
°
, *
d©a
);

95 *
sk_shi·
(
_STACK
 *
°
);

96 *
sk_p›
(
_STACK
 *
°
);

97 
sk_zîo
(
_STACK
 *
°
);

98 (*
sk_£t_cmp_func
(
_STACK
 *
sk
, (*
c
)(const *, const *)))

100 
_STACK
 *
sk_dup
(_STACK *
°
);

101 
sk_s‹t
(
_STACK
 *
°
);

102 
sk_is_s‹ãd
(c⁄° 
_STACK
 *
°
);

104 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/symhacks.h

55 #i‚de‡
HEADER_SYMHACKS_H


56 
	#HEADER_SYMHACKS_H


	)

58 
	~<›ís¶/e_os2.h
>

68 #ifde‡
OPENSSL_SYS_VMS


71 #unde‡
CRYPTO_gë_ex_d©a_im∂emíèti⁄


72 
	#CRYPTO_gë_ex_d©a_im∂emíèti⁄
 
CRYPTO_gë_ex_d©a_im∂


	)

73 #unde‡
CRYPTO_£t_ex_d©a_im∂emíèti⁄


74 
	#CRYPTO_£t_ex_d©a_im∂emíèti⁄
 
CRYPTO_£t_ex_d©a_im∂


	)

77 #unde‡
ASN1_STRING_£t_deÁu…_mask_asc


78 
	#ASN1_STRING_£t_deÁu…_mask_asc
 
ASN1_STRING_£t_def_mask_asc


	)

82 #unde‡
i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO


83 
	#i2d_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
i2d_ASN1_SET_OF_PKCS7_SIGINF


	)

84 #unde‡
d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO


85 
	#d2i_ASN1_SET_OF_PKCS7_SIGNER_INFO
 
d2i_ASN1_SET_OF_PKCS7_SIGINF


	)

90 #unde‡
i2d_ASN1_SET_OF_PKCS7_RECIP_INFO


91 
	#i2d_ASN1_SET_OF_PKCS7_RECIP_INFO
 
i2d_ASN1_SET_OF_PKCS7_RECINF


	)

92 #unde‡
d2i_ASN1_SET_OF_PKCS7_RECIP_INFO


93 
	#d2i_ASN1_SET_OF_PKCS7_RECIP_INFO
 
d2i_ASN1_SET_OF_PKCS7_RECINF


	)

98 #unde‡
i2d_ASN1_SET_OF_ACCESS_DESCRIPTION


99 
	#i2d_ASN1_SET_OF_ACCESS_DESCRIPTION
 
i2d_ASN1_SET_OF_ACC_DESC


	)

100 #unde‡
d2i_ASN1_SET_OF_ACCESS_DESCRIPTION


101 
	#d2i_ASN1_SET_OF_ACCESS_DESCRIPTION
 
d2i_ASN1_SET_OF_ACC_DESC


	)

105 #unde‡
PEM_ªad_NETSCAPE_CERT_SEQUENCE


106 
	#PEM_ªad_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_NS_CERT_SEQ


	)

107 #unde‡
PEM_wrôe_NETSCAPE_CERT_SEQUENCE


108 
	#PEM_wrôe_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_NS_CERT_SEQ


	)

109 #unde‡
PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE


110 
	#PEM_ªad_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_ªad_bio_NS_CERT_SEQ


	)

111 #unde‡
PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE


112 
	#PEM_wrôe_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_bio_NS_CERT_SEQ


	)

113 #unde‡
PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE


114 
	#PEM_wrôe_cb_bio_NETSCAPE_CERT_SEQUENCE
 
PEM_wrôe_cb_bio_NS_CERT_SEQ


	)

117 #unde‡
PEM_ªad_PKCS8_PRIV_KEY_INFO


118 
	#PEM_ªad_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_P8_PRIV_KEY_INFO


	)

119 #unde‡
PEM_wrôe_PKCS8_PRIV_KEY_INFO


120 
	#PEM_wrôe_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_P8_PRIV_KEY_INFO


	)

121 #unde‡
PEM_ªad_bio_PKCS8_PRIV_KEY_INFO


122 
	#PEM_ªad_bio_PKCS8_PRIV_KEY_INFO
 
PEM_ªad_bio_P8_PRIV_KEY_INFO


	)

123 #unde‡
PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO


124 
	#PEM_wrôe_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wrôe_bio_P8_PRIV_KEY_INFO


	)

125 #unde‡
PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO


126 
	#PEM_wrôe_cb_bio_PKCS8_PRIV_KEY_INFO
 
PEM_wπ_cb_bio_P8_PRIV_KEY_INFO


	)

129 #unde‡
PEM_wrôe_bio_PKCS8Priv©eKey_nid


130 
	#PEM_wrôe_bio_PKCS8Priv©eKey_nid
 
PEM_wrôe_bio_PKCS8PrivKey_nid


	)

133 #unde‡
X509_REVOKED_gë_ext_by_¸ôiˇl


134 
	#X509_REVOKED_gë_ext_by_¸ôiˇl
 
X509_REVOKED_gë_ext_by_¸ôic


	)

135 #unde‡
X509_pﬁicy_åì_gë0_u£r_pﬁicõs


136 
	#X509_pﬁicy_åì_gë0_u£r_pﬁicõs
 
X509_pcy_åì_gë0_u§_pﬁicõs


	)

137 #unde‡
X509_pﬁicy_node_gë0_quÆifõrs


138 
	#X509_pﬁicy_node_gë0_quÆifõrs
 
X509_pcy_node_gë0_quÆifõrs


	)

139 #unde‡
X509_STORE_CTX_gë_ex∂icô_pﬁicy


140 
	#X509_STORE_CTX_gë_ex∂icô_pﬁicy
 
X509_STORE_CTX_gë_ex∂_pﬁicy


	)

141 #unde‡
X509_STORE_CTX_gë0_cuºít_issuî


142 
	#X509_STORE_CTX_gë0_cuºít_issuî
 
X509_STORE_CTX_gë0_cur_issuî


	)

145 #unde‡
CRYPTO_£t_dy∆ock_de°roy_ˇŒback


146 
	#CRYPTO_£t_dy∆ock_de°roy_ˇŒback
 
CRYPTO_£t_dy∆ock_de°roy_cb


	)

147 #unde‡
CRYPTO_£t_dy∆ock_¸óã_ˇŒback


148 
	#CRYPTO_£t_dy∆ock_¸óã_ˇŒback
 
CRYPTO_£t_dy∆ock_¸óã_cb


	)

149 #unde‡
CRYPTO_£t_dy∆ock_lock_ˇŒback


150 
	#CRYPTO_£t_dy∆ock_lock_ˇŒback
 
CRYPTO_£t_dy∆ock_lock_cb


	)

151 #unde‡
CRYPTO_gë_dy∆ock_lock_ˇŒback


152 
	#CRYPTO_gë_dy∆ock_lock_ˇŒback
 
CRYPTO_gë_dy∆ock_lock_cb


	)

153 #unde‡
CRYPTO_gë_dy∆ock_de°roy_ˇŒback


154 
	#CRYPTO_gë_dy∆ock_de°roy_ˇŒback
 
CRYPTO_gë_dy∆ock_de°roy_cb


	)

155 #unde‡
CRYPTO_gë_dy∆ock_¸óã_ˇŒback


156 
	#CRYPTO_gë_dy∆ock_¸óã_ˇŒback
 
CRYPTO_gë_dy∆ock_¸óã_cb


	)

157 #unde‡
CRYPTO_£t_locked_mem_ex_fun˘i⁄s


158 
	#CRYPTO_£t_locked_mem_ex_fun˘i⁄s
 
CRYPTO_£t_locked_mem_ex_funcs


	)

159 #unde‡
CRYPTO_gë_locked_mem_ex_fun˘i⁄s


160 
	#CRYPTO_gë_locked_mem_ex_fun˘i⁄s
 
CRYPTO_gë_locked_mem_ex_funcs


	)

163 #unde‡
SSL_CTX_£t_deÁu…_vîify_∑ths


164 
	#SSL_CTX_£t_deÁu…_vîify_∑ths
 
SSL_CTX_£t_def_vîify_∑ths


	)

165 #unde‡
SSL_gë_ex_d©a_X509_STORE_CTX_idx


166 
	#SSL_gë_ex_d©a_X509_STORE_CTX_idx
 
SSL_gë_ex_d_X509_STORE_CTX_idx


	)

167 #unde‡
SSL_add_fûe_˚π_subje˘s_to_°ack


168 
	#SSL_add_fûe_˚π_subje˘s_to_°ack
 
SSL_add_fûe_˚π_subjs_to_°k


	)

169 #unde‡
SSL_add_dú_˚π_subje˘s_to_°ack


170 
	#SSL_add_dú_˚π_subje˘s_to_°ack
 
SSL_add_dú_˚π_subjs_to_°k


	)

171 #unde‡
SSL_CTX_u£_˚πifiˇã_chaö_fûe


172 
	#SSL_CTX_u£_˚πifiˇã_chaö_fûe
 
SSL_CTX_u£_˚π_chaö_fûe


	)

173 #unde‡
SSL_CTX_£t_˚π_vîify_ˇŒback


174 
	#SSL_CTX_£t_˚π_vîify_ˇŒback
 
SSL_CTX_£t_˚π_vîify_cb


	)

175 #unde‡
SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a


176 
	#SSL_CTX_£t_deÁu…_∑sswd_cb_u£rd©a
 
SSL_CTX_£t_def_∑sswd_cb_ud


	)

177 #unde‡
SSL_COMP_gë_com¥essi⁄_mëhods


178 
	#SSL_COMP_gë_com¥essi⁄_mëhods
 
SSL_COMP_gë_com¥ess_mëhods


	)

179 #unde‡
s¶_add_˛õ¡hñlo_ª√gŸüã_ext


180 
	#s¶_add_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_add_˛õ¡hñlo_ª√g_ext


	)

181 #unde‡
s¶_add_£rvîhñlo_ª√gŸüã_ext


182 
	#s¶_add_£rvîhñlo_ª√gŸüã_ext
 
s¶_add_£rvîhñlo_ª√g_ext


	)

183 #unde‡
s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext


184 
	#s¶_∑r£_˛õ¡hñlo_ª√gŸüã_ext
 
s¶_∑r£_˛õ¡hñlo_ª√g_ext


	)

185 #unde‡
s¶_∑r£_£rvîhñlo_ª√gŸüã_ext


186 
	#s¶_∑r£_£rvîhñlo_ª√gŸüã_ext
 
s¶_∑r£_£rvîhñlo_ª√g_ext


	)

187 #unde‡
SSL_§p_£rvî_∑øm_wôh_u£∫ame


188 
	#SSL_§p_£rvî_∑øm_wôh_u£∫ame
 
SSL_§p_£rvî_∑øm_wôh_un


	)

189 #unde‡
SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback


190 
	#SSL_CTX_£t_§p_˛õ¡_pwd_ˇŒback
 
SSL_CTX_£t_§p_˛õ¡_pwd_cb


	)

191 #unde‡
SSL_CTX_£t_§p_vîify_∑øm_ˇŒback


192 
	#SSL_CTX_£t_§p_vîify_∑øm_ˇŒback
 
SSL_CTX_£t_§p_vfy_∑øm_cb


	)

193 #unde‡
SSL_CTX_£t_§p_u£∫ame_ˇŒback


194 
	#SSL_CTX_£t_§p_u£∫ame_ˇŒback
 
SSL_CTX_£t_§p_un_cb


	)

195 #unde‡
s¶_add_˛õ¡hñlo_u£_§ç_ext


196 
	#s¶_add_˛õ¡hñlo_u£_§ç_ext
 
s¶_add_˛ihñlo_u£_§ç_ext


	)

197 #unde‡
s¶_add_£rvîhñlo_u£_§ç_ext


198 
	#s¶_add_£rvîhñlo_u£_§ç_ext
 
s¶_add_£rhñlo_u£_§ç_ext


	)

199 #unde‡
s¶_∑r£_˛õ¡hñlo_u£_§ç_ext


200 
	#s¶_∑r£_˛õ¡hñlo_u£_§ç_ext
 
s¶_∑r£_˛ihñlo_u£_§ç_ext


	)

201 #unde‡
s¶_∑r£_£rvîhñlo_u£_§ç_ext


202 
	#s¶_∑r£_£rvîhñlo_u£_§ç_ext
 
s¶_∑r£_£rhñlo_u£_§ç_ext


	)

203 #unde‡
SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb


204 
	#SSL_CTX_£t_√xt_¥Ÿos_advîti£d_cb
 
SSL_CTX_£t_√xt_¥Ÿos_adv_cb


	)

205 #unde‡
SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb


206 
	#SSL_CTX_£t_√xt_¥Ÿo_£À˘_cb
 
SSL_CTX_£t_√xt_¥Ÿo_£l_cb


	)

209 #unde‡
ENGINE_gë_deÁu…_BN_mod_exp_¸t


210 
	#ENGINE_gë_deÁu…_BN_mod_exp_¸t
 
ENGINE_gë_def_BN_mod_exp_¸t


	)

211 #unde‡
ENGINE_£t_deÁu…_BN_mod_exp_¸t


212 
	#ENGINE_£t_deÁu…_BN_mod_exp_¸t
 
ENGINE_£t_def_BN_mod_exp_¸t


	)

213 #unde‡
ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄


214 
	#ENGINE_£t_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_£t_lﬂd_¥ivkey_‚


	)

215 #unde‡
ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄


216 
	#ENGINE_gë_lﬂd_¥ivkey_fun˘i⁄
 
ENGINE_gë_lﬂd_¥ivkey_‚


	)

217 #unde‡
ENGINE_uƒegi°î_pkey_a¢1_mëhs


218 
	#ENGINE_uƒegi°î_pkey_a¢1_mëhs
 
ENGINE_uƒeg_pkey_a¢1_mëhs


	)

219 #unde‡
ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs


220 
	#ENGINE_ªgi°î_Æl_pkey_a¢1_mëhs
 
ENGINE_ªg_Æl_pkey_a¢1_mëhs


	)

221 #unde‡
ENGINE_£t_deÁu…_pkey_a¢1_mëhs


222 
	#ENGINE_£t_deÁu…_pkey_a¢1_mëhs
 
ENGINE_£t_def_pkey_a¢1_mëhs


	)

223 #unde‡
ENGINE_gë_pkey_a¢1_mëh_ígöe


224 
	#ENGINE_gë_pkey_a¢1_mëh_ígöe
 
ENGINE_gë_pkey_a¢1_mëh_íg


	)

225 #unde‡
ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄


226 
	#ENGINE_£t_lﬂd_s¶_˛õ¡_˚π_fun˘i⁄
 \

227 
ENGINE_£t_ld_s¶_˛¡_˚π_‚


	)

228 #unde‡
ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄


229 
	#ENGINE_gë_s¶_˛õ¡_˚π_fun˘i⁄
 
ENGINE_gë_s¶_˛õ¡_˚π_‚


	)

232 #unde‡
OCSP_REQUEST_gë_ext_by_¸ôiˇl


233 
	#OCSP_REQUEST_gë_ext_by_¸ôiˇl
 
OCSP_REQUEST_gë_ext_by_¸ô


	)

234 #unde‡
OCSP_BASICRESP_gë_ext_by_¸ôiˇl


235 
	#OCSP_BASICRESP_gë_ext_by_¸ôiˇl
 
OCSP_BASICRESP_gë_ext_by_¸ô


	)

236 #unde‡
OCSP_SINGLERESP_gë_ext_by_¸ôiˇl


237 
	#OCSP_SINGLERESP_gë_ext_by_¸ôiˇl
 
OCSP_SINGLERESP_gë_ext_by_¸ô


	)

240 #unde‡
_os¶_ﬁd_des_ede3_cfb64_í¸y±


241 
	#_os¶_ﬁd_des_ede3_cfb64_í¸y±
 
_os¶_odes_ede3_cfb64_í¸y±


	)

242 #unde‡
_os¶_ﬁd_des_ede3_ofb64_í¸y±


243 
	#_os¶_ﬁd_des_ede3_ofb64_í¸y±
 
_os¶_odes_ede3_ofb64_í¸y±


	)

246 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_noc⁄f


247 
	#OPENSSL_add_Æl_Æg‹ôhms_noc⁄f
 
OPENSSL_add_Æl_Ægo_noc⁄f


	)

248 #unde‡
OPENSSL_add_Æl_Æg‹ôhms_c⁄f


249 
	#OPENSSL_add_Æl_Æg‹ôhms_c⁄f
 
OPENSSL_add_Æl_Ægo_c⁄f


	)

250 #unde‡
EVP_PKEY_mëh_£t_vîify_ªcovî


251 
	#EVP_PKEY_mëh_£t_vîify_ªcovî
 
EVP_PKEY_mëh_£t_vrfy_ªcovî


	)

254 #unde‡
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m


255 
	#EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_£t_poöt_c⁄v_f‹m


	)

256 #unde‡
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m


257 
	#EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
 
EC_GROUP_gë_poöt_c⁄v_f‹m


	)

258 #unde‡
EC_GROUP_˛ór_‰ì_Æl_exåa_d©a


259 
	#EC_GROUP_˛ór_‰ì_Æl_exåa_d©a
 
EC_GROUP_˛r_‰ì_Æl_xåa_d©a


	)

260 #unde‡
EC_KEY_£t_public_key_afföe_co‹dö©es


261 
	#EC_KEY_£t_public_key_afföe_co‹dö©es
 \

262 
EC_KEY_£t_pub_key_aff_co‹ds


	)

263 #unde‡
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp


264 
	#EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
 \

265 
EC_POINT_£t_J¥oj_co‹ds_GFp


	)

266 #unde‡
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp


267 
	#EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
 \

268 
EC_POINT_gë_J¥oj_co‹ds_GFp


	)

269 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GFp


270 
	#EC_POINT_£t_afföe_co‹dö©es_GFp
 
EC_POINT_£t_afföe_co‹ds_GFp


	)

271 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GFp


272 
	#EC_POINT_gë_afföe_co‹dö©es_GFp
 
EC_POINT_gë_afföe_co‹ds_GFp


	)

273 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GFp


274 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GFp
 
EC_POINT_£t_com¥_co‹ds_GFp


	)

275 #unde‡
EC_POINT_£t_afföe_co‹dö©es_GF2m


276 
	#EC_POINT_£t_afföe_co‹dö©es_GF2m
 
EC_POINT_£t_afföe_co‹ds_GF2m


	)

277 #unde‡
EC_POINT_gë_afföe_co‹dö©es_GF2m


278 
	#EC_POINT_gë_afföe_co‹dö©es_GF2m
 
EC_POINT_gë_afföe_co‹ds_GF2m


	)

279 #unde‡
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m


280 
	#EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
 \

281 
EC_POINT_£t_com¥_co‹ds_GF2m


	)

282 #unde‡
ec_GF2m_sim∂e_group_˛ór_föish


283 
	#ec_GF2m_sim∂e_group_˛ór_föish
 
ec_GF2m_sim∂e_gΩ_˛r_föish


	)

284 #unde‡
ec_GF2m_sim∂e_group_check_dis¸imö™t


285 
	#ec_GF2m_sim∂e_group_check_dis¸imö™t
 
ec_GF2m_sim∂e_gΩ_chk_dis¸im


	)

286 #unde‡
ec_GF2m_sim∂e_poöt_˛ór_föish


287 
	#ec_GF2m_sim∂e_poöt_˛ór_föish
 
ec_GF2m_sim∂e_±_˛r_föish


	)

288 #unde‡
ec_GF2m_sim∂e_poöt_£t_to_öföôy


289 
	#ec_GF2m_sim∂e_poöt_£t_to_öföôy
 
ec_GF2m_sim∂e_±_£t_to_öf


	)

290 #unde‡
ec_GF2m_sim∂e_poöts_make_afföe


291 
	#ec_GF2m_sim∂e_poöts_make_afföe
 
ec_GF2m_sim∂e_±s_make_afföe


	)

292 #unde‡
ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es


293 
	#ec_GF2m_sim∂e_poöt_£t_afföe_co‹dö©es
 \

294 
ec_GF2m_smp_±_£t_af_co‹ds


	)

295 #unde‡
ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es


296 
	#ec_GF2m_sim∂e_poöt_gë_afföe_co‹dö©es
 \

297 
ec_GF2m_smp_±_gë_af_co‹ds


	)

298 #unde‡
ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es


299 
	#ec_GF2m_sim∂e_£t_com¥es£d_co‹dö©es
 \

300 
ec_GF2m_smp_£t_com¥_co‹ds


	)

301 #unde‡
ec_GFp_sim∂e_group_£t_curve_GFp


302 
	#ec_GFp_sim∂e_group_£t_curve_GFp
 
ec_GFp_sim∂e_gΩ_£t_curve_GFp


	)

303 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


304 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

305 #unde‡
ec_GFp_sim∂e_group_˛ór_föish


306 
	#ec_GFp_sim∂e_group_˛ór_föish
 
ec_GFp_sim∂e_gΩ_˛ór_föish


	)

307 #unde‡
ec_GFp_sim∂e_group_£t_gíî©‹


308 
	#ec_GFp_sim∂e_group_£t_gíî©‹
 
ec_GFp_sim∂e_gΩ_£t_gíî©‹


	)

309 #unde‡
ec_GFp_sim∂e_group_gë0_gíî©‹


310 
	#ec_GFp_sim∂e_group_gë0_gíî©‹
 
ec_GFp_sim∂e_gΩ_gt0_gíî©‹


	)

311 #unde‡
ec_GFp_sim∂e_group_gë_coÁ˘‹


312 
	#ec_GFp_sim∂e_group_gë_coÁ˘‹
 
ec_GFp_sim∂e_gΩ_gë_coÁ˘‹


	)

313 #unde‡
ec_GFp_sim∂e_poöt_˛ór_föish


314 
	#ec_GFp_sim∂e_poöt_˛ór_föish
 
ec_GFp_sim∂e_±_˛ór_föish


	)

315 #unde‡
ec_GFp_sim∂e_poöt_£t_to_öföôy


316 
	#ec_GFp_sim∂e_poöt_£t_to_öföôy
 
ec_GFp_sim∂e_±_£t_to_öf


	)

317 #unde‡
ec_GFp_sim∂e_poöts_make_afföe


318 
	#ec_GFp_sim∂e_poöts_make_afföe
 
ec_GFp_sim∂e_±s_make_afföe


	)

319 #unde‡
ec_GFp_sim∂e_group_gë_curve_GFp


320 
	#ec_GFp_sim∂e_group_gë_curve_GFp
 
ec_GFp_sim∂e_gΩ_gë_curve_GFp


	)

321 #unde‡
ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp


322 
	#ec_GFp_sim∂e_£t_J¥oje˘ive_co‹dö©es_GFp
 \

323 
ec_GFp_smp_£t_J¥oj_co‹ds_GFp


	)

324 #unde‡
ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp


325 
	#ec_GFp_sim∂e_gë_J¥oje˘ive_co‹dö©es_GFp
 \

326 
ec_GFp_smp_gë_J¥oj_co‹ds_GFp


	)

327 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp


328 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es_GFp
 \

329 
ec_GFp_smp_±_£t_af_co‹ds_GFp


	)

330 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp


331 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es_GFp
 \

332 
ec_GFp_smp_±_gë_af_co‹ds_GFp


	)

333 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp


334 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es_GFp
 \

335 
ec_GFp_smp_£t_com¥_co‹ds_GFp


	)

336 #unde‡
ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es


337 
	#ec_GFp_sim∂e_poöt_£t_afföe_co‹dö©es
 \

338 
ec_GFp_smp_±_£t_af_co‹ds


	)

339 #unde‡
ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es


340 
	#ec_GFp_sim∂e_poöt_gë_afföe_co‹dö©es
 \

341 
ec_GFp_smp_±_gë_af_co‹ds


	)

342 #unde‡
ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es


343 
	#ec_GFp_sim∂e_£t_com¥es£d_co‹dö©es
 \

344 
ec_GFp_smp_£t_com¥_co‹ds


	)

345 #unde‡
ec_GFp_sim∂e_group_check_dis¸imö™t


346 
	#ec_GFp_sim∂e_group_check_dis¸imö™t
 
ec_GFp_sim∂e_gΩ_chk_dis¸im


	)

349 #unde‡
STORE_mëhod_£t_öôüli£_fun˘i⁄


350 
	#STORE_mëhod_£t_öôüli£_fun˘i⁄
 
STORE_mëh_£t_öôüli£_‚


	)

351 #unde‡
STORE_mëhod_£t_˛ónup_fun˘i⁄


352 
	#STORE_mëhod_£t_˛ónup_fun˘i⁄
 
STORE_mëh_£t_˛ónup_‚


	)

353 #unde‡
STORE_mëhod_£t_gíî©e_fun˘i⁄


354 
	#STORE_mëhod_£t_gíî©e_fun˘i⁄
 
STORE_mëh_£t_gíî©e_‚


	)

355 #unde‡
STORE_mëhod_£t_modify_fun˘i⁄


356 
	#STORE_mëhod_£t_modify_fun˘i⁄
 
STORE_mëh_£t_modify_‚


	)

357 #unde‡
STORE_mëhod_£t_ªvoke_fun˘i⁄


358 
	#STORE_mëhod_£t_ªvoke_fun˘i⁄
 
STORE_mëh_£t_ªvoke_‚


	)

359 #unde‡
STORE_mëhod_£t_dñëe_fun˘i⁄


360 
	#STORE_mëhod_£t_dñëe_fun˘i⁄
 
STORE_mëh_£t_dñëe_‚


	)

361 #unde‡
STORE_mëhod_£t_li°_°¨t_fun˘i⁄


362 
	#STORE_mëhod_£t_li°_°¨t_fun˘i⁄
 
STORE_mëh_£t_li°_°¨t_‚


	)

363 #unde‡
STORE_mëhod_£t_li°_√xt_fun˘i⁄


364 
	#STORE_mëhod_£t_li°_√xt_fun˘i⁄
 
STORE_mëh_£t_li°_√xt_‚


	)

365 #unde‡
STORE_mëhod_£t_li°_íd_fun˘i⁄


366 
	#STORE_mëhod_£t_li°_íd_fun˘i⁄
 
STORE_mëh_£t_li°_íd_‚


	)

367 #unde‡
STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄


368 
	#STORE_mëhod_£t_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_£t_upd©e_°‹e_‚


	)

369 #unde‡
STORE_mëhod_£t_lock_°‹e_fun˘i⁄


370 
	#STORE_mëhod_£t_lock_°‹e_fun˘i⁄
 
STORE_mëh_£t_lock_°‹e_‚


	)

371 #unde‡
STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄


372 
	#STORE_mëhod_£t_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_£t_u∆ock_°‹e_‚


	)

373 #unde‡
STORE_mëhod_gë_öôüli£_fun˘i⁄


374 
	#STORE_mëhod_gë_öôüli£_fun˘i⁄
 
STORE_mëh_gë_öôüli£_‚


	)

375 #unde‡
STORE_mëhod_gë_˛ónup_fun˘i⁄


376 
	#STORE_mëhod_gë_˛ónup_fun˘i⁄
 
STORE_mëh_gë_˛ónup_‚


	)

377 #unde‡
STORE_mëhod_gë_gíî©e_fun˘i⁄


378 
	#STORE_mëhod_gë_gíî©e_fun˘i⁄
 
STORE_mëh_gë_gíî©e_‚


	)

379 #unde‡
STORE_mëhod_gë_modify_fun˘i⁄


380 
	#STORE_mëhod_gë_modify_fun˘i⁄
 
STORE_mëh_gë_modify_‚


	)

381 #unde‡
STORE_mëhod_gë_ªvoke_fun˘i⁄


382 
	#STORE_mëhod_gë_ªvoke_fun˘i⁄
 
STORE_mëh_gë_ªvoke_‚


	)

383 #unde‡
STORE_mëhod_gë_dñëe_fun˘i⁄


384 
	#STORE_mëhod_gë_dñëe_fun˘i⁄
 
STORE_mëh_gë_dñëe_‚


	)

385 #unde‡
STORE_mëhod_gë_li°_°¨t_fun˘i⁄


386 
	#STORE_mëhod_gë_li°_°¨t_fun˘i⁄
 
STORE_mëh_gë_li°_°¨t_‚


	)

387 #unde‡
STORE_mëhod_gë_li°_√xt_fun˘i⁄


388 
	#STORE_mëhod_gë_li°_√xt_fun˘i⁄
 
STORE_mëh_gë_li°_√xt_‚


	)

389 #unde‡
STORE_mëhod_gë_li°_íd_fun˘i⁄


390 
	#STORE_mëhod_gë_li°_íd_fun˘i⁄
 
STORE_mëh_gë_li°_íd_‚


	)

391 #unde‡
STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄


392 
	#STORE_mëhod_gë_upd©e_°‹e_fun˘i⁄
 
STORE_mëh_gë_upd©e_°‹e_‚


	)

393 #unde‡
STORE_mëhod_gë_lock_°‹e_fun˘i⁄


394 
	#STORE_mëhod_gë_lock_°‹e_fun˘i⁄
 
STORE_mëh_gë_lock_°‹e_‚


	)

395 #unde‡
STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄


396 
	#STORE_mëhod_gë_u∆ock_°‹e_fun˘i⁄
 
STORE_mëh_gë_u∆ock_°‹e_‚


	)

399 #unde‡
TS_RESP_CTX_£t_°©us_öfo_c⁄d


400 
	#TS_RESP_CTX_£t_°©us_öfo_c⁄d
 
TS_RESP_CTX_£t_°©_öfo_c⁄d


	)

401 #unde‡
TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs


402 
	#TS_RESP_CTX_£t_˛ock_¥ecisi⁄_digôs
 
TS_RESP_CTX_£t_˛k_¥ec_digôs


	)

403 #unde‡
TS_CONF_£t_˛ock_¥ecisi⁄_digôs


404 
	#TS_CONF_£t_˛ock_¥ecisi⁄_digôs
 
TS_CONF_£t_˛k_¥ec_digôs


	)

407 #unde‡
CMS_Recùõ¡Info_kåi_gë0_Ægs


408 
	#CMS_Recùõ¡Info_kåi_gë0_Ægs
 
CMS_RecùInfo_kåi_gë0_Ægs


	)

409 #unde‡
CMS_Recùõ¡Info_kåi_gë0_sig√r_id


410 
	#CMS_Recùõ¡Info_kåi_gë0_sig√r_id
 
CMS_RecùInfo_kåi_gë0_sigr_id


	)

411 #unde‡
CMS_OthîRevoˇti⁄InfoF‹m©_ô


412 
	#CMS_OthîRevoˇti⁄InfoF‹m©_ô
 
CMS_OthîRevocInfoF‹m©_ô


	)

413 #unde‡
CMS_KeyAgªeRecùõ¡Idítifõr_ô


414 
	#CMS_KeyAgªeRecùõ¡Idítifõr_ô
 
CMS_KeyAgªeRecùIdítifõr_ô


	)

415 #unde‡
CMS_Origö©‹IdítifõrOrKey_ô


416 
	#CMS_Origö©‹IdítifõrOrKey_ô
 
CMS_Origö©‹IdOrKey_ô


	)

417 #unde‡
cms_Sig√rIdítifõr_gë0_sig√r_id


418 
	#cms_Sig√rIdítifõr_gë0_sig√r_id
 
cms_Sig√rId_gë0_sig√r_id


	)

421 #unde‡
dés1_ªå™smô_buf„ªd_mesßges


422 
	#dés1_ªå™smô_buf„ªd_mesßges
 
dés1_ªå™smô_buf„ªd_msgs


	)

425 #unde‡
SRP_gíî©e_£rvî_ma°î_£¸ë


426 
	#SRP_gíî©e_£rvî_ma°î_£¸ë
 
SRP_gí_£rvî_ma°î_£¸ë


	)

427 #unde‡
SRP_gíî©e_˛õ¡_ma°î_£¸ë


428 
	#SRP_gíî©e_˛õ¡_ma°î_£¸ë
 
SRP_gí_˛õ¡_ma°î_£¸ë


	)

431 #unde‡
UI_mëhod_gë_¥om±_c⁄°ru˘‹


432 
	#UI_mëhod_gë_¥om±_c⁄°ru˘‹
 
UI_mëhod_gë_¥om±_c⁄°ru˘r


	)

433 #unde‡
UI_mëhod_£t_¥om±_c⁄°ru˘‹


434 
	#UI_mëhod_£t_¥om±_c⁄°ru˘‹
 
UI_mëhod_£t_¥om±_c⁄°ru˘r


	)

440 #i‡
deföed
(
OPENSSL_SYS_VMS
Ë|| deföed(
OPENSSL_SYS_OS2
)

441 #unde‡
ERR_lﬂd_CRYPTO_°rögs


442 
	#ERR_lﬂd_CRYPTO_°rögs
 
ERR_lﬂd_CRYPTOlib_°rögs


	)

443 #unde‡
OCSP_¸lID_√w


444 
	#OCSP_¸lID_√w
 
OCSP_¸lID2_√w


	)

446 #unde‡
d2i_ECPARAMETERS


447 
	#d2i_ECPARAMETERS
 
d2i_UC_ECPARAMETERS


	)

448 #unde‡
i2d_ECPARAMETERS


449 
	#i2d_ECPARAMETERS
 
i2d_UC_ECPARAMETERS


	)

450 #unde‡
d2i_ECPKPARAMETERS


451 
	#d2i_ECPKPARAMETERS
 
d2i_UC_ECPKPARAMETERS


	)

452 #unde‡
i2d_ECPKPARAMETERS


453 
	#i2d_ECPKPARAMETERS
 
i2d_UC_ECPKPARAMETERS


	)

461 #unde‡
X509v3_˛ónup_exãnsi⁄s


462 
	#X509v3_˛ónup_exãnsi⁄s
 
oX509v3_˛ónup_exãnsi⁄s


	)

463 #unde‡
X509v3_add_exãnsi⁄


464 
	#X509v3_add_exãnsi⁄
 
oX509v3_add_exãnsi⁄


	)

465 #unde‡
X509v3_add_√tsˇ≥_exãnsi⁄s


466 
	#X509v3_add_√tsˇ≥_exãnsi⁄s
 
oX509v3_add_√tsˇ≥_exãnsi⁄s


	)

467 #unde‡
X509v3_add_°™d¨d_exãnsi⁄s


468 
	#X509v3_add_°™d¨d_exãnsi⁄s
 
oX509v3_add_°™d¨d_exãnsi⁄s


	)

471 #unde‡
cms_D©a_¸óã


472 
	#cms_D©a_¸óã
 
¥iv_cms_D©a_¸óã


	)

	@/usr/include/openssl/tls1.h

151 #i‚de‡
HEADER_TLS1_H


152 
	#HEADER_TLS1_H


	)

154 
	~<›ís¶/buf„r.h
>

156 #ifde‡ 
__˝lu•lus


160 
	#TLS1_ALLOW_EXPERIMENTAL_CIPHERSUITES
 0

	)

162 
	#TLS1_VERSION
 0x0301

	)

163 
	#TLS1_1_VERSION
 0x0302

	)

164 
	#TLS1_2_VERSION
 0x0303

	)

165 
	#TLS_MAX_VERSION
 
TLS1_2_VERSION


	)

167 
	#TLS1_VERSION_MAJOR
 0x03

	)

168 
	#TLS1_VERSION_MINOR
 0x01

	)

170 
	#TLS1_1_VERSION_MAJOR
 0x03

	)

171 
	#TLS1_1_VERSION_MINOR
 0x02

	)

173 
	#TLS1_2_VERSION_MAJOR
 0x03

	)

174 
	#TLS1_2_VERSION_MINOR
 0x03

	)

176 
	#TLS1_gë_vîsi⁄
(
s
) \

177 ((
s
->
vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->vîsi⁄ : 0)

	)

179 
	#TLS1_gë_˛õ¡_vîsi⁄
(
s
) \

180 ((
s
->
˛õ¡_vîsi⁄
 >> 8Ë=
TLS1_VERSION_MAJOR
 ? s->˛õ¡_vîsi⁄ : 0)

	)

182 
	#TLS1_AD_DECRYPTION_FAILED
 21

	)

183 
	#TLS1_AD_RECORD_OVERFLOW
 22

	)

184 
	#TLS1_AD_UNKNOWN_CA
 48

	)

185 
	#TLS1_AD_ACCESS_DENIED
 49

	)

186 
	#TLS1_AD_DECODE_ERROR
 50

	)

187 
	#TLS1_AD_DECRYPT_ERROR
 51

	)

188 
	#TLS1_AD_EXPORT_RESTRICTION
 60

	)

189 
	#TLS1_AD_PROTOCOL_VERSION
 70

	)

190 
	#TLS1_AD_INSUFFICIENT_SECURITY
 71

	)

191 
	#TLS1_AD_INTERNAL_ERROR
 80

	)

192 
	#TLS1_AD_INAPPROPRIATE_FALLBACK
 86

	)

193 
	#TLS1_AD_USER_CANCELLED
 90

	)

194 
	#TLS1_AD_NO_RENEGOTIATION
 100

	)

196 
	#TLS1_AD_UNSUPPORTED_EXTENSION
 110

	)

197 
	#TLS1_AD_CERTIFICATE_UNOBTAINABLE
 111

	)

198 
	#TLS1_AD_UNRECOGNIZED_NAME
 112

	)

199 
	#TLS1_AD_BAD_CERTIFICATE_STATUS_RESPONSE
 113

	)

200 
	#TLS1_AD_BAD_CERTIFICATE_HASH_VALUE
 114

	)

201 
	#TLS1_AD_UNKNOWN_PSK_IDENTITY
 115

	)

204 
	#TLSEXT_TYPE_£rvî_«me
 0

	)

205 
	#TLSEXT_TYPE_max_‰agmít_Àngth
 1

	)

206 
	#TLSEXT_TYPE_˛õ¡_˚πifiˇã_uæ
 2

	)

207 
	#TLSEXT_TYPE_åu°ed_ˇ_keys
 3

	)

208 
	#TLSEXT_TYPE_åunˇãd_hmac
 4

	)

209 
	#TLSEXT_TYPE_°©us_ªque°
 5

	)

211 
	#TLSEXT_TYPE_u£r_m≠pög
 6

	)

214 
	#TLSEXT_TYPE_˛õ¡_authz
 7

	)

215 
	#TLSEXT_TYPE_£rvî_authz
 8

	)

218 
	#TLSEXT_TYPE_˚π_ty≥
 9

	)

221 
	#TLSEXT_TYPE_ñlùtic_curves
 10

	)

222 
	#TLSEXT_TYPE_ec_poöt_f‹m©s
 11

	)

225 
	#TLSEXT_TYPE_§p
 12

	)

228 
	#TLSEXT_TYPE_sig«tuª_Æg‹ôhms
 13

	)

231 
	#TLSEXT_TYPE_u£_§ç
 14

	)

234 
	#TLSEXT_TYPE_hóπbót
 15

	)

237 
	#TLSEXT_TYPE_£ssi⁄_tickë
 35

	)

243 
	#TLSEXT_TYPE_›aque_¥f_öput
 ?? */

	)

247 
	#TLSEXT_TYPE_ª√gŸüã
 0xff01

	)

249 #i‚de‡
OPENSSL_NO_NEXTPROTONEG


251 
	#TLSEXT_TYPE_√xt_¥Ÿo_√g
 13172

	)

255 
	#TLSEXT_NAMETYPE_ho°_«me
 0

	)

257 
	#TLSEXT_STATUSTYPE_oc•
 1

	)

260 
	#TLSEXT_ECPOINTFORMAT_fú°
 0

	)

261 
	#TLSEXT_ECPOINTFORMAT_uncom¥es£d
 0

	)

262 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_¥ime
 1

	)

263 
	#TLSEXT_ECPOINTFORMAT_™siX962_com¥es£d_ch¨2
 2

	)

264 
	#TLSEXT_ECPOINTFORMAT_œ°
 2

	)

268 
	#TLSEXT_sig«tuª_™⁄ymous
 0

	)

269 
	#TLSEXT_sig«tuª_rß
 1

	)

270 
	#TLSEXT_sig«tuª_dß
 2

	)

271 
	#TLSEXT_sig«tuª_ecdß
 3

	)

273 
	#TLSEXT_hash_n⁄e
 0

	)

274 
	#TLSEXT_hash_md5
 1

	)

275 
	#TLSEXT_hash_sha1
 2

	)

276 
	#TLSEXT_hash_sha224
 3

	)

277 
	#TLSEXT_hash_sha256
 4

	)

278 
	#TLSEXT_hash_sha384
 5

	)

279 
	#TLSEXT_hash_sha512
 6

	)

281 #i‚de‡
OPENSSL_NO_TLSEXT


283 
	#TLSEXT_MAXLEN_ho°_«me
 255

	)

285 c⁄° *
SSL_gë_£rvî«me
(c⁄° 
SSL
 *
s
, c⁄° 
ty≥
);

286 
SSL_gë_£rvî«me_ty≥
(c⁄° 
SSL
 *
s
);

294 
SSL_exp‹t_keyög_m©îül
(
SSL
 *
s
, *
out
, 
size_t
 
ﬁí
,

295 c⁄° *
œbñ
, 
size_t
 
Œí
, c⁄° *
p
, size_à
∂í
,

296 
u£_c⁄ãxt
);

298 
	#SSL_£t_é£xt_ho°_«me
(
s
,
«me
) \

299 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_HOSTNAME
,
TLSEXT_NAMETYPE_ho°_«me
,(*)
«me
)

	)

301 
	#SSL_£t_é£xt_debug_ˇŒback
(
s¶
, 
cb
) \

302 
	`SSL_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_CB
,((*)())
cb
)

	)

304 
	#SSL_£t_é£xt_debug_¨g
(
s¶
, 
¨g
) \

305 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_DEBUG_ARG
,0, (*)
¨g
)

	)

307 
	#SSL_£t_é£xt_°©us_ty≥
(
s¶
, 
ty≥
) \

308 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_TYPE
,
ty≥
, 
NULL
)

	)

310 
	#SSL_gë_é£xt_°©us_exts
(
s¶
, 
¨g
) \

311 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

313 
	#SSL_£t_é£xt_°©us_exts
(
s¶
, 
¨g
) \

314 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_EXTS
,0, (*)
¨g
)

	)

316 
	#SSL_gë_é£xt_°©us_ids
(
s¶
, 
¨g
) \

317 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

319 
	#SSL_£t_é£xt_°©us_ids
(
s¶
, 
¨g
) \

320 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_IDS
,0, (*)
¨g
)

	)

322 
	#SSL_gë_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
) \

323 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_GET_TLSEXT_STATUS_REQ_OCSP_RESP
,0, (*)
¨g
)

	)

325 
	#SSL_£t_é£xt_°©us_oc•_ª•
(
s¶
, 
¨g
, 
¨gÀn
) \

326 
	`SSL_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_OCSP_RESP
,
¨gÀn
, (*)
¨g
)

	)

328 
	#SSL_CTX_£t_é£xt_£rvî«me_ˇŒback
(
˘x
, 
cb
) \

329 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_CB
,((*)())
cb
)

	)

331 
	#SSL_TLSEXT_ERR_OK
 0

	)

332 
	#SSL_TLSEXT_ERR_ALERT_WARNING
 1

	)

333 
	#SSL_TLSEXT_ERR_ALERT_FATAL
 2

	)

334 
	#SSL_TLSEXT_ERR_NOACK
 3

	)

336 
	#SSL_CTX_£t_é£xt_£rvî«me_¨g
(
˘x
, 
¨g
) \

337 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_SERVERNAME_ARG
,0, (*)
¨g
)

	)

339 
	#SSL_CTX_gë_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

340 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_GET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

341 
	#SSL_CTX_£t_é£xt_tickë_keys
(
˘x
, 
keys
, 
keyÀn
) \

342 
	`SSL_CTX_˘æ
((
˘x
),
SSL_CTRL_SET_TLSEXT_TICKET_KEYS
,(
keyÀn
),(
keys
))

	)

344 
	#SSL_CTX_£t_é£xt_°©us_cb
(
s¶
, 
cb
) \

345 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB
,((*)())
cb
)

	)

347 
	#SSL_CTX_£t_é£xt_°©us_¨g
(
s¶
, 
¨g
) \

348 
	`SSL_CTX_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_STATUS_REQ_CB_ARG
,0, (*)
¨g
)

	)

350 
	#SSL_£t_é£xt_›aque_¥f_öput
(
s
, 
§c
, 
Àn
) \

351 
	`SSL_˘æ
(
s
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT
, 
Àn
, 
§c
)

	)

352 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback
(
˘x
, 
cb
) \

353 
	`SSL_CTX_ˇŒback_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB
, ((*)())
cb
)

	)

354 
	#SSL_CTX_£t_é£xt_›aque_¥f_öput_ˇŒback_¨g
(
˘x
, 
¨g
) \

355 
	`SSL_CTX_˘æ
(
˘x
,
SSL_CTRL_SET_TLSEXT_OPAQUE_PRF_INPUT_CB_ARG
, 0, 
¨g
)

	)

357 
	#SSL_CTX_£t_é£xt_tickë_key_cb
(
s¶
, 
cb
) \

358 
	`SSL_CTX_ˇŒback_˘æ
(
s¶
,
SSL_CTRL_SET_TLSEXT_TICKET_KEY_CB
,((*)())
cb
)

	)

360 #i‚de‡
OPENSSL_NO_HEARTBEATS


361 
	#SSL_TLSEXT_HB_ENABLED
 0x01

	)

362 
	#SSL_TLSEXT_HB_DONT_SEND_REQUESTS
 0x02

	)

363 
	#SSL_TLSEXT_HB_DONT_RECV_REQUESTS
 0x04

	)

365 
	#SSL_gë_é£xt_hóπbót_≥ndög
(
s¶
) \

366 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_GET_TLS_EXT_HEARTBEAT_PENDING
,0,
NULL
)

	)

367 
	#SSL_£t_é£xt_hóπbót_no_ªque°s
(
s¶
, 
¨g
) \

368 
	`SSL_˘æ
((
s¶
),
SSL_CTRL_SET_TLS_EXT_HEARTBEAT_NO_REQUESTS
,
¨g
,
NULL
)

	)

373 
	#TLS1_CK_PSK_WITH_RC4_128_SHA
 0x0300008A

	)

374 
	#TLS1_CK_PSK_WITH_3DES_EDE_CBC_SHA
 0x0300008B

	)

375 
	#TLS1_CK_PSK_WITH_AES_128_CBC_SHA
 0x0300008C

	)

376 
	#TLS1_CK_PSK_WITH_AES_256_CBC_SHA
 0x0300008D

	)

383 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_MD5
 0x03000060

	)

384 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 0x03000061

	)

385 
	#TLS1_CK_RSA_EXPORT1024_WITH_DES_CBC_SHA
 0x03000062

	)

386 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 0x03000063

	)

387 
	#TLS1_CK_RSA_EXPORT1024_WITH_RC4_56_SHA
 0x03000064

	)

388 
	#TLS1_CK_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 0x03000065

	)

389 
	#TLS1_CK_DHE_DSS_WITH_RC4_128_SHA
 0x03000066

	)

393 
	#TLS1_CK_RSA_WITH_AES_128_SHA
 0x0300002F

	)

394 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA
 0x03000030

	)

395 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA
 0x03000031

	)

396 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA
 0x03000032

	)

397 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA
 0x03000033

	)

398 
	#TLS1_CK_ADH_WITH_AES_128_SHA
 0x03000034

	)

400 
	#TLS1_CK_RSA_WITH_AES_256_SHA
 0x03000035

	)

401 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA
 0x03000036

	)

402 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA
 0x03000037

	)

403 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA
 0x03000038

	)

404 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA
 0x03000039

	)

405 
	#TLS1_CK_ADH_WITH_AES_256_SHA
 0x0300003A

	)

408 
	#TLS1_CK_RSA_WITH_NULL_SHA256
 0x0300003B

	)

409 
	#TLS1_CK_RSA_WITH_AES_128_SHA256
 0x0300003C

	)

410 
	#TLS1_CK_RSA_WITH_AES_256_SHA256
 0x0300003D

	)

411 
	#TLS1_CK_DH_DSS_WITH_AES_128_SHA256
 0x0300003E

	)

412 
	#TLS1_CK_DH_RSA_WITH_AES_128_SHA256
 0x0300003F

	)

413 
	#TLS1_CK_DHE_DSS_WITH_AES_128_SHA256
 0x03000040

	)

416 
	#TLS1_CK_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000041

	)

417 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000042

	)

418 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000043

	)

419 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 0x03000044

	)

420 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 0x03000045

	)

421 
	#TLS1_CK_ADH_WITH_CAMELLIA_128_CBC_SHA
 0x03000046

	)

424 
	#TLS1_CK_DHE_RSA_WITH_AES_128_SHA256
 0x03000067

	)

425 
	#TLS1_CK_DH_DSS_WITH_AES_256_SHA256
 0x03000068

	)

426 
	#TLS1_CK_DH_RSA_WITH_AES_256_SHA256
 0x03000069

	)

427 
	#TLS1_CK_DHE_DSS_WITH_AES_256_SHA256
 0x0300006A

	)

428 
	#TLS1_CK_DHE_RSA_WITH_AES_256_SHA256
 0x0300006B

	)

429 
	#TLS1_CK_ADH_WITH_AES_128_SHA256
 0x0300006C

	)

430 
	#TLS1_CK_ADH_WITH_AES_256_SHA256
 0x0300006D

	)

433 
	#TLS1_CK_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000084

	)

434 
	#TLS1_CK_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000085

	)

435 
	#TLS1_CK_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000086

	)

436 
	#TLS1_CK_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 0x03000087

	)

437 
	#TLS1_CK_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 0x03000088

	)

438 
	#TLS1_CK_ADH_WITH_CAMELLIA_256_CBC_SHA
 0x03000089

	)

441 
	#TLS1_CK_RSA_WITH_SEED_SHA
 0x03000096

	)

442 
	#TLS1_CK_DH_DSS_WITH_SEED_SHA
 0x03000097

	)

443 
	#TLS1_CK_DH_RSA_WITH_SEED_SHA
 0x03000098

	)

444 
	#TLS1_CK_DHE_DSS_WITH_SEED_SHA
 0x03000099

	)

445 
	#TLS1_CK_DHE_RSA_WITH_SEED_SHA
 0x0300009A

	)

446 
	#TLS1_CK_ADH_WITH_SEED_SHA
 0x0300009B

	)

449 
	#TLS1_CK_RSA_WITH_AES_128_GCM_SHA256
 0x0300009C

	)

450 
	#TLS1_CK_RSA_WITH_AES_256_GCM_SHA384
 0x0300009D

	)

451 
	#TLS1_CK_DHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300009E

	)

452 
	#TLS1_CK_DHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300009F

	)

453 
	#TLS1_CK_DH_RSA_WITH_AES_128_GCM_SHA256
 0x030000A0

	)

454 
	#TLS1_CK_DH_RSA_WITH_AES_256_GCM_SHA384
 0x030000A1

	)

455 
	#TLS1_CK_DHE_DSS_WITH_AES_128_GCM_SHA256
 0x030000A2

	)

456 
	#TLS1_CK_DHE_DSS_WITH_AES_256_GCM_SHA384
 0x030000A3

	)

457 
	#TLS1_CK_DH_DSS_WITH_AES_128_GCM_SHA256
 0x030000A4

	)

458 
	#TLS1_CK_DH_DSS_WITH_AES_256_GCM_SHA384
 0x030000A5

	)

459 
	#TLS1_CK_ADH_WITH_AES_128_GCM_SHA256
 0x030000A6

	)

460 
	#TLS1_CK_ADH_WITH_AES_256_GCM_SHA384
 0x030000A7

	)

463 
	#TLS1_CK_ECDH_ECDSA_WITH_NULL_SHA
 0x0300C001

	)

464 
	#TLS1_CK_ECDH_ECDSA_WITH_RC4_128_SHA
 0x0300C002

	)

465 
	#TLS1_CK_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C003

	)

466 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C004

	)

467 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C005

	)

469 
	#TLS1_CK_ECDHE_ECDSA_WITH_NULL_SHA
 0x0300C006

	)

470 
	#TLS1_CK_ECDHE_ECDSA_WITH_RC4_128_SHA
 0x0300C007

	)

471 
	#TLS1_CK_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 0x0300C008

	)

472 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 0x0300C009

	)

473 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 0x0300C00A

	)

475 
	#TLS1_CK_ECDH_RSA_WITH_NULL_SHA
 0x0300C00B

	)

476 
	#TLS1_CK_ECDH_RSA_WITH_RC4_128_SHA
 0x0300C00C

	)

477 
	#TLS1_CK_ECDH_RSA_WITH_DES_192_CBC3_SHA
 0x0300C00D

	)

478 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_CBC_SHA
 0x0300C00E

	)

479 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_CBC_SHA
 0x0300C00F

	)

481 
	#TLS1_CK_ECDHE_RSA_WITH_NULL_SHA
 0x0300C010

	)

482 
	#TLS1_CK_ECDHE_RSA_WITH_RC4_128_SHA
 0x0300C011

	)

483 
	#TLS1_CK_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 0x0300C012

	)

484 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_CBC_SHA
 0x0300C013

	)

485 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_CBC_SHA
 0x0300C014

	)

487 
	#TLS1_CK_ECDH_™⁄_WITH_NULL_SHA
 0x0300C015

	)

488 
	#TLS1_CK_ECDH_™⁄_WITH_RC4_128_SHA
 0x0300C016

	)

489 
	#TLS1_CK_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 0x0300C017

	)

490 
	#TLS1_CK_ECDH_™⁄_WITH_AES_128_CBC_SHA
 0x0300C018

	)

491 
	#TLS1_CK_ECDH_™⁄_WITH_AES_256_CBC_SHA
 0x0300C019

	)

494 
	#TLS1_CK_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 0x0300C01A

	)

495 
	#TLS1_CK_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 0x0300C01B

	)

496 
	#TLS1_CK_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 0x0300C01C

	)

497 
	#TLS1_CK_SRP_SHA_WITH_AES_128_CBC_SHA
 0x0300C01D

	)

498 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 0x0300C01E

	)

499 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 0x0300C01F

	)

500 
	#TLS1_CK_SRP_SHA_WITH_AES_256_CBC_SHA
 0x0300C020

	)

501 
	#TLS1_CK_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 0x0300C021

	)

502 
	#TLS1_CK_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 0x0300C022

	)

506 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_SHA256
 0x0300C023

	)

507 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_SHA384
 0x0300C024

	)

508 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_SHA256
 0x0300C025

	)

509 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_SHA384
 0x0300C026

	)

510 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_SHA256
 0x0300C027

	)

511 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_SHA384
 0x0300C028

	)

512 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_SHA256
 0x0300C029

	)

513 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_SHA384
 0x0300C02A

	)

516 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02B

	)

517 
	#TLS1_CK_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02C

	)

518 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 0x0300C02D

	)

519 
	#TLS1_CK_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 0x0300C02E

	)

520 
	#TLS1_CK_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 0x0300C02F

	)

521 
	#TLS1_CK_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 0x0300C030

	)

522 
	#TLS1_CK_ECDH_RSA_WITH_AES_128_GCM_SHA256
 0x0300C031

	)

523 
	#TLS1_CK_ECDH_RSA_WITH_AES_256_GCM_SHA384
 0x0300C032

	)

532 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_MD5
 "EXP1024-RC4-MD5"

	)

533 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC2_CBC_56_MD5
 "EXP1024-RC2-CBC-MD5"

	)

534 
	#TLS1_TXT_RSA_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DES-CBC-SHA"

	)

535 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_DES_CBC_SHA
 "EXP1024-DHE-DSS-DES-CBC-SHA"

	)

536 
	#TLS1_TXT_RSA_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-RC4-SHA"

	)

537 
	#TLS1_TXT_DHE_DSS_EXPORT1024_WITH_RC4_56_SHA
 "EXP1024-DHE-DSS-RC4-SHA"

	)

538 
	#TLS1_TXT_DHE_DSS_WITH_RC4_128_SHA
 "DHE-DSS-RC4-SHA"

	)

541 
	#TLS1_TXT_RSA_WITH_AES_128_SHA
 "AES128-SHA"

	)

542 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA
 "DH-DSS-AES128-SHA"

	)

543 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA
 "DH-RSA-AES128-SHA"

	)

544 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA
 "DHE-DSS-AES128-SHA"

	)

545 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA
 "DHE-RSA-AES128-SHA"

	)

546 
	#TLS1_TXT_ADH_WITH_AES_128_SHA
 "ADH-AES128-SHA"

	)

548 
	#TLS1_TXT_RSA_WITH_AES_256_SHA
 "AES256-SHA"

	)

549 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA
 "DH-DSS-AES256-SHA"

	)

550 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA
 "DH-RSA-AES256-SHA"

	)

551 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA
 "DHE-DSS-AES256-SHA"

	)

552 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA
 "DHE-RSA-AES256-SHA"

	)

553 
	#TLS1_TXT_ADH_WITH_AES_256_SHA
 "ADH-AES256-SHA"

	)

556 
	#TLS1_TXT_ECDH_ECDSA_WITH_NULL_SHA
 "ECDH-ECDSA-NULL-SHA"

	)

557 
	#TLS1_TXT_ECDH_ECDSA_WITH_RC4_128_SHA
 "ECDH-ECDSA-RC4-SHA"

	)

558 
	#TLS1_TXT_ECDH_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDH-ECDSA-DES-CBC3-SHA"

	)

559 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_CBC_SHA
 "ECDH-ECDSA-AES128-SHA"

	)

560 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_CBC_SHA
 "ECDH-ECDSA-AES256-SHA"

	)

562 
	#TLS1_TXT_ECDHE_ECDSA_WITH_NULL_SHA
 "ECDHE-ECDSA-NULL-SHA"

	)

563 
	#TLS1_TXT_ECDHE_ECDSA_WITH_RC4_128_SHA
 "ECDHE-ECDSA-RC4-SHA"

	)

564 
	#TLS1_TXT_ECDHE_ECDSA_WITH_DES_192_CBC3_SHA
 "ECDHE-ECDSA-DES-CBC3-SHA"

	)

565 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_CBC_SHA
 "ECDHE-ECDSA-AES128-SHA"

	)

566 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_CBC_SHA
 "ECDHE-ECDSA-AES256-SHA"

	)

568 
	#TLS1_TXT_ECDH_RSA_WITH_NULL_SHA
 "ECDH-RSA-NULL-SHA"

	)

569 
	#TLS1_TXT_ECDH_RSA_WITH_RC4_128_SHA
 "ECDH-RSA-RC4-SHA"

	)

570 
	#TLS1_TXT_ECDH_RSA_WITH_DES_192_CBC3_SHA
 "ECDH-RSA-DES-CBC3-SHA"

	)

571 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_CBC_SHA
 "ECDH-RSA-AES128-SHA"

	)

572 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_CBC_SHA
 "ECDH-RSA-AES256-SHA"

	)

574 
	#TLS1_TXT_ECDHE_RSA_WITH_NULL_SHA
 "ECDHE-RSA-NULL-SHA"

	)

575 
	#TLS1_TXT_ECDHE_RSA_WITH_RC4_128_SHA
 "ECDHE-RSA-RC4-SHA"

	)

576 
	#TLS1_TXT_ECDHE_RSA_WITH_DES_192_CBC3_SHA
 "ECDHE-RSA-DES-CBC3-SHA"

	)

577 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_CBC_SHA
 "ECDHE-RSA-AES128-SHA"

	)

578 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_CBC_SHA
 "ECDHE-RSA-AES256-SHA"

	)

580 
	#TLS1_TXT_ECDH_™⁄_WITH_NULL_SHA
 "AECDH-NULL-SHA"

	)

581 
	#TLS1_TXT_ECDH_™⁄_WITH_RC4_128_SHA
 "AECDH-RC4-SHA"

	)

582 
	#TLS1_TXT_ECDH_™⁄_WITH_DES_192_CBC3_SHA
 "AECDH-DES-CBC3-SHA"

	)

583 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_128_CBC_SHA
 "AECDH-AES128-SHA"

	)

584 
	#TLS1_TXT_ECDH_™⁄_WITH_AES_256_CBC_SHA
 "AECDH-AES256-SHA"

	)

587 
	#TLS1_TXT_PSK_WITH_RC4_128_SHA
 "PSK-RC4-SHA"

	)

588 
	#TLS1_TXT_PSK_WITH_3DES_EDE_CBC_SHA
 "PSK-3DES-EDE-CBC-SHA"

	)

589 
	#TLS1_TXT_PSK_WITH_AES_128_CBC_SHA
 "PSK-AES128-CBC-SHA"

	)

590 
	#TLS1_TXT_PSK_WITH_AES_256_CBC_SHA
 "PSK-AES256-CBC-SHA"

	)

593 
	#TLS1_TXT_SRP_SHA_WITH_3DES_EDE_CBC_SHA
 "SRP-3DES-EDE-CBC-SHA"

	)

594 
	#TLS1_TXT_SRP_SHA_RSA_WITH_3DES_EDE_CBC_SHA
 "SRP-RSA-3DES-EDE-CBC-SHA"

	)

595 
	#TLS1_TXT_SRP_SHA_DSS_WITH_3DES_EDE_CBC_SHA
 "SRP-DSS-3DES-EDE-CBC-SHA"

	)

596 
	#TLS1_TXT_SRP_SHA_WITH_AES_128_CBC_SHA
 "SRP-AES-128-CBC-SHA"

	)

597 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_128_CBC_SHA
 "SRP-RSA-AES-128-CBC-SHA"

	)

598 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_128_CBC_SHA
 "SRP-DSS-AES-128-CBC-SHA"

	)

599 
	#TLS1_TXT_SRP_SHA_WITH_AES_256_CBC_SHA
 "SRP-AES-256-CBC-SHA"

	)

600 
	#TLS1_TXT_SRP_SHA_RSA_WITH_AES_256_CBC_SHA
 "SRP-RSA-AES-256-CBC-SHA"

	)

601 
	#TLS1_TXT_SRP_SHA_DSS_WITH_AES_256_CBC_SHA
 "SRP-DSS-AES-256-CBC-SHA"

	)

604 
	#TLS1_TXT_RSA_WITH_CAMELLIA_128_CBC_SHA
 "CAMELLIA128-SHA"

	)

605 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DH-DSS-CAMELLIA128-SHA"

	)

606 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DH-RSA-CAMELLIA128-SHA"

	)

607 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_128_CBC_SHA
 "DHE-DSS-CAMELLIA128-SHA"

	)

608 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_128_CBC_SHA
 "DHE-RSA-CAMELLIA128-SHA"

	)

609 
	#TLS1_TXT_ADH_WITH_CAMELLIA_128_CBC_SHA
 "ADH-CAMELLIA128-SHA"

	)

611 
	#TLS1_TXT_RSA_WITH_CAMELLIA_256_CBC_SHA
 "CAMELLIA256-SHA"

	)

612 
	#TLS1_TXT_DH_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DH-DSS-CAMELLIA256-SHA"

	)

613 
	#TLS1_TXT_DH_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DH-RSA-CAMELLIA256-SHA"

	)

614 
	#TLS1_TXT_DHE_DSS_WITH_CAMELLIA_256_CBC_SHA
 "DHE-DSS-CAMELLIA256-SHA"

	)

615 
	#TLS1_TXT_DHE_RSA_WITH_CAMELLIA_256_CBC_SHA
 "DHE-RSA-CAMELLIA256-SHA"

	)

616 
	#TLS1_TXT_ADH_WITH_CAMELLIA_256_CBC_SHA
 "ADH-CAMELLIA256-SHA"

	)

619 
	#TLS1_TXT_RSA_WITH_SEED_SHA
 "SEED-SHA"

	)

620 
	#TLS1_TXT_DH_DSS_WITH_SEED_SHA
 "DH-DSS-SEED-SHA"

	)

621 
	#TLS1_TXT_DH_RSA_WITH_SEED_SHA
 "DH-RSA-SEED-SHA"

	)

622 
	#TLS1_TXT_DHE_DSS_WITH_SEED_SHA
 "DHE-DSS-SEED-SHA"

	)

623 
	#TLS1_TXT_DHE_RSA_WITH_SEED_SHA
 "DHE-RSA-SEED-SHA"

	)

624 
	#TLS1_TXT_ADH_WITH_SEED_SHA
 "ADH-SEED-SHA"

	)

627 
	#TLS1_TXT_RSA_WITH_NULL_SHA256
 "NULL-SHA256"

	)

628 
	#TLS1_TXT_RSA_WITH_AES_128_SHA256
 "AES128-SHA256"

	)

629 
	#TLS1_TXT_RSA_WITH_AES_256_SHA256
 "AES256-SHA256"

	)

630 
	#TLS1_TXT_DH_DSS_WITH_AES_128_SHA256
 "DH-DSS-AES128-SHA256"

	)

631 
	#TLS1_TXT_DH_RSA_WITH_AES_128_SHA256
 "DH-RSA-AES128-SHA256"

	)

632 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_SHA256
 "DHE-DSS-AES128-SHA256"

	)

633 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_SHA256
 "DHE-RSA-AES128-SHA256"

	)

634 
	#TLS1_TXT_DH_DSS_WITH_AES_256_SHA256
 "DH-DSS-AES256-SHA256"

	)

635 
	#TLS1_TXT_DH_RSA_WITH_AES_256_SHA256
 "DH-RSA-AES256-SHA256"

	)

636 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_SHA256
 "DHE-DSS-AES256-SHA256"

	)

637 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_SHA256
 "DHE-RSA-AES256-SHA256"

	)

638 
	#TLS1_TXT_ADH_WITH_AES_128_SHA256
 "ADH-AES128-SHA256"

	)

639 
	#TLS1_TXT_ADH_WITH_AES_256_SHA256
 "ADH-AES256-SHA256"

	)

642 
	#TLS1_TXT_RSA_WITH_AES_128_GCM_SHA256
 "AES128-GCM-SHA256"

	)

643 
	#TLS1_TXT_RSA_WITH_AES_256_GCM_SHA384
 "AES256-GCM-SHA384"

	)

644 
	#TLS1_TXT_DHE_RSA_WITH_AES_128_GCM_SHA256
 "DHE-RSA-AES128-GCM-SHA256"

	)

645 
	#TLS1_TXT_DHE_RSA_WITH_AES_256_GCM_SHA384
 "DHE-RSA-AES256-GCM-SHA384"

	)

646 
	#TLS1_TXT_DH_RSA_WITH_AES_128_GCM_SHA256
 "DH-RSA-AES128-GCM-SHA256"

	)

647 
	#TLS1_TXT_DH_RSA_WITH_AES_256_GCM_SHA384
 "DH-RSA-AES256-GCM-SHA384"

	)

648 
	#TLS1_TXT_DHE_DSS_WITH_AES_128_GCM_SHA256
 "DHE-DSS-AES128-GCM-SHA256"

	)

649 
	#TLS1_TXT_DHE_DSS_WITH_AES_256_GCM_SHA384
 "DHE-DSS-AES256-GCM-SHA384"

	)

650 
	#TLS1_TXT_DH_DSS_WITH_AES_128_GCM_SHA256
 "DH-DSS-AES128-GCM-SHA256"

	)

651 
	#TLS1_TXT_DH_DSS_WITH_AES_256_GCM_SHA384
 "DH-DSS-AES256-GCM-SHA384"

	)

652 
	#TLS1_TXT_ADH_WITH_AES_128_GCM_SHA256
 "ADH-AES128-GCM-SHA256"

	)

653 
	#TLS1_TXT_ADH_WITH_AES_256_GCM_SHA384
 "ADH-AES256-GCM-SHA384"

	)

657 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_SHA256
 "ECDHE-ECDSA-AES128-SHA256"

	)

658 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_SHA384
 "ECDHE-ECDSA-AES256-SHA384"

	)

659 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_SHA256
 "ECDH-ECDSA-AES128-SHA256"

	)

660 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_SHA384
 "ECDH-ECDSA-AES256-SHA384"

	)

661 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_SHA256
 "ECDHE-RSA-AES128-SHA256"

	)

662 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_SHA384
 "ECDHE-RSA-AES256-SHA384"

	)

663 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_SHA256
 "ECDH-RSA-AES128-SHA256"

	)

664 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_SHA384
 "ECDH-RSA-AES256-SHA384"

	)

667 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDHE-ECDSA-AES128-GCM-SHA256"

	)

668 
	#TLS1_TXT_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDHE-ECDSA-AES256-GCM-SHA384"

	)

669 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_128_GCM_SHA256
 "ECDH-ECDSA-AES128-GCM-SHA256"

	)

670 
	#TLS1_TXT_ECDH_ECDSA_WITH_AES_256_GCM_SHA384
 "ECDH-ECDSA-AES256-GCM-SHA384"

	)

671 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_128_GCM_SHA256
 "ECDHE-RSA-AES128-GCM-SHA256"

	)

672 
	#TLS1_TXT_ECDHE_RSA_WITH_AES_256_GCM_SHA384
 "ECDHE-RSA-AES256-GCM-SHA384"

	)

673 
	#TLS1_TXT_ECDH_RSA_WITH_AES_128_GCM_SHA256
 "ECDH-RSA-AES128-GCM-SHA256"

	)

674 
	#TLS1_TXT_ECDH_RSA_WITH_AES_256_GCM_SHA384
 "ECDH-RSA-AES256-GCM-SHA384"

	)

676 
	#TLS_CT_RSA_SIGN
 1

	)

677 
	#TLS_CT_DSS_SIGN
 2

	)

678 
	#TLS_CT_RSA_FIXED_DH
 3

	)

679 
	#TLS_CT_DSS_FIXED_DH
 4

	)

680 
	#TLS_CT_ECDSA_SIGN
 64

	)

681 
	#TLS_CT_RSA_FIXED_ECDH
 65

	)

682 
	#TLS_CT_ECDSA_FIXED_ECDH
 66

	)

683 
	#TLS_CT_GOST94_SIGN
 21

	)

684 
	#TLS_CT_GOST01_SIGN
 22

	)

687 
	#TLS_CT_NUMBER
 9

	)

689 
	#TLS1_FINISH_MAC_LENGTH
 12

	)

691 
	#TLS_MD_MAX_CONST_SIZE
 20

	)

692 
	#TLS_MD_CLIENT_FINISH_CONST
 "˛õ¡ föished"

	)

693 
	#TLS_MD_CLIENT_FINISH_CONST_SIZE
 15

	)

694 
	#TLS_MD_SERVER_FINISH_CONST
 "£rvî föished"

	)

695 
	#TLS_MD_SERVER_FINISH_CONST_SIZE
 15

	)

696 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

697 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

698 
	#TLS_MD_KEY_EXPANSION_CONST
 "keyÉx∑nsi⁄"

	)

699 
	#TLS_MD_KEY_EXPANSION_CONST_SIZE
 13

	)

700 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "˛õ¡ wrôêkey"

	)

701 
	#TLS_MD_CLIENT_WRITE_KEY_CONST_SIZE
 16

	)

702 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "£rvî wrôêkey"

	)

703 
	#TLS_MD_SERVER_WRITE_KEY_CONST_SIZE
 16

	)

704 
	#TLS_MD_IV_BLOCK_CONST
 "IV block"

	)

705 
	#TLS_MD_IV_BLOCK_CONST_SIZE
 8

	)

706 
	#TLS_MD_MASTER_SECRET_CONST
 "ma°î se¸ë"

	)

707 
	#TLS_MD_MASTER_SECRET_CONST_SIZE
 13

	)

709 #ifde‡
CHARSET_EBCDIC


710 #unde‡
TLS_MD_CLIENT_FINISH_CONST


711 
	#TLS_MD_CLIENT_FINISH_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

712 #unde‡
TLS_MD_SERVER_FINISH_CONST


713 
	#TLS_MD_SERVER_FINISH_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x66\x69\x6e\x69\x73\x68\x65\x64"

	)

714 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


715 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

716 #unde‡
TLS_MD_KEY_EXPANSION_CONST


717 
	#TLS_MD_KEY_EXPANSION_CONST
 "\x6b\x65\x79\x20\x65\x78\x70\x61\x6e\x73\x69\x6f\x6e"

	)

718 #unde‡
TLS_MD_CLIENT_WRITE_KEY_CONST


719 
	#TLS_MD_CLIENT_WRITE_KEY_CONST
 "\x63\x6c\x69\x65\x6e\x74\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

720 #unde‡
TLS_MD_SERVER_WRITE_KEY_CONST


721 
	#TLS_MD_SERVER_WRITE_KEY_CONST
 "\x73\x65\x72\x76\x65\x72\x20\x77\x72\x69\x74\x65\x20\x6b\x65\x79"

	)

722 #unde‡
TLS_MD_IV_BLOCK_CONST


723 
	#TLS_MD_IV_BLOCK_CONST
 "\x49\x56\x20\x62\x6c\x6f\x63\x6b"

	)

724 #unde‡
TLS_MD_MASTER_SECRET_CONST


725 
	#TLS_MD_MASTER_SECRET_CONST
 "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"

	)

729 
	sés_£ssi⁄_tickë_ext_°


731 
Àngth
;

732 *
d©a
;

735 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ui.h

59 #i‚de‡
HEADER_UI_H


60 
	#HEADER_UI_H


	)

62 #i‚de‡
OPENSSL_NO_DEPRECATED


63 
	~<›ís¶/¸y±o.h
>

65 
	~<›ís¶/ß„°ack.h
>

66 
	~<›ís¶/os¶_typ.h
>

68 #ifde‡ 
__˝lu•lus


83 
UI
 *
UI_√w
();

84 
UI
 *
UI_√w_mëhod
(c⁄° 
UI_METHOD
 *
mëhod
);

85 
UI_‰ì
(
UI
 *
ui
);

130 
UI_add_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

131 *
ªsu…_buf
, 
mösize
, 
maxsize
);

132 
UI_dup_öput_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

133 *
ªsu…_buf
, 
mösize
, 
maxsize
);

134 
UI_add_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

135 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

136 
UI_dup_vîify_°rög
(
UI
 *
ui
, c⁄° *
¥om±
, 
Êags
,

137 *
ªsu…_buf
, 
mösize
, 
maxsize
, c⁄° *
ã°_buf
);

138 
UI_add_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

139 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

140 
Êags
, *
ªsu…_buf
);

141 
UI_dup_öput_boﬁón
(
UI
 *
ui
, c⁄° *
¥om±
, c⁄° *
a˘i⁄_desc
,

142 c⁄° *
ok_ch¨s
, c⁄° *
ˇn˚l_ch¨s
,

143 
Êags
, *
ªsu…_buf
);

144 
UI_add_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

145 
UI_dup_öfo_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

146 
UI_add_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

147 
UI_dup_îr‹_°rög
(
UI
 *
ui
, c⁄° *
ãxt
);

151 
	#UI_INPUT_FLAG_ECHO
 0x01

	)

157 
	#UI_INPUT_FLAG_DEFAULT_PWD
 0x02

	)

168 
	#UI_INPUT_FLAG_USER_BASE
 16

	)

188 *
UI_c⁄°ru˘_¥om±
(
UI
 *
ui_mëhod
,

189 c⁄° *
obje˘_desc
, c⁄° *
obje˘_«me
);

201 *
UI_add_u£r_d©a
(
UI
 *
ui
, *
u£r_d©a
);

203 *
UI_gë0_u£r_d©a
(
UI
 *
ui
);

206 c⁄° *
UI_gë0_ªsu…
(
UI
 *
ui
, 
i
);

209 
UI_¥o˚ss
(
UI
 *
ui
);

214 
UI_˘æ
(
UI
 *
ui
, 
cmd
, 
i
, *
p
, (*
f
)());

220 
	#UI_CTRL_PRINT_ERRORS
 1

	)

224 
	#UI_CTRL_IS_REDOABLE
 2

	)

228 
	#UI_£t_≠p_d©a
(
s
,
¨g
Ë
	`UI_£t_ex_d©a
(s,0,¨g)

	)

229 
	#UI_gë_≠p_d©a
(
s
Ë
	`UI_gë_ex_d©a
(s,0)

	)

230 
UI_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

231 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

232 
UI_£t_ex_d©a
(
UI
 *
r
,
idx
,*
¨g
);

233 *
UI_gë_ex_d©a
(
UI
 *
r
, 
idx
);

236 
UI_£t_deÁu…_mëhod
(c⁄° 
UI_METHOD
 *
mëh
);

237 c⁄° 
UI_METHOD
 *
UI_gë_deÁu…_mëhod
();

238 c⁄° 
UI_METHOD
 *
UI_gë_mëhod
(
UI
 *
ui
);

239 c⁄° 
UI_METHOD
 *
UI_£t_mëhod
(
UI
 *
ui
, c⁄° UI_METHOD *
mëh
);

242 
UI_METHOD
 *
UI_O≥nSSL
();

290 
ui_°rög_°
 
	tUI_STRING
;

291 
DECLARE_STACK_OF
(
UI_STRING
)

295 
	eUI_°rög_ty≥s


297 
UIT_NONE
=0,

298 
UIT_PROMPT
,

299 
UIT_VERIFY
,

300 
UIT_BOOLEAN
,

301 
UIT_INFO
,

302 
UIT_ERROR


306 
UI_METHOD
 *
UI_¸óã_mëhod
(*
«me
);

307 
UI_de°roy_mëhod
(
UI_METHOD
 *
ui_mëhod
);

308 
UI_mëhod_£t_›íî
(
UI_METHOD
 *
mëhod
, (*
›íî
)(
UI
 *
ui
));

309 
UI_mëhod_£t_wrôî
(
UI_METHOD
 *
mëhod
, (*
wrôî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

310 
UI_mëhod_£t_Êushî
(
UI_METHOD
 *
mëhod
, (*
Êushî
)(
UI
 *
ui
));

311 
UI_mëhod_£t_ªadî
(
UI_METHOD
 *
mëhod
, (*
ªadî
)(
UI
 *
ui
, 
UI_STRING
 *
uis
));

312 
UI_mëhod_£t_˛o£r
(
UI_METHOD
 *
mëhod
, (*
˛o£r
)(
UI
 *
ui
));

313 
UI_mëhod_£t_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
, *(*
¥om±_c⁄°ru˘‹
)(
UI
* 
ui
, c⁄° * 
obje˘_desc
, c⁄° * 
obje˘_«me
));

314 (*
UI_mëhod_gë_›íî
(
UI_METHOD
 *
mëhod
))(
UI
*);

315 (*
UI_mëhod_gë_wrôî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

316 (*
UI_mëhod_gë_Êushî
(
UI_METHOD
 *
mëhod
))(
UI
*);

317 (*
UI_mëhod_gë_ªadî
(
UI_METHOD
 *
mëhod
))(
UI
*,
UI_STRING
*);

318 (*
UI_mëhod_gë_˛o£r
(
UI_METHOD
 *
mëhod
))(
UI
*);

319 * (*
UI_mëhod_gë_¥om±_c⁄°ru˘‹
(
UI_METHOD
 *
mëhod
))(
UI
*, const *, const *);

325 
UI_°rög_ty≥s
 
UI_gë_°rög_ty≥
(
UI_STRING
 *
uis
);

327 
UI_gë_öput_Êags
(
UI_STRING
 *
uis
);

329 c⁄° *
UI_gë0_ouçut_°rög
(
UI_STRING
 *
uis
);

331 c⁄° *
UI_gë0_a˘i⁄_°rög
(
UI_STRING
 *
uis
);

333 c⁄° *
UI_gë0_ªsu…_°rög
(
UI_STRING
 *
uis
);

335 c⁄° *
UI_gë0_ã°_°rög
(
UI_STRING
 *
uis
);

337 
UI_gë_ªsu…_mösize
(
UI_STRING
 *
uis
);

339 
UI_gë_ªsu…_maxsize
(
UI_STRING
 *
uis
);

341 
UI_£t_ªsu…
(
UI
 *
ui
, 
UI_STRING
 *
uis
, c⁄° *
ªsu…
);

345 
UI_UTIL_ªad_pw_°rög
(*
buf
,
Àngth
,c⁄° *
¥om±
,
vîify
);

346 
UI_UTIL_ªad_pw
(*
buf
,*
buff
,
size
,c⁄° *
¥om±
,
vîify
);

353 
ERR_lﬂd_UI_°rögs
();

358 
	#UI_F_GENERAL_ALLOCATE_BOOLEAN
 108

	)

359 
	#UI_F_GENERAL_ALLOCATE_PROMPT
 109

	)

360 
	#UI_F_GENERAL_ALLOCATE_STRING
 100

	)

361 
	#UI_F_UI_CTRL
 111

	)

362 
	#UI_F_UI_DUP_ERROR_STRING
 101

	)

363 
	#UI_F_UI_DUP_INFO_STRING
 102

	)

364 
	#UI_F_UI_DUP_INPUT_BOOLEAN
 110

	)

365 
	#UI_F_UI_DUP_INPUT_STRING
 103

	)

366 
	#UI_F_UI_DUP_VERIFY_STRING
 106

	)

367 
	#UI_F_UI_GET0_RESULT
 107

	)

368 
	#UI_F_UI_NEW_METHOD
 104

	)

369 
	#UI_F_UI_SET_RESULT
 105

	)

372 
	#UI_R_COMMON_OK_AND_CANCEL_CHARACTERS
 104

	)

373 
	#UI_R_INDEX_TOO_LARGE
 102

	)

374 
	#UI_R_INDEX_TOO_SMALL
 103

	)

375 
	#UI_R_NO_RESULT_BUFFER
 105

	)

376 
	#UI_R_RESULT_TOO_LARGE
 100

	)

377 
	#UI_R_RESULT_TOO_SMALL
 101

	)

378 
	#UI_R_UNKNOWN_CONTROL_COMMAND
 106

	)

380 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509.h

64 #i‚de‡
HEADER_X509_H


65 
	#HEADER_X509_H


	)

67 
	~<›ís¶/e_os2.h
>

68 
	~<›ís¶/symhacks.h
>

69 #i‚de‡
OPENSSL_NO_BUFFER


70 
	~<›ís¶/buf„r.h
>

72 #i‚de‡
OPENSSL_NO_EVP


73 
	~<›ís¶/evp.h
>

75 #i‚de‡
OPENSSL_NO_BIO


76 
	~<›ís¶/bio.h
>

78 
	~<›ís¶/°ack.h
>

79 
	~<›ís¶/a¢1.h
>

80 
	~<›ís¶/ß„°ack.h
>

82 #i‚de‡
OPENSSL_NO_EC


83 
	~<›ís¶/ec.h
>

86 #i‚de‡
OPENSSL_NO_ECDSA


87 
	~<›ís¶/ecdß.h
>

90 #i‚de‡
OPENSSL_NO_ECDH


91 
	~<›ís¶/ecdh.h
>

94 #i‚de‡
OPENSSL_NO_DEPRECATED


95 #i‚de‡
OPENSSL_NO_RSA


96 
	~<›ís¶/rß.h
>

98 #i‚de‡
OPENSSL_NO_DSA


99 
	~<›ís¶/dß.h
>

101 #i‚de‡
OPENSSL_NO_DH


102 
	~<›ís¶/dh.h
>

106 #i‚de‡
OPENSSL_NO_SHA


107 
	~<›ís¶/sha.h
>

109 
	~<›ís¶/os¶_typ.h
>

111 #ifde‡ 
__˝lu•lus


115 #ifde‡
OPENSSL_SYS_WIN32


117 #unde‡
X509_NAME


118 #unde‡
X509_CERT_PAIR


119 #unde‡
X509_EXTENSIONS


122 
	#X509_FILETYPE_PEM
 1

	)

123 
	#X509_FILETYPE_ASN1
 2

	)

124 
	#X509_FILETYPE_DEFAULT
 3

	)

126 
	#X509v3_KU_DIGITAL_SIGNATURE
 0x0080

	)

127 
	#X509v3_KU_NON_REPUDIATION
 0x0040

	)

128 
	#X509v3_KU_KEY_ENCIPHERMENT
 0x0020

	)

129 
	#X509v3_KU_DATA_ENCIPHERMENT
 0x0010

	)

130 
	#X509v3_KU_KEY_AGREEMENT
 0x0008

	)

131 
	#X509v3_KU_KEY_CERT_SIGN
 0x0004

	)

132 
	#X509v3_KU_CRL_SIGN
 0x0002

	)

133 
	#X509v3_KU_ENCIPHER_ONLY
 0x0001

	)

134 
	#X509v3_KU_DECIPHER_ONLY
 0x8000

	)

135 
	#X509v3_KU_UNDEF
 0xffff

	)

137 
	sX509_obje˘s_°


139 
nid
;

140 (*
a2i
)();

141 (*
i2a
)();

142 } 
	tX509_OBJECTS
;

144 
	sX509_Æg‹_°


146 
ASN1_OBJECT
 *
Æg‹ôhm
;

147 
ASN1_TYPE
 *
∑ømëî
;

150 
DECLARE_ASN1_SET_OF
(
X509_ALGOR
)

152 
STACK_OF
(
	tX509_ALGOR
Ë
	tX509_ALGORS
;

154 
	sX509_vÆ_°


156 
ASN1_TIME
 *
nŸBef‹e
;

157 
ASN1_TIME
 *
nŸA·î
;

158 } 
	tX509_VAL
;

160 
	sX509_pubkey_°


162 
X509_ALGOR
 *
Æg‹
;

163 
ASN1_BIT_STRING
 *
public_key
;

164 
EVP_PKEY
 *
pkey
;

167 
	sX509_sig_°


169 
X509_ALGOR
 *
Æg‹
;

170 
ASN1_OCTET_STRING
 *
dige°
;

171 } 
	tX509_SIG
;

173 
	sX509_«me_íåy_°


175 
ASN1_OBJECT
 *
obje˘
;

176 
ASN1_STRING
 *
vÆue
;

177 
£t
;

178 
size
;

179 } 
	tX509_NAME_ENTRY
;

181 
DECLARE_STACK_OF
(
X509_NAME_ENTRY
)

182 
DECLARE_ASN1_SET_OF
(
X509_NAME_ENTRY
)

185 
	sX509_«me_°


187 
STACK_OF
(
X509_NAME_ENTRY
Ë*
íåõs
;

188 
modifõd
;

189 #i‚de‡
OPENSSL_NO_BUFFER


190 
BUF_MEM
 *
byãs
;

192 *
byãs
;

195 *
ˇn⁄_íc
;

196 
ˇn⁄_í˛í
;

199 
DECLARE_STACK_OF
(
X509_NAME
)

201 
	#X509_EX_V_NETSCAPE_HACK
 0x8000

	)

202 
	#X509_EX_V_INIT
 0x0001

	)

203 
	sX509_exãnsi⁄_°


205 
ASN1_OBJECT
 *
obje˘
;

206 
ASN1_BOOLEAN
 
¸ôiˇl
;

207 
ASN1_OCTET_STRING
 *
vÆue
;

208 } 
	tX509_EXTENSION
;

210 
STACK_OF
(
	tX509_EXTENSION
Ë
	tX509_EXTENSIONS
;

212 
DECLARE_STACK_OF
(
X509_EXTENSION
)

213 
DECLARE_ASN1_SET_OF
(
X509_EXTENSION
)

216 
	sx509_©åibuãs_°


218 
ASN1_OBJECT
 *
obje˘
;

219 
sögÀ
;

221 *
±r
;

222  
STACK_OF
(
ASN1_TYPE
Ë*
£t
;

223  
ASN1_TYPE
 *
sögÀ
;

224 } 
vÆue
;

225 } 
	tX509_ATTRIBUTE
;

227 
DECLARE_STACK_OF
(
X509_ATTRIBUTE
)

228 
DECLARE_ASN1_SET_OF
(
X509_ATTRIBUTE
)

231 
	sX509_ªq_öfo_°


233 
ASN1_ENCODING
 
íc
;

234 
ASN1_INTEGER
 *
vîsi⁄
;

235 
X509_NAME
 *
subje˘
;

236 
X509_PUBKEY
 *
pubkey
;

238 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

239 } 
	tX509_REQ_INFO
;

241 
	sX509_ªq_°


243 
X509_REQ_INFO
 *
ªq_öfo
;

244 
X509_ALGOR
 *
sig_Æg
;

245 
ASN1_BIT_STRING
 *
sig«tuª
;

246 
ª„ªn˚s
;

247 } 
	tX509_REQ
;

249 
	sx509_cöf_°


251 
ASN1_INTEGER
 *
vîsi⁄
;

252 
ASN1_INTEGER
 *
£rülNumbî
;

253 
X509_ALGOR
 *
sig«tuª
;

254 
X509_NAME
 *
issuî
;

255 
X509_VAL
 *
vÆidôy
;

256 
X509_NAME
 *
subje˘
;

257 
X509_PUBKEY
 *
key
;

258 
ASN1_BIT_STRING
 *
issuîUID
;

259 
ASN1_BIT_STRING
 *
subje˘UID
;

260 
STACK_OF
(
X509_EXTENSION
Ë*
exãnsi⁄s
;

261 
ASN1_ENCODING
 
íc
;

262 } 
	tX509_CINF
;

270 
	sx509_˚π_aux_°


272 
STACK_OF
(
ASN1_OBJECT
Ë*
åu°
;

273 
STACK_OF
(
ASN1_OBJECT
Ë*
ªje˘
;

274 
ASN1_UTF8STRING
 *
Æüs
;

275 
ASN1_OCTET_STRING
 *
keyid
;

276 
STACK_OF
(
X509_ALGOR
Ë*
Ÿhî
;

277 } 
	tX509_CERT_AUX
;

279 
	sx509_°


281 
X509_CINF
 *
˚π_öfo
;

282 
X509_ALGOR
 *
sig_Æg
;

283 
ASN1_BIT_STRING
 *
sig«tuª
;

284 
vÆid
;

285 
ª„ªn˚s
;

286 *
«me
;

287 
CRYPTO_EX_DATA
 
ex_d©a
;

289 
ex_∑thÀn
;

290 
ex_p˝©hÀn
;

291 
ex_Êags
;

292 
ex_kußge
;

293 
ex_xkußge
;

294 
ex_ns˚π
;

295 
ASN1_OCTET_STRING
 *
skid
;

296 
AUTHORITY_KEYID
 *
akid
;

297 
X509_POLICY_CACHE
 *
pﬁicy_ˇche
;

298 
STACK_OF
(
DIST_POINT
Ë*
¸ldp
;

299 
STACK_OF
(
GENERAL_NAME
Ë*
Æäame
;

300 
NAME_CONSTRAINTS
 *
nc
;

301 #i‚de‡
OPENSSL_NO_RFC3779


302 
STACK_OF
(
IPAddªssFamûy
Ë*
rfc3779_addr
;

303 
ASIdítifõrs_°
 *
rfc3779_asid
;

305 #i‚de‡
OPENSSL_NO_SHA


306 
sha1_hash
[
SHA_DIGEST_LENGTH
];

308 
X509_CERT_AUX
 *
aux
;

311 
DECLARE_STACK_OF
(
X509
)

312 
DECLARE_ASN1_SET_OF
(
X509
)

316 
	sx509_åu°_°
 {

317 
åu°
;

318 
Êags
;

319 (*
check_åu°
)(
x509_åu°_°
 *, 
X509
 *, );

320 *
«me
;

321 
¨g1
;

322 *
¨g2
;

323 } 
	tX509_TRUST
;

325 
DECLARE_STACK_OF
(
X509_TRUST
)

327 
	sx509_˚π_∑ú_°
 {

328 
X509
 *
f‹w¨d
;

329 
X509
 *
ªvî£
;

330 } 
	tX509_CERT_PAIR
;

334 
	#X509_TRUST_DEFAULT
 -1

	)

336 
	#X509_TRUST_COMPAT
 1

	)

337 
	#X509_TRUST_SSL_CLIENT
 2

	)

338 
	#X509_TRUST_SSL_SERVER
 3

	)

339 
	#X509_TRUST_EMAIL
 4

	)

340 
	#X509_TRUST_OBJECT_SIGN
 5

	)

341 
	#X509_TRUST_OCSP_SIGN
 6

	)

342 
	#X509_TRUST_OCSP_REQUEST
 7

	)

343 
	#X509_TRUST_TSA
 8

	)

346 
	#X509_TRUST_MIN
 1

	)

347 
	#X509_TRUST_MAX
 8

	)

351 
	#X509_TRUST_DYNAMIC
 1

	)

352 
	#X509_TRUST_DYNAMIC_NAME
 2

	)

356 
	#X509_TRUST_TRUSTED
 1

	)

357 
	#X509_TRUST_REJECTED
 2

	)

358 
	#X509_TRUST_UNTRUSTED
 3

	)

362 
	#X509_FLAG_COMPAT
 0

	)

363 
	#X509_FLAG_NO_HEADER
 1L

	)

364 
	#X509_FLAG_NO_VERSION
 (1L << 1)

	)

365 
	#X509_FLAG_NO_SERIAL
 (1L << 2)

	)

366 
	#X509_FLAG_NO_SIGNAME
 (1L << 3)

	)

367 
	#X509_FLAG_NO_ISSUER
 (1L << 4)

	)

368 
	#X509_FLAG_NO_VALIDITY
 (1L << 5)

	)

369 
	#X509_FLAG_NO_SUBJECT
 (1L << 6)

	)

370 
	#X509_FLAG_NO_PUBKEY
 (1L << 7)

	)

371 
	#X509_FLAG_NO_EXTENSIONS
 (1L << 8)

	)

372 
	#X509_FLAG_NO_SIGDUMP
 (1L << 9)

	)

373 
	#X509_FLAG_NO_AUX
 (1L << 10)

	)

374 
	#X509_FLAG_NO_ATTRIBUTES
 (1L << 11)

	)

380 
	#XN_FLAG_SEP_MASK
 (0x‡<< 16)

	)

382 
	#XN_FLAG_COMPAT
 0

	)

383 
	#XN_FLAG_SEP_COMMA_PLUS
 (1 << 16Ë

	)

384 
	#XN_FLAG_SEP_CPLUS_SPC
 (2 << 16Ë

	)

385 
	#XN_FLAG_SEP_SPLUS_SPC
 (3 << 16Ë

	)

386 
	#XN_FLAG_SEP_MULTILINE
 (4 << 16Ë

	)

388 
	#XN_FLAG_DN_REV
 (1 << 20Ë

	)

392 
	#XN_FLAG_FN_MASK
 (0x3 << 21)

	)

394 
	#XN_FLAG_FN_SN
 0

	)

395 
	#XN_FLAG_FN_LN
 (1 << 21Ë

	)

396 
	#XN_FLAG_FN_OID
 (2 << 21Ë

	)

397 
	#XN_FLAG_FN_NONE
 (3 << 21Ë

	)

399 
	#XN_FLAG_SPC_EQ
 (1 << 23Ë

	)

405 
	#XN_FLAG_DUMP_UNKNOWN_FIELDS
 (1 << 24)

	)

407 
	#XN_FLAG_FN_ALIGN
 (1 << 25Ë

	)

411 
	#XN_FLAG_RFC2253
 (
ASN1_STRFLGS_RFC2253
 | \

412 
XN_FLAG_SEP_COMMA_PLUS
 | \

413 
XN_FLAG_DN_REV
 | \

414 
XN_FLAG_FN_SN
 | \

415 
XN_FLAG_DUMP_UNKNOWN_FIELDS
)

	)

419 
	#XN_FLAG_ONELINE
 (
ASN1_STRFLGS_RFC2253
 | \

420 
ASN1_STRFLGS_ESC_QUOTE
 | \

421 
XN_FLAG_SEP_CPLUS_SPC
 | \

422 
XN_FLAG_SPC_EQ
 | \

423 
XN_FLAG_FN_SN
)

	)

427 
	#XN_FLAG_MULTILINE
 (
ASN1_STRFLGS_ESC_CTRL
 | \

428 
ASN1_STRFLGS_ESC_MSB
 | \

429 
XN_FLAG_SEP_MULTILINE
 | \

430 
XN_FLAG_SPC_EQ
 | \

431 
XN_FLAG_FN_LN
 | \

432 
XN_FLAG_FN_ALIGN
)

	)

434 
	sx509_ªvoked_°


436 
ASN1_INTEGER
 *
£rülNumbî
;

437 
ASN1_TIME
 *
ªvoˇti⁄D©e
;

438 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

440 
STACK_OF
(
GENERAL_NAME
Ë*
issuî
;

442 
ªas⁄
;

443 
£quí˚
;

446 
DECLARE_STACK_OF
(
X509_REVOKED
)

447 
DECLARE_ASN1_SET_OF
(
X509_REVOKED
)

449 
	sX509_¸l_öfo_°


451 
ASN1_INTEGER
 *
vîsi⁄
;

452 
X509_ALGOR
 *
sig_Æg
;

453 
X509_NAME
 *
issuî
;

454 
ASN1_TIME
 *
œ°Upd©e
;

455 
ASN1_TIME
 *
√xtUpd©e
;

456 
STACK_OF
(
X509_REVOKED
Ë*
ªvoked
;

457 
STACK_OF
(
X509_EXTENSION
Ë *
exãnsi⁄s
;

458 
ASN1_ENCODING
 
íc
;

459 } 
	tX509_CRL_INFO
;

461 
	sX509_¸l_°


464 
X509_CRL_INFO
 *
¸l
;

465 
X509_ALGOR
 *
sig_Æg
;

466 
ASN1_BIT_STRING
 *
sig«tuª
;

467 
ª„ªn˚s
;

468 
Êags
;

470 
AUTHORITY_KEYID
 *
akid
;

471 
ISSUING_DIST_POINT
 *
idp
;

473 
idp_Êags
;

474 
idp_ªas⁄s
;

476 
ASN1_INTEGER
 *
¸l_numbî
;

477 
ASN1_INTEGER
 *
ba£_¸l_numbî
;

478 #i‚de‡
OPENSSL_NO_SHA


479 
sha1_hash
[
SHA_DIGEST_LENGTH
];

481 
STACK_OF
(
GENERAL_NAMES
Ë*
issuîs
;

482 c⁄° 
X509_CRL_METHOD
 *
mëh
;

483 *
mëh_d©a
;

486 
DECLARE_STACK_OF
(
X509_CRL
)

487 
DECLARE_ASN1_SET_OF
(
X509_CRL
)

489 
	s¥iv©e_key_°


491 
vîsi⁄
;

493 
X509_ALGOR
 *
íc_Æg‹
;

494 
ASN1_OCTET_STRING
 *
íc_pkey
;

497 
EVP_PKEY
 *
dec_pkey
;

500 
key_Àngth
;

501 *
key_d©a
;

502 
key_‰ì
;

505 
EVP_CIPHER_INFO
 
cùhî
;

507 
ª„ªn˚s
;

508 } 
	tX509_PKEY
;

510 #i‚de‡
OPENSSL_NO_EVP


511 
	sX509_öfo_°


513 
X509
 *
x509
;

514 
X509_CRL
 *
¸l
;

515 
X509_PKEY
 *
x_pkey
;

517 
EVP_CIPHER_INFO
 
íc_cùhî
;

518 
íc_Àn
;

519 *
íc_d©a
;

521 
ª„ªn˚s
;

522 } 
	tX509_INFO
;

524 
DECLARE_STACK_OF
(
X509_INFO
)

531 
	sNësˇ≥_•kac_°


533 
X509_PUBKEY
 *
pubkey
;

534 
ASN1_IA5STRING
 *
chÆÀnge
;

535 } 
	tNETSCAPE_SPKAC
;

537 
	sNësˇ≥_•ki_°


539 
NETSCAPE_SPKAC
 *
•kac
;

540 
X509_ALGOR
 *
sig_Æg‹
;

541 
ASN1_BIT_STRING
 *
sig«tuª
;

542 } 
	tNETSCAPE_SPKI
;

545 
	sNësˇ≥_˚πifiˇã_£quí˚


547 
ASN1_OBJECT
 *
ty≥
;

548 
STACK_OF
(
X509
Ë*
˚πs
;

549 } 
	tNETSCAPE_CERT_SEQUENCE
;

560 
	sPBEPARAM_°
 {

561 
ASN1_OCTET_STRING
 *
ß…
;

562 
ASN1_INTEGER
 *
ôî
;

563 } 
	tPBEPARAM
;

567 
	sPBE2PARAM_°
 {

568 
X509_ALGOR
 *
keyfunc
;

569 
X509_ALGOR
 *
í¸y±i⁄
;

570 } 
	tPBE2PARAM
;

572 
	sPBKDF2PARAM_°
 {

573 
ASN1_TYPE
 *
ß…
;

574 
ASN1_INTEGER
 *
ôî
;

575 
ASN1_INTEGER
 *
keyÀngth
;

576 
X509_ALGOR
 *
¥f
;

577 } 
	tPBKDF2PARAM
;

582 
	spkcs8_¥iv_key_öfo_°


584 
brokí
;

585 
	#PKCS8_OK
 0

	)

586 
	#PKCS8_NO_OCTET
 1

	)

587 
	#PKCS8_EMBEDDED_PARAM
 2

	)

588 
	#PKCS8_NS_DB
 3

	)

589 
	#PKCS8_NEG_PRIVKEY
 4

	)

590 
ASN1_INTEGER
 *
vîsi⁄
;

591 
X509_ALGOR
 *
pkeyÆg
;

592 
ASN1_TYPE
 *
pkey
;

593 
STACK_OF
(
X509_ATTRIBUTE
Ë*
©åibuãs
;

596 #ifde‡ 
__˝lu•lus


600 
	~<›ís¶/x509_vfy.h
>

601 
	~<›ís¶/pkcs7.h
>

603 #ifde‡ 
__˝lu•lus


607 
	#X509_EXT_PACK_UNKNOWN
 1

	)

608 
	#X509_EXT_PACK_STRING
 2

	)

610 
	#X509_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
˚π_öfo
->
vîsi⁄
)

	)

612 
	#X509_gë_nŸBef‹e
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸBef‹e
)

	)

613 
	#X509_gë_nŸA·î
(
x
Ë((x)->
˚π_öfo
->
vÆidôy
->
nŸA·î
)

	)

614 
	#X509_exåa˘_key
(
x
Ë
	`X509_gë_pubkey
(xË

	)

615 
	#X509_REQ_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
ªq_öfo
->
vîsi⁄
)

	)

616 
	#X509_REQ_gë_subje˘_«me
(
x
Ë((x)->
ªq_öfo
->
subje˘
)

	)

617 
	#X509_REQ_exåa˘_key
(
a
Ë
	`X509_REQ_gë_pubkey
◊)

	)

618 
	#X509_«me_cmp
(
a
,
b
Ë
	`X509_NAME_cmp
(◊),(b))

	)

619 
	#X509_gë_sig«tuª_ty≥
(
x
Ë
	`EVP_PKEY_ty≥
(
	`OBJ_obj2nid
((x)->
sig_Æg
->
Æg‹ôhm
))

	)

621 
	#X509_CRL_gë_vîsi⁄
(
x
Ë
	`ASN1_INTEGER_gë
((x)->
¸l
->
vîsi⁄
)

	)

622 
	#X509_CRL_gë_œ°Upd©e
(
x
Ë((x)->
¸l
->
œ°Upd©e
)

	)

623 
	#X509_CRL_gë_√xtUpd©e
(
x
Ë((x)->
¸l
->
√xtUpd©e
)

	)

624 
	#X509_CRL_gë_issuî
(
x
Ë((x)->
¸l
->
issuî
)

	)

625 
	#X509_CRL_gë_REVOKED
(
x
Ë((x)->
¸l
->
ªvoked
)

	)

627 
X509_CRL_£t_deÁu…_mëhod
(c⁄° 
X509_CRL_METHOD
 *
mëh
);

628 
X509_CRL_METHOD
 *
X509_CRL_METHOD_√w
(

629 (*
¸l_öô
)(
X509_CRL
 *
¸l
),

630 (*
¸l_‰ì
)(
X509_CRL
 *
¸l
),

631 (*
¸l_lookup
)(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
,

632 
ASN1_INTEGER
 *
£r
, 
X509_NAME
 *
issuî
),

633 (*
¸l_vîify
)(
X509_CRL
 *
¸l
, 
EVP_PKEY
 *
pk
));

634 
X509_CRL_METHOD_‰ì
(
X509_CRL_METHOD
 *
m
);

636 
X509_CRL_£t_mëh_d©a
(
X509_CRL
 *
¸l
, *
d©
);

637 *
X509_CRL_gë_mëh_d©a
(
X509_CRL
 *
¸l
);

641 
	#X509_gë_X509_PUBKEY
(
x
Ë((x)->
˚π_öfo
->
key
)

	)

644 c⁄° *
X509_vîify_˚π_îr‹_°rög
(
n
);

646 #i‚de‡
OPENSSL_NO_EVP


647 
X509_vîify
(
X509
 *
a
, 
EVP_PKEY
 *
r
);

649 
X509_REQ_vîify
(
X509_REQ
 *
a
, 
EVP_PKEY
 *
r
);

650 
X509_CRL_vîify
(
X509_CRL
 *
a
, 
EVP_PKEY
 *
r
);

651 
NETSCAPE_SPKI_vîify
(
NETSCAPE_SPKI
 *
a
, 
EVP_PKEY
 *
r
);

653 
NETSCAPE_SPKI
 * 
NETSCAPE_SPKI_b64_decode
(c⁄° *
°r
, 
Àn
);

654 * 
NETSCAPE_SPKI_b64_ícode
(
NETSCAPE_SPKI
 *
x
);

655 
EVP_PKEY
 *
NETSCAPE_SPKI_gë_pubkey
(
NETSCAPE_SPKI
 *
x
);

656 
NETSCAPE_SPKI_£t_pubkey
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
);

658 
NETSCAPE_SPKI_¥öt
(
BIO
 *
out
, 
NETSCAPE_SPKI
 *
•ki
);

660 
X509_sig«tuª_dump
(
BIO
 *
bp
,c⁄° 
ASN1_STRING
 *
sig
, 
ödít
);

661 
X509_sig«tuª_¥öt
(
BIO
 *
bp
,
X509_ALGOR
 *
Æg
, 
ASN1_STRING
 *
sig
);

663 
X509_sign
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

664 
X509_sign_˘x
(
X509
 *
x
, 
EVP_MD_CTX
 *
˘x
);

665 
X509_REQ_sign
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

666 
X509_REQ_sign_˘x
(
X509_REQ
 *
x
, 
EVP_MD_CTX
 *
˘x
);

667 
X509_CRL_sign
(
X509_CRL
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

668 
X509_CRL_sign_˘x
(
X509_CRL
 *
x
, 
EVP_MD_CTX
 *
˘x
);

669 
NETSCAPE_SPKI_sign
(
NETSCAPE_SPKI
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

671 
X509_pubkey_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

672 *
md
, *
Àn
);

673 
X509_dige°
(c⁄° 
X509
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

674 *
md
, *
Àn
);

675 
X509_CRL_dige°
(c⁄° 
X509_CRL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

676 *
md
, *
Àn
);

677 
X509_REQ_dige°
(c⁄° 
X509_REQ
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

678 *
md
, *
Àn
);

679 
X509_NAME_dige°
(c⁄° 
X509_NAME
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

680 *
md
, *
Àn
);

683 #i‚de‡
OPENSSL_NO_FP_API


684 
X509
 *
d2i_X509_Â
(
FILE
 *
Â
, X509 **
x509
);

685 
i2d_X509_Â
(
FILE
 *
Â
,
X509
 *
x509
);

686 
X509_CRL
 *
d2i_X509_CRL_Â
(
FILE
 *
Â
,X509_CRL **
¸l
);

687 
i2d_X509_CRL_Â
(
FILE
 *
Â
,
X509_CRL
 *
¸l
);

688 
X509_REQ
 *
d2i_X509_REQ_Â
(
FILE
 *
Â
,X509_REQ **
ªq
);

689 
i2d_X509_REQ_Â
(
FILE
 *
Â
,
X509_REQ
 *
ªq
);

690 #i‚de‡
OPENSSL_NO_RSA


691 
RSA
 *
d2i_RSAPriv©eKey_Â
(
FILE
 *
Â
,RSA **
rß
);

692 
i2d_RSAPriv©eKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

693 
RSA
 *
d2i_RSAPublicKey_Â
(
FILE
 *
Â
,RSA **
rß
);

694 
i2d_RSAPublicKey_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

695 
RSA
 *
d2i_RSA_PUBKEY_Â
(
FILE
 *
Â
,RSA **
rß
);

696 
i2d_RSA_PUBKEY_Â
(
FILE
 *
Â
,
RSA
 *
rß
);

698 #i‚de‡
OPENSSL_NO_DSA


699 
DSA
 *
d2i_DSA_PUBKEY_Â
(
FILE
 *
Â
, DSA **
dß
);

700 
i2d_DSA_PUBKEY_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

701 
DSA
 *
d2i_DSAPriv©eKey_Â
(
FILE
 *
Â
, DSA **
dß
);

702 
i2d_DSAPriv©eKey_Â
(
FILE
 *
Â
, 
DSA
 *
dß
);

704 #i‚de‡
OPENSSL_NO_EC


705 
EC_KEY
 *
d2i_EC_PUBKEY_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

706 
i2d_EC_PUBKEY_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

707 
EC_KEY
 *
d2i_ECPriv©eKey_Â
(
FILE
 *
Â
, EC_KEY **
eckey
);

708 
i2d_ECPriv©eKey_Â
(
FILE
 *
Â
, 
EC_KEY
 *
eckey
);

710 
X509_SIG
 *
d2i_PKCS8_Â
(
FILE
 *
Â
,X509_SIG **
p8
);

711 
i2d_PKCS8_Â
(
FILE
 *
Â
,
X509_SIG
 *
p8
);

712 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,

713 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

714 
i2d_PKCS8_PRIV_KEY_INFO_Â
(
FILE
 *
Â
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

715 
i2d_PKCS8Priv©eKeyInfo_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
key
);

716 
i2d_Priv©eKey_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

717 
EVP_PKEY
 *
d2i_Priv©eKey_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

718 
i2d_PUBKEY_Â
(
FILE
 *
Â
, 
EVP_PKEY
 *
pkey
);

719 
EVP_PKEY
 *
d2i_PUBKEY_Â
(
FILE
 *
Â
, EVP_PKEY **
a
);

722 #i‚de‡
OPENSSL_NO_BIO


723 
X509
 *
d2i_X509_bio
(
BIO
 *
bp
,X509 **
x509
);

724 
i2d_X509_bio
(
BIO
 *
bp
,
X509
 *
x509
);

725 
X509_CRL
 *
d2i_X509_CRL_bio
(
BIO
 *
bp
,X509_CRL **
¸l
);

726 
i2d_X509_CRL_bio
(
BIO
 *
bp
,
X509_CRL
 *
¸l
);

727 
X509_REQ
 *
d2i_X509_REQ_bio
(
BIO
 *
bp
,X509_REQ **
ªq
);

728 
i2d_X509_REQ_bio
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

729 #i‚de‡
OPENSSL_NO_RSA


730 
RSA
 *
d2i_RSAPriv©eKey_bio
(
BIO
 *
bp
,RSA **
rß
);

731 
i2d_RSAPriv©eKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

732 
RSA
 *
d2i_RSAPublicKey_bio
(
BIO
 *
bp
,RSA **
rß
);

733 
i2d_RSAPublicKey_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

734 
RSA
 *
d2i_RSA_PUBKEY_bio
(
BIO
 *
bp
,RSA **
rß
);

735 
i2d_RSA_PUBKEY_bio
(
BIO
 *
bp
,
RSA
 *
rß
);

737 #i‚de‡
OPENSSL_NO_DSA


738 
DSA
 *
d2i_DSA_PUBKEY_bio
(
BIO
 *
bp
, DSA **
dß
);

739 
i2d_DSA_PUBKEY_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

740 
DSA
 *
d2i_DSAPriv©eKey_bio
(
BIO
 *
bp
, DSA **
dß
);

741 
i2d_DSAPriv©eKey_bio
(
BIO
 *
bp
, 
DSA
 *
dß
);

743 #i‚de‡
OPENSSL_NO_EC


744 
EC_KEY
 *
d2i_EC_PUBKEY_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

745 
i2d_EC_PUBKEY_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

746 
EC_KEY
 *
d2i_ECPriv©eKey_bio
(
BIO
 *
bp
, EC_KEY **
eckey
);

747 
i2d_ECPriv©eKey_bio
(
BIO
 *
bp
, 
EC_KEY
 *
eckey
);

749 
X509_SIG
 *
d2i_PKCS8_bio
(
BIO
 *
bp
,X509_SIG **
p8
);

750 
i2d_PKCS8_bio
(
BIO
 *
bp
,
X509_SIG
 *
p8
);

751 
PKCS8_PRIV_KEY_INFO
 *
d2i_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,

752 
PKCS8_PRIV_KEY_INFO
 **
p8öf
);

753 
i2d_PKCS8_PRIV_KEY_INFO_bio
(
BIO
 *
bp
,
PKCS8_PRIV_KEY_INFO
 *
p8öf
);

754 
i2d_PKCS8Priv©eKeyInfo_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
key
);

755 
i2d_Priv©eKey_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

756 
EVP_PKEY
 *
d2i_Priv©eKey_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

757 
i2d_PUBKEY_bio
(
BIO
 *
bp
, 
EVP_PKEY
 *
pkey
);

758 
EVP_PKEY
 *
d2i_PUBKEY_bio
(
BIO
 *
bp
, EVP_PKEY **
a
);

761 
X509
 *
X509_dup
(X509 *
x509
);

762 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_dup
(X509_ATTRIBUTE *
xa
);

763 
X509_EXTENSION
 *
X509_EXTENSION_dup
(X509_EXTENSION *
ex
);

764 
X509_CRL
 *
X509_CRL_dup
(X509_CRL *
¸l
);

765 
X509_REQ
 *
X509_REQ_dup
(X509_REQ *
ªq
);

766 
X509_ALGOR
 *
X509_ALGOR_dup
(X509_ALGOR *
xn
);

767 
X509_ALGOR_£t0
(
X509_ALGOR
 *
Æg
, 
ASN1_OBJECT
 *
aobj
, 
±y≥
, *
pvÆ
);

768 
X509_ALGOR_gë0
(
ASN1_OBJECT
 **
∑obj
, *
µty≥
, **
µvÆ
,

769 
X509_ALGOR
 *
Æg‹
);

770 
X509_ALGOR_£t_md
(
X509_ALGOR
 *
Æg
, c⁄° 
EVP_MD
 *
md
);

771 
X509_ALGOR_cmp
(c⁄° 
X509_ALGOR
 *
a
, c⁄° X509_ALGOR *
b
);

773 
X509_NAME
 *
X509_NAME_dup
(X509_NAME *
xn
);

774 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_dup
(X509_NAME_ENTRY *
√
);

776 
X509_cmp_time
(c⁄° 
ASN1_TIME
 *
s
, 
time_t
 *
t
);

777 
X509_cmp_cuºít_time
(c⁄° 
ASN1_TIME
 *
s
);

778 
ASN1_TIME
 * 
X509_time_adj
(ASN1_TIME *
s
, 
adj
, 
time_t
 *
t
);

779 
ASN1_TIME
 * 
X509_time_adj_ex
(ASN1_TIME *
s
,

780 
off£t_day
, 
off£t_£c
, 
time_t
 *
t
);

781 
ASN1_TIME
 * 
X509_gmtime_adj
(ASN1_TIME *
s
, 
adj
);

783 c⁄° * 
X509_gë_deÁu…_˚π_¨ó
();

784 c⁄° * 
X509_gë_deÁu…_˚π_dú
();

785 c⁄° * 
X509_gë_deÁu…_˚π_fûe
();

786 c⁄° * 
X509_gë_deÁu…_˚π_dú_ív
();

787 c⁄° * 
X509_gë_deÁu…_˚π_fûe_ív
();

788 c⁄° * 
X509_gë_deÁu…_¥iv©e_dú
();

790 
X509_REQ
 * 
X509_to_X509_REQ
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
);

791 
X509
 * 
X509_REQ_to_X509
(
X509_REQ
 *
r
, 
days
,
EVP_PKEY
 *
pkey
);

793 
DECLARE_ASN1_FUNCTIONS
(
X509_ALGOR
)

794 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_ALGORS
, X509_ALGORS, X509_ALGORS)

795 
DECLARE_ASN1_FUNCTIONS
(
X509_VAL
)

797 
DECLARE_ASN1_FUNCTIONS
(
X509_PUBKEY
)

799 
X509_PUBKEY_£t
(
X509_PUBKEY
 **
x
, 
EVP_PKEY
 *
pkey
);

800 
EVP_PKEY
 * 
X509_PUBKEY_gë
(
X509_PUBKEY
 *
key
);

801 
X509_gë_pubkey_∑ømëîs
(
EVP_PKEY
 *
pkey
,

802 
STACK_OF
(
X509
Ë*
chaö
);

803 
i2d_PUBKEY
(
EVP_PKEY
 *
a
,**
µ
);

804 
EVP_PKEY
 * 
d2i_PUBKEY
(EVP_PKEY **
a
,c⁄° **
µ
,

805 
Àngth
);

806 #i‚de‡
OPENSSL_NO_RSA


807 
i2d_RSA_PUBKEY
(
RSA
 *
a
,**
µ
);

808 
RSA
 * 
d2i_RSA_PUBKEY
(RSA **
a
,c⁄° **
µ
,

809 
Àngth
);

811 #i‚de‡
OPENSSL_NO_DSA


812 
i2d_DSA_PUBKEY
(
DSA
 *
a
,**
µ
);

813 
DSA
 * 
d2i_DSA_PUBKEY
(DSA **
a
,c⁄° **
µ
,

814 
Àngth
);

816 #i‚de‡
OPENSSL_NO_EC


817 
i2d_EC_PUBKEY
(
EC_KEY
 *
a
, **
µ
);

818 
EC_KEY
 *
d2i_EC_PUBKEY
(EC_KEY **
a
, c⁄° **
µ
,

819 
Àngth
);

822 
DECLARE_ASN1_FUNCTIONS
(
X509_SIG
)

823 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ_INFO
)

824 
DECLARE_ASN1_FUNCTIONS
(
X509_REQ
)

826 
DECLARE_ASN1_FUNCTIONS
(
X509_ATTRIBUTE
)

827 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã
(
nid
, 
©πy≥
, *
vÆue
);

829 
DECLARE_ASN1_FUNCTIONS
(
X509_EXTENSION
)

830 
DECLARE_ASN1_ENCODE_FUNCTIONS
(
X509_EXTENSIONS
, X509_EXTENSIONS, X509_EXTENSIONS)

832 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME_ENTRY
)

834 
DECLARE_ASN1_FUNCTIONS
(
X509_NAME
)

836 
X509_NAME_£t
(
X509_NAME
 **
xn
, X509_NAME *
«me
);

838 
DECLARE_ASN1_FUNCTIONS
(
X509_CINF
)

840 
DECLARE_ASN1_FUNCTIONS
(
X509
)

841 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_AUX
)

843 
DECLARE_ASN1_FUNCTIONS
(
X509_CERT_PAIR
)

845 
X509_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

846 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

847 
X509_£t_ex_d©a
(
X509
 *
r
, 
idx
, *
¨g
);

848 *
X509_gë_ex_d©a
(
X509
 *
r
, 
idx
);

849 
i2d_X509_AUX
(
X509
 *
a
,**
µ
);

850 
X509
 * 
d2i_X509_AUX
(X509 **
a
,c⁄° **
µ
,
Àngth
);

852 
X509_Æüs_£t1
(
X509
 *
x
, *
«me
, 
Àn
);

853 
X509_keyid_£t1
(
X509
 *
x
, *
id
, 
Àn
);

854 * 
X509_Æüs_gë0
(
X509
 *
x
, *
Àn
);

855 * 
X509_keyid_gë0
(
X509
 *
x
, *
Àn
);

856 (*
X509_TRUST_£t_deÁu…
((*
åu°
)(, 
X509
 *, )))(, X509 *, );

857 
X509_TRUST_£t
(*
t
, 
åu°
);

858 
X509_add1_åu°_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

859 
X509_add1_ªje˘_obje˘
(
X509
 *
x
, 
ASN1_OBJECT
 *
obj
);

860 
X509_åu°_˛ór
(
X509
 *
x
);

861 
X509_ªje˘_˛ór
(
X509
 *
x
);

863 
DECLARE_ASN1_FUNCTIONS
(
X509_REVOKED
)

864 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL_INFO
)

865 
DECLARE_ASN1_FUNCTIONS
(
X509_CRL
)

867 
X509_CRL_add0_ªvoked
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 *
ªv
);

868 
X509_CRL_gë0_by_£rül
(
X509_CRL
 *
¸l
,

869 
X509_REVOKED
 **
ªt
, 
ASN1_INTEGER
 *
£rül
);

870 
X509_CRL_gë0_by_˚π
(
X509_CRL
 *
¸l
, 
X509_REVOKED
 **
ªt
, 
X509
 *
x
);

872 
X509_PKEY
 * 
X509_PKEY_√w
();

873 
X509_PKEY_‰ì
(
X509_PKEY
 *
a
);

874 
i2d_X509_PKEY
(
X509_PKEY
 *
a
,**
µ
);

875 
X509_PKEY
 * 
d2i_X509_PKEY
(X509_PKEY **
a
,c⁄° **
µ
,
Àngth
);

877 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKI
)

878 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_SPKAC
)

879 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_CERT_SEQUENCE
)

881 #i‚de‡
OPENSSL_NO_EVP


882 
X509_INFO
 * 
X509_INFO_√w
();

883 
X509_INFO_‰ì
(
X509_INFO
 *
a
);

884 * 
X509_NAME_⁄ñöe
(
X509_NAME
 *
a
,*
buf
,
size
);

886 
ASN1_vîify
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

887 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

889 
ASN1_dige°
(
i2d_of_void
 *
i2d
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

890 *
md
,*
Àn
);

892 
ASN1_sign
(
i2d_of_void
 *
i2d
, 
X509_ALGOR
 *
Æg‹1
,

893 
X509_ALGOR
 *
Æg‹2
, 
ASN1_BIT_STRING
 *
sig«tuª
,

894 *
d©a
,
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

896 
ASN1_ôem_dige°
(c⁄° 
ASN1_ITEM
 *
ô
,c⁄° 
EVP_MD
 *
ty≥
,*
d©a
,

897 *
md
,*
Àn
);

899 
ASN1_ôem_vîify
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
,

900 
ASN1_BIT_STRING
 *
sig«tuª
,*
d©a
,
EVP_PKEY
 *
pkey
);

902 
ASN1_ôem_sign
(c⁄° 
ASN1_ITEM
 *
ô
, 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

903 
ASN1_BIT_STRING
 *
sig«tuª
,

904 *
d©a
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
ty≥
);

905 
ASN1_ôem_sign_˘x
(c⁄° 
ASN1_ITEM
 *
ô
,

906 
X509_ALGOR
 *
Æg‹1
, X509_ALGOR *
Æg‹2
,

907 
ASN1_BIT_STRING
 *
sig«tuª
, *
a¢
, 
EVP_MD_CTX
 *
˘x
);

910 
X509_£t_vîsi⁄
(
X509
 *
x
,
vîsi⁄
);

911 
X509_£t_£rülNumbî
(
X509
 *
x
, 
ASN1_INTEGER
 *
£rül
);

912 
ASN1_INTEGER
 * 
X509_gë_£rülNumbî
(
X509
 *
x
);

913 
X509_£t_issuî_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

914 
X509_NAME
 * 
X509_gë_issuî_«me
(
X509
 *
a
);

915 
X509_£t_subje˘_«me
(
X509
 *
x
, 
X509_NAME
 *
«me
);

916 
X509_NAME
 * 
X509_gë_subje˘_«me
(
X509
 *
a
);

917 
X509_£t_nŸBef‹e
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

918 
X509_£t_nŸA·î
(
X509
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

919 
X509_£t_pubkey
(
X509
 *
x
, 
EVP_PKEY
 *
pkey
);

920 
EVP_PKEY
 * 
X509_gë_pubkey
(
X509
 *
x
);

921 
ASN1_BIT_STRING
 * 
X509_gë0_pubkey_bô°r
(c⁄° 
X509
 *
x
);

922 
X509_˚πifiˇã_ty≥
(
X509
 *
x
,
EVP_PKEY
 *
pubkey
 );

924 
X509_REQ_£t_vîsi⁄
(
X509_REQ
 *
x
,
vîsi⁄
);

925 
X509_REQ_£t_subje˘_«me
(
X509_REQ
 *
ªq
,
X509_NAME
 *
«me
);

926 
X509_REQ_£t_pubkey
(
X509_REQ
 *
x
, 
EVP_PKEY
 *
pkey
);

927 
EVP_PKEY
 * 
X509_REQ_gë_pubkey
(
X509_REQ
 *
ªq
);

928 
X509_REQ_exãnsi⁄_nid
(
nid
);

929 * 
X509_REQ_gë_exãnsi⁄_nids
();

930 
X509_REQ_£t_exãnsi⁄_nids
(*
nids
);

931 
STACK_OF
(
X509_EXTENSION
Ë*
X509_REQ_gë_exãnsi⁄s
(
X509_REQ
 *
ªq
);

932 
X509_REQ_add_exãnsi⁄s_nid
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
,

933 
nid
);

934 
X509_REQ_add_exãnsi⁄s
(
X509_REQ
 *
ªq
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
);

935 
X509_REQ_gë_©å_cou¡
(c⁄° 
X509_REQ
 *
ªq
);

936 
X509_REQ_gë_©å_by_NID
(c⁄° 
X509_REQ
 *
ªq
, 
nid
,

937 
œ°pos
);

938 
X509_REQ_gë_©å_by_OBJ
(c⁄° 
X509_REQ
 *
ªq
, 
ASN1_OBJECT
 *
obj
,

939 
œ°pos
);

940 
X509_ATTRIBUTE
 *
X509_REQ_gë_©å
(c⁄° 
X509_REQ
 *
ªq
, 
loc
);

941 
X509_ATTRIBUTE
 *
X509_REQ_dñëe_©å
(
X509_REQ
 *
ªq
, 
loc
);

942 
X509_REQ_add1_©å
(
X509_REQ
 *
ªq
, 
X509_ATTRIBUTE
 *
©å
);

943 
X509_REQ_add1_©å_by_OBJ
(
X509_REQ
 *
ªq
,

944 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

945 c⁄° *
byãs
, 
Àn
);

946 
X509_REQ_add1_©å_by_NID
(
X509_REQ
 *
ªq
,

947 
nid
, 
ty≥
,

948 c⁄° *
byãs
, 
Àn
);

949 
X509_REQ_add1_©å_by_txt
(
X509_REQ
 *
ªq
,

950 c⁄° *
©å«me
, 
ty≥
,

951 c⁄° *
byãs
, 
Àn
);

953 
X509_CRL_£t_vîsi⁄
(
X509_CRL
 *
x
, 
vîsi⁄
);

954 
X509_CRL_£t_issuî_«me
(
X509_CRL
 *
x
, 
X509_NAME
 *
«me
);

955 
X509_CRL_£t_œ°Upd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

956 
X509_CRL_£t_√xtUpd©e
(
X509_CRL
 *
x
, c⁄° 
ASN1_TIME
 *
tm
);

957 
X509_CRL_s‹t
(
X509_CRL
 *
¸l
);

959 
X509_REVOKED_£t_£rülNumbî
(
X509_REVOKED
 *
x
, 
ASN1_INTEGER
 *
£rül
);

960 
X509_REVOKED_£t_ªvoˇti⁄D©e
(
X509_REVOKED
 *
r
, 
ASN1_TIME
 *
tm
);

962 
X509_REQ_check_¥iv©e_key
(
X509_REQ
 *
x509
,
EVP_PKEY
 *
pkey
);

964 
X509_check_¥iv©e_key
(
X509
 *
x509
,
EVP_PKEY
 *
pkey
);

966 
X509_issuî_™d_£rül_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

967 
X509_issuî_™d_£rül_hash
(
X509
 *
a
);

969 
X509_issuî_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

970 
X509_issuî_«me_hash
(
X509
 *
a
);

972 
X509_subje˘_«me_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

973 
X509_subje˘_«me_hash
(
X509
 *
x
);

975 #i‚de‡
OPENSSL_NO_MD5


976 
X509_issuî_«me_hash_ﬁd
(
X509
 *
a
);

977 
X509_subje˘_«me_hash_ﬁd
(
X509
 *
x
);

980 
X509_cmp
(c⁄° 
X509
 *
a
, c⁄° X509 *
b
);

981 
X509_NAME_cmp
(c⁄° 
X509_NAME
 *
a
, c⁄° X509_NAME *
b
);

982 
X509_NAME_hash
(
X509_NAME
 *
x
);

983 
X509_NAME_hash_ﬁd
(
X509_NAME
 *
x
);

985 
X509_CRL_cmp
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

986 
X509_CRL_m©ch
(c⁄° 
X509_CRL
 *
a
, c⁄° X509_CRL *
b
);

987 #i‚de‡
OPENSSL_NO_FP_API


988 
X509_¥öt_ex_Â
(
FILE
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

989 
X509_¥öt_Â
(
FILE
 *
bp
,
X509
 *
x
);

990 
X509_CRL_¥öt_Â
(
FILE
 *
bp
,
X509_CRL
 *
x
);

991 
X509_REQ_¥öt_Â
(
FILE
 *
bp
,
X509_REQ
 *
ªq
);

992 
X509_NAME_¥öt_ex_Â
(
FILE
 *
Â
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

995 #i‚de‡
OPENSSL_NO_BIO


996 
X509_NAME_¥öt
(
BIO
 *
bp
, 
X509_NAME
 *
«me
, 
oba£
);

997 
X509_NAME_¥öt_ex
(
BIO
 *
out
, 
X509_NAME
 *
nm
, 
ödít
, 
Êags
);

998 
X509_¥öt_ex
(
BIO
 *
bp
,
X509
 *
x
, 
nmÊag
, 
cÊag
);

999 
X509_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1000 
X509_oc•id_¥öt
(
BIO
 *
bp
,
X509
 *
x
);

1001 
X509_CERT_AUX_¥öt
(
BIO
 *
bp
,
X509_CERT_AUX
 *
x
, 
ödít
);

1002 
X509_CRL_¥öt
(
BIO
 *
bp
,
X509_CRL
 *
x
);

1003 
X509_REQ_¥öt_ex
(
BIO
 *
bp
, 
X509_REQ
 *
x
, 
nmÊag
, 
cÊag
);

1004 
X509_REQ_¥öt
(
BIO
 *
bp
,
X509_REQ
 *
ªq
);

1007 
X509_NAME_íåy_cou¡
(
X509_NAME
 *
«me
);

1008 
X509_NAME_gë_ãxt_by_NID
(
X509_NAME
 *
«me
, 
nid
,

1009 *
buf
,
Àn
);

1010 
X509_NAME_gë_ãxt_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
,

1011 *
buf
,
Àn
);

1015 
X509_NAME_gë_ödex_by_NID
(
X509_NAME
 *
«me
,
nid
,
œ°pos
);

1016 
X509_NAME_gë_ödex_by_OBJ
(
X509_NAME
 *
«me
,
ASN1_OBJECT
 *
obj
,

1017 
œ°pos
);

1018 
X509_NAME_ENTRY
 *
X509_NAME_gë_íåy
(
X509_NAME
 *
«me
, 
loc
);

1019 
X509_NAME_ENTRY
 *
X509_NAME_dñëe_íåy
(
X509_NAME
 *
«me
, 
loc
);

1020 
X509_NAME_add_íåy
(
X509_NAME
 *
«me
,
X509_NAME_ENTRY
 *
√
,

1021 
loc
, 
£t
);

1022 
X509_NAME_add_íåy_by_OBJ
(
X509_NAME
 *
«me
, 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1023 *
byãs
, 
Àn
, 
loc
, 
£t
);

1024 
X509_NAME_add_íåy_by_NID
(
X509_NAME
 *
«me
, 
nid
, 
ty≥
,

1025 *
byãs
, 
Àn
, 
loc
, 
£t
);

1026 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_txt
(X509_NAME_ENTRY **
√
,

1027 c⁄° *
fõld
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1028 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_NID
(X509_NAME_ENTRY **
√
, 
nid
,

1029 
ty≥
,*
byãs
, 
Àn
);

1030 
X509_NAME_add_íåy_by_txt
(
X509_NAME
 *
«me
, c⁄° *
fõld
, 
ty≥
,

1031 c⁄° *
byãs
, 
Àn
, 
loc
, 
£t
);

1032 
X509_NAME_ENTRY
 *
X509_NAME_ENTRY_¸óã_by_OBJ
(X509_NAME_ENTRY **
√
,

1033 
ASN1_OBJECT
 *
obj
, 
ty≥
,c⁄° *
byãs
,

1034 
Àn
);

1035 
X509_NAME_ENTRY_£t_obje˘
(
X509_NAME_ENTRY
 *
√
,

1036 
ASN1_OBJECT
 *
obj
);

1037 
X509_NAME_ENTRY_£t_d©a
(
X509_NAME_ENTRY
 *
√
, 
ty≥
,

1038 c⁄° *
byãs
, 
Àn
);

1039 
ASN1_OBJECT
 * 
X509_NAME_ENTRY_gë_obje˘
(
X509_NAME_ENTRY
 *
√
);

1040 
ASN1_STRING
 * 
X509_NAME_ENTRY_gë_d©a
(
X509_NAME_ENTRY
 *
√
);

1042 
X509v3_gë_ext_cou¡
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
);

1043 
X509v3_gë_ext_by_NID
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1044 
nid
, 
œ°pos
);

1045 
X509v3_gë_ext_by_OBJ
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1046 
ASN1_OBJECT
 *
obj
,
œ°pos
);

1047 
X509v3_gë_ext_by_¸ôiˇl
(c⁄° 
STACK_OF
(
X509_EXTENSION
Ë*
x
,

1048 
¸ô
, 
œ°pos
);

1049 
X509_EXTENSION
 *
X509v3_gë_ext
(c⁄° 
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1050 
X509_EXTENSION
 *
X509v3_dñëe_ext
(
STACK_OF
(X509_EXTENSIONË*
x
, 
loc
);

1051 
STACK_OF
(
X509_EXTENSION
Ë*
X509v3_add_ext
(STACK_OF(X509_EXTENSIONË**
x
,

1052 
X509_EXTENSION
 *
ex
, 
loc
);

1054 
X509_gë_ext_cou¡
(
X509
 *
x
);

1055 
X509_gë_ext_by_NID
(
X509
 *
x
, 
nid
, 
œ°pos
);

1056 
X509_gë_ext_by_OBJ
(
X509
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1057 
X509_gë_ext_by_¸ôiˇl
(
X509
 *
x
, 
¸ô
, 
œ°pos
);

1058 
X509_EXTENSION
 *
X509_gë_ext
(
X509
 *
x
, 
loc
);

1059 
X509_EXTENSION
 *
X509_dñëe_ext
(
X509
 *
x
, 
loc
);

1060 
X509_add_ext
(
X509
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1061 * 
X509_gë_ext_d2i
(
X509
 *
x
, 
nid
, *
¸ô
, *
idx
);

1062 
X509_add1_ext_i2d
(
X509
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1063 
Êags
);

1065 
X509_CRL_gë_ext_cou¡
(
X509_CRL
 *
x
);

1066 
X509_CRL_gë_ext_by_NID
(
X509_CRL
 *
x
, 
nid
, 
œ°pos
);

1067 
X509_CRL_gë_ext_by_OBJ
(
X509_CRL
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1068 
X509_CRL_gë_ext_by_¸ôiˇl
(
X509_CRL
 *
x
, 
¸ô
, 
œ°pos
);

1069 
X509_EXTENSION
 *
X509_CRL_gë_ext
(
X509_CRL
 *
x
, 
loc
);

1070 
X509_EXTENSION
 *
X509_CRL_dñëe_ext
(
X509_CRL
 *
x
, 
loc
);

1071 
X509_CRL_add_ext
(
X509_CRL
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1072 * 
X509_CRL_gë_ext_d2i
(
X509_CRL
 *
x
, 
nid
, *
¸ô
, *
idx
);

1073 
X509_CRL_add1_ext_i2d
(
X509_CRL
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1074 
Êags
);

1076 
X509_REVOKED_gë_ext_cou¡
(
X509_REVOKED
 *
x
);

1077 
X509_REVOKED_gë_ext_by_NID
(
X509_REVOKED
 *
x
, 
nid
, 
œ°pos
);

1078 
X509_REVOKED_gë_ext_by_OBJ
(
X509_REVOKED
 *
x
,
ASN1_OBJECT
 *
obj
,
œ°pos
);

1079 
X509_REVOKED_gë_ext_by_¸ôiˇl
(
X509_REVOKED
 *
x
, 
¸ô
, 
œ°pos
);

1080 
X509_EXTENSION
 *
X509_REVOKED_gë_ext
(
X509_REVOKED
 *
x
, 
loc
);

1081 
X509_EXTENSION
 *
X509_REVOKED_dñëe_ext
(
X509_REVOKED
 *
x
, 
loc
);

1082 
X509_REVOKED_add_ext
(
X509_REVOKED
 *
x
, 
X509_EXTENSION
 *
ex
, 
loc
);

1083 * 
X509_REVOKED_gë_ext_d2i
(
X509_REVOKED
 *
x
, 
nid
, *
¸ô
, *
idx
);

1084 
X509_REVOKED_add1_ext_i2d
(
X509_REVOKED
 *
x
, 
nid
, *
vÆue
, 
¸ô
,

1085 
Êags
);

1087 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_NID
(X509_EXTENSION **
ex
,

1088 
nid
, 
¸ô
, 
ASN1_OCTET_STRING
 *
d©a
);

1089 
X509_EXTENSION
 *
X509_EXTENSION_¸óã_by_OBJ
(X509_EXTENSION **
ex
,

1090 
ASN1_OBJECT
 *
obj
,
¸ô
,
ASN1_OCTET_STRING
 *
d©a
);

1091 
X509_EXTENSION_£t_obje˘
(
X509_EXTENSION
 *
ex
,
ASN1_OBJECT
 *
obj
);

1092 
X509_EXTENSION_£t_¸ôiˇl
(
X509_EXTENSION
 *
ex
, 
¸ô
);

1093 
X509_EXTENSION_£t_d©a
(
X509_EXTENSION
 *
ex
,

1094 
ASN1_OCTET_STRING
 *
d©a
);

1095 
ASN1_OBJECT
 * 
X509_EXTENSION_gë_obje˘
(
X509_EXTENSION
 *
ex
);

1096 
ASN1_OCTET_STRING
 *
X509_EXTENSION_gë_d©a
(
X509_EXTENSION
 *
√
);

1097 
X509_EXTENSION_gë_¸ôiˇl
(
X509_EXTENSION
 *
ex
);

1099 
X509©_gë_©å_cou¡
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
);

1100 
X509©_gë_©å_by_NID
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
, 
nid
,

1101 
œ°pos
);

1102 
X509©_gë_©å_by_OBJ
(c⁄° 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
, 
ASN1_OBJECT
 *
obj
,

1103 
œ°pos
);

1104 
X509_ATTRIBUTE
 *
X509©_gë_©å
(c⁄° 
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1105 
X509_ATTRIBUTE
 *
X509©_dñëe_©å
(
STACK_OF
(X509_ATTRIBUTEË*
x
, 
loc
);

1106 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å
(STACK_OF(X509_ATTRIBUTEË**
x
,

1107 
X509_ATTRIBUTE
 *
©å
);

1108 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_OBJ
(STACK_OF(X509_ATTRIBUTEË**
x
,

1109 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1110 c⁄° *
byãs
, 
Àn
);

1111 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_NID
(STACK_OF(X509_ATTRIBUTEË**
x
,

1112 
nid
, 
ty≥
,

1113 c⁄° *
byãs
, 
Àn
);

1114 
STACK_OF
(
X509_ATTRIBUTE
Ë*
X509©_add1_©å_by_txt
(STACK_OF(X509_ATTRIBUTEË**
x
,

1115 c⁄° *
©å«me
, 
ty≥
,

1116 c⁄° *
byãs
, 
Àn
);

1117 *
X509©_gë0_d©a_by_OBJ
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
x
,

1118 
ASN1_OBJECT
 *
obj
, 
œ°pos
, 
ty≥
);

1119 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_NID
(X509_ATTRIBUTE **
©å
, 
nid
,

1120 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1121 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_OBJ
(X509_ATTRIBUTE **
©å
,

1122 c⁄° 
ASN1_OBJECT
 *
obj
, 
©πy≥
, c⁄° *
d©a
, 
Àn
);

1123 
X509_ATTRIBUTE
 *
X509_ATTRIBUTE_¸óã_by_txt
(X509_ATTRIBUTE **
©å
,

1124 c⁄° *
©∫ame
, 
ty≥
, c⁄° *
byãs
, 
Àn
);

1125 
X509_ATTRIBUTE_£t1_obje˘
(
X509_ATTRIBUTE
 *
©å
, c⁄° 
ASN1_OBJECT
 *
obj
);

1126 
X509_ATTRIBUTE_£t1_d©a
(
X509_ATTRIBUTE
 *
©å
, 
©åty≥
, c⁄° *
d©a
, 
Àn
);

1127 *
X509_ATTRIBUTE_gë0_d©a
(
X509_ATTRIBUTE
 *
©å
, 
idx
,

1128 
©πy≥
, *
d©a
);

1129 
X509_ATTRIBUTE_cou¡
(
X509_ATTRIBUTE
 *
©å
);

1130 
ASN1_OBJECT
 *
X509_ATTRIBUTE_gë0_obje˘
(
X509_ATTRIBUTE
 *
©å
);

1131 
ASN1_TYPE
 *
X509_ATTRIBUTE_gë0_ty≥
(
X509_ATTRIBUTE
 *
©å
, 
idx
);

1133 
EVP_PKEY_gë_©å_cou¡
(c⁄° 
EVP_PKEY
 *
key
);

1134 
EVP_PKEY_gë_©å_by_NID
(c⁄° 
EVP_PKEY
 *
key
, 
nid
,

1135 
œ°pos
);

1136 
EVP_PKEY_gë_©å_by_OBJ
(c⁄° 
EVP_PKEY
 *
key
, 
ASN1_OBJECT
 *
obj
,

1137 
œ°pos
);

1138 
X509_ATTRIBUTE
 *
EVP_PKEY_gë_©å
(c⁄° 
EVP_PKEY
 *
key
, 
loc
);

1139 
X509_ATTRIBUTE
 *
EVP_PKEY_dñëe_©å
(
EVP_PKEY
 *
key
, 
loc
);

1140 
EVP_PKEY_add1_©å
(
EVP_PKEY
 *
key
, 
X509_ATTRIBUTE
 *
©å
);

1141 
EVP_PKEY_add1_©å_by_OBJ
(
EVP_PKEY
 *
key
,

1142 c⁄° 
ASN1_OBJECT
 *
obj
, 
ty≥
,

1143 c⁄° *
byãs
, 
Àn
);

1144 
EVP_PKEY_add1_©å_by_NID
(
EVP_PKEY
 *
key
,

1145 
nid
, 
ty≥
,

1146 c⁄° *
byãs
, 
Àn
);

1147 
EVP_PKEY_add1_©å_by_txt
(
EVP_PKEY
 *
key
,

1148 c⁄° *
©å«me
, 
ty≥
,

1149 c⁄° *
byãs
, 
Àn
);

1151 
X509_vîify_˚π
(
X509_STORE_CTX
 *
˘x
);

1154 
X509
 *
X509_föd_by_issuî_™d_£rül
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
,

1155 
ASN1_INTEGER
 *
£rül
);

1156 
X509
 *
X509_föd_by_subje˘
(
STACK_OF
(X509Ë*
sk
,
X509_NAME
 *
«me
);

1158 
DECLARE_ASN1_FUNCTIONS
(
PBEPARAM
)

1159 
DECLARE_ASN1_FUNCTIONS
(
PBE2PARAM
)

1160 
DECLARE_ASN1_FUNCTIONS
(
PBKDF2PARAM
)

1162 
PKCS5_pbe_£t0_Æg‹
(
X509_ALGOR
 *
Æg‹
, 
Æg
, 
ôî
,

1163 c⁄° *
ß…
, 
ß…Àn
);

1165 
X509_ALGOR
 *
PKCS5_pbe_£t
(
Æg
, 
ôî
,

1166 c⁄° *
ß…
, 
ß…Àn
);

1167 
X509_ALGOR
 *
PKCS5_pbe2_£t
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1168 *
ß…
, 
ß…Àn
);

1169 
X509_ALGOR
 *
PKCS5_pbe2_£t_iv
(c⁄° 
EVP_CIPHER
 *
cùhî
, 
ôî
,

1170 *
ß…
, 
ß…Àn
,

1171 *
aiv
, 
¥f_nid
);

1173 
X509_ALGOR
 *
PKCS5_pbkdf2_£t
(
ôî
, *
ß…
, 
ß…Àn
,

1174 
¥f_nid
, 
keyÀn
);

1178 
DECLARE_ASN1_FUNCTIONS
(
PKCS8_PRIV_KEY_INFO
)

1180 
EVP_PKEY
 *
EVP_PKCS82PKEY
(
PKCS8_PRIV_KEY_INFO
 *
p8
);

1181 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8
(
EVP_PKEY
 *
pkey
);

1182 
PKCS8_PRIV_KEY_INFO
 *
EVP_PKEY2PKCS8_brokí
(
EVP_PKEY
 *
pkey
, 
brokí
);

1183 
PKCS8_PRIV_KEY_INFO
 *
PKCS8_£t_brokí
(PKCS8_PRIV_KEY_INFO *
p8
, 
brokí
);

1185 
PKCS8_pkey_£t0
(
PKCS8_PRIV_KEY_INFO
 *
¥iv
, 
ASN1_OBJECT
 *
aobj
,

1186 
vîsi⁄
, 
±y≥
, *
pvÆ
,

1187 *
≥nc
, 
≥n˛í
);

1188 
PKCS8_pkey_gë0
(
ASN1_OBJECT
 **
µkÆg
,

1189 c⁄° **
pk
, *
µkÀn
,

1190 
X509_ALGOR
 **
∑
,

1191 
PKCS8_PRIV_KEY_INFO
 *
p8
);

1193 
X509_PUBKEY_£t0_∑øm
(
X509_PUBKEY
 *
pub
, 
ASN1_OBJECT
 *
aobj
,

1194 
±y≥
, *
pvÆ
,

1195 *
≥nc
, 
≥n˛í
);

1196 
X509_PUBKEY_gë0_∑øm
(
ASN1_OBJECT
 **
µkÆg
,

1197 c⁄° **
pk
, *
µkÀn
,

1198 
X509_ALGOR
 **
∑
,

1199 
X509_PUBKEY
 *
pub
);

1201 
X509_check_åu°
(
X509
 *
x
, 
id
, 
Êags
);

1202 
X509_TRUST_gë_cou¡
();

1203 
X509_TRUST
 * 
X509_TRUST_gë0
(
idx
);

1204 
X509_TRUST_gë_by_id
(
id
);

1205 
X509_TRUST_add
(
id
, 
Êags
, (*
ck
)(
X509_TRUST
 *, 
X509
 *, ),

1206 *
«me
, 
¨g1
, *
¨g2
);

1207 
X509_TRUST_˛ónup
();

1208 
X509_TRUST_gë_Êags
(
X509_TRUST
 *
xp
);

1209 *
X509_TRUST_gë0_«me
(
X509_TRUST
 *
xp
);

1210 
X509_TRUST_gë_åu°
(
X509_TRUST
 *
xp
);

1216 
ERR_lﬂd_X509_°rögs
();

1221 
	#X509_F_ADD_CERT_DIR
 100

	)

1222 
	#X509_F_BY_FILE_CTRL
 101

	)

1223 
	#X509_F_CHECK_POLICY
 145

	)

1224 
	#X509_F_DIR_CTRL
 102

	)

1225 
	#X509_F_GET_CERT_BY_SUBJECT
 103

	)

1226 
	#X509_F_NETSCAPE_SPKI_B64_DECODE
 129

	)

1227 
	#X509_F_NETSCAPE_SPKI_B64_ENCODE
 130

	)

1228 
	#X509_F_X509AT_ADD1_ATTR
 135

	)

1229 
	#X509_F_X509V3_ADD_EXT
 104

	)

1230 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_NID
 136

	)

1231 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_OBJ
 137

	)

1232 
	#X509_F_X509_ATTRIBUTE_CREATE_BY_TXT
 140

	)

1233 
	#X509_F_X509_ATTRIBUTE_GET0_DATA
 139

	)

1234 
	#X509_F_X509_ATTRIBUTE_SET1_DATA
 138

	)

1235 
	#X509_F_X509_CHECK_PRIVATE_KEY
 128

	)

1236 
	#X509_F_X509_CRL_PRINT_FP
 147

	)

1237 
	#X509_F_X509_EXTENSION_CREATE_BY_NID
 108

	)

1238 
	#X509_F_X509_EXTENSION_CREATE_BY_OBJ
 109

	)

1239 
	#X509_F_X509_GET_PUBKEY_PARAMETERS
 110

	)

1240 
	#X509_F_X509_LOAD_CERT_CRL_FILE
 132

	)

1241 
	#X509_F_X509_LOAD_CERT_FILE
 111

	)

1242 
	#X509_F_X509_LOAD_CRL_FILE
 112

	)

1243 
	#X509_F_X509_NAME_ADD_ENTRY
 113

	)

1244 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_NID
 114

	)

1245 
	#X509_F_X509_NAME_ENTRY_CREATE_BY_TXT
 131

	)

1246 
	#X509_F_X509_NAME_ENTRY_SET_OBJECT
 115

	)

1247 
	#X509_F_X509_NAME_ONELINE
 116

	)

1248 
	#X509_F_X509_NAME_PRINT
 117

	)

1249 
	#X509_F_X509_PRINT_EX_FP
 118

	)

1250 
	#X509_F_X509_PUBKEY_GET
 119

	)

1251 
	#X509_F_X509_PUBKEY_SET
 120

	)

1252 
	#X509_F_X509_REQ_CHECK_PRIVATE_KEY
 144

	)

1253 
	#X509_F_X509_REQ_PRINT_EX
 121

	)

1254 
	#X509_F_X509_REQ_PRINT_FP
 122

	)

1255 
	#X509_F_X509_REQ_TO_X509
 123

	)

1256 
	#X509_F_X509_STORE_ADD_CERT
 124

	)

1257 
	#X509_F_X509_STORE_ADD_CRL
 125

	)

1258 
	#X509_F_X509_STORE_CTX_GET1_ISSUER
 146

	)

1259 
	#X509_F_X509_STORE_CTX_INIT
 143

	)

1260 
	#X509_F_X509_STORE_CTX_NEW
 142

	)

1261 
	#X509_F_X509_STORE_CTX_PURPOSE_INHERIT
 134

	)

1262 
	#X509_F_X509_TO_X509_REQ
 126

	)

1263 
	#X509_F_X509_TRUST_ADD
 133

	)

1264 
	#X509_F_X509_TRUST_SET
 141

	)

1265 
	#X509_F_X509_VERIFY_CERT
 127

	)

1268 
	#X509_R_BAD_X509_FILETYPE
 100

	)

1269 
	#X509_R_BASE64_DECODE_ERROR
 118

	)

1270 
	#X509_R_CANT_CHECK_DH_KEY
 114

	)

1271 
	#X509_R_CERT_ALREADY_IN_HASH_TABLE
 101

	)

1272 
	#X509_R_ERR_ASN1_LIB
 102

	)

1273 
	#X509_R_INVALID_DIRECTORY
 113

	)

1274 
	#X509_R_INVALID_FIELD_NAME
 119

	)

1275 
	#X509_R_INVALID_TRUST
 123

	)

1276 
	#X509_R_KEY_TYPE_MISMATCH
 115

	)

1277 
	#X509_R_KEY_VALUES_MISMATCH
 116

	)

1278 
	#X509_R_LOADING_CERT_DIR
 103

	)

1279 
	#X509_R_LOADING_DEFAULTS
 104

	)

1280 
	#X509_R_METHOD_NOT_SUPPORTED
 124

	)

1281 
	#X509_R_NO_CERT_SET_FOR_US_TO_VERIFY
 105

	)

1282 
	#X509_R_PUBLIC_KEY_DECODE_ERROR
 125

	)

1283 
	#X509_R_PUBLIC_KEY_ENCODE_ERROR
 126

	)

1284 
	#X509_R_SHOULD_RETRY
 106

	)

1285 
	#X509_R_UNABLE_TO_FIND_PARAMETERS_IN_CHAIN
 107

	)

1286 
	#X509_R_UNABLE_TO_GET_CERTS_PUBLIC_KEY
 108

	)

1287 
	#X509_R_UNKNOWN_KEY_TYPE
 117

	)

1288 
	#X509_R_UNKNOWN_NID
 109

	)

1289 
	#X509_R_UNKNOWN_PURPOSE_ID
 121

	)

1290 
	#X509_R_UNKNOWN_TRUST_ID
 120

	)

1291 
	#X509_R_UNSUPPORTED_ALGORITHM
 111

	)

1292 
	#X509_R_WRONG_LOOKUP_TYPE
 112

	)

1293 
	#X509_R_WRONG_TYPE
 122

	)

1295 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/x509v3.h

58 #i‚de‡
HEADER_X509V3_H


59 
	#HEADER_X509V3_H


	)

61 
	~<›ís¶/bio.h
>

62 
	~<›ís¶/x509.h
>

63 
	~<›ís¶/c⁄f.h
>

65 #ifde‡
__˝lu•lus


70 
v3_ext_mëhod
;

71 
v3_ext_˘x
;

75 * (*
	tX509V3_EXT_NEW
)();

76 (*
X509V3_EXT_FREE
)(*);

77 * (*
	tX509V3_EXT_D2I
)(*, const ** , );

78 (*
X509V3_EXT_I2D
)(*, **);

79 
STACK_OF
(
	tCONF_VALUE
) *

80 (*
	tX509V3_EXT_I2V
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

81 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	texéi°
);

82 * (*
	tX509V3_EXT_V2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

83 
	tv3_ext_˘x
 *
	t˘x
,

84 
	tSTACK_OF
(
	tCONF_VALUE
Ë*
	tvÆues
);

85 * (*
	tX509V3_EXT_I2S
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
);

86 * (*
	tX509V3_EXT_S2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

87 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

88 (*
X509V3_EXT_I2R
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
, *
	text
,

89 
	tBIO
 *
	tout
, 
	tödít
);

90 * (*
	tX509V3_EXT_R2I
)(c⁄° 
	tv3_ext_mëhod
 *
	tmëhod
,

91 
	tv3_ext_˘x
 *
	t˘x
, c⁄° *
	t°r
);

95 
	sv3_ext_mëhod
 {

96 
ext_nid
;

97 
ext_Êags
;

99 
ASN1_ITEM_EXP
 *
ô
;

101 
X509V3_EXT_NEW
 
ext_√w
;

102 
X509V3_EXT_FREE
 
ext_‰ì
;

103 
X509V3_EXT_D2I
 
d2i
;

104 
X509V3_EXT_I2D
 
i2d
;

107 
X509V3_EXT_I2S
 
i2s
;

108 
X509V3_EXT_S2I
 
s2i
;

111 
X509V3_EXT_I2V
 
i2v
;

112 
X509V3_EXT_V2I
 
v2i
;

115 
X509V3_EXT_I2R
 
i2r
;

116 
X509V3_EXT_R2I
 
r2i
;

118 *
u§_d©a
;

121 
	sX509V3_CONF_METHOD_°
 {

122 * (*
gë_°rög
)(*
db
, *
£˘i⁄
, *
vÆue
);

123 
STACK_OF
(
CONF_VALUE
Ë* (*
gë_£˘i⁄
)(*
db
, *
£˘i⁄
);

124 (*
‰ì_°rög
)(*
db
, * 
°rög
);

125 (*
‰ì_£˘i⁄
)(*
db
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

126 } 
	tX509V3_CONF_METHOD
;

129 
	sv3_ext_˘x
 {

130 
	#CTX_TEST
 0x1

	)

131 
Êags
;

132 
X509
 *
issuî_˚π
;

133 
X509
 *
subje˘_˚π
;

134 
X509_REQ
 *
subje˘_ªq
;

135 
X509_CRL
 *
¸l
;

136 
X509V3_CONF_METHOD
 *
db_mëh
;

137 *
db
;

141 
v3_ext_mëhod
 
	tX509V3_EXT_METHOD
;

143 
DECLARE_STACK_OF
(
X509V3_EXT_METHOD
)

146 
	#X509V3_EXT_DYNAMIC
 0x1

	)

147 
	#X509V3_EXT_CTX_DEP
 0x2

	)

148 
	#X509V3_EXT_MULTILINE
 0x4

	)

150 
BIT_STRING_BITNAME
 
	tENUMERATED_NAMES
;

152 
	sBASIC_CONSTRAINTS_°
 {

153 
ˇ
;

154 
ASN1_INTEGER
 *
∑thÀn
;

155 } 
	tBASIC_CONSTRAINTS
;

158 
	sPKEY_USAGE_PERIOD_°
 {

159 
ASN1_GENERALIZEDTIME
 *
nŸBef‹e
;

160 
ASN1_GENERALIZEDTIME
 *
nŸA·î
;

161 } 
	tPKEY_USAGE_PERIOD
;

163 
	sŸhîName_°
 {

164 
ASN1_OBJECT
 *
ty≥_id
;

165 
ASN1_TYPE
 *
vÆue
;

166 } 
	tOTHERNAME
;

168 
	sEDIP¨tyName_°
 {

169 
ASN1_STRING
 *
«meAssig√r
;

170 
ASN1_STRING
 *
∑πyName
;

171 } 
	tEDIPARTYNAME
;

173 
	sGENERAL_NAME_°
 {

175 
	#GEN_OTHERNAME
 0

	)

176 
	#GEN_EMAIL
 1

	)

177 
	#GEN_DNS
 2

	)

178 
	#GEN_X400
 3

	)

179 
	#GEN_DIRNAME
 4

	)

180 
	#GEN_EDIPARTY
 5

	)

181 
	#GEN_URI
 6

	)

182 
	#GEN_IPADD
 7

	)

183 
	#GEN_RID
 8

	)

185 
ty≥
;

187 *
±r
;

188 
OTHERNAME
 *
ŸhîName
;

189 
ASN1_IA5STRING
 *
rfc822Name
;

190 
ASN1_IA5STRING
 *
dNSName
;

191 
ASN1_TYPE
 *
x400Addªss
;

192 
X509_NAME
 *
dúe˘‹yName
;

193 
EDIPARTYNAME
 *
ediP¨tyName
;

194 
ASN1_IA5STRING
 *
unif‹mResour˚Idítifõr
;

195 
ASN1_OCTET_STRING
 *
iPAddªss
;

196 
ASN1_OBJECT
 *
ªgi°îedID
;

199 
ASN1_OCTET_STRING
 *
ù
;

200 
X509_NAME
 *
dún
;

201 
ASN1_IA5STRING
 *
ü5
;

202 
ASN1_OBJECT
 *
rid
;

203 
ASN1_TYPE
 *
Ÿhî
;

204 } 
d
;

205 } 
	tGENERAL_NAME
;

207 
STACK_OF
(
	tGENERAL_NAME
Ë
	tGENERAL_NAMES
;

209 
	sACCESS_DESCRIPTION_°
 {

210 
ASN1_OBJECT
 *
mëhod
;

211 
GENERAL_NAME
 *
loˇti⁄
;

212 } 
	tACCESS_DESCRIPTION
;

214 
STACK_OF
(
	tACCESS_DESCRIPTION
Ë
	tAUTHORITY_INFO_ACCESS
;

216 
STACK_OF
(
	tASN1_OBJECT
Ë
	tEXTENDED_KEY_USAGE
;

218 
DECLARE_STACK_OF
(
GENERAL_NAME
)

219 
DECLARE_ASN1_SET_OF
(
GENERAL_NAME
)

221 
DECLARE_STACK_OF
(
ACCESS_DESCRIPTION
)

222 
DECLARE_ASN1_SET_OF
(
ACCESS_DESCRIPTION
)

224 
	sDIST_POINT_NAME_°
 {

225 
ty≥
;

227 
GENERAL_NAMES
 *
fuŒ«me
;

228 
STACK_OF
(
X509_NAME_ENTRY
Ë*
ªœtivíame
;

229 } 
«me
;

231 
X509_NAME
 *
d≤ame
;

232 } 
	tDIST_POINT_NAME
;

234 
	#CRLDP_ALL_REASONS
 0x807f

	)

236 
	#CRL_REASON_NONE
 -1

	)

237 
	#CRL_REASON_UNSPECIFIED
 0

	)

238 
	#CRL_REASON_KEY_COMPROMISE
 1

	)

239 
	#CRL_REASON_CA_COMPROMISE
 2

	)

240 
	#CRL_REASON_AFFILIATION_CHANGED
 3

	)

241 
	#CRL_REASON_SUPERSEDED
 4

	)

242 
	#CRL_REASON_CESSATION_OF_OPERATION
 5

	)

243 
	#CRL_REASON_CERTIFICATE_HOLD
 6

	)

244 
	#CRL_REASON_REMOVE_FROM_CRL
 8

	)

245 
	#CRL_REASON_PRIVILEGE_WITHDRAWN
 9

	)

246 
	#CRL_REASON_AA_COMPROMISE
 10

	)

248 
	sDIST_POINT_°
 {

249 
DIST_POINT_NAME
 *
di°poöt
;

250 
ASN1_BIT_STRING
 *
ªas⁄s
;

251 
GENERAL_NAMES
 *
CRLissuî
;

252 
dp_ªas⁄s
;

255 
STACK_OF
(
	tDIST_POINT
Ë
	tCRL_DIST_POINTS
;

257 
DECLARE_STACK_OF
(
DIST_POINT
)

258 
DECLARE_ASN1_SET_OF
(
DIST_POINT
)

260 
	sAUTHORITY_KEYID_°
 {

261 
ASN1_OCTET_STRING
 *
keyid
;

262 
GENERAL_NAMES
 *
issuî
;

263 
ASN1_INTEGER
 *
£rül
;

268 
	sSXNET_ID_°
 {

269 
ASN1_INTEGER
 *
z⁄e
;

270 
ASN1_OCTET_STRING
 *
u£r
;

271 } 
	tSXNETID
;

273 
DECLARE_STACK_OF
(
SXNETID
)

274 
DECLARE_ASN1_SET_OF
(
SXNETID
)

276 
	sSXNET_°
 {

277 
ASN1_INTEGER
 *
vîsi⁄
;

278 
STACK_OF
(
SXNETID
Ë*
ids
;

279 } 
	tSXNET
;

281 
	sNOTICEREF_°
 {

282 
ASN1_STRING
 *
‹g™iz©i⁄
;

283 
STACK_OF
(
ASN1_INTEGER
Ë*
nŸi˚nos
;

284 } 
	tNOTICEREF
;

286 
	sUSERNOTICE_°
 {

287 
NOTICEREF
 *
nŸi˚ªf
;

288 
ASN1_STRING
 *
ex±ext
;

289 } 
	tUSERNOTICE
;

291 
	sPOLICYQUALINFO_°
 {

292 
ASN1_OBJECT
 *
pquÆid
;

294 
ASN1_IA5STRING
 *
˝suri
;

295 
USERNOTICE
 *
u£∫Ÿi˚
;

296 
ASN1_TYPE
 *
Ÿhî
;

297 } 
d
;

298 } 
	tPOLICYQUALINFO
;

300 
DECLARE_STACK_OF
(
POLICYQUALINFO
)

301 
DECLARE_ASN1_SET_OF
(
POLICYQUALINFO
)

303 
	sPOLICYINFO_°
 {

304 
ASN1_OBJECT
 *
pﬁicyid
;

305 
STACK_OF
(
POLICYQUALINFO
Ë*
quÆifõrs
;

306 } 
	tPOLICYINFO
;

308 
STACK_OF
(
	tPOLICYINFO
Ë
	tCERTIFICATEPOLICIES
;

310 
DECLARE_STACK_OF
(
POLICYINFO
)

311 
DECLARE_ASN1_SET_OF
(
POLICYINFO
)

313 
	sPOLICY_MAPPING_°
 {

314 
ASN1_OBJECT
 *
issuîDomaöPﬁicy
;

315 
ASN1_OBJECT
 *
subje˘DomaöPﬁicy
;

316 } 
	tPOLICY_MAPPING
;

318 
DECLARE_STACK_OF
(
POLICY_MAPPING
)

320 
STACK_OF
(
	tPOLICY_MAPPING
Ë
	tPOLICY_MAPPINGS
;

322 
	sGENERAL_SUBTREE_°
 {

323 
GENERAL_NAME
 *
ba£
;

324 
ASN1_INTEGER
 *
möimum
;

325 
ASN1_INTEGER
 *
maximum
;

326 } 
	tGENERAL_SUBTREE
;

328 
DECLARE_STACK_OF
(
GENERAL_SUBTREE
)

330 
	sNAME_CONSTRAINTS_°
 {

331 
STACK_OF
(
GENERAL_SUBTREE
Ë*
≥rmôãdSubåìs
;

332 
STACK_OF
(
GENERAL_SUBTREE
Ë*
ex˛udedSubåìs
;

335 
	sPOLICY_CONSTRAINTS_°
 {

336 
ASN1_INTEGER
 *
ªquúeEx∂icôPﬁicy
;

337 
ASN1_INTEGER
 *
öhibôPﬁicyM≠pög
;

338 } 
	tPOLICY_CONSTRAINTS
;

341 
	sPROXY_POLICY_°


343 
ASN1_OBJECT
 *
pﬁicyL™guage
;

344 
ASN1_OCTET_STRING
 *
pﬁicy
;

345 } 
	tPROXY_POLICY
;

347 
	sPROXY_CERT_INFO_EXTENSION_°


349 
ASN1_INTEGER
 *
pcP©hLígthC⁄°øöt
;

350 
PROXY_POLICY
 *
¥oxyPﬁicy
;

351 } 
	tPROXY_CERT_INFO_EXTENSION
;

353 
DECLARE_ASN1_FUNCTIONS
(
PROXY_POLICY
)

354 
DECLARE_ASN1_FUNCTIONS
(
PROXY_CERT_INFO_EXTENSION
)

356 
	sISSUING_DIST_POINT_°


358 
DIST_POINT_NAME
 *
di°poöt
;

359 
⁄lyu£r
;

360 
⁄lyCA
;

361 
ASN1_BIT_STRING
 *
⁄lysomîós⁄s
;

362 
ödúe˘CRL
;

363 
⁄ly©å
;

368 
	#IDP_PRESENT
 0x1

	)

370 
	#IDP_INVALID
 0x2

	)

372 
	#IDP_ONLYUSER
 0x4

	)

374 
	#IDP_ONLYCA
 0x8

	)

376 
	#IDP_ONLYATTR
 0x10

	)

378 
	#IDP_INDIRECT
 0x20

	)

380 
	#IDP_REASONS
 0x40

	)

382 
	#X509V3_c⁄f_îr
(
vÆ
Ë
	`ERR_add_îr‹_d©a
(6, "£˘i⁄:", vÆ->
£˘i⁄
, \

383 ",«me:", 
vÆ
->
«me
, ",vÆue:", vÆ->
vÆue
);

	)

385 
	#X509V3_£t_˘x_ã°
(
˘x
) \

386 
	`X509V3_£t_˘x
(
˘x
, 
NULL
, NULL, NULL, NULL, 
CTX_TEST
)

	)

387 
	#X509V3_£t_˘x_nodb
(
˘x
Ë(˘x)->
db
 = 
NULL
;

	)

389 
	#EXT_BITSTRING
(
nid
, 
èbÀ
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_BIT_STRING
), \

392 (
X509V3_EXT_I2V
)
i2v_ASN1_BIT_STRING
, \

393 (
X509V3_EXT_V2I
)
v2i_ASN1_BIT_STRING
, \

394 
NULL
, NULL, \

395 
èbÀ
}

	)

397 
	#EXT_IA5STRING
(
nid
Ë{Çid, 0, 
	`ASN1_ITEM_ªf
(
ASN1_IA5STRING
), \

399 (
X509V3_EXT_I2S
)
i2s_ASN1_IA5STRING
, \

400 (
X509V3_EXT_S2I
)
s2i_ASN1_IA5STRING
, \

402 
NULL
}

	)

404 
	#EXT_END
 { -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0}

	)

409 
	#EXFLAG_BCONS
 0x1

	)

410 
	#EXFLAG_KUSAGE
 0x2

	)

411 
	#EXFLAG_XKUSAGE
 0x4

	)

412 
	#EXFLAG_NSCERT
 0x8

	)

414 
	#EXFLAG_CA
 0x10

	)

416 
	#EXFLAG_SI
 0x20

	)

417 
	#EXFLAG_SS
 0x20

	)

418 
	#EXFLAG_V1
 0x40

	)

419 
	#EXFLAG_INVALID
 0x80

	)

420 
	#EXFLAG_SET
 0x100

	)

421 
	#EXFLAG_CRITICAL
 0x200

	)

422 
	#EXFLAG_PROXY
 0x400

	)

424 
	#EXFLAG_INVALID_POLICY
 0x800

	)

425 
	#EXFLAG_FRESHEST
 0x1000

	)

427 
	#KU_DIGITAL_SIGNATURE
 0x0080

	)

428 
	#KU_NON_REPUDIATION
 0x0040

	)

429 
	#KU_KEY_ENCIPHERMENT
 0x0020

	)

430 
	#KU_DATA_ENCIPHERMENT
 0x0010

	)

431 
	#KU_KEY_AGREEMENT
 0x0008

	)

432 
	#KU_KEY_CERT_SIGN
 0x0004

	)

433 
	#KU_CRL_SIGN
 0x0002

	)

434 
	#KU_ENCIPHER_ONLY
 0x0001

	)

435 
	#KU_DECIPHER_ONLY
 0x8000

	)

437 
	#NS_SSL_CLIENT
 0x80

	)

438 
	#NS_SSL_SERVER
 0x40

	)

439 
	#NS_SMIME
 0x20

	)

440 
	#NS_OBJSIGN
 0x10

	)

441 
	#NS_SSL_CA
 0x04

	)

442 
	#NS_SMIME_CA
 0x02

	)

443 
	#NS_OBJSIGN_CA
 0x01

	)

444 
	#NS_ANY_CA
 (
NS_SSL_CA
|
NS_SMIME_CA
|
NS_OBJSIGN_CA
)

	)

446 
	#XKU_SSL_SERVER
 0x1

	)

447 
	#XKU_SSL_CLIENT
 0x2

	)

448 
	#XKU_SMIME
 0x4

	)

449 
	#XKU_CODE_SIGN
 0x8

	)

450 
	#XKU_SGC
 0x10

	)

451 
	#XKU_OCSP_SIGN
 0x20

	)

452 
	#XKU_TIMESTAMP
 0x40

	)

453 
	#XKU_DVCS
 0x80

	)

455 
	#X509_PURPOSE_DYNAMIC
 0x1

	)

456 
	#X509_PURPOSE_DYNAMIC_NAME
 0x2

	)

458 
	sx509_puΩo£_°
 {

459 
puΩo£
;

460 
åu°
;

461 
Êags
;

462 (*
check_puΩo£
)(c⁄° 
x509_puΩo£_°
 *,

463 c⁄° 
X509
 *, );

464 *
«me
;

465 *
¢ame
;

466 *
u§_d©a
;

467 } 
	tX509_PURPOSE
;

469 
	#X509_PURPOSE_SSL_CLIENT
 1

	)

470 
	#X509_PURPOSE_SSL_SERVER
 2

	)

471 
	#X509_PURPOSE_NS_SSL_SERVER
 3

	)

472 
	#X509_PURPOSE_SMIME_SIGN
 4

	)

473 
	#X509_PURPOSE_SMIME_ENCRYPT
 5

	)

474 
	#X509_PURPOSE_CRL_SIGN
 6

	)

475 
	#X509_PURPOSE_ANY
 7

	)

476 
	#X509_PURPOSE_OCSP_HELPER
 8

	)

477 
	#X509_PURPOSE_TIMESTAMP_SIGN
 9

	)

479 
	#X509_PURPOSE_MIN
 1

	)

480 
	#X509_PURPOSE_MAX
 9

	)

484 
	#X509V3_EXT_UNKNOWN_MASK
 (0xfL << 16)

	)

486 
	#X509V3_EXT_DEFAULT
 0

	)

488 
	#X509V3_EXT_ERROR_UNKNOWN
 (1L << 16)

	)

490 
	#X509V3_EXT_PARSE_UNKNOWN
 (2L << 16)

	)

492 
	#X509V3_EXT_DUMP_UNKNOWN
 (3L << 16)

	)

496 
	#X509V3_ADD_OP_MASK
 0xfL

	)

497 
	#X509V3_ADD_DEFAULT
 0L

	)

498 
	#X509V3_ADD_APPEND
 1L

	)

499 
	#X509V3_ADD_REPLACE
 2L

	)

500 
	#X509V3_ADD_REPLACE_EXISTING
 3L

	)

501 
	#X509V3_ADD_KEEP_EXISTING
 4L

	)

502 
	#X509V3_ADD_DELETE
 5L

	)

503 
	#X509V3_ADD_SILENT
 0x10

	)

505 
DECLARE_STACK_OF
(
X509_PURPOSE
)

507 
DECLARE_ASN1_FUNCTIONS
(
BASIC_CONSTRAINTS
)

509 
DECLARE_ASN1_FUNCTIONS
(
SXNET
)

510 
DECLARE_ASN1_FUNCTIONS
(
SXNETID
)

512 
SXNET_add_id_asc
(
SXNET
 **
psx
, *
z⁄e
, *
u£r
, 
u£æí
);

513 
SXNET_add_id_ul⁄g
(
SXNET
 **
psx
, 
lz⁄e
, *
u£r
, 
u£æí
);

514 
SXNET_add_id_INTEGER
(
SXNET
 **
psx
, 
ASN1_INTEGER
 *
iz⁄e
, *
u£r
, 
u£æí
);

516 
ASN1_OCTET_STRING
 *
SXNET_gë_id_asc
(
SXNET
 *
sx
, *
z⁄e
);

517 
ASN1_OCTET_STRING
 *
SXNET_gë_id_ul⁄g
(
SXNET
 *
sx
, 
lz⁄e
);

518 
ASN1_OCTET_STRING
 *
SXNET_gë_id_INTEGER
(
SXNET
 *
sx
, 
ASN1_INTEGER
 *
z⁄e
);

520 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_KEYID
)

522 
DECLARE_ASN1_FUNCTIONS
(
PKEY_USAGE_PERIOD
)

524 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAME
)

525 
GENERAL_NAME
 *
GENERAL_NAME_dup
(GENERAL_NAME *
a
);

526 
GENERAL_NAME_cmp
(
GENERAL_NAME
 *
a
, GENERAL_NAME *
b
);

530 
ASN1_BIT_STRING
 *
v2i_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

531 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

532 
STACK_OF
(
CONF_VALUE
Ë*
i2v_ASN1_BIT_STRING
(
X509V3_EXT_METHOD
 *
mëhod
,

533 
ASN1_BIT_STRING
 *
bôs
,

534 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

536 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAME
(
X509V3_EXT_METHOD
 *
mëhod
, 
GENERAL_NAME
 *
gí
, STACK_OF(CONF_VALUEË*
ªt
);

537 
GENERAL_NAME_¥öt
(
BIO
 *
out
, 
GENERAL_NAME
 *
gí
);

539 
DECLARE_ASN1_FUNCTIONS
(
GENERAL_NAMES
)

541 
STACK_OF
(
CONF_VALUE
Ë*
i2v_GENERAL_NAMES
(
X509V3_EXT_METHOD
 *
mëhod
,

542 
GENERAL_NAMES
 *
gí
, 
STACK_OF
(
CONF_VALUE
Ë*
exéi°
);

543 
GENERAL_NAMES
 *
v2i_GENERAL_NAMES
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

544 
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
nvÆ
);

546 
DECLARE_ASN1_FUNCTIONS
(
OTHERNAME
)

547 
DECLARE_ASN1_FUNCTIONS
(
EDIPARTYNAME
)

548 
OTHERNAME_cmp
(
OTHERNAME
 *
a
, OTHERNAME *
b
);

549 
GENERAL_NAME_£t0_vÆue
(
GENERAL_NAME
 *
a
, 
ty≥
, *
vÆue
);

550 *
GENERAL_NAME_gë0_vÆue
(
GENERAL_NAME
 *
a
, *
±y≥
);

551 
GENERAL_NAME_£t0_Ÿhî«me
(
GENERAL_NAME
 *
gí
,

552 
ASN1_OBJECT
 *
oid
, 
ASN1_TYPE
 *
vÆue
);

553 
GENERAL_NAME_gë0_ŸhîName
(
GENERAL_NAME
 *
gí
,

554 
ASN1_OBJECT
 **
poid
, 
ASN1_TYPE
 **
pvÆue
);

556 *
i2s_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
ASN1_OCTET_STRING
 *
ü5
);

557 
ASN1_OCTET_STRING
 *
s2i_ASN1_OCTET_STRING
(
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
, *
°r
);

559 
DECLARE_ASN1_FUNCTIONS
(
EXTENDED_KEY_USAGE
)

560 
i2a_ACCESS_DESCRIPTION
(
BIO
 *
bp
, 
ACCESS_DESCRIPTION
* 
a
);

562 
DECLARE_ASN1_FUNCTIONS
(
CERTIFICATEPOLICIES
)

563 
DECLARE_ASN1_FUNCTIONS
(
POLICYINFO
)

564 
DECLARE_ASN1_FUNCTIONS
(
POLICYQUALINFO
)

565 
DECLARE_ASN1_FUNCTIONS
(
USERNOTICE
)

566 
DECLARE_ASN1_FUNCTIONS
(
NOTICEREF
)

568 
DECLARE_ASN1_FUNCTIONS
(
CRL_DIST_POINTS
)

569 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT
)

570 
DECLARE_ASN1_FUNCTIONS
(
DIST_POINT_NAME
)

571 
DECLARE_ASN1_FUNCTIONS
(
ISSUING_DIST_POINT
)

573 
DIST_POINT_£t_d≤ame
(
DIST_POINT_NAME
 *
d≤
, 
X509_NAME
 *
öame
);

575 
NAME_CONSTRAINTS_check
(
X509
 *
x
, 
NAME_CONSTRAINTS
 *
nc
);

577 
DECLARE_ASN1_FUNCTIONS
(
ACCESS_DESCRIPTION
)

578 
DECLARE_ASN1_FUNCTIONS
(
AUTHORITY_INFO_ACCESS
)

580 
DECLARE_ASN1_ITEM
(
POLICY_MAPPING
)

581 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_MAPPING
)

582 
DECLARE_ASN1_ITEM
(
POLICY_MAPPINGS
)

584 
DECLARE_ASN1_ITEM
(
GENERAL_SUBTREE
)

585 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
GENERAL_SUBTREE
)

587 
DECLARE_ASN1_ITEM
(
NAME_CONSTRAINTS
)

588 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
NAME_CONSTRAINTS
)

590 
DECLARE_ASN1_ALLOC_FUNCTIONS
(
POLICY_CONSTRAINTS
)

591 
DECLARE_ASN1_ITEM
(
POLICY_CONSTRAINTS
)

593 
GENERAL_NAME
 *
a2i_GENERAL_NAME
(GENERAL_NAME *
out
,

594 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

595 
gí_ty≥
, *
vÆue
, 
is_nc
);

597 #ifde‡
HEADER_CONF_H


598 
GENERAL_NAME
 *
v2i_GENERAL_NAME
(c⁄° 
X509V3_EXT_METHOD
 *
mëhod
, 
X509V3_CTX
 *
˘x
,

599 
CONF_VALUE
 *
˙f
);

600 
GENERAL_NAME
 *
v2i_GENERAL_NAME_ex
(GENERAL_NAME *
out
,

601 c⁄° 
X509V3_EXT_METHOD
 *
mëhod
,

602 
X509V3_CTX
 *
˘x
, 
CONF_VALUE
 *
˙f
, 
is_nc
);

603 
X509V3_c⁄f_‰ì
(
CONF_VALUE
 *
vÆ
);

605 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f_nid
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, 
ext_nid
, *
vÆue
);

606 
X509_EXTENSION
 *
X509V3_EXT_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
«me
, *
vÆue
);

607 
X509V3_EXT_add_nc⁄f_sk
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
STACK_OF
(
X509_EXTENSION
Ë**
sk
);

608 
X509V3_EXT_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509
 *
˚π
);

609 
X509V3_EXT_REQ_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_REQ
 *
ªq
);

610 
X509V3_EXT_CRL_add_nc⁄f
(
CONF
 *
c⁄f
, 
X509V3_CTX
 *
˘x
, *
£˘i⁄
, 
X509_CRL
 *
¸l
);

612 
X509_EXTENSION
 *
X509V3_EXT_c⁄f_nid
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

613 
ext_nid
, *
vÆue
);

614 
X509_EXTENSION
 *
X509V3_EXT_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

615 *
«me
, *
vÆue
);

616 
X509V3_EXT_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

617 *
£˘i⁄
, 
X509
 *
˚π
);

618 
X509V3_EXT_REQ_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

619 *
£˘i⁄
, 
X509_REQ
 *
ªq
);

620 
X509V3_EXT_CRL_add_c⁄f
(
LHASH_OF
(
CONF_VALUE
Ë*
c⁄f
, 
X509V3_CTX
 *
˘x
,

621 *
£˘i⁄
, 
X509_CRL
 *
¸l
);

623 
X509V3_add_vÆue_boﬁ_nf
(*
«me
, 
a¢1_boﬁ
,

624 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

625 
X509V3_gë_vÆue_boﬁ
(
CONF_VALUE
 *
vÆue
, *
a¢1_boﬁ
);

626 
X509V3_gë_vÆue_öt
(
CONF_VALUE
 *
vÆue
, 
ASN1_INTEGER
 **
aöt
);

627 
X509V3_£t_nc⁄f
(
X509V3_CTX
 *
˘x
, 
CONF
 *
c⁄f
);

628 
X509V3_£t_c⁄f_lhash
(
X509V3_CTX
 *
˘x
, 
LHASH_OF
(
CONF_VALUE
Ë*
lhash
);

631 * 
X509V3_gë_°rög
(
X509V3_CTX
 *
˘x
, *
«me
, *
£˘i⁄
);

632 
STACK_OF
(
CONF_VALUE
Ë* 
X509V3_gë_£˘i⁄
(
X509V3_CTX
 *
˘x
, *
£˘i⁄
);

633 
X509V3_°rög_‰ì
(
X509V3_CTX
 *
˘x
, *
°r
);

634 
X509V3_£˘i⁄_‰ì
–
X509V3_CTX
 *
˘x
, 
STACK_OF
(
CONF_VALUE
Ë*
£˘i⁄
);

635 
X509V3_£t_˘x
(
X509V3_CTX
 *
˘x
, 
X509
 *
issuî
, X509 *
subje˘
,

636 
X509_REQ
 *
ªq
, 
X509_CRL
 *
¸l
, 
Êags
);

638 
X509V3_add_vÆue
(c⁄° *
«me
, c⁄° *
vÆue
,

639 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

640 
X509V3_add_vÆue_uch¨
(c⁄° *
«me
, c⁄° *
vÆue
,

641 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

642 
X509V3_add_vÆue_boﬁ
(c⁄° *
«me
, 
a¢1_boﬁ
,

643 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

644 
X509V3_add_vÆue_öt
(c⁄° *
«me
, 
ASN1_INTEGER
 *
aöt
,

645 
STACK_OF
(
CONF_VALUE
Ë**
exéi°
);

646 * 
i2s_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_INTEGER
 *
aöt
);

647 
ASN1_INTEGER
 * 
s2i_ASN1_INTEGER
(
X509V3_EXT_METHOD
 *
mëh
, *
vÆue
);

648 * 
i2s_ASN1_ENUMERATED
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

649 * 
i2s_ASN1_ENUMERATED_TABLE
(
X509V3_EXT_METHOD
 *
mëh
, 
ASN1_ENUMERATED
 *
aöt
);

650 
X509V3_EXT_add
(
X509V3_EXT_METHOD
 *
ext
);

651 
X509V3_EXT_add_li°
(
X509V3_EXT_METHOD
 *
exéi°
);

652 
X509V3_EXT_add_Æüs
(
nid_to
, 
nid_‰om
);

653 
X509V3_EXT_˛ónup
();

655 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë
(
X509_EXTENSION
 *
ext
);

656 c⁄° 
X509V3_EXT_METHOD
 *
X509V3_EXT_gë_nid
(
nid
);

657 
X509V3_add_°™d¨d_exãnsi⁄s
();

658 
STACK_OF
(
CONF_VALUE
Ë*
X509V3_∑r£_li°
(c⁄° *
löe
);

659 *
X509V3_EXT_d2i
(
X509_EXTENSION
 *
ext
);

660 *
X509V3_gë_d2i
(
STACK_OF
(
X509_EXTENSION
Ë*
x
, 
nid
, *
¸ô
, *
idx
);

663 
X509_EXTENSION
 *
X509V3_EXT_i2d
(
ext_nid
, 
¸ô
, *
ext_°ruc
);

664 
X509V3_add1_i2d
(
STACK_OF
(
X509_EXTENSION
Ë**
x
, 
nid
, *
vÆue
, 
¸ô
, 
Êags
);

666 *
hex_to_°rög
(c⁄° *
buf„r
, 
Àn
);

667 *
°rög_to_hex
(c⁄° *
°r
, *
Àn
);

668 
«me_cmp
(c⁄° *
«me
, c⁄° *
cmp
);

670 
X509V3_EXT_vÆ_¥n
(
BIO
 *
out
, 
STACK_OF
(
CONF_VALUE
Ë*
vÆ
, 
ödít
,

671 
ml
);

672 
X509V3_EXT_¥öt
(
BIO
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

673 
X509V3_EXT_¥öt_Â
(
FILE
 *
out
, 
X509_EXTENSION
 *
ext
, 
Êag
, 
ödít
);

675 
X509V3_exãnsi⁄s_¥öt
(
BIO
 *
out
, *
tôÀ
, 
STACK_OF
(
X509_EXTENSION
Ë*
exts
, 
Êag
, 
ödít
);

677 
X509_check_ˇ
(
X509
 *
x
);

678 
X509_check_puΩo£
(
X509
 *
x
, 
id
, 
ˇ
);

679 
X509_suµ‹ãd_exãnsi⁄
(
X509_EXTENSION
 *
ex
);

680 
X509_PURPOSE_£t
(*
p
, 
puΩo£
);

681 
X509_check_issued
(
X509
 *
issuî
, X509 *
subje˘
);

682 
X509_check_akid
(
X509
 *
issuî
, 
AUTHORITY_KEYID
 *
akid
);

683 
X509_PURPOSE_gë_cou¡
();

684 
X509_PURPOSE
 * 
X509_PURPOSE_gë0
(
idx
);

685 
X509_PURPOSE_gë_by_¢ame
(*
¢ame
);

686 
X509_PURPOSE_gë_by_id
(
id
);

687 
X509_PURPOSE_add
(
id
, 
åu°
, 
Êags
,

688 (*
ck
)(c⁄° 
X509_PURPOSE
 *, c⁄° 
X509
 *, ),

689 *
«me
, *
¢ame
, *
¨g
);

690 *
X509_PURPOSE_gë0_«me
(
X509_PURPOSE
 *
xp
);

691 *
X509_PURPOSE_gë0_¢ame
(
X509_PURPOSE
 *
xp
);

692 
X509_PURPOSE_gë_åu°
(
X509_PURPOSE
 *
xp
);

693 
X509_PURPOSE_˛ónup
();

694 
X509_PURPOSE_gë_id
(
X509_PURPOSE
 *);

696 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_emaû
(
X509
 *
x
);

697 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_REQ_gë1_emaû
(
X509_REQ
 *
x
);

698 
X509_emaû_‰ì
(
STACK_OF
(
OPENSSL_STRING
Ë*
sk
);

699 
STACK_OF
(
OPENSSL_STRING
Ë*
X509_gë1_oc•
(
X509
 *
x
);

701 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS
(c⁄° *
ùasc
);

702 
ASN1_OCTET_STRING
 *
a2i_IPADDRESS_NC
(c⁄° *
ùasc
);

703 
a2i_ùadd
(*
ùout
, c⁄° *
ùasc
);

704 
X509V3_NAME_‰om_£˘i⁄
(
X509_NAME
 *
nm
, 
STACK_OF
(
CONF_VALUE
)*
dn_sk
,

705 
chty≥
);

707 
X509_POLICY_NODE_¥öt
(
BIO
 *
out
, 
X509_POLICY_NODE
 *
node
, 
ödít
);

708 
DECLARE_STACK_OF
(
X509_POLICY_NODE
)

710 #i‚de‡
OPENSSL_NO_RFC3779


712 
	sASR™ge_°
 {

713 
ASN1_INTEGER
 *
mö
, *
max
;

714 } 
	tASR™ge
;

716 
	#ASIdOrR™ge_id
 0

	)

717 
	#ASIdOrR™ge_ønge
 1

	)

719 
	sASIdOrR™ge_°
 {

720 
ty≥
;

722 
ASN1_INTEGER
 *
id
;

723 
ASR™ge
 *
ønge
;

724 } 
u
;

725 } 
	tASIdOrR™ge
;

727 
STACK_OF
(
	tASIdOrR™ge
Ë
	tASIdOrR™ges
;

728 
DECLARE_STACK_OF
(
ASIdOrR™ge
)

730 
	#ASIdítifõrChoi˚_öhîô
 0

	)

731 
	#ASIdítifõrChoi˚_asIdsOrR™ges
 1

	)

733 
	sASIdítifõrChoi˚_°
 {

734 
ty≥
;

736 
ASN1_NULL
 *
öhîô
;

737 
ASIdOrR™ges
 *
asIdsOrR™ges
;

738 } 
u
;

739 } 
	tASIdítifõrChoi˚
;

741 
	sASIdítifõrs_°
 {

742 
ASIdítifõrChoi˚
 *
a¢um
, *
rdi
;

743 } 
	tASIdítifõrs
;

745 
DECLARE_ASN1_FUNCTIONS
(
ASR™ge
)

746 
DECLARE_ASN1_FUNCTIONS
(
ASIdOrR™ge
)

747 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrChoi˚
)

748 
DECLARE_ASN1_FUNCTIONS
(
ASIdítifõrs
)

751 
	sIPAddªssR™ge_°
 {

752 
ASN1_BIT_STRING
 *
mö
, *
max
;

753 } 
	tIPAddªssR™ge
;

755 
	#IPAddªssOrR™ge_addªssPªfix
 0

	)

756 
	#IPAddªssOrR™ge_addªssR™ge
 1

	)

758 
	sIPAddªssOrR™ge_°
 {

759 
ty≥
;

761 
ASN1_BIT_STRING
 *
addªssPªfix
;

762 
IPAddªssR™ge
 *
addªssR™ge
;

763 } 
u
;

764 } 
	tIPAddªssOrR™ge
;

766 
STACK_OF
(
	tIPAddªssOrR™ge
Ë
	tIPAddªssOrR™ges
;

767 
DECLARE_STACK_OF
(
IPAddªssOrR™ge
)

769 
	#IPAddªssChoi˚_öhîô
 0

	)

770 
	#IPAddªssChoi˚_addªs£sOrR™ges
 1

	)

772 
	sIPAddªssChoi˚_°
 {

773 
ty≥
;

775 
ASN1_NULL
 *
öhîô
;

776 
IPAddªssOrR™ges
 *
addªs£sOrR™ges
;

777 } 
u
;

778 } 
	tIPAddªssChoi˚
;

780 
	sIPAddªssFamûy_°
 {

781 
ASN1_OCTET_STRING
 *
addªssFamûy
;

782 
IPAddªssChoi˚
 *
ùAddªssChoi˚
;

783 } 
	tIPAddªssFamûy
;

785 
STACK_OF
(
	tIPAddªssFamûy
Ë
	tIPAddrBlocks
;

786 
DECLARE_STACK_OF
(
IPAddªssFamûy
)

788 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssR™ge
)

789 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssOrR™ge
)

790 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssChoi˚
)

791 
DECLARE_ASN1_FUNCTIONS
(
IPAddªssFamûy
)

796 
	#V3_ASID_ASNUM
 0

	)

797 
	#V3_ASID_RDI
 1

	)

805 
	#IANA_AFI_IPV4
 1

	)

806 
	#IANA_AFI_IPV6
 2

	)

813 
v3_asid_add_öhîô
(
ASIdítifõrs
 *
asid
, 
which
);

814 
v3_asid_add_id_‹_ønge
(
ASIdítifõrs
 *
asid
, 
which
,

815 
ASN1_INTEGER
 *
mö
, ASN1_INTEGER *
max
);

816 
v3_addr_add_öhîô
(
IPAddrBlocks
 *
addr
,

817 c⁄° 
afi
, c⁄° *
ßfi
);

818 
v3_addr_add_¥efix
(
IPAddrBlocks
 *
addr
,

819 c⁄° 
afi
, c⁄° *
ßfi
,

820 *
a
, c⁄° 
¥efixÀn
);

821 
v3_addr_add_ønge
(
IPAddrBlocks
 *
addr
,

822 c⁄° 
afi
, c⁄° *
ßfi
,

823 *
mö
, *
max
);

824 
v3_addr_gë_afi
(c⁄° 
IPAddªssFamûy
 *
f
);

825 
v3_addr_gë_ønge
(
IPAddªssOrR™ge
 *
a‹
, c⁄° 
afi
,

826 *
mö
, *
max
,

827 c⁄° 
Àngth
);

832 
v3_asid_is_ˇn⁄iˇl
(
ASIdítifõrs
 *
asid
);

833 
v3_addr_is_ˇn⁄iˇl
(
IPAddrBlocks
 *
addr
);

834 
v3_asid_ˇn⁄ize
(
ASIdítifõrs
 *
asid
);

835 
v3_addr_ˇn⁄ize
(
IPAddrBlocks
 *
addr
);

840 
v3_asid_öhîôs
(
ASIdítifõrs
 *
asid
);

841 
v3_addr_öhîôs
(
IPAddrBlocks
 *
addr
);

842 
v3_asid_sub£t
(
ASIdítifõrs
 *
a
, ASIdítifõr†*
b
);

843 
v3_addr_sub£t
(
IPAddrBlocks
 *
a
, IPAddrBlock†*
b
);

848 
v3_asid_vÆid©e_∑th
(
X509_STORE_CTX
 *);

849 
v3_addr_vÆid©e_∑th
(
X509_STORE_CTX
 *);

850 
v3_asid_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

851 
ASIdítifõrs
 *
ext
,

852 
Ælow_öhîô™˚
);

853 
v3_addr_vÆid©e_ªsour˚_£t
(
STACK_OF
(
X509
Ë*
chaö
,

854 
IPAddrBlocks
 *
ext
,

855 
Ælow_öhîô™˚
);

863 
ERR_lﬂd_X509V3_°rögs
();

868 
	#X509V3_F_A2I_GENERAL_NAME
 164

	)

869 
	#X509V3_F_ASIDENTIFIERCHOICE_CANONIZE
 161

	)

870 
	#X509V3_F_ASIDENTIFIERCHOICE_IS_CANONICAL
 162

	)

871 
	#X509V3_F_COPY_EMAIL
 122

	)

872 
	#X509V3_F_COPY_ISSUER
 123

	)

873 
	#X509V3_F_DO_DIRNAME
 144

	)

874 
	#X509V3_F_DO_EXT_CONF
 124

	)

875 
	#X509V3_F_DO_EXT_I2D
 135

	)

876 
	#X509V3_F_DO_EXT_NCONF
 151

	)

877 
	#X509V3_F_DO_I2V_NAME_CONSTRAINTS
 148

	)

878 
	#X509V3_F_GNAMES_FROM_SECTNAME
 156

	)

879 
	#X509V3_F_HEX_TO_STRING
 111

	)

880 
	#X509V3_F_I2S_ASN1_ENUMERATED
 121

	)

881 
	#X509V3_F_I2S_ASN1_IA5STRING
 149

	)

882 
	#X509V3_F_I2S_ASN1_INTEGER
 120

	)

883 
	#X509V3_F_I2V_AUTHORITY_INFO_ACCESS
 138

	)

884 
	#X509V3_F_NOTICE_SECTION
 132

	)

885 
	#X509V3_F_NREF_NOS
 133

	)

886 
	#X509V3_F_POLICY_SECTION
 131

	)

887 
	#X509V3_F_PROCESS_PCI_VALUE
 150

	)

888 
	#X509V3_F_R2I_CERTPOL
 130

	)

889 
	#X509V3_F_R2I_PCI
 155

	)

890 
	#X509V3_F_S2I_ASN1_IA5STRING
 100

	)

891 
	#X509V3_F_S2I_ASN1_INTEGER
 108

	)

892 
	#X509V3_F_S2I_ASN1_OCTET_STRING
 112

	)

893 
	#X509V3_F_S2I_ASN1_SKEY_ID
 114

	)

894 
	#X509V3_F_S2I_SKEY_ID
 115

	)

895 
	#X509V3_F_SET_DIST_POINT_NAME
 158

	)

896 
	#X509V3_F_STRING_TO_HEX
 113

	)

897 
	#X509V3_F_SXNET_ADD_ID_ASC
 125

	)

898 
	#X509V3_F_SXNET_ADD_ID_INTEGER
 126

	)

899 
	#X509V3_F_SXNET_ADD_ID_ULONG
 127

	)

900 
	#X509V3_F_SXNET_GET_ID_ASC
 128

	)

901 
	#X509V3_F_SXNET_GET_ID_ULONG
 129

	)

902 
	#X509V3_F_V2I_ASIDENTIFIERS
 163

	)

903 
	#X509V3_F_V2I_ASN1_BIT_STRING
 101

	)

904 
	#X509V3_F_V2I_AUTHORITY_INFO_ACCESS
 139

	)

905 
	#X509V3_F_V2I_AUTHORITY_KEYID
 119

	)

906 
	#X509V3_F_V2I_BASIC_CONSTRAINTS
 102

	)

907 
	#X509V3_F_V2I_CRLD
 134

	)

908 
	#X509V3_F_V2I_EXTENDED_KEY_USAGE
 103

	)

909 
	#X509V3_F_V2I_GENERAL_NAMES
 118

	)

910 
	#X509V3_F_V2I_GENERAL_NAME_EX
 117

	)

911 
	#X509V3_F_V2I_IDP
 157

	)

912 
	#X509V3_F_V2I_IPADDRBLOCKS
 159

	)

913 
	#X509V3_F_V2I_ISSUER_ALT
 153

	)

914 
	#X509V3_F_V2I_NAME_CONSTRAINTS
 147

	)

915 
	#X509V3_F_V2I_POLICY_CONSTRAINTS
 146

	)

916 
	#X509V3_F_V2I_POLICY_MAPPINGS
 145

	)

917 
	#X509V3_F_V2I_SUBJECT_ALT
 154

	)

918 
	#X509V3_F_V3_ADDR_VALIDATE_PATH_INTERNAL
 160

	)

919 
	#X509V3_F_V3_GENERIC_EXTENSION
 116

	)

920 
	#X509V3_F_X509V3_ADD1_I2D
 140

	)

921 
	#X509V3_F_X509V3_ADD_VALUE
 105

	)

922 
	#X509V3_F_X509V3_EXT_ADD
 104

	)

923 
	#X509V3_F_X509V3_EXT_ADD_ALIAS
 106

	)

924 
	#X509V3_F_X509V3_EXT_CONF
 107

	)

925 
	#X509V3_F_X509V3_EXT_I2D
 136

	)

926 
	#X509V3_F_X509V3_EXT_NCONF
 152

	)

927 
	#X509V3_F_X509V3_GET_SECTION
 142

	)

928 
	#X509V3_F_X509V3_GET_STRING
 143

	)

929 
	#X509V3_F_X509V3_GET_VALUE_BOOL
 110

	)

930 
	#X509V3_F_X509V3_PARSE_LIST
 109

	)

931 
	#X509V3_F_X509_PURPOSE_ADD
 137

	)

932 
	#X509V3_F_X509_PURPOSE_SET
 141

	)

935 
	#X509V3_R_BAD_IP_ADDRESS
 118

	)

936 
	#X509V3_R_BAD_OBJECT
 119

	)

937 
	#X509V3_R_BN_DEC2BN_ERROR
 100

	)

938 
	#X509V3_R_BN_TO_ASN1_INTEGER_ERROR
 101

	)

939 
	#X509V3_R_DIRNAME_ERROR
 149

	)

940 
	#X509V3_R_DISTPOINT_ALREADY_SET
 160

	)

941 
	#X509V3_R_DUPLICATE_ZONE_ID
 133

	)

942 
	#X509V3_R_ERROR_CONVERTING_ZONE
 131

	)

943 
	#X509V3_R_ERROR_CREATING_EXTENSION
 144

	)

944 
	#X509V3_R_ERROR_IN_EXTENSION
 128

	)

945 
	#X509V3_R_EXPECTED_A_SECTION_NAME
 137

	)

946 
	#X509V3_R_EXTENSION_EXISTS
 145

	)

947 
	#X509V3_R_EXTENSION_NAME_ERROR
 115

	)

948 
	#X509V3_R_EXTENSION_NOT_FOUND
 102

	)

949 
	#X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED
 103

	)

950 
	#X509V3_R_EXTENSION_VALUE_ERROR
 116

	)

951 
	#X509V3_R_ILLEGAL_EMPTY_EXTENSION
 151

	)

952 
	#X509V3_R_ILLEGAL_HEX_DIGIT
 113

	)

953 
	#X509V3_R_INCORRECT_POLICY_SYNTAX_TAG
 152

	)

954 
	#X509V3_R_INVALID_MULTIPLE_RDNS
 161

	)

955 
	#X509V3_R_INVALID_ASNUMBER
 162

	)

956 
	#X509V3_R_INVALID_ASRANGE
 163

	)

957 
	#X509V3_R_INVALID_BOOLEAN_STRING
 104

	)

958 
	#X509V3_R_INVALID_EXTENSION_STRING
 105

	)

959 
	#X509V3_R_INVALID_INHERITANCE
 165

	)

960 
	#X509V3_R_INVALID_IPADDRESS
 166

	)

961 
	#X509V3_R_INVALID_NAME
 106

	)

962 
	#X509V3_R_INVALID_NULL_ARGUMENT
 107

	)

963 
	#X509V3_R_INVALID_NULL_NAME
 108

	)

964 
	#X509V3_R_INVALID_NULL_VALUE
 109

	)

965 
	#X509V3_R_INVALID_NUMBER
 140

	)

966 
	#X509V3_R_INVALID_NUMBERS
 141

	)

967 
	#X509V3_R_INVALID_OBJECT_IDENTIFIER
 110

	)

968 
	#X509V3_R_INVALID_OPTION
 138

	)

969 
	#X509V3_R_INVALID_POLICY_IDENTIFIER
 134

	)

970 
	#X509V3_R_INVALID_PROXY_POLICY_SETTING
 153

	)

971 
	#X509V3_R_INVALID_PURPOSE
 146

	)

972 
	#X509V3_R_INVALID_SAFI
 164

	)

973 
	#X509V3_R_INVALID_SECTION
 135

	)

974 
	#X509V3_R_INVALID_SYNTAX
 143

	)

975 
	#X509V3_R_ISSUER_DECODE_ERROR
 126

	)

976 
	#X509V3_R_MISSING_VALUE
 124

	)

977 
	#X509V3_R_NEED_ORGANIZATION_AND_NUMBERS
 142

	)

978 
	#X509V3_R_NO_CONFIG_DATABASE
 136

	)

979 
	#X509V3_R_NO_ISSUER_CERTIFICATE
 121

	)

980 
	#X509V3_R_NO_ISSUER_DETAILS
 127

	)

981 
	#X509V3_R_NO_POLICY_IDENTIFIER
 139

	)

982 
	#X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED
 154

	)

983 
	#X509V3_R_NO_PUBLIC_KEY
 114

	)

984 
	#X509V3_R_NO_SUBJECT_DETAILS
 125

	)

985 
	#X509V3_R_ODD_NUMBER_OF_DIGITS
 112

	)

986 
	#X509V3_R_OPERATION_NOT_DEFINED
 148

	)

987 
	#X509V3_R_OTHERNAME_ERROR
 147

	)

988 
	#X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED
 155

	)

989 
	#X509V3_R_POLICY_PATH_LENGTH
 156

	)

990 
	#X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED
 157

	)

991 
	#X509V3_R_POLICY_SYNTAX_NOT_CURRENTLY_SUPPORTED
 158

	)

992 
	#X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY
 159

	)

993 
	#X509V3_R_SECTION_NOT_FOUND
 150

	)

994 
	#X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS
 122

	)

995 
	#X509V3_R_UNABLE_TO_GET_ISSUER_KEYID
 123

	)

996 
	#X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT
 111

	)

997 
	#X509V3_R_UNKNOWN_EXTENSION
 129

	)

998 
	#X509V3_R_UNKNOWN_EXTENSION_NAME
 130

	)

999 
	#X509V3_R_UNKNOWN_OPTION
 120

	)

1000 
	#X509V3_R_UNSUPPORTED_OPTION
 117

	)

1001 
	#X509V3_R_UNSUPPORTED_TYPE
 167

	)

1002 
	#X509V3_R_USER_TOO_LONG
 132

	)

1004 #ifde‡ 
__˝lu•lus


	@/usr/include/rpc/netdb.h

36 #i‚de‡
_RPC_NETDB_H


37 
	#_RPC_NETDB_H
 1

	)

39 
	~<„©uªs.h
>

41 
	#__√ed_size_t


	)

42 
	~<°ddef.h
>

44 
__BEGIN_DECLS


46 
	sΩ˚¡


48 *
	mr_«me
;

49 **
	mr_Æü£s
;

50 
	mr_numbî
;

53 
	$£åp˚¡
 (
__°ay›í
Ë
__THROW
;

54 
	$ídΩ˚¡
 (Ë
__THROW
;

55 
Ω˚¡
 *
	$gëΩcby«me
 (
__c⁄°
 *
__«me
Ë
__THROW
;

56 
Ω˚¡
 *
	$gëΩcbynumbî
 (
__numbî
Ë
__THROW
;

57 
Ω˚¡
 *
	$gëΩ˚¡
 (Ë
__THROW
;

59 #ifde‡
__USE_MISC


60 
	$gëΩcby«me_r
 (
__c⁄°
 *
__«me
, 
Ω˚¡
 *
__ªsu…_buf
,

61 *
__buf„r
, 
size_t
 
__buÊí
,

62 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

64 
	$gëΩcbynumbî_r
 (
__numbî
, 
Ω˚¡
 *
__ªsu…_buf
,

65 *
__buf„r
, 
size_t
 
__buÊí
,

66 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

68 
	$gëΩ˚¡_r
 (
Ω˚¡
 *
__ªsu…_buf
, *
__buf„r
,

69 
size_t
 
__buÊí
, 
Ω˚¡
 **
__ªsu…
Ë
__THROW
;

72 
__END_DECLS


	@/usr/include/stdint.h

23 #i‚de‡
_STDINT_H


24 
	#_STDINT_H
 1

	)

26 
	~<„©uªs.h
>

27 
	~<bôs/wch¨.h
>

28 
	~<bôs/w‹dsize.h
>

35 #i‚de‡
__öt8_t_deföed


36 
	#__öt8_t_deföed


	)

37 sig√d 
	töt8_t
;

38 
	töt16_t
;

39 
	töt32_t
;

40 #i‡
__WORDSIZE
 == 64

41 
	töt64_t
;

43 
__exãnsi⁄__


44 
	töt64_t
;

49 
	tuöt8_t
;

50 
	tuöt16_t
;

51 #i‚de‡
__uöt32_t_deföed


52 
	tuöt32_t
;

53 
	#__uöt32_t_deföed


	)

55 #i‡
__WORDSIZE
 == 64

56 
	tuöt64_t
;

58 
__exãnsi⁄__


59 
	tuöt64_t
;

66 sig√d 
	töt_Àa°8_t
;

67 
	töt_Àa°16_t
;

68 
	töt_Àa°32_t
;

69 #i‡
__WORDSIZE
 == 64

70 
	töt_Àa°64_t
;

72 
__exãnsi⁄__


73 
	töt_Àa°64_t
;

77 
	tuöt_Àa°8_t
;

78 
	tuöt_Àa°16_t
;

79 
	tuöt_Àa°32_t
;

80 #i‡
__WORDSIZE
 == 64

81 
	tuöt_Àa°64_t
;

83 
__exãnsi⁄__


84 
	tuöt_Àa°64_t
;

91 sig√d 
	töt_Á°8_t
;

92 #i‡
__WORDSIZE
 == 64

93 
	töt_Á°16_t
;

94 
	töt_Á°32_t
;

95 
	töt_Á°64_t
;

97 
	töt_Á°16_t
;

98 
	töt_Á°32_t
;

99 
__exãnsi⁄__


100 
	töt_Á°64_t
;

104 
	tuöt_Á°8_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	tuöt_Á°16_t
;

107 
	tuöt_Á°32_t
;

108 
	tuöt_Á°64_t
;

110 
	tuöt_Á°16_t
;

111 
	tuöt_Á°32_t
;

112 
__exãnsi⁄__


113 
	tuöt_Á°64_t
;

118 #i‡
__WORDSIZE
 == 64

119 #i‚de‡
__öçå_t_deföed


120 
	töçå_t
;

121 
	#__öçå_t_deföed


	)

123 
	tuöçå_t
;

125 #i‚de‡
__öçå_t_deföed


126 
	töçå_t
;

127 
	#__öçå_t_deföed


	)

129 
	tuöçå_t
;

134 #i‡
__WORDSIZE
 == 64

135 
	tötmax_t
;

136 
	tuötmax_t
;

138 
__exãnsi⁄__


139 
	tötmax_t
;

140 
__exãnsi⁄__


141 
	tuötmax_t
;

147 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_LIMIT_MACROS


149 #i‡
__WORDSIZE
 == 64

150 
	#__INT64_C
(
c
Ë¯## 
L


	)

151 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

153 
	#__INT64_C
(
c
Ë¯## 
LL


	)

154 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

160 
	#INT8_MIN
 (-128)

	)

161 
	#INT16_MIN
 (-32767-1)

	)

162 
	#INT32_MIN
 (-2147483647-1)

	)

163 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

165 
	#INT8_MAX
 (127)

	)

166 
	#INT16_MAX
 (32767)

	)

167 
	#INT32_MAX
 (2147483647)

	)

168 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

171 
	#UINT8_MAX
 (255)

	)

172 
	#UINT16_MAX
 (65535)

	)

173 
	#UINT32_MAX
 (4294967295U)

	)

174 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

178 
	#INT_LEAST8_MIN
 (-128)

	)

179 
	#INT_LEAST16_MIN
 (-32767-1)

	)

180 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

181 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

183 
	#INT_LEAST8_MAX
 (127)

	)

184 
	#INT_LEAST16_MAX
 (32767)

	)

185 
	#INT_LEAST32_MAX
 (2147483647)

	)

186 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

189 
	#UINT_LEAST8_MAX
 (255)

	)

190 
	#UINT_LEAST16_MAX
 (65535)

	)

191 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

192 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

196 
	#INT_FAST8_MIN
 (-128)

	)

197 #i‡
__WORDSIZE
 == 64

198 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

199 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

201 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

202 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

204 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

206 
	#INT_FAST8_MAX
 (127)

	)

207 #i‡
__WORDSIZE
 == 64

208 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

209 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

211 
	#INT_FAST16_MAX
 (2147483647)

	)

212 
	#INT_FAST32_MAX
 (2147483647)

	)

214 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

217 
	#UINT_FAST8_MAX
 (255)

	)

218 #i‡
__WORDSIZE
 == 64

219 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

220 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

222 
	#UINT_FAST16_MAX
 (4294967295U)

	)

223 
	#UINT_FAST32_MAX
 (4294967295U)

	)

225 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

229 #i‡
__WORDSIZE
 == 64

230 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

231 
	#INTPTR_MAX
 (9223372036854775807L)

	)

232 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

234 
	#INTPTR_MIN
 (-2147483647-1)

	)

235 
	#INTPTR_MAX
 (2147483647)

	)

236 
	#UINTPTR_MAX
 (4294967295U)

	)

241 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

243 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

246 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

252 #i‡
__WORDSIZE
 == 64

253 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

254 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

256 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

257 
	#PTRDIFF_MAX
 (2147483647)

	)

261 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

262 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

265 #i‡
__WORDSIZE
 == 64

266 
	#SIZE_MAX
 (18446744073709551615UL)

	)

268 
	#SIZE_MAX
 (4294967295U)

	)

272 #i‚de‡
WCHAR_MIN


274 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

275 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

279 
	#WINT_MIN
 (0u)

	)

280 
	#WINT_MAX
 (4294967295u)

	)

287 #i‡!
deföed
 
__˝lu•lus
 || deföed 
__STDC_CONSTANT_MACROS


290 
	#INT8_C
(
c
Ë
	)
c

291 
	#INT16_C
(
c
Ë
	)
c

292 
	#INT32_C
(
c
Ë
	)
c

293 #i‡
__WORDSIZE
 == 64

294 
	#INT64_C
(
c
Ë¯## 
L


	)

296 
	#INT64_C
(
c
Ë¯## 
LL


	)

300 
	#UINT8_C
(
c
Ë
	)
c

301 
	#UINT16_C
(
c
Ë
	)
c

302 
	#UINT32_C
(
c
Ë¯## 
U


	)

303 #i‡
__WORDSIZE
 == 64

304 
	#UINT64_C
(
c
Ë¯## 
UL


	)

306 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

310 #i‡
__WORDSIZE
 == 64

311 
	#INTMAX_C
(
c
Ë¯## 
L


	)

312 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

314 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

315 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

	@/usr/include/zconf.h

8 #i‚de‡
ZCONF_H


9 
	#ZCONF_H


	)

17 #ifde‡
Z_PREFIX


20 
	#_di°_code
 
z__di°_code


	)

21 
	#_Àngth_code
 
z__Àngth_code


	)

22 
	#_å_Æign
 
z__å_Æign


	)

23 
	#_å_Êush_block
 
z__å_Êush_block


	)

24 
	#_å_öô
 
z__å_öô


	)

25 
	#_å_°‹ed_block
 
z__å_°‹ed_block


	)

26 
	#_å_èŒy
 
z__å_èŒy


	)

27 
	#adÀr32
 
z_adÀr32


	)

28 
	#adÀr32_comböe
 
z_adÀr32_comböe


	)

29 
	#com¥ess
 
z_com¥ess


	)

30 
	#com¥ess2
 
z_com¥ess2


	)

31 
	#com¥essBound
 
z_com¥essBound


	)

32 
	#¸c32
 
z_¸c32


	)

33 
	#¸c32_comböe
 
z_¸c32_comböe


	)

34 
	#deÊ©e
 
z_deÊ©e


	)

35 
	#deÊ©eBound
 
z_deÊ©eBound


	)

36 
	#deÊ©eC›y
 
z_deÊ©eC›y


	)

37 
	#deÊ©eEnd
 
z_deÊ©eEnd


	)

38 
	#deÊ©eInô2_
 
z_deÊ©eInô2_


	)

39 
	#deÊ©eInô_
 
z_deÊ©eInô_


	)

40 
	#deÊ©eP¨ams
 
z_deÊ©eP¨ams


	)

41 
	#deÊ©ePrime
 
z_deÊ©ePrime


	)

42 
	#deÊ©eRe£t
 
z_deÊ©eRe£t


	)

43 
	#deÊ©eSëDi˘i⁄¨y
 
z_deÊ©eSëDi˘i⁄¨y


	)

44 
	#deÊ©eSëHódî
 
z_deÊ©eSëHódî


	)

45 
	#deÊ©eTu√
 
z_deÊ©eTu√


	)

46 
	#deÊ©e_c›yright
 
z_deÊ©e_c›yright


	)

47 
	#gë_¸c_èbÀ
 
z_gë_¸c_èbÀ


	)

48 
	#gz˛óªº
 
z_gz˛óªº


	)

49 
	#gz˛o£
 
z_gz˛o£


	)

50 
	#gzdúe˘
 
z_gzdúe˘


	)

51 
	#gzd›í
 
z_gzd›í


	)

52 
	#gzeof
 
z_gzeof


	)

53 
	#gzîr‹
 
z_gzîr‹


	)

54 
	#gzÊush
 
z_gzÊush


	)

55 
	#gzgëc
 
z_gzgëc


	)

56 
	#gzgës
 
z_gzgës


	)

57 
	#gz›í
 
z_gz›í


	)

58 
	#gz¥ötf
 
z_gz¥ötf


	)

59 
	#gzputc
 
z_gzputc


	)

60 
	#gzputs
 
z_gzputs


	)

61 
	#gzªad
 
z_gzªad


	)

62 
	#gzªwöd
 
z_gzªwöd


	)

63 
	#gz£ek
 
z_gz£ek


	)

64 
	#gz£ç¨ams
 
z_gz£ç¨ams


	)

65 
	#gzãŒ
 
z_gzãŒ


	)

66 
	#gzungëc
 
z_gzungëc


	)

67 
	#gzwrôe
 
z_gzwrôe


	)

68 
	#öÊ©e
 
z_öÊ©e


	)

69 
	#öÊ©eBack
 
z_öÊ©eBack


	)

70 
	#öÊ©eBackEnd
 
z_öÊ©eBackEnd


	)

71 
	#öÊ©eBackInô_
 
z_öÊ©eBackInô_


	)

72 
	#öÊ©eC›y
 
z_öÊ©eC›y


	)

73 
	#öÊ©eEnd
 
z_öÊ©eEnd


	)

74 
	#öÊ©eGëHódî
 
z_öÊ©eGëHódî


	)

75 
	#öÊ©eInô2_
 
z_öÊ©eInô2_


	)

76 
	#öÊ©eInô_
 
z_öÊ©eInô_


	)

77 
	#öÊ©ePrime
 
z_öÊ©ePrime


	)

78 
	#öÊ©eRe£t
 
z_öÊ©eRe£t


	)

79 
	#öÊ©eSëDi˘i⁄¨y
 
z_öÊ©eSëDi˘i⁄¨y


	)

80 
	#öÊ©eSync
 
z_öÊ©eSync


	)

81 
	#öÊ©eSyncPoöt
 
z_öÊ©eSyncPoöt


	)

82 
	#öÊ©e_c›yright
 
z_öÊ©e_c›yright


	)

83 
	#öÊ©e_Á°
 
z_öÊ©e_Á°


	)

84 
	#öÊ©e_èbÀ
 
z_öÊ©e_èbÀ


	)

85 
	#uncom¥ess
 
z_uncom¥ess


	)

86 
	#zEº‹
 
z_zEº‹


	)

87 
	#z_îrmsg
 
z_z_îrmsg


	)

88 
	#zˇŒoc
 
z_zˇŒoc


	)

89 
	#zc‰ì
 
z_zc‰ì


	)

90 
	#zlibCompûeFœgs
 
z_zlibCompûeFœgs


	)

91 
	#zlibVîsi⁄
 
z_zlibVîsi⁄


	)

94 
	#Byã
 
z_Byã


	)

95 
	#Byãf
 
z_Byãf


	)

96 
	#Æloc_func
 
z_Æloc_func


	)

97 
	#ch¨f
 
z_ch¨f


	)

98 
	#‰ì_func
 
z_‰ì_func


	)

99 
	#gzFûe
 
z_gzFûe


	)

100 
	#gz_hódî
 
z_gz_hódî


	)

101 
	#gz_hódîp
 
z_gz_hódîp


	)

102 
	#ö_func
 
z_ö_func


	)

103 
	#ötf
 
z_ötf


	)

104 
	#out_func
 
z_out_func


	)

105 
	#uI¡
 
z_uI¡


	)

106 
	#uI¡f
 
z_uI¡f


	)

107 
	#uL⁄g
 
z_uL⁄g


	)

108 
	#uL⁄gf
 
z_uL⁄gf


	)

109 
	#voidp
 
z_voidp


	)

110 
	#voidp
 
z_voidp


	)

111 
	#voidpc
 
z_voidpc


	)

112 
	#voidpc
 
z_voidpc


	)

113 
	#voidpf
 
z_voidpf


	)

114 
	#voidpf
 
z_voidpf


	)

115 
	#z_°ªam
 
z_z_°ªam


	)

116 
	#z_°ªamp
 
z_z_°ªamp


	)

119 
	#gz_hódî_s
 
z_gz_hódî_s


	)

120 
	#öã∫Æ_°©e
 
z_öã∫Æ_°©e


	)

121 
	#z_°ªam_s
 
z_z_°ªam_s


	)

125 #i‡
deföed
(
__MSDOS__
Ë&& !deföed(
MSDOS
)

126 
	#MSDOS


	)

128 #i‡(
deföed
(
OS_2
Ë|| deföed(
__OS2__
)Ë&& !deföed(
OS2
)

129 
	#OS2


	)

131 #i‡
deföed
(
_WINDOWS
Ë&& !deföed(
WINDOWS
)

132 
	#WINDOWS


	)

134 #i‡
deföed
(
_WIN32
Ë|| deföed(
_WIN32_WCE
Ë|| deföed(
__WIN32__
)

135 #i‚de‡
WIN32


136 
	#WIN32


	)

139 #i‡(
deföed
(
MSDOS
Ë|| deföed(
OS2
Ë|| deföed(
WINDOWS
)Ë&& !deföed(
WIN32
)

140 #i‡!
deföed
(
__GNUC__
Ë&& !deföed(
__FLAT__
Ë&& !deföed(
__386__
)

141 #i‚de‡
SYS16BIT


142 
	#SYS16BIT


	)

151 #ifde‡
SYS16BIT


152 
	#MAXSEG_64K


	)

154 #ifde‡
MSDOS


155 
	#UNALIGNED_OK


	)

158 #ifde‡
__STDC_VERSION__


159 #i‚de‡
STDC


160 
	#STDC


	)

162 #i‡
__STDC_VERSION__
 >= 199901L

163 #i‚de‡
STDC99


164 
	#STDC99


	)

168 #i‡!
deföed
(
STDC
Ë&& (deföed(
__STDC__
Ë|| deföed(
__˝lu•lus
))

169 
	#STDC


	)

171 #i‡!
deföed
(
STDC
Ë&& (deföed(
__GNUC__
Ë|| deföed(
__BORLANDC__
))

172 
	#STDC


	)

174 #i‡!
deföed
(
STDC
Ë&& (deföed(
MSDOS
Ë|| deföed(
WINDOWS
Ë|| deföed(
WIN32
))

175 
	#STDC


	)

177 #i‡!
deföed
(
STDC
Ë&& (deföed(
OS2
Ë|| deföed(
__HOS_AIX__
))

178 
	#STDC


	)

181 #i‡
deföed
(
__OS400__
Ë&& !deföed(
STDC
)

182 
	#STDC


	)

185 #i‚de‡
STDC


187 c⁄°

	)

192 #i‡
deföed
(
__MWERKS__
)||deföed(
≠∂ec
)||deföed(
THINK_C
)||deföed(
__SC__
)

193 
	#NO_DUMMY_DECL


	)

197 #i‚de‡
MAX_MEM_LEVEL


198 #ifde‡
MAXSEG_64K


199 
	#MAX_MEM_LEVEL
 8

	)

201 
	#MAX_MEM_LEVEL
 9

	)

210 #i‚de‡
MAX_WBITS


211 
	#MAX_WBITS
 15

	)

229 #i‚de‡
OF


230 #ifde‡
STDC


231 
	#OF
(
¨gs
Ë
	)
args

233 
	#OF
(
¨gs
Ë()

	)

243 #ifde‡
SYS16BIT


244 #i‡
deföed
(
M_I86SM
Ë|| deföed(
M_I86MM
)

246 
	#SMALL_MEDIUM


	)

247 #ifde‡
_MSC_VER


248 
	#FAR
 
_Ár


	)

250 
	#FAR
 
Ár


	)

253 #i‡(
deföed
(
__SMALL__
Ë|| deföed(
__MEDIUM__
))

255 
	#SMALL_MEDIUM


	)

256 #ifde‡
__BORLANDC__


257 
	#FAR
 
_Ár


	)

259 
	#FAR
 
Ár


	)

264 #i‡
deföed
(
WINDOWS
Ë|| deföed(
WIN32
)

268 #ifde‡
ZLIB_DLL


269 #i‡
deföed
(
WIN32
Ë&& (!deföed(
__BORLANDC__
) || (__BORLANDC__ >= 0x500))

270 #ifde‡
ZLIB_INTERNAL


271 
	#ZEXTERN
 
	`__de˛•ec
(
dŒexp‹t
)

	)

273 
	#ZEXTERN
 
	`__de˛•ec
(
dŒimp‹t
)

	)

281 #ifde‡
ZLIB_WINAPI


282 #ifde‡
FAR


283 #unde‡
FAR


285 
	~<wödows.h
>

288 
	#ZEXPORT
 
WINAPI


	)

289 #ifde‡
WIN32


290 
	#ZEXPORTVA
 
WINAPIV


	)

292 
	#ZEXPORTVA
 
FAR
 
CDECL


	)

297 #i‡
deföed
 (
__BEOS__
)

298 #ifde‡
ZLIB_DLL


299 #ifde‡
ZLIB_INTERNAL


300 
	#ZEXPORT
 
	`__de˛•ec
(
dŒexp‹t
)

	)

301 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒexp‹t
)

	)

303 
	#ZEXPORT
 
	`__de˛•ec
(
dŒimp‹t
)

	)

304 
	#ZEXPORTVA
 
	`__de˛•ec
(
dŒimp‹t
)

	)

309 #ifde‡
HAVE_VISIBILITY_PRAGMA


310 
	#ZEXTERN
 
	`__©åibuã__
((
	`visibûôy
 ("deÁu…"))Ë

	)

313 #i‚de‡
ZEXTERN


314 
	#ZEXTERN
 

	)

316 #i‚de‡
ZEXPORT


317 
	#ZEXPORT


	)

319 #i‚de‡
ZEXPORTVA


320 
	#ZEXPORTVA


	)

323 #i‚de‡
FAR


324 
	#FAR


	)

327 #i‡!
deföed
(
__MACTYPES__
)

328 
	tByã
;

330 
	tuI¡
;

331 
	tuL⁄g
;

333 #ifde‡
SMALL_MEDIUM


335 
	#Byãf
 
Byã
 
FAR


	)

337 
Byã
 
	tFAR
 
	tByãf
;

339 
	tFAR
 
	tch¨f
;

340 
	tFAR
 
	tötf
;

341 
uI¡
 
	tFAR
 
	tuI¡f
;

342 
uL⁄g
 
	tFAR
 
	tuL⁄gf
;

344 #ifde‡
STDC


345 c⁄° *
	tvoidpc
;

346 
	tFAR
 *
	tvoidpf
;

347 *
	tvoidp
;

349 
Byã
 c⁄° *
	tvoidpc
;

350 
Byã
 
	tFAR
 *
	tvoidpf
;

351 
Byã
 *
	tvoidp
;

354 
	~"zlibdefs.h
"

356 #ifde‡
_LARGEFILE64_SOURCE


357 
	~<sys/ty≥s.h
>

360 #i‚de‡
SEEK_SET


361 
	#SEEK_SET
 0

	)

362 
	#SEEK_CUR
 1

	)

363 
	#SEEK_END
 2

	)

365 #i‚de‡
z_off_t


366 
	#z_off_t
 

	)

369 #i‡
deföed
(
__OS400__
)

370 
	#NO_v¢¥ötf


	)

373 #i‡
deföed
(
__MVS__
)

374 
	#NO_v¢¥ötf


	)

378 #i‡
deföed
(
__MVS__
)

379 #¥agm®
m≠
(
deÊ©eInô_
,"DEIN")

380 #¥agm®
m≠
(
deÊ©eInô2_
,"DEIN2")

381 #¥agm®
m≠
(
deÊ©eEnd
,"DEEND")

382 #¥agm®
m≠
(
deÊ©eBound
,"DEBND")

383 #¥agm®
m≠
(
öÊ©eInô_
,"ININ")

384 #¥agm®
m≠
(
öÊ©eInô2_
,"ININ2")

385 #¥agm®
m≠
(
öÊ©eEnd
,"INEND")

386 #¥agm®
m≠
(
öÊ©eSync
,"INSY")

387 #¥agm®
m≠
(
öÊ©eSëDi˘i⁄¨y
,"INSEDI")

388 #¥agm®
m≠
(
com¥essBound
,"CMBND")

389 #¥agm®
m≠
(
öÊ©e_èbÀ
,"INTABL")

390 #¥agm®
m≠
(
öÊ©e_Á°
,"INFA")

391 #¥agm®
m≠
(
öÊ©e_c›yright
,"INCOPY")

	@/usr/include/_G_config.h

4 #i‚de‡
_G_c⁄fig_h


5 
	#_G_c⁄fig_h
 1

	)

9 
	~<bôs/ty≥s.h
>

10 
	#__√ed_size_t


	)

11 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


12 
	#__√ed_wch¨_t


	)

14 
	#__√ed_NULL


	)

15 
	~<°ddef.h
>

16 
	#__√ed_mb°©e_t


	)

17 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


18 
	#__√ed_wöt_t


	)

20 
	~<wch¨.h
>

21 
	#_G_size_t
 
size_t


	)

24 
__off_t
 
	m__pos
;

25 
__mb°©e_t
 
	m__°©e
;

26 } 
	t_G_Âos_t
;

29 
__off64_t
 
	m__pos
;

30 
__mb°©e_t
 
	m__°©e
;

31 } 
	t_G_Âos64_t
;

32 
	#_G_ssize_t
 
__ssize_t


	)

33 
	#_G_off_t
 
__off_t


	)

34 
	#_G_off64_t
 
__off64_t


	)

35 
	#_G_pid_t
 
__pid_t


	)

36 
	#_G_uid_t
 
__uid_t


	)

37 
	#_G_wch¨_t
 
wch¨_t


	)

38 
	#_G_wöt_t
 
wöt_t


	)

39 
	#_G_°©64
 
°©64


	)

40 #i‡
deföed
 
_LIBC
 || deföed 
_GLIBCPP_USE_WCHAR_T


41 
	~<gc⁄v.h
>

44 
__gc⁄v_öfo
 
	m__cd
;

47 
__gc⁄v_öfo
 
	m__cd
;

48 
__gc⁄v_°ï_d©a
 
	m__d©a
;

49 } 
	m__comböed
;

50 } 
	t_G_ic⁄v_t
;

53 
	t_G_öt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

54 
	t_G_öt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

55 
	t_G_uöt16_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__HI__
)));

56 
	t_G_uöt32_t
 
	t__©åibuã__
 ((
	t__mode__
 (
	t__SI__
)));

58 
	#_G_HAVE_BOOL
 1

	)

62 
	#_G_HAVE_ATEXIT
 1

	)

63 
	#_G_HAVE_SYS_CDEFS
 1

	)

64 
	#_G_HAVE_SYS_WAIT
 1

	)

65 
	#_G_NEED_STDARG_H
 1

	)

66 
	#_G_va_li°
 
__gnuc_va_li°


	)

68 
	#_G_HAVE_PRINTF_FP
 1

	)

69 
	#_G_HAVE_MMAP
 1

	)

70 
	#_G_HAVE_MREMAP
 1

	)

71 
	#_G_HAVE_LONG_DOUBLE_IO
 1

	)

72 
	#_G_HAVE_IO_FILE_OPEN
 1

	)

73 
	#_G_HAVE_IO_GETLINE_INFO
 1

	)

75 
	#_G_IO_IO_FILE_VERSION
 0x20001

	)

77 
	#_G_OPEN64
 
__›í64


	)

78 
	#_G_LSEEK64
 
__l£ek64


	)

79 
	#_G_MMAP64
 
__mm≠64


	)

80 
	#_G_FSTAT64
(
fd
,
buf
Ë
	`__fx°©64
 (
_STAT_VER
, fd, buf)

	)

83 
	#_G_HAVE_ST_BLKSIZE
 
	`deföed
 (
_STATBUF_ST_BLKSIZE
)

	)

85 
	#_G_BUFSIZ
 8192

	)

88 
	#_G_NAMES_HAVE_UNDERSCORE
 0

	)

89 
	#_G_VTABLE_LABEL_HAS_LENGTH
 1

	)

90 
	#_G_USING_THUNKS
 1

	)

91 
	#_G_VTABLE_LABEL_PREFIX
 "__vt_"

	)

92 
	#_G_VTABLE_LABEL_PREFIX_ID
 
__vt_


	)

95 #i‡
deföed
 
__˝lu•lus
 || deföed 
__STDC__


96 
	#_G_ARGS
(
ARGLIST
Ë
	)
ARGLIST

98 
	#_G_ARGS
(
ARGLIST
Ë()

	)

	@/usr/include/assert.h

24 #ifdef 
_ASSERT_H


26 #unde‡
_ASSERT_H


27 #unde‡
as£π


28 #unde‡
__ASSERT_VOID_CAST


30 #ifdef 
__USE_GNU


31 #unde‡
as£π_≥º‹


36 
	#_ASSERT_H
 1

	)

37 
	~<„©uªs.h
>

39 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (2,95)

40 
	#__ASSERT_VOID_CAST
 
°©ic_ˇ°
<>

	)

42 
	#__ASSERT_VOID_CAST
 ()

	)

50 #ifdef 
NDEBUG


52 
	#as£π
(
ex¥
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

60 #ifdef 
__USE_GNU


61 
	#as£π_≥º‹
(
î∫um
Ë(
	`__ASSERT_VOID_CAST
 (0))

	)

66 #i‚de‡
_ASSERT_H_DECLS


67 
	#_ASSERT_H_DECLS


	)

68 
__BEGIN_DECLS


71 
	$__as£π_Áû
 (
__c⁄°
 *
__as£πi⁄
, __c⁄° *
__fûe
,

72 
__löe
, 
__c⁄°
 *
__fun˘i⁄
)

73 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

76 
	$__as£π_≥º‹_Áû
 (
__î∫um
, 
__c⁄°
 *
__fûe
,

77 
__löe
,

78 
__c⁄°
 *
__fun˘i⁄
)

79 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

84 
	$__as£π
 (c⁄° *
__as£πi⁄
, c⁄° *
__fûe
, 
__löe
)

85 
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

88 
__END_DECLS


91 
	#as£π
(
ex¥
) \

92 ((
ex¥
) \

93 ? 
	`__ASSERT_VOID_CAST
 (0) \

94 : 
	`__as£π_Áû
 (
	`__STRING
(
ex¥
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

96 #ifdef 
__USE_GNU


97 
	#as£π_≥º‹
(
î∫um
) \

98 (!(
î∫um
) \

99 ? 
	`__ASSERT_VOID_CAST
 (0) \

100 : 
	`__as£π_≥º‹_Áû
 ((
î∫um
), 
__FILE__
, 
__LINE__
, 
__ASSERT_FUNCTION
))

	)

108 #i‡
deföed
 
__˝lu•lus
 ? 
	`__GNUC_PREREQ
 (2, 6) : __GNUC_PREREQ (2, 4)

109 
	#__ASSERT_FUNCTION
 
__PRETTY_FUNCTION__


	)

111 #i‡
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L

112 
	#__ASSERT_FUNCTION
 
__func__


	)

114 
	#__ASSERT_FUNCTION
 ((
__c⁄°
 *Ë0)

	)

	@/usr/include/ctype.h

24 #i‚def 
_CTYPE_H


25 
	#_CTYPE_H
 1

	)

27 
	~<„©uªs.h
>

28 
	~<bôs/ty≥s.h
>

30 
	g__BEGIN_DECLS


32 #i‚de‡
_ISbô


41 
	~<ídün.h
>

42 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


43 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

45 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

50 
	m_ISuµî
 = 
_ISbô
 (0),

51 
	m_ISlowî
 = 
_ISbô
 (1),

52 
	m_ISÆpha
 = 
_ISbô
 (2),

53 
	m_ISdigô
 = 
_ISbô
 (3),

54 
	m_ISxdigô
 = 
_ISbô
 (4),

55 
	m_IS•a˚
 = 
_ISbô
 (5),

56 
	m_IS¥öt
 = 
_ISbô
 (6),

57 
	m_ISgøph
 = 
_ISbô
 (7),

58 
	m_ISbœnk
 = 
_ISbô
 (8),

59 
	m_IS˙ål
 = 
_ISbô
 (9),

60 
	m_ISpun˘
 = 
_ISbô
 (10),

61 
	m_ISÆnum
 = 
_ISbô
 (11)

81 
__c⁄°
 **
	$__˘y≥_b_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

83 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

85 
__c⁄°
 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

86 
__THROW
 
	`__©åibuã__
 ((
__c⁄°
));

89 #i‚de‡
__˝lu•lus


90 
	#__is˘y≥
(
c
, 
ty≥
) \

91 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

92 #ñi‡
deföed
 
__USE_EXTERN_INLINES


93 
	#__is˘y≥_f
(
ty≥
) \

94 
__exã∫_ölöe
 \

95 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

97  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

98 
	}

	)
}

101 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

102 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

104 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

106 
__BEGIN_NAMESPACE_STD


112 
__ex˘y≥
 (
iß um
);

113 
__ex˘y≥
 (
ißÕha
);

114 
__ex˘y≥
 (
is˙ål
);

115 
__ex˘y≥
 (
isdigô
);

116 
__ex˘y≥
 (
i¶owî
);

117 
__ex˘y≥
 (
isgøph
);

118 
__ex˘y≥
 (
i•röt
);

119 
__ex˘y≥
 (
i•un˘
);

120 
__ex˘y≥
 (
is•a˚
);

121 
__ex˘y≥
 (
isuµî
);

122 
__ex˘y≥
 (
isxdigô
);

126 
	$tﬁowî
 (
__c
Ë
__THROW
;

129 
	$touµî
 (
__c
Ë
__THROW
;

131 
__END_NAMESPACE_STD


135 #ifdef 
__USE_ISOC99


136 
__BEGIN_NAMESPACE_C99


138 
	`__ex˘y≥
 (
isbœnk
);

140 
__END_NAMESPACE_C99


143 #ifde‡
__USE_GNU


145 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

148 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


152 
	$ißscii
 (
__c
Ë
__THROW
;

156 
	$tﬂscii
 (
__c
Ë
__THROW
;

160 
	`__ex˘y≥
 (
_touµî
);

161 
	`__ex˘y≥
 (
_tﬁowî
);

165 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

166 (
__exãnsi⁄__
 \

167 ({ 
__ªs
; \

168 i‡( (
c
) > 1) \

170 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

172 
__c
 = (
c
); \

173 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

176 
__ªs
 = 
f
 
¨gs
; \

179 
__ªs
 = (
a
)[(Ë(
c
)]; \

180 
__ªs
; 
	}
}))

	)

182 #i‡!
deföed
 
__NO_CTYPE


183 #ifde‡
__is˘y≥_f


184 
	$__is˘y≥_f
 (
Ænum
)

185 
	$__is˘y≥_f
 (
Æpha
)

186 
	$__is˘y≥_f
 (
˙ål
)

187 
	$__is˘y≥_f
 (
digô
)

188 
	$__is˘y≥_f
 (
lowî
)

189 
	$__is˘y≥_f
 (
gøph
)

190 
	$__is˘y≥_f
 (
¥öt
)

191 
	$__is˘y≥_f
 (
pun˘
)

192 
	$__is˘y≥_f
 (
•a˚
)

193 
	$__is˘y≥_f
 (
uµî
)

194 
	$__is˘y≥_f
 (
xdigô
)

195 #ifde‡
__USE_ISOC99


196 
	$__is˘y≥_f
 (
bœnk
)

198 #ñi‡
deföed
 
__is˘y≥


199 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

200 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

201 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

202 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

203 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

204 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

205 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

206 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

207 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

208 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

209 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

210 #ifde‡
__USE_ISOC99


211 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

215 #ifde‡
__USE_EXTERN_INLINES


216 
__exã∫_ölöe
 

217 
	`__NTH
 (
	$tﬁowî
 (
__c
))

219  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

220 
	}
}

222 
__exã∫_ölöe
 

223 
__NTH
 (
	$touµî
 (
__c
))

225  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

226 
	}
}

229 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


230 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

231 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

234 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC
 || deföed 
__USE_XOPEN


235 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

236 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

238 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

239 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

245 #ifde‡
__USE_XOPEN2K8


259 
	~<xloˇÀ.h
>

263 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

264 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

266 
	#__ex˘y≥_l
(
«me
) \

267 
	`«me
 (, 
__loˇÀ_t
Ë
__THROW


	)

273 
__ex˘y≥_l
 (
iß um_l
);

274 
__ex˘y≥_l
 (
ißÕha_l
);

275 
__ex˘y≥_l
 (
is˙ål_l
);

276 
__ex˘y≥_l
 (
isdigô_l
);

277 
__ex˘y≥_l
 (
i¶owî_l
);

278 
__ex˘y≥_l
 (
isgøph_l
);

279 
__ex˘y≥_l
 (
i•röt_l
);

280 
__ex˘y≥_l
 (
i•un˘_l
);

281 
__ex˘y≥_l
 (
is•a˚_l
);

282 
__ex˘y≥_l
 (
isuµî_l
);

283 
__ex˘y≥_l
 (
isxdigô_l
);

285 
__ex˘y≥_l
 (
isbœnk_l
);

289 
	$__tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

290 
	$tﬁowî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

293 
	$__touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

294 
	$touµî_l
 (
__c
, 
__loˇÀ_t
 
__l
Ë
__THROW
;

296 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


297 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

298 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

299 
	#__touµî_l
(
c
, 
loˇÀ
) \

300 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

301 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

302 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

306 #i‚de‡
__NO_CTYPE


307 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

308 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

309 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

310 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

311 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

312 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

313 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

314 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

315 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

316 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

317 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

319 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

321 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


322 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

323 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

326 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

327 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

328 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

329 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

330 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

331 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

332 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

333 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

334 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

335 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

336 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

338 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

340 #i‡
deföed
 
__USE_SVID
 || deföed 
__USE_MISC


341 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

342 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

349 
__END_DECLS


	@/usr/include/linux/posix_types.h

1 #i‚de‡
_LINUX_POSIX_TYPES_H


2 
	#_LINUX_POSIX_TYPES_H


	)

4 
	~<löux/°ddef.h
>

21 #unde‡
__NFDBITS


22 
	#__NFDBITS
 (8 * ())

	)

24 #unde‡
__FD_SETSIZE


25 
	#__FD_SETSIZE
 1024

	)

27 #unde‡
__FDSET_LONGS


28 
	#__FDSET_LONGS
 (
__FD_SETSIZE
/
__NFDBITS
)

	)

30 #unde‡
__FDELT


31 
	#__FDELT
(
d
Ë((dË/ 
__NFDBITS
)

	)

33 #unde‡
__FDMASK


34 
	#__FDMASK
(
d
Ë(1UL << ((dË% 
__NFDBITS
))

	)

37 
	mfds_bôs
 [
__FDSET_LONGS
];

38 } 
	t__kî√l_fd_£t
;

41 (*
	t__kî√l_sigh™dÀr_t
)();

44 
	t__kî√l_key_t
;

45 
	t__kî√l_mqd_t
;

47 
	~<asm/posix_ty≥s.h
>

	@/usr/include/openssl/asn1.h

59 #i‚de‡
HEADER_ASN1_H


60 
	#HEADER_ASN1_H


	)

62 
	~<time.h
>

63 
	~<›ís¶/e_os2.h
>

64 #i‚de‡
OPENSSL_NO_BIO


65 
	~<›ís¶/bio.h
>

67 
	~<›ís¶/°ack.h
>

68 
	~<›ís¶/ß„°ack.h
>

70 
	~<›ís¶/symhacks.h
>

72 
	~<›ís¶/os¶_typ.h
>

73 #i‚de‡
OPENSSL_NO_DEPRECATED


74 
	~<›ís¶/bn.h
>

77 #ifde‡
OPENSSL_BUILD_SHLIBCRYPTO


78 #unde‡
OPENSSL_EXTERN


79 
	#OPENSSL_EXTERN
 
OPENSSL_EXPORT


	)

82 #ifde‡ 
__˝lu•lus


86 
	#V_ASN1_UNIVERSAL
 0x00

	)

87 
	#V_ASN1_APPLICATION
 0x40

	)

88 
	#V_ASN1_CONTEXT_SPECIFIC
 0x80

	)

89 
	#V_ASN1_PRIVATE
 0xc0

	)

91 
	#V_ASN1_CONSTRUCTED
 0x20

	)

92 
	#V_ASN1_PRIMITIVE_TAG
 0x1f

	)

93 
	#V_ASN1_PRIMATIVE_TAG
 0x1f

	)

95 
	#V_ASN1_APP_CHOOSE
 -2

	)

96 
	#V_ASN1_OTHER
 -3

	)

97 
	#V_ASN1_ANY
 -4

	)

99 
	#V_ASN1_UNDEF
 -1

	)

101 
	#V_ASN1_EOC
 0

	)

102 
	#V_ASN1_BOOLEAN
 1

	)

103 
	#V_ASN1_INTEGER
 2

	)

104 
	#V_ASN1_BIT_STRING
 3

	)

105 
	#V_ASN1_OCTET_STRING
 4

	)

106 
	#V_ASN1_NULL
 5

	)

107 
	#V_ASN1_OBJECT
 6

	)

108 
	#V_ASN1_OBJECT_DESCRIPTOR
 7

	)

109 
	#V_ASN1_EXTERNAL
 8

	)

110 
	#V_ASN1_REAL
 9

	)

111 
	#V_ASN1_ENUMERATED
 10

	)

112 
	#V_ASN1_UTF8STRING
 12

	)

113 
	#V_ASN1_SEQUENCE
 16

	)

114 
	#V_ASN1_SET
 17

	)

115 
	#V_ASN1_NUMERICSTRING
 18

	)

116 
	#V_ASN1_PRINTABLESTRING
 19

	)

117 
	#V_ASN1_T61STRING
 20

	)

118 
	#V_ASN1_TELETEXSTRING
 20

	)

119 
	#V_ASN1_VIDEOTEXSTRING
 21

	)

120 
	#V_ASN1_IA5STRING
 22

	)

121 
	#V_ASN1_UTCTIME
 23

	)

122 
	#V_ASN1_GENERALIZEDTIME
 24

	)

123 
	#V_ASN1_GRAPHICSTRING
 25

	)

124 
	#V_ASN1_ISO64STRING
 26

	)

125 
	#V_ASN1_VISIBLESTRING
 26

	)

126 
	#V_ASN1_GENERALSTRING
 27

	)

127 
	#V_ASN1_UNIVERSALSTRING
 28

	)

128 
	#V_ASN1_BMPSTRING
 30

	)

136 
	#V_ASN1_NEG
 0x100

	)

137 
	#V_ASN1_NEG_INTEGER
 (2 | 
V_ASN1_NEG
)

	)

138 
	#V_ASN1_NEG_ENUMERATED
 (10 | 
V_ASN1_NEG
)

	)

141 
	#B_ASN1_NUMERICSTRING
 0x0001

	)

142 
	#B_ASN1_PRINTABLESTRING
 0x0002

	)

143 
	#B_ASN1_T61STRING
 0x0004

	)

144 
	#B_ASN1_TELETEXSTRING
 0x0004

	)

145 
	#B_ASN1_VIDEOTEXSTRING
 0x0008

	)

146 
	#B_ASN1_IA5STRING
 0x0010

	)

147 
	#B_ASN1_GRAPHICSTRING
 0x0020

	)

148 
	#B_ASN1_ISO64STRING
 0x0040

	)

149 
	#B_ASN1_VISIBLESTRING
 0x0040

	)

150 
	#B_ASN1_GENERALSTRING
 0x0080

	)

151 
	#B_ASN1_UNIVERSALSTRING
 0x0100

	)

152 
	#B_ASN1_OCTET_STRING
 0x0200

	)

153 
	#B_ASN1_BIT_STRING
 0x0400

	)

154 
	#B_ASN1_BMPSTRING
 0x0800

	)

155 
	#B_ASN1_UNKNOWN
 0x1000

	)

156 
	#B_ASN1_UTF8STRING
 0x2000

	)

157 
	#B_ASN1_UTCTIME
 0x4000

	)

158 
	#B_ASN1_GENERALIZEDTIME
 0x8000

	)

159 
	#B_ASN1_SEQUENCE
 0x10000

	)

162 
	#MBSTRING_FLAG
 0x1000

	)

163 
	#MBSTRING_UTF8
 (
MBSTRING_FLAG
)

	)

164 
	#MBSTRING_ASC
 (
MBSTRING_FLAG
|1)

	)

165 
	#MBSTRING_BMP
 (
MBSTRING_FLAG
|2)

	)

166 
	#MBSTRING_UNIV
 (
MBSTRING_FLAG
|4)

	)

168 
	#SMIME_OLDMIME
 0x400

	)

169 
	#SMIME_CRLFEOL
 0x800

	)

170 
	#SMIME_STREAM
 0x1000

	)

172 
X509_Æg‹_°
;

173 
DECLARE_STACK_OF
(
X509_ALGOR
)

175 
	#DECLARE_ASN1_SET_OF
(
ty≥
Ë

	)

176 
	#IMPLEMENT_ASN1_SET_OF
(
ty≥
Ë

	)

182 
	sa¢1_˘x_°


184 *
p
;

185 
eos
;

186 
îr‹
;

187 
öf
;

188 
èg
;

189 
x˛ass
;

190 
¶í
;

191 *
max
;

192 *
q
;

193 **
µ
;

194 
löe
;

195 } 
	tASN1_CTX
;

197 
	sa¢1_c⁄°_˘x_°


199 c⁄° *
p
;

200 
eos
;

201 
îr‹
;

202 
öf
;

203 
èg
;

204 
x˛ass
;

205 
¶í
;

206 c⁄° *
max
;

207 c⁄° *
q
;

208 c⁄° **
µ
;

209 
löe
;

210 } 
	tASN1_c⁄°_CTX
;

214 
	#ASN1_OBJECT_FLAG_DYNAMIC
 0x01

	)

215 
	#ASN1_OBJECT_FLAG_CRITICAL
 0x02

	)

216 
	#ASN1_OBJECT_FLAG_DYNAMIC_STRINGS
 0x04

	)

217 
	#ASN1_OBJECT_FLAG_DYNAMIC_DATA
 0x08

	)

218 
	sa¢1_obje˘_°


220 c⁄° *
¢
,*
 
;

221 
nid
;

222 
Àngth
;

223 c⁄° *
d©a
;

224 
Êags
;

225 } 
	tASN1_OBJECT
;

227 
	#ASN1_STRING_FLAG_BITS_LEFT
 0x08

	)

232 
	#ASN1_STRING_FLAG_NDEF
 0x010

	)

239 
	#ASN1_STRING_FLAG_CONT
 0x020

	)

243 
	#ASN1_STRING_FLAG_MSTRING
 0x040

	)

245 
	sa¢1_°rög_°


247 
Àngth
;

248 
ty≥
;

249 *
d©a
;

254 
Êags
;

262 
	sASN1_ENCODING_°


264 *
íc
;

265 
Àn
;

266 
modifõd
;

267 } 
	tASN1_ENCODING
;

270 
	#ASN1_LONG_UNDEF
 0x7fffffffL

	)

272 
	#STABLE_FLAGS_MALLOC
 0x01

	)

273 
	#STABLE_NO_MASK
 0x02

	)

274 
	#DIRSTRING_TYPE
 \

275 (
B_ASN1_PRINTABLESTRING
|
B_ASN1_T61STRING
|
B_ASN1_BMPSTRING
|
B_ASN1_UTF8STRING
)

	)

276 
	#PKCS9STRING_TYPE
 (
DIRSTRING_TYPE
|
B_ASN1_IA5STRING
)

	)

278 
	sa¢1_°rög_èbÀ_°
 {

279 
nid
;

280 
mösize
;

281 
maxsize
;

282 
mask
;

283 
Êags
;

284 } 
	tASN1_STRING_TABLE
;

286 
DECLARE_STACK_OF
(
ASN1_STRING_TABLE
)

290 
	#ub_«me
 32768

	)

291 
	#ub_comm⁄_«me
 64

	)

292 
	#ub_loˇlôy_«me
 128

	)

293 
	#ub_°©e_«me
 128

	)

294 
	#ub_‹g™iz©i⁄_«me
 64

	)

295 
	#ub_‹g™iz©i⁄_unô_«me
 64

	)

296 
	#ub_tôÀ
 64

	)

297 
	#ub_emaû_addªss
 128

	)

302 
ASN1_TEMPLATE_°
 
	tASN1_TEMPLATE
;

303 
ASN1_TLC_°
 
	tASN1_TLC
;

305 
ASN1_VALUE_°
 
	tASN1_VALUE
;

309 
	#DECLARE_ASN1_FUNCTIONS
(
ty≥
Ë
	`DECLARE_ASN1_FUNCTIONS_«me
—y≥,Åy≥)

	)

311 
	#DECLARE_ASN1_ALLOC_FUNCTIONS
(
ty≥
) \

312 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
,Åy≥)

	)

314 
	#DECLARE_ASN1_FUNCTIONS_«me
(
ty≥
, 
«me
) \

315 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

316 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
«me
,Çame)

	)

318 
	#DECLARE_ASN1_FUNCTIONS_‚ame
(
ty≥
, 
ô«me
, 
«me
) \

319 
	`DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

320 
	`DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
)

	)

322 
	#DECLARE_ASN1_ENCODE_FUNCTIONS
(
ty≥
, 
ô«me
, 
«me
) \

323 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

324 
i2d_
##
	`«me
(
ty≥
 *
a
, **
out
); \

325 
	`DECLARE_ASN1_ITEM
(
ô«me
)

	)

327 
	#DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ty≥
, 
«me
) \

328 
ty≥
 *
d2i_
##
	`«me
—y≥ **
a
, c⁄° **
ö
, 
Àn
); \

329 
i2d_
##
	`«me
(c⁄° 
ty≥
 *
a
, **
out
); \

330 
	`DECLARE_ASN1_ITEM
(
«me
)

	)

332 
	#DECLARE_ASN1_NDEF_FUNCTION
(
«me
) \

333 
i2d_
##
«me
##
	`_NDEF
“amê*
a
, **
out
);

	)

335 
	#DECLARE_ASN1_FUNCTIONS_c⁄°
(
«me
) \

336 
	`DECLARE_ASN1_ALLOC_FUNCTIONS
(
«me
) \

337 
	`DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
«me
,Çame)

	)

339 
	#DECLARE_ASN1_ALLOC_FUNCTIONS_«me
(
ty≥
, 
«me
) \

340 
ty≥
 *
«me
##
	`_√w
(); \

341 
«me
##
	`_‰ì
(
ty≥
 *
a
);

	)

343 
	#DECLARE_ASN1_PRINT_FUNCTION
(
°«me
) \

344 
	`DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, säame)

	)

346 
	#DECLARE_ASN1_PRINT_FUNCTION_‚ame
(
°«me
, 
‚ame
) \

347 
‚ame
##
	`_¥öt_˘x
(
BIO
 *
out
, 
°«me
 *
x
, 
ödít
, \

348 c⁄° 
ASN1_PCTX
 *
p˘x
);

	)

350 
	#D2I_OF
(
ty≥
Ëty≥ *(*)—y≥ **,c⁄° **,)

	)

351 
	#I2D_OF
(
ty≥
Ë(*)—y≥ *,**)

	)

352 
	#I2D_OF_c⁄°
(
ty≥
Ë(*)(c⁄°Åy≥ *,**)

	)

354 
	#CHECKED_D2I_OF
(
ty≥
, 
d2i
) \

355 ((
d2i_of_void
*Ë(1 ? 
d2i
 : ((
	`D2I_OF
(
ty≥
))0)))

	)

356 
	#CHECKED_I2D_OF
(
ty≥
, 
i2d
) \

357 ((
i2d_of_void
*Ë(1 ? 
i2d
 : ((
	`I2D_OF
(
ty≥
))0)))

	)

358 
	#CHECKED_NEW_OF
(
ty≥
, 
x√w
) \

359 ((*(*)()Ë(1 ? 
x√w
 : ((
ty≥
 *(*)())0)))

	)

360 
	#CHECKED_PTR_OF
(
ty≥
, 
p
) \

361 ((*Ë(1 ? 
p
 : (
ty≥
*)0))

	)

362 
	#CHECKED_PPTR_OF
(
ty≥
, 
p
) \

363 ((**Ë(1 ? 
p
 : (
ty≥
**)0))

	)

365 
	#TYPEDEF_D2I_OF
(
ty≥
Ëty≥ *
	td2i_of_
##
	tty≥
—y≥ **,c⁄° **,)

	)

366 
	tTYPEDEF_I2D_OF
(
	tty≥
Ë
	ti2d_of_
##ty≥—y≥ *,**)

	)

367 
	tTYPEDEF_D2I2D_OF
(
	tty≥
Ë
	tTYPEDEF_D2I_OF
—y≥); 
	`TYPEDEF_I2D_OF
(
ty≥
)

	)

369 
TYPEDEF_D2I2D_OF
();

406 #i‚de‡
OPENSSL_EXPORT_VAR_AS_FUNCTION


409 c⁄° 
	tASN1_ITEM
 
	tASN1_ITEM_EXP
;

412 
	#ASN1_ITEM_±r
(
ùå
Ë(ùå)

	)

415 
	#ASN1_ITEM_ªf
(
ùå
Ë(&(ùå##
_ô
))

	)

417 
	#ASN1_ITEM_Ωå
(
ªf
Ë(&‘ef##
_ô
))

	)

419 
	#DECLARE_ASN1_ITEM
(
«me
) \

420 
OPENSSL_EXTERN
 c⁄° 
ASN1_ITEM
 
«me
##
_ô
;

	)

429 c⁄° 
	tASN1_ITEM
 * 
	tASN1_ITEM_EXP
();

432 
	#ASN1_ITEM_±r
(
ùå
Ë(
	`ùå
())

	)

435 
	#ASN1_ITEM_ªf
(
ùå
Ë(ùå##
_ô
)

	)

437 
	#ASN1_ITEM_Ωå
(
ªf
Ë‘ef##
	`_ô
())

	)

439 
	#DECLARE_ASN1_ITEM
(
«me
) \

440 c⁄° 
ASN1_ITEM
 * 
«me
##
	`_ô
();

	)

451 
	#ASN1_STRFLGS_ESC_2253
 1

	)

452 
	#ASN1_STRFLGS_ESC_CTRL
 2

	)

453 
	#ASN1_STRFLGS_ESC_MSB
 4

	)

461 
	#ASN1_STRFLGS_ESC_QUOTE
 8

	)

467 
	#CHARTYPE_PRINTABLESTRING
 0x10

	)

469 
	#CHARTYPE_FIRST_ESC_2253
 0x20

	)

471 
	#CHARTYPE_LAST_ESC_2253
 0x40

	)

481 
	#ASN1_STRFLGS_UTF8_CONVERT
 0x10

	)

488 
	#ASN1_STRFLGS_IGNORE_TYPE
 0x20

	)

491 
	#ASN1_STRFLGS_SHOW_TYPE
 0x40

	)

501 
	#ASN1_STRFLGS_DUMP_ALL
 0x80

	)

502 
	#ASN1_STRFLGS_DUMP_UNKNOWN
 0x100

	)

509 
	#ASN1_STRFLGS_DUMP_DER
 0x200

	)

516 
	#ASN1_STRFLGS_RFC2253
 (
ASN1_STRFLGS_ESC_2253
 | \

517 
ASN1_STRFLGS_ESC_CTRL
 | \

518 
ASN1_STRFLGS_ESC_MSB
 | \

519 
ASN1_STRFLGS_UTF8_CONVERT
 | \

520 
ASN1_STRFLGS_DUMP_UNKNOWN
 | \

521 
ASN1_STRFLGS_DUMP_DER
)

	)

523 
DECLARE_STACK_OF
(
ASN1_INTEGER
)

524 
DECLARE_ASN1_SET_OF
(
ASN1_INTEGER
)

526 
DECLARE_STACK_OF
(
ASN1_GENERALSTRING
)

528 
	sa¢1_ty≥_°


530 
ty≥
;

532 *
±r
;

533 
ASN1_BOOLEAN
 
boﬁón
;

534 
ASN1_STRING
 * 
a¢1_°rög
;

535 
ASN1_OBJECT
 * 
obje˘
;

536 
ASN1_INTEGER
 * 
öãgî
;

537 
ASN1_ENUMERATED
 * 
íumî©ed
;

538 
ASN1_BIT_STRING
 * 
bô_°rög
;

539 
ASN1_OCTET_STRING
 * 
o˘ë_°rög
;

540 
ASN1_PRINTABLESTRING
 * 
¥öèbÀ°rög
;

541 
ASN1_T61STRING
 * 
t61°rög
;

542 
ASN1_IA5STRING
 * 
ü5°rög
;

543 
ASN1_GENERALSTRING
 * 
gíîÆ°rög
;

544 
ASN1_BMPSTRING
 * 
bmp°rög
;

545 
ASN1_UNIVERSALSTRING
 * 
univîßl°rög
;

546 
ASN1_UTCTIME
 * 
ut˘ime
;

547 
ASN1_GENERALIZEDTIME
 * 
gíîÆizedtime
;

548 
ASN1_VISIBLESTRING
 * 
visibÀ°rög
;

549 
ASN1_UTF8STRING
 * 
utf8°rög
;

552 
ASN1_STRING
 * 
£t
;

553 
ASN1_STRING
 * 
£quí˚
;

554 
ASN1_VALUE
 * 
a¢1_vÆue
;

555 } 
vÆue
;

556 } 
	tASN1_TYPE
;

558 
DECLARE_STACK_OF
(
ASN1_TYPE
)

559 
DECLARE_ASN1_SET_OF
(
ASN1_TYPE
)

561 
STACK_OF
(
	tASN1_TYPE
Ë
	tASN1_SEQUENCE_ANY
;

563 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, ASN1_SEQUENCE_ANY)

564 
DECLARE_ASN1_ENCODE_FUNCTIONS_c⁄°
(
ASN1_SEQUENCE_ANY
, 
ASN1_SET_ANY
)

566 
	sNETSCAPE_X509_°


568 
ASN1_OCTET_STRING
 *
hódî
;

569 
X509
 *
˚π
;

570 } 
	tNETSCAPE_X509
;

573 
	sBIT_STRING_BITNAME_°
 {

574 
bônum
;

575 c⁄° *
 ame
;

576 c⁄° *
¢ame
;

577 } 
	tBIT_STRING_BITNAME
;

580 
	#M_ASN1_STRING_Àngth
(
x
Ë((x)->
Àngth
)

	)

581 
	#M_ASN1_STRING_Àngth_£t
(
x
, 
n
Ë((x)->
Àngth
 = (n))

	)

582 
	#M_ASN1_STRING_ty≥
(
x
Ë((x)->
ty≥
)

	)

583 
	#M_ASN1_STRING_d©a
(
x
Ë((x)->
d©a
)

	)

586 
	#M_ASN1_BIT_STRING_√w
(Ë(
ASN1_BIT_STRING
 *)\

587 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BIT_STRING
)

	)

588 
	#M_ASN1_BIT_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

589 
	#M_ASN1_BIT_STRING_dup
(
a
Ë(
ASN1_BIT_STRING
 *)\

590 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

591 
	#M_ASN1_BIT_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

592 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

593 
	#M_ASN1_BIT_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

595 
	#M_ASN1_INTEGER_√w
(Ë(
ASN1_INTEGER
 *)\

596 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_INTEGER
)

	)

597 
	#M_ASN1_INTEGER_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

598 
	#M_ASN1_INTEGER_dup
(
a
Ë(
ASN1_INTEGER
 *)\

599 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

600 
	#M_ASN1_INTEGER_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

601 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

603 
	#M_ASN1_ENUMERATED_√w
(Ë(
ASN1_ENUMERATED
 *)\

604 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_ENUMERATED
)

	)

605 
	#M_ASN1_ENUMERATED_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

606 
	#M_ASN1_ENUMERATED_dup
(
a
Ë(
ASN1_ENUMERATED
 *)\

607 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

608 
	#M_ASN1_ENUMERATED_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

609 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

611 
	#M_ASN1_OCTET_STRING_√w
(Ë(
ASN1_OCTET_STRING
 *)\

612 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_OCTET_STRING
)

	)

613 
	#M_ASN1_OCTET_STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

614 
	#M_ASN1_OCTET_STRING_dup
(
a
Ë(
ASN1_OCTET_STRING
 *)\

615 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

616 
	#M_ASN1_OCTET_STRING_cmp
(
a
,
b
Ë
	`ASN1_STRING_cmp
(\

617 (c⁄° 
ASN1_STRING
 *)
a
,(c⁄° ASN1_STRING *)
b
)

	)

618 
	#M_ASN1_OCTET_STRING_£t
(
a
,
b
,
c
Ë
	`ASN1_STRING_£t
((
ASN1_STRING
 *Ô,b,c)

	)

619 
	#M_ASN1_OCTET_STRING_¥öt
(
a
,
b
Ë
	`ASN1_STRING_¥öt
◊,(
ASN1_STRING
 *)b)

	)

620 
	#M_i2d_ASN1_OCTET_STRING
(
a
,
µ
) \

621 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_OCTET_STRING
,\

622 
V_ASN1_UNIVERSAL
)

	)

624 
	#B_ASN1_TIME
 \

625 
B_ASN1_UTCTIME
 | \

626 
B_ASN1_GENERALIZEDTIME


	)

628 
	#B_ASN1_PRINTABLE
 \

629 
B_ASN1_NUMERICSTRING
| \

630 
B_ASN1_PRINTABLESTRING
| \

631 
B_ASN1_T61STRING
| \

632 
B_ASN1_IA5STRING
| \

633 
B_ASN1_BIT_STRING
| \

634 
B_ASN1_UNIVERSALSTRING
|\

635 
B_ASN1_BMPSTRING
|\

636 
B_ASN1_UTF8STRING
|\

637 
B_ASN1_SEQUENCE
|\

638 
B_ASN1_UNKNOWN


	)

640 
	#B_ASN1_DIRECTORYSTRING
 \

641 
B_ASN1_PRINTABLESTRING
| \

642 
B_ASN1_TELETEXSTRING
|\

643 
B_ASN1_BMPSTRING
|\

644 
B_ASN1_UNIVERSALSTRING
|\

645 
B_ASN1_UTF8STRING


	)

647 
	#B_ASN1_DISPLAYTEXT
 \

648 
B_ASN1_IA5STRING
| \

649 
B_ASN1_VISIBLESTRING
| \

650 
B_ASN1_BMPSTRING
|\

651 
B_ASN1_UTF8STRING


	)

653 
	#M_ASN1_PRINTABLE_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

654 
	#M_ASN1_PRINTABLE_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

655 
	#M_i2d_ASN1_PRINTABLE
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

656 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

657 
	#M_d2i_ASN1_PRINTABLE
(
a
,
µ
,
l
) \

658 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

659 
B_ASN1_PRINTABLE
)

	)

661 
	#M_DIRECTORYSTRING_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

662 
	#M_DIRECTORYSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

663 
	#M_i2d_DIRECTORYSTRING
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

664 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

665 
	#M_d2i_DIRECTORYSTRING
(
a
,
µ
,
l
) \

666 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

667 
B_ASN1_DIRECTORYSTRING
)

	)

669 
	#M_DISPLAYTEXT_√w
(Ë
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

670 
	#M_DISPLAYTEXT_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

671 
	#M_i2d_DISPLAYTEXT
(
a
,
µ
Ë
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)a,\

672 
µ
,
a
->
ty≥
,
V_ASN1_UNIVERSAL
)

	)

673 
	#M_d2i_DISPLAYTEXT
(
a
,
µ
,
l
) \

674 
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
, \

675 
B_ASN1_DISPLAYTEXT
)

	)

677 
	#M_ASN1_PRINTABLESTRING_√w
(Ë(
ASN1_PRINTABLESTRING
 *)\

678 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_PRINTABLESTRING
)

	)

679 
	#M_ASN1_PRINTABLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

680 
	#M_i2d_ASN1_PRINTABLESTRING
(
a
,
µ
) \

681 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_PRINTABLESTRING
,\

682 
V_ASN1_UNIVERSAL
)

	)

683 
	#M_d2i_ASN1_PRINTABLESTRING
(
a
,
µ
,
l
) \

684 (
ASN1_PRINTABLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

685 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_PRINTABLESTRING
)

	)

687 
	#M_ASN1_T61STRING_√w
(Ë(
ASN1_T61STRING
 *)\

688 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_T61STRING
)

	)

689 
	#M_ASN1_T61STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

690 
	#M_i2d_ASN1_T61STRING
(
a
,
µ
) \

691 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_T61STRING
,\

692 
V_ASN1_UNIVERSAL
)

	)

693 
	#M_d2i_ASN1_T61STRING
(
a
,
µ
,
l
) \

694 (
ASN1_T61STRING
 *)
d2i_ASN1_ty≥_byãs
\

695 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_T61STRING
)

	)

697 
	#M_ASN1_IA5STRING_√w
(Ë(
ASN1_IA5STRING
 *)\

698 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_IA5STRING
)

	)

699 
	#M_ASN1_IA5STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

700 
	#M_ASN1_IA5STRING_dup
(
a
) \

701 (
ASN1_IA5STRING
 *)
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

702 
	#M_i2d_ASN1_IA5STRING
(
a
,
µ
) \

703 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_IA5STRING
,\

704 
V_ASN1_UNIVERSAL
)

	)

705 
	#M_d2i_ASN1_IA5STRING
(
a
,
µ
,
l
) \

706 (
ASN1_IA5STRING
 *)
	`d2i_ASN1_ty≥_byãs
((
ASN1_STRING
 **)
a
,
µ
,
l
,\

707 
B_ASN1_IA5STRING
)

	)

709 
	#M_ASN1_UTCTIME_√w
(Ë(
ASN1_UTCTIME
 *)\

710 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

711 
	#M_ASN1_UTCTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

712 
	#M_ASN1_UTCTIME_dup
(
a
Ë(
ASN1_UTCTIME
 *)\

713 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

715 
	#M_ASN1_GENERALIZEDTIME_√w
(Ë(
ASN1_GENERALIZEDTIME
 *)\

716 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALIZEDTIME
)

	)

717 
	#M_ASN1_GENERALIZEDTIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

718 
	#M_ASN1_GENERALIZEDTIME_dup
(
a
Ë(
ASN1_GENERALIZEDTIME
 *)
	`ASN1_STRING_dup
(\

719 (c⁄° 
ASN1_STRING
 *)
a
)

	)

721 
	#M_ASN1_TIME_√w
(Ë(
ASN1_TIME
 *)\

722 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTCTIME
)

	)

723 
	#M_ASN1_TIME_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

724 
	#M_ASN1_TIME_dup
(
a
Ë(
ASN1_TIME
 *)\

725 
	`ASN1_STRING_dup
((c⁄° 
ASN1_STRING
 *)
a
)

	)

727 
	#M_ASN1_GENERALSTRING_√w
(Ë(
ASN1_GENERALSTRING
 *)\

728 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_GENERALSTRING
)

	)

729 
	#M_ASN1_GENERALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

730 
	#M_i2d_ASN1_GENERALSTRING
(
a
,
µ
) \

731 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_GENERALSTRING
,\

732 
V_ASN1_UNIVERSAL
)

	)

733 
	#M_d2i_ASN1_GENERALSTRING
(
a
,
µ
,
l
) \

734 (
ASN1_GENERALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

735 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_GENERALSTRING
)

	)

737 
	#M_ASN1_UNIVERSALSTRING_√w
(Ë(
ASN1_UNIVERSALSTRING
 *)\

738 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UNIVERSALSTRING
)

	)

739 
	#M_ASN1_UNIVERSALSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

740 
	#M_i2d_ASN1_UNIVERSALSTRING
(
a
,
µ
) \

741 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UNIVERSALSTRING
,\

742 
V_ASN1_UNIVERSAL
)

	)

743 
	#M_d2i_ASN1_UNIVERSALSTRING
(
a
,
µ
,
l
) \

744 (
ASN1_UNIVERSALSTRING
 *)
d2i_ASN1_ty≥_byãs
\

745 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UNIVERSALSTRING
)

	)

747 
	#M_ASN1_BMPSTRING_√w
(Ë(
ASN1_BMPSTRING
 *)\

748 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_BMPSTRING
)

	)

749 
	#M_ASN1_BMPSTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

750 
	#M_i2d_ASN1_BMPSTRING
(
a
,
µ
) \

751 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_BMPSTRING
,\

752 
V_ASN1_UNIVERSAL
)

	)

753 
	#M_d2i_ASN1_BMPSTRING
(
a
,
µ
,
l
) \

754 (
ASN1_BMPSTRING
 *)
d2i_ASN1_ty≥_byãs
\

755 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_BMPSTRING
)

	)

757 
	#M_ASN1_VISIBLESTRING_√w
(Ë(
ASN1_VISIBLESTRING
 *)\

758 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_VISIBLESTRING
)

	)

759 
	#M_ASN1_VISIBLESTRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

760 
	#M_i2d_ASN1_VISIBLESTRING
(
a
,
µ
) \

761 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_VISIBLESTRING
,\

762 
V_ASN1_UNIVERSAL
)

	)

763 
	#M_d2i_ASN1_VISIBLESTRING
(
a
,
µ
,
l
) \

764 (
ASN1_VISIBLESTRING
 *)
d2i_ASN1_ty≥_byãs
\

765 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_VISIBLESTRING
)

	)

767 
	#M_ASN1_UTF8STRING_√w
(Ë(
ASN1_UTF8STRING
 *)\

768 
	`ASN1_STRING_ty≥_√w
(
V_ASN1_UTF8STRING
)

	)

769 
	#M_ASN1_UTF8STRING_‰ì
(
a
Ë
	`ASN1_STRING_‰ì
((
ASN1_STRING
 *Ô)

	)

770 
	#M_i2d_ASN1_UTF8STRING
(
a
,
µ
) \

771 
	`i2d_ASN1_byãs
((
ASN1_STRING
 *)
a
,
µ
,
V_ASN1_UTF8STRING
,\

772 
V_ASN1_UNIVERSAL
)

	)

773 
	#M_d2i_ASN1_UTF8STRING
(
a
,
µ
,
l
) \

774 (
ASN1_UTF8STRING
 *)
d2i_ASN1_ty≥_byãs
\

775 ((
ASN1_STRING
 **)
a
,
µ
,
l
,
B_ASN1_UTF8STRING
)

	)

778 
	#IS_SEQUENCE
 0

	)

779 
	#IS_SET
 1

	)

781 
DECLARE_ASN1_FUNCTIONS_‚ame
(
ASN1_TYPE
, 
ASN1_ANY
, ASN1_TYPE)

783 
ASN1_TYPE_gë
(
ASN1_TYPE
 *
a
);

784 
ASN1_TYPE_£t
(
ASN1_TYPE
 *
a
, 
ty≥
, *
vÆue
);

785 
ASN1_TYPE_£t1
(
ASN1_TYPE
 *
a
, 
ty≥
, c⁄° *
vÆue
);

786 
ASN1_TYPE_cmp
(c⁄° 
ASN1_TYPE
 *
a
, c⁄° ASN1_TYPE *
b
);

788 
ASN1_OBJECT
 * 
ASN1_OBJECT_√w
();

789 
ASN1_OBJECT_‰ì
(
ASN1_OBJECT
 *
a
);

790 
i2d_ASN1_OBJECT
(
ASN1_OBJECT
 *
a
,**
µ
);

791 
ASN1_OBJECT
 * 
c2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

792 
Àngth
);

793 
ASN1_OBJECT
 * 
d2i_ASN1_OBJECT
(ASN1_OBJECT **
a
,c⁄° **
µ
,

794 
Àngth
);

796 
DECLARE_ASN1_ITEM
(
ASN1_OBJECT
)

798 
DECLARE_STACK_OF
(
ASN1_OBJECT
)

799 
DECLARE_ASN1_SET_OF
(
ASN1_OBJECT
)

801 
ASN1_STRING
 * 
ASN1_STRING_√w
();

802 
ASN1_STRING_‰ì
(
ASN1_STRING
 *
a
);

803 
ASN1_STRING_c›y
(
ASN1_STRING
 *
d°
, c⁄° ASN1_STRING *
°r
);

804 
ASN1_STRING
 * 
ASN1_STRING_dup
(c⁄° ASN1_STRING *
a
);

805 
ASN1_STRING
 * 
ASN1_STRING_ty≥_√w
(
ty≥
 );

806 
ASN1_STRING_cmp
(c⁄° 
ASN1_STRING
 *
a
, c⁄° ASN1_STRING *
b
);

809 
ASN1_STRING_£t
(
ASN1_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

810 
ASN1_STRING_£t0
(
ASN1_STRING
 *
°r
, *
d©a
, 
Àn
);

811 
ASN1_STRING_Àngth
(c⁄° 
ASN1_STRING
 *
x
);

812 
ASN1_STRING_Àngth_£t
(
ASN1_STRING
 *
x
, 
n
);

813 
ASN1_STRING_ty≥
(
ASN1_STRING
 *
x
);

814 * 
ASN1_STRING_d©a
(
ASN1_STRING
 *
x
);

816 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BIT_STRING
)

817 
i2c_ASN1_BIT_STRING
(
ASN1_BIT_STRING
 *
a
,**
µ
);

818 
ASN1_BIT_STRING
 *
c2i_ASN1_BIT_STRING
(ASN1_BIT_STRING **
a
,c⁄° **
µ
,

819 
Àngth
);

820 
ASN1_BIT_STRING_£t
(
ASN1_BIT_STRING
 *
a
, *
d
,

821 
Àngth
 );

822 
ASN1_BIT_STRING_£t_bô
(
ASN1_BIT_STRING
 *
a
, 
n
, 
vÆue
);

823 
ASN1_BIT_STRING_gë_bô
(
ASN1_BIT_STRING
 *
a
, 
n
);

824 
ASN1_BIT_STRING_check
(
ASN1_BIT_STRING
 *
a
,

825 *
Êags
, 
Êags_Àn
);

827 #i‚de‡
OPENSSL_NO_BIO


828 
ASN1_BIT_STRING_«me_¥öt
(
BIO
 *
out
, 
ASN1_BIT_STRING
 *
bs
,

829 
BIT_STRING_BITNAME
 *
tbl
, 
ödít
);

831 
ASN1_BIT_STRING_num_asc
(*
«me
, 
BIT_STRING_BITNAME
 *
tbl
);

832 
ASN1_BIT_STRING_£t_asc
(
ASN1_BIT_STRING
 *
bs
, *
«me
, 
vÆue
,

833 
BIT_STRING_BITNAME
 *
tbl
);

835 
i2d_ASN1_BOOLEAN
(
a
,**
µ
);

836 
d2i_ASN1_BOOLEAN
(*
a
,c⁄° **
µ
,
Àngth
);

838 
DECLARE_ASN1_FUNCTIONS
(
ASN1_INTEGER
)

839 
i2c_ASN1_INTEGER
(
ASN1_INTEGER
 *
a
,**
µ
);

840 
ASN1_INTEGER
 *
c2i_ASN1_INTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

841 
Àngth
);

842 
ASN1_INTEGER
 *
d2i_ASN1_UINTEGER
(ASN1_INTEGER **
a
,c⁄° **
µ
,

843 
Àngth
);

844 
ASN1_INTEGER
 * 
ASN1_INTEGER_dup
(c⁄° ASN1_INTEGER *
x
);

845 
ASN1_INTEGER_cmp
(c⁄° 
ASN1_INTEGER
 *
x
, c⁄° ASN1_INTEGER *
y
);

847 
DECLARE_ASN1_FUNCTIONS
(
ASN1_ENUMERATED
)

849 
ASN1_UTCTIME_check
(
ASN1_UTCTIME
 *
a
);

850 
ASN1_UTCTIME
 *
ASN1_UTCTIME_£t
(ASN1_UTCTIME *
s
,
time_t
 
t
);

851 
ASN1_UTCTIME
 *
ASN1_UTCTIME_adj
(ASN1_UTCTIME *
s
, 
time_t
 
t
,

852 
off£t_day
, 
off£t_£c
);

853 
ASN1_UTCTIME_£t_°rög
(
ASN1_UTCTIME
 *
s
, c⁄° *
°r
);

854 
ASN1_UTCTIME_cmp_time_t
(c⁄° 
ASN1_UTCTIME
 *
s
, 
time_t
 
t
);

856 
time_t
 
ASN1_UTCTIME_gë
(c⁄° 
ASN1_UTCTIME
 *
s
);

859 
ASN1_GENERALIZEDTIME_check
(
ASN1_GENERALIZEDTIME
 *
a
);

860 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_£t
(ASN1_GENERALIZEDTIME *
s
,
time_t
 
t
);

861 
ASN1_GENERALIZEDTIME
 *
ASN1_GENERALIZEDTIME_adj
(ASN1_GENERALIZEDTIME *
s
,

862 
time_t
 
t
, 
off£t_day
, 
off£t_£c
);

863 
ASN1_GENERALIZEDTIME_£t_°rög
(
ASN1_GENERALIZEDTIME
 *
s
, c⁄° *
°r
);

865 
DECLARE_ASN1_FUNCTIONS
(
ASN1_OCTET_STRING
)

866 
ASN1_OCTET_STRING
 * 
ASN1_OCTET_STRING_dup
(c⁄° ASN1_OCTET_STRING *
a
);

867 
ASN1_OCTET_STRING_cmp
(c⁄° 
ASN1_OCTET_STRING
 *
a
, c⁄° ASN1_OCTET_STRING *
b
);

868 
ASN1_OCTET_STRING_£t
(
ASN1_OCTET_STRING
 *
°r
, c⁄° *
d©a
, 
Àn
);

870 
DECLARE_ASN1_FUNCTIONS
(
ASN1_VISIBLESTRING
)

871 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UNIVERSALSTRING
)

872 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTF8STRING
)

873 
DECLARE_ASN1_FUNCTIONS
(
ASN1_NULL
)

874 
DECLARE_ASN1_FUNCTIONS
(
ASN1_BMPSTRING
)

876 
UTF8_gëc
(c⁄° *
°r
, 
Àn
, *
vÆ
);

877 
UTF8_putc
(*
°r
, 
Àn
, 
vÆue
);

879 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
ASN1_PRINTABLE
)

881 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DIRECTORYSTRING
)

882 
DECLARE_ASN1_FUNCTIONS_«me
(
ASN1_STRING
, 
DISPLAYTEXT
)

883 
DECLARE_ASN1_FUNCTIONS
(
ASN1_PRINTABLESTRING
)

884 
DECLARE_ASN1_FUNCTIONS
(
ASN1_T61STRING
)

885 
DECLARE_ASN1_FUNCTIONS
(
ASN1_IA5STRING
)

886 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALSTRING
)

887 
DECLARE_ASN1_FUNCTIONS
(
ASN1_UTCTIME
)

888 
DECLARE_ASN1_FUNCTIONS
(
ASN1_GENERALIZEDTIME
)

889 
DECLARE_ASN1_FUNCTIONS
(
ASN1_TIME
)

891 
DECLARE_ASN1_ITEM
(
ASN1_OCTET_STRING_NDEF
)

893 
ASN1_TIME
 *
ASN1_TIME_£t
(ASN1_TIME *
s
,
time_t
 
t
);

894 
ASN1_TIME
 *
ASN1_TIME_adj
(ASN1_TIME *
s
,
time_t
 
t
,

895 
off£t_day
, 
off£t_£c
);

896 
ASN1_TIME_check
(
ASN1_TIME
 *
t
);

897 
ASN1_GENERALIZEDTIME
 *
ASN1_TIME_to_gíîÆizedtime
(
ASN1_TIME
 *
t
, ASN1_GENERALIZEDTIME **
out
);

898 
ASN1_TIME_£t_°rög
(
ASN1_TIME
 *
s
, c⁄° *
°r
);

900 
i2d_ASN1_SET
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
a
, **
µ
,

901 
i2d_of_void
 *
i2d
, 
ex_èg
, 
ex_˛ass
,

902 
is_£t
);

903 
STACK_OF
(
OPENSSL_BLOCK
Ë*
d2i_ASN1_SET
(STACK_OF(OPENSSL_BLOCKË**
a
,

904 c⁄° **
µ
,

905 
Àngth
, 
d2i_of_void
 *
d2i
,

906 (*
‰ì_func
)(
OPENSSL_BLOCK
), 
ex_èg
,

907 
ex_˛ass
);

909 #i‚de‡
OPENSSL_NO_BIO


910 
i2a_ASN1_INTEGER
(
BIO
 *
bp
, 
ASN1_INTEGER
 *
a
);

911 
a2i_ASN1_INTEGER
(
BIO
 *
bp
,
ASN1_INTEGER
 *
bs
,*
buf
,
size
);

912 
i2a_ASN1_ENUMERATED
(
BIO
 *
bp
, 
ASN1_ENUMERATED
 *
a
);

913 
a2i_ASN1_ENUMERATED
(
BIO
 *
bp
,
ASN1_ENUMERATED
 *
bs
,*
buf
,
size
);

914 
i2a_ASN1_OBJECT
(
BIO
 *
bp
,
ASN1_OBJECT
 *
a
);

915 
a2i_ASN1_STRING
(
BIO
 *
bp
,
ASN1_STRING
 *
bs
,*
buf
,
size
);

916 
i2a_ASN1_STRING
(
BIO
 *
bp
, 
ASN1_STRING
 *
a
, 
ty≥
);

918 
i2t_ASN1_OBJECT
(*
buf
,
buf_Àn
,
ASN1_OBJECT
 *
a
);

920 
a2d_ASN1_OBJECT
(*
out
,
ﬁí
, c⁄° *
buf
, 
num
);

921 
ASN1_OBJECT
 *
ASN1_OBJECT_¸óã
(
nid
, *
d©a
,
Àn
,

922 c⁄° *
¢
, c⁄° *
 
);

924 
ASN1_INTEGER_£t
(
ASN1_INTEGER
 *
a
, 
v
);

925 
ASN1_INTEGER_gë
(c⁄° 
ASN1_INTEGER
 *
a
);

926 
ASN1_INTEGER
 *
BN_to_ASN1_INTEGER
(c⁄° 
BIGNUM
 *
bn
, ASN1_INTEGER *
ai
);

927 
BIGNUM
 *
ASN1_INTEGER_to_BN
(c⁄° 
ASN1_INTEGER
 *
ai
,BIGNUM *
bn
);

929 
ASN1_ENUMERATED_£t
(
ASN1_ENUMERATED
 *
a
, 
v
);

930 
ASN1_ENUMERATED_gë
(
ASN1_ENUMERATED
 *
a
);

931 
ASN1_ENUMERATED
 *
BN_to_ASN1_ENUMERATED
(
BIGNUM
 *
bn
, ASN1_ENUMERATED *
ai
);

932 
BIGNUM
 *
ASN1_ENUMERATED_to_BN
(
ASN1_ENUMERATED
 *
ai
,BIGNUM *
bn
);

936 
ASN1_PRINTABLE_ty≥
(c⁄° *
s
, 
max
);

938 
i2d_ASN1_byãs
(
ASN1_STRING
 *
a
, **
µ
, 
èg
, 
x˛ass
);

939 
ASN1_STRING
 *
d2i_ASN1_byãs
(ASN1_STRING **
a
, c⁄° **
µ
,

940 
Àngth
, 
Pèg
, 
P˛ass
);

941 
ASN1_èg2bô
(
èg
);

943 
ASN1_STRING
 *
d2i_ASN1_ty≥_byãs
(ASN1_STRING **
a
,c⁄° **
µ
,

944 
Àngth
,
ty≥
);

947 
a¢1_Föish
(
ASN1_CTX
 *
c
);

948 
a¢1_c⁄°_Föish
(
ASN1_c⁄°_CTX
 *
c
);

951 
ASN1_gë_obje˘
(c⁄° **
µ
, *
∂ígth
, *
±ag
,

952 *
p˛ass
, 
omax
);

953 
ASN1_check_öföôe_íd
(**
p
,
Àn
);

954 
ASN1_c⁄°_check_öföôe_íd
(c⁄° **
p
,
Àn
);

955 
ASN1_put_obje˘
(**
µ
, 
c⁄°ru˘ed
, 
Àngth
,

956 
èg
, 
x˛ass
);

957 
ASN1_put_eoc
(**
µ
);

958 
ASN1_obje˘_size
(
c⁄°ru˘ed
, 
Àngth
, 
èg
);

961 *
ASN1_dup
(
i2d_of_void
 *
i2d
, 
d2i_of_void
 *
d2i
, *
x
);

963 
	#ASN1_dup_of
(
ty≥
,
i2d
,
d2i
,
x
) \

964 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
—y≥, 
i2d
), \

965 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

966 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

968 
	#ASN1_dup_of_c⁄°
(
ty≥
,
i2d
,
d2i
,
x
) \

969 ((
ty≥
*)
	`ASN1_dup
(
	`CHECKED_I2D_OF
(c⁄°Åy≥, 
i2d
), \

970 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

971 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

973 *
ASN1_ôem_dup
(c⁄° 
ASN1_ITEM
 *
ô
, *
x
);

977 
	#M_ASN1_√w_of
(
ty≥
Ë—y≥ *)
	`ASN1_ôem_√w
(
	`ASN1_ITEM_Ωå
—y≥))

	)

978 
	#M_ASN1_‰ì_of
(
x
, 
ty≥
) \

979 
	`ASN1_ôem_‰ì
(
	`CHECKED_PTR_OF
(
ty≥
, 
x
), 
	`ASN1_ITEM_Ωå
—y≥))

	)

981 #i‚de‡
OPENSSL_NO_FP_API


982 *
ASN1_d2i_Â
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
FILE
 *
ö
, **
x
);

984 
	#ASN1_d2i_Â_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

985 ((
ty≥
*)
	`ASN1_d2i_Â
(
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

986 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

987 
ö
, \

988 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

990 *
ASN1_ôem_d2i_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
ö
, *
x
);

991 
ASN1_i2d_Â
(
i2d_of_void
 *
i2d
,
FILE
 *
out
,*
x
);

993 
	#ASN1_i2d_Â_of
(
ty≥
,
i2d
,
out
,
x
) \

994 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

995 
out
, \

996 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

998 
	#ASN1_i2d_Â_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

999 (
	`ASN1_i2d_Â
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1000 
out
, \

1001 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1003 
ASN1_ôem_i2d_Â
(c⁄° 
ASN1_ITEM
 *
ô
, 
FILE
 *
out
, *
x
);

1004 
ASN1_STRING_¥öt_ex_Â
(
FILE
 *
Â
, 
ASN1_STRING
 *
°r
, 
Êags
);

1007 
ASN1_STRING_to_UTF8
(**
out
, 
ASN1_STRING
 *
ö
);

1009 #i‚de‡
OPENSSL_NO_BIO


1010 *
ASN1_d2i_bio
(*(*
x√w
)(), 
d2i_of_void
 *
d2i
, 
BIO
 *
ö
, **
x
);

1012 
	#ASN1_d2i_bio_of
(
ty≥
,
x√w
,
d2i
,
ö
,
x
) \

1013 ((
ty≥
*)
	`ASN1_d2i_bio
–
	`CHECKED_NEW_OF
—y≥, 
x√w
), \

1014 
	`CHECKED_D2I_OF
(
ty≥
, 
d2i
), \

1015 
ö
, \

1016 
	`CHECKED_PPTR_OF
(
ty≥
, 
x
)))

	)

1018 *
ASN1_ôem_d2i_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
ö
, *
x
);

1019 
ASN1_i2d_bio
(
i2d_of_void
 *
i2d
,
BIO
 *
out
, *
x
);

1021 
	#ASN1_i2d_bio_of
(
ty≥
,
i2d
,
out
,
x
) \

1022 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1023 
out
, \

1024 
	`CHECKED_PTR_OF
(
ty≥
, 
x
)))

	)

1026 
	#ASN1_i2d_bio_of_c⁄°
(
ty≥
,
i2d
,
out
,
x
) \

1027 (
	`ASN1_i2d_bio
(
	`CHECKED_I2D_OF
(c⁄° 
ty≥
, 
i2d
), \

1028 
out
, \

1029 
	`CHECKED_PTR_OF
(c⁄° 
ty≥
, 
x
)))

	)

1031 
ASN1_ôem_i2d_bio
(c⁄° 
ASN1_ITEM
 *
ô
, 
BIO
 *
out
, *
x
);

1032 
ASN1_UTCTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_UTCTIME
 *
a
);

1033 
ASN1_GENERALIZEDTIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_GENERALIZEDTIME
 *
a
);

1034 
ASN1_TIME_¥öt
(
BIO
 *
Â
, c⁄° 
ASN1_TIME
 *
a
);

1035 
ASN1_STRING_¥öt
(
BIO
 *
bp
, c⁄° 
ASN1_STRING
 *
v
);

1036 
ASN1_STRING_¥öt_ex
(
BIO
 *
out
, 
ASN1_STRING
 *
°r
, 
Êags
);

1037 
ASN1_bn_¥öt
(
BIO
 *
bp
, c⁄° *
numbî
, c⁄° 
BIGNUM
 *
num
,

1038 *
buf
, 
off
);

1039 
ASN1_∑r£
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
);

1040 
ASN1_∑r£_dump
(
BIO
 *
bp
,c⁄° *
µ
,
Àn
,
ödít
,
dump
);

1042 c⁄° *
ASN1_èg2°r
(
èg
);

1046 
DECLARE_ASN1_FUNCTIONS
(
NETSCAPE_X509
)

1048 
ASN1_UNIVERSALSTRING_to_°rög
(
ASN1_UNIVERSALSTRING
 *
s
);

1050 
ASN1_TYPE_£t_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1051 *
d©a
, 
Àn
);

1052 
ASN1_TYPE_gë_o˘ë°rög
(
ASN1_TYPE
 *
a
,

1053 *
d©a
, 
max_Àn
);

1054 
ASN1_TYPE_£t_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
, 
num
,

1055 *
d©a
, 
Àn
);

1056 
ASN1_TYPE_gë_öt_o˘ë°rög
(
ASN1_TYPE
 *
a
,*
num
,

1057 *
d©a
, 
max_Àn
);

1059 
STACK_OF
(
OPENSSL_BLOCK
Ë*
ASN1_£q_u≈ack
(c⁄° *
buf
, 
Àn
,

1060 
d2i_of_void
 *
d2i
, (*
‰ì_func
)(
OPENSSL_BLOCK
));

1061 *
ASN1_£q_∑ck
(
STACK_OF
(
OPENSSL_BLOCK
Ë*
ß„s
, 
i2d_of_void
 *
i2d
,

1062 **
buf
, *
Àn
 );

1063 *
ASN1_u≈ack_°rög
(
ASN1_STRING
 *
o˘
, 
d2i_of_void
 *
d2i
);

1064 *
ASN1_ôem_u≈ack
(
ASN1_STRING
 *
o˘
, c⁄° 
ASN1_ITEM
 *
ô
);

1065 
ASN1_STRING
 *
ASN1_∑ck_°rög
(*
obj
, 
i2d_of_void
 *
i2d
,

1066 
ASN1_OCTET_STRING
 **
o˘
);

1068 
	#ASN1_∑ck_°rög_of
(
ty≥
,
obj
,
i2d
,
o˘
) \

1069 (
	`ASN1_∑ck_°rög
(
	`CHECKED_PTR_OF
(
ty≥
, 
obj
), \

1070 
	`CHECKED_I2D_OF
(
ty≥
, 
i2d
), \

1071 
o˘
))

	)

1073 
ASN1_STRING
 *
ASN1_ôem_∑ck
(*
obj
, c⁄° 
ASN1_ITEM
 *
ô
, 
ASN1_OCTET_STRING
 **
o˘
);

1075 
ASN1_STRING_£t_deÁu…_mask
(
mask
);

1076 
ASN1_STRING_£t_deÁu…_mask_asc
(c⁄° *
p
);

1077 
ASN1_STRING_gë_deÁu…_mask
();

1078 
ASN1_mb°rög_c›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1079 
öf‹m
, 
mask
);

1080 
ASN1_mb°rög_nc›y
(
ASN1_STRING
 **
out
, c⁄° *
ö
, 
Àn
,

1081 
öf‹m
, 
mask
,

1082 
mösize
, 
maxsize
);

1084 
ASN1_STRING
 *
ASN1_STRING_£t_by_NID
(ASN1_STRING **
out
,

1085 c⁄° *
ö
, 
öÀn
, 
öf‹m
, 
nid
);

1086 
ASN1_STRING_TABLE
 *
ASN1_STRING_TABLE_gë
(
nid
);

1087 
ASN1_STRING_TABLE_add
(, , , , );

1088 
ASN1_STRING_TABLE_˛ónup
();

1093 
ASN1_VALUE
 *
ASN1_ôem_√w
(c⁄° 
ASN1_ITEM
 *
ô
);

1094 
ASN1_ôem_‰ì
(
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1095 
ASN1_VALUE
 * 
ASN1_ôem_d2i
(ASN1_VALUE **
vÆ
, c⁄° **
ö
, 
Àn
, c⁄° 
ASN1_ITEM
 *
ô
);

1096 
ASN1_ôem_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1097 
ASN1_ôem_ndef_i2d
(
ASN1_VALUE
 *
vÆ
, **
out
, c⁄° 
ASN1_ITEM
 *
ô
);

1099 
ASN1_add_oid_moduÀ
();

1101 
ASN1_TYPE
 *
ASN1_gíî©e_nc⁄f
(*
°r
, 
CONF
 *
nc⁄f
);

1102 
ASN1_TYPE
 *
ASN1_gíî©e_v3
(*
°r
, 
X509V3_CTX
 *
˙f
);

1107 
	#ASN1_PCTX_FLAGS_SHOW_ABSENT
 0x001

	)

1109 
	#ASN1_PCTX_FLAGS_SHOW_SEQUENCE
 0x002

	)

1111 
	#ASN1_PCTX_FLAGS_SHOW_SSOF
 0x004

	)

1113 
	#ASN1_PCTX_FLAGS_SHOW_TYPE
 0x008

	)

1115 
	#ASN1_PCTX_FLAGS_NO_ANY_TYPE
 0x010

	)

1117 
	#ASN1_PCTX_FLAGS_NO_MSTRING_TYPE
 0x020

	)

1119 
	#ASN1_PCTX_FLAGS_NO_FIELD_NAME
 0x040

	)

1121 
	#ASN1_PCTX_FLAGS_SHOW_FIELD_STRUCT_NAME
 0x080

	)

1123 
	#ASN1_PCTX_FLAGS_NO_STRUCT_NAME
 0x100

	)

1125 
ASN1_ôem_¥öt
(
BIO
 *
out
, 
ASN1_VALUE
 *
iÊd
, 
ödít
,

1126 c⁄° 
ASN1_ITEM
 *
ô
, c⁄° 
ASN1_PCTX
 *
p˘x
);

1127 
ASN1_PCTX
 *
ASN1_PCTX_√w
();

1128 
ASN1_PCTX_‰ì
(
ASN1_PCTX
 *
p
);

1129 
ASN1_PCTX_gë_Êags
(
ASN1_PCTX
 *
p
);

1130 
ASN1_PCTX_£t_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1131 
ASN1_PCTX_gë_nm_Êags
(
ASN1_PCTX
 *
p
);

1132 
ASN1_PCTX_£t_nm_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1133 
ASN1_PCTX_gë_˚π_Êags
(
ASN1_PCTX
 *
p
);

1134 
ASN1_PCTX_£t_˚π_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1135 
ASN1_PCTX_gë_oid_Êags
(
ASN1_PCTX
 *
p
);

1136 
ASN1_PCTX_£t_oid_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1137 
ASN1_PCTX_gë_°r_Êags
(
ASN1_PCTX
 *
p
);

1138 
ASN1_PCTX_£t_°r_Êags
(
ASN1_PCTX
 *
p
, 
Êags
);

1140 
BIO_METHOD
 *
BIO_f_a¢1
();

1142 
BIO
 *
BIO_√w_NDEF
(BIO *
out
, 
ASN1_VALUE
 *
vÆ
, c⁄° 
ASN1_ITEM
 *
ô
);

1144 
i2d_ASN1_bio_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1145 c⁄° 
ASN1_ITEM
 *
ô
);

1146 
PEM_wrôe_bio_ASN1_°ªam
(
BIO
 *
out
, 
ASN1_VALUE
 *
vÆ
, BIO *
ö
, 
Êags
,

1147 c⁄° *
hdr
,

1148 c⁄° 
ASN1_ITEM
 *
ô
);

1149 
SMIME_wrôe_ASN1
(
BIO
 *
bio
, 
ASN1_VALUE
 *
vÆ
, BIO *
d©a
, 
Êags
,

1150 
˘y≥_nid
, 
ec⁄t_nid
,

1151 
STACK_OF
(
X509_ALGOR
Ë*
mdÆgs
,

1152 c⁄° 
ASN1_ITEM
 *
ô
);

1153 
ASN1_VALUE
 *
SMIME_ªad_ASN1
(
BIO
 *
bio
, BIO **
bc⁄t
, c⁄° 
ASN1_ITEM
 *
ô
);

1154 
SMIME_¸lf_c›y
(
BIO
 *
ö
, BIO *
out
, 
Êags
);

1155 
SMIME_ãxt
(
BIO
 *
ö
, BIO *
out
);

1161 
ERR_lﬂd_ASN1_°rögs
();

1166 
	#ASN1_F_A2D_ASN1_OBJECT
 100

	)

1167 
	#ASN1_F_A2I_ASN1_ENUMERATED
 101

	)

1168 
	#ASN1_F_A2I_ASN1_INTEGER
 102

	)

1169 
	#ASN1_F_A2I_ASN1_STRING
 103

	)

1170 
	#ASN1_F_APPEND_EXP
 176

	)

1171 
	#ASN1_F_ASN1_BIT_STRING_SET_BIT
 183

	)

1172 
	#ASN1_F_ASN1_CB
 177

	)

1173 
	#ASN1_F_ASN1_CHECK_TLEN
 104

	)

1174 
	#ASN1_F_ASN1_COLLATE_PRIMITIVE
 105

	)

1175 
	#ASN1_F_ASN1_COLLECT
 106

	)

1176 
	#ASN1_F_ASN1_D2I_EX_PRIMITIVE
 108

	)

1177 
	#ASN1_F_ASN1_D2I_FP
 109

	)

1178 
	#ASN1_F_ASN1_D2I_READ_BIO
 107

	)

1179 
	#ASN1_F_ASN1_DIGEST
 184

	)

1180 
	#ASN1_F_ASN1_DO_ADB
 110

	)

1181 
	#ASN1_F_ASN1_DUP
 111

	)

1182 
	#ASN1_F_ASN1_ENUMERATED_SET
 112

	)

1183 
	#ASN1_F_ASN1_ENUMERATED_TO_BN
 113

	)

1184 
	#ASN1_F_ASN1_EX_C2I
 204

	)

1185 
	#ASN1_F_ASN1_FIND_END
 190

	)

1186 
	#ASN1_F_ASN1_GENERALIZEDTIME_ADJ
 216

	)

1187 
	#ASN1_F_ASN1_GENERALIZEDTIME_SET
 185

	)

1188 
	#ASN1_F_ASN1_GENERATE_V3
 178

	)

1189 
	#ASN1_F_ASN1_GET_OBJECT
 114

	)

1190 
	#ASN1_F_ASN1_HEADER_NEW
 115

	)

1191 
	#ASN1_F_ASN1_I2D_BIO
 116

	)

1192 
	#ASN1_F_ASN1_I2D_FP
 117

	)

1193 
	#ASN1_F_ASN1_INTEGER_SET
 118

	)

1194 
	#ASN1_F_ASN1_INTEGER_TO_BN
 119

	)

1195 
	#ASN1_F_ASN1_ITEM_D2I_FP
 206

	)

1196 
	#ASN1_F_ASN1_ITEM_DUP
 191

	)

1197 
	#ASN1_F_ASN1_ITEM_EX_COMBINE_NEW
 121

	)

1198 
	#ASN1_F_ASN1_ITEM_EX_D2I
 120

	)

1199 
	#ASN1_F_ASN1_ITEM_I2D_BIO
 192

	)

1200 
	#ASN1_F_ASN1_ITEM_I2D_FP
 193

	)

1201 
	#ASN1_F_ASN1_ITEM_PACK
 198

	)

1202 
	#ASN1_F_ASN1_ITEM_SIGN
 195

	)

1203 
	#ASN1_F_ASN1_ITEM_SIGN_CTX
 220

	)

1204 
	#ASN1_F_ASN1_ITEM_UNPACK
 199

	)

1205 
	#ASN1_F_ASN1_ITEM_VERIFY
 197

	)

1206 
	#ASN1_F_ASN1_MBSTRING_NCOPY
 122

	)

1207 
	#ASN1_F_ASN1_OBJECT_NEW
 123

	)

1208 
	#ASN1_F_ASN1_OUTPUT_DATA
 214

	)

1209 
	#ASN1_F_ASN1_PACK_STRING
 124

	)

1210 
	#ASN1_F_ASN1_PCTX_NEW
 205

	)

1211 
	#ASN1_F_ASN1_PKCS5_PBE_SET
 125

	)

1212 
	#ASN1_F_ASN1_SEQ_PACK
 126

	)

1213 
	#ASN1_F_ASN1_SEQ_UNPACK
 127

	)

1214 
	#ASN1_F_ASN1_SIGN
 128

	)

1215 
	#ASN1_F_ASN1_STR2TYPE
 179

	)

1216 
	#ASN1_F_ASN1_STRING_SET
 186

	)

1217 
	#ASN1_F_ASN1_STRING_TABLE_ADD
 129

	)

1218 
	#ASN1_F_ASN1_STRING_TYPE_NEW
 130

	)

1219 
	#ASN1_F_ASN1_TEMPLATE_EX_D2I
 132

	)

1220 
	#ASN1_F_ASN1_TEMPLATE_NEW
 133

	)

1221 
	#ASN1_F_ASN1_TEMPLATE_NOEXP_D2I
 131

	)

1222 
	#ASN1_F_ASN1_TIME_ADJ
 217

	)

1223 
	#ASN1_F_ASN1_TIME_SET
 175

	)

1224 
	#ASN1_F_ASN1_TYPE_GET_INT_OCTETSTRING
 134

	)

1225 
	#ASN1_F_ASN1_TYPE_GET_OCTETSTRING
 135

	)

1226 
	#ASN1_F_ASN1_UNPACK_STRING
 136

	)

1227 
	#ASN1_F_ASN1_UTCTIME_ADJ
 218

	)

1228 
	#ASN1_F_ASN1_UTCTIME_SET
 187

	)

1229 
	#ASN1_F_ASN1_VERIFY
 137

	)

1230 
	#ASN1_F_B64_READ_ASN1
 209

	)

1231 
	#ASN1_F_B64_WRITE_ASN1
 210

	)

1232 
	#ASN1_F_BIO_NEW_NDEF
 208

	)

1233 
	#ASN1_F_BITSTR_CB
 180

	)

1234 
	#ASN1_F_BN_TO_ASN1_ENUMERATED
 138

	)

1235 
	#ASN1_F_BN_TO_ASN1_INTEGER
 139

	)

1236 
	#ASN1_F_C2I_ASN1_BIT_STRING
 189

	)

1237 
	#ASN1_F_C2I_ASN1_INTEGER
 194

	)

1238 
	#ASN1_F_C2I_ASN1_OBJECT
 196

	)

1239 
	#ASN1_F_COLLECT_DATA
 140

	)

1240 
	#ASN1_F_D2I_ASN1_BIT_STRING
 141

	)

1241 
	#ASN1_F_D2I_ASN1_BOOLEAN
 142

	)

1242 
	#ASN1_F_D2I_ASN1_BYTES
 143

	)

1243 
	#ASN1_F_D2I_ASN1_GENERALIZEDTIME
 144

	)

1244 
	#ASN1_F_D2I_ASN1_HEADER
 145

	)

1245 
	#ASN1_F_D2I_ASN1_INTEGER
 146

	)

1246 
	#ASN1_F_D2I_ASN1_OBJECT
 147

	)

1247 
	#ASN1_F_D2I_ASN1_SET
 148

	)

1248 
	#ASN1_F_D2I_ASN1_TYPE_BYTES
 149

	)

1249 
	#ASN1_F_D2I_ASN1_UINTEGER
 150

	)

1250 
	#ASN1_F_D2I_ASN1_UTCTIME
 151

	)

1251 
	#ASN1_F_D2I_AUTOPRIVATEKEY
 207

	)

1252 
	#ASN1_F_D2I_NETSCAPE_RSA
 152

	)

1253 
	#ASN1_F_D2I_NETSCAPE_RSA_2
 153

	)

1254 
	#ASN1_F_D2I_PRIVATEKEY
 154

	)

1255 
	#ASN1_F_D2I_PUBLICKEY
 155

	)

1256 
	#ASN1_F_D2I_RSA_NET
 200

	)

1257 
	#ASN1_F_D2I_RSA_NET_2
 201

	)

1258 
	#ASN1_F_D2I_X509
 156

	)

1259 
	#ASN1_F_D2I_X509_CINF
 157

	)

1260 
	#ASN1_F_D2I_X509_PKEY
 159

	)

1261 
	#ASN1_F_I2D_ASN1_BIO_STREAM
 211

	)

1262 
	#ASN1_F_I2D_ASN1_SET
 188

	)

1263 
	#ASN1_F_I2D_ASN1_TIME
 160

	)

1264 
	#ASN1_F_I2D_DSA_PUBKEY
 161

	)

1265 
	#ASN1_F_I2D_EC_PUBKEY
 181

	)

1266 
	#ASN1_F_I2D_PRIVATEKEY
 163

	)

1267 
	#ASN1_F_I2D_PUBLICKEY
 164

	)

1268 
	#ASN1_F_I2D_RSA_NET
 162

	)

1269 
	#ASN1_F_I2D_RSA_PUBKEY
 165

	)

1270 
	#ASN1_F_LONG_C2I
 166

	)

1271 
	#ASN1_F_OID_MODULE_INIT
 174

	)

1272 
	#ASN1_F_PARSE_TAGGING
 182

	)

1273 
	#ASN1_F_PKCS5_PBE2_SET_IV
 167

	)

1274 
	#ASN1_F_PKCS5_PBE_SET
 202

	)

1275 
	#ASN1_F_PKCS5_PBE_SET0_ALGOR
 215

	)

1276 
	#ASN1_F_PKCS5_PBKDF2_SET
 219

	)

1277 
	#ASN1_F_SMIME_READ_ASN1
 212

	)

1278 
	#ASN1_F_SMIME_TEXT
 213

	)

1279 
	#ASN1_F_X509_CINF_NEW
 168

	)

1280 
	#ASN1_F_X509_CRL_ADD0_REVOKED
 169

	)

1281 
	#ASN1_F_X509_INFO_NEW
 170

	)

1282 
	#ASN1_F_X509_NAME_ENCODE
 203

	)

1283 
	#ASN1_F_X509_NAME_EX_D2I
 158

	)

1284 
	#ASN1_F_X509_NAME_EX_NEW
 171

	)

1285 
	#ASN1_F_X509_NEW
 172

	)

1286 
	#ASN1_F_X509_PKEY_NEW
 173

	)

1289 
	#ASN1_R_ADDING_OBJECT
 171

	)

1290 
	#ASN1_R_ASN1_PARSE_ERROR
 203

	)

1291 
	#ASN1_R_ASN1_SIG_PARSE_ERROR
 204

	)

1292 
	#ASN1_R_AUX_ERROR
 100

	)

1293 
	#ASN1_R_BAD_CLASS
 101

	)

1294 
	#ASN1_R_BAD_OBJECT_HEADER
 102

	)

1295 
	#ASN1_R_BAD_PASSWORD_READ
 103

	)

1296 
	#ASN1_R_BAD_TAG
 104

	)

1297 
	#ASN1_R_BMPSTRING_IS_WRONG_LENGTH
 214

	)

1298 
	#ASN1_R_BN_LIB
 105

	)

1299 
	#ASN1_R_BOOLEAN_IS_WRONG_LENGTH
 106

	)

1300 
	#ASN1_R_BUFFER_TOO_SMALL
 107

	)

1301 
	#ASN1_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 108

	)

1302 
	#ASN1_R_CONTEXT_NOT_INITIALISED
 217

	)

1303 
	#ASN1_R_DATA_IS_WRONG
 109

	)

1304 
	#ASN1_R_DECODE_ERROR
 110

	)

1305 
	#ASN1_R_DECODING_ERROR
 111

	)

1306 
	#ASN1_R_DEPTH_EXCEEDED
 174

	)

1307 
	#ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED
 198

	)

1308 
	#ASN1_R_ENCODE_ERROR
 112

	)

1309 
	#ASN1_R_ERROR_GETTING_TIME
 173

	)

1310 
	#ASN1_R_ERROR_LOADING_SECTION
 172

	)

1311 
	#ASN1_R_ERROR_PARSING_SET_ELEMENT
 113

	)

1312 
	#ASN1_R_ERROR_SETTING_CIPHER_PARAMS
 114

	)

1313 
	#ASN1_R_EXPECTING_AN_INTEGER
 115

	)

1314 
	#ASN1_R_EXPECTING_AN_OBJECT
 116

	)

1315 
	#ASN1_R_EXPECTING_A_BOOLEAN
 117

	)

1316 
	#ASN1_R_EXPECTING_A_TIME
 118

	)

1317 
	#ASN1_R_EXPLICIT_LENGTH_MISMATCH
 119

	)

1318 
	#ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED
 120

	)

1319 
	#ASN1_R_FIELD_MISSING
 121

	)

1320 
	#ASN1_R_FIRST_NUM_TOO_LARGE
 122

	)

1321 
	#ASN1_R_HEADER_TOO_LONG
 123

	)

1322 
	#ASN1_R_ILLEGAL_BITSTRING_FORMAT
 175

	)

1323 
	#ASN1_R_ILLEGAL_BOOLEAN
 176

	)

1324 
	#ASN1_R_ILLEGAL_CHARACTERS
 124

	)

1325 
	#ASN1_R_ILLEGAL_FORMAT
 177

	)

1326 
	#ASN1_R_ILLEGAL_HEX
 178

	)

1327 
	#ASN1_R_ILLEGAL_IMPLICIT_TAG
 179

	)

1328 
	#ASN1_R_ILLEGAL_INTEGER
 180

	)

1329 
	#ASN1_R_ILLEGAL_NESTED_TAGGING
 181

	)

1330 
	#ASN1_R_ILLEGAL_NULL
 125

	)

1331 
	#ASN1_R_ILLEGAL_NULL_VALUE
 182

	)

1332 
	#ASN1_R_ILLEGAL_OBJECT
 183

	)

1333 
	#ASN1_R_ILLEGAL_OPTIONAL_ANY
 126

	)

1334 
	#ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE
 170

	)

1335 
	#ASN1_R_ILLEGAL_TAGGED_ANY
 127

	)

1336 
	#ASN1_R_ILLEGAL_TIME_VALUE
 184

	)

1337 
	#ASN1_R_INTEGER_NOT_ASCII_FORMAT
 185

	)

1338 
	#ASN1_R_INTEGER_TOO_LARGE_FOR_LONG
 128

	)

1339 
	#ASN1_R_INVALID_BIT_STRING_BITS_LEFT
 220

	)

1340 
	#ASN1_R_INVALID_BMPSTRING_LENGTH
 129

	)

1341 
	#ASN1_R_INVALID_DIGIT
 130

	)

1342 
	#ASN1_R_INVALID_MIME_TYPE
 205

	)

1343 
	#ASN1_R_INVALID_MODIFIER
 186

	)

1344 
	#ASN1_R_INVALID_NUMBER
 187

	)

1345 
	#ASN1_R_INVALID_OBJECT_ENCODING
 216

	)

1346 
	#ASN1_R_INVALID_SEPARATOR
 131

	)

1347 
	#ASN1_R_INVALID_TIME_FORMAT
 132

	)

1348 
	#ASN1_R_INVALID_UNIVERSALSTRING_LENGTH
 133

	)

1349 
	#ASN1_R_INVALID_UTF8STRING
 134

	)

1350 
	#ASN1_R_IV_TOO_LARGE
 135

	)

1351 
	#ASN1_R_LENGTH_ERROR
 136

	)

1352 
	#ASN1_R_LIST_ERROR
 188

	)

1353 
	#ASN1_R_MIME_NO_CONTENT_TYPE
 206

	)

1354 
	#ASN1_R_MIME_PARSE_ERROR
 207

	)

1355 
	#ASN1_R_MIME_SIG_PARSE_ERROR
 208

	)

1356 
	#ASN1_R_MISSING_EOC
 137

	)

1357 
	#ASN1_R_MISSING_SECOND_NUMBER
 138

	)

1358 
	#ASN1_R_MISSING_VALUE
 189

	)

1359 
	#ASN1_R_MSTRING_NOT_UNIVERSAL
 139

	)

1360 
	#ASN1_R_MSTRING_WRONG_TAG
 140

	)

1361 
	#ASN1_R_NESTED_ASN1_STRING
 197

	)

1362 
	#ASN1_R_NON_HEX_CHARACTERS
 141

	)

1363 
	#ASN1_R_NOT_ASCII_FORMAT
 190

	)

1364 
	#ASN1_R_NOT_ENOUGH_DATA
 142

	)

1365 
	#ASN1_R_NO_CONTENT_TYPE
 209

	)

1366 
	#ASN1_R_NO_DEFAULT_DIGEST
 201

	)

1367 
	#ASN1_R_NO_MATCHING_CHOICE_TYPE
 143

	)

1368 
	#ASN1_R_NO_MULTIPART_BODY_FAILURE
 210

	)

1369 
	#ASN1_R_NO_MULTIPART_BOUNDARY
 211

	)

1370 
	#ASN1_R_NO_SIG_CONTENT_TYPE
 212

	)

1371 
	#ASN1_R_NULL_IS_WRONG_LENGTH
 144

	)

1372 
	#ASN1_R_OBJECT_NOT_ASCII_FORMAT
 191

	)

1373 
	#ASN1_R_ODD_NUMBER_OF_CHARS
 145

	)

1374 
	#ASN1_R_PRIVATE_KEY_HEADER_MISSING
 146

	)

1375 
	#ASN1_R_SECOND_NUMBER_TOO_LARGE
 147

	)

1376 
	#ASN1_R_SEQUENCE_LENGTH_MISMATCH
 148

	)

1377 
	#ASN1_R_SEQUENCE_NOT_CONSTRUCTED
 149

	)

1378 
	#ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG
 192

	)

1379 
	#ASN1_R_SHORT_LINE
 150

	)

1380 
	#ASN1_R_SIG_INVALID_MIME_TYPE
 213

	)

1381 
	#ASN1_R_STREAMING_NOT_SUPPORTED
 202

	)

1382 
	#ASN1_R_STRING_TOO_LONG
 151

	)

1383 
	#ASN1_R_STRING_TOO_SHORT
 152

	)

1384 
	#ASN1_R_TAG_VALUE_TOO_HIGH
 153

	)

1385 
	#ASN1_R_THE_ASN1_OBJECT_IDENTIFIER_IS_NOT_KNOWN_FOR_THIS_MD
 154

	)

1386 
	#ASN1_R_TIME_NOT_ASCII_FORMAT
 193

	)

1387 
	#ASN1_R_TOO_LONG
 155

	)

1388 
	#ASN1_R_TYPE_NOT_CONSTRUCTED
 156

	)

1389 
	#ASN1_R_UNABLE_TO_DECODE_RSA_KEY
 157

	)

1390 
	#ASN1_R_UNABLE_TO_DECODE_RSA_PRIVATE_KEY
 158

	)

1391 
	#ASN1_R_UNEXPECTED_EOC
 159

	)

1392 
	#ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH
 215

	)

1393 
	#ASN1_R_UNKNOWN_FORMAT
 160

	)

1394 
	#ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM
 161

	)

1395 
	#ASN1_R_UNKNOWN_OBJECT_TYPE
 162

	)

1396 
	#ASN1_R_UNKNOWN_PUBLIC_KEY_TYPE
 163

	)

1397 
	#ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM
 199

	)

1398 
	#ASN1_R_UNKNOWN_TAG
 194

	)

1399 
	#ASN1_R_UNKOWN_FORMAT
 195

	)

1400 
	#ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE
 164

	)

1401 
	#ASN1_R_UNSUPPORTED_CIPHER
 165

	)

1402 
	#ASN1_R_UNSUPPORTED_ENCRYPTION_ALGORITHM
 166

	)

1403 
	#ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE
 167

	)

1404 
	#ASN1_R_UNSUPPORTED_TYPE
 196

	)

1405 
	#ASN1_R_WRONG_PUBLIC_KEY_TYPE
 200

	)

1406 
	#ASN1_R_WRONG_TAG
 168

	)

1407 
	#ASN1_R_WRONG_TYPE
 169

	)

1409 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/ebcdic.h

3 #i‚de‡
HEADER_EBCDIC_H


4 
	#HEADER_EBCDIC_H


	)

6 
	~<sys/ty≥s.h
>

9 
	#os_tﬂscii
 
_›ís¶_os_tﬂscii


	)

10 
	#os_t€bcdic
 
_›ís¶_os_t€bcdic


	)

11 
	#ebcdic2ascii
 
_›ís¶_ebcdic2ascii


	)

12 
	#ascii2ebcdic
 
_›ís¶_ascii2ebcdic


	)

14 c⁄° 
os_tﬂscii
[256];

15 c⁄° 
os_t€bcdic
[256];

16 *
ebcdic2ascii
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

17 *
ascii2ebcdic
(*
de°
, c⁄° *
§˚
, 
size_t
 
cou¡
);

	@/usr/include/openssl/ec.h

76 #i‚de‡
HEADER_EC_H


77 
	#HEADER_EC_H


	)

79 
	~<›ís¶/›ís¶c⁄f.h
>

81 #ifde‡
OPENSSL_NO_EC


82 #îr‹ 
EC
 
is
 
dißbÀd
.

85 
	~<›ís¶/a¢1.h
>

86 
	~<›ís¶/symhacks.h
>

87 #i‚de‡
OPENSSL_NO_DEPRECATED


88 
	~<›ís¶/bn.h
>

91 #ifde‡ 
__˝lu•lus


93 #ñi‡
deföed
(
__SUNPRO_C
)

94 #i‡
__SUNPRO_C
 >= 0x520

95 #¥agm®
îr‹_mesßges
 (
off
,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

100 #i‚de‡
OPENSSL_ECC_MAX_FIELD_BITS


101 
	#OPENSSL_ECC_MAX_FIELD_BITS
 661

	)

109 
POINT_CONVERSION_COMPRESSED
 = 2,

111 
POINT_CONVERSION_UNCOMPRESSED
 = 4,

114 
POINT_CONVERSION_HYBRID
 = 6

115 } 
	tpoöt_c⁄vîsi⁄_f‹m_t
;

118 
ec_mëhod_°
 
	tEC_METHOD
;

120 
ec_group_°


129 
	tEC_GROUP
;

131 
ec_poöt_°
 
	tEC_POINT
;

142 c⁄° 
EC_METHOD
 *
EC_GFp_sim∂e_mëhod
();

147 c⁄° 
EC_METHOD
 *
EC_GFp_m⁄t_mëhod
();

152 c⁄° 
EC_METHOD
 *
EC_GFp_ni°_mëhod
();

154 #i‚de‡
OPENSSL_NO_EC_NISTP_64_GCC_128


158 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p224_mëhod
();

163 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p256_mëhod
();

168 c⁄° 
EC_METHOD
 *
EC_GFp_ni°p521_mëhod
();

171 #i‚de‡
OPENSSL_NO_EC2M


179 c⁄° 
EC_METHOD
 *
EC_GF2m_sim∂e_mëhod
();

192 
EC_GROUP
 *
EC_GROUP_√w
(c⁄° 
EC_METHOD
 *
mëh
);

197 
EC_GROUP_‰ì
(
EC_GROUP
 *
group
);

202 
EC_GROUP_˛ór_‰ì
(
EC_GROUP
 *
group
);

209 
EC_GROUP_c›y
(
EC_GROUP
 *
d°
, c⁄° EC_GROUP *
§c
);

216 
EC_GROUP
 *
EC_GROUP_dup
(c⁄° EC_GROUP *
§c
);

222 c⁄° 
EC_METHOD
 *
EC_GROUP_mëhod_of
(c⁄° 
EC_GROUP
 *
group
);

228 
EC_METHOD_gë_fõld_ty≥
(c⁄° 
EC_METHOD
 *
mëh
);

238 
EC_GROUP_£t_gíî©‹
(
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
gíî©‹
, c⁄° 
BIGNUM
 *
‹dî
, c⁄° BIGNUM *
coÁ˘‹
);

244 c⁄° 
EC_POINT
 *
EC_GROUP_gë0_gíî©‹
(c⁄° 
EC_GROUP
 *
group
);

252 
EC_GROUP_gë_‹dî
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
‹dî
, 
BN_CTX
 *
˘x
);

260 
EC_GROUP_gë_coÁ˘‹
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
coÁ˘‹
, 
BN_CTX
 *
˘x
);

266 
EC_GROUP_£t_curve_«me
(
EC_GROUP
 *
group
, 
nid
);

272 
EC_GROUP_gë_curve_«me
(c⁄° 
EC_GROUP
 *
group
);

274 
EC_GROUP_£t_a¢1_Êag
(
EC_GROUP
 *
group
, 
Êag
);

275 
EC_GROUP_gë_a¢1_Êag
(c⁄° 
EC_GROUP
 *
group
);

277 
EC_GROUP_£t_poöt_c⁄vîsi⁄_f‹m
(
EC_GROUP
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

278 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_GROUP_gë_poöt_c⁄vîsi⁄_f‹m
(c⁄° 
EC_GROUP
 *);

280 *
EC_GROUP_gë0_£ed
(c⁄° 
EC_GROUP
 *);

281 
size_t
 
EC_GROUP_gë_£ed_Àn
(c⁄° 
EC_GROUP
 *);

282 
size_t
 
EC_GROUP_£t_£ed
(
EC_GROUP
 *, c⁄° *, size_à
Àn
);

292 
EC_GROUP_£t_curve_GFp
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

302 
EC_GROUP_gë_curve_GFp
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

304 #i‚de‡
OPENSSL_NO_EC2M


313 
EC_GROUP_£t_curve_GF2m
(
EC_GROUP
 *
group
, c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

323 
EC_GROUP_gë_curve_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
BIGNUM
 *
p
, BIGNUM *
a
, BIGNUM *
b
, 
BN_CTX
 *
˘x
);

329 
EC_GROUP_gë_degªe
(c⁄° 
EC_GROUP
 *
group
);

336 
EC_GROUP_check
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

343 
EC_GROUP_check_dis¸imö™t
(c⁄° 
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

351 
EC_GROUP_cmp
(c⁄° 
EC_GROUP
 *
a
, c⁄° EC_GROUP *
b
, 
BN_CTX
 *
˘x
);

364 
EC_GROUP
 *
EC_GROUP_√w_curve_GFp
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

365 #i‚de‡
OPENSSL_NO_EC2M


374 
EC_GROUP
 *
EC_GROUP_√w_curve_GF2m
(c⁄° 
BIGNUM
 *
p
, c⁄° BIGNUM *
a
, c⁄° BIGNUM *
b
, 
BN_CTX
 *
˘x
);

381 
EC_GROUP
 *
EC_GROUP_√w_by_curve_«me
(
nid
);

389 
nid
;

390 c⁄° *
commít
;

391 } 
	tEC_buûtö_curve
;

397 
size_t
 
EC_gë_buûtö_curves
(
EC_buûtö_curve
 *
r
, size_à
nôems
);

408 
EC_POINT
 *
EC_POINT_√w
(c⁄° 
EC_GROUP
 *
group
);

413 
EC_POINT_‰ì
(
EC_POINT
 *
poöt
);

418 
EC_POINT_˛ór_‰ì
(
EC_POINT
 *
poöt
);

425 
EC_POINT_c›y
(
EC_POINT
 *
d°
, c⁄° EC_POINT *
§c
);

433 
EC_POINT
 *
EC_POINT_dup
(c⁄° EC_POINT *
§c
, c⁄° 
EC_GROUP
 *
group
);

439 c⁄° 
EC_METHOD
 *
EC_POINT_mëhod_of
(c⁄° 
EC_POINT
 *
poöt
);

446 
EC_POINT_£t_to_öföôy
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
poöt
);

457 
EC_POINT_£t_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

458 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, c⁄° BIGNUM *
z
, 
BN_CTX
 *
˘x
);

469 
EC_POINT_gë_J¥oje˘ive_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

470 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, BIGNUM *
z
, 
BN_CTX
 *
˘x
);

480 
EC_POINT_£t_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

481 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

491 
EC_POINT_gë_afföe_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
,

492 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

502 
EC_POINT_£t_com¥es£d_co‹dö©es_GFp
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

503 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

504 #i‚de‡
OPENSSL_NO_EC2M


513 
EC_POINT_£t_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

514 c⁄° 
BIGNUM
 *
x
, c⁄° BIGNUM *
y
, 
BN_CTX
 *
˘x
);

524 
EC_POINT_gë_afföe_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
,

525 c⁄° 
EC_POINT
 *
p
, 
BIGNUM
 *
x
, BIGNUM *
y
, 
BN_CTX
 *
˘x
);

535 
EC_POINT_£t_com¥es£d_co‹dö©es_GF2m
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

536 c⁄° 
BIGNUM
 *
x
, 
y_bô
, 
BN_CTX
 *
˘x
);

548 
size_t
 
EC_POINT_poöt2o˘
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
,

549 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
,

550 *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

560 
EC_POINT_o˘2poöt
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
p
,

561 c⁄° *
buf
, 
size_t
 
Àn
, 
BN_CTX
 *
˘x
);

564 
BIGNUM
 *
EC_POINT_poöt2bn
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

565 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BIGNUM
 *, 
BN_CTX
 *);

566 
EC_POINT
 *
EC_POINT_bn2poöt
(c⁄° 
EC_GROUP
 *, c⁄° 
BIGNUM
 *,

567 
EC_POINT
 *, 
BN_CTX
 *);

568 *
EC_POINT_poöt2hex
(c⁄° 
EC_GROUP
 *, c⁄° 
EC_POINT
 *,

569 
poöt_c⁄vîsi⁄_f‹m_t
 
f‹m
, 
BN_CTX
 *);

570 
EC_POINT
 *
EC_POINT_hex2poöt
(c⁄° 
EC_GROUP
 *, const *,

571 
EC_POINT
 *, 
BN_CTX
 *);

586 
EC_POINT_add
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

595 
EC_POINT_dbl
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° EC_POINT *
a
, 
BN_CTX
 *
˘x
);

603 
EC_POINT_övît
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
a
, 
BN_CTX
 *
˘x
);

610 
EC_POINT_is_©_öföôy
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
p
);

618 
EC_POINT_is_⁄_curve
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
poöt
, 
BN_CTX
 *
˘x
);

627 
EC_POINT_cmp
(c⁄° 
EC_GROUP
 *
group
, c⁄° 
EC_POINT
 *
a
, c⁄° EC_POINT *
b
, 
BN_CTX
 *
˘x
);

629 
EC_POINT_make_afföe
(c⁄° 
EC_GROUP
 *, 
EC_POINT
 *, 
BN_CTX
 *);

630 
EC_POINTs_make_afföe
(c⁄° 
EC_GROUP
 *, 
size_t
 
num
, 
EC_POINT
 *[], 
BN_CTX
 *);

642 
EC_POINTs_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, 
size_t
 
num
, c⁄° EC_POINT *
p
[], c⁄° BIGNUM *
m
[], 
BN_CTX
 *
˘x
);

653 
EC_POINT_mul
(c⁄° 
EC_GROUP
 *
group
, 
EC_POINT
 *
r
, c⁄° 
BIGNUM
 *
n
, c⁄° EC_POINT *
q
, c⁄° BIGNUM *
m
, 
BN_CTX
 *
˘x
);

660 
EC_GROUP_¥ecompuã_mu…
(
EC_GROUP
 *
group
, 
BN_CTX
 *
˘x
);

666 
EC_GROUP_have_¥ecompuã_mu…
(c⁄° 
EC_GROUP
 *
group
);

675 
EC_GROUP_gë_basis_ty≥
(c⁄° 
EC_GROUP
 *);

676 #i‚de‡
OPENSSL_NO_EC2M


677 
EC_GROUP_gë_åöomül_basis
(c⁄° 
EC_GROUP
 *, *
k
);

678 
EC_GROUP_gë_≥¡™omül_basis
(c⁄° 
EC_GROUP
 *, *
k1
,

679 *
k2
, *
k3
);

682 
	#OPENSSL_EC_NAMED_CURVE
 0x001

	)

684 
e˝k_∑ømëîs_°
 
	tECPKPARAMETERS
;

686 
EC_GROUP
 *
d2i_ECPKP¨amëîs
(EC_GROUP **, c⁄° **
ö
, 
Àn
);

687 
i2d_ECPKP¨amëîs
(c⁄° 
EC_GROUP
 *, **
out
);

689 
	#d2i_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_d2i_bio_of
(
EC_GROUP
,
NULL
,
d2i_ECPKP¨amëîs
,bp,x)

	)

690 
	#i2d_ECPKP¨amëîs_bio
(
bp
,
x
Ë
	`ASN1_i2d_bio_of_c⁄°
(
EC_GROUP
,
i2d_ECPKP¨amëîs
,bp,x)

	)

691 
	#d2i_ECPKP¨amëîs_Â
(
Â
,
x
Ë(
EC_GROUP
 *)
	`ASN1_d2i_Â
(
NULL
, \

692 (*(*)())
d2i_ECPKP¨amëîs
,(
Â
),(**)(
x
))

	)

693 
	#i2d_ECPKP¨amëîs_Â
(
Â
,
x
Ë
	`ASN1_i2d_Â
(
i2d_ECPKP¨amëîs
,(fp), \

694 (*)(
x
))

	)

696 #i‚de‡
OPENSSL_NO_BIO


697 
ECPKP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_GROUP
 *
x
, 
off
);

699 #i‚de‡
OPENSSL_NO_FP_API


700 
ECPKP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_GROUP
 *
x
, 
off
);

708 
ec_key_°
 
	tEC_KEY
;

711 
	#EC_PKEY_NO_PARAMETERS
 0x001

	)

712 
	#EC_PKEY_NO_PUBKEY
 0x002

	)

715 
	#EC_FLAG_NON_FIPS_ALLOW
 0x1

	)

716 
	#EC_FLAG_FIPS_CHECKED
 0x2

	)

721 
EC_KEY
 *
EC_KEY_√w
();

723 
EC_KEY_gë_Êags
(c⁄° 
EC_KEY
 *
key
);

725 
EC_KEY_£t_Êags
(
EC_KEY
 *
key
, 
Êags
);

727 
EC_KEY_˛ór_Êags
(
EC_KEY
 *
key
, 
Êags
);

734 
EC_KEY
 *
EC_KEY_√w_by_curve_«me
(
nid
);

739 
EC_KEY_‰ì
(
EC_KEY
 *
key
);

746 
EC_KEY
 *
EC_KEY_c›y
(EC_KEY *
d°
, c⁄° EC_KEY *
§c
);

752 
EC_KEY
 *
EC_KEY_dup
(c⁄° EC_KEY *
§c
);

758 
EC_KEY_up_ªf
(
EC_KEY
 *
key
);

764 c⁄° 
EC_GROUP
 *
EC_KEY_gë0_group
(c⁄° 
EC_KEY
 *
key
);

772 
EC_KEY_£t_group
(
EC_KEY
 *
key
, c⁄° 
EC_GROUP
 *
group
);

778 c⁄° 
BIGNUM
 *
EC_KEY_gë0_¥iv©e_key
(c⁄° 
EC_KEY
 *
key
);

786 
EC_KEY_£t_¥iv©e_key
(
EC_KEY
 *
key
, c⁄° 
BIGNUM
 *
¥v
);

792 c⁄° 
EC_POINT
 *
EC_KEY_gë0_public_key
(c⁄° 
EC_KEY
 *
key
);

800 
EC_KEY_£t_public_key
(
EC_KEY
 *
key
, c⁄° 
EC_POINT
 *
pub
);

802 
EC_KEY_gë_íc_Êags
(c⁄° 
EC_KEY
 *
key
);

803 
EC_KEY_£t_íc_Êags
(
EC_KEY
 *, );

804 
poöt_c⁄vîsi⁄_f‹m_t
 
EC_KEY_gë_c⁄v_f‹m
(c⁄° 
EC_KEY
 *);

805 
EC_KEY_£t_c⁄v_f‹m
(
EC_KEY
 *, 
poöt_c⁄vîsi⁄_f‹m_t
);

807 *
EC_KEY_gë_key_mëhod_d©a
(
EC_KEY
 *,

808 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

809 
EC_KEY_ö£π_key_mëhod_d©a
(
EC_KEY
 *, *
d©a
,

810 *(*
dup_func
)(*), (*
‰ì_func
)(*), (*
˛ór_‰ì_func
)(*));

812 
EC_KEY_£t_a¢1_Êag
(
EC_KEY
 *, );

820 
EC_KEY_¥ecompuã_mu…
(
EC_KEY
 *
key
, 
BN_CTX
 *
˘x
);

826 
EC_KEY_gíî©e_key
(
EC_KEY
 *
key
);

832 
EC_KEY_check_key
(c⁄° 
EC_KEY
 *
key
);

841 
EC_KEY_£t_public_key_afföe_co‹dö©es
(
EC_KEY
 *
key
, 
BIGNUM
 *
x
, BIGNUM *
y
);

854 
EC_KEY
 *
d2i_ECPriv©eKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

862 
i2d_ECPriv©eKey
(
EC_KEY
 *
key
, **
out
);

876 
EC_KEY
 *
d2i_ECP¨amëîs
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

884 
i2d_ECP¨amëîs
(
EC_KEY
 *
key
, **
out
);

899 
EC_KEY
 *
o2i_ECPublicKey
(EC_KEY **
key
, c⁄° **
ö
, 
Àn
);

907 
i2o_ECPublicKey
(
EC_KEY
 *
key
, **
out
);

909 #i‚de‡
OPENSSL_NO_BIO


915 
ECP¨amëîs_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
);

923 
EC_KEY_¥öt
(
BIO
 *
bp
, c⁄° 
EC_KEY
 *
key
, 
off
);

926 #i‚de‡
OPENSSL_NO_FP_API


932 
ECP¨amëîs_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
);

940 
EC_KEY_¥öt_Â
(
FILE
 *
Â
, c⁄° 
EC_KEY
 *
key
, 
off
);

944 
	#ECP¨amëîs_dup
(
x
Ë
	`ASN1_dup_of
(
EC_KEY
,
i2d_ECP¨amëîs
,
d2i_ECP¨amëîs
,x)

	)

946 #i‚de‡
__˝lu•lus


947 #i‡
deföed
(
__SUNPRO_C
)

948 #i‡
__SUNPRO_C
 >= 0x520

949 #¥agm®
îr‹_mesßges
 (,
E_ARRAY_OF_INCOMPLETE_NONAME
,
E_ARRAY_OF_INCOMPLETE
)

954 
	#EVP_PKEY_CTX_£t_ec_∑ømgí_curve_nid
(
˘x
, 
nid
) \

955 
	`EVP_PKEY_CTX_˘æ
(
˘x
, 
EVP_PKEY_EC
, 
EVP_PKEY_OP_PARAMGEN
, \

956 
EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
, 
nid
, 
NULL
)

	)

959 
	#EVP_PKEY_CTRL_EC_PARAMGEN_CURVE_NID
 (
EVP_PKEY_ALG_CTRL
 + 1)

	)

965 
ERR_lﬂd_EC_°rögs
();

970 
	#EC_F_BN_TO_FELEM
 224

	)

971 
	#EC_F_COMPUTE_WNAF
 143

	)

972 
	#EC_F_D2I_ECPARAMETERS
 144

	)

973 
	#EC_F_D2I_ECPKPARAMETERS
 145

	)

974 
	#EC_F_D2I_ECPRIVATEKEY
 146

	)

975 
	#EC_F_DO_EC_KEY_PRINT
 221

	)

976 
	#EC_F_ECKEY_PARAM2TYPE
 223

	)

977 
	#EC_F_ECKEY_PARAM_DECODE
 212

	)

978 
	#EC_F_ECKEY_PRIV_DECODE
 213

	)

979 
	#EC_F_ECKEY_PRIV_ENCODE
 214

	)

980 
	#EC_F_ECKEY_PUB_DECODE
 215

	)

981 
	#EC_F_ECKEY_PUB_ENCODE
 216

	)

982 
	#EC_F_ECKEY_TYPE2PARAM
 220

	)

983 
	#EC_F_ECPARAMETERS_PRINT
 147

	)

984 
	#EC_F_ECPARAMETERS_PRINT_FP
 148

	)

985 
	#EC_F_ECPKPARAMETERS_PRINT
 149

	)

986 
	#EC_F_ECPKPARAMETERS_PRINT_FP
 150

	)

987 
	#EC_F_ECP_NIST_MOD_192
 203

	)

988 
	#EC_F_ECP_NIST_MOD_224
 204

	)

989 
	#EC_F_ECP_NIST_MOD_256
 205

	)

990 
	#EC_F_ECP_NIST_MOD_521
 206

	)

991 
	#EC_F_EC_ASN1_GROUP2CURVE
 153

	)

992 
	#EC_F_EC_ASN1_GROUP2FIELDID
 154

	)

993 
	#EC_F_EC_ASN1_GROUP2PARAMETERS
 155

	)

994 
	#EC_F_EC_ASN1_GROUP2PKPARAMETERS
 156

	)

995 
	#EC_F_EC_ASN1_PARAMETERS2GROUP
 157

	)

996 
	#EC_F_EC_ASN1_PKPARAMETERS2GROUP
 158

	)

997 
	#EC_F_EC_EX_DATA_SET_DATA
 211

	)

998 
	#EC_F_EC_GF2M_MONTGOMERY_POINT_MULTIPLY
 208

	)

999 
	#EC_F_EC_GF2M_SIMPLE_GROUP_CHECK_DISCRIMINANT
 159

	)

1000 
	#EC_F_EC_GF2M_SIMPLE_GROUP_SET_CURVE
 195

	)

1001 
	#EC_F_EC_GF2M_SIMPLE_OCT2POINT
 160

	)

1002 
	#EC_F_EC_GF2M_SIMPLE_POINT2OCT
 161

	)

1003 
	#EC_F_EC_GF2M_SIMPLE_POINT_GET_AFFINE_COORDINATES
 162

	)

1004 
	#EC_F_EC_GF2M_SIMPLE_POINT_SET_AFFINE_COORDINATES
 163

	)

1005 
	#EC_F_EC_GF2M_SIMPLE_SET_COMPRESSED_COORDINATES
 164

	)

1006 
	#EC_F_EC_GFP_MONT_FIELD_DECODE
 133

	)

1007 
	#EC_F_EC_GFP_MONT_FIELD_ENCODE
 134

	)

1008 
	#EC_F_EC_GFP_MONT_FIELD_MUL
 131

	)

1009 
	#EC_F_EC_GFP_MONT_FIELD_SET_TO_ONE
 209

	)

1010 
	#EC_F_EC_GFP_MONT_FIELD_SQR
 132

	)

1011 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE
 189

	)

1012 
	#EC_F_EC_GFP_MONT_GROUP_SET_CURVE_GFP
 135

	)

1013 
	#EC_F_EC_GFP_NISTP224_GROUP_SET_CURVE
 225

	)

1014 
	#EC_F_EC_GFP_NISTP224_POINTS_MUL
 228

	)

1015 
	#EC_F_EC_GFP_NISTP224_POINT_GET_AFFINE_COORDINATES
 226

	)

1016 
	#EC_F_EC_GFP_NISTP256_GROUP_SET_CURVE
 230

	)

1017 
	#EC_F_EC_GFP_NISTP256_POINTS_MUL
 231

	)

1018 
	#EC_F_EC_GFP_NISTP256_POINT_GET_AFFINE_COORDINATES
 232

	)

1019 
	#EC_F_EC_GFP_NISTP521_GROUP_SET_CURVE
 233

	)

1020 
	#EC_F_EC_GFP_NISTP521_POINTS_MUL
 234

	)

1021 
	#EC_F_EC_GFP_NISTP521_POINT_GET_AFFINE_COORDINATES
 235

	)

1022 
	#EC_F_EC_GFP_NIST_FIELD_MUL
 200

	)

1023 
	#EC_F_EC_GFP_NIST_FIELD_SQR
 201

	)

1024 
	#EC_F_EC_GFP_NIST_GROUP_SET_CURVE
 202

	)

1025 
	#EC_F_EC_GFP_SIMPLE_GROUP_CHECK_DISCRIMINANT
 165

	)

1026 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE
 166

	)

1027 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_CURVE_GFP
 100

	)

1028 
	#EC_F_EC_GFP_SIMPLE_GROUP_SET_GENERATOR
 101

	)

1029 
	#EC_F_EC_GFP_SIMPLE_MAKE_AFFINE
 102

	)

1030 
	#EC_F_EC_GFP_SIMPLE_OCT2POINT
 103

	)

1031 
	#EC_F_EC_GFP_SIMPLE_POINT2OCT
 104

	)

1032 
	#EC_F_EC_GFP_SIMPLE_POINTS_MAKE_AFFINE
 137

	)

1033 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES
 167

	)

1034 
	#EC_F_EC_GFP_SIMPLE_POINT_GET_AFFINE_COORDINATES_GFP
 105

	)

1035 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES
 168

	)

1036 
	#EC_F_EC_GFP_SIMPLE_POINT_SET_AFFINE_COORDINATES_GFP
 128

	)

1037 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES
 169

	)

1038 
	#EC_F_EC_GFP_SIMPLE_SET_COMPRESSED_COORDINATES_GFP
 129

	)

1039 
	#EC_F_EC_GROUP_CHECK
 170

	)

1040 
	#EC_F_EC_GROUP_CHECK_DISCRIMINANT
 171

	)

1041 
	#EC_F_EC_GROUP_COPY
 106

	)

1042 
	#EC_F_EC_GROUP_GET0_GENERATOR
 139

	)

1043 
	#EC_F_EC_GROUP_GET_COFACTOR
 140

	)

1044 
	#EC_F_EC_GROUP_GET_CURVE_GF2M
 172

	)

1045 
	#EC_F_EC_GROUP_GET_CURVE_GFP
 130

	)

1046 
	#EC_F_EC_GROUP_GET_DEGREE
 173

	)

1047 
	#EC_F_EC_GROUP_GET_ORDER
 141

	)

1048 
	#EC_F_EC_GROUP_GET_PENTANOMIAL_BASIS
 193

	)

1049 
	#EC_F_EC_GROUP_GET_TRINOMIAL_BASIS
 194

	)

1050 
	#EC_F_EC_GROUP_NEW
 108

	)

1051 
	#EC_F_EC_GROUP_NEW_BY_CURVE_NAME
 174

	)

1052 
	#EC_F_EC_GROUP_NEW_FROM_DATA
 175

	)

1053 
	#EC_F_EC_GROUP_PRECOMPUTE_MULT
 142

	)

1054 
	#EC_F_EC_GROUP_SET_CURVE_GF2M
 176

	)

1055 
	#EC_F_EC_GROUP_SET_CURVE_GFP
 109

	)

1056 
	#EC_F_EC_GROUP_SET_EXTRA_DATA
 110

	)

1057 
	#EC_F_EC_GROUP_SET_GENERATOR
 111

	)

1058 
	#EC_F_EC_KEY_CHECK_KEY
 177

	)

1059 
	#EC_F_EC_KEY_COPY
 178

	)

1060 
	#EC_F_EC_KEY_GENERATE_KEY
 179

	)

1061 
	#EC_F_EC_KEY_NEW
 182

	)

1062 
	#EC_F_EC_KEY_PRINT
 180

	)

1063 
	#EC_F_EC_KEY_PRINT_FP
 181

	)

1064 
	#EC_F_EC_KEY_SET_PUBLIC_KEY_AFFINE_COORDINATES
 229

	)

1065 
	#EC_F_EC_POINTS_MAKE_AFFINE
 136

	)

1066 
	#EC_F_EC_POINT_ADD
 112

	)

1067 
	#EC_F_EC_POINT_CMP
 113

	)

1068 
	#EC_F_EC_POINT_COPY
 114

	)

1069 
	#EC_F_EC_POINT_DBL
 115

	)

1070 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GF2M
 183

	)

1071 
	#EC_F_EC_POINT_GET_AFFINE_COORDINATES_GFP
 116

	)

1072 
	#EC_F_EC_POINT_GET_JPROJECTIVE_COORDINATES_GFP
 117

	)

1073 
	#EC_F_EC_POINT_INVERT
 210

	)

1074 
	#EC_F_EC_POINT_IS_AT_INFINITY
 118

	)

1075 
	#EC_F_EC_POINT_IS_ON_CURVE
 119

	)

1076 
	#EC_F_EC_POINT_MAKE_AFFINE
 120

	)

1077 
	#EC_F_EC_POINT_MUL
 184

	)

1078 
	#EC_F_EC_POINT_NEW
 121

	)

1079 
	#EC_F_EC_POINT_OCT2POINT
 122

	)

1080 
	#EC_F_EC_POINT_POINT2OCT
 123

	)

1081 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GF2M
 185

	)

1082 
	#EC_F_EC_POINT_SET_AFFINE_COORDINATES_GFP
 124

	)

1083 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GF2M
 186

	)

1084 
	#EC_F_EC_POINT_SET_COMPRESSED_COORDINATES_GFP
 125

	)

1085 
	#EC_F_EC_POINT_SET_JPROJECTIVE_COORDINATES_GFP
 126

	)

1086 
	#EC_F_EC_POINT_SET_TO_INFINITY
 127

	)

1087 
	#EC_F_EC_PRE_COMP_DUP
 207

	)

1088 
	#EC_F_EC_PRE_COMP_NEW
 196

	)

1089 
	#EC_F_EC_WNAF_MUL
 187

	)

1090 
	#EC_F_EC_WNAF_PRECOMPUTE_MULT
 188

	)

1091 
	#EC_F_I2D_ECPARAMETERS
 190

	)

1092 
	#EC_F_I2D_ECPKPARAMETERS
 191

	)

1093 
	#EC_F_I2D_ECPRIVATEKEY
 192

	)

1094 
	#EC_F_I2O_ECPUBLICKEY
 151

	)

1095 
	#EC_F_NISTP224_PRE_COMP_NEW
 227

	)

1096 
	#EC_F_NISTP256_PRE_COMP_NEW
 236

	)

1097 
	#EC_F_NISTP521_PRE_COMP_NEW
 237

	)

1098 
	#EC_F_O2I_ECPUBLICKEY
 152

	)

1099 
	#EC_F_OLD_EC_PRIV_DECODE
 222

	)

1100 
	#EC_F_PKEY_EC_CTRL
 197

	)

1101 
	#EC_F_PKEY_EC_CTRL_STR
 198

	)

1102 
	#EC_F_PKEY_EC_DERIVE
 217

	)

1103 
	#EC_F_PKEY_EC_KEYGEN
 199

	)

1104 
	#EC_F_PKEY_EC_PARAMGEN
 219

	)

1105 
	#EC_F_PKEY_EC_SIGN
 218

	)

1108 
	#EC_R_ASN1_ERROR
 115

	)

1109 
	#EC_R_ASN1_UNKNOWN_FIELD
 116

	)

1110 
	#EC_R_BIGNUM_OUT_OF_RANGE
 144

	)

1111 
	#EC_R_BUFFER_TOO_SMALL
 100

	)

1112 
	#EC_R_COORDINATES_OUT_OF_RANGE
 146

	)

1113 
	#EC_R_D2I_ECPKPARAMETERS_FAILURE
 117

	)

1114 
	#EC_R_DECODE_ERROR
 142

	)

1115 
	#EC_R_DISCRIMINANT_IS_ZERO
 118

	)

1116 
	#EC_R_EC_GROUP_NEW_BY_NAME_FAILURE
 119

	)

1117 
	#EC_R_FIELD_TOO_LARGE
 143

	)

1118 
	#EC_R_GF2M_NOT_SUPPORTED
 147

	)

1119 
	#EC_R_GROUP2PKPARAMETERS_FAILURE
 120

	)

1120 
	#EC_R_I2D_ECPKPARAMETERS_FAILURE
 121

	)

1121 
	#EC_R_INCOMPATIBLE_OBJECTS
 101

	)

1122 
	#EC_R_INVALID_ARGUMENT
 112

	)

1123 
	#EC_R_INVALID_COMPRESSED_POINT
 110

	)

1124 
	#EC_R_INVALID_COMPRESSION_BIT
 109

	)

1125 
	#EC_R_INVALID_CURVE
 141

	)

1126 
	#EC_R_INVALID_DIGEST_TYPE
 138

	)

1127 
	#EC_R_INVALID_ENCODING
 102

	)

1128 
	#EC_R_INVALID_FIELD
 103

	)

1129 
	#EC_R_INVALID_FORM
 104

	)

1130 
	#EC_R_INVALID_GROUP_ORDER
 122

	)

1131 
	#EC_R_INVALID_PENTANOMIAL_BASIS
 132

	)

1132 
	#EC_R_INVALID_PRIVATE_KEY
 123

	)

1133 
	#EC_R_INVALID_TRINOMIAL_BASIS
 137

	)

1134 
	#EC_R_KEYS_NOT_SET
 140

	)

1135 
	#EC_R_MISSING_PARAMETERS
 124

	)

1136 
	#EC_R_MISSING_PRIVATE_KEY
 125

	)

1137 
	#EC_R_NOT_A_NIST_PRIME
 135

	)

1138 
	#EC_R_NOT_A_SUPPORTED_NIST_PRIME
 136

	)

1139 
	#EC_R_NOT_IMPLEMENTED
 126

	)

1140 
	#EC_R_NOT_INITIALIZED
 111

	)

1141 
	#EC_R_NO_FIELD_MOD
 133

	)

1142 
	#EC_R_NO_PARAMETERS_SET
 139

	)

1143 
	#EC_R_PASSED_NULL_PARAMETER
 134

	)

1144 
	#EC_R_PKPARAMETERS2GROUP_FAILURE
 127

	)

1145 
	#EC_R_POINT_AT_INFINITY
 106

	)

1146 
	#EC_R_POINT_IS_NOT_ON_CURVE
 107

	)

1147 
	#EC_R_SLOT_FULL
 108

	)

1148 
	#EC_R_UNDEFINED_GENERATOR
 113

	)

1149 
	#EC_R_UNDEFINED_ORDER
 128

	)

1150 
	#EC_R_UNKNOWN_GROUP
 129

	)

1151 
	#EC_R_UNKNOWN_ORDER
 114

	)

1152 
	#EC_R_UNSUPPORTED_FIELD
 131

	)

1153 
	#EC_R_WRONG_CURVE_PARAMETERS
 145

	)

1154 
	#EC_R_WRONG_ORDER
 130

	)

1156 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/obj_mac.h

65 
	#SN_undef
 "UNDEF"

	)

66 
	#LN_undef
 "undeföed"

	)

67 
	#NID_undef
 0

	)

68 
	#OBJ_undef
 0L

	)

70 
	#SN_ôu_t
 "ITU-T"

	)

71 
	#LN_ôu_t
 "ôu-t"

	)

72 
	#NID_ôu_t
 645

	)

73 
	#OBJ_ôu_t
 0L

	)

75 
	#NID_ccôt
 404

	)

76 
	#OBJ_ccôt
 
OBJ_ôu_t


	)

78 
	#SN_iso
 "ISO"

	)

79 
	#LN_iso
 "iso"

	)

80 
	#NID_iso
 181

	)

81 
	#OBJ_iso
 1L

	)

83 
	#SN_joöt_iso_ôu_t
 "JOINT-ISO-ITU-T"

	)

84 
	#LN_joöt_iso_ôu_t
 "joöt-iso-ôu-t"

	)

85 
	#NID_joöt_iso_ôu_t
 646

	)

86 
	#OBJ_joöt_iso_ôu_t
 2L

	)

88 
	#NID_joöt_iso_ccôt
 393

	)

89 
	#OBJ_joöt_iso_ccôt
 
OBJ_joöt_iso_ôu_t


	)

91 
	#SN_membî_body
 "membî-body"

	)

92 
	#LN_membî_body
 "ISO Membî Body"

	)

93 
	#NID_membî_body
 182

	)

94 
	#OBJ_membî_body
 
OBJ_iso
,2L

	)

96 
	#SN_idítifõd_‹g™iz©i⁄
 "idítifõd-‹g™iz©i⁄"

	)

97 
	#NID_idítifõd_‹g™iz©i⁄
 676

	)

98 
	#OBJ_idítifõd_‹g™iz©i⁄
 
OBJ_iso
,3L

	)

100 
	#SN_hmac_md5
 "HMAC-MD5"

	)

101 
	#LN_hmac_md5
 "hmac-md5"

	)

102 
	#NID_hmac_md5
 780

	)

103 
	#OBJ_hmac_md5
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,1L

	)

105 
	#SN_hmac_sha1
 "HMAC-SHA1"

	)

106 
	#LN_hmac_sha1
 "hmac-sha1"

	)

107 
	#NID_hmac_sha1
 781

	)

108 
	#OBJ_hmac_sha1
 
OBJ_idítifõd_‹g™iz©i⁄
,6L,1L,5L,5L,8L,1L,2L

	)

110 
	#SN_˚πicom_¨c
 "˚πicom-¨c"

	)

111 
	#NID_˚πicom_¨c
 677

	)

112 
	#OBJ_˚πicom_¨c
 
OBJ_idítifõd_‹g™iz©i⁄
,132L

	)

114 
	#SN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "öã∫©i⁄Æ-‹g™iz©i⁄s"

	)

115 
	#LN_öã∫©i⁄Æ_‹g™iz©i⁄s
 "I¡î«ti⁄Æ Org™iz©i⁄s"

	)

116 
	#NID_öã∫©i⁄Æ_‹g™iz©i⁄s
 647

	)

117 
	#OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
 
OBJ_joöt_iso_ôu_t
,23L

	)

119 
	#SN_w≠
 "w≠"

	)

120 
	#NID_w≠
 678

	)

121 
	#OBJ_w≠
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,43L

	)

123 
	#SN_w≠_wsg
 "w≠-wsg"

	)

124 
	#NID_w≠_wsg
 679

	)

125 
	#OBJ_w≠_wsg
 
OBJ_w≠
,1L

	)

127 
	#SN_£À˘ed_©åibuã_ty≥s
 "£À˘ed-©åibuã-ty≥s"

	)

128 
	#LN_£À˘ed_©åibuã_ty≥s
 "Sñe˘ed Aâribuã Ty≥s"

	)

129 
	#NID_£À˘ed_©åibuã_ty≥s
 394

	)

130 
	#OBJ_£À˘ed_©åibuã_ty≥s
 
OBJ_joöt_iso_ôu_t
,5L,1L,5L

	)

132 
	#SN_˛óøn˚
 "˛óøn˚"

	)

133 
	#NID_˛óøn˚
 395

	)

134 
	#OBJ_˛óøn˚
 
OBJ_£À˘ed_©åibuã_ty≥s
,55L

	)

136 
	#SN_ISO_US
 "ISO-US"

	)

137 
	#LN_ISO_US
 "ISO US Membî Body"

	)

138 
	#NID_ISO_US
 183

	)

139 
	#OBJ_ISO_US
 
OBJ_membî_body
,840L

	)

141 
	#SN_X9_57
 "X9-57"

	)

142 
	#LN_X9_57
 "X9.57"

	)

143 
	#NID_X9_57
 184

	)

144 
	#OBJ_X9_57
 
OBJ_ISO_US
,10040L

	)

146 
	#SN_X9cm
 "X9cm"

	)

147 
	#LN_X9cm
 "X9.57 CM ?"

	)

148 
	#NID_X9cm
 185

	)

149 
	#OBJ_X9cm
 
OBJ_X9_57
,4L

	)

151 
	#SN_dß
 "DSA"

	)

152 
	#LN_dß
 "dßEn¸y±i⁄"

	)

153 
	#NID_dß
 116

	)

154 
	#OBJ_dß
 
OBJ_X9cm
,1L

	)

156 
	#SN_dßWôhSHA1
 "DSA-SHA1"

	)

157 
	#LN_dßWôhSHA1
 "dßWôhSHA1"

	)

158 
	#NID_dßWôhSHA1
 113

	)

159 
	#OBJ_dßWôhSHA1
 
OBJ_X9cm
,3L

	)

161 
	#SN_™si_X9_62
 "™si-X9-62"

	)

162 
	#LN_™si_X9_62
 "ANSI X9.62"

	)

163 
	#NID_™si_X9_62
 405

	)

164 
	#OBJ_™si_X9_62
 
OBJ_ISO_US
,10045L

	)

166 
	#OBJ_X9_62_id_fõldTy≥
 
OBJ_™si_X9_62
,1L

	)

168 
	#SN_X9_62_¥ime_fõld
 "¥ime-fõld"

	)

169 
	#NID_X9_62_¥ime_fõld
 406

	)

170 
	#OBJ_X9_62_¥ime_fõld
 
OBJ_X9_62_id_fõldTy≥
,1L

	)

172 
	#SN_X9_62_ch¨a˘îi°ic_two_fõld
 "ch¨a˘îi°ic-two-fõld"

	)

173 
	#NID_X9_62_ch¨a˘îi°ic_two_fõld
 407

	)

174 
	#OBJ_X9_62_ch¨a˘îi°ic_two_fõld
 
OBJ_X9_62_id_fõldTy≥
,2L

	)

176 
	#SN_X9_62_id_ch¨a˘îi°ic_two_basis
 "id-ch¨a˘îi°ic-two-basis"

	)

177 
	#NID_X9_62_id_ch¨a˘îi°ic_two_basis
 680

	)

178 
	#OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
 
OBJ_X9_62_ch¨a˘îi°ic_two_fõld
,3L

	)

180 
	#SN_X9_62_⁄Basis
 "⁄Basis"

	)

181 
	#NID_X9_62_⁄Basis
 681

	)

182 
	#OBJ_X9_62_⁄Basis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,1L

	)

184 
	#SN_X9_62_çBasis
 "çBasis"

	)

185 
	#NID_X9_62_çBasis
 682

	)

186 
	#OBJ_X9_62_çBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,2L

	)

188 
	#SN_X9_62_µBasis
 "µBasis"

	)

189 
	#NID_X9_62_µBasis
 683

	)

190 
	#OBJ_X9_62_µBasis
 
OBJ_X9_62_id_ch¨a˘îi°ic_two_basis
,3L

	)

192 
	#OBJ_X9_62_id_publicKeyTy≥
 
OBJ_™si_X9_62
,2L

	)

194 
	#SN_X9_62_id_ecPublicKey
 "id-ecPublicKey"

	)

195 
	#NID_X9_62_id_ecPublicKey
 408

	)

196 
	#OBJ_X9_62_id_ecPublicKey
 
OBJ_X9_62_id_publicKeyTy≥
,1L

	)

198 
	#OBJ_X9_62_ñlùticCurve
 
OBJ_™si_X9_62
,3L

	)

200 
	#OBJ_X9_62_c_TwoCurve
 
OBJ_X9_62_ñlùticCurve
,0L

	)

202 
	#SN_X9_62_c2≤b163v1
 "c2≤b163v1"

	)

203 
	#NID_X9_62_c2≤b163v1
 684

	)

204 
	#OBJ_X9_62_c2≤b163v1
 
OBJ_X9_62_c_TwoCurve
,1L

	)

206 
	#SN_X9_62_c2≤b163v2
 "c2≤b163v2"

	)

207 
	#NID_X9_62_c2≤b163v2
 685

	)

208 
	#OBJ_X9_62_c2≤b163v2
 
OBJ_X9_62_c_TwoCurve
,2L

	)

210 
	#SN_X9_62_c2≤b163v3
 "c2≤b163v3"

	)

211 
	#NID_X9_62_c2≤b163v3
 686

	)

212 
	#OBJ_X9_62_c2≤b163v3
 
OBJ_X9_62_c_TwoCurve
,3L

	)

214 
	#SN_X9_62_c2≤b176v1
 "c2≤b176v1"

	)

215 
	#NID_X9_62_c2≤b176v1
 687

	)

216 
	#OBJ_X9_62_c2≤b176v1
 
OBJ_X9_62_c_TwoCurve
,4L

	)

218 
	#SN_X9_62_c2äb191v1
 "c2äb191v1"

	)

219 
	#NID_X9_62_c2äb191v1
 688

	)

220 
	#OBJ_X9_62_c2äb191v1
 
OBJ_X9_62_c_TwoCurve
,5L

	)

222 
	#SN_X9_62_c2äb191v2
 "c2äb191v2"

	)

223 
	#NID_X9_62_c2äb191v2
 689

	)

224 
	#OBJ_X9_62_c2äb191v2
 
OBJ_X9_62_c_TwoCurve
,6L

	)

226 
	#SN_X9_62_c2äb191v3
 "c2äb191v3"

	)

227 
	#NID_X9_62_c2äb191v3
 690

	)

228 
	#OBJ_X9_62_c2äb191v3
 
OBJ_X9_62_c_TwoCurve
,7L

	)

230 
	#SN_X9_62_c2⁄b191v4
 "c2⁄b191v4"

	)

231 
	#NID_X9_62_c2⁄b191v4
 691

	)

232 
	#OBJ_X9_62_c2⁄b191v4
 
OBJ_X9_62_c_TwoCurve
,8L

	)

234 
	#SN_X9_62_c2⁄b191v5
 "c2⁄b191v5"

	)

235 
	#NID_X9_62_c2⁄b191v5
 692

	)

236 
	#OBJ_X9_62_c2⁄b191v5
 
OBJ_X9_62_c_TwoCurve
,9L

	)

238 
	#SN_X9_62_c2≤b208w1
 "c2≤b208w1"

	)

239 
	#NID_X9_62_c2≤b208w1
 693

	)

240 
	#OBJ_X9_62_c2≤b208w1
 
OBJ_X9_62_c_TwoCurve
,10L

	)

242 
	#SN_X9_62_c2äb239v1
 "c2äb239v1"

	)

243 
	#NID_X9_62_c2äb239v1
 694

	)

244 
	#OBJ_X9_62_c2äb239v1
 
OBJ_X9_62_c_TwoCurve
,11L

	)

246 
	#SN_X9_62_c2äb239v2
 "c2äb239v2"

	)

247 
	#NID_X9_62_c2äb239v2
 695

	)

248 
	#OBJ_X9_62_c2äb239v2
 
OBJ_X9_62_c_TwoCurve
,12L

	)

250 
	#SN_X9_62_c2äb239v3
 "c2äb239v3"

	)

251 
	#NID_X9_62_c2äb239v3
 696

	)

252 
	#OBJ_X9_62_c2äb239v3
 
OBJ_X9_62_c_TwoCurve
,13L

	)

254 
	#SN_X9_62_c2⁄b239v4
 "c2⁄b239v4"

	)

255 
	#NID_X9_62_c2⁄b239v4
 697

	)

256 
	#OBJ_X9_62_c2⁄b239v4
 
OBJ_X9_62_c_TwoCurve
,14L

	)

258 
	#SN_X9_62_c2⁄b239v5
 "c2⁄b239v5"

	)

259 
	#NID_X9_62_c2⁄b239v5
 698

	)

260 
	#OBJ_X9_62_c2⁄b239v5
 
OBJ_X9_62_c_TwoCurve
,15L

	)

262 
	#SN_X9_62_c2≤b272w1
 "c2≤b272w1"

	)

263 
	#NID_X9_62_c2≤b272w1
 699

	)

264 
	#OBJ_X9_62_c2≤b272w1
 
OBJ_X9_62_c_TwoCurve
,16L

	)

266 
	#SN_X9_62_c2≤b304w1
 "c2≤b304w1"

	)

267 
	#NID_X9_62_c2≤b304w1
 700

	)

268 
	#OBJ_X9_62_c2≤b304w1
 
OBJ_X9_62_c_TwoCurve
,17L

	)

270 
	#SN_X9_62_c2äb359v1
 "c2äb359v1"

	)

271 
	#NID_X9_62_c2äb359v1
 701

	)

272 
	#OBJ_X9_62_c2äb359v1
 
OBJ_X9_62_c_TwoCurve
,18L

	)

274 
	#SN_X9_62_c2≤b368w1
 "c2≤b368w1"

	)

275 
	#NID_X9_62_c2≤b368w1
 702

	)

276 
	#OBJ_X9_62_c2≤b368w1
 
OBJ_X9_62_c_TwoCurve
,19L

	)

278 
	#SN_X9_62_c2äb431r1
 "c2äb431r1"

	)

279 
	#NID_X9_62_c2äb431r1
 703

	)

280 
	#OBJ_X9_62_c2äb431r1
 
OBJ_X9_62_c_TwoCurve
,20L

	)

282 
	#OBJ_X9_62_¥imeCurve
 
OBJ_X9_62_ñlùticCurve
,1L

	)

284 
	#SN_X9_62_¥ime192v1
 "¥ime192v1"

	)

285 
	#NID_X9_62_¥ime192v1
 409

	)

286 
	#OBJ_X9_62_¥ime192v1
 
OBJ_X9_62_¥imeCurve
,1L

	)

288 
	#SN_X9_62_¥ime192v2
 "¥ime192v2"

	)

289 
	#NID_X9_62_¥ime192v2
 410

	)

290 
	#OBJ_X9_62_¥ime192v2
 
OBJ_X9_62_¥imeCurve
,2L

	)

292 
	#SN_X9_62_¥ime192v3
 "¥ime192v3"

	)

293 
	#NID_X9_62_¥ime192v3
 411

	)

294 
	#OBJ_X9_62_¥ime192v3
 
OBJ_X9_62_¥imeCurve
,3L

	)

296 
	#SN_X9_62_¥ime239v1
 "¥ime239v1"

	)

297 
	#NID_X9_62_¥ime239v1
 412

	)

298 
	#OBJ_X9_62_¥ime239v1
 
OBJ_X9_62_¥imeCurve
,4L

	)

300 
	#SN_X9_62_¥ime239v2
 "¥ime239v2"

	)

301 
	#NID_X9_62_¥ime239v2
 413

	)

302 
	#OBJ_X9_62_¥ime239v2
 
OBJ_X9_62_¥imeCurve
,5L

	)

304 
	#SN_X9_62_¥ime239v3
 "¥ime239v3"

	)

305 
	#NID_X9_62_¥ime239v3
 414

	)

306 
	#OBJ_X9_62_¥ime239v3
 
OBJ_X9_62_¥imeCurve
,6L

	)

308 
	#SN_X9_62_¥ime256v1
 "¥ime256v1"

	)

309 
	#NID_X9_62_¥ime256v1
 415

	)

310 
	#OBJ_X9_62_¥ime256v1
 
OBJ_X9_62_¥imeCurve
,7L

	)

312 
	#OBJ_X9_62_id_ecSigTy≥
 
OBJ_™si_X9_62
,4L

	)

314 
	#SN_ecdß_wôh_SHA1
 "ecdß-wôh-SHA1"

	)

315 
	#NID_ecdß_wôh_SHA1
 416

	)

316 
	#OBJ_ecdß_wôh_SHA1
 
OBJ_X9_62_id_ecSigTy≥
,1L

	)

318 
	#SN_ecdß_wôh_Recommíded
 "ecdß-wôh-Recommíded"

	)

319 
	#NID_ecdß_wôh_Recommíded
 791

	)

320 
	#OBJ_ecdß_wôh_Recommíded
 
OBJ_X9_62_id_ecSigTy≥
,2L

	)

322 
	#SN_ecdß_wôh_S≥cifõd
 "ecdß-wôh-S≥cifõd"

	)

323 
	#NID_ecdß_wôh_S≥cifõd
 792

	)

324 
	#OBJ_ecdß_wôh_S≥cifõd
 
OBJ_X9_62_id_ecSigTy≥
,3L

	)

326 
	#SN_ecdß_wôh_SHA224
 "ecdß-wôh-SHA224"

	)

327 
	#NID_ecdß_wôh_SHA224
 793

	)

328 
	#OBJ_ecdß_wôh_SHA224
 
OBJ_ecdß_wôh_S≥cifõd
,1L

	)

330 
	#SN_ecdß_wôh_SHA256
 "ecdß-wôh-SHA256"

	)

331 
	#NID_ecdß_wôh_SHA256
 794

	)

332 
	#OBJ_ecdß_wôh_SHA256
 
OBJ_ecdß_wôh_S≥cifõd
,2L

	)

334 
	#SN_ecdß_wôh_SHA384
 "ecdß-wôh-SHA384"

	)

335 
	#NID_ecdß_wôh_SHA384
 795

	)

336 
	#OBJ_ecdß_wôh_SHA384
 
OBJ_ecdß_wôh_S≥cifõd
,3L

	)

338 
	#SN_ecdß_wôh_SHA512
 "ecdß-wôh-SHA512"

	)

339 
	#NID_ecdß_wôh_SHA512
 796

	)

340 
	#OBJ_ecdß_wôh_SHA512
 
OBJ_ecdß_wôh_S≥cifõd
,4L

	)

342 
	#OBJ_£cg_ñlùticCurve
 
OBJ_˚πicom_¨c
,0L

	)

344 
	#SN_£˝112r1
 "£˝112r1"

	)

345 
	#NID_£˝112r1
 704

	)

346 
	#OBJ_£˝112r1
 
OBJ_£cg_ñlùticCurve
,6L

	)

348 
	#SN_£˝112r2
 "£˝112r2"

	)

349 
	#NID_£˝112r2
 705

	)

350 
	#OBJ_£˝112r2
 
OBJ_£cg_ñlùticCurve
,7L

	)

352 
	#SN_£˝128r1
 "£˝128r1"

	)

353 
	#NID_£˝128r1
 706

	)

354 
	#OBJ_£˝128r1
 
OBJ_£cg_ñlùticCurve
,28L

	)

356 
	#SN_£˝128r2
 "£˝128r2"

	)

357 
	#NID_£˝128r2
 707

	)

358 
	#OBJ_£˝128r2
 
OBJ_£cg_ñlùticCurve
,29L

	)

360 
	#SN_£˝160k1
 "£˝160k1"

	)

361 
	#NID_£˝160k1
 708

	)

362 
	#OBJ_£˝160k1
 
OBJ_£cg_ñlùticCurve
,9L

	)

364 
	#SN_£˝160r1
 "£˝160r1"

	)

365 
	#NID_£˝160r1
 709

	)

366 
	#OBJ_£˝160r1
 
OBJ_£cg_ñlùticCurve
,8L

	)

368 
	#SN_£˝160r2
 "£˝160r2"

	)

369 
	#NID_£˝160r2
 710

	)

370 
	#OBJ_£˝160r2
 
OBJ_£cg_ñlùticCurve
,30L

	)

372 
	#SN_£˝192k1
 "£˝192k1"

	)

373 
	#NID_£˝192k1
 711

	)

374 
	#OBJ_£˝192k1
 
OBJ_£cg_ñlùticCurve
,31L

	)

376 
	#SN_£˝224k1
 "£˝224k1"

	)

377 
	#NID_£˝224k1
 712

	)

378 
	#OBJ_£˝224k1
 
OBJ_£cg_ñlùticCurve
,32L

	)

380 
	#SN_£˝224r1
 "£˝224r1"

	)

381 
	#NID_£˝224r1
 713

	)

382 
	#OBJ_£˝224r1
 
OBJ_£cg_ñlùticCurve
,33L

	)

384 
	#SN_£˝256k1
 "£˝256k1"

	)

385 
	#NID_£˝256k1
 714

	)

386 
	#OBJ_£˝256k1
 
OBJ_£cg_ñlùticCurve
,10L

	)

388 
	#SN_£˝384r1
 "£˝384r1"

	)

389 
	#NID_£˝384r1
 715

	)

390 
	#OBJ_£˝384r1
 
OBJ_£cg_ñlùticCurve
,34L

	)

392 
	#SN_£˝521r1
 "£˝521r1"

	)

393 
	#NID_£˝521r1
 716

	)

394 
	#OBJ_£˝521r1
 
OBJ_£cg_ñlùticCurve
,35L

	)

396 
	#SN_£˘113r1
 "£˘113r1"

	)

397 
	#NID_£˘113r1
 717

	)

398 
	#OBJ_£˘113r1
 
OBJ_£cg_ñlùticCurve
,4L

	)

400 
	#SN_£˘113r2
 "£˘113r2"

	)

401 
	#NID_£˘113r2
 718

	)

402 
	#OBJ_£˘113r2
 
OBJ_£cg_ñlùticCurve
,5L

	)

404 
	#SN_£˘131r1
 "£˘131r1"

	)

405 
	#NID_£˘131r1
 719

	)

406 
	#OBJ_£˘131r1
 
OBJ_£cg_ñlùticCurve
,22L

	)

408 
	#SN_£˘131r2
 "£˘131r2"

	)

409 
	#NID_£˘131r2
 720

	)

410 
	#OBJ_£˘131r2
 
OBJ_£cg_ñlùticCurve
,23L

	)

412 
	#SN_£˘163k1
 "£˘163k1"

	)

413 
	#NID_£˘163k1
 721

	)

414 
	#OBJ_£˘163k1
 
OBJ_£cg_ñlùticCurve
,1L

	)

416 
	#SN_£˘163r1
 "£˘163r1"

	)

417 
	#NID_£˘163r1
 722

	)

418 
	#OBJ_£˘163r1
 
OBJ_£cg_ñlùticCurve
,2L

	)

420 
	#SN_£˘163r2
 "£˘163r2"

	)

421 
	#NID_£˘163r2
 723

	)

422 
	#OBJ_£˘163r2
 
OBJ_£cg_ñlùticCurve
,15L

	)

424 
	#SN_£˘193r1
 "£˘193r1"

	)

425 
	#NID_£˘193r1
 724

	)

426 
	#OBJ_£˘193r1
 
OBJ_£cg_ñlùticCurve
,24L

	)

428 
	#SN_£˘193r2
 "£˘193r2"

	)

429 
	#NID_£˘193r2
 725

	)

430 
	#OBJ_£˘193r2
 
OBJ_£cg_ñlùticCurve
,25L

	)

432 
	#SN_£˘233k1
 "£˘233k1"

	)

433 
	#NID_£˘233k1
 726

	)

434 
	#OBJ_£˘233k1
 
OBJ_£cg_ñlùticCurve
,26L

	)

436 
	#SN_£˘233r1
 "£˘233r1"

	)

437 
	#NID_£˘233r1
 727

	)

438 
	#OBJ_£˘233r1
 
OBJ_£cg_ñlùticCurve
,27L

	)

440 
	#SN_£˘239k1
 "£˘239k1"

	)

441 
	#NID_£˘239k1
 728

	)

442 
	#OBJ_£˘239k1
 
OBJ_£cg_ñlùticCurve
,3L

	)

444 
	#SN_£˘283k1
 "£˘283k1"

	)

445 
	#NID_£˘283k1
 729

	)

446 
	#OBJ_£˘283k1
 
OBJ_£cg_ñlùticCurve
,16L

	)

448 
	#SN_£˘283r1
 "£˘283r1"

	)

449 
	#NID_£˘283r1
 730

	)

450 
	#OBJ_£˘283r1
 
OBJ_£cg_ñlùticCurve
,17L

	)

452 
	#SN_£˘409k1
 "£˘409k1"

	)

453 
	#NID_£˘409k1
 731

	)

454 
	#OBJ_£˘409k1
 
OBJ_£cg_ñlùticCurve
,36L

	)

456 
	#SN_£˘409r1
 "£˘409r1"

	)

457 
	#NID_£˘409r1
 732

	)

458 
	#OBJ_£˘409r1
 
OBJ_£cg_ñlùticCurve
,37L

	)

460 
	#SN_£˘571k1
 "£˘571k1"

	)

461 
	#NID_£˘571k1
 733

	)

462 
	#OBJ_£˘571k1
 
OBJ_£cg_ñlùticCurve
,38L

	)

464 
	#SN_£˘571r1
 "£˘571r1"

	)

465 
	#NID_£˘571r1
 734

	)

466 
	#OBJ_£˘571r1
 
OBJ_£cg_ñlùticCurve
,39L

	)

468 
	#OBJ_w≠_wsg_idm_ecid
 
OBJ_w≠_wsg
,4L

	)

470 
	#SN_w≠_wsg_idm_ecid_wés1
 "w≠-wsg-idm-ecid-wés1"

	)

471 
	#NID_w≠_wsg_idm_ecid_wés1
 735

	)

472 
	#OBJ_w≠_wsg_idm_ecid_wés1
 
OBJ_w≠_wsg_idm_ecid
,1L

	)

474 
	#SN_w≠_wsg_idm_ecid_wés3
 "w≠-wsg-idm-ecid-wés3"

	)

475 
	#NID_w≠_wsg_idm_ecid_wés3
 736

	)

476 
	#OBJ_w≠_wsg_idm_ecid_wés3
 
OBJ_w≠_wsg_idm_ecid
,3L

	)

478 
	#SN_w≠_wsg_idm_ecid_wés4
 "w≠-wsg-idm-ecid-wés4"

	)

479 
	#NID_w≠_wsg_idm_ecid_wés4
 737

	)

480 
	#OBJ_w≠_wsg_idm_ecid_wés4
 
OBJ_w≠_wsg_idm_ecid
,4L

	)

482 
	#SN_w≠_wsg_idm_ecid_wés5
 "w≠-wsg-idm-ecid-wés5"

	)

483 
	#NID_w≠_wsg_idm_ecid_wés5
 738

	)

484 
	#OBJ_w≠_wsg_idm_ecid_wés5
 
OBJ_w≠_wsg_idm_ecid
,5L

	)

486 
	#SN_w≠_wsg_idm_ecid_wés6
 "w≠-wsg-idm-ecid-wés6"

	)

487 
	#NID_w≠_wsg_idm_ecid_wés6
 739

	)

488 
	#OBJ_w≠_wsg_idm_ecid_wés6
 
OBJ_w≠_wsg_idm_ecid
,6L

	)

490 
	#SN_w≠_wsg_idm_ecid_wés7
 "w≠-wsg-idm-ecid-wés7"

	)

491 
	#NID_w≠_wsg_idm_ecid_wés7
 740

	)

492 
	#OBJ_w≠_wsg_idm_ecid_wés7
 
OBJ_w≠_wsg_idm_ecid
,7L

	)

494 
	#SN_w≠_wsg_idm_ecid_wés8
 "w≠-wsg-idm-ecid-wés8"

	)

495 
	#NID_w≠_wsg_idm_ecid_wés8
 741

	)

496 
	#OBJ_w≠_wsg_idm_ecid_wés8
 
OBJ_w≠_wsg_idm_ecid
,8L

	)

498 
	#SN_w≠_wsg_idm_ecid_wés9
 "w≠-wsg-idm-ecid-wés9"

	)

499 
	#NID_w≠_wsg_idm_ecid_wés9
 742

	)

500 
	#OBJ_w≠_wsg_idm_ecid_wés9
 
OBJ_w≠_wsg_idm_ecid
,9L

	)

502 
	#SN_w≠_wsg_idm_ecid_wés10
 "w≠-wsg-idm-ecid-wés10"

	)

503 
	#NID_w≠_wsg_idm_ecid_wés10
 743

	)

504 
	#OBJ_w≠_wsg_idm_ecid_wés10
 
OBJ_w≠_wsg_idm_ecid
,10L

	)

506 
	#SN_w≠_wsg_idm_ecid_wés11
 "w≠-wsg-idm-ecid-wés11"

	)

507 
	#NID_w≠_wsg_idm_ecid_wés11
 744

	)

508 
	#OBJ_w≠_wsg_idm_ecid_wés11
 
OBJ_w≠_wsg_idm_ecid
,11L

	)

510 
	#SN_w≠_wsg_idm_ecid_wés12
 "w≠-wsg-idm-ecid-wés12"

	)

511 
	#NID_w≠_wsg_idm_ecid_wés12
 745

	)

512 
	#OBJ_w≠_wsg_idm_ecid_wés12
 
OBJ_w≠_wsg_idm_ecid
,12L

	)

514 
	#SN_ˇ°5_cbc
 "CAST5-CBC"

	)

515 
	#LN_ˇ°5_cbc
 "ˇ°5-cbc"

	)

516 
	#NID_ˇ°5_cbc
 108

	)

517 
	#OBJ_ˇ°5_cbc
 
OBJ_ISO_US
,113533L,7L,66L,10L

	)

519 
	#SN_ˇ°5_ecb
 "CAST5-ECB"

	)

520 
	#LN_ˇ°5_ecb
 "ˇ°5-ecb"

	)

521 
	#NID_ˇ°5_ecb
 109

	)

523 
	#SN_ˇ°5_cfb64
 "CAST5-CFB"

	)

524 
	#LN_ˇ°5_cfb64
 "ˇ°5-cfb"

	)

525 
	#NID_ˇ°5_cfb64
 110

	)

527 
	#SN_ˇ°5_ofb64
 "CAST5-OFB"

	)

528 
	#LN_ˇ°5_ofb64
 "ˇ°5-ofb"

	)

529 
	#NID_ˇ°5_ofb64
 111

	)

531 
	#LN_pbeWôhMD5AndCa°5_CBC
 "pbeWôhMD5AndCa°5CBC"

	)

532 
	#NID_pbeWôhMD5AndCa°5_CBC
 112

	)

533 
	#OBJ_pbeWôhMD5AndCa°5_CBC
 
OBJ_ISO_US
,113533L,7L,66L,12L

	)

535 
	#SN_id_Passw‹dBa£dMAC
 "id-Passw‹dBa£dMAC"

	)

536 
	#LN_id_Passw‹dBa£dMAC
 "∑ssw‹d ba£d MAC"

	)

537 
	#NID_id_Passw‹dBa£dMAC
 782

	)

538 
	#OBJ_id_Passw‹dBa£dMAC
 
OBJ_ISO_US
,113533L,7L,66L,13L

	)

540 
	#SN_id_DHBa£dMac
 "id-DHBa£dMac"

	)

541 
	#LN_id_DHBa£dMac
 "Diffõ-Hñlm™ ba£d MAC"

	)

542 
	#NID_id_DHBa£dMac
 783

	)

543 
	#OBJ_id_DHBa£dMac
 
OBJ_ISO_US
,113533L,7L,66L,30L

	)

545 
	#SN_rßdsi
 "rßdsi"

	)

546 
	#LN_rßdsi
 "RSA D©®Securôy, Inc."

	)

547 
	#NID_rßdsi
 1

	)

548 
	#OBJ_rßdsi
 
OBJ_ISO_US
,113549L

	)

550 
	#SN_pkcs
 "pkcs"

	)

551 
	#LN_pkcs
 "RSA D©®Securôy, Inc. PKCS"

	)

552 
	#NID_pkcs
 2

	)

553 
	#OBJ_pkcs
 
OBJ_rßdsi
,1L

	)

555 
	#SN_pkcs1
 "pkcs1"

	)

556 
	#NID_pkcs1
 186

	)

557 
	#OBJ_pkcs1
 
OBJ_pkcs
,1L

	)

559 
	#LN_rßEn¸y±i⁄
 "rßEn¸y±i⁄"

	)

560 
	#NID_rßEn¸y±i⁄
 6

	)

561 
	#OBJ_rßEn¸y±i⁄
 
OBJ_pkcs1
,1L

	)

563 
	#SN_md2WôhRSAEn¸y±i⁄
 "RSA-MD2"

	)

564 
	#LN_md2WôhRSAEn¸y±i⁄
 "md2WôhRSAEn¸y±i⁄"

	)

565 
	#NID_md2WôhRSAEn¸y±i⁄
 7

	)

566 
	#OBJ_md2WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,2L

	)

568 
	#SN_md4WôhRSAEn¸y±i⁄
 "RSA-MD4"

	)

569 
	#LN_md4WôhRSAEn¸y±i⁄
 "md4WôhRSAEn¸y±i⁄"

	)

570 
	#NID_md4WôhRSAEn¸y±i⁄
 396

	)

571 
	#OBJ_md4WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,3L

	)

573 
	#SN_md5WôhRSAEn¸y±i⁄
 "RSA-MD5"

	)

574 
	#LN_md5WôhRSAEn¸y±i⁄
 "md5WôhRSAEn¸y±i⁄"

	)

575 
	#NID_md5WôhRSAEn¸y±i⁄
 8

	)

576 
	#OBJ_md5WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,4L

	)

578 
	#SN_sha1WôhRSAEn¸y±i⁄
 "RSA-SHA1"

	)

579 
	#LN_sha1WôhRSAEn¸y±i⁄
 "sha1WôhRSAEn¸y±i⁄"

	)

580 
	#NID_sha1WôhRSAEn¸y±i⁄
 65

	)

581 
	#OBJ_sha1WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,5L

	)

583 
	#SN_rßesO´p
 "RSAES-OAEP"

	)

584 
	#LN_rßesO´p
 "rßesO´p"

	)

585 
	#NID_rßesO´p
 919

	)

586 
	#OBJ_rßesO´p
 
OBJ_pkcs1
,7L

	)

588 
	#SN_mgf1
 "MGF1"

	)

589 
	#LN_mgf1
 "mgf1"

	)

590 
	#NID_mgf1
 911

	)

591 
	#OBJ_mgf1
 
OBJ_pkcs1
,8L

	)

593 
	#SN_rßsßPss
 "RSASSA-PSS"

	)

594 
	#LN_rßsßPss
 "rßsßPss"

	)

595 
	#NID_rßsßPss
 912

	)

596 
	#OBJ_rßsßPss
 
OBJ_pkcs1
,10L

	)

598 
	#SN_sha256WôhRSAEn¸y±i⁄
 "RSA-SHA256"

	)

599 
	#LN_sha256WôhRSAEn¸y±i⁄
 "sha256WôhRSAEn¸y±i⁄"

	)

600 
	#NID_sha256WôhRSAEn¸y±i⁄
 668

	)

601 
	#OBJ_sha256WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,11L

	)

603 
	#SN_sha384WôhRSAEn¸y±i⁄
 "RSA-SHA384"

	)

604 
	#LN_sha384WôhRSAEn¸y±i⁄
 "sha384WôhRSAEn¸y±i⁄"

	)

605 
	#NID_sha384WôhRSAEn¸y±i⁄
 669

	)

606 
	#OBJ_sha384WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,12L

	)

608 
	#SN_sha512WôhRSAEn¸y±i⁄
 "RSA-SHA512"

	)

609 
	#LN_sha512WôhRSAEn¸y±i⁄
 "sha512WôhRSAEn¸y±i⁄"

	)

610 
	#NID_sha512WôhRSAEn¸y±i⁄
 670

	)

611 
	#OBJ_sha512WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,13L

	)

613 
	#SN_sha224WôhRSAEn¸y±i⁄
 "RSA-SHA224"

	)

614 
	#LN_sha224WôhRSAEn¸y±i⁄
 "sha224WôhRSAEn¸y±i⁄"

	)

615 
	#NID_sha224WôhRSAEn¸y±i⁄
 671

	)

616 
	#OBJ_sha224WôhRSAEn¸y±i⁄
 
OBJ_pkcs1
,14L

	)

618 
	#SN_pkcs3
 "pkcs3"

	)

619 
	#NID_pkcs3
 27

	)

620 
	#OBJ_pkcs3
 
OBJ_pkcs
,3L

	)

622 
	#LN_dhKeyAgªemít
 "dhKeyAgªemít"

	)

623 
	#NID_dhKeyAgªemít
 28

	)

624 
	#OBJ_dhKeyAgªemít
 
OBJ_pkcs3
,1L

	)

626 
	#SN_pkcs5
 "pkcs5"

	)

627 
	#NID_pkcs5
 187

	)

628 
	#OBJ_pkcs5
 
OBJ_pkcs
,5L

	)

630 
	#SN_pbeWôhMD2AndDES_CBC
 "PBE-MD2-DES"

	)

631 
	#LN_pbeWôhMD2AndDES_CBC
 "pbeWôhMD2AndDES-CBC"

	)

632 
	#NID_pbeWôhMD2AndDES_CBC
 9

	)

633 
	#OBJ_pbeWôhMD2AndDES_CBC
 
OBJ_pkcs5
,1L

	)

635 
	#SN_pbeWôhMD5AndDES_CBC
 "PBE-MD5-DES"

	)

636 
	#LN_pbeWôhMD5AndDES_CBC
 "pbeWôhMD5AndDES-CBC"

	)

637 
	#NID_pbeWôhMD5AndDES_CBC
 10

	)

638 
	#OBJ_pbeWôhMD5AndDES_CBC
 
OBJ_pkcs5
,3L

	)

640 
	#SN_pbeWôhMD2AndRC2_CBC
 "PBE-MD2-RC2-64"

	)

641 
	#LN_pbeWôhMD2AndRC2_CBC
 "pbeWôhMD2AndRC2-CBC"

	)

642 
	#NID_pbeWôhMD2AndRC2_CBC
 168

	)

643 
	#OBJ_pbeWôhMD2AndRC2_CBC
 
OBJ_pkcs5
,4L

	)

645 
	#SN_pbeWôhMD5AndRC2_CBC
 "PBE-MD5-RC2-64"

	)

646 
	#LN_pbeWôhMD5AndRC2_CBC
 "pbeWôhMD5AndRC2-CBC"

	)

647 
	#NID_pbeWôhMD5AndRC2_CBC
 169

	)

648 
	#OBJ_pbeWôhMD5AndRC2_CBC
 
OBJ_pkcs5
,6L

	)

650 
	#SN_pbeWôhSHA1AndDES_CBC
 "PBE-SHA1-DES"

	)

651 
	#LN_pbeWôhSHA1AndDES_CBC
 "pbeWôhSHA1AndDES-CBC"

	)

652 
	#NID_pbeWôhSHA1AndDES_CBC
 170

	)

653 
	#OBJ_pbeWôhSHA1AndDES_CBC
 
OBJ_pkcs5
,10L

	)

655 
	#SN_pbeWôhSHA1AndRC2_CBC
 "PBE-SHA1-RC2-64"

	)

656 
	#LN_pbeWôhSHA1AndRC2_CBC
 "pbeWôhSHA1AndRC2-CBC"

	)

657 
	#NID_pbeWôhSHA1AndRC2_CBC
 68

	)

658 
	#OBJ_pbeWôhSHA1AndRC2_CBC
 
OBJ_pkcs5
,11L

	)

660 
	#LN_id_pbkdf2
 "PBKDF2"

	)

661 
	#NID_id_pbkdf2
 69

	)

662 
	#OBJ_id_pbkdf2
 
OBJ_pkcs5
,12L

	)

664 
	#LN_pbes2
 "PBES2"

	)

665 
	#NID_pbes2
 161

	)

666 
	#OBJ_pbes2
 
OBJ_pkcs5
,13L

	)

668 
	#LN_pbmac1
 "PBMAC1"

	)

669 
	#NID_pbmac1
 162

	)

670 
	#OBJ_pbmac1
 
OBJ_pkcs5
,14L

	)

672 
	#SN_pkcs7
 "pkcs7"

	)

673 
	#NID_pkcs7
 20

	)

674 
	#OBJ_pkcs7
 
OBJ_pkcs
,7L

	)

676 
	#LN_pkcs7_d©a
 "pkcs7-d©a"

	)

677 
	#NID_pkcs7_d©a
 21

	)

678 
	#OBJ_pkcs7_d©a
 
OBJ_pkcs7
,1L

	)

680 
	#LN_pkcs7_sig√d
 "pkcs7-sig√dD©a"

	)

681 
	#NID_pkcs7_sig√d
 22

	)

682 
	#OBJ_pkcs7_sig√d
 
OBJ_pkcs7
,2L

	)

684 
	#LN_pkcs7_ívñ›ed
 "pkcs7-ívñ›edD©a"

	)

685 
	#NID_pkcs7_ívñ›ed
 23

	)

686 
	#OBJ_pkcs7_ívñ›ed
 
OBJ_pkcs7
,3L

	)

688 
	#LN_pkcs7_sig√dAndEnvñ›ed
 "pkcs7-sig√dAndEnvñ›edD©a"

	)

689 
	#NID_pkcs7_sig√dAndEnvñ›ed
 24

	)

690 
	#OBJ_pkcs7_sig√dAndEnvñ›ed
 
OBJ_pkcs7
,4L

	)

692 
	#LN_pkcs7_dige°
 "pkcs7-dige°D©a"

	)

693 
	#NID_pkcs7_dige°
 25

	)

694 
	#OBJ_pkcs7_dige°
 
OBJ_pkcs7
,5L

	)

696 
	#LN_pkcs7_í¸y±ed
 "pkcs7-í¸y±edD©a"

	)

697 
	#NID_pkcs7_í¸y±ed
 26

	)

698 
	#OBJ_pkcs7_í¸y±ed
 
OBJ_pkcs7
,6L

	)

700 
	#SN_pkcs9
 "pkcs9"

	)

701 
	#NID_pkcs9
 47

	)

702 
	#OBJ_pkcs9
 
OBJ_pkcs
,9L

	)

704 
	#LN_pkcs9_emaûAddªss
 "emaûAddªss"

	)

705 
	#NID_pkcs9_emaûAddªss
 48

	)

706 
	#OBJ_pkcs9_emaûAddªss
 
OBJ_pkcs9
,1L

	)

708 
	#LN_pkcs9_un°ru˘uªdName
 "un°ru˘uªdName"

	)

709 
	#NID_pkcs9_un°ru˘uªdName
 49

	)

710 
	#OBJ_pkcs9_un°ru˘uªdName
 
OBJ_pkcs9
,2L

	)

712 
	#LN_pkcs9_c⁄ã¡Ty≥
 "c⁄ã¡Ty≥"

	)

713 
	#NID_pkcs9_c⁄ã¡Ty≥
 50

	)

714 
	#OBJ_pkcs9_c⁄ã¡Ty≥
 
OBJ_pkcs9
,3L

	)

716 
	#LN_pkcs9_mesßgeDige°
 "mesßgeDige°"

	)

717 
	#NID_pkcs9_mesßgeDige°
 51

	)

718 
	#OBJ_pkcs9_mesßgeDige°
 
OBJ_pkcs9
,4L

	)

720 
	#LN_pkcs9_signögTime
 "signögTime"

	)

721 
	#NID_pkcs9_signögTime
 52

	)

722 
	#OBJ_pkcs9_signögTime
 
OBJ_pkcs9
,5L

	)

724 
	#LN_pkcs9_cou¡îsig«tuª
 "cou¡îsig«tuª"

	)

725 
	#NID_pkcs9_cou¡îsig«tuª
 53

	)

726 
	#OBJ_pkcs9_cou¡îsig«tuª
 
OBJ_pkcs9
,6L

	)

728 
	#LN_pkcs9_chÆÀngePassw‹d
 "chÆÀngePassw‹d"

	)

729 
	#NID_pkcs9_chÆÀngePassw‹d
 54

	)

730 
	#OBJ_pkcs9_chÆÀngePassw‹d
 
OBJ_pkcs9
,7L

	)

732 
	#LN_pkcs9_un°ru˘uªdAddªss
 "un°ru˘uªdAddªss"

	)

733 
	#NID_pkcs9_un°ru˘uªdAddªss
 55

	)

734 
	#OBJ_pkcs9_un°ru˘uªdAddªss
 
OBJ_pkcs9
,8L

	)

736 
	#LN_pkcs9_extCîtAâribuãs
 "exãndedCîtifiˇãAâribuãs"

	)

737 
	#NID_pkcs9_extCîtAâribuãs
 56

	)

738 
	#OBJ_pkcs9_extCîtAâribuãs
 
OBJ_pkcs9
,9L

	)

740 
	#SN_ext_ªq
 "extReq"

	)

741 
	#LN_ext_ªq
 "Exãnsi⁄ Reque°"

	)

742 
	#NID_ext_ªq
 172

	)

743 
	#OBJ_ext_ªq
 
OBJ_pkcs9
,14L

	)

745 
	#SN_SMIMEC≠abûôõs
 "SMIME-CAPS"

	)

746 
	#LN_SMIMEC≠abûôõs
 "S/MIME C≠abûôõs"

	)

747 
	#NID_SMIMEC≠abûôõs
 167

	)

748 
	#OBJ_SMIMEC≠abûôõs
 
OBJ_pkcs9
,15L

	)

750 
	#SN_SMIME
 "SMIME"

	)

751 
	#LN_SMIME
 "S/MIME"

	)

752 
	#NID_SMIME
 188

	)

753 
	#OBJ_SMIME
 
OBJ_pkcs9
,16L

	)

755 
	#SN_id_smime_mod
 "id-smime-mod"

	)

756 
	#NID_id_smime_mod
 189

	)

757 
	#OBJ_id_smime_mod
 
OBJ_SMIME
,0L

	)

759 
	#SN_id_smime_˘
 "id-smime-˘"

	)

760 
	#NID_id_smime_˘
 190

	)

761 
	#OBJ_id_smime_˘
 
OBJ_SMIME
,1L

	)

763 
	#SN_id_smime_Ø
 "id-smime-Ø"

	)

764 
	#NID_id_smime_Ø
 191

	)

765 
	#OBJ_id_smime_Ø
 
OBJ_SMIME
,2L

	)

767 
	#SN_id_smime_Æg
 "id-smime-Æg"

	)

768 
	#NID_id_smime_Æg
 192

	)

769 
	#OBJ_id_smime_Æg
 
OBJ_SMIME
,3L

	)

771 
	#SN_id_smime_cd
 "id-smime-cd"

	)

772 
	#NID_id_smime_cd
 193

	)

773 
	#OBJ_id_smime_cd
 
OBJ_SMIME
,4L

	)

775 
	#SN_id_smime_•q
 "id-smime-•q"

	)

776 
	#NID_id_smime_•q
 194

	)

777 
	#OBJ_id_smime_•q
 
OBJ_SMIME
,5L

	)

779 
	#SN_id_smime_˘i
 "id-smime-˘i"

	)

780 
	#NID_id_smime_˘i
 195

	)

781 
	#OBJ_id_smime_˘i
 
OBJ_SMIME
,6L

	)

783 
	#SN_id_smime_mod_cms
 "id-smime-mod-cms"

	)

784 
	#NID_id_smime_mod_cms
 196

	)

785 
	#OBJ_id_smime_mod_cms
 
OBJ_id_smime_mod
,1L

	)

787 
	#SN_id_smime_mod_ess
 "id-smime-mod-ess"

	)

788 
	#NID_id_smime_mod_ess
 197

	)

789 
	#OBJ_id_smime_mod_ess
 
OBJ_id_smime_mod
,2L

	)

791 
	#SN_id_smime_mod_oid
 "id-smime-mod-oid"

	)

792 
	#NID_id_smime_mod_oid
 198

	)

793 
	#OBJ_id_smime_mod_oid
 
OBJ_id_smime_mod
,3L

	)

795 
	#SN_id_smime_mod_msg_v3
 "id-smime-mod-msg-v3"

	)

796 
	#NID_id_smime_mod_msg_v3
 199

	)

797 
	#OBJ_id_smime_mod_msg_v3
 
OBJ_id_smime_mod
,4L

	)

799 
	#SN_id_smime_mod_ës_eSig«tuª_88
 "id-smime-mod-ës-eSig«tuª-88"

	)

800 
	#NID_id_smime_mod_ës_eSig«tuª_88
 200

	)

801 
	#OBJ_id_smime_mod_ës_eSig«tuª_88
 
OBJ_id_smime_mod
,5L

	)

803 
	#SN_id_smime_mod_ës_eSig«tuª_97
 "id-smime-mod-ës-eSig«tuª-97"

	)

804 
	#NID_id_smime_mod_ës_eSig«tuª_97
 201

	)

805 
	#OBJ_id_smime_mod_ës_eSig«tuª_97
 
OBJ_id_smime_mod
,6L

	)

807 
	#SN_id_smime_mod_ës_eSigPﬁicy_88
 "id-smime-mod-ës-eSigPﬁicy-88"

	)

808 
	#NID_id_smime_mod_ës_eSigPﬁicy_88
 202

	)

809 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_88
 
OBJ_id_smime_mod
,7L

	)

811 
	#SN_id_smime_mod_ës_eSigPﬁicy_97
 "id-smime-mod-ës-eSigPﬁicy-97"

	)

812 
	#NID_id_smime_mod_ës_eSigPﬁicy_97
 203

	)

813 
	#OBJ_id_smime_mod_ës_eSigPﬁicy_97
 
OBJ_id_smime_mod
,8L

	)

815 
	#SN_id_smime_˘_ª˚ùt
 "id-smime-˘-ª˚ùt"

	)

816 
	#NID_id_smime_˘_ª˚ùt
 204

	)

817 
	#OBJ_id_smime_˘_ª˚ùt
 
OBJ_id_smime_˘
,1L

	)

819 
	#SN_id_smime_˘_authD©a
 "id-smime-˘-authD©a"

	)

820 
	#NID_id_smime_˘_authD©a
 205

	)

821 
	#OBJ_id_smime_˘_authD©a
 
OBJ_id_smime_˘
,2L

	)

823 
	#SN_id_smime_˘_publishCît
 "id-smime-˘-publishCît"

	)

824 
	#NID_id_smime_˘_publishCît
 206

	)

825 
	#OBJ_id_smime_˘_publishCît
 
OBJ_id_smime_˘
,3L

	)

827 
	#SN_id_smime_˘_TSTInfo
 "id-smime-˘-TSTInfo"

	)

828 
	#NID_id_smime_˘_TSTInfo
 207

	)

829 
	#OBJ_id_smime_˘_TSTInfo
 
OBJ_id_smime_˘
,4L

	)

831 
	#SN_id_smime_˘_TDTInfo
 "id-smime-˘-TDTInfo"

	)

832 
	#NID_id_smime_˘_TDTInfo
 208

	)

833 
	#OBJ_id_smime_˘_TDTInfo
 
OBJ_id_smime_˘
,5L

	)

835 
	#SN_id_smime_˘_c⁄ã¡Info
 "id-smime-˘-c⁄ã¡Info"

	)

836 
	#NID_id_smime_˘_c⁄ã¡Info
 209

	)

837 
	#OBJ_id_smime_˘_c⁄ã¡Info
 
OBJ_id_smime_˘
,6L

	)

839 
	#SN_id_smime_˘_DVCSReque°D©a
 "id-smime-˘-DVCSReque°D©a"

	)

840 
	#NID_id_smime_˘_DVCSReque°D©a
 210

	)

841 
	#OBJ_id_smime_˘_DVCSReque°D©a
 
OBJ_id_smime_˘
,7L

	)

843 
	#SN_id_smime_˘_DVCSRe•⁄£D©a
 "id-smime-˘-DVCSRe•⁄£D©a"

	)

844 
	#NID_id_smime_˘_DVCSRe•⁄£D©a
 211

	)

845 
	#OBJ_id_smime_˘_DVCSRe•⁄£D©a
 
OBJ_id_smime_˘
,8L

	)

847 
	#SN_id_smime_˘_com¥es£dD©a
 "id-smime-˘-com¥es£dD©a"

	)

848 
	#NID_id_smime_˘_com¥es£dD©a
 786

	)

849 
	#OBJ_id_smime_˘_com¥es£dD©a
 
OBJ_id_smime_˘
,9L

	)

851 
	#SN_id_˘_asciiTextWôhCRLF
 "id-˘-asciiTextWôhCRLF"

	)

852 
	#NID_id_˘_asciiTextWôhCRLF
 787

	)

853 
	#OBJ_id_˘_asciiTextWôhCRLF
 
OBJ_id_smime_˘
,27L

	)

855 
	#SN_id_smime_Ø_ª˚ùtReque°
 "id-smime-Ø-ª˚ùtReque°"

	)

856 
	#NID_id_smime_Ø_ª˚ùtReque°
 212

	)

857 
	#OBJ_id_smime_Ø_ª˚ùtReque°
 
OBJ_id_smime_Ø
,1L

	)

859 
	#SN_id_smime_Ø_£curôyLabñ
 "id-smime-Ø-£curôyLabñ"

	)

860 
	#NID_id_smime_Ø_£curôyLabñ
 213

	)

861 
	#OBJ_id_smime_Ø_£curôyLabñ
 
OBJ_id_smime_Ø
,2L

	)

863 
	#SN_id_smime_Ø_mlEx∑ndHi°‹y
 "id-smime-Ø-mlEx∑ndHi°‹y"

	)

864 
	#NID_id_smime_Ø_mlEx∑ndHi°‹y
 214

	)

865 
	#OBJ_id_smime_Ø_mlEx∑ndHi°‹y
 
OBJ_id_smime_Ø
,3L

	)

867 
	#SN_id_smime_Ø_c⁄ã¡Höt
 "id-smime-Ø-c⁄ã¡Höt"

	)

868 
	#NID_id_smime_Ø_c⁄ã¡Höt
 215

	)

869 
	#OBJ_id_smime_Ø_c⁄ã¡Höt
 
OBJ_id_smime_Ø
,4L

	)

871 
	#SN_id_smime_Ø_msgSigDige°
 "id-smime-Ø-msgSigDige°"

	)

872 
	#NID_id_smime_Ø_msgSigDige°
 216

	)

873 
	#OBJ_id_smime_Ø_msgSigDige°
 
OBJ_id_smime_Ø
,5L

	)

875 
	#SN_id_smime_Ø_íˇpC⁄ã¡Ty≥
 "id-smime-Ø-íˇpC⁄ã¡Ty≥"

	)

876 
	#NID_id_smime_Ø_íˇpC⁄ã¡Ty≥
 217

	)

877 
	#OBJ_id_smime_Ø_íˇpC⁄ã¡Ty≥
 
OBJ_id_smime_Ø
,6L

	)

879 
	#SN_id_smime_Ø_c⁄ã¡Idítifõr
 "id-smime-Ø-c⁄ã¡Idítifõr"

	)

880 
	#NID_id_smime_Ø_c⁄ã¡Idítifõr
 218

	)

881 
	#OBJ_id_smime_Ø_c⁄ã¡Idítifõr
 
OBJ_id_smime_Ø
,7L

	)

883 
	#SN_id_smime_Ø_macVÆue
 "id-smime-Ø-macVÆue"

	)

884 
	#NID_id_smime_Ø_macVÆue
 219

	)

885 
	#OBJ_id_smime_Ø_macVÆue
 
OBJ_id_smime_Ø
,8L

	)

887 
	#SN_id_smime_Ø_equivÆítLabñs
 "id-smime-Ø-equivÆítLabñs"

	)

888 
	#NID_id_smime_Ø_equivÆítLabñs
 220

	)

889 
	#OBJ_id_smime_Ø_equivÆítLabñs
 
OBJ_id_smime_Ø
,9L

	)

891 
	#SN_id_smime_Ø_c⁄ã¡Re„ªn˚
 "id-smime-Ø-c⁄ã¡Re„ªn˚"

	)

892 
	#NID_id_smime_Ø_c⁄ã¡Re„ªn˚
 221

	)

893 
	#OBJ_id_smime_Ø_c⁄ã¡Re„ªn˚
 
OBJ_id_smime_Ø
,10L

	)

895 
	#SN_id_smime_Ø_í¸ypKeyPªf
 "id-smime-Ø-í¸ypKeyPªf"

	)

896 
	#NID_id_smime_Ø_í¸ypKeyPªf
 222

	)

897 
	#OBJ_id_smime_Ø_í¸ypKeyPªf
 
OBJ_id_smime_Ø
,11L

	)

899 
	#SN_id_smime_Ø_signögCîtifiˇã
 "id-smime-Ø-signögCîtifiˇã"

	)

900 
	#NID_id_smime_Ø_signögCîtifiˇã
 223

	)

901 
	#OBJ_id_smime_Ø_signögCîtifiˇã
 
OBJ_id_smime_Ø
,12L

	)

903 
	#SN_id_smime_Ø_smimeEn¸y±Cîts
 "id-smime-Ø-smimeEn¸y±Cîts"

	)

904 
	#NID_id_smime_Ø_smimeEn¸y±Cîts
 224

	)

905 
	#OBJ_id_smime_Ø_smimeEn¸y±Cîts
 
OBJ_id_smime_Ø
,13L

	)

907 
	#SN_id_smime_Ø_timeSèmpTokí
 "id-smime-Ø-timeSèmpTokí"

	)

908 
	#NID_id_smime_Ø_timeSèmpTokí
 225

	)

909 
	#OBJ_id_smime_Ø_timeSèmpTokí
 
OBJ_id_smime_Ø
,14L

	)

911 
	#SN_id_smime_Ø_ës_sigPﬁicyId
 "id-smime-Ø-ës-sigPﬁicyId"

	)

912 
	#NID_id_smime_Ø_ës_sigPﬁicyId
 226

	)

913 
	#OBJ_id_smime_Ø_ës_sigPﬁicyId
 
OBJ_id_smime_Ø
,15L

	)

915 
	#SN_id_smime_Ø_ës_commômítTy≥
 "id-smime-Ø-ës-commômítTy≥"

	)

916 
	#NID_id_smime_Ø_ës_commômítTy≥
 227

	)

917 
	#OBJ_id_smime_Ø_ës_commômítTy≥
 
OBJ_id_smime_Ø
,16L

	)

919 
	#SN_id_smime_Ø_ës_sig√rLoˇti⁄
 "id-smime-Ø-ës-sig√rLoˇti⁄"

	)

920 
	#NID_id_smime_Ø_ës_sig√rLoˇti⁄
 228

	)

921 
	#OBJ_id_smime_Ø_ës_sig√rLoˇti⁄
 
OBJ_id_smime_Ø
,17L

	)

923 
	#SN_id_smime_Ø_ës_sig√rAâr
 "id-smime-Ø-ës-sig√rAâr"

	)

924 
	#NID_id_smime_Ø_ës_sig√rAâr
 229

	)

925 
	#OBJ_id_smime_Ø_ës_sig√rAâr
 
OBJ_id_smime_Ø
,18L

	)

927 
	#SN_id_smime_Ø_ës_ŸhîSigCît
 "id-smime-Ø-ës-ŸhîSigCît"

	)

928 
	#NID_id_smime_Ø_ës_ŸhîSigCît
 230

	)

929 
	#OBJ_id_smime_Ø_ës_ŸhîSigCît
 
OBJ_id_smime_Ø
,19L

	)

931 
	#SN_id_smime_Ø_ës_c⁄ã¡Time°amp
 "id-smime-Ø-ës-c⁄ã¡Time°amp"

	)

932 
	#NID_id_smime_Ø_ës_c⁄ã¡Time°amp
 231

	)

933 
	#OBJ_id_smime_Ø_ës_c⁄ã¡Time°amp
 
OBJ_id_smime_Ø
,20L

	)

935 
	#SN_id_smime_Ø_ës_CîtifiˇãRefs
 "id-smime-Ø-ës-CîtifiˇãRefs"

	)

936 
	#NID_id_smime_Ø_ës_CîtifiˇãRefs
 232

	)

937 
	#OBJ_id_smime_Ø_ës_CîtifiˇãRefs
 
OBJ_id_smime_Ø
,21L

	)

939 
	#SN_id_smime_Ø_ës_Revoˇti⁄Refs
 "id-smime-Ø-ës-Revoˇti⁄Refs"

	)

940 
	#NID_id_smime_Ø_ës_Revoˇti⁄Refs
 233

	)

941 
	#OBJ_id_smime_Ø_ës_Revoˇti⁄Refs
 
OBJ_id_smime_Ø
,22L

	)

943 
	#SN_id_smime_Ø_ës_˚πVÆues
 "id-smime-Ø-ës-˚πVÆues"

	)

944 
	#NID_id_smime_Ø_ës_˚πVÆues
 234

	)

945 
	#OBJ_id_smime_Ø_ës_˚πVÆues
 
OBJ_id_smime_Ø
,23L

	)

947 
	#SN_id_smime_Ø_ës_ªvoˇti⁄VÆues
 "id-smime-Ø-ës-ªvoˇti⁄VÆues"

	)

948 
	#NID_id_smime_Ø_ës_ªvoˇti⁄VÆues
 235

	)

949 
	#OBJ_id_smime_Ø_ës_ªvoˇti⁄VÆues
 
OBJ_id_smime_Ø
,24L

	)

951 
	#SN_id_smime_Ø_ës_escTimeSèmp
 "id-smime-Ø-ës-escTimeSèmp"

	)

952 
	#NID_id_smime_Ø_ës_escTimeSèmp
 236

	)

953 
	#OBJ_id_smime_Ø_ës_escTimeSèmp
 
OBJ_id_smime_Ø
,25L

	)

955 
	#SN_id_smime_Ø_ës_˚πCRLTime°amp
 "id-smime-Ø-ës-˚πCRLTime°amp"

	)

956 
	#NID_id_smime_Ø_ës_˚πCRLTime°amp
 237

	)

957 
	#OBJ_id_smime_Ø_ës_˚πCRLTime°amp
 
OBJ_id_smime_Ø
,26L

	)

959 
	#SN_id_smime_Ø_ës_¨chiveTimeSèmp
 "id-smime-Ø-ës-¨chiveTimeSèmp"

	)

960 
	#NID_id_smime_Ø_ës_¨chiveTimeSèmp
 238

	)

961 
	#OBJ_id_smime_Ø_ës_¨chiveTimeSèmp
 
OBJ_id_smime_Ø
,27L

	)

963 
	#SN_id_smime_Ø_sig«tuªTy≥
 "id-smime-Ø-sig«tuªTy≥"

	)

964 
	#NID_id_smime_Ø_sig«tuªTy≥
 239

	)

965 
	#OBJ_id_smime_Ø_sig«tuªTy≥
 
OBJ_id_smime_Ø
,28L

	)

967 
	#SN_id_smime_Ø_dvcs_dvc
 "id-smime-Ø-dvcs-dvc"

	)

968 
	#NID_id_smime_Ø_dvcs_dvc
 240

	)

969 
	#OBJ_id_smime_Ø_dvcs_dvc
 
OBJ_id_smime_Ø
,29L

	)

971 
	#SN_id_smime_Æg_ESDHwôh3DES
 "id-smime-Æg-ESDHwôh3DES"

	)

972 
	#NID_id_smime_Æg_ESDHwôh3DES
 241

	)

973 
	#OBJ_id_smime_Æg_ESDHwôh3DES
 
OBJ_id_smime_Æg
,1L

	)

975 
	#SN_id_smime_Æg_ESDHwôhRC2
 "id-smime-Æg-ESDHwôhRC2"

	)

976 
	#NID_id_smime_Æg_ESDHwôhRC2
 242

	)

977 
	#OBJ_id_smime_Æg_ESDHwôhRC2
 
OBJ_id_smime_Æg
,2L

	)

979 
	#SN_id_smime_Æg_3DESwøp
 "id-smime-Æg-3DESwøp"

	)

980 
	#NID_id_smime_Æg_3DESwøp
 243

	)

981 
	#OBJ_id_smime_Æg_3DESwøp
 
OBJ_id_smime_Æg
,3L

	)

983 
	#SN_id_smime_Æg_RC2wøp
 "id-smime-Æg-RC2wøp"

	)

984 
	#NID_id_smime_Æg_RC2wøp
 244

	)

985 
	#OBJ_id_smime_Æg_RC2wøp
 
OBJ_id_smime_Æg
,4L

	)

987 
	#SN_id_smime_Æg_ESDH
 "id-smime-Æg-ESDH"

	)

988 
	#NID_id_smime_Æg_ESDH
 245

	)

989 
	#OBJ_id_smime_Æg_ESDH
 
OBJ_id_smime_Æg
,5L

	)

991 
	#SN_id_smime_Æg_CMS3DESwøp
 "id-smime-Æg-CMS3DESwøp"

	)

992 
	#NID_id_smime_Æg_CMS3DESwøp
 246

	)

993 
	#OBJ_id_smime_Æg_CMS3DESwøp
 
OBJ_id_smime_Æg
,6L

	)

995 
	#SN_id_smime_Æg_CMSRC2wøp
 "id-smime-Æg-CMSRC2wøp"

	)

996 
	#NID_id_smime_Æg_CMSRC2wøp
 247

	)

997 
	#OBJ_id_smime_Æg_CMSRC2wøp
 
OBJ_id_smime_Æg
,7L

	)

999 
	#SN_id_Æg_PWRI_KEK
 "id-Æg-PWRI-KEK"

	)

1000 
	#NID_id_Æg_PWRI_KEK
 893

	)

1001 
	#OBJ_id_Æg_PWRI_KEK
 
OBJ_id_smime_Æg
,9L

	)

1003 
	#SN_id_smime_cd_ld≠
 "id-smime-cd-ld≠"

	)

1004 
	#NID_id_smime_cd_ld≠
 248

	)

1005 
	#OBJ_id_smime_cd_ld≠
 
OBJ_id_smime_cd
,1L

	)

1007 
	#SN_id_smime_•q_ës_sqt_uri
 "id-smime-•q-ës-sqt-uri"

	)

1008 
	#NID_id_smime_•q_ës_sqt_uri
 249

	)

1009 
	#OBJ_id_smime_•q_ës_sqt_uri
 
OBJ_id_smime_•q
,1L

	)

1011 
	#SN_id_smime_•q_ës_sqt_unŸi˚
 "id-smime-•q-ës-sqt-unŸi˚"

	)

1012 
	#NID_id_smime_•q_ës_sqt_unŸi˚
 250

	)

1013 
	#OBJ_id_smime_•q_ës_sqt_unŸi˚
 
OBJ_id_smime_•q
,2L

	)

1015 
	#SN_id_smime_˘i_ës_¥oofOfOrigö
 "id-smime-˘i-ës-¥oofOfOrigö"

	)

1016 
	#NID_id_smime_˘i_ës_¥oofOfOrigö
 251

	)

1017 
	#OBJ_id_smime_˘i_ës_¥oofOfOrigö
 
OBJ_id_smime_˘i
,1L

	)

1019 
	#SN_id_smime_˘i_ës_¥oofOfRe˚ùt
 "id-smime-˘i-ës-¥oofOfRe˚ùt"

	)

1020 
	#NID_id_smime_˘i_ës_¥oofOfRe˚ùt
 252

	)

1021 
	#OBJ_id_smime_˘i_ës_¥oofOfRe˚ùt
 
OBJ_id_smime_˘i
,2L

	)

1023 
	#SN_id_smime_˘i_ës_¥oofOfDñivîy
 "id-smime-˘i-ës-¥oofOfDñivîy"

	)

1024 
	#NID_id_smime_˘i_ës_¥oofOfDñivîy
 253

	)

1025 
	#OBJ_id_smime_˘i_ës_¥oofOfDñivîy
 
OBJ_id_smime_˘i
,3L

	)

1027 
	#SN_id_smime_˘i_ës_¥oofOfSídî
 "id-smime-˘i-ës-¥oofOfSídî"

	)

1028 
	#NID_id_smime_˘i_ës_¥oofOfSídî
 254

	)

1029 
	#OBJ_id_smime_˘i_ës_¥oofOfSídî
 
OBJ_id_smime_˘i
,4L

	)

1031 
	#SN_id_smime_˘i_ës_¥oofOfAµrovÆ
 "id-smime-˘i-ës-¥oofOfAµrovÆ"

	)

1032 
	#NID_id_smime_˘i_ës_¥oofOfAµrovÆ
 255

	)

1033 
	#OBJ_id_smime_˘i_ës_¥oofOfAµrovÆ
 
OBJ_id_smime_˘i
,5L

	)

1035 
	#SN_id_smime_˘i_ës_¥oofOfCª©i⁄
 "id-smime-˘i-ës-¥oofOfCª©i⁄"

	)

1036 
	#NID_id_smime_˘i_ës_¥oofOfCª©i⁄
 256

	)

1037 
	#OBJ_id_smime_˘i_ës_¥oofOfCª©i⁄
 
OBJ_id_smime_˘i
,6L

	)

1039 
	#LN_‰õndlyName
 "‰õndlyName"

	)

1040 
	#NID_‰õndlyName
 156

	)

1041 
	#OBJ_‰õndlyName
 
OBJ_pkcs9
,20L

	)

1043 
	#LN_loˇlKeyID
 "loˇlKeyID"

	)

1044 
	#NID_loˇlKeyID
 157

	)

1045 
	#OBJ_loˇlKeyID
 
OBJ_pkcs9
,21L

	)

1047 
	#SN_ms_c•_«me
 "CSPName"

	)

1048 
	#LN_ms_c•_«me
 "Mi¸oso· CSP Name"

	)

1049 
	#NID_ms_c•_«me
 417

	)

1050 
	#OBJ_ms_c•_«me
 1L,3L,6L,1L,4L,1L,311L,17L,1L

	)

1052 
	#SN_LoˇlKeySë
 "LoˇlKeySë"

	)

1053 
	#LN_LoˇlKeySë
 "Mi¸oso· Loˇ»Key së"

	)

1054 
	#NID_LoˇlKeySë
 856

	)

1055 
	#OBJ_LoˇlKeySë
 1L,3L,6L,1L,4L,1L,311L,17L,2L

	)

1057 
	#OBJ_˚πTy≥s
 
OBJ_pkcs9
,22L

	)

1059 
	#LN_x509Cîtifiˇã
 "x509Cîtifiˇã"

	)

1060 
	#NID_x509Cîtifiˇã
 158

	)

1061 
	#OBJ_x509Cîtifiˇã
 
OBJ_˚πTy≥s
,1L

	)

1063 
	#LN_sdsiCîtifiˇã
 "sdsiCîtifiˇã"

	)

1064 
	#NID_sdsiCîtifiˇã
 159

	)

1065 
	#OBJ_sdsiCîtifiˇã
 
OBJ_˚πTy≥s
,2L

	)

1067 
	#OBJ_¸lTy≥s
 
OBJ_pkcs9
,23L

	)

1069 
	#LN_x509Cæ
 "x509Cæ"

	)

1070 
	#NID_x509Cæ
 160

	)

1071 
	#OBJ_x509Cæ
 
OBJ_¸lTy≥s
,1L

	)

1073 
	#OBJ_pkcs12
 
OBJ_pkcs
,12L

	)

1075 
	#OBJ_pkcs12_pbeids
 
OBJ_pkcs12
,1L

	)

1077 
	#SN_pbe_WôhSHA1And128BôRC4
 "PBE-SHA1-RC4-128"

	)

1078 
	#LN_pbe_WôhSHA1And128BôRC4
 "pbeWôhSHA1And128BôRC4"

	)

1079 
	#NID_pbe_WôhSHA1And128BôRC4
 144

	)

1080 
	#OBJ_pbe_WôhSHA1And128BôRC4
 
OBJ_pkcs12_pbeids
,1L

	)

1082 
	#SN_pbe_WôhSHA1And40BôRC4
 "PBE-SHA1-RC4-40"

	)

1083 
	#LN_pbe_WôhSHA1And40BôRC4
 "pbeWôhSHA1And40BôRC4"

	)

1084 
	#NID_pbe_WôhSHA1And40BôRC4
 145

	)

1085 
	#OBJ_pbe_WôhSHA1And40BôRC4
 
OBJ_pkcs12_pbeids
,2L

	)

1087 
	#SN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "PBE-SHA1-3DES"

	)

1088 
	#LN_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 "pbeWôhSHA1And3-KeyTrùÀDES-CBC"

	)

1089 
	#NID_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 146

	)

1090 
	#OBJ_pbe_WôhSHA1And3_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,3L

	)

1092 
	#SN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "PBE-SHA1-2DES"

	)

1093 
	#LN_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 "pbeWôhSHA1And2-KeyTrùÀDES-CBC"

	)

1094 
	#NID_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 147

	)

1095 
	#OBJ_pbe_WôhSHA1And2_Key_TrùÀDES_CBC
 
OBJ_pkcs12_pbeids
,4L

	)

1097 
	#SN_pbe_WôhSHA1And128BôRC2_CBC
 "PBE-SHA1-RC2-128"

	)

1098 
	#LN_pbe_WôhSHA1And128BôRC2_CBC
 "pbeWôhSHA1And128BôRC2-CBC"

	)

1099 
	#NID_pbe_WôhSHA1And128BôRC2_CBC
 148

	)

1100 
	#OBJ_pbe_WôhSHA1And128BôRC2_CBC
 
OBJ_pkcs12_pbeids
,5L

	)

1102 
	#SN_pbe_WôhSHA1And40BôRC2_CBC
 "PBE-SHA1-RC2-40"

	)

1103 
	#LN_pbe_WôhSHA1And40BôRC2_CBC
 "pbeWôhSHA1And40BôRC2-CBC"

	)

1104 
	#NID_pbe_WôhSHA1And40BôRC2_CBC
 149

	)

1105 
	#OBJ_pbe_WôhSHA1And40BôRC2_CBC
 
OBJ_pkcs12_pbeids
,6L

	)

1107 
	#OBJ_pkcs12_Vîsi⁄1
 
OBJ_pkcs12
,10L

	)

1109 
	#OBJ_pkcs12_BagIds
 
OBJ_pkcs12_Vîsi⁄1
,1L

	)

1111 
	#LN_keyBag
 "keyBag"

	)

1112 
	#NID_keyBag
 150

	)

1113 
	#OBJ_keyBag
 
OBJ_pkcs12_BagIds
,1L

	)

1115 
	#LN_pkcs8ShroudedKeyBag
 "pkcs8ShroudedKeyBag"

	)

1116 
	#NID_pkcs8ShroudedKeyBag
 151

	)

1117 
	#OBJ_pkcs8ShroudedKeyBag
 
OBJ_pkcs12_BagIds
,2L

	)

1119 
	#LN_˚πBag
 "˚πBag"

	)

1120 
	#NID_˚πBag
 152

	)

1121 
	#OBJ_˚πBag
 
OBJ_pkcs12_BagIds
,3L

	)

1123 
	#LN_¸lBag
 "¸lBag"

	)

1124 
	#NID_¸lBag
 153

	)

1125 
	#OBJ_¸lBag
 
OBJ_pkcs12_BagIds
,4L

	)

1127 
	#LN_£¸ëBag
 "£¸ëBag"

	)

1128 
	#NID_£¸ëBag
 154

	)

1129 
	#OBJ_£¸ëBag
 
OBJ_pkcs12_BagIds
,5L

	)

1131 
	#LN_ß„C⁄ã¡sBag
 "ß„C⁄ã¡sBag"

	)

1132 
	#NID_ß„C⁄ã¡sBag
 155

	)

1133 
	#OBJ_ß„C⁄ã¡sBag
 
OBJ_pkcs12_BagIds
,6L

	)

1135 
	#SN_md2
 "MD2"

	)

1136 
	#LN_md2
 "md2"

	)

1137 
	#NID_md2
 3

	)

1138 
	#OBJ_md2
 
OBJ_rßdsi
,2L,2L

	)

1140 
	#SN_md4
 "MD4"

	)

1141 
	#LN_md4
 "md4"

	)

1142 
	#NID_md4
 257

	)

1143 
	#OBJ_md4
 
OBJ_rßdsi
,2L,4L

	)

1145 
	#SN_md5
 "MD5"

	)

1146 
	#LN_md5
 "md5"

	)

1147 
	#NID_md5
 4

	)

1148 
	#OBJ_md5
 
OBJ_rßdsi
,2L,5L

	)

1150 
	#SN_md5_sha1
 "MD5-SHA1"

	)

1151 
	#LN_md5_sha1
 "md5-sha1"

	)

1152 
	#NID_md5_sha1
 114

	)

1154 
	#LN_hmacWôhMD5
 "hmacWôhMD5"

	)

1155 
	#NID_hmacWôhMD5
 797

	)

1156 
	#OBJ_hmacWôhMD5
 
OBJ_rßdsi
,2L,6L

	)

1158 
	#LN_hmacWôhSHA1
 "hmacWôhSHA1"

	)

1159 
	#NID_hmacWôhSHA1
 163

	)

1160 
	#OBJ_hmacWôhSHA1
 
OBJ_rßdsi
,2L,7L

	)

1162 
	#LN_hmacWôhSHA224
 "hmacWôhSHA224"

	)

1163 
	#NID_hmacWôhSHA224
 798

	)

1164 
	#OBJ_hmacWôhSHA224
 
OBJ_rßdsi
,2L,8L

	)

1166 
	#LN_hmacWôhSHA256
 "hmacWôhSHA256"

	)

1167 
	#NID_hmacWôhSHA256
 799

	)

1168 
	#OBJ_hmacWôhSHA256
 
OBJ_rßdsi
,2L,9L

	)

1170 
	#LN_hmacWôhSHA384
 "hmacWôhSHA384"

	)

1171 
	#NID_hmacWôhSHA384
 800

	)

1172 
	#OBJ_hmacWôhSHA384
 
OBJ_rßdsi
,2L,10L

	)

1174 
	#LN_hmacWôhSHA512
 "hmacWôhSHA512"

	)

1175 
	#NID_hmacWôhSHA512
 801

	)

1176 
	#OBJ_hmacWôhSHA512
 
OBJ_rßdsi
,2L,11L

	)

1178 
	#SN_rc2_cbc
 "RC2-CBC"

	)

1179 
	#LN_rc2_cbc
 "rc2-cbc"

	)

1180 
	#NID_rc2_cbc
 37

	)

1181 
	#OBJ_rc2_cbc
 
OBJ_rßdsi
,3L,2L

	)

1183 
	#SN_rc2_ecb
 "RC2-ECB"

	)

1184 
	#LN_rc2_ecb
 "rc2-ecb"

	)

1185 
	#NID_rc2_ecb
 38

	)

1187 
	#SN_rc2_cfb64
 "RC2-CFB"

	)

1188 
	#LN_rc2_cfb64
 "rc2-cfb"

	)

1189 
	#NID_rc2_cfb64
 39

	)

1191 
	#SN_rc2_ofb64
 "RC2-OFB"

	)

1192 
	#LN_rc2_ofb64
 "rc2-ofb"

	)

1193 
	#NID_rc2_ofb64
 40

	)

1195 
	#SN_rc2_40_cbc
 "RC2-40-CBC"

	)

1196 
	#LN_rc2_40_cbc
 "rc2-40-cbc"

	)

1197 
	#NID_rc2_40_cbc
 98

	)

1199 
	#SN_rc2_64_cbc
 "RC2-64-CBC"

	)

1200 
	#LN_rc2_64_cbc
 "rc2-64-cbc"

	)

1201 
	#NID_rc2_64_cbc
 166

	)

1203 
	#SN_rc4
 "RC4"

	)

1204 
	#LN_rc4
 "rc4"

	)

1205 
	#NID_rc4
 5

	)

1206 
	#OBJ_rc4
 
OBJ_rßdsi
,3L,4L

	)

1208 
	#SN_rc4_40
 "RC4-40"

	)

1209 
	#LN_rc4_40
 "rc4-40"

	)

1210 
	#NID_rc4_40
 97

	)

1212 
	#SN_des_ede3_cbc
 "DES-EDE3-CBC"

	)

1213 
	#LN_des_ede3_cbc
 "des-ede3-cbc"

	)

1214 
	#NID_des_ede3_cbc
 44

	)

1215 
	#OBJ_des_ede3_cbc
 
OBJ_rßdsi
,3L,7L

	)

1217 
	#SN_rc5_cbc
 "RC5-CBC"

	)

1218 
	#LN_rc5_cbc
 "rc5-cbc"

	)

1219 
	#NID_rc5_cbc
 120

	)

1220 
	#OBJ_rc5_cbc
 
OBJ_rßdsi
,3L,8L

	)

1222 
	#SN_rc5_ecb
 "RC5-ECB"

	)

1223 
	#LN_rc5_ecb
 "rc5-ecb"

	)

1224 
	#NID_rc5_ecb
 121

	)

1226 
	#SN_rc5_cfb64
 "RC5-CFB"

	)

1227 
	#LN_rc5_cfb64
 "rc5-cfb"

	)

1228 
	#NID_rc5_cfb64
 122

	)

1230 
	#SN_rc5_ofb64
 "RC5-OFB"

	)

1231 
	#LN_rc5_ofb64
 "rc5-ofb"

	)

1232 
	#NID_rc5_ofb64
 123

	)

1234 
	#SN_ms_ext_ªq
 "msExtReq"

	)

1235 
	#LN_ms_ext_ªq
 "Mi¸oso· Exãnsi⁄ Reque°"

	)

1236 
	#NID_ms_ext_ªq
 171

	)

1237 
	#OBJ_ms_ext_ªq
 1L,3L,6L,1L,4L,1L,311L,2L,1L,14L

	)

1239 
	#SN_ms_code_öd
 "msCodeInd"

	)

1240 
	#LN_ms_code_öd
 "Mi¸oso· IndividuÆ CodêSignög"

	)

1241 
	#NID_ms_code_öd
 134

	)

1242 
	#OBJ_ms_code_öd
 1L,3L,6L,1L,4L,1L,311L,2L,1L,21L

	)

1244 
	#SN_ms_code_com
 "msCodeCom"

	)

1245 
	#LN_ms_code_com
 "Mi¸oso· Commîcü»CodêSignög"

	)

1246 
	#NID_ms_code_com
 135

	)

1247 
	#OBJ_ms_code_com
 1L,3L,6L,1L,4L,1L,311L,2L,1L,22L

	)

1249 
	#SN_ms_˘l_sign
 "msCTLSign"

	)

1250 
	#LN_ms_˘l_sign
 "Mi¸oso· Tru° Li° Signög"

	)

1251 
	#NID_ms_˘l_sign
 136

	)

1252 
	#OBJ_ms_˘l_sign
 1L,3L,6L,1L,4L,1L,311L,10L,3L,1L

	)

1254 
	#SN_ms_sgc
 "msSGC"

	)

1255 
	#LN_ms_sgc
 "Mi¸oso· Sîvî G©ed Cry±o"

	)

1256 
	#NID_ms_sgc
 137

	)

1257 
	#OBJ_ms_sgc
 1L,3L,6L,1L,4L,1L,311L,10L,3L,3L

	)

1259 
	#SN_ms_efs
 "msEFS"

	)

1260 
	#LN_ms_efs
 "Mi¸oso· En¸y±ed FûêSy°em"

	)

1261 
	#NID_ms_efs
 138

	)

1262 
	#OBJ_ms_efs
 1L,3L,6L,1L,4L,1L,311L,10L,3L,4L

	)

1264 
	#SN_ms_sm¨tˇrd_logö
 "msSm¨tˇrdLogö"

	)

1265 
	#LN_ms_sm¨tˇrd_logö
 "Mi¸oso· Sm¨tˇrdlogö"

	)

1266 
	#NID_ms_sm¨tˇrd_logö
 648

	)

1267 
	#OBJ_ms_sm¨tˇrd_logö
 1L,3L,6L,1L,4L,1L,311L,20L,2L,2L

	)

1269 
	#SN_ms_u≤
 "msUPN"

	)

1270 
	#LN_ms_u≤
 "Mi¸oso· Univîß»PröcùÆ Name"

	)

1271 
	#NID_ms_u≤
 649

	)

1272 
	#OBJ_ms_u≤
 1L,3L,6L,1L,4L,1L,311L,20L,2L,3L

	)

1274 
	#SN_idó_cbc
 "IDEA-CBC"

	)

1275 
	#LN_idó_cbc
 "idó-cbc"

	)

1276 
	#NID_idó_cbc
 34

	)

1277 
	#OBJ_idó_cbc
 1L,3L,6L,1L,4L,1L,188L,7L,1L,1L,2L

	)

1279 
	#SN_idó_ecb
 "IDEA-ECB"

	)

1280 
	#LN_idó_ecb
 "idó-ecb"

	)

1281 
	#NID_idó_ecb
 36

	)

1283 
	#SN_idó_cfb64
 "IDEA-CFB"

	)

1284 
	#LN_idó_cfb64
 "idó-cfb"

	)

1285 
	#NID_idó_cfb64
 35

	)

1287 
	#SN_idó_ofb64
 "IDEA-OFB"

	)

1288 
	#LN_idó_ofb64
 "idó-ofb"

	)

1289 
	#NID_idó_ofb64
 46

	)

1291 
	#SN_bf_cbc
 "BF-CBC"

	)

1292 
	#LN_bf_cbc
 "bf-cbc"

	)

1293 
	#NID_bf_cbc
 91

	)

1294 
	#OBJ_bf_cbc
 1L,3L,6L,1L,4L,1L,3029L,1L,2L

	)

1296 
	#SN_bf_ecb
 "BF-ECB"

	)

1297 
	#LN_bf_ecb
 "bf-ecb"

	)

1298 
	#NID_bf_ecb
 92

	)

1300 
	#SN_bf_cfb64
 "BF-CFB"

	)

1301 
	#LN_bf_cfb64
 "bf-cfb"

	)

1302 
	#NID_bf_cfb64
 93

	)

1304 
	#SN_bf_ofb64
 "BF-OFB"

	)

1305 
	#LN_bf_ofb64
 "bf-ofb"

	)

1306 
	#NID_bf_ofb64
 94

	)

1308 
	#SN_id_pkix
 "PKIX"

	)

1309 
	#NID_id_pkix
 127

	)

1310 
	#OBJ_id_pkix
 1L,3L,6L,1L,5L,5L,7L

	)

1312 
	#SN_id_pkix_mod
 "id-pkix-mod"

	)

1313 
	#NID_id_pkix_mod
 258

	)

1314 
	#OBJ_id_pkix_mod
 
OBJ_id_pkix
,0L

	)

1316 
	#SN_id_≥
 "id-≥"

	)

1317 
	#NID_id_≥
 175

	)

1318 
	#OBJ_id_≥
 
OBJ_id_pkix
,1L

	)

1320 
	#SN_id_qt
 "id-qt"

	)

1321 
	#NID_id_qt
 259

	)

1322 
	#OBJ_id_qt
 
OBJ_id_pkix
,2L

	)

1324 
	#SN_id_kp
 "id-kp"

	)

1325 
	#NID_id_kp
 128

	)

1326 
	#OBJ_id_kp
 
OBJ_id_pkix
,3L

	)

1328 
	#SN_id_ô
 "id-ô"

	)

1329 
	#NID_id_ô
 260

	)

1330 
	#OBJ_id_ô
 
OBJ_id_pkix
,4L

	)

1332 
	#SN_id_pkù
 "id-pkù"

	)

1333 
	#NID_id_pkù
 261

	)

1334 
	#OBJ_id_pkù
 
OBJ_id_pkix
,5L

	)

1336 
	#SN_id_Æg
 "id-Æg"

	)

1337 
	#NID_id_Æg
 262

	)

1338 
	#OBJ_id_Æg
 
OBJ_id_pkix
,6L

	)

1340 
	#SN_id_cmc
 "id-cmc"

	)

1341 
	#NID_id_cmc
 263

	)

1342 
	#OBJ_id_cmc
 
OBJ_id_pkix
,7L

	)

1344 
	#SN_id_⁄
 "id-⁄"

	)

1345 
	#NID_id_⁄
 264

	)

1346 
	#OBJ_id_⁄
 
OBJ_id_pkix
,8L

	)

1348 
	#SN_id_pda
 "id-pda"

	)

1349 
	#NID_id_pda
 265

	)

1350 
	#OBJ_id_pda
 
OBJ_id_pkix
,9L

	)

1352 
	#SN_id_aˇ
 "id-aˇ"

	)

1353 
	#NID_id_aˇ
 266

	)

1354 
	#OBJ_id_aˇ
 
OBJ_id_pkix
,10L

	)

1356 
	#SN_id_qcs
 "id-qcs"

	)

1357 
	#NID_id_qcs
 267

	)

1358 
	#OBJ_id_qcs
 
OBJ_id_pkix
,11L

	)

1360 
	#SN_id_c˘
 "id-c˘"

	)

1361 
	#NID_id_c˘
 268

	)

1362 
	#OBJ_id_c˘
 
OBJ_id_pkix
,12L

	)

1364 
	#SN_id_µl
 "id-µl"

	)

1365 
	#NID_id_µl
 662

	)

1366 
	#OBJ_id_µl
 
OBJ_id_pkix
,21L

	)

1368 
	#SN_id_ad
 "id-ad"

	)

1369 
	#NID_id_ad
 176

	)

1370 
	#OBJ_id_ad
 
OBJ_id_pkix
,48L

	)

1372 
	#SN_id_pkix1_ex∂icô_88
 "id-pkix1-ex∂icô-88"

	)

1373 
	#NID_id_pkix1_ex∂icô_88
 269

	)

1374 
	#OBJ_id_pkix1_ex∂icô_88
 
OBJ_id_pkix_mod
,1L

	)

1376 
	#SN_id_pkix1_im∂icô_88
 "id-pkix1-im∂icô-88"

	)

1377 
	#NID_id_pkix1_im∂icô_88
 270

	)

1378 
	#OBJ_id_pkix1_im∂icô_88
 
OBJ_id_pkix_mod
,2L

	)

1380 
	#SN_id_pkix1_ex∂icô_93
 "id-pkix1-ex∂icô-93"

	)

1381 
	#NID_id_pkix1_ex∂icô_93
 271

	)

1382 
	#OBJ_id_pkix1_ex∂icô_93
 
OBJ_id_pkix_mod
,3L

	)

1384 
	#SN_id_pkix1_im∂icô_93
 "id-pkix1-im∂icô-93"

	)

1385 
	#NID_id_pkix1_im∂icô_93
 272

	)

1386 
	#OBJ_id_pkix1_im∂icô_93
 
OBJ_id_pkix_mod
,4L

	)

1388 
	#SN_id_mod_¸mf
 "id-mod-¸mf"

	)

1389 
	#NID_id_mod_¸mf
 273

	)

1390 
	#OBJ_id_mod_¸mf
 
OBJ_id_pkix_mod
,5L

	)

1392 
	#SN_id_mod_cmc
 "id-mod-cmc"

	)

1393 
	#NID_id_mod_cmc
 274

	)

1394 
	#OBJ_id_mod_cmc
 
OBJ_id_pkix_mod
,6L

	)

1396 
	#SN_id_mod_kó_¥ofûe_88
 "id-mod-kó-¥ofûe-88"

	)

1397 
	#NID_id_mod_kó_¥ofûe_88
 275

	)

1398 
	#OBJ_id_mod_kó_¥ofûe_88
 
OBJ_id_pkix_mod
,7L

	)

1400 
	#SN_id_mod_kó_¥ofûe_93
 "id-mod-kó-¥ofûe-93"

	)

1401 
	#NID_id_mod_kó_¥ofûe_93
 276

	)

1402 
	#OBJ_id_mod_kó_¥ofûe_93
 
OBJ_id_pkix_mod
,8L

	)

1404 
	#SN_id_mod_cmp
 "id-mod-cmp"

	)

1405 
	#NID_id_mod_cmp
 277

	)

1406 
	#OBJ_id_mod_cmp
 
OBJ_id_pkix_mod
,9L

	)

1408 
	#SN_id_mod_quÆifõd_˚π_88
 "id-mod-quÆifõd-˚π-88"

	)

1409 
	#NID_id_mod_quÆifõd_˚π_88
 278

	)

1410 
	#OBJ_id_mod_quÆifõd_˚π_88
 
OBJ_id_pkix_mod
,10L

	)

1412 
	#SN_id_mod_quÆifõd_˚π_93
 "id-mod-quÆifõd-˚π-93"

	)

1413 
	#NID_id_mod_quÆifõd_˚π_93
 279

	)

1414 
	#OBJ_id_mod_quÆifõd_˚π_93
 
OBJ_id_pkix_mod
,11L

	)

1416 
	#SN_id_mod_©åibuã_˚π
 "id-mod-©åibuã-˚π"

	)

1417 
	#NID_id_mod_©åibuã_˚π
 280

	)

1418 
	#OBJ_id_mod_©åibuã_˚π
 
OBJ_id_pkix_mod
,12L

	)

1420 
	#SN_id_mod_time°amp_¥Ÿocﬁ
 "id-mod-time°amp-¥Ÿocﬁ"

	)

1421 
	#NID_id_mod_time°amp_¥Ÿocﬁ
 281

	)

1422 
	#OBJ_id_mod_time°amp_¥Ÿocﬁ
 
OBJ_id_pkix_mod
,13L

	)

1424 
	#SN_id_mod_oc•
 "id-mod-oc•"

	)

1425 
	#NID_id_mod_oc•
 282

	)

1426 
	#OBJ_id_mod_oc•
 
OBJ_id_pkix_mod
,14L

	)

1428 
	#SN_id_mod_dvcs
 "id-mod-dvcs"

	)

1429 
	#NID_id_mod_dvcs
 283

	)

1430 
	#OBJ_id_mod_dvcs
 
OBJ_id_pkix_mod
,15L

	)

1432 
	#SN_id_mod_cmp2000
 "id-mod-cmp2000"

	)

1433 
	#NID_id_mod_cmp2000
 284

	)

1434 
	#OBJ_id_mod_cmp2000
 
OBJ_id_pkix_mod
,16L

	)

1436 
	#SN_öfo_ac˚ss
 "auth‹ôyInfoAc˚ss"

	)

1437 
	#LN_öfo_ac˚ss
 "Auth‹ôy Inf‹m©i⁄ Ac˚ss"

	)

1438 
	#NID_öfo_ac˚ss
 177

	)

1439 
	#OBJ_öfo_ac˚ss
 
OBJ_id_≥
,1L

	)

1441 
	#SN_biomëricInfo
 "biomëricInfo"

	)

1442 
	#LN_biomëricInfo
 "Biomëri¯Info"

	)

1443 
	#NID_biomëricInfo
 285

	)

1444 
	#OBJ_biomëricInfo
 
OBJ_id_≥
,2L

	)

1446 
	#SN_qcSèãmíts
 "qcSèãmíts"

	)

1447 
	#NID_qcSèãmíts
 286

	)

1448 
	#OBJ_qcSèãmíts
 
OBJ_id_≥
,3L

	)

1450 
	#SN_ac_audôE¡ôy
 "ac-audôE¡ôy"

	)

1451 
	#NID_ac_audôE¡ôy
 287

	)

1452 
	#OBJ_ac_audôE¡ôy
 
OBJ_id_≥
,4L

	)

1454 
	#SN_ac_èrgëög
 "ac-èrgëög"

	)

1455 
	#NID_ac_èrgëög
 288

	)

1456 
	#OBJ_ac_èrgëög
 
OBJ_id_≥
,5L

	)

1458 
	#SN_ØC⁄åﬁs
 "ØC⁄åﬁs"

	)

1459 
	#NID_ØC⁄åﬁs
 289

	)

1460 
	#OBJ_ØC⁄åﬁs
 
OBJ_id_≥
,6L

	)

1462 
	#SN_sbgp_ùAddrBlock
 "sbgp-ùAddrBlock"

	)

1463 
	#NID_sbgp_ùAddrBlock
 290

	)

1464 
	#OBJ_sbgp_ùAddrBlock
 
OBJ_id_≥
,7L

	)

1466 
	#SN_sbgp_aut⁄omousSysNum
 "sbgp-aut⁄omousSysNum"

	)

1467 
	#NID_sbgp_aut⁄omousSysNum
 291

	)

1468 
	#OBJ_sbgp_aut⁄omousSysNum
 
OBJ_id_≥
,8L

	)

1470 
	#SN_sbgp_rouãrIdítifõr
 "sbgp-rouãrIdítifõr"

	)

1471 
	#NID_sbgp_rouãrIdítifõr
 292

	)

1472 
	#OBJ_sbgp_rouãrIdítifõr
 
OBJ_id_≥
,9L

	)

1474 
	#SN_ac_¥oxyög
 "ac-¥oxyög"

	)

1475 
	#NID_ac_¥oxyög
 397

	)

1476 
	#OBJ_ac_¥oxyög
 
OBJ_id_≥
,10L

	)

1478 
	#SN_söfo_ac˚ss
 "subje˘InfoAc˚ss"

	)

1479 
	#LN_söfo_ac˚ss
 "Subje˘ Inf‹m©i⁄ Ac˚ss"

	)

1480 
	#NID_söfo_ac˚ss
 398

	)

1481 
	#OBJ_söfo_ac˚ss
 
OBJ_id_≥
,11L

	)

1483 
	#SN_¥oxyCîtInfo
 "¥oxyCîtInfo"

	)

1484 
	#LN_¥oxyCîtInfo
 "Proxy Cîtifiˇã Inf‹m©i⁄"

	)

1485 
	#NID_¥oxyCîtInfo
 663

	)

1486 
	#OBJ_¥oxyCîtInfo
 
OBJ_id_≥
,14L

	)

1488 
	#SN_id_qt_˝s
 "id-qt-˝s"

	)

1489 
	#LN_id_qt_˝s
 "Pﬁicy QuÆifõ∏CPS"

	)

1490 
	#NID_id_qt_˝s
 164

	)

1491 
	#OBJ_id_qt_˝s
 
OBJ_id_qt
,1L

	)

1493 
	#SN_id_qt_unŸi˚
 "id-qt-unŸi˚"

	)

1494 
	#LN_id_qt_unŸi˚
 "Pﬁicy QuÆifõ∏U£∏NŸi˚"

	)

1495 
	#NID_id_qt_unŸi˚
 165

	)

1496 
	#OBJ_id_qt_unŸi˚
 
OBJ_id_qt
,2L

	)

1498 
	#SN_ãxtNŸi˚
 "ãxtNŸi˚"

	)

1499 
	#NID_ãxtNŸi˚
 293

	)

1500 
	#OBJ_ãxtNŸi˚
 
OBJ_id_qt
,3L

	)

1502 
	#SN_£rvî_auth
 "£rvîAuth"

	)

1503 
	#LN_£rvî_auth
 "TLS Web Sîvî Authítiˇti⁄"

	)

1504 
	#NID_£rvî_auth
 129

	)

1505 
	#OBJ_£rvî_auth
 
OBJ_id_kp
,1L

	)

1507 
	#SN_˛õ¡_auth
 "˛õ¡Auth"

	)

1508 
	#LN_˛õ¡_auth
 "TLS Web Clõ¡ Authítiˇti⁄"

	)

1509 
	#NID_˛õ¡_auth
 130

	)

1510 
	#OBJ_˛õ¡_auth
 
OBJ_id_kp
,2L

	)

1512 
	#SN_code_sign
 "codeSignög"

	)

1513 
	#LN_code_sign
 "CodêSignög"

	)

1514 
	#NID_code_sign
 131

	)

1515 
	#OBJ_code_sign
 
OBJ_id_kp
,3L

	)

1517 
	#SN_emaû_¥Ÿe˘
 "emaûPrŸe˘i⁄"

	)

1518 
	#LN_emaû_¥Ÿe˘
 "E-maû PrŸe˘i⁄"

	)

1519 
	#NID_emaû_¥Ÿe˘
 132

	)

1520 
	#OBJ_emaû_¥Ÿe˘
 
OBJ_id_kp
,4L

	)

1522 
	#SN_ù£cEndSy°em
 "ù£cEndSy°em"

	)

1523 
	#LN_ù£cEndSy°em
 "IPSe¯End Sy°em"

	)

1524 
	#NID_ù£cEndSy°em
 294

	)

1525 
	#OBJ_ù£cEndSy°em
 
OBJ_id_kp
,5L

	)

1527 
	#SN_ù£cTu¬ñ
 "ù£cTu¬ñ"

	)

1528 
	#LN_ù£cTu¬ñ
 "IPSe¯Tu¬ñ"

	)

1529 
	#NID_ù£cTu¬ñ
 295

	)

1530 
	#OBJ_ù£cTu¬ñ
 
OBJ_id_kp
,6L

	)

1532 
	#SN_ù£cU£r
 "ù£cU£r"

	)

1533 
	#LN_ù£cU£r
 "IPSe¯U£r"

	)

1534 
	#NID_ù£cU£r
 296

	)

1535 
	#OBJ_ù£cU£r
 
OBJ_id_kp
,7L

	)

1537 
	#SN_time_°amp
 "timeSèmpög"

	)

1538 
	#LN_time_°amp
 "TimêSèmpög"

	)

1539 
	#NID_time_°amp
 133

	)

1540 
	#OBJ_time_°amp
 
OBJ_id_kp
,8L

	)

1542 
	#SN_OCSP_sign
 "OCSPSignög"

	)

1543 
	#LN_OCSP_sign
 "OCSP Signög"

	)

1544 
	#NID_OCSP_sign
 180

	)

1545 
	#OBJ_OCSP_sign
 
OBJ_id_kp
,9L

	)

1547 
	#SN_dvcs
 "DVCS"

	)

1548 
	#LN_dvcs
 "dvcs"

	)

1549 
	#NID_dvcs
 297

	)

1550 
	#OBJ_dvcs
 
OBJ_id_kp
,10L

	)

1552 
	#SN_id_ô_ˇPrŸEncCît
 "id-ô-ˇPrŸEncCît"

	)

1553 
	#NID_id_ô_ˇPrŸEncCît
 298

	)

1554 
	#OBJ_id_ô_ˇPrŸEncCît
 
OBJ_id_ô
,1L

	)

1556 
	#SN_id_ô_signKeyPaúTy≥s
 "id-ô-signKeyPaúTy≥s"

	)

1557 
	#NID_id_ô_signKeyPaúTy≥s
 299

	)

1558 
	#OBJ_id_ô_signKeyPaúTy≥s
 
OBJ_id_ô
,2L

	)

1560 
	#SN_id_ô_ícKeyPaúTy≥s
 "id-ô-ícKeyPaúTy≥s"

	)

1561 
	#NID_id_ô_ícKeyPaúTy≥s
 300

	)

1562 
	#OBJ_id_ô_ícKeyPaúTy≥s
 
OBJ_id_ô
,3L

	)

1564 
	#SN_id_ô_¥e„ºedSymmAlg
 "id-ô-¥e„ºedSymmAlg"

	)

1565 
	#NID_id_ô_¥e„ºedSymmAlg
 301

	)

1566 
	#OBJ_id_ô_¥e„ºedSymmAlg
 
OBJ_id_ô
,4L

	)

1568 
	#SN_id_ô_ˇKeyUpd©eInfo
 "id-ô-ˇKeyUpd©eInfo"

	)

1569 
	#NID_id_ô_ˇKeyUpd©eInfo
 302

	)

1570 
	#OBJ_id_ô_ˇKeyUpd©eInfo
 
OBJ_id_ô
,5L

	)

1572 
	#SN_id_ô_cuºítCRL
 "id-ô-cuºítCRL"

	)

1573 
	#NID_id_ô_cuºítCRL
 303

	)

1574 
	#OBJ_id_ô_cuºítCRL
 
OBJ_id_ô
,6L

	)

1576 
	#SN_id_ô_unsuµ‹ãdOIDs
 "id-ô-unsuµ‹ãdOIDs"

	)

1577 
	#NID_id_ô_unsuµ‹ãdOIDs
 304

	)

1578 
	#OBJ_id_ô_unsuµ‹ãdOIDs
 
OBJ_id_ô
,7L

	)

1580 
	#SN_id_ô_subs¸ùti⁄Reque°
 "id-ô-subs¸ùti⁄Reque°"

	)

1581 
	#NID_id_ô_subs¸ùti⁄Reque°
 305

	)

1582 
	#OBJ_id_ô_subs¸ùti⁄Reque°
 
OBJ_id_ô
,8L

	)

1584 
	#SN_id_ô_subs¸ùti⁄Re•⁄£
 "id-ô-subs¸ùti⁄Re•⁄£"

	)

1585 
	#NID_id_ô_subs¸ùti⁄Re•⁄£
 306

	)

1586 
	#OBJ_id_ô_subs¸ùti⁄Re•⁄£
 
OBJ_id_ô
,9L

	)

1588 
	#SN_id_ô_keyPaúP¨amReq
 "id-ô-keyPaúP¨amReq"

	)

1589 
	#NID_id_ô_keyPaúP¨amReq
 307

	)

1590 
	#OBJ_id_ô_keyPaúP¨amReq
 
OBJ_id_ô
,10L

	)

1592 
	#SN_id_ô_keyPaúP¨amRï
 "id-ô-keyPaúP¨amRï"

	)

1593 
	#NID_id_ô_keyPaúP¨amRï
 308

	)

1594 
	#OBJ_id_ô_keyPaúP¨amRï
 
OBJ_id_ô
,11L

	)

1596 
	#SN_id_ô_ªvPas•hø£
 "id-ô-ªvPas•hø£"

	)

1597 
	#NID_id_ô_ªvPas•hø£
 309

	)

1598 
	#OBJ_id_ô_ªvPas•hø£
 
OBJ_id_ô
,12L

	)

1600 
	#SN_id_ô_im∂icôC⁄fúm
 "id-ô-im∂icôC⁄fúm"

	)

1601 
	#NID_id_ô_im∂icôC⁄fúm
 310

	)

1602 
	#OBJ_id_ô_im∂icôC⁄fúm
 
OBJ_id_ô
,13L

	)

1604 
	#SN_id_ô_c⁄fúmWaôTime
 "id-ô-c⁄fúmWaôTime"

	)

1605 
	#NID_id_ô_c⁄fúmWaôTime
 311

	)

1606 
	#OBJ_id_ô_c⁄fúmWaôTime
 
OBJ_id_ô
,14L

	)

1608 
	#SN_id_ô_‹igPKIMesßge
 "id-ô-‹igPKIMesßge"

	)

1609 
	#NID_id_ô_‹igPKIMesßge
 312

	)

1610 
	#OBJ_id_ô_‹igPKIMesßge
 
OBJ_id_ô
,15L

	)

1612 
	#SN_id_ô_suµL™gTags
 "id-ô-suµL™gTags"

	)

1613 
	#NID_id_ô_suµL™gTags
 784

	)

1614 
	#OBJ_id_ô_suµL™gTags
 
OBJ_id_ô
,16L

	)

1616 
	#SN_id_ªgCål
 "id-ªgCål"

	)

1617 
	#NID_id_ªgCål
 313

	)

1618 
	#OBJ_id_ªgCål
 
OBJ_id_pkù
,1L

	)

1620 
	#SN_id_ªgInfo
 "id-ªgInfo"

	)

1621 
	#NID_id_ªgInfo
 314

	)

1622 
	#OBJ_id_ªgInfo
 
OBJ_id_pkù
,2L

	)

1624 
	#SN_id_ªgCål_ªgTokí
 "id-ªgCål-ªgTokí"

	)

1625 
	#NID_id_ªgCål_ªgTokí
 315

	)

1626 
	#OBJ_id_ªgCål_ªgTokí
 
OBJ_id_ªgCål
,1L

	)

1628 
	#SN_id_ªgCål_authítiˇt‹
 "id-ªgCål-authítiˇt‹"

	)

1629 
	#NID_id_ªgCål_authítiˇt‹
 316

	)

1630 
	#OBJ_id_ªgCål_authítiˇt‹
 
OBJ_id_ªgCål
,2L

	)

1632 
	#SN_id_ªgCål_pkiPubliˇti⁄Info
 "id-ªgCål-pkiPubliˇti⁄Info"

	)

1633 
	#NID_id_ªgCål_pkiPubliˇti⁄Info
 317

	)

1634 
	#OBJ_id_ªgCål_pkiPubliˇti⁄Info
 
OBJ_id_ªgCål
,3L

	)

1636 
	#SN_id_ªgCål_pkiArchiveO±i⁄s
 "id-ªgCål-pkiArchiveO±i⁄s"

	)

1637 
	#NID_id_ªgCål_pkiArchiveO±i⁄s
 318

	)

1638 
	#OBJ_id_ªgCål_pkiArchiveO±i⁄s
 
OBJ_id_ªgCål
,4L

	)

1640 
	#SN_id_ªgCål_ﬁdCîtID
 "id-ªgCål-ﬁdCîtID"

	)

1641 
	#NID_id_ªgCål_ﬁdCîtID
 319

	)

1642 
	#OBJ_id_ªgCål_ﬁdCîtID
 
OBJ_id_ªgCål
,5L

	)

1644 
	#SN_id_ªgCål_¥ŸocﬁEn¸Key
 "id-ªgCål-¥ŸocﬁEn¸Key"

	)

1645 
	#NID_id_ªgCål_¥ŸocﬁEn¸Key
 320

	)

1646 
	#OBJ_id_ªgCål_¥ŸocﬁEn¸Key
 
OBJ_id_ªgCål
,6L

	)

1648 
	#SN_id_ªgInfo_utf8Paús
 "id-ªgInfo-utf8Paús"

	)

1649 
	#NID_id_ªgInfo_utf8Paús
 321

	)

1650 
	#OBJ_id_ªgInfo_utf8Paús
 
OBJ_id_ªgInfo
,1L

	)

1652 
	#SN_id_ªgInfo_˚πReq
 "id-ªgInfo-˚πReq"

	)

1653 
	#NID_id_ªgInfo_˚πReq
 322

	)

1654 
	#OBJ_id_ªgInfo_˚πReq
 
OBJ_id_ªgInfo
,2L

	)

1656 
	#SN_id_Æg_des40
 "id-Æg-des40"

	)

1657 
	#NID_id_Æg_des40
 323

	)

1658 
	#OBJ_id_Æg_des40
 
OBJ_id_Æg
,1L

	)

1660 
	#SN_id_Æg_noSig«tuª
 "id-Æg-noSig«tuª"

	)

1661 
	#NID_id_Æg_noSig«tuª
 324

	)

1662 
	#OBJ_id_Æg_noSig«tuª
 
OBJ_id_Æg
,2L

	)

1664 
	#SN_id_Æg_dh_sig_hmac_sha1
 "id-Æg-dh-sig-hmac-sha1"

	)

1665 
	#NID_id_Æg_dh_sig_hmac_sha1
 325

	)

1666 
	#OBJ_id_Æg_dh_sig_hmac_sha1
 
OBJ_id_Æg
,3L

	)

1668 
	#SN_id_Æg_dh_p›
 "id-Æg-dh-p›"

	)

1669 
	#NID_id_Æg_dh_p›
 326

	)

1670 
	#OBJ_id_Æg_dh_p›
 
OBJ_id_Æg
,4L

	)

1672 
	#SN_id_cmc_°©usInfo
 "id-cmc-°©usInfo"

	)

1673 
	#NID_id_cmc_°©usInfo
 327

	)

1674 
	#OBJ_id_cmc_°©usInfo
 
OBJ_id_cmc
,1L

	)

1676 
	#SN_id_cmc_idítifiˇti⁄
 "id-cmc-idítifiˇti⁄"

	)

1677 
	#NID_id_cmc_idítifiˇti⁄
 328

	)

1678 
	#OBJ_id_cmc_idítifiˇti⁄
 
OBJ_id_cmc
,2L

	)

1680 
	#SN_id_cmc_idítôyProof
 "id-cmc-idítôyProof"

	)

1681 
	#NID_id_cmc_idítôyProof
 329

	)

1682 
	#OBJ_id_cmc_idítôyProof
 
OBJ_id_cmc
,3L

	)

1684 
	#SN_id_cmc_d©aRëu∫
 "id-cmc-d©aRëu∫"

	)

1685 
	#NID_id_cmc_d©aRëu∫
 330

	)

1686 
	#OBJ_id_cmc_d©aRëu∫
 
OBJ_id_cmc
,4L

	)

1688 
	#SN_id_cmc_å™ß˘i⁄Id
 "id-cmc-å™ß˘i⁄Id"

	)

1689 
	#NID_id_cmc_å™ß˘i⁄Id
 331

	)

1690 
	#OBJ_id_cmc_å™ß˘i⁄Id
 
OBJ_id_cmc
,5L

	)

1692 
	#SN_id_cmc_£ndîN⁄˚
 "id-cmc-£ndîN⁄˚"

	)

1693 
	#NID_id_cmc_£ndîN⁄˚
 332

	)

1694 
	#OBJ_id_cmc_£ndîN⁄˚
 
OBJ_id_cmc
,6L

	)

1696 
	#SN_id_cmc_ªcùõ¡N⁄˚
 "id-cmc-ªcùõ¡N⁄˚"

	)

1697 
	#NID_id_cmc_ªcùõ¡N⁄˚
 333

	)

1698 
	#OBJ_id_cmc_ªcùõ¡N⁄˚
 
OBJ_id_cmc
,7L

	)

1700 
	#SN_id_cmc_addExãnsi⁄s
 "id-cmc-addExãnsi⁄s"

	)

1701 
	#NID_id_cmc_addExãnsi⁄s
 334

	)

1702 
	#OBJ_id_cmc_addExãnsi⁄s
 
OBJ_id_cmc
,8L

	)

1704 
	#SN_id_cmc_í¸y±edPOP
 "id-cmc-í¸y±edPOP"

	)

1705 
	#NID_id_cmc_í¸y±edPOP
 335

	)

1706 
	#OBJ_id_cmc_í¸y±edPOP
 
OBJ_id_cmc
,9L

	)

1708 
	#SN_id_cmc_de¸y±edPOP
 "id-cmc-de¸y±edPOP"

	)

1709 
	#NID_id_cmc_de¸y±edPOP
 336

	)

1710 
	#OBJ_id_cmc_de¸y±edPOP
 
OBJ_id_cmc
,10L

	)

1712 
	#SN_id_cmc_ÃaPOPWô√ss
 "id-cmc-ÃaPOPWô√ss"

	)

1713 
	#NID_id_cmc_ÃaPOPWô√ss
 337

	)

1714 
	#OBJ_id_cmc_ÃaPOPWô√ss
 
OBJ_id_cmc
,11L

	)

1716 
	#SN_id_cmc_gëCît
 "id-cmc-gëCît"

	)

1717 
	#NID_id_cmc_gëCît
 338

	)

1718 
	#OBJ_id_cmc_gëCît
 
OBJ_id_cmc
,15L

	)

1720 
	#SN_id_cmc_gëCRL
 "id-cmc-gëCRL"

	)

1721 
	#NID_id_cmc_gëCRL
 339

	)

1722 
	#OBJ_id_cmc_gëCRL
 
OBJ_id_cmc
,16L

	)

1724 
	#SN_id_cmc_ªvokeReque°
 "id-cmc-ªvokeReque°"

	)

1725 
	#NID_id_cmc_ªvokeReque°
 340

	)

1726 
	#OBJ_id_cmc_ªvokeReque°
 
OBJ_id_cmc
,17L

	)

1728 
	#SN_id_cmc_ªgInfo
 "id-cmc-ªgInfo"

	)

1729 
	#NID_id_cmc_ªgInfo
 341

	)

1730 
	#OBJ_id_cmc_ªgInfo
 
OBJ_id_cmc
,18L

	)

1732 
	#SN_id_cmc_ª•⁄£Info
 "id-cmc-ª•⁄£Info"

	)

1733 
	#NID_id_cmc_ª•⁄£Info
 342

	)

1734 
	#OBJ_id_cmc_ª•⁄£Info
 
OBJ_id_cmc
,19L

	)

1736 
	#SN_id_cmc_quîyPídög
 "id-cmc-quîyPídög"

	)

1737 
	#NID_id_cmc_quîyPídög
 343

	)

1738 
	#OBJ_id_cmc_quîyPídög
 
OBJ_id_cmc
,21L

	)

1740 
	#SN_id_cmc_p›LökR™dom
 "id-cmc-p›LökR™dom"

	)

1741 
	#NID_id_cmc_p›LökR™dom
 344

	)

1742 
	#OBJ_id_cmc_p›LökR™dom
 
OBJ_id_cmc
,22L

	)

1744 
	#SN_id_cmc_p›LökWô√ss
 "id-cmc-p›LökWô√ss"

	)

1745 
	#NID_id_cmc_p›LökWô√ss
 345

	)

1746 
	#OBJ_id_cmc_p›LökWô√ss
 
OBJ_id_cmc
,23L

	)

1748 
	#SN_id_cmc_c⁄fúmCîtAc˚±™˚
 "id-cmc-c⁄fúmCîtAc˚±™˚"

	)

1749 
	#NID_id_cmc_c⁄fúmCîtAc˚±™˚
 346

	)

1750 
	#OBJ_id_cmc_c⁄fúmCîtAc˚±™˚
 
OBJ_id_cmc
,24L

	)

1752 
	#SN_id_⁄_≥rs⁄ÆD©a
 "id-⁄-≥rs⁄ÆD©a"

	)

1753 
	#NID_id_⁄_≥rs⁄ÆD©a
 347

	)

1754 
	#OBJ_id_⁄_≥rs⁄ÆD©a
 
OBJ_id_⁄
,1L

	)

1756 
	#SN_id_⁄_≥rm™ítIdítifõr
 "id-⁄-≥rm™ítIdítifõr"

	)

1757 
	#LN_id_⁄_≥rm™ítIdítifõr
 "Pîm™íàIdítifõr"

	)

1758 
	#NID_id_⁄_≥rm™ítIdítifõr
 858

	)

1759 
	#OBJ_id_⁄_≥rm™ítIdítifõr
 
OBJ_id_⁄
,3L

	)

1761 
	#SN_id_pda_d©eOfBúth
 "id-pda-d©eOfBúth"

	)

1762 
	#NID_id_pda_d©eOfBúth
 348

	)

1763 
	#OBJ_id_pda_d©eOfBúth
 
OBJ_id_pda
,1L

	)

1765 
	#SN_id_pda_∂a˚OfBúth
 "id-pda-∂a˚OfBúth"

	)

1766 
	#NID_id_pda_∂a˚OfBúth
 349

	)

1767 
	#OBJ_id_pda_∂a˚OfBúth
 
OBJ_id_pda
,2L

	)

1769 
	#SN_id_pda_gídî
 "id-pda-gídî"

	)

1770 
	#NID_id_pda_gídî
 351

	)

1771 
	#OBJ_id_pda_gídî
 
OBJ_id_pda
,3L

	)

1773 
	#SN_id_pda_cou¡ryOfCôizíshù
 "id-pda-cou¡ryOfCôizíshù"

	)

1774 
	#NID_id_pda_cou¡ryOfCôizíshù
 352

	)

1775 
	#OBJ_id_pda_cou¡ryOfCôizíshù
 
OBJ_id_pda
,4L

	)

1777 
	#SN_id_pda_cou¡ryOfResidí˚
 "id-pda-cou¡ryOfResidí˚"

	)

1778 
	#NID_id_pda_cou¡ryOfResidí˚
 353

	)

1779 
	#OBJ_id_pda_cou¡ryOfResidí˚
 
OBJ_id_pda
,5L

	)

1781 
	#SN_id_aˇ_authítiˇti⁄Info
 "id-aˇ-authítiˇti⁄Info"

	)

1782 
	#NID_id_aˇ_authítiˇti⁄Info
 354

	)

1783 
	#OBJ_id_aˇ_authítiˇti⁄Info
 
OBJ_id_aˇ
,1L

	)

1785 
	#SN_id_aˇ_ac˚ssIdítôy
 "id-aˇ-ac˚ssIdítôy"

	)

1786 
	#NID_id_aˇ_ac˚ssIdítôy
 355

	)

1787 
	#OBJ_id_aˇ_ac˚ssIdítôy
 
OBJ_id_aˇ
,2L

	)

1789 
	#SN_id_aˇ_ch¨gögIdítôy
 "id-aˇ-ch¨gögIdítôy"

	)

1790 
	#NID_id_aˇ_ch¨gögIdítôy
 356

	)

1791 
	#OBJ_id_aˇ_ch¨gögIdítôy
 
OBJ_id_aˇ
,3L

	)

1793 
	#SN_id_aˇ_group
 "id-aˇ-group"

	)

1794 
	#NID_id_aˇ_group
 357

	)

1795 
	#OBJ_id_aˇ_group
 
OBJ_id_aˇ
,4L

	)

1797 
	#SN_id_aˇ_rﬁe
 "id-aˇ-rﬁe"

	)

1798 
	#NID_id_aˇ_rﬁe
 358

	)

1799 
	#OBJ_id_aˇ_rﬁe
 
OBJ_id_aˇ
,5L

	)

1801 
	#SN_id_aˇ_ícAârs
 "id-aˇ-ícAârs"

	)

1802 
	#NID_id_aˇ_ícAârs
 399

	)

1803 
	#OBJ_id_aˇ_ícAârs
 
OBJ_id_aˇ
,6L

	)

1805 
	#SN_id_qcs_pkixQCSy¡ax_v1
 "id-qcs-pkixQCSy¡ax-v1"

	)

1806 
	#NID_id_qcs_pkixQCSy¡ax_v1
 359

	)

1807 
	#OBJ_id_qcs_pkixQCSy¡ax_v1
 
OBJ_id_qcs
,1L

	)

1809 
	#SN_id_c˘_¸s
 "id-c˘-¸s"

	)

1810 
	#NID_id_c˘_¸s
 360

	)

1811 
	#OBJ_id_c˘_¸s
 
OBJ_id_c˘
,1L

	)

1813 
	#SN_id_c˘_PKID©a
 "id-c˘-PKID©a"

	)

1814 
	#NID_id_c˘_PKID©a
 361

	)

1815 
	#OBJ_id_c˘_PKID©a
 
OBJ_id_c˘
,2L

	)

1817 
	#SN_id_c˘_PKIRe•⁄£
 "id-c˘-PKIRe•⁄£"

	)

1818 
	#NID_id_c˘_PKIRe•⁄£
 362

	)

1819 
	#OBJ_id_c˘_PKIRe•⁄£
 
OBJ_id_c˘
,3L

	)

1821 
	#SN_id_µl_™yL™guage
 "id-µl-™yL™guage"

	)

1822 
	#LN_id_µl_™yL™guage
 "AnyÜ™guage"

	)

1823 
	#NID_id_µl_™yL™guage
 664

	)

1824 
	#OBJ_id_µl_™yL™guage
 
OBJ_id_µl
,0L

	)

1826 
	#SN_id_µl_öhîôAŒ
 "id-µl-öhîôAŒ"

	)

1827 
	#LN_id_µl_öhîôAŒ
 "InhîôáŒ"

	)

1828 
	#NID_id_µl_öhîôAŒ
 665

	)

1829 
	#OBJ_id_µl_öhîôAŒ
 
OBJ_id_µl
,1L

	)

1831 
	#SN_Indïídít
 "id-µl-ödïídít"

	)

1832 
	#LN_Indïídít
 "Indïídít"

	)

1833 
	#NID_Indïídít
 667

	)

1834 
	#OBJ_Indïídít
 
OBJ_id_µl
,2L

	)

1836 
	#SN_ad_OCSP
 "OCSP"

	)

1837 
	#LN_ad_OCSP
 "OCSP"

	)

1838 
	#NID_ad_OCSP
 178

	)

1839 
	#OBJ_ad_OCSP
 
OBJ_id_ad
,1L

	)

1841 
	#SN_ad_ˇ_issuîs
 "ˇIssuîs"

	)

1842 
	#LN_ad_ˇ_issuîs
 "CA Issuîs"

	)

1843 
	#NID_ad_ˇ_issuîs
 179

	)

1844 
	#OBJ_ad_ˇ_issuîs
 
OBJ_id_ad
,2L

	)

1846 
	#SN_ad_timeSèmpög
 "ad_time°ampög"

	)

1847 
	#LN_ad_timeSèmpög
 "AD TimêSèmpög"

	)

1848 
	#NID_ad_timeSèmpög
 363

	)

1849 
	#OBJ_ad_timeSèmpög
 
OBJ_id_ad
,3L

	)

1851 
	#SN_ad_dvcs
 "AD_DVCS"

	)

1852 
	#LN_ad_dvcs
 "ad dvcs"

	)

1853 
	#NID_ad_dvcs
 364

	)

1854 
	#OBJ_ad_dvcs
 
OBJ_id_ad
,4L

	)

1856 
	#SN_ˇRïosô‹y
 "ˇRïosô‹y"

	)

1857 
	#LN_ˇRïosô‹y
 "CA Rïosô‹y"

	)

1858 
	#NID_ˇRïosô‹y
 785

	)

1859 
	#OBJ_ˇRïosô‹y
 
OBJ_id_ad
,5L

	)

1861 
	#OBJ_id_pkix_OCSP
 
OBJ_ad_OCSP


	)

1863 
	#SN_id_pkix_OCSP_basic
 "basicOCSPRe•⁄£"

	)

1864 
	#LN_id_pkix_OCSP_basic
 "Basi¯OCSP Re•⁄£"

	)

1865 
	#NID_id_pkix_OCSP_basic
 365

	)

1866 
	#OBJ_id_pkix_OCSP_basic
 
OBJ_id_pkix_OCSP
,1L

	)

1868 
	#SN_id_pkix_OCSP_N⁄˚
 "N⁄˚"

	)

1869 
	#LN_id_pkix_OCSP_N⁄˚
 "OCSP N⁄˚"

	)

1870 
	#NID_id_pkix_OCSP_N⁄˚
 366

	)

1871 
	#OBJ_id_pkix_OCSP_N⁄˚
 
OBJ_id_pkix_OCSP
,2L

	)

1873 
	#SN_id_pkix_OCSP_CæID
 "CæID"

	)

1874 
	#LN_id_pkix_OCSP_CæID
 "OCSP CRL ID"

	)

1875 
	#NID_id_pkix_OCSP_CæID
 367

	)

1876 
	#OBJ_id_pkix_OCSP_CæID
 
OBJ_id_pkix_OCSP
,3L

	)

1878 
	#SN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "ac˚±abÀRe•⁄£s"

	)

1879 
	#LN_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 "Ac˚±abÀ OCSP Re•⁄£s"

	)

1880 
	#NID_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 368

	)

1881 
	#OBJ_id_pkix_OCSP_ac˚±abÀRe•⁄£s
 
OBJ_id_pkix_OCSP
,4L

	)

1883 
	#SN_id_pkix_OCSP_noCheck
 "noCheck"

	)

1884 
	#LN_id_pkix_OCSP_noCheck
 "OCSP NÿCheck"

	)

1885 
	#NID_id_pkix_OCSP_noCheck
 369

	)

1886 
	#OBJ_id_pkix_OCSP_noCheck
 
OBJ_id_pkix_OCSP
,5L

	)

1888 
	#SN_id_pkix_OCSP_¨chiveCutoff
 "¨chiveCutoff"

	)

1889 
	#LN_id_pkix_OCSP_¨chiveCutoff
 "OCSP ArchivêCutoff"

	)

1890 
	#NID_id_pkix_OCSP_¨chiveCutoff
 370

	)

1891 
	#OBJ_id_pkix_OCSP_¨chiveCutoff
 
OBJ_id_pkix_OCSP
,6L

	)

1893 
	#SN_id_pkix_OCSP_£rvi˚Loˇt‹
 "£rvi˚Loˇt‹"

	)

1894 
	#LN_id_pkix_OCSP_£rvi˚Loˇt‹
 "OCSP Sîvi˚ Loˇt‹"

	)

1895 
	#NID_id_pkix_OCSP_£rvi˚Loˇt‹
 371

	)

1896 
	#OBJ_id_pkix_OCSP_£rvi˚Loˇt‹
 
OBJ_id_pkix_OCSP
,7L

	)

1898 
	#SN_id_pkix_OCSP_exãndedSètus
 "exãndedSètus"

	)

1899 
	#LN_id_pkix_OCSP_exãndedSètus
 "Exãnded OCSP Sètus"

	)

1900 
	#NID_id_pkix_OCSP_exãndedSètus
 372

	)

1901 
	#OBJ_id_pkix_OCSP_exãndedSètus
 
OBJ_id_pkix_OCSP
,8L

	)

1903 
	#SN_id_pkix_OCSP_vÆid
 "vÆid"

	)

1904 
	#NID_id_pkix_OCSP_vÆid
 373

	)

1905 
	#OBJ_id_pkix_OCSP_vÆid
 
OBJ_id_pkix_OCSP
,9L

	)

1907 
	#SN_id_pkix_OCSP_∑th
 "∑th"

	)

1908 
	#NID_id_pkix_OCSP_∑th
 374

	)

1909 
	#OBJ_id_pkix_OCSP_∑th
 
OBJ_id_pkix_OCSP
,10L

	)

1911 
	#SN_id_pkix_OCSP_åu°RoŸ
 "åu°RoŸ"

	)

1912 
	#LN_id_pkix_OCSP_åu°RoŸ
 "Tru° RoŸ"

	)

1913 
	#NID_id_pkix_OCSP_åu°RoŸ
 375

	)

1914 
	#OBJ_id_pkix_OCSP_åu°RoŸ
 
OBJ_id_pkix_OCSP
,11L

	)

1916 
	#SN_Æg‹ôhm
 "Æg‹ôhm"

	)

1917 
	#LN_Æg‹ôhm
 "Æg‹ôhm"

	)

1918 
	#NID_Æg‹ôhm
 376

	)

1919 
	#OBJ_Æg‹ôhm
 1L,3L,14L,3L,2L

	)

1921 
	#SN_md5WôhRSA
 "RSA-NP-MD5"

	)

1922 
	#LN_md5WôhRSA
 "md5WôhRSA"

	)

1923 
	#NID_md5WôhRSA
 104

	)

1924 
	#OBJ_md5WôhRSA
 
OBJ_Æg‹ôhm
,3L

	)

1926 
	#SN_des_ecb
 "DES-ECB"

	)

1927 
	#LN_des_ecb
 "des-ecb"

	)

1928 
	#NID_des_ecb
 29

	)

1929 
	#OBJ_des_ecb
 
OBJ_Æg‹ôhm
,6L

	)

1931 
	#SN_des_cbc
 "DES-CBC"

	)

1932 
	#LN_des_cbc
 "des-cbc"

	)

1933 
	#NID_des_cbc
 31

	)

1934 
	#OBJ_des_cbc
 
OBJ_Æg‹ôhm
,7L

	)

1936 
	#SN_des_ofb64
 "DES-OFB"

	)

1937 
	#LN_des_ofb64
 "des-ofb"

	)

1938 
	#NID_des_ofb64
 45

	)

1939 
	#OBJ_des_ofb64
 
OBJ_Æg‹ôhm
,8L

	)

1941 
	#SN_des_cfb64
 "DES-CFB"

	)

1942 
	#LN_des_cfb64
 "des-cfb"

	)

1943 
	#NID_des_cfb64
 30

	)

1944 
	#OBJ_des_cfb64
 
OBJ_Æg‹ôhm
,9L

	)

1946 
	#SN_rßSig«tuª
 "rßSig«tuª"

	)

1947 
	#NID_rßSig«tuª
 377

	)

1948 
	#OBJ_rßSig«tuª
 
OBJ_Æg‹ôhm
,11L

	)

1950 
	#SN_dß_2
 "DSA-ﬁd"

	)

1951 
	#LN_dß_2
 "dßEn¸y±i⁄-ﬁd"

	)

1952 
	#NID_dß_2
 67

	)

1953 
	#OBJ_dß_2
 
OBJ_Æg‹ôhm
,12L

	)

1955 
	#SN_dßWôhSHA
 "DSA-SHA"

	)

1956 
	#LN_dßWôhSHA
 "dßWôhSHA"

	)

1957 
	#NID_dßWôhSHA
 66

	)

1958 
	#OBJ_dßWôhSHA
 
OBJ_Æg‹ôhm
,13L

	)

1960 
	#SN_shaWôhRSAEn¸y±i⁄
 "RSA-SHA"

	)

1961 
	#LN_shaWôhRSAEn¸y±i⁄
 "shaWôhRSAEn¸y±i⁄"

	)

1962 
	#NID_shaWôhRSAEn¸y±i⁄
 42

	)

1963 
	#OBJ_shaWôhRSAEn¸y±i⁄
 
OBJ_Æg‹ôhm
,15L

	)

1965 
	#SN_des_ede_ecb
 "DES-EDE"

	)

1966 
	#LN_des_ede_ecb
 "des-ede"

	)

1967 
	#NID_des_ede_ecb
 32

	)

1968 
	#OBJ_des_ede_ecb
 
OBJ_Æg‹ôhm
,17L

	)

1970 
	#SN_des_ede3_ecb
 "DES-EDE3"

	)

1971 
	#LN_des_ede3_ecb
 "des-ede3"

	)

1972 
	#NID_des_ede3_ecb
 33

	)

1974 
	#SN_des_ede_cbc
 "DES-EDE-CBC"

	)

1975 
	#LN_des_ede_cbc
 "des-ede-cbc"

	)

1976 
	#NID_des_ede_cbc
 43

	)

1978 
	#SN_des_ede_cfb64
 "DES-EDE-CFB"

	)

1979 
	#LN_des_ede_cfb64
 "des-ede-cfb"

	)

1980 
	#NID_des_ede_cfb64
 60

	)

1982 
	#SN_des_ede3_cfb64
 "DES-EDE3-CFB"

	)

1983 
	#LN_des_ede3_cfb64
 "des-ede3-cfb"

	)

1984 
	#NID_des_ede3_cfb64
 61

	)

1986 
	#SN_des_ede_ofb64
 "DES-EDE-OFB"

	)

1987 
	#LN_des_ede_ofb64
 "des-ede-ofb"

	)

1988 
	#NID_des_ede_ofb64
 62

	)

1990 
	#SN_des_ede3_ofb64
 "DES-EDE3-OFB"

	)

1991 
	#LN_des_ede3_ofb64
 "des-ede3-ofb"

	)

1992 
	#NID_des_ede3_ofb64
 63

	)

1994 
	#SN_desx_cbc
 "DESX-CBC"

	)

1995 
	#LN_desx_cbc
 "desx-cbc"

	)

1996 
	#NID_desx_cbc
 80

	)

1998 
	#SN_sha
 "SHA"

	)

1999 
	#LN_sha
 "sha"

	)

2000 
	#NID_sha
 41

	)

2001 
	#OBJ_sha
 
OBJ_Æg‹ôhm
,18L

	)

2003 
	#SN_sha1
 "SHA1"

	)

2004 
	#LN_sha1
 "sha1"

	)

2005 
	#NID_sha1
 64

	)

2006 
	#OBJ_sha1
 
OBJ_Æg‹ôhm
,26L

	)

2008 
	#SN_dßWôhSHA1_2
 "DSA-SHA1-ﬁd"

	)

2009 
	#LN_dßWôhSHA1_2
 "dßWôhSHA1-ﬁd"

	)

2010 
	#NID_dßWôhSHA1_2
 70

	)

2011 
	#OBJ_dßWôhSHA1_2
 
OBJ_Æg‹ôhm
,27L

	)

2013 
	#SN_sha1WôhRSA
 "RSA-SHA1-2"

	)

2014 
	#LN_sha1WôhRSA
 "sha1WôhRSA"

	)

2015 
	#NID_sha1WôhRSA
 115

	)

2016 
	#OBJ_sha1WôhRSA
 
OBJ_Æg‹ôhm
,29L

	)

2018 
	#SN_rùemd160
 "RIPEMD160"

	)

2019 
	#LN_rùemd160
 "rùemd160"

	)

2020 
	#NID_rùemd160
 117

	)

2021 
	#OBJ_rùemd160
 1L,3L,36L,3L,2L,1L

	)

2023 
	#SN_rùemd160WôhRSA
 "RSA-RIPEMD160"

	)

2024 
	#LN_rùemd160WôhRSA
 "rùemd160WôhRSA"

	)

2025 
	#NID_rùemd160WôhRSA
 119

	)

2026 
	#OBJ_rùemd160WôhRSA
 1L,3L,36L,3L,3L,1L,2L

	)

2028 
	#SN_sx√t
 "SXNëID"

	)

2029 
	#LN_sx√t
 "Så⁄g Exå™ë ID"

	)

2030 
	#NID_sx√t
 143

	)

2031 
	#OBJ_sx√t
 1L,3L,101L,1L,4L,1L

	)

2033 
	#SN_X500
 "X500"

	)

2034 
	#LN_X500
 "dúe˘‹y sîvi˚†(X.500)"

	)

2035 
	#NID_X500
 11

	)

2036 
	#OBJ_X500
 2L,5L

	)

2038 
	#SN_X509
 "X509"

	)

2039 
	#NID_X509
 12

	)

2040 
	#OBJ_X509
 
OBJ_X500
,4L

	)

2042 
	#SN_comm⁄Name
 "CN"

	)

2043 
	#LN_comm⁄Name
 "comm⁄Name"

	)

2044 
	#NID_comm⁄Name
 13

	)

2045 
	#OBJ_comm⁄Name
 
OBJ_X509
,3L

	)

2047 
	#SN_su∫ame
 "SN"

	)

2048 
	#LN_su∫ame
 "su∫ame"

	)

2049 
	#NID_su∫ame
 100

	)

2050 
	#OBJ_su∫ame
 
OBJ_X509
,4L

	)

2052 
	#LN_£rülNumbî
 "£rülNumbî"

	)

2053 
	#NID_£rülNumbî
 105

	)

2054 
	#OBJ_£rülNumbî
 
OBJ_X509
,5L

	)

2056 
	#SN_cou¡ryName
 "C"

	)

2057 
	#LN_cou¡ryName
 "cou¡ryName"

	)

2058 
	#NID_cou¡ryName
 14

	)

2059 
	#OBJ_cou¡ryName
 
OBJ_X509
,6L

	)

2061 
	#SN_loˇlôyName
 "L"

	)

2062 
	#LN_loˇlôyName
 "loˇlôyName"

	)

2063 
	#NID_loˇlôyName
 15

	)

2064 
	#OBJ_loˇlôyName
 
OBJ_X509
,7L

	)

2066 
	#SN_°©eOrProvö˚Name
 "ST"

	)

2067 
	#LN_°©eOrProvö˚Name
 "°©eOrProvö˚Name"

	)

2068 
	#NID_°©eOrProvö˚Name
 16

	)

2069 
	#OBJ_°©eOrProvö˚Name
 
OBJ_X509
,8L

	)

2071 
	#SN_°ªëAddªss
 "°ªë"

	)

2072 
	#LN_°ªëAddªss
 "°ªëAddªss"

	)

2073 
	#NID_°ªëAddªss
 660

	)

2074 
	#OBJ_°ªëAddªss
 
OBJ_X509
,9L

	)

2076 
	#SN_‹g™iz©i⁄Name
 "O"

	)

2077 
	#LN_‹g™iz©i⁄Name
 "‹g™iz©i⁄Name"

	)

2078 
	#NID_‹g™iz©i⁄Name
 17

	)

2079 
	#OBJ_‹g™iz©i⁄Name
 
OBJ_X509
,10L

	)

2081 
	#SN_‹g™iz©i⁄ÆUnôName
 "OU"

	)

2082 
	#LN_‹g™iz©i⁄ÆUnôName
 "‹g™iz©i⁄ÆUnôName"

	)

2083 
	#NID_‹g™iz©i⁄ÆUnôName
 18

	)

2084 
	#OBJ_‹g™iz©i⁄ÆUnôName
 
OBJ_X509
,11L

	)

2086 
	#SN_tôÀ
 "tôÀ"

	)

2087 
	#LN_tôÀ
 "tôÀ"

	)

2088 
	#NID_tôÀ
 106

	)

2089 
	#OBJ_tôÀ
 
OBJ_X509
,12L

	)

2091 
	#LN_des¸ùti⁄
 "des¸ùti⁄"

	)

2092 
	#NID_des¸ùti⁄
 107

	)

2093 
	#OBJ_des¸ùti⁄
 
OBJ_X509
,13L

	)

2095 
	#LN_£¨chGuide
 "£¨chGuide"

	)

2096 
	#NID_£¨chGuide
 859

	)

2097 
	#OBJ_£¨chGuide
 
OBJ_X509
,14L

	)

2099 
	#LN_busöessC©eg‹y
 "busöessC©eg‹y"

	)

2100 
	#NID_busöessC©eg‹y
 860

	)

2101 
	#OBJ_busöessC©eg‹y
 
OBJ_X509
,15L

	)

2103 
	#LN_po°ÆAddªss
 "po°ÆAddªss"

	)

2104 
	#NID_po°ÆAddªss
 861

	)

2105 
	#OBJ_po°ÆAddªss
 
OBJ_X509
,16L

	)

2107 
	#LN_po°ÆCode
 "po°ÆCode"

	)

2108 
	#NID_po°ÆCode
 661

	)

2109 
	#OBJ_po°ÆCode
 
OBJ_X509
,17L

	)

2111 
	#LN_po°Offi˚Box
 "po°Offi˚Box"

	)

2112 
	#NID_po°Offi˚Box
 862

	)

2113 
	#OBJ_po°Offi˚Box
 
OBJ_X509
,18L

	)

2115 
	#LN_physiˇlDñivîyOffi˚Name
 "physiˇlDñivîyOffi˚Name"

	)

2116 
	#NID_physiˇlDñivîyOffi˚Name
 863

	)

2117 
	#OBJ_physiˇlDñivîyOffi˚Name
 
OBJ_X509
,19L

	)

2119 
	#LN_ãÀph⁄eNumbî
 "ãÀph⁄eNumbî"

	)

2120 
	#NID_ãÀph⁄eNumbî
 864

	)

2121 
	#OBJ_ãÀph⁄eNumbî
 
OBJ_X509
,20L

	)

2123 
	#LN_ãÀxNumbî
 "ãÀxNumbî"

	)

2124 
	#NID_ãÀxNumbî
 865

	)

2125 
	#OBJ_ãÀxNumbî
 
OBJ_X509
,21L

	)

2127 
	#LN_ãÀãxTîmöÆIdítifõr
 "ãÀãxTîmöÆIdítifõr"

	)

2128 
	#NID_ãÀãxTîmöÆIdítifõr
 866

	)

2129 
	#OBJ_ãÀãxTîmöÆIdítifõr
 
OBJ_X509
,22L

	)

2131 
	#LN_ÁcsimûeTñïh⁄eNumbî
 "ÁcsimûeTñïh⁄eNumbî"

	)

2132 
	#NID_ÁcsimûeTñïh⁄eNumbî
 867

	)

2133 
	#OBJ_ÁcsimûeTñïh⁄eNumbî
 
OBJ_X509
,23L

	)

2135 
	#LN_x121Addªss
 "x121Addªss"

	)

2136 
	#NID_x121Addªss
 868

	)

2137 
	#OBJ_x121Addªss
 
OBJ_X509
,24L

	)

2139 
	#LN_öã∫©i⁄ÆiSDNNumbî
 "öã∫©i⁄ÆiSDNNumbî"

	)

2140 
	#NID_öã∫©i⁄ÆiSDNNumbî
 869

	)

2141 
	#OBJ_öã∫©i⁄ÆiSDNNumbî
 
OBJ_X509
,25L

	)

2143 
	#LN_ªgi°îedAddªss
 "ªgi°îedAddªss"

	)

2144 
	#NID_ªgi°îedAddªss
 870

	)

2145 
	#OBJ_ªgi°îedAddªss
 
OBJ_X509
,26L

	)

2147 
	#LN_de°ö©i⁄Indiˇt‹
 "de°ö©i⁄Indiˇt‹"

	)

2148 
	#NID_de°ö©i⁄Indiˇt‹
 871

	)

2149 
	#OBJ_de°ö©i⁄Indiˇt‹
 
OBJ_X509
,27L

	)

2151 
	#LN_¥e„ºedDñivîyMëhod
 "¥e„ºedDñivîyMëhod"

	)

2152 
	#NID_¥e„ºedDñivîyMëhod
 872

	)

2153 
	#OBJ_¥e„ºedDñivîyMëhod
 
OBJ_X509
,28L

	)

2155 
	#LN_¥e£¡©i⁄Addªss
 "¥e£¡©i⁄Addªss"

	)

2156 
	#NID_¥e£¡©i⁄Addªss
 873

	)

2157 
	#OBJ_¥e£¡©i⁄Addªss
 
OBJ_X509
,29L

	)

2159 
	#LN_suµ‹ãdAµliˇti⁄C⁄ãxt
 "suµ‹ãdAµliˇti⁄C⁄ãxt"

	)

2160 
	#NID_suµ‹ãdAµliˇti⁄C⁄ãxt
 874

	)

2161 
	#OBJ_suµ‹ãdAµliˇti⁄C⁄ãxt
 
OBJ_X509
,30L

	)

2163 
	#SN_membî
 "membî"

	)

2164 
	#NID_membî
 875

	)

2165 
	#OBJ_membî
 
OBJ_X509
,31L

	)

2167 
	#SN_ow√r
 "ow√r"

	)

2168 
	#NID_ow√r
 876

	)

2169 
	#OBJ_ow√r
 
OBJ_X509
,32L

	)

2171 
	#LN_rﬁeOccu∑¡
 "rﬁeOccu∑¡"

	)

2172 
	#NID_rﬁeOccu∑¡
 877

	)

2173 
	#OBJ_rﬁeOccu∑¡
 
OBJ_X509
,33L

	)

2175 
	#SN_£eAlso
 "£eAlso"

	)

2176 
	#NID_£eAlso
 878

	)

2177 
	#OBJ_£eAlso
 
OBJ_X509
,34L

	)

2179 
	#LN_u£rPassw‹d
 "u£rPassw‹d"

	)

2180 
	#NID_u£rPassw‹d
 879

	)

2181 
	#OBJ_u£rPassw‹d
 
OBJ_X509
,35L

	)

2183 
	#LN_u£rCîtifiˇã
 "u£rCîtifiˇã"

	)

2184 
	#NID_u£rCîtifiˇã
 880

	)

2185 
	#OBJ_u£rCîtifiˇã
 
OBJ_X509
,36L

	)

2187 
	#LN_cACîtifiˇã
 "cACîtifiˇã"

	)

2188 
	#NID_cACîtifiˇã
 881

	)

2189 
	#OBJ_cACîtifiˇã
 
OBJ_X509
,37L

	)

2191 
	#LN_auth‹ôyRevoˇti⁄Li°
 "auth‹ôyRevoˇti⁄Li°"

	)

2192 
	#NID_auth‹ôyRevoˇti⁄Li°
 882

	)

2193 
	#OBJ_auth‹ôyRevoˇti⁄Li°
 
OBJ_X509
,38L

	)

2195 
	#LN_˚πifiˇãRevoˇti⁄Li°
 "˚πifiˇãRevoˇti⁄Li°"

	)

2196 
	#NID_˚πifiˇãRevoˇti⁄Li°
 883

	)

2197 
	#OBJ_˚πifiˇãRevoˇti⁄Li°
 
OBJ_X509
,39L

	)

2199 
	#LN_¸ossCîtifiˇãPaú
 "¸ossCîtifiˇãPaú"

	)

2200 
	#NID_¸ossCîtifiˇãPaú
 884

	)

2201 
	#OBJ_¸ossCîtifiˇãPaú
 
OBJ_X509
,40L

	)

2203 
	#SN_«me
 "«me"

	)

2204 
	#LN_«me
 "«me"

	)

2205 
	#NID_«me
 173

	)

2206 
	#OBJ_«me
 
OBJ_X509
,41L

	)

2208 
	#SN_givíName
 "GN"

	)

2209 
	#LN_givíName
 "givíName"

	)

2210 
	#NID_givíName
 99

	)

2211 
	#OBJ_givíName
 
OBJ_X509
,42L

	)

2213 
	#SN_öôüls
 "öôüls"

	)

2214 
	#LN_öôüls
 "öôüls"

	)

2215 
	#NID_öôüls
 101

	)

2216 
	#OBJ_öôüls
 
OBJ_X509
,43L

	)

2218 
	#LN_gíî©i⁄QuÆifõr
 "gíî©i⁄QuÆifõr"

	)

2219 
	#NID_gíî©i⁄QuÆifõr
 509

	)

2220 
	#OBJ_gíî©i⁄QuÆifõr
 
OBJ_X509
,44L

	)

2222 
	#LN_x500UniqueIdítifõr
 "x500UniqueIdítifõr"

	)

2223 
	#NID_x500UniqueIdítifõr
 503

	)

2224 
	#OBJ_x500UniqueIdítifõr
 
OBJ_X509
,45L

	)

2226 
	#SN_dnQuÆifõr
 "dnQuÆifõr"

	)

2227 
	#LN_dnQuÆifõr
 "dnQuÆifõr"

	)

2228 
	#NID_dnQuÆifõr
 174

	)

2229 
	#OBJ_dnQuÆifõr
 
OBJ_X509
,46L

	)

2231 
	#LN_íh™˚dSórchGuide
 "íh™˚dSórchGuide"

	)

2232 
	#NID_íh™˚dSórchGuide
 885

	)

2233 
	#OBJ_íh™˚dSórchGuide
 
OBJ_X509
,47L

	)

2235 
	#LN_¥ŸocﬁInf‹m©i⁄
 "¥ŸocﬁInf‹m©i⁄"

	)

2236 
	#NID_¥ŸocﬁInf‹m©i⁄
 886

	)

2237 
	#OBJ_¥ŸocﬁInf‹m©i⁄
 
OBJ_X509
,48L

	)

2239 
	#LN_di°öguishedName
 "di°öguishedName"

	)

2240 
	#NID_di°öguishedName
 887

	)

2241 
	#OBJ_di°öguishedName
 
OBJ_X509
,49L

	)

2243 
	#LN_uniqueMembî
 "uniqueMembî"

	)

2244 
	#NID_uniqueMembî
 888

	)

2245 
	#OBJ_uniqueMembî
 
OBJ_X509
,50L

	)

2247 
	#LN_hou£Idítifõr
 "hou£Idítifõr"

	)

2248 
	#NID_hou£Idítifõr
 889

	)

2249 
	#OBJ_hou£Idítifõr
 
OBJ_X509
,51L

	)

2251 
	#LN_suµ‹ãdAlg‹ôhms
 "suµ‹ãdAlg‹ôhms"

	)

2252 
	#NID_suµ‹ãdAlg‹ôhms
 890

	)

2253 
	#OBJ_suµ‹ãdAlg‹ôhms
 
OBJ_X509
,52L

	)

2255 
	#LN_dñèRevoˇti⁄Li°
 "dñèRevoˇti⁄Li°"

	)

2256 
	#NID_dñèRevoˇti⁄Li°
 891

	)

2257 
	#OBJ_dñèRevoˇti⁄Li°
 
OBJ_X509
,53L

	)

2259 
	#SN_dmdName
 "dmdName"

	)

2260 
	#NID_dmdName
 892

	)

2261 
	#OBJ_dmdName
 
OBJ_X509
,54L

	)

2263 
	#LN_p£ud⁄ym
 "p£ud⁄ym"

	)

2264 
	#NID_p£ud⁄ym
 510

	)

2265 
	#OBJ_p£ud⁄ym
 
OBJ_X509
,65L

	)

2267 
	#SN_rﬁe
 "rﬁe"

	)

2268 
	#LN_rﬁe
 "rﬁe"

	)

2269 
	#NID_rﬁe
 400

	)

2270 
	#OBJ_rﬁe
 
OBJ_X509
,72L

	)

2272 
	#SN_X500Æg‹ôhms
 "X500Æg‹ôhms"

	)

2273 
	#LN_X500Æg‹ôhms
 "dúe˘‹y sîvi˚†-álg‹ôhms"

	)

2274 
	#NID_X500Æg‹ôhms
 378

	)

2275 
	#OBJ_X500Æg‹ôhms
 
OBJ_X500
,8L

	)

2277 
	#SN_rß
 "RSA"

	)

2278 
	#LN_rß
 "rß"

	)

2279 
	#NID_rß
 19

	)

2280 
	#OBJ_rß
 
OBJ_X500Æg‹ôhms
,1L,1L

	)

2282 
	#SN_mdc2WôhRSA
 "RSA-MDC2"

	)

2283 
	#LN_mdc2WôhRSA
 "mdc2WôhRSA"

	)

2284 
	#NID_mdc2WôhRSA
 96

	)

2285 
	#OBJ_mdc2WôhRSA
 
OBJ_X500Æg‹ôhms
,3L,100L

	)

2287 
	#SN_mdc2
 "MDC2"

	)

2288 
	#LN_mdc2
 "mdc2"

	)

2289 
	#NID_mdc2
 95

	)

2290 
	#OBJ_mdc2
 
OBJ_X500Æg‹ôhms
,3L,101L

	)

2292 
	#SN_id_˚
 "id-˚"

	)

2293 
	#NID_id_˚
 81

	)

2294 
	#OBJ_id_˚
 
OBJ_X500
,29L

	)

2296 
	#SN_subje˘_dúe˘‹y_©åibuãs
 "subje˘Dúe˘‹yAâribuãs"

	)

2297 
	#LN_subje˘_dúe˘‹y_©åibuãs
 "X509v3 Subje˘ Dúe˘‹y Aâribuãs"

	)

2298 
	#NID_subje˘_dúe˘‹y_©åibuãs
 769

	)

2299 
	#OBJ_subje˘_dúe˘‹y_©åibuãs
 
OBJ_id_˚
,9L

	)

2301 
	#SN_subje˘_key_idítifõr
 "subje˘KeyIdítifõr"

	)

2302 
	#LN_subje˘_key_idítifõr
 "X509v3 Subje˘ Key Idítifõr"

	)

2303 
	#NID_subje˘_key_idítifõr
 82

	)

2304 
	#OBJ_subje˘_key_idítifõr
 
OBJ_id_˚
,14L

	)

2306 
	#SN_key_ußge
 "keyUßge"

	)

2307 
	#LN_key_ußge
 "X509v3 Key Ußge"

	)

2308 
	#NID_key_ußge
 83

	)

2309 
	#OBJ_key_ußge
 
OBJ_id_˚
,15L

	)

2311 
	#SN_¥iv©e_key_ußge_≥riod
 "¥iv©eKeyUßgePîiod"

	)

2312 
	#LN_¥iv©e_key_ußge_≥riod
 "X509v3 Priv©êKey UßgêPîiod"

	)

2313 
	#NID_¥iv©e_key_ußge_≥riod
 84

	)

2314 
	#OBJ_¥iv©e_key_ußge_≥riod
 
OBJ_id_˚
,16L

	)

2316 
	#SN_subje˘_Æt_«me
 "subje˘A…Name"

	)

2317 
	#LN_subje˘_Æt_«me
 "X509v3 Subje˘ A…î«tivêName"

	)

2318 
	#NID_subje˘_Æt_«me
 85

	)

2319 
	#OBJ_subje˘_Æt_«me
 
OBJ_id_˚
,17L

	)

2321 
	#SN_issuî_Æt_«me
 "issuîA…Name"

	)

2322 
	#LN_issuî_Æt_«me
 "X509v3 Issuî A…î«tivêName"

	)

2323 
	#NID_issuî_Æt_«me
 86

	)

2324 
	#OBJ_issuî_Æt_«me
 
OBJ_id_˚
,18L

	)

2326 
	#SN_basic_c⁄°øöts
 "basicC⁄°øöts"

	)

2327 
	#LN_basic_c⁄°øöts
 "X509v3 Basi¯C⁄°øöts"

	)

2328 
	#NID_basic_c⁄°øöts
 87

	)

2329 
	#OBJ_basic_c⁄°øöts
 
OBJ_id_˚
,19L

	)

2331 
	#SN_¸l_numbî
 "¸lNumbî"

	)

2332 
	#LN_¸l_numbî
 "X509v3 CRL Numbî"

	)

2333 
	#NID_¸l_numbî
 88

	)

2334 
	#OBJ_¸l_numbî
 
OBJ_id_˚
,20L

	)

2336 
	#SN_¸l_ªas⁄
 "CRLRós⁄"

	)

2337 
	#LN_¸l_ªas⁄
 "X509v3 CRL Rós⁄ Code"

	)

2338 
	#NID_¸l_ªas⁄
 141

	)

2339 
	#OBJ_¸l_ªas⁄
 
OBJ_id_˚
,21L

	)

2341 
	#SN_övÆidôy_d©e
 "övÆidôyD©e"

	)

2342 
	#LN_övÆidôy_d©e
 "InvÆidôy D©e"

	)

2343 
	#NID_övÆidôy_d©e
 142

	)

2344 
	#OBJ_övÆidôy_d©e
 
OBJ_id_˚
,24L

	)

2346 
	#SN_dñè_¸l
 "dñèCRL"

	)

2347 
	#LN_dñè_¸l
 "X509v3 Dñè CRL Indiˇt‹"

	)

2348 
	#NID_dñè_¸l
 140

	)

2349 
	#OBJ_dñè_¸l
 
OBJ_id_˚
,27L

	)

2351 
	#SN_issuög_di°ributi⁄_poöt
 "issuögDi°ributi⁄Poöt"

	)

2352 
	#LN_issuög_di°ributi⁄_poöt
 "X509v3 Issuög Di°rubuti⁄ Poöt"

	)

2353 
	#NID_issuög_di°ributi⁄_poöt
 770

	)

2354 
	#OBJ_issuög_di°ributi⁄_poöt
 
OBJ_id_˚
,28L

	)

2356 
	#SN_˚πifiˇã_issuî
 "˚πifiˇãIssuî"

	)

2357 
	#LN_˚πifiˇã_issuî
 "X509v3 Cîtifiˇã Issuî"

	)

2358 
	#NID_˚πifiˇã_issuî
 771

	)

2359 
	#OBJ_˚πifiˇã_issuî
 
OBJ_id_˚
,29L

	)

2361 
	#SN_«me_c⁄°øöts
 "«meC⁄°øöts"

	)

2362 
	#LN_«me_c⁄°øöts
 "X509v3 NamêC⁄°øöts"

	)

2363 
	#NID_«me_c⁄°øöts
 666

	)

2364 
	#OBJ_«me_c⁄°øöts
 
OBJ_id_˚
,30L

	)

2366 
	#SN_¸l_di°ributi⁄_poöts
 "¸lDi°ributi⁄Poöts"

	)

2367 
	#LN_¸l_di°ributi⁄_poöts
 "X509v3 CRL Di°ributi⁄ Poöts"

	)

2368 
	#NID_¸l_di°ributi⁄_poöts
 103

	)

2369 
	#OBJ_¸l_di°ributi⁄_poöts
 
OBJ_id_˚
,31L

	)

2371 
	#SN_˚πifiˇã_pﬁicõs
 "˚πifiˇãPﬁicõs"

	)

2372 
	#LN_˚πifiˇã_pﬁicõs
 "X509v3 Cîtifiˇã Pﬁicõs"

	)

2373 
	#NID_˚πifiˇã_pﬁicõs
 89

	)

2374 
	#OBJ_˚πifiˇã_pﬁicõs
 
OBJ_id_˚
,32L

	)

2376 
	#SN_™y_pﬁicy
 "™yPﬁicy"

	)

2377 
	#LN_™y_pﬁicy
 "X509v3 Any Pﬁicy"

	)

2378 
	#NID_™y_pﬁicy
 746

	)

2379 
	#OBJ_™y_pﬁicy
 
OBJ_˚πifiˇã_pﬁicõs
,0L

	)

2381 
	#SN_pﬁicy_m≠pögs
 "pﬁicyM≠pögs"

	)

2382 
	#LN_pﬁicy_m≠pögs
 "X509v3 Pﬁicy M≠pögs"

	)

2383 
	#NID_pﬁicy_m≠pögs
 747

	)

2384 
	#OBJ_pﬁicy_m≠pögs
 
OBJ_id_˚
,33L

	)

2386 
	#SN_auth‹ôy_key_idítifõr
 "auth‹ôyKeyIdítifõr"

	)

2387 
	#LN_auth‹ôy_key_idítifõr
 "X509v3 Auth‹ôy Key Idítifõr"

	)

2388 
	#NID_auth‹ôy_key_idítifõr
 90

	)

2389 
	#OBJ_auth‹ôy_key_idítifõr
 
OBJ_id_˚
,35L

	)

2391 
	#SN_pﬁicy_c⁄°øöts
 "pﬁicyC⁄°øöts"

	)

2392 
	#LN_pﬁicy_c⁄°øöts
 "X509v3 Pﬁicy C⁄°øöts"

	)

2393 
	#NID_pﬁicy_c⁄°øöts
 401

	)

2394 
	#OBJ_pﬁicy_c⁄°øöts
 
OBJ_id_˚
,36L

	)

2396 
	#SN_ext_key_ußge
 "exãndedKeyUßge"

	)

2397 
	#LN_ext_key_ußge
 "X509v3 Exãnded Key Ußge"

	)

2398 
	#NID_ext_key_ußge
 126

	)

2399 
	#OBJ_ext_key_ußge
 
OBJ_id_˚
,37L

	)

2401 
	#SN_‰eshe°_¸l
 "‰eshe°CRL"

	)

2402 
	#LN_‰eshe°_¸l
 "X509v3 Fªshe° CRL"

	)

2403 
	#NID_‰eshe°_¸l
 857

	)

2404 
	#OBJ_‰eshe°_¸l
 
OBJ_id_˚
,46L

	)

2406 
	#SN_öhibô_™y_pﬁicy
 "öhibôAnyPﬁicy"

	)

2407 
	#LN_öhibô_™y_pﬁicy
 "X509v3 Inhibô Any Pﬁicy"

	)

2408 
	#NID_öhibô_™y_pﬁicy
 748

	)

2409 
	#OBJ_öhibô_™y_pﬁicy
 
OBJ_id_˚
,54L

	)

2411 
	#SN_èrgë_öf‹m©i⁄
 "èrgëInf‹m©i⁄"

	)

2412 
	#LN_èrgë_öf‹m©i⁄
 "X509v3 AC T¨gëög"

	)

2413 
	#NID_èrgë_öf‹m©i⁄
 402

	)

2414 
	#OBJ_èrgë_öf‹m©i⁄
 
OBJ_id_˚
,55L

	)

2416 
	#SN_no_ªv_avaû
 "noRevAvaû"

	)

2417 
	#LN_no_ªv_avaû
 "X509v3 NÿRevoˇti⁄ AvaûabÀ"

	)

2418 
	#NID_no_ªv_avaû
 403

	)

2419 
	#OBJ_no_ªv_avaû
 
OBJ_id_˚
,56L

	)

2421 
	#SN_™yExãndedKeyUßge
 "™yExãndedKeyUßge"

	)

2422 
	#LN_™yExãndedKeyUßge
 "Any Exãnded Key Ußge"

	)

2423 
	#NID_™yExãndedKeyUßge
 910

	)

2424 
	#OBJ_™yExãndedKeyUßge
 
OBJ_ext_key_ußge
,0L

	)

2426 
	#SN_√tsˇ≥
 "Nësˇ≥"

	)

2427 
	#LN_√tsˇ≥
 "Nësˇ≥ Communiˇti⁄†C‹p."

	)

2428 
	#NID_√tsˇ≥
 57

	)

2429 
	#OBJ_√tsˇ≥
 2L,16L,840L,1L,113730L

	)

2431 
	#SN_√tsˇ≥_˚π_exãnsi⁄
 "nsCîtExt"

	)

2432 
	#LN_√tsˇ≥_˚π_exãnsi⁄
 "Nësˇ≥ Cîtifiˇã Exãnsi⁄"

	)

2433 
	#NID_√tsˇ≥_˚π_exãnsi⁄
 58

	)

2434 
	#OBJ_√tsˇ≥_˚π_exãnsi⁄
 
OBJ_√tsˇ≥
,1L

	)

2436 
	#SN_√tsˇ≥_d©a_ty≥
 "nsD©aTy≥"

	)

2437 
	#LN_√tsˇ≥_d©a_ty≥
 "Nësˇ≥ D©®Ty≥"

	)

2438 
	#NID_√tsˇ≥_d©a_ty≥
 59

	)

2439 
	#OBJ_√tsˇ≥_d©a_ty≥
 
OBJ_√tsˇ≥
,2L

	)

2441 
	#SN_√tsˇ≥_˚π_ty≥
 "nsCîtTy≥"

	)

2442 
	#LN_√tsˇ≥_˚π_ty≥
 "Nësˇ≥ CîàTy≥"

	)

2443 
	#NID_√tsˇ≥_˚π_ty≥
 71

	)

2444 
	#OBJ_√tsˇ≥_˚π_ty≥
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,1L

	)

2446 
	#SN_√tsˇ≥_ba£_uæ
 "nsBa£Uæ"

	)

2447 
	#LN_√tsˇ≥_ba£_uæ
 "Nësˇ≥ Ba£ Uæ"

	)

2448 
	#NID_√tsˇ≥_ba£_uæ
 72

	)

2449 
	#OBJ_√tsˇ≥_ba£_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,2L

	)

2451 
	#SN_√tsˇ≥_ªvoˇti⁄_uæ
 "nsRevoˇti⁄Uæ"

	)

2452 
	#LN_√tsˇ≥_ªvoˇti⁄_uæ
 "Nësˇ≥ Revoˇti⁄ Uæ"

	)

2453 
	#NID_√tsˇ≥_ªvoˇti⁄_uæ
 73

	)

2454 
	#OBJ_√tsˇ≥_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,3L

	)

2456 
	#SN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "nsCaRevoˇti⁄Uæ"

	)

2457 
	#LN_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 "Nësˇ≥ CA Revoˇti⁄ Uæ"

	)

2458 
	#NID_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 74

	)

2459 
	#OBJ_√tsˇ≥_ˇ_ªvoˇti⁄_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,4L

	)

2461 
	#SN_√tsˇ≥_ª√wÆ_uæ
 "nsRíewÆUæ"

	)

2462 
	#LN_√tsˇ≥_ª√wÆ_uæ
 "Nësˇ≥ RíewÆ Uæ"

	)

2463 
	#NID_√tsˇ≥_ª√wÆ_uæ
 75

	)

2464 
	#OBJ_√tsˇ≥_ª√wÆ_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,7L

	)

2466 
	#SN_√tsˇ≥_ˇ_pﬁicy_uæ
 "nsCaPﬁicyUæ"

	)

2467 
	#LN_√tsˇ≥_ˇ_pﬁicy_uæ
 "Nësˇ≥ CA Pﬁicy Uæ"

	)

2468 
	#NID_√tsˇ≥_ˇ_pﬁicy_uæ
 76

	)

2469 
	#OBJ_√tsˇ≥_ˇ_pﬁicy_uæ
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,8L

	)

2471 
	#SN_√tsˇ≥_s¶_£rvî_«me
 "nsS¶SîvîName"

	)

2472 
	#LN_√tsˇ≥_s¶_£rvî_«me
 "Nësˇ≥ SSL Sîvî Name"

	)

2473 
	#NID_√tsˇ≥_s¶_£rvî_«me
 77

	)

2474 
	#OBJ_√tsˇ≥_s¶_£rvî_«me
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,12L

	)

2476 
	#SN_√tsˇ≥_commít
 "nsCommít"

	)

2477 
	#LN_√tsˇ≥_commít
 "Nësˇ≥ Commít"

	)

2478 
	#NID_√tsˇ≥_commít
 78

	)

2479 
	#OBJ_√tsˇ≥_commít
 
OBJ_√tsˇ≥_˚π_exãnsi⁄
,13L

	)

2481 
	#SN_√tsˇ≥_˚π_£quí˚
 "nsCîtSequí˚"

	)

2482 
	#LN_√tsˇ≥_˚π_£quí˚
 "Nësˇ≥ Cîtifiˇã Sequí˚"

	)

2483 
	#NID_√tsˇ≥_˚π_£quí˚
 79

	)

2484 
	#OBJ_√tsˇ≥_˚π_£quí˚
 
OBJ_√tsˇ≥_d©a_ty≥
,5L

	)

2486 
	#SN_ns_sgc
 "nsSGC"

	)

2487 
	#LN_ns_sgc
 "Nësˇ≥ Sîvî G©ed Cry±o"

	)

2488 
	#NID_ns_sgc
 139

	)

2489 
	#OBJ_ns_sgc
 
OBJ_√tsˇ≥
,4L,1L

	)

2491 
	#SN_‹g
 "ORG"

	)

2492 
	#LN_‹g
 "‹g"

	)

2493 
	#NID_‹g
 379

	)

2494 
	#OBJ_‹g
 
OBJ_iso
,3L

	)

2496 
	#SN_dod
 "DOD"

	)

2497 
	#LN_dod
 "dod"

	)

2498 
	#NID_dod
 380

	)

2499 
	#OBJ_dod
 
OBJ_‹g
,6L

	)

2501 
	#SN_ü«
 "IANA"

	)

2502 
	#LN_ü«
 "ü«"

	)

2503 
	#NID_ü«
 381

	)

2504 
	#OBJ_ü«
 
OBJ_dod
,1L

	)

2506 
	#OBJ_öã∫ë
 
OBJ_ü«


	)

2508 
	#SN_Dúe˘‹y
 "dúe˘‹y"

	)

2509 
	#LN_Dúe˘‹y
 "Dúe˘‹y"

	)

2510 
	#NID_Dúe˘‹y
 382

	)

2511 
	#OBJ_Dúe˘‹y
 
OBJ_öã∫ë
,1L

	)

2513 
	#SN_M™agemít
 "mgmt"

	)

2514 
	#LN_M™agemít
 "M™agemít"

	)

2515 
	#NID_M™agemít
 383

	)

2516 
	#OBJ_M™agemít
 
OBJ_öã∫ë
,2L

	)

2518 
	#SN_Ex≥rimíèl
 "ex≥rimíèl"

	)

2519 
	#LN_Ex≥rimíèl
 "Ex≥rimíèl"

	)

2520 
	#NID_Ex≥rimíèl
 384

	)

2521 
	#OBJ_Ex≥rimíèl
 
OBJ_öã∫ë
,3L

	)

2523 
	#SN_Priv©e
 "¥iv©e"

	)

2524 
	#LN_Priv©e
 "Priv©e"

	)

2525 
	#NID_Priv©e
 385

	)

2526 
	#OBJ_Priv©e
 
OBJ_öã∫ë
,4L

	)

2528 
	#SN_Securôy
 "£curôy"

	)

2529 
	#LN_Securôy
 "Securôy"

	)

2530 
	#NID_Securôy
 386

	)

2531 
	#OBJ_Securôy
 
OBJ_öã∫ë
,5L

	)

2533 
	#SN_SNMPv2
 "¢mpv2"

	)

2534 
	#LN_SNMPv2
 "SNMPv2"

	)

2535 
	#NID_SNMPv2
 387

	)

2536 
	#OBJ_SNMPv2
 
OBJ_öã∫ë
,6L

	)

2538 
	#LN_Maû
 "Maû"

	)

2539 
	#NID_Maû
 388

	)

2540 
	#OBJ_Maû
 
OBJ_öã∫ë
,7L

	)

2542 
	#SN_E¡î¥i£s
 "íãΩri£s"

	)

2543 
	#LN_E¡î¥i£s
 "E¡î¥i£s"

	)

2544 
	#NID_E¡î¥i£s
 389

	)

2545 
	#OBJ_E¡î¥i£s
 
OBJ_Priv©e
,1L

	)

2547 
	#SN_dcObje˘
 "dcobje˘"

	)

2548 
	#LN_dcObje˘
 "dcObje˘"

	)

2549 
	#NID_dcObje˘
 390

	)

2550 
	#OBJ_dcObje˘
 
OBJ_E¡î¥i£s
,1466L,344L

	)

2552 
	#SN_mime_mhs
 "mime-mhs"

	)

2553 
	#LN_mime_mhs
 "MIME MHS"

	)

2554 
	#NID_mime_mhs
 504

	)

2555 
	#OBJ_mime_mhs
 
OBJ_Maû
,1L

	)

2557 
	#SN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2558 
	#LN_mime_mhs_hódögs
 "mime-mhs-hódögs"

	)

2559 
	#NID_mime_mhs_hódögs
 505

	)

2560 
	#OBJ_mime_mhs_hódögs
 
OBJ_mime_mhs
,1L

	)

2562 
	#SN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2563 
	#LN_mime_mhs_bodõs
 "mime-mhs-bodõs"

	)

2564 
	#NID_mime_mhs_bodõs
 506

	)

2565 
	#OBJ_mime_mhs_bodõs
 
OBJ_mime_mhs
,2L

	)

2567 
	#SN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2568 
	#LN_id_hex_∑πül_mesßge
 "id-hex-∑πül-mesßge"

	)

2569 
	#NID_id_hex_∑πül_mesßge
 507

	)

2570 
	#OBJ_id_hex_∑πül_mesßge
 
OBJ_mime_mhs_hódögs
,1L

	)

2572 
	#SN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2573 
	#LN_id_hex_mu…ù¨t_mesßge
 "id-hex-mu…ù¨t-mesßge"

	)

2574 
	#NID_id_hex_mu…ù¨t_mesßge
 508

	)

2575 
	#OBJ_id_hex_mu…ù¨t_mesßge
 
OBJ_mime_mhs_hódögs
,2L

	)

2577 
	#SN_æe_com¥essi⁄
 "RLE"

	)

2578 
	#LN_æe_com¥essi⁄
 "ru¿Àngth com¥essi⁄"

	)

2579 
	#NID_æe_com¥essi⁄
 124

	)

2580 
	#OBJ_æe_com¥essi⁄
 1L,1L,1L,1L,666L,1L

	)

2582 
	#SN_zlib_com¥essi⁄
 "ZLIB"

	)

2583 
	#LN_zlib_com¥essi⁄
 "zlib com¥essi⁄"

	)

2584 
	#NID_zlib_com¥essi⁄
 125

	)

2585 
	#OBJ_zlib_com¥essi⁄
 
OBJ_id_smime_Æg
,8L

	)

2587 
	#OBJ_cs‹
 2L,16L,840L,1L,101L,3L

	)

2589 
	#OBJ_ni°Alg‹ôhms
 
OBJ_cs‹
,4L

	)

2591 
	#OBJ_´s
 
OBJ_ni°Alg‹ôhms
,1L

	)

2593 
	#SN_´s_128_ecb
 "AES-128-ECB"

	)

2594 
	#LN_´s_128_ecb
 "´s-128-ecb"

	)

2595 
	#NID_´s_128_ecb
 418

	)

2596 
	#OBJ_´s_128_ecb
 
OBJ_´s
,1L

	)

2598 
	#SN_´s_128_cbc
 "AES-128-CBC"

	)

2599 
	#LN_´s_128_cbc
 "´s-128-cbc"

	)

2600 
	#NID_´s_128_cbc
 419

	)

2601 
	#OBJ_´s_128_cbc
 
OBJ_´s
,2L

	)

2603 
	#SN_´s_128_ofb128
 "AES-128-OFB"

	)

2604 
	#LN_´s_128_ofb128
 "´s-128-ofb"

	)

2605 
	#NID_´s_128_ofb128
 420

	)

2606 
	#OBJ_´s_128_ofb128
 
OBJ_´s
,3L

	)

2608 
	#SN_´s_128_cfb128
 "AES-128-CFB"

	)

2609 
	#LN_´s_128_cfb128
 "´s-128-cfb"

	)

2610 
	#NID_´s_128_cfb128
 421

	)

2611 
	#OBJ_´s_128_cfb128
 
OBJ_´s
,4L

	)

2613 
	#SN_id_´s128_wøp
 "id-´s128-wøp"

	)

2614 
	#NID_id_´s128_wøp
 788

	)

2615 
	#OBJ_id_´s128_wøp
 
OBJ_´s
,5L

	)

2617 
	#SN_´s_128_gcm
 "id-´s128-GCM"

	)

2618 
	#LN_´s_128_gcm
 "´s-128-gcm"

	)

2619 
	#NID_´s_128_gcm
 895

	)

2620 
	#OBJ_´s_128_gcm
 
OBJ_´s
,6L

	)

2622 
	#SN_´s_128_ccm
 "id-´s128-CCM"

	)

2623 
	#LN_´s_128_ccm
 "´s-128-ccm"

	)

2624 
	#NID_´s_128_ccm
 896

	)

2625 
	#OBJ_´s_128_ccm
 
OBJ_´s
,7L

	)

2627 
	#SN_id_´s128_wøp_∑d
 "id-´s128-wøp-∑d"

	)

2628 
	#NID_id_´s128_wøp_∑d
 897

	)

2629 
	#OBJ_id_´s128_wøp_∑d
 
OBJ_´s
,8L

	)

2631 
	#SN_´s_192_ecb
 "AES-192-ECB"

	)

2632 
	#LN_´s_192_ecb
 "´s-192-ecb"

	)

2633 
	#NID_´s_192_ecb
 422

	)

2634 
	#OBJ_´s_192_ecb
 
OBJ_´s
,21L

	)

2636 
	#SN_´s_192_cbc
 "AES-192-CBC"

	)

2637 
	#LN_´s_192_cbc
 "´s-192-cbc"

	)

2638 
	#NID_´s_192_cbc
 423

	)

2639 
	#OBJ_´s_192_cbc
 
OBJ_´s
,22L

	)

2641 
	#SN_´s_192_ofb128
 "AES-192-OFB"

	)

2642 
	#LN_´s_192_ofb128
 "´s-192-ofb"

	)

2643 
	#NID_´s_192_ofb128
 424

	)

2644 
	#OBJ_´s_192_ofb128
 
OBJ_´s
,23L

	)

2646 
	#SN_´s_192_cfb128
 "AES-192-CFB"

	)

2647 
	#LN_´s_192_cfb128
 "´s-192-cfb"

	)

2648 
	#NID_´s_192_cfb128
 425

	)

2649 
	#OBJ_´s_192_cfb128
 
OBJ_´s
,24L

	)

2651 
	#SN_id_´s192_wøp
 "id-´s192-wøp"

	)

2652 
	#NID_id_´s192_wøp
 789

	)

2653 
	#OBJ_id_´s192_wøp
 
OBJ_´s
,25L

	)

2655 
	#SN_´s_192_gcm
 "id-´s192-GCM"

	)

2656 
	#LN_´s_192_gcm
 "´s-192-gcm"

	)

2657 
	#NID_´s_192_gcm
 898

	)

2658 
	#OBJ_´s_192_gcm
 
OBJ_´s
,26L

	)

2660 
	#SN_´s_192_ccm
 "id-´s192-CCM"

	)

2661 
	#LN_´s_192_ccm
 "´s-192-ccm"

	)

2662 
	#NID_´s_192_ccm
 899

	)

2663 
	#OBJ_´s_192_ccm
 
OBJ_´s
,27L

	)

2665 
	#SN_id_´s192_wøp_∑d
 "id-´s192-wøp-∑d"

	)

2666 
	#NID_id_´s192_wøp_∑d
 900

	)

2667 
	#OBJ_id_´s192_wøp_∑d
 
OBJ_´s
,28L

	)

2669 
	#SN_´s_256_ecb
 "AES-256-ECB"

	)

2670 
	#LN_´s_256_ecb
 "´s-256-ecb"

	)

2671 
	#NID_´s_256_ecb
 426

	)

2672 
	#OBJ_´s_256_ecb
 
OBJ_´s
,41L

	)

2674 
	#SN_´s_256_cbc
 "AES-256-CBC"

	)

2675 
	#LN_´s_256_cbc
 "´s-256-cbc"

	)

2676 
	#NID_´s_256_cbc
 427

	)

2677 
	#OBJ_´s_256_cbc
 
OBJ_´s
,42L

	)

2679 
	#SN_´s_256_ofb128
 "AES-256-OFB"

	)

2680 
	#LN_´s_256_ofb128
 "´s-256-ofb"

	)

2681 
	#NID_´s_256_ofb128
 428

	)

2682 
	#OBJ_´s_256_ofb128
 
OBJ_´s
,43L

	)

2684 
	#SN_´s_256_cfb128
 "AES-256-CFB"

	)

2685 
	#LN_´s_256_cfb128
 "´s-256-cfb"

	)

2686 
	#NID_´s_256_cfb128
 429

	)

2687 
	#OBJ_´s_256_cfb128
 
OBJ_´s
,44L

	)

2689 
	#SN_id_´s256_wøp
 "id-´s256-wøp"

	)

2690 
	#NID_id_´s256_wøp
 790

	)

2691 
	#OBJ_id_´s256_wøp
 
OBJ_´s
,45L

	)

2693 
	#SN_´s_256_gcm
 "id-´s256-GCM"

	)

2694 
	#LN_´s_256_gcm
 "´s-256-gcm"

	)

2695 
	#NID_´s_256_gcm
 901

	)

2696 
	#OBJ_´s_256_gcm
 
OBJ_´s
,46L

	)

2698 
	#SN_´s_256_ccm
 "id-´s256-CCM"

	)

2699 
	#LN_´s_256_ccm
 "´s-256-ccm"

	)

2700 
	#NID_´s_256_ccm
 902

	)

2701 
	#OBJ_´s_256_ccm
 
OBJ_´s
,47L

	)

2703 
	#SN_id_´s256_wøp_∑d
 "id-´s256-wøp-∑d"

	)

2704 
	#NID_id_´s256_wøp_∑d
 903

	)

2705 
	#OBJ_id_´s256_wøp_∑d
 
OBJ_´s
,48L

	)

2707 
	#SN_´s_128_cfb1
 "AES-128-CFB1"

	)

2708 
	#LN_´s_128_cfb1
 "´s-128-cfb1"

	)

2709 
	#NID_´s_128_cfb1
 650

	)

2711 
	#SN_´s_192_cfb1
 "AES-192-CFB1"

	)

2712 
	#LN_´s_192_cfb1
 "´s-192-cfb1"

	)

2713 
	#NID_´s_192_cfb1
 651

	)

2715 
	#SN_´s_256_cfb1
 "AES-256-CFB1"

	)

2716 
	#LN_´s_256_cfb1
 "´s-256-cfb1"

	)

2717 
	#NID_´s_256_cfb1
 652

	)

2719 
	#SN_´s_128_cfb8
 "AES-128-CFB8"

	)

2720 
	#LN_´s_128_cfb8
 "´s-128-cfb8"

	)

2721 
	#NID_´s_128_cfb8
 653

	)

2723 
	#SN_´s_192_cfb8
 "AES-192-CFB8"

	)

2724 
	#LN_´s_192_cfb8
 "´s-192-cfb8"

	)

2725 
	#NID_´s_192_cfb8
 654

	)

2727 
	#SN_´s_256_cfb8
 "AES-256-CFB8"

	)

2728 
	#LN_´s_256_cfb8
 "´s-256-cfb8"

	)

2729 
	#NID_´s_256_cfb8
 655

	)

2731 
	#SN_´s_128_˘r
 "AES-128-CTR"

	)

2732 
	#LN_´s_128_˘r
 "´s-128-˘r"

	)

2733 
	#NID_´s_128_˘r
 904

	)

2735 
	#SN_´s_192_˘r
 "AES-192-CTR"

	)

2736 
	#LN_´s_192_˘r
 "´s-192-˘r"

	)

2737 
	#NID_´s_192_˘r
 905

	)

2739 
	#SN_´s_256_˘r
 "AES-256-CTR"

	)

2740 
	#LN_´s_256_˘r
 "´s-256-˘r"

	)

2741 
	#NID_´s_256_˘r
 906

	)

2743 
	#SN_´s_128_xts
 "AES-128-XTS"

	)

2744 
	#LN_´s_128_xts
 "´s-128-xts"

	)

2745 
	#NID_´s_128_xts
 913

	)

2747 
	#SN_´s_256_xts
 "AES-256-XTS"

	)

2748 
	#LN_´s_256_xts
 "´s-256-xts"

	)

2749 
	#NID_´s_256_xts
 914

	)

2751 
	#SN_des_cfb1
 "DES-CFB1"

	)

2752 
	#LN_des_cfb1
 "des-cfb1"

	)

2753 
	#NID_des_cfb1
 656

	)

2755 
	#SN_des_cfb8
 "DES-CFB8"

	)

2756 
	#LN_des_cfb8
 "des-cfb8"

	)

2757 
	#NID_des_cfb8
 657

	)

2759 
	#SN_des_ede3_cfb1
 "DES-EDE3-CFB1"

	)

2760 
	#LN_des_ede3_cfb1
 "des-ede3-cfb1"

	)

2761 
	#NID_des_ede3_cfb1
 658

	)

2763 
	#SN_des_ede3_cfb8
 "DES-EDE3-CFB8"

	)

2764 
	#LN_des_ede3_cfb8
 "des-ede3-cfb8"

	)

2765 
	#NID_des_ede3_cfb8
 659

	)

2767 
	#OBJ_ni°_hashÆgs
 
OBJ_ni°Alg‹ôhms
,2L

	)

2769 
	#SN_sha256
 "SHA256"

	)

2770 
	#LN_sha256
 "sha256"

	)

2771 
	#NID_sha256
 672

	)

2772 
	#OBJ_sha256
 
OBJ_ni°_hashÆgs
,1L

	)

2774 
	#SN_sha384
 "SHA384"

	)

2775 
	#LN_sha384
 "sha384"

	)

2776 
	#NID_sha384
 673

	)

2777 
	#OBJ_sha384
 
OBJ_ni°_hashÆgs
,2L

	)

2779 
	#SN_sha512
 "SHA512"

	)

2780 
	#LN_sha512
 "sha512"

	)

2781 
	#NID_sha512
 674

	)

2782 
	#OBJ_sha512
 
OBJ_ni°_hashÆgs
,3L

	)

2784 
	#SN_sha224
 "SHA224"

	)

2785 
	#LN_sha224
 "sha224"

	)

2786 
	#NID_sha224
 675

	)

2787 
	#OBJ_sha224
 
OBJ_ni°_hashÆgs
,4L

	)

2789 
	#OBJ_dß_wôh_sha2
 
OBJ_ni°Alg‹ôhms
,3L

	)

2791 
	#SN_dß_wôh_SHA224
 "dß_wôh_SHA224"

	)

2792 
	#NID_dß_wôh_SHA224
 802

	)

2793 
	#OBJ_dß_wôh_SHA224
 
OBJ_dß_wôh_sha2
,1L

	)

2795 
	#SN_dß_wôh_SHA256
 "dß_wôh_SHA256"

	)

2796 
	#NID_dß_wôh_SHA256
 803

	)

2797 
	#OBJ_dß_wôh_SHA256
 
OBJ_dß_wôh_sha2
,2L

	)

2799 
	#SN_hﬁd_ö°ru˘i⁄_code
 "hﬁdIn°ru˘i⁄Code"

	)

2800 
	#LN_hﬁd_ö°ru˘i⁄_code
 "Hﬁd In°ru˘i⁄ Code"

	)

2801 
	#NID_hﬁd_ö°ru˘i⁄_code
 430

	)

2802 
	#OBJ_hﬁd_ö°ru˘i⁄_code
 
OBJ_id_˚
,23L

	)

2804 
	#OBJ_hﬁdIn°ru˘i⁄
 
OBJ_X9_57
,2L

	)

2806 
	#SN_hﬁd_ö°ru˘i⁄_n⁄e
 "hﬁdIn°ru˘i⁄N⁄e"

	)

2807 
	#LN_hﬁd_ö°ru˘i⁄_n⁄e
 "Hﬁd In°ru˘i⁄ N⁄e"

	)

2808 
	#NID_hﬁd_ö°ru˘i⁄_n⁄e
 431

	)

2809 
	#OBJ_hﬁd_ö°ru˘i⁄_n⁄e
 
OBJ_hﬁdIn°ru˘i⁄
,1L

	)

2811 
	#SN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "hﬁdIn°ru˘i⁄CÆlIssuî"

	)

2812 
	#LN_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 "Hﬁd In°ru˘i⁄ CÆ»Issuî"

	)

2813 
	#NID_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 432

	)

2814 
	#OBJ_hﬁd_ö°ru˘i⁄_ˇŒ_issuî
 
OBJ_hﬁdIn°ru˘i⁄
,2L

	)

2816 
	#SN_hﬁd_ö°ru˘i⁄_ªje˘
 "hﬁdIn°ru˘i⁄Reje˘"

	)

2817 
	#LN_hﬁd_ö°ru˘i⁄_ªje˘
 "Hﬁd In°ru˘i⁄ Reje˘"

	)

2818 
	#NID_hﬁd_ö°ru˘i⁄_ªje˘
 433

	)

2819 
	#OBJ_hﬁd_ö°ru˘i⁄_ªje˘
 
OBJ_hﬁdIn°ru˘i⁄
,3L

	)

2821 
	#SN_d©a
 "d©a"

	)

2822 
	#NID_d©a
 434

	)

2823 
	#OBJ_d©a
 
OBJ_ôu_t
,9L

	)

2825 
	#SN_pss
 "pss"

	)

2826 
	#NID_pss
 435

	)

2827 
	#OBJ_pss
 
OBJ_d©a
,2342L

	)

2829 
	#SN_u˛
 "u˛"

	)

2830 
	#NID_u˛
 436

	)

2831 
	#OBJ_u˛
 
OBJ_pss
,19200300L

	)

2833 
	#SN_pûŸ
 "pûŸ"

	)

2834 
	#NID_pûŸ
 437

	)

2835 
	#OBJ_pûŸ
 
OBJ_u˛
,100L

	)

2837 
	#LN_pûŸAâribuãTy≥
 "pûŸAâribuãTy≥"

	)

2838 
	#NID_pûŸAâribuãTy≥
 438

	)

2839 
	#OBJ_pûŸAâribuãTy≥
 
OBJ_pûŸ
,1L

	)

2841 
	#LN_pûŸAâribuãSy¡ax
 "pûŸAâribuãSy¡ax"

	)

2842 
	#NID_pûŸAâribuãSy¡ax
 439

	)

2843 
	#OBJ_pûŸAâribuãSy¡ax
 
OBJ_pûŸ
,3L

	)

2845 
	#LN_pûŸObje˘Cœss
 "pûŸObje˘Cœss"

	)

2846 
	#NID_pûŸObje˘Cœss
 440

	)

2847 
	#OBJ_pûŸObje˘Cœss
 
OBJ_pûŸ
,4L

	)

2849 
	#LN_pûŸGroups
 "pûŸGroups"

	)

2850 
	#NID_pûŸGroups
 441

	)

2851 
	#OBJ_pûŸGroups
 
OBJ_pûŸ
,10L

	)

2853 
	#LN_iA5SåögSy¡ax
 "iA5SåögSy¡ax"

	)

2854 
	#NID_iA5SåögSy¡ax
 442

	)

2855 
	#OBJ_iA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,4L

	)

2857 
	#LN_ˇ£Ign‹eIA5SåögSy¡ax
 "ˇ£Ign‹eIA5SåögSy¡ax"

	)

2858 
	#NID_ˇ£Ign‹eIA5SåögSy¡ax
 443

	)

2859 
	#OBJ_ˇ£Ign‹eIA5SåögSy¡ax
 
OBJ_pûŸAâribuãSy¡ax
,5L

	)

2861 
	#LN_pûŸObje˘
 "pûŸObje˘"

	)

2862 
	#NID_pûŸObje˘
 444

	)

2863 
	#OBJ_pûŸObje˘
 
OBJ_pûŸObje˘Cœss
,3L

	)

2865 
	#LN_pûŸPîs⁄
 "pûŸPîs⁄"

	)

2866 
	#NID_pûŸPîs⁄
 445

	)

2867 
	#OBJ_pûŸPîs⁄
 
OBJ_pûŸObje˘Cœss
,4L

	)

2869 
	#SN_accou¡
 "accou¡"

	)

2870 
	#NID_accou¡
 446

	)

2871 
	#OBJ_accou¡
 
OBJ_pûŸObje˘Cœss
,5L

	)

2873 
	#SN_documít
 "documít"

	)

2874 
	#NID_documít
 447

	)

2875 
	#OBJ_documít
 
OBJ_pûŸObje˘Cœss
,6L

	)

2877 
	#SN_room
 "room"

	)

2878 
	#NID_room
 448

	)

2879 
	#OBJ_room
 
OBJ_pûŸObje˘Cœss
,7L

	)

2881 
	#LN_documítSîõs
 "documítSîõs"

	)

2882 
	#NID_documítSîõs
 449

	)

2883 
	#OBJ_documítSîõs
 
OBJ_pûŸObje˘Cœss
,9L

	)

2885 
	#SN_Domaö
 "domaö"

	)

2886 
	#LN_Domaö
 "Domaö"

	)

2887 
	#NID_Domaö
 392

	)

2888 
	#OBJ_Domaö
 
OBJ_pûŸObje˘Cœss
,13L

	)

2890 
	#LN_rFC822loˇlP¨t
 "rFC822loˇlP¨t"

	)

2891 
	#NID_rFC822loˇlP¨t
 450

	)

2892 
	#OBJ_rFC822loˇlP¨t
 
OBJ_pûŸObje˘Cœss
,14L

	)

2894 
	#LN_dNSDomaö
 "dNSDomaö"

	)

2895 
	#NID_dNSDomaö
 451

	)

2896 
	#OBJ_dNSDomaö
 
OBJ_pûŸObje˘Cœss
,15L

	)

2898 
	#LN_domaöRñ©edObje˘
 "domaöRñ©edObje˘"

	)

2899 
	#NID_domaöRñ©edObje˘
 452

	)

2900 
	#OBJ_domaöRñ©edObje˘
 
OBJ_pûŸObje˘Cœss
,17L

	)

2902 
	#LN_‰õndlyCou¡ry
 "‰õndlyCou¡ry"

	)

2903 
	#NID_‰õndlyCou¡ry
 453

	)

2904 
	#OBJ_‰õndlyCou¡ry
 
OBJ_pûŸObje˘Cœss
,18L

	)

2906 
	#LN_sim∂eSecurôyObje˘
 "sim∂eSecurôyObje˘"

	)

2907 
	#NID_sim∂eSecurôyObje˘
 454

	)

2908 
	#OBJ_sim∂eSecurôyObje˘
 
OBJ_pûŸObje˘Cœss
,19L

	)

2910 
	#LN_pûŸOrg™iz©i⁄
 "pûŸOrg™iz©i⁄"

	)

2911 
	#NID_pûŸOrg™iz©i⁄
 455

	)

2912 
	#OBJ_pûŸOrg™iz©i⁄
 
OBJ_pûŸObje˘Cœss
,20L

	)

2914 
	#LN_pûŸDSA
 "pûŸDSA"

	)

2915 
	#NID_pûŸDSA
 456

	)

2916 
	#OBJ_pûŸDSA
 
OBJ_pûŸObje˘Cœss
,21L

	)

2918 
	#LN_quÆôyLabñÀdD©a
 "quÆôyLabñÀdD©a"

	)

2919 
	#NID_quÆôyLabñÀdD©a
 457

	)

2920 
	#OBJ_quÆôyLabñÀdD©a
 
OBJ_pûŸObje˘Cœss
,22L

	)

2922 
	#SN_u£rId
 "UID"

	)

2923 
	#LN_u£rId
 "u£rId"

	)

2924 
	#NID_u£rId
 458

	)

2925 
	#OBJ_u£rId
 
OBJ_pûŸAâribuãTy≥
,1L

	)

2927 
	#LN_ãxtEncodedORAddªss
 "ãxtEncodedORAddªss"

	)

2928 
	#NID_ãxtEncodedORAddªss
 459

	)

2929 
	#OBJ_ãxtEncodedORAddªss
 
OBJ_pûŸAâribuãTy≥
,2L

	)

2931 
	#SN_rfc822Maûbox
 "maû"

	)

2932 
	#LN_rfc822Maûbox
 "rfc822Maûbox"

	)

2933 
	#NID_rfc822Maûbox
 460

	)

2934 
	#OBJ_rfc822Maûbox
 
OBJ_pûŸAâribuãTy≥
,3L

	)

2936 
	#SN_öfo
 "öfo"

	)

2937 
	#NID_öfo
 461

	)

2938 
	#OBJ_öfo
 
OBJ_pûŸAâribuãTy≥
,4L

	)

2940 
	#LN_ÁvourôeDrök
 "ÁvourôeDrök"

	)

2941 
	#NID_ÁvourôeDrök
 462

	)

2942 
	#OBJ_ÁvourôeDrök
 
OBJ_pûŸAâribuãTy≥
,5L

	)

2944 
	#LN_roomNumbî
 "roomNumbî"

	)

2945 
	#NID_roomNumbî
 463

	)

2946 
	#OBJ_roomNumbî
 
OBJ_pûŸAâribuãTy≥
,6L

	)

2948 
	#SN_phŸo
 "phŸo"

	)

2949 
	#NID_phŸo
 464

	)

2950 
	#OBJ_phŸo
 
OBJ_pûŸAâribuãTy≥
,7L

	)

2952 
	#LN_u£rCœss
 "u£rCœss"

	)

2953 
	#NID_u£rCœss
 465

	)

2954 
	#OBJ_u£rCœss
 
OBJ_pûŸAâribuãTy≥
,8L

	)

2956 
	#SN_ho°
 "ho°"

	)

2957 
	#NID_ho°
 466

	)

2958 
	#OBJ_ho°
 
OBJ_pûŸAâribuãTy≥
,9L

	)

2960 
	#SN_m™agî
 "m™agî"

	)

2961 
	#NID_m™agî
 467

	)

2962 
	#OBJ_m™agî
 
OBJ_pûŸAâribuãTy≥
,10L

	)

2964 
	#LN_documítIdítifõr
 "documítIdítifõr"

	)

2965 
	#NID_documítIdítifõr
 468

	)

2966 
	#OBJ_documítIdítifõr
 
OBJ_pûŸAâribuãTy≥
,11L

	)

2968 
	#LN_documítTôÀ
 "documítTôÀ"

	)

2969 
	#NID_documítTôÀ
 469

	)

2970 
	#OBJ_documítTôÀ
 
OBJ_pûŸAâribuãTy≥
,12L

	)

2972 
	#LN_documítVîsi⁄
 "documítVîsi⁄"

	)

2973 
	#NID_documítVîsi⁄
 470

	)

2974 
	#OBJ_documítVîsi⁄
 
OBJ_pûŸAâribuãTy≥
,13L

	)

2976 
	#LN_documítAuth‹
 "documítAuth‹"

	)

2977 
	#NID_documítAuth‹
 471

	)

2978 
	#OBJ_documítAuth‹
 
OBJ_pûŸAâribuãTy≥
,14L

	)

2980 
	#LN_documítLoˇti⁄
 "documítLoˇti⁄"

	)

2981 
	#NID_documítLoˇti⁄
 472

	)

2982 
	#OBJ_documítLoˇti⁄
 
OBJ_pûŸAâribuãTy≥
,15L

	)

2984 
	#LN_homeTñïh⁄eNumbî
 "homeTñïh⁄eNumbî"

	)

2985 
	#NID_homeTñïh⁄eNumbî
 473

	)

2986 
	#OBJ_homeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,20L

	)

2988 
	#SN_£¸ë¨y
 "£¸ë¨y"

	)

2989 
	#NID_£¸ë¨y
 474

	)

2990 
	#OBJ_£¸ë¨y
 
OBJ_pûŸAâribuãTy≥
,21L

	)

2992 
	#LN_ŸhîMaûbox
 "ŸhîMaûbox"

	)

2993 
	#NID_ŸhîMaûbox
 475

	)

2994 
	#OBJ_ŸhîMaûbox
 
OBJ_pûŸAâribuãTy≥
,22L

	)

2996 
	#LN_œ°ModifõdTime
 "œ°ModifõdTime"

	)

2997 
	#NID_œ°ModifõdTime
 476

	)

2998 
	#OBJ_œ°ModifõdTime
 
OBJ_pûŸAâribuãTy≥
,23L

	)

3000 
	#LN_œ°ModifõdBy
 "œ°ModifõdBy"

	)

3001 
	#NID_œ°ModifõdBy
 477

	)

3002 
	#OBJ_œ°ModifõdBy
 
OBJ_pûŸAâribuãTy≥
,24L

	)

3004 
	#SN_domaöComp⁄ít
 "DC"

	)

3005 
	#LN_domaöComp⁄ít
 "domaöComp⁄ít"

	)

3006 
	#NID_domaöComp⁄ít
 391

	)

3007 
	#OBJ_domaöComp⁄ít
 
OBJ_pûŸAâribuãTy≥
,25L

	)

3009 
	#LN_aRec‹d
 "aRec‹d"

	)

3010 
	#NID_aRec‹d
 478

	)

3011 
	#OBJ_aRec‹d
 
OBJ_pûŸAâribuãTy≥
,26L

	)

3013 
	#LN_pûŸAâribuãTy≥27
 "pûŸAâribuãTy≥27"

	)

3014 
	#NID_pûŸAâribuãTy≥27
 479

	)

3015 
	#OBJ_pûŸAâribuãTy≥27
 
OBJ_pûŸAâribuãTy≥
,27L

	)

3017 
	#LN_mXRec‹d
 "mXRec‹d"

	)

3018 
	#NID_mXRec‹d
 480

	)

3019 
	#OBJ_mXRec‹d
 
OBJ_pûŸAâribuãTy≥
,28L

	)

3021 
	#LN_nSRec‹d
 "nSRec‹d"

	)

3022 
	#NID_nSRec‹d
 481

	)

3023 
	#OBJ_nSRec‹d
 
OBJ_pûŸAâribuãTy≥
,29L

	)

3025 
	#LN_sOARec‹d
 "sOARec‹d"

	)

3026 
	#NID_sOARec‹d
 482

	)

3027 
	#OBJ_sOARec‹d
 
OBJ_pûŸAâribuãTy≥
,30L

	)

3029 
	#LN_cNAMERec‹d
 "cNAMERec‹d"

	)

3030 
	#NID_cNAMERec‹d
 483

	)

3031 
	#OBJ_cNAMERec‹d
 
OBJ_pûŸAâribuãTy≥
,31L

	)

3033 
	#LN_assocüãdDomaö
 "assocüãdDomaö"

	)

3034 
	#NID_assocüãdDomaö
 484

	)

3035 
	#OBJ_assocüãdDomaö
 
OBJ_pûŸAâribuãTy≥
,37L

	)

3037 
	#LN_assocüãdName
 "assocüãdName"

	)

3038 
	#NID_assocüãdName
 485

	)

3039 
	#OBJ_assocüãdName
 
OBJ_pûŸAâribuãTy≥
,38L

	)

3041 
	#LN_homePo°ÆAddªss
 "homePo°ÆAddªss"

	)

3042 
	#NID_homePo°ÆAddªss
 486

	)

3043 
	#OBJ_homePo°ÆAddªss
 
OBJ_pûŸAâribuãTy≥
,39L

	)

3045 
	#LN_≥rs⁄ÆTôÀ
 "≥rs⁄ÆTôÀ"

	)

3046 
	#NID_≥rs⁄ÆTôÀ
 487

	)

3047 
	#OBJ_≥rs⁄ÆTôÀ
 
OBJ_pûŸAâribuãTy≥
,40L

	)

3049 
	#LN_mobûeTñïh⁄eNumbî
 "mobûeTñïh⁄eNumbî"

	)

3050 
	#NID_mobûeTñïh⁄eNumbî
 488

	)

3051 
	#OBJ_mobûeTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,41L

	)

3053 
	#LN_∑gîTñïh⁄eNumbî
 "∑gîTñïh⁄eNumbî"

	)

3054 
	#NID_∑gîTñïh⁄eNumbî
 489

	)

3055 
	#OBJ_∑gîTñïh⁄eNumbî
 
OBJ_pûŸAâribuãTy≥
,42L

	)

3057 
	#LN_‰õndlyCou¡ryName
 "‰õndlyCou¡ryName"

	)

3058 
	#NID_‰õndlyCou¡ryName
 490

	)

3059 
	#OBJ_‰õndlyCou¡ryName
 
OBJ_pûŸAâribuãTy≥
,43L

	)

3061 
	#LN_‹g™iz©i⁄ÆSètus
 "‹g™iz©i⁄ÆSètus"

	)

3062 
	#NID_‹g™iz©i⁄ÆSètus
 491

	)

3063 
	#OBJ_‹g™iz©i⁄ÆSètus
 
OBJ_pûŸAâribuãTy≥
,45L

	)

3065 
	#LN_j™ëMaûbox
 "j™ëMaûbox"

	)

3066 
	#NID_j™ëMaûbox
 492

	)

3067 
	#OBJ_j™ëMaûbox
 
OBJ_pûŸAâribuãTy≥
,46L

	)

3069 
	#LN_maûPª„ªn˚O±i⁄
 "maûPª„ªn˚O±i⁄"

	)

3070 
	#NID_maûPª„ªn˚O±i⁄
 493

	)

3071 
	#OBJ_maûPª„ªn˚O±i⁄
 
OBJ_pûŸAâribuãTy≥
,47L

	)

3073 
	#LN_buûdögName
 "buûdögName"

	)

3074 
	#NID_buûdögName
 494

	)

3075 
	#OBJ_buûdögName
 
OBJ_pûŸAâribuãTy≥
,48L

	)

3077 
	#LN_dSAQuÆôy
 "dSAQuÆôy"

	)

3078 
	#NID_dSAQuÆôy
 495

	)

3079 
	#OBJ_dSAQuÆôy
 
OBJ_pûŸAâribuãTy≥
,49L

	)

3081 
	#LN_sögÀLevñQuÆôy
 "sögÀLevñQuÆôy"

	)

3082 
	#NID_sögÀLevñQuÆôy
 496

	)

3083 
	#OBJ_sögÀLevñQuÆôy
 
OBJ_pûŸAâribuãTy≥
,50L

	)

3085 
	#LN_subåìMöimumQuÆôy
 "subåìMöimumQuÆôy"

	)

3086 
	#NID_subåìMöimumQuÆôy
 497

	)

3087 
	#OBJ_subåìMöimumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,51L

	)

3089 
	#LN_subåìMaximumQuÆôy
 "subåìMaximumQuÆôy"

	)

3090 
	#NID_subåìMaximumQuÆôy
 498

	)

3091 
	#OBJ_subåìMaximumQuÆôy
 
OBJ_pûŸAâribuãTy≥
,52L

	)

3093 
	#LN_≥rs⁄ÆSig«tuª
 "≥rs⁄ÆSig«tuª"

	)

3094 
	#NID_≥rs⁄ÆSig«tuª
 499

	)

3095 
	#OBJ_≥rs⁄ÆSig«tuª
 
OBJ_pûŸAâribuãTy≥
,53L

	)

3097 
	#LN_dITRedúe˘
 "dITRedúe˘"

	)

3098 
	#NID_dITRedúe˘
 500

	)

3099 
	#OBJ_dITRedúe˘
 
OBJ_pûŸAâribuãTy≥
,54L

	)

3101 
	#SN_audio
 "audio"

	)

3102 
	#NID_audio
 501

	)

3103 
	#OBJ_audio
 
OBJ_pûŸAâribuãTy≥
,55L

	)

3105 
	#LN_documítPublishî
 "documítPublishî"

	)

3106 
	#NID_documítPublishî
 502

	)

3107 
	#OBJ_documítPublishî
 
OBJ_pûŸAâribuãTy≥
,56L

	)

3109 
	#SN_id_£t
 "id-£t"

	)

3110 
	#LN_id_£t
 "Secuª EÀ˘r⁄i¯Tønß˘i⁄s"

	)

3111 
	#NID_id_£t
 512

	)

3112 
	#OBJ_id_£t
 
OBJ_öã∫©i⁄Æ_‹g™iz©i⁄s
,42L

	)

3114 
	#SN_£t_˘y≥
 "£t-˘y≥"

	)

3115 
	#LN_£t_˘y≥
 "c⁄ã¡Åy≥s"

	)

3116 
	#NID_£t_˘y≥
 513

	)

3117 
	#OBJ_£t_˘y≥
 
OBJ_id_£t
,0L

	)

3119 
	#SN_£t_msgExt
 "£t-msgExt"

	)

3120 
	#LN_£t_msgExt
 "mesßgêexãnsi⁄s"

	)

3121 
	#NID_£t_msgExt
 514

	)

3122 
	#OBJ_£t_msgExt
 
OBJ_id_£t
,1L

	)

3124 
	#SN_£t_©å
 "£t-©å"

	)

3125 
	#NID_£t_©å
 515

	)

3126 
	#OBJ_£t_©å
 
OBJ_id_£t
,3L

	)

3128 
	#SN_£t_pﬁicy
 "£t-pﬁicy"

	)

3129 
	#NID_£t_pﬁicy
 516

	)

3130 
	#OBJ_£t_pﬁicy
 
OBJ_id_£t
,5L

	)

3132 
	#SN_£t_˚πExt
 "£t-˚πExt"

	)

3133 
	#LN_£t_˚πExt
 "˚πifiˇãÉxãnsi⁄s"

	)

3134 
	#NID_£t_˚πExt
 517

	)

3135 
	#OBJ_£t_˚πExt
 
OBJ_id_£t
,7L

	)

3137 
	#SN_£t_bønd
 "£t-bønd"

	)

3138 
	#NID_£t_bønd
 518

	)

3139 
	#OBJ_£t_bønd
 
OBJ_id_£t
,8L

	)

3141 
	#SN_£t˘_PAND©a
 "£t˘-PAND©a"

	)

3142 
	#NID_£t˘_PAND©a
 519

	)

3143 
	#OBJ_£t˘_PAND©a
 
OBJ_£t_˘y≥
,0L

	)

3145 
	#SN_£t˘_PANTokí
 "£t˘-PANTokí"

	)

3146 
	#NID_£t˘_PANTokí
 520

	)

3147 
	#OBJ_£t˘_PANTokí
 
OBJ_£t_˘y≥
,1L

	)

3149 
	#SN_£t˘_PANO∆y
 "£t˘-PANO∆y"

	)

3150 
	#NID_£t˘_PANO∆y
 521

	)

3151 
	#OBJ_£t˘_PANO∆y
 
OBJ_£t_˘y≥
,2L

	)

3153 
	#SN_£t˘_OID©a
 "£t˘-OID©a"

	)

3154 
	#NID_£t˘_OID©a
 522

	)

3155 
	#OBJ_£t˘_OID©a
 
OBJ_£t_˘y≥
,3L

	)

3157 
	#SN_£t˘_PI
 "£t˘-PI"

	)

3158 
	#NID_£t˘_PI
 523

	)

3159 
	#OBJ_£t˘_PI
 
OBJ_£t_˘y≥
,4L

	)

3161 
	#SN_£t˘_PID©a
 "£t˘-PID©a"

	)

3162 
	#NID_£t˘_PID©a
 524

	)

3163 
	#OBJ_£t˘_PID©a
 
OBJ_£t_˘y≥
,5L

	)

3165 
	#SN_£t˘_PID©aUnsig√d
 "£t˘-PID©aUnsig√d"

	)

3166 
	#NID_£t˘_PID©aUnsig√d
 525

	)

3167 
	#OBJ_£t˘_PID©aUnsig√d
 
OBJ_£t_˘y≥
,6L

	)

3169 
	#SN_£t˘_HODI≈ut
 "£t˘-HODI≈ut"

	)

3170 
	#NID_£t˘_HODI≈ut
 526

	)

3171 
	#OBJ_£t˘_HODI≈ut
 
OBJ_£t_˘y≥
,7L

	)

3173 
	#SN_£t˘_AuthResBaggage
 "£t˘-AuthResBaggage"

	)

3174 
	#NID_£t˘_AuthResBaggage
 527

	)

3175 
	#OBJ_£t˘_AuthResBaggage
 
OBJ_£t_˘y≥
,8L

	)

3177 
	#SN_£t˘_AuthRevReqBaggage
 "£t˘-AuthRevReqBaggage"

	)

3178 
	#NID_£t˘_AuthRevReqBaggage
 528

	)

3179 
	#OBJ_£t˘_AuthRevReqBaggage
 
OBJ_£t_˘y≥
,9L

	)

3181 
	#SN_£t˘_AuthRevResBaggage
 "£t˘-AuthRevResBaggage"

	)

3182 
	#NID_£t˘_AuthRevResBaggage
 529

	)

3183 
	#OBJ_£t˘_AuthRevResBaggage
 
OBJ_£t_˘y≥
,10L

	)

3185 
	#SN_£t˘_C≠TokíSeq
 "£t˘-C≠TokíSeq"

	)

3186 
	#NID_£t˘_C≠TokíSeq
 530

	)

3187 
	#OBJ_£t˘_C≠TokíSeq
 
OBJ_£t_˘y≥
,11L

	)

3189 
	#SN_£t˘_PInôResD©a
 "£t˘-PInôResD©a"

	)

3190 
	#NID_£t˘_PInôResD©a
 531

	)

3191 
	#OBJ_£t˘_PInôResD©a
 
OBJ_£t_˘y≥
,12L

	)

3193 
	#SN_£t˘_PI_TBS
 "£t˘-PI-TBS"

	)

3194 
	#NID_£t˘_PI_TBS
 532

	)

3195 
	#OBJ_£t˘_PI_TBS
 
OBJ_£t_˘y≥
,13L

	)

3197 
	#SN_£t˘_PResD©a
 "£t˘-PResD©a"

	)

3198 
	#NID_£t˘_PResD©a
 533

	)

3199 
	#OBJ_£t˘_PResD©a
 
OBJ_£t_˘y≥
,14L

	)

3201 
	#SN_£t˘_AuthReqTBS
 "£t˘-AuthReqTBS"

	)

3202 
	#NID_£t˘_AuthReqTBS
 534

	)

3203 
	#OBJ_£t˘_AuthReqTBS
 
OBJ_£t_˘y≥
,16L

	)

3205 
	#SN_£t˘_AuthResTBS
 "£t˘-AuthResTBS"

	)

3206 
	#NID_£t˘_AuthResTBS
 535

	)

3207 
	#OBJ_£t˘_AuthResTBS
 
OBJ_£t_˘y≥
,17L

	)

3209 
	#SN_£t˘_AuthResTBSX
 "£t˘-AuthResTBSX"

	)

3210 
	#NID_£t˘_AuthResTBSX
 536

	)

3211 
	#OBJ_£t˘_AuthResTBSX
 
OBJ_£t_˘y≥
,18L

	)

3213 
	#SN_£t˘_AuthTokíTBS
 "£t˘-AuthTokíTBS"

	)

3214 
	#NID_£t˘_AuthTokíTBS
 537

	)

3215 
	#OBJ_£t˘_AuthTokíTBS
 
OBJ_£t_˘y≥
,19L

	)

3217 
	#SN_£t˘_C≠TokíD©a
 "£t˘-C≠TokíD©a"

	)

3218 
	#NID_£t˘_C≠TokíD©a
 538

	)

3219 
	#OBJ_£t˘_C≠TokíD©a
 
OBJ_£t_˘y≥
,20L

	)

3221 
	#SN_£t˘_C≠TokíTBS
 "£t˘-C≠TokíTBS"

	)

3222 
	#NID_£t˘_C≠TokíTBS
 539

	)

3223 
	#OBJ_£t˘_C≠TokíTBS
 
OBJ_£t_˘y≥
,21L

	)

3225 
	#SN_£t˘_AcqC¨dCodeMsg
 "£t˘-AcqC¨dCodeMsg"

	)

3226 
	#NID_£t˘_AcqC¨dCodeMsg
 540

	)

3227 
	#OBJ_£t˘_AcqC¨dCodeMsg
 
OBJ_£t_˘y≥
,22L

	)

3229 
	#SN_£t˘_AuthRevReqTBS
 "£t˘-AuthRevReqTBS"

	)

3230 
	#NID_£t˘_AuthRevReqTBS
 541

	)

3231 
	#OBJ_£t˘_AuthRevReqTBS
 
OBJ_£t_˘y≥
,23L

	)

3233 
	#SN_£t˘_AuthRevResD©a
 "£t˘-AuthRevResD©a"

	)

3234 
	#NID_£t˘_AuthRevResD©a
 542

	)

3235 
	#OBJ_£t˘_AuthRevResD©a
 
OBJ_£t_˘y≥
,24L

	)

3237 
	#SN_£t˘_AuthRevResTBS
 "£t˘-AuthRevResTBS"

	)

3238 
	#NID_£t˘_AuthRevResTBS
 543

	)

3239 
	#OBJ_£t˘_AuthRevResTBS
 
OBJ_£t_˘y≥
,25L

	)

3241 
	#SN_£t˘_C≠ReqTBS
 "£t˘-C≠ReqTBS"

	)

3242 
	#NID_£t˘_C≠ReqTBS
 544

	)

3243 
	#OBJ_£t˘_C≠ReqTBS
 
OBJ_£t_˘y≥
,26L

	)

3245 
	#SN_£t˘_C≠ReqTBSX
 "£t˘-C≠ReqTBSX"

	)

3246 
	#NID_£t˘_C≠ReqTBSX
 545

	)

3247 
	#OBJ_£t˘_C≠ReqTBSX
 
OBJ_£t_˘y≥
,27L

	)

3249 
	#SN_£t˘_C≠ResD©a
 "£t˘-C≠ResD©a"

	)

3250 
	#NID_£t˘_C≠ResD©a
 546

	)

3251 
	#OBJ_£t˘_C≠ResD©a
 
OBJ_£t_˘y≥
,28L

	)

3253 
	#SN_£t˘_C≠RevReqTBS
 "£t˘-C≠RevReqTBS"

	)

3254 
	#NID_£t˘_C≠RevReqTBS
 547

	)

3255 
	#OBJ_£t˘_C≠RevReqTBS
 
OBJ_£t_˘y≥
,29L

	)

3257 
	#SN_£t˘_C≠RevReqTBSX
 "£t˘-C≠RevReqTBSX"

	)

3258 
	#NID_£t˘_C≠RevReqTBSX
 548

	)

3259 
	#OBJ_£t˘_C≠RevReqTBSX
 
OBJ_£t_˘y≥
,30L

	)

3261 
	#SN_£t˘_C≠RevResD©a
 "£t˘-C≠RevResD©a"

	)

3262 
	#NID_£t˘_C≠RevResD©a
 549

	)

3263 
	#OBJ_£t˘_C≠RevResD©a
 
OBJ_£t_˘y≥
,31L

	)

3265 
	#SN_£t˘_CªdReqTBS
 "£t˘-CªdReqTBS"

	)

3266 
	#NID_£t˘_CªdReqTBS
 550

	)

3267 
	#OBJ_£t˘_CªdReqTBS
 
OBJ_£t_˘y≥
,32L

	)

3269 
	#SN_£t˘_CªdReqTBSX
 "£t˘-CªdReqTBSX"

	)

3270 
	#NID_£t˘_CªdReqTBSX
 551

	)

3271 
	#OBJ_£t˘_CªdReqTBSX
 
OBJ_£t_˘y≥
,33L

	)

3273 
	#SN_£t˘_CªdResD©a
 "£t˘-CªdResD©a"

	)

3274 
	#NID_£t˘_CªdResD©a
 552

	)

3275 
	#OBJ_£t˘_CªdResD©a
 
OBJ_£t_˘y≥
,34L

	)

3277 
	#SN_£t˘_CªdRevReqTBS
 "£t˘-CªdRevReqTBS"

	)

3278 
	#NID_£t˘_CªdRevReqTBS
 553

	)

3279 
	#OBJ_£t˘_CªdRevReqTBS
 
OBJ_£t_˘y≥
,35L

	)

3281 
	#SN_£t˘_CªdRevReqTBSX
 "£t˘-CªdRevReqTBSX"

	)

3282 
	#NID_£t˘_CªdRevReqTBSX
 554

	)

3283 
	#OBJ_£t˘_CªdRevReqTBSX
 
OBJ_£t_˘y≥
,36L

	)

3285 
	#SN_£t˘_CªdRevResD©a
 "£t˘-CªdRevResD©a"

	)

3286 
	#NID_£t˘_CªdRevResD©a
 555

	)

3287 
	#OBJ_£t˘_CªdRevResD©a
 
OBJ_£t_˘y≥
,37L

	)

3289 
	#SN_£t˘_PCîtReqD©a
 "£t˘-PCîtReqD©a"

	)

3290 
	#NID_£t˘_PCîtReqD©a
 556

	)

3291 
	#OBJ_£t˘_PCîtReqD©a
 
OBJ_£t_˘y≥
,38L

	)

3293 
	#SN_£t˘_PCîtResTBS
 "£t˘-PCîtResTBS"

	)

3294 
	#NID_£t˘_PCîtResTBS
 557

	)

3295 
	#OBJ_£t˘_PCîtResTBS
 
OBJ_£t_˘y≥
,39L

	)

3297 
	#SN_£t˘_B©chAdmöReqD©a
 "£t˘-B©chAdmöReqD©a"

	)

3298 
	#NID_£t˘_B©chAdmöReqD©a
 558

	)

3299 
	#OBJ_£t˘_B©chAdmöReqD©a
 
OBJ_£t_˘y≥
,40L

	)

3301 
	#SN_£t˘_B©chAdmöResD©a
 "£t˘-B©chAdmöResD©a"

	)

3302 
	#NID_£t˘_B©chAdmöResD©a
 559

	)

3303 
	#OBJ_£t˘_B©chAdmöResD©a
 
OBJ_£t_˘y≥
,41L

	)

3305 
	#SN_£t˘_C¨dCInôResTBS
 "£t˘-C¨dCInôResTBS"

	)

3306 
	#NID_£t˘_C¨dCInôResTBS
 560

	)

3307 
	#OBJ_£t˘_C¨dCInôResTBS
 
OBJ_£t_˘y≥
,42L

	)

3309 
	#SN_£t˘_MeAqCInôResTBS
 "£t˘-MeAqCInôResTBS"

	)

3310 
	#NID_£t˘_MeAqCInôResTBS
 561

	)

3311 
	#OBJ_£t˘_MeAqCInôResTBS
 
OBJ_£t_˘y≥
,43L

	)

3313 
	#SN_£t˘_RegF‹mResTBS
 "£t˘-RegF‹mResTBS"

	)

3314 
	#NID_£t˘_RegF‹mResTBS
 562

	)

3315 
	#OBJ_£t˘_RegF‹mResTBS
 
OBJ_£t_˘y≥
,44L

	)

3317 
	#SN_£t˘_CîtReqD©a
 "£t˘-CîtReqD©a"

	)

3318 
	#NID_£t˘_CîtReqD©a
 563

	)

3319 
	#OBJ_£t˘_CîtReqD©a
 
OBJ_£t_˘y≥
,45L

	)

3321 
	#SN_£t˘_CîtReqTBS
 "£t˘-CîtReqTBS"

	)

3322 
	#NID_£t˘_CîtReqTBS
 564

	)

3323 
	#OBJ_£t˘_CîtReqTBS
 
OBJ_£t_˘y≥
,46L

	)

3325 
	#SN_£t˘_CîtResD©a
 "£t˘-CîtResD©a"

	)

3326 
	#NID_£t˘_CîtResD©a
 565

	)

3327 
	#OBJ_£t˘_CîtResD©a
 
OBJ_£t_˘y≥
,47L

	)

3329 
	#SN_£t˘_CîtInqReqTBS
 "£t˘-CîtInqReqTBS"

	)

3330 
	#NID_£t˘_CîtInqReqTBS
 566

	)

3331 
	#OBJ_£t˘_CîtInqReqTBS
 
OBJ_£t_˘y≥
,48L

	)

3333 
	#SN_£t˘_Eº‹TBS
 "£t˘-Eº‹TBS"

	)

3334 
	#NID_£t˘_Eº‹TBS
 567

	)

3335 
	#OBJ_£t˘_Eº‹TBS
 
OBJ_£t_˘y≥
,49L

	)

3337 
	#SN_£t˘_PIDuÆSig√dTBE
 "£t˘-PIDuÆSig√dTBE"

	)

3338 
	#NID_£t˘_PIDuÆSig√dTBE
 568

	)

3339 
	#OBJ_£t˘_PIDuÆSig√dTBE
 
OBJ_£t_˘y≥
,50L

	)

3341 
	#SN_£t˘_PIUnsig√dTBE
 "£t˘-PIUnsig√dTBE"

	)

3342 
	#NID_£t˘_PIUnsig√dTBE
 569

	)

3343 
	#OBJ_£t˘_PIUnsig√dTBE
 
OBJ_£t_˘y≥
,51L

	)

3345 
	#SN_£t˘_AuthReqTBE
 "£t˘-AuthReqTBE"

	)

3346 
	#NID_£t˘_AuthReqTBE
 570

	)

3347 
	#OBJ_£t˘_AuthReqTBE
 
OBJ_£t_˘y≥
,52L

	)

3349 
	#SN_£t˘_AuthResTBE
 "£t˘-AuthResTBE"

	)

3350 
	#NID_£t˘_AuthResTBE
 571

	)

3351 
	#OBJ_£t˘_AuthResTBE
 
OBJ_£t_˘y≥
,53L

	)

3353 
	#SN_£t˘_AuthResTBEX
 "£t˘-AuthResTBEX"

	)

3354 
	#NID_£t˘_AuthResTBEX
 572

	)

3355 
	#OBJ_£t˘_AuthResTBEX
 
OBJ_£t_˘y≥
,54L

	)

3357 
	#SN_£t˘_AuthTokíTBE
 "£t˘-AuthTokíTBE"

	)

3358 
	#NID_£t˘_AuthTokíTBE
 573

	)

3359 
	#OBJ_£t˘_AuthTokíTBE
 
OBJ_£t_˘y≥
,55L

	)

3361 
	#SN_£t˘_C≠TokíTBE
 "£t˘-C≠TokíTBE"

	)

3362 
	#NID_£t˘_C≠TokíTBE
 574

	)

3363 
	#OBJ_£t˘_C≠TokíTBE
 
OBJ_£t_˘y≥
,56L

	)

3365 
	#SN_£t˘_C≠TokíTBEX
 "£t˘-C≠TokíTBEX"

	)

3366 
	#NID_£t˘_C≠TokíTBEX
 575

	)

3367 
	#OBJ_£t˘_C≠TokíTBEX
 
OBJ_£t_˘y≥
,57L

	)

3369 
	#SN_£t˘_AcqC¨dCodeMsgTBE
 "£t˘-AcqC¨dCodeMsgTBE"

	)

3370 
	#NID_£t˘_AcqC¨dCodeMsgTBE
 576

	)

3371 
	#OBJ_£t˘_AcqC¨dCodeMsgTBE
 
OBJ_£t_˘y≥
,58L

	)

3373 
	#SN_£t˘_AuthRevReqTBE
 "£t˘-AuthRevReqTBE"

	)

3374 
	#NID_£t˘_AuthRevReqTBE
 577

	)

3375 
	#OBJ_£t˘_AuthRevReqTBE
 
OBJ_£t_˘y≥
,59L

	)

3377 
	#SN_£t˘_AuthRevResTBE
 "£t˘-AuthRevResTBE"

	)

3378 
	#NID_£t˘_AuthRevResTBE
 578

	)

3379 
	#OBJ_£t˘_AuthRevResTBE
 
OBJ_£t_˘y≥
,60L

	)

3381 
	#SN_£t˘_AuthRevResTBEB
 "£t˘-AuthRevResTBEB"

	)

3382 
	#NID_£t˘_AuthRevResTBEB
 579

	)

3383 
	#OBJ_£t˘_AuthRevResTBEB
 
OBJ_£t_˘y≥
,61L

	)

3385 
	#SN_£t˘_C≠ReqTBE
 "£t˘-C≠ReqTBE"

	)

3386 
	#NID_£t˘_C≠ReqTBE
 580

	)

3387 
	#OBJ_£t˘_C≠ReqTBE
 
OBJ_£t_˘y≥
,62L

	)

3389 
	#SN_£t˘_C≠ReqTBEX
 "£t˘-C≠ReqTBEX"

	)

3390 
	#NID_£t˘_C≠ReqTBEX
 581

	)

3391 
	#OBJ_£t˘_C≠ReqTBEX
 
OBJ_£t_˘y≥
,63L

	)

3393 
	#SN_£t˘_C≠ResTBE
 "£t˘-C≠ResTBE"

	)

3394 
	#NID_£t˘_C≠ResTBE
 582

	)

3395 
	#OBJ_£t˘_C≠ResTBE
 
OBJ_£t_˘y≥
,64L

	)

3397 
	#SN_£t˘_C≠RevReqTBE
 "£t˘-C≠RevReqTBE"

	)

3398 
	#NID_£t˘_C≠RevReqTBE
 583

	)

3399 
	#OBJ_£t˘_C≠RevReqTBE
 
OBJ_£t_˘y≥
,65L

	)

3401 
	#SN_£t˘_C≠RevReqTBEX
 "£t˘-C≠RevReqTBEX"

	)

3402 
	#NID_£t˘_C≠RevReqTBEX
 584

	)

3403 
	#OBJ_£t˘_C≠RevReqTBEX
 
OBJ_£t_˘y≥
,66L

	)

3405 
	#SN_£t˘_C≠RevResTBE
 "£t˘-C≠RevResTBE"

	)

3406 
	#NID_£t˘_C≠RevResTBE
 585

	)

3407 
	#OBJ_£t˘_C≠RevResTBE
 
OBJ_£t_˘y≥
,67L

	)

3409 
	#SN_£t˘_CªdReqTBE
 "£t˘-CªdReqTBE"

	)

3410 
	#NID_£t˘_CªdReqTBE
 586

	)

3411 
	#OBJ_£t˘_CªdReqTBE
 
OBJ_£t_˘y≥
,68L

	)

3413 
	#SN_£t˘_CªdReqTBEX
 "£t˘-CªdReqTBEX"

	)

3414 
	#NID_£t˘_CªdReqTBEX
 587

	)

3415 
	#OBJ_£t˘_CªdReqTBEX
 
OBJ_£t_˘y≥
,69L

	)

3417 
	#SN_£t˘_CªdResTBE
 "£t˘-CªdResTBE"

	)

3418 
	#NID_£t˘_CªdResTBE
 588

	)

3419 
	#OBJ_£t˘_CªdResTBE
 
OBJ_£t_˘y≥
,70L

	)

3421 
	#SN_£t˘_CªdRevReqTBE
 "£t˘-CªdRevReqTBE"

	)

3422 
	#NID_£t˘_CªdRevReqTBE
 589

	)

3423 
	#OBJ_£t˘_CªdRevReqTBE
 
OBJ_£t_˘y≥
,71L

	)

3425 
	#SN_£t˘_CªdRevReqTBEX
 "£t˘-CªdRevReqTBEX"

	)

3426 
	#NID_£t˘_CªdRevReqTBEX
 590

	)

3427 
	#OBJ_£t˘_CªdRevReqTBEX
 
OBJ_£t_˘y≥
,72L

	)

3429 
	#SN_£t˘_CªdRevResTBE
 "£t˘-CªdRevResTBE"

	)

3430 
	#NID_£t˘_CªdRevResTBE
 591

	)

3431 
	#OBJ_£t˘_CªdRevResTBE
 
OBJ_£t_˘y≥
,73L

	)

3433 
	#SN_£t˘_B©chAdmöReqTBE
 "£t˘-B©chAdmöReqTBE"

	)

3434 
	#NID_£t˘_B©chAdmöReqTBE
 592

	)

3435 
	#OBJ_£t˘_B©chAdmöReqTBE
 
OBJ_£t_˘y≥
,74L

	)

3437 
	#SN_£t˘_B©chAdmöResTBE
 "£t˘-B©chAdmöResTBE"

	)

3438 
	#NID_£t˘_B©chAdmöResTBE
 593

	)

3439 
	#OBJ_£t˘_B©chAdmöResTBE
 
OBJ_£t_˘y≥
,75L

	)

3441 
	#SN_£t˘_RegF‹mReqTBE
 "£t˘-RegF‹mReqTBE"

	)

3442 
	#NID_£t˘_RegF‹mReqTBE
 594

	)

3443 
	#OBJ_£t˘_RegF‹mReqTBE
 
OBJ_£t_˘y≥
,76L

	)

3445 
	#SN_£t˘_CîtReqTBE
 "£t˘-CîtReqTBE"

	)

3446 
	#NID_£t˘_CîtReqTBE
 595

	)

3447 
	#OBJ_£t˘_CîtReqTBE
 
OBJ_£t_˘y≥
,77L

	)

3449 
	#SN_£t˘_CîtReqTBEX
 "£t˘-CîtReqTBEX"

	)

3450 
	#NID_£t˘_CîtReqTBEX
 596

	)

3451 
	#OBJ_£t˘_CîtReqTBEX
 
OBJ_£t_˘y≥
,78L

	)

3453 
	#SN_£t˘_CîtResTBE
 "£t˘-CîtResTBE"

	)

3454 
	#NID_£t˘_CîtResTBE
 597

	)

3455 
	#OBJ_£t˘_CîtResTBE
 
OBJ_£t_˘y≥
,79L

	)

3457 
	#SN_£t˘_CRLNŸifiˇti⁄TBS
 "£t˘-CRLNŸifiˇti⁄TBS"

	)

3458 
	#NID_£t˘_CRLNŸifiˇti⁄TBS
 598

	)

3459 
	#OBJ_£t˘_CRLNŸifiˇti⁄TBS
 
OBJ_£t_˘y≥
,80L

	)

3461 
	#SN_£t˘_CRLNŸifiˇti⁄ResTBS
 "£t˘-CRLNŸifiˇti⁄ResTBS"

	)

3462 
	#NID_£t˘_CRLNŸifiˇti⁄ResTBS
 599

	)

3463 
	#OBJ_£t˘_CRLNŸifiˇti⁄ResTBS
 
OBJ_£t_˘y≥
,81L

	)

3465 
	#SN_£t˘_BCIDi°ributi⁄TBS
 "£t˘-BCIDi°ributi⁄TBS"

	)

3466 
	#NID_£t˘_BCIDi°ributi⁄TBS
 600

	)

3467 
	#OBJ_£t˘_BCIDi°ributi⁄TBS
 
OBJ_£t_˘y≥
,82L

	)

3469 
	#SN_£ãxt_gíCry±
 "£ãxt-gíCry±"

	)

3470 
	#LN_£ãxt_gíCry±
 "gíîi¯¸y±ogøm"

	)

3471 
	#NID_£ãxt_gíCry±
 601

	)

3472 
	#OBJ_£ãxt_gíCry±
 
OBJ_£t_msgExt
,1L

	)

3474 
	#SN_£ãxt_miAuth
 "£ãxt-miAuth"

	)

3475 
	#LN_£ãxt_miAuth
 "mîch™àöôüãdáuth"

	)

3476 
	#NID_£ãxt_miAuth
 602

	)

3477 
	#OBJ_£ãxt_miAuth
 
OBJ_£t_msgExt
,3L

	)

3479 
	#SN_£ãxt_pöSecuª
 "£ãxt-pöSecuª"

	)

3480 
	#NID_£ãxt_pöSecuª
 603

	)

3481 
	#OBJ_£ãxt_pöSecuª
 
OBJ_£t_msgExt
,4L

	)

3483 
	#SN_£ãxt_pöAny
 "£ãxt-pöAny"

	)

3484 
	#NID_£ãxt_pöAny
 604

	)

3485 
	#OBJ_£ãxt_pöAny
 
OBJ_£t_msgExt
,5L

	)

3487 
	#SN_£ãxt_åack2
 "£ãxt-åack2"

	)

3488 
	#NID_£ãxt_åack2
 605

	)

3489 
	#OBJ_£ãxt_åack2
 
OBJ_£t_msgExt
,7L

	)

3491 
	#SN_£ãxt_cv
 "£ãxt-cv"

	)

3492 
	#LN_£ãxt_cv
 "addôi⁄Æ vîifiˇti⁄"

	)

3493 
	#NID_£ãxt_cv
 606

	)

3494 
	#OBJ_£ãxt_cv
 
OBJ_£t_msgExt
,8L

	)

3496 
	#SN_£t_pﬁicy_roŸ
 "£t-pﬁicy-roŸ"

	)

3497 
	#NID_£t_pﬁicy_roŸ
 607

	)

3498 
	#OBJ_£t_pﬁicy_roŸ
 
OBJ_£t_pﬁicy
,0L

	)

3500 
	#SN_£tCext_hashedRoŸ
 "£tCext-hashedRoŸ"

	)

3501 
	#NID_£tCext_hashedRoŸ
 608

	)

3502 
	#OBJ_£tCext_hashedRoŸ
 
OBJ_£t_˚πExt
,0L

	)

3504 
	#SN_£tCext_˚πTy≥
 "£tCext-˚πTy≥"

	)

3505 
	#NID_£tCext_˚πTy≥
 609

	)

3506 
	#OBJ_£tCext_˚πTy≥
 
OBJ_£t_˚πExt
,1L

	)

3508 
	#SN_£tCext_mîchD©a
 "£tCext-mîchD©a"

	)

3509 
	#NID_£tCext_mîchD©a
 610

	)

3510 
	#OBJ_£tCext_mîchD©a
 
OBJ_£t_˚πExt
,2L

	)

3512 
	#SN_£tCext_cCîtRequúed
 "£tCext-cCîtRequúed"

	)

3513 
	#NID_£tCext_cCîtRequúed
 611

	)

3514 
	#OBJ_£tCext_cCîtRequúed
 
OBJ_£t_˚πExt
,3L

	)

3516 
	#SN_£tCext_tu¬ñög
 "£tCext-tu¬ñög"

	)

3517 
	#NID_£tCext_tu¬ñög
 612

	)

3518 
	#OBJ_£tCext_tu¬ñög
 
OBJ_£t_˚πExt
,4L

	)

3520 
	#SN_£tCext_£tExt
 "£tCext-£tExt"

	)

3521 
	#NID_£tCext_£tExt
 613

	)

3522 
	#OBJ_£tCext_£tExt
 
OBJ_£t_˚πExt
,5L

	)

3524 
	#SN_£tCext_£tQuÆf
 "£tCext-£tQuÆf"

	)

3525 
	#NID_£tCext_£tQuÆf
 614

	)

3526 
	#OBJ_£tCext_£tQuÆf
 
OBJ_£t_˚πExt
,6L

	)

3528 
	#SN_£tCext_PGWYˇ∑bûôõs
 "£tCext-PGWYˇ∑bûôõs"

	)

3529 
	#NID_£tCext_PGWYˇ∑bûôõs
 615

	)

3530 
	#OBJ_£tCext_PGWYˇ∑bûôõs
 
OBJ_£t_˚πExt
,7L

	)

3532 
	#SN_£tCext_TokíIdítifõr
 "£tCext-TokíIdítifõr"

	)

3533 
	#NID_£tCext_TokíIdítifõr
 616

	)

3534 
	#OBJ_£tCext_TokíIdítifõr
 
OBJ_£t_˚πExt
,8L

	)

3536 
	#SN_£tCext_Tøck2D©a
 "£tCext-Tøck2D©a"

	)

3537 
	#NID_£tCext_Tøck2D©a
 617

	)

3538 
	#OBJ_£tCext_Tøck2D©a
 
OBJ_£t_˚πExt
,9L

	)

3540 
	#SN_£tCext_TokíTy≥
 "£tCext-TokíTy≥"

	)

3541 
	#NID_£tCext_TokíTy≥
 618

	)

3542 
	#OBJ_£tCext_TokíTy≥
 
OBJ_£t_˚πExt
,10L

	)

3544 
	#SN_£tCext_IssuîC≠abûôõs
 "£tCext-IssuîC≠abûôõs"

	)

3545 
	#NID_£tCext_IssuîC≠abûôõs
 619

	)

3546 
	#OBJ_£tCext_IssuîC≠abûôõs
 
OBJ_£t_˚πExt
,11L

	)

3548 
	#SN_£tAâr_Cît
 "£tAâr-Cît"

	)

3549 
	#NID_£tAâr_Cît
 620

	)

3550 
	#OBJ_£tAâr_Cît
 
OBJ_£t_©å
,0L

	)

3552 
	#SN_£tAâr_PGWYˇp
 "£tAâr-PGWYˇp"

	)

3553 
	#LN_£tAâr_PGWYˇp
 "∑ymíàg©eway c≠abûôõs"

	)

3554 
	#NID_£tAâr_PGWYˇp
 621

	)

3555 
	#OBJ_£tAâr_PGWYˇp
 
OBJ_£t_©å
,1L

	)

3557 
	#SN_£tAâr_TokíTy≥
 "£tAâr-TokíTy≥"

	)

3558 
	#NID_£tAâr_TokíTy≥
 622

	)

3559 
	#OBJ_£tAâr_TokíTy≥
 
OBJ_£t_©å
,2L

	)

3561 
	#SN_£tAâr_IssC≠
 "£tAâr-IssC≠"

	)

3562 
	#LN_£tAâr_IssC≠
 "issuî c≠abûôõs"

	)

3563 
	#NID_£tAâr_IssC≠
 623

	)

3564 
	#OBJ_£tAâr_IssC≠
 
OBJ_£t_©å
,3L

	)

3566 
	#SN_£t_roŸKeyThumb
 "£t-roŸKeyThumb"

	)

3567 
	#NID_£t_roŸKeyThumb
 624

	)

3568 
	#OBJ_£t_roŸKeyThumb
 
OBJ_£tAâr_Cît
,0L

	)

3570 
	#SN_£t_addPﬁicy
 "£t-addPﬁicy"

	)

3571 
	#NID_£t_addPﬁicy
 625

	)

3572 
	#OBJ_£t_addPﬁicy
 
OBJ_£tAâr_Cît
,1L

	)

3574 
	#SN_£tAâr_Tokí_EMV
 "£tAâr-Tokí-EMV"

	)

3575 
	#NID_£tAâr_Tokí_EMV
 626

	)

3576 
	#OBJ_£tAâr_Tokí_EMV
 
OBJ_£tAâr_TokíTy≥
,1L

	)

3578 
	#SN_£tAâr_Tokí_B0Prime
 "£tAâr-Tokí-B0Prime"

	)

3579 
	#NID_£tAâr_Tokí_B0Prime
 627

	)

3580 
	#OBJ_£tAâr_Tokí_B0Prime
 
OBJ_£tAâr_TokíTy≥
,2L

	)

3582 
	#SN_£tAâr_IssC≠_CVM
 "£tAâr-IssC≠-CVM"

	)

3583 
	#NID_£tAâr_IssC≠_CVM
 628

	)

3584 
	#OBJ_£tAâr_IssC≠_CVM
 
OBJ_£tAâr_IssC≠
,3L

	)

3586 
	#SN_£tAâr_IssC≠_T2
 "£tAâr-IssC≠-T2"

	)

3587 
	#NID_£tAâr_IssC≠_T2
 629

	)

3588 
	#OBJ_£tAâr_IssC≠_T2
 
OBJ_£tAâr_IssC≠
,4L

	)

3590 
	#SN_£tAâr_IssC≠_Sig
 "£tAâr-IssC≠-Sig"

	)

3591 
	#NID_£tAâr_IssC≠_Sig
 630

	)

3592 
	#OBJ_£tAâr_IssC≠_Sig
 
OBJ_£tAâr_IssC≠
,5L

	)

3594 
	#SN_£tAâr_GíCry±grm
 "£tAâr-GíCry±grm"

	)

3595 
	#LN_£tAâr_GíCry±grm
 "gíî©ê¸y±ogøm"

	)

3596 
	#NID_£tAâr_GíCry±grm
 631

	)

3597 
	#OBJ_£tAâr_GíCry±grm
 
OBJ_£tAâr_IssC≠_CVM
,1L

	)

3599 
	#SN_£tAâr_T2Enc
 "£tAâr-T2Enc"

	)

3600 
	#LN_£tAâr_T2Enc
 "í¸y±edÅøck 2"

	)

3601 
	#NID_£tAâr_T2Enc
 632

	)

3602 
	#OBJ_£tAâr_T2Enc
 
OBJ_£tAâr_IssC≠_T2
,1L

	)

3604 
	#SN_£tAâr_T2˛óπxt
 "£tAâr-T2˛óπxt"

	)

3605 
	#LN_£tAâr_T2˛óπxt
 "˛óπexàåack 2"

	)

3606 
	#NID_£tAâr_T2˛óπxt
 633

	)

3607 
	#OBJ_£tAâr_T2˛óπxt
 
OBJ_£tAâr_IssC≠_T2
,2L

	)

3609 
	#SN_£tAâr_TokICCsig
 "£tAâr-TokICCsig"

	)

3610 
	#LN_£tAâr_TokICCsig
 "ICC o∏tokí sig«tuª"

	)

3611 
	#NID_£tAâr_TokICCsig
 634

	)

3612 
	#OBJ_£tAâr_TokICCsig
 
OBJ_£tAâr_IssC≠_Sig
,1L

	)

3614 
	#SN_£tAâr_SecDevSig
 "£tAâr-SecDevSig"

	)

3615 
	#LN_£tAâr_SecDevSig
 "£cuª devi˚ sig«tuª"

	)

3616 
	#NID_£tAâr_SecDevSig
 635

	)

3617 
	#OBJ_£tAâr_SecDevSig
 
OBJ_£tAâr_IssC≠_Sig
,2L

	)

3619 
	#SN_£t_bønd_IATA_ATA
 "£t-bønd-IATA-ATA"

	)

3620 
	#NID_£t_bønd_IATA_ATA
 636

	)

3621 
	#OBJ_£t_bønd_IATA_ATA
 
OBJ_£t_bønd
,1L

	)

3623 
	#SN_£t_bønd_Döîs
 "£t-bønd-Döîs"

	)

3624 
	#NID_£t_bønd_Döîs
 637

	)

3625 
	#OBJ_£t_bønd_Döîs
 
OBJ_£t_bønd
,30L

	)

3627 
	#SN_£t_bønd_AmîiˇnEx¥ess
 "£t-bønd-AmîiˇnEx¥ess"

	)

3628 
	#NID_£t_bønd_AmîiˇnEx¥ess
 638

	)

3629 
	#OBJ_£t_bønd_AmîiˇnEx¥ess
 
OBJ_£t_bønd
,34L

	)

3631 
	#SN_£t_bønd_JCB
 "£t-bønd-JCB"

	)

3632 
	#NID_£t_bønd_JCB
 639

	)

3633 
	#OBJ_£t_bønd_JCB
 
OBJ_£t_bønd
,35L

	)

3635 
	#SN_£t_bønd_Viß
 "£t-bønd-Viß"

	)

3636 
	#NID_£t_bønd_Viß
 640

	)

3637 
	#OBJ_£t_bønd_Viß
 
OBJ_£t_bønd
,4L

	)

3639 
	#SN_£t_bønd_Ma°îC¨d
 "£t-bønd-Ma°îC¨d"

	)

3640 
	#NID_£t_bønd_Ma°îC¨d
 641

	)

3641 
	#OBJ_£t_bønd_Ma°îC¨d
 
OBJ_£t_bønd
,5L

	)

3643 
	#SN_£t_bønd_Novus
 "£t-bønd-Novus"

	)

3644 
	#NID_£t_bønd_Novus
 642

	)

3645 
	#OBJ_£t_bønd_Novus
 
OBJ_£t_bønd
,6011L

	)

3647 
	#SN_des_cdmf
 "DES-CDMF"

	)

3648 
	#LN_des_cdmf
 "des-cdmf"

	)

3649 
	#NID_des_cdmf
 643

	)

3650 
	#OBJ_des_cdmf
 
OBJ_rßdsi
,3L,10L

	)

3652 
	#SN_rßOAEPEn¸y±i⁄SET
 "rßOAEPEn¸y±i⁄SET"

	)

3653 
	#NID_rßOAEPEn¸y±i⁄SET
 644

	)

3654 
	#OBJ_rßOAEPEn¸y±i⁄SET
 
OBJ_rßdsi
,1L,1L,6L

	)

3656 
	#SN_ù£c3
 "OakÀy-EC2N-3"

	)

3657 
	#LN_ù£c3
 "ù£c3"

	)

3658 
	#NID_ù£c3
 749

	)

3660 
	#SN_ù£c4
 "OakÀy-EC2N-4"

	)

3661 
	#LN_ù£c4
 "ù£c4"

	)

3662 
	#NID_ù£c4
 750

	)

3664 
	#SN_whúÕoﬁ
 "whúÕoﬁ"

	)

3665 
	#NID_whúÕoﬁ
 804

	)

3666 
	#OBJ_whúÕoﬁ
 
OBJ_iso
,0L,10118L,3L,0L,55L

	)

3668 
	#SN_¸y±›ro
 "¸y±›ro"

	)

3669 
	#NID_¸y±›ro
 805

	)

3670 
	#OBJ_¸y±›ro
 
OBJ_membî_body
,643L,2L,2L

	)

3672 
	#SN_¸y±ocom
 "¸y±ocom"

	)

3673 
	#NID_¸y±ocom
 806

	)

3674 
	#OBJ_¸y±ocom
 
OBJ_membî_body
,643L,2L,9L

	)

3676 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001
 "id-Go°R3411-94-wôh-Go°R3410-2001"

	)

3677 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001
 "GOST R 34.11-94 wôh GOST R 34.10-2001"

	)

3678 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001
 807

	)

3679 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001
 
OBJ_¸y±›ro
,3L

	)

3681 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94
 "id-Go°R3411-94-wôh-Go°R3410-94"

	)

3682 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94
 "GOST R 34.11-94 wôh GOST R 34.10-94"

	)

3683 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94
 808

	)

3684 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94
 
OBJ_¸y±›ro
,4L

	)

3686 
	#SN_id_Go°R3411_94
 "md_go°94"

	)

3687 
	#LN_id_Go°R3411_94
 "GOST R 34.11-94"

	)

3688 
	#NID_id_Go°R3411_94
 809

	)

3689 
	#OBJ_id_Go°R3411_94
 
OBJ_¸y±›ro
,9L

	)

3691 
	#SN_id_HMACGo°R3411_94
 "id-HMACGo°R3411-94"

	)

3692 
	#LN_id_HMACGo°R3411_94
 "HMAC GOST 34.11-94"

	)

3693 
	#NID_id_HMACGo°R3411_94
 810

	)

3694 
	#OBJ_id_HMACGo°R3411_94
 
OBJ_¸y±›ro
,10L

	)

3696 
	#SN_id_Go°R3410_2001
 "go°2001"

	)

3697 
	#LN_id_Go°R3410_2001
 "GOST R 34.10-2001"

	)

3698 
	#NID_id_Go°R3410_2001
 811

	)

3699 
	#OBJ_id_Go°R3410_2001
 
OBJ_¸y±›ro
,19L

	)

3701 
	#SN_id_Go°R3410_94
 "go°94"

	)

3702 
	#LN_id_Go°R3410_94
 "GOST R 34.10-94"

	)

3703 
	#NID_id_Go°R3410_94
 812

	)

3704 
	#OBJ_id_Go°R3410_94
 
OBJ_¸y±›ro
,20L

	)

3706 
	#SN_id_Go°28147_89
 "go°89"

	)

3707 
	#LN_id_Go°28147_89
 "GOST 28147-89"

	)

3708 
	#NID_id_Go°28147_89
 813

	)

3709 
	#OBJ_id_Go°28147_89
 
OBJ_¸y±›ro
,21L

	)

3711 
	#SN_go°89_˙t
 "go°89-˙t"

	)

3712 
	#NID_go°89_˙t
 814

	)

3714 
	#SN_id_Go°28147_89_MAC
 "go°-mac"

	)

3715 
	#LN_id_Go°28147_89_MAC
 "GOST 28147-89 MAC"

	)

3716 
	#NID_id_Go°28147_89_MAC
 815

	)

3717 
	#OBJ_id_Go°28147_89_MAC
 
OBJ_¸y±›ro
,22L

	)

3719 
	#SN_id_Go°R3411_94_¥f
 "¥f-go°r3411-94"

	)

3720 
	#LN_id_Go°R3411_94_¥f
 "GOST R 34.11-94 PRF"

	)

3721 
	#NID_id_Go°R3411_94_¥f
 816

	)

3722 
	#OBJ_id_Go°R3411_94_¥f
 
OBJ_¸y±›ro
,23L

	)

3724 
	#SN_id_Go°R3410_2001DH
 "id-Go°R3410-2001DH"

	)

3725 
	#LN_id_Go°R3410_2001DH
 "GOST R 34.10-2001 DH"

	)

3726 
	#NID_id_Go°R3410_2001DH
 817

	)

3727 
	#OBJ_id_Go°R3410_2001DH
 
OBJ_¸y±›ro
,98L

	)

3729 
	#SN_id_Go°R3410_94DH
 "id-Go°R3410-94DH"

	)

3730 
	#LN_id_Go°R3410_94DH
 "GOST R 34.10-94 DH"

	)

3731 
	#NID_id_Go°R3410_94DH
 818

	)

3732 
	#OBJ_id_Go°R3410_94DH
 
OBJ_¸y±›ro
,99L

	)

3734 
	#SN_id_Go°28147_89_Cry±oPro_KeyMeshög
 "id-Go°28147-89-Cry±oPro-KeyMeshög"

	)

3735 
	#NID_id_Go°28147_89_Cry±oPro_KeyMeshög
 819

	)

3736 
	#OBJ_id_Go°28147_89_Cry±oPro_KeyMeshög
 
OBJ_¸y±›ro
,14L,1L

	)

3738 
	#SN_id_Go°28147_89_N⁄e_KeyMeshög
 "id-Go°28147-89-N⁄e-KeyMeshög"

	)

3739 
	#NID_id_Go°28147_89_N⁄e_KeyMeshög
 820

	)

3740 
	#OBJ_id_Go°28147_89_N⁄e_KeyMeshög
 
OBJ_¸y±›ro
,14L,0L

	)

3742 
	#SN_id_Go°R3411_94_Te°P¨amSë
 "id-Go°R3411-94-Te°P¨amSë"

	)

3743 
	#NID_id_Go°R3411_94_Te°P¨amSë
 821

	)

3744 
	#OBJ_id_Go°R3411_94_Te°P¨amSë
 
OBJ_¸y±›ro
,30L,0L

	)

3746 
	#SN_id_Go°R3411_94_Cry±oProP¨amSë
 "id-Go°R3411-94-Cry±oProP¨amSë"

	)

3747 
	#NID_id_Go°R3411_94_Cry±oProP¨amSë
 822

	)

3748 
	#OBJ_id_Go°R3411_94_Cry±oProP¨amSë
 
OBJ_¸y±›ro
,30L,1L

	)

3750 
	#SN_id_Go°28147_89_Te°P¨amSë
 "id-Go°28147-89-Te°P¨amSë"

	)

3751 
	#NID_id_Go°28147_89_Te°P¨amSë
 823

	)

3752 
	#OBJ_id_Go°28147_89_Te°P¨amSë
 
OBJ_¸y±›ro
,31L,0L

	)

3754 
	#SN_id_Go°28147_89_Cry±oPro_A_P¨amSë
 "id-Go°28147-89-Cry±oPro-A-P¨amSë"

	)

3755 
	#NID_id_Go°28147_89_Cry±oPro_A_P¨amSë
 824

	)

3756 
	#OBJ_id_Go°28147_89_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,31L,1L

	)

3758 
	#SN_id_Go°28147_89_Cry±oPro_B_P¨amSë
 "id-Go°28147-89-Cry±oPro-B-P¨amSë"

	)

3759 
	#NID_id_Go°28147_89_Cry±oPro_B_P¨amSë
 825

	)

3760 
	#OBJ_id_Go°28147_89_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,31L,2L

	)

3762 
	#SN_id_Go°28147_89_Cry±oPro_C_P¨amSë
 "id-Go°28147-89-Cry±oPro-C-P¨amSë"

	)

3763 
	#NID_id_Go°28147_89_Cry±oPro_C_P¨amSë
 826

	)

3764 
	#OBJ_id_Go°28147_89_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,31L,3L

	)

3766 
	#SN_id_Go°28147_89_Cry±oPro_D_P¨amSë
 "id-Go°28147-89-Cry±oPro-D-P¨amSë"

	)

3767 
	#NID_id_Go°28147_89_Cry±oPro_D_P¨amSë
 827

	)

3768 
	#OBJ_id_Go°28147_89_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,31L,4L

	)

3770 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-1-P¨amSë"

	)

3771 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 828

	)

3772 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_1_P¨amSë
 
OBJ_¸y±›ro
,31L,5L

	)

3774 
	#SN_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 "id-Go°28147-89-Cry±oPro-Osˇr-1-0-P¨amSë"

	)

3775 
	#NID_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 829

	)

3776 
	#OBJ_id_Go°28147_89_Cry±oPro_Osˇr_1_0_P¨amSë
 
OBJ_¸y±›ro
,31L,6L

	)

3778 
	#SN_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 "id-Go°28147-89-Cry±oPro-RIC-1-P¨amSë"

	)

3779 
	#NID_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 830

	)

3780 
	#OBJ_id_Go°28147_89_Cry±oPro_RIC_1_P¨amSë
 
OBJ_¸y±›ro
,31L,7L

	)

3782 
	#SN_id_Go°R3410_94_Te°P¨amSë
 "id-Go°R3410-94-Te°P¨amSë"

	)

3783 
	#NID_id_Go°R3410_94_Te°P¨amSë
 831

	)

3784 
	#OBJ_id_Go°R3410_94_Te°P¨amSë
 
OBJ_¸y±›ro
,32L,0L

	)

3786 
	#SN_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 "id-Go°R3410-94-Cry±oPro-A-P¨amSë"

	)

3787 
	#NID_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 832

	)

3788 
	#OBJ_id_Go°R3410_94_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,32L,2L

	)

3790 
	#SN_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 "id-Go°R3410-94-Cry±oPro-B-P¨amSë"

	)

3791 
	#NID_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 833

	)

3792 
	#OBJ_id_Go°R3410_94_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,32L,3L

	)

3794 
	#SN_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 "id-Go°R3410-94-Cry±oPro-C-P¨amSë"

	)

3795 
	#NID_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 834

	)

3796 
	#OBJ_id_Go°R3410_94_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,32L,4L

	)

3798 
	#SN_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 "id-Go°R3410-94-Cry±oPro-D-P¨amSë"

	)

3799 
	#NID_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 835

	)

3800 
	#OBJ_id_Go°R3410_94_Cry±oPro_D_P¨amSë
 
OBJ_¸y±›ro
,32L,5L

	)

3802 
	#SN_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchA-P¨amSë"

	)

3803 
	#NID_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 836

	)

3804 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,33L,1L

	)

3806 
	#SN_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchB-P¨amSë"

	)

3807 
	#NID_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 837

	)

3808 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,33L,2L

	)

3810 
	#SN_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 "id-Go°R3410-94-Cry±oPro-XchC-P¨amSë"

	)

3811 
	#NID_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 838

	)

3812 
	#OBJ_id_Go°R3410_94_Cry±oPro_XchC_P¨amSë
 
OBJ_¸y±›ro
,33L,3L

	)

3814 
	#SN_id_Go°R3410_2001_Te°P¨amSë
 "id-Go°R3410-2001-Te°P¨amSë"

	)

3815 
	#NID_id_Go°R3410_2001_Te°P¨amSë
 839

	)

3816 
	#OBJ_id_Go°R3410_2001_Te°P¨amSë
 
OBJ_¸y±›ro
,35L,0L

	)

3818 
	#SN_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-A-P¨amSë"

	)

3819 
	#NID_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 840

	)

3820 
	#OBJ_id_Go°R3410_2001_Cry±oPro_A_P¨amSë
 
OBJ_¸y±›ro
,35L,1L

	)

3822 
	#SN_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-B-P¨amSë"

	)

3823 
	#NID_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 841

	)

3824 
	#OBJ_id_Go°R3410_2001_Cry±oPro_B_P¨amSë
 
OBJ_¸y±›ro
,35L,2L

	)

3826 
	#SN_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-C-P¨amSë"

	)

3827 
	#NID_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 842

	)

3828 
	#OBJ_id_Go°R3410_2001_Cry±oPro_C_P¨amSë
 
OBJ_¸y±›ro
,35L,3L

	)

3830 
	#SN_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchA-P¨amSë"

	)

3831 
	#NID_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 843

	)

3832 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchA_P¨amSë
 
OBJ_¸y±›ro
,36L,0L

	)

3834 
	#SN_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 "id-Go°R3410-2001-Cry±oPro-XchB-P¨amSë"

	)

3835 
	#NID_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 844

	)

3836 
	#OBJ_id_Go°R3410_2001_Cry±oPro_XchB_P¨amSë
 
OBJ_¸y±›ro
,36L,1L

	)

3838 
	#SN_id_Go°R3410_94_a
 "id-Go°R3410-94-a"

	)

3839 
	#NID_id_Go°R3410_94_a
 845

	)

3840 
	#OBJ_id_Go°R3410_94_a
 
OBJ_id_Go°R3410_94
,1L

	)

3842 
	#SN_id_Go°R3410_94_aBis
 "id-Go°R3410-94-aBis"

	)

3843 
	#NID_id_Go°R3410_94_aBis
 846

	)

3844 
	#OBJ_id_Go°R3410_94_aBis
 
OBJ_id_Go°R3410_94
,2L

	)

3846 
	#SN_id_Go°R3410_94_b
 "id-Go°R3410-94-b"

	)

3847 
	#NID_id_Go°R3410_94_b
 847

	)

3848 
	#OBJ_id_Go°R3410_94_b
 
OBJ_id_Go°R3410_94
,3L

	)

3850 
	#SN_id_Go°R3410_94_bBis
 "id-Go°R3410-94-bBis"

	)

3851 
	#NID_id_Go°R3410_94_bBis
 848

	)

3852 
	#OBJ_id_Go°R3410_94_bBis
 
OBJ_id_Go°R3410_94
,4L

	)

3854 
	#SN_id_Go°28147_89_cc
 "id-Go°28147-89-cc"

	)

3855 
	#LN_id_Go°28147_89_cc
 "GOST 28147-89 Cry±ocom P¨amSë"

	)

3856 
	#NID_id_Go°28147_89_cc
 849

	)

3857 
	#OBJ_id_Go°28147_89_cc
 
OBJ_¸y±ocom
,1L,6L,1L

	)

3859 
	#SN_id_Go°R3410_94_cc
 "go°94cc"

	)

3860 
	#LN_id_Go°R3410_94_cc
 "GOST 34.10-94 Cry±ocom"

	)

3861 
	#NID_id_Go°R3410_94_cc
 850

	)

3862 
	#OBJ_id_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,5L,3L

	)

3864 
	#SN_id_Go°R3410_2001_cc
 "go°2001cc"

	)

3865 
	#LN_id_Go°R3410_2001_cc
 "GOST 34.10-2001 Cry±ocom"

	)

3866 
	#NID_id_Go°R3410_2001_cc
 851

	)

3867 
	#OBJ_id_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,5L,4L

	)

3869 
	#SN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "id-Go°R3411-94-wôh-Go°R3410-94-cc"

	)

3870 
	#LN_id_Go°R3411_94_wôh_Go°R3410_94_cc
 "GOST R 34.11-94 wôh GOST R 34.10-94 Cry±ocom"

	)

3871 
	#NID_id_Go°R3411_94_wôh_Go°R3410_94_cc
 852

	)

3872 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_94_cc
 
OBJ_¸y±ocom
,1L,3L,3L

	)

3874 
	#SN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "id-Go°R3411-94-wôh-Go°R3410-2001-cc"

	)

3875 
	#LN_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 "GOST R 34.11-94 wôh GOST R 34.10-2001 Cry±ocom"

	)

3876 
	#NID_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 853

	)

3877 
	#OBJ_id_Go°R3411_94_wôh_Go°R3410_2001_cc
 
OBJ_¸y±ocom
,1L,3L,4L

	)

3879 
	#SN_id_Go°R3410_2001_P¨amSë_cc
 "id-Go°R3410-2001-P¨amSë-cc"

	)

3880 
	#LN_id_Go°R3410_2001_P¨amSë_cc
 "GOST R 3410-2001 P¨amëî Së Cry±ocom"

	)

3881 
	#NID_id_Go°R3410_2001_P¨amSë_cc
 854

	)

3882 
	#OBJ_id_Go°R3410_2001_P¨amSë_cc
 
OBJ_¸y±ocom
,1L,8L,1L

	)

3884 
	#SN_ˇmñlü_128_cbc
 "CAMELLIA-128-CBC"

	)

3885 
	#LN_ˇmñlü_128_cbc
 "ˇmñlü-128-cbc"

	)

3886 
	#NID_ˇmñlü_128_cbc
 751

	)

3887 
	#OBJ_ˇmñlü_128_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,2L

	)

3889 
	#SN_ˇmñlü_192_cbc
 "CAMELLIA-192-CBC"

	)

3890 
	#LN_ˇmñlü_192_cbc
 "ˇmñlü-192-cbc"

	)

3891 
	#NID_ˇmñlü_192_cbc
 752

	)

3892 
	#OBJ_ˇmñlü_192_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,3L

	)

3894 
	#SN_ˇmñlü_256_cbc
 "CAMELLIA-256-CBC"

	)

3895 
	#LN_ˇmñlü_256_cbc
 "ˇmñlü-256-cbc"

	)

3896 
	#NID_ˇmñlü_256_cbc
 753

	)

3897 
	#OBJ_ˇmñlü_256_cbc
 1L,2L,392L,200011L,61L,1L,1L,1L,4L

	)

3899 
	#SN_id_ˇmñlü128_wøp
 "id-ˇmñlü128-wøp"

	)

3900 
	#NID_id_ˇmñlü128_wøp
 907

	)

3901 
	#OBJ_id_ˇmñlü128_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,2L

	)

3903 
	#SN_id_ˇmñlü192_wøp
 "id-ˇmñlü192-wøp"

	)

3904 
	#NID_id_ˇmñlü192_wøp
 908

	)

3905 
	#OBJ_id_ˇmñlü192_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,3L

	)

3907 
	#SN_id_ˇmñlü256_wøp
 "id-ˇmñlü256-wøp"

	)

3908 
	#NID_id_ˇmñlü256_wøp
 909

	)

3909 
	#OBJ_id_ˇmñlü256_wøp
 1L,2L,392L,200011L,61L,1L,1L,3L,4L

	)

3911 
	#OBJ_¡t_ds
 0L,3L,4401L,5L

	)

3913 
	#OBJ_ˇmñlü
 
OBJ_¡t_ds
,3L,1L,9L

	)

3915 
	#SN_ˇmñlü_128_ecb
 "CAMELLIA-128-ECB"

	)

3916 
	#LN_ˇmñlü_128_ecb
 "ˇmñlü-128-ecb"

	)

3917 
	#NID_ˇmñlü_128_ecb
 754

	)

3918 
	#OBJ_ˇmñlü_128_ecb
 
OBJ_ˇmñlü
,1L

	)

3920 
	#SN_ˇmñlü_128_ofb128
 "CAMELLIA-128-OFB"

	)

3921 
	#LN_ˇmñlü_128_ofb128
 "ˇmñlü-128-ofb"

	)

3922 
	#NID_ˇmñlü_128_ofb128
 766

	)

3923 
	#OBJ_ˇmñlü_128_ofb128
 
OBJ_ˇmñlü
,3L

	)

3925 
	#SN_ˇmñlü_128_cfb128
 "CAMELLIA-128-CFB"

	)

3926 
	#LN_ˇmñlü_128_cfb128
 "ˇmñlü-128-cfb"

	)

3927 
	#NID_ˇmñlü_128_cfb128
 757

	)

3928 
	#OBJ_ˇmñlü_128_cfb128
 
OBJ_ˇmñlü
,4L

	)

3930 
	#SN_ˇmñlü_192_ecb
 "CAMELLIA-192-ECB"

	)

3931 
	#LN_ˇmñlü_192_ecb
 "ˇmñlü-192-ecb"

	)

3932 
	#NID_ˇmñlü_192_ecb
 755

	)

3933 
	#OBJ_ˇmñlü_192_ecb
 
OBJ_ˇmñlü
,21L

	)

3935 
	#SN_ˇmñlü_192_ofb128
 "CAMELLIA-192-OFB"

	)

3936 
	#LN_ˇmñlü_192_ofb128
 "ˇmñlü-192-ofb"

	)

3937 
	#NID_ˇmñlü_192_ofb128
 767

	)

3938 
	#OBJ_ˇmñlü_192_ofb128
 
OBJ_ˇmñlü
,23L

	)

3940 
	#SN_ˇmñlü_192_cfb128
 "CAMELLIA-192-CFB"

	)

3941 
	#LN_ˇmñlü_192_cfb128
 "ˇmñlü-192-cfb"

	)

3942 
	#NID_ˇmñlü_192_cfb128
 758

	)

3943 
	#OBJ_ˇmñlü_192_cfb128
 
OBJ_ˇmñlü
,24L

	)

3945 
	#SN_ˇmñlü_256_ecb
 "CAMELLIA-256-ECB"

	)

3946 
	#LN_ˇmñlü_256_ecb
 "ˇmñlü-256-ecb"

	)

3947 
	#NID_ˇmñlü_256_ecb
 756

	)

3948 
	#OBJ_ˇmñlü_256_ecb
 
OBJ_ˇmñlü
,41L

	)

3950 
	#SN_ˇmñlü_256_ofb128
 "CAMELLIA-256-OFB"

	)

3951 
	#LN_ˇmñlü_256_ofb128
 "ˇmñlü-256-ofb"

	)

3952 
	#NID_ˇmñlü_256_ofb128
 768

	)

3953 
	#OBJ_ˇmñlü_256_ofb128
 
OBJ_ˇmñlü
,43L

	)

3955 
	#SN_ˇmñlü_256_cfb128
 "CAMELLIA-256-CFB"

	)

3956 
	#LN_ˇmñlü_256_cfb128
 "ˇmñlü-256-cfb"

	)

3957 
	#NID_ˇmñlü_256_cfb128
 759

	)

3958 
	#OBJ_ˇmñlü_256_cfb128
 
OBJ_ˇmñlü
,44L

	)

3960 
	#SN_ˇmñlü_128_cfb1
 "CAMELLIA-128-CFB1"

	)

3961 
	#LN_ˇmñlü_128_cfb1
 "ˇmñlü-128-cfb1"

	)

3962 
	#NID_ˇmñlü_128_cfb1
 760

	)

3964 
	#SN_ˇmñlü_192_cfb1
 "CAMELLIA-192-CFB1"

	)

3965 
	#LN_ˇmñlü_192_cfb1
 "ˇmñlü-192-cfb1"

	)

3966 
	#NID_ˇmñlü_192_cfb1
 761

	)

3968 
	#SN_ˇmñlü_256_cfb1
 "CAMELLIA-256-CFB1"

	)

3969 
	#LN_ˇmñlü_256_cfb1
 "ˇmñlü-256-cfb1"

	)

3970 
	#NID_ˇmñlü_256_cfb1
 762

	)

3972 
	#SN_ˇmñlü_128_cfb8
 "CAMELLIA-128-CFB8"

	)

3973 
	#LN_ˇmñlü_128_cfb8
 "ˇmñlü-128-cfb8"

	)

3974 
	#NID_ˇmñlü_128_cfb8
 763

	)

3976 
	#SN_ˇmñlü_192_cfb8
 "CAMELLIA-192-CFB8"

	)

3977 
	#LN_ˇmñlü_192_cfb8
 "ˇmñlü-192-cfb8"

	)

3978 
	#NID_ˇmñlü_192_cfb8
 764

	)

3980 
	#SN_ˇmñlü_256_cfb8
 "CAMELLIA-256-CFB8"

	)

3981 
	#LN_ˇmñlü_256_cfb8
 "ˇmñlü-256-cfb8"

	)

3982 
	#NID_ˇmñlü_256_cfb8
 765

	)

3984 
	#SN_kiß
 "KISA"

	)

3985 
	#LN_kiß
 "kiß"

	)

3986 
	#NID_kiß
 773

	)

3987 
	#OBJ_kiß
 
OBJ_membî_body
,410L,200004L

	)

3989 
	#SN_£ed_ecb
 "SEED-ECB"

	)

3990 
	#LN_£ed_ecb
 "£ed-ecb"

	)

3991 
	#NID_£ed_ecb
 776

	)

3992 
	#OBJ_£ed_ecb
 
OBJ_kiß
,1L,3L

	)

3994 
	#SN_£ed_cbc
 "SEED-CBC"

	)

3995 
	#LN_£ed_cbc
 "£ed-cbc"

	)

3996 
	#NID_£ed_cbc
 777

	)

3997 
	#OBJ_£ed_cbc
 
OBJ_kiß
,1L,4L

	)

3999 
	#SN_£ed_cfb128
 "SEED-CFB"

	)

4000 
	#LN_£ed_cfb128
 "£ed-cfb"

	)

4001 
	#NID_£ed_cfb128
 779

	)

4002 
	#OBJ_£ed_cfb128
 
OBJ_kiß
,1L,5L

	)

4004 
	#SN_£ed_ofb128
 "SEED-OFB"

	)

4005 
	#LN_£ed_ofb128
 "£ed-ofb"

	)

4006 
	#NID_£ed_ofb128
 778

	)

4007 
	#OBJ_£ed_ofb128
 
OBJ_kiß
,1L,6L

	)

4009 
	#SN_hmac
 "HMAC"

	)

4010 
	#LN_hmac
 "hmac"

	)

4011 
	#NID_hmac
 855

	)

4013 
	#SN_cmac
 "CMAC"

	)

4014 
	#LN_cmac
 "cmac"

	)

4015 
	#NID_cmac
 894

	)

4017 
	#SN_rc4_hmac_md5
 "RC4-HMAC-MD5"

	)

4018 
	#LN_rc4_hmac_md5
 "rc4-hmac-md5"

	)

4019 
	#NID_rc4_hmac_md5
 915

	)

4021 
	#SN_´s_128_cbc_hmac_sha1
 "AES-128-CBC-HMAC-SHA1"

	)

4022 
	#LN_´s_128_cbc_hmac_sha1
 "´s-128-cbc-hmac-sha1"

	)

4023 
	#NID_´s_128_cbc_hmac_sha1
 916

	)

4025 
	#SN_´s_192_cbc_hmac_sha1
 "AES-192-CBC-HMAC-SHA1"

	)

4026 
	#LN_´s_192_cbc_hmac_sha1
 "´s-192-cbc-hmac-sha1"

	)

4027 
	#NID_´s_192_cbc_hmac_sha1
 917

	)

4029 
	#SN_´s_256_cbc_hmac_sha1
 "AES-256-CBC-HMAC-SHA1"

	)

4030 
	#LN_´s_256_cbc_hmac_sha1
 "´s-256-cbc-hmac-sha1"

	)

4031 
	#NID_´s_256_cbc_hmac_sha1
 918

	)

	@/usr/include/openssl/opensslv.h

1 #i‚de‡
HEADER_OPENSSLV_H


2 
	#HEADER_OPENSSLV_H


	)

28 
	#OPENSSL_VERSION_NUMBER
 0x1000100fL

	)

29 #ifde‡
OPENSSL_FIPS


30 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1-fù†14 M¨ 2012"

	)

32 
	#OPENSSL_VERSION_TEXT
 "O≥nSSL 1.0.1 14 M¨ 2012"

	)

34 
	#OPENSSL_VERSION_PTEXT
 "Ö¨ào‡" 
OPENSSL_VERSION_TEXT


	)

85 
	#SHLIB_VERSION_HISTORY
 ""

	)

86 
	#SHLIB_VERSION_NUMBER
 "1.0.0"

	)

	@/usr/include/openssl/pem2.h

60 #ifde‡
__˝lu•lus


64 #i‚de‡
HEADER_PEM_H


65 
ERR_lﬂd_PEM_°rögs
();

68 #ifde‡
__˝lu•lus


	@/usr/include/openssl/pkcs7.h

59 #i‚de‡
HEADER_PKCS7_H


60 
	#HEADER_PKCS7_H


	)

62 
	~<›ís¶/a¢1.h
>

63 
	~<›ís¶/bio.h
>

64 
	~<›ís¶/e_os2.h
>

66 
	~<›ís¶/symhacks.h
>

67 
	~<›ís¶/os¶_typ.h
>

69 #ifde‡ 
__˝lu•lus


73 #ifde‡
OPENSSL_SYS_WIN32


75 #unde‡
PKCS7_ISSUER_AND_SERIAL


76 #unde‡
PKCS7_SIGNER_INFO


86 
	spkcs7_issuî_™d_£rül_°


88 
X509_NAME
 *
issuî
;

89 
ASN1_INTEGER
 *
£rül
;

90 } 
	tPKCS7_ISSUER_AND_SERIAL
;

92 
	spkcs7_sig√r_öfo_°


94 
ASN1_INTEGER
 *
vîsi⁄
;

95 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

96 
X509_ALGOR
 *
dige°_Æg
;

97 
STACK_OF
(
X509_ATTRIBUTE
Ë*
auth_©å
;

98 
X509_ALGOR
 *
dige°_íc_Æg
;

99 
ASN1_OCTET_STRING
 *
íc_dige°
;

100 
STACK_OF
(
X509_ATTRIBUTE
Ë*
u«uth_©å
;

103 
EVP_PKEY
 *
pkey
;

104 } 
	tPKCS7_SIGNER_INFO
;

106 
DECLARE_STACK_OF
(
PKCS7_SIGNER_INFO
)

107 
DECLARE_ASN1_SET_OF
(
PKCS7_SIGNER_INFO
)

109 
	spkcs7_ªcù_öfo_°


111 
ASN1_INTEGER
 *
vîsi⁄
;

112 
PKCS7_ISSUER_AND_SERIAL
 *
issuî_™d_£rül
;

113 
X509_ALGOR
 *
key_íc_Æg‹
;

114 
ASN1_OCTET_STRING
 *
íc_key
;

115 
X509
 *
˚π
;

116 } 
	tPKCS7_RECIP_INFO
;

118 
DECLARE_STACK_OF
(
PKCS7_RECIP_INFO
)

119 
DECLARE_ASN1_SET_OF
(
PKCS7_RECIP_INFO
)

121 
	spkcs7_sig√d_°


123 
ASN1_INTEGER
 *
vîsi⁄
;

124 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

125 
STACK_OF
(
X509
Ë*
˚π
;

126 
STACK_OF
(
X509_CRL
Ë*
¸l
;

127 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

129 
pkcs7_°
 *
c⁄ã¡s
;

130 } 
	tPKCS7_SIGNED
;

134 
	spkcs7_íc_c⁄ã¡_°


136 
ASN1_OBJECT
 *
c⁄ã¡_ty≥
;

137 
X509_ALGOR
 *
Æg‹ôhm
;

138 
ASN1_OCTET_STRING
 *
íc_d©a
;

139 c⁄° 
EVP_CIPHER
 *
cùhî
;

140 } 
	tPKCS7_ENC_CONTENT
;

142 
	spkcs7_ívñ›ed_°


144 
ASN1_INTEGER
 *
vîsi⁄
;

145 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

146 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

147 } 
	tPKCS7_ENVELOPE
;

149 
	spkcs7_sig√d™dívñ›ed_°


151 
ASN1_INTEGER
 *
vîsi⁄
;

152 
STACK_OF
(
X509_ALGOR
Ë*
md_Ægs
;

153 
STACK_OF
(
X509
Ë*
˚π
;

154 
STACK_OF
(
X509_CRL
Ë*
¸l
;

155 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
sig√r_öfo
;

157 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

158 
STACK_OF
(
PKCS7_RECIP_INFO
Ë*
ªcùõ¡öfo
;

159 } 
	tPKCS7_SIGN_ENVELOPE
;

161 
	spkcs7_dige°_°


163 
ASN1_INTEGER
 *
vîsi⁄
;

164 
X509_ALGOR
 *
md
;

165 
pkcs7_°
 *
c⁄ã¡s
;

166 
ASN1_OCTET_STRING
 *
dige°
;

167 } 
	tPKCS7_DIGEST
;

169 
	spkcs7_í¸y±ed_°


171 
ASN1_INTEGER
 *
vîsi⁄
;

172 
PKCS7_ENC_CONTENT
 *
íc_d©a
;

173 } 
	tPKCS7_ENCRYPT
;

175 
	spkcs7_°


179 *
a¢1
;

180 
Àngth
;

182 
	#PKCS7_S_HEADER
 0

	)

183 
	#PKCS7_S_BODY
 1

	)

184 
	#PKCS7_S_TAIL
 2

	)

185 
°©e
;

187 
dëached
;

189 
ASN1_OBJECT
 *
ty≥
;

194 *
±r
;

197 
ASN1_OCTET_STRING
 *
d©a
;

200 
PKCS7_SIGNED
 *
sign
;

203 
PKCS7_ENVELOPE
 *
ívñ›ed
;

206 
PKCS7_SIGN_ENVELOPE
 *
sig√d_™d_ívñ›ed
;

209 
PKCS7_DIGEST
 *
dige°
;

212 
PKCS7_ENCRYPT
 *
í¸y±ed
;

215 
ASN1_TYPE
 *
Ÿhî
;

216 } 
d
;

217 } 
	tPKCS7
;

219 
DECLARE_STACK_OF
(
PKCS7
)

220 
DECLARE_ASN1_SET_OF
(
PKCS7
)

221 
DECLARE_PKCS12_STACK_OF
(
PKCS7
)

223 
	#PKCS7_OP_SET_DETACHED_SIGNATURE
 1

	)

224 
	#PKCS7_OP_GET_DETACHED_SIGNATURE
 2

	)

226 
	#PKCS7_gë_sig√d_©åibuãs
(
si
Ë((si)->
auth_©å
)

	)

227 
	#PKCS7_gë_©åibuãs
(
si
Ë((si)->
u«uth_©å
)

	)

229 
	#PKCS7_ty≥_is_sig√d
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_sig√d
)

	)

230 
	#PKCS7_ty≥_is_í¸y±ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

231 
	#PKCS7_ty≥_is_ívñ›ed
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_ívñ›ed
)

	)

232 
	#PKCS7_ty≥_is_sig√dAndEnvñ›ed
(
a
) \

233 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_sig√dAndEnvñ›ed
)

	)

234 
	#PKCS7_ty≥_is_d©a
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_d©a
)

	)

235 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

236 
	#PKCS7_ty≥_is_í¸y±ed
(
a
) \

237 (
	`OBJ_obj2nid
((
a
)->
ty≥
Ë=
NID_pkcs7_í¸y±ed
)

	)

239 
	#PKCS7_ty≥_is_dige°
(
a
Ë(
	`OBJ_obj2nid
(◊)->
ty≥
Ë=
NID_pkcs7_dige°
)

	)

241 
	#PKCS7_£t_dëached
(
p
,
v
) \

242 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_SET_DETACHED_SIGNATURE
,
v
,
NULL
)

	)

243 
	#PKCS7_gë_dëached
(
p
) \

244 
	`PKCS7_˘æ
(
p
,
PKCS7_OP_GET_DETACHED_SIGNATURE
,0,
NULL
)

	)

246 
	#PKCS7_is_dëached
(
p7
Ë(
	`PKCS7_ty≥_is_sig√d
’7Ë&& 
	`PKCS7_gë_dëached
’7))

	)

250 
	#PKCS7_TEXT
 0x1

	)

251 
	#PKCS7_NOCERTS
 0x2

	)

252 
	#PKCS7_NOSIGS
 0x4

	)

253 
	#PKCS7_NOCHAIN
 0x8

	)

254 
	#PKCS7_NOINTERN
 0x10

	)

255 
	#PKCS7_NOVERIFY
 0x20

	)

256 
	#PKCS7_DETACHED
 0x40

	)

257 
	#PKCS7_BINARY
 0x80

	)

258 
	#PKCS7_NOATTR
 0x100

	)

259 
	#PKCS7_NOSMIMECAP
 0x200

	)

260 
	#PKCS7_NOOLDMIMETYPE
 0x400

	)

261 
	#PKCS7_CRLFEOL
 0x800

	)

262 
	#PKCS7_STREAM
 0x1000

	)

263 
	#PKCS7_NOCRL
 0x2000

	)

264 
	#PKCS7_PARTIAL
 0x4000

	)

265 
	#PKCS7_REUSE_DIGEST
 0x8000

	)

269 
	#SMIME_TEXT
 
PKCS7_TEXT


	)

270 
	#SMIME_NOCERTS
 
PKCS7_NOCERTS


	)

271 
	#SMIME_NOSIGS
 
PKCS7_NOSIGS


	)

272 
	#SMIME_NOCHAIN
 
PKCS7_NOCHAIN


	)

273 
	#SMIME_NOINTERN
 
PKCS7_NOINTERN


	)

274 
	#SMIME_NOVERIFY
 
PKCS7_NOVERIFY


	)

275 
	#SMIME_DETACHED
 
PKCS7_DETACHED


	)

276 
	#SMIME_BINARY
 
PKCS7_BINARY


	)

277 
	#SMIME_NOATTR
 
PKCS7_NOATTR


	)

279 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ISSUER_AND_SERIAL
)

281 
PKCS7_ISSUER_AND_SERIAL_dige°
(
PKCS7_ISSUER_AND_SERIAL
 *
d©a
,c⁄° 
EVP_MD
 *
ty≥
,

282 *
md
,*
Àn
);

283 #i‚de‡
OPENSSL_NO_FP_API


284 
PKCS7
 *
d2i_PKCS7_Â
(
FILE
 *
Â
,PKCS7 **
p7
);

285 
i2d_PKCS7_Â
(
FILE
 *
Â
,
PKCS7
 *
p7
);

287 
PKCS7
 *
PKCS7_dup
(PKCS7 *
p7
);

288 
PKCS7
 *
d2i_PKCS7_bio
(
BIO
 *
bp
,PKCS7 **
p7
);

289 
i2d_PKCS7_bio
(
BIO
 *
bp
,
PKCS7
 *
p7
);

290 
i2d_PKCS7_bio_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

291 
PEM_wrôe_bio_PKCS7_°ªam
(
BIO
 *
out
, 
PKCS7
 *
p7
, BIO *
ö
, 
Êags
);

293 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNER_INFO
)

294 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_RECIP_INFO
)

295 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGNED
)

296 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENC_CONTENT
)

297 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENVELOPE
)

298 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_SIGN_ENVELOPE
)

299 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_DIGEST
)

300 
DECLARE_ASN1_FUNCTIONS
(
PKCS7_ENCRYPT
)

301 
DECLARE_ASN1_FUNCTIONS
(
PKCS7
)

303 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_SIGN
)

304 
DECLARE_ASN1_ITEM
(
PKCS7_ATTR_VERIFY
)

306 
DECLARE_ASN1_NDEF_FUNCTION
(
PKCS7
)

307 
DECLARE_ASN1_PRINT_FUNCTION
(
PKCS7
)

309 
PKCS7_˘æ
(
PKCS7
 *
p7
, 
cmd
, 
œrg
, *
∑rg
);

311 
PKCS7_£t_ty≥
(
PKCS7
 *
p7
, 
ty≥
);

312 
PKCS7_£t0_ty≥_Ÿhî
(
PKCS7
 *
p7
, 
ty≥
, 
ASN1_TYPE
 *
Ÿhî
);

313 
PKCS7_£t_c⁄ã¡
(
PKCS7
 *
p7
, PKCS7 *
p7_d©a
);

314 
PKCS7_SIGNER_INFO_£t
(
PKCS7_SIGNER_INFO
 *
p7i
, 
X509
 *
x509
, 
EVP_PKEY
 *
pkey
,

315 c⁄° 
EVP_MD
 *
dg°
);

316 
PKCS7_SIGNER_INFO_sign
(
PKCS7_SIGNER_INFO
 *
si
);

317 
PKCS7_add_sig√r
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
p7i
);

318 
PKCS7_add_˚πifiˇã
(
PKCS7
 *
p7
, 
X509
 *
x509
);

319 
PKCS7_add_¸l
(
PKCS7
 *
p7
, 
X509_CRL
 *
x509
);

320 
PKCS7_c⁄ã¡_√w
(
PKCS7
 *
p7
, 
nid
);

321 
PKCS7_d©aVîify
(
X509_STORE
 *
˚π_°‹e
, 
X509_STORE_CTX
 *
˘x
,

322 
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

323 
PKCS7_sig«tuªVîify
(
BIO
 *
bio
, 
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
,

324 
X509
 *
x509
);

326 
BIO
 *
PKCS7_d©aInô
(
PKCS7
 *
p7
, BIO *
bio
);

327 
PKCS7_d©aFöÆ
(
PKCS7
 *
p7
, 
BIO
 *
bio
);

328 
BIO
 *
PKCS7_d©aDecode
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, BIO *
ö_bio
, 
X509
 *
p˚π
);

331 
PKCS7_SIGNER_INFO
 *
PKCS7_add_sig«tuª
(
PKCS7
 *
p7
, 
X509
 *
x509
,

332 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
dg°
);

333 
X509
 *
PKCS7_˚π_‰om_sig√r_öfo
(
PKCS7
 *
p7
, 
PKCS7_SIGNER_INFO
 *
si
);

334 
PKCS7_£t_dige°
(
PKCS7
 *
p7
, c⁄° 
EVP_MD
 *
md
);

335 
STACK_OF
(
PKCS7_SIGNER_INFO
Ë*
PKCS7_gë_sig√r_öfo
(
PKCS7
 *
p7
);

337 
PKCS7_RECIP_INFO
 *
PKCS7_add_ªcùõ¡
(
PKCS7
 *
p7
, 
X509
 *
x509
);

338 
PKCS7_SIGNER_INFO_gë0_Ægs
(
PKCS7_SIGNER_INFO
 *
si
, 
EVP_PKEY
 **
pk
,

339 
X509_ALGOR
 **
pdig
, X509_ALGOR **
psig
);

340 
PKCS7_RECIP_INFO_gë0_Æg
(
PKCS7_RECIP_INFO
 *
ri
, 
X509_ALGOR
 **
≥nc
);

341 
PKCS7_add_ªcùõ¡_öfo
(
PKCS7
 *
p7
, 
PKCS7_RECIP_INFO
 *
ri
);

342 
PKCS7_RECIP_INFO_£t
(
PKCS7_RECIP_INFO
 *
p7i
, 
X509
 *
x509
);

343 
PKCS7_£t_cùhî
(
PKCS7
 *
p7
, c⁄° 
EVP_CIPHER
 *
cùhî
);

344 
PKCS7_°ªam
(***
bound¨y
, 
PKCS7
 *
p7
);

346 
PKCS7_ISSUER_AND_SERIAL
 *
PKCS7_gë_issuî_™d_£rül
(
PKCS7
 *
p7
, 
idx
);

347 
ASN1_OCTET_STRING
 *
PKCS7_dige°_‰om_©åibuãs
(
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

348 
PKCS7_add_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
p7si
,
nid
,
ty≥
,

349 *
d©a
);

350 
PKCS7_add_©åibuã
 (
PKCS7_SIGNER_INFO
 *
p7si
, 
nid
, 
©πy≥
,

351 *
vÆue
);

352 
ASN1_TYPE
 *
PKCS7_gë_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

353 
ASN1_TYPE
 *
PKCS7_gë_sig√d_©åibuã
(
PKCS7_SIGNER_INFO
 *
si
, 
nid
);

354 
PKCS7_£t_sig√d_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,

355 
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

356 
PKCS7_£t_©åibuãs
(
PKCS7_SIGNER_INFO
 *
p7si
,
STACK_OF
(
X509_ATTRIBUTE
Ë*
sk
);

359 
PKCS7
 *
PKCS7_sign
(
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, 
STACK_OF
(X509Ë*
˚πs
,

360 
BIO
 *
d©a
, 
Êags
);

362 
PKCS7_SIGNER_INFO
 *
PKCS7_sign_add_sig√r
(
PKCS7
 *
p7
,

363 
X509
 *
sign˚π
, 
EVP_PKEY
 *
pkey
, c⁄° 
EVP_MD
 *
md
,

364 
Êags
);

366 
PKCS7_föÆ
(
PKCS7
 *
p7
, 
BIO
 *
d©a
, 
Êags
);

367 
PKCS7_vîify
(
PKCS7
 *
p7
, 
STACK_OF
(
X509
Ë*
˚πs
, 
X509_STORE
 *
°‹e
,

368 
BIO
 *
öd©a
, BIO *
out
, 
Êags
);

369 
STACK_OF
(
X509
Ë*
PKCS7_gë0_sig√rs
(
PKCS7
 *
p7
, STACK_OF(X509Ë*
˚πs
, 
Êags
);

370 
PKCS7
 *
PKCS7_í¸y±
(
STACK_OF
(
X509
Ë*
˚πs
, 
BIO
 *
ö
, c⁄° 
EVP_CIPHER
 *
cùhî
,

371 
Êags
);

372 
PKCS7_de¸y±
(
PKCS7
 *
p7
, 
EVP_PKEY
 *
pkey
, 
X509
 *
˚π
, 
BIO
 *
d©a
, 
Êags
);

374 
PKCS7_add_©åib_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
,

375 
STACK_OF
(
X509_ALGOR
Ë*
ˇp
);

376 
STACK_OF
(
X509_ALGOR
Ë*
PKCS7_gë_smimeˇp
(
PKCS7_SIGNER_INFO
 *
si
);

377 
PKCS7_sim∂e_smimeˇp
(
STACK_OF
(
X509_ALGOR
Ë*
sk
, 
nid
, 
¨g
);

379 
PKCS7_add_©åib_c⁄ã¡_ty≥
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_OBJECT
 *
coid
);

380 
PKCS7_add0_©åib_signög_time
(
PKCS7_SIGNER_INFO
 *
si
, 
ASN1_TIME
 *
t
);

381 
PKCS7_add1_©åib_dige°
(
PKCS7_SIGNER_INFO
 *
si
,

382 c⁄° *
md
, 
mdÀn
);

384 
SMIME_wrôe_PKCS7
(
BIO
 *
bio
, 
PKCS7
 *
p7
, BIO *
d©a
, 
Êags
);

385 
PKCS7
 *
SMIME_ªad_PKCS7
(
BIO
 *
bio
, BIO **
bc⁄t
);

387 
BIO
 *
BIO_√w_PKCS7
(BIO *
out
, 
PKCS7
 *
p7
);

394 
ERR_lﬂd_PKCS7_°rögs
();

399 
	#PKCS7_F_B64_READ_PKCS7
 120

	)

400 
	#PKCS7_F_B64_WRITE_PKCS7
 121

	)

401 
	#PKCS7_F_DO_PKCS7_SIGNED_ATTRIB
 136

	)

402 
	#PKCS7_F_I2D_PKCS7_BIO_STREAM
 140

	)

403 
	#PKCS7_F_PKCS7_ADD0_ATTRIB_SIGNING_TIME
 135

	)

404 
	#PKCS7_F_PKCS7_ADD_ATTRIB_SMIMECAP
 118

	)

405 
	#PKCS7_F_PKCS7_ADD_CERTIFICATE
 100

	)

406 
	#PKCS7_F_PKCS7_ADD_CRL
 101

	)

407 
	#PKCS7_F_PKCS7_ADD_RECIPIENT_INFO
 102

	)

408 
	#PKCS7_F_PKCS7_ADD_SIGNATURE
 131

	)

409 
	#PKCS7_F_PKCS7_ADD_SIGNER
 103

	)

410 
	#PKCS7_F_PKCS7_BIO_ADD_DIGEST
 125

	)

411 
	#PKCS7_F_PKCS7_COPY_EXISTING_DIGEST
 138

	)

412 
	#PKCS7_F_PKCS7_CTRL
 104

	)

413 
	#PKCS7_F_PKCS7_DATADECODE
 112

	)

414 
	#PKCS7_F_PKCS7_DATAFINAL
 128

	)

415 
	#PKCS7_F_PKCS7_DATAINIT
 105

	)

416 
	#PKCS7_F_PKCS7_DATASIGN
 106

	)

417 
	#PKCS7_F_PKCS7_DATAVERIFY
 107

	)

418 
	#PKCS7_F_PKCS7_DECRYPT
 114

	)

419 
	#PKCS7_F_PKCS7_DECRYPT_RINFO
 133

	)

420 
	#PKCS7_F_PKCS7_ENCODE_RINFO
 132

	)

421 
	#PKCS7_F_PKCS7_ENCRYPT
 115

	)

422 
	#PKCS7_F_PKCS7_FINAL
 134

	)

423 
	#PKCS7_F_PKCS7_FIND_DIGEST
 127

	)

424 
	#PKCS7_F_PKCS7_GET0_SIGNERS
 124

	)

425 
	#PKCS7_F_PKCS7_RECIP_INFO_SET
 130

	)

426 
	#PKCS7_F_PKCS7_SET_CIPHER
 108

	)

427 
	#PKCS7_F_PKCS7_SET_CONTENT
 109

	)

428 
	#PKCS7_F_PKCS7_SET_DIGEST
 126

	)

429 
	#PKCS7_F_PKCS7_SET_TYPE
 110

	)

430 
	#PKCS7_F_PKCS7_SIGN
 116

	)

431 
	#PKCS7_F_PKCS7_SIGNATUREVERIFY
 113

	)

432 
	#PKCS7_F_PKCS7_SIGNER_INFO_SET
 129

	)

433 
	#PKCS7_F_PKCS7_SIGNER_INFO_SIGN
 139

	)

434 
	#PKCS7_F_PKCS7_SIGN_ADD_SIGNER
 137

	)

435 
	#PKCS7_F_PKCS7_SIMPLE_SMIMECAP
 119

	)

436 
	#PKCS7_F_PKCS7_VERIFY
 117

	)

437 
	#PKCS7_F_SMIME_READ_PKCS7
 122

	)

438 
	#PKCS7_F_SMIME_TEXT
 123

	)

441 
	#PKCS7_R_CERTIFICATE_VERIFY_ERROR
 117

	)

442 
	#PKCS7_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER
 144

	)

443 
	#PKCS7_R_CIPHER_NOT_INITIALIZED
 116

	)

444 
	#PKCS7_R_CONTENT_AND_DATA_PRESENT
 118

	)

445 
	#PKCS7_R_CTRL_ERROR
 152

	)

446 
	#PKCS7_R_DECODE_ERROR
 130

	)

447 
	#PKCS7_R_DECRYPTED_KEY_IS_WRONG_LENGTH
 100

	)

448 
	#PKCS7_R_DECRYPT_ERROR
 119

	)

449 
	#PKCS7_R_DIGEST_FAILURE
 101

	)

450 
	#PKCS7_R_ENCRYPTION_CTRL_FAILURE
 149

	)

451 
	#PKCS7_R_ENCRYPTION_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 150

	)

452 
	#PKCS7_R_ERROR_ADDING_RECIPIENT
 120

	)

453 
	#PKCS7_R_ERROR_SETTING_CIPHER
 121

	)

454 
	#PKCS7_R_INVALID_MIME_TYPE
 131

	)

455 
	#PKCS7_R_INVALID_NULL_POINTER
 143

	)

456 
	#PKCS7_R_MIME_NO_CONTENT_TYPE
 132

	)

457 
	#PKCS7_R_MIME_PARSE_ERROR
 133

	)

458 
	#PKCS7_R_MIME_SIG_PARSE_ERROR
 134

	)

459 
	#PKCS7_R_MISSING_CERIPEND_INFO
 103

	)

460 
	#PKCS7_R_NO_CONTENT
 122

	)

461 
	#PKCS7_R_NO_CONTENT_TYPE
 135

	)

462 
	#PKCS7_R_NO_DEFAULT_DIGEST
 151

	)

463 
	#PKCS7_R_NO_MATCHING_DIGEST_TYPE_FOUND
 154

	)

464 
	#PKCS7_R_NO_MULTIPART_BODY_FAILURE
 136

	)

465 
	#PKCS7_R_NO_MULTIPART_BOUNDARY
 137

	)

466 
	#PKCS7_R_NO_RECIPIENT_MATCHES_CERTIFICATE
 115

	)

467 
	#PKCS7_R_NO_RECIPIENT_MATCHES_KEY
 146

	)

468 
	#PKCS7_R_NO_SIGNATURES_ON_DATA
 123

	)

469 
	#PKCS7_R_NO_SIGNERS
 142

	)

470 
	#PKCS7_R_NO_SIG_CONTENT_TYPE
 138

	)

471 
	#PKCS7_R_OPERATION_NOT_SUPPORTED_ON_THIS_TYPE
 104

	)

472 
	#PKCS7_R_PKCS7_ADD_SIGNATURE_ERROR
 124

	)

473 
	#PKCS7_R_PKCS7_ADD_SIGNER_ERROR
 153

	)

474 
	#PKCS7_R_PKCS7_DATAFINAL
 126

	)

475 
	#PKCS7_R_PKCS7_DATAFINAL_ERROR
 125

	)

476 
	#PKCS7_R_PKCS7_DATASIGN
 145

	)

477 
	#PKCS7_R_PKCS7_PARSE_ERROR
 139

	)

478 
	#PKCS7_R_PKCS7_SIG_PARSE_ERROR
 140

	)

479 
	#PKCS7_R_PRIVATE_KEY_DOES_NOT_MATCH_CERTIFICATE
 127

	)

480 
	#PKCS7_R_SIGNATURE_FAILURE
 105

	)

481 
	#PKCS7_R_SIGNER_CERTIFICATE_NOT_FOUND
 128

	)

482 
	#PKCS7_R_SIGNING_CTRL_FAILURE
 147

	)

483 
	#PKCS7_R_SIGNING_NOT_SUPPORTED_FOR_THIS_KEY_TYPE
 148

	)

484 
	#PKCS7_R_SIG_INVALID_MIME_TYPE
 141

	)

485 
	#PKCS7_R_SMIME_TEXT_ERROR
 129

	)

486 
	#PKCS7_R_UNABLE_TO_FIND_CERTIFICATE
 106

	)

487 
	#PKCS7_R_UNABLE_TO_FIND_MEM_BIO
 107

	)

488 
	#PKCS7_R_UNABLE_TO_FIND_MESSAGE_DIGEST
 108

	)

489 
	#PKCS7_R_UNKNOWN_DIGEST_TYPE
 109

	)

490 
	#PKCS7_R_UNKNOWN_OPERATION
 110

	)

491 
	#PKCS7_R_UNSUPPORTED_CIPHER_TYPE
 111

	)

492 
	#PKCS7_R_UNSUPPORTED_CONTENT_TYPE
 112

	)

493 
	#PKCS7_R_WRONG_CONTENT_TYPE
 113

	)

494 
	#PKCS7_R_WRONG_PKCS7_TYPE
 114

	)

496 #ifde‡ 
__˝lu•lus


	@/usr/include/openssl/pqueue.h

60 #i‚de‡
HEADER_PQUEUE_H


61 
	#HEADER_PQUEUE_H


	)

63 
	~<°dio.h
>

64 
	~<°dlib.h
>

65 
	~<°rög.h
>

67 
_pqueue
 *
	tpqueue
;

69 
	s_pôem


71 
	m¥i‹ôy
[8];

72 *
	md©a
;

73 
_pôem
 *
	m√xt
;

74 } 
	tpôem
;

76 
_pôem
 *
	tpôî©‹
;

78 
pôem
 *
pôem_√w
(*
¥io64be
, *
d©a
);

79 
pôem_‰ì
(
pôem
 *
ôem
);

81 
pqueue
 
pqueue_√w
();

82 
pqueue_‰ì
(
pqueue
 
pq
);

84 
pôem
 *
pqueue_ö£π
(
pqueue
 
pq
,Öôem *
ôem
);

85 
pôem
 *
pqueue_≥ek
(
pqueue
 
pq
);

86 
pôem
 *
pqueue_p›
(
pqueue
 
pq
);

87 
pôem
 *
pqueue_föd
(
pqueue
 
pq
, *
¥io64be
);

88 
pôem
 *
pqueue_ôî©‹
(
pqueue
 
pq
);

89 
pôem
 *
pqueue_√xt
(
pôî©‹
 *
ôî
);

91 
pqueue_¥öt
(
pqueue
 
pq
);

92 
pqueue_size
(
pqueue
 
pq
);

	@/usr/include/openssl/x509_vfy.h

59 #i‚de‡
HEADER_X509_H


60 
	~<›ís¶/x509.h
>

65 #i‚de‡
HEADER_X509_VFY_H


66 
	#HEADER_X509_VFY_H


	)

68 
	~<›ís¶/›ís¶c⁄f.h
>

69 #i‚de‡
OPENSSL_NO_LHASH


70 
	~<›ís¶/lhash.h
>

72 
	~<›ís¶/bio.h
>

73 
	~<›ís¶/¸y±o.h
>

74 
	~<›ís¶/symhacks.h
>

76 #ifde‡ 
__˝lu•lus


82 
	sx509_hash_dú_°


84 
num_dús
;

85 **
dús
;

86 *
dús_ty≥
;

87 
num_dús_Ælo˚d
;

88 } 
	tX509_HASH_DIR_CTX
;

91 
	sx509_fûe_°


93 
	gnum_∑ths
;

94 
	gnum_Ælo˚d
;

95 **
	g∑ths
;

96 *
	g∑th_ty≥
;

97 } 
	tX509_CERT_FILE_CTX
;

117 
	#X509_LU_RETRY
 -1

	)

118 
	#X509_LU_FAIL
 0

	)

119 
	#X509_LU_X509
 1

	)

120 
	#X509_LU_CRL
 2

	)

121 
	#X509_LU_PKEY
 3

	)

123 
	sx509_obje˘_°


126 
	gty≥
;

128 *
	g±r
;

129 
X509
 *
	gx509
;

130 
X509_CRL
 *
	g¸l
;

131 
EVP_PKEY
 *
	gpkey
;

132 } 
	gd©a
;

133 } 
	tX509_OBJECT
;

135 
x509_lookup_°
 
	tX509_LOOKUP
;

137 
DECLARE_STACK_OF
(
X509_LOOKUP
)

138 
DECLARE_STACK_OF
(
X509_OBJECT
)

141 
	sx509_lookup_mëhod_°


143 c⁄° *
	g«me
;

144 (*
	g√w_ôem
)(
X509_LOOKUP
 *
	g˘x
);

145 (*
	g‰ì
)(
X509_LOOKUP
 *
	g˘x
);

146 (*
	göô
)(
X509_LOOKUP
 *
	g˘x
);

147 (*
	gshutdown
)(
X509_LOOKUP
 *
	g˘x
);

148 (*
	g˘æ
)(
X509_LOOKUP
 *
	g˘x
,
	gcmd
,c⁄° *
	g¨gc
,
	g¨gl
,

149 **
	gªt
);

150 (*
	ggë_by_subje˘
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

151 
X509_OBJECT
 *
	gªt
);

152 (*
	ggë_by_issuî_£rül
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,
X509_NAME
 *
	g«me
,

153 
ASN1_INTEGER
 *
	g£rül
,
X509_OBJECT
 *
	gªt
);

154 (*
	ggë_by_fögî¥öt
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,

155 *
	gbyãs
,
	gÀn
,

156 
X509_OBJECT
 *
	gªt
);

157 (*
	ggë_by_Æüs
)(
X509_LOOKUP
 *
	g˘x
,
	gty≥
,*
	g°r
,
	gÀn
,

158 
X509_OBJECT
 *
	gªt
);

159 } 
	tX509_LOOKUP_METHOD
;

166 
	sX509_VERIFY_PARAM_°


168 *
	g«me
;

169 
time_t
 
	gcheck_time
;

170 
	göh_Êags
;

171 
	gÊags
;

172 
	gpuΩo£
;

173 
	gåu°
;

174 
	gdïth
;

175 
STACK_OF
(
ASN1_OBJECT
Ë*
	gpﬁicõs
;

176 } 
	tX509_VERIFY_PARAM
;

178 
DECLARE_STACK_OF
(
X509_VERIFY_PARAM
)

183 
	sx509_°‹e_°


186 
	gˇche
;

187 
STACK_OF
(
X509_OBJECT
Ë*
	gobjs
;

190 
STACK_OF
(
X509_LOOKUP
Ë*
	ggë_˚π_mëhods
;

192 
X509_VERIFY_PARAM
 *
	g∑øm
;

195 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

196 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

197 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

198 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

199 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

200 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

201 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

202 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

203 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

204 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

205 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

207 
CRYPTO_EX_DATA
 
	gex_d©a
;

208 
	gª„ªn˚s
;

211 
X509_STORE_£t_dïth
(
X509_STORE
 *
°‹e
, 
dïth
);

213 
	#X509_STORE_£t_vîify_cb_func
(
˘x
,
func
Ë((˘x)->
vîify_cb
=(func))

	)

214 
	#X509_STORE_£t_vîify_func
(
˘x
,
func
Ë((˘x)->
vîify
=(func))

	)

217 
	sx509_lookup_°


219 
	göô
;

220 
	gskù
;

221 
X509_LOOKUP_METHOD
 *
	gmëhod
;

222 *
	gmëhod_d©a
;

224 
X509_STORE
 *
	g°‹e_˘x
;

230 
	sx509_°‹e_˘x_°


232 
X509_STORE
 *
	g˘x
;

233 
	gcuºít_mëhod
;

236 
X509
 *
	g˚π
;

237 
STACK_OF
(
X509
Ë*
	gu¡ru°ed
;

238 
STACK_OF
(
X509_CRL
Ë*
	g¸ls
;

240 
X509_VERIFY_PARAM
 *
	g∑øm
;

241 *
	gŸhî_˘x
;

244 (*
	gvîify
)(
X509_STORE_CTX
 *
	g˘x
);

245 (*
	gvîify_cb
)(
	gok
,
X509_STORE_CTX
 *
	g˘x
);

246 (*
	ggë_issuî
)(
X509
 **
	gissuî
, 
X509_STORE_CTX
 *
	g˘x
, X509 *
	gx
);

247 (*
	gcheck_issued
)(
X509_STORE_CTX
 *
	g˘x
, 
X509
 *
	gx
, X509 *
	gissuî
);

248 (*
	gcheck_ªvoˇti⁄
)(
X509_STORE_CTX
 *
	g˘x
);

249 (*
	ggë_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 **
	g¸l
, 
X509
 *
	gx
);

250 (*
	gcheck_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
);

251 (*
	g˚π_¸l
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_CRL
 *
	g¸l
, 
X509
 *
	gx
);

252 (*
	gcheck_pﬁicy
)(
X509_STORE_CTX
 *
	g˘x
);

253 
STACK_OF
(
X509
Ë* (*
	glookup_˚πs
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

254 
STACK_OF
(
X509_CRL
Ë* (*
	glookup_¸ls
)(
X509_STORE_CTX
 *
	g˘x
, 
X509_NAME
 *
	gnm
);

255 (*
	g˛ónup
)(
X509_STORE_CTX
 *
	g˘x
);

258 
	gvÆid
;

259 
	gœ°_u¡ru°ed
;

260 
STACK_OF
(
X509
Ë*
	gchaö
;

261 
X509_POLICY_TREE
 *
	gåì
;

263 
	gex∂icô_pﬁicy
;

266 
	gîr‹_dïth
;

267 
	gîr‹
;

268 
X509
 *
	gcuºít_˚π
;

269 
X509
 *
	gcuºít_issuî
;

270 
X509_CRL
 *
	gcuºít_¸l
;

272 
	gcuºít_¸l_sc‹e
;

273 
	gcuºít_ªas⁄s
;

275 
X509_STORE_CTX
 *
	g∑ª¡
;

277 
CRYPTO_EX_DATA
 
	gex_d©a
;

280 
X509_STORE_CTX_£t_dïth
(
X509_STORE_CTX
 *
˘x
, 
dïth
);

282 
	#X509_STORE_CTX_£t_≠p_d©a
(
˘x
,
d©a
) \

283 
	`X509_STORE_CTX_£t_ex_d©a
(
˘x
,0,
d©a
)

	)

284 
	#X509_STORE_CTX_gë_≠p_d©a
(
˘x
) \

285 
	`X509_STORE_CTX_gë_ex_d©a
(
˘x
,0)

	)

287 
	#X509_L_FILE_LOAD
 1

	)

288 
	#X509_L_ADD_DIR
 2

	)

290 
	#X509_LOOKUP_lﬂd_fûe
(
x
,
«me
,
ty≥
) \

291 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_FILE_LOAD
,(
«me
),()(
ty≥
),
NULL
)

	)

293 
	#X509_LOOKUP_add_dú
(
x
,
«me
,
ty≥
) \

294 
	`X509_LOOKUP_˘æ
((
x
),
X509_L_ADD_DIR
,(
«me
),()(
ty≥
),
NULL
)

	)

296 
	#X509_V_OK
 0

	)

299 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT
 2

	)

300 
	#X509_V_ERR_UNABLE_TO_GET_CRL
 3

	)

301 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE
 4

	)

302 
	#X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE
 5

	)

303 
	#X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY
 6

	)

304 
	#X509_V_ERR_CERT_SIGNATURE_FAILURE
 7

	)

305 
	#X509_V_ERR_CRL_SIGNATURE_FAILURE
 8

	)

306 
	#X509_V_ERR_CERT_NOT_YET_VALID
 9

	)

307 
	#X509_V_ERR_CERT_HAS_EXPIRED
 10

	)

308 
	#X509_V_ERR_CRL_NOT_YET_VALID
 11

	)

309 
	#X509_V_ERR_CRL_HAS_EXPIRED
 12

	)

310 
	#X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD
 13

	)

311 
	#X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD
 14

	)

312 
	#X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD
 15

	)

313 
	#X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD
 16

	)

314 
	#X509_V_ERR_OUT_OF_MEM
 17

	)

315 
	#X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT
 18

	)

316 
	#X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN
 19

	)

317 
	#X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY
 20

	)

318 
	#X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE
 21

	)

319 
	#X509_V_ERR_CERT_CHAIN_TOO_LONG
 22

	)

320 
	#X509_V_ERR_CERT_REVOKED
 23

	)

321 
	#X509_V_ERR_INVALID_CA
 24

	)

322 
	#X509_V_ERR_PATH_LENGTH_EXCEEDED
 25

	)

323 
	#X509_V_ERR_INVALID_PURPOSE
 26

	)

324 
	#X509_V_ERR_CERT_UNTRUSTED
 27

	)

325 
	#X509_V_ERR_CERT_REJECTED
 28

	)

327 
	#X509_V_ERR_SUBJECT_ISSUER_MISMATCH
 29

	)

328 
	#X509_V_ERR_AKID_SKID_MISMATCH
 30

	)

329 
	#X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH
 31

	)

330 
	#X509_V_ERR_KEYUSAGE_NO_CERTSIGN
 32

	)

332 
	#X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER
 33

	)

333 
	#X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION
 34

	)

334 
	#X509_V_ERR_KEYUSAGE_NO_CRL_SIGN
 35

	)

335 
	#X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION
 36

	)

336 
	#X509_V_ERR_INVALID_NON_CA
 37

	)

337 
	#X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED
 38

	)

338 
	#X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE
 39

	)

339 
	#X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED
 40

	)

341 
	#X509_V_ERR_INVALID_EXTENSION
 41

	)

342 
	#X509_V_ERR_INVALID_POLICY_EXTENSION
 42

	)

343 
	#X509_V_ERR_NO_EXPLICIT_POLICY
 43

	)

344 
	#X509_V_ERR_DIFFERENT_CRL_SCOPE
 44

	)

345 
	#X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE
 45

	)

347 
	#X509_V_ERR_UNNESTED_RESOURCE
 46

	)

349 
	#X509_V_ERR_PERMITTED_VIOLATION
 47

	)

350 
	#X509_V_ERR_EXCLUDED_VIOLATION
 48

	)

351 
	#X509_V_ERR_SUBTREE_MINMAX
 49

	)

352 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE
 51

	)

353 
	#X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX
 52

	)

354 
	#X509_V_ERR_UNSUPPORTED_NAME_SYNTAX
 53

	)

355 
	#X509_V_ERR_CRL_PATH_VALIDATION_ERROR
 54

	)

358 
	#X509_V_ERR_APPLICATION_VERIFICATION
 50

	)

363 
	#X509_V_FLAG_CB_ISSUER_CHECK
 0x1

	)

365 
	#X509_V_FLAG_USE_CHECK_TIME
 0x2

	)

367 
	#X509_V_FLAG_CRL_CHECK
 0x4

	)

369 
	#X509_V_FLAG_CRL_CHECK_ALL
 0x8

	)

371 
	#X509_V_FLAG_IGNORE_CRITICAL
 0x10

	)

373 
	#X509_V_FLAG_X509_STRICT
 0x20

	)

375 
	#X509_V_FLAG_ALLOW_PROXY_CERTS
 0x40

	)

377 
	#X509_V_FLAG_POLICY_CHECK
 0x80

	)

379 
	#X509_V_FLAG_EXPLICIT_POLICY
 0x100

	)

381 
	#X509_V_FLAG_INHIBIT_ANY
 0x200

	)

383 
	#X509_V_FLAG_INHIBIT_MAP
 0x400

	)

385 
	#X509_V_FLAG_NOTIFY_POLICY
 0x800

	)

387 
	#X509_V_FLAG_EXTENDED_CRL_SUPPORT
 0x1000

	)

389 
	#X509_V_FLAG_USE_DELTAS
 0x2000

	)

391 
	#X509_V_FLAG_CHECK_SS_SIGNATURE
 0x4000

	)

397 
	#X509_V_FLAG_NO_ALT_CHAINS
 0x100000

	)

399 
	#X509_VP_FLAG_DEFAULT
 0x1

	)

400 
	#X509_VP_FLAG_OVERWRITE
 0x2

	)

401 
	#X509_VP_FLAG_RESET_FLAGS
 0x4

	)

402 
	#X509_VP_FLAG_LOCKED
 0x8

	)

403 
	#X509_VP_FLAG_ONCE
 0x10

	)

406 
	#X509_V_FLAG_POLICY_MASK
 (
X509_V_FLAG_POLICY_CHECK
 \

407 | 
X509_V_FLAG_EXPLICIT_POLICY
 \

408 | 
X509_V_FLAG_INHIBIT_ANY
 \

409 | 
X509_V_FLAG_INHIBIT_MAP
)

	)

411 
X509_OBJECT_idx_by_subje˘
(
STACK_OF
(
X509_OBJECT
Ë*
h
, 
ty≥
,

412 
X509_NAME
 *
«me
);

413 
X509_OBJECT
 *
X509_OBJECT_ªåõve_by_subje˘
(
STACK_OF
(X509_OBJECTË*
h
,
ty≥
,
X509_NAME
 *
«me
);

414 
X509_OBJECT
 *
X509_OBJECT_ªåõve_m©ch
(
STACK_OF
(X509_OBJECTË*
h
, X509_OBJECT *
x
);

415 
X509_OBJECT_up_ªf_cou¡
(
X509_OBJECT
 *
a
);

416 
X509_OBJECT_‰ì_c⁄ã¡s
(
X509_OBJECT
 *
a
);

417 
X509_STORE
 *
X509_STORE_√w
();

418 
X509_STORE_‰ì
(
X509_STORE
 *
v
);

420 
STACK_OF
(
X509
)* 
X509_STORE_gë1_˚πs
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

421 
STACK_OF
(
X509_CRL
)* 
X509_STORE_gë1_¸ls
(
X509_STORE_CTX
 *
°
, 
X509_NAME
 *
nm
);

422 
X509_STORE_£t_Êags
(
X509_STORE
 *
˘x
, 
Êags
);

423 
X509_STORE_£t_puΩo£
(
X509_STORE
 *
˘x
, 
puΩo£
);

424 
X509_STORE_£t_åu°
(
X509_STORE
 *
˘x
, 
åu°
);

425 
X509_STORE_£t1_∑øm
(
X509_STORE
 *
˘x
, 
X509_VERIFY_PARAM
 *
pm
);

427 
X509_STORE_£t_vîify_cb
(
X509_STORE
 *
˘x
,

428 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

430 
X509_STORE_CTX
 *
X509_STORE_CTX_√w
();

432 
X509_STORE_CTX_gë1_issuî
(
X509
 **
issuî
, 
X509_STORE_CTX
 *
˘x
, X509 *
x
);

434 
X509_STORE_CTX_‰ì
(
X509_STORE_CTX
 *
˘x
);

435 
X509_STORE_CTX_öô
(
X509_STORE_CTX
 *
˘x
, 
X509_STORE
 *
°‹e
,

436 
X509
 *
x509
, 
STACK_OF
(X509Ë*
chaö
);

437 
X509_STORE_CTX_åu°ed_°ack
(
X509_STORE_CTX
 *
˘x
, 
STACK_OF
(
X509
Ë*
sk
);

438 
X509_STORE_CTX_˛ónup
(
X509_STORE_CTX
 *
˘x
);

440 
X509_LOOKUP
 *
X509_STORE_add_lookup
(
X509_STORE
 *
v
, 
X509_LOOKUP_METHOD
 *
m
);

442 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_hash_dú
();

443 
X509_LOOKUP_METHOD
 *
X509_LOOKUP_fûe
();

445 
X509_STORE_add_˚π
(
X509_STORE
 *
˘x
, 
X509
 *
x
);

446 
X509_STORE_add_¸l
(
X509_STORE
 *
˘x
, 
X509_CRL
 *
x
);

448 
X509_STORE_gë_by_subje˘
(
X509_STORE_CTX
 *
vs
,
ty≥
,
X509_NAME
 *
«me
,

449 
X509_OBJECT
 *
ªt
);

451 
X509_LOOKUP_˘æ
(
X509_LOOKUP
 *
˘x
, 
cmd
, c⁄° *
¨gc
,

452 
¨gl
, **
ªt
);

454 #i‚de‡
OPENSSL_NO_STDIO


455 
X509_lﬂd_˚π_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

456 
X509_lﬂd_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

457 
X509_lﬂd_˚π_¸l_fûe
(
X509_LOOKUP
 *
˘x
, c⁄° *
fûe
, 
ty≥
);

461 
X509_LOOKUP
 *
X509_LOOKUP_√w
(
X509_LOOKUP_METHOD
 *
mëhod
);

462 
X509_LOOKUP_‰ì
(
X509_LOOKUP
 *
˘x
);

463 
X509_LOOKUP_öô
(
X509_LOOKUP
 *
˘x
);

464 
X509_LOOKUP_by_subje˘
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

465 
X509_OBJECT
 *
ªt
);

466 
X509_LOOKUP_by_issuî_£rül
(
X509_LOOKUP
 *
˘x
, 
ty≥
, 
X509_NAME
 *
«me
,

467 
ASN1_INTEGER
 *
£rül
, 
X509_OBJECT
 *
ªt
);

468 
X509_LOOKUP_by_fögî¥öt
(
X509_LOOKUP
 *
˘x
, 
ty≥
,

469 *
byãs
, 
Àn
, 
X509_OBJECT
 *
ªt
);

470 
X509_LOOKUP_by_Æüs
(
X509_LOOKUP
 *
˘x
, 
ty≥
, *
°r
,

471 
Àn
, 
X509_OBJECT
 *
ªt
);

472 
X509_LOOKUP_shutdown
(
X509_LOOKUP
 *
˘x
);

474 #i‚de‡
OPENSSL_NO_STDIO


475 
X509_STORE_lﬂd_loˇti⁄s
 (
X509_STORE
 *
˘x
,

476 c⁄° *
fûe
, c⁄° *
dú
);

477 
X509_STORE_£t_deÁu…_∑ths
(
X509_STORE
 *
˘x
);

480 
X509_STORE_CTX_gë_ex_√w_ödex
(
¨gl
, *
¨gp
, 
CRYPTO_EX_√w
 *
√w_func
,

481 
CRYPTO_EX_dup
 *
dup_func
, 
CRYPTO_EX_‰ì
 *
‰ì_func
);

482 
X509_STORE_CTX_£t_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
,*
d©a
);

483 * 
X509_STORE_CTX_gë_ex_d©a
(
X509_STORE_CTX
 *
˘x
,
idx
);

484 
X509_STORE_CTX_gë_îr‹
(
X509_STORE_CTX
 *
˘x
);

485 
X509_STORE_CTX_£t_îr‹
(
X509_STORE_CTX
 *
˘x
,
s
);

486 
X509_STORE_CTX_gë_îr‹_dïth
(
X509_STORE_CTX
 *
˘x
);

487 
X509
 * 
X509_STORE_CTX_gë_cuºít_˚π
(
X509_STORE_CTX
 *
˘x
);

488 
X509
 *
X509_STORE_CTX_gë0_cuºít_issuî
(
X509_STORE_CTX
 *
˘x
);

489 
X509_CRL
 *
X509_STORE_CTX_gë0_cuºít_¸l
(
X509_STORE_CTX
 *
˘x
);

490 
X509_STORE_CTX
 *
X509_STORE_CTX_gë0_∑ª¡_˘x
(X509_STORE_CTX *
˘x
);

491 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë_chaö
(
X509_STORE_CTX
 *
˘x
);

492 
STACK_OF
(
X509
Ë*
X509_STORE_CTX_gë1_chaö
(
X509_STORE_CTX
 *
˘x
);

493 
X509_STORE_CTX_£t_˚π
(
X509_STORE_CTX
 *
c
,
X509
 *
x
);

494 
X509_STORE_CTX_£t_chaö
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509
Ë*
sk
);

495 
X509_STORE_CTX_£t0_¸ls
(
X509_STORE_CTX
 *
c
,
STACK_OF
(
X509_CRL
Ë*
sk
);

496 
X509_STORE_CTX_£t_puΩo£
(
X509_STORE_CTX
 *
˘x
, 
puΩo£
);

497 
X509_STORE_CTX_£t_åu°
(
X509_STORE_CTX
 *
˘x
, 
åu°
);

498 
X509_STORE_CTX_puΩo£_öhîô
(
X509_STORE_CTX
 *
˘x
, 
def_puΩo£
,

499 
puΩo£
, 
åu°
);

500 
X509_STORE_CTX_£t_Êags
(
X509_STORE_CTX
 *
˘x
, 
Êags
);

501 
X509_STORE_CTX_£t_time
(
X509_STORE_CTX
 *
˘x
, 
Êags
,

502 
time_t
 
t
);

503 
X509_STORE_CTX_£t_vîify_cb
(
X509_STORE_CTX
 *
˘x
,

504 (*
vîify_cb
)(, 
X509_STORE_CTX
 *));

506 
X509_POLICY_TREE
 *
X509_STORE_CTX_gë0_pﬁicy_åì
(
X509_STORE_CTX
 *
˘x
);

507 
X509_STORE_CTX_gë_ex∂icô_pﬁicy
(
X509_STORE_CTX
 *
˘x
);

509 
X509_VERIFY_PARAM
 *
X509_STORE_CTX_gë0_∑øm
(
X509_STORE_CTX
 *
˘x
);

510 
X509_STORE_CTX_£t0_∑øm
(
X509_STORE_CTX
 *
˘x
, 
X509_VERIFY_PARAM
 *
∑øm
);

511 
X509_STORE_CTX_£t_deÁu…
(
X509_STORE_CTX
 *
˘x
, c⁄° *
«me
);

515 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_√w
();

516 
X509_VERIFY_PARAM_‰ì
(
X509_VERIFY_PARAM
 *
∑øm
);

517 
X509_VERIFY_PARAM_öhîô
(
X509_VERIFY_PARAM
 *
to
,

518 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

519 
X509_VERIFY_PARAM_£t1
(
X509_VERIFY_PARAM
 *
to
,

520 c⁄° 
X509_VERIFY_PARAM
 *
‰om
);

521 
X509_VERIFY_PARAM_£t1_«me
(
X509_VERIFY_PARAM
 *
∑øm
, c⁄° *
«me
);

522 
X509_VERIFY_PARAM_£t_Êags
(
X509_VERIFY_PARAM
 *
∑øm
, 
Êags
);

523 
X509_VERIFY_PARAM_˛ór_Êags
(
X509_VERIFY_PARAM
 *
∑øm
,

524 
Êags
);

525 
X509_VERIFY_PARAM_gë_Êags
(
X509_VERIFY_PARAM
 *
∑øm
);

526 
X509_VERIFY_PARAM_£t_puΩo£
(
X509_VERIFY_PARAM
 *
∑øm
, 
puΩo£
);

527 
X509_VERIFY_PARAM_£t_åu°
(
X509_VERIFY_PARAM
 *
∑øm
, 
åu°
);

528 
X509_VERIFY_PARAM_£t_dïth
(
X509_VERIFY_PARAM
 *
∑øm
, 
dïth
);

529 
X509_VERIFY_PARAM_£t_time
(
X509_VERIFY_PARAM
 *
∑øm
, 
time_t
 
t
);

530 
X509_VERIFY_PARAM_add0_pﬁicy
(
X509_VERIFY_PARAM
 *
∑øm
,

531 
ASN1_OBJECT
 *
pﬁicy
);

532 
X509_VERIFY_PARAM_£t1_pﬁicõs
(
X509_VERIFY_PARAM
 *
∑øm
,

533 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicõs
);

534 
X509_VERIFY_PARAM_gë_dïth
(c⁄° 
X509_VERIFY_PARAM
 *
∑øm
);

536 
X509_VERIFY_PARAM_add0_èbÀ
(
X509_VERIFY_PARAM
 *
∑øm
);

537 c⁄° 
X509_VERIFY_PARAM
 *
X509_VERIFY_PARAM_lookup
(c⁄° *
«me
);

538 
X509_VERIFY_PARAM_èbÀ_˛ónup
();

540 
X509_pﬁicy_check
(
X509_POLICY_TREE
 **
±ªe
, *
≥x∂icô_pﬁicy
,

541 
STACK_OF
(
X509
Ë*
˚πs
,

542 
STACK_OF
(
ASN1_OBJECT
Ë*
pﬁicy_oids
,

543 
Êags
);

545 
X509_pﬁicy_åì_‰ì
(
X509_POLICY_TREE
 *
åì
);

547 
X509_pﬁicy_åì_Àvñ_cou¡
(c⁄° 
X509_POLICY_TREE
 *
åì
);

548 
X509_POLICY_LEVEL
 *

549 
X509_pﬁicy_åì_gë0_Àvñ
(c⁄° 
X509_POLICY_TREE
 *
åì
, 
i
);

551 
STACK_OF
(
X509_POLICY_NODE
) *

552 
X509_pﬁicy_åì_gë0_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

554 
STACK_OF
(
X509_POLICY_NODE
) *

555 
X509_pﬁicy_åì_gë0_u£r_pﬁicõs
(c⁄° 
X509_POLICY_TREE
 *
åì
);

557 
X509_pﬁicy_Àvñ_node_cou¡
(
X509_POLICY_LEVEL
 *
Àvñ
);

559 
X509_POLICY_NODE
 *
X509_pﬁicy_Àvñ_gë0_node
(
X509_POLICY_LEVEL
 *
Àvñ
, 
i
);

561 c⁄° 
ASN1_OBJECT
 *
X509_pﬁicy_node_gë0_pﬁicy
(c⁄° 
X509_POLICY_NODE
 *
node
);

563 
STACK_OF
(
POLICYQUALINFO
) *

564 
X509_pﬁicy_node_gë0_quÆifõrs
(c⁄° 
X509_POLICY_NODE
 *
node
);

565 c⁄° 
X509_POLICY_NODE
 *

566 
X509_pﬁicy_node_gë0_∑ª¡
(c⁄° 
X509_POLICY_NODE
 *
node
);

568 #ifde‡ 
__˝lu•lus


	@/usr/include/zlibdefs.h

6 
	~<sys/ty≥s.h
>

7 
	~<uni°d.h
>

8 #ifde‡
VMS


9 
	~<unixio.h
>

11 #i‚de‡
z_off_t


12 
	#z_off_t
 
off_t


	)

	@/usr/include/gconv.h

23 #i‚de‡
_GCONV_H


24 
	#_GCONV_H
 1

	)

26 
	~<„©uªs.h
>

27 
	#__√ed_mb°©e_t


	)

28 
	#__√ed_wöt_t


	)

29 
	~<wch¨.h
>

30 
	#__√ed_size_t


	)

31 
	#__√ed_wch¨_t


	)

32 
	~<°ddef.h
>

35 
	#__UNKNOWN_10646_CHAR
 ((
wch¨_t
Ë0xfffd)

	)

40 
	m__GCONV_OK
 = 0,

41 
	m__GCONV_NOCONV
,

42 
	m__GCONV_NODB
,

43 
	m__GCONV_NOMEM
,

45 
	m__GCONV_EMPTY_INPUT
,

46 
	m__GCONV_FULL_OUTPUT
,

47 
	m__GCONV_ILLEGAL_INPUT
,

48 
	m__GCONV_INCOMPLETE_INPUT
,

50 
	m__GCONV_ILLEGAL_DESCRIPTOR
,

51 
	m__GCONV_INTERNAL_ERROR


58 
	m__GCONV_IS_LAST
 = 0x0001,

59 
	m__GCONV_IGNORE_ERRORS
 = 0x0002,

60 
	m__GCONV_SWAP
 = 0x0004

65 
	g__gc⁄v_°ï
;

66 
	g__gc⁄v_°ï_d©a
;

67 
	g__gc⁄v_lﬂded_obje˘
;

68 
	g__gc⁄v_å™s_d©a
;

72 (*
	t__gc⁄v_f˘
Ë(
	t__gc⁄v_°ï
 *, 
	t__gc⁄v_°ï_d©a
 *,

73 
	t__c⁄°
 **, __const *,

74 **, 
	tsize_t
 *, , );

77 
	$wöt_t
 (*
	t__gc⁄v_btowc_f˘
Ë(
	t__gc⁄v_°ï
 *, );

80 (*
	t__gc⁄v_öô_f˘
Ë(
	t__gc⁄v_°ï
 *);

81 (*
	t__gc⁄v_íd_f˘
Ë(
	t__gc⁄v_°ï
 *);

85 (*
	t__gc⁄v_å™s_f˘
Ë(
	t__gc⁄v_°ï
 *,

86 
	t__gc⁄v_°ï_d©a
 *, *,

87 
	t__c⁄°
 *,

88 
	t__c⁄°
 **,

89 
	t__c⁄°
 *, **,

90 
	tsize_t
 *);

93 (*
	t__gc⁄v_å™s_c⁄ãxt_f˘
Ë(*, 
	t__c⁄°
 *,

94 
	t__c⁄°
 *,

98 (*
	t__gc⁄v_å™s_quîy_f˘
Ë(
	t__c⁄°
 *, __const ***,

99 
	tsize_t
 *);

102 (*
	t__gc⁄v_å™s_öô_f˘
) (**, const *);

103 (*
	t__gc⁄v_å™s_íd_f˘
) (*);

105 
	s__gc⁄v_å™s_d©a


108 
__gc⁄v_å™s_f˘
 
__å™s_f˘
;

109 
__gc⁄v_å™s_c⁄ãxt_f˘
 
__å™s_c⁄ãxt_f˘
;

110 
__gc⁄v_å™s_íd_f˘
 
__å™s_íd_f˘
;

111 *
__d©a
;

112 
__gc⁄v_å™s_d©a
 *
__√xt
;

117 
	s__gc⁄v_°ï


119 
__gc⁄v_lﬂded_obje˘
 *
__shlib_h™dÀ
;

120 
__c⁄°
 *
__mod«me
;

122 
__cou¡î
;

124 *
__‰om_«me
;

125 *
__to_«me
;

127 
__gc⁄v_f˘
 
__f˘
;

128 
__gc⁄v_btowc_f˘
 
__btowc_f˘
;

129 
__gc⁄v_öô_f˘
 
__öô_f˘
;

130 
__gc⁄v_íd_f˘
 
__íd_f˘
;

134 
__mö_√eded_‰om
;

135 
__max_√eded_‰om
;

136 
__mö_√eded_to
;

137 
__max_√eded_to
;

140 
__°©eful
;

142 *
__d©a
;

147 
	s__gc⁄v_°ï_d©a


149 *
__outbuf
;

150 *
__outbu„nd
;

154 
__Êags
;

158 
__övoˇti⁄_cou¡î
;

162 
__öã∫Æ_u£
;

164 
__mb°©e_t
 *
__°©ï
;

165 
__mb°©e_t
 
__°©e
;

169 
__gc⁄v_å™s_d©a
 *
__å™s
;

174 
	s__gc⁄v_öfo


176 
size_t
 
__n°ïs
;

177 
__gc⁄v_°ï
 *
__°ïs
;

178 
__exãnsi⁄__
 
__gc⁄v_°ï_d©a
 
__d©a
 
__Êex¨r
;

179 } *
	t__gc⁄v_t
;

	@/usr/include/linux/stddef.h

1 #i‚de‡
_LINUX_STDDEF_H


2 
	#_LINUX_STDDEF_H


	)

6 #unde‡
NULL


7 #i‡
deföed
(
__˝lu•lus
)

8 
	#NULL
 0

	)

10 
	#NULL
 ((*)0)

	)

	@/usr/include/wchar.h

24 #i‚de‡
_WCHAR_H


26 #i‡!
deföed
 
__√ed_mb°©e_t
 && !deföed 
__√ed_wöt_t


27 
	#_WCHAR_H
 1

	)

28 
	~<„©uªs.h
>

31 #ifde‡
_WCHAR_H


33 
	#__√ed___FILE


	)

34 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


35 
	#__√ed_FILE


	)

37 
	~<°dio.h
>

39 
	#__√ed___va_li°


	)

40 
	~<°d¨g.h
>

42 
	~<bôs/wch¨.h
>

45 
	#__√ed_size_t


	)

46 
	#__√ed_wch¨_t


	)

47 
	#__√ed_NULL


	)

49 #i‡
deföed
 
_WCHAR_H
 || deföed 
__√ed_wöt_t
 || !deföed 
__WINT_TYPE__


50 #unde‡
__√ed_wöt_t


51 
	#__√ed_wöt_t


	)

52 
	~<°ddef.h
>

56 #i‚de‡
_WINT_T


61 
	#_WINT_T


	)

62 
	twöt_t
;

66 #i‡
deföed
 
__˝lu•lus
 && deföed 
_GLIBCPP_USE_NAMESPACES
 \

67 && 
deföed
 
__WINT_TYPE__


68 
__BEGIN_NAMESPACE_STD


69 
__WINT_TYPE__
 
	twöt_t
;

70 
	g__END_NAMESPACE_STD


75 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

76 
	#__CORRECT_ISO_CPP_WCHAR_H_PROTO


	)

80 #i‡(
deföed
 
_WCHAR_H
 || deföed 
__√ed_mb°©e_t
Ë&& !deföed 
__mb°©e_t_deföed


81 
	#__mb°©e_t_deföed
 1

	)

85 
	m__cou¡
;

88 #ifde‡
__WINT_TYPE__


89 
__WINT_TYPE__
 
	m__wch
;

91 
wöt_t
 
	m__wch
;

93 
	m__wchb
[4];

94 } 
	m__vÆue
;

95 } 
	t__mb°©e_t
;

97 #unde‡
__√ed_mb°©e_t


102 #ifde‡
_WCHAR_H


104 
__BEGIN_NAMESPACE_C99


106 
__mb°©e_t
 
	tmb°©e_t
;

107 
	g__END_NAMESPACE_C99


108 #ifde‡
__USE_GNU


109 
	$__USING_NAMESPACE_C99
(
mb°©e_t
)

112 #i‚de‡
WCHAR_MIN


114 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

115 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

118 #i‚de‡
WEOF


119 
	#WEOF
 (0xffffffffu)

	)

124 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_UNIX98


125 
	~<w˘y≥.h
>

129 
__BEGIN_DECLS


131 
__BEGIN_NAMESPACE_STD


134 
tm
;

135 
__END_NAMESPACE_STD


139 
	$__USING_NAMESPACE_STD
(
tm
)

142 
__BEGIN_NAMESPACE_STD


144 
wch¨_t
 *
	$wcs˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

145 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

147 
wch¨_t
 *
	$wc¢˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

148 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

149 
__THROW
;

152 
wch¨_t
 *
	$wcsˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

153 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

155 
wch¨_t
 *
	$wc¢ˇt
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

156 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

157 
__THROW
;

160 
	$wcscmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
)

161 
__THROW
 
__©åibuã_puª__
;

163 
	$wc¢cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

164 
__THROW
 
__©åibuã_puª__
;

165 
__END_NAMESPACE_STD


167 #ifde‡
__USE_XOPEN2K8


169 
	$wcsˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

172 
	$wc¢ˇ£cmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

173 
size_t
 
__n
Ë
__THROW
;

177 
	~<xloˇÀ.h
>

179 
	$wcsˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

180 
__loˇÀ_t
 
__loc
Ë
__THROW
;

182 
	$wc¢ˇ£cmp_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

183 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

186 
__BEGIN_NAMESPACE_STD


189 
	$wcscﬁl
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
Ë
__THROW
;

193 
size_t
 
	$wcsx‰m
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

194 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

195 
__END_NAMESPACE_STD


197 #ifde‡
__USE_XOPEN2K8


203 
	$wcscﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
,

204 
__loˇÀ_t
 
__loc
Ë
__THROW
;

209 
size_t
 
	$wcsx‰m_l
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
,

210 
size_t
 
__n
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

213 
wch¨_t
 *
	$wcsdup
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_mÆloc__
;

216 
__BEGIN_NAMESPACE_STD


218 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


219 "C++" 
wch¨_t
 *
	$wcschr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

220 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

221 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

222 
__THROW
 
	`__asm
 ("wcschr"Ë
__©åibuã_puª__
;

224 
wch¨_t
 *
	$wcschr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

225 
__THROW
 
__©åibuã_puª__
;

228 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


229 "C++" 
wch¨_t
 *
	$wc§chr
 (
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

230 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

231 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

232 
__THROW
 
	`__asm
 ("wc§chr"Ë
__©åibuã_puª__
;

234 
wch¨_t
 *
	$wc§chr
 (
__c⁄°
 
wch¨_t
 *
__wcs
, wch¨_à
__wc
)

235 
__THROW
 
__©åibuã_puª__
;

237 
__END_NAMESPACE_STD


239 #ifde‡
__USE_GNU


242 
wch¨_t
 *
	$wcsch∫ul
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__wc
)

243 
__THROW
 
__©åibuã_puª__
;

246 
__BEGIN_NAMESPACE_STD


249 
size_t
 
	$wcsc•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ªje˘
)

250 
__THROW
 
__©åibuã_puª__
;

253 
size_t
 
	$wcs•n
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

254 
__THROW
 
__©åibuã_puª__
;

256 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


257 "C++" 
wch¨_t
 *
	$wc•brk
 (
wch¨_t
 *
__wcs
, 
__c⁄°
 wch¨_à*
__ac˚±
)

258 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

259 "C++" 
__c⁄°
 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
,

260 
__c⁄°
 
wch¨_t
 *
__ac˚±
)

261 
__THROW
 
	`__asm
 ("wc•brk"Ë
__©åibuã_puª__
;

263 
wch¨_t
 *
	$wc•brk
 (
__c⁄°
 
wch¨_t
 *
__wcs
, __c⁄° wch¨_à*
__ac˚±
)

264 
__THROW
 
__©åibuã_puª__
;

267 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


268 "C++" 
wch¨_t
 *
	$wcs°r
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

269 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

270 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

271 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

272 
__THROW
 
	`__asm
 ("wcs°r"Ë
__©åibuã_puª__
;

274 
wch¨_t
 *
	$wcs°r
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

275 
__THROW
 
__©åibuã_puª__
;

279 
wch¨_t
 *
	$wc°ok
 (
wch¨_t
 *
__ª°ri˘
 
__s
,

280 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__dñim
,

281 
wch¨_t
 **
__ª°ri˘
 
__±r
Ë
__THROW
;

284 
size_t
 
	$wc¶í
 (
__c⁄°
 
wch¨_t
 *
__s
Ë
__THROW
 
__©åibuã_puª__
;

285 
__END_NAMESPACE_STD


287 #ifde‡
__USE_XOPEN


289 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


290 "C++" 
wch¨_t
 *
	$wcswcs
 (
wch¨_t
 *
__hay°ack
, 
__c⁄°
 wch¨_à*
__√edÀ
)

291 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

292 "C++" 
__c⁄°
 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
,

293 
__c⁄°
 
wch¨_t
 *
__√edÀ
)

294 
__THROW
 
	`__asm
 ("wcswcs"Ë
__©åibuã_puª__
;

296 
wch¨_t
 *
	$wcswcs
 (
__c⁄°
 
wch¨_t
 *
__hay°ack
, __c⁄° wch¨_à*
__√edÀ
)

297 
__THROW
 
__©åibuã_puª__
;

301 #ifde‡
__USE_XOPEN2K8


303 
size_t
 
	$wc¢Àn
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__maxÀn
)

304 
__THROW
 
__©åibuã_puª__
;

308 
__BEGIN_NAMESPACE_STD


310 #ifde‡
__CORRECT_ISO_CPP_WCHAR_H_PROTO


311 "C++" 
wch¨_t
 *
	$wmemchr
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

312 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

313 "C++" 
__c⁄°
 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
,

314 
size_t
 
__n
)

315 
__THROW
 
	`__asm
 ("wmemchr"Ë
__©åibuã_puª__
;

317 
wch¨_t
 *
	$wmemchr
 (
__c⁄°
 
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
)

318 
__THROW
 
__©åibuã_puª__
;

322 
	$wmemcmp
 (
__c⁄°
 
wch¨_t
 *
__s1
, __c⁄° wch¨_à*
__s2
, 
size_t
 
__n
)

323 
__THROW
 
__©åibuã_puª__
;

326 
wch¨_t
 *
	$wmem˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

327 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
Ë
__THROW
;

331 
wch¨_t
 *
	$wmemmove
 (
wch¨_t
 *
__s1
, 
__c⁄°
 wch¨_à*
__s2
, 
size_t
 
__n
)

332 
__THROW
;

335 
wch¨_t
 *
	$wmem£t
 (
wch¨_t
 *
__s
, wch¨_à
__c
, 
size_t
 
__n
Ë
__THROW
;

336 
__END_NAMESPACE_STD


338 #ifde‡
__USE_GNU


341 
wch¨_t
 *
	$wmemp˝y
 (
wch¨_t
 *
__ª°ri˘
 
__s1
,

342 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s2
, 
size_t
 
__n
)

343 
__THROW
;

347 
__BEGIN_NAMESPACE_STD


350 
wöt_t
 
	$btowc
 (
__c
Ë
__THROW
;

354 
	$w˘ob
 (
wöt_t
 
__c
Ë
__THROW
;

358 
	$mbsöô
 (
__c⁄°
 
mb°©e_t
 *
__ps
Ë
__THROW
 
__©åibuã_puª__
;

362 
size_t
 
	$mbπowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

363 
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

364 
mb°©e_t
 *
__p
Ë
__THROW
;

367 
size_t
 
	$w¸tomb
 (*
__ª°ri˘
 
__s
, 
wch¨_t
 
__wc
,

368 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

371 
size_t
 
	$__mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

372 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

373 
size_t
 
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

374 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

375 
__END_NAMESPACE_STD


377 #ifde‡
__USE_EXTERN_INLINES


383 
wöt_t
 
	$__btowc_Æüs
 (
__c
Ë
	`__asm
 ("btowc");

384 
__exã∫_ölöe
 
wöt_t


385 
	`__NTH
 (
	$btowc
 (
__c
))

386 {  (
	`__buûtö_c⁄°™t_p
 (
__c
) && __c >= '\0' && __c <= '\x7f'

387 ? (
wöt_t
Ë
__c
 : 
	`__btowc_Æüs
 (__c)); 
	}
}

389 
	$__w˘ob_Æüs
 (
wöt_t
 
__c
Ë
	`__asm
 ("wctob");

390 
__exã∫_ölöe
 

391 
	`__NTH
 (
	$w˘ob
 (
wöt_t
 
__wc
))

392 {  (
	`__buûtö_c⁄°™t_p
 (
__wc
Ë&& __w¯>
L
'\0' && __wc <= L'\x7f'

393 ? (Ë
__wc
 : 
	`__w˘ob_Æüs
 (__wc)); 
	}
}

395 
__exã∫_ölöe
 
size_t


396 
__NTH
 (
	$mbæí
 (
__c⁄°
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

397 
mb°©e_t
 *
__ª°ri˘
 
__ps
))

398 {  (
__ps
 !
NULL


399 ? 
	`mbπowc
 (
NULL
, 
__s
, 
__n
, 
__ps
Ë: 
	`__mbæí
 (__s, __n, NULL)); 
	}
}

402 
__BEGIN_NAMESPACE_STD


405 
size_t
 
	$mb§towcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

406 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

407 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

411 
size_t
 
	$wc§tombs
 (*
__ª°ri˘
 
__d°
,

412 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
, 
size_t
 
__Àn
,

413 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

414 
__END_NAMESPACE_STD


417 #ifdef 
__USE_XOPEN2K8


420 
size_t
 
	$mb¢πowcs
 (
wch¨_t
 *
__ª°ri˘
 
__d°
,

421 
__c⁄°
 **
__ª°ri˘
 
__§c
, 
size_t
 
__nmc
,

422 
size_t
 
__Àn
, 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

426 
size_t
 
	$wc¢πombs
 (*
__ª°ri˘
 
__d°
,

427 
__c⁄°
 
wch¨_t
 **
__ª°ri˘
 
__§c
,

428 
size_t
 
__nwc
, size_à
__Àn
,

429 
mb°©e_t
 *
__ª°ri˘
 
__ps
Ë
__THROW
;

434 #ifde‡
__USE_XOPEN


436 
	$wcwidth
 (
wch¨_t
 
__c
Ë
__THROW
;

440 
	$wcswidth
 (
__c⁄°
 
wch¨_t
 *
__s
, 
size_t
 
__n
Ë
__THROW
;

444 
__BEGIN_NAMESPACE_STD


447 
	$wc°od
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

448 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

449 
__END_NAMESPACE_STD


451 #ifde‡
__USE_ISOC99


452 
__BEGIN_NAMESPACE_C99


454 
	$wc°of
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

455 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

456 
	$wc°ﬁd
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

457 
wch¨_t
 **
__ª°ri˘
 
__íd±r
Ë
__THROW
;

458 
__END_NAMESPACE_C99


462 
__BEGIN_NAMESPACE_STD


465 
	$wc°ﬁ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

466 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
Ë
__THROW
;

470 
	$wc°oul
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

471 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

472 
__THROW
;

473 
__END_NAMESPACE_STD


475 #i‡
deföed
 
__USE_ISOC99
 || (deföed 
__GNUC__
 && deföed 
__USE_GNU
)

476 
__BEGIN_NAMESPACE_C99


479 
__exãnsi⁄__


480 
	$wc°ﬁl
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

481 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

482 
__THROW
;

486 
__exãnsi⁄__


487 
	$wc°ouŒ
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

488 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

489 
__ba£
Ë
__THROW
;

490 
__END_NAMESPACE_C99


493 #i‡
deföed
 
__GNUC__
 && deföed 
__USE_GNU


496 
__exãnsi⁄__


497 
	$wc°oq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

498 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

499 
__THROW
;

503 
__exãnsi⁄__


504 
	$wc°ouq
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

505 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

506 
__ba£
Ë
__THROW
;

509 #ifde‡
__USE_GNU


523 
	~<xloˇÀ.h
>

527 
	$wc°ﬁ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

528 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

529 
__loˇÀ_t
 
__loc
Ë
__THROW
;

531 
	$wc°oul_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

532 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

533 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

535 
__exãnsi⁄__


536 
	$wc°ﬁl_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

537 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

538 
__ba£
, 
__loˇÀ_t
 
__loc
Ë
__THROW
;

540 
__exãnsi⁄__


541 
	$wc°ouŒ_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

542 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

543 
__ba£
, 
__loˇÀ_t
 
__loc
)

544 
__THROW
;

546 
	$wc°od_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

547 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

548 
__THROW
;

550 
	$wc°of_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

551 
wch¨_t
 **
__ª°ri˘
 
__íd±r
, 
__loˇÀ_t
 
__loc
)

552 
__THROW
;

554 
	$wc°ﬁd_l
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__≈å
,

555 
wch¨_t
 **
__ª°ri˘
 
__íd±r
,

556 
__loˇÀ_t
 
__loc
Ë
__THROW
;

560 #ifde‡
__USE_XOPEN2K8


563 
wch¨_t
 *
	$w˝˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

564 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
Ë
__THROW
;

568 
wch¨_t
 *
	$w˝n˝y
 (
wch¨_t
 *
__ª°ri˘
 
__de°
,

569 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

570 
__THROW
;

577 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW
;

580 #i‡
deföed
 
__USE_ISOC95
 || deföed 
__USE_UNIX98


581 
__BEGIN_NAMESPACE_STD


584 
	$fwide
 (
__FILE
 *
__Â
, 
__mode
Ë
__THROW
;

591 
	`fw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

592 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

598 
	`w¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

601 
	$sw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

602 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

603 
__THROW
 ;

609 
	`vfw¥ötf
 (
__FILE
 *
__ª°ri˘
 
__s
,

610 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

611 
__gnuc_va_li°
 
__¨g
)

617 
	`vw¥ötf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

618 
__gnuc_va_li°
 
__¨g
)

622 
	$vsw¥ötf
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__n
,

623 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

624 
__gnuc_va_li°
 
__¨g
)

625 
__THROW
 ;

632 
	`fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

633 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

639 
	`wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

642 
	$swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

643 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

644 
__THROW
 ;

646 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__USE_GNU
 \

647 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

648 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

649 #ifde‡
__REDIRECT


653 
	`__REDIRECT
 (
fwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__°ªam
,

654 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

655 
__isoc99_fwsˇnf
)

657 
	`__REDIRECT
 (
wsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...),

658 
__isoc99_wsˇnf
)

660 
	`__REDIRECT_NTH
 (
swsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

661 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

662 ...), 
__isoc99_swsˇnf
)

665 
	`__isoc99_fwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__°ªam
,

666 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

667 
	`__isoc99_wsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...);

668 
	$__isoc99_swsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

669 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
, ...)

670 
__THROW
;

671 
	#fwsˇnf
 
__isoc99_fwsˇnf


	)

672 
	#wsˇnf
 
__isoc99_wsˇnf


	)

673 
	#swsˇnf
 
__isoc99_swsˇnf


	)

677 
__END_NAMESPACE_STD


680 #ifde‡
__USE_ISOC99


681 
__BEGIN_NAMESPACE_C99


686 
	`vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

687 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

688 
__gnuc_va_li°
 
__¨g
)

694 
	`vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

695 
__gnuc_va_li°
 
__¨g
)

698 
	$vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

699 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

700 
__gnuc_va_li°
 
__¨g
)

701 
__THROW
 ;

703 #i‡!
deföed
 
__USE_GNU
 \

704 && (!
deföed
 
__LDBL_COMPAT
 || !deföed 
__REDIRECT
) \

705 && (
deföed
 
__STRICT_ANSI__
 || deföed 
__USE_XOPEN2K
)

706 #ifde‡
__REDIRECT


707 
	`__REDIRECT
 (
vfwsˇnf
, (
__FILE
 *
__ª°ri˘
 
__s
,

708 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

709 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vfwsˇnf
)

711 
	`__REDIRECT
 (
vwsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

712 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vwsˇnf
)

714 
	`__REDIRECT_NTH
 (
vswsˇnf
, (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

715 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

716 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vswsˇnf
)

719 
	`__isoc99_vfwsˇnf
 (
__FILE
 *
__ª°ri˘
 
__s
,

720 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

721 
__gnuc_va_li°
 
__¨g
);

722 
	`__isoc99_vwsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

723 
__gnuc_va_li°
 
__¨g
);

724 
	$__isoc99_vswsˇnf
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__s
,

725 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

726 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

727 
	#vfwsˇnf
 
__isoc99_vfwsˇnf


	)

728 
	#vwsˇnf
 
__isoc99_vwsˇnf


	)

729 
	#vswsˇnf
 
__isoc99_vswsˇnf


	)

733 
__END_NAMESPACE_C99


737 
__BEGIN_NAMESPACE_STD


742 
wöt_t
 
	`fgëwc
 (
__FILE
 *
__°ªam
);

743 
wöt_t
 
	`gëwc
 (
__FILE
 *
__°ªam
);

749 
wöt_t
 
	`gëwch¨
 ();

756 
wöt_t
 
	`Âutwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

757 
wöt_t
 
	`putwc
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

763 
wöt_t
 
	`putwch¨
 (
wch¨_t
 
__wc
);

771 
wch¨_t
 *
	`fgëws
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

772 
__FILE
 *
__ª°ri˘
 
__°ªam
);

778 
	`Âutws
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

779 
__FILE
 *
__ª°ri˘
 
__°ªam
);

786 
wöt_t
 
	`ungëwc
 (wöt_à
__wc
, 
__FILE
 *
__°ªam
);

787 
__END_NAMESPACE_STD


790 #ifde‡
__USE_GNU


798 
wöt_t
 
	`gëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

799 
wöt_t
 
	`gëwch¨_u∆ocked
 ();

807 
wöt_t
 
	`fgëwc_u∆ocked
 (
__FILE
 *
__°ªam
);

815 
wöt_t
 
	`Âutwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

824 
wöt_t
 
	`putwc_u∆ocked
 (
wch¨_t
 
__wc
, 
__FILE
 *
__°ªam
);

825 
wöt_t
 
	`putwch¨_u∆ocked
 (
wch¨_t
 
__wc
);

834 
wch¨_t
 *
	`fgëws_u∆ocked
 (wch¨_à*
__ª°ri˘
 
__ws
, 
__n
,

835 
__FILE
 *
__ª°ri˘
 
__°ªam
);

843 
	`Âutws_u∆ocked
 (
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__ws
,

844 
__FILE
 *
__ª°ri˘
 
__°ªam
);

848 
__BEGIN_NAMESPACE_C99


852 
size_t
 
	$wcs·ime
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

853 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

854 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
Ë
__THROW
;

855 
__END_NAMESPACE_C99


857 #ifde‡
__USE_GNU


858 
	~<xloˇÀ.h
>

862 
size_t
 
	$wcs·ime_l
 (
wch¨_t
 *
__ª°ri˘
 
__s
, 
size_t
 
__maxsize
,

863 
__c⁄°
 
wch¨_t
 *
__ª°ri˘
 
__f‹m©
,

864 
__c⁄°
 
tm
 *
__ª°ri˘
 
__ç
,

865 
__loˇÀ_t
 
__loc
Ë
__THROW
;

874 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_GNU


875 
	#__√ed_iswxxx


	)

876 
	~<w˘y≥.h
>

880 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__exã∫_Æways_ölöe


881 
	~<bôs/wch¨2.h
>

884 #ifde‡
__LDBL_COMPAT


885 
	~<bôs/wch¨-ldbl.h
>

888 
__END_DECLS


896 #unde‡
__√ed_mb°©e_t


897 #unde‡
__√ed_wöt_t


	@/usr/include/wctype.h

24 #i‚de‡
_WCTYPE_H


26 
	~<„©uªs.h
>

27 
	~<bôs/ty≥s.h
>

29 #i‚de‡
__√ed_iswxxx


30 
	#_WCTYPE_H
 1

	)

33 
	#__√ed_wöt_t


	)

34 
	~<wch¨.h
>

38 #i‚de‡
WEOF


39 
	#WEOF
 (0xffffffffu)

	)

42 #unde‡
__√ed_iswxxx


47 #i‚de‡
__iswxxx_deföed


48 
	#__iswxxx_deföed
 1

	)

50 
__BEGIN_NAMESPACE_C99


53 
	tw˘y≥_t
;

54 
	g__END_NAMESPACE_C99


56 #i‚de‡
_ISwbô


61 
	~<ídün.h
>

62 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


63 
	#_ISwbô
(
bô
Ë(1 << (bô))

	)

65 
	#_ISwbô
(
bô
) \

66 ((
bô
) < 8 ? () ((1UL << (bit)) << 24) \

67 : ((
bô
) < 16 ? () ((1UL << (bit)) << 8) \

68 : ((
bô
) < 24 ? () ((1UL << (bit)) >> 8) \

69 : (Ë((1UL << (
bô
)Ë>> 24))))

	)

74 
	m__ISwuµî
 = 0,

75 
	m__ISwlowî
 = 1,

76 
	m__ISwÆpha
 = 2,

77 
	m__ISwdigô
 = 3,

78 
	m__ISwxdigô
 = 4,

79 
	m__ISw•a˚
 = 5,

80 
	m__ISw¥öt
 = 6,

81 
	m__ISwgøph
 = 7,

82 
	m__ISwbœnk
 = 8,

83 
	m__ISw˙ål
 = 9,

84 
	m__ISwpun˘
 = 10,

85 
	m__ISwÆnum
 = 11,

87 
	m_ISwuµî
 = 
_ISwbô
 (
__ISwuµî
),

88 
	m_ISwlowî
 = 
_ISwbô
 (
__ISwlowî
),

89 
	m_ISwÆpha
 = 
_ISwbô
 (
__ISwÆpha
),

90 
	m_ISwdigô
 = 
_ISwbô
 (
__ISwdigô
),

91 
	m_ISwxdigô
 = 
_ISwbô
 (
__ISwxdigô
),

92 
	m_ISw•a˚
 = 
_ISwbô
 (
__ISw•a˚
),

93 
	m_ISw¥öt
 = 
_ISwbô
 (
__ISw¥öt
),

94 
	m_ISwgøph
 = 
_ISwbô
 (
__ISwgøph
),

95 
	m_ISwbœnk
 = 
_ISwbô
 (
__ISwbœnk
),

96 
	m_ISw˙ål
 = 
_ISwbô
 (
__ISw˙ål
),

97 
	m_ISwpun˘
 = 
_ISwbô
 (
__ISwpun˘
),

98 
	m_ISwÆnum
 = 
_ISwbô
 (
__ISwÆnum
)

103 
__BEGIN_DECLS


105 
__BEGIN_NAMESPACE_C99


112 
	$iswÆnum
 (
wöt_t
 
__wc
Ë
__THROW
;

118 
	$iswÆpha
 (
wöt_t
 
__wc
Ë
__THROW
;

121 
	$isw˙ål
 (
wöt_t
 
__wc
Ë
__THROW
;

125 
	$iswdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

129 
	$iswgøph
 (
wöt_t
 
__wc
Ë
__THROW
;

134 
	$iswlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

137 
	$isw¥öt
 (
wöt_t
 
__wc
Ë
__THROW
;

142 
	$iswpun˘
 (
wöt_t
 
__wc
Ë
__THROW
;

147 
	$isw•a˚
 (
wöt_t
 
__wc
Ë
__THROW
;

152 
	$iswuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

157 
	$iswxdigô
 (
wöt_t
 
__wc
Ë
__THROW
;

162 #ifde‡
__USE_ISOC99


163 
	$iswbœnk
 (
wöt_t
 
__wc
Ë
__THROW
;

172 
w˘y≥_t
 
	$w˘y≥
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

176 
	$isw˘y≥
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
Ë
__THROW
;

177 
__END_NAMESPACE_C99


184 
__BEGIN_NAMESPACE_C99


187 
__c⁄°
 
	t__öt32_t
 *
	tw˘øns_t
;

188 
__END_NAMESPACE_C99


189 #ifde‡
__USE_GNU


190 
	$__USING_NAMESPACE_C99
(
w˘øns_t
)

193 
__BEGIN_NAMESPACE_C99


195 
wöt_t
 
	$towlowî
 (
wöt_t
 
__wc
Ë
__THROW
;

198 
wöt_t
 
	$towuµî
 (
wöt_t
 
__wc
Ë
__THROW
;

199 
__END_NAMESPACE_C99


201 
__END_DECLS


208 #ifde‡
_WCTYPE_H


214 
__BEGIN_DECLS


216 
__BEGIN_NAMESPACE_C99


219 
w˘øns_t
 
	$w˘øns
 (
__c⁄°
 *
__¥›îty
Ë
__THROW
;

222 
wöt_t
 
	$tow˘øns
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
Ë
__THROW
;

223 
__END_NAMESPACE_C99


225 #ifde‡
__USE_XOPEN2K8


227 
	~<xloˇÀ.h
>

231 
	$iswÆnum_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

237 
	$iswÆpha_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

240 
	$isw˙ål_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

244 
	$iswdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

248 
	$iswgøph_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

253 
	$iswlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

256 
	$isw¥öt_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

261 
	$iswpun˘_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

266 
	$isw•a˚_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

271 
	$iswuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

276 
	$iswxdigô_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

281 
	$iswbœnk_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

285 
w˘y≥_t
 
	$w˘y≥_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

286 
__THROW
;

290 
	$isw˘y≥_l
 (
wöt_t
 
__wc
, 
w˘y≥_t
 
__desc
, 
__loˇÀ_t
 
__loˇÀ
)

291 
__THROW
;

299 
wöt_t
 
	$towlowî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

302 
wöt_t
 
	$towuµî_l
 (
wöt_t
 
__wc
, 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

306 
w˘øns_t
 
	$w˘øns_l
 (
__c⁄°
 *
__¥›îty
, 
__loˇÀ_t
 
__loˇÀ
)

307 
__THROW
;

310 
wöt_t
 
	$tow˘øns_l
 (
wöt_t
 
__wc
, 
w˘øns_t
 
__desc
,

311 
__loˇÀ_t
 
__loˇÀ
Ë
__THROW
;

315 
__END_DECLS


	@
1
.
1
/usr/include
351
10465
auto/lib/zlib/patch.zlib.h
src/core/nginx.c
src/core/nginx.h
src/core/ngx_array.c
src/core/ngx_array.h
src/core/ngx_buf.c
src/core/ngx_buf.h
src/core/ngx_conf_file.c
src/core/ngx_conf_file.h
src/core/ngx_config.h
src/core/ngx_connection.c
src/core/ngx_connection.h
src/core/ngx_core.h
src/core/ngx_cpuinfo.c
src/core/ngx_crc.h
src/core/ngx_crc32.c
src/core/ngx_crc32.h
src/core/ngx_crypt.c
src/core/ngx_crypt.h
src/core/ngx_cycle.c
src/core/ngx_cycle.h
src/core/ngx_file.c
src/core/ngx_file.h
src/core/ngx_hash.c
src/core/ngx_hash.h
src/core/ngx_inet.c
src/core/ngx_inet.h
src/core/ngx_list.c
src/core/ngx_list.h
src/core/ngx_log.c
src/core/ngx_log.h
src/core/ngx_md5.c
src/core/ngx_md5.h
src/core/ngx_murmurhash.c
src/core/ngx_murmurhash.h
src/core/ngx_open_file_cache.c
src/core/ngx_open_file_cache.h
src/core/ngx_output_chain.c
src/core/ngx_palloc.c
src/core/ngx_palloc.h
src/core/ngx_parse.c
src/core/ngx_parse.h
src/core/ngx_queue.c
src/core/ngx_queue.h
src/core/ngx_radix_tree.c
src/core/ngx_radix_tree.h
src/core/ngx_rbtree.c
src/core/ngx_rbtree.h
src/core/ngx_regex.c
src/core/ngx_regex.h
src/core/ngx_resolver.c
src/core/ngx_resolver.h
src/core/ngx_sha1.h
src/core/ngx_shmtx.c
src/core/ngx_shmtx.h
src/core/ngx_slab.c
src/core/ngx_slab.h
src/core/ngx_spinlock.c
src/core/ngx_string.c
src/core/ngx_string.h
src/core/ngx_times.c
src/core/ngx_times.h
src/event/modules/ngx_aio_module.c
src/event/modules/ngx_devpoll_module.c
src/event/modules/ngx_epoll_module.c
src/event/modules/ngx_eventport_module.c
src/event/modules/ngx_kqueue_module.c
src/event/modules/ngx_poll_module.c
src/event/modules/ngx_rtsig_module.c
src/event/modules/ngx_select_module.c
src/event/modules/ngx_win32_select_module.c
src/event/ngx_event.c
src/event/ngx_event.h
src/event/ngx_event_accept.c
src/event/ngx_event_busy_lock.c
src/event/ngx_event_busy_lock.h
src/event/ngx_event_connect.c
src/event/ngx_event_connect.h
src/event/ngx_event_mutex.c
src/event/ngx_event_openssl.c
src/event/ngx_event_openssl.h
src/event/ngx_event_openssl_stapling.c
src/event/ngx_event_pipe.c
src/event/ngx_event_pipe.h
src/event/ngx_event_posted.c
src/event/ngx_event_posted.h
src/event/ngx_event_timer.c
src/event/ngx_event_timer.h
src/http/modules/ngx_http_access_module.c
src/http/modules/ngx_http_addition_filter_module.c
src/http/modules/ngx_http_auth_basic_module.c
src/http/modules/ngx_http_autoindex_module.c
src/http/modules/ngx_http_browser_module.c
src/http/modules/ngx_http_charset_filter_module.c
src/http/modules/ngx_http_chunked_filter_module.c
src/http/modules/ngx_http_dav_module.c
src/http/modules/ngx_http_degradation_module.c
src/http/modules/ngx_http_empty_gif_module.c
src/http/modules/ngx_http_fastcgi_module.c
src/http/modules/ngx_http_flv_module.c
src/http/modules/ngx_http_geo_module.c
src/http/modules/ngx_http_geoip_module.c
src/http/modules/ngx_http_gunzip_filter_module.c
src/http/modules/ngx_http_gzip_filter_module.c
src/http/modules/ngx_http_gzip_static_module.c
src/http/modules/ngx_http_headers_filter_module.c
src/http/modules/ngx_http_image_filter_module.c
src/http/modules/ngx_http_index_module.c
src/http/modules/ngx_http_limit_conn_module.c
src/http/modules/ngx_http_limit_req_module.c
src/http/modules/ngx_http_log_module.c
src/http/modules/ngx_http_map_module.c
src/http/modules/ngx_http_memcached_module.c
src/http/modules/ngx_http_mp4_module.c
src/http/modules/ngx_http_not_modified_filter_module.c
src/http/modules/ngx_http_proxy_module.c
src/http/modules/ngx_http_random_index_module.c
src/http/modules/ngx_http_range_filter_module.c
src/http/modules/ngx_http_realip_module.c
src/http/modules/ngx_http_referer_module.c
src/http/modules/ngx_http_rewrite_module.c
src/http/modules/ngx_http_scgi_module.c
src/http/modules/ngx_http_secure_link_module.c
src/http/modules/ngx_http_split_clients_module.c
src/http/modules/ngx_http_ssi_filter_module.c
src/http/modules/ngx_http_ssi_filter_module.h
src/http/modules/ngx_http_ssl_module.c
src/http/modules/ngx_http_ssl_module.h
src/http/modules/ngx_http_static_module.c
src/http/modules/ngx_http_stub_status_module.c
src/http/modules/ngx_http_sub_filter_module.c
src/http/modules/ngx_http_upstream_ip_hash_module.c
src/http/modules/ngx_http_upstream_keepalive_module.c
src/http/modules/ngx_http_upstream_least_conn_module.c
src/http/modules/ngx_http_userid_filter_module.c
src/http/modules/ngx_http_uwsgi_module.c
src/http/modules/ngx_http_xslt_filter_module.c
src/http/modules/perl/ngx_http_perl_module.c
src/http/modules/perl/ngx_http_perl_module.h
src/http/ngx_http.c
src/http/ngx_http.h
src/http/ngx_http_busy_lock.c
src/http/ngx_http_busy_lock.h
src/http/ngx_http_cache.h
src/http/ngx_http_config.h
src/http/ngx_http_copy_filter_module.c
src/http/ngx_http_core_module.c
src/http/ngx_http_core_module.h
src/http/ngx_http_file_cache.c
src/http/ngx_http_header_filter_module.c
src/http/ngx_http_parse.c
src/http/ngx_http_parse_time.c
src/http/ngx_http_postpone_filter_module.c
src/http/ngx_http_request.c
src/http/ngx_http_request.h
src/http/ngx_http_request_body.c
src/http/ngx_http_script.c
src/http/ngx_http_script.h
src/http/ngx_http_spdy.c
src/http/ngx_http_spdy.h
src/http/ngx_http_spdy_filter_module.c
src/http/ngx_http_spdy_module.c
src/http/ngx_http_spdy_module.h
src/http/ngx_http_special_response.c
src/http/ngx_http_upstream.c
src/http/ngx_http_upstream.h
src/http/ngx_http_upstream_round_robin.c
src/http/ngx_http_upstream_round_robin.h
src/http/ngx_http_variables.c
src/http/ngx_http_variables.h
src/http/ngx_http_write_filter_module.c
src/mail/ngx_mail.c
src/mail/ngx_mail.h
src/mail/ngx_mail_auth_http_module.c
src/mail/ngx_mail_core_module.c
src/mail/ngx_mail_handler.c
src/mail/ngx_mail_imap_handler.c
src/mail/ngx_mail_imap_module.c
src/mail/ngx_mail_imap_module.h
src/mail/ngx_mail_parse.c
src/mail/ngx_mail_pop3_handler.c
src/mail/ngx_mail_pop3_module.c
src/mail/ngx_mail_pop3_module.h
src/mail/ngx_mail_proxy_module.c
src/mail/ngx_mail_smtp_handler.c
src/mail/ngx_mail_smtp_module.c
src/mail/ngx_mail_smtp_module.h
src/mail/ngx_mail_ssl_module.c
src/mail/ngx_mail_ssl_module.h
src/misc/ngx_cpp_test_module.cpp
src/misc/ngx_google_perftools_module.c
src/os/unix/ngx_aio_read.c
src/os/unix/ngx_aio_read_chain.c
src/os/unix/ngx_aio_write.c
src/os/unix/ngx_aio_write_chain.c
src/os/unix/ngx_alloc.c
src/os/unix/ngx_alloc.h
src/os/unix/ngx_atomic.h
src/os/unix/ngx_channel.c
src/os/unix/ngx_channel.h
src/os/unix/ngx_daemon.c
src/os/unix/ngx_darwin.h
src/os/unix/ngx_darwin_config.h
src/os/unix/ngx_darwin_init.c
src/os/unix/ngx_darwin_sendfile_chain.c
src/os/unix/ngx_errno.c
src/os/unix/ngx_errno.h
src/os/unix/ngx_file_aio_read.c
src/os/unix/ngx_files.c
src/os/unix/ngx_files.h
src/os/unix/ngx_freebsd.h
src/os/unix/ngx_freebsd_config.h
src/os/unix/ngx_freebsd_init.c
src/os/unix/ngx_freebsd_rfork_thread.c
src/os/unix/ngx_freebsd_rfork_thread.h
src/os/unix/ngx_freebsd_sendfile_chain.c
src/os/unix/ngx_gcc_atomic_amd64.h
src/os/unix/ngx_gcc_atomic_ppc.h
src/os/unix/ngx_gcc_atomic_sparc64.h
src/os/unix/ngx_gcc_atomic_x86.h
src/os/unix/ngx_linux.h
src/os/unix/ngx_linux_aio_read.c
src/os/unix/ngx_linux_config.h
src/os/unix/ngx_linux_init.c
src/os/unix/ngx_linux_sendfile_chain.c
src/os/unix/ngx_os.h
src/os/unix/ngx_posix_config.h
src/os/unix/ngx_posix_init.c
src/os/unix/ngx_process.c
src/os/unix/ngx_process.h
src/os/unix/ngx_process_cycle.c
src/os/unix/ngx_process_cycle.h
src/os/unix/ngx_pthread_thread.c
src/os/unix/ngx_readv_chain.c
src/os/unix/ngx_recv.c
src/os/unix/ngx_send.c
src/os/unix/ngx_setaffinity.c
src/os/unix/ngx_setaffinity.h
src/os/unix/ngx_setproctitle.c
src/os/unix/ngx_setproctitle.h
src/os/unix/ngx_shmem.c
src/os/unix/ngx_shmem.h
src/os/unix/ngx_socket.c
src/os/unix/ngx_socket.h
src/os/unix/ngx_solaris.h
src/os/unix/ngx_solaris_config.h
src/os/unix/ngx_solaris_init.c
src/os/unix/ngx_solaris_sendfilev_chain.c
src/os/unix/ngx_sunpro_atomic_sparc64.h
src/os/unix/ngx_thread.h
src/os/unix/ngx_time.c
src/os/unix/ngx_time.h
src/os/unix/ngx_udp_recv.c
src/os/unix/ngx_user.c
src/os/unix/ngx_user.h
src/os/unix/ngx_writev_chain.c
/usr/include/aio.h
/usr/include/arpa/inet.h
/usr/include/crypt.h
/usr/include/dirent.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/glob.h
/usr/include/grp.h
/usr/include/inttypes.h
/usr/include/limits.h
/usr/include/linux/aio_abi.h
/usr/include/malloc.h
/usr/include/netdb.h
/usr/include/netinet/in.h
/usr/include/netinet/tcp.h
/usr/include/openssl/conf.h
/usr/include/openssl/engine.h
/usr/include/openssl/err.h
/usr/include/openssl/evp.h
/usr/include/openssl/md5.h
/usr/include/openssl/ocsp.h
/usr/include/openssl/sha.h
/usr/include/openssl/ssl.h
/usr/include/pcre.h
/usr/include/poll.h
/usr/include/pthread.h
/usr/include/pwd.h
/usr/include/sched.h
/usr/include/semaphore.h
/usr/include/signal.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/time.h
/usr/include/unistd.h
/usr/include/xlocale.h
/usr/include/zlib.h
/usr/include/alloca.h
/usr/include/endian.h
/usr/include/features.h
/usr/include/getopt.h
/usr/include/libio.h
/usr/include/linux/types.h
/usr/include/openssl/bio.h
/usr/include/openssl/bn.h
/usr/include/openssl/buffer.h
/usr/include/openssl/comp.h
/usr/include/openssl/crypto.h
/usr/include/openssl/dh.h
/usr/include/openssl/dsa.h
/usr/include/openssl/dtls1.h
/usr/include/openssl/e_os2.h
/usr/include/openssl/ecdh.h
/usr/include/openssl/ecdsa.h
/usr/include/openssl/hmac.h
/usr/include/openssl/kssl.h
/usr/include/openssl/lhash.h
/usr/include/openssl/objects.h
/usr/include/openssl/opensslconf.h
/usr/include/openssl/ossl_typ.h
/usr/include/openssl/pem.h
/usr/include/openssl/rand.h
/usr/include/openssl/rsa.h
/usr/include/openssl/safestack.h
/usr/include/openssl/srtp.h
/usr/include/openssl/ssl2.h
/usr/include/openssl/ssl23.h
/usr/include/openssl/ssl3.h
/usr/include/openssl/stack.h
/usr/include/openssl/symhacks.h
/usr/include/openssl/tls1.h
/usr/include/openssl/ui.h
/usr/include/openssl/x509.h
/usr/include/openssl/x509v3.h
/usr/include/rpc/netdb.h
/usr/include/stdint.h
/usr/include/zconf.h
/usr/include/_G_config.h
/usr/include/assert.h
/usr/include/ctype.h
/usr/include/linux/posix_types.h
/usr/include/openssl/asn1.h
/usr/include/openssl/ebcdic.h
/usr/include/openssl/ec.h
/usr/include/openssl/obj_mac.h
/usr/include/openssl/opensslv.h
/usr/include/openssl/pem2.h
/usr/include/openssl/pkcs7.h
/usr/include/openssl/pqueue.h
/usr/include/openssl/x509_vfy.h
/usr/include/zlibdefs.h
/usr/include/gconv.h
/usr/include/linux/stddef.h
/usr/include/wchar.h
/usr/include/wctype.h
